// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27326 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 47140 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 47140 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 47140 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 47140 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 47140 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18824 0 1
7815: PPUSH
7816: CALL 18668 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18824 0 1
11310: PPUSH
11311: CALL 18706 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25622 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25622 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16601 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16601 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 50010 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 52272 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17266 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17281 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19372 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19281 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19094 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19372 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16516
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_EXP 127
16305: PUSH
16306: LD_INT 52
16308: PUSH
16309: LD_INT 14
16311: PUSH
16312: LD_INT 53
16314: PUSH
16315: LD_INT 31
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: IN
16329: NOT
16330: IFFALSE 16389
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 13
16339: ARRAY
16340: PUSH
16341: LD_VAR 0 3
16345: PPUSH
16346: CALL 19452 0 1
16350: GREATER
16351: IFFALSE 16372
// AddNewVehicle ( aiData , vehicle , 2 ) else
16353: LD_VAR 0 3
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 2
16365: PPUSH
16366: CALL 18989 0 3
16370: GO 16389
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_INT 4
16384: PPUSH
16385: CALL 18989 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 264
16398: PUSH
16399: LD_INT 12
16401: PUSH
16402: LD_INT 32
16404: PUSH
16405: LD_INT 51
16407: PUSH
16408: LD_INT 13
16410: PUSH
16411: LD_EXP 127
16415: PUSH
16416: LD_INT 52
16418: PUSH
16419: LD_INT 14
16421: PUSH
16422: LD_INT 53
16424: PUSH
16425: LD_INT 31
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: IN
16439: IFFALSE 16458
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL 18989 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16458: LD_EXP 60
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 263
16472: PUSH
16473: LD_INT 2
16475: EQUAL
16476: AND
16477: IFFALSE 16516
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_EXP 60
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 60
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: PPUSH
16503: CALL_OW 313
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: CALL_OW 53
// end ; end ;
16516: PPOPN 3
16518: END
// on BuildingStarted ( building , unit ) do var aiData ;
16519: LD_INT 0
16521: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: LD_VAR 0 2
16531: PPUSH
16532: CALL_OW 255
16536: PPUSH
16537: CALL 19372 0 1
16541: ST_TO_ADDR
// if ( aiData ) then
16542: LD_VAR 0 3
16546: IFFALSE 16571
// begin RemoveDestroyedBuilding ( aiData ) ;
16548: LD_VAR 0 3
16552: PPUSH
16553: CALL 19188 0 1
// AddNewUnit ( aiData , building ) ;
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL 18898 0 2
// end ; end ;
16571: PPOPN 3
16573: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16574: LD_VAR 0 2
16578: PUSH
16579: LD_EXP 51
16583: EQUAL
16584: IFFALSE 16598
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 19
16593: PPUSH
16594: CALL_OW 113
// end ; end_of_file
16598: PPOPN 2
16600: END
// export function FinishMission ; begin
16601: LD_INT 0
16603: PPUSH
// SetRewards ;
16604: CALL 16625 0 0
// SavePlayerCharacters ;
16608: CALL 16804 0 0
// SaveGlobalVariables ;
16612: CALL 17246 0 0
// YouWin ;
16616: CALL_OW 103
// end ;
16620: LD_VAR 0 1
16624: RET
// function SetRewards ; begin
16625: LD_INT 0
16627: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16628: LD_EXP 55
16632: PPUSH
16633: CALL_OW 302
16637: PUSH
16638: LD_EXP 55
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: LD_INT 3
16650: EQUAL
16651: AND
16652: IFFALSE 16666
// AddMedal ( Xavier , 1 ) else
16654: LD_STRING Xavier
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 101
16664: GO 16677
// AddMedal ( Xavier , - 1 ) ;
16666: LD_STRING Xavier
16668: PPUSH
16669: LD_INT 1
16671: NEG
16672: PPUSH
16673: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16677: LD_EXP 19
16681: PUSH
16682: LD_EXP 28
16686: LESSEQUAL
16687: IFFALSE 16701
// AddMedal ( TimeVS , 1 ) else
16689: LD_STRING TimeVS
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 101
16699: GO 16712
// AddMedal ( TimeVS , - 1 ) ;
16701: LD_STRING TimeVS
16703: PPUSH
16704: LD_INT 1
16706: NEG
16707: PPUSH
16708: CALL_OW 101
// if heikeCaptured then
16712: LD_EXP 17
16716: IFFALSE 16730
// AddMedal ( Heike , 1 ) else
16718: LD_STRING Heike
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 101
16728: GO 16741
// AddMedal ( Heike , - 1 ) ;
16730: LD_STRING Heike
16732: PPUSH
16733: LD_INT 1
16735: NEG
16736: PPUSH
16737: CALL_OW 101
// GiveMedals ( Main1 ) ;
16741: LD_STRING Main1
16743: PPUSH
16744: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16748: LD_INT 22
16750: PUSH
16751: LD_INT 3
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 21
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 50
16780: PUSH
16781: EMPTY
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: PPUSH
16795: CALL_OW 43
// end ;
16799: LD_VAR 0 1
16803: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16804: LD_INT 0
16806: PPUSH
16807: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16808: LD_EXP 37
16812: PPUSH
16813: LD_STRING Burlak
16815: PPUSH
16816: LD_INT 3
16818: PPUSH
16819: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16823: LD_EXP 38
16827: PPUSH
16828: LD_STRING Karamazov
16830: PPUSH
16831: LD_INT 3
16833: PPUSH
16834: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16838: LD_EXP 39
16842: PPUSH
16843: LD_STRING Petrovova
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16853: LD_EXP 40
16857: PPUSH
16858: LD_STRING Gleb
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16868: LD_EXP 41
16872: PPUSH
16873: LD_STRING Petrosyan
16875: PPUSH
16876: LD_INT 3
16878: PPUSH
16879: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16883: LD_EXP 43
16887: PPUSH
16888: LD_STRING Dolgov
16890: PPUSH
16891: LD_INT 3
16893: PPUSH
16894: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16898: LD_EXP 44
16902: PPUSH
16903: LD_STRING Lipshchin
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16913: LD_EXP 42
16917: PPUSH
16918: LD_STRING Titov
16920: PPUSH
16921: LD_INT 3
16923: PPUSH
16924: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16928: LD_EXP 45
16932: PPUSH
16933: LD_STRING Kirilenkova
16935: PPUSH
16936: LD_INT 3
16938: PPUSH
16939: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16943: LD_EXP 46
16947: PPUSH
16948: LD_STRING Belkov
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16958: LD_EXP 47
16962: PPUSH
16963: LD_STRING Belkov2
16965: PPUSH
16966: LD_INT 3
16968: PPUSH
16969: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16973: LD_EXP 55
16977: PPUSH
16978: LD_STRING Xavier
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16988: LD_EXP 48
16992: PPUSH
16993: LD_STRING Vsevolod
16995: PPUSH
16996: LD_INT 3
16998: PPUSH
16999: CALL 12290 0 3
// if heikeCaptured then
17003: LD_EXP 17
17007: IFFALSE 17021
// SaveCharacters ( Heike , 07_Heike ) ;
17009: LD_EXP 56
17013: PPUSH
17014: LD_STRING 07_Heike
17016: PPUSH
17017: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17021: LD_INT 22
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 25
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 25
17056: PUSH
17057: LD_INT 16
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 15
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: PPUSH
17090: LD_STRING other_apemans
17092: PPUSH
17093: LD_INT 3
17095: PPUSH
17096: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 23
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PUSH
17145: LD_EXP 37
17149: PUSH
17150: LD_EXP 38
17154: PUSH
17155: LD_EXP 39
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_EXP 41
17169: PUSH
17170: LD_EXP 42
17174: PUSH
17175: LD_EXP 43
17179: PUSH
17180: LD_EXP 44
17184: PUSH
17185: LD_EXP 45
17189: PUSH
17190: LD_EXP 46
17194: PUSH
17195: LD_EXP 47
17199: PUSH
17200: LD_EXP 55
17204: PUSH
17205: LD_EXP 48
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: DIFF
17225: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17226: LD_VAR 0 2
17230: PPUSH
17231: LD_STRING other_survivors
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: CALL 12347 0 3
// end ;
17241: LD_VAR 0 1
17245: RET
// function SaveGlobalVariables ; begin
17246: LD_INT 0
17248: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17249: LD_EXP 17
17253: PPUSH
17254: LD_STRING 07_HeikeCaptured_1
17256: PPUSH
17257: CALL_OW 39
// end ; end_of_file
17261: LD_VAR 0 1
17265: RET
// export function Lose_Burlak ; begin
17266: LD_INT 0
17268: PPUSH
// YouLost ( Burlak ) ;
17269: LD_STRING Burlak
17271: PPUSH
17272: CALL_OW 104
// end ;
17276: LD_VAR 0 1
17280: RET
// export function Lose_Vsevolod ; begin
17281: LD_INT 0
17283: PPUSH
// YouLost ( Sevi ) ;
17284: LD_STRING Sevi
17286: PPUSH
17287: CALL_OW 104
// end ;
17291: LD_VAR 0 1
17295: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17296: LD_EXP 56
17300: PPUSH
17301: LD_INT 9
17303: PPUSH
17304: CALL_OW 308
17308: PUSH
17309: LD_EXP 57
17313: PPUSH
17314: LD_INT 9
17316: PPUSH
17317: CALL_OW 308
17321: OR
17322: IFFALSE 17334
17324: GO 17326
17326: DISABLE
// YouLost ( Heike ) ; end_of_file
17327: LD_STRING Heike
17329: PPUSH
17330: CALL_OW 104
17334: END
// export aiStructDatas ; export function InitAIManager ; begin
17335: LD_INT 0
17337: PPUSH
// aiStructDatas = [ ] ;
17338: LD_ADDR_EXP 62
17342: PUSH
17343: EMPTY
17344: ST_TO_ADDR
// end ;
17345: LD_VAR 0 1
17349: RET
// every 1 do
17350: GO 17352
17352: DISABLE
// begin InitAIManager ;
17353: CALL 17335 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17357: LD_INT 1
17359: PPUSH
17360: LD_INT 0
17362: PPUSH
17363: LD_INT 2
17365: PPUSH
17366: LD_INT 2
17368: PPUSH
17369: LD_EXP 59
17373: PPUSH
17374: LD_INT 10
17376: PPUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PPUSH
17401: CALL_OW 70
17405: PPUSH
17406: EMPTY
17407: PPUSH
17408: LD_INT 10
17410: PPUSH
17411: LD_INT 12
17413: PPUSH
17414: LD_INT 13
17416: PPUSH
17417: LD_INT 11
17419: PPUSH
17420: LD_INT 13
17422: PPUSH
17423: LD_INT 13
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 25
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 26
17443: PUSH
17444: LD_INT 28
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 13
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 27
17474: PUSH
17475: LD_INT 23
17477: PUSH
17478: LD_INT 26
17480: PUSH
17481: LD_INT 28
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: LD_INT 13
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 27
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 26
17521: PUSH
17522: LD_INT 28
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 13
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 25
17549: PUSH
17550: LD_INT 27
17552: PUSH
17553: LD_INT 23
17555: PUSH
17556: LD_INT 26
17558: PUSH
17559: LD_INT 28
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 13
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 25
17586: PUSH
17587: LD_INT 27
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 26
17595: PUSH
17596: LD_INT 28
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PPUSH
17617: LD_INT 1
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PPUSH
17631: LD_INT 5250
17633: PPUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL 18524 0 20
// end ;
17661: END
// every 0 0$1 do
17662: GO 17664
17664: DISABLE
// begin StateManager ( 1 ) ;
17665: LD_INT 1
17667: PPUSH
17668: CALL 19672 0 1
// MechanicsManager ( 1 ) ;
17672: LD_INT 1
17674: PPUSH
17675: CALL 20785 0 1
// VehiclesManager ( 1 ) ;
17679: LD_INT 1
17681: PPUSH
17682: CALL 21049 0 1
// SoldiersManager ( 1 ) ;
17686: LD_INT 1
17688: PPUSH
17689: CALL 20158 0 1
// DefenceManager ( 1 ) ;
17693: LD_INT 1
17695: PPUSH
17696: CALL 21559 0 1
// CollectCrates ( 1 ) ;
17700: LD_INT 1
17702: PPUSH
17703: CALL 22491 0 1
// FleeToHealArea ( 1 ) ;
17707: LD_INT 1
17709: PPUSH
17710: CALL 22681 0 1
// FleeToRepairArea ( 1 ) ;
17714: LD_INT 1
17716: PPUSH
17717: CALL 22812 0 1
// RepairBuildings ( 1 ) ;
17721: LD_INT 1
17723: PPUSH
17724: CALL 22968 0 1
// HealDamageUnits ( 1 ) ;
17728: LD_INT 1
17730: PPUSH
17731: CALL 23713 0 1
// enable ;
17735: ENABLE
// end ;
17736: END
// every 0 0$1 do
17737: GO 17739
17739: DISABLE
// begin ProduceVehicles ( 1 ) ;
17740: LD_INT 1
17742: PPUSH
17743: CALL 24211 0 1
// enable ;
17747: ENABLE
// end ;
17748: END
// every 0 0$1 do
17749: GO 17751
17751: DISABLE
// begin AttackManager ( 1 ) ;
17752: LD_INT 1
17754: PPUSH
17755: CALL 22057 0 1
// enable ;
17759: ENABLE
// end ;
17760: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17761: LD_INT 14
17763: PPUSH
17764: LD_INT 22
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PPUSH
17774: CALL_OW 70
17778: PUSH
17779: LD_INT 15
17781: PPUSH
17782: LD_INT 22
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 70
17796: OR
17797: PUSH
17798: LD_INT 16
17800: PPUSH
17801: LD_INT 22
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 70
17815: OR
17816: PUSH
17817: LD_INT 17
17819: PPUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 70
17834: OR
17835: PUSH
17836: LD_INT 18
17838: PPUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 70
17853: OR
17854: PUSH
17855: LD_EXP 61
17859: AND
17860: IFFALSE 18280
17862: GO 17864
17864: DISABLE
17865: LD_INT 0
17867: PPUSH
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin unitsInArea = [ ] ;
17872: LD_ADDR_VAR 0 2
17876: PUSH
17877: EMPTY
17878: ST_TO_ADDR
// tmp = [ ] ;
17879: LD_ADDR_VAR 0 5
17883: PUSH
17884: EMPTY
17885: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: LD_VAR 0 2
17895: PUSH
17896: LD_INT 14
17898: PPUSH
17899: LD_INT 22
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 70
17913: ADD
17914: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: LD_INT 15
17927: PPUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 70
17942: ADD
17943: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_VAR 0 2
17953: PUSH
17954: LD_INT 16
17956: PPUSH
17957: LD_INT 22
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 70
17971: ADD
17972: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: LD_INT 17
17985: PPUSH
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 70
18000: ADD
18001: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 18
18014: PPUSH
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 70
18029: ADD
18030: ST_TO_ADDR
// for unit in unitsInArea do
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 2
18040: PUSH
18041: FOR_IN
18042: IFFALSE 18277
// begin if GetType ( unit ) = unit_human then
18044: LD_VAR 0 3
18048: PPUSH
18049: CALL_OW 247
18053: PUSH
18054: LD_INT 1
18056: EQUAL
18057: IFFALSE 18069
// minDistance = 3 else
18059: LD_ADDR_VAR 0 4
18063: PUSH
18064: LD_INT 3
18066: ST_TO_ADDR
18067: GO 18077
// minDistance = 4 ;
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: LD_INT 4
18076: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: DOUBLE
18083: LD_INT 1
18085: DEC
18086: ST_TO_ADDR
18087: LD_EXP 61
18091: PUSH
18092: LD_INT 2
18094: DIV
18095: PUSH
18096: FOR_TO
18097: IFFALSE 18256
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18099: LD_EXP 61
18103: PUSH
18104: LD_VAR 0 1
18108: PUSH
18109: LD_INT 2
18111: MUL
18112: PUSH
18113: LD_INT 1
18115: MINUS
18116: ARRAY
18117: PPUSH
18118: LD_EXP 61
18122: PUSH
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 2
18130: MUL
18131: ARRAY
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 250
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: CALL_OW 251
18152: PPUSH
18153: CALL_OW 298
18157: PUSH
18158: LD_VAR 0 4
18162: LESS
18163: IFFALSE 18208
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18165: LD_EXP 61
18169: PUSH
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 2
18177: MUL
18178: PUSH
18179: LD_INT 1
18181: MINUS
18182: ARRAY
18183: PPUSH
18184: LD_EXP 61
18188: PUSH
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 2
18196: MUL
18197: ARRAY
18198: PPUSH
18199: LD_INT 2
18201: PPUSH
18202: CALL_OW 456
18206: GO 18254
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_VAR 0 5
18217: PUSH
18218: LD_EXP 61
18222: PUSH
18223: LD_VAR 0 1
18227: PUSH
18228: LD_INT 2
18230: MUL
18231: PUSH
18232: LD_INT 1
18234: MINUS
18235: ARRAY
18236: ADD
18237: PUSH
18238: LD_EXP 61
18242: PUSH
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 2
18250: MUL
18251: ARRAY
18252: ADD
18253: ST_TO_ADDR
18254: GO 18096
18256: POP
18257: POP
// minesList = tmp ;
18258: LD_ADDR_EXP 61
18262: PUSH
18263: LD_VAR 0 5
18267: ST_TO_ADDR
// tmp := [ ] ;
18268: LD_ADDR_VAR 0 5
18272: PUSH
18273: EMPTY
18274: ST_TO_ADDR
// end ;
18275: GO 18041
18277: POP
18278: POP
// enable ;
18279: ENABLE
// end ;
18280: PPOPN 5
18282: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18283: LD_INT 2
18285: PPUSH
18286: CALL_OW 255
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: PUSH
18295: LD_INT 2
18297: PPUSH
18298: CALL_OW 303
18302: OR
18303: IFFALSE 18432
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 50
18329: PUSH
18330: EMPTY
18331: LIST
18332: PUSH
18333: LD_INT 21
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 30
18345: PUSH
18346: LD_INT 32
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18430
// if UnitsInside ( turret ) then
18367: LD_VAR 0 2
18371: PPUSH
18372: CALL_OW 313
18376: IFFALSE 18428
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 313
18392: PUSH
18393: LD_INT 1
18395: ARRAY
18396: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 122
// wait ( 0 0$01 ) ;
18406: LD_INT 35
18408: PPUSH
18409: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 103
18420: PPUSH
18421: LD_INT 48
18423: PPUSH
18424: CALL_OW 114
// end ;
18428: GO 18364
18430: POP
18431: POP
// end ;
18432: PPOPN 2
18434: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18444: LD_ADDR_VAR 0 4
18448: PUSH
18449: LD_INT 2
18451: PPUSH
18452: LD_INT 2
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL 42339 0 3
18462: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: DOUBLE
18469: LD_INT 1
18471: DEC
18472: ST_TO_ADDR
18473: LD_VAR 0 4
18477: PUSH
18478: FOR_TO
18479: IFFALSE 18519
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18481: LD_INT 13
18483: PPUSH
18484: LD_VAR 0 4
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18499: LD_INT 14
18501: PPUSH
18502: LD_VAR 0 4
18506: PUSH
18507: LD_VAR 0 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 184
// end ;
18517: GO 18478
18519: POP
18520: POP
// end ;
18521: PPOPN 4
18523: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18524: LD_INT 0
18526: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18527: LD_ADDR_EXP 62
18531: PUSH
18532: LD_EXP 62
18536: PUSH
18537: LD_VAR 0 1
18541: PUSH
18542: LD_VAR 0 2
18546: PUSH
18547: LD_VAR 0 3
18551: PUSH
18552: LD_VAR 0 4
18556: PUSH
18557: LD_VAR 0 5
18561: PUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_VAR 0 7
18571: PUSH
18572: LD_VAR 0 8
18576: PUSH
18577: LD_VAR 0 9
18581: PUSH
18582: LD_VAR 0 10
18586: PUSH
18587: LD_VAR 0 11
18591: PUSH
18592: LD_VAR 0 12
18596: PUSH
18597: LD_VAR 0 13
18601: PUSH
18602: LD_VAR 0 14
18606: PUSH
18607: LD_VAR 0 15
18611: PUSH
18612: LD_VAR 0 16
18616: PUSH
18617: LD_VAR 0 17
18621: PUSH
18622: LD_VAR 0 18
18626: PUSH
18627: LD_VAR 0 19
18631: PUSH
18632: LD_VAR 0 20
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: ADD
18662: ST_TO_ADDR
// end ;
18663: LD_VAR 0 21
18667: RET
// export function ActiveAI ( index ) ; begin
18668: LD_INT 0
18670: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18671: LD_ADDR_EXP 62
18675: PUSH
18676: LD_EXP 62
18680: PPUSH
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: LD_INT 1
18695: PPUSH
18696: CALL 47262 0 3
18700: ST_TO_ADDR
// end ;
18701: LD_VAR 0 2
18705: RET
// export function DeactiveAI ( index ) ; begin
18706: LD_INT 0
18708: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18709: LD_ADDR_EXP 62
18713: PUSH
18714: LD_EXP 62
18718: PPUSH
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL 47262 0 3
18738: ST_TO_ADDR
// end ;
18739: LD_VAR 0 2
18743: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// for i := 1 to aiStructDatas do
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 62
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18766: LD_EXP 62
18770: PUSH
18771: LD_VAR 0 3
18775: ARRAY
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PUSH
18781: LD_VAR 0 1
18785: EQUAL
18786: IFFALSE 18808
// begin result = aiStructDatas [ i ] ;
18788: LD_ADDR_VAR 0 2
18792: PUSH
18793: LD_EXP 62
18797: PUSH
18798: LD_VAR 0 3
18802: ARRAY
18803: ST_TO_ADDR
// exit ;
18804: POP
18805: POP
18806: GO 18819
// end ;
18808: GO 18763
18810: POP
18811: POP
// result = [ ] ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: EMPTY
18818: ST_TO_ADDR
// end ;
18819: LD_VAR 0 2
18823: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18824: LD_INT 0
18826: PPUSH
18827: PPUSH
// for i := 1 to aiStructDatas do
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: DOUBLE
18834: LD_INT 1
18836: DEC
18837: ST_TO_ADDR
18838: LD_EXP 62
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18884
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18846: LD_EXP 62
18850: PUSH
18851: LD_VAR 0 3
18855: ARRAY
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PUSH
18861: LD_VAR 0 1
18865: EQUAL
18866: IFFALSE 18882
// begin result = i ;
18868: LD_ADDR_VAR 0 2
18872: PUSH
18873: LD_VAR 0 3
18877: ST_TO_ADDR
// exit ;
18878: POP
18879: POP
18880: GO 18893
// end ;
18882: GO 18843
18884: POP
18885: POP
// result = [ ] ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: EMPTY
18892: ST_TO_ADDR
// end ;
18893: LD_VAR 0 2
18897: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18903: LD_ADDR_VAR 0 4
18907: PUSH
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PPUSH
18917: CALL 18824 0 1
18921: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18922: LD_ADDR_VAR 0 5
18926: PUSH
18927: LD_VAR 0 1
18931: PUSH
18932: LD_INT 5
18934: ARRAY
18935: ST_TO_ADDR
// newArray = newArray ^ unit ;
18936: LD_ADDR_VAR 0 5
18940: PUSH
18941: LD_VAR 0 5
18945: PUSH
18946: LD_VAR 0 2
18950: ADD
18951: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18952: LD_ADDR_EXP 62
18956: PUSH
18957: LD_EXP 62
18961: PPUSH
18962: LD_VAR 0 4
18966: PUSH
18967: LD_INT 5
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: LD_VAR 0 5
18978: PPUSH
18979: CALL 47262 0 3
18983: ST_TO_ADDR
// end ;
18984: LD_VAR 0 3
18988: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
18993: PPUSH
// SetTag ( veh , state ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: PPUSH
19022: CALL 18824 0 1
19026: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19027: LD_ADDR_VAR 0 6
19031: PUSH
19032: LD_VAR 0 1
19036: PUSH
19037: LD_INT 5
19039: ARRAY
19040: ST_TO_ADDR
// newArray = newArray ^ veh ;
19041: LD_ADDR_VAR 0 6
19045: PUSH
19046: LD_VAR 0 6
19050: PUSH
19051: LD_VAR 0 2
19055: ADD
19056: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19057: LD_ADDR_EXP 62
19061: PUSH
19062: LD_EXP 62
19066: PPUSH
19067: LD_VAR 0 5
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: LD_VAR 0 6
19083: PPUSH
19084: CALL 47262 0 3
19088: ST_TO_ADDR
// end ;
19089: LD_VAR 0 4
19093: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19094: LD_INT 0
19096: PPUSH
19097: PPUSH
19098: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: LD_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: CALL 18824 0 1
19117: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19118: LD_ADDR_VAR 0 5
19122: PUSH
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 7
19130: ARRAY
19131: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_VAR 0 5
19141: PUSH
19142: LD_VAR 0 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: ADD
19150: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19151: LD_ADDR_EXP 62
19155: PUSH
19156: LD_EXP 62
19160: PPUSH
19161: LD_VAR 0 4
19165: PUSH
19166: LD_INT 7
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PPUSH
19173: LD_VAR 0 5
19177: PPUSH
19178: CALL 47262 0 3
19182: ST_TO_ADDR
// end ;
19183: LD_VAR 0 3
19187: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
19192: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19193: LD_ADDR_VAR 0 3
19197: PUSH
19198: LD_VAR 0 1
19202: PUSH
19203: LD_INT 1
19205: ARRAY
19206: PPUSH
19207: CALL 18824 0 1
19211: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19212: LD_ADDR_VAR 0 4
19216: PUSH
19217: LD_VAR 0 1
19221: PUSH
19222: LD_INT 7
19224: ARRAY
19225: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19226: LD_ADDR_VAR 0 4
19230: PUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 3
19243: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19244: LD_ADDR_EXP 62
19248: PUSH
19249: LD_EXP 62
19253: PPUSH
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 7
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PPUSH
19266: LD_VAR 0 4
19270: PPUSH
19271: CALL 47262 0 3
19275: ST_TO_ADDR
// end ;
19276: LD_VAR 0 2
19280: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
19285: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: CALL 18824 0 1
19304: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19305: LD_ADDR_VAR 0 5
19309: PUSH
19310: LD_VAR 0 1
19314: PUSH
19315: LD_INT 5
19317: ARRAY
19318: ST_TO_ADDR
// newArray = newArray diff unit ;
19319: LD_ADDR_VAR 0 5
19323: PUSH
19324: LD_VAR 0 5
19328: PUSH
19329: LD_VAR 0 2
19333: DIFF
19334: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19335: LD_ADDR_EXP 62
19339: PUSH
19340: LD_EXP 62
19344: PPUSH
19345: LD_VAR 0 4
19349: PUSH
19350: LD_INT 5
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: LD_VAR 0 5
19361: PPUSH
19362: CALL 47262 0 3
19366: ST_TO_ADDR
// end ;
19367: LD_VAR 0 3
19371: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// for i := 1 to aiStructDatas do
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: DOUBLE
19382: LD_INT 1
19384: DEC
19385: ST_TO_ADDR
19386: LD_EXP 62
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19438
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19394: LD_EXP 62
19398: PUSH
19399: LD_VAR 0 3
19403: ARRAY
19404: PUSH
19405: LD_INT 3
19407: ARRAY
19408: PUSH
19409: LD_VAR 0 1
19413: EQUAL
19414: IFFALSE 19436
// begin result = aiStructDatas [ i ] ;
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_EXP 62
19425: PUSH
19426: LD_VAR 0 3
19430: ARRAY
19431: ST_TO_ADDR
// exit ;
19432: POP
19433: POP
19434: GO 19447
// end ;
19436: GO 19391
19438: POP
19439: POP
// result = [ ] ;
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: EMPTY
19446: ST_TO_ADDR
// end ;
19447: LD_VAR 0 2
19451: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// if not aiData then
19457: LD_VAR 0 1
19461: NOT
19462: IFFALSE 19473
// begin result = [ ] ;
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: EMPTY
19470: ST_TO_ADDR
// exit ;
19471: GO 19557
// end ; defVehs = [ ] ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: EMPTY
19479: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19480: LD_ADDR_VAR 0 4
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: LD_INT 5
19492: ARRAY
19493: PPUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 72
19508: PUSH
19509: FOR_IN
19510: IFFALSE 19545
// if GetTag ( veh ) = 2 then
19512: LD_VAR 0 4
19516: PPUSH
19517: CALL_OW 110
19521: PUSH
19522: LD_INT 2
19524: EQUAL
19525: IFFALSE 19543
// defVehs = defVehs ^ veh ;
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: LD_VAR 0 3
19536: PUSH
19537: LD_VAR 0 4
19541: ADD
19542: ST_TO_ADDR
19543: GO 19509
19545: POP
19546: POP
// result = defVehs ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 3
19556: ST_TO_ADDR
// end ;
19557: LD_VAR 0 2
19561: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
// if not aiData then
19567: LD_VAR 0 1
19571: NOT
19572: IFFALSE 19583
// begin result = [ ] ;
19574: LD_ADDR_VAR 0 2
19578: PUSH
19579: EMPTY
19580: ST_TO_ADDR
// exit ;
19581: GO 19667
// end ; attackVehs = [ ] ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: EMPTY
19589: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19590: LD_ADDR_VAR 0 4
19594: PUSH
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 5
19602: ARRAY
19603: PPUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 72
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19655
// if GetTag ( veh ) = 4 then
19622: LD_VAR 0 4
19626: PPUSH
19627: CALL_OW 110
19631: PUSH
19632: LD_INT 4
19634: EQUAL
19635: IFFALSE 19653
// attackVehs = attackVehs ^ veh ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 3
19646: PUSH
19647: LD_VAR 0 4
19651: ADD
19652: ST_TO_ADDR
19653: GO 19619
19655: POP
19656: POP
// result = attackVehs ;
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: LD_VAR 0 3
19666: ST_TO_ADDR
// end ;
19667: LD_VAR 0 2
19671: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19672: LD_INT 0
19674: PPUSH
19675: PPUSH
19676: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19677: LD_ADDR_VAR 0 3
19681: PUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 18744 0 1
19691: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: PUSH
19701: LD_INT 0
19703: EQUAL
19704: IFFALSE 19708
// exit ;
19706: GO 20153
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19708: LD_ADDR_VAR 0 4
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 5
19720: ARRAY
19721: PPUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 72
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19843
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19740: LD_VAR 0 4
19744: PPUSH
19745: CALL_OW 256
19749: PUSH
19750: LD_INT 1000
19752: EQUAL
19753: PUSH
19754: LD_VAR 0 4
19758: PPUSH
19759: CALL_OW 110
19763: PUSH
19764: LD_INT 0
19766: EQUAL
19767: AND
19768: IFFALSE 19784
// SetTag ( unit , 1 ) else
19770: LD_VAR 0 4
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 109
19782: GO 19841
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19784: LD_VAR 0 4
19788: PPUSH
19789: CALL_OW 256
19793: PUSH
19794: LD_INT 950
19796: LESSEQUAL
19797: PUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: CALL_OW 256
19807: PUSH
19808: LD_INT 250
19810: GREATER
19811: AND
19812: PUSH
19813: LD_VAR 0 4
19817: PPUSH
19818: CALL_OW 110
19822: PUSH
19823: LD_INT 1
19825: EQUAL
19826: AND
19827: IFFALSE 19841
// SetTag ( unit , 0 ) ;
19829: LD_VAR 0 4
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 109
// end ;
19841: GO 19737
19843: POP
19844: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19845: LD_ADDR_VAR 0 4
19849: PUSH
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 5
19857: ARRAY
19858: PPUSH
19859: LD_INT 21
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 72
19873: PUSH
19874: FOR_IN
19875: IFFALSE 20151
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 256
19886: PUSH
19887: LD_INT 1000
19889: EQUAL
19890: PUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 110
19900: PUSH
19901: LD_INT 3
19903: EQUAL
19904: AND
19905: IFFALSE 19919
// SetTag ( unit , 2 ) ;
19907: LD_VAR 0 4
19911: PPUSH
19912: LD_INT 2
19914: PPUSH
19915: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19919: LD_VAR 0 4
19923: PPUSH
19924: CALL_OW 256
19928: PUSH
19929: LD_INT 1000
19931: EQUAL
19932: PUSH
19933: LD_VAR 0 4
19937: PPUSH
19938: CALL_OW 110
19942: PUSH
19943: LD_INT 5
19945: EQUAL
19946: AND
19947: IFFALSE 19961
// SetTag ( unit , 4 ) ;
19949: LD_VAR 0 4
19953: PPUSH
19954: LD_INT 4
19956: PPUSH
19957: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19961: LD_VAR 0 4
19965: PPUSH
19966: CALL_OW 256
19970: PUSH
19971: LD_INT 650
19973: LESSEQUAL
19974: PUSH
19975: LD_VAR 0 4
19979: PPUSH
19980: CALL_OW 110
19984: PUSH
19985: LD_INT 4
19987: EQUAL
19988: AND
19989: PUSH
19990: LD_VAR 0 4
19994: PPUSH
19995: CALL_OW 263
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: AND
20004: IFFALSE 20018
// SetTag ( unit , 5 ) ;
20006: LD_VAR 0 4
20010: PPUSH
20011: LD_INT 5
20013: PPUSH
20014: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20018: LD_VAR 0 4
20022: PPUSH
20023: CALL_OW 256
20027: PUSH
20028: LD_INT 650
20030: LESSEQUAL
20031: PUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: CALL_OW 110
20041: PUSH
20042: LD_INT 2
20044: EQUAL
20045: AND
20046: PUSH
20047: LD_VAR 0 4
20051: PPUSH
20052: CALL_OW 263
20056: PUSH
20057: LD_INT 1
20059: EQUAL
20060: AND
20061: IFFALSE 20075
// SetTag ( unit , 3 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_INT 3
20070: PPUSH
20071: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20075: LD_VAR 0 4
20079: PPUSH
20080: CALL_OW 263
20084: PUSH
20085: LD_INT 1
20087: EQUAL
20088: IFFALSE 20122
// if ( UnitsInside ( unit ) ) then
20090: LD_VAR 0 4
20094: PPUSH
20095: CALL_OW 313
20099: IFFALSE 20122
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20101: LD_VAR 0 4
20105: PPUSH
20106: CALL_OW 313
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PPUSH
20115: LD_INT 7
20117: PPUSH
20118: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20122: LD_VAR 0 4
20126: PPUSH
20127: CALL_OW 261
20131: PUSH
20132: LD_INT 50
20134: LESS
20135: IFFALSE 20149
// SetFuel ( unit , 100 ) ;
20137: LD_VAR 0 4
20141: PPUSH
20142: LD_INT 100
20144: PPUSH
20145: CALL_OW 240
// end ;
20149: GO 19874
20151: POP
20152: POP
// end ;
20153: LD_VAR 0 2
20157: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL 18744 0 1
20184: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: PUSH
20194: LD_INT 0
20196: EQUAL
20197: IFFALSE 20201
// exit ;
20199: GO 20780
// soldiersInsideBarracks = [ ] ;
20201: LD_ADDR_VAR 0 10
20205: PUSH
20206: EMPTY
20207: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20208: LD_ADDR_VAR 0 4
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 5
20220: ARRAY
20221: PPUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 50
20234: PUSH
20235: EMPTY
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 72
20246: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20247: LD_ADDR_VAR 0 6
20251: PUSH
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 6
20259: ARRAY
20260: PPUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 50
20273: PUSH
20274: EMPTY
20275: LIST
20276: PUSH
20277: LD_INT 3
20279: PUSH
20280: LD_INT 59
20282: PUSH
20283: EMPTY
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 30
20295: PUSH
20296: LD_INT 31
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 32
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 72
20328: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 3
20338: PUSH
20339: LD_INT 6
20341: ARRAY
20342: PPUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 3
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 50
20355: PUSH
20356: EMPTY
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 30
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 72
20396: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20397: LD_ADDR_VAR 0 9
20401: PUSH
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 6
20409: ARRAY
20410: PPUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 3
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 50
20423: PUSH
20424: EMPTY
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 30
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 72
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: ST_TO_ADDR
// for barrack in barracks do
20469: LD_ADDR_VAR 0 11
20473: PUSH
20474: LD_VAR 0 7
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20505
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: LD_VAR 0 10
20491: PUSH
20492: LD_VAR 0 11
20496: PPUSH
20497: CALL_OW 313
20501: ADD
20502: ST_TO_ADDR
20503: GO 20479
20505: POP
20506: POP
// index = 1 ;
20507: LD_ADDR_VAR 0 8
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_INT 56
20522: PUSH
20523: EMPTY
20524: LIST
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 60
20531: PUSH
20532: EMPTY
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 72
20547: PUSH
20548: LD_VAR 0 6
20552: AND
20553: PUSH
20554: LD_VAR 0 9
20558: AND
20559: IFFALSE 20659
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20561: LD_ADDR_VAR 0 5
20565: PUSH
20566: LD_VAR 0 4
20570: PPUSH
20571: LD_INT 56
20573: PUSH
20574: EMPTY
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: PPUSH
20580: CALL_OW 72
20584: PUSH
20585: LD_VAR 0 10
20589: ADD
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20657
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20594: LD_VAR 0 5
20598: PPUSH
20599: CALL_OW 110
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: PUSH
20608: LD_VAR 0 8
20612: PUSH
20613: LD_VAR 0 6
20617: LESSEQUAL
20618: AND
20619: IFFALSE 20655
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20621: LD_VAR 0 5
20625: PPUSH
20626: LD_VAR 0 6
20630: PUSH
20631: LD_VAR 0 8
20635: ARRAY
20636: PPUSH
20637: CALL_OW 120
// index = index + 1 ;
20641: LD_ADDR_VAR 0 8
20645: PUSH
20646: LD_VAR 0 8
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: ST_TO_ADDR
// end ;
20655: GO 20591
20657: POP
20658: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_INT 56
20666: PUSH
20667: EMPTY
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 60
20675: PUSH
20676: EMPTY
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PPUSH
20687: CALL_OW 72
20691: PUSH
20692: LD_VAR 0 6
20696: NOT
20697: AND
20698: PUSH
20699: LD_VAR 0 7
20703: AND
20704: IFFALSE 20780
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20706: LD_ADDR_VAR 0 5
20710: PUSH
20711: LD_VAR 0 4
20715: PPUSH
20716: LD_INT 56
20718: PUSH
20719: EMPTY
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: PPUSH
20725: CALL_OW 72
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20778
// if ( GetTag ( sold ) = 1 ) then
20733: LD_VAR 0 5
20737: PPUSH
20738: CALL_OW 110
20742: PUSH
20743: LD_INT 1
20745: EQUAL
20746: IFFALSE 20776
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20748: LD_VAR 0 5
20752: PPUSH
20753: LD_VAR 0 7
20757: PUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 12
20770: ARRAY
20771: PPUSH
20772: CALL_OW 120
20776: GO 20730
20778: POP
20779: POP
// end ;
20780: LD_VAR 0 2
20784: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20785: LD_INT 0
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL 18744 0 1
20806: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 2
20814: ARRAY
20815: PUSH
20816: LD_INT 0
20818: EQUAL
20819: IFFALSE 20823
// exit ;
20821: GO 21044
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 5
20835: ARRAY
20836: PPUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 50
20849: PUSH
20850: EMPTY
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PPUSH
20857: CALL_OW 72
20861: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20862: LD_ADDR_VAR 0 6
20866: PUSH
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 6
20874: ARRAY
20875: PPUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 50
20888: PUSH
20889: EMPTY
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 30
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 72
20929: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20930: LD_VAR 0 4
20934: PPUSH
20935: LD_INT 56
20937: PUSH
20938: EMPTY
20939: LIST
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 60
20946: PUSH
20947: EMPTY
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 72
20962: PUSH
20963: LD_VAR 0 6
20967: AND
20968: IFFALSE 21044
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 4
20979: PPUSH
20980: LD_INT 56
20982: PUSH
20983: EMPTY
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: PPUSH
20989: CALL_OW 72
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21042
// if ( GetTag ( mech ) = 1 ) then
20997: LD_VAR 0 5
21001: PPUSH
21002: CALL_OW 110
21006: PUSH
21007: LD_INT 1
21009: EQUAL
21010: IFFALSE 21040
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21012: LD_VAR 0 5
21016: PPUSH
21017: LD_VAR 0 6
21021: PUSH
21022: LD_INT 1
21024: PPUSH
21025: LD_VAR 0 6
21029: PPUSH
21030: CALL_OW 12
21034: ARRAY
21035: PPUSH
21036: CALL_OW 120
21040: GO 20994
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 2
21048: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21060: LD_ADDR_VAR 0 3
21064: PUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL 18744 0 1
21074: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 2
21082: ARRAY
21083: PUSH
21084: LD_INT 0
21086: EQUAL
21087: IFFALSE 21091
// exit ;
21089: GO 21554
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21091: LD_ADDR_VAR 0 5
21095: PUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 5
21103: ARRAY
21104: PPUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 50
21117: PUSH
21118: EMPTY
21119: LIST
21120: PUSH
21121: LD_INT 59
21123: PUSH
21124: EMPTY
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: LD_INT 30
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 30
21142: PUSH
21143: LD_INT 3
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 72
21165: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21166: LD_ADDR_VAR 0 8
21170: PUSH
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 5
21178: ARRAY
21179: PPUSH
21180: LD_INT 21
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 92
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 10
21210: ARRAY
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 517
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PUSH
21228: LD_VAR 0 3
21232: PUSH
21233: LD_INT 10
21235: ARRAY
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 517
21244: PUSH
21245: LD_INT 2
21247: ARRAY
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PUSH
21253: LD_INT 16
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 24
21267: PUSH
21268: LD_INT 1000
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 72
21289: ST_TO_ADDR
// if not damageVehicles then
21290: LD_VAR 0 8
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21554
// if fabs then
21299: LD_VAR 0 5
21303: IFFALSE 21428
// begin for damageVeh in damageVehicles do
21305: LD_ADDR_VAR 0 9
21309: PUSH
21310: LD_VAR 0 8
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21426
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21318: LD_VAR 0 9
21322: PPUSH
21323: CALL_OW 110
21327: PUSH
21328: LD_INT 3
21330: EQUAL
21331: PUSH
21332: LD_VAR 0 9
21336: PPUSH
21337: CALL_OW 110
21341: PUSH
21342: LD_INT 5
21344: EQUAL
21345: OR
21346: IFFALSE 21424
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21348: LD_ADDR_VAR 0 7
21352: PUSH
21353: LD_VAR 0 5
21357: PPUSH
21358: LD_VAR 0 9
21362: PPUSH
21363: CALL_OW 74
21367: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21368: LD_ADDR_VAR 0 4
21372: PUSH
21373: LD_VAR 0 7
21377: PPUSH
21378: CALL_OW 313
21382: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21383: LD_VAR 0 4
21387: PPUSH
21388: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21392: LD_VAR 0 4
21396: PPUSH
21397: LD_INT 3
21399: PUSH
21400: LD_INT 60
21402: PUSH
21403: EMPTY
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 72
21414: PPUSH
21415: LD_VAR 0 9
21419: PPUSH
21420: CALL_OW 189
// end ;
21424: GO 21315
21426: POP
21427: POP
// end ; for damageVeh in damageVehicles do
21428: LD_ADDR_VAR 0 9
21432: PUSH
21433: LD_VAR 0 8
21437: PUSH
21438: FOR_IN
21439: IFFALSE 21552
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21441: LD_VAR 0 9
21445: PPUSH
21446: CALL_OW 110
21450: PUSH
21451: LD_INT 3
21453: EQUAL
21454: PUSH
21455: LD_VAR 0 9
21459: PPUSH
21460: CALL_OW 110
21464: PUSH
21465: LD_INT 5
21467: EQUAL
21468: OR
21469: IFFALSE 21550
// begin mehInside = UnitsInside ( damageVeh ) ;
21471: LD_ADDR_VAR 0 10
21475: PUSH
21476: LD_VAR 0 9
21480: PPUSH
21481: CALL_OW 313
21485: ST_TO_ADDR
// if mehInside then
21486: LD_VAR 0 10
21490: IFFALSE 21550
// begin mehInside = mehInside [ 1 ] ;
21492: LD_ADDR_VAR 0 10
21496: PUSH
21497: LD_VAR 0 10
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21506: LD_VAR 0 10
21510: PPUSH
21511: CALL_OW 181
// wait ( 0 0$01 ) ;
21515: LD_INT 35
21517: PPUSH
21518: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21522: LD_VAR 0 10
21526: PPUSH
21527: LD_VAR 0 9
21531: PPUSH
21532: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21536: LD_VAR 0 10
21540: PPUSH
21541: LD_VAR 0 9
21545: PPUSH
21546: CALL_OW 180
// end ; end ;
21550: GO 21438
21552: POP
21553: POP
// end ;
21554: LD_VAR 0 2
21558: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 18744 0 1
21581: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21582: LD_VAR 0 3
21586: PUSH
21587: LD_INT 2
21589: ARRAY
21590: PUSH
21591: LD_INT 0
21593: EQUAL
21594: IFFALSE 21598
// exit ;
21596: GO 22052
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21598: LD_ADDR_VAR 0 7
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 6
21610: ARRAY
21611: PPUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 50
21624: PUSH
21625: EMPTY
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 30
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 30
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 72
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21670: LD_VAR 0 3
21674: PPUSH
21675: CALL 19452 0 1
21679: NOT
21680: IFFALSE 21684
// exit ;
21682: GO 22052
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21684: LD_VAR 0 7
21688: PUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL 19452 0 1
21698: AND
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 11
21707: ARRAY
21708: PPUSH
21709: LD_INT 81
21711: PUSH
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 3
21719: ARRAY
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 70
21729: NOT
21730: AND
21731: IFFALSE 21881
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21733: LD_ADDR_VAR 0 5
21737: PUSH
21738: LD_VAR 0 3
21742: PPUSH
21743: CALL 19452 0 1
21747: PPUSH
21748: LD_INT 50
21750: PUSH
21751: EMPTY
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 60
21759: PUSH
21760: EMPTY
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 92
21772: PUSH
21773: LD_VAR 0 7
21777: PPUSH
21778: CALL_OW 250
21782: PUSH
21783: LD_VAR 0 7
21787: PPUSH
21788: CALL_OW 251
21792: PUSH
21793: LD_INT 12
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: PPUSH
21811: CALL_OW 72
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21879
// if GetLives ( veh ) = 1000 then
21819: LD_VAR 0 5
21823: PPUSH
21824: CALL_OW 256
21828: PUSH
21829: LD_INT 1000
21831: EQUAL
21832: IFFALSE 21865
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21834: LD_VAR 0 5
21838: PPUSH
21839: LD_VAR 0 7
21843: PPUSH
21844: CALL_OW 250
21848: PPUSH
21849: LD_VAR 0 7
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: CALL_OW 111
21863: GO 21877
// SetTag ( veh , 3 ) ;
21865: LD_VAR 0 5
21869: PPUSH
21870: LD_INT 3
21872: PPUSH
21873: CALL_OW 109
21877: GO 21816
21879: POP
21880: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 11
21888: ARRAY
21889: PPUSH
21890: LD_INT 81
21892: PUSH
21893: LD_VAR 0 3
21897: PUSH
21898: LD_INT 3
21900: ARRAY
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 70
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 22052
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21915: LD_ADDR_VAR 0 5
21919: PUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL 19452 0 1
21929: PPUSH
21930: LD_INT 50
21932: PUSH
21933: EMPTY
21934: LIST
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 60
21941: PUSH
21942: EMPTY
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 72
21957: PUSH
21958: FOR_IN
21959: IFFALSE 22050
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21961: LD_VAR 0 5
21965: PPUSH
21966: LD_VAR 0 3
21970: PUSH
21971: LD_INT 11
21973: ARRAY
21974: PPUSH
21975: LD_INT 81
21977: PUSH
21978: LD_VAR 0 3
21982: PUSH
21983: LD_INT 3
21985: ARRAY
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 70
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: CALL_OW 250
22004: PPUSH
22005: LD_VAR 0 3
22009: PUSH
22010: LD_INT 11
22012: ARRAY
22013: PPUSH
22014: LD_INT 81
22016: PUSH
22017: LD_VAR 0 3
22021: PUSH
22022: LD_INT 3
22024: ARRAY
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 70
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: PPUSH
22039: CALL_OW 251
22043: PPUSH
22044: CALL_OW 114
22048: GO 21958
22050: POP
22051: POP
// end ;
22052: LD_VAR 0 2
22056: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22057: LD_INT 0
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL 18744 0 1
22079: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22080: LD_VAR 0 3
22084: PUSH
22085: LD_INT 2
22087: ARRAY
22088: PUSH
22089: LD_INT 0
22091: EQUAL
22092: IFFALSE 22096
// exit ;
22094: GO 22486
// if ( aiData [ 18 ] = 0 ) then
22096: LD_VAR 0 3
22100: PUSH
22101: LD_INT 18
22103: ARRAY
22104: PUSH
22105: LD_INT 0
22107: EQUAL
22108: IFFALSE 22112
// exit ;
22110: GO 22486
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL 19562 0 1
22121: PUSH
22122: LD_VAR 0 3
22126: PUSH
22127: LD_INT 14
22129: ARRAY
22130: GREATEREQUAL
22131: IFFALSE 22486
// begin repeat wait ( 0 0$01 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22140: LD_ADDR_VAR 0 6
22144: PUSH
22145: LD_VAR 0 3
22149: PPUSH
22150: CALL 19562 0 1
22154: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22155: LD_ADDR_VAR 0 7
22159: PUSH
22160: LD_VAR 0 6
22164: PUSH
22165: FOR_IN
22166: IFFALSE 22466
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_INT 81
22175: PUSH
22176: LD_VAR 0 3
22180: PUSH
22181: LD_INT 3
22183: ARRAY
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: PPUSH
22194: LD_VAR 0 7
22198: PPUSH
22199: CALL_OW 74
22203: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22204: LD_ADDR_VAR 0 5
22208: PUSH
22209: LD_INT 81
22211: PUSH
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 3
22219: ARRAY
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 59
22230: PUSH
22231: EMPTY
22232: LIST
22233: PUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PPUSH
22272: LD_VAR 0 7
22276: PPUSH
22277: CALL_OW 74
22281: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22282: LD_VAR 0 7
22286: PPUSH
22287: LD_VAR 0 4
22291: PPUSH
22292: CALL_OW 296
22296: PUSH
22297: LD_INT 12
22299: PLUS
22300: PUSH
22301: LD_VAR 0 7
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL_OW 296
22315: LESS
22316: IFFALSE 22392
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22318: LD_VAR 0 7
22322: PPUSH
22323: LD_INT 50
22325: PUSH
22326: EMPTY
22327: LIST
22328: PPUSH
22329: CALL_OW 72
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: CALL_OW 250
22343: PPUSH
22344: LD_VAR 0 4
22348: PPUSH
22349: CALL_OW 251
22353: PPUSH
22354: CALL_OW 114
// wait ( 0 0$01 ) ;
22358: LD_INT 35
22360: PPUSH
22361: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22365: LD_VAR 0 7
22369: PPUSH
22370: LD_INT 50
22372: PUSH
22373: EMPTY
22374: LIST
22375: PPUSH
22376: CALL_OW 72
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: CALL_OW 115
// end else
22390: GO 22464
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22392: LD_VAR 0 7
22396: PPUSH
22397: LD_INT 50
22399: PUSH
22400: EMPTY
22401: LIST
22402: PPUSH
22403: CALL_OW 72
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL_OW 250
22417: PPUSH
22418: LD_VAR 0 5
22422: PPUSH
22423: CALL_OW 251
22427: PPUSH
22428: CALL_OW 114
// wait ( 0 0$01 ) ;
22432: LD_INT 35
22434: PPUSH
22435: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_INT 50
22446: PUSH
22447: EMPTY
22448: LIST
22449: PPUSH
22450: CALL_OW 72
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 115
// end ; end ;
22464: GO 22165
22466: POP
22467: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22468: LD_VAR 0 6
22472: PPUSH
22473: LD_INT 50
22475: PUSH
22476: EMPTY
22477: LIST
22478: PPUSH
22479: CALL_OW 72
22483: NOT
22484: IFFALSE 22133
// end ; end ;
22486: LD_VAR 0 2
22490: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22491: LD_INT 0
22493: PPUSH
22494: PPUSH
22495: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL 18744 0 1
22510: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22511: LD_VAR 0 3
22515: PUSH
22516: LD_INT 2
22518: ARRAY
22519: PUSH
22520: LD_INT 0
22522: EQUAL
22523: IFFALSE 22527
// exit ;
22525: GO 22676
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22527: LD_ADDR_VAR 0 4
22531: PUSH
22532: LD_VAR 0 3
22536: PUSH
22537: LD_INT 5
22539: ARRAY
22540: PPUSH
22541: LD_INT 21
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 50
22553: PUSH
22554: EMPTY
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 34
22562: PUSH
22563: LD_INT 12
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 34
22572: PUSH
22573: LD_INT 32
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 51
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 72
22605: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 8
22613: ARRAY
22614: PPUSH
22615: CALL_OW 435
22619: NOT
22620: PUSH
22621: LD_VAR 0 4
22625: NOT
22626: OR
22627: IFFALSE 22631
// exit ;
22629: GO 22676
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22631: LD_VAR 0 4
22635: PPUSH
22636: LD_VAR 0 3
22640: PUSH
22641: LD_INT 8
22643: ARRAY
22644: PPUSH
22645: CALL_OW 435
22649: PUSH
22650: LD_INT 1
22652: ARRAY
22653: PPUSH
22654: LD_VAR 0 3
22658: PUSH
22659: LD_INT 8
22661: ARRAY
22662: PPUSH
22663: CALL_OW 435
22667: PUSH
22668: LD_INT 2
22670: ARRAY
22671: PPUSH
22672: CALL_OW 117
// end ;
22676: LD_VAR 0 2
22680: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
22685: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22686: LD_ADDR_VAR 0 3
22690: PUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL 18744 0 1
22700: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22701: LD_VAR 0 3
22705: PUSH
22706: LD_INT 2
22708: ARRAY
22709: PUSH
22710: LD_INT 0
22712: EQUAL
22713: IFFALSE 22717
// exit ;
22715: GO 22807
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 3
22726: PUSH
22727: LD_INT 5
22729: ARRAY
22730: PPUSH
22731: LD_INT 21
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 72
22745: PUSH
22746: FOR_IN
22747: IFFALSE 22805
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22749: LD_VAR 0 4
22753: PPUSH
22754: CALL_OW 110
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: PUSH
22763: LD_VAR 0 4
22767: PPUSH
22768: LD_VAR 0 3
22772: PUSH
22773: LD_INT 9
22775: ARRAY
22776: PPUSH
22777: CALL_OW 308
22781: NOT
22782: AND
22783: IFFALSE 22803
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22785: LD_VAR 0 4
22789: PPUSH
22790: LD_VAR 0 3
22794: PUSH
22795: LD_INT 9
22797: ARRAY
22798: PPUSH
22799: CALL_OW 113
22803: GO 22746
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL 18744 0 1
22831: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22832: LD_VAR 0 3
22836: PUSH
22837: LD_INT 2
22839: ARRAY
22840: PUSH
22841: LD_INT 0
22843: EQUAL
22844: IFFALSE 22848
// exit ;
22846: GO 22963
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22848: LD_ADDR_VAR 0 4
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: LD_INT 5
22860: ARRAY
22861: PPUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 50
22874: PUSH
22875: EMPTY
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 72
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22961
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22890: LD_VAR 0 4
22894: PPUSH
22895: CALL_OW 110
22899: PUSH
22900: LD_INT 3
22902: EQUAL
22903: PUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: CALL_OW 110
22913: PUSH
22914: LD_INT 5
22916: EQUAL
22917: OR
22918: PUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_VAR 0 3
22928: PUSH
22929: LD_INT 10
22931: ARRAY
22932: PPUSH
22933: CALL_OW 308
22937: NOT
22938: AND
22939: IFFALSE 22959
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 10
22953: ARRAY
22954: PPUSH
22955: CALL_OW 113
22959: GO 22887
22961: POP
22962: POP
// end ;
22963: LD_VAR 0 2
22967: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL 18744 0 1
22991: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 2
22999: ARRAY
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23008
// exit ;
23006: GO 23708
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 5
23020: ARRAY
23021: PPUSH
23022: LD_INT 25
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 50
23034: PUSH
23035: EMPTY
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 72
23046: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23047: LD_ADDR_VAR 0 5
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_INT 5
23059: ARRAY
23060: PPUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 50
23073: PUSH
23074: EMPTY
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 13
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 34
23092: PUSH
23093: LD_EXP 127
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 34
23104: PUSH
23105: LD_INT 52
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 72
23127: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23128: LD_ADDR_VAR 0 8
23132: PUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_INT 6
23140: ARRAY
23141: PPUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 1000
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 72
23177: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23178: LD_VAR 0 4
23182: PPUSH
23183: LD_INT 56
23185: PUSH
23186: EMPTY
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 60
23194: PUSH
23195: EMPTY
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 72
23210: PUSH
23211: LD_VAR 0 8
23215: NOT
23216: AND
23217: PUSH
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 6
23225: ARRAY
23226: PPUSH
23227: LD_INT 21
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 50
23239: PUSH
23240: EMPTY
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 30
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 72
23280: AND
23281: IFFALSE 23419
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23283: LD_ADDR_VAR 0 7
23287: PUSH
23288: LD_VAR 0 4
23292: PPUSH
23293: LD_INT 56
23295: PUSH
23296: EMPTY
23297: LIST
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: LD_INT 60
23304: PUSH
23305: EMPTY
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 72
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23417
// if ( GetTag ( eng ) = 1 ) then
23324: LD_VAR 0 7
23328: PPUSH
23329: CALL_OW 110
23333: PUSH
23334: LD_INT 1
23336: EQUAL
23337: IFFALSE 23415
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23339: LD_VAR 0 7
23343: PPUSH
23344: LD_VAR 0 3
23348: PUSH
23349: LD_INT 6
23351: ARRAY
23352: PPUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 50
23365: PUSH
23366: EMPTY
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 30
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 30
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: PPUSH
23402: CALL_OW 72
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: CALL_OW 120
23415: GO 23321
23417: POP
23418: POP
// if engineers and damagedBuildings then
23419: LD_VAR 0 4
23423: PUSH
23424: LD_VAR 0 8
23428: AND
23429: IFFALSE 23576
// begin for eng in engineers do
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_VAR 0 4
23440: PUSH
23441: FOR_IN
23442: IFFALSE 23515
// if ( GetTag ( eng ) = 1 ) then
23444: LD_VAR 0 7
23448: PPUSH
23449: CALL_OW 110
23453: PUSH
23454: LD_INT 1
23456: EQUAL
23457: IFFALSE 23513
// begin ForceResetTaskList ( eng ) ;
23459: LD_VAR 0 7
23463: PPUSH
23464: CALL 27062 0 1
// ExitUnitFromBuilding ( eng ) ;
23468: LD_VAR 0 7
23472: PPUSH
23473: CALL 27115 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23477: LD_VAR 0 7
23481: PPUSH
23482: LD_INT 3
23484: PUSH
23485: LD_INT 60
23487: PUSH
23488: EMPTY
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 72
23499: PPUSH
23500: LD_VAR 0 8
23504: PUSH
23505: LD_INT 1
23507: ARRAY
23508: PPUSH
23509: CALL_OW 190
// end ;
23513: GO 23441
23515: POP
23516: POP
// if cranes then
23517: LD_VAR 0 5
23521: IFFALSE 23576
// for crane in cranes do
23523: LD_ADDR_VAR 0 6
23527: PUSH
23528: LD_VAR 0 5
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23574
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23536: LD_VAR 0 6
23540: PPUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 60
23546: PUSH
23547: EMPTY
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 72
23558: PPUSH
23559: LD_VAR 0 8
23563: PUSH
23564: LD_INT 1
23566: ARRAY
23567: PPUSH
23568: CALL_OW 190
23572: GO 23533
23574: POP
23575: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23576: LD_VAR 0 4
23580: PUSH
23581: LD_VAR 0 8
23585: NOT
23586: AND
23587: PUSH
23588: LD_VAR 0 3
23592: PUSH
23593: LD_INT 7
23595: ARRAY
23596: AND
23597: IFFALSE 23708
// begin for eng in engineers do
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_VAR 0 4
23608: PUSH
23609: FOR_IN
23610: IFFALSE 23706
// if ( GetTag ( eng ) = 1 ) then
23612: LD_VAR 0 7
23616: PPUSH
23617: CALL_OW 110
23621: PUSH
23622: LD_INT 1
23624: EQUAL
23625: IFFALSE 23704
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23627: LD_VAR 0 7
23631: PPUSH
23632: LD_VAR 0 3
23636: PUSH
23637: LD_INT 7
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: PUSH
23645: LD_INT 1
23647: ARRAY
23648: PPUSH
23649: LD_VAR 0 3
23653: PUSH
23654: LD_INT 7
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: PUSH
23662: LD_INT 2
23664: ARRAY
23665: PPUSH
23666: LD_VAR 0 3
23670: PUSH
23671: LD_INT 7
23673: ARRAY
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PUSH
23679: LD_INT 3
23681: ARRAY
23682: PPUSH
23683: LD_VAR 0 3
23687: PUSH
23688: LD_INT 7
23690: ARRAY
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: PUSH
23696: LD_INT 4
23698: ARRAY
23699: PPUSH
23700: CALL_OW 145
23704: GO 23609
23706: POP
23707: POP
// end ;
23708: LD_VAR 0 2
23712: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: LD_VAR 0 1
23730: PPUSH
23731: CALL 18744 0 1
23735: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23736: LD_VAR 0 3
23740: PUSH
23741: LD_INT 2
23743: ARRAY
23744: PUSH
23745: LD_INT 0
23747: EQUAL
23748: IFFALSE 23752
// exit ;
23750: GO 24206
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 3
23761: PUSH
23762: LD_INT 5
23764: ARRAY
23765: PPUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 4
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 50
23778: PUSH
23779: EMPTY
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PPUSH
23786: CALL_OW 72
23790: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 3
23800: PUSH
23801: LD_INT 5
23803: ARRAY
23804: PPUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 92
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_INT 9
23825: ARRAY
23826: PPUSH
23827: LD_INT 0
23829: PPUSH
23830: CALL_OW 517
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PUSH
23843: LD_VAR 0 3
23847: PUSH
23848: LD_INT 9
23850: ARRAY
23851: PPUSH
23852: LD_INT 0
23854: PPUSH
23855: CALL_OW 517
23859: PUSH
23860: LD_INT 2
23862: ARRAY
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 24
23882: PUSH
23883: LD_INT 1000
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 72
23903: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23904: LD_ADDR_VAR 0 7
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_INT 5
23916: ARRAY
23917: PPUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 50
23930: PUSH
23931: EMPTY
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 6
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 30
23949: PUSH
23950: LD_INT 7
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 8
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 72
23982: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23983: LD_VAR 0 4
23987: PPUSH
23988: LD_INT 56
23990: PUSH
23991: EMPTY
23992: LIST
23993: PUSH
23994: LD_INT 3
23996: PUSH
23997: LD_INT 60
23999: PUSH
24000: EMPTY
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 72
24015: PUSH
24016: LD_VAR 0 6
24020: NOT
24021: AND
24022: PUSH
24023: LD_VAR 0 7
24027: AND
24028: IFFALSE 24104
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 4
24039: PPUSH
24040: LD_INT 56
24042: PUSH
24043: EMPTY
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: PPUSH
24049: CALL_OW 72
24053: PUSH
24054: FOR_IN
24055: IFFALSE 24102
// if ( GetTag ( sci ) = 1 ) then
24057: LD_VAR 0 5
24061: PPUSH
24062: CALL_OW 110
24066: PUSH
24067: LD_INT 1
24069: EQUAL
24070: IFFALSE 24100
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24072: LD_VAR 0 5
24076: PPUSH
24077: LD_VAR 0 7
24081: PUSH
24082: LD_INT 1
24084: PPUSH
24085: LD_VAR 0 7
24089: PPUSH
24090: CALL_OW 12
24094: ARRAY
24095: PPUSH
24096: CALL_OW 120
24100: GO 24054
24102: POP
24103: POP
// if not scientists or not damageUnits then
24104: LD_VAR 0 4
24108: NOT
24109: PUSH
24110: LD_VAR 0 6
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24206
// for sci in scientists do
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 4
24129: PUSH
24130: FOR_IN
24131: IFFALSE 24204
// if ( GetTag ( sci ) = 1 ) then
24133: LD_VAR 0 5
24137: PPUSH
24138: CALL_OW 110
24142: PUSH
24143: LD_INT 1
24145: EQUAL
24146: IFFALSE 24202
// begin ForceResetTaskList ( sci ) ;
24148: LD_VAR 0 5
24152: PPUSH
24153: CALL 27062 0 1
// ExitUnitFromBuilding ( sci ) ;
24157: LD_VAR 0 5
24161: PPUSH
24162: CALL 27115 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24166: LD_VAR 0 5
24170: PPUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 60
24176: PUSH
24177: EMPTY
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 72
24188: PPUSH
24189: LD_VAR 0 6
24193: PUSH
24194: LD_INT 1
24196: ARRAY
24197: PPUSH
24198: CALL_OW 188
// end ;
24202: GO 24130
24204: POP
24205: POP
// end ;
24206: LD_VAR 0 2
24210: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24219: LD_ADDR_VAR 0 3
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL 18744 0 1
24233: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24234: LD_VAR 0 3
24238: PUSH
24239: LD_INT 2
24241: ARRAY
24242: PUSH
24243: LD_INT 0
24245: EQUAL
24246: IFFALSE 24250
// exit ;
24248: GO 25617
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24250: LD_ADDR_VAR 0 4
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_INT 6
24262: ARRAY
24263: PPUSH
24264: LD_INT 21
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 30
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: PPUSH
24313: CALL_OW 72
24317: ST_TO_ADDR
// if not fabs then
24318: LD_VAR 0 4
24322: NOT
24323: IFFALSE 24327
// exit ;
24325: GO 25617
// wait ( aiData [ 16 ] ) ;
24327: LD_VAR 0 3
24331: PUSH
24332: LD_INT 16
24334: ARRAY
24335: PPUSH
24336: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24340: LD_VAR 0 3
24344: PUSH
24345: LD_INT 17
24347: ARRAY
24348: PUSH
24349: LD_INT 1
24351: ARRAY
24352: IFFALSE 24524
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 13
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: CALL 19452 0 1
24382: MINUS
24383: PUSH
24384: FOR_TO
24385: IFFALSE 24522
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24387: LD_ADDR_VAR 0 6
24391: PUSH
24392: LD_VAR 0 3
24396: PUSH
24397: LD_INT 13
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_INT 4
24409: ARRAY
24410: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24411: LD_ADDR_VAR 0 7
24415: PUSH
24416: LD_VAR 0 6
24420: PUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_VAR 0 6
24428: PPUSH
24429: CALL_OW 12
24433: ARRAY
24434: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24435: LD_VAR 0 4
24439: PUSH
24440: LD_INT 0
24442: PPUSH
24443: LD_VAR 0 4
24447: PPUSH
24448: CALL_OW 12
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 13
24461: ARRAY
24462: PUSH
24463: LD_VAR 0 5
24467: ARRAY
24468: PUSH
24469: LD_INT 1
24471: ARRAY
24472: PPUSH
24473: LD_VAR 0 3
24477: PUSH
24478: LD_INT 13
24480: ARRAY
24481: PUSH
24482: LD_VAR 0 5
24486: ARRAY
24487: PUSH
24488: LD_INT 2
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 13
24499: ARRAY
24500: PUSH
24501: LD_VAR 0 5
24505: ARRAY
24506: PUSH
24507: LD_INT 3
24509: ARRAY
24510: PPUSH
24511: LD_VAR 0 7
24515: PPUSH
24516: CALL_OW 185
// end ;
24520: GO 24384
24522: POP
24523: POP
// end ; if aiData [ 17 ] [ 3 ] then
24524: LD_VAR 0 3
24528: PUSH
24529: LD_INT 17
24531: ARRAY
24532: PUSH
24533: LD_INT 3
24535: ARRAY
24536: IFFALSE 25433
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24538: LD_INT 22
24540: PUSH
24541: LD_VAR 0 3
24545: PUSH
24546: LD_INT 3
24548: ARRAY
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 34
24569: PUSH
24570: LD_INT 12
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 34
24579: PUSH
24580: LD_INT 32
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 34
24589: PUSH
24590: LD_INT 51
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: PPUSH
24608: CALL_OW 69
24612: PUSH
24613: LD_VAR 0 3
24617: PUSH
24618: LD_INT 15
24620: ARRAY
24621: PUSH
24622: LD_INT 1
24624: ARRAY
24625: LESS
24626: IFFALSE 24837
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 15
24645: ARRAY
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PUSH
24651: LD_INT 22
24653: PUSH
24654: LD_VAR 0 3
24658: PUSH
24659: LD_INT 3
24661: ARRAY
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 21
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 34
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 34
24692: PUSH
24693: LD_INT 32
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 34
24702: PUSH
24703: LD_INT 51
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: MINUS
24726: PUSH
24727: FOR_TO
24728: IFFALSE 24835
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24730: LD_VAR 0 4
24734: PUSH
24735: LD_INT 0
24737: PPUSH
24738: LD_VAR 0 4
24742: PPUSH
24743: CALL_OW 12
24747: ARRAY
24748: PPUSH
24749: LD_INT 3
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: LD_INT 22
24763: PUSH
24764: EMPTY
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: PUSH
24772: LD_VAR 0 3
24776: PUSH
24777: LD_INT 4
24779: ARRAY
24780: ARRAY
24781: PUSH
24782: LD_INT 1
24784: ARRAY
24785: PPUSH
24786: LD_INT 1
24788: PPUSH
24789: LD_INT 2
24791: PPUSH
24792: LD_INT 12
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 32
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: LD_INT 51
24806: PUSH
24807: EMPTY
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: PUSH
24815: LD_VAR 0 3
24819: PUSH
24820: LD_INT 4
24822: ARRAY
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: CALL_OW 185
24833: GO 24727
24835: POP
24836: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24837: LD_INT 22
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_INT 3
24847: ARRAY
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 21
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 34
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: LD_EXP 127
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 34
24890: PUSH
24891: LD_INT 52
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: PPUSH
24909: CALL_OW 69
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_INT 15
24921: ARRAY
24922: PUSH
24923: LD_INT 2
24925: ARRAY
24926: LESS
24927: IFFALSE 25142
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24929: LD_ADDR_VAR 0 5
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 15
24946: ARRAY
24947: PUSH
24948: LD_INT 2
24950: ARRAY
24951: PUSH
24952: LD_INT 22
24954: PUSH
24955: LD_VAR 0 3
24959: PUSH
24960: LD_INT 3
24962: ARRAY
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 34
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_EXP 127
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 34
25005: PUSH
25006: LD_INT 52
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: MINUS
25029: PUSH
25030: FOR_TO
25031: IFFALSE 25140
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25033: LD_VAR 0 4
25037: PUSH
25038: LD_INT 0
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: CALL_OW 12
25050: ARRAY
25051: PPUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: EMPTY
25062: LIST
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: EMPTY
25068: LIST
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: LD_VAR 0 3
25079: PUSH
25080: LD_INT 4
25082: ARRAY
25083: ARRAY
25084: PUSH
25085: LD_INT 1
25087: ARRAY
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: LD_INT 2
25094: PPUSH
25095: LD_INT 13
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: LD_EXP 127
25105: PUSH
25106: EMPTY
25107: LIST
25108: PUSH
25109: LD_INT 52
25111: PUSH
25112: EMPTY
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: PUSH
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 4
25127: ARRAY
25128: ARRAY
25129: PUSH
25130: LD_INT 1
25132: ARRAY
25133: PPUSH
25134: CALL_OW 185
25138: GO 25030
25140: POP
25141: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25142: LD_INT 22
25144: PUSH
25145: LD_VAR 0 3
25149: PUSH
25150: LD_INT 3
25152: ARRAY
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 21
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: LD_INT 34
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 14
25183: PUSH
25184: EMPTY
25185: LIST
25186: PUSH
25187: LD_INT 34
25189: PUSH
25190: LD_INT 53
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_INT 15
25220: ARRAY
25221: PUSH
25222: LD_INT 3
25224: ARRAY
25225: LESS
25226: IFFALSE 25433
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: DOUBLE
25234: LD_INT 1
25236: DEC
25237: ST_TO_ADDR
25238: LD_VAR 0 3
25242: PUSH
25243: LD_INT 15
25245: ARRAY
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_VAR 0 3
25258: PUSH
25259: LD_INT 3
25261: ARRAY
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 34
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 14
25292: PUSH
25293: EMPTY
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 53
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: MINUS
25322: PUSH
25323: FOR_TO
25324: IFFALSE 25431
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25326: LD_VAR 0 4
25330: PUSH
25331: LD_INT 0
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: CALL_OW 12
25343: ARRAY
25344: PPUSH
25345: LD_INT 4
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: EMPTY
25355: LIST
25356: PUSH
25357: LD_INT 24
25359: PUSH
25360: EMPTY
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_VAR 0 3
25372: PUSH
25373: LD_INT 4
25375: ARRAY
25376: ARRAY
25377: PUSH
25378: LD_INT 1
25380: ARRAY
25381: PPUSH
25382: LD_INT 1
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_INT 14
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: LD_INT 53
25402: PUSH
25403: EMPTY
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 4
25418: ARRAY
25419: ARRAY
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PPUSH
25425: CALL_OW 185
25429: GO 25323
25431: POP
25432: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25433: LD_VAR 0 3
25437: PUSH
25438: LD_INT 17
25440: ARRAY
25441: PUSH
25442: LD_INT 2
25444: ARRAY
25445: PUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: CALL 19562 0 1
25455: MINUS
25456: IFFALSE 25617
// begin for i := 1 to aiData [ 14 ] do
25458: LD_ADDR_VAR 0 5
25462: PUSH
25463: DOUBLE
25464: LD_INT 1
25466: DEC
25467: ST_TO_ADDR
25468: LD_VAR 0 3
25472: PUSH
25473: LD_INT 14
25475: ARRAY
25476: PUSH
25477: FOR_TO
25478: IFFALSE 25615
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25480: LD_ADDR_VAR 0 6
25484: PUSH
25485: LD_VAR 0 3
25489: PUSH
25490: LD_INT 14
25492: ARRAY
25493: PUSH
25494: LD_VAR 0 5
25498: ARRAY
25499: PUSH
25500: LD_INT 4
25502: ARRAY
25503: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25504: LD_ADDR_VAR 0 7
25508: PUSH
25509: LD_VAR 0 6
25513: PUSH
25514: LD_INT 1
25516: PPUSH
25517: LD_VAR 0 6
25521: PPUSH
25522: CALL_OW 12
25526: ARRAY
25527: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25528: LD_VAR 0 4
25532: PUSH
25533: LD_INT 0
25535: PPUSH
25536: LD_VAR 0 4
25540: PPUSH
25541: CALL_OW 12
25545: ARRAY
25546: PPUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_INT 14
25554: ARRAY
25555: PUSH
25556: LD_VAR 0 5
25560: ARRAY
25561: PUSH
25562: LD_INT 1
25564: ARRAY
25565: PPUSH
25566: LD_VAR 0 3
25570: PUSH
25571: LD_INT 14
25573: ARRAY
25574: PUSH
25575: LD_VAR 0 5
25579: ARRAY
25580: PUSH
25581: LD_INT 2
25583: ARRAY
25584: PPUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_INT 14
25592: ARRAY
25593: PUSH
25594: LD_VAR 0 5
25598: ARRAY
25599: PUSH
25600: LD_INT 3
25602: ARRAY
25603: PPUSH
25604: LD_VAR 0 7
25608: PPUSH
25609: CALL_OW 185
// end ;
25613: GO 25477
25615: POP
25616: POP
// end ; end ;
25617: LD_VAR 0 2
25621: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25622: LD_INT 0
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// for unit in units do
25638: LD_ADDR_VAR 0 6
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: FOR_IN
25649: IFFALSE 25665
// SetTag ( unit , 0 ) ;
25651: LD_VAR 0 6
25655: PPUSH
25656: LD_INT 0
25658: PPUSH
25659: CALL_OW 109
25663: GO 25648
25665: POP
25666: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25667: LD_ADDR_VAR 0 13
25671: PUSH
25672: LD_VAR 0 3
25676: PUSH
25677: LD_VAR 0 3
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PUSH
25687: LD_VAR 0 3
25691: PUSH
25692: LD_VAR 0 3
25696: ARRAY
25697: PUSH
25698: LD_INT 2
25700: ARRAY
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25706: LD_ADDR_VAR 0 7
25710: PUSH
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_INT 50
25718: PUSH
25719: EMPTY
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 59
25727: PUSH
25728: EMPTY
25729: LIST
25730: PUSH
25731: LD_INT 25
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 25
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 21
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PPUSH
25772: CALL_OW 72
25776: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25777: LD_ADDR_VAR 0 9
25781: PUSH
25782: LD_VAR 0 2
25786: PPUSH
25787: LD_INT 50
25789: PUSH
25790: EMPTY
25791: LIST
25792: PUSH
25793: LD_INT 25
25795: PUSH
25796: LD_INT 4
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 72
25811: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25812: LD_ADDR_VAR 0 10
25816: PUSH
25817: LD_VAR 0 2
25821: PPUSH
25822: LD_INT 21
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 24
25837: PUSH
25838: LD_INT 1000
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PPUSH
25853: CALL_OW 72
25857: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25858: LD_ADDR_VAR 0 11
25862: PUSH
25863: LD_INT 21
25865: PPUSH
25866: CALL_OW 435
25870: ST_TO_ADDR
// for unit in attackUnits do
25871: LD_ADDR_VAR 0 6
25875: PUSH
25876: LD_VAR 0 7
25880: PUSH
25881: FOR_IN
25882: IFFALSE 26631
// begin if path then
25884: LD_VAR 0 3
25888: IFFALSE 26620
// begin i = 1 ;
25890: LD_ADDR_VAR 0 5
25894: PUSH
25895: LD_INT 1
25897: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25898: LD_ADDR_VAR 0 11
25902: PUSH
25903: LD_INT 21
25905: PPUSH
25906: CALL_OW 435
25910: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25911: LD_ADDR_VAR 0 14
25915: PUSH
25916: LD_INT 81
25918: PUSH
25919: LD_VAR 0 6
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: PPUSH
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 74
25947: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25948: LD_ADDR_VAR 0 15
25952: PUSH
25953: LD_VAR 0 11
25957: PPUSH
25958: LD_VAR 0 6
25962: PPUSH
25963: CALL_OW 250
25967: PPUSH
25968: LD_VAR 0 6
25972: PPUSH
25973: CALL_OW 251
25977: PPUSH
25978: CALL_OW 439
25982: ST_TO_ADDR
// if damageUnits and medics then
25983: LD_VAR 0 10
25987: PUSH
25988: LD_VAR 0 9
25992: AND
25993: IFFALSE 26015
// ComHeal ( medics , damageUnits [ 1 ] ) else
25995: LD_VAR 0 9
25999: PPUSH
26000: LD_VAR 0 10
26004: PUSH
26005: LD_INT 1
26007: ARRAY
26008: PPUSH
26009: CALL_OW 128
26013: GO 26058
// if medics then
26015: LD_VAR 0 9
26019: IFFALSE 26058
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26021: LD_VAR 0 9
26025: PPUSH
26026: LD_VAR 0 7
26030: PUSH
26031: LD_INT 1
26033: ARRAY
26034: PPUSH
26035: CALL_OW 250
26039: PPUSH
26040: LD_VAR 0 7
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: CALL_OW 251
26053: PPUSH
26054: CALL_OW 111
// if not HasTask ( unit ) then
26058: LD_VAR 0 6
26062: PPUSH
26063: CALL_OW 314
26067: NOT
26068: IFFALSE 26307
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26070: LD_ADDR_VAR 0 15
26074: PUSH
26075: LD_VAR 0 11
26079: PPUSH
26080: LD_VAR 0 6
26084: PPUSH
26085: CALL_OW 250
26089: PPUSH
26090: LD_VAR 0 6
26094: PPUSH
26095: CALL_OW 251
26099: PPUSH
26100: CALL_OW 439
26104: ST_TO_ADDR
// if i > crates then
26105: LD_VAR 0 5
26109: PUSH
26110: LD_VAR 0 11
26114: GREATER
26115: IFFALSE 26125
// i = 1 ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_INT 1
26124: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26125: LD_VAR 0 14
26129: PUSH
26130: LD_VAR 0 15
26134: AND
26135: IFFALSE 26250
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26137: LD_VAR 0 6
26141: PPUSH
26142: LD_VAR 0 14
26146: PPUSH
26147: CALL_OW 250
26151: PPUSH
26152: LD_VAR 0 14
26156: PPUSH
26157: CALL_OW 251
26161: PPUSH
26162: CALL_OW 297
26166: PUSH
26167: LD_VAR 0 6
26171: PPUSH
26172: LD_VAR 0 15
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 15
26185: PUSH
26186: LD_INT 2
26188: ARRAY
26189: PPUSH
26190: CALL_OW 297
26194: LESS
26195: IFFALSE 26213
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26197: LD_VAR 0 7
26201: PPUSH
26202: LD_VAR 0 14
26206: PPUSH
26207: CALL_OW 115
26211: GO 26248
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26213: LD_VAR 0 7
26217: PPUSH
26218: LD_VAR 0 11
26222: PUSH
26223: LD_VAR 0 5
26227: ARRAY
26228: PPUSH
26229: LD_VAR 0 11
26233: PUSH
26234: LD_VAR 0 5
26238: PUSH
26239: LD_INT 1
26241: PLUS
26242: ARRAY
26243: PPUSH
26244: CALL_OW 116
// end else
26248: GO 26307
// if crates then
26250: LD_VAR 0 11
26254: IFFALSE 26293
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26256: LD_VAR 0 7
26260: PPUSH
26261: LD_VAR 0 11
26265: PUSH
26266: LD_VAR 0 5
26270: ARRAY
26271: PPUSH
26272: LD_VAR 0 11
26276: PUSH
26277: LD_VAR 0 5
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: ARRAY
26286: PPUSH
26287: CALL_OW 116
26291: GO 26307
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26293: LD_VAR 0 7
26297: PPUSH
26298: LD_VAR 0 14
26302: PPUSH
26303: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26307: LD_INT 35
26309: PPUSH
26310: CALL_OW 67
// if path then
26314: LD_VAR 0 3
26318: IFFALSE 26394
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26320: LD_ADDR_VAR 0 16
26324: PUSH
26325: LD_VAR 0 6
26329: PPUSH
26330: LD_VAR 0 3
26334: PPUSH
26335: CALL 26849 0 2
26339: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26340: LD_VAR 0 7
26344: PPUSH
26345: LD_VAR 0 16
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 16
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26367: LD_VAR 0 1
26371: PPUSH
26372: LD_VAR 0 16
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 16
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: PPUSH
26390: CALL_OW 114
// end ; i = i + 2 ;
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_VAR 0 5
26403: PUSH
26404: LD_INT 2
26406: PLUS
26407: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_VAR 0 16
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: LD_VAR 0 16
26426: PUSH
26427: LD_INT 2
26429: ARRAY
26430: PPUSH
26431: CALL_OW 297
26435: PUSH
26436: LD_INT 6
26438: LESSEQUAL
26439: IFFALSE 25898
// repeat wait ( 0 0$1 ) ;
26441: LD_INT 35
26443: PPUSH
26444: CALL_OW 67
// nearUnitsCounter = 0 ;
26448: LD_ADDR_VAR 0 12
26452: PUSH
26453: LD_INT 0
26455: ST_TO_ADDR
// for attackUnit in attackUnits do
26456: LD_ADDR_VAR 0 8
26460: PUSH
26461: LD_VAR 0 7
26465: PUSH
26466: FOR_IN
26467: IFFALSE 26505
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26469: LD_VAR 0 6
26473: PPUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 296
26483: PUSH
26484: LD_INT 7
26486: LESSEQUAL
26487: IFFALSE 26503
// nearUnitsCounter = nearUnitsCounter + 1 ;
26489: LD_ADDR_VAR 0 12
26493: PUSH
26494: LD_VAR 0 12
26498: PUSH
26499: LD_INT 1
26501: PLUS
26502: ST_TO_ADDR
26503: GO 26466
26505: POP
26506: POP
// until nearUnitsCounter = attackUnits ;
26507: LD_VAR 0 12
26511: PUSH
26512: LD_VAR 0 7
26516: EQUAL
26517: IFFALSE 26441
// for i := 1 to path do
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: DOUBLE
26525: LD_INT 1
26527: DEC
26528: ST_TO_ADDR
26529: LD_VAR 0 3
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26618
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26537: LD_VAR 0 3
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PUSH
26552: LD_VAR 0 16
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: EQUAL
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_VAR 0 5
26571: ARRAY
26572: PUSH
26573: LD_INT 2
26575: ARRAY
26576: PUSH
26577: LD_VAR 0 16
26581: PUSH
26582: LD_INT 2
26584: ARRAY
26585: EQUAL
26586: AND
26587: IFFALSE 26616
// begin path = path diff [ path [ i ] ] ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_VAR 0 5
26608: ARRAY
26609: PUSH
26610: EMPTY
26611: LIST
26612: DIFF
26613: ST_TO_ADDR
// break ;
26614: GO 26618
// end ;
26616: GO 26534
26618: POP
26619: POP
// end ; if not path then
26620: LD_VAR 0 3
26624: NOT
26625: IFFALSE 26629
// break ;
26627: GO 26631
// end ;
26629: GO 25881
26631: POP
26632: POP
// repeat unitsReachPathEnd = 0 ;
26633: LD_ADDR_VAR 0 17
26637: PUSH
26638: LD_INT 0
26640: ST_TO_ADDR
// for attackUnit in attackUnits do
26641: LD_ADDR_VAR 0 8
26645: PUSH
26646: LD_VAR 0 7
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26790
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_VAR 0 13
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_VAR 0 13
26672: PUSH
26673: LD_INT 2
26675: ARRAY
26676: PPUSH
26677: CALL_OW 297
26681: PUSH
26682: LD_INT 7
26684: LESS
26685: NOT
26686: PUSH
26687: LD_VAR 0 8
26691: PPUSH
26692: CALL_OW 110
26696: PUSH
26697: LD_INT 0
26699: EQUAL
26700: AND
26701: IFFALSE 26732
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26703: LD_VAR 0 8
26707: PPUSH
26708: LD_VAR 0 13
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 13
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: CALL_OW 111
26730: GO 26759
// if GetTag ( attackUnit ) = 0 then
26732: LD_VAR 0 8
26736: PPUSH
26737: CALL_OW 110
26741: PUSH
26742: LD_INT 0
26744: EQUAL
26745: IFFALSE 26759
// SetTag ( attackUnit , 1 ) ;
26747: LD_VAR 0 8
26751: PPUSH
26752: LD_INT 1
26754: PPUSH
26755: CALL_OW 109
// if GetTag ( unit ) = 1 then
26759: LD_VAR 0 6
26763: PPUSH
26764: CALL_OW 110
26768: PUSH
26769: LD_INT 1
26771: EQUAL
26772: IFFALSE 26788
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26774: LD_ADDR_VAR 0 17
26778: PUSH
26779: LD_VAR 0 17
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: ST_TO_ADDR
// end ;
26788: GO 26651
26790: POP
26791: POP
// wait ( 0 0$1 ) ;
26792: LD_INT 35
26794: PPUSH
26795: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26799: LD_VAR 0 17
26803: PUSH
26804: LD_VAR 0 7
26808: PUSH
26809: LD_INT 3
26811: MINUS
26812: GREATER
26813: IFFALSE 26633
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 50
26822: PUSH
26823: EMPTY
26824: LIST
26825: PPUSH
26826: CALL_OW 72
26830: NOT
26831: PUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 303
26841: OR
26842: IFFALSE 25706
// end ;
26844: LD_VAR 0 4
26848: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
26853: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 2
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PUSH
26881: LD_INT 2
26883: ARRAY
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// for i := 2 to path do
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: DOUBLE
26895: LD_INT 2
26897: DEC
26898: ST_TO_ADDR
26899: LD_VAR 0 2
26903: PUSH
26904: FOR_TO
26905: IFFALSE 27045
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26907: LD_VAR 0 1
26911: PPUSH
26912: LD_VAR 0 2
26916: PUSH
26917: LD_VAR 0 4
26921: ARRAY
26922: PUSH
26923: LD_INT 1
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 2
26931: PUSH
26932: LD_VAR 0 4
26936: ARRAY
26937: PUSH
26938: LD_INT 2
26940: ARRAY
26941: PPUSH
26942: CALL_OW 297
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: LD_VAR 0 5
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: PPUSH
26961: LD_VAR 0 5
26965: PUSH
26966: LD_INT 2
26968: ARRAY
26969: PPUSH
26970: CALL_OW 297
26974: LESS
26975: IFFALSE 27043
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 5
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: LD_VAR 0 2
26994: PUSH
26995: LD_VAR 0 4
26999: ARRAY
27000: PUSH
27001: LD_INT 1
27003: ARRAY
27004: PPUSH
27005: CALL_OW 1
27009: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_VAR 0 5
27019: PPUSH
27020: LD_INT 2
27022: PPUSH
27023: LD_VAR 0 2
27027: PUSH
27028: LD_VAR 0 4
27032: ARRAY
27033: PUSH
27034: LD_INT 2
27036: ARRAY
27037: PPUSH
27038: CALL_OW 1
27042: ST_TO_ADDR
// end ; end ;
27043: GO 26904
27045: POP
27046: POP
// result = nearPosition ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 5
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 3
27061: RET
// function ForceResetTaskList ( unit ) ; begin
27062: LD_INT 0
27064: PPUSH
// if GetTaskList ( unit ) then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 437
27074: IFFALSE 27110
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 437
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PUSH
27090: LD_INT 1
27092: ARRAY
27093: PUSH
27094: LD_STRING e
27096: EQUAL
27097: IFFALSE 27110
// SetTaskList ( unit , [ ] ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: EMPTY
27105: PPUSH
27106: CALL_OW 446
// end ;
27110: LD_VAR 0 2
27114: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27115: LD_INT 0
27117: PPUSH
// if IsInUnit ( unit ) then
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 310
27127: IFFALSE 27138
// ComExitBuilding ( unit ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 122
// end ; end_of_file
27138: LD_VAR 0 2
27142: RET
// every 0 0$1 trigger enableCounter do
27143: LD_EXP 18
27147: IFFALSE 27184
27149: GO 27151
27151: DISABLE
// begin enable ;
27152: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27153: LD_ADDR_OWVAR 47
27157: PUSH
27158: LD_STRING #Am01-1
27160: PUSH
27161: LD_EXP 19
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27170: LD_ADDR_EXP 19
27174: PUSH
27175: LD_EXP 19
27179: PUSH
27180: LD_INT 35
27182: PLUS
27183: ST_TO_ADDR
// end ; end_of_file end_of_file
27184: END
// every 0 0$01 do var timer ;
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
// begin timer := 1 1$30 ;
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_INT 3150
27198: ST_TO_ADDR
// repeat wait ( timer ) ;
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27208: LD_EXP 20
27212: PUSH
27213: LD_INT 6
27215: GREATEREQUAL
27216: PUSH
27217: LD_EXP 20
27221: PUSH
27222: LD_INT 12
27224: LESS
27225: AND
27226: IFFALSE 27242
// timer := timer + 0 0$3 ;
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 105
27240: PLUS
27241: ST_TO_ADDR
// if cratesSpawned >= 12 then
27242: LD_EXP 20
27246: PUSH
27247: LD_INT 12
27249: GREATEREQUAL
27250: IFFALSE 27266
// timer := timer + 0 0$9 ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_VAR 0 1
27261: PUSH
27262: LD_INT 315
27264: PLUS
27265: ST_TO_ADDR
// if timer > 3 3$00 then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 6300
27273: GREATER
27274: IFFALSE 27284
// timer := 0 0$50 ;
27276: LD_ADDR_VAR 0 1
27280: PUSH
27281: LD_INT 1750
27283: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27284: LD_INT 3
27286: PPUSH
27287: LD_INT 5
27289: PPUSH
27290: CALL_OW 12
27294: PPUSH
27295: LD_INT 22
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27305: LD_ADDR_EXP 20
27309: PUSH
27310: LD_EXP 20
27314: PUSH
27315: LD_INT 1
27317: PLUS
27318: ST_TO_ADDR
// until false ;
27319: LD_INT 0
27321: IFFALSE 27199
// end ; end_of_file
27323: PPOPN 1
27325: END
// export function Nef_PrepareNature ; var i , un ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
27330: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_EXP 21
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: FOR_TO
27351: IFFALSE 27461
// begin uc_side = 0 ;
27353: LD_ADDR_OWVAR 20
27357: PUSH
27358: LD_INT 0
27360: ST_TO_ADDR
// uc_nation = nation_nature ;
27361: LD_ADDR_OWVAR 21
27365: PUSH
27366: LD_INT 0
27368: ST_TO_ADDR
// hc_class = class_apeman ;
27369: LD_ADDR_OWVAR 28
27373: PUSH
27374: LD_INT 12
27376: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27377: LD_ADDR_OWVAR 31
27381: PUSH
27382: LD_EXP 22
27386: PUSH
27387: LD_INT 1
27389: ARRAY
27390: PUSH
27391: LD_EXP 22
27395: PUSH
27396: LD_INT 2
27398: ARRAY
27399: PUSH
27400: LD_EXP 22
27404: PUSH
27405: LD_INT 3
27407: ARRAY
27408: PUSH
27409: LD_EXP 22
27413: PUSH
27414: LD_INT 4
27416: ARRAY
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27424: LD_ADDR_OWVAR 35
27428: PUSH
27429: LD_EXP 23
27433: ST_TO_ADDR
// un = CreateHuman ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: CALL_OW 44
27443: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27444: LD_VAR 0 3
27448: PPUSH
27449: LD_INT 23
27451: PPUSH
27452: LD_INT 0
27454: PPUSH
27455: CALL_OW 49
// end ;
27459: GO 27350
27461: POP
27462: POP
// for i := 1 to animalsAmount [ 2 ] do
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: DOUBLE
27469: LD_INT 1
27471: DEC
27472: ST_TO_ADDR
27473: LD_EXP 21
27477: PUSH
27478: LD_INT 2
27480: ARRAY
27481: PUSH
27482: FOR_TO
27483: IFFALSE 27593
// begin uc_side = 0 ;
27485: LD_ADDR_OWVAR 20
27489: PUSH
27490: LD_INT 0
27492: ST_TO_ADDR
// uc_nation = nation_nature ;
27493: LD_ADDR_OWVAR 21
27497: PUSH
27498: LD_INT 0
27500: ST_TO_ADDR
// hc_class = class_phororhacos ;
27501: LD_ADDR_OWVAR 28
27505: PUSH
27506: LD_INT 18
27508: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27509: LD_ADDR_OWVAR 31
27513: PUSH
27514: LD_EXP 22
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PUSH
27523: LD_EXP 22
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PUSH
27532: LD_EXP 22
27536: PUSH
27537: LD_INT 3
27539: ARRAY
27540: PUSH
27541: LD_EXP 22
27545: PUSH
27546: LD_INT 4
27548: ARRAY
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27556: LD_ADDR_OWVAR 35
27560: PUSH
27561: LD_EXP 23
27565: ST_TO_ADDR
// un = CreateHuman ;
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: CALL_OW 44
27575: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27576: LD_VAR 0 3
27580: PPUSH
27581: LD_INT 23
27583: PPUSH
27584: LD_INT 0
27586: PPUSH
27587: CALL_OW 49
// end ;
27591: GO 27482
27593: POP
27594: POP
// for i := 1 to animalsAmount [ 3 ] do
27595: LD_ADDR_VAR 0 2
27599: PUSH
27600: DOUBLE
27601: LD_INT 1
27603: DEC
27604: ST_TO_ADDR
27605: LD_EXP 21
27609: PUSH
27610: LD_INT 3
27612: ARRAY
27613: PUSH
27614: FOR_TO
27615: IFFALSE 27725
// begin uc_side = 0 ;
27617: LD_ADDR_OWVAR 20
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
// uc_nation = nation_nature ;
27625: LD_ADDR_OWVAR 21
27629: PUSH
27630: LD_INT 0
27632: ST_TO_ADDR
// hc_class = class_tiger ;
27633: LD_ADDR_OWVAR 28
27637: PUSH
27638: LD_INT 14
27640: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27641: LD_ADDR_OWVAR 31
27645: PUSH
27646: LD_EXP 22
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PUSH
27655: LD_EXP 22
27659: PUSH
27660: LD_INT 2
27662: ARRAY
27663: PUSH
27664: LD_EXP 22
27668: PUSH
27669: LD_INT 3
27671: ARRAY
27672: PUSH
27673: LD_EXP 22
27677: PUSH
27678: LD_INT 4
27680: ARRAY
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27688: LD_ADDR_OWVAR 35
27692: PUSH
27693: LD_EXP 23
27697: ST_TO_ADDR
// un = CreateHuman ;
27698: LD_ADDR_VAR 0 3
27702: PUSH
27703: CALL_OW 44
27707: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27708: LD_VAR 0 3
27712: PPUSH
27713: LD_INT 23
27715: PPUSH
27716: LD_INT 0
27718: PPUSH
27719: CALL_OW 49
// end ;
27723: GO 27614
27725: POP
27726: POP
// for i := 1 to animalsAmount [ 4 ] do
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: DOUBLE
27733: LD_INT 1
27735: DEC
27736: ST_TO_ADDR
27737: LD_EXP 21
27741: PUSH
27742: LD_INT 4
27744: ARRAY
27745: PUSH
27746: FOR_TO
27747: IFFALSE 27857
// begin uc_side = 0 ;
27749: LD_ADDR_OWVAR 20
27753: PUSH
27754: LD_INT 0
27756: ST_TO_ADDR
// uc_nation = nation_nature ;
27757: LD_ADDR_OWVAR 21
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// hc_class = 21 ;
27765: LD_ADDR_OWVAR 28
27769: PUSH
27770: LD_INT 21
27772: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27773: LD_ADDR_OWVAR 31
27777: PUSH
27778: LD_EXP 22
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PUSH
27787: LD_EXP 22
27791: PUSH
27792: LD_INT 2
27794: ARRAY
27795: PUSH
27796: LD_EXP 22
27800: PUSH
27801: LD_INT 3
27803: ARRAY
27804: PUSH
27805: LD_EXP 22
27809: PUSH
27810: LD_INT 4
27812: ARRAY
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27820: LD_ADDR_OWVAR 35
27824: PUSH
27825: LD_EXP 23
27829: ST_TO_ADDR
// un = CreateHuman ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: CALL_OW 44
27839: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 23
27847: PPUSH
27848: LD_INT 0
27850: PPUSH
27851: CALL_OW 49
// end ;
27855: GO 27746
27857: POP
27858: POP
// for i := 1 to animalsAmount [ 5 ] do
27859: LD_ADDR_VAR 0 2
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_EXP 21
27873: PUSH
27874: LD_INT 5
27876: ARRAY
27877: PUSH
27878: FOR_TO
27879: IFFALSE 27940
// begin uc_side = 0 ;
27881: LD_ADDR_OWVAR 20
27885: PUSH
27886: LD_INT 0
27888: ST_TO_ADDR
// uc_nation = nation_nature ;
27889: LD_ADDR_OWVAR 21
27893: PUSH
27894: LD_INT 0
27896: ST_TO_ADDR
// vc_chassis := 31 ;
27897: LD_ADDR_OWVAR 37
27901: PUSH
27902: LD_INT 31
27904: ST_TO_ADDR
// vc_control := control_rider ;
27905: LD_ADDR_OWVAR 38
27909: PUSH
27910: LD_INT 4
27912: ST_TO_ADDR
// un := CreateVehicle ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: CALL_OW 45
27922: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: LD_INT 23
27930: PPUSH
27931: LD_INT 0
27933: PPUSH
27934: CALL_OW 49
// end ;
27938: GO 27878
27940: POP
27941: POP
// end ; end_of_file
27942: LD_VAR 0 1
27946: RET
// every 0 0$1 do
27947: GO 27949
27949: DISABLE
// begin enable ;
27950: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27951: LD_STRING updateTimer(
27953: PUSH
27954: LD_OWVAR 1
27958: STR
27959: PUSH
27960: LD_STRING );
27962: STR
27963: PPUSH
27964: CALL_OW 559
// end ;
27968: END
// on MapStart ( p ) do begin if streamModeActive then
27969: LD_EXP 63
27973: IFFALSE 27982
// DefineStreamItems ( true ) ;
27975: LD_INT 1
27977: PPUSH
27978: CALL 29630 0 1
// UpdateFactoryWaypoints ( ) ;
27982: CALL 83473 0 0
// end ;
27986: PPOPN 1
27988: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27989: LD_INT 0
27991: PPUSH
// if p2 = 100 then
27992: LD_VAR 0 2
27996: PUSH
27997: LD_INT 100
27999: EQUAL
28000: IFFALSE 29003
// begin if not StreamModeActive then
28002: LD_EXP 63
28006: NOT
28007: IFFALSE 28017
// StreamModeActive := true ;
28009: LD_ADDR_EXP 63
28013: PUSH
28014: LD_INT 1
28016: ST_TO_ADDR
// if p3 = 0 then
28017: LD_VAR 0 3
28021: PUSH
28022: LD_INT 0
28024: EQUAL
28025: IFFALSE 28031
// InitStreamMode ;
28027: CALL 29166 0 0
// if p3 = 1 then
28031: LD_VAR 0 3
28035: PUSH
28036: LD_INT 1
28038: EQUAL
28039: IFFALSE 28049
// sRocket := true ;
28041: LD_ADDR_EXP 68
28045: PUSH
28046: LD_INT 1
28048: ST_TO_ADDR
// if p3 = 2 then
28049: LD_VAR 0 3
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: IFFALSE 28067
// sSpeed := true ;
28059: LD_ADDR_EXP 67
28063: PUSH
28064: LD_INT 1
28066: ST_TO_ADDR
// if p3 = 3 then
28067: LD_VAR 0 3
28071: PUSH
28072: LD_INT 3
28074: EQUAL
28075: IFFALSE 28085
// sEngine := true ;
28077: LD_ADDR_EXP 69
28081: PUSH
28082: LD_INT 1
28084: ST_TO_ADDR
// if p3 = 4 then
28085: LD_VAR 0 3
28089: PUSH
28090: LD_INT 4
28092: EQUAL
28093: IFFALSE 28103
// sSpec := true ;
28095: LD_ADDR_EXP 66
28099: PUSH
28100: LD_INT 1
28102: ST_TO_ADDR
// if p3 = 5 then
28103: LD_VAR 0 3
28107: PUSH
28108: LD_INT 5
28110: EQUAL
28111: IFFALSE 28121
// sLevel := true ;
28113: LD_ADDR_EXP 70
28117: PUSH
28118: LD_INT 1
28120: ST_TO_ADDR
// if p3 = 6 then
28121: LD_VAR 0 3
28125: PUSH
28126: LD_INT 6
28128: EQUAL
28129: IFFALSE 28139
// sArmoury := true ;
28131: LD_ADDR_EXP 71
28135: PUSH
28136: LD_INT 1
28138: ST_TO_ADDR
// if p3 = 7 then
28139: LD_VAR 0 3
28143: PUSH
28144: LD_INT 7
28146: EQUAL
28147: IFFALSE 28157
// sRadar := true ;
28149: LD_ADDR_EXP 72
28153: PUSH
28154: LD_INT 1
28156: ST_TO_ADDR
// if p3 = 8 then
28157: LD_VAR 0 3
28161: PUSH
28162: LD_INT 8
28164: EQUAL
28165: IFFALSE 28175
// sBunker := true ;
28167: LD_ADDR_EXP 73
28171: PUSH
28172: LD_INT 1
28174: ST_TO_ADDR
// if p3 = 9 then
28175: LD_VAR 0 3
28179: PUSH
28180: LD_INT 9
28182: EQUAL
28183: IFFALSE 28193
// sHack := true ;
28185: LD_ADDR_EXP 74
28189: PUSH
28190: LD_INT 1
28192: ST_TO_ADDR
// if p3 = 10 then
28193: LD_VAR 0 3
28197: PUSH
28198: LD_INT 10
28200: EQUAL
28201: IFFALSE 28211
// sFire := true ;
28203: LD_ADDR_EXP 75
28207: PUSH
28208: LD_INT 1
28210: ST_TO_ADDR
// if p3 = 11 then
28211: LD_VAR 0 3
28215: PUSH
28216: LD_INT 11
28218: EQUAL
28219: IFFALSE 28229
// sRefresh := true ;
28221: LD_ADDR_EXP 76
28225: PUSH
28226: LD_INT 1
28228: ST_TO_ADDR
// if p3 = 12 then
28229: LD_VAR 0 3
28233: PUSH
28234: LD_INT 12
28236: EQUAL
28237: IFFALSE 28247
// sExp := true ;
28239: LD_ADDR_EXP 77
28243: PUSH
28244: LD_INT 1
28246: ST_TO_ADDR
// if p3 = 13 then
28247: LD_VAR 0 3
28251: PUSH
28252: LD_INT 13
28254: EQUAL
28255: IFFALSE 28265
// sDepot := true ;
28257: LD_ADDR_EXP 78
28261: PUSH
28262: LD_INT 1
28264: ST_TO_ADDR
// if p3 = 14 then
28265: LD_VAR 0 3
28269: PUSH
28270: LD_INT 14
28272: EQUAL
28273: IFFALSE 28283
// sFlag := true ;
28275: LD_ADDR_EXP 79
28279: PUSH
28280: LD_INT 1
28282: ST_TO_ADDR
// if p3 = 15 then
28283: LD_VAR 0 3
28287: PUSH
28288: LD_INT 15
28290: EQUAL
28291: IFFALSE 28301
// sKamikadze := true ;
28293: LD_ADDR_EXP 87
28297: PUSH
28298: LD_INT 1
28300: ST_TO_ADDR
// if p3 = 16 then
28301: LD_VAR 0 3
28305: PUSH
28306: LD_INT 16
28308: EQUAL
28309: IFFALSE 28319
// sTroll := true ;
28311: LD_ADDR_EXP 88
28315: PUSH
28316: LD_INT 1
28318: ST_TO_ADDR
// if p3 = 17 then
28319: LD_VAR 0 3
28323: PUSH
28324: LD_INT 17
28326: EQUAL
28327: IFFALSE 28337
// sSlow := true ;
28329: LD_ADDR_EXP 89
28333: PUSH
28334: LD_INT 1
28336: ST_TO_ADDR
// if p3 = 18 then
28337: LD_VAR 0 3
28341: PUSH
28342: LD_INT 18
28344: EQUAL
28345: IFFALSE 28355
// sLack := true ;
28347: LD_ADDR_EXP 90
28351: PUSH
28352: LD_INT 1
28354: ST_TO_ADDR
// if p3 = 19 then
28355: LD_VAR 0 3
28359: PUSH
28360: LD_INT 19
28362: EQUAL
28363: IFFALSE 28373
// sTank := true ;
28365: LD_ADDR_EXP 92
28369: PUSH
28370: LD_INT 1
28372: ST_TO_ADDR
// if p3 = 20 then
28373: LD_VAR 0 3
28377: PUSH
28378: LD_INT 20
28380: EQUAL
28381: IFFALSE 28391
// sRemote := true ;
28383: LD_ADDR_EXP 93
28387: PUSH
28388: LD_INT 1
28390: ST_TO_ADDR
// if p3 = 21 then
28391: LD_VAR 0 3
28395: PUSH
28396: LD_INT 21
28398: EQUAL
28399: IFFALSE 28409
// sPowell := true ;
28401: LD_ADDR_EXP 94
28405: PUSH
28406: LD_INT 1
28408: ST_TO_ADDR
// if p3 = 22 then
28409: LD_VAR 0 3
28413: PUSH
28414: LD_INT 22
28416: EQUAL
28417: IFFALSE 28427
// sTeleport := true ;
28419: LD_ADDR_EXP 97
28423: PUSH
28424: LD_INT 1
28426: ST_TO_ADDR
// if p3 = 23 then
28427: LD_VAR 0 3
28431: PUSH
28432: LD_INT 23
28434: EQUAL
28435: IFFALSE 28445
// sOilTower := true ;
28437: LD_ADDR_EXP 99
28441: PUSH
28442: LD_INT 1
28444: ST_TO_ADDR
// if p3 = 24 then
28445: LD_VAR 0 3
28449: PUSH
28450: LD_INT 24
28452: EQUAL
28453: IFFALSE 28463
// sShovel := true ;
28455: LD_ADDR_EXP 100
28459: PUSH
28460: LD_INT 1
28462: ST_TO_ADDR
// if p3 = 25 then
28463: LD_VAR 0 3
28467: PUSH
28468: LD_INT 25
28470: EQUAL
28471: IFFALSE 28481
// sSheik := true ;
28473: LD_ADDR_EXP 101
28477: PUSH
28478: LD_INT 1
28480: ST_TO_ADDR
// if p3 = 26 then
28481: LD_VAR 0 3
28485: PUSH
28486: LD_INT 26
28488: EQUAL
28489: IFFALSE 28499
// sEarthquake := true ;
28491: LD_ADDR_EXP 103
28495: PUSH
28496: LD_INT 1
28498: ST_TO_ADDR
// if p3 = 27 then
28499: LD_VAR 0 3
28503: PUSH
28504: LD_INT 27
28506: EQUAL
28507: IFFALSE 28517
// sAI := true ;
28509: LD_ADDR_EXP 104
28513: PUSH
28514: LD_INT 1
28516: ST_TO_ADDR
// if p3 = 28 then
28517: LD_VAR 0 3
28521: PUSH
28522: LD_INT 28
28524: EQUAL
28525: IFFALSE 28535
// sCargo := true ;
28527: LD_ADDR_EXP 107
28531: PUSH
28532: LD_INT 1
28534: ST_TO_ADDR
// if p3 = 29 then
28535: LD_VAR 0 3
28539: PUSH
28540: LD_INT 29
28542: EQUAL
28543: IFFALSE 28553
// sDLaser := true ;
28545: LD_ADDR_EXP 108
28549: PUSH
28550: LD_INT 1
28552: ST_TO_ADDR
// if p3 = 30 then
28553: LD_VAR 0 3
28557: PUSH
28558: LD_INT 30
28560: EQUAL
28561: IFFALSE 28571
// sExchange := true ;
28563: LD_ADDR_EXP 109
28567: PUSH
28568: LD_INT 1
28570: ST_TO_ADDR
// if p3 = 31 then
28571: LD_VAR 0 3
28575: PUSH
28576: LD_INT 31
28578: EQUAL
28579: IFFALSE 28589
// sFac := true ;
28581: LD_ADDR_EXP 110
28585: PUSH
28586: LD_INT 1
28588: ST_TO_ADDR
// if p3 = 32 then
28589: LD_VAR 0 3
28593: PUSH
28594: LD_INT 32
28596: EQUAL
28597: IFFALSE 28607
// sPower := true ;
28599: LD_ADDR_EXP 111
28603: PUSH
28604: LD_INT 1
28606: ST_TO_ADDR
// if p3 = 33 then
28607: LD_VAR 0 3
28611: PUSH
28612: LD_INT 33
28614: EQUAL
28615: IFFALSE 28625
// sRandom := true ;
28617: LD_ADDR_EXP 112
28621: PUSH
28622: LD_INT 1
28624: ST_TO_ADDR
// if p3 = 34 then
28625: LD_VAR 0 3
28629: PUSH
28630: LD_INT 34
28632: EQUAL
28633: IFFALSE 28643
// sShield := true ;
28635: LD_ADDR_EXP 113
28639: PUSH
28640: LD_INT 1
28642: ST_TO_ADDR
// if p3 = 35 then
28643: LD_VAR 0 3
28647: PUSH
28648: LD_INT 35
28650: EQUAL
28651: IFFALSE 28661
// sTime := true ;
28653: LD_ADDR_EXP 114
28657: PUSH
28658: LD_INT 1
28660: ST_TO_ADDR
// if p3 = 36 then
28661: LD_VAR 0 3
28665: PUSH
28666: LD_INT 36
28668: EQUAL
28669: IFFALSE 28679
// sTools := true ;
28671: LD_ADDR_EXP 115
28675: PUSH
28676: LD_INT 1
28678: ST_TO_ADDR
// if p3 = 101 then
28679: LD_VAR 0 3
28683: PUSH
28684: LD_INT 101
28686: EQUAL
28687: IFFALSE 28697
// sSold := true ;
28689: LD_ADDR_EXP 80
28693: PUSH
28694: LD_INT 1
28696: ST_TO_ADDR
// if p3 = 102 then
28697: LD_VAR 0 3
28701: PUSH
28702: LD_INT 102
28704: EQUAL
28705: IFFALSE 28715
// sDiff := true ;
28707: LD_ADDR_EXP 81
28711: PUSH
28712: LD_INT 1
28714: ST_TO_ADDR
// if p3 = 103 then
28715: LD_VAR 0 3
28719: PUSH
28720: LD_INT 103
28722: EQUAL
28723: IFFALSE 28733
// sFog := true ;
28725: LD_ADDR_EXP 84
28729: PUSH
28730: LD_INT 1
28732: ST_TO_ADDR
// if p3 = 104 then
28733: LD_VAR 0 3
28737: PUSH
28738: LD_INT 104
28740: EQUAL
28741: IFFALSE 28751
// sReset := true ;
28743: LD_ADDR_EXP 85
28747: PUSH
28748: LD_INT 1
28750: ST_TO_ADDR
// if p3 = 105 then
28751: LD_VAR 0 3
28755: PUSH
28756: LD_INT 105
28758: EQUAL
28759: IFFALSE 28769
// sSun := true ;
28761: LD_ADDR_EXP 86
28765: PUSH
28766: LD_INT 1
28768: ST_TO_ADDR
// if p3 = 106 then
28769: LD_VAR 0 3
28773: PUSH
28774: LD_INT 106
28776: EQUAL
28777: IFFALSE 28787
// sTiger := true ;
28779: LD_ADDR_EXP 82
28783: PUSH
28784: LD_INT 1
28786: ST_TO_ADDR
// if p3 = 107 then
28787: LD_VAR 0 3
28791: PUSH
28792: LD_INT 107
28794: EQUAL
28795: IFFALSE 28805
// sBomb := true ;
28797: LD_ADDR_EXP 83
28801: PUSH
28802: LD_INT 1
28804: ST_TO_ADDR
// if p3 = 108 then
28805: LD_VAR 0 3
28809: PUSH
28810: LD_INT 108
28812: EQUAL
28813: IFFALSE 28823
// sWound := true ;
28815: LD_ADDR_EXP 91
28819: PUSH
28820: LD_INT 1
28822: ST_TO_ADDR
// if p3 = 109 then
28823: LD_VAR 0 3
28827: PUSH
28828: LD_INT 109
28830: EQUAL
28831: IFFALSE 28841
// sBetray := true ;
28833: LD_ADDR_EXP 95
28837: PUSH
28838: LD_INT 1
28840: ST_TO_ADDR
// if p3 = 110 then
28841: LD_VAR 0 3
28845: PUSH
28846: LD_INT 110
28848: EQUAL
28849: IFFALSE 28859
// sContamin := true ;
28851: LD_ADDR_EXP 96
28855: PUSH
28856: LD_INT 1
28858: ST_TO_ADDR
// if p3 = 111 then
28859: LD_VAR 0 3
28863: PUSH
28864: LD_INT 111
28866: EQUAL
28867: IFFALSE 28877
// sOil := true ;
28869: LD_ADDR_EXP 98
28873: PUSH
28874: LD_INT 1
28876: ST_TO_ADDR
// if p3 = 112 then
28877: LD_VAR 0 3
28881: PUSH
28882: LD_INT 112
28884: EQUAL
28885: IFFALSE 28895
// sStu := true ;
28887: LD_ADDR_EXP 102
28891: PUSH
28892: LD_INT 1
28894: ST_TO_ADDR
// if p3 = 113 then
28895: LD_VAR 0 3
28899: PUSH
28900: LD_INT 113
28902: EQUAL
28903: IFFALSE 28913
// sBazooka := true ;
28905: LD_ADDR_EXP 105
28909: PUSH
28910: LD_INT 1
28912: ST_TO_ADDR
// if p3 = 114 then
28913: LD_VAR 0 3
28917: PUSH
28918: LD_INT 114
28920: EQUAL
28921: IFFALSE 28931
// sMortar := true ;
28923: LD_ADDR_EXP 106
28927: PUSH
28928: LD_INT 1
28930: ST_TO_ADDR
// if p3 = 115 then
28931: LD_VAR 0 3
28935: PUSH
28936: LD_INT 115
28938: EQUAL
28939: IFFALSE 28949
// sRanger := true ;
28941: LD_ADDR_EXP 116
28945: PUSH
28946: LD_INT 1
28948: ST_TO_ADDR
// if p3 = 116 then
28949: LD_VAR 0 3
28953: PUSH
28954: LD_INT 116
28956: EQUAL
28957: IFFALSE 28967
// sComputer := true ;
28959: LD_ADDR_EXP 117
28963: PUSH
28964: LD_INT 1
28966: ST_TO_ADDR
// if p3 = 117 then
28967: LD_VAR 0 3
28971: PUSH
28972: LD_INT 117
28974: EQUAL
28975: IFFALSE 28985
// s30 := true ;
28977: LD_ADDR_EXP 118
28981: PUSH
28982: LD_INT 1
28984: ST_TO_ADDR
// if p3 = 118 then
28985: LD_VAR 0 3
28989: PUSH
28990: LD_INT 118
28992: EQUAL
28993: IFFALSE 29003
// s60 := true ;
28995: LD_ADDR_EXP 119
28999: PUSH
29000: LD_INT 1
29002: ST_TO_ADDR
// end ; if p2 = 101 then
29003: LD_VAR 0 2
29007: PUSH
29008: LD_INT 101
29010: EQUAL
29011: IFFALSE 29139
// begin case p3 of 1 :
29013: LD_VAR 0 3
29017: PUSH
29018: LD_INT 1
29020: DOUBLE
29021: EQUAL
29022: IFTRUE 29026
29024: GO 29033
29026: POP
// hHackUnlimitedResources ; 2 :
29027: CALL 41237 0 0
29031: GO 29139
29033: LD_INT 2
29035: DOUBLE
29036: EQUAL
29037: IFTRUE 29041
29039: GO 29048
29041: POP
// hHackSetLevel10 ; 3 :
29042: CALL 41370 0 0
29046: GO 29139
29048: LD_INT 3
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29063
29056: POP
// hHackSetLevel10YourUnits ; 4 :
29057: CALL 41455 0 0
29061: GO 29139
29063: LD_INT 4
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29078
29071: POP
// hHackInvincible ; 5 :
29072: CALL 41903 0 0
29076: GO 29139
29078: LD_INT 5
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29086
29084: GO 29093
29086: POP
// hHackInvisible ; 6 :
29087: CALL 42014 0 0
29091: GO 29139
29093: LD_INT 6
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 29108
29101: POP
// hHackChangeYourSide ; 7 :
29102: CALL 42071 0 0
29106: GO 29139
29108: LD_INT 7
29110: DOUBLE
29111: EQUAL
29112: IFTRUE 29116
29114: GO 29123
29116: POP
// hHackChangeUnitSide ; 8 :
29117: CALL 42113 0 0
29121: GO 29139
29123: LD_INT 8
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29138
29131: POP
// hHackFog ; end ;
29132: CALL 42214 0 0
29136: GO 29139
29138: POP
// end ; end ;
29139: LD_VAR 0 7
29143: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
29144: GO 29146
29146: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29147: LD_STRING initStreamRollete();
29149: PPUSH
29150: CALL_OW 559
// InitStreamMode ;
29154: CALL 29166 0 0
// DefineStreamItems ( false ) ;
29158: LD_INT 0
29160: PPUSH
29161: CALL 29630 0 1
// end ;
29165: END
// function InitStreamMode ; begin
29166: LD_INT 0
29168: PPUSH
// streamModeActive := false ;
29169: LD_ADDR_EXP 63
29173: PUSH
29174: LD_INT 0
29176: ST_TO_ADDR
// normalCounter := 36 ;
29177: LD_ADDR_EXP 64
29181: PUSH
29182: LD_INT 36
29184: ST_TO_ADDR
// hardcoreCounter := 18 ;
29185: LD_ADDR_EXP 65
29189: PUSH
29190: LD_INT 18
29192: ST_TO_ADDR
// sRocket := false ;
29193: LD_ADDR_EXP 68
29197: PUSH
29198: LD_INT 0
29200: ST_TO_ADDR
// sSpeed := false ;
29201: LD_ADDR_EXP 67
29205: PUSH
29206: LD_INT 0
29208: ST_TO_ADDR
// sEngine := false ;
29209: LD_ADDR_EXP 69
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// sSpec := false ;
29217: LD_ADDR_EXP 66
29221: PUSH
29222: LD_INT 0
29224: ST_TO_ADDR
// sLevel := false ;
29225: LD_ADDR_EXP 70
29229: PUSH
29230: LD_INT 0
29232: ST_TO_ADDR
// sArmoury := false ;
29233: LD_ADDR_EXP 71
29237: PUSH
29238: LD_INT 0
29240: ST_TO_ADDR
// sRadar := false ;
29241: LD_ADDR_EXP 72
29245: PUSH
29246: LD_INT 0
29248: ST_TO_ADDR
// sBunker := false ;
29249: LD_ADDR_EXP 73
29253: PUSH
29254: LD_INT 0
29256: ST_TO_ADDR
// sHack := false ;
29257: LD_ADDR_EXP 74
29261: PUSH
29262: LD_INT 0
29264: ST_TO_ADDR
// sFire := false ;
29265: LD_ADDR_EXP 75
29269: PUSH
29270: LD_INT 0
29272: ST_TO_ADDR
// sRefresh := false ;
29273: LD_ADDR_EXP 76
29277: PUSH
29278: LD_INT 0
29280: ST_TO_ADDR
// sExp := false ;
29281: LD_ADDR_EXP 77
29285: PUSH
29286: LD_INT 0
29288: ST_TO_ADDR
// sDepot := false ;
29289: LD_ADDR_EXP 78
29293: PUSH
29294: LD_INT 0
29296: ST_TO_ADDR
// sFlag := false ;
29297: LD_ADDR_EXP 79
29301: PUSH
29302: LD_INT 0
29304: ST_TO_ADDR
// sKamikadze := false ;
29305: LD_ADDR_EXP 87
29309: PUSH
29310: LD_INT 0
29312: ST_TO_ADDR
// sTroll := false ;
29313: LD_ADDR_EXP 88
29317: PUSH
29318: LD_INT 0
29320: ST_TO_ADDR
// sSlow := false ;
29321: LD_ADDR_EXP 89
29325: PUSH
29326: LD_INT 0
29328: ST_TO_ADDR
// sLack := false ;
29329: LD_ADDR_EXP 90
29333: PUSH
29334: LD_INT 0
29336: ST_TO_ADDR
// sTank := false ;
29337: LD_ADDR_EXP 92
29341: PUSH
29342: LD_INT 0
29344: ST_TO_ADDR
// sRemote := false ;
29345: LD_ADDR_EXP 93
29349: PUSH
29350: LD_INT 0
29352: ST_TO_ADDR
// sPowell := false ;
29353: LD_ADDR_EXP 94
29357: PUSH
29358: LD_INT 0
29360: ST_TO_ADDR
// sTeleport := false ;
29361: LD_ADDR_EXP 97
29365: PUSH
29366: LD_INT 0
29368: ST_TO_ADDR
// sOilTower := false ;
29369: LD_ADDR_EXP 99
29373: PUSH
29374: LD_INT 0
29376: ST_TO_ADDR
// sShovel := false ;
29377: LD_ADDR_EXP 100
29381: PUSH
29382: LD_INT 0
29384: ST_TO_ADDR
// sSheik := false ;
29385: LD_ADDR_EXP 101
29389: PUSH
29390: LD_INT 0
29392: ST_TO_ADDR
// sEarthquake := false ;
29393: LD_ADDR_EXP 103
29397: PUSH
29398: LD_INT 0
29400: ST_TO_ADDR
// sAI := false ;
29401: LD_ADDR_EXP 104
29405: PUSH
29406: LD_INT 0
29408: ST_TO_ADDR
// sCargo := false ;
29409: LD_ADDR_EXP 107
29413: PUSH
29414: LD_INT 0
29416: ST_TO_ADDR
// sDLaser := false ;
29417: LD_ADDR_EXP 108
29421: PUSH
29422: LD_INT 0
29424: ST_TO_ADDR
// sExchange := false ;
29425: LD_ADDR_EXP 109
29429: PUSH
29430: LD_INT 0
29432: ST_TO_ADDR
// sFac := false ;
29433: LD_ADDR_EXP 110
29437: PUSH
29438: LD_INT 0
29440: ST_TO_ADDR
// sPower := false ;
29441: LD_ADDR_EXP 111
29445: PUSH
29446: LD_INT 0
29448: ST_TO_ADDR
// sRandom := false ;
29449: LD_ADDR_EXP 112
29453: PUSH
29454: LD_INT 0
29456: ST_TO_ADDR
// sShield := false ;
29457: LD_ADDR_EXP 113
29461: PUSH
29462: LD_INT 0
29464: ST_TO_ADDR
// sTime := false ;
29465: LD_ADDR_EXP 114
29469: PUSH
29470: LD_INT 0
29472: ST_TO_ADDR
// sTools := false ;
29473: LD_ADDR_EXP 115
29477: PUSH
29478: LD_INT 0
29480: ST_TO_ADDR
// sSold := false ;
29481: LD_ADDR_EXP 80
29485: PUSH
29486: LD_INT 0
29488: ST_TO_ADDR
// sDiff := false ;
29489: LD_ADDR_EXP 81
29493: PUSH
29494: LD_INT 0
29496: ST_TO_ADDR
// sFog := false ;
29497: LD_ADDR_EXP 84
29501: PUSH
29502: LD_INT 0
29504: ST_TO_ADDR
// sReset := false ;
29505: LD_ADDR_EXP 85
29509: PUSH
29510: LD_INT 0
29512: ST_TO_ADDR
// sSun := false ;
29513: LD_ADDR_EXP 86
29517: PUSH
29518: LD_INT 0
29520: ST_TO_ADDR
// sTiger := false ;
29521: LD_ADDR_EXP 82
29525: PUSH
29526: LD_INT 0
29528: ST_TO_ADDR
// sBomb := false ;
29529: LD_ADDR_EXP 83
29533: PUSH
29534: LD_INT 0
29536: ST_TO_ADDR
// sWound := false ;
29537: LD_ADDR_EXP 91
29541: PUSH
29542: LD_INT 0
29544: ST_TO_ADDR
// sBetray := false ;
29545: LD_ADDR_EXP 95
29549: PUSH
29550: LD_INT 0
29552: ST_TO_ADDR
// sContamin := false ;
29553: LD_ADDR_EXP 96
29557: PUSH
29558: LD_INT 0
29560: ST_TO_ADDR
// sOil := false ;
29561: LD_ADDR_EXP 98
29565: PUSH
29566: LD_INT 0
29568: ST_TO_ADDR
// sStu := false ;
29569: LD_ADDR_EXP 102
29573: PUSH
29574: LD_INT 0
29576: ST_TO_ADDR
// sBazooka := false ;
29577: LD_ADDR_EXP 105
29581: PUSH
29582: LD_INT 0
29584: ST_TO_ADDR
// sMortar := false ;
29585: LD_ADDR_EXP 106
29589: PUSH
29590: LD_INT 0
29592: ST_TO_ADDR
// sRanger := false ;
29593: LD_ADDR_EXP 116
29597: PUSH
29598: LD_INT 0
29600: ST_TO_ADDR
// sComputer := false ;
29601: LD_ADDR_EXP 117
29605: PUSH
29606: LD_INT 0
29608: ST_TO_ADDR
// s30 := false ;
29609: LD_ADDR_EXP 118
29613: PUSH
29614: LD_INT 0
29616: ST_TO_ADDR
// s60 := false ;
29617: LD_ADDR_EXP 119
29621: PUSH
29622: LD_INT 0
29624: ST_TO_ADDR
// end ;
29625: LD_VAR 0 1
29629: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
29630: LD_INT 0
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
// result := [ ] ;
29639: LD_ADDR_VAR 0 2
29643: PUSH
29644: EMPTY
29645: ST_TO_ADDR
// if campaign_id = 1 then
29646: LD_OWVAR 69
29650: PUSH
29651: LD_INT 1
29653: EQUAL
29654: IFFALSE 32820
// begin case mission_number of 1 :
29656: LD_OWVAR 70
29660: PUSH
29661: LD_INT 1
29663: DOUBLE
29664: EQUAL
29665: IFTRUE 29669
29667: GO 29745
29669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29670: LD_ADDR_VAR 0 2
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 4
29680: PUSH
29681: LD_INT 11
29683: PUSH
29684: LD_INT 12
29686: PUSH
29687: LD_INT 15
29689: PUSH
29690: LD_INT 16
29692: PUSH
29693: LD_INT 22
29695: PUSH
29696: LD_INT 23
29698: PUSH
29699: LD_INT 26
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 101
29715: PUSH
29716: LD_INT 102
29718: PUSH
29719: LD_INT 106
29721: PUSH
29722: LD_INT 116
29724: PUSH
29725: LD_INT 117
29727: PUSH
29728: LD_INT 118
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: ST_TO_ADDR
29743: GO 32818
29745: LD_INT 2
29747: DOUBLE
29748: EQUAL
29749: IFTRUE 29753
29751: GO 29837
29753: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29754: LD_ADDR_VAR 0 2
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: LD_INT 4
29764: PUSH
29765: LD_INT 11
29767: PUSH
29768: LD_INT 12
29770: PUSH
29771: LD_INT 15
29773: PUSH
29774: LD_INT 16
29776: PUSH
29777: LD_INT 22
29779: PUSH
29780: LD_INT 23
29782: PUSH
29783: LD_INT 26
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 101
29799: PUSH
29800: LD_INT 102
29802: PUSH
29803: LD_INT 105
29805: PUSH
29806: LD_INT 106
29808: PUSH
29809: LD_INT 108
29811: PUSH
29812: LD_INT 116
29814: PUSH
29815: LD_INT 117
29817: PUSH
29818: LD_INT 118
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: ST_TO_ADDR
29835: GO 32818
29837: LD_INT 3
29839: DOUBLE
29840: EQUAL
29841: IFTRUE 29845
29843: GO 29933
29845: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29846: LD_ADDR_VAR 0 2
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 4
29856: PUSH
29857: LD_INT 5
29859: PUSH
29860: LD_INT 11
29862: PUSH
29863: LD_INT 12
29865: PUSH
29866: LD_INT 15
29868: PUSH
29869: LD_INT 16
29871: PUSH
29872: LD_INT 22
29874: PUSH
29875: LD_INT 26
29877: PUSH
29878: LD_INT 36
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 101
29895: PUSH
29896: LD_INT 102
29898: PUSH
29899: LD_INT 105
29901: PUSH
29902: LD_INT 106
29904: PUSH
29905: LD_INT 108
29907: PUSH
29908: LD_INT 116
29910: PUSH
29911: LD_INT 117
29913: PUSH
29914: LD_INT 118
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: ST_TO_ADDR
29931: GO 32818
29933: LD_INT 4
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 30037
29941: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29942: LD_ADDR_VAR 0 2
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 4
29952: PUSH
29953: LD_INT 5
29955: PUSH
29956: LD_INT 8
29958: PUSH
29959: LD_INT 11
29961: PUSH
29962: LD_INT 12
29964: PUSH
29965: LD_INT 15
29967: PUSH
29968: LD_INT 16
29970: PUSH
29971: LD_INT 22
29973: PUSH
29974: LD_INT 23
29976: PUSH
29977: LD_INT 26
29979: PUSH
29980: LD_INT 36
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 101
29999: PUSH
30000: LD_INT 102
30002: PUSH
30003: LD_INT 105
30005: PUSH
30006: LD_INT 106
30008: PUSH
30009: LD_INT 108
30011: PUSH
30012: LD_INT 116
30014: PUSH
30015: LD_INT 117
30017: PUSH
30018: LD_INT 118
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: ST_TO_ADDR
30035: GO 32818
30037: LD_INT 5
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30157
30045: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
30046: LD_ADDR_VAR 0 2
30050: PUSH
30051: LD_INT 2
30053: PUSH
30054: LD_INT 4
30056: PUSH
30057: LD_INT 5
30059: PUSH
30060: LD_INT 6
30062: PUSH
30063: LD_INT 8
30065: PUSH
30066: LD_INT 11
30068: PUSH
30069: LD_INT 12
30071: PUSH
30072: LD_INT 15
30074: PUSH
30075: LD_INT 16
30077: PUSH
30078: LD_INT 22
30080: PUSH
30081: LD_INT 23
30083: PUSH
30084: LD_INT 25
30086: PUSH
30087: LD_INT 26
30089: PUSH
30090: LD_INT 36
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 101
30111: PUSH
30112: LD_INT 102
30114: PUSH
30115: LD_INT 105
30117: PUSH
30118: LD_INT 106
30120: PUSH
30121: LD_INT 108
30123: PUSH
30124: LD_INT 109
30126: PUSH
30127: LD_INT 112
30129: PUSH
30130: LD_INT 116
30132: PUSH
30133: LD_INT 117
30135: PUSH
30136: LD_INT 118
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: ST_TO_ADDR
30155: GO 32818
30157: LD_INT 6
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30297
30165: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
30166: LD_ADDR_VAR 0 2
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: LD_INT 4
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: LD_INT 6
30182: PUSH
30183: LD_INT 8
30185: PUSH
30186: LD_INT 11
30188: PUSH
30189: LD_INT 12
30191: PUSH
30192: LD_INT 15
30194: PUSH
30195: LD_INT 16
30197: PUSH
30198: LD_INT 20
30200: PUSH
30201: LD_INT 21
30203: PUSH
30204: LD_INT 22
30206: PUSH
30207: LD_INT 23
30209: PUSH
30210: LD_INT 25
30212: PUSH
30213: LD_INT 26
30215: PUSH
30216: LD_INT 30
30218: PUSH
30219: LD_INT 31
30221: PUSH
30222: LD_INT 32
30224: PUSH
30225: LD_INT 36
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 101
30251: PUSH
30252: LD_INT 102
30254: PUSH
30255: LD_INT 105
30257: PUSH
30258: LD_INT 106
30260: PUSH
30261: LD_INT 108
30263: PUSH
30264: LD_INT 109
30266: PUSH
30267: LD_INT 112
30269: PUSH
30270: LD_INT 116
30272: PUSH
30273: LD_INT 117
30275: PUSH
30276: LD_INT 118
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: ST_TO_ADDR
30295: GO 32818
30297: LD_INT 7
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30417
30305: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
30306: LD_ADDR_VAR 0 2
30310: PUSH
30311: LD_INT 2
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: LD_INT 5
30319: PUSH
30320: LD_INT 7
30322: PUSH
30323: LD_INT 11
30325: PUSH
30326: LD_INT 12
30328: PUSH
30329: LD_INT 15
30331: PUSH
30332: LD_INT 16
30334: PUSH
30335: LD_INT 20
30337: PUSH
30338: LD_INT 21
30340: PUSH
30341: LD_INT 22
30343: PUSH
30344: LD_INT 23
30346: PUSH
30347: LD_INT 25
30349: PUSH
30350: LD_INT 26
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 101
30371: PUSH
30372: LD_INT 102
30374: PUSH
30375: LD_INT 103
30377: PUSH
30378: LD_INT 105
30380: PUSH
30381: LD_INT 106
30383: PUSH
30384: LD_INT 108
30386: PUSH
30387: LD_INT 112
30389: PUSH
30390: LD_INT 116
30392: PUSH
30393: LD_INT 117
30395: PUSH
30396: LD_INT 118
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: ST_TO_ADDR
30415: GO 32818
30417: LD_INT 8
30419: DOUBLE
30420: EQUAL
30421: IFTRUE 30425
30423: GO 30565
30425: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
30426: LD_ADDR_VAR 0 2
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 4
30436: PUSH
30437: LD_INT 5
30439: PUSH
30440: LD_INT 6
30442: PUSH
30443: LD_INT 7
30445: PUSH
30446: LD_INT 8
30448: PUSH
30449: LD_INT 11
30451: PUSH
30452: LD_INT 12
30454: PUSH
30455: LD_INT 15
30457: PUSH
30458: LD_INT 16
30460: PUSH
30461: LD_INT 20
30463: PUSH
30464: LD_INT 21
30466: PUSH
30467: LD_INT 22
30469: PUSH
30470: LD_INT 23
30472: PUSH
30473: LD_INT 25
30475: PUSH
30476: LD_INT 26
30478: PUSH
30479: LD_INT 30
30481: PUSH
30482: LD_INT 31
30484: PUSH
30485: LD_INT 32
30487: PUSH
30488: LD_INT 36
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 101
30515: PUSH
30516: LD_INT 102
30518: PUSH
30519: LD_INT 103
30521: PUSH
30522: LD_INT 105
30524: PUSH
30525: LD_INT 106
30527: PUSH
30528: LD_INT 108
30530: PUSH
30531: LD_INT 109
30533: PUSH
30534: LD_INT 112
30536: PUSH
30537: LD_INT 116
30539: PUSH
30540: LD_INT 117
30542: PUSH
30543: LD_INT 118
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: ST_TO_ADDR
30563: GO 32818
30565: LD_INT 9
30567: DOUBLE
30568: EQUAL
30569: IFTRUE 30573
30571: GO 30721
30573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
30574: LD_ADDR_VAR 0 2
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: LD_INT 4
30584: PUSH
30585: LD_INT 5
30587: PUSH
30588: LD_INT 6
30590: PUSH
30591: LD_INT 7
30593: PUSH
30594: LD_INT 8
30596: PUSH
30597: LD_INT 11
30599: PUSH
30600: LD_INT 12
30602: PUSH
30603: LD_INT 15
30605: PUSH
30606: LD_INT 16
30608: PUSH
30609: LD_INT 20
30611: PUSH
30612: LD_INT 21
30614: PUSH
30615: LD_INT 22
30617: PUSH
30618: LD_INT 23
30620: PUSH
30621: LD_INT 25
30623: PUSH
30624: LD_INT 26
30626: PUSH
30627: LD_INT 28
30629: PUSH
30630: LD_INT 30
30632: PUSH
30633: LD_INT 31
30635: PUSH
30636: LD_INT 32
30638: PUSH
30639: LD_INT 36
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 101
30667: PUSH
30668: LD_INT 102
30670: PUSH
30671: LD_INT 103
30673: PUSH
30674: LD_INT 105
30676: PUSH
30677: LD_INT 106
30679: PUSH
30680: LD_INT 108
30682: PUSH
30683: LD_INT 109
30685: PUSH
30686: LD_INT 112
30688: PUSH
30689: LD_INT 114
30691: PUSH
30692: LD_INT 116
30694: PUSH
30695: LD_INT 117
30697: PUSH
30698: LD_INT 118
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: ST_TO_ADDR
30719: GO 32818
30721: LD_INT 10
30723: DOUBLE
30724: EQUAL
30725: IFTRUE 30729
30727: GO 30925
30729: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30730: LD_ADDR_VAR 0 2
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: LD_INT 4
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: LD_INT 6
30746: PUSH
30747: LD_INT 7
30749: PUSH
30750: LD_INT 8
30752: PUSH
30753: LD_INT 9
30755: PUSH
30756: LD_INT 10
30758: PUSH
30759: LD_INT 11
30761: PUSH
30762: LD_INT 12
30764: PUSH
30765: LD_INT 13
30767: PUSH
30768: LD_INT 14
30770: PUSH
30771: LD_INT 15
30773: PUSH
30774: LD_INT 16
30776: PUSH
30777: LD_INT 17
30779: PUSH
30780: LD_INT 18
30782: PUSH
30783: LD_INT 19
30785: PUSH
30786: LD_INT 20
30788: PUSH
30789: LD_INT 21
30791: PUSH
30792: LD_INT 22
30794: PUSH
30795: LD_INT 23
30797: PUSH
30798: LD_INT 24
30800: PUSH
30801: LD_INT 25
30803: PUSH
30804: LD_INT 26
30806: PUSH
30807: LD_INT 28
30809: PUSH
30810: LD_INT 30
30812: PUSH
30813: LD_INT 31
30815: PUSH
30816: LD_INT 32
30818: PUSH
30819: LD_INT 36
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 101
30855: PUSH
30856: LD_INT 102
30858: PUSH
30859: LD_INT 103
30861: PUSH
30862: LD_INT 104
30864: PUSH
30865: LD_INT 105
30867: PUSH
30868: LD_INT 106
30870: PUSH
30871: LD_INT 107
30873: PUSH
30874: LD_INT 108
30876: PUSH
30877: LD_INT 109
30879: PUSH
30880: LD_INT 110
30882: PUSH
30883: LD_INT 111
30885: PUSH
30886: LD_INT 112
30888: PUSH
30889: LD_INT 114
30891: PUSH
30892: LD_INT 116
30894: PUSH
30895: LD_INT 117
30897: PUSH
30898: LD_INT 118
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: ST_TO_ADDR
30923: GO 32818
30925: LD_INT 11
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 31137
30933: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30934: LD_ADDR_VAR 0 2
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: LD_INT 4
30947: PUSH
30948: LD_INT 5
30950: PUSH
30951: LD_INT 6
30953: PUSH
30954: LD_INT 7
30956: PUSH
30957: LD_INT 8
30959: PUSH
30960: LD_INT 9
30962: PUSH
30963: LD_INT 10
30965: PUSH
30966: LD_INT 11
30968: PUSH
30969: LD_INT 12
30971: PUSH
30972: LD_INT 13
30974: PUSH
30975: LD_INT 14
30977: PUSH
30978: LD_INT 15
30980: PUSH
30981: LD_INT 16
30983: PUSH
30984: LD_INT 17
30986: PUSH
30987: LD_INT 18
30989: PUSH
30990: LD_INT 19
30992: PUSH
30993: LD_INT 20
30995: PUSH
30996: LD_INT 21
30998: PUSH
30999: LD_INT 22
31001: PUSH
31002: LD_INT 23
31004: PUSH
31005: LD_INT 24
31007: PUSH
31008: LD_INT 25
31010: PUSH
31011: LD_INT 26
31013: PUSH
31014: LD_INT 28
31016: PUSH
31017: LD_INT 30
31019: PUSH
31020: LD_INT 31
31022: PUSH
31023: LD_INT 32
31025: PUSH
31026: LD_INT 34
31028: PUSH
31029: LD_INT 36
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 101
31067: PUSH
31068: LD_INT 102
31070: PUSH
31071: LD_INT 103
31073: PUSH
31074: LD_INT 104
31076: PUSH
31077: LD_INT 105
31079: PUSH
31080: LD_INT 106
31082: PUSH
31083: LD_INT 107
31085: PUSH
31086: LD_INT 108
31088: PUSH
31089: LD_INT 109
31091: PUSH
31092: LD_INT 110
31094: PUSH
31095: LD_INT 111
31097: PUSH
31098: LD_INT 112
31100: PUSH
31101: LD_INT 114
31103: PUSH
31104: LD_INT 116
31106: PUSH
31107: LD_INT 117
31109: PUSH
31110: LD_INT 118
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: ST_TO_ADDR
31135: GO 32818
31137: LD_INT 12
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31365
31145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
31146: LD_ADDR_VAR 0 2
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 4
31162: PUSH
31163: LD_INT 5
31165: PUSH
31166: LD_INT 6
31168: PUSH
31169: LD_INT 7
31171: PUSH
31172: LD_INT 8
31174: PUSH
31175: LD_INT 9
31177: PUSH
31178: LD_INT 10
31180: PUSH
31181: LD_INT 11
31183: PUSH
31184: LD_INT 12
31186: PUSH
31187: LD_INT 13
31189: PUSH
31190: LD_INT 14
31192: PUSH
31193: LD_INT 15
31195: PUSH
31196: LD_INT 16
31198: PUSH
31199: LD_INT 17
31201: PUSH
31202: LD_INT 18
31204: PUSH
31205: LD_INT 19
31207: PUSH
31208: LD_INT 20
31210: PUSH
31211: LD_INT 21
31213: PUSH
31214: LD_INT 22
31216: PUSH
31217: LD_INT 23
31219: PUSH
31220: LD_INT 24
31222: PUSH
31223: LD_INT 25
31225: PUSH
31226: LD_INT 26
31228: PUSH
31229: LD_INT 27
31231: PUSH
31232: LD_INT 28
31234: PUSH
31235: LD_INT 30
31237: PUSH
31238: LD_INT 31
31240: PUSH
31241: LD_INT 32
31243: PUSH
31244: LD_INT 33
31246: PUSH
31247: LD_INT 34
31249: PUSH
31250: LD_INT 36
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 101
31291: PUSH
31292: LD_INT 102
31294: PUSH
31295: LD_INT 103
31297: PUSH
31298: LD_INT 104
31300: PUSH
31301: LD_INT 105
31303: PUSH
31304: LD_INT 106
31306: PUSH
31307: LD_INT 107
31309: PUSH
31310: LD_INT 108
31312: PUSH
31313: LD_INT 109
31315: PUSH
31316: LD_INT 110
31318: PUSH
31319: LD_INT 111
31321: PUSH
31322: LD_INT 112
31324: PUSH
31325: LD_INT 113
31327: PUSH
31328: LD_INT 114
31330: PUSH
31331: LD_INT 116
31333: PUSH
31334: LD_INT 117
31336: PUSH
31337: LD_INT 118
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: ST_TO_ADDR
31363: GO 32818
31365: LD_INT 13
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 31581
31373: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
31374: LD_ADDR_VAR 0 2
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: LD_INT 8
31396: PUSH
31397: LD_INT 9
31399: PUSH
31400: LD_INT 10
31402: PUSH
31403: LD_INT 11
31405: PUSH
31406: LD_INT 12
31408: PUSH
31409: LD_INT 14
31411: PUSH
31412: LD_INT 15
31414: PUSH
31415: LD_INT 16
31417: PUSH
31418: LD_INT 17
31420: PUSH
31421: LD_INT 18
31423: PUSH
31424: LD_INT 19
31426: PUSH
31427: LD_INT 20
31429: PUSH
31430: LD_INT 21
31432: PUSH
31433: LD_INT 22
31435: PUSH
31436: LD_INT 23
31438: PUSH
31439: LD_INT 24
31441: PUSH
31442: LD_INT 25
31444: PUSH
31445: LD_INT 26
31447: PUSH
31448: LD_INT 27
31450: PUSH
31451: LD_INT 28
31453: PUSH
31454: LD_INT 30
31456: PUSH
31457: LD_INT 31
31459: PUSH
31460: LD_INT 32
31462: PUSH
31463: LD_INT 33
31465: PUSH
31466: LD_INT 34
31468: PUSH
31469: LD_INT 36
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 101
31507: PUSH
31508: LD_INT 102
31510: PUSH
31511: LD_INT 103
31513: PUSH
31514: LD_INT 104
31516: PUSH
31517: LD_INT 105
31519: PUSH
31520: LD_INT 106
31522: PUSH
31523: LD_INT 107
31525: PUSH
31526: LD_INT 108
31528: PUSH
31529: LD_INT 109
31531: PUSH
31532: LD_INT 110
31534: PUSH
31535: LD_INT 111
31537: PUSH
31538: LD_INT 112
31540: PUSH
31541: LD_INT 113
31543: PUSH
31544: LD_INT 114
31546: PUSH
31547: LD_INT 116
31549: PUSH
31550: LD_INT 117
31552: PUSH
31553: LD_INT 118
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: ST_TO_ADDR
31579: GO 32818
31581: LD_INT 14
31583: DOUBLE
31584: EQUAL
31585: IFTRUE 31589
31587: GO 31813
31589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
31590: LD_ADDR_VAR 0 2
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 3
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 5
31609: PUSH
31610: LD_INT 6
31612: PUSH
31613: LD_INT 7
31615: PUSH
31616: LD_INT 8
31618: PUSH
31619: LD_INT 9
31621: PUSH
31622: LD_INT 10
31624: PUSH
31625: LD_INT 11
31627: PUSH
31628: LD_INT 12
31630: PUSH
31631: LD_INT 13
31633: PUSH
31634: LD_INT 14
31636: PUSH
31637: LD_INT 15
31639: PUSH
31640: LD_INT 16
31642: PUSH
31643: LD_INT 17
31645: PUSH
31646: LD_INT 18
31648: PUSH
31649: LD_INT 19
31651: PUSH
31652: LD_INT 20
31654: PUSH
31655: LD_INT 21
31657: PUSH
31658: LD_INT 22
31660: PUSH
31661: LD_INT 23
31663: PUSH
31664: LD_INT 24
31666: PUSH
31667: LD_INT 25
31669: PUSH
31670: LD_INT 26
31672: PUSH
31673: LD_INT 27
31675: PUSH
31676: LD_INT 28
31678: PUSH
31679: LD_INT 29
31681: PUSH
31682: LD_INT 30
31684: PUSH
31685: LD_INT 31
31687: PUSH
31688: LD_INT 32
31690: PUSH
31691: LD_INT 33
31693: PUSH
31694: LD_INT 34
31696: PUSH
31697: LD_INT 36
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 101
31739: PUSH
31740: LD_INT 102
31742: PUSH
31743: LD_INT 103
31745: PUSH
31746: LD_INT 104
31748: PUSH
31749: LD_INT 105
31751: PUSH
31752: LD_INT 106
31754: PUSH
31755: LD_INT 107
31757: PUSH
31758: LD_INT 108
31760: PUSH
31761: LD_INT 109
31763: PUSH
31764: LD_INT 110
31766: PUSH
31767: LD_INT 111
31769: PUSH
31770: LD_INT 112
31772: PUSH
31773: LD_INT 113
31775: PUSH
31776: LD_INT 114
31778: PUSH
31779: LD_INT 116
31781: PUSH
31782: LD_INT 117
31784: PUSH
31785: LD_INT 118
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: ST_TO_ADDR
31811: GO 32818
31813: LD_INT 15
31815: DOUBLE
31816: EQUAL
31817: IFTRUE 31821
31819: GO 32045
31821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31822: LD_ADDR_VAR 0 2
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 4
31838: PUSH
31839: LD_INT 5
31841: PUSH
31842: LD_INT 6
31844: PUSH
31845: LD_INT 7
31847: PUSH
31848: LD_INT 8
31850: PUSH
31851: LD_INT 9
31853: PUSH
31854: LD_INT 10
31856: PUSH
31857: LD_INT 11
31859: PUSH
31860: LD_INT 12
31862: PUSH
31863: LD_INT 13
31865: PUSH
31866: LD_INT 14
31868: PUSH
31869: LD_INT 15
31871: PUSH
31872: LD_INT 16
31874: PUSH
31875: LD_INT 17
31877: PUSH
31878: LD_INT 18
31880: PUSH
31881: LD_INT 19
31883: PUSH
31884: LD_INT 20
31886: PUSH
31887: LD_INT 21
31889: PUSH
31890: LD_INT 22
31892: PUSH
31893: LD_INT 23
31895: PUSH
31896: LD_INT 24
31898: PUSH
31899: LD_INT 25
31901: PUSH
31902: LD_INT 26
31904: PUSH
31905: LD_INT 27
31907: PUSH
31908: LD_INT 28
31910: PUSH
31911: LD_INT 29
31913: PUSH
31914: LD_INT 30
31916: PUSH
31917: LD_INT 31
31919: PUSH
31920: LD_INT 32
31922: PUSH
31923: LD_INT 33
31925: PUSH
31926: LD_INT 34
31928: PUSH
31929: LD_INT 36
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 101
31971: PUSH
31972: LD_INT 102
31974: PUSH
31975: LD_INT 103
31977: PUSH
31978: LD_INT 104
31980: PUSH
31981: LD_INT 105
31983: PUSH
31984: LD_INT 106
31986: PUSH
31987: LD_INT 107
31989: PUSH
31990: LD_INT 108
31992: PUSH
31993: LD_INT 109
31995: PUSH
31996: LD_INT 110
31998: PUSH
31999: LD_INT 111
32001: PUSH
32002: LD_INT 112
32004: PUSH
32005: LD_INT 113
32007: PUSH
32008: LD_INT 114
32010: PUSH
32011: LD_INT 116
32013: PUSH
32014: LD_INT 117
32016: PUSH
32017: LD_INT 118
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: ST_TO_ADDR
32043: GO 32818
32045: LD_INT 16
32047: DOUBLE
32048: EQUAL
32049: IFTRUE 32053
32051: GO 32189
32053: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
32054: LD_ADDR_VAR 0 2
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 4
32064: PUSH
32065: LD_INT 5
32067: PUSH
32068: LD_INT 7
32070: PUSH
32071: LD_INT 11
32073: PUSH
32074: LD_INT 12
32076: PUSH
32077: LD_INT 15
32079: PUSH
32080: LD_INT 16
32082: PUSH
32083: LD_INT 20
32085: PUSH
32086: LD_INT 21
32088: PUSH
32089: LD_INT 22
32091: PUSH
32092: LD_INT 23
32094: PUSH
32095: LD_INT 25
32097: PUSH
32098: LD_INT 26
32100: PUSH
32101: LD_INT 30
32103: PUSH
32104: LD_INT 31
32106: PUSH
32107: LD_INT 32
32109: PUSH
32110: LD_INT 33
32112: PUSH
32113: LD_INT 34
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 101
32139: PUSH
32140: LD_INT 102
32142: PUSH
32143: LD_INT 103
32145: PUSH
32146: LD_INT 106
32148: PUSH
32149: LD_INT 108
32151: PUSH
32152: LD_INT 112
32154: PUSH
32155: LD_INT 113
32157: PUSH
32158: LD_INT 114
32160: PUSH
32161: LD_INT 116
32163: PUSH
32164: LD_INT 117
32166: PUSH
32167: LD_INT 118
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: ST_TO_ADDR
32187: GO 32818
32189: LD_INT 17
32191: DOUBLE
32192: EQUAL
32193: IFTRUE 32197
32195: GO 32421
32197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
32198: LD_ADDR_VAR 0 2
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 4
32214: PUSH
32215: LD_INT 5
32217: PUSH
32218: LD_INT 6
32220: PUSH
32221: LD_INT 7
32223: PUSH
32224: LD_INT 8
32226: PUSH
32227: LD_INT 9
32229: PUSH
32230: LD_INT 10
32232: PUSH
32233: LD_INT 11
32235: PUSH
32236: LD_INT 12
32238: PUSH
32239: LD_INT 13
32241: PUSH
32242: LD_INT 14
32244: PUSH
32245: LD_INT 15
32247: PUSH
32248: LD_INT 16
32250: PUSH
32251: LD_INT 17
32253: PUSH
32254: LD_INT 18
32256: PUSH
32257: LD_INT 19
32259: PUSH
32260: LD_INT 20
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: LD_INT 22
32268: PUSH
32269: LD_INT 23
32271: PUSH
32272: LD_INT 24
32274: PUSH
32275: LD_INT 25
32277: PUSH
32278: LD_INT 26
32280: PUSH
32281: LD_INT 27
32283: PUSH
32284: LD_INT 28
32286: PUSH
32287: LD_INT 29
32289: PUSH
32290: LD_INT 30
32292: PUSH
32293: LD_INT 31
32295: PUSH
32296: LD_INT 32
32298: PUSH
32299: LD_INT 33
32301: PUSH
32302: LD_INT 34
32304: PUSH
32305: LD_INT 36
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 101
32347: PUSH
32348: LD_INT 102
32350: PUSH
32351: LD_INT 103
32353: PUSH
32354: LD_INT 104
32356: PUSH
32357: LD_INT 105
32359: PUSH
32360: LD_INT 106
32362: PUSH
32363: LD_INT 107
32365: PUSH
32366: LD_INT 108
32368: PUSH
32369: LD_INT 109
32371: PUSH
32372: LD_INT 110
32374: PUSH
32375: LD_INT 111
32377: PUSH
32378: LD_INT 112
32380: PUSH
32381: LD_INT 113
32383: PUSH
32384: LD_INT 114
32386: PUSH
32387: LD_INT 116
32389: PUSH
32390: LD_INT 117
32392: PUSH
32393: LD_INT 118
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: ST_TO_ADDR
32419: GO 32818
32421: LD_INT 18
32423: DOUBLE
32424: EQUAL
32425: IFTRUE 32429
32427: GO 32577
32429: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 4
32440: PUSH
32441: LD_INT 5
32443: PUSH
32444: LD_INT 7
32446: PUSH
32447: LD_INT 11
32449: PUSH
32450: LD_INT 12
32452: PUSH
32453: LD_INT 15
32455: PUSH
32456: LD_INT 16
32458: PUSH
32459: LD_INT 20
32461: PUSH
32462: LD_INT 21
32464: PUSH
32465: LD_INT 22
32467: PUSH
32468: LD_INT 23
32470: PUSH
32471: LD_INT 25
32473: PUSH
32474: LD_INT 26
32476: PUSH
32477: LD_INT 30
32479: PUSH
32480: LD_INT 31
32482: PUSH
32483: LD_INT 32
32485: PUSH
32486: LD_INT 33
32488: PUSH
32489: LD_INT 34
32491: PUSH
32492: LD_INT 35
32494: PUSH
32495: LD_INT 36
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 101
32523: PUSH
32524: LD_INT 102
32526: PUSH
32527: LD_INT 103
32529: PUSH
32530: LD_INT 106
32532: PUSH
32533: LD_INT 108
32535: PUSH
32536: LD_INT 112
32538: PUSH
32539: LD_INT 113
32541: PUSH
32542: LD_INT 114
32544: PUSH
32545: LD_INT 115
32547: PUSH
32548: LD_INT 116
32550: PUSH
32551: LD_INT 117
32553: PUSH
32554: LD_INT 118
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: ST_TO_ADDR
32575: GO 32818
32577: LD_INT 19
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32585
32583: GO 32817
32585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: LD_INT 5
32605: PUSH
32606: LD_INT 6
32608: PUSH
32609: LD_INT 7
32611: PUSH
32612: LD_INT 8
32614: PUSH
32615: LD_INT 9
32617: PUSH
32618: LD_INT 10
32620: PUSH
32621: LD_INT 11
32623: PUSH
32624: LD_INT 12
32626: PUSH
32627: LD_INT 13
32629: PUSH
32630: LD_INT 14
32632: PUSH
32633: LD_INT 15
32635: PUSH
32636: LD_INT 16
32638: PUSH
32639: LD_INT 17
32641: PUSH
32642: LD_INT 18
32644: PUSH
32645: LD_INT 19
32647: PUSH
32648: LD_INT 20
32650: PUSH
32651: LD_INT 21
32653: PUSH
32654: LD_INT 22
32656: PUSH
32657: LD_INT 23
32659: PUSH
32660: LD_INT 24
32662: PUSH
32663: LD_INT 25
32665: PUSH
32666: LD_INT 26
32668: PUSH
32669: LD_INT 27
32671: PUSH
32672: LD_INT 28
32674: PUSH
32675: LD_INT 29
32677: PUSH
32678: LD_INT 30
32680: PUSH
32681: LD_INT 31
32683: PUSH
32684: LD_INT 32
32686: PUSH
32687: LD_INT 33
32689: PUSH
32690: LD_INT 34
32692: PUSH
32693: LD_INT 35
32695: PUSH
32696: LD_INT 36
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 101
32739: PUSH
32740: LD_INT 102
32742: PUSH
32743: LD_INT 103
32745: PUSH
32746: LD_INT 104
32748: PUSH
32749: LD_INT 105
32751: PUSH
32752: LD_INT 106
32754: PUSH
32755: LD_INT 107
32757: PUSH
32758: LD_INT 108
32760: PUSH
32761: LD_INT 109
32763: PUSH
32764: LD_INT 110
32766: PUSH
32767: LD_INT 111
32769: PUSH
32770: LD_INT 112
32772: PUSH
32773: LD_INT 113
32775: PUSH
32776: LD_INT 114
32778: PUSH
32779: LD_INT 115
32781: PUSH
32782: LD_INT 116
32784: PUSH
32785: LD_INT 117
32787: PUSH
32788: LD_INT 118
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: ST_TO_ADDR
32815: GO 32818
32817: POP
// end else
32818: GO 33049
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32820: LD_ADDR_VAR 0 2
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 4
32836: PUSH
32837: LD_INT 5
32839: PUSH
32840: LD_INT 6
32842: PUSH
32843: LD_INT 7
32845: PUSH
32846: LD_INT 8
32848: PUSH
32849: LD_INT 9
32851: PUSH
32852: LD_INT 10
32854: PUSH
32855: LD_INT 11
32857: PUSH
32858: LD_INT 12
32860: PUSH
32861: LD_INT 13
32863: PUSH
32864: LD_INT 14
32866: PUSH
32867: LD_INT 15
32869: PUSH
32870: LD_INT 16
32872: PUSH
32873: LD_INT 17
32875: PUSH
32876: LD_INT 18
32878: PUSH
32879: LD_INT 19
32881: PUSH
32882: LD_INT 20
32884: PUSH
32885: LD_INT 21
32887: PUSH
32888: LD_INT 22
32890: PUSH
32891: LD_INT 23
32893: PUSH
32894: LD_INT 24
32896: PUSH
32897: LD_INT 25
32899: PUSH
32900: LD_INT 26
32902: PUSH
32903: LD_INT 27
32905: PUSH
32906: LD_INT 28
32908: PUSH
32909: LD_INT 29
32911: PUSH
32912: LD_INT 30
32914: PUSH
32915: LD_INT 31
32917: PUSH
32918: LD_INT 32
32920: PUSH
32921: LD_INT 33
32923: PUSH
32924: LD_INT 34
32926: PUSH
32927: LD_INT 35
32929: PUSH
32930: LD_INT 36
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 101
32973: PUSH
32974: LD_INT 102
32976: PUSH
32977: LD_INT 103
32979: PUSH
32980: LD_INT 104
32982: PUSH
32983: LD_INT 105
32985: PUSH
32986: LD_INT 106
32988: PUSH
32989: LD_INT 107
32991: PUSH
32992: LD_INT 108
32994: PUSH
32995: LD_INT 109
32997: PUSH
32998: LD_INT 110
33000: PUSH
33001: LD_INT 111
33003: PUSH
33004: LD_INT 112
33006: PUSH
33007: LD_INT 113
33009: PUSH
33010: LD_INT 114
33012: PUSH
33013: LD_INT 115
33015: PUSH
33016: LD_INT 116
33018: PUSH
33019: LD_INT 117
33021: PUSH
33022: LD_INT 118
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: ST_TO_ADDR
// if result then
33049: LD_VAR 0 2
33053: IFFALSE 33839
// begin normal :=  ;
33055: LD_ADDR_VAR 0 5
33059: PUSH
33060: LD_STRING 
33062: ST_TO_ADDR
// hardcore :=  ;
33063: LD_ADDR_VAR 0 6
33067: PUSH
33068: LD_STRING 
33070: ST_TO_ADDR
// active :=  ;
33071: LD_ADDR_VAR 0 7
33075: PUSH
33076: LD_STRING 
33078: ST_TO_ADDR
// for i = 1 to normalCounter do
33079: LD_ADDR_VAR 0 8
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_EXP 64
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33196
// begin tmp := 0 ;
33097: LD_ADDR_VAR 0 3
33101: PUSH
33102: LD_STRING 0
33104: ST_TO_ADDR
// if result [ 1 ] then
33105: LD_VAR 0 2
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: IFFALSE 33178
// if result [ 1 ] [ 1 ] = i then
33115: LD_VAR 0 2
33119: PUSH
33120: LD_INT 1
33122: ARRAY
33123: PUSH
33124: LD_INT 1
33126: ARRAY
33127: PUSH
33128: LD_VAR 0 8
33132: EQUAL
33133: IFFALSE 33178
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33135: LD_ADDR_VAR 0 2
33139: PUSH
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_INT 1
33147: PPUSH
33148: LD_VAR 0 2
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: PPUSH
33157: LD_INT 1
33159: PPUSH
33160: CALL_OW 3
33164: PPUSH
33165: CALL_OW 1
33169: ST_TO_ADDR
// tmp := 1 ;
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_STRING 1
33177: ST_TO_ADDR
// end ; normal := normal & tmp ;
33178: LD_ADDR_VAR 0 5
33182: PUSH
33183: LD_VAR 0 5
33187: PUSH
33188: LD_VAR 0 3
33192: STR
33193: ST_TO_ADDR
// end ;
33194: GO 33094
33196: POP
33197: POP
// for i = 1 to hardcoreCounter do
33198: LD_ADDR_VAR 0 8
33202: PUSH
33203: DOUBLE
33204: LD_INT 1
33206: DEC
33207: ST_TO_ADDR
33208: LD_EXP 65
33212: PUSH
33213: FOR_TO
33214: IFFALSE 33319
// begin tmp := 0 ;
33216: LD_ADDR_VAR 0 3
33220: PUSH
33221: LD_STRING 0
33223: ST_TO_ADDR
// if result [ 2 ] then
33224: LD_VAR 0 2
33228: PUSH
33229: LD_INT 2
33231: ARRAY
33232: IFFALSE 33301
// if result [ 2 ] [ 1 ] = 100 + i then
33234: LD_VAR 0 2
33238: PUSH
33239: LD_INT 2
33241: ARRAY
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: PUSH
33247: LD_INT 100
33249: PUSH
33250: LD_VAR 0 8
33254: PLUS
33255: EQUAL
33256: IFFALSE 33301
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33258: LD_ADDR_VAR 0 2
33262: PUSH
33263: LD_VAR 0 2
33267: PPUSH
33268: LD_INT 2
33270: PPUSH
33271: LD_VAR 0 2
33275: PUSH
33276: LD_INT 2
33278: ARRAY
33279: PPUSH
33280: LD_INT 1
33282: PPUSH
33283: CALL_OW 3
33287: PPUSH
33288: CALL_OW 1
33292: ST_TO_ADDR
// tmp := 1 ;
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: LD_STRING 1
33300: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33301: LD_ADDR_VAR 0 6
33305: PUSH
33306: LD_VAR 0 6
33310: PUSH
33311: LD_VAR 0 3
33315: STR
33316: ST_TO_ADDR
// end ;
33317: GO 33213
33319: POP
33320: POP
// if isGameLoad then
33321: LD_VAR 0 1
33325: IFFALSE 33800
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
33327: LD_ADDR_VAR 0 4
33331: PUSH
33332: LD_EXP 68
33336: PUSH
33337: LD_EXP 67
33341: PUSH
33342: LD_EXP 69
33346: PUSH
33347: LD_EXP 66
33351: PUSH
33352: LD_EXP 70
33356: PUSH
33357: LD_EXP 71
33361: PUSH
33362: LD_EXP 72
33366: PUSH
33367: LD_EXP 73
33371: PUSH
33372: LD_EXP 74
33376: PUSH
33377: LD_EXP 75
33381: PUSH
33382: LD_EXP 76
33386: PUSH
33387: LD_EXP 77
33391: PUSH
33392: LD_EXP 78
33396: PUSH
33397: LD_EXP 79
33401: PUSH
33402: LD_EXP 87
33406: PUSH
33407: LD_EXP 88
33411: PUSH
33412: LD_EXP 89
33416: PUSH
33417: LD_EXP 90
33421: PUSH
33422: LD_EXP 92
33426: PUSH
33427: LD_EXP 93
33431: PUSH
33432: LD_EXP 94
33436: PUSH
33437: LD_EXP 97
33441: PUSH
33442: LD_EXP 99
33446: PUSH
33447: LD_EXP 100
33451: PUSH
33452: LD_EXP 101
33456: PUSH
33457: LD_EXP 103
33461: PUSH
33462: LD_EXP 104
33466: PUSH
33467: LD_EXP 107
33471: PUSH
33472: LD_EXP 108
33476: PUSH
33477: LD_EXP 109
33481: PUSH
33482: LD_EXP 110
33486: PUSH
33487: LD_EXP 111
33491: PUSH
33492: LD_EXP 112
33496: PUSH
33497: LD_EXP 113
33501: PUSH
33502: LD_EXP 114
33506: PUSH
33507: LD_EXP 115
33511: PUSH
33512: LD_EXP 80
33516: PUSH
33517: LD_EXP 81
33521: PUSH
33522: LD_EXP 84
33526: PUSH
33527: LD_EXP 85
33531: PUSH
33532: LD_EXP 86
33536: PUSH
33537: LD_EXP 82
33541: PUSH
33542: LD_EXP 83
33546: PUSH
33547: LD_EXP 91
33551: PUSH
33552: LD_EXP 95
33556: PUSH
33557: LD_EXP 96
33561: PUSH
33562: LD_EXP 98
33566: PUSH
33567: LD_EXP 102
33571: PUSH
33572: LD_EXP 105
33576: PUSH
33577: LD_EXP 106
33581: PUSH
33582: LD_EXP 116
33586: PUSH
33587: LD_EXP 117
33591: PUSH
33592: LD_EXP 118
33596: PUSH
33597: LD_EXP 119
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
// tmp :=  ;
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_STRING 
33665: ST_TO_ADDR
// for i = 1 to normalCounter do
33666: LD_ADDR_VAR 0 8
33670: PUSH
33671: DOUBLE
33672: LD_INT 1
33674: DEC
33675: ST_TO_ADDR
33676: LD_EXP 64
33680: PUSH
33681: FOR_TO
33682: IFFALSE 33718
// begin if flags [ i ] then
33684: LD_VAR 0 4
33688: PUSH
33689: LD_VAR 0 8
33693: ARRAY
33694: IFFALSE 33716
// tmp := tmp & i & ; ;
33696: LD_ADDR_VAR 0 3
33700: PUSH
33701: LD_VAR 0 3
33705: PUSH
33706: LD_VAR 0 8
33710: STR
33711: PUSH
33712: LD_STRING ;
33714: STR
33715: ST_TO_ADDR
// end ;
33716: GO 33681
33718: POP
33719: POP
// for i = 1 to hardcoreCounter do
33720: LD_ADDR_VAR 0 8
33724: PUSH
33725: DOUBLE
33726: LD_INT 1
33728: DEC
33729: ST_TO_ADDR
33730: LD_EXP 65
33734: PUSH
33735: FOR_TO
33736: IFFALSE 33782
// begin if flags [ normalCounter + i ] then
33738: LD_VAR 0 4
33742: PUSH
33743: LD_EXP 64
33747: PUSH
33748: LD_VAR 0 8
33752: PLUS
33753: ARRAY
33754: IFFALSE 33780
// tmp := tmp & ( 100 + i ) & ; ;
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_VAR 0 3
33765: PUSH
33766: LD_INT 100
33768: PUSH
33769: LD_VAR 0 8
33773: PLUS
33774: STR
33775: PUSH
33776: LD_STRING ;
33778: STR
33779: ST_TO_ADDR
// end ;
33780: GO 33735
33782: POP
33783: POP
// if tmp then
33784: LD_VAR 0 3
33788: IFFALSE 33800
// active := tmp ;
33790: LD_ADDR_VAR 0 7
33794: PUSH
33795: LD_VAR 0 3
33799: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33800: LD_STRING getStreamItemsFromMission("
33802: PUSH
33803: LD_VAR 0 5
33807: STR
33808: PUSH
33809: LD_STRING ","
33811: STR
33812: PUSH
33813: LD_VAR 0 6
33817: STR
33818: PUSH
33819: LD_STRING ","
33821: STR
33822: PUSH
33823: LD_VAR 0 7
33827: STR
33828: PUSH
33829: LD_STRING ")
33831: STR
33832: PPUSH
33833: CALL_OW 559
// end else
33837: GO 33846
// ToLua ( getStreamItemsFromMission("","","") ) ;
33839: LD_STRING getStreamItemsFromMission("","","")
33841: PPUSH
33842: CALL_OW 559
// end ;
33846: LD_VAR 0 2
33850: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33851: LD_EXP 63
33855: PUSH
33856: LD_EXP 68
33860: AND
33861: IFFALSE 33985
33863: GO 33865
33865: DISABLE
33866: LD_INT 0
33868: PPUSH
33869: PPUSH
// begin enable ;
33870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33871: LD_ADDR_VAR 0 2
33875: PUSH
33876: LD_INT 22
33878: PUSH
33879: LD_OWVAR 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: LD_INT 34
33893: PUSH
33894: LD_INT 7
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 34
33903: PUSH
33904: LD_INT 45
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 34
33913: PUSH
33914: LD_INT 28
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 34
33923: PUSH
33924: LD_INT 47
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PPUSH
33942: CALL_OW 69
33946: ST_TO_ADDR
// if not tmp then
33947: LD_VAR 0 2
33951: NOT
33952: IFFALSE 33956
// exit ;
33954: GO 33985
// for i in tmp do
33956: LD_ADDR_VAR 0 1
33960: PUSH
33961: LD_VAR 0 2
33965: PUSH
33966: FOR_IN
33967: IFFALSE 33983
// begin SetLives ( i , 0 ) ;
33969: LD_VAR 0 1
33973: PPUSH
33974: LD_INT 0
33976: PPUSH
33977: CALL_OW 234
// end ;
33981: GO 33966
33983: POP
33984: POP
// end ;
33985: PPOPN 2
33987: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33988: LD_EXP 63
33992: PUSH
33993: LD_EXP 69
33997: AND
33998: IFFALSE 34082
34000: GO 34002
34002: DISABLE
34003: LD_INT 0
34005: PPUSH
34006: PPUSH
// begin enable ;
34007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34008: LD_ADDR_VAR 0 2
34012: PUSH
34013: LD_INT 22
34015: PUSH
34016: LD_OWVAR 2
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 32
34027: PUSH
34028: LD_INT 3
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PPUSH
34039: CALL_OW 69
34043: ST_TO_ADDR
// if not tmp then
34044: LD_VAR 0 2
34048: NOT
34049: IFFALSE 34053
// exit ;
34051: GO 34082
// for i in tmp do
34053: LD_ADDR_VAR 0 1
34057: PUSH
34058: LD_VAR 0 2
34062: PUSH
34063: FOR_IN
34064: IFFALSE 34080
// begin SetLives ( i , 0 ) ;
34066: LD_VAR 0 1
34070: PPUSH
34071: LD_INT 0
34073: PPUSH
34074: CALL_OW 234
// end ;
34078: GO 34063
34080: POP
34081: POP
// end ;
34082: PPOPN 2
34084: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34085: LD_EXP 63
34089: PUSH
34090: LD_EXP 66
34094: AND
34095: IFFALSE 34188
34097: GO 34099
34099: DISABLE
34100: LD_INT 0
34102: PPUSH
// begin enable ;
34103: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34104: LD_ADDR_VAR 0 1
34108: PUSH
34109: LD_INT 22
34111: PUSH
34112: LD_OWVAR 2
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 25
34126: PUSH
34127: LD_INT 5
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 25
34136: PUSH
34137: LD_INT 9
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 25
34146: PUSH
34147: LD_INT 8
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL_OW 69
34168: PUSH
34169: FOR_IN
34170: IFFALSE 34186
// begin SetClass ( i , 1 ) ;
34172: LD_VAR 0 1
34176: PPUSH
34177: LD_INT 1
34179: PPUSH
34180: CALL_OW 336
// end ;
34184: GO 34169
34186: POP
34187: POP
// end ;
34188: PPOPN 1
34190: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34191: LD_EXP 63
34195: PUSH
34196: LD_EXP 67
34200: AND
34201: PUSH
34202: LD_OWVAR 65
34206: PUSH
34207: LD_INT 7
34209: LESS
34210: AND
34211: IFFALSE 34225
34213: GO 34215
34215: DISABLE
// begin enable ;
34216: ENABLE
// game_speed := 7 ;
34217: LD_ADDR_OWVAR 65
34221: PUSH
34222: LD_INT 7
34224: ST_TO_ADDR
// end ;
34225: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34226: LD_EXP 63
34230: PUSH
34231: LD_EXP 70
34235: AND
34236: IFFALSE 34438
34238: GO 34240
34240: DISABLE
34241: LD_INT 0
34243: PPUSH
34244: PPUSH
34245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34246: LD_ADDR_VAR 0 3
34250: PUSH
34251: LD_INT 81
34253: PUSH
34254: LD_OWVAR 2
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 21
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PPUSH
34277: CALL_OW 69
34281: ST_TO_ADDR
// if not tmp then
34282: LD_VAR 0 3
34286: NOT
34287: IFFALSE 34291
// exit ;
34289: GO 34438
// if tmp > 5 then
34291: LD_VAR 0 3
34295: PUSH
34296: LD_INT 5
34298: GREATER
34299: IFFALSE 34311
// k := 5 else
34301: LD_ADDR_VAR 0 2
34305: PUSH
34306: LD_INT 5
34308: ST_TO_ADDR
34309: GO 34321
// k := tmp ;
34311: LD_ADDR_VAR 0 2
34315: PUSH
34316: LD_VAR 0 3
34320: ST_TO_ADDR
// for i := 1 to k do
34321: LD_ADDR_VAR 0 1
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_VAR 0 2
34335: PUSH
34336: FOR_TO
34337: IFFALSE 34436
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
34339: LD_VAR 0 3
34343: PUSH
34344: LD_VAR 0 1
34348: ARRAY
34349: PPUSH
34350: LD_VAR 0 1
34354: PUSH
34355: LD_INT 4
34357: MOD
34358: PUSH
34359: LD_INT 1
34361: PLUS
34362: PPUSH
34363: CALL_OW 259
34367: PUSH
34368: LD_INT 10
34370: LESS
34371: IFFALSE 34434
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
34373: LD_VAR 0 3
34377: PUSH
34378: LD_VAR 0 1
34382: ARRAY
34383: PPUSH
34384: LD_VAR 0 1
34388: PUSH
34389: LD_INT 4
34391: MOD
34392: PUSH
34393: LD_INT 1
34395: PLUS
34396: PPUSH
34397: LD_VAR 0 3
34401: PUSH
34402: LD_VAR 0 1
34406: ARRAY
34407: PPUSH
34408: LD_VAR 0 1
34412: PUSH
34413: LD_INT 4
34415: MOD
34416: PUSH
34417: LD_INT 1
34419: PLUS
34420: PPUSH
34421: CALL_OW 259
34425: PUSH
34426: LD_INT 1
34428: PLUS
34429: PPUSH
34430: CALL_OW 237
34434: GO 34336
34436: POP
34437: POP
// end ;
34438: PPOPN 3
34440: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
34441: LD_EXP 63
34445: PUSH
34446: LD_EXP 71
34450: AND
34451: IFFALSE 34471
34453: GO 34455
34455: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
34456: LD_INT 4
34458: PPUSH
34459: LD_OWVAR 2
34463: PPUSH
34464: LD_INT 0
34466: PPUSH
34467: CALL_OW 324
34471: END
// every 0 0$1 trigger StreamModeActive and sShovel do
34472: LD_EXP 63
34476: PUSH
34477: LD_EXP 100
34481: AND
34482: IFFALSE 34502
34484: GO 34486
34486: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
34487: LD_INT 19
34489: PPUSH
34490: LD_OWVAR 2
34494: PPUSH
34495: LD_INT 0
34497: PPUSH
34498: CALL_OW 324
34502: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
34503: LD_EXP 63
34507: PUSH
34508: LD_EXP 72
34512: AND
34513: IFFALSE 34615
34515: GO 34517
34517: DISABLE
34518: LD_INT 0
34520: PPUSH
34521: PPUSH
// begin enable ;
34522: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
34523: LD_ADDR_VAR 0 2
34527: PUSH
34528: LD_INT 22
34530: PUSH
34531: LD_OWVAR 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 34
34545: PUSH
34546: LD_INT 11
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 34
34555: PUSH
34556: LD_INT 30
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PPUSH
34572: CALL_OW 69
34576: ST_TO_ADDR
// if not tmp then
34577: LD_VAR 0 2
34581: NOT
34582: IFFALSE 34586
// exit ;
34584: GO 34615
// for i in tmp do
34586: LD_ADDR_VAR 0 1
34590: PUSH
34591: LD_VAR 0 2
34595: PUSH
34596: FOR_IN
34597: IFFALSE 34613
// begin SetLives ( i , 0 ) ;
34599: LD_VAR 0 1
34603: PPUSH
34604: LD_INT 0
34606: PPUSH
34607: CALL_OW 234
// end ;
34611: GO 34596
34613: POP
34614: POP
// end ;
34615: PPOPN 2
34617: END
// every 0 0$1 trigger StreamModeActive and sBunker do
34618: LD_EXP 63
34622: PUSH
34623: LD_EXP 73
34627: AND
34628: IFFALSE 34648
34630: GO 34632
34632: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
34633: LD_INT 32
34635: PPUSH
34636: LD_OWVAR 2
34640: PPUSH
34641: LD_INT 0
34643: PPUSH
34644: CALL_OW 324
34648: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34649: LD_EXP 63
34653: PUSH
34654: LD_EXP 74
34658: AND
34659: IFFALSE 34840
34661: GO 34663
34663: DISABLE
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
34668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34669: LD_ADDR_VAR 0 2
34673: PUSH
34674: LD_INT 22
34676: PUSH
34677: LD_OWVAR 2
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 33
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PPUSH
34700: CALL_OW 69
34704: ST_TO_ADDR
// if not tmp then
34705: LD_VAR 0 2
34709: NOT
34710: IFFALSE 34714
// exit ;
34712: GO 34840
// side := 0 ;
34714: LD_ADDR_VAR 0 3
34718: PUSH
34719: LD_INT 0
34721: ST_TO_ADDR
// for i := 1 to 8 do
34722: LD_ADDR_VAR 0 1
34726: PUSH
34727: DOUBLE
34728: LD_INT 1
34730: DEC
34731: ST_TO_ADDR
34732: LD_INT 8
34734: PUSH
34735: FOR_TO
34736: IFFALSE 34784
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34738: LD_OWVAR 2
34742: PUSH
34743: LD_VAR 0 1
34747: NONEQUAL
34748: PUSH
34749: LD_OWVAR 2
34753: PPUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 81
34763: PUSH
34764: LD_INT 2
34766: EQUAL
34767: AND
34768: IFFALSE 34782
// begin side := i ;
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_VAR 0 1
34779: ST_TO_ADDR
// break ;
34780: GO 34784
// end ;
34782: GO 34735
34784: POP
34785: POP
// if not side then
34786: LD_VAR 0 3
34790: NOT
34791: IFFALSE 34795
// exit ;
34793: GO 34840
// for i := 1 to tmp do
34795: LD_ADDR_VAR 0 1
34799: PUSH
34800: DOUBLE
34801: LD_INT 1
34803: DEC
34804: ST_TO_ADDR
34805: LD_VAR 0 2
34809: PUSH
34810: FOR_TO
34811: IFFALSE 34838
// if Prob ( 60 ) then
34813: LD_INT 60
34815: PPUSH
34816: CALL_OW 13
34820: IFFALSE 34836
// SetSide ( i , side ) ;
34822: LD_VAR 0 1
34826: PPUSH
34827: LD_VAR 0 3
34831: PPUSH
34832: CALL_OW 235
34836: GO 34810
34838: POP
34839: POP
// end ;
34840: PPOPN 3
34842: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34843: LD_EXP 63
34847: PUSH
34848: LD_EXP 76
34852: AND
34853: IFFALSE 34972
34855: GO 34857
34857: DISABLE
34858: LD_INT 0
34860: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34861: LD_ADDR_VAR 0 1
34865: PUSH
34866: LD_INT 22
34868: PUSH
34869: LD_OWVAR 2
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 21
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 23
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: PPUSH
34910: CALL_OW 69
34914: PUSH
34915: FOR_IN
34916: IFFALSE 34970
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 257
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: IN
34946: IFFALSE 34968
// SetClass ( un , rand ( 1 , 4 ) ) ;
34948: LD_VAR 0 1
34952: PPUSH
34953: LD_INT 1
34955: PPUSH
34956: LD_INT 4
34958: PPUSH
34959: CALL_OW 12
34963: PPUSH
34964: CALL_OW 336
34968: GO 34915
34970: POP
34971: POP
// end ;
34972: PPOPN 1
34974: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34975: LD_EXP 63
34979: PUSH
34980: LD_EXP 75
34984: AND
34985: IFFALSE 35064
34987: GO 34989
34989: DISABLE
34990: LD_INT 0
34992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34993: LD_ADDR_VAR 0 1
34997: PUSH
34998: LD_INT 22
35000: PUSH
35001: LD_OWVAR 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 21
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PPUSH
35024: CALL_OW 69
35028: ST_TO_ADDR
// if not tmp then
35029: LD_VAR 0 1
35033: NOT
35034: IFFALSE 35038
// exit ;
35036: GO 35064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35038: LD_VAR 0 1
35042: PUSH
35043: LD_INT 1
35045: PPUSH
35046: LD_VAR 0 1
35050: PPUSH
35051: CALL_OW 12
35055: ARRAY
35056: PPUSH
35057: LD_INT 100
35059: PPUSH
35060: CALL_OW 234
// end ;
35064: PPOPN 1
35066: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35067: LD_EXP 63
35071: PUSH
35072: LD_EXP 77
35076: AND
35077: IFFALSE 35175
35079: GO 35081
35081: DISABLE
35082: LD_INT 0
35084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35085: LD_ADDR_VAR 0 1
35089: PUSH
35090: LD_INT 22
35092: PUSH
35093: LD_OWVAR 2
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 21
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PPUSH
35116: CALL_OW 69
35120: ST_TO_ADDR
// if not tmp then
35121: LD_VAR 0 1
35125: NOT
35126: IFFALSE 35130
// exit ;
35128: GO 35175
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35130: LD_VAR 0 1
35134: PUSH
35135: LD_INT 1
35137: PPUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 12
35147: ARRAY
35148: PPUSH
35149: LD_INT 1
35151: PPUSH
35152: LD_INT 4
35154: PPUSH
35155: CALL_OW 12
35159: PPUSH
35160: LD_INT 3000
35162: PPUSH
35163: LD_INT 9000
35165: PPUSH
35166: CALL_OW 12
35170: PPUSH
35171: CALL_OW 492
// end ;
35175: PPOPN 1
35177: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35178: LD_EXP 63
35182: PUSH
35183: LD_EXP 78
35187: AND
35188: IFFALSE 35208
35190: GO 35192
35192: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35193: LD_INT 1
35195: PPUSH
35196: LD_OWVAR 2
35200: PPUSH
35201: LD_INT 0
35203: PPUSH
35204: CALL_OW 324
35208: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35209: LD_EXP 63
35213: PUSH
35214: LD_EXP 79
35218: AND
35219: IFFALSE 35302
35221: GO 35223
35223: DISABLE
35224: LD_INT 0
35226: PPUSH
35227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35228: LD_ADDR_VAR 0 2
35232: PUSH
35233: LD_INT 22
35235: PUSH
35236: LD_OWVAR 2
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 21
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PPUSH
35259: CALL_OW 69
35263: ST_TO_ADDR
// if not tmp then
35264: LD_VAR 0 2
35268: NOT
35269: IFFALSE 35273
// exit ;
35271: GO 35302
// for i in tmp do
35273: LD_ADDR_VAR 0 1
35277: PUSH
35278: LD_VAR 0 2
35282: PUSH
35283: FOR_IN
35284: IFFALSE 35300
// SetBLevel ( i , 10 ) ;
35286: LD_VAR 0 1
35290: PPUSH
35291: LD_INT 10
35293: PPUSH
35294: CALL_OW 241
35298: GO 35283
35300: POP
35301: POP
// end ;
35302: PPOPN 2
35304: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
35305: LD_EXP 63
35309: PUSH
35310: LD_EXP 80
35314: AND
35315: IFFALSE 35426
35317: GO 35319
35319: DISABLE
35320: LD_INT 0
35322: PPUSH
35323: PPUSH
35324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35325: LD_ADDR_VAR 0 3
35329: PUSH
35330: LD_INT 22
35332: PUSH
35333: LD_OWVAR 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 25
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PPUSH
35356: CALL_OW 69
35360: ST_TO_ADDR
// if not tmp then
35361: LD_VAR 0 3
35365: NOT
35366: IFFALSE 35370
// exit ;
35368: GO 35426
// un := tmp [ rand ( 1 , tmp ) ] ;
35370: LD_ADDR_VAR 0 2
35374: PUSH
35375: LD_VAR 0 3
35379: PUSH
35380: LD_INT 1
35382: PPUSH
35383: LD_VAR 0 3
35387: PPUSH
35388: CALL_OW 12
35392: ARRAY
35393: ST_TO_ADDR
// if Crawls ( un ) then
35394: LD_VAR 0 2
35398: PPUSH
35399: CALL_OW 318
35403: IFFALSE 35414
// ComWalk ( un ) ;
35405: LD_VAR 0 2
35409: PPUSH
35410: CALL_OW 138
// SetClass ( un , class_sniper ) ;
35414: LD_VAR 0 2
35418: PPUSH
35419: LD_INT 5
35421: PPUSH
35422: CALL_OW 336
// end ;
35426: PPOPN 3
35428: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
35429: LD_EXP 63
35433: PUSH
35434: LD_EXP 81
35438: AND
35439: PUSH
35440: LD_OWVAR 67
35444: PUSH
35445: LD_INT 4
35447: LESS
35448: AND
35449: IFFALSE 35468
35451: GO 35453
35453: DISABLE
// begin Difficulty := Difficulty + 1 ;
35454: LD_ADDR_OWVAR 67
35458: PUSH
35459: LD_OWVAR 67
35463: PUSH
35464: LD_INT 1
35466: PLUS
35467: ST_TO_ADDR
// end ;
35468: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
35469: LD_EXP 63
35473: PUSH
35474: LD_EXP 82
35478: AND
35479: IFFALSE 35582
35481: GO 35483
35483: DISABLE
35484: LD_INT 0
35486: PPUSH
// begin for i := 1 to 5 do
35487: LD_ADDR_VAR 0 1
35491: PUSH
35492: DOUBLE
35493: LD_INT 1
35495: DEC
35496: ST_TO_ADDR
35497: LD_INT 5
35499: PUSH
35500: FOR_TO
35501: IFFALSE 35580
// begin uc_nation := nation_nature ;
35503: LD_ADDR_OWVAR 21
35507: PUSH
35508: LD_INT 0
35510: ST_TO_ADDR
// uc_side := 0 ;
35511: LD_ADDR_OWVAR 20
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35519: LD_ADDR_OWVAR 29
35523: PUSH
35524: LD_INT 12
35526: PUSH
35527: LD_INT 12
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// hc_agressivity := 20 ;
35534: LD_ADDR_OWVAR 35
35538: PUSH
35539: LD_INT 20
35541: ST_TO_ADDR
// hc_class := class_tiger ;
35542: LD_ADDR_OWVAR 28
35546: PUSH
35547: LD_INT 14
35549: ST_TO_ADDR
// hc_gallery :=  ;
35550: LD_ADDR_OWVAR 33
35554: PUSH
35555: LD_STRING 
35557: ST_TO_ADDR
// hc_name :=  ;
35558: LD_ADDR_OWVAR 26
35562: PUSH
35563: LD_STRING 
35565: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
35566: CALL_OW 44
35570: PPUSH
35571: LD_INT 0
35573: PPUSH
35574: CALL_OW 51
// end ;
35578: GO 35500
35580: POP
35581: POP
// end ;
35582: PPOPN 1
35584: END
// every 0 0$1 trigger StreamModeActive and sBomb do
35585: LD_EXP 63
35589: PUSH
35590: LD_EXP 83
35594: AND
35595: IFFALSE 35604
35597: GO 35599
35599: DISABLE
// StreamSibBomb ;
35600: CALL 35605 0 0
35604: END
// export function StreamSibBomb ; var i , x , y ; begin
35605: LD_INT 0
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
// result := false ;
35611: LD_ADDR_VAR 0 1
35615: PUSH
35616: LD_INT 0
35618: ST_TO_ADDR
// for i := 1 to 16 do
35619: LD_ADDR_VAR 0 2
35623: PUSH
35624: DOUBLE
35625: LD_INT 1
35627: DEC
35628: ST_TO_ADDR
35629: LD_INT 16
35631: PUSH
35632: FOR_TO
35633: IFFALSE 35832
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35635: LD_ADDR_VAR 0 3
35639: PUSH
35640: LD_INT 10
35642: PUSH
35643: LD_INT 20
35645: PUSH
35646: LD_INT 30
35648: PUSH
35649: LD_INT 40
35651: PUSH
35652: LD_INT 50
35654: PUSH
35655: LD_INT 60
35657: PUSH
35658: LD_INT 70
35660: PUSH
35661: LD_INT 80
35663: PUSH
35664: LD_INT 90
35666: PUSH
35667: LD_INT 100
35669: PUSH
35670: LD_INT 110
35672: PUSH
35673: LD_INT 120
35675: PUSH
35676: LD_INT 130
35678: PUSH
35679: LD_INT 140
35681: PUSH
35682: LD_INT 150
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PPUSH
35705: LD_INT 15
35707: PPUSH
35708: CALL_OW 12
35712: ARRAY
35713: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35714: LD_ADDR_VAR 0 4
35718: PUSH
35719: LD_INT 10
35721: PUSH
35722: LD_INT 20
35724: PUSH
35725: LD_INT 30
35727: PUSH
35728: LD_INT 40
35730: PUSH
35731: LD_INT 50
35733: PUSH
35734: LD_INT 60
35736: PUSH
35737: LD_INT 70
35739: PUSH
35740: LD_INT 80
35742: PUSH
35743: LD_INT 90
35745: PUSH
35746: LD_INT 100
35748: PUSH
35749: LD_INT 110
35751: PUSH
35752: LD_INT 120
35754: PUSH
35755: LD_INT 130
35757: PUSH
35758: LD_INT 140
35760: PUSH
35761: LD_INT 150
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PPUSH
35784: LD_INT 15
35786: PPUSH
35787: CALL_OW 12
35791: ARRAY
35792: ST_TO_ADDR
// if ValidHex ( x , y ) then
35793: LD_VAR 0 3
35797: PPUSH
35798: LD_VAR 0 4
35802: PPUSH
35803: CALL_OW 488
35807: IFFALSE 35830
// begin result := [ x , y ] ;
35809: LD_ADDR_VAR 0 1
35813: PUSH
35814: LD_VAR 0 3
35818: PUSH
35819: LD_VAR 0 4
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// break ;
35828: GO 35832
// end ; end ;
35830: GO 35632
35832: POP
35833: POP
// if result then
35834: LD_VAR 0 1
35838: IFFALSE 35898
// begin ToLua ( playSibBomb() ) ;
35840: LD_STRING playSibBomb()
35842: PPUSH
35843: CALL_OW 559
// wait ( 0 0$14 ) ;
35847: LD_INT 490
35849: PPUSH
35850: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35854: LD_VAR 0 1
35858: PUSH
35859: LD_INT 1
35861: ARRAY
35862: PPUSH
35863: LD_VAR 0 1
35867: PUSH
35868: LD_INT 2
35870: ARRAY
35871: PPUSH
35872: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35876: LD_VAR 0 1
35880: PUSH
35881: LD_INT 1
35883: ARRAY
35884: PPUSH
35885: LD_VAR 0 1
35889: PUSH
35890: LD_INT 2
35892: ARRAY
35893: PPUSH
35894: CALL_OW 429
// end ; end ;
35898: LD_VAR 0 1
35902: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35903: LD_EXP 63
35907: PUSH
35908: LD_EXP 85
35912: AND
35913: IFFALSE 35925
35915: GO 35917
35917: DISABLE
// YouLost (  ) ;
35918: LD_STRING 
35920: PPUSH
35921: CALL_OW 104
35925: END
// every 0 0$1 trigger StreamModeActive and sFog do
35926: LD_EXP 63
35930: PUSH
35931: LD_EXP 84
35935: AND
35936: IFFALSE 35950
35938: GO 35940
35940: DISABLE
// FogOff ( your_side ) ;
35941: LD_OWVAR 2
35945: PPUSH
35946: CALL_OW 344
35950: END
// every 0 0$1 trigger StreamModeActive and sSun do
35951: LD_EXP 63
35955: PUSH
35956: LD_EXP 86
35960: AND
35961: IFFALSE 35989
35963: GO 35965
35965: DISABLE
// begin solar_recharge_percent := 0 ;
35966: LD_ADDR_OWVAR 79
35970: PUSH
35971: LD_INT 0
35973: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35974: LD_INT 10500
35976: PPUSH
35977: CALL_OW 67
// solar_recharge_percent := 100 ;
35981: LD_ADDR_OWVAR 79
35985: PUSH
35986: LD_INT 100
35988: ST_TO_ADDR
// end ;
35989: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35990: LD_EXP 63
35994: PUSH
35995: LD_EXP 87
35999: AND
36000: IFFALSE 36239
36002: GO 36004
36004: DISABLE
36005: LD_INT 0
36007: PPUSH
36008: PPUSH
36009: PPUSH
// begin tmp := [ ] ;
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: EMPTY
36016: ST_TO_ADDR
// for i := 1 to 6 do
36017: LD_ADDR_VAR 0 1
36021: PUSH
36022: DOUBLE
36023: LD_INT 1
36025: DEC
36026: ST_TO_ADDR
36027: LD_INT 6
36029: PUSH
36030: FOR_TO
36031: IFFALSE 36136
// begin uc_nation := nation_nature ;
36033: LD_ADDR_OWVAR 21
36037: PUSH
36038: LD_INT 0
36040: ST_TO_ADDR
// uc_side := 0 ;
36041: LD_ADDR_OWVAR 20
36045: PUSH
36046: LD_INT 0
36048: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36049: LD_ADDR_OWVAR 29
36053: PUSH
36054: LD_INT 12
36056: PUSH
36057: LD_INT 12
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: ST_TO_ADDR
// hc_agressivity := 20 ;
36064: LD_ADDR_OWVAR 35
36068: PUSH
36069: LD_INT 20
36071: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36072: LD_ADDR_OWVAR 28
36076: PUSH
36077: LD_INT 17
36079: ST_TO_ADDR
// hc_gallery :=  ;
36080: LD_ADDR_OWVAR 33
36084: PUSH
36085: LD_STRING 
36087: ST_TO_ADDR
// hc_name :=  ;
36088: LD_ADDR_OWVAR 26
36092: PUSH
36093: LD_STRING 
36095: ST_TO_ADDR
// un := CreateHuman ;
36096: LD_ADDR_VAR 0 2
36100: PUSH
36101: CALL_OW 44
36105: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36106: LD_VAR 0 2
36110: PPUSH
36111: LD_INT 1
36113: PPUSH
36114: CALL_OW 51
// tmp := tmp ^ un ;
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_VAR 0 3
36127: PUSH
36128: LD_VAR 0 2
36132: ADD
36133: ST_TO_ADDR
// end ;
36134: GO 36030
36136: POP
36137: POP
// repeat wait ( 0 0$1 ) ;
36138: LD_INT 35
36140: PPUSH
36141: CALL_OW 67
// for un in tmp do
36145: LD_ADDR_VAR 0 2
36149: PUSH
36150: LD_VAR 0 3
36154: PUSH
36155: FOR_IN
36156: IFFALSE 36230
// begin if IsDead ( un ) then
36158: LD_VAR 0 2
36162: PPUSH
36163: CALL_OW 301
36167: IFFALSE 36187
// begin tmp := tmp diff un ;
36169: LD_ADDR_VAR 0 3
36173: PUSH
36174: LD_VAR 0 3
36178: PUSH
36179: LD_VAR 0 2
36183: DIFF
36184: ST_TO_ADDR
// continue ;
36185: GO 36155
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36187: LD_VAR 0 2
36191: PPUSH
36192: LD_INT 3
36194: PUSH
36195: LD_INT 22
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PPUSH
36209: CALL_OW 69
36213: PPUSH
36214: LD_VAR 0 2
36218: PPUSH
36219: CALL_OW 74
36223: PPUSH
36224: CALL_OW 115
// end ;
36228: GO 36155
36230: POP
36231: POP
// until not tmp ;
36232: LD_VAR 0 3
36236: NOT
36237: IFFALSE 36138
// end ;
36239: PPOPN 3
36241: END
// every 0 0$1 trigger StreamModeActive and sTroll do
36242: LD_EXP 63
36246: PUSH
36247: LD_EXP 88
36251: AND
36252: IFFALSE 36306
36254: GO 36256
36256: DISABLE
// begin ToLua ( displayTroll(); ) ;
36257: LD_STRING displayTroll();
36259: PPUSH
36260: CALL_OW 559
// wait ( 3 3$00 ) ;
36264: LD_INT 6300
36266: PPUSH
36267: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36271: LD_STRING hideTroll();
36273: PPUSH
36274: CALL_OW 559
// wait ( 1 1$00 ) ;
36278: LD_INT 2100
36280: PPUSH
36281: CALL_OW 67
// ToLua ( displayTroll(); ) ;
36285: LD_STRING displayTroll();
36287: PPUSH
36288: CALL_OW 559
// wait ( 1 1$00 ) ;
36292: LD_INT 2100
36294: PPUSH
36295: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36299: LD_STRING hideTroll();
36301: PPUSH
36302: CALL_OW 559
// end ;
36306: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
36307: LD_EXP 63
36311: PUSH
36312: LD_EXP 89
36316: AND
36317: IFFALSE 36380
36319: GO 36321
36321: DISABLE
36322: LD_INT 0
36324: PPUSH
// begin p := 0 ;
36325: LD_ADDR_VAR 0 1
36329: PUSH
36330: LD_INT 0
36332: ST_TO_ADDR
// repeat game_speed := 1 ;
36333: LD_ADDR_OWVAR 65
36337: PUSH
36338: LD_INT 1
36340: ST_TO_ADDR
// wait ( 0 0$1 ) ;
36341: LD_INT 35
36343: PPUSH
36344: CALL_OW 67
// p := p + 1 ;
36348: LD_ADDR_VAR 0 1
36352: PUSH
36353: LD_VAR 0 1
36357: PUSH
36358: LD_INT 1
36360: PLUS
36361: ST_TO_ADDR
// until p >= 60 ;
36362: LD_VAR 0 1
36366: PUSH
36367: LD_INT 60
36369: GREATEREQUAL
36370: IFFALSE 36333
// game_speed := 4 ;
36372: LD_ADDR_OWVAR 65
36376: PUSH
36377: LD_INT 4
36379: ST_TO_ADDR
// end ;
36380: PPOPN 1
36382: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
36383: LD_EXP 63
36387: PUSH
36388: LD_EXP 90
36392: AND
36393: IFFALSE 36539
36395: GO 36397
36397: DISABLE
36398: LD_INT 0
36400: PPUSH
36401: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36402: LD_ADDR_VAR 0 1
36406: PUSH
36407: LD_INT 22
36409: PUSH
36410: LD_OWVAR 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 30
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 30
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PPUSH
36451: CALL_OW 69
36455: ST_TO_ADDR
// if not depot then
36456: LD_VAR 0 1
36460: NOT
36461: IFFALSE 36465
// exit ;
36463: GO 36539
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
36465: LD_ADDR_VAR 0 2
36469: PUSH
36470: LD_VAR 0 1
36474: PUSH
36475: LD_INT 1
36477: PPUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: CALL_OW 12
36487: ARRAY
36488: PPUSH
36489: CALL_OW 274
36493: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_INT 1
36501: PPUSH
36502: LD_INT 0
36504: PPUSH
36505: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_INT 2
36516: PPUSH
36517: LD_INT 0
36519: PPUSH
36520: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
36524: LD_VAR 0 2
36528: PPUSH
36529: LD_INT 3
36531: PPUSH
36532: LD_INT 0
36534: PPUSH
36535: CALL_OW 277
// end ;
36539: PPOPN 2
36541: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
36542: LD_EXP 63
36546: PUSH
36547: LD_EXP 91
36551: AND
36552: IFFALSE 36649
36554: GO 36556
36556: DISABLE
36557: LD_INT 0
36559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36560: LD_ADDR_VAR 0 1
36564: PUSH
36565: LD_INT 22
36567: PUSH
36568: LD_OWVAR 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 21
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: LD_INT 23
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: PPUSH
36609: CALL_OW 69
36613: ST_TO_ADDR
// if not tmp then
36614: LD_VAR 0 1
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 36649
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
36623: LD_VAR 0 1
36627: PUSH
36628: LD_INT 1
36630: PPUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 12
36640: ARRAY
36641: PPUSH
36642: LD_INT 200
36644: PPUSH
36645: CALL_OW 234
// end ;
36649: PPOPN 1
36651: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36652: LD_EXP 63
36656: PUSH
36657: LD_EXP 92
36661: AND
36662: IFFALSE 36741
36664: GO 36666
36666: DISABLE
36667: LD_INT 0
36669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36670: LD_ADDR_VAR 0 1
36674: PUSH
36675: LD_INT 22
36677: PUSH
36678: LD_OWVAR 2
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 21
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PPUSH
36701: CALL_OW 69
36705: ST_TO_ADDR
// if not tmp then
36706: LD_VAR 0 1
36710: NOT
36711: IFFALSE 36715
// exit ;
36713: GO 36741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36715: LD_VAR 0 1
36719: PUSH
36720: LD_INT 1
36722: PPUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 12
36732: ARRAY
36733: PPUSH
36734: LD_INT 60
36736: PPUSH
36737: CALL_OW 234
// end ;
36741: PPOPN 1
36743: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36744: LD_EXP 63
36748: PUSH
36749: LD_EXP 93
36753: AND
36754: IFFALSE 36853
36756: GO 36758
36758: DISABLE
36759: LD_INT 0
36761: PPUSH
36762: PPUSH
// begin enable ;
36763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36764: LD_ADDR_VAR 0 1
36768: PUSH
36769: LD_INT 22
36771: PUSH
36772: LD_OWVAR 2
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 61
36783: PUSH
36784: EMPTY
36785: LIST
36786: PUSH
36787: LD_INT 33
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PPUSH
36802: CALL_OW 69
36806: ST_TO_ADDR
// if not tmp then
36807: LD_VAR 0 1
36811: NOT
36812: IFFALSE 36816
// exit ;
36814: GO 36853
// for i in tmp do
36816: LD_ADDR_VAR 0 2
36820: PUSH
36821: LD_VAR 0 1
36825: PUSH
36826: FOR_IN
36827: IFFALSE 36851
// if IsControledBy ( i ) then
36829: LD_VAR 0 2
36833: PPUSH
36834: CALL_OW 312
36838: IFFALSE 36849
// ComUnlink ( i ) ;
36840: LD_VAR 0 2
36844: PPUSH
36845: CALL_OW 136
36849: GO 36826
36851: POP
36852: POP
// end ;
36853: PPOPN 2
36855: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36856: LD_EXP 63
36860: PUSH
36861: LD_EXP 94
36865: AND
36866: IFFALSE 37006
36868: GO 36870
36870: DISABLE
36871: LD_INT 0
36873: PPUSH
36874: PPUSH
// begin ToLua ( displayPowell(); ) ;
36875: LD_STRING displayPowell();
36877: PPUSH
36878: CALL_OW 559
// uc_side := 0 ;
36882: LD_ADDR_OWVAR 20
36886: PUSH
36887: LD_INT 0
36889: ST_TO_ADDR
// uc_nation := 2 ;
36890: LD_ADDR_OWVAR 21
36894: PUSH
36895: LD_INT 2
36897: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36898: LD_ADDR_OWVAR 37
36902: PUSH
36903: LD_INT 14
36905: ST_TO_ADDR
// vc_engine := engine_siberite ;
36906: LD_ADDR_OWVAR 39
36910: PUSH
36911: LD_INT 3
36913: ST_TO_ADDR
// vc_control := control_apeman ;
36914: LD_ADDR_OWVAR 38
36918: PUSH
36919: LD_INT 5
36921: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36922: LD_ADDR_OWVAR 40
36926: PUSH
36927: LD_INT 29
36929: ST_TO_ADDR
// un := CreateVehicle ;
36930: LD_ADDR_VAR 0 2
36934: PUSH
36935: CALL_OW 45
36939: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36940: LD_VAR 0 2
36944: PPUSH
36945: LD_INT 1
36947: PPUSH
36948: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36952: LD_INT 35
36954: PPUSH
36955: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36959: LD_VAR 0 2
36963: PPUSH
36964: LD_INT 22
36966: PUSH
36967: LD_OWVAR 2
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PPUSH
36976: CALL_OW 69
36980: PPUSH
36981: LD_VAR 0 2
36985: PPUSH
36986: CALL_OW 74
36990: PPUSH
36991: CALL_OW 115
// until IsDead ( un ) ;
36995: LD_VAR 0 2
36999: PPUSH
37000: CALL_OW 301
37004: IFFALSE 36952
// end ;
37006: PPOPN 2
37008: END
// every 0 0$1 trigger StreamModeActive and sStu do
37009: LD_EXP 63
37013: PUSH
37014: LD_EXP 102
37018: AND
37019: IFFALSE 37035
37021: GO 37023
37023: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37024: LD_STRING displayStucuk();
37026: PPUSH
37027: CALL_OW 559
// ResetFog ;
37031: CALL_OW 335
// end ;
37035: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37036: LD_EXP 63
37040: PUSH
37041: LD_EXP 95
37045: AND
37046: IFFALSE 37187
37048: GO 37050
37050: DISABLE
37051: LD_INT 0
37053: PPUSH
37054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37055: LD_ADDR_VAR 0 2
37059: PUSH
37060: LD_INT 22
37062: PUSH
37063: LD_OWVAR 2
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 21
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PPUSH
37086: CALL_OW 69
37090: ST_TO_ADDR
// if not tmp then
37091: LD_VAR 0 2
37095: NOT
37096: IFFALSE 37100
// exit ;
37098: GO 37187
// un := tmp [ rand ( 1 , tmp ) ] ;
37100: LD_ADDR_VAR 0 1
37104: PUSH
37105: LD_VAR 0 2
37109: PUSH
37110: LD_INT 1
37112: PPUSH
37113: LD_VAR 0 2
37117: PPUSH
37118: CALL_OW 12
37122: ARRAY
37123: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_INT 0
37131: PPUSH
37132: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37136: LD_VAR 0 1
37140: PPUSH
37141: LD_OWVAR 3
37145: PUSH
37146: LD_VAR 0 1
37150: DIFF
37151: PPUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 74
37161: PPUSH
37162: CALL_OW 115
// wait ( 0 0$20 ) ;
37166: LD_INT 700
37168: PPUSH
37169: CALL_OW 67
// SetSide ( un , your_side ) ;
37173: LD_VAR 0 1
37177: PPUSH
37178: LD_OWVAR 2
37182: PPUSH
37183: CALL_OW 235
// end ;
37187: PPOPN 2
37189: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37190: LD_EXP 63
37194: PUSH
37195: LD_EXP 96
37199: AND
37200: IFFALSE 37306
37202: GO 37204
37204: DISABLE
37205: LD_INT 0
37207: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37208: LD_ADDR_VAR 0 1
37212: PUSH
37213: LD_INT 22
37215: PUSH
37216: LD_OWVAR 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: LD_INT 30
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 30
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PPUSH
37257: CALL_OW 69
37261: ST_TO_ADDR
// if not depot then
37262: LD_VAR 0 1
37266: NOT
37267: IFFALSE 37271
// exit ;
37269: GO 37306
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
37271: LD_VAR 0 1
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: PPUSH
37280: CALL_OW 250
37284: PPUSH
37285: LD_VAR 0 1
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PPUSH
37294: CALL_OW 251
37298: PPUSH
37299: LD_INT 70
37301: PPUSH
37302: CALL_OW 495
// end ;
37306: PPOPN 1
37308: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
37309: LD_EXP 63
37313: PUSH
37314: LD_EXP 97
37318: AND
37319: IFFALSE 37530
37321: GO 37323
37323: DISABLE
37324: LD_INT 0
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37331: LD_ADDR_VAR 0 5
37335: PUSH
37336: LD_INT 22
37338: PUSH
37339: LD_OWVAR 2
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 21
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PPUSH
37362: CALL_OW 69
37366: ST_TO_ADDR
// if not tmp then
37367: LD_VAR 0 5
37371: NOT
37372: IFFALSE 37376
// exit ;
37374: GO 37530
// for i in tmp do
37376: LD_ADDR_VAR 0 1
37380: PUSH
37381: LD_VAR 0 5
37385: PUSH
37386: FOR_IN
37387: IFFALSE 37528
// begin d := rand ( 0 , 5 ) ;
37389: LD_ADDR_VAR 0 4
37393: PUSH
37394: LD_INT 0
37396: PPUSH
37397: LD_INT 5
37399: PPUSH
37400: CALL_OW 12
37404: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
37405: LD_ADDR_VAR 0 2
37409: PUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 250
37419: PPUSH
37420: LD_VAR 0 4
37424: PPUSH
37425: LD_INT 3
37427: PPUSH
37428: LD_INT 12
37430: PPUSH
37431: CALL_OW 12
37435: PPUSH
37436: CALL_OW 272
37440: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
37441: LD_ADDR_VAR 0 3
37445: PUSH
37446: LD_VAR 0 1
37450: PPUSH
37451: CALL_OW 251
37455: PPUSH
37456: LD_VAR 0 4
37460: PPUSH
37461: LD_INT 3
37463: PPUSH
37464: LD_INT 12
37466: PPUSH
37467: CALL_OW 12
37471: PPUSH
37472: CALL_OW 273
37476: ST_TO_ADDR
// if ValidHex ( x , y ) then
37477: LD_VAR 0 2
37481: PPUSH
37482: LD_VAR 0 3
37486: PPUSH
37487: CALL_OW 488
37491: IFFALSE 37526
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
37493: LD_VAR 0 1
37497: PPUSH
37498: LD_VAR 0 2
37502: PPUSH
37503: LD_VAR 0 3
37507: PPUSH
37508: LD_INT 3
37510: PPUSH
37511: LD_INT 6
37513: PPUSH
37514: CALL_OW 12
37518: PPUSH
37519: LD_INT 1
37521: PPUSH
37522: CALL_OW 483
// end ;
37526: GO 37386
37528: POP
37529: POP
// end ;
37530: PPOPN 5
37532: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
37533: LD_EXP 63
37537: PUSH
37538: LD_EXP 98
37542: AND
37543: IFFALSE 37637
37545: GO 37547
37547: DISABLE
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
37552: LD_ADDR_VAR 0 2
37556: PUSH
37557: LD_INT 22
37559: PUSH
37560: LD_OWVAR 2
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 32
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 21
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: PPUSH
37594: CALL_OW 69
37598: ST_TO_ADDR
// if not tmp then
37599: LD_VAR 0 2
37603: NOT
37604: IFFALSE 37608
// exit ;
37606: GO 37637
// for i in tmp do
37608: LD_ADDR_VAR 0 1
37612: PUSH
37613: LD_VAR 0 2
37617: PUSH
37618: FOR_IN
37619: IFFALSE 37635
// SetFuel ( i , 0 ) ;
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_INT 0
37628: PPUSH
37629: CALL_OW 240
37633: GO 37618
37635: POP
37636: POP
// end ;
37637: PPOPN 2
37639: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
37640: LD_EXP 63
37644: PUSH
37645: LD_EXP 99
37649: AND
37650: IFFALSE 37716
37652: GO 37654
37654: DISABLE
37655: LD_INT 0
37657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37658: LD_ADDR_VAR 0 1
37662: PUSH
37663: LD_INT 22
37665: PUSH
37666: LD_OWVAR 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 30
37677: PUSH
37678: LD_INT 29
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PPUSH
37689: CALL_OW 69
37693: ST_TO_ADDR
// if not tmp then
37694: LD_VAR 0 1
37698: NOT
37699: IFFALSE 37703
// exit ;
37701: GO 37716
// DestroyUnit ( tmp [ 1 ] ) ;
37703: LD_VAR 0 1
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PPUSH
37712: CALL_OW 65
// end ;
37716: PPOPN 1
37718: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37719: LD_EXP 63
37723: PUSH
37724: LD_EXP 101
37728: AND
37729: IFFALSE 37858
37731: GO 37733
37733: DISABLE
37734: LD_INT 0
37736: PPUSH
// begin uc_side := 0 ;
37737: LD_ADDR_OWVAR 20
37741: PUSH
37742: LD_INT 0
37744: ST_TO_ADDR
// uc_nation := nation_arabian ;
37745: LD_ADDR_OWVAR 21
37749: PUSH
37750: LD_INT 2
37752: ST_TO_ADDR
// hc_gallery :=  ;
37753: LD_ADDR_OWVAR 33
37757: PUSH
37758: LD_STRING 
37760: ST_TO_ADDR
// hc_name :=  ;
37761: LD_ADDR_OWVAR 26
37765: PUSH
37766: LD_STRING 
37768: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37769: LD_INT 1
37771: PPUSH
37772: LD_INT 11
37774: PPUSH
37775: LD_INT 10
37777: PPUSH
37778: CALL_OW 380
// un := CreateHuman ;
37782: LD_ADDR_VAR 0 1
37786: PUSH
37787: CALL_OW 44
37791: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37792: LD_VAR 0 1
37796: PPUSH
37797: LD_INT 1
37799: PPUSH
37800: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37804: LD_INT 35
37806: PPUSH
37807: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37811: LD_VAR 0 1
37815: PPUSH
37816: LD_INT 22
37818: PUSH
37819: LD_OWVAR 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PPUSH
37828: CALL_OW 69
37832: PPUSH
37833: LD_VAR 0 1
37837: PPUSH
37838: CALL_OW 74
37842: PPUSH
37843: CALL_OW 115
// until IsDead ( un ) ;
37847: LD_VAR 0 1
37851: PPUSH
37852: CALL_OW 301
37856: IFFALSE 37804
// end ;
37858: PPOPN 1
37860: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37861: LD_EXP 63
37865: PUSH
37866: LD_EXP 103
37870: AND
37871: IFFALSE 37883
37873: GO 37875
37875: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37876: LD_STRING earthquake(getX(game), 0, 32)
37878: PPUSH
37879: CALL_OW 559
37883: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37884: LD_EXP 63
37888: PUSH
37889: LD_EXP 104
37893: AND
37894: IFFALSE 37985
37896: GO 37898
37898: DISABLE
37899: LD_INT 0
37901: PPUSH
// begin enable ;
37902: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37903: LD_ADDR_VAR 0 1
37907: PUSH
37908: LD_INT 22
37910: PUSH
37911: LD_OWVAR 2
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 21
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 33
37932: PUSH
37933: LD_INT 3
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: PPUSH
37945: CALL_OW 69
37949: ST_TO_ADDR
// if not tmp then
37950: LD_VAR 0 1
37954: NOT
37955: IFFALSE 37959
// exit ;
37957: GO 37985
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37959: LD_VAR 0 1
37963: PUSH
37964: LD_INT 1
37966: PPUSH
37967: LD_VAR 0 1
37971: PPUSH
37972: CALL_OW 12
37976: ARRAY
37977: PPUSH
37978: LD_INT 1
37980: PPUSH
37981: CALL_OW 234
// end ;
37985: PPOPN 1
37987: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37988: LD_EXP 63
37992: PUSH
37993: LD_EXP 105
37997: AND
37998: IFFALSE 38139
38000: GO 38002
38002: DISABLE
38003: LD_INT 0
38005: PPUSH
38006: PPUSH
38007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38008: LD_ADDR_VAR 0 3
38012: PUSH
38013: LD_INT 22
38015: PUSH
38016: LD_OWVAR 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 25
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PPUSH
38039: CALL_OW 69
38043: ST_TO_ADDR
// if not tmp then
38044: LD_VAR 0 3
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38139
// un := tmp [ rand ( 1 , tmp ) ] ;
38053: LD_ADDR_VAR 0 2
38057: PUSH
38058: LD_VAR 0 3
38062: PUSH
38063: LD_INT 1
38065: PPUSH
38066: LD_VAR 0 3
38070: PPUSH
38071: CALL_OW 12
38075: ARRAY
38076: ST_TO_ADDR
// if Crawls ( un ) then
38077: LD_VAR 0 2
38081: PPUSH
38082: CALL_OW 318
38086: IFFALSE 38097
// ComWalk ( un ) ;
38088: LD_VAR 0 2
38092: PPUSH
38093: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38097: LD_VAR 0 2
38101: PPUSH
38102: LD_INT 9
38104: PPUSH
38105: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38109: LD_INT 28
38111: PPUSH
38112: LD_OWVAR 2
38116: PPUSH
38117: LD_INT 2
38119: PPUSH
38120: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38124: LD_INT 29
38126: PPUSH
38127: LD_OWVAR 2
38131: PPUSH
38132: LD_INT 2
38134: PPUSH
38135: CALL_OW 322
// end ;
38139: PPOPN 3
38141: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38142: LD_EXP 63
38146: PUSH
38147: LD_EXP 106
38151: AND
38152: IFFALSE 38263
38154: GO 38156
38156: DISABLE
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38162: LD_ADDR_VAR 0 3
38166: PUSH
38167: LD_INT 22
38169: PUSH
38170: LD_OWVAR 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 25
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PPUSH
38193: CALL_OW 69
38197: ST_TO_ADDR
// if not tmp then
38198: LD_VAR 0 3
38202: NOT
38203: IFFALSE 38207
// exit ;
38205: GO 38263
// un := tmp [ rand ( 1 , tmp ) ] ;
38207: LD_ADDR_VAR 0 2
38211: PUSH
38212: LD_VAR 0 3
38216: PUSH
38217: LD_INT 1
38219: PPUSH
38220: LD_VAR 0 3
38224: PPUSH
38225: CALL_OW 12
38229: ARRAY
38230: ST_TO_ADDR
// if Crawls ( un ) then
38231: LD_VAR 0 2
38235: PPUSH
38236: CALL_OW 318
38240: IFFALSE 38251
// ComWalk ( un ) ;
38242: LD_VAR 0 2
38246: PPUSH
38247: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38251: LD_VAR 0 2
38255: PPUSH
38256: LD_INT 8
38258: PPUSH
38259: CALL_OW 336
// end ;
38263: PPOPN 3
38265: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
38266: LD_EXP 63
38270: PUSH
38271: LD_EXP 107
38275: AND
38276: IFFALSE 38420
38278: GO 38280
38280: DISABLE
38281: LD_INT 0
38283: PPUSH
38284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
38285: LD_ADDR_VAR 0 2
38289: PUSH
38290: LD_INT 22
38292: PUSH
38293: LD_OWVAR 2
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 21
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 34
38317: PUSH
38318: LD_INT 12
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 34
38327: PUSH
38328: LD_INT 51
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 34
38337: PUSH
38338: LD_INT 32
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 69
38360: ST_TO_ADDR
// if not tmp then
38361: LD_VAR 0 2
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38420
// for i in tmp do
38370: LD_ADDR_VAR 0 1
38374: PUSH
38375: LD_VAR 0 2
38379: PUSH
38380: FOR_IN
38381: IFFALSE 38418
// if GetCargo ( i , mat_artifact ) = 0 then
38383: LD_VAR 0 1
38387: PPUSH
38388: LD_INT 4
38390: PPUSH
38391: CALL_OW 289
38395: PUSH
38396: LD_INT 0
38398: EQUAL
38399: IFFALSE 38416
// SetCargo ( i , mat_siberit , 100 ) ;
38401: LD_VAR 0 1
38405: PPUSH
38406: LD_INT 3
38408: PPUSH
38409: LD_INT 100
38411: PPUSH
38412: CALL_OW 290
38416: GO 38380
38418: POP
38419: POP
// end ;
38420: PPOPN 2
38422: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
38423: LD_EXP 63
38427: PUSH
38428: LD_EXP 108
38432: AND
38433: IFFALSE 38616
38435: GO 38437
38437: DISABLE
38438: LD_INT 0
38440: PPUSH
38441: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38442: LD_ADDR_VAR 0 2
38446: PUSH
38447: LD_INT 22
38449: PUSH
38450: LD_OWVAR 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PPUSH
38459: CALL_OW 69
38463: ST_TO_ADDR
// if not tmp then
38464: LD_VAR 0 2
38468: NOT
38469: IFFALSE 38473
// exit ;
38471: GO 38616
// for i := 1 to 2 do
38473: LD_ADDR_VAR 0 1
38477: PUSH
38478: DOUBLE
38479: LD_INT 1
38481: DEC
38482: ST_TO_ADDR
38483: LD_INT 2
38485: PUSH
38486: FOR_TO
38487: IFFALSE 38614
// begin uc_side := your_side ;
38489: LD_ADDR_OWVAR 20
38493: PUSH
38494: LD_OWVAR 2
38498: ST_TO_ADDR
// uc_nation := nation_american ;
38499: LD_ADDR_OWVAR 21
38503: PUSH
38504: LD_INT 1
38506: ST_TO_ADDR
// vc_chassis := us_morphling ;
38507: LD_ADDR_OWVAR 37
38511: PUSH
38512: LD_INT 5
38514: ST_TO_ADDR
// vc_engine := engine_siberite ;
38515: LD_ADDR_OWVAR 39
38519: PUSH
38520: LD_INT 3
38522: ST_TO_ADDR
// vc_control := control_computer ;
38523: LD_ADDR_OWVAR 38
38527: PUSH
38528: LD_INT 3
38530: ST_TO_ADDR
// vc_weapon := us_double_laser ;
38531: LD_ADDR_OWVAR 40
38535: PUSH
38536: LD_INT 10
38538: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
38539: LD_VAR 0 2
38543: PUSH
38544: LD_INT 1
38546: ARRAY
38547: PPUSH
38548: CALL_OW 310
38552: NOT
38553: IFFALSE 38600
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
38555: CALL_OW 45
38559: PPUSH
38560: LD_VAR 0 2
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PPUSH
38569: CALL_OW 250
38573: PPUSH
38574: LD_VAR 0 2
38578: PUSH
38579: LD_INT 1
38581: ARRAY
38582: PPUSH
38583: CALL_OW 251
38587: PPUSH
38588: LD_INT 12
38590: PPUSH
38591: LD_INT 1
38593: PPUSH
38594: CALL_OW 50
38598: GO 38612
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
38600: CALL_OW 45
38604: PPUSH
38605: LD_INT 1
38607: PPUSH
38608: CALL_OW 51
// end ;
38612: GO 38486
38614: POP
38615: POP
// end ;
38616: PPOPN 2
38618: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
38619: LD_EXP 63
38623: PUSH
38624: LD_EXP 109
38628: AND
38629: IFFALSE 38851
38631: GO 38633
38633: DISABLE
38634: LD_INT 0
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38642: LD_ADDR_VAR 0 6
38646: PUSH
38647: LD_INT 22
38649: PUSH
38650: LD_OWVAR 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 21
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: LD_INT 23
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: LIST
38690: PPUSH
38691: CALL_OW 69
38695: ST_TO_ADDR
// if not tmp then
38696: LD_VAR 0 6
38700: NOT
38701: IFFALSE 38705
// exit ;
38703: GO 38851
// s1 := rand ( 1 , 4 ) ;
38705: LD_ADDR_VAR 0 2
38709: PUSH
38710: LD_INT 1
38712: PPUSH
38713: LD_INT 4
38715: PPUSH
38716: CALL_OW 12
38720: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38721: LD_ADDR_VAR 0 4
38725: PUSH
38726: LD_VAR 0 6
38730: PUSH
38731: LD_INT 1
38733: ARRAY
38734: PPUSH
38735: LD_VAR 0 2
38739: PPUSH
38740: CALL_OW 259
38744: ST_TO_ADDR
// if s1 = 1 then
38745: LD_VAR 0 2
38749: PUSH
38750: LD_INT 1
38752: EQUAL
38753: IFFALSE 38773
// s2 := rand ( 2 , 4 ) else
38755: LD_ADDR_VAR 0 3
38759: PUSH
38760: LD_INT 2
38762: PPUSH
38763: LD_INT 4
38765: PPUSH
38766: CALL_OW 12
38770: ST_TO_ADDR
38771: GO 38781
// s2 := 1 ;
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_INT 1
38780: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38781: LD_ADDR_VAR 0 5
38785: PUSH
38786: LD_VAR 0 6
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PPUSH
38795: LD_VAR 0 3
38799: PPUSH
38800: CALL_OW 259
38804: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38805: LD_VAR 0 6
38809: PUSH
38810: LD_INT 1
38812: ARRAY
38813: PPUSH
38814: LD_VAR 0 2
38818: PPUSH
38819: LD_VAR 0 5
38823: PPUSH
38824: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38828: LD_VAR 0 6
38832: PUSH
38833: LD_INT 1
38835: ARRAY
38836: PPUSH
38837: LD_VAR 0 3
38841: PPUSH
38842: LD_VAR 0 4
38846: PPUSH
38847: CALL_OW 237
// end ;
38851: PPOPN 6
38853: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38854: LD_EXP 63
38858: PUSH
38859: LD_EXP 110
38863: AND
38864: IFFALSE 38943
38866: GO 38868
38868: DISABLE
38869: LD_INT 0
38871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38872: LD_ADDR_VAR 0 1
38876: PUSH
38877: LD_INT 22
38879: PUSH
38880: LD_OWVAR 2
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 30
38891: PUSH
38892: LD_INT 3
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PPUSH
38903: CALL_OW 69
38907: ST_TO_ADDR
// if not tmp then
38908: LD_VAR 0 1
38912: NOT
38913: IFFALSE 38917
// exit ;
38915: GO 38943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38917: LD_VAR 0 1
38921: PUSH
38922: LD_INT 1
38924: PPUSH
38925: LD_VAR 0 1
38929: PPUSH
38930: CALL_OW 12
38934: ARRAY
38935: PPUSH
38936: LD_INT 1
38938: PPUSH
38939: CALL_OW 234
// end ;
38943: PPOPN 1
38945: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38946: LD_EXP 63
38950: PUSH
38951: LD_EXP 111
38955: AND
38956: IFFALSE 39068
38958: GO 38960
38960: DISABLE
38961: LD_INT 0
38963: PPUSH
38964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38965: LD_ADDR_VAR 0 2
38969: PUSH
38970: LD_INT 22
38972: PUSH
38973: LD_OWVAR 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: LD_INT 30
38987: PUSH
38988: LD_INT 27
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 30
38997: PUSH
38998: LD_INT 26
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 30
39007: PUSH
39008: LD_INT 28
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PPUSH
39025: CALL_OW 69
39029: ST_TO_ADDR
// if not tmp then
39030: LD_VAR 0 2
39034: NOT
39035: IFFALSE 39039
// exit ;
39037: GO 39068
// for i in tmp do
39039: LD_ADDR_VAR 0 1
39043: PUSH
39044: LD_VAR 0 2
39048: PUSH
39049: FOR_IN
39050: IFFALSE 39066
// SetLives ( i , 1 ) ;
39052: LD_VAR 0 1
39056: PPUSH
39057: LD_INT 1
39059: PPUSH
39060: CALL_OW 234
39064: GO 39049
39066: POP
39067: POP
// end ;
39068: PPOPN 2
39070: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39071: LD_EXP 63
39075: PUSH
39076: LD_EXP 112
39080: AND
39081: IFFALSE 39368
39083: GO 39085
39085: DISABLE
39086: LD_INT 0
39088: PPUSH
39089: PPUSH
39090: PPUSH
// begin i := rand ( 1 , 7 ) ;
39091: LD_ADDR_VAR 0 1
39095: PUSH
39096: LD_INT 1
39098: PPUSH
39099: LD_INT 7
39101: PPUSH
39102: CALL_OW 12
39106: ST_TO_ADDR
// case i of 1 :
39107: LD_VAR 0 1
39111: PUSH
39112: LD_INT 1
39114: DOUBLE
39115: EQUAL
39116: IFTRUE 39120
39118: GO 39130
39120: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39121: LD_STRING earthquake(getX(game), 0, 32)
39123: PPUSH
39124: CALL_OW 559
39128: GO 39368
39130: LD_INT 2
39132: DOUBLE
39133: EQUAL
39134: IFTRUE 39138
39136: GO 39152
39138: POP
// begin ToLua ( displayStucuk(); ) ;
39139: LD_STRING displayStucuk();
39141: PPUSH
39142: CALL_OW 559
// ResetFog ;
39146: CALL_OW 335
// end ; 3 :
39150: GO 39368
39152: LD_INT 3
39154: DOUBLE
39155: EQUAL
39156: IFTRUE 39160
39158: GO 39264
39160: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39161: LD_ADDR_VAR 0 2
39165: PUSH
39166: LD_INT 22
39168: PUSH
39169: LD_OWVAR 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 25
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PPUSH
39192: CALL_OW 69
39196: ST_TO_ADDR
// if not tmp then
39197: LD_VAR 0 2
39201: NOT
39202: IFFALSE 39206
// exit ;
39204: GO 39368
// un := tmp [ rand ( 1 , tmp ) ] ;
39206: LD_ADDR_VAR 0 3
39210: PUSH
39211: LD_VAR 0 2
39215: PUSH
39216: LD_INT 1
39218: PPUSH
39219: LD_VAR 0 2
39223: PPUSH
39224: CALL_OW 12
39228: ARRAY
39229: ST_TO_ADDR
// if Crawls ( un ) then
39230: LD_VAR 0 3
39234: PPUSH
39235: CALL_OW 318
39239: IFFALSE 39250
// ComWalk ( un ) ;
39241: LD_VAR 0 3
39245: PPUSH
39246: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39250: LD_VAR 0 3
39254: PPUSH
39255: LD_INT 8
39257: PPUSH
39258: CALL_OW 336
// end ; 4 :
39262: GO 39368
39264: LD_INT 4
39266: DOUBLE
39267: EQUAL
39268: IFTRUE 39272
39270: GO 39346
39272: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39273: LD_ADDR_VAR 0 2
39277: PUSH
39278: LD_INT 22
39280: PUSH
39281: LD_OWVAR 2
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 30
39292: PUSH
39293: LD_INT 29
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PPUSH
39304: CALL_OW 69
39308: ST_TO_ADDR
// if not tmp then
39309: LD_VAR 0 2
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 39368
// CenterNowOnUnits ( tmp [ 1 ] ) ;
39318: LD_VAR 0 2
39322: PUSH
39323: LD_INT 1
39325: ARRAY
39326: PPUSH
39327: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 1
39338: ARRAY
39339: PPUSH
39340: CALL_OW 65
// end ; 5 .. 7 :
39344: GO 39368
39346: LD_INT 5
39348: DOUBLE
39349: GREATEREQUAL
39350: IFFALSE 39358
39352: LD_INT 7
39354: DOUBLE
39355: LESSEQUAL
39356: IFTRUE 39360
39358: GO 39367
39360: POP
// StreamSibBomb ; end ;
39361: CALL 35605 0 0
39365: GO 39368
39367: POP
// end ;
39368: PPOPN 3
39370: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
39371: LD_EXP 63
39375: PUSH
39376: LD_EXP 113
39380: AND
39381: IFFALSE 39537
39383: GO 39385
39385: DISABLE
39386: LD_INT 0
39388: PPUSH
39389: PPUSH
39390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
39391: LD_ADDR_VAR 0 2
39395: PUSH
39396: LD_INT 81
39398: PUSH
39399: LD_OWVAR 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 21
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 21
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PPUSH
39440: CALL_OW 69
39444: ST_TO_ADDR
// if not tmp then
39445: LD_VAR 0 2
39449: NOT
39450: IFFALSE 39454
// exit ;
39452: GO 39537
// p := 0 ;
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_INT 0
39461: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39462: LD_INT 35
39464: PPUSH
39465: CALL_OW 67
// p := p + 1 ;
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_VAR 0 3
39478: PUSH
39479: LD_INT 1
39481: PLUS
39482: ST_TO_ADDR
// for i in tmp do
39483: LD_ADDR_VAR 0 1
39487: PUSH
39488: LD_VAR 0 2
39492: PUSH
39493: FOR_IN
39494: IFFALSE 39525
// if GetLives ( i ) < 1000 then
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 256
39505: PUSH
39506: LD_INT 1000
39508: LESS
39509: IFFALSE 39523
// SetLives ( i , 1000 ) ;
39511: LD_VAR 0 1
39515: PPUSH
39516: LD_INT 1000
39518: PPUSH
39519: CALL_OW 234
39523: GO 39493
39525: POP
39526: POP
// until p > 20 ;
39527: LD_VAR 0 3
39531: PUSH
39532: LD_INT 20
39534: GREATER
39535: IFFALSE 39462
// end ;
39537: PPOPN 3
39539: END
// every 0 0$1 trigger StreamModeActive and sTime do
39540: LD_EXP 63
39544: PUSH
39545: LD_EXP 114
39549: AND
39550: IFFALSE 39585
39552: GO 39554
39554: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
39555: LD_INT 28
39557: PPUSH
39558: LD_OWVAR 2
39562: PPUSH
39563: LD_INT 2
39565: PPUSH
39566: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
39570: LD_INT 30
39572: PPUSH
39573: LD_OWVAR 2
39577: PPUSH
39578: LD_INT 2
39580: PPUSH
39581: CALL_OW 322
// end ;
39585: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
39586: LD_EXP 63
39590: PUSH
39591: LD_EXP 115
39595: AND
39596: IFFALSE 39717
39598: GO 39600
39600: DISABLE
39601: LD_INT 0
39603: PPUSH
39604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39605: LD_ADDR_VAR 0 2
39609: PUSH
39610: LD_INT 22
39612: PUSH
39613: LD_OWVAR 2
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 21
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: LD_INT 23
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PPUSH
39654: CALL_OW 69
39658: ST_TO_ADDR
// if not tmp then
39659: LD_VAR 0 2
39663: NOT
39664: IFFALSE 39668
// exit ;
39666: GO 39717
// for i in tmp do
39668: LD_ADDR_VAR 0 1
39672: PUSH
39673: LD_VAR 0 2
39677: PUSH
39678: FOR_IN
39679: IFFALSE 39715
// begin if Crawls ( i ) then
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 318
39690: IFFALSE 39701
// ComWalk ( i ) ;
39692: LD_VAR 0 1
39696: PPUSH
39697: CALL_OW 138
// SetClass ( i , 2 ) ;
39701: LD_VAR 0 1
39705: PPUSH
39706: LD_INT 2
39708: PPUSH
39709: CALL_OW 336
// end ;
39713: GO 39678
39715: POP
39716: POP
// end ;
39717: PPOPN 2
39719: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39720: LD_EXP 63
39724: PUSH
39725: LD_EXP 116
39729: AND
39730: IFFALSE 40018
39732: GO 39734
39734: DISABLE
39735: LD_INT 0
39737: PPUSH
39738: PPUSH
39739: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39740: LD_OWVAR 2
39744: PPUSH
39745: LD_INT 9
39747: PPUSH
39748: LD_INT 1
39750: PPUSH
39751: LD_INT 1
39753: PPUSH
39754: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39758: LD_INT 9
39760: PPUSH
39761: LD_OWVAR 2
39765: PPUSH
39766: CALL_OW 343
// uc_side := 9 ;
39770: LD_ADDR_OWVAR 20
39774: PUSH
39775: LD_INT 9
39777: ST_TO_ADDR
// uc_nation := 2 ;
39778: LD_ADDR_OWVAR 21
39782: PUSH
39783: LD_INT 2
39785: ST_TO_ADDR
// hc_name := Dark Warrior ;
39786: LD_ADDR_OWVAR 26
39790: PUSH
39791: LD_STRING Dark Warrior
39793: ST_TO_ADDR
// hc_gallery :=  ;
39794: LD_ADDR_OWVAR 33
39798: PUSH
39799: LD_STRING 
39801: ST_TO_ADDR
// hc_noskilllimit := true ;
39802: LD_ADDR_OWVAR 76
39806: PUSH
39807: LD_INT 1
39809: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39810: LD_ADDR_OWVAR 31
39814: PUSH
39815: LD_INT 30
39817: PUSH
39818: LD_INT 30
39820: PUSH
39821: LD_INT 30
39823: PUSH
39824: LD_INT 30
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
// un := CreateHuman ;
39833: LD_ADDR_VAR 0 3
39837: PUSH
39838: CALL_OW 44
39842: ST_TO_ADDR
// hc_noskilllimit := false ;
39843: LD_ADDR_OWVAR 76
39847: PUSH
39848: LD_INT 0
39850: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39851: LD_VAR 0 3
39855: PPUSH
39856: LD_INT 1
39858: PPUSH
39859: CALL_OW 51
// ToLua ( playRanger() ) ;
39863: LD_STRING playRanger()
39865: PPUSH
39866: CALL_OW 559
// p := 0 ;
39870: LD_ADDR_VAR 0 2
39874: PUSH
39875: LD_INT 0
39877: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39878: LD_INT 35
39880: PPUSH
39881: CALL_OW 67
// p := p + 1 ;
39885: LD_ADDR_VAR 0 2
39889: PUSH
39890: LD_VAR 0 2
39894: PUSH
39895: LD_INT 1
39897: PLUS
39898: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39899: LD_VAR 0 3
39903: PPUSH
39904: CALL_OW 256
39908: PUSH
39909: LD_INT 1000
39911: LESS
39912: IFFALSE 39926
// SetLives ( un , 1000 ) ;
39914: LD_VAR 0 3
39918: PPUSH
39919: LD_INT 1000
39921: PPUSH
39922: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39926: LD_VAR 0 3
39930: PPUSH
39931: LD_INT 81
39933: PUSH
39934: LD_OWVAR 2
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 91
39945: PUSH
39946: LD_VAR 0 3
39950: PUSH
39951: LD_INT 30
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 69
39967: PPUSH
39968: LD_VAR 0 3
39972: PPUSH
39973: CALL_OW 74
39977: PPUSH
39978: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39982: LD_VAR 0 2
39986: PUSH
39987: LD_INT 80
39989: GREATER
39990: PUSH
39991: LD_VAR 0 3
39995: PPUSH
39996: CALL_OW 301
40000: OR
40001: IFFALSE 39878
// if un then
40003: LD_VAR 0 3
40007: IFFALSE 40018
// RemoveUnit ( un ) ;
40009: LD_VAR 0 3
40013: PPUSH
40014: CALL_OW 64
// end ;
40018: PPOPN 3
40020: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
40021: LD_EXP 117
40025: IFFALSE 40141
40027: GO 40029
40029: DISABLE
40030: LD_INT 0
40032: PPUSH
40033: PPUSH
40034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40035: LD_ADDR_VAR 0 2
40039: PUSH
40040: LD_INT 81
40042: PUSH
40043: LD_OWVAR 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 21
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 69
40070: ST_TO_ADDR
// ToLua ( playComputer() ) ;
40071: LD_STRING playComputer()
40073: PPUSH
40074: CALL_OW 559
// if not tmp then
40078: LD_VAR 0 2
40082: NOT
40083: IFFALSE 40087
// exit ;
40085: GO 40141
// for i in tmp do
40087: LD_ADDR_VAR 0 1
40091: PUSH
40092: LD_VAR 0 2
40096: PUSH
40097: FOR_IN
40098: IFFALSE 40139
// for j := 1 to 4 do
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: DOUBLE
40106: LD_INT 1
40108: DEC
40109: ST_TO_ADDR
40110: LD_INT 4
40112: PUSH
40113: FOR_TO
40114: IFFALSE 40135
// SetSkill ( i , j , 10 ) ;
40116: LD_VAR 0 1
40120: PPUSH
40121: LD_VAR 0 3
40125: PPUSH
40126: LD_INT 10
40128: PPUSH
40129: CALL_OW 237
40133: GO 40113
40135: POP
40136: POP
40137: GO 40097
40139: POP
40140: POP
// end ;
40141: PPOPN 3
40143: END
// every 0 0$1 trigger s30 do var i , tmp ;
40144: LD_EXP 118
40148: IFFALSE 40217
40150: GO 40152
40152: DISABLE
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40157: LD_ADDR_VAR 0 2
40161: PUSH
40162: LD_INT 22
40164: PUSH
40165: LD_OWVAR 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PPUSH
40174: CALL_OW 69
40178: ST_TO_ADDR
// if not tmp then
40179: LD_VAR 0 2
40183: NOT
40184: IFFALSE 40188
// exit ;
40186: GO 40217
// for i in tmp do
40188: LD_ADDR_VAR 0 1
40192: PUSH
40193: LD_VAR 0 2
40197: PUSH
40198: FOR_IN
40199: IFFALSE 40215
// SetLives ( i , 300 ) ;
40201: LD_VAR 0 1
40205: PPUSH
40206: LD_INT 300
40208: PPUSH
40209: CALL_OW 234
40213: GO 40198
40215: POP
40216: POP
// end ;
40217: PPOPN 2
40219: END
// every 0 0$1 trigger s60 do var i , tmp ;
40220: LD_EXP 119
40224: IFFALSE 40293
40226: GO 40228
40228: DISABLE
40229: LD_INT 0
40231: PPUSH
40232: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40233: LD_ADDR_VAR 0 2
40237: PUSH
40238: LD_INT 22
40240: PUSH
40241: LD_OWVAR 2
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PPUSH
40250: CALL_OW 69
40254: ST_TO_ADDR
// if not tmp then
40255: LD_VAR 0 2
40259: NOT
40260: IFFALSE 40264
// exit ;
40262: GO 40293
// for i in tmp do
40264: LD_ADDR_VAR 0 1
40268: PUSH
40269: LD_VAR 0 2
40273: PUSH
40274: FOR_IN
40275: IFFALSE 40291
// SetLives ( i , 600 ) ;
40277: LD_VAR 0 1
40281: PPUSH
40282: LD_INT 600
40284: PPUSH
40285: CALL_OW 234
40289: GO 40274
40291: POP
40292: POP
// end ;
40293: PPOPN 2
40295: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40296: LD_INT 0
40298: PPUSH
// case cmd of 301 :
40299: LD_VAR 0 1
40303: PUSH
40304: LD_INT 301
40306: DOUBLE
40307: EQUAL
40308: IFTRUE 40312
40310: GO 40344
40312: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40313: LD_VAR 0 6
40317: PPUSH
40318: LD_VAR 0 7
40322: PPUSH
40323: LD_VAR 0 8
40327: PPUSH
40328: LD_VAR 0 4
40332: PPUSH
40333: LD_VAR 0 5
40337: PPUSH
40338: CALL 41545 0 5
40342: GO 40465
40344: LD_INT 302
40346: DOUBLE
40347: EQUAL
40348: IFTRUE 40352
40350: GO 40389
40352: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
40353: LD_VAR 0 6
40357: PPUSH
40358: LD_VAR 0 7
40362: PPUSH
40363: LD_VAR 0 8
40367: PPUSH
40368: LD_VAR 0 9
40372: PPUSH
40373: LD_VAR 0 4
40377: PPUSH
40378: LD_VAR 0 5
40382: PPUSH
40383: CALL 41636 0 6
40387: GO 40465
40389: LD_INT 303
40391: DOUBLE
40392: EQUAL
40393: IFTRUE 40397
40395: GO 40434
40397: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
40398: LD_VAR 0 6
40402: PPUSH
40403: LD_VAR 0 7
40407: PPUSH
40408: LD_VAR 0 8
40412: PPUSH
40413: LD_VAR 0 9
40417: PPUSH
40418: LD_VAR 0 4
40422: PPUSH
40423: LD_VAR 0 5
40427: PPUSH
40428: CALL 40470 0 6
40432: GO 40465
40434: LD_INT 304
40436: DOUBLE
40437: EQUAL
40438: IFTRUE 40442
40440: GO 40464
40442: POP
// hHackTeleport ( unit , x , y ) ; end ;
40443: LD_VAR 0 2
40447: PPUSH
40448: LD_VAR 0 4
40452: PPUSH
40453: LD_VAR 0 5
40457: PPUSH
40458: CALL 42229 0 3
40462: GO 40465
40464: POP
// end ;
40465: LD_VAR 0 12
40469: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
40470: LD_INT 0
40472: PPUSH
40473: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
40474: LD_VAR 0 1
40478: PUSH
40479: LD_INT 1
40481: LESS
40482: PUSH
40483: LD_VAR 0 1
40487: PUSH
40488: LD_INT 3
40490: GREATER
40491: OR
40492: PUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: LD_VAR 0 6
40502: PPUSH
40503: CALL_OW 428
40507: OR
40508: IFFALSE 40512
// exit ;
40510: GO 41232
// uc_side := your_side ;
40512: LD_ADDR_OWVAR 20
40516: PUSH
40517: LD_OWVAR 2
40521: ST_TO_ADDR
// uc_nation := nation ;
40522: LD_ADDR_OWVAR 21
40526: PUSH
40527: LD_VAR 0 1
40531: ST_TO_ADDR
// bc_level = 1 ;
40532: LD_ADDR_OWVAR 43
40536: PUSH
40537: LD_INT 1
40539: ST_TO_ADDR
// case btype of 1 :
40540: LD_VAR 0 2
40544: PUSH
40545: LD_INT 1
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40564
40553: POP
// bc_type := b_depot ; 2 :
40554: LD_ADDR_OWVAR 42
40558: PUSH
40559: LD_INT 0
40561: ST_TO_ADDR
40562: GO 41176
40564: LD_INT 2
40566: DOUBLE
40567: EQUAL
40568: IFTRUE 40572
40570: GO 40583
40572: POP
// bc_type := b_warehouse ; 3 :
40573: LD_ADDR_OWVAR 42
40577: PUSH
40578: LD_INT 1
40580: ST_TO_ADDR
40581: GO 41176
40583: LD_INT 3
40585: DOUBLE
40586: EQUAL
40587: IFTRUE 40591
40589: GO 40602
40591: POP
// bc_type := b_lab ; 4 .. 9 :
40592: LD_ADDR_OWVAR 42
40596: PUSH
40597: LD_INT 6
40599: ST_TO_ADDR
40600: GO 41176
40602: LD_INT 4
40604: DOUBLE
40605: GREATEREQUAL
40606: IFFALSE 40614
40608: LD_INT 9
40610: DOUBLE
40611: LESSEQUAL
40612: IFTRUE 40616
40614: GO 40668
40616: POP
// begin bc_type := b_lab_half ;
40617: LD_ADDR_OWVAR 42
40621: PUSH
40622: LD_INT 7
40624: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
40625: LD_ADDR_OWVAR 44
40629: PUSH
40630: LD_INT 10
40632: PUSH
40633: LD_INT 11
40635: PUSH
40636: LD_INT 12
40638: PUSH
40639: LD_INT 15
40641: PUSH
40642: LD_INT 14
40644: PUSH
40645: LD_INT 13
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: PUSH
40656: LD_VAR 0 2
40660: PUSH
40661: LD_INT 3
40663: MINUS
40664: ARRAY
40665: ST_TO_ADDR
// end ; 10 .. 13 :
40666: GO 41176
40668: LD_INT 10
40670: DOUBLE
40671: GREATEREQUAL
40672: IFFALSE 40680
40674: LD_INT 13
40676: DOUBLE
40677: LESSEQUAL
40678: IFTRUE 40682
40680: GO 40759
40682: POP
// begin bc_type := b_lab_full ;
40683: LD_ADDR_OWVAR 42
40687: PUSH
40688: LD_INT 8
40690: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40691: LD_ADDR_OWVAR 44
40695: PUSH
40696: LD_INT 10
40698: PUSH
40699: LD_INT 12
40701: PUSH
40702: LD_INT 14
40704: PUSH
40705: LD_INT 13
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: PUSH
40714: LD_VAR 0 2
40718: PUSH
40719: LD_INT 9
40721: MINUS
40722: ARRAY
40723: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40724: LD_ADDR_OWVAR 45
40728: PUSH
40729: LD_INT 11
40731: PUSH
40732: LD_INT 15
40734: PUSH
40735: LD_INT 12
40737: PUSH
40738: LD_INT 15
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: PUSH
40747: LD_VAR 0 2
40751: PUSH
40752: LD_INT 9
40754: MINUS
40755: ARRAY
40756: ST_TO_ADDR
// end ; 14 :
40757: GO 41176
40759: LD_INT 14
40761: DOUBLE
40762: EQUAL
40763: IFTRUE 40767
40765: GO 40778
40767: POP
// bc_type := b_workshop ; 15 :
40768: LD_ADDR_OWVAR 42
40772: PUSH
40773: LD_INT 2
40775: ST_TO_ADDR
40776: GO 41176
40778: LD_INT 15
40780: DOUBLE
40781: EQUAL
40782: IFTRUE 40786
40784: GO 40797
40786: POP
// bc_type := b_factory ; 16 :
40787: LD_ADDR_OWVAR 42
40791: PUSH
40792: LD_INT 3
40794: ST_TO_ADDR
40795: GO 41176
40797: LD_INT 16
40799: DOUBLE
40800: EQUAL
40801: IFTRUE 40805
40803: GO 40816
40805: POP
// bc_type := b_ext_gun ; 17 :
40806: LD_ADDR_OWVAR 42
40810: PUSH
40811: LD_INT 17
40813: ST_TO_ADDR
40814: GO 41176
40816: LD_INT 17
40818: DOUBLE
40819: EQUAL
40820: IFTRUE 40824
40822: GO 40852
40824: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40825: LD_ADDR_OWVAR 42
40829: PUSH
40830: LD_INT 19
40832: PUSH
40833: LD_INT 23
40835: PUSH
40836: LD_INT 19
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: LIST
40843: PUSH
40844: LD_VAR 0 1
40848: ARRAY
40849: ST_TO_ADDR
40850: GO 41176
40852: LD_INT 18
40854: DOUBLE
40855: EQUAL
40856: IFTRUE 40860
40858: GO 40871
40860: POP
// bc_type := b_ext_radar ; 19 :
40861: LD_ADDR_OWVAR 42
40865: PUSH
40866: LD_INT 20
40868: ST_TO_ADDR
40869: GO 41176
40871: LD_INT 19
40873: DOUBLE
40874: EQUAL
40875: IFTRUE 40879
40877: GO 40890
40879: POP
// bc_type := b_ext_radio ; 20 :
40880: LD_ADDR_OWVAR 42
40884: PUSH
40885: LD_INT 22
40887: ST_TO_ADDR
40888: GO 41176
40890: LD_INT 20
40892: DOUBLE
40893: EQUAL
40894: IFTRUE 40898
40896: GO 40909
40898: POP
// bc_type := b_ext_siberium ; 21 :
40899: LD_ADDR_OWVAR 42
40903: PUSH
40904: LD_INT 21
40906: ST_TO_ADDR
40907: GO 41176
40909: LD_INT 21
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40917
40915: GO 40928
40917: POP
// bc_type := b_ext_computer ; 22 :
40918: LD_ADDR_OWVAR 42
40922: PUSH
40923: LD_INT 24
40925: ST_TO_ADDR
40926: GO 41176
40928: LD_INT 22
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40936
40934: GO 40947
40936: POP
// bc_type := b_ext_track ; 23 :
40937: LD_ADDR_OWVAR 42
40941: PUSH
40942: LD_INT 16
40944: ST_TO_ADDR
40945: GO 41176
40947: LD_INT 23
40949: DOUBLE
40950: EQUAL
40951: IFTRUE 40955
40953: GO 40966
40955: POP
// bc_type := b_ext_laser ; 24 :
40956: LD_ADDR_OWVAR 42
40960: PUSH
40961: LD_INT 25
40963: ST_TO_ADDR
40964: GO 41176
40966: LD_INT 24
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 40985
40974: POP
// bc_type := b_control_tower ; 25 :
40975: LD_ADDR_OWVAR 42
40979: PUSH
40980: LD_INT 36
40982: ST_TO_ADDR
40983: GO 41176
40985: LD_INT 25
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41004
40993: POP
// bc_type := b_breastwork ; 26 :
40994: LD_ADDR_OWVAR 42
40998: PUSH
40999: LD_INT 31
41001: ST_TO_ADDR
41002: GO 41176
41004: LD_INT 26
41006: DOUBLE
41007: EQUAL
41008: IFTRUE 41012
41010: GO 41023
41012: POP
// bc_type := b_bunker ; 27 :
41013: LD_ADDR_OWVAR 42
41017: PUSH
41018: LD_INT 32
41020: ST_TO_ADDR
41021: GO 41176
41023: LD_INT 27
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41031
41029: GO 41042
41031: POP
// bc_type := b_turret ; 28 :
41032: LD_ADDR_OWVAR 42
41036: PUSH
41037: LD_INT 33
41039: ST_TO_ADDR
41040: GO 41176
41042: LD_INT 28
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41050
41048: GO 41061
41050: POP
// bc_type := b_armoury ; 29 :
41051: LD_ADDR_OWVAR 42
41055: PUSH
41056: LD_INT 4
41058: ST_TO_ADDR
41059: GO 41176
41061: LD_INT 29
41063: DOUBLE
41064: EQUAL
41065: IFTRUE 41069
41067: GO 41080
41069: POP
// bc_type := b_barracks ; 30 :
41070: LD_ADDR_OWVAR 42
41074: PUSH
41075: LD_INT 5
41077: ST_TO_ADDR
41078: GO 41176
41080: LD_INT 30
41082: DOUBLE
41083: EQUAL
41084: IFTRUE 41088
41086: GO 41099
41088: POP
// bc_type := b_solar_power ; 31 :
41089: LD_ADDR_OWVAR 42
41093: PUSH
41094: LD_INT 27
41096: ST_TO_ADDR
41097: GO 41176
41099: LD_INT 31
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41118
41107: POP
// bc_type := b_oil_power ; 32 :
41108: LD_ADDR_OWVAR 42
41112: PUSH
41113: LD_INT 26
41115: ST_TO_ADDR
41116: GO 41176
41118: LD_INT 32
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41126
41124: GO 41137
41126: POP
// bc_type := b_siberite_power ; 33 :
41127: LD_ADDR_OWVAR 42
41131: PUSH
41132: LD_INT 28
41134: ST_TO_ADDR
41135: GO 41176
41137: LD_INT 33
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41156
41145: POP
// bc_type := b_oil_mine ; 34 :
41146: LD_ADDR_OWVAR 42
41150: PUSH
41151: LD_INT 29
41153: ST_TO_ADDR
41154: GO 41176
41156: LD_INT 34
41158: DOUBLE
41159: EQUAL
41160: IFTRUE 41164
41162: GO 41175
41164: POP
// bc_type := b_siberite_mine ; end ;
41165: LD_ADDR_OWVAR 42
41169: PUSH
41170: LD_INT 30
41172: ST_TO_ADDR
41173: GO 41176
41175: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41176: LD_ADDR_VAR 0 8
41180: PUSH
41181: LD_VAR 0 5
41185: PPUSH
41186: LD_VAR 0 6
41190: PPUSH
41191: LD_VAR 0 3
41195: PPUSH
41196: CALL_OW 47
41200: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41201: LD_OWVAR 42
41205: PUSH
41206: LD_INT 32
41208: PUSH
41209: LD_INT 33
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: IN
41216: IFFALSE 41232
// PlaceWeaponTurret ( b , weapon ) ;
41218: LD_VAR 0 8
41222: PPUSH
41223: LD_VAR 0 4
41227: PPUSH
41228: CALL_OW 431
// end ;
41232: LD_VAR 0 7
41236: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41237: LD_INT 0
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41243: LD_ADDR_VAR 0 4
41247: PUSH
41248: LD_INT 22
41250: PUSH
41251: LD_OWVAR 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 30
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 30
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PPUSH
41292: CALL_OW 69
41296: ST_TO_ADDR
// if not tmp then
41297: LD_VAR 0 4
41301: NOT
41302: IFFALSE 41306
// exit ;
41304: GO 41365
// for i in tmp do
41306: LD_ADDR_VAR 0 2
41310: PUSH
41311: LD_VAR 0 4
41315: PUSH
41316: FOR_IN
41317: IFFALSE 41363
// for j = 1 to 3 do
41319: LD_ADDR_VAR 0 3
41323: PUSH
41324: DOUBLE
41325: LD_INT 1
41327: DEC
41328: ST_TO_ADDR
41329: LD_INT 3
41331: PUSH
41332: FOR_TO
41333: IFFALSE 41359
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
41335: LD_VAR 0 2
41339: PPUSH
41340: CALL_OW 274
41344: PPUSH
41345: LD_VAR 0 3
41349: PPUSH
41350: LD_INT 99999
41352: PPUSH
41353: CALL_OW 277
41357: GO 41332
41359: POP
41360: POP
41361: GO 41316
41363: POP
41364: POP
// end ;
41365: LD_VAR 0 1
41369: RET
// export function hHackSetLevel10 ; var i , j ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
41374: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41375: LD_ADDR_VAR 0 2
41379: PUSH
41380: LD_INT 21
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PPUSH
41390: CALL_OW 69
41394: PUSH
41395: FOR_IN
41396: IFFALSE 41448
// if IsSelected ( i ) then
41398: LD_VAR 0 2
41402: PPUSH
41403: CALL_OW 306
41407: IFFALSE 41446
// begin for j := 1 to 4 do
41409: LD_ADDR_VAR 0 3
41413: PUSH
41414: DOUBLE
41415: LD_INT 1
41417: DEC
41418: ST_TO_ADDR
41419: LD_INT 4
41421: PUSH
41422: FOR_TO
41423: IFFALSE 41444
// SetSkill ( i , j , 10 ) ;
41425: LD_VAR 0 2
41429: PPUSH
41430: LD_VAR 0 3
41434: PPUSH
41435: LD_INT 10
41437: PPUSH
41438: CALL_OW 237
41442: GO 41422
41444: POP
41445: POP
// end ;
41446: GO 41395
41448: POP
41449: POP
// end ;
41450: LD_VAR 0 1
41454: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
41455: LD_INT 0
41457: PPUSH
41458: PPUSH
41459: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
41460: LD_ADDR_VAR 0 2
41464: PUSH
41465: LD_INT 22
41467: PUSH
41468: LD_OWVAR 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 21
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PPUSH
41491: CALL_OW 69
41495: PUSH
41496: FOR_IN
41497: IFFALSE 41538
// begin for j := 1 to 4 do
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: DOUBLE
41505: LD_INT 1
41507: DEC
41508: ST_TO_ADDR
41509: LD_INT 4
41511: PUSH
41512: FOR_TO
41513: IFFALSE 41534
// SetSkill ( i , j , 10 ) ;
41515: LD_VAR 0 2
41519: PPUSH
41520: LD_VAR 0 3
41524: PPUSH
41525: LD_INT 10
41527: PPUSH
41528: CALL_OW 237
41532: GO 41512
41534: POP
41535: POP
// end ;
41536: GO 41496
41538: POP
41539: POP
// end ;
41540: LD_VAR 0 1
41544: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
41545: LD_INT 0
41547: PPUSH
// uc_side := your_side ;
41548: LD_ADDR_OWVAR 20
41552: PUSH
41553: LD_OWVAR 2
41557: ST_TO_ADDR
// uc_nation := nation ;
41558: LD_ADDR_OWVAR 21
41562: PUSH
41563: LD_VAR 0 1
41567: ST_TO_ADDR
// InitHc ;
41568: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41572: LD_INT 0
41574: PPUSH
41575: LD_VAR 0 2
41579: PPUSH
41580: LD_VAR 0 3
41584: PPUSH
41585: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
41589: LD_VAR 0 4
41593: PPUSH
41594: LD_VAR 0 5
41598: PPUSH
41599: CALL_OW 428
41603: PUSH
41604: LD_INT 0
41606: EQUAL
41607: IFFALSE 41631
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
41609: CALL_OW 44
41613: PPUSH
41614: LD_VAR 0 4
41618: PPUSH
41619: LD_VAR 0 5
41623: PPUSH
41624: LD_INT 1
41626: PPUSH
41627: CALL_OW 48
// end ;
41631: LD_VAR 0 6
41635: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
41636: LD_INT 0
41638: PPUSH
41639: PPUSH
// uc_side := your_side ;
41640: LD_ADDR_OWVAR 20
41644: PUSH
41645: LD_OWVAR 2
41649: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41650: LD_VAR 0 1
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 3
41663: PUSH
41664: LD_INT 4
41666: PUSH
41667: LD_INT 5
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: IN
41677: IFFALSE 41689
// uc_nation := nation_american else
41679: LD_ADDR_OWVAR 21
41683: PUSH
41684: LD_INT 1
41686: ST_TO_ADDR
41687: GO 41732
// if chassis in [ 11 , 12 , 13 , 14 ] then
41689: LD_VAR 0 1
41693: PUSH
41694: LD_INT 11
41696: PUSH
41697: LD_INT 12
41699: PUSH
41700: LD_INT 13
41702: PUSH
41703: LD_INT 14
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: IN
41712: IFFALSE 41724
// uc_nation := nation_arabian else
41714: LD_ADDR_OWVAR 21
41718: PUSH
41719: LD_INT 2
41721: ST_TO_ADDR
41722: GO 41732
// uc_nation := nation_russian ;
41724: LD_ADDR_OWVAR 21
41728: PUSH
41729: LD_INT 3
41731: ST_TO_ADDR
// vc_chassis := chassis ;
41732: LD_ADDR_OWVAR 37
41736: PUSH
41737: LD_VAR 0 1
41741: ST_TO_ADDR
// vc_engine := engine ;
41742: LD_ADDR_OWVAR 39
41746: PUSH
41747: LD_VAR 0 2
41751: ST_TO_ADDR
// vc_control := control ;
41752: LD_ADDR_OWVAR 38
41756: PUSH
41757: LD_VAR 0 3
41761: ST_TO_ADDR
// vc_weapon := weapon ;
41762: LD_ADDR_OWVAR 40
41766: PUSH
41767: LD_VAR 0 4
41771: ST_TO_ADDR
// un := CreateVehicle ;
41772: LD_ADDR_VAR 0 8
41776: PUSH
41777: CALL_OW 45
41781: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41782: LD_VAR 0 8
41786: PPUSH
41787: LD_INT 0
41789: PPUSH
41790: LD_INT 5
41792: PPUSH
41793: CALL_OW 12
41797: PPUSH
41798: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41802: LD_VAR 0 8
41806: PPUSH
41807: LD_VAR 0 5
41811: PPUSH
41812: LD_VAR 0 6
41816: PPUSH
41817: LD_INT 1
41819: PPUSH
41820: CALL_OW 48
// end ;
41824: LD_VAR 0 7
41828: RET
// export hInvincible ; every 1 do
41829: GO 41831
41831: DISABLE
// hInvincible := [ ] ;
41832: LD_ADDR_EXP 120
41836: PUSH
41837: EMPTY
41838: ST_TO_ADDR
41839: END
// every 10 do var i ;
41840: GO 41842
41842: DISABLE
41843: LD_INT 0
41845: PPUSH
// begin enable ;
41846: ENABLE
// if not hInvincible then
41847: LD_EXP 120
41851: NOT
41852: IFFALSE 41856
// exit ;
41854: GO 41900
// for i in hInvincible do
41856: LD_ADDR_VAR 0 1
41860: PUSH
41861: LD_EXP 120
41865: PUSH
41866: FOR_IN
41867: IFFALSE 41898
// if GetLives ( i ) < 1000 then
41869: LD_VAR 0 1
41873: PPUSH
41874: CALL_OW 256
41878: PUSH
41879: LD_INT 1000
41881: LESS
41882: IFFALSE 41896
// SetLives ( i , 1000 ) ;
41884: LD_VAR 0 1
41888: PPUSH
41889: LD_INT 1000
41891: PPUSH
41892: CALL_OW 234
41896: GO 41866
41898: POP
41899: POP
// end ;
41900: PPOPN 1
41902: END
// export function hHackInvincible ; var i ; begin
41903: LD_INT 0
41905: PPUSH
41906: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41907: LD_ADDR_VAR 0 2
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: LD_INT 21
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 21
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: PPUSH
41940: CALL_OW 69
41944: PUSH
41945: FOR_IN
41946: IFFALSE 42007
// if IsSelected ( i ) then
41948: LD_VAR 0 2
41952: PPUSH
41953: CALL_OW 306
41957: IFFALSE 42005
// begin if i in hInvincible then
41959: LD_VAR 0 2
41963: PUSH
41964: LD_EXP 120
41968: IN
41969: IFFALSE 41989
// hInvincible := hInvincible diff i else
41971: LD_ADDR_EXP 120
41975: PUSH
41976: LD_EXP 120
41980: PUSH
41981: LD_VAR 0 2
41985: DIFF
41986: ST_TO_ADDR
41987: GO 42005
// hInvincible := hInvincible union i ;
41989: LD_ADDR_EXP 120
41993: PUSH
41994: LD_EXP 120
41998: PUSH
41999: LD_VAR 0 2
42003: UNION
42004: ST_TO_ADDR
// end ;
42005: GO 41945
42007: POP
42008: POP
// end ;
42009: LD_VAR 0 1
42013: RET
// export function hHackInvisible ; var i , j ; begin
42014: LD_INT 0
42016: PPUSH
42017: PPUSH
42018: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42019: LD_ADDR_VAR 0 2
42023: PUSH
42024: LD_INT 21
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PPUSH
42034: CALL_OW 69
42038: PUSH
42039: FOR_IN
42040: IFFALSE 42064
// if IsSelected ( i ) then
42042: LD_VAR 0 2
42046: PPUSH
42047: CALL_OW 306
42051: IFFALSE 42062
// ComForceInvisible ( i ) ;
42053: LD_VAR 0 2
42057: PPUSH
42058: CALL_OW 496
42062: GO 42039
42064: POP
42065: POP
// end ;
42066: LD_VAR 0 1
42070: RET
// export function hHackChangeYourSide ; begin
42071: LD_INT 0
42073: PPUSH
// if your_side = 8 then
42074: LD_OWVAR 2
42078: PUSH
42079: LD_INT 8
42081: EQUAL
42082: IFFALSE 42094
// your_side := 0 else
42084: LD_ADDR_OWVAR 2
42088: PUSH
42089: LD_INT 0
42091: ST_TO_ADDR
42092: GO 42108
// your_side := your_side + 1 ;
42094: LD_ADDR_OWVAR 2
42098: PUSH
42099: LD_OWVAR 2
42103: PUSH
42104: LD_INT 1
42106: PLUS
42107: ST_TO_ADDR
// end ;
42108: LD_VAR 0 1
42112: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42113: LD_INT 0
42115: PPUSH
42116: PPUSH
42117: PPUSH
// for i in all_units do
42118: LD_ADDR_VAR 0 2
42122: PUSH
42123: LD_OWVAR 3
42127: PUSH
42128: FOR_IN
42129: IFFALSE 42207
// if IsSelected ( i ) then
42131: LD_VAR 0 2
42135: PPUSH
42136: CALL_OW 306
42140: IFFALSE 42205
// begin j := GetSide ( i ) ;
42142: LD_ADDR_VAR 0 3
42146: PUSH
42147: LD_VAR 0 2
42151: PPUSH
42152: CALL_OW 255
42156: ST_TO_ADDR
// if j = 8 then
42157: LD_VAR 0 3
42161: PUSH
42162: LD_INT 8
42164: EQUAL
42165: IFFALSE 42177
// j := 0 else
42167: LD_ADDR_VAR 0 3
42171: PUSH
42172: LD_INT 0
42174: ST_TO_ADDR
42175: GO 42191
// j := j + 1 ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_VAR 0 3
42186: PUSH
42187: LD_INT 1
42189: PLUS
42190: ST_TO_ADDR
// SetSide ( i , j ) ;
42191: LD_VAR 0 2
42195: PPUSH
42196: LD_VAR 0 3
42200: PPUSH
42201: CALL_OW 235
// end ;
42205: GO 42128
42207: POP
42208: POP
// end ;
42209: LD_VAR 0 1
42213: RET
// export function hHackFog ; begin
42214: LD_INT 0
42216: PPUSH
// FogOff ( true ) ;
42217: LD_INT 1
42219: PPUSH
42220: CALL_OW 344
// end ;
42224: LD_VAR 0 1
42228: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42229: LD_INT 0
42231: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42232: LD_VAR 0 1
42236: PPUSH
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 3
42246: PPUSH
42247: LD_INT 1
42249: PPUSH
42250: LD_INT 1
42252: PPUSH
42253: CALL_OW 483
// CenterOnXY ( x , y ) ;
42257: LD_VAR 0 2
42261: PPUSH
42262: LD_VAR 0 3
42266: PPUSH
42267: CALL_OW 84
// end ; end_of_file
42271: LD_VAR 0 4
42275: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42276: LD_INT 0
42278: PPUSH
42279: PPUSH
// if exist_mode then
42280: LD_VAR 0 2
42284: IFFALSE 42309
// unit := CreateCharacter ( prefix & ident ) else
42286: LD_ADDR_VAR 0 5
42290: PUSH
42291: LD_VAR 0 3
42295: PUSH
42296: LD_VAR 0 1
42300: STR
42301: PPUSH
42302: CALL_OW 34
42306: ST_TO_ADDR
42307: GO 42324
// unit := NewCharacter ( ident ) ;
42309: LD_ADDR_VAR 0 5
42313: PUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: CALL_OW 25
42323: ST_TO_ADDR
// result := unit ;
42324: LD_ADDR_VAR 0 4
42328: PUSH
42329: LD_VAR 0 5
42333: ST_TO_ADDR
// end ;
42334: LD_VAR 0 4
42338: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42339: LD_INT 0
42341: PPUSH
42342: PPUSH
// if not side or not nation then
42343: LD_VAR 0 1
42347: NOT
42348: PUSH
42349: LD_VAR 0 2
42353: NOT
42354: OR
42355: IFFALSE 42359
// exit ;
42357: GO 43127
// case nation of nation_american :
42359: LD_VAR 0 2
42363: PUSH
42364: LD_INT 1
42366: DOUBLE
42367: EQUAL
42368: IFTRUE 42372
42370: GO 42586
42372: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42373: LD_ADDR_VAR 0 4
42377: PUSH
42378: LD_INT 35
42380: PUSH
42381: LD_INT 45
42383: PUSH
42384: LD_INT 46
42386: PUSH
42387: LD_INT 47
42389: PUSH
42390: LD_INT 82
42392: PUSH
42393: LD_INT 83
42395: PUSH
42396: LD_INT 84
42398: PUSH
42399: LD_INT 85
42401: PUSH
42402: LD_INT 86
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 6
42413: PUSH
42414: LD_INT 15
42416: PUSH
42417: LD_INT 16
42419: PUSH
42420: LD_INT 7
42422: PUSH
42423: LD_INT 12
42425: PUSH
42426: LD_INT 13
42428: PUSH
42429: LD_INT 10
42431: PUSH
42432: LD_INT 14
42434: PUSH
42435: LD_INT 20
42437: PUSH
42438: LD_INT 21
42440: PUSH
42441: LD_INT 22
42443: PUSH
42444: LD_INT 25
42446: PUSH
42447: LD_INT 32
42449: PUSH
42450: LD_INT 27
42452: PUSH
42453: LD_INT 36
42455: PUSH
42456: LD_INT 69
42458: PUSH
42459: LD_INT 39
42461: PUSH
42462: LD_INT 34
42464: PUSH
42465: LD_INT 40
42467: PUSH
42468: LD_INT 48
42470: PUSH
42471: LD_INT 49
42473: PUSH
42474: LD_INT 50
42476: PUSH
42477: LD_INT 51
42479: PUSH
42480: LD_INT 52
42482: PUSH
42483: LD_INT 53
42485: PUSH
42486: LD_INT 54
42488: PUSH
42489: LD_INT 55
42491: PUSH
42492: LD_INT 56
42494: PUSH
42495: LD_INT 57
42497: PUSH
42498: LD_INT 58
42500: PUSH
42501: LD_INT 59
42503: PUSH
42504: LD_INT 60
42506: PUSH
42507: LD_INT 61
42509: PUSH
42510: LD_INT 62
42512: PUSH
42513: LD_INT 80
42515: PUSH
42516: LD_INT 82
42518: PUSH
42519: LD_INT 83
42521: PUSH
42522: LD_INT 84
42524: PUSH
42525: LD_INT 85
42527: PUSH
42528: LD_INT 86
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
42584: GO 43051
42586: LD_INT 2
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42820
42594: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42595: LD_ADDR_VAR 0 4
42599: PUSH
42600: LD_INT 35
42602: PUSH
42603: LD_INT 45
42605: PUSH
42606: LD_INT 46
42608: PUSH
42609: LD_INT 47
42611: PUSH
42612: LD_INT 82
42614: PUSH
42615: LD_INT 83
42617: PUSH
42618: LD_INT 84
42620: PUSH
42621: LD_INT 85
42623: PUSH
42624: LD_INT 87
42626: PUSH
42627: LD_INT 70
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 11
42635: PUSH
42636: LD_INT 3
42638: PUSH
42639: LD_INT 4
42641: PUSH
42642: LD_INT 5
42644: PUSH
42645: LD_INT 6
42647: PUSH
42648: LD_INT 15
42650: PUSH
42651: LD_INT 18
42653: PUSH
42654: LD_INT 7
42656: PUSH
42657: LD_INT 17
42659: PUSH
42660: LD_INT 8
42662: PUSH
42663: LD_INT 20
42665: PUSH
42666: LD_INT 21
42668: PUSH
42669: LD_INT 22
42671: PUSH
42672: LD_INT 72
42674: PUSH
42675: LD_INT 26
42677: PUSH
42678: LD_INT 69
42680: PUSH
42681: LD_INT 39
42683: PUSH
42684: LD_INT 40
42686: PUSH
42687: LD_INT 41
42689: PUSH
42690: LD_INT 42
42692: PUSH
42693: LD_INT 43
42695: PUSH
42696: LD_INT 48
42698: PUSH
42699: LD_INT 49
42701: PUSH
42702: LD_INT 50
42704: PUSH
42705: LD_INT 51
42707: PUSH
42708: LD_INT 52
42710: PUSH
42711: LD_INT 53
42713: PUSH
42714: LD_INT 54
42716: PUSH
42717: LD_INT 55
42719: PUSH
42720: LD_INT 56
42722: PUSH
42723: LD_INT 60
42725: PUSH
42726: LD_INT 61
42728: PUSH
42729: LD_INT 62
42731: PUSH
42732: LD_INT 66
42734: PUSH
42735: LD_INT 67
42737: PUSH
42738: LD_INT 68
42740: PUSH
42741: LD_INT 81
42743: PUSH
42744: LD_INT 82
42746: PUSH
42747: LD_INT 83
42749: PUSH
42750: LD_INT 84
42752: PUSH
42753: LD_INT 85
42755: PUSH
42756: LD_INT 87
42758: PUSH
42759: LD_INT 88
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
42818: GO 43051
42820: LD_INT 3
42822: DOUBLE
42823: EQUAL
42824: IFTRUE 42828
42826: GO 43050
42828: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42829: LD_ADDR_VAR 0 4
42833: PUSH
42834: LD_INT 46
42836: PUSH
42837: LD_INT 47
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 82
42848: PUSH
42849: LD_INT 83
42851: PUSH
42852: LD_INT 84
42854: PUSH
42855: LD_INT 85
42857: PUSH
42858: LD_INT 86
42860: PUSH
42861: LD_INT 11
42863: PUSH
42864: LD_INT 9
42866: PUSH
42867: LD_INT 20
42869: PUSH
42870: LD_INT 19
42872: PUSH
42873: LD_INT 21
42875: PUSH
42876: LD_INT 24
42878: PUSH
42879: LD_INT 22
42881: PUSH
42882: LD_INT 25
42884: PUSH
42885: LD_INT 28
42887: PUSH
42888: LD_INT 29
42890: PUSH
42891: LD_INT 30
42893: PUSH
42894: LD_INT 31
42896: PUSH
42897: LD_INT 37
42899: PUSH
42900: LD_INT 38
42902: PUSH
42903: LD_INT 32
42905: PUSH
42906: LD_INT 27
42908: PUSH
42909: LD_INT 33
42911: PUSH
42912: LD_INT 69
42914: PUSH
42915: LD_INT 39
42917: PUSH
42918: LD_INT 34
42920: PUSH
42921: LD_INT 40
42923: PUSH
42924: LD_INT 71
42926: PUSH
42927: LD_INT 23
42929: PUSH
42930: LD_INT 44
42932: PUSH
42933: LD_INT 48
42935: PUSH
42936: LD_INT 49
42938: PUSH
42939: LD_INT 50
42941: PUSH
42942: LD_INT 51
42944: PUSH
42945: LD_INT 52
42947: PUSH
42948: LD_INT 53
42950: PUSH
42951: LD_INT 54
42953: PUSH
42954: LD_INT 55
42956: PUSH
42957: LD_INT 56
42959: PUSH
42960: LD_INT 57
42962: PUSH
42963: LD_INT 58
42965: PUSH
42966: LD_INT 59
42968: PUSH
42969: LD_INT 63
42971: PUSH
42972: LD_INT 64
42974: PUSH
42975: LD_INT 65
42977: PUSH
42978: LD_INT 82
42980: PUSH
42981: LD_INT 83
42983: PUSH
42984: LD_INT 84
42986: PUSH
42987: LD_INT 85
42989: PUSH
42990: LD_INT 86
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
43048: GO 43051
43050: POP
// if state > - 1 and state < 3 then
43051: LD_VAR 0 3
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: GREATER
43060: PUSH
43061: LD_VAR 0 3
43065: PUSH
43066: LD_INT 3
43068: LESS
43069: AND
43070: IFFALSE 43127
// for i in result do
43072: LD_ADDR_VAR 0 5
43076: PUSH
43077: LD_VAR 0 4
43081: PUSH
43082: FOR_IN
43083: IFFALSE 43125
// if GetTech ( i , side ) <> state then
43085: LD_VAR 0 5
43089: PPUSH
43090: LD_VAR 0 1
43094: PPUSH
43095: CALL_OW 321
43099: PUSH
43100: LD_VAR 0 3
43104: NONEQUAL
43105: IFFALSE 43123
// result := result diff i ;
43107: LD_ADDR_VAR 0 4
43111: PUSH
43112: LD_VAR 0 4
43116: PUSH
43117: LD_VAR 0 5
43121: DIFF
43122: ST_TO_ADDR
43123: GO 43082
43125: POP
43126: POP
// end ;
43127: LD_VAR 0 4
43131: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43132: LD_INT 0
43134: PPUSH
43135: PPUSH
43136: PPUSH
// result := true ;
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_INT 1
43144: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43145: LD_ADDR_VAR 0 5
43149: PUSH
43150: LD_VAR 0 2
43154: PPUSH
43155: CALL_OW 480
43159: ST_TO_ADDR
// if not tmp then
43160: LD_VAR 0 5
43164: NOT
43165: IFFALSE 43169
// exit ;
43167: GO 43218
// for i in tmp do
43169: LD_ADDR_VAR 0 4
43173: PUSH
43174: LD_VAR 0 5
43178: PUSH
43179: FOR_IN
43180: IFFALSE 43216
// if GetTech ( i , side ) <> state_researched then
43182: LD_VAR 0 4
43186: PPUSH
43187: LD_VAR 0 1
43191: PPUSH
43192: CALL_OW 321
43196: PUSH
43197: LD_INT 2
43199: NONEQUAL
43200: IFFALSE 43214
// begin result := false ;
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_INT 0
43209: ST_TO_ADDR
// exit ;
43210: POP
43211: POP
43212: GO 43218
// end ;
43214: GO 43179
43216: POP
43217: POP
// end ;
43218: LD_VAR 0 3
43222: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43223: LD_INT 0
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
43237: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43238: LD_VAR 0 1
43242: NOT
43243: PUSH
43244: LD_VAR 0 1
43248: PPUSH
43249: CALL_OW 257
43253: PUSH
43254: LD_INT 9
43256: NONEQUAL
43257: OR
43258: IFFALSE 43262
// exit ;
43260: GO 43835
// side := GetSide ( unit ) ;
43262: LD_ADDR_VAR 0 9
43266: PUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 255
43276: ST_TO_ADDR
// tech_space := tech_spacanom ;
43277: LD_ADDR_VAR 0 12
43281: PUSH
43282: LD_INT 29
43284: ST_TO_ADDR
// tech_time := tech_taurad ;
43285: LD_ADDR_VAR 0 13
43289: PUSH
43290: LD_INT 28
43292: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43293: LD_ADDR_VAR 0 11
43297: PUSH
43298: LD_VAR 0 1
43302: PPUSH
43303: CALL_OW 310
43307: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43308: LD_VAR 0 11
43312: PPUSH
43313: CALL_OW 247
43317: PUSH
43318: LD_INT 2
43320: EQUAL
43321: IFFALSE 43325
// exit ;
43323: GO 43835
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43325: LD_ADDR_VAR 0 8
43329: PUSH
43330: LD_INT 81
43332: PUSH
43333: LD_VAR 0 9
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: LD_INT 21
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PPUSH
43363: CALL_OW 69
43367: ST_TO_ADDR
// if not tmp then
43368: LD_VAR 0 8
43372: NOT
43373: IFFALSE 43377
// exit ;
43375: GO 43835
// if in_unit then
43377: LD_VAR 0 11
43381: IFFALSE 43405
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43383: LD_ADDR_VAR 0 10
43387: PUSH
43388: LD_VAR 0 8
43392: PPUSH
43393: LD_VAR 0 11
43397: PPUSH
43398: CALL_OW 74
43402: ST_TO_ADDR
43403: GO 43425
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43405: LD_ADDR_VAR 0 10
43409: PUSH
43410: LD_VAR 0 8
43414: PPUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 74
43424: ST_TO_ADDR
// if not enemy then
43425: LD_VAR 0 10
43429: NOT
43430: IFFALSE 43434
// exit ;
43432: GO 43835
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43434: LD_VAR 0 11
43438: PUSH
43439: LD_VAR 0 11
43443: PPUSH
43444: LD_VAR 0 10
43448: PPUSH
43449: CALL_OW 296
43453: PUSH
43454: LD_INT 13
43456: GREATER
43457: AND
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: LD_VAR 0 10
43468: PPUSH
43469: CALL_OW 296
43473: PUSH
43474: LD_INT 12
43476: GREATER
43477: OR
43478: IFFALSE 43482
// exit ;
43480: GO 43835
// missile := [ 1 ] ;
43482: LD_ADDR_VAR 0 14
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43493: LD_VAR 0 9
43497: PPUSH
43498: LD_VAR 0 12
43502: PPUSH
43503: CALL_OW 325
43507: IFFALSE 43536
// missile := Insert ( missile , missile + 1 , 2 ) ;
43509: LD_ADDR_VAR 0 14
43513: PUSH
43514: LD_VAR 0 14
43518: PPUSH
43519: LD_VAR 0 14
43523: PUSH
43524: LD_INT 1
43526: PLUS
43527: PPUSH
43528: LD_INT 2
43530: PPUSH
43531: CALL_OW 2
43535: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43536: LD_VAR 0 9
43540: PPUSH
43541: LD_VAR 0 13
43545: PPUSH
43546: CALL_OW 325
43550: PUSH
43551: LD_VAR 0 10
43555: PPUSH
43556: CALL_OW 255
43560: PPUSH
43561: LD_VAR 0 13
43565: PPUSH
43566: CALL_OW 325
43570: NOT
43571: AND
43572: IFFALSE 43601
// missile := Insert ( missile , missile + 1 , 3 ) ;
43574: LD_ADDR_VAR 0 14
43578: PUSH
43579: LD_VAR 0 14
43583: PPUSH
43584: LD_VAR 0 14
43588: PUSH
43589: LD_INT 1
43591: PLUS
43592: PPUSH
43593: LD_INT 3
43595: PPUSH
43596: CALL_OW 2
43600: ST_TO_ADDR
// if missile < 2 then
43601: LD_VAR 0 14
43605: PUSH
43606: LD_INT 2
43608: LESS
43609: IFFALSE 43613
// exit ;
43611: GO 43835
// x := GetX ( enemy ) ;
43613: LD_ADDR_VAR 0 4
43617: PUSH
43618: LD_VAR 0 10
43622: PPUSH
43623: CALL_OW 250
43627: ST_TO_ADDR
// y := GetY ( enemy ) ;
43628: LD_ADDR_VAR 0 5
43632: PUSH
43633: LD_VAR 0 10
43637: PPUSH
43638: CALL_OW 251
43642: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43643: LD_ADDR_VAR 0 6
43647: PUSH
43648: LD_VAR 0 4
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PPUSH
43657: LD_INT 1
43659: PPUSH
43660: CALL_OW 12
43664: PLUS
43665: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43666: LD_ADDR_VAR 0 7
43670: PUSH
43671: LD_VAR 0 5
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PPUSH
43680: LD_INT 1
43682: PPUSH
43683: CALL_OW 12
43687: PLUS
43688: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43689: LD_VAR 0 6
43693: PPUSH
43694: LD_VAR 0 7
43698: PPUSH
43699: CALL_OW 488
43703: NOT
43704: IFFALSE 43726
// begin _x := x ;
43706: LD_ADDR_VAR 0 6
43710: PUSH
43711: LD_VAR 0 4
43715: ST_TO_ADDR
// _y := y ;
43716: LD_ADDR_VAR 0 7
43720: PUSH
43721: LD_VAR 0 5
43725: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43726: LD_ADDR_VAR 0 3
43730: PUSH
43731: LD_INT 1
43733: PPUSH
43734: LD_VAR 0 14
43738: PPUSH
43739: CALL_OW 12
43743: ST_TO_ADDR
// case i of 1 :
43744: LD_VAR 0 3
43748: PUSH
43749: LD_INT 1
43751: DOUBLE
43752: EQUAL
43753: IFTRUE 43757
43755: GO 43774
43757: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43758: LD_VAR 0 1
43762: PPUSH
43763: LD_VAR 0 10
43767: PPUSH
43768: CALL_OW 115
43772: GO 43835
43774: LD_INT 2
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43782
43780: GO 43804
43782: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43783: LD_VAR 0 1
43787: PPUSH
43788: LD_VAR 0 6
43792: PPUSH
43793: LD_VAR 0 7
43797: PPUSH
43798: CALL_OW 153
43802: GO 43835
43804: LD_INT 3
43806: DOUBLE
43807: EQUAL
43808: IFTRUE 43812
43810: GO 43834
43812: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43813: LD_VAR 0 1
43817: PPUSH
43818: LD_VAR 0 6
43822: PPUSH
43823: LD_VAR 0 7
43827: PPUSH
43828: CALL_OW 154
43832: GO 43835
43834: POP
// end ;
43835: LD_VAR 0 2
43839: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43840: LD_INT 0
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
// if not unit or not building then
43848: LD_VAR 0 1
43852: NOT
43853: PUSH
43854: LD_VAR 0 2
43858: NOT
43859: OR
43860: IFFALSE 43864
// exit ;
43862: GO 44022
// x := GetX ( building ) ;
43864: LD_ADDR_VAR 0 5
43868: PUSH
43869: LD_VAR 0 2
43873: PPUSH
43874: CALL_OW 250
43878: ST_TO_ADDR
// y := GetY ( building ) ;
43879: LD_ADDR_VAR 0 6
43883: PUSH
43884: LD_VAR 0 2
43888: PPUSH
43889: CALL_OW 251
43893: ST_TO_ADDR
// for i = 0 to 5 do
43894: LD_ADDR_VAR 0 4
43898: PUSH
43899: DOUBLE
43900: LD_INT 0
43902: DEC
43903: ST_TO_ADDR
43904: LD_INT 5
43906: PUSH
43907: FOR_TO
43908: IFFALSE 44020
// begin _x := ShiftX ( x , i , 3 ) ;
43910: LD_ADDR_VAR 0 7
43914: PUSH
43915: LD_VAR 0 5
43919: PPUSH
43920: LD_VAR 0 4
43924: PPUSH
43925: LD_INT 3
43927: PPUSH
43928: CALL_OW 272
43932: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: LD_VAR 0 6
43942: PPUSH
43943: LD_VAR 0 4
43947: PPUSH
43948: LD_INT 3
43950: PPUSH
43951: CALL_OW 273
43955: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43956: LD_VAR 0 7
43960: PPUSH
43961: LD_VAR 0 8
43965: PPUSH
43966: CALL_OW 488
43970: NOT
43971: IFFALSE 43975
// continue ;
43973: GO 43907
// if HexInfo ( _x , _y ) = 0 then
43975: LD_VAR 0 7
43979: PPUSH
43980: LD_VAR 0 8
43984: PPUSH
43985: CALL_OW 428
43989: PUSH
43990: LD_INT 0
43992: EQUAL
43993: IFFALSE 44018
// begin ComMoveXY ( unit , _x , _y ) ;
43995: LD_VAR 0 1
43999: PPUSH
44000: LD_VAR 0 7
44004: PPUSH
44005: LD_VAR 0 8
44009: PPUSH
44010: CALL_OW 111
// exit ;
44014: POP
44015: POP
44016: GO 44022
// end ; end ;
44018: GO 43907
44020: POP
44021: POP
// end ;
44022: LD_VAR 0 3
44026: RET
// export function ScanBase ( side , base_area ) ; begin
44027: LD_INT 0
44029: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_VAR 0 2
44039: PPUSH
44040: LD_INT 81
44042: PUSH
44043: LD_VAR 0 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PPUSH
44052: CALL_OW 70
44056: ST_TO_ADDR
// end ;
44057: LD_VAR 0 3
44061: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44062: LD_INT 0
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
// result := false ;
44068: LD_ADDR_VAR 0 2
44072: PUSH
44073: LD_INT 0
44075: ST_TO_ADDR
// side := GetSide ( unit ) ;
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 255
44090: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44091: LD_ADDR_VAR 0 4
44095: PUSH
44096: LD_VAR 0 1
44100: PPUSH
44101: CALL_OW 248
44105: ST_TO_ADDR
// case nat of 1 :
44106: LD_VAR 0 4
44110: PUSH
44111: LD_INT 1
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44130
44119: POP
// tech := tech_lassight ; 2 :
44120: LD_ADDR_VAR 0 5
44124: PUSH
44125: LD_INT 12
44127: ST_TO_ADDR
44128: GO 44169
44130: LD_INT 2
44132: DOUBLE
44133: EQUAL
44134: IFTRUE 44138
44136: GO 44149
44138: POP
// tech := tech_mortar ; 3 :
44139: LD_ADDR_VAR 0 5
44143: PUSH
44144: LD_INT 41
44146: ST_TO_ADDR
44147: GO 44169
44149: LD_INT 3
44151: DOUBLE
44152: EQUAL
44153: IFTRUE 44157
44155: GO 44168
44157: POP
// tech := tech_bazooka ; end ;
44158: LD_ADDR_VAR 0 5
44162: PUSH
44163: LD_INT 44
44165: ST_TO_ADDR
44166: GO 44169
44168: POP
// if Researched ( side , tech ) then
44169: LD_VAR 0 3
44173: PPUSH
44174: LD_VAR 0 5
44178: PPUSH
44179: CALL_OW 325
44183: IFFALSE 44210
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44185: LD_ADDR_VAR 0 2
44189: PUSH
44190: LD_INT 5
44192: PUSH
44193: LD_INT 8
44195: PUSH
44196: LD_INT 9
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: PUSH
44204: LD_VAR 0 4
44208: ARRAY
44209: ST_TO_ADDR
// end ;
44210: LD_VAR 0 2
44214: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44215: LD_INT 0
44217: PPUSH
44218: PPUSH
44219: PPUSH
// if not mines then
44220: LD_VAR 0 2
44224: NOT
44225: IFFALSE 44229
// exit ;
44227: GO 44373
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44229: LD_ADDR_VAR 0 5
44233: PUSH
44234: LD_INT 81
44236: PUSH
44237: LD_VAR 0 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: PUSH
44249: LD_INT 21
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PPUSH
44267: CALL_OW 69
44271: ST_TO_ADDR
// for i in mines do
44272: LD_ADDR_VAR 0 4
44276: PUSH
44277: LD_VAR 0 2
44281: PUSH
44282: FOR_IN
44283: IFFALSE 44371
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44285: LD_VAR 0 4
44289: PUSH
44290: LD_INT 1
44292: ARRAY
44293: PPUSH
44294: LD_VAR 0 4
44298: PUSH
44299: LD_INT 2
44301: ARRAY
44302: PPUSH
44303: CALL_OW 458
44307: NOT
44308: IFFALSE 44312
// continue ;
44310: GO 44282
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44312: LD_VAR 0 4
44316: PUSH
44317: LD_INT 1
44319: ARRAY
44320: PPUSH
44321: LD_VAR 0 4
44325: PUSH
44326: LD_INT 2
44328: ARRAY
44329: PPUSH
44330: CALL_OW 428
44334: PUSH
44335: LD_VAR 0 5
44339: IN
44340: IFFALSE 44369
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44342: LD_VAR 0 4
44346: PUSH
44347: LD_INT 1
44349: ARRAY
44350: PPUSH
44351: LD_VAR 0 4
44355: PUSH
44356: LD_INT 2
44358: ARRAY
44359: PPUSH
44360: LD_VAR 0 1
44364: PPUSH
44365: CALL_OW 456
// end ;
44369: GO 44282
44371: POP
44372: POP
// end ;
44373: LD_VAR 0 3
44377: RET
// export function Count ( array ) ; var i ; begin
44378: LD_INT 0
44380: PPUSH
44381: PPUSH
// result := 0 ;
44382: LD_ADDR_VAR 0 2
44386: PUSH
44387: LD_INT 0
44389: ST_TO_ADDR
// for i in array do
44390: LD_ADDR_VAR 0 3
44394: PUSH
44395: LD_VAR 0 1
44399: PUSH
44400: FOR_IN
44401: IFFALSE 44425
// if i then
44403: LD_VAR 0 3
44407: IFFALSE 44423
// result := result + 1 ;
44409: LD_ADDR_VAR 0 2
44413: PUSH
44414: LD_VAR 0 2
44418: PUSH
44419: LD_INT 1
44421: PLUS
44422: ST_TO_ADDR
44423: GO 44400
44425: POP
44426: POP
// end ;
44427: LD_VAR 0 2
44431: RET
// export function IsEmpty ( building ) ; begin
44432: LD_INT 0
44434: PPUSH
// if not building then
44435: LD_VAR 0 1
44439: NOT
44440: IFFALSE 44444
// exit ;
44442: GO 44487
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44444: LD_ADDR_VAR 0 2
44448: PUSH
44449: LD_VAR 0 1
44453: PUSH
44454: LD_INT 22
44456: PUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 255
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 58
44473: PUSH
44474: EMPTY
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PPUSH
44481: CALL_OW 69
44485: IN
44486: ST_TO_ADDR
// end ;
44487: LD_VAR 0 2
44491: RET
// export function IsNotFull ( building ) ; begin
44492: LD_INT 0
44494: PPUSH
// if not building then
44495: LD_VAR 0 1
44499: NOT
44500: IFFALSE 44504
// exit ;
44502: GO 44523
// result := UnitsInside ( building ) < 6 ;
44504: LD_ADDR_VAR 0 2
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 313
44518: PUSH
44519: LD_INT 6
44521: LESS
44522: ST_TO_ADDR
// end ;
44523: LD_VAR 0 2
44527: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44528: LD_INT 0
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
// tmp := [ ] ;
44534: LD_ADDR_VAR 0 3
44538: PUSH
44539: EMPTY
44540: ST_TO_ADDR
// list := [ ] ;
44541: LD_ADDR_VAR 0 5
44545: PUSH
44546: EMPTY
44547: ST_TO_ADDR
// for i = 16 to 25 do
44548: LD_ADDR_VAR 0 4
44552: PUSH
44553: DOUBLE
44554: LD_INT 16
44556: DEC
44557: ST_TO_ADDR
44558: LD_INT 25
44560: PUSH
44561: FOR_TO
44562: IFFALSE 44635
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_VAR 0 3
44573: PUSH
44574: LD_INT 22
44576: PUSH
44577: LD_VAR 0 1
44581: PPUSH
44582: CALL_OW 255
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 91
44593: PUSH
44594: LD_VAR 0 1
44598: PUSH
44599: LD_INT 6
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 30
44609: PUSH
44610: LD_VAR 0 4
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: PPUSH
44627: CALL_OW 69
44631: ADD
44632: ST_TO_ADDR
44633: GO 44561
44635: POP
44636: POP
// for i = 1 to tmp do
44637: LD_ADDR_VAR 0 4
44641: PUSH
44642: DOUBLE
44643: LD_INT 1
44645: DEC
44646: ST_TO_ADDR
44647: LD_VAR 0 3
44651: PUSH
44652: FOR_TO
44653: IFFALSE 44741
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_VAR 0 5
44664: PUSH
44665: LD_VAR 0 3
44669: PUSH
44670: LD_VAR 0 4
44674: ARRAY
44675: PPUSH
44676: CALL_OW 266
44680: PUSH
44681: LD_VAR 0 3
44685: PUSH
44686: LD_VAR 0 4
44690: ARRAY
44691: PPUSH
44692: CALL_OW 250
44696: PUSH
44697: LD_VAR 0 3
44701: PUSH
44702: LD_VAR 0 4
44706: ARRAY
44707: PPUSH
44708: CALL_OW 251
44712: PUSH
44713: LD_VAR 0 3
44717: PUSH
44718: LD_VAR 0 4
44722: ARRAY
44723: PPUSH
44724: CALL_OW 254
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: ADD
44738: ST_TO_ADDR
44739: GO 44652
44741: POP
44742: POP
// result := list ;
44743: LD_ADDR_VAR 0 2
44747: PUSH
44748: LD_VAR 0 5
44752: ST_TO_ADDR
// end ;
44753: LD_VAR 0 2
44757: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44758: LD_INT 0
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
// if not factory then
44767: LD_VAR 0 1
44771: NOT
44772: IFFALSE 44776
// exit ;
44774: GO 45369
// if control = control_apeman then
44776: LD_VAR 0 4
44780: PUSH
44781: LD_INT 5
44783: EQUAL
44784: IFFALSE 44893
// begin tmp := UnitsInside ( factory ) ;
44786: LD_ADDR_VAR 0 8
44790: PUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 313
44800: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44801: LD_VAR 0 8
44805: PPUSH
44806: LD_INT 25
44808: PUSH
44809: LD_INT 12
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PPUSH
44816: CALL_OW 72
44820: NOT
44821: IFFALSE 44831
// control := control_manual ;
44823: LD_ADDR_VAR 0 4
44827: PUSH
44828: LD_INT 1
44830: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44831: LD_ADDR_VAR 0 8
44835: PUSH
44836: LD_VAR 0 1
44840: PPUSH
44841: CALL 44528 0 1
44845: ST_TO_ADDR
// if tmp then
44846: LD_VAR 0 8
44850: IFFALSE 44893
// begin for i in tmp do
44852: LD_ADDR_VAR 0 7
44856: PUSH
44857: LD_VAR 0 8
44861: PUSH
44862: FOR_IN
44863: IFFALSE 44891
// if i [ 1 ] = b_ext_radio then
44865: LD_VAR 0 7
44869: PUSH
44870: LD_INT 1
44872: ARRAY
44873: PUSH
44874: LD_INT 22
44876: EQUAL
44877: IFFALSE 44889
// begin control := control_remote ;
44879: LD_ADDR_VAR 0 4
44883: PUSH
44884: LD_INT 2
44886: ST_TO_ADDR
// break ;
44887: GO 44891
// end ;
44889: GO 44862
44891: POP
44892: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44893: LD_VAR 0 1
44897: PPUSH
44898: LD_VAR 0 2
44902: PPUSH
44903: LD_VAR 0 3
44907: PPUSH
44908: LD_VAR 0 4
44912: PPUSH
44913: LD_VAR 0 5
44917: PPUSH
44918: CALL_OW 448
44922: IFFALSE 44957
// begin result := [ chassis , engine , control , weapon ] ;
44924: LD_ADDR_VAR 0 6
44928: PUSH
44929: LD_VAR 0 2
44933: PUSH
44934: LD_VAR 0 3
44938: PUSH
44939: LD_VAR 0 4
44943: PUSH
44944: LD_VAR 0 5
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: ST_TO_ADDR
// exit ;
44955: GO 45369
// end ; _chassis := AvailableChassisList ( factory ) ;
44957: LD_ADDR_VAR 0 9
44961: PUSH
44962: LD_VAR 0 1
44966: PPUSH
44967: CALL_OW 475
44971: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44972: LD_ADDR_VAR 0 11
44976: PUSH
44977: LD_VAR 0 1
44981: PPUSH
44982: CALL_OW 476
44986: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44987: LD_ADDR_VAR 0 12
44991: PUSH
44992: LD_VAR 0 1
44996: PPUSH
44997: CALL_OW 477
45001: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45002: LD_ADDR_VAR 0 10
45006: PUSH
45007: LD_VAR 0 1
45011: PPUSH
45012: CALL_OW 478
45016: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45017: LD_VAR 0 9
45021: NOT
45022: PUSH
45023: LD_VAR 0 11
45027: NOT
45028: OR
45029: PUSH
45030: LD_VAR 0 12
45034: NOT
45035: OR
45036: PUSH
45037: LD_VAR 0 10
45041: NOT
45042: OR
45043: IFFALSE 45078
// begin result := [ chassis , engine , control , weapon ] ;
45045: LD_ADDR_VAR 0 6
45049: PUSH
45050: LD_VAR 0 2
45054: PUSH
45055: LD_VAR 0 3
45059: PUSH
45060: LD_VAR 0 4
45064: PUSH
45065: LD_VAR 0 5
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: ST_TO_ADDR
// exit ;
45076: GO 45369
// end ; if not chassis in _chassis then
45078: LD_VAR 0 2
45082: PUSH
45083: LD_VAR 0 9
45087: IN
45088: NOT
45089: IFFALSE 45115
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45091: LD_ADDR_VAR 0 2
45095: PUSH
45096: LD_VAR 0 9
45100: PUSH
45101: LD_INT 1
45103: PPUSH
45104: LD_VAR 0 9
45108: PPUSH
45109: CALL_OW 12
45113: ARRAY
45114: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45115: LD_VAR 0 2
45119: PPUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: CALL 45374 0 2
45129: NOT
45130: IFFALSE 45189
// repeat engine := _engine [ 1 ] ;
45132: LD_ADDR_VAR 0 3
45136: PUSH
45137: LD_VAR 0 11
45141: PUSH
45142: LD_INT 1
45144: ARRAY
45145: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45146: LD_ADDR_VAR 0 11
45150: PUSH
45151: LD_VAR 0 11
45155: PPUSH
45156: LD_INT 1
45158: PPUSH
45159: CALL_OW 3
45163: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45164: LD_VAR 0 2
45168: PPUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: CALL 45374 0 2
45178: PUSH
45179: LD_VAR 0 11
45183: PUSH
45184: EMPTY
45185: EQUAL
45186: OR
45187: IFFALSE 45132
// if not control in _control then
45189: LD_VAR 0 4
45193: PUSH
45194: LD_VAR 0 12
45198: IN
45199: NOT
45200: IFFALSE 45226
// control := _control [ rand ( 1 , _control ) ] ;
45202: LD_ADDR_VAR 0 4
45206: PUSH
45207: LD_VAR 0 12
45211: PUSH
45212: LD_INT 1
45214: PPUSH
45215: LD_VAR 0 12
45219: PPUSH
45220: CALL_OW 12
45224: ARRAY
45225: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45226: LD_VAR 0 2
45230: PPUSH
45231: LD_VAR 0 5
45235: PPUSH
45236: CALL 45594 0 2
45240: NOT
45241: IFFALSE 45300
// repeat weapon := _weapon [ 1 ] ;
45243: LD_ADDR_VAR 0 5
45247: PUSH
45248: LD_VAR 0 10
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45257: LD_ADDR_VAR 0 10
45261: PUSH
45262: LD_VAR 0 10
45266: PPUSH
45267: LD_INT 1
45269: PPUSH
45270: CALL_OW 3
45274: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45275: LD_VAR 0 2
45279: PPUSH
45280: LD_VAR 0 5
45284: PPUSH
45285: CALL 45594 0 2
45289: PUSH
45290: LD_VAR 0 10
45294: PUSH
45295: EMPTY
45296: EQUAL
45297: OR
45298: IFFALSE 45243
// result := [ ] ;
45300: LD_ADDR_VAR 0 6
45304: PUSH
45305: EMPTY
45306: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45307: LD_VAR 0 1
45311: PPUSH
45312: LD_VAR 0 2
45316: PPUSH
45317: LD_VAR 0 3
45321: PPUSH
45322: LD_VAR 0 4
45326: PPUSH
45327: LD_VAR 0 5
45331: PPUSH
45332: CALL_OW 448
45336: IFFALSE 45369
// result := [ chassis , engine , control , weapon ] ;
45338: LD_ADDR_VAR 0 6
45342: PUSH
45343: LD_VAR 0 2
45347: PUSH
45348: LD_VAR 0 3
45352: PUSH
45353: LD_VAR 0 4
45357: PUSH
45358: LD_VAR 0 5
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// end ;
45369: LD_VAR 0 6
45373: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45374: LD_INT 0
45376: PPUSH
// if not chassis or not engine then
45377: LD_VAR 0 1
45381: NOT
45382: PUSH
45383: LD_VAR 0 2
45387: NOT
45388: OR
45389: IFFALSE 45393
// exit ;
45391: GO 45589
// case engine of engine_solar :
45393: LD_VAR 0 2
45397: PUSH
45398: LD_INT 2
45400: DOUBLE
45401: EQUAL
45402: IFTRUE 45406
45404: GO 45444
45406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45407: LD_ADDR_VAR 0 3
45411: PUSH
45412: LD_INT 11
45414: PUSH
45415: LD_INT 12
45417: PUSH
45418: LD_INT 13
45420: PUSH
45421: LD_INT 14
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: ST_TO_ADDR
45442: GO 45573
45444: LD_INT 1
45446: DOUBLE
45447: EQUAL
45448: IFTRUE 45452
45450: GO 45514
45452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45453: LD_ADDR_VAR 0 3
45457: PUSH
45458: LD_INT 11
45460: PUSH
45461: LD_INT 12
45463: PUSH
45464: LD_INT 13
45466: PUSH
45467: LD_INT 14
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: LD_INT 4
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: LD_INT 21
45487: PUSH
45488: LD_INT 23
45490: PUSH
45491: LD_INT 22
45493: PUSH
45494: LD_INT 24
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
45512: GO 45573
45514: LD_INT 3
45516: DOUBLE
45517: EQUAL
45518: IFTRUE 45522
45520: GO 45572
45522: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45523: LD_ADDR_VAR 0 3
45527: PUSH
45528: LD_INT 13
45530: PUSH
45531: LD_INT 14
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: LD_INT 4
45542: PUSH
45543: LD_INT 5
45545: PUSH
45546: LD_INT 21
45548: PUSH
45549: LD_INT 22
45551: PUSH
45552: LD_INT 23
45554: PUSH
45555: LD_INT 24
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
45570: GO 45573
45572: POP
// result := ( chassis in result ) ;
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_VAR 0 1
45582: PUSH
45583: LD_VAR 0 3
45587: IN
45588: ST_TO_ADDR
// end ;
45589: LD_VAR 0 3
45593: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45594: LD_INT 0
45596: PPUSH
// if not chassis or not weapon then
45597: LD_VAR 0 1
45601: NOT
45602: PUSH
45603: LD_VAR 0 2
45607: NOT
45608: OR
45609: IFFALSE 45613
// exit ;
45611: GO 46675
// case weapon of us_machine_gun :
45613: LD_VAR 0 2
45617: PUSH
45618: LD_INT 2
45620: DOUBLE
45621: EQUAL
45622: IFTRUE 45626
45624: GO 45656
45626: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45627: LD_ADDR_VAR 0 3
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: LD_INT 4
45643: PUSH
45644: LD_INT 5
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: ST_TO_ADDR
45654: GO 46659
45656: LD_INT 3
45658: DOUBLE
45659: EQUAL
45660: IFTRUE 45664
45662: GO 45694
45664: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45665: LD_ADDR_VAR 0 3
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 3
45678: PUSH
45679: LD_INT 4
45681: PUSH
45682: LD_INT 5
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
45692: GO 46659
45694: LD_INT 11
45696: DOUBLE
45697: EQUAL
45698: IFTRUE 45702
45700: GO 45732
45702: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 4
45719: PUSH
45720: LD_INT 5
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
45730: GO 46659
45732: LD_INT 4
45734: DOUBLE
45735: EQUAL
45736: IFTRUE 45740
45738: GO 45766
45740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45741: LD_ADDR_VAR 0 3
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: LD_INT 4
45754: PUSH
45755: LD_INT 5
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
45764: GO 46659
45766: LD_INT 5
45768: DOUBLE
45769: EQUAL
45770: IFTRUE 45774
45772: GO 45800
45774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45775: LD_ADDR_VAR 0 3
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: LD_INT 5
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
45798: GO 46659
45800: LD_INT 9
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45808
45806: GO 45834
45808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45809: LD_ADDR_VAR 0 3
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: LD_INT 4
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
45832: GO 46659
45834: LD_INT 7
45836: DOUBLE
45837: EQUAL
45838: IFTRUE 45842
45840: GO 45868
45842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45843: LD_ADDR_VAR 0 3
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: LD_INT 4
45856: PUSH
45857: LD_INT 5
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
45866: GO 46659
45868: LD_INT 12
45870: DOUBLE
45871: EQUAL
45872: IFTRUE 45876
45874: GO 45902
45876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45877: LD_ADDR_VAR 0 3
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 4
45890: PUSH
45891: LD_INT 5
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
45900: GO 46659
45902: LD_INT 13
45904: DOUBLE
45905: EQUAL
45906: IFTRUE 45910
45908: GO 45936
45910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45911: LD_ADDR_VAR 0 3
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 4
45924: PUSH
45925: LD_INT 5
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
45934: GO 46659
45936: LD_INT 14
45938: DOUBLE
45939: EQUAL
45940: IFTRUE 45944
45942: GO 45962
45944: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45945: LD_ADDR_VAR 0 3
45949: PUSH
45950: LD_INT 4
45952: PUSH
45953: LD_INT 5
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: ST_TO_ADDR
45960: GO 46659
45962: LD_INT 6
45964: DOUBLE
45965: EQUAL
45966: IFTRUE 45970
45968: GO 45988
45970: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45971: LD_ADDR_VAR 0 3
45975: PUSH
45976: LD_INT 4
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: ST_TO_ADDR
45986: GO 46659
45988: LD_INT 10
45990: DOUBLE
45991: EQUAL
45992: IFTRUE 45996
45994: GO 46014
45996: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45997: LD_ADDR_VAR 0 3
46001: PUSH
46002: LD_INT 4
46004: PUSH
46005: LD_INT 5
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: ST_TO_ADDR
46012: GO 46659
46014: LD_INT 22
46016: DOUBLE
46017: EQUAL
46018: IFTRUE 46022
46020: GO 46048
46022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46023: LD_ADDR_VAR 0 3
46027: PUSH
46028: LD_INT 11
46030: PUSH
46031: LD_INT 12
46033: PUSH
46034: LD_INT 13
46036: PUSH
46037: LD_INT 14
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
46046: GO 46659
46048: LD_INT 23
46050: DOUBLE
46051: EQUAL
46052: IFTRUE 46056
46054: GO 46082
46056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46057: LD_ADDR_VAR 0 3
46061: PUSH
46062: LD_INT 11
46064: PUSH
46065: LD_INT 12
46067: PUSH
46068: LD_INT 13
46070: PUSH
46071: LD_INT 14
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
46080: GO 46659
46082: LD_INT 24
46084: DOUBLE
46085: EQUAL
46086: IFTRUE 46090
46088: GO 46116
46090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46091: LD_ADDR_VAR 0 3
46095: PUSH
46096: LD_INT 11
46098: PUSH
46099: LD_INT 12
46101: PUSH
46102: LD_INT 13
46104: PUSH
46105: LD_INT 14
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
46114: GO 46659
46116: LD_INT 30
46118: DOUBLE
46119: EQUAL
46120: IFTRUE 46124
46122: GO 46150
46124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46125: LD_ADDR_VAR 0 3
46129: PUSH
46130: LD_INT 11
46132: PUSH
46133: LD_INT 12
46135: PUSH
46136: LD_INT 13
46138: PUSH
46139: LD_INT 14
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
46148: GO 46659
46150: LD_INT 25
46152: DOUBLE
46153: EQUAL
46154: IFTRUE 46158
46156: GO 46176
46158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46159: LD_ADDR_VAR 0 3
46163: PUSH
46164: LD_INT 13
46166: PUSH
46167: LD_INT 14
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: ST_TO_ADDR
46174: GO 46659
46176: LD_INT 27
46178: DOUBLE
46179: EQUAL
46180: IFTRUE 46184
46182: GO 46202
46184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46185: LD_ADDR_VAR 0 3
46189: PUSH
46190: LD_INT 13
46192: PUSH
46193: LD_INT 14
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: ST_TO_ADDR
46200: GO 46659
46202: LD_EXP 126
46206: DOUBLE
46207: EQUAL
46208: IFTRUE 46212
46210: GO 46238
46212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46213: LD_ADDR_VAR 0 3
46217: PUSH
46218: LD_INT 11
46220: PUSH
46221: LD_INT 12
46223: PUSH
46224: LD_INT 13
46226: PUSH
46227: LD_INT 14
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
46236: GO 46659
46238: LD_INT 28
46240: DOUBLE
46241: EQUAL
46242: IFTRUE 46246
46244: GO 46264
46246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46247: LD_ADDR_VAR 0 3
46251: PUSH
46252: LD_INT 13
46254: PUSH
46255: LD_INT 14
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: ST_TO_ADDR
46262: GO 46659
46264: LD_INT 29
46266: DOUBLE
46267: EQUAL
46268: IFTRUE 46272
46270: GO 46290
46272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46273: LD_ADDR_VAR 0 3
46277: PUSH
46278: LD_INT 13
46280: PUSH
46281: LD_INT 14
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: ST_TO_ADDR
46288: GO 46659
46290: LD_INT 31
46292: DOUBLE
46293: EQUAL
46294: IFTRUE 46298
46296: GO 46316
46298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46299: LD_ADDR_VAR 0 3
46303: PUSH
46304: LD_INT 13
46306: PUSH
46307: LD_INT 14
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: ST_TO_ADDR
46314: GO 46659
46316: LD_INT 26
46318: DOUBLE
46319: EQUAL
46320: IFTRUE 46324
46322: GO 46342
46324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46325: LD_ADDR_VAR 0 3
46329: PUSH
46330: LD_INT 13
46332: PUSH
46333: LD_INT 14
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: ST_TO_ADDR
46340: GO 46659
46342: LD_INT 42
46344: DOUBLE
46345: EQUAL
46346: IFTRUE 46350
46348: GO 46376
46350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46351: LD_ADDR_VAR 0 3
46355: PUSH
46356: LD_INT 21
46358: PUSH
46359: LD_INT 22
46361: PUSH
46362: LD_INT 23
46364: PUSH
46365: LD_INT 24
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: ST_TO_ADDR
46374: GO 46659
46376: LD_INT 43
46378: DOUBLE
46379: EQUAL
46380: IFTRUE 46384
46382: GO 46410
46384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46385: LD_ADDR_VAR 0 3
46389: PUSH
46390: LD_INT 21
46392: PUSH
46393: LD_INT 22
46395: PUSH
46396: LD_INT 23
46398: PUSH
46399: LD_INT 24
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
46408: GO 46659
46410: LD_INT 44
46412: DOUBLE
46413: EQUAL
46414: IFTRUE 46418
46416: GO 46444
46418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46419: LD_ADDR_VAR 0 3
46423: PUSH
46424: LD_INT 21
46426: PUSH
46427: LD_INT 22
46429: PUSH
46430: LD_INT 23
46432: PUSH
46433: LD_INT 24
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
46442: GO 46659
46444: LD_INT 45
46446: DOUBLE
46447: EQUAL
46448: IFTRUE 46452
46450: GO 46478
46452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46453: LD_ADDR_VAR 0 3
46457: PUSH
46458: LD_INT 21
46460: PUSH
46461: LD_INT 22
46463: PUSH
46464: LD_INT 23
46466: PUSH
46467: LD_INT 24
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
46476: GO 46659
46478: LD_INT 49
46480: DOUBLE
46481: EQUAL
46482: IFTRUE 46486
46484: GO 46512
46486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46487: LD_ADDR_VAR 0 3
46491: PUSH
46492: LD_INT 21
46494: PUSH
46495: LD_INT 22
46497: PUSH
46498: LD_INT 23
46500: PUSH
46501: LD_INT 24
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
46510: GO 46659
46512: LD_INT 51
46514: DOUBLE
46515: EQUAL
46516: IFTRUE 46520
46518: GO 46546
46520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46521: LD_ADDR_VAR 0 3
46525: PUSH
46526: LD_INT 21
46528: PUSH
46529: LD_INT 22
46531: PUSH
46532: LD_INT 23
46534: PUSH
46535: LD_INT 24
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: ST_TO_ADDR
46544: GO 46659
46546: LD_INT 52
46548: DOUBLE
46549: EQUAL
46550: IFTRUE 46554
46552: GO 46580
46554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46555: LD_ADDR_VAR 0 3
46559: PUSH
46560: LD_INT 21
46562: PUSH
46563: LD_INT 22
46565: PUSH
46566: LD_INT 23
46568: PUSH
46569: LD_INT 24
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
46578: GO 46659
46580: LD_INT 53
46582: DOUBLE
46583: EQUAL
46584: IFTRUE 46588
46586: GO 46606
46588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46589: LD_ADDR_VAR 0 3
46593: PUSH
46594: LD_INT 23
46596: PUSH
46597: LD_INT 24
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: ST_TO_ADDR
46604: GO 46659
46606: LD_INT 46
46608: DOUBLE
46609: EQUAL
46610: IFTRUE 46614
46612: GO 46632
46614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46615: LD_ADDR_VAR 0 3
46619: PUSH
46620: LD_INT 23
46622: PUSH
46623: LD_INT 24
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: ST_TO_ADDR
46630: GO 46659
46632: LD_INT 47
46634: DOUBLE
46635: EQUAL
46636: IFTRUE 46640
46638: GO 46658
46640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46641: LD_ADDR_VAR 0 3
46645: PUSH
46646: LD_INT 23
46648: PUSH
46649: LD_INT 24
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: ST_TO_ADDR
46656: GO 46659
46658: POP
// result := ( chassis in result ) ;
46659: LD_ADDR_VAR 0 3
46663: PUSH
46664: LD_VAR 0 1
46668: PUSH
46669: LD_VAR 0 3
46673: IN
46674: ST_TO_ADDR
// end ;
46675: LD_VAR 0 3
46679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46680: LD_INT 0
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
// result := array ;
46689: LD_ADDR_VAR 0 5
46693: PUSH
46694: LD_VAR 0 1
46698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46699: LD_VAR 0 1
46703: NOT
46704: PUSH
46705: LD_VAR 0 2
46709: NOT
46710: OR
46711: PUSH
46712: LD_VAR 0 3
46716: NOT
46717: OR
46718: PUSH
46719: LD_VAR 0 2
46723: PUSH
46724: LD_VAR 0 1
46728: GREATER
46729: OR
46730: PUSH
46731: LD_VAR 0 3
46735: PUSH
46736: LD_VAR 0 1
46740: GREATER
46741: OR
46742: IFFALSE 46746
// exit ;
46744: GO 47042
// if direction then
46746: LD_VAR 0 4
46750: IFFALSE 46814
// begin d := 1 ;
46752: LD_ADDR_VAR 0 9
46756: PUSH
46757: LD_INT 1
46759: ST_TO_ADDR
// if i_from > i_to then
46760: LD_VAR 0 2
46764: PUSH
46765: LD_VAR 0 3
46769: GREATER
46770: IFFALSE 46796
// length := ( array - i_from ) + i_to else
46772: LD_ADDR_VAR 0 11
46776: PUSH
46777: LD_VAR 0 1
46781: PUSH
46782: LD_VAR 0 2
46786: MINUS
46787: PUSH
46788: LD_VAR 0 3
46792: PLUS
46793: ST_TO_ADDR
46794: GO 46812
// length := i_to - i_from ;
46796: LD_ADDR_VAR 0 11
46800: PUSH
46801: LD_VAR 0 3
46805: PUSH
46806: LD_VAR 0 2
46810: MINUS
46811: ST_TO_ADDR
// end else
46812: GO 46875
// begin d := - 1 ;
46814: LD_ADDR_VAR 0 9
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: ST_TO_ADDR
// if i_from > i_to then
46823: LD_VAR 0 2
46827: PUSH
46828: LD_VAR 0 3
46832: GREATER
46833: IFFALSE 46853
// length := i_from - i_to else
46835: LD_ADDR_VAR 0 11
46839: PUSH
46840: LD_VAR 0 2
46844: PUSH
46845: LD_VAR 0 3
46849: MINUS
46850: ST_TO_ADDR
46851: GO 46875
// length := ( array - i_to ) + i_from ;
46853: LD_ADDR_VAR 0 11
46857: PUSH
46858: LD_VAR 0 1
46862: PUSH
46863: LD_VAR 0 3
46867: MINUS
46868: PUSH
46869: LD_VAR 0 2
46873: PLUS
46874: ST_TO_ADDR
// end ; if not length then
46875: LD_VAR 0 11
46879: NOT
46880: IFFALSE 46884
// exit ;
46882: GO 47042
// tmp := array ;
46884: LD_ADDR_VAR 0 10
46888: PUSH
46889: LD_VAR 0 1
46893: ST_TO_ADDR
// for i = 1 to length do
46894: LD_ADDR_VAR 0 6
46898: PUSH
46899: DOUBLE
46900: LD_INT 1
46902: DEC
46903: ST_TO_ADDR
46904: LD_VAR 0 11
46908: PUSH
46909: FOR_TO
46910: IFFALSE 47030
// begin for j = 1 to array do
46912: LD_ADDR_VAR 0 7
46916: PUSH
46917: DOUBLE
46918: LD_INT 1
46920: DEC
46921: ST_TO_ADDR
46922: LD_VAR 0 1
46926: PUSH
46927: FOR_TO
46928: IFFALSE 47016
// begin k := j + d ;
46930: LD_ADDR_VAR 0 8
46934: PUSH
46935: LD_VAR 0 7
46939: PUSH
46940: LD_VAR 0 9
46944: PLUS
46945: ST_TO_ADDR
// if k > array then
46946: LD_VAR 0 8
46950: PUSH
46951: LD_VAR 0 1
46955: GREATER
46956: IFFALSE 46966
// k := 1 ;
46958: LD_ADDR_VAR 0 8
46962: PUSH
46963: LD_INT 1
46965: ST_TO_ADDR
// if not k then
46966: LD_VAR 0 8
46970: NOT
46971: IFFALSE 46983
// k := array ;
46973: LD_ADDR_VAR 0 8
46977: PUSH
46978: LD_VAR 0 1
46982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46983: LD_ADDR_VAR 0 10
46987: PUSH
46988: LD_VAR 0 10
46992: PPUSH
46993: LD_VAR 0 8
46997: PPUSH
46998: LD_VAR 0 1
47002: PUSH
47003: LD_VAR 0 7
47007: ARRAY
47008: PPUSH
47009: CALL_OW 1
47013: ST_TO_ADDR
// end ;
47014: GO 46927
47016: POP
47017: POP
// array := tmp ;
47018: LD_ADDR_VAR 0 1
47022: PUSH
47023: LD_VAR 0 10
47027: ST_TO_ADDR
// end ;
47028: GO 46909
47030: POP
47031: POP
// result := array ;
47032: LD_ADDR_VAR 0 5
47036: PUSH
47037: LD_VAR 0 1
47041: ST_TO_ADDR
// end ;
47042: LD_VAR 0 5
47046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47047: LD_INT 0
47049: PPUSH
47050: PPUSH
// result := 0 ;
47051: LD_ADDR_VAR 0 3
47055: PUSH
47056: LD_INT 0
47058: ST_TO_ADDR
// if not array or not value in array then
47059: LD_VAR 0 1
47063: NOT
47064: PUSH
47065: LD_VAR 0 2
47069: PUSH
47070: LD_VAR 0 1
47074: IN
47075: NOT
47076: OR
47077: IFFALSE 47081
// exit ;
47079: GO 47135
// for i = 1 to array do
47081: LD_ADDR_VAR 0 4
47085: PUSH
47086: DOUBLE
47087: LD_INT 1
47089: DEC
47090: ST_TO_ADDR
47091: LD_VAR 0 1
47095: PUSH
47096: FOR_TO
47097: IFFALSE 47133
// if value = array [ i ] then
47099: LD_VAR 0 2
47103: PUSH
47104: LD_VAR 0 1
47108: PUSH
47109: LD_VAR 0 4
47113: ARRAY
47114: EQUAL
47115: IFFALSE 47131
// begin result := i ;
47117: LD_ADDR_VAR 0 3
47121: PUSH
47122: LD_VAR 0 4
47126: ST_TO_ADDR
// exit ;
47127: POP
47128: POP
47129: GO 47135
// end ;
47131: GO 47096
47133: POP
47134: POP
// end ;
47135: LD_VAR 0 3
47139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47140: LD_INT 0
47142: PPUSH
// vc_chassis := chassis ;
47143: LD_ADDR_OWVAR 37
47147: PUSH
47148: LD_VAR 0 1
47152: ST_TO_ADDR
// vc_engine := engine ;
47153: LD_ADDR_OWVAR 39
47157: PUSH
47158: LD_VAR 0 2
47162: ST_TO_ADDR
// vc_control := control ;
47163: LD_ADDR_OWVAR 38
47167: PUSH
47168: LD_VAR 0 3
47172: ST_TO_ADDR
// vc_weapon := weapon ;
47173: LD_ADDR_OWVAR 40
47177: PUSH
47178: LD_VAR 0 4
47182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47183: LD_ADDR_OWVAR 41
47187: PUSH
47188: LD_VAR 0 5
47192: ST_TO_ADDR
// end ;
47193: LD_VAR 0 6
47197: RET
// export function WantPlant ( unit ) ; var task ; begin
47198: LD_INT 0
47200: PPUSH
47201: PPUSH
// result := false ;
47202: LD_ADDR_VAR 0 2
47206: PUSH
47207: LD_INT 0
47209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47210: LD_ADDR_VAR 0 3
47214: PUSH
47215: LD_VAR 0 1
47219: PPUSH
47220: CALL_OW 437
47224: ST_TO_ADDR
// if task then
47225: LD_VAR 0 3
47229: IFFALSE 47257
// if task [ 1 ] [ 1 ] = p then
47231: LD_VAR 0 3
47235: PUSH
47236: LD_INT 1
47238: ARRAY
47239: PUSH
47240: LD_INT 1
47242: ARRAY
47243: PUSH
47244: LD_STRING p
47246: EQUAL
47247: IFFALSE 47257
// result := true ;
47249: LD_ADDR_VAR 0 2
47253: PUSH
47254: LD_INT 1
47256: ST_TO_ADDR
// end ;
47257: LD_VAR 0 2
47261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47262: LD_INT 0
47264: PPUSH
47265: PPUSH
47266: PPUSH
47267: PPUSH
// if pos < 1 then
47268: LD_VAR 0 2
47272: PUSH
47273: LD_INT 1
47275: LESS
47276: IFFALSE 47280
// exit ;
47278: GO 47583
// if pos = 1 then
47280: LD_VAR 0 2
47284: PUSH
47285: LD_INT 1
47287: EQUAL
47288: IFFALSE 47321
// result := Replace ( arr , pos [ 1 ] , value ) else
47290: LD_ADDR_VAR 0 4
47294: PUSH
47295: LD_VAR 0 1
47299: PPUSH
47300: LD_VAR 0 2
47304: PUSH
47305: LD_INT 1
47307: ARRAY
47308: PPUSH
47309: LD_VAR 0 3
47313: PPUSH
47314: CALL_OW 1
47318: ST_TO_ADDR
47319: GO 47583
// begin tmp := arr ;
47321: LD_ADDR_VAR 0 6
47325: PUSH
47326: LD_VAR 0 1
47330: ST_TO_ADDR
// s_arr := [ tmp ] ;
47331: LD_ADDR_VAR 0 7
47335: PUSH
47336: LD_VAR 0 6
47340: PUSH
47341: EMPTY
47342: LIST
47343: ST_TO_ADDR
// for i = 1 to pos - 1 do
47344: LD_ADDR_VAR 0 5
47348: PUSH
47349: DOUBLE
47350: LD_INT 1
47352: DEC
47353: ST_TO_ADDR
47354: LD_VAR 0 2
47358: PUSH
47359: LD_INT 1
47361: MINUS
47362: PUSH
47363: FOR_TO
47364: IFFALSE 47409
// begin tmp := tmp [ pos [ i ] ] ;
47366: LD_ADDR_VAR 0 6
47370: PUSH
47371: LD_VAR 0 6
47375: PUSH
47376: LD_VAR 0 2
47380: PUSH
47381: LD_VAR 0 5
47385: ARRAY
47386: ARRAY
47387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47388: LD_ADDR_VAR 0 7
47392: PUSH
47393: LD_VAR 0 7
47397: PUSH
47398: LD_VAR 0 6
47402: PUSH
47403: EMPTY
47404: LIST
47405: ADD
47406: ST_TO_ADDR
// end ;
47407: GO 47363
47409: POP
47410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47411: LD_ADDR_VAR 0 6
47415: PUSH
47416: LD_VAR 0 6
47420: PPUSH
47421: LD_VAR 0 2
47425: PUSH
47426: LD_VAR 0 2
47430: ARRAY
47431: PPUSH
47432: LD_VAR 0 3
47436: PPUSH
47437: CALL_OW 1
47441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47442: LD_ADDR_VAR 0 7
47446: PUSH
47447: LD_VAR 0 7
47451: PPUSH
47452: LD_VAR 0 7
47456: PPUSH
47457: LD_VAR 0 6
47461: PPUSH
47462: CALL_OW 1
47466: ST_TO_ADDR
// for i = s_arr downto 2 do
47467: LD_ADDR_VAR 0 5
47471: PUSH
47472: DOUBLE
47473: LD_VAR 0 7
47477: INC
47478: ST_TO_ADDR
47479: LD_INT 2
47481: PUSH
47482: FOR_DOWNTO
47483: IFFALSE 47567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47485: LD_ADDR_VAR 0 6
47489: PUSH
47490: LD_VAR 0 7
47494: PUSH
47495: LD_VAR 0 5
47499: PUSH
47500: LD_INT 1
47502: MINUS
47503: ARRAY
47504: PPUSH
47505: LD_VAR 0 2
47509: PUSH
47510: LD_VAR 0 5
47514: PUSH
47515: LD_INT 1
47517: MINUS
47518: ARRAY
47519: PPUSH
47520: LD_VAR 0 7
47524: PUSH
47525: LD_VAR 0 5
47529: ARRAY
47530: PPUSH
47531: CALL_OW 1
47535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47536: LD_ADDR_VAR 0 7
47540: PUSH
47541: LD_VAR 0 7
47545: PPUSH
47546: LD_VAR 0 5
47550: PUSH
47551: LD_INT 1
47553: MINUS
47554: PPUSH
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 1
47564: ST_TO_ADDR
// end ;
47565: GO 47482
47567: POP
47568: POP
// result := s_arr [ 1 ] ;
47569: LD_ADDR_VAR 0 4
47573: PUSH
47574: LD_VAR 0 7
47578: PUSH
47579: LD_INT 1
47581: ARRAY
47582: ST_TO_ADDR
// end ; end ;
47583: LD_VAR 0 4
47587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47588: LD_INT 0
47590: PPUSH
47591: PPUSH
// if not list then
47592: LD_VAR 0 1
47596: NOT
47597: IFFALSE 47601
// exit ;
47599: GO 47692
// i := list [ pos1 ] ;
47601: LD_ADDR_VAR 0 5
47605: PUSH
47606: LD_VAR 0 1
47610: PUSH
47611: LD_VAR 0 2
47615: ARRAY
47616: ST_TO_ADDR
// if not i then
47617: LD_VAR 0 5
47621: NOT
47622: IFFALSE 47626
// exit ;
47624: GO 47692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47626: LD_ADDR_VAR 0 1
47630: PUSH
47631: LD_VAR 0 1
47635: PPUSH
47636: LD_VAR 0 2
47640: PPUSH
47641: LD_VAR 0 1
47645: PUSH
47646: LD_VAR 0 3
47650: ARRAY
47651: PPUSH
47652: CALL_OW 1
47656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47657: LD_ADDR_VAR 0 1
47661: PUSH
47662: LD_VAR 0 1
47666: PPUSH
47667: LD_VAR 0 3
47671: PPUSH
47672: LD_VAR 0 5
47676: PPUSH
47677: CALL_OW 1
47681: ST_TO_ADDR
// result := list ;
47682: LD_ADDR_VAR 0 4
47686: PUSH
47687: LD_VAR 0 1
47691: ST_TO_ADDR
// end ;
47692: LD_VAR 0 4
47696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47697: LD_INT 0
47699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47700: LD_ADDR_VAR 0 5
47704: PUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: CALL_OW 250
47714: PPUSH
47715: LD_VAR 0 1
47719: PPUSH
47720: CALL_OW 251
47724: PPUSH
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_VAR 0 3
47734: PPUSH
47735: LD_VAR 0 4
47739: PPUSH
47740: CALL 47750 0 5
47744: ST_TO_ADDR
// end ;
47745: LD_VAR 0 5
47749: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47750: LD_INT 0
47752: PPUSH
47753: PPUSH
47754: PPUSH
47755: PPUSH
// if not list then
47756: LD_VAR 0 3
47760: NOT
47761: IFFALSE 47765
// exit ;
47763: GO 48153
// result := [ ] ;
47765: LD_ADDR_VAR 0 6
47769: PUSH
47770: EMPTY
47771: ST_TO_ADDR
// for i in list do
47772: LD_ADDR_VAR 0 7
47776: PUSH
47777: LD_VAR 0 3
47781: PUSH
47782: FOR_IN
47783: IFFALSE 47985
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47785: LD_ADDR_VAR 0 9
47789: PUSH
47790: LD_VAR 0 7
47794: PPUSH
47795: LD_VAR 0 1
47799: PPUSH
47800: LD_VAR 0 2
47804: PPUSH
47805: CALL_OW 297
47809: ST_TO_ADDR
// if not result then
47810: LD_VAR 0 6
47814: NOT
47815: IFFALSE 47841
// result := [ [ i , tmp ] ] else
47817: LD_ADDR_VAR 0 6
47821: PUSH
47822: LD_VAR 0 7
47826: PUSH
47827: LD_VAR 0 9
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: ST_TO_ADDR
47839: GO 47983
// begin if result [ result ] [ 2 ] < tmp then
47841: LD_VAR 0 6
47845: PUSH
47846: LD_VAR 0 6
47850: ARRAY
47851: PUSH
47852: LD_INT 2
47854: ARRAY
47855: PUSH
47856: LD_VAR 0 9
47860: LESS
47861: IFFALSE 47903
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47863: LD_ADDR_VAR 0 6
47867: PUSH
47868: LD_VAR 0 6
47872: PPUSH
47873: LD_VAR 0 6
47877: PUSH
47878: LD_INT 1
47880: PLUS
47881: PPUSH
47882: LD_VAR 0 7
47886: PUSH
47887: LD_VAR 0 9
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PPUSH
47896: CALL_OW 2
47900: ST_TO_ADDR
47901: GO 47983
// for j = 1 to result do
47903: LD_ADDR_VAR 0 8
47907: PUSH
47908: DOUBLE
47909: LD_INT 1
47911: DEC
47912: ST_TO_ADDR
47913: LD_VAR 0 6
47917: PUSH
47918: FOR_TO
47919: IFFALSE 47981
// begin if tmp < result [ j ] [ 2 ] then
47921: LD_VAR 0 9
47925: PUSH
47926: LD_VAR 0 6
47930: PUSH
47931: LD_VAR 0 8
47935: ARRAY
47936: PUSH
47937: LD_INT 2
47939: ARRAY
47940: LESS
47941: IFFALSE 47979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47943: LD_ADDR_VAR 0 6
47947: PUSH
47948: LD_VAR 0 6
47952: PPUSH
47953: LD_VAR 0 8
47957: PPUSH
47958: LD_VAR 0 7
47962: PUSH
47963: LD_VAR 0 9
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PPUSH
47972: CALL_OW 2
47976: ST_TO_ADDR
// break ;
47977: GO 47981
// end ; end ;
47979: GO 47918
47981: POP
47982: POP
// end ; end ;
47983: GO 47782
47985: POP
47986: POP
// if result and not asc then
47987: LD_VAR 0 6
47991: PUSH
47992: LD_VAR 0 4
47996: NOT
47997: AND
47998: IFFALSE 48073
// begin tmp := result ;
48000: LD_ADDR_VAR 0 9
48004: PUSH
48005: LD_VAR 0 6
48009: ST_TO_ADDR
// for i = tmp downto 1 do
48010: LD_ADDR_VAR 0 7
48014: PUSH
48015: DOUBLE
48016: LD_VAR 0 9
48020: INC
48021: ST_TO_ADDR
48022: LD_INT 1
48024: PUSH
48025: FOR_DOWNTO
48026: IFFALSE 48071
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48028: LD_ADDR_VAR 0 6
48032: PUSH
48033: LD_VAR 0 6
48037: PPUSH
48038: LD_VAR 0 9
48042: PUSH
48043: LD_VAR 0 7
48047: MINUS
48048: PUSH
48049: LD_INT 1
48051: PLUS
48052: PPUSH
48053: LD_VAR 0 9
48057: PUSH
48058: LD_VAR 0 7
48062: ARRAY
48063: PPUSH
48064: CALL_OW 1
48068: ST_TO_ADDR
48069: GO 48025
48071: POP
48072: POP
// end ; tmp := [ ] ;
48073: LD_ADDR_VAR 0 9
48077: PUSH
48078: EMPTY
48079: ST_TO_ADDR
// if mode then
48080: LD_VAR 0 5
48084: IFFALSE 48153
// begin for i = 1 to result do
48086: LD_ADDR_VAR 0 7
48090: PUSH
48091: DOUBLE
48092: LD_INT 1
48094: DEC
48095: ST_TO_ADDR
48096: LD_VAR 0 6
48100: PUSH
48101: FOR_TO
48102: IFFALSE 48141
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48104: LD_ADDR_VAR 0 9
48108: PUSH
48109: LD_VAR 0 9
48113: PPUSH
48114: LD_VAR 0 7
48118: PPUSH
48119: LD_VAR 0 6
48123: PUSH
48124: LD_VAR 0 7
48128: ARRAY
48129: PUSH
48130: LD_INT 1
48132: ARRAY
48133: PPUSH
48134: CALL_OW 1
48138: ST_TO_ADDR
48139: GO 48101
48141: POP
48142: POP
// result := tmp ;
48143: LD_ADDR_VAR 0 6
48147: PUSH
48148: LD_VAR 0 9
48152: ST_TO_ADDR
// end ; end ;
48153: LD_VAR 0 6
48157: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48158: LD_INT 0
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48166: LD_ADDR_VAR 0 5
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: ST_TO_ADDR
// if not x or not y then
48188: LD_VAR 0 2
48192: NOT
48193: PUSH
48194: LD_VAR 0 3
48198: NOT
48199: OR
48200: IFFALSE 48204
// exit ;
48202: GO 49856
// if not range then
48204: LD_VAR 0 4
48208: NOT
48209: IFFALSE 48219
// range := 10 ;
48211: LD_ADDR_VAR 0 4
48215: PUSH
48216: LD_INT 10
48218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48219: LD_ADDR_VAR 0 8
48223: PUSH
48224: LD_INT 81
48226: PUSH
48227: LD_VAR 0 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 92
48238: PUSH
48239: LD_VAR 0 2
48243: PUSH
48244: LD_VAR 0 3
48248: PUSH
48249: LD_VAR 0 4
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: LD_INT 21
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: PPUSH
48282: CALL_OW 69
48286: ST_TO_ADDR
// if not tmp then
48287: LD_VAR 0 8
48291: NOT
48292: IFFALSE 48296
// exit ;
48294: GO 49856
// for i in tmp do
48296: LD_ADDR_VAR 0 6
48300: PUSH
48301: LD_VAR 0 8
48305: PUSH
48306: FOR_IN
48307: IFFALSE 49831
// begin points := [ 0 , 0 , 0 ] ;
48309: LD_ADDR_VAR 0 9
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// bpoints := 1 ;
48328: LD_ADDR_VAR 0 10
48332: PUSH
48333: LD_INT 1
48335: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48336: LD_VAR 0 6
48340: PPUSH
48341: CALL_OW 247
48345: PUSH
48346: LD_INT 1
48348: DOUBLE
48349: EQUAL
48350: IFTRUE 48354
48352: GO 48932
48354: POP
// begin if GetClass ( i ) = 1 then
48355: LD_VAR 0 6
48359: PPUSH
48360: CALL_OW 257
48364: PUSH
48365: LD_INT 1
48367: EQUAL
48368: IFFALSE 48389
// points := [ 10 , 5 , 3 ] ;
48370: LD_ADDR_VAR 0 9
48374: PUSH
48375: LD_INT 10
48377: PUSH
48378: LD_INT 5
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48389: LD_VAR 0 6
48393: PPUSH
48394: CALL_OW 257
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 3
48404: PUSH
48405: LD_INT 4
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: IN
48413: IFFALSE 48434
// points := [ 3 , 2 , 1 ] ;
48415: LD_ADDR_VAR 0 9
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48434: LD_VAR 0 6
48438: PPUSH
48439: CALL_OW 257
48443: PUSH
48444: LD_INT 5
48446: EQUAL
48447: IFFALSE 48468
// points := [ 130 , 5 , 2 ] ;
48449: LD_ADDR_VAR 0 9
48453: PUSH
48454: LD_INT 130
48456: PUSH
48457: LD_INT 5
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48468: LD_VAR 0 6
48472: PPUSH
48473: CALL_OW 257
48477: PUSH
48478: LD_INT 8
48480: EQUAL
48481: IFFALSE 48502
// points := [ 35 , 35 , 30 ] ;
48483: LD_ADDR_VAR 0 9
48487: PUSH
48488: LD_INT 35
48490: PUSH
48491: LD_INT 35
48493: PUSH
48494: LD_INT 30
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48502: LD_VAR 0 6
48506: PPUSH
48507: CALL_OW 257
48511: PUSH
48512: LD_INT 9
48514: EQUAL
48515: IFFALSE 48536
// points := [ 20 , 55 , 40 ] ;
48517: LD_ADDR_VAR 0 9
48521: PUSH
48522: LD_INT 20
48524: PUSH
48525: LD_INT 55
48527: PUSH
48528: LD_INT 40
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48536: LD_VAR 0 6
48540: PPUSH
48541: CALL_OW 257
48545: PUSH
48546: LD_INT 12
48548: PUSH
48549: LD_INT 16
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: IN
48556: IFFALSE 48577
// points := [ 5 , 3 , 2 ] ;
48558: LD_ADDR_VAR 0 9
48562: PUSH
48563: LD_INT 5
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48577: LD_VAR 0 6
48581: PPUSH
48582: CALL_OW 257
48586: PUSH
48587: LD_INT 17
48589: EQUAL
48590: IFFALSE 48611
// points := [ 100 , 50 , 75 ] ;
48592: LD_ADDR_VAR 0 9
48596: PUSH
48597: LD_INT 100
48599: PUSH
48600: LD_INT 50
48602: PUSH
48603: LD_INT 75
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48611: LD_VAR 0 6
48615: PPUSH
48616: CALL_OW 257
48620: PUSH
48621: LD_INT 15
48623: EQUAL
48624: IFFALSE 48645
// points := [ 10 , 5 , 3 ] ;
48626: LD_ADDR_VAR 0 9
48630: PUSH
48631: LD_INT 10
48633: PUSH
48634: LD_INT 5
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48645: LD_VAR 0 6
48649: PPUSH
48650: CALL_OW 257
48654: PUSH
48655: LD_INT 14
48657: EQUAL
48658: IFFALSE 48679
// points := [ 10 , 0 , 0 ] ;
48660: LD_ADDR_VAR 0 9
48664: PUSH
48665: LD_INT 10
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48679: LD_VAR 0 6
48683: PPUSH
48684: CALL_OW 257
48688: PUSH
48689: LD_INT 11
48691: EQUAL
48692: IFFALSE 48713
// points := [ 30 , 10 , 5 ] ;
48694: LD_ADDR_VAR 0 9
48698: PUSH
48699: LD_INT 30
48701: PUSH
48702: LD_INT 10
48704: PUSH
48705: LD_INT 5
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48713: LD_VAR 0 1
48717: PPUSH
48718: LD_INT 5
48720: PPUSH
48721: CALL_OW 321
48725: PUSH
48726: LD_INT 2
48728: EQUAL
48729: IFFALSE 48746
// bpoints := bpoints * 1.8 ;
48731: LD_ADDR_VAR 0 10
48735: PUSH
48736: LD_VAR 0 10
48740: PUSH
48741: LD_REAL  1.80000000000000E+0000
48744: MUL
48745: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48746: LD_VAR 0 6
48750: PPUSH
48751: CALL_OW 257
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: LD_INT 4
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: IN
48774: PUSH
48775: LD_VAR 0 1
48779: PPUSH
48780: LD_INT 51
48782: PPUSH
48783: CALL_OW 321
48787: PUSH
48788: LD_INT 2
48790: EQUAL
48791: AND
48792: IFFALSE 48809
// bpoints := bpoints * 1.2 ;
48794: LD_ADDR_VAR 0 10
48798: PUSH
48799: LD_VAR 0 10
48803: PUSH
48804: LD_REAL  1.20000000000000E+0000
48807: MUL
48808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48809: LD_VAR 0 6
48813: PPUSH
48814: CALL_OW 257
48818: PUSH
48819: LD_INT 5
48821: PUSH
48822: LD_INT 7
48824: PUSH
48825: LD_INT 9
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: IN
48833: PUSH
48834: LD_VAR 0 1
48838: PPUSH
48839: LD_INT 52
48841: PPUSH
48842: CALL_OW 321
48846: PUSH
48847: LD_INT 2
48849: EQUAL
48850: AND
48851: IFFALSE 48868
// bpoints := bpoints * 1.5 ;
48853: LD_ADDR_VAR 0 10
48857: PUSH
48858: LD_VAR 0 10
48862: PUSH
48863: LD_REAL  1.50000000000000E+0000
48866: MUL
48867: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48868: LD_VAR 0 1
48872: PPUSH
48873: LD_INT 66
48875: PPUSH
48876: CALL_OW 321
48880: PUSH
48881: LD_INT 2
48883: EQUAL
48884: IFFALSE 48901
// bpoints := bpoints * 1.1 ;
48886: LD_ADDR_VAR 0 10
48890: PUSH
48891: LD_VAR 0 10
48895: PUSH
48896: LD_REAL  1.10000000000000E+0000
48899: MUL
48900: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48901: LD_ADDR_VAR 0 10
48905: PUSH
48906: LD_VAR 0 10
48910: PUSH
48911: LD_VAR 0 6
48915: PPUSH
48916: LD_INT 1
48918: PPUSH
48919: CALL_OW 259
48923: PUSH
48924: LD_REAL  1.15000000000000E+0000
48927: MUL
48928: MUL
48929: ST_TO_ADDR
// end ; unit_vehicle :
48930: GO 49760
48932: LD_INT 2
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48940
48938: GO 49748
48940: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48941: LD_VAR 0 6
48945: PPUSH
48946: CALL_OW 264
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 42
48956: PUSH
48957: LD_INT 24
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: IN
48965: IFFALSE 48986
// points := [ 25 , 5 , 3 ] ;
48967: LD_ADDR_VAR 0 9
48971: PUSH
48972: LD_INT 25
48974: PUSH
48975: LD_INT 5
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48986: LD_VAR 0 6
48990: PPUSH
48991: CALL_OW 264
48995: PUSH
48996: LD_INT 4
48998: PUSH
48999: LD_INT 43
49001: PUSH
49002: LD_INT 25
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: IN
49010: IFFALSE 49031
// points := [ 40 , 15 , 5 ] ;
49012: LD_ADDR_VAR 0 9
49016: PUSH
49017: LD_INT 40
49019: PUSH
49020: LD_INT 15
49022: PUSH
49023: LD_INT 5
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: LIST
49030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49031: LD_VAR 0 6
49035: PPUSH
49036: CALL_OW 264
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: LD_INT 23
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: IN
49051: IFFALSE 49072
// points := [ 7 , 25 , 8 ] ;
49053: LD_ADDR_VAR 0 9
49057: PUSH
49058: LD_INT 7
49060: PUSH
49061: LD_INT 25
49063: PUSH
49064: LD_INT 8
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49072: LD_VAR 0 6
49076: PPUSH
49077: CALL_OW 264
49081: PUSH
49082: LD_INT 5
49084: PUSH
49085: LD_INT 27
49087: PUSH
49088: LD_INT 44
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: IN
49096: IFFALSE 49117
// points := [ 14 , 50 , 16 ] ;
49098: LD_ADDR_VAR 0 9
49102: PUSH
49103: LD_INT 14
49105: PUSH
49106: LD_INT 50
49108: PUSH
49109: LD_INT 16
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49117: LD_VAR 0 6
49121: PPUSH
49122: CALL_OW 264
49126: PUSH
49127: LD_INT 6
49129: PUSH
49130: LD_INT 46
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: IN
49137: IFFALSE 49158
// points := [ 32 , 120 , 70 ] ;
49139: LD_ADDR_VAR 0 9
49143: PUSH
49144: LD_INT 32
49146: PUSH
49147: LD_INT 120
49149: PUSH
49150: LD_INT 70
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49158: LD_VAR 0 6
49162: PPUSH
49163: CALL_OW 264
49167: PUSH
49168: LD_INT 7
49170: PUSH
49171: LD_INT 28
49173: PUSH
49174: LD_INT 45
49176: PUSH
49177: LD_EXP 126
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: IN
49188: IFFALSE 49209
// points := [ 35 , 20 , 45 ] ;
49190: LD_ADDR_VAR 0 9
49194: PUSH
49195: LD_INT 35
49197: PUSH
49198: LD_INT 20
49200: PUSH
49201: LD_INT 45
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49209: LD_VAR 0 6
49213: PPUSH
49214: CALL_OW 264
49218: PUSH
49219: LD_INT 47
49221: PUSH
49222: EMPTY
49223: LIST
49224: IN
49225: IFFALSE 49246
// points := [ 67 , 45 , 75 ] ;
49227: LD_ADDR_VAR 0 9
49231: PUSH
49232: LD_INT 67
49234: PUSH
49235: LD_INT 45
49237: PUSH
49238: LD_INT 75
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49246: LD_VAR 0 6
49250: PPUSH
49251: CALL_OW 264
49255: PUSH
49256: LD_INT 26
49258: PUSH
49259: EMPTY
49260: LIST
49261: IN
49262: IFFALSE 49283
// points := [ 120 , 30 , 80 ] ;
49264: LD_ADDR_VAR 0 9
49268: PUSH
49269: LD_INT 120
49271: PUSH
49272: LD_INT 30
49274: PUSH
49275: LD_INT 80
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49283: LD_VAR 0 6
49287: PPUSH
49288: CALL_OW 264
49292: PUSH
49293: LD_INT 22
49295: PUSH
49296: EMPTY
49297: LIST
49298: IN
49299: IFFALSE 49320
// points := [ 40 , 1 , 1 ] ;
49301: LD_ADDR_VAR 0 9
49305: PUSH
49306: LD_INT 40
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49320: LD_VAR 0 6
49324: PPUSH
49325: CALL_OW 264
49329: PUSH
49330: LD_INT 29
49332: PUSH
49333: EMPTY
49334: LIST
49335: IN
49336: IFFALSE 49357
// points := [ 70 , 200 , 400 ] ;
49338: LD_ADDR_VAR 0 9
49342: PUSH
49343: LD_INT 70
49345: PUSH
49346: LD_INT 200
49348: PUSH
49349: LD_INT 400
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49357: LD_VAR 0 6
49361: PPUSH
49362: CALL_OW 264
49366: PUSH
49367: LD_INT 14
49369: PUSH
49370: LD_INT 53
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: IN
49377: IFFALSE 49398
// points := [ 40 , 10 , 20 ] ;
49379: LD_ADDR_VAR 0 9
49383: PUSH
49384: LD_INT 40
49386: PUSH
49387: LD_INT 10
49389: PUSH
49390: LD_INT 20
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49398: LD_VAR 0 6
49402: PPUSH
49403: CALL_OW 264
49407: PUSH
49408: LD_INT 9
49410: PUSH
49411: EMPTY
49412: LIST
49413: IN
49414: IFFALSE 49435
// points := [ 5 , 70 , 20 ] ;
49416: LD_ADDR_VAR 0 9
49420: PUSH
49421: LD_INT 5
49423: PUSH
49424: LD_INT 70
49426: PUSH
49427: LD_INT 20
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49435: LD_VAR 0 6
49439: PPUSH
49440: CALL_OW 264
49444: PUSH
49445: LD_INT 10
49447: PUSH
49448: EMPTY
49449: LIST
49450: IN
49451: IFFALSE 49472
// points := [ 35 , 110 , 70 ] ;
49453: LD_ADDR_VAR 0 9
49457: PUSH
49458: LD_INT 35
49460: PUSH
49461: LD_INT 110
49463: PUSH
49464: LD_INT 70
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49472: LD_VAR 0 6
49476: PPUSH
49477: CALL_OW 265
49481: PUSH
49482: LD_INT 25
49484: EQUAL
49485: IFFALSE 49506
// points := [ 80 , 65 , 100 ] ;
49487: LD_ADDR_VAR 0 9
49491: PUSH
49492: LD_INT 80
49494: PUSH
49495: LD_INT 65
49497: PUSH
49498: LD_INT 100
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49506: LD_VAR 0 6
49510: PPUSH
49511: CALL_OW 263
49515: PUSH
49516: LD_INT 1
49518: EQUAL
49519: IFFALSE 49554
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49521: LD_ADDR_VAR 0 10
49525: PUSH
49526: LD_VAR 0 10
49530: PUSH
49531: LD_VAR 0 6
49535: PPUSH
49536: CALL_OW 311
49540: PPUSH
49541: LD_INT 3
49543: PPUSH
49544: CALL_OW 259
49548: PUSH
49549: LD_INT 4
49551: MUL
49552: MUL
49553: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49554: LD_VAR 0 6
49558: PPUSH
49559: CALL_OW 263
49563: PUSH
49564: LD_INT 2
49566: EQUAL
49567: IFFALSE 49618
// begin j := IsControledBy ( i ) ;
49569: LD_ADDR_VAR 0 7
49573: PUSH
49574: LD_VAR 0 6
49578: PPUSH
49579: CALL_OW 312
49583: ST_TO_ADDR
// if j then
49584: LD_VAR 0 7
49588: IFFALSE 49618
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49590: LD_ADDR_VAR 0 10
49594: PUSH
49595: LD_VAR 0 10
49599: PUSH
49600: LD_VAR 0 7
49604: PPUSH
49605: LD_INT 3
49607: PPUSH
49608: CALL_OW 259
49612: PUSH
49613: LD_INT 3
49615: MUL
49616: MUL
49617: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49618: LD_VAR 0 6
49622: PPUSH
49623: CALL_OW 264
49627: PUSH
49628: LD_INT 5
49630: PUSH
49631: LD_INT 6
49633: PUSH
49634: LD_INT 46
49636: PUSH
49637: LD_INT 44
49639: PUSH
49640: LD_INT 47
49642: PUSH
49643: LD_INT 45
49645: PUSH
49646: LD_INT 28
49648: PUSH
49649: LD_INT 7
49651: PUSH
49652: LD_INT 27
49654: PUSH
49655: LD_INT 29
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: IN
49670: PUSH
49671: LD_VAR 0 1
49675: PPUSH
49676: LD_INT 52
49678: PPUSH
49679: CALL_OW 321
49683: PUSH
49684: LD_INT 2
49686: EQUAL
49687: AND
49688: IFFALSE 49705
// bpoints := bpoints * 1.2 ;
49690: LD_ADDR_VAR 0 10
49694: PUSH
49695: LD_VAR 0 10
49699: PUSH
49700: LD_REAL  1.20000000000000E+0000
49703: MUL
49704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49705: LD_VAR 0 6
49709: PPUSH
49710: CALL_OW 264
49714: PUSH
49715: LD_INT 6
49717: PUSH
49718: LD_INT 46
49720: PUSH
49721: LD_INT 47
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: IN
49729: IFFALSE 49746
// bpoints := bpoints * 1.2 ;
49731: LD_ADDR_VAR 0 10
49735: PUSH
49736: LD_VAR 0 10
49740: PUSH
49741: LD_REAL  1.20000000000000E+0000
49744: MUL
49745: ST_TO_ADDR
// end ; unit_building :
49746: GO 49760
49748: LD_INT 3
49750: DOUBLE
49751: EQUAL
49752: IFTRUE 49756
49754: GO 49759
49756: POP
// ; end ;
49757: GO 49760
49759: POP
// for j = 1 to 3 do
49760: LD_ADDR_VAR 0 7
49764: PUSH
49765: DOUBLE
49766: LD_INT 1
49768: DEC
49769: ST_TO_ADDR
49770: LD_INT 3
49772: PUSH
49773: FOR_TO
49774: IFFALSE 49827
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49776: LD_ADDR_VAR 0 5
49780: PUSH
49781: LD_VAR 0 5
49785: PPUSH
49786: LD_VAR 0 7
49790: PPUSH
49791: LD_VAR 0 5
49795: PUSH
49796: LD_VAR 0 7
49800: ARRAY
49801: PUSH
49802: LD_VAR 0 9
49806: PUSH
49807: LD_VAR 0 7
49811: ARRAY
49812: PUSH
49813: LD_VAR 0 10
49817: MUL
49818: PLUS
49819: PPUSH
49820: CALL_OW 1
49824: ST_TO_ADDR
49825: GO 49773
49827: POP
49828: POP
// end ;
49829: GO 48306
49831: POP
49832: POP
// result := Replace ( result , 4 , tmp ) ;
49833: LD_ADDR_VAR 0 5
49837: PUSH
49838: LD_VAR 0 5
49842: PPUSH
49843: LD_INT 4
49845: PPUSH
49846: LD_VAR 0 8
49850: PPUSH
49851: CALL_OW 1
49855: ST_TO_ADDR
// end ;
49856: LD_VAR 0 5
49860: RET
// export function DangerAtRange ( unit , range ) ; begin
49861: LD_INT 0
49863: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49864: LD_ADDR_VAR 0 3
49868: PUSH
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL_OW 255
49878: PPUSH
49879: LD_VAR 0 1
49883: PPUSH
49884: CALL_OW 250
49888: PPUSH
49889: LD_VAR 0 1
49893: PPUSH
49894: CALL_OW 251
49898: PPUSH
49899: LD_VAR 0 2
49903: PPUSH
49904: CALL 48158 0 4
49908: ST_TO_ADDR
// end ;
49909: LD_VAR 0 3
49913: RET
// export function DangerInArea ( side , area ) ; begin
49914: LD_INT 0
49916: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49917: LD_ADDR_VAR 0 3
49921: PUSH
49922: LD_VAR 0 2
49926: PPUSH
49927: LD_INT 81
49929: PUSH
49930: LD_VAR 0 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PPUSH
49939: CALL_OW 70
49943: ST_TO_ADDR
// end ;
49944: LD_VAR 0 3
49948: RET
// export function IsExtension ( b ) ; begin
49949: LD_INT 0
49951: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49952: LD_ADDR_VAR 0 2
49956: PUSH
49957: LD_VAR 0 1
49961: PUSH
49962: LD_INT 23
49964: PUSH
49965: LD_INT 20
49967: PUSH
49968: LD_INT 22
49970: PUSH
49971: LD_INT 17
49973: PUSH
49974: LD_INT 24
49976: PUSH
49977: LD_INT 21
49979: PUSH
49980: LD_INT 19
49982: PUSH
49983: LD_INT 16
49985: PUSH
49986: LD_INT 25
49988: PUSH
49989: LD_INT 18
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: IN
50004: ST_TO_ADDR
// end ;
50005: LD_VAR 0 2
50009: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50010: LD_INT 0
50012: PPUSH
50013: PPUSH
50014: PPUSH
// result := [ ] ;
50015: LD_ADDR_VAR 0 4
50019: PUSH
50020: EMPTY
50021: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50022: LD_ADDR_VAR 0 5
50026: PUSH
50027: LD_VAR 0 2
50031: PPUSH
50032: LD_INT 21
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PPUSH
50042: CALL_OW 70
50046: ST_TO_ADDR
// if not tmp then
50047: LD_VAR 0 5
50051: NOT
50052: IFFALSE 50056
// exit ;
50054: GO 50120
// if checkLink then
50056: LD_VAR 0 3
50060: IFFALSE 50110
// begin for i in tmp do
50062: LD_ADDR_VAR 0 6
50066: PUSH
50067: LD_VAR 0 5
50071: PUSH
50072: FOR_IN
50073: IFFALSE 50108
// if GetBase ( i ) <> base then
50075: LD_VAR 0 6
50079: PPUSH
50080: CALL_OW 274
50084: PUSH
50085: LD_VAR 0 1
50089: NONEQUAL
50090: IFFALSE 50106
// ComLinkToBase ( base , i ) ;
50092: LD_VAR 0 1
50096: PPUSH
50097: LD_VAR 0 6
50101: PPUSH
50102: CALL_OW 169
50106: GO 50072
50108: POP
50109: POP
// end ; result := tmp ;
50110: LD_ADDR_VAR 0 4
50114: PUSH
50115: LD_VAR 0 5
50119: ST_TO_ADDR
// end ;
50120: LD_VAR 0 4
50124: RET
// export function ComComplete ( units , b ) ; var i ; begin
50125: LD_INT 0
50127: PPUSH
50128: PPUSH
// if not units then
50129: LD_VAR 0 1
50133: NOT
50134: IFFALSE 50138
// exit ;
50136: GO 50228
// for i in units do
50138: LD_ADDR_VAR 0 4
50142: PUSH
50143: LD_VAR 0 1
50147: PUSH
50148: FOR_IN
50149: IFFALSE 50226
// if BuildingStatus ( b ) = bs_build then
50151: LD_VAR 0 2
50155: PPUSH
50156: CALL_OW 461
50160: PUSH
50161: LD_INT 1
50163: EQUAL
50164: IFFALSE 50224
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50166: LD_VAR 0 4
50170: PPUSH
50171: LD_STRING h
50173: PUSH
50174: LD_VAR 0 2
50178: PPUSH
50179: CALL_OW 250
50183: PUSH
50184: LD_VAR 0 2
50188: PPUSH
50189: CALL_OW 251
50193: PUSH
50194: LD_VAR 0 2
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: PPUSH
50220: CALL_OW 446
50224: GO 50148
50226: POP
50227: POP
// end ;
50228: LD_VAR 0 3
50232: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50233: LD_INT 0
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
50239: PPUSH
50240: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50241: LD_VAR 0 1
50245: NOT
50246: PUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: CALL_OW 263
50256: PUSH
50257: LD_INT 2
50259: NONEQUAL
50260: OR
50261: IFFALSE 50265
// exit ;
50263: GO 50581
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50265: LD_ADDR_VAR 0 6
50269: PUSH
50270: LD_INT 22
50272: PUSH
50273: LD_VAR 0 1
50277: PPUSH
50278: CALL_OW 255
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 30
50292: PUSH
50293: LD_INT 36
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 34
50302: PUSH
50303: LD_INT 31
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PPUSH
50319: CALL_OW 69
50323: ST_TO_ADDR
// if not tmp then
50324: LD_VAR 0 6
50328: NOT
50329: IFFALSE 50333
// exit ;
50331: GO 50581
// result := [ ] ;
50333: LD_ADDR_VAR 0 2
50337: PUSH
50338: EMPTY
50339: ST_TO_ADDR
// for i in tmp do
50340: LD_ADDR_VAR 0 3
50344: PUSH
50345: LD_VAR 0 6
50349: PUSH
50350: FOR_IN
50351: IFFALSE 50422
// begin t := UnitsInside ( i ) ;
50353: LD_ADDR_VAR 0 4
50357: PUSH
50358: LD_VAR 0 3
50362: PPUSH
50363: CALL_OW 313
50367: ST_TO_ADDR
// if t then
50368: LD_VAR 0 4
50372: IFFALSE 50420
// for j in t do
50374: LD_ADDR_VAR 0 7
50378: PUSH
50379: LD_VAR 0 4
50383: PUSH
50384: FOR_IN
50385: IFFALSE 50418
// result := Replace ( result , result + 1 , j ) ;
50387: LD_ADDR_VAR 0 2
50391: PUSH
50392: LD_VAR 0 2
50396: PPUSH
50397: LD_VAR 0 2
50401: PUSH
50402: LD_INT 1
50404: PLUS
50405: PPUSH
50406: LD_VAR 0 7
50410: PPUSH
50411: CALL_OW 1
50415: ST_TO_ADDR
50416: GO 50384
50418: POP
50419: POP
// end ;
50420: GO 50350
50422: POP
50423: POP
// if not result then
50424: LD_VAR 0 2
50428: NOT
50429: IFFALSE 50433
// exit ;
50431: GO 50581
// mech := result [ 1 ] ;
50433: LD_ADDR_VAR 0 5
50437: PUSH
50438: LD_VAR 0 2
50442: PUSH
50443: LD_INT 1
50445: ARRAY
50446: ST_TO_ADDR
// if result > 1 then
50447: LD_VAR 0 2
50451: PUSH
50452: LD_INT 1
50454: GREATER
50455: IFFALSE 50567
// begin for i = 2 to result do
50457: LD_ADDR_VAR 0 3
50461: PUSH
50462: DOUBLE
50463: LD_INT 2
50465: DEC
50466: ST_TO_ADDR
50467: LD_VAR 0 2
50471: PUSH
50472: FOR_TO
50473: IFFALSE 50565
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50475: LD_ADDR_VAR 0 4
50479: PUSH
50480: LD_VAR 0 2
50484: PUSH
50485: LD_VAR 0 3
50489: ARRAY
50490: PPUSH
50491: LD_INT 3
50493: PPUSH
50494: CALL_OW 259
50498: PUSH
50499: LD_VAR 0 2
50503: PUSH
50504: LD_VAR 0 3
50508: ARRAY
50509: PPUSH
50510: CALL_OW 432
50514: MINUS
50515: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50516: LD_VAR 0 4
50520: PUSH
50521: LD_VAR 0 5
50525: PPUSH
50526: LD_INT 3
50528: PPUSH
50529: CALL_OW 259
50533: PUSH
50534: LD_VAR 0 5
50538: PPUSH
50539: CALL_OW 432
50543: MINUS
50544: GREATEREQUAL
50545: IFFALSE 50563
// mech := result [ i ] ;
50547: LD_ADDR_VAR 0 5
50551: PUSH
50552: LD_VAR 0 2
50556: PUSH
50557: LD_VAR 0 3
50561: ARRAY
50562: ST_TO_ADDR
// end ;
50563: GO 50472
50565: POP
50566: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50567: LD_VAR 0 1
50571: PPUSH
50572: LD_VAR 0 5
50576: PPUSH
50577: CALL_OW 135
// end ;
50581: LD_VAR 0 2
50585: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50586: LD_INT 0
50588: PPUSH
50589: PPUSH
50590: PPUSH
50591: PPUSH
50592: PPUSH
50593: PPUSH
50594: PPUSH
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
// result := [ ] ;
50601: LD_ADDR_VAR 0 7
50605: PUSH
50606: EMPTY
50607: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50608: LD_VAR 0 1
50612: PPUSH
50613: CALL_OW 266
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: IN
50628: NOT
50629: IFFALSE 50633
// exit ;
50631: GO 52267
// if name then
50633: LD_VAR 0 3
50637: IFFALSE 50653
// SetBName ( base_dep , name ) ;
50639: LD_VAR 0 1
50643: PPUSH
50644: LD_VAR 0 3
50648: PPUSH
50649: CALL_OW 500
// base := GetBase ( base_dep ) ;
50653: LD_ADDR_VAR 0 15
50657: PUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 274
50667: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50668: LD_ADDR_VAR 0 16
50672: PUSH
50673: LD_VAR 0 1
50677: PPUSH
50678: CALL_OW 255
50682: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50683: LD_ADDR_VAR 0 17
50687: PUSH
50688: LD_VAR 0 1
50692: PPUSH
50693: CALL_OW 248
50697: ST_TO_ADDR
// if sources then
50698: LD_VAR 0 5
50702: IFFALSE 50749
// for i = 1 to 3 do
50704: LD_ADDR_VAR 0 8
50708: PUSH
50709: DOUBLE
50710: LD_INT 1
50712: DEC
50713: ST_TO_ADDR
50714: LD_INT 3
50716: PUSH
50717: FOR_TO
50718: IFFALSE 50747
// AddResourceType ( base , i , sources [ i ] ) ;
50720: LD_VAR 0 15
50724: PPUSH
50725: LD_VAR 0 8
50729: PPUSH
50730: LD_VAR 0 5
50734: PUSH
50735: LD_VAR 0 8
50739: ARRAY
50740: PPUSH
50741: CALL_OW 276
50745: GO 50717
50747: POP
50748: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50749: LD_ADDR_VAR 0 18
50753: PUSH
50754: LD_VAR 0 15
50758: PPUSH
50759: LD_VAR 0 2
50763: PPUSH
50764: LD_INT 1
50766: PPUSH
50767: CALL 50010 0 3
50771: ST_TO_ADDR
// InitHc ;
50772: CALL_OW 19
// InitUc ;
50776: CALL_OW 18
// uc_side := side ;
50780: LD_ADDR_OWVAR 20
50784: PUSH
50785: LD_VAR 0 16
50789: ST_TO_ADDR
// uc_nation := nation ;
50790: LD_ADDR_OWVAR 21
50794: PUSH
50795: LD_VAR 0 17
50799: ST_TO_ADDR
// if buildings then
50800: LD_VAR 0 18
50804: IFFALSE 52126
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50806: LD_ADDR_VAR 0 19
50810: PUSH
50811: LD_VAR 0 18
50815: PPUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 30
50821: PUSH
50822: LD_INT 29
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 30
50831: PUSH
50832: LD_INT 30
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: PPUSH
50844: CALL_OW 72
50848: ST_TO_ADDR
// if tmp then
50849: LD_VAR 0 19
50853: IFFALSE 50901
// for i in tmp do
50855: LD_ADDR_VAR 0 8
50859: PUSH
50860: LD_VAR 0 19
50864: PUSH
50865: FOR_IN
50866: IFFALSE 50899
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50868: LD_VAR 0 8
50872: PPUSH
50873: CALL_OW 250
50877: PPUSH
50878: LD_VAR 0 8
50882: PPUSH
50883: CALL_OW 251
50887: PPUSH
50888: LD_VAR 0 16
50892: PPUSH
50893: CALL_OW 441
50897: GO 50865
50899: POP
50900: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50901: LD_VAR 0 18
50905: PPUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 30
50911: PUSH
50912: LD_INT 32
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 30
50921: PUSH
50922: LD_INT 33
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: PPUSH
50934: CALL_OW 72
50938: IFFALSE 51026
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50940: LD_ADDR_VAR 0 8
50944: PUSH
50945: LD_VAR 0 18
50949: PPUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 30
50955: PUSH
50956: LD_INT 32
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 30
50965: PUSH
50966: LD_INT 33
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: PPUSH
50978: CALL_OW 72
50982: PUSH
50983: FOR_IN
50984: IFFALSE 51024
// begin if not GetBWeapon ( i ) then
50986: LD_VAR 0 8
50990: PPUSH
50991: CALL_OW 269
50995: NOT
50996: IFFALSE 51022
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50998: LD_VAR 0 8
51002: PPUSH
51003: LD_VAR 0 8
51007: PPUSH
51008: LD_VAR 0 2
51012: PPUSH
51013: CALL 52272 0 2
51017: PPUSH
51018: CALL_OW 431
// end ;
51022: GO 50983
51024: POP
51025: POP
// end ; for i = 1 to personel do
51026: LD_ADDR_VAR 0 8
51030: PUSH
51031: DOUBLE
51032: LD_INT 1
51034: DEC
51035: ST_TO_ADDR
51036: LD_VAR 0 6
51040: PUSH
51041: FOR_TO
51042: IFFALSE 52106
// begin if i > 4 then
51044: LD_VAR 0 8
51048: PUSH
51049: LD_INT 4
51051: GREATER
51052: IFFALSE 51056
// break ;
51054: GO 52106
// case i of 1 :
51056: LD_VAR 0 8
51060: PUSH
51061: LD_INT 1
51063: DOUBLE
51064: EQUAL
51065: IFTRUE 51069
51067: GO 51149
51069: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51070: LD_ADDR_VAR 0 12
51074: PUSH
51075: LD_VAR 0 18
51079: PPUSH
51080: LD_INT 22
51082: PUSH
51083: LD_VAR 0 16
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 58
51094: PUSH
51095: EMPTY
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: LD_INT 30
51103: PUSH
51104: LD_INT 32
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 30
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 30
51123: PUSH
51124: LD_INT 5
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: PPUSH
51142: CALL_OW 72
51146: ST_TO_ADDR
51147: GO 51371
51149: LD_INT 2
51151: DOUBLE
51152: EQUAL
51153: IFTRUE 51157
51155: GO 51219
51157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51158: LD_ADDR_VAR 0 12
51162: PUSH
51163: LD_VAR 0 18
51167: PPUSH
51168: LD_INT 22
51170: PUSH
51171: LD_VAR 0 16
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 30
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 30
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PPUSH
51212: CALL_OW 72
51216: ST_TO_ADDR
51217: GO 51371
51219: LD_INT 3
51221: DOUBLE
51222: EQUAL
51223: IFTRUE 51227
51225: GO 51289
51227: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51228: LD_ADDR_VAR 0 12
51232: PUSH
51233: LD_VAR 0 18
51237: PPUSH
51238: LD_INT 22
51240: PUSH
51241: LD_VAR 0 16
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 30
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 30
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PPUSH
51282: CALL_OW 72
51286: ST_TO_ADDR
51287: GO 51371
51289: LD_INT 4
51291: DOUBLE
51292: EQUAL
51293: IFTRUE 51297
51295: GO 51370
51297: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51298: LD_ADDR_VAR 0 12
51302: PUSH
51303: LD_VAR 0 18
51307: PPUSH
51308: LD_INT 22
51310: PUSH
51311: LD_VAR 0 16
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 30
51325: PUSH
51326: LD_INT 6
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 30
51335: PUSH
51336: LD_INT 7
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 30
51345: PUSH
51346: LD_INT 8
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PPUSH
51363: CALL_OW 72
51367: ST_TO_ADDR
51368: GO 51371
51370: POP
// if i = 1 then
51371: LD_VAR 0 8
51375: PUSH
51376: LD_INT 1
51378: EQUAL
51379: IFFALSE 51490
// begin tmp := [ ] ;
51381: LD_ADDR_VAR 0 19
51385: PUSH
51386: EMPTY
51387: ST_TO_ADDR
// for j in f do
51388: LD_ADDR_VAR 0 9
51392: PUSH
51393: LD_VAR 0 12
51397: PUSH
51398: FOR_IN
51399: IFFALSE 51472
// if GetBType ( j ) = b_bunker then
51401: LD_VAR 0 9
51405: PPUSH
51406: CALL_OW 266
51410: PUSH
51411: LD_INT 32
51413: EQUAL
51414: IFFALSE 51441
// tmp := Insert ( tmp , 1 , j ) else
51416: LD_ADDR_VAR 0 19
51420: PUSH
51421: LD_VAR 0 19
51425: PPUSH
51426: LD_INT 1
51428: PPUSH
51429: LD_VAR 0 9
51433: PPUSH
51434: CALL_OW 2
51438: ST_TO_ADDR
51439: GO 51470
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51441: LD_ADDR_VAR 0 19
51445: PUSH
51446: LD_VAR 0 19
51450: PPUSH
51451: LD_VAR 0 19
51455: PUSH
51456: LD_INT 1
51458: PLUS
51459: PPUSH
51460: LD_VAR 0 9
51464: PPUSH
51465: CALL_OW 2
51469: ST_TO_ADDR
51470: GO 51398
51472: POP
51473: POP
// if tmp then
51474: LD_VAR 0 19
51478: IFFALSE 51490
// f := tmp ;
51480: LD_ADDR_VAR 0 12
51484: PUSH
51485: LD_VAR 0 19
51489: ST_TO_ADDR
// end ; x := personel [ i ] ;
51490: LD_ADDR_VAR 0 13
51494: PUSH
51495: LD_VAR 0 6
51499: PUSH
51500: LD_VAR 0 8
51504: ARRAY
51505: ST_TO_ADDR
// if x = - 1 then
51506: LD_VAR 0 13
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: EQUAL
51515: IFFALSE 51724
// begin for j in f do
51517: LD_ADDR_VAR 0 9
51521: PUSH
51522: LD_VAR 0 12
51526: PUSH
51527: FOR_IN
51528: IFFALSE 51720
// repeat InitHc ;
51530: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51534: LD_VAR 0 9
51538: PPUSH
51539: CALL_OW 266
51543: PUSH
51544: LD_INT 5
51546: EQUAL
51547: IFFALSE 51617
// begin if UnitsInside ( j ) < 3 then
51549: LD_VAR 0 9
51553: PPUSH
51554: CALL_OW 313
51558: PUSH
51559: LD_INT 3
51561: LESS
51562: IFFALSE 51598
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51564: LD_INT 0
51566: PPUSH
51567: LD_INT 5
51569: PUSH
51570: LD_INT 8
51572: PUSH
51573: LD_INT 9
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: PUSH
51581: LD_VAR 0 17
51585: ARRAY
51586: PPUSH
51587: LD_VAR 0 4
51591: PPUSH
51592: CALL_OW 380
51596: GO 51615
// PrepareHuman ( false , i , skill ) ;
51598: LD_INT 0
51600: PPUSH
51601: LD_VAR 0 8
51605: PPUSH
51606: LD_VAR 0 4
51610: PPUSH
51611: CALL_OW 380
// end else
51615: GO 51634
// PrepareHuman ( false , i , skill ) ;
51617: LD_INT 0
51619: PPUSH
51620: LD_VAR 0 8
51624: PPUSH
51625: LD_VAR 0 4
51629: PPUSH
51630: CALL_OW 380
// un := CreateHuman ;
51634: LD_ADDR_VAR 0 14
51638: PUSH
51639: CALL_OW 44
51643: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51644: LD_ADDR_VAR 0 7
51648: PUSH
51649: LD_VAR 0 7
51653: PPUSH
51654: LD_INT 1
51656: PPUSH
51657: LD_VAR 0 14
51661: PPUSH
51662: CALL_OW 2
51666: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51667: LD_VAR 0 14
51671: PPUSH
51672: LD_VAR 0 9
51676: PPUSH
51677: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51681: LD_VAR 0 9
51685: PPUSH
51686: CALL_OW 313
51690: PUSH
51691: LD_INT 6
51693: EQUAL
51694: PUSH
51695: LD_VAR 0 9
51699: PPUSH
51700: CALL_OW 266
51704: PUSH
51705: LD_INT 32
51707: PUSH
51708: LD_INT 31
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: IN
51715: OR
51716: IFFALSE 51530
51718: GO 51527
51720: POP
51721: POP
// end else
51722: GO 52104
// for j = 1 to x do
51724: LD_ADDR_VAR 0 9
51728: PUSH
51729: DOUBLE
51730: LD_INT 1
51732: DEC
51733: ST_TO_ADDR
51734: LD_VAR 0 13
51738: PUSH
51739: FOR_TO
51740: IFFALSE 52102
// begin InitHc ;
51742: CALL_OW 19
// if not f then
51746: LD_VAR 0 12
51750: NOT
51751: IFFALSE 51840
// begin PrepareHuman ( false , i , skill ) ;
51753: LD_INT 0
51755: PPUSH
51756: LD_VAR 0 8
51760: PPUSH
51761: LD_VAR 0 4
51765: PPUSH
51766: CALL_OW 380
// un := CreateHuman ;
51770: LD_ADDR_VAR 0 14
51774: PUSH
51775: CALL_OW 44
51779: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51780: LD_ADDR_VAR 0 7
51784: PUSH
51785: LD_VAR 0 7
51789: PPUSH
51790: LD_INT 1
51792: PPUSH
51793: LD_VAR 0 14
51797: PPUSH
51798: CALL_OW 2
51802: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51803: LD_VAR 0 14
51807: PPUSH
51808: LD_VAR 0 1
51812: PPUSH
51813: CALL_OW 250
51817: PPUSH
51818: LD_VAR 0 1
51822: PPUSH
51823: CALL_OW 251
51827: PPUSH
51828: LD_INT 10
51830: PPUSH
51831: LD_INT 0
51833: PPUSH
51834: CALL_OW 50
// continue ;
51838: GO 51739
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51840: LD_VAR 0 12
51844: PUSH
51845: LD_INT 1
51847: ARRAY
51848: PPUSH
51849: CALL_OW 313
51853: PUSH
51854: LD_VAR 0 12
51858: PUSH
51859: LD_INT 1
51861: ARRAY
51862: PPUSH
51863: CALL_OW 266
51867: PUSH
51868: LD_INT 32
51870: PUSH
51871: LD_INT 31
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: IN
51878: AND
51879: PUSH
51880: LD_VAR 0 12
51884: PUSH
51885: LD_INT 1
51887: ARRAY
51888: PPUSH
51889: CALL_OW 313
51893: PUSH
51894: LD_INT 6
51896: EQUAL
51897: OR
51898: IFFALSE 51918
// f := Delete ( f , 1 ) ;
51900: LD_ADDR_VAR 0 12
51904: PUSH
51905: LD_VAR 0 12
51909: PPUSH
51910: LD_INT 1
51912: PPUSH
51913: CALL_OW 3
51917: ST_TO_ADDR
// if not f then
51918: LD_VAR 0 12
51922: NOT
51923: IFFALSE 51941
// begin x := x + 2 ;
51925: LD_ADDR_VAR 0 13
51929: PUSH
51930: LD_VAR 0 13
51934: PUSH
51935: LD_INT 2
51937: PLUS
51938: ST_TO_ADDR
// continue ;
51939: GO 51739
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51941: LD_VAR 0 12
51945: PUSH
51946: LD_INT 1
51948: ARRAY
51949: PPUSH
51950: CALL_OW 266
51954: PUSH
51955: LD_INT 5
51957: EQUAL
51958: IFFALSE 52032
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51960: LD_VAR 0 12
51964: PUSH
51965: LD_INT 1
51967: ARRAY
51968: PPUSH
51969: CALL_OW 313
51973: PUSH
51974: LD_INT 3
51976: LESS
51977: IFFALSE 52013
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51979: LD_INT 0
51981: PPUSH
51982: LD_INT 5
51984: PUSH
51985: LD_INT 8
51987: PUSH
51988: LD_INT 9
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: PUSH
51996: LD_VAR 0 17
52000: ARRAY
52001: PPUSH
52002: LD_VAR 0 4
52006: PPUSH
52007: CALL_OW 380
52011: GO 52030
// PrepareHuman ( false , i , skill ) ;
52013: LD_INT 0
52015: PPUSH
52016: LD_VAR 0 8
52020: PPUSH
52021: LD_VAR 0 4
52025: PPUSH
52026: CALL_OW 380
// end else
52030: GO 52049
// PrepareHuman ( false , i , skill ) ;
52032: LD_INT 0
52034: PPUSH
52035: LD_VAR 0 8
52039: PPUSH
52040: LD_VAR 0 4
52044: PPUSH
52045: CALL_OW 380
// un := CreateHuman ;
52049: LD_ADDR_VAR 0 14
52053: PUSH
52054: CALL_OW 44
52058: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52059: LD_ADDR_VAR 0 7
52063: PUSH
52064: LD_VAR 0 7
52068: PPUSH
52069: LD_INT 1
52071: PPUSH
52072: LD_VAR 0 14
52076: PPUSH
52077: CALL_OW 2
52081: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52082: LD_VAR 0 14
52086: PPUSH
52087: LD_VAR 0 12
52091: PUSH
52092: LD_INT 1
52094: ARRAY
52095: PPUSH
52096: CALL_OW 52
// end ;
52100: GO 51739
52102: POP
52103: POP
// end ;
52104: GO 51041
52106: POP
52107: POP
// result := result ^ buildings ;
52108: LD_ADDR_VAR 0 7
52112: PUSH
52113: LD_VAR 0 7
52117: PUSH
52118: LD_VAR 0 18
52122: ADD
52123: ST_TO_ADDR
// end else
52124: GO 52267
// begin for i = 1 to personel do
52126: LD_ADDR_VAR 0 8
52130: PUSH
52131: DOUBLE
52132: LD_INT 1
52134: DEC
52135: ST_TO_ADDR
52136: LD_VAR 0 6
52140: PUSH
52141: FOR_TO
52142: IFFALSE 52265
// begin if i > 4 then
52144: LD_VAR 0 8
52148: PUSH
52149: LD_INT 4
52151: GREATER
52152: IFFALSE 52156
// break ;
52154: GO 52265
// x := personel [ i ] ;
52156: LD_ADDR_VAR 0 13
52160: PUSH
52161: LD_VAR 0 6
52165: PUSH
52166: LD_VAR 0 8
52170: ARRAY
52171: ST_TO_ADDR
// if x = - 1 then
52172: LD_VAR 0 13
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: EQUAL
52181: IFFALSE 52185
// continue ;
52183: GO 52141
// PrepareHuman ( false , i , skill ) ;
52185: LD_INT 0
52187: PPUSH
52188: LD_VAR 0 8
52192: PPUSH
52193: LD_VAR 0 4
52197: PPUSH
52198: CALL_OW 380
// un := CreateHuman ;
52202: LD_ADDR_VAR 0 14
52206: PUSH
52207: CALL_OW 44
52211: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52212: LD_VAR 0 14
52216: PPUSH
52217: LD_VAR 0 1
52221: PPUSH
52222: CALL_OW 250
52226: PPUSH
52227: LD_VAR 0 1
52231: PPUSH
52232: CALL_OW 251
52236: PPUSH
52237: LD_INT 10
52239: PPUSH
52240: LD_INT 0
52242: PPUSH
52243: CALL_OW 50
// result := result ^ un ;
52247: LD_ADDR_VAR 0 7
52251: PUSH
52252: LD_VAR 0 7
52256: PUSH
52257: LD_VAR 0 14
52261: ADD
52262: ST_TO_ADDR
// end ;
52263: GO 52141
52265: POP
52266: POP
// end ; end ;
52267: LD_VAR 0 7
52271: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52272: LD_INT 0
52274: PPUSH
52275: PPUSH
52276: PPUSH
52277: PPUSH
52278: PPUSH
52279: PPUSH
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
52284: PPUSH
52285: PPUSH
52286: PPUSH
52287: PPUSH
52288: PPUSH
52289: PPUSH
// result := false ;
52290: LD_ADDR_VAR 0 3
52294: PUSH
52295: LD_INT 0
52297: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52298: LD_VAR 0 1
52302: NOT
52303: PUSH
52304: LD_VAR 0 1
52308: PPUSH
52309: CALL_OW 266
52313: PUSH
52314: LD_INT 32
52316: PUSH
52317: LD_INT 33
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: IN
52324: NOT
52325: OR
52326: IFFALSE 52330
// exit ;
52328: GO 53439
// nat := GetNation ( tower ) ;
52330: LD_ADDR_VAR 0 12
52334: PUSH
52335: LD_VAR 0 1
52339: PPUSH
52340: CALL_OW 248
52344: ST_TO_ADDR
// side := GetSide ( tower ) ;
52345: LD_ADDR_VAR 0 16
52349: PUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL_OW 255
52359: ST_TO_ADDR
// x := GetX ( tower ) ;
52360: LD_ADDR_VAR 0 10
52364: PUSH
52365: LD_VAR 0 1
52369: PPUSH
52370: CALL_OW 250
52374: ST_TO_ADDR
// y := GetY ( tower ) ;
52375: LD_ADDR_VAR 0 11
52379: PUSH
52380: LD_VAR 0 1
52384: PPUSH
52385: CALL_OW 251
52389: ST_TO_ADDR
// if not x or not y then
52390: LD_VAR 0 10
52394: NOT
52395: PUSH
52396: LD_VAR 0 11
52400: NOT
52401: OR
52402: IFFALSE 52406
// exit ;
52404: GO 53439
// weapon := 0 ;
52406: LD_ADDR_VAR 0 18
52410: PUSH
52411: LD_INT 0
52413: ST_TO_ADDR
// fac_list := [ ] ;
52414: LD_ADDR_VAR 0 17
52418: PUSH
52419: EMPTY
52420: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52421: LD_ADDR_VAR 0 6
52425: PUSH
52426: LD_VAR 0 1
52430: PPUSH
52431: CALL_OW 274
52435: PPUSH
52436: LD_VAR 0 2
52440: PPUSH
52441: LD_INT 0
52443: PPUSH
52444: CALL 50010 0 3
52448: PPUSH
52449: LD_INT 30
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PPUSH
52459: CALL_OW 72
52463: ST_TO_ADDR
// if not factories then
52464: LD_VAR 0 6
52468: NOT
52469: IFFALSE 52473
// exit ;
52471: GO 53439
// for i in factories do
52473: LD_ADDR_VAR 0 8
52477: PUSH
52478: LD_VAR 0 6
52482: PUSH
52483: FOR_IN
52484: IFFALSE 52509
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52486: LD_ADDR_VAR 0 17
52490: PUSH
52491: LD_VAR 0 17
52495: PUSH
52496: LD_VAR 0 8
52500: PPUSH
52501: CALL_OW 478
52505: UNION
52506: ST_TO_ADDR
52507: GO 52483
52509: POP
52510: POP
// if not fac_list then
52511: LD_VAR 0 17
52515: NOT
52516: IFFALSE 52520
// exit ;
52518: GO 53439
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52520: LD_ADDR_VAR 0 5
52524: PUSH
52525: LD_INT 4
52527: PUSH
52528: LD_INT 5
52530: PUSH
52531: LD_INT 9
52533: PUSH
52534: LD_INT 10
52536: PUSH
52537: LD_INT 6
52539: PUSH
52540: LD_INT 7
52542: PUSH
52543: LD_INT 11
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 27
52557: PUSH
52558: LD_INT 28
52560: PUSH
52561: LD_INT 26
52563: PUSH
52564: LD_INT 30
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 43
52575: PUSH
52576: LD_INT 44
52578: PUSH
52579: LD_INT 46
52581: PUSH
52582: LD_INT 45
52584: PUSH
52585: LD_INT 47
52587: PUSH
52588: LD_INT 49
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: PUSH
52604: LD_VAR 0 12
52608: ARRAY
52609: ST_TO_ADDR
// list := list isect fac_list ;
52610: LD_ADDR_VAR 0 5
52614: PUSH
52615: LD_VAR 0 5
52619: PUSH
52620: LD_VAR 0 17
52624: ISECT
52625: ST_TO_ADDR
// if not list then
52626: LD_VAR 0 5
52630: NOT
52631: IFFALSE 52635
// exit ;
52633: GO 53439
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52635: LD_VAR 0 12
52639: PUSH
52640: LD_INT 3
52642: EQUAL
52643: PUSH
52644: LD_INT 49
52646: PUSH
52647: LD_VAR 0 5
52651: IN
52652: AND
52653: PUSH
52654: LD_INT 31
52656: PPUSH
52657: LD_VAR 0 16
52661: PPUSH
52662: CALL_OW 321
52666: PUSH
52667: LD_INT 2
52669: EQUAL
52670: AND
52671: IFFALSE 52731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52673: LD_INT 22
52675: PUSH
52676: LD_VAR 0 16
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 35
52687: PUSH
52688: LD_INT 49
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 91
52697: PUSH
52698: LD_VAR 0 1
52702: PUSH
52703: LD_INT 10
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: LIST
52715: PPUSH
52716: CALL_OW 69
52720: NOT
52721: IFFALSE 52731
// weapon := ru_time_lapser ;
52723: LD_ADDR_VAR 0 18
52727: PUSH
52728: LD_INT 49
52730: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52731: LD_VAR 0 12
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: IN
52746: PUSH
52747: LD_INT 11
52749: PUSH
52750: LD_VAR 0 5
52754: IN
52755: PUSH
52756: LD_INT 30
52758: PUSH
52759: LD_VAR 0 5
52763: IN
52764: OR
52765: AND
52766: PUSH
52767: LD_INT 6
52769: PPUSH
52770: LD_VAR 0 16
52774: PPUSH
52775: CALL_OW 321
52779: PUSH
52780: LD_INT 2
52782: EQUAL
52783: AND
52784: IFFALSE 52949
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52786: LD_INT 22
52788: PUSH
52789: LD_VAR 0 16
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 35
52803: PUSH
52804: LD_INT 11
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 35
52813: PUSH
52814: LD_INT 30
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 91
52828: PUSH
52829: LD_VAR 0 1
52833: PUSH
52834: LD_INT 18
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: PPUSH
52847: CALL_OW 69
52851: NOT
52852: PUSH
52853: LD_INT 22
52855: PUSH
52856: LD_VAR 0 16
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 30
52870: PUSH
52871: LD_INT 32
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 30
52880: PUSH
52881: LD_INT 33
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 91
52895: PUSH
52896: LD_VAR 0 1
52900: PUSH
52901: LD_INT 12
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: PPUSH
52917: CALL_OW 69
52921: PUSH
52922: LD_INT 2
52924: GREATER
52925: AND
52926: IFFALSE 52949
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52928: LD_ADDR_VAR 0 18
52932: PUSH
52933: LD_INT 11
52935: PUSH
52936: LD_INT 30
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_VAR 0 12
52947: ARRAY
52948: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52949: LD_VAR 0 18
52953: NOT
52954: PUSH
52955: LD_INT 40
52957: PPUSH
52958: LD_VAR 0 16
52962: PPUSH
52963: CALL_OW 321
52967: PUSH
52968: LD_INT 2
52970: EQUAL
52971: AND
52972: PUSH
52973: LD_INT 7
52975: PUSH
52976: LD_VAR 0 5
52980: IN
52981: PUSH
52982: LD_INT 28
52984: PUSH
52985: LD_VAR 0 5
52989: IN
52990: OR
52991: PUSH
52992: LD_INT 45
52994: PUSH
52995: LD_VAR 0 5
52999: IN
53000: OR
53001: AND
53002: IFFALSE 53256
// begin hex := GetHexInfo ( x , y ) ;
53004: LD_ADDR_VAR 0 4
53008: PUSH
53009: LD_VAR 0 10
53013: PPUSH
53014: LD_VAR 0 11
53018: PPUSH
53019: CALL_OW 546
53023: ST_TO_ADDR
// if hex [ 1 ] then
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 1
53031: ARRAY
53032: IFFALSE 53036
// exit ;
53034: GO 53439
// height := hex [ 2 ] ;
53036: LD_ADDR_VAR 0 15
53040: PUSH
53041: LD_VAR 0 4
53045: PUSH
53046: LD_INT 2
53048: ARRAY
53049: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53050: LD_ADDR_VAR 0 14
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: LD_INT 5
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// for i in tmp do
53073: LD_ADDR_VAR 0 8
53077: PUSH
53078: LD_VAR 0 14
53082: PUSH
53083: FOR_IN
53084: IFFALSE 53254
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53086: LD_ADDR_VAR 0 9
53090: PUSH
53091: LD_VAR 0 10
53095: PPUSH
53096: LD_VAR 0 8
53100: PPUSH
53101: LD_INT 5
53103: PPUSH
53104: CALL_OW 272
53108: PUSH
53109: LD_VAR 0 11
53113: PPUSH
53114: LD_VAR 0 8
53118: PPUSH
53119: LD_INT 5
53121: PPUSH
53122: CALL_OW 273
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53131: LD_VAR 0 9
53135: PUSH
53136: LD_INT 1
53138: ARRAY
53139: PPUSH
53140: LD_VAR 0 9
53144: PUSH
53145: LD_INT 2
53147: ARRAY
53148: PPUSH
53149: CALL_OW 488
53153: IFFALSE 53252
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53155: LD_ADDR_VAR 0 4
53159: PUSH
53160: LD_VAR 0 9
53164: PUSH
53165: LD_INT 1
53167: ARRAY
53168: PPUSH
53169: LD_VAR 0 9
53173: PUSH
53174: LD_INT 2
53176: ARRAY
53177: PPUSH
53178: CALL_OW 546
53182: ST_TO_ADDR
// if hex [ 1 ] then
53183: LD_VAR 0 4
53187: PUSH
53188: LD_INT 1
53190: ARRAY
53191: IFFALSE 53195
// continue ;
53193: GO 53083
// h := hex [ 2 ] ;
53195: LD_ADDR_VAR 0 13
53199: PUSH
53200: LD_VAR 0 4
53204: PUSH
53205: LD_INT 2
53207: ARRAY
53208: ST_TO_ADDR
// if h + 7 < height then
53209: LD_VAR 0 13
53213: PUSH
53214: LD_INT 7
53216: PLUS
53217: PUSH
53218: LD_VAR 0 15
53222: LESS
53223: IFFALSE 53252
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53225: LD_ADDR_VAR 0 18
53229: PUSH
53230: LD_INT 7
53232: PUSH
53233: LD_INT 28
53235: PUSH
53236: LD_INT 45
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: PUSH
53244: LD_VAR 0 12
53248: ARRAY
53249: ST_TO_ADDR
// break ;
53250: GO 53254
// end ; end ; end ;
53252: GO 53083
53254: POP
53255: POP
// end ; if not weapon then
53256: LD_VAR 0 18
53260: NOT
53261: IFFALSE 53321
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53263: LD_ADDR_VAR 0 5
53267: PUSH
53268: LD_VAR 0 5
53272: PUSH
53273: LD_INT 11
53275: PUSH
53276: LD_INT 30
53278: PUSH
53279: LD_INT 49
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: DIFF
53287: ST_TO_ADDR
// if not list then
53288: LD_VAR 0 5
53292: NOT
53293: IFFALSE 53297
// exit ;
53295: GO 53439
// weapon := list [ rand ( 1 , list ) ] ;
53297: LD_ADDR_VAR 0 18
53301: PUSH
53302: LD_VAR 0 5
53306: PUSH
53307: LD_INT 1
53309: PPUSH
53310: LD_VAR 0 5
53314: PPUSH
53315: CALL_OW 12
53319: ARRAY
53320: ST_TO_ADDR
// end ; if weapon then
53321: LD_VAR 0 18
53325: IFFALSE 53439
// begin tmp := CostOfWeapon ( weapon ) ;
53327: LD_ADDR_VAR 0 14
53331: PUSH
53332: LD_VAR 0 18
53336: PPUSH
53337: CALL_OW 451
53341: ST_TO_ADDR
// j := GetBase ( tower ) ;
53342: LD_ADDR_VAR 0 9
53346: PUSH
53347: LD_VAR 0 1
53351: PPUSH
53352: CALL_OW 274
53356: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53357: LD_VAR 0 9
53361: PPUSH
53362: LD_INT 1
53364: PPUSH
53365: CALL_OW 275
53369: PUSH
53370: LD_VAR 0 14
53374: PUSH
53375: LD_INT 1
53377: ARRAY
53378: GREATEREQUAL
53379: PUSH
53380: LD_VAR 0 9
53384: PPUSH
53385: LD_INT 2
53387: PPUSH
53388: CALL_OW 275
53392: PUSH
53393: LD_VAR 0 14
53397: PUSH
53398: LD_INT 2
53400: ARRAY
53401: GREATEREQUAL
53402: AND
53403: PUSH
53404: LD_VAR 0 9
53408: PPUSH
53409: LD_INT 3
53411: PPUSH
53412: CALL_OW 275
53416: PUSH
53417: LD_VAR 0 14
53421: PUSH
53422: LD_INT 3
53424: ARRAY
53425: GREATEREQUAL
53426: AND
53427: IFFALSE 53439
// result := weapon ;
53429: LD_ADDR_VAR 0 3
53433: PUSH
53434: LD_VAR 0 18
53438: ST_TO_ADDR
// end ; end ;
53439: LD_VAR 0 3
53443: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53444: LD_INT 0
53446: PPUSH
53447: PPUSH
// result := true ;
53448: LD_ADDR_VAR 0 3
53452: PUSH
53453: LD_INT 1
53455: ST_TO_ADDR
// if array1 = array2 then
53456: LD_VAR 0 1
53460: PUSH
53461: LD_VAR 0 2
53465: EQUAL
53466: IFFALSE 53526
// begin for i = 1 to array1 do
53468: LD_ADDR_VAR 0 4
53472: PUSH
53473: DOUBLE
53474: LD_INT 1
53476: DEC
53477: ST_TO_ADDR
53478: LD_VAR 0 1
53482: PUSH
53483: FOR_TO
53484: IFFALSE 53522
// if array1 [ i ] <> array2 [ i ] then
53486: LD_VAR 0 1
53490: PUSH
53491: LD_VAR 0 4
53495: ARRAY
53496: PUSH
53497: LD_VAR 0 2
53501: PUSH
53502: LD_VAR 0 4
53506: ARRAY
53507: NONEQUAL
53508: IFFALSE 53520
// begin result := false ;
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: LD_INT 0
53517: ST_TO_ADDR
// break ;
53518: GO 53522
// end ;
53520: GO 53483
53522: POP
53523: POP
// end else
53524: GO 53534
// result := false ;
53526: LD_ADDR_VAR 0 3
53530: PUSH
53531: LD_INT 0
53533: ST_TO_ADDR
// end ;
53534: LD_VAR 0 3
53538: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53539: LD_INT 0
53541: PPUSH
53542: PPUSH
// if not array1 or not array2 then
53543: LD_VAR 0 1
53547: NOT
53548: PUSH
53549: LD_VAR 0 2
53553: NOT
53554: OR
53555: IFFALSE 53559
// exit ;
53557: GO 53623
// result := true ;
53559: LD_ADDR_VAR 0 3
53563: PUSH
53564: LD_INT 1
53566: ST_TO_ADDR
// for i = 1 to array1 do
53567: LD_ADDR_VAR 0 4
53571: PUSH
53572: DOUBLE
53573: LD_INT 1
53575: DEC
53576: ST_TO_ADDR
53577: LD_VAR 0 1
53581: PUSH
53582: FOR_TO
53583: IFFALSE 53621
// if array1 [ i ] <> array2 [ i ] then
53585: LD_VAR 0 1
53589: PUSH
53590: LD_VAR 0 4
53594: ARRAY
53595: PUSH
53596: LD_VAR 0 2
53600: PUSH
53601: LD_VAR 0 4
53605: ARRAY
53606: NONEQUAL
53607: IFFALSE 53619
// begin result := false ;
53609: LD_ADDR_VAR 0 3
53613: PUSH
53614: LD_INT 0
53616: ST_TO_ADDR
// break ;
53617: GO 53621
// end ;
53619: GO 53582
53621: POP
53622: POP
// end ;
53623: LD_VAR 0 3
53627: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53628: LD_INT 0
53630: PPUSH
53631: PPUSH
53632: PPUSH
// pom := GetBase ( fac ) ;
53633: LD_ADDR_VAR 0 5
53637: PUSH
53638: LD_VAR 0 1
53642: PPUSH
53643: CALL_OW 274
53647: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53648: LD_ADDR_VAR 0 4
53652: PUSH
53653: LD_VAR 0 2
53657: PUSH
53658: LD_INT 1
53660: ARRAY
53661: PPUSH
53662: LD_VAR 0 2
53666: PUSH
53667: LD_INT 2
53669: ARRAY
53670: PPUSH
53671: LD_VAR 0 2
53675: PUSH
53676: LD_INT 3
53678: ARRAY
53679: PPUSH
53680: LD_VAR 0 2
53684: PUSH
53685: LD_INT 4
53687: ARRAY
53688: PPUSH
53689: CALL_OW 449
53693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53694: LD_ADDR_VAR 0 3
53698: PUSH
53699: LD_VAR 0 5
53703: PPUSH
53704: LD_INT 1
53706: PPUSH
53707: CALL_OW 275
53711: PUSH
53712: LD_VAR 0 4
53716: PUSH
53717: LD_INT 1
53719: ARRAY
53720: GREATEREQUAL
53721: PUSH
53722: LD_VAR 0 5
53726: PPUSH
53727: LD_INT 2
53729: PPUSH
53730: CALL_OW 275
53734: PUSH
53735: LD_VAR 0 4
53739: PUSH
53740: LD_INT 2
53742: ARRAY
53743: GREATEREQUAL
53744: AND
53745: PUSH
53746: LD_VAR 0 5
53750: PPUSH
53751: LD_INT 3
53753: PPUSH
53754: CALL_OW 275
53758: PUSH
53759: LD_VAR 0 4
53763: PUSH
53764: LD_INT 3
53766: ARRAY
53767: GREATEREQUAL
53768: AND
53769: ST_TO_ADDR
// end ;
53770: LD_VAR 0 3
53774: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53775: LD_INT 0
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
// pom := GetBase ( building ) ;
53781: LD_ADDR_VAR 0 3
53785: PUSH
53786: LD_VAR 0 1
53790: PPUSH
53791: CALL_OW 274
53795: ST_TO_ADDR
// if not pom then
53796: LD_VAR 0 3
53800: NOT
53801: IFFALSE 53805
// exit ;
53803: GO 53975
// btype := GetBType ( building ) ;
53805: LD_ADDR_VAR 0 5
53809: PUSH
53810: LD_VAR 0 1
53814: PPUSH
53815: CALL_OW 266
53819: ST_TO_ADDR
// if btype = b_armoury then
53820: LD_VAR 0 5
53824: PUSH
53825: LD_INT 4
53827: EQUAL
53828: IFFALSE 53838
// btype := b_barracks ;
53830: LD_ADDR_VAR 0 5
53834: PUSH
53835: LD_INT 5
53837: ST_TO_ADDR
// if btype = b_depot then
53838: LD_VAR 0 5
53842: PUSH
53843: LD_INT 0
53845: EQUAL
53846: IFFALSE 53856
// btype := b_warehouse ;
53848: LD_ADDR_VAR 0 5
53852: PUSH
53853: LD_INT 1
53855: ST_TO_ADDR
// if btype = b_workshop then
53856: LD_VAR 0 5
53860: PUSH
53861: LD_INT 2
53863: EQUAL
53864: IFFALSE 53874
// btype := b_factory ;
53866: LD_ADDR_VAR 0 5
53870: PUSH
53871: LD_INT 3
53873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53874: LD_ADDR_VAR 0 4
53878: PUSH
53879: LD_VAR 0 5
53883: PPUSH
53884: LD_VAR 0 1
53888: PPUSH
53889: CALL_OW 248
53893: PPUSH
53894: CALL_OW 450
53898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53899: LD_ADDR_VAR 0 2
53903: PUSH
53904: LD_VAR 0 3
53908: PPUSH
53909: LD_INT 1
53911: PPUSH
53912: CALL_OW 275
53916: PUSH
53917: LD_VAR 0 4
53921: PUSH
53922: LD_INT 1
53924: ARRAY
53925: GREATEREQUAL
53926: PUSH
53927: LD_VAR 0 3
53931: PPUSH
53932: LD_INT 2
53934: PPUSH
53935: CALL_OW 275
53939: PUSH
53940: LD_VAR 0 4
53944: PUSH
53945: LD_INT 2
53947: ARRAY
53948: GREATEREQUAL
53949: AND
53950: PUSH
53951: LD_VAR 0 3
53955: PPUSH
53956: LD_INT 3
53958: PPUSH
53959: CALL_OW 275
53963: PUSH
53964: LD_VAR 0 4
53968: PUSH
53969: LD_INT 3
53971: ARRAY
53972: GREATEREQUAL
53973: AND
53974: ST_TO_ADDR
// end ;
53975: LD_VAR 0 2
53979: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53980: LD_INT 0
53982: PPUSH
53983: PPUSH
53984: PPUSH
// pom := GetBase ( building ) ;
53985: LD_ADDR_VAR 0 4
53989: PUSH
53990: LD_VAR 0 1
53994: PPUSH
53995: CALL_OW 274
53999: ST_TO_ADDR
// if not pom then
54000: LD_VAR 0 4
54004: NOT
54005: IFFALSE 54009
// exit ;
54007: GO 54110
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54009: LD_ADDR_VAR 0 5
54013: PUSH
54014: LD_VAR 0 2
54018: PPUSH
54019: LD_VAR 0 1
54023: PPUSH
54024: CALL_OW 248
54028: PPUSH
54029: CALL_OW 450
54033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54034: LD_ADDR_VAR 0 3
54038: PUSH
54039: LD_VAR 0 4
54043: PPUSH
54044: LD_INT 1
54046: PPUSH
54047: CALL_OW 275
54051: PUSH
54052: LD_VAR 0 5
54056: PUSH
54057: LD_INT 1
54059: ARRAY
54060: GREATEREQUAL
54061: PUSH
54062: LD_VAR 0 4
54066: PPUSH
54067: LD_INT 2
54069: PPUSH
54070: CALL_OW 275
54074: PUSH
54075: LD_VAR 0 5
54079: PUSH
54080: LD_INT 2
54082: ARRAY
54083: GREATEREQUAL
54084: AND
54085: PUSH
54086: LD_VAR 0 4
54090: PPUSH
54091: LD_INT 3
54093: PPUSH
54094: CALL_OW 275
54098: PUSH
54099: LD_VAR 0 5
54103: PUSH
54104: LD_INT 3
54106: ARRAY
54107: GREATEREQUAL
54108: AND
54109: ST_TO_ADDR
// end ;
54110: LD_VAR 0 3
54114: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54115: LD_INT 0
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
// result := false ;
54128: LD_ADDR_VAR 0 8
54132: PUSH
54133: LD_INT 0
54135: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54136: LD_VAR 0 5
54140: NOT
54141: PUSH
54142: LD_VAR 0 1
54146: NOT
54147: OR
54148: PUSH
54149: LD_VAR 0 2
54153: NOT
54154: OR
54155: PUSH
54156: LD_VAR 0 3
54160: NOT
54161: OR
54162: IFFALSE 54166
// exit ;
54164: GO 54980
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54166: LD_ADDR_VAR 0 14
54170: PUSH
54171: LD_VAR 0 1
54175: PPUSH
54176: LD_VAR 0 2
54180: PPUSH
54181: LD_VAR 0 3
54185: PPUSH
54186: LD_VAR 0 4
54190: PPUSH
54191: LD_VAR 0 5
54195: PUSH
54196: LD_INT 1
54198: ARRAY
54199: PPUSH
54200: CALL_OW 248
54204: PPUSH
54205: LD_INT 0
54207: PPUSH
54208: CALL 56217 0 6
54212: ST_TO_ADDR
// if not hexes then
54213: LD_VAR 0 14
54217: NOT
54218: IFFALSE 54222
// exit ;
54220: GO 54980
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54222: LD_ADDR_VAR 0 17
54226: PUSH
54227: LD_VAR 0 5
54231: PPUSH
54232: LD_INT 22
54234: PUSH
54235: LD_VAR 0 13
54239: PPUSH
54240: CALL_OW 255
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 30
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 30
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PPUSH
54281: CALL_OW 72
54285: ST_TO_ADDR
// for i = 1 to hexes do
54286: LD_ADDR_VAR 0 9
54290: PUSH
54291: DOUBLE
54292: LD_INT 1
54294: DEC
54295: ST_TO_ADDR
54296: LD_VAR 0 14
54300: PUSH
54301: FOR_TO
54302: IFFALSE 54978
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54304: LD_ADDR_VAR 0 13
54308: PUSH
54309: LD_VAR 0 14
54313: PUSH
54314: LD_VAR 0 9
54318: ARRAY
54319: PUSH
54320: LD_INT 1
54322: ARRAY
54323: PPUSH
54324: LD_VAR 0 14
54328: PUSH
54329: LD_VAR 0 9
54333: ARRAY
54334: PUSH
54335: LD_INT 2
54337: ARRAY
54338: PPUSH
54339: CALL_OW 428
54343: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54344: LD_VAR 0 14
54348: PUSH
54349: LD_VAR 0 9
54353: ARRAY
54354: PUSH
54355: LD_INT 1
54357: ARRAY
54358: PPUSH
54359: LD_VAR 0 14
54363: PUSH
54364: LD_VAR 0 9
54368: ARRAY
54369: PUSH
54370: LD_INT 2
54372: ARRAY
54373: PPUSH
54374: CALL_OW 351
54378: PUSH
54379: LD_VAR 0 14
54383: PUSH
54384: LD_VAR 0 9
54388: ARRAY
54389: PUSH
54390: LD_INT 1
54392: ARRAY
54393: PPUSH
54394: LD_VAR 0 14
54398: PUSH
54399: LD_VAR 0 9
54403: ARRAY
54404: PUSH
54405: LD_INT 2
54407: ARRAY
54408: PPUSH
54409: CALL_OW 488
54413: NOT
54414: OR
54415: PUSH
54416: LD_VAR 0 13
54420: PPUSH
54421: CALL_OW 247
54425: PUSH
54426: LD_INT 3
54428: EQUAL
54429: OR
54430: IFFALSE 54436
// exit ;
54432: POP
54433: POP
54434: GO 54980
// if not tmp then
54436: LD_VAR 0 13
54440: NOT
54441: IFFALSE 54445
// continue ;
54443: GO 54301
// result := true ;
54445: LD_ADDR_VAR 0 8
54449: PUSH
54450: LD_INT 1
54452: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54453: LD_VAR 0 6
54457: PUSH
54458: LD_VAR 0 13
54462: PPUSH
54463: CALL_OW 247
54467: PUSH
54468: LD_INT 2
54470: EQUAL
54471: AND
54472: PUSH
54473: LD_VAR 0 13
54477: PPUSH
54478: CALL_OW 263
54482: PUSH
54483: LD_INT 1
54485: EQUAL
54486: AND
54487: IFFALSE 54651
// begin if IsDrivenBy ( tmp ) then
54489: LD_VAR 0 13
54493: PPUSH
54494: CALL_OW 311
54498: IFFALSE 54502
// continue ;
54500: GO 54301
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54502: LD_VAR 0 6
54506: PPUSH
54507: LD_INT 3
54509: PUSH
54510: LD_INT 60
54512: PUSH
54513: EMPTY
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: LD_INT 55
54525: PUSH
54526: EMPTY
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PPUSH
54537: CALL_OW 72
54541: IFFALSE 54649
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54543: LD_ADDR_VAR 0 18
54547: PUSH
54548: LD_VAR 0 6
54552: PPUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 60
54558: PUSH
54559: EMPTY
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: LD_INT 55
54571: PUSH
54572: EMPTY
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PPUSH
54583: CALL_OW 72
54587: PUSH
54588: LD_INT 1
54590: ARRAY
54591: ST_TO_ADDR
// if IsInUnit ( driver ) then
54592: LD_VAR 0 18
54596: PPUSH
54597: CALL_OW 310
54601: IFFALSE 54612
// ComExit ( driver ) ;
54603: LD_VAR 0 18
54607: PPUSH
54608: CALL 79401 0 1
// AddComEnterUnit ( driver , tmp ) ;
54612: LD_VAR 0 18
54616: PPUSH
54617: LD_VAR 0 13
54621: PPUSH
54622: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54626: LD_VAR 0 18
54630: PPUSH
54631: LD_VAR 0 7
54635: PPUSH
54636: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54640: LD_VAR 0 18
54644: PPUSH
54645: CALL_OW 181
// end ; continue ;
54649: GO 54301
// end ; if not cleaners or not tmp in cleaners then
54651: LD_VAR 0 6
54655: NOT
54656: PUSH
54657: LD_VAR 0 13
54661: PUSH
54662: LD_VAR 0 6
54666: IN
54667: NOT
54668: OR
54669: IFFALSE 54976
// begin if dep then
54671: LD_VAR 0 17
54675: IFFALSE 54811
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54677: LD_ADDR_VAR 0 16
54681: PUSH
54682: LD_VAR 0 17
54686: PUSH
54687: LD_INT 1
54689: ARRAY
54690: PPUSH
54691: CALL_OW 250
54695: PPUSH
54696: LD_VAR 0 17
54700: PUSH
54701: LD_INT 1
54703: ARRAY
54704: PPUSH
54705: CALL_OW 254
54709: PPUSH
54710: LD_INT 5
54712: PPUSH
54713: CALL_OW 272
54717: PUSH
54718: LD_VAR 0 17
54722: PUSH
54723: LD_INT 1
54725: ARRAY
54726: PPUSH
54727: CALL_OW 251
54731: PPUSH
54732: LD_VAR 0 17
54736: PUSH
54737: LD_INT 1
54739: ARRAY
54740: PPUSH
54741: CALL_OW 254
54745: PPUSH
54746: LD_INT 5
54748: PPUSH
54749: CALL_OW 273
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54758: LD_VAR 0 16
54762: PUSH
54763: LD_INT 1
54765: ARRAY
54766: PPUSH
54767: LD_VAR 0 16
54771: PUSH
54772: LD_INT 2
54774: ARRAY
54775: PPUSH
54776: CALL_OW 488
54780: IFFALSE 54811
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54782: LD_VAR 0 13
54786: PPUSH
54787: LD_VAR 0 16
54791: PUSH
54792: LD_INT 1
54794: ARRAY
54795: PPUSH
54796: LD_VAR 0 16
54800: PUSH
54801: LD_INT 2
54803: ARRAY
54804: PPUSH
54805: CALL_OW 111
// continue ;
54809: GO 54301
// end ; end ; r := GetDir ( tmp ) ;
54811: LD_ADDR_VAR 0 15
54815: PUSH
54816: LD_VAR 0 13
54820: PPUSH
54821: CALL_OW 254
54825: ST_TO_ADDR
// if r = 5 then
54826: LD_VAR 0 15
54830: PUSH
54831: LD_INT 5
54833: EQUAL
54834: IFFALSE 54844
// r := 0 ;
54836: LD_ADDR_VAR 0 15
54840: PUSH
54841: LD_INT 0
54843: ST_TO_ADDR
// for j = r to 5 do
54844: LD_ADDR_VAR 0 10
54848: PUSH
54849: DOUBLE
54850: LD_VAR 0 15
54854: DEC
54855: ST_TO_ADDR
54856: LD_INT 5
54858: PUSH
54859: FOR_TO
54860: IFFALSE 54974
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54862: LD_ADDR_VAR 0 11
54866: PUSH
54867: LD_VAR 0 13
54871: PPUSH
54872: CALL_OW 250
54876: PPUSH
54877: LD_VAR 0 10
54881: PPUSH
54882: LD_INT 2
54884: PPUSH
54885: CALL_OW 272
54889: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54890: LD_ADDR_VAR 0 12
54894: PUSH
54895: LD_VAR 0 13
54899: PPUSH
54900: CALL_OW 251
54904: PPUSH
54905: LD_VAR 0 10
54909: PPUSH
54910: LD_INT 2
54912: PPUSH
54913: CALL_OW 273
54917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54918: LD_VAR 0 11
54922: PPUSH
54923: LD_VAR 0 12
54927: PPUSH
54928: CALL_OW 488
54932: PUSH
54933: LD_VAR 0 11
54937: PPUSH
54938: LD_VAR 0 12
54942: PPUSH
54943: CALL_OW 428
54947: NOT
54948: AND
54949: IFFALSE 54972
// begin ComMoveXY ( tmp , _x , _y ) ;
54951: LD_VAR 0 13
54955: PPUSH
54956: LD_VAR 0 11
54960: PPUSH
54961: LD_VAR 0 12
54965: PPUSH
54966: CALL_OW 111
// break ;
54970: GO 54974
// end ; end ;
54972: GO 54859
54974: POP
54975: POP
// end ; end ;
54976: GO 54301
54978: POP
54979: POP
// end ;
54980: LD_VAR 0 8
54984: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54985: LD_INT 0
54987: PPUSH
// result := true ;
54988: LD_ADDR_VAR 0 3
54992: PUSH
54993: LD_INT 1
54995: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54996: LD_VAR 0 2
55000: PUSH
55001: LD_INT 24
55003: DOUBLE
55004: EQUAL
55005: IFTRUE 55015
55007: LD_INT 33
55009: DOUBLE
55010: EQUAL
55011: IFTRUE 55015
55013: GO 55040
55015: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55016: LD_ADDR_VAR 0 3
55020: PUSH
55021: LD_INT 32
55023: PPUSH
55024: LD_VAR 0 1
55028: PPUSH
55029: CALL_OW 321
55033: PUSH
55034: LD_INT 2
55036: EQUAL
55037: ST_TO_ADDR
55038: GO 55360
55040: LD_INT 20
55042: DOUBLE
55043: EQUAL
55044: IFTRUE 55048
55046: GO 55073
55048: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55049: LD_ADDR_VAR 0 3
55053: PUSH
55054: LD_INT 6
55056: PPUSH
55057: LD_VAR 0 1
55061: PPUSH
55062: CALL_OW 321
55066: PUSH
55067: LD_INT 2
55069: EQUAL
55070: ST_TO_ADDR
55071: GO 55360
55073: LD_INT 22
55075: DOUBLE
55076: EQUAL
55077: IFTRUE 55087
55079: LD_INT 36
55081: DOUBLE
55082: EQUAL
55083: IFTRUE 55087
55085: GO 55112
55087: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55088: LD_ADDR_VAR 0 3
55092: PUSH
55093: LD_INT 15
55095: PPUSH
55096: LD_VAR 0 1
55100: PPUSH
55101: CALL_OW 321
55105: PUSH
55106: LD_INT 2
55108: EQUAL
55109: ST_TO_ADDR
55110: GO 55360
55112: LD_INT 30
55114: DOUBLE
55115: EQUAL
55116: IFTRUE 55120
55118: GO 55145
55120: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55121: LD_ADDR_VAR 0 3
55125: PUSH
55126: LD_INT 20
55128: PPUSH
55129: LD_VAR 0 1
55133: PPUSH
55134: CALL_OW 321
55138: PUSH
55139: LD_INT 2
55141: EQUAL
55142: ST_TO_ADDR
55143: GO 55360
55145: LD_INT 28
55147: DOUBLE
55148: EQUAL
55149: IFTRUE 55159
55151: LD_INT 21
55153: DOUBLE
55154: EQUAL
55155: IFTRUE 55159
55157: GO 55184
55159: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55160: LD_ADDR_VAR 0 3
55164: PUSH
55165: LD_INT 21
55167: PPUSH
55168: LD_VAR 0 1
55172: PPUSH
55173: CALL_OW 321
55177: PUSH
55178: LD_INT 2
55180: EQUAL
55181: ST_TO_ADDR
55182: GO 55360
55184: LD_INT 16
55186: DOUBLE
55187: EQUAL
55188: IFTRUE 55192
55190: GO 55219
55192: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55193: LD_ADDR_VAR 0 3
55197: PUSH
55198: LD_EXP 133
55202: PPUSH
55203: LD_VAR 0 1
55207: PPUSH
55208: CALL_OW 321
55212: PUSH
55213: LD_INT 2
55215: EQUAL
55216: ST_TO_ADDR
55217: GO 55360
55219: LD_INT 19
55221: DOUBLE
55222: EQUAL
55223: IFTRUE 55233
55225: LD_INT 23
55227: DOUBLE
55228: EQUAL
55229: IFTRUE 55233
55231: GO 55260
55233: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55234: LD_ADDR_VAR 0 3
55238: PUSH
55239: LD_EXP 132
55243: PPUSH
55244: LD_VAR 0 1
55248: PPUSH
55249: CALL_OW 321
55253: PUSH
55254: LD_INT 2
55256: EQUAL
55257: ST_TO_ADDR
55258: GO 55360
55260: LD_INT 17
55262: DOUBLE
55263: EQUAL
55264: IFTRUE 55268
55266: GO 55293
55268: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55269: LD_ADDR_VAR 0 3
55273: PUSH
55274: LD_INT 39
55276: PPUSH
55277: LD_VAR 0 1
55281: PPUSH
55282: CALL_OW 321
55286: PUSH
55287: LD_INT 2
55289: EQUAL
55290: ST_TO_ADDR
55291: GO 55360
55293: LD_INT 18
55295: DOUBLE
55296: EQUAL
55297: IFTRUE 55301
55299: GO 55326
55301: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55302: LD_ADDR_VAR 0 3
55306: PUSH
55307: LD_INT 40
55309: PPUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 321
55319: PUSH
55320: LD_INT 2
55322: EQUAL
55323: ST_TO_ADDR
55324: GO 55360
55326: LD_INT 27
55328: DOUBLE
55329: EQUAL
55330: IFTRUE 55334
55332: GO 55359
55334: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55335: LD_ADDR_VAR 0 3
55339: PUSH
55340: LD_INT 35
55342: PPUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: CALL_OW 321
55352: PUSH
55353: LD_INT 2
55355: EQUAL
55356: ST_TO_ADDR
55357: GO 55360
55359: POP
// end ;
55360: LD_VAR 0 3
55364: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55365: LD_INT 0
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
// result := false ;
55378: LD_ADDR_VAR 0 6
55382: PUSH
55383: LD_INT 0
55385: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55386: LD_VAR 0 1
55390: NOT
55391: PUSH
55392: LD_VAR 0 1
55396: PPUSH
55397: CALL_OW 266
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: IN
55412: NOT
55413: OR
55414: PUSH
55415: LD_VAR 0 2
55419: NOT
55420: OR
55421: PUSH
55422: LD_VAR 0 5
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: LD_INT 4
55441: PUSH
55442: LD_INT 5
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: IN
55453: NOT
55454: OR
55455: PUSH
55456: LD_VAR 0 3
55460: PPUSH
55461: LD_VAR 0 4
55465: PPUSH
55466: CALL_OW 488
55470: NOT
55471: OR
55472: IFFALSE 55476
// exit ;
55474: GO 56212
// side := GetSide ( depot ) ;
55476: LD_ADDR_VAR 0 9
55480: PUSH
55481: LD_VAR 0 1
55485: PPUSH
55486: CALL_OW 255
55490: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55491: LD_VAR 0 9
55495: PPUSH
55496: LD_VAR 0 2
55500: PPUSH
55501: CALL 54985 0 2
55505: NOT
55506: IFFALSE 55510
// exit ;
55508: GO 56212
// pom := GetBase ( depot ) ;
55510: LD_ADDR_VAR 0 10
55514: PUSH
55515: LD_VAR 0 1
55519: PPUSH
55520: CALL_OW 274
55524: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55525: LD_ADDR_VAR 0 11
55529: PUSH
55530: LD_VAR 0 2
55534: PPUSH
55535: LD_VAR 0 1
55539: PPUSH
55540: CALL_OW 248
55544: PPUSH
55545: CALL_OW 450
55549: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55550: LD_VAR 0 10
55554: PPUSH
55555: LD_INT 1
55557: PPUSH
55558: CALL_OW 275
55562: PUSH
55563: LD_VAR 0 11
55567: PUSH
55568: LD_INT 1
55570: ARRAY
55571: GREATEREQUAL
55572: PUSH
55573: LD_VAR 0 10
55577: PPUSH
55578: LD_INT 2
55580: PPUSH
55581: CALL_OW 275
55585: PUSH
55586: LD_VAR 0 11
55590: PUSH
55591: LD_INT 2
55593: ARRAY
55594: GREATEREQUAL
55595: AND
55596: PUSH
55597: LD_VAR 0 10
55601: PPUSH
55602: LD_INT 3
55604: PPUSH
55605: CALL_OW 275
55609: PUSH
55610: LD_VAR 0 11
55614: PUSH
55615: LD_INT 3
55617: ARRAY
55618: GREATEREQUAL
55619: AND
55620: NOT
55621: IFFALSE 55625
// exit ;
55623: GO 56212
// if GetBType ( depot ) = b_depot then
55625: LD_VAR 0 1
55629: PPUSH
55630: CALL_OW 266
55634: PUSH
55635: LD_INT 0
55637: EQUAL
55638: IFFALSE 55650
// dist := 28 else
55640: LD_ADDR_VAR 0 14
55644: PUSH
55645: LD_INT 28
55647: ST_TO_ADDR
55648: GO 55658
// dist := 36 ;
55650: LD_ADDR_VAR 0 14
55654: PUSH
55655: LD_INT 36
55657: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55658: LD_VAR 0 1
55662: PPUSH
55663: LD_VAR 0 3
55667: PPUSH
55668: LD_VAR 0 4
55672: PPUSH
55673: CALL_OW 297
55677: PUSH
55678: LD_VAR 0 14
55682: GREATER
55683: IFFALSE 55687
// exit ;
55685: GO 56212
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55687: LD_ADDR_VAR 0 12
55691: PUSH
55692: LD_VAR 0 2
55696: PPUSH
55697: LD_VAR 0 3
55701: PPUSH
55702: LD_VAR 0 4
55706: PPUSH
55707: LD_VAR 0 5
55711: PPUSH
55712: LD_VAR 0 1
55716: PPUSH
55717: CALL_OW 248
55721: PPUSH
55722: LD_INT 0
55724: PPUSH
55725: CALL 56217 0 6
55729: ST_TO_ADDR
// if not hexes then
55730: LD_VAR 0 12
55734: NOT
55735: IFFALSE 55739
// exit ;
55737: GO 56212
// hex := GetHexInfo ( x , y ) ;
55739: LD_ADDR_VAR 0 15
55743: PUSH
55744: LD_VAR 0 3
55748: PPUSH
55749: LD_VAR 0 4
55753: PPUSH
55754: CALL_OW 546
55758: ST_TO_ADDR
// if hex [ 1 ] then
55759: LD_VAR 0 15
55763: PUSH
55764: LD_INT 1
55766: ARRAY
55767: IFFALSE 55771
// exit ;
55769: GO 56212
// height := hex [ 2 ] ;
55771: LD_ADDR_VAR 0 13
55775: PUSH
55776: LD_VAR 0 15
55780: PUSH
55781: LD_INT 2
55783: ARRAY
55784: ST_TO_ADDR
// for i = 1 to hexes do
55785: LD_ADDR_VAR 0 7
55789: PUSH
55790: DOUBLE
55791: LD_INT 1
55793: DEC
55794: ST_TO_ADDR
55795: LD_VAR 0 12
55799: PUSH
55800: FOR_TO
55801: IFFALSE 56131
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55803: LD_VAR 0 12
55807: PUSH
55808: LD_VAR 0 7
55812: ARRAY
55813: PUSH
55814: LD_INT 1
55816: ARRAY
55817: PPUSH
55818: LD_VAR 0 12
55822: PUSH
55823: LD_VAR 0 7
55827: ARRAY
55828: PUSH
55829: LD_INT 2
55831: ARRAY
55832: PPUSH
55833: CALL_OW 488
55837: NOT
55838: PUSH
55839: LD_VAR 0 12
55843: PUSH
55844: LD_VAR 0 7
55848: ARRAY
55849: PUSH
55850: LD_INT 1
55852: ARRAY
55853: PPUSH
55854: LD_VAR 0 12
55858: PUSH
55859: LD_VAR 0 7
55863: ARRAY
55864: PUSH
55865: LD_INT 2
55867: ARRAY
55868: PPUSH
55869: CALL_OW 428
55873: PUSH
55874: LD_INT 0
55876: GREATER
55877: OR
55878: PUSH
55879: LD_VAR 0 12
55883: PUSH
55884: LD_VAR 0 7
55888: ARRAY
55889: PUSH
55890: LD_INT 1
55892: ARRAY
55893: PPUSH
55894: LD_VAR 0 12
55898: PUSH
55899: LD_VAR 0 7
55903: ARRAY
55904: PUSH
55905: LD_INT 2
55907: ARRAY
55908: PPUSH
55909: CALL_OW 351
55913: OR
55914: IFFALSE 55920
// exit ;
55916: POP
55917: POP
55918: GO 56212
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55920: LD_ADDR_VAR 0 8
55924: PUSH
55925: LD_VAR 0 12
55929: PUSH
55930: LD_VAR 0 7
55934: ARRAY
55935: PUSH
55936: LD_INT 1
55938: ARRAY
55939: PPUSH
55940: LD_VAR 0 12
55944: PUSH
55945: LD_VAR 0 7
55949: ARRAY
55950: PUSH
55951: LD_INT 2
55953: ARRAY
55954: PPUSH
55955: CALL_OW 546
55959: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55960: LD_VAR 0 8
55964: PUSH
55965: LD_INT 1
55967: ARRAY
55968: PUSH
55969: LD_VAR 0 8
55973: PUSH
55974: LD_INT 2
55976: ARRAY
55977: PUSH
55978: LD_VAR 0 13
55982: PUSH
55983: LD_INT 2
55985: PLUS
55986: GREATER
55987: OR
55988: PUSH
55989: LD_VAR 0 8
55993: PUSH
55994: LD_INT 2
55996: ARRAY
55997: PUSH
55998: LD_VAR 0 13
56002: PUSH
56003: LD_INT 2
56005: MINUS
56006: LESS
56007: OR
56008: PUSH
56009: LD_VAR 0 8
56013: PUSH
56014: LD_INT 3
56016: ARRAY
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 8
56023: PUSH
56024: LD_INT 9
56026: PUSH
56027: LD_INT 10
56029: PUSH
56030: LD_INT 11
56032: PUSH
56033: LD_INT 12
56035: PUSH
56036: LD_INT 13
56038: PUSH
56039: LD_INT 16
56041: PUSH
56042: LD_INT 17
56044: PUSH
56045: LD_INT 18
56047: PUSH
56048: LD_INT 19
56050: PUSH
56051: LD_INT 20
56053: PUSH
56054: LD_INT 21
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: IN
56072: NOT
56073: OR
56074: PUSH
56075: LD_VAR 0 8
56079: PUSH
56080: LD_INT 5
56082: ARRAY
56083: NOT
56084: OR
56085: PUSH
56086: LD_VAR 0 8
56090: PUSH
56091: LD_INT 6
56093: ARRAY
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 7
56103: PUSH
56104: LD_INT 9
56106: PUSH
56107: LD_INT 10
56109: PUSH
56110: LD_INT 11
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: IN
56121: NOT
56122: OR
56123: IFFALSE 56129
// exit ;
56125: POP
56126: POP
56127: GO 56212
// end ;
56129: GO 55800
56131: POP
56132: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56133: LD_VAR 0 9
56137: PPUSH
56138: LD_VAR 0 3
56142: PPUSH
56143: LD_VAR 0 4
56147: PPUSH
56148: LD_INT 20
56150: PPUSH
56151: CALL 48158 0 4
56155: PUSH
56156: LD_INT 4
56158: ARRAY
56159: IFFALSE 56163
// exit ;
56161: GO 56212
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56163: LD_VAR 0 2
56167: PUSH
56168: LD_INT 29
56170: PUSH
56171: LD_INT 30
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: IN
56178: PUSH
56179: LD_VAR 0 3
56183: PPUSH
56184: LD_VAR 0 4
56188: PPUSH
56189: LD_VAR 0 9
56193: PPUSH
56194: CALL_OW 440
56198: NOT
56199: AND
56200: IFFALSE 56204
// exit ;
56202: GO 56212
// result := true ;
56204: LD_ADDR_VAR 0 6
56208: PUSH
56209: LD_INT 1
56211: ST_TO_ADDR
// end ;
56212: LD_VAR 0 6
56216: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56217: LD_INT 0
56219: PPUSH
56220: PPUSH
56221: PPUSH
56222: PPUSH
56223: PPUSH
56224: PPUSH
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
56229: PPUSH
56230: PPUSH
56231: PPUSH
56232: PPUSH
56233: PPUSH
56234: PPUSH
56235: PPUSH
56236: PPUSH
56237: PPUSH
56238: PPUSH
56239: PPUSH
56240: PPUSH
56241: PPUSH
56242: PPUSH
56243: PPUSH
56244: PPUSH
56245: PPUSH
56246: PPUSH
56247: PPUSH
56248: PPUSH
56249: PPUSH
56250: PPUSH
56251: PPUSH
56252: PPUSH
56253: PPUSH
56254: PPUSH
56255: PPUSH
56256: PPUSH
56257: PPUSH
56258: PPUSH
56259: PPUSH
56260: PPUSH
56261: PPUSH
56262: PPUSH
56263: PPUSH
56264: PPUSH
56265: PPUSH
56266: PPUSH
56267: PPUSH
56268: PPUSH
56269: PPUSH
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
// result = [ ] ;
56277: LD_ADDR_VAR 0 7
56281: PUSH
56282: EMPTY
56283: ST_TO_ADDR
// temp_list = [ ] ;
56284: LD_ADDR_VAR 0 9
56288: PUSH
56289: EMPTY
56290: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56291: LD_VAR 0 4
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: LD_INT 4
56310: PUSH
56311: LD_INT 5
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: IN
56322: NOT
56323: PUSH
56324: LD_VAR 0 1
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: IN
56339: PUSH
56340: LD_VAR 0 5
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: IN
56359: NOT
56360: AND
56361: OR
56362: IFFALSE 56366
// exit ;
56364: GO 74757
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56366: LD_VAR 0 1
56370: PUSH
56371: LD_INT 6
56373: PUSH
56374: LD_INT 7
56376: PUSH
56377: LD_INT 8
56379: PUSH
56380: LD_INT 13
56382: PUSH
56383: LD_INT 12
56385: PUSH
56386: LD_INT 15
56388: PUSH
56389: LD_INT 11
56391: PUSH
56392: LD_INT 14
56394: PUSH
56395: LD_INT 10
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: IN
56409: IFFALSE 56419
// btype = b_lab ;
56411: LD_ADDR_VAR 0 1
56415: PUSH
56416: LD_INT 6
56418: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56419: LD_VAR 0 6
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: IN
56438: NOT
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: LD_INT 6
56459: PUSH
56460: LD_INT 36
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: LD_INT 31
56471: PUSH
56472: LD_INT 32
56474: PUSH
56475: LD_INT 33
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: IN
56491: NOT
56492: PUSH
56493: LD_VAR 0 6
56497: PUSH
56498: LD_INT 1
56500: EQUAL
56501: AND
56502: OR
56503: PUSH
56504: LD_VAR 0 1
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: IN
56519: NOT
56520: PUSH
56521: LD_VAR 0 6
56525: PUSH
56526: LD_INT 2
56528: EQUAL
56529: AND
56530: OR
56531: IFFALSE 56541
// mode = 0 ;
56533: LD_ADDR_VAR 0 6
56537: PUSH
56538: LD_INT 0
56540: ST_TO_ADDR
// case mode of 0 :
56541: LD_VAR 0 6
56545: PUSH
56546: LD_INT 0
56548: DOUBLE
56549: EQUAL
56550: IFTRUE 56554
56552: GO 68007
56554: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56555: LD_ADDR_VAR 0 11
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56748: LD_ADDR_VAR 0 12
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56944: LD_ADDR_VAR 0 13
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57143: LD_ADDR_VAR 0 14
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57339: LD_ADDR_VAR 0 15
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57532: LD_ADDR_VAR 0 16
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57725: LD_ADDR_VAR 0 17
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57955: LD_ADDR_VAR 0 18
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 2
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58185: LD_ADDR_VAR 0 19
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58415: LD_ADDR_VAR 0 20
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58645: LD_ADDR_VAR 0 21
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58875: LD_ADDR_VAR 0 22
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59105: LD_ADDR_VAR 0 23
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59385: LD_ADDR_VAR 0 24
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59661: LD_ADDR_VAR 0 25
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 3
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 3
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59935: LD_ADDR_VAR 0 26
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60211: LD_ADDR_VAR 0 27
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60491: LD_ADDR_VAR 0 28
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: NEG
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60773: LD_ADDR_VAR 0 29
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 3
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61052: LD_ADDR_VAR 0 30
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: LD_INT 3
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61330: LD_ADDR_VAR 0 31
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61608: LD_ADDR_VAR 0 32
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61886: LD_ADDR_VAR 0 33
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 3
62130: NEG
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62165: LD_ADDR_VAR 0 34
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 2
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62445: LD_ADDR_VAR 0 35
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62557: LD_ADDR_VAR 0 36
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62669: LD_ADDR_VAR 0 37
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62781: LD_ADDR_VAR 0 38
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62893: LD_ADDR_VAR 0 39
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63005: LD_ADDR_VAR 0 40
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63117: LD_ADDR_VAR 0 41
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 1
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: LD_INT 2
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: LD_INT 3
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 3
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: PUSH
63361: LD_INT 3
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 3
63414: NEG
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 3
63426: NEG
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63467: LD_ADDR_VAR 0 42
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 3
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 3
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: LD_INT 3
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63817: LD_ADDR_VAR 0 43
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: LD_INT 3
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 2
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 3
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: NEG
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: NEG
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64165: LD_ADDR_VAR 0 44
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 3
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 3
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 3
64474: NEG
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64515: LD_ADDR_VAR 0 45
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: LD_INT 3
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 3
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 2
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: LD_INT 3
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 3
64812: NEG
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64865: LD_ADDR_VAR 0 46
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 2
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: LD_INT 3
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: LD_INT 2
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 3
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 3
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65213: LD_ADDR_VAR 0 47
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: LD_INT 2
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: LD_INT 2
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: NEG
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65364: LD_ADDR_VAR 0 48
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 2
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65511: LD_ADDR_VAR 0 49
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 2
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65655: LD_ADDR_VAR 0 50
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65799: LD_ADDR_VAR 0 51
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 2
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65946: LD_ADDR_VAR 0 52
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: NEG
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66097: LD_ADDR_VAR 0 53
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: NEG
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: LD_INT 2
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: LD_INT 1
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: NEG
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66327: LD_ADDR_VAR 0 54
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 2
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 2
66526: NEG
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66557: LD_ADDR_VAR 0 55
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 1
66577: NEG
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: LD_INT 2
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 2
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 2
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: LD_INT 2
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: LD_INT 2
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: NEG
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 2
66744: NEG
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 2
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66787: LD_ADDR_VAR 0 56
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 2
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 2
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 2
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 2
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 2
66963: NEG
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 2
66986: NEG
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67017: LD_ADDR_VAR 0 57
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 1
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 2
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: PUSH
67153: LD_INT 2
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67247: LD_ADDR_VAR 0 58
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: LD_INT 1
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: NEG
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: LD_INT 2
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 2
67423: NEG
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 2
67446: NEG
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67477: LD_ADDR_VAR 0 59
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 1
67546: NEG
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67565: LD_ADDR_VAR 0 60
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 1
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67653: LD_ADDR_VAR 0 61
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 0
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 1
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 1
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67741: LD_ADDR_VAR 0 62
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 1
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: LD_INT 1
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67829: LD_ADDR_VAR 0 63
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 1
67887: NEG
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67917: LD_ADDR_VAR 0 64
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: ST_TO_ADDR
// end ; 1 :
68005: GO 73902
68007: LD_INT 1
68009: DOUBLE
68010: EQUAL
68011: IFTRUE 68015
68013: GO 70638
68015: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68016: LD_ADDR_VAR 0 11
68020: PUSH
68021: LD_INT 1
68023: NEG
68024: PUSH
68025: LD_INT 3
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: LIST
68059: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68060: LD_ADDR_VAR 0 12
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 1
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: LD_INT 1
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68101: LD_ADDR_VAR 0 13
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68141: LD_ADDR_VAR 0 14
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68182: LD_ADDR_VAR 0 15
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 3
68200: NEG
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: LIST
68225: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68226: LD_ADDR_VAR 0 16
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68272: LD_ADDR_VAR 0 17
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: LD_INT 3
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: LD_INT 3
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 1
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: LIST
68315: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68316: LD_ADDR_VAR 0 18
68320: PUSH
68321: LD_INT 2
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: LIST
68356: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68357: LD_ADDR_VAR 0 19
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68397: LD_ADDR_VAR 0 20
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: NEG
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: LIST
68437: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68438: LD_ADDR_VAR 0 21
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 3
68456: NEG
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 3
68467: NEG
68468: PUSH
68469: LD_INT 1
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68482: LD_ADDR_VAR 0 22
68486: PUSH
68487: LD_INT 2
68489: NEG
68490: PUSH
68491: LD_INT 3
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 3
68501: NEG
68502: PUSH
68503: LD_INT 2
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 3
68513: NEG
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68528: LD_ADDR_VAR 0 23
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: LD_INT 3
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68572: LD_ADDR_VAR 0 24
68576: PUSH
68577: LD_INT 3
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: LD_INT 1
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 4
68600: PUSH
68601: LD_INT 1
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: LIST
68612: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68613: LD_ADDR_VAR 0 25
68617: PUSH
68618: LD_INT 3
68620: PUSH
68621: LD_INT 3
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 4
68630: PUSH
68631: LD_INT 3
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: LD_INT 4
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68653: LD_ADDR_VAR 0 26
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: LD_INT 4
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: LIST
68693: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68694: LD_ADDR_VAR 0 27
68698: PUSH
68699: LD_INT 3
68701: NEG
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: LD_INT 1
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 4
68723: NEG
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: LIST
68737: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68738: LD_ADDR_VAR 0 28
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: LD_INT 3
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: LD_INT 4
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 4
68769: NEG
68770: PUSH
68771: LD_INT 3
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: LIST
68783: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68784: LD_ADDR_VAR 0 29
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: LD_INT 3
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: LD_INT 2
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: LD_INT 4
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: LD_INT 4
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: PUSH
68849: LD_INT 3
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: LD_INT 5
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: LD_INT 5
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: LD_INT 4
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: LD_INT 6
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: LD_INT 6
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: LD_INT 5
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68939: LD_ADDR_VAR 0 30
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 3
68957: PUSH
68958: LD_INT 0
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 3
68967: PUSH
68968: LD_INT 1
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 4
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 4
69008: PUSH
69009: LD_INT 1
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 5
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 5
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 5
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 6
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 6
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69082: LD_ADDR_VAR 0 31
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: LD_INT 2
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 3
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 2
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 4
69119: PUSH
69120: LD_INT 3
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 4
69129: PUSH
69130: LD_INT 4
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: PUSH
69140: LD_INT 4
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 5
69149: PUSH
69150: LD_INT 4
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 5
69159: PUSH
69160: LD_INT 5
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 4
69169: PUSH
69170: LD_INT 5
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 6
69179: PUSH
69180: LD_INT 5
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 6
69189: PUSH
69190: LD_INT 6
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 5
69199: PUSH
69200: LD_INT 6
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69221: LD_ADDR_VAR 0 32
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 3
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: NEG
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 4
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: LD_INT 5
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 5
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 1
69310: NEG
69311: PUSH
69312: LD_INT 4
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 6
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 6
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: LD_INT 5
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69364: LD_ADDR_VAR 0 33
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 3
69393: NEG
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: NEG
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 4
69427: NEG
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 4
69439: NEG
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 5
69450: NEG
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 5
69461: NEG
69462: PUSH
69463: LD_INT 1
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 5
69473: NEG
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 6
69484: NEG
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 6
69495: NEG
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69519: LD_ADDR_VAR 0 34
69523: PUSH
69524: LD_INT 2
69526: NEG
69527: PUSH
69528: LD_INT 3
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 3
69538: NEG
69539: PUSH
69540: LD_INT 2
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: NEG
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: LD_INT 4
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 3
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 4
69598: NEG
69599: PUSH
69600: LD_INT 5
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 5
69610: NEG
69611: PUSH
69612: LD_INT 4
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: NEG
69623: PUSH
69624: LD_INT 5
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 5
69634: NEG
69635: PUSH
69636: LD_INT 6
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 6
69646: NEG
69647: PUSH
69648: LD_INT 5
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 6
69658: NEG
69659: PUSH
69660: LD_INT 6
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69682: LD_ADDR_VAR 0 41
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: LD_INT 2
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: LD_INT 2
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69726: LD_ADDR_VAR 0 42
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: LD_INT 1
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: LIST
69766: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69767: LD_ADDR_VAR 0 43
69771: PUSH
69772: LD_INT 2
69774: PUSH
69775: LD_INT 2
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 3
69784: PUSH
69785: LD_INT 2
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: LD_INT 3
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: LIST
69806: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69807: LD_ADDR_VAR 0 44
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 2
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 1
69824: PUSH
69825: LD_INT 3
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 1
69834: NEG
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: LIST
69847: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69848: LD_ADDR_VAR 0 45
69852: PUSH
69853: LD_INT 2
69855: NEG
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 2
69866: NEG
69867: PUSH
69868: LD_INT 1
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 3
69877: NEG
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: LIST
69891: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69892: LD_ADDR_VAR 0 46
69896: PUSH
69897: LD_INT 2
69899: NEG
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 2
69911: NEG
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 3
69923: NEG
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: LIST
69937: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69938: LD_ADDR_VAR 0 47
69942: PUSH
69943: LD_INT 2
69945: NEG
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 1
69957: NEG
69958: PUSH
69959: LD_INT 3
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69971: LD_ADDR_VAR 0 48
69975: PUSH
69976: LD_INT 1
69978: PUSH
69979: LD_INT 2
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70002: LD_ADDR_VAR 0 49
70006: PUSH
70007: LD_INT 3
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 3
70019: PUSH
70020: LD_INT 2
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70031: LD_ADDR_VAR 0 50
70035: PUSH
70036: LD_INT 2
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 1
70048: PUSH
70049: LD_INT 3
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70060: LD_ADDR_VAR 0 51
70064: PUSH
70065: LD_INT 1
70067: NEG
70068: PUSH
70069: LD_INT 2
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 2
70078: NEG
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70091: LD_ADDR_VAR 0 52
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 3
70110: NEG
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70124: LD_ADDR_VAR 0 53
70128: PUSH
70129: LD_INT 1
70131: NEG
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 3
70146: NEG
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: LD_INT 2
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: LIST
70167: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70168: LD_ADDR_VAR 0 54
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 1
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 3
70196: PUSH
70197: LD_INT 1
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: LIST
70208: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70209: LD_ADDR_VAR 0 55
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: LD_INT 2
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 3
70226: PUSH
70227: LD_INT 3
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 2
70236: PUSH
70237: LD_INT 3
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70249: LD_ADDR_VAR 0 56
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: LD_INT 3
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 0
70266: PUSH
70267: LD_INT 3
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70290: LD_ADDR_VAR 0 57
70294: PUSH
70295: LD_INT 2
70297: NEG
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: LD_INT 0
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 3
70319: NEG
70320: PUSH
70321: LD_INT 1
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: LIST
70333: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70334: LD_ADDR_VAR 0 58
70338: PUSH
70339: LD_INT 2
70341: NEG
70342: PUSH
70343: LD_INT 3
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 3
70353: NEG
70354: PUSH
70355: LD_INT 2
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 3
70365: NEG
70366: PUSH
70367: LD_INT 3
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: LIST
70379: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70380: LD_ADDR_VAR 0 59
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: LD_INT 2
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 0
70399: PUSH
70400: LD_INT 2
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: LIST
70423: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70424: LD_ADDR_VAR 0 60
70428: PUSH
70429: LD_INT 1
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 2
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 2
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70465: LD_ADDR_VAR 0 61
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 2
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70505: LD_ADDR_VAR 0 62
70509: PUSH
70510: LD_INT 1
70512: PUSH
70513: LD_INT 2
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 1
70532: NEG
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: LIST
70545: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70546: LD_ADDR_VAR 0 63
70550: PUSH
70551: LD_INT 1
70553: NEG
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 2
70564: NEG
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: LD_INT 1
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: LIST
70589: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70590: LD_ADDR_VAR 0 64
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: LD_INT 2
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 2
70609: NEG
70610: PUSH
70611: LD_INT 1
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: LD_INT 2
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: LIST
70635: ST_TO_ADDR
// end ; 2 :
70636: GO 73902
70638: LD_INT 2
70640: DOUBLE
70641: EQUAL
70642: IFTRUE 70646
70644: GO 73901
70646: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70647: LD_ADDR_VAR 0 29
70651: PUSH
70652: LD_INT 4
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 4
70664: PUSH
70665: LD_INT 1
70667: NEG
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 5
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 5
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 4
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 3
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: LD_INT 1
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 3
70726: PUSH
70727: LD_INT 2
70729: NEG
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 5
70737: PUSH
70738: LD_INT 2
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: LD_INT 3
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 3
70757: PUSH
70758: LD_INT 2
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: PUSH
70778: LD_INT 4
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 3
70787: PUSH
70788: LD_INT 4
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 2
70797: PUSH
70798: LD_INT 3
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: LD_INT 2
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 4
70817: PUSH
70818: LD_INT 2
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 2
70827: PUSH
70828: LD_INT 4
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: LD_INT 4
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: LD_INT 3
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: LD_INT 4
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 5
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: LD_INT 5
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: NEG
70888: PUSH
70889: LD_INT 4
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 1
70898: NEG
70899: PUSH
70900: LD_INT 3
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 2
70909: PUSH
70910: LD_INT 5
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 2
70919: NEG
70920: PUSH
70921: LD_INT 3
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 3
70941: NEG
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 2
70953: NEG
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 2
70964: NEG
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 3
70975: NEG
70976: PUSH
70977: LD_INT 1
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 4
70986: NEG
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 4
70997: NEG
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 4
71009: NEG
71010: PUSH
71011: LD_INT 2
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 2
71021: NEG
71022: PUSH
71023: LD_INT 2
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 4
71032: NEG
71033: PUSH
71034: LD_INT 4
71036: NEG
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 4
71044: NEG
71045: PUSH
71046: LD_INT 5
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 3
71056: NEG
71057: PUSH
71058: LD_INT 4
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 3
71068: NEG
71069: PUSH
71070: LD_INT 3
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 4
71080: NEG
71081: PUSH
71082: LD_INT 3
71084: NEG
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 5
71092: NEG
71093: PUSH
71094: LD_INT 4
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 5
71104: NEG
71105: PUSH
71106: LD_INT 5
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: NEG
71117: PUSH
71118: LD_INT 5
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 5
71128: NEG
71129: PUSH
71130: LD_INT 3
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71185: LD_ADDR_VAR 0 30
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: LD_INT 4
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 4
71202: PUSH
71203: LD_INT 3
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 5
71212: PUSH
71213: LD_INT 4
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 5
71222: PUSH
71223: LD_INT 5
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: LD_INT 5
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 3
71242: PUSH
71243: LD_INT 4
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 3
71252: PUSH
71253: LD_INT 3
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 5
71262: PUSH
71263: LD_INT 3
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: LD_INT 5
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 0
71282: PUSH
71283: LD_INT 3
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 0
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 1
71302: PUSH
71303: LD_INT 3
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: LD_INT 4
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 0
71322: PUSH
71323: LD_INT 4
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 1
71332: NEG
71333: PUSH
71334: LD_INT 3
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 1
71343: NEG
71344: PUSH
71345: LD_INT 2
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 2
71354: PUSH
71355: LD_INT 4
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 2
71364: NEG
71365: PUSH
71366: LD_INT 2
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 4
71375: NEG
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 4
71386: NEG
71387: PUSH
71388: LD_INT 1
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 3
71398: NEG
71399: PUSH
71400: LD_INT 0
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 3
71409: NEG
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 4
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 5
71431: NEG
71432: PUSH
71433: LD_INT 0
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 5
71442: NEG
71443: PUSH
71444: LD_INT 1
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 5
71454: NEG
71455: PUSH
71456: LD_INT 2
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 3
71466: NEG
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: NEG
71478: PUSH
71479: LD_INT 3
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 3
71489: NEG
71490: PUSH
71491: LD_INT 4
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 2
71501: NEG
71502: PUSH
71503: LD_INT 3
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 2
71513: NEG
71514: PUSH
71515: LD_INT 2
71517: NEG
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 3
71525: NEG
71526: PUSH
71527: LD_INT 2
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 4
71537: NEG
71538: PUSH
71539: LD_INT 3
71541: NEG
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: NEG
71550: PUSH
71551: LD_INT 4
71553: NEG
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 2
71561: NEG
71562: PUSH
71563: LD_INT 4
71565: NEG
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 4
71573: NEG
71574: PUSH
71575: LD_INT 2
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 4
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: LD_INT 5
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 1
71607: PUSH
71608: LD_INT 4
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: PUSH
71619: LD_INT 3
71621: NEG
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 3
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 1
71640: NEG
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 1
71652: NEG
71653: PUSH
71654: LD_INT 5
71656: NEG
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 2
71664: PUSH
71665: LD_INT 3
71667: NEG
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: NEG
71676: PUSH
71677: LD_INT 5
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71732: LD_ADDR_VAR 0 31
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 0
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 1
71759: PUSH
71760: LD_INT 4
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 1
71769: PUSH
71770: LD_INT 5
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: LD_INT 5
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 4
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 1
71800: NEG
71801: PUSH
71802: LD_INT 3
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: LD_INT 5
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 2
71821: NEG
71822: PUSH
71823: LD_INT 3
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 3
71832: NEG
71833: PUSH
71834: LD_INT 0
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 3
71843: NEG
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: NEG
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: NEG
71867: PUSH
71868: LD_INT 1
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: LD_INT 1
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 4
71888: NEG
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: NEG
71900: PUSH
71901: LD_INT 1
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 4
71911: NEG
71912: PUSH
71913: LD_INT 2
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 2
71923: NEG
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 4
71934: NEG
71935: PUSH
71936: LD_INT 4
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 4
71946: NEG
71947: PUSH
71948: LD_INT 5
71950: NEG
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 3
71958: NEG
71959: PUSH
71960: LD_INT 4
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 3
71970: NEG
71971: PUSH
71972: LD_INT 3
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: NEG
71983: PUSH
71984: LD_INT 3
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 5
71994: NEG
71995: PUSH
71996: LD_INT 4
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 5
72006: NEG
72007: PUSH
72008: LD_INT 5
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: NEG
72019: PUSH
72020: LD_INT 5
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 5
72030: NEG
72031: PUSH
72032: LD_INT 3
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 0
72042: PUSH
72043: LD_INT 3
72045: NEG
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 0
72053: PUSH
72054: LD_INT 4
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 1
72064: PUSH
72065: LD_INT 3
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 1
72075: PUSH
72076: LD_INT 2
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 2
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 1
72097: NEG
72098: PUSH
72099: LD_INT 3
72101: NEG
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 1
72109: NEG
72110: PUSH
72111: LD_INT 4
72113: NEG
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 2
72121: PUSH
72122: LD_INT 2
72124: NEG
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 2
72132: NEG
72133: PUSH
72134: LD_INT 4
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 4
72154: PUSH
72155: LD_INT 1
72157: NEG
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 5
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 5
72175: PUSH
72176: LD_INT 1
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 4
72185: PUSH
72186: LD_INT 1
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 3
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 3
72205: PUSH
72206: LD_INT 1
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 3
72216: PUSH
72217: LD_INT 2
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 5
72227: PUSH
72228: LD_INT 2
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72282: LD_ADDR_VAR 0 32
72286: PUSH
72287: LD_INT 4
72289: NEG
72290: PUSH
72291: LD_INT 0
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 4
72300: NEG
72301: PUSH
72302: LD_INT 1
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 3
72312: NEG
72313: PUSH
72314: LD_INT 0
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 3
72323: NEG
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 4
72334: NEG
72335: PUSH
72336: LD_INT 1
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 5
72345: NEG
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 5
72356: NEG
72357: PUSH
72358: LD_INT 1
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 5
72368: NEG
72369: PUSH
72370: LD_INT 2
72372: NEG
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 3
72380: NEG
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 3
72391: NEG
72392: PUSH
72393: LD_INT 3
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 3
72403: NEG
72404: PUSH
72405: LD_INT 4
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 2
72415: NEG
72416: PUSH
72417: LD_INT 3
72419: NEG
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 2
72427: NEG
72428: PUSH
72429: LD_INT 2
72431: NEG
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 3
72439: NEG
72440: PUSH
72441: LD_INT 2
72443: NEG
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 4
72451: NEG
72452: PUSH
72453: LD_INT 3
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 4
72463: NEG
72464: PUSH
72465: LD_INT 4
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 2
72475: NEG
72476: PUSH
72477: LD_INT 4
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 4
72487: NEG
72488: PUSH
72489: LD_INT 2
72491: NEG
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: LD_INT 4
72502: NEG
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 0
72510: PUSH
72511: LD_INT 5
72513: NEG
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 1
72521: PUSH
72522: LD_INT 4
72524: NEG
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: LD_INT 3
72535: NEG
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: LD_INT 3
72546: NEG
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 1
72554: NEG
72555: PUSH
72556: LD_INT 4
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: LD_INT 5
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 2
72578: PUSH
72579: LD_INT 3
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: LD_INT 5
72593: NEG
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 3
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 3
72611: PUSH
72612: LD_INT 1
72614: NEG
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 4
72622: PUSH
72623: LD_INT 0
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 4
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 3
72642: PUSH
72643: LD_INT 1
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 2
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 2
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 2
72673: PUSH
72674: LD_INT 2
72676: NEG
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 4
72684: PUSH
72685: LD_INT 2
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 4
72694: PUSH
72695: LD_INT 4
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 4
72704: PUSH
72705: LD_INT 3
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 5
72714: PUSH
72715: LD_INT 4
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 5
72724: PUSH
72725: LD_INT 5
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 4
72734: PUSH
72735: LD_INT 5
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 3
72744: PUSH
72745: LD_INT 4
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 3
72754: PUSH
72755: LD_INT 3
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 5
72764: PUSH
72765: LD_INT 3
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 3
72774: PUSH
72775: LD_INT 5
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72829: LD_ADDR_VAR 0 33
72833: PUSH
72834: LD_INT 4
72836: NEG
72837: PUSH
72838: LD_INT 4
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 4
72848: NEG
72849: PUSH
72850: LD_INT 5
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 3
72860: NEG
72861: PUSH
72862: LD_INT 4
72864: NEG
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 3
72872: NEG
72873: PUSH
72874: LD_INT 3
72876: NEG
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 4
72884: NEG
72885: PUSH
72886: LD_INT 3
72888: NEG
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 5
72896: NEG
72897: PUSH
72898: LD_INT 4
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 5
72908: NEG
72909: PUSH
72910: LD_INT 5
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: NEG
72921: PUSH
72922: LD_INT 5
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 5
72932: NEG
72933: PUSH
72934: LD_INT 3
72936: NEG
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 0
72944: PUSH
72945: LD_INT 3
72947: NEG
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: LD_INT 4
72958: NEG
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: LD_INT 3
72969: NEG
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 1
72977: PUSH
72978: LD_INT 2
72980: NEG
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 0
72988: PUSH
72989: LD_INT 2
72991: NEG
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 1
72999: NEG
73000: PUSH
73001: LD_INT 3
73003: NEG
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 1
73011: NEG
73012: PUSH
73013: LD_INT 4
73015: NEG
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: LD_INT 2
73026: NEG
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 2
73034: NEG
73035: PUSH
73036: LD_INT 4
73038: NEG
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 4
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 4
73056: PUSH
73057: LD_INT 1
73059: NEG
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 5
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 5
73077: PUSH
73078: LD_INT 1
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 4
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 3
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 3
73107: PUSH
73108: LD_INT 1
73110: NEG
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 3
73118: PUSH
73119: LD_INT 2
73121: NEG
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 5
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 3
73139: PUSH
73140: LD_INT 3
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 3
73149: PUSH
73150: LD_INT 2
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 4
73159: PUSH
73160: LD_INT 3
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 4
73169: PUSH
73170: LD_INT 4
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PUSH
73177: LD_INT 3
73179: PUSH
73180: LD_INT 4
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 2
73189: PUSH
73190: LD_INT 3
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 2
73199: PUSH
73200: LD_INT 2
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 4
73209: PUSH
73210: LD_INT 2
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 2
73219: PUSH
73220: LD_INT 4
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 0
73229: PUSH
73230: LD_INT 4
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 0
73239: PUSH
73240: LD_INT 3
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 1
73249: PUSH
73250: LD_INT 4
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 1
73259: PUSH
73260: LD_INT 5
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: LD_INT 0
73269: PUSH
73270: LD_INT 5
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 1
73279: NEG
73280: PUSH
73281: LD_INT 4
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 1
73290: NEG
73291: PUSH
73292: LD_INT 3
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 2
73301: PUSH
73302: LD_INT 5
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 2
73311: NEG
73312: PUSH
73313: LD_INT 3
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73367: LD_ADDR_VAR 0 34
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: LD_INT 4
73377: NEG
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: LD_INT 5
73388: NEG
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 1
73396: PUSH
73397: LD_INT 4
73399: NEG
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 1
73407: PUSH
73408: LD_INT 3
73410: NEG
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: LD_INT 3
73421: NEG
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 1
73429: NEG
73430: PUSH
73431: LD_INT 4
73433: NEG
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 1
73441: NEG
73442: PUSH
73443: LD_INT 5
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: LD_INT 3
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 2
73464: NEG
73465: PUSH
73466: LD_INT 5
73468: NEG
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 3
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 3
73486: PUSH
73487: LD_INT 1
73489: NEG
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 4
73497: PUSH
73498: LD_INT 0
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 4
73507: PUSH
73508: LD_INT 1
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 3
73517: PUSH
73518: LD_INT 1
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 2
73527: PUSH
73528: LD_INT 0
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 2
73537: PUSH
73538: LD_INT 1
73540: NEG
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 2
73548: PUSH
73549: LD_INT 2
73551: NEG
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 4
73559: PUSH
73560: LD_INT 2
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 4
73569: PUSH
73570: LD_INT 4
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 4
73579: PUSH
73580: LD_INT 3
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 5
73589: PUSH
73590: LD_INT 4
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 5
73599: PUSH
73600: LD_INT 5
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 4
73609: PUSH
73610: LD_INT 5
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 3
73619: PUSH
73620: LD_INT 4
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 3
73629: PUSH
73630: LD_INT 3
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 5
73639: PUSH
73640: LD_INT 3
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 3
73649: PUSH
73650: LD_INT 5
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 0
73659: PUSH
73660: LD_INT 3
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 0
73669: PUSH
73670: LD_INT 2
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 1
73679: PUSH
73680: LD_INT 3
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 1
73689: PUSH
73690: LD_INT 4
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 0
73699: PUSH
73700: LD_INT 4
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 1
73709: NEG
73710: PUSH
73711: LD_INT 3
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 1
73720: NEG
73721: PUSH
73722: LD_INT 2
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: LD_INT 2
73731: PUSH
73732: LD_INT 4
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 2
73741: NEG
73742: PUSH
73743: LD_INT 2
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 4
73752: NEG
73753: PUSH
73754: LD_INT 0
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 4
73763: NEG
73764: PUSH
73765: LD_INT 1
73767: NEG
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 3
73775: NEG
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 3
73786: NEG
73787: PUSH
73788: LD_INT 1
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 4
73797: NEG
73798: PUSH
73799: LD_INT 1
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 5
73808: NEG
73809: PUSH
73810: LD_INT 0
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 5
73819: NEG
73820: PUSH
73821: LD_INT 1
73823: NEG
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 5
73831: NEG
73832: PUSH
73833: LD_INT 2
73835: NEG
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: LD_INT 3
73843: NEG
73844: PUSH
73845: LD_INT 2
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: ST_TO_ADDR
// end ; end ;
73899: GO 73902
73901: POP
// case btype of b_depot , b_warehouse :
73902: LD_VAR 0 1
73906: PUSH
73907: LD_INT 0
73909: DOUBLE
73910: EQUAL
73911: IFTRUE 73921
73913: LD_INT 1
73915: DOUBLE
73916: EQUAL
73917: IFTRUE 73921
73919: GO 74122
73921: POP
// case nation of nation_american :
73922: LD_VAR 0 5
73926: PUSH
73927: LD_INT 1
73929: DOUBLE
73930: EQUAL
73931: IFTRUE 73935
73933: GO 73991
73935: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73936: LD_ADDR_VAR 0 9
73940: PUSH
73941: LD_VAR 0 11
73945: PUSH
73946: LD_VAR 0 12
73950: PUSH
73951: LD_VAR 0 13
73955: PUSH
73956: LD_VAR 0 14
73960: PUSH
73961: LD_VAR 0 15
73965: PUSH
73966: LD_VAR 0 16
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: PUSH
73979: LD_VAR 0 4
73983: PUSH
73984: LD_INT 1
73986: PLUS
73987: ARRAY
73988: ST_TO_ADDR
73989: GO 74120
73991: LD_INT 2
73993: DOUBLE
73994: EQUAL
73995: IFTRUE 73999
73997: GO 74055
73999: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74000: LD_ADDR_VAR 0 9
74004: PUSH
74005: LD_VAR 0 17
74009: PUSH
74010: LD_VAR 0 18
74014: PUSH
74015: LD_VAR 0 19
74019: PUSH
74020: LD_VAR 0 20
74024: PUSH
74025: LD_VAR 0 21
74029: PUSH
74030: LD_VAR 0 22
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: PUSH
74043: LD_VAR 0 4
74047: PUSH
74048: LD_INT 1
74050: PLUS
74051: ARRAY
74052: ST_TO_ADDR
74053: GO 74120
74055: LD_INT 3
74057: DOUBLE
74058: EQUAL
74059: IFTRUE 74063
74061: GO 74119
74063: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74064: LD_ADDR_VAR 0 9
74068: PUSH
74069: LD_VAR 0 23
74073: PUSH
74074: LD_VAR 0 24
74078: PUSH
74079: LD_VAR 0 25
74083: PUSH
74084: LD_VAR 0 26
74088: PUSH
74089: LD_VAR 0 27
74093: PUSH
74094: LD_VAR 0 28
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: PUSH
74107: LD_VAR 0 4
74111: PUSH
74112: LD_INT 1
74114: PLUS
74115: ARRAY
74116: ST_TO_ADDR
74117: GO 74120
74119: POP
74120: GO 74675
74122: LD_INT 2
74124: DOUBLE
74125: EQUAL
74126: IFTRUE 74136
74128: LD_INT 3
74130: DOUBLE
74131: EQUAL
74132: IFTRUE 74136
74134: GO 74192
74136: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74137: LD_ADDR_VAR 0 9
74141: PUSH
74142: LD_VAR 0 29
74146: PUSH
74147: LD_VAR 0 30
74151: PUSH
74152: LD_VAR 0 31
74156: PUSH
74157: LD_VAR 0 32
74161: PUSH
74162: LD_VAR 0 33
74166: PUSH
74167: LD_VAR 0 34
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: PUSH
74180: LD_VAR 0 4
74184: PUSH
74185: LD_INT 1
74187: PLUS
74188: ARRAY
74189: ST_TO_ADDR
74190: GO 74675
74192: LD_INT 16
74194: DOUBLE
74195: EQUAL
74196: IFTRUE 74254
74198: LD_INT 17
74200: DOUBLE
74201: EQUAL
74202: IFTRUE 74254
74204: LD_INT 18
74206: DOUBLE
74207: EQUAL
74208: IFTRUE 74254
74210: LD_INT 19
74212: DOUBLE
74213: EQUAL
74214: IFTRUE 74254
74216: LD_INT 22
74218: DOUBLE
74219: EQUAL
74220: IFTRUE 74254
74222: LD_INT 20
74224: DOUBLE
74225: EQUAL
74226: IFTRUE 74254
74228: LD_INT 21
74230: DOUBLE
74231: EQUAL
74232: IFTRUE 74254
74234: LD_INT 23
74236: DOUBLE
74237: EQUAL
74238: IFTRUE 74254
74240: LD_INT 24
74242: DOUBLE
74243: EQUAL
74244: IFTRUE 74254
74246: LD_INT 25
74248: DOUBLE
74249: EQUAL
74250: IFTRUE 74254
74252: GO 74310
74254: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74255: LD_ADDR_VAR 0 9
74259: PUSH
74260: LD_VAR 0 35
74264: PUSH
74265: LD_VAR 0 36
74269: PUSH
74270: LD_VAR 0 37
74274: PUSH
74275: LD_VAR 0 38
74279: PUSH
74280: LD_VAR 0 39
74284: PUSH
74285: LD_VAR 0 40
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: PUSH
74298: LD_VAR 0 4
74302: PUSH
74303: LD_INT 1
74305: PLUS
74306: ARRAY
74307: ST_TO_ADDR
74308: GO 74675
74310: LD_INT 6
74312: DOUBLE
74313: EQUAL
74314: IFTRUE 74366
74316: LD_INT 7
74318: DOUBLE
74319: EQUAL
74320: IFTRUE 74366
74322: LD_INT 8
74324: DOUBLE
74325: EQUAL
74326: IFTRUE 74366
74328: LD_INT 13
74330: DOUBLE
74331: EQUAL
74332: IFTRUE 74366
74334: LD_INT 12
74336: DOUBLE
74337: EQUAL
74338: IFTRUE 74366
74340: LD_INT 15
74342: DOUBLE
74343: EQUAL
74344: IFTRUE 74366
74346: LD_INT 11
74348: DOUBLE
74349: EQUAL
74350: IFTRUE 74366
74352: LD_INT 14
74354: DOUBLE
74355: EQUAL
74356: IFTRUE 74366
74358: LD_INT 10
74360: DOUBLE
74361: EQUAL
74362: IFTRUE 74366
74364: GO 74422
74366: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74367: LD_ADDR_VAR 0 9
74371: PUSH
74372: LD_VAR 0 41
74376: PUSH
74377: LD_VAR 0 42
74381: PUSH
74382: LD_VAR 0 43
74386: PUSH
74387: LD_VAR 0 44
74391: PUSH
74392: LD_VAR 0 45
74396: PUSH
74397: LD_VAR 0 46
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: PUSH
74410: LD_VAR 0 4
74414: PUSH
74415: LD_INT 1
74417: PLUS
74418: ARRAY
74419: ST_TO_ADDR
74420: GO 74675
74422: LD_INT 36
74424: DOUBLE
74425: EQUAL
74426: IFTRUE 74430
74428: GO 74486
74430: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74431: LD_ADDR_VAR 0 9
74435: PUSH
74436: LD_VAR 0 47
74440: PUSH
74441: LD_VAR 0 48
74445: PUSH
74446: LD_VAR 0 49
74450: PUSH
74451: LD_VAR 0 50
74455: PUSH
74456: LD_VAR 0 51
74460: PUSH
74461: LD_VAR 0 52
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: PUSH
74474: LD_VAR 0 4
74478: PUSH
74479: LD_INT 1
74481: PLUS
74482: ARRAY
74483: ST_TO_ADDR
74484: GO 74675
74486: LD_INT 4
74488: DOUBLE
74489: EQUAL
74490: IFTRUE 74512
74492: LD_INT 5
74494: DOUBLE
74495: EQUAL
74496: IFTRUE 74512
74498: LD_INT 34
74500: DOUBLE
74501: EQUAL
74502: IFTRUE 74512
74504: LD_INT 37
74506: DOUBLE
74507: EQUAL
74508: IFTRUE 74512
74510: GO 74568
74512: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74513: LD_ADDR_VAR 0 9
74517: PUSH
74518: LD_VAR 0 53
74522: PUSH
74523: LD_VAR 0 54
74527: PUSH
74528: LD_VAR 0 55
74532: PUSH
74533: LD_VAR 0 56
74537: PUSH
74538: LD_VAR 0 57
74542: PUSH
74543: LD_VAR 0 58
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: PUSH
74556: LD_VAR 0 4
74560: PUSH
74561: LD_INT 1
74563: PLUS
74564: ARRAY
74565: ST_TO_ADDR
74566: GO 74675
74568: LD_INT 31
74570: DOUBLE
74571: EQUAL
74572: IFTRUE 74618
74574: LD_INT 32
74576: DOUBLE
74577: EQUAL
74578: IFTRUE 74618
74580: LD_INT 33
74582: DOUBLE
74583: EQUAL
74584: IFTRUE 74618
74586: LD_INT 27
74588: DOUBLE
74589: EQUAL
74590: IFTRUE 74618
74592: LD_INT 26
74594: DOUBLE
74595: EQUAL
74596: IFTRUE 74618
74598: LD_INT 28
74600: DOUBLE
74601: EQUAL
74602: IFTRUE 74618
74604: LD_INT 29
74606: DOUBLE
74607: EQUAL
74608: IFTRUE 74618
74610: LD_INT 30
74612: DOUBLE
74613: EQUAL
74614: IFTRUE 74618
74616: GO 74674
74618: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74619: LD_ADDR_VAR 0 9
74623: PUSH
74624: LD_VAR 0 59
74628: PUSH
74629: LD_VAR 0 60
74633: PUSH
74634: LD_VAR 0 61
74638: PUSH
74639: LD_VAR 0 62
74643: PUSH
74644: LD_VAR 0 63
74648: PUSH
74649: LD_VAR 0 64
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: PUSH
74662: LD_VAR 0 4
74666: PUSH
74667: LD_INT 1
74669: PLUS
74670: ARRAY
74671: ST_TO_ADDR
74672: GO 74675
74674: POP
// temp_list2 = [ ] ;
74675: LD_ADDR_VAR 0 10
74679: PUSH
74680: EMPTY
74681: ST_TO_ADDR
// for i in temp_list do
74682: LD_ADDR_VAR 0 8
74686: PUSH
74687: LD_VAR 0 9
74691: PUSH
74692: FOR_IN
74693: IFFALSE 74745
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74695: LD_ADDR_VAR 0 10
74699: PUSH
74700: LD_VAR 0 10
74704: PUSH
74705: LD_VAR 0 8
74709: PUSH
74710: LD_INT 1
74712: ARRAY
74713: PUSH
74714: LD_VAR 0 2
74718: PLUS
74719: PUSH
74720: LD_VAR 0 8
74724: PUSH
74725: LD_INT 2
74727: ARRAY
74728: PUSH
74729: LD_VAR 0 3
74733: PLUS
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: EMPTY
74740: LIST
74741: ADD
74742: ST_TO_ADDR
74743: GO 74692
74745: POP
74746: POP
// result = temp_list2 ;
74747: LD_ADDR_VAR 0 7
74751: PUSH
74752: LD_VAR 0 10
74756: ST_TO_ADDR
// end ;
74757: LD_VAR 0 7
74761: RET
// export function EnemyInRange ( unit , dist ) ; begin
74762: LD_INT 0
74764: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74765: LD_ADDR_VAR 0 3
74769: PUSH
74770: LD_VAR 0 1
74774: PPUSH
74775: CALL_OW 255
74779: PPUSH
74780: LD_VAR 0 1
74784: PPUSH
74785: CALL_OW 250
74789: PPUSH
74790: LD_VAR 0 1
74794: PPUSH
74795: CALL_OW 251
74799: PPUSH
74800: LD_VAR 0 2
74804: PPUSH
74805: CALL 48158 0 4
74809: PUSH
74810: LD_INT 4
74812: ARRAY
74813: ST_TO_ADDR
// end ;
74814: LD_VAR 0 3
74818: RET
// export function PlayerSeeMe ( unit ) ; begin
74819: LD_INT 0
74821: PPUSH
// result := See ( your_side , unit ) ;
74822: LD_ADDR_VAR 0 2
74826: PUSH
74827: LD_OWVAR 2
74831: PPUSH
74832: LD_VAR 0 1
74836: PPUSH
74837: CALL_OW 292
74841: ST_TO_ADDR
// end ;
74842: LD_VAR 0 2
74846: RET
// export function ReverseDir ( unit ) ; begin
74847: LD_INT 0
74849: PPUSH
// if not unit then
74850: LD_VAR 0 1
74854: NOT
74855: IFFALSE 74859
// exit ;
74857: GO 74882
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74859: LD_ADDR_VAR 0 2
74863: PUSH
74864: LD_VAR 0 1
74868: PPUSH
74869: CALL_OW 254
74873: PUSH
74874: LD_INT 3
74876: PLUS
74877: PUSH
74878: LD_INT 6
74880: MOD
74881: ST_TO_ADDR
// end ;
74882: LD_VAR 0 2
74886: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74887: LD_INT 0
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
// if not hexes then
74894: LD_VAR 0 2
74898: NOT
74899: IFFALSE 74903
// exit ;
74901: GO 75051
// dist := 9999 ;
74903: LD_ADDR_VAR 0 5
74907: PUSH
74908: LD_INT 9999
74910: ST_TO_ADDR
// for i = 1 to hexes do
74911: LD_ADDR_VAR 0 4
74915: PUSH
74916: DOUBLE
74917: LD_INT 1
74919: DEC
74920: ST_TO_ADDR
74921: LD_VAR 0 2
74925: PUSH
74926: FOR_TO
74927: IFFALSE 75039
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74929: LD_VAR 0 1
74933: PPUSH
74934: LD_VAR 0 2
74938: PUSH
74939: LD_VAR 0 4
74943: ARRAY
74944: PUSH
74945: LD_INT 1
74947: ARRAY
74948: PPUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_VAR 0 4
74958: ARRAY
74959: PUSH
74960: LD_INT 2
74962: ARRAY
74963: PPUSH
74964: CALL_OW 297
74968: PUSH
74969: LD_VAR 0 5
74973: LESS
74974: IFFALSE 75037
// begin hex := hexes [ i ] ;
74976: LD_ADDR_VAR 0 7
74980: PUSH
74981: LD_VAR 0 2
74985: PUSH
74986: LD_VAR 0 4
74990: ARRAY
74991: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74992: LD_ADDR_VAR 0 5
74996: PUSH
74997: LD_VAR 0 1
75001: PPUSH
75002: LD_VAR 0 2
75006: PUSH
75007: LD_VAR 0 4
75011: ARRAY
75012: PUSH
75013: LD_INT 1
75015: ARRAY
75016: PPUSH
75017: LD_VAR 0 2
75021: PUSH
75022: LD_VAR 0 4
75026: ARRAY
75027: PUSH
75028: LD_INT 2
75030: ARRAY
75031: PPUSH
75032: CALL_OW 297
75036: ST_TO_ADDR
// end ; end ;
75037: GO 74926
75039: POP
75040: POP
// result := hex ;
75041: LD_ADDR_VAR 0 3
75045: PUSH
75046: LD_VAR 0 7
75050: ST_TO_ADDR
// end ;
75051: LD_VAR 0 3
75055: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75056: LD_INT 0
75058: PPUSH
75059: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75060: LD_VAR 0 1
75064: NOT
75065: PUSH
75066: LD_VAR 0 1
75070: PUSH
75071: LD_INT 21
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 23
75083: PUSH
75084: LD_INT 2
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PPUSH
75095: CALL_OW 69
75099: IN
75100: NOT
75101: OR
75102: IFFALSE 75106
// exit ;
75104: GO 75153
// for i = 1 to 3 do
75106: LD_ADDR_VAR 0 3
75110: PUSH
75111: DOUBLE
75112: LD_INT 1
75114: DEC
75115: ST_TO_ADDR
75116: LD_INT 3
75118: PUSH
75119: FOR_TO
75120: IFFALSE 75151
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75122: LD_VAR 0 1
75126: PPUSH
75127: CALL_OW 250
75131: PPUSH
75132: LD_VAR 0 1
75136: PPUSH
75137: CALL_OW 251
75141: PPUSH
75142: LD_INT 1
75144: PPUSH
75145: CALL_OW 453
75149: GO 75119
75151: POP
75152: POP
// end ;
75153: LD_VAR 0 2
75157: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75158: LD_INT 0
75160: PPUSH
75161: PPUSH
75162: PPUSH
75163: PPUSH
75164: PPUSH
75165: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
75166: LD_VAR 0 1
75170: NOT
75171: PUSH
75172: LD_VAR 0 2
75176: NOT
75177: OR
75178: PUSH
75179: LD_VAR 0 1
75183: PPUSH
75184: CALL_OW 314
75188: OR
75189: IFFALSE 75193
// exit ;
75191: GO 75634
// x := GetX ( enemy_unit ) ;
75193: LD_ADDR_VAR 0 7
75197: PUSH
75198: LD_VAR 0 2
75202: PPUSH
75203: CALL_OW 250
75207: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75208: LD_ADDR_VAR 0 8
75212: PUSH
75213: LD_VAR 0 2
75217: PPUSH
75218: CALL_OW 251
75222: ST_TO_ADDR
// if not x or not y then
75223: LD_VAR 0 7
75227: NOT
75228: PUSH
75229: LD_VAR 0 8
75233: NOT
75234: OR
75235: IFFALSE 75239
// exit ;
75237: GO 75634
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75239: LD_ADDR_VAR 0 6
75243: PUSH
75244: LD_VAR 0 7
75248: PPUSH
75249: LD_INT 0
75251: PPUSH
75252: LD_INT 4
75254: PPUSH
75255: CALL_OW 272
75259: PUSH
75260: LD_VAR 0 8
75264: PPUSH
75265: LD_INT 0
75267: PPUSH
75268: LD_INT 4
75270: PPUSH
75271: CALL_OW 273
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: PUSH
75280: LD_VAR 0 7
75284: PPUSH
75285: LD_INT 1
75287: PPUSH
75288: LD_INT 4
75290: PPUSH
75291: CALL_OW 272
75295: PUSH
75296: LD_VAR 0 8
75300: PPUSH
75301: LD_INT 1
75303: PPUSH
75304: LD_INT 4
75306: PPUSH
75307: CALL_OW 273
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_VAR 0 7
75320: PPUSH
75321: LD_INT 2
75323: PPUSH
75324: LD_INT 4
75326: PPUSH
75327: CALL_OW 272
75331: PUSH
75332: LD_VAR 0 8
75336: PPUSH
75337: LD_INT 2
75339: PPUSH
75340: LD_INT 4
75342: PPUSH
75343: CALL_OW 273
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_VAR 0 7
75356: PPUSH
75357: LD_INT 3
75359: PPUSH
75360: LD_INT 4
75362: PPUSH
75363: CALL_OW 272
75367: PUSH
75368: LD_VAR 0 8
75372: PPUSH
75373: LD_INT 3
75375: PPUSH
75376: LD_INT 4
75378: PPUSH
75379: CALL_OW 273
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_VAR 0 7
75392: PPUSH
75393: LD_INT 4
75395: PPUSH
75396: LD_INT 4
75398: PPUSH
75399: CALL_OW 272
75403: PUSH
75404: LD_VAR 0 8
75408: PPUSH
75409: LD_INT 4
75411: PPUSH
75412: LD_INT 4
75414: PPUSH
75415: CALL_OW 273
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_VAR 0 7
75428: PPUSH
75429: LD_INT 5
75431: PPUSH
75432: LD_INT 4
75434: PPUSH
75435: CALL_OW 272
75439: PUSH
75440: LD_VAR 0 8
75444: PPUSH
75445: LD_INT 5
75447: PPUSH
75448: LD_INT 4
75450: PPUSH
75451: CALL_OW 273
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: ST_TO_ADDR
// for i = tmp downto 1 do
75468: LD_ADDR_VAR 0 4
75472: PUSH
75473: DOUBLE
75474: LD_VAR 0 6
75478: INC
75479: ST_TO_ADDR
75480: LD_INT 1
75482: PUSH
75483: FOR_DOWNTO
75484: IFFALSE 75585
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75486: LD_VAR 0 6
75490: PUSH
75491: LD_VAR 0 4
75495: ARRAY
75496: PUSH
75497: LD_INT 1
75499: ARRAY
75500: PPUSH
75501: LD_VAR 0 6
75505: PUSH
75506: LD_VAR 0 4
75510: ARRAY
75511: PUSH
75512: LD_INT 2
75514: ARRAY
75515: PPUSH
75516: CALL_OW 488
75520: NOT
75521: PUSH
75522: LD_VAR 0 6
75526: PUSH
75527: LD_VAR 0 4
75531: ARRAY
75532: PUSH
75533: LD_INT 1
75535: ARRAY
75536: PPUSH
75537: LD_VAR 0 6
75541: PUSH
75542: LD_VAR 0 4
75546: ARRAY
75547: PUSH
75548: LD_INT 2
75550: ARRAY
75551: PPUSH
75552: CALL_OW 428
75556: PUSH
75557: LD_INT 0
75559: NONEQUAL
75560: OR
75561: IFFALSE 75583
// tmp := Delete ( tmp , i ) ;
75563: LD_ADDR_VAR 0 6
75567: PUSH
75568: LD_VAR 0 6
75572: PPUSH
75573: LD_VAR 0 4
75577: PPUSH
75578: CALL_OW 3
75582: ST_TO_ADDR
75583: GO 75483
75585: POP
75586: POP
// j := GetClosestHex ( unit , tmp ) ;
75587: LD_ADDR_VAR 0 5
75591: PUSH
75592: LD_VAR 0 1
75596: PPUSH
75597: LD_VAR 0 6
75601: PPUSH
75602: CALL 74887 0 2
75606: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75607: LD_VAR 0 1
75611: PPUSH
75612: LD_VAR 0 5
75616: PUSH
75617: LD_INT 1
75619: ARRAY
75620: PPUSH
75621: LD_VAR 0 5
75625: PUSH
75626: LD_INT 2
75628: ARRAY
75629: PPUSH
75630: CALL_OW 111
// end ;
75634: LD_VAR 0 3
75638: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75639: LD_INT 0
75641: PPUSH
75642: PPUSH
75643: PPUSH
// uc_side = 0 ;
75644: LD_ADDR_OWVAR 20
75648: PUSH
75649: LD_INT 0
75651: ST_TO_ADDR
// uc_nation = 0 ;
75652: LD_ADDR_OWVAR 21
75656: PUSH
75657: LD_INT 0
75659: ST_TO_ADDR
// InitHc_All ( ) ;
75660: CALL_OW 584
// InitVc ;
75664: CALL_OW 20
// if mastodonts then
75668: LD_VAR 0 6
75672: IFFALSE 75739
// for i = 1 to mastodonts do
75674: LD_ADDR_VAR 0 11
75678: PUSH
75679: DOUBLE
75680: LD_INT 1
75682: DEC
75683: ST_TO_ADDR
75684: LD_VAR 0 6
75688: PUSH
75689: FOR_TO
75690: IFFALSE 75737
// begin vc_chassis := 31 ;
75692: LD_ADDR_OWVAR 37
75696: PUSH
75697: LD_INT 31
75699: ST_TO_ADDR
// vc_control := control_rider ;
75700: LD_ADDR_OWVAR 38
75704: PUSH
75705: LD_INT 4
75707: ST_TO_ADDR
// animal := CreateVehicle ;
75708: LD_ADDR_VAR 0 12
75712: PUSH
75713: CALL_OW 45
75717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75718: LD_VAR 0 12
75722: PPUSH
75723: LD_VAR 0 8
75727: PPUSH
75728: LD_INT 0
75730: PPUSH
75731: CALL 77927 0 3
// end ;
75735: GO 75689
75737: POP
75738: POP
// if horses then
75739: LD_VAR 0 5
75743: IFFALSE 75810
// for i = 1 to horses do
75745: LD_ADDR_VAR 0 11
75749: PUSH
75750: DOUBLE
75751: LD_INT 1
75753: DEC
75754: ST_TO_ADDR
75755: LD_VAR 0 5
75759: PUSH
75760: FOR_TO
75761: IFFALSE 75808
// begin hc_class := 21 ;
75763: LD_ADDR_OWVAR 28
75767: PUSH
75768: LD_INT 21
75770: ST_TO_ADDR
// hc_gallery :=  ;
75771: LD_ADDR_OWVAR 33
75775: PUSH
75776: LD_STRING 
75778: ST_TO_ADDR
// animal := CreateHuman ;
75779: LD_ADDR_VAR 0 12
75783: PUSH
75784: CALL_OW 44
75788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75789: LD_VAR 0 12
75793: PPUSH
75794: LD_VAR 0 8
75798: PPUSH
75799: LD_INT 0
75801: PPUSH
75802: CALL 77927 0 3
// end ;
75806: GO 75760
75808: POP
75809: POP
// if birds then
75810: LD_VAR 0 1
75814: IFFALSE 75881
// for i = 1 to birds do
75816: LD_ADDR_VAR 0 11
75820: PUSH
75821: DOUBLE
75822: LD_INT 1
75824: DEC
75825: ST_TO_ADDR
75826: LD_VAR 0 1
75830: PUSH
75831: FOR_TO
75832: IFFALSE 75879
// begin hc_class = 18 ;
75834: LD_ADDR_OWVAR 28
75838: PUSH
75839: LD_INT 18
75841: ST_TO_ADDR
// hc_gallery =  ;
75842: LD_ADDR_OWVAR 33
75846: PUSH
75847: LD_STRING 
75849: ST_TO_ADDR
// animal := CreateHuman ;
75850: LD_ADDR_VAR 0 12
75854: PUSH
75855: CALL_OW 44
75859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75860: LD_VAR 0 12
75864: PPUSH
75865: LD_VAR 0 8
75869: PPUSH
75870: LD_INT 0
75872: PPUSH
75873: CALL 77927 0 3
// end ;
75877: GO 75831
75879: POP
75880: POP
// if tigers then
75881: LD_VAR 0 2
75885: IFFALSE 75969
// for i = 1 to tigers do
75887: LD_ADDR_VAR 0 11
75891: PUSH
75892: DOUBLE
75893: LD_INT 1
75895: DEC
75896: ST_TO_ADDR
75897: LD_VAR 0 2
75901: PUSH
75902: FOR_TO
75903: IFFALSE 75967
// begin hc_class = class_tiger ;
75905: LD_ADDR_OWVAR 28
75909: PUSH
75910: LD_INT 14
75912: ST_TO_ADDR
// hc_gallery =  ;
75913: LD_ADDR_OWVAR 33
75917: PUSH
75918: LD_STRING 
75920: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75921: LD_ADDR_OWVAR 35
75925: PUSH
75926: LD_INT 7
75928: NEG
75929: PPUSH
75930: LD_INT 7
75932: PPUSH
75933: CALL_OW 12
75937: ST_TO_ADDR
// animal := CreateHuman ;
75938: LD_ADDR_VAR 0 12
75942: PUSH
75943: CALL_OW 44
75947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75948: LD_VAR 0 12
75952: PPUSH
75953: LD_VAR 0 8
75957: PPUSH
75958: LD_INT 0
75960: PPUSH
75961: CALL 77927 0 3
// end ;
75965: GO 75902
75967: POP
75968: POP
// if apemans then
75969: LD_VAR 0 3
75973: IFFALSE 76096
// for i = 1 to apemans do
75975: LD_ADDR_VAR 0 11
75979: PUSH
75980: DOUBLE
75981: LD_INT 1
75983: DEC
75984: ST_TO_ADDR
75985: LD_VAR 0 3
75989: PUSH
75990: FOR_TO
75991: IFFALSE 76094
// begin hc_class = class_apeman ;
75993: LD_ADDR_OWVAR 28
75997: PUSH
75998: LD_INT 12
76000: ST_TO_ADDR
// hc_gallery =  ;
76001: LD_ADDR_OWVAR 33
76005: PUSH
76006: LD_STRING 
76008: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76009: LD_ADDR_OWVAR 35
76013: PUSH
76014: LD_INT 2
76016: NEG
76017: PPUSH
76018: LD_INT 2
76020: PPUSH
76021: CALL_OW 12
76025: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76026: LD_ADDR_OWVAR 31
76030: PUSH
76031: LD_INT 1
76033: PPUSH
76034: LD_INT 3
76036: PPUSH
76037: CALL_OW 12
76041: PUSH
76042: LD_INT 1
76044: PPUSH
76045: LD_INT 3
76047: PPUSH
76048: CALL_OW 12
76052: PUSH
76053: LD_INT 0
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: ST_TO_ADDR
// animal := CreateHuman ;
76065: LD_ADDR_VAR 0 12
76069: PUSH
76070: CALL_OW 44
76074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76075: LD_VAR 0 12
76079: PPUSH
76080: LD_VAR 0 8
76084: PPUSH
76085: LD_INT 0
76087: PPUSH
76088: CALL 77927 0 3
// end ;
76092: GO 75990
76094: POP
76095: POP
// if enchidnas then
76096: LD_VAR 0 4
76100: IFFALSE 76167
// for i = 1 to enchidnas do
76102: LD_ADDR_VAR 0 11
76106: PUSH
76107: DOUBLE
76108: LD_INT 1
76110: DEC
76111: ST_TO_ADDR
76112: LD_VAR 0 4
76116: PUSH
76117: FOR_TO
76118: IFFALSE 76165
// begin hc_class = 13 ;
76120: LD_ADDR_OWVAR 28
76124: PUSH
76125: LD_INT 13
76127: ST_TO_ADDR
// hc_gallery =  ;
76128: LD_ADDR_OWVAR 33
76132: PUSH
76133: LD_STRING 
76135: ST_TO_ADDR
// animal := CreateHuman ;
76136: LD_ADDR_VAR 0 12
76140: PUSH
76141: CALL_OW 44
76145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76146: LD_VAR 0 12
76150: PPUSH
76151: LD_VAR 0 8
76155: PPUSH
76156: LD_INT 0
76158: PPUSH
76159: CALL 77927 0 3
// end ;
76163: GO 76117
76165: POP
76166: POP
// if fishes then
76167: LD_VAR 0 7
76171: IFFALSE 76238
// for i = 1 to fishes do
76173: LD_ADDR_VAR 0 11
76177: PUSH
76178: DOUBLE
76179: LD_INT 1
76181: DEC
76182: ST_TO_ADDR
76183: LD_VAR 0 7
76187: PUSH
76188: FOR_TO
76189: IFFALSE 76236
// begin hc_class = 20 ;
76191: LD_ADDR_OWVAR 28
76195: PUSH
76196: LD_INT 20
76198: ST_TO_ADDR
// hc_gallery =  ;
76199: LD_ADDR_OWVAR 33
76203: PUSH
76204: LD_STRING 
76206: ST_TO_ADDR
// animal := CreateHuman ;
76207: LD_ADDR_VAR 0 12
76211: PUSH
76212: CALL_OW 44
76216: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76217: LD_VAR 0 12
76221: PPUSH
76222: LD_VAR 0 9
76226: PPUSH
76227: LD_INT 0
76229: PPUSH
76230: CALL 77927 0 3
// end ;
76234: GO 76188
76236: POP
76237: POP
// end ;
76238: LD_VAR 0 10
76242: RET
// export function WantHeal ( sci , unit ) ; begin
76243: LD_INT 0
76245: PPUSH
// if GetTaskList ( sci ) > 0 then
76246: LD_VAR 0 1
76250: PPUSH
76251: CALL_OW 437
76255: PUSH
76256: LD_INT 0
76258: GREATER
76259: IFFALSE 76329
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76261: LD_VAR 0 1
76265: PPUSH
76266: CALL_OW 437
76270: PUSH
76271: LD_INT 1
76273: ARRAY
76274: PUSH
76275: LD_INT 1
76277: ARRAY
76278: PUSH
76279: LD_STRING l
76281: EQUAL
76282: PUSH
76283: LD_VAR 0 1
76287: PPUSH
76288: CALL_OW 437
76292: PUSH
76293: LD_INT 1
76295: ARRAY
76296: PUSH
76297: LD_INT 4
76299: ARRAY
76300: PUSH
76301: LD_VAR 0 2
76305: EQUAL
76306: AND
76307: IFFALSE 76319
// result := true else
76309: LD_ADDR_VAR 0 3
76313: PUSH
76314: LD_INT 1
76316: ST_TO_ADDR
76317: GO 76327
// result := false ;
76319: LD_ADDR_VAR 0 3
76323: PUSH
76324: LD_INT 0
76326: ST_TO_ADDR
// end else
76327: GO 76337
// result := false ;
76329: LD_ADDR_VAR 0 3
76333: PUSH
76334: LD_INT 0
76336: ST_TO_ADDR
// end ;
76337: LD_VAR 0 3
76341: RET
// export function HealTarget ( sci ) ; begin
76342: LD_INT 0
76344: PPUSH
// if not sci then
76345: LD_VAR 0 1
76349: NOT
76350: IFFALSE 76354
// exit ;
76352: GO 76419
// result := 0 ;
76354: LD_ADDR_VAR 0 2
76358: PUSH
76359: LD_INT 0
76361: ST_TO_ADDR
// if GetTaskList ( sci ) then
76362: LD_VAR 0 1
76366: PPUSH
76367: CALL_OW 437
76371: IFFALSE 76419
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76373: LD_VAR 0 1
76377: PPUSH
76378: CALL_OW 437
76382: PUSH
76383: LD_INT 1
76385: ARRAY
76386: PUSH
76387: LD_INT 1
76389: ARRAY
76390: PUSH
76391: LD_STRING l
76393: EQUAL
76394: IFFALSE 76419
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76396: LD_ADDR_VAR 0 2
76400: PUSH
76401: LD_VAR 0 1
76405: PPUSH
76406: CALL_OW 437
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PUSH
76415: LD_INT 4
76417: ARRAY
76418: ST_TO_ADDR
// end ;
76419: LD_VAR 0 2
76423: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76424: LD_INT 0
76426: PPUSH
76427: PPUSH
76428: PPUSH
76429: PPUSH
// if not base_units then
76430: LD_VAR 0 1
76434: NOT
76435: IFFALSE 76439
// exit ;
76437: GO 76526
// result := false ;
76439: LD_ADDR_VAR 0 2
76443: PUSH
76444: LD_INT 0
76446: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76447: LD_ADDR_VAR 0 5
76451: PUSH
76452: LD_VAR 0 1
76456: PPUSH
76457: LD_INT 21
76459: PUSH
76460: LD_INT 3
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: PPUSH
76467: CALL_OW 72
76471: ST_TO_ADDR
// if not tmp then
76472: LD_VAR 0 5
76476: NOT
76477: IFFALSE 76481
// exit ;
76479: GO 76526
// for i in tmp do
76481: LD_ADDR_VAR 0 3
76485: PUSH
76486: LD_VAR 0 5
76490: PUSH
76491: FOR_IN
76492: IFFALSE 76524
// begin result := EnemyInRange ( i , 22 ) ;
76494: LD_ADDR_VAR 0 2
76498: PUSH
76499: LD_VAR 0 3
76503: PPUSH
76504: LD_INT 22
76506: PPUSH
76507: CALL 74762 0 2
76511: ST_TO_ADDR
// if result then
76512: LD_VAR 0 2
76516: IFFALSE 76522
// exit ;
76518: POP
76519: POP
76520: GO 76526
// end ;
76522: GO 76491
76524: POP
76525: POP
// end ;
76526: LD_VAR 0 2
76530: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
76531: LD_INT 0
76533: PPUSH
76534: PPUSH
// if not units then
76535: LD_VAR 0 1
76539: NOT
76540: IFFALSE 76544
// exit ;
76542: GO 76614
// result := [ ] ;
76544: LD_ADDR_VAR 0 3
76548: PUSH
76549: EMPTY
76550: ST_TO_ADDR
// for i in units do
76551: LD_ADDR_VAR 0 4
76555: PUSH
76556: LD_VAR 0 1
76560: PUSH
76561: FOR_IN
76562: IFFALSE 76612
// if GetTag ( i ) = tag then
76564: LD_VAR 0 4
76568: PPUSH
76569: CALL_OW 110
76573: PUSH
76574: LD_VAR 0 2
76578: EQUAL
76579: IFFALSE 76610
// result := Replace ( result , result + 1 , i ) ;
76581: LD_ADDR_VAR 0 3
76585: PUSH
76586: LD_VAR 0 3
76590: PPUSH
76591: LD_VAR 0 3
76595: PUSH
76596: LD_INT 1
76598: PLUS
76599: PPUSH
76600: LD_VAR 0 4
76604: PPUSH
76605: CALL_OW 1
76609: ST_TO_ADDR
76610: GO 76561
76612: POP
76613: POP
// end ;
76614: LD_VAR 0 3
76618: RET
// export function IsDriver ( un ) ; begin
76619: LD_INT 0
76621: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76622: LD_ADDR_VAR 0 2
76626: PUSH
76627: LD_VAR 0 1
76631: PUSH
76632: LD_INT 55
76634: PUSH
76635: EMPTY
76636: LIST
76637: PPUSH
76638: CALL_OW 69
76642: IN
76643: ST_TO_ADDR
// end ;
76644: LD_VAR 0 2
76648: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76649: LD_INT 0
76651: PPUSH
76652: PPUSH
// list := [ ] ;
76653: LD_ADDR_VAR 0 5
76657: PUSH
76658: EMPTY
76659: ST_TO_ADDR
// case d of 0 :
76660: LD_VAR 0 3
76664: PUSH
76665: LD_INT 0
76667: DOUBLE
76668: EQUAL
76669: IFTRUE 76673
76671: GO 76806
76673: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76674: LD_ADDR_VAR 0 5
76678: PUSH
76679: LD_VAR 0 1
76683: PUSH
76684: LD_INT 4
76686: MINUS
76687: PUSH
76688: LD_VAR 0 2
76692: PUSH
76693: LD_INT 4
76695: MINUS
76696: PUSH
76697: LD_INT 2
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: LIST
76704: PUSH
76705: LD_VAR 0 1
76709: PUSH
76710: LD_INT 3
76712: MINUS
76713: PUSH
76714: LD_VAR 0 2
76718: PUSH
76719: LD_INT 1
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: LIST
76726: PUSH
76727: LD_VAR 0 1
76731: PUSH
76732: LD_INT 4
76734: PLUS
76735: PUSH
76736: LD_VAR 0 2
76740: PUSH
76741: LD_INT 4
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: LIST
76748: PUSH
76749: LD_VAR 0 1
76753: PUSH
76754: LD_INT 3
76756: PLUS
76757: PUSH
76758: LD_VAR 0 2
76762: PUSH
76763: LD_INT 3
76765: PLUS
76766: PUSH
76767: LD_INT 5
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: LIST
76774: PUSH
76775: LD_VAR 0 1
76779: PUSH
76780: LD_VAR 0 2
76784: PUSH
76785: LD_INT 4
76787: PLUS
76788: PUSH
76789: LD_INT 0
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: LIST
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: ST_TO_ADDR
// end ; 1 :
76804: GO 77504
76806: LD_INT 1
76808: DOUBLE
76809: EQUAL
76810: IFTRUE 76814
76812: GO 76947
76814: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76815: LD_ADDR_VAR 0 5
76819: PUSH
76820: LD_VAR 0 1
76824: PUSH
76825: LD_VAR 0 2
76829: PUSH
76830: LD_INT 4
76832: MINUS
76833: PUSH
76834: LD_INT 3
76836: PUSH
76837: EMPTY
76838: LIST
76839: LIST
76840: LIST
76841: PUSH
76842: LD_VAR 0 1
76846: PUSH
76847: LD_INT 3
76849: MINUS
76850: PUSH
76851: LD_VAR 0 2
76855: PUSH
76856: LD_INT 3
76858: MINUS
76859: PUSH
76860: LD_INT 2
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: LIST
76867: PUSH
76868: LD_VAR 0 1
76872: PUSH
76873: LD_INT 4
76875: MINUS
76876: PUSH
76877: LD_VAR 0 2
76881: PUSH
76882: LD_INT 1
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: LIST
76889: PUSH
76890: LD_VAR 0 1
76894: PUSH
76895: LD_VAR 0 2
76899: PUSH
76900: LD_INT 3
76902: PLUS
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: PUSH
76912: LD_VAR 0 1
76916: PUSH
76917: LD_INT 4
76919: PLUS
76920: PUSH
76921: LD_VAR 0 2
76925: PUSH
76926: LD_INT 4
76928: PLUS
76929: PUSH
76930: LD_INT 5
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: LIST
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: ST_TO_ADDR
// end ; 2 :
76945: GO 77504
76947: LD_INT 2
76949: DOUBLE
76950: EQUAL
76951: IFTRUE 76955
76953: GO 77084
76955: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76956: LD_ADDR_VAR 0 5
76960: PUSH
76961: LD_VAR 0 1
76965: PUSH
76966: LD_VAR 0 2
76970: PUSH
76971: LD_INT 3
76973: MINUS
76974: PUSH
76975: LD_INT 3
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: LIST
76982: PUSH
76983: LD_VAR 0 1
76987: PUSH
76988: LD_INT 4
76990: PLUS
76991: PUSH
76992: LD_VAR 0 2
76996: PUSH
76997: LD_INT 4
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: LIST
77004: PUSH
77005: LD_VAR 0 1
77009: PUSH
77010: LD_VAR 0 2
77014: PUSH
77015: LD_INT 4
77017: PLUS
77018: PUSH
77019: LD_INT 0
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: LIST
77026: PUSH
77027: LD_VAR 0 1
77031: PUSH
77032: LD_INT 3
77034: MINUS
77035: PUSH
77036: LD_VAR 0 2
77040: PUSH
77041: LD_INT 1
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: LIST
77048: PUSH
77049: LD_VAR 0 1
77053: PUSH
77054: LD_INT 4
77056: MINUS
77057: PUSH
77058: LD_VAR 0 2
77062: PUSH
77063: LD_INT 4
77065: MINUS
77066: PUSH
77067: LD_INT 2
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: LIST
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: ST_TO_ADDR
// end ; 3 :
77082: GO 77504
77084: LD_INT 3
77086: DOUBLE
77087: EQUAL
77088: IFTRUE 77092
77090: GO 77225
77092: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77093: LD_ADDR_VAR 0 5
77097: PUSH
77098: LD_VAR 0 1
77102: PUSH
77103: LD_INT 3
77105: PLUS
77106: PUSH
77107: LD_VAR 0 2
77111: PUSH
77112: LD_INT 4
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: LIST
77119: PUSH
77120: LD_VAR 0 1
77124: PUSH
77125: LD_INT 4
77127: PLUS
77128: PUSH
77129: LD_VAR 0 2
77133: PUSH
77134: LD_INT 4
77136: PLUS
77137: PUSH
77138: LD_INT 5
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: LIST
77145: PUSH
77146: LD_VAR 0 1
77150: PUSH
77151: LD_INT 4
77153: MINUS
77154: PUSH
77155: LD_VAR 0 2
77159: PUSH
77160: LD_INT 1
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: LIST
77167: PUSH
77168: LD_VAR 0 1
77172: PUSH
77173: LD_VAR 0 2
77177: PUSH
77178: LD_INT 4
77180: MINUS
77181: PUSH
77182: LD_INT 3
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: LIST
77189: PUSH
77190: LD_VAR 0 1
77194: PUSH
77195: LD_INT 3
77197: MINUS
77198: PUSH
77199: LD_VAR 0 2
77203: PUSH
77204: LD_INT 3
77206: MINUS
77207: PUSH
77208: LD_INT 2
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: LIST
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: ST_TO_ADDR
// end ; 4 :
77223: GO 77504
77225: LD_INT 4
77227: DOUBLE
77228: EQUAL
77229: IFTRUE 77233
77231: GO 77366
77233: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77234: LD_ADDR_VAR 0 5
77238: PUSH
77239: LD_VAR 0 1
77243: PUSH
77244: LD_VAR 0 2
77248: PUSH
77249: LD_INT 4
77251: PLUS
77252: PUSH
77253: LD_INT 0
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: LIST
77260: PUSH
77261: LD_VAR 0 1
77265: PUSH
77266: LD_INT 3
77268: PLUS
77269: PUSH
77270: LD_VAR 0 2
77274: PUSH
77275: LD_INT 3
77277: PLUS
77278: PUSH
77279: LD_INT 5
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: LIST
77286: PUSH
77287: LD_VAR 0 1
77291: PUSH
77292: LD_INT 4
77294: PLUS
77295: PUSH
77296: LD_VAR 0 2
77300: PUSH
77301: LD_INT 4
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: LIST
77308: PUSH
77309: LD_VAR 0 1
77313: PUSH
77314: LD_VAR 0 2
77318: PUSH
77319: LD_INT 3
77321: MINUS
77322: PUSH
77323: LD_INT 3
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: LIST
77330: PUSH
77331: LD_VAR 0 1
77335: PUSH
77336: LD_INT 4
77338: MINUS
77339: PUSH
77340: LD_VAR 0 2
77344: PUSH
77345: LD_INT 4
77347: MINUS
77348: PUSH
77349: LD_INT 2
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: LIST
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: LIST
77361: LIST
77362: LIST
77363: ST_TO_ADDR
// end ; 5 :
77364: GO 77504
77366: LD_INT 5
77368: DOUBLE
77369: EQUAL
77370: IFTRUE 77374
77372: GO 77503
77374: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77375: LD_ADDR_VAR 0 5
77379: PUSH
77380: LD_VAR 0 1
77384: PUSH
77385: LD_INT 4
77387: MINUS
77388: PUSH
77389: LD_VAR 0 2
77393: PUSH
77394: LD_INT 1
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: LIST
77401: PUSH
77402: LD_VAR 0 1
77406: PUSH
77407: LD_VAR 0 2
77411: PUSH
77412: LD_INT 4
77414: MINUS
77415: PUSH
77416: LD_INT 3
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: LIST
77423: PUSH
77424: LD_VAR 0 1
77428: PUSH
77429: LD_INT 4
77431: PLUS
77432: PUSH
77433: LD_VAR 0 2
77437: PUSH
77438: LD_INT 4
77440: PLUS
77441: PUSH
77442: LD_INT 5
77444: PUSH
77445: EMPTY
77446: LIST
77447: LIST
77448: LIST
77449: PUSH
77450: LD_VAR 0 1
77454: PUSH
77455: LD_INT 3
77457: PLUS
77458: PUSH
77459: LD_VAR 0 2
77463: PUSH
77464: LD_INT 4
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: LIST
77471: PUSH
77472: LD_VAR 0 1
77476: PUSH
77477: LD_VAR 0 2
77481: PUSH
77482: LD_INT 3
77484: PLUS
77485: PUSH
77486: LD_INT 0
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: LIST
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: ST_TO_ADDR
// end ; end ;
77501: GO 77504
77503: POP
// result := list ;
77504: LD_ADDR_VAR 0 4
77508: PUSH
77509: LD_VAR 0 5
77513: ST_TO_ADDR
// end ;
77514: LD_VAR 0 4
77518: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77519: LD_INT 0
77521: PPUSH
77522: PPUSH
77523: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77524: LD_VAR 0 1
77528: NOT
77529: PUSH
77530: LD_VAR 0 2
77534: PUSH
77535: LD_INT 1
77537: PUSH
77538: LD_INT 2
77540: PUSH
77541: LD_INT 3
77543: PUSH
77544: LD_INT 4
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: IN
77553: NOT
77554: OR
77555: IFFALSE 77559
// exit ;
77557: GO 77651
// tmp := [ ] ;
77559: LD_ADDR_VAR 0 5
77563: PUSH
77564: EMPTY
77565: ST_TO_ADDR
// for i in units do
77566: LD_ADDR_VAR 0 4
77570: PUSH
77571: LD_VAR 0 1
77575: PUSH
77576: FOR_IN
77577: IFFALSE 77620
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77579: LD_ADDR_VAR 0 5
77583: PUSH
77584: LD_VAR 0 5
77588: PPUSH
77589: LD_VAR 0 5
77593: PUSH
77594: LD_INT 1
77596: PLUS
77597: PPUSH
77598: LD_VAR 0 4
77602: PPUSH
77603: LD_VAR 0 2
77607: PPUSH
77608: CALL_OW 259
77612: PPUSH
77613: CALL_OW 2
77617: ST_TO_ADDR
77618: GO 77576
77620: POP
77621: POP
// if not tmp then
77622: LD_VAR 0 5
77626: NOT
77627: IFFALSE 77631
// exit ;
77629: GO 77651
// result := SortListByListDesc ( units , tmp ) ;
77631: LD_ADDR_VAR 0 3
77635: PUSH
77636: LD_VAR 0 1
77640: PPUSH
77641: LD_VAR 0 5
77645: PPUSH
77646: CALL_OW 77
77650: ST_TO_ADDR
// end ;
77651: LD_VAR 0 3
77655: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77656: LD_INT 0
77658: PPUSH
77659: PPUSH
77660: PPUSH
// result := false ;
77661: LD_ADDR_VAR 0 3
77665: PUSH
77666: LD_INT 0
77668: ST_TO_ADDR
// x := GetX ( building ) ;
77669: LD_ADDR_VAR 0 4
77673: PUSH
77674: LD_VAR 0 2
77678: PPUSH
77679: CALL_OW 250
77683: ST_TO_ADDR
// y := GetY ( building ) ;
77684: LD_ADDR_VAR 0 5
77688: PUSH
77689: LD_VAR 0 2
77693: PPUSH
77694: CALL_OW 251
77698: ST_TO_ADDR
// if not building or not x or not y then
77699: LD_VAR 0 2
77703: NOT
77704: PUSH
77705: LD_VAR 0 4
77709: NOT
77710: OR
77711: PUSH
77712: LD_VAR 0 5
77716: NOT
77717: OR
77718: IFFALSE 77722
// exit ;
77720: GO 77814
// if GetTaskList ( unit ) then
77722: LD_VAR 0 1
77726: PPUSH
77727: CALL_OW 437
77731: IFFALSE 77814
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77733: LD_STRING e
77735: PUSH
77736: LD_VAR 0 1
77740: PPUSH
77741: CALL_OW 437
77745: PUSH
77746: LD_INT 1
77748: ARRAY
77749: PUSH
77750: LD_INT 1
77752: ARRAY
77753: EQUAL
77754: PUSH
77755: LD_VAR 0 4
77759: PUSH
77760: LD_VAR 0 1
77764: PPUSH
77765: CALL_OW 437
77769: PUSH
77770: LD_INT 1
77772: ARRAY
77773: PUSH
77774: LD_INT 2
77776: ARRAY
77777: EQUAL
77778: AND
77779: PUSH
77780: LD_VAR 0 5
77784: PUSH
77785: LD_VAR 0 1
77789: PPUSH
77790: CALL_OW 437
77794: PUSH
77795: LD_INT 1
77797: ARRAY
77798: PUSH
77799: LD_INT 3
77801: ARRAY
77802: EQUAL
77803: AND
77804: IFFALSE 77814
// result := true end ;
77806: LD_ADDR_VAR 0 3
77810: PUSH
77811: LD_INT 1
77813: ST_TO_ADDR
// end ;
77814: LD_VAR 0 3
77818: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77819: LD_INT 0
77821: PPUSH
// result := false ;
77822: LD_ADDR_VAR 0 4
77826: PUSH
77827: LD_INT 0
77829: ST_TO_ADDR
// if GetTaskList ( unit ) then
77830: LD_VAR 0 1
77834: PPUSH
77835: CALL_OW 437
77839: IFFALSE 77922
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77841: LD_STRING M
77843: PUSH
77844: LD_VAR 0 1
77848: PPUSH
77849: CALL_OW 437
77853: PUSH
77854: LD_INT 1
77856: ARRAY
77857: PUSH
77858: LD_INT 1
77860: ARRAY
77861: EQUAL
77862: PUSH
77863: LD_VAR 0 2
77867: PUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: CALL_OW 437
77877: PUSH
77878: LD_INT 1
77880: ARRAY
77881: PUSH
77882: LD_INT 2
77884: ARRAY
77885: EQUAL
77886: AND
77887: PUSH
77888: LD_VAR 0 3
77892: PUSH
77893: LD_VAR 0 1
77897: PPUSH
77898: CALL_OW 437
77902: PUSH
77903: LD_INT 1
77905: ARRAY
77906: PUSH
77907: LD_INT 3
77909: ARRAY
77910: EQUAL
77911: AND
77912: IFFALSE 77922
// result := true ;
77914: LD_ADDR_VAR 0 4
77918: PUSH
77919: LD_INT 1
77921: ST_TO_ADDR
// end ; end ;
77922: LD_VAR 0 4
77926: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77927: LD_INT 0
77929: PPUSH
77930: PPUSH
77931: PPUSH
77932: PPUSH
// if not unit or not area then
77933: LD_VAR 0 1
77937: NOT
77938: PUSH
77939: LD_VAR 0 2
77943: NOT
77944: OR
77945: IFFALSE 77949
// exit ;
77947: GO 78113
// tmp := AreaToList ( area , i ) ;
77949: LD_ADDR_VAR 0 6
77953: PUSH
77954: LD_VAR 0 2
77958: PPUSH
77959: LD_VAR 0 5
77963: PPUSH
77964: CALL_OW 517
77968: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77969: LD_ADDR_VAR 0 5
77973: PUSH
77974: DOUBLE
77975: LD_INT 1
77977: DEC
77978: ST_TO_ADDR
77979: LD_VAR 0 6
77983: PUSH
77984: LD_INT 1
77986: ARRAY
77987: PUSH
77988: FOR_TO
77989: IFFALSE 78111
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77991: LD_ADDR_VAR 0 7
77995: PUSH
77996: LD_VAR 0 6
78000: PUSH
78001: LD_INT 1
78003: ARRAY
78004: PUSH
78005: LD_VAR 0 5
78009: ARRAY
78010: PUSH
78011: LD_VAR 0 6
78015: PUSH
78016: LD_INT 2
78018: ARRAY
78019: PUSH
78020: LD_VAR 0 5
78024: ARRAY
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
78030: LD_VAR 0 7
78034: PUSH
78035: LD_INT 1
78037: ARRAY
78038: PPUSH
78039: LD_VAR 0 7
78043: PUSH
78044: LD_INT 2
78046: ARRAY
78047: PPUSH
78048: CALL_OW 428
78052: PUSH
78053: LD_INT 0
78055: EQUAL
78056: IFFALSE 78109
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78058: LD_VAR 0 1
78062: PPUSH
78063: LD_VAR 0 7
78067: PUSH
78068: LD_INT 1
78070: ARRAY
78071: PPUSH
78072: LD_VAR 0 7
78076: PUSH
78077: LD_INT 2
78079: ARRAY
78080: PPUSH
78081: LD_VAR 0 3
78085: PPUSH
78086: CALL_OW 48
// result := IsPlaced ( unit ) ;
78090: LD_ADDR_VAR 0 4
78094: PUSH
78095: LD_VAR 0 1
78099: PPUSH
78100: CALL_OW 305
78104: ST_TO_ADDR
// exit ;
78105: POP
78106: POP
78107: GO 78113
// end ; end ;
78109: GO 77988
78111: POP
78112: POP
// end ;
78113: LD_VAR 0 4
78117: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78118: LD_INT 0
78120: PPUSH
78121: PPUSH
78122: PPUSH
// if not side or side > 8 then
78123: LD_VAR 0 1
78127: NOT
78128: PUSH
78129: LD_VAR 0 1
78133: PUSH
78134: LD_INT 8
78136: GREATER
78137: OR
78138: IFFALSE 78142
// exit ;
78140: GO 78329
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78142: LD_ADDR_VAR 0 4
78146: PUSH
78147: LD_INT 22
78149: PUSH
78150: LD_VAR 0 1
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: LD_INT 21
78161: PUSH
78162: LD_INT 3
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PPUSH
78173: CALL_OW 69
78177: ST_TO_ADDR
// if not tmp then
78178: LD_VAR 0 4
78182: NOT
78183: IFFALSE 78187
// exit ;
78185: GO 78329
// enable_addtolog := true ;
78187: LD_ADDR_OWVAR 81
78191: PUSH
78192: LD_INT 1
78194: ST_TO_ADDR
// AddToLog ( [ ) ;
78195: LD_STRING [
78197: PPUSH
78198: CALL_OW 561
// for i in tmp do
78202: LD_ADDR_VAR 0 3
78206: PUSH
78207: LD_VAR 0 4
78211: PUSH
78212: FOR_IN
78213: IFFALSE 78320
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78215: LD_STRING [
78217: PUSH
78218: LD_VAR 0 3
78222: PPUSH
78223: CALL_OW 266
78227: STR
78228: PUSH
78229: LD_STRING , 
78231: STR
78232: PUSH
78233: LD_VAR 0 3
78237: PPUSH
78238: CALL_OW 250
78242: STR
78243: PUSH
78244: LD_STRING , 
78246: STR
78247: PUSH
78248: LD_VAR 0 3
78252: PPUSH
78253: CALL_OW 251
78257: STR
78258: PUSH
78259: LD_STRING , 
78261: STR
78262: PUSH
78263: LD_VAR 0 3
78267: PPUSH
78268: CALL_OW 254
78272: STR
78273: PUSH
78274: LD_STRING , 
78276: STR
78277: PUSH
78278: LD_VAR 0 3
78282: PPUSH
78283: LD_INT 1
78285: PPUSH
78286: CALL_OW 268
78290: STR
78291: PUSH
78292: LD_STRING , 
78294: STR
78295: PUSH
78296: LD_VAR 0 3
78300: PPUSH
78301: LD_INT 2
78303: PPUSH
78304: CALL_OW 268
78308: STR
78309: PUSH
78310: LD_STRING ],
78312: STR
78313: PPUSH
78314: CALL_OW 561
// end ;
78318: GO 78212
78320: POP
78321: POP
// AddToLog ( ]; ) ;
78322: LD_STRING ];
78324: PPUSH
78325: CALL_OW 561
// end ;
78329: LD_VAR 0 2
78333: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78334: LD_INT 0
78336: PPUSH
78337: PPUSH
78338: PPUSH
78339: PPUSH
78340: PPUSH
// if not area or not rate or not max then
78341: LD_VAR 0 1
78345: NOT
78346: PUSH
78347: LD_VAR 0 2
78351: NOT
78352: OR
78353: PUSH
78354: LD_VAR 0 4
78358: NOT
78359: OR
78360: IFFALSE 78364
// exit ;
78362: GO 78556
// while 1 do
78364: LD_INT 1
78366: IFFALSE 78556
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78368: LD_ADDR_VAR 0 9
78372: PUSH
78373: LD_VAR 0 1
78377: PPUSH
78378: LD_INT 1
78380: PPUSH
78381: CALL_OW 287
78385: PUSH
78386: LD_INT 10
78388: MUL
78389: ST_TO_ADDR
// r := rate / 10 ;
78390: LD_ADDR_VAR 0 7
78394: PUSH
78395: LD_VAR 0 2
78399: PUSH
78400: LD_INT 10
78402: DIVREAL
78403: ST_TO_ADDR
// time := 1 1$00 ;
78404: LD_ADDR_VAR 0 8
78408: PUSH
78409: LD_INT 2100
78411: ST_TO_ADDR
// if amount < min then
78412: LD_VAR 0 9
78416: PUSH
78417: LD_VAR 0 3
78421: LESS
78422: IFFALSE 78440
// r := r * 2 else
78424: LD_ADDR_VAR 0 7
78428: PUSH
78429: LD_VAR 0 7
78433: PUSH
78434: LD_INT 2
78436: MUL
78437: ST_TO_ADDR
78438: GO 78466
// if amount > max then
78440: LD_VAR 0 9
78444: PUSH
78445: LD_VAR 0 4
78449: GREATER
78450: IFFALSE 78466
// r := r / 2 ;
78452: LD_ADDR_VAR 0 7
78456: PUSH
78457: LD_VAR 0 7
78461: PUSH
78462: LD_INT 2
78464: DIVREAL
78465: ST_TO_ADDR
// time := time / r ;
78466: LD_ADDR_VAR 0 8
78470: PUSH
78471: LD_VAR 0 8
78475: PUSH
78476: LD_VAR 0 7
78480: DIVREAL
78481: ST_TO_ADDR
// if time < 0 then
78482: LD_VAR 0 8
78486: PUSH
78487: LD_INT 0
78489: LESS
78490: IFFALSE 78507
// time := time * - 1 ;
78492: LD_ADDR_VAR 0 8
78496: PUSH
78497: LD_VAR 0 8
78501: PUSH
78502: LD_INT 1
78504: NEG
78505: MUL
78506: ST_TO_ADDR
// wait ( time ) ;
78507: LD_VAR 0 8
78511: PPUSH
78512: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
78516: LD_INT 35
78518: PPUSH
78519: LD_INT 875
78521: PPUSH
78522: CALL_OW 12
78526: PPUSH
78527: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78531: LD_INT 1
78533: PPUSH
78534: LD_INT 5
78536: PPUSH
78537: CALL_OW 12
78541: PPUSH
78542: LD_VAR 0 1
78546: PPUSH
78547: LD_INT 1
78549: PPUSH
78550: CALL_OW 55
// end ;
78554: GO 78364
// end ;
78556: LD_VAR 0 5
78560: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78561: LD_INT 0
78563: PPUSH
78564: PPUSH
78565: PPUSH
78566: PPUSH
78567: PPUSH
78568: PPUSH
78569: PPUSH
78570: PPUSH
// if not turrets or not factories then
78571: LD_VAR 0 1
78575: NOT
78576: PUSH
78577: LD_VAR 0 2
78581: NOT
78582: OR
78583: IFFALSE 78587
// exit ;
78585: GO 78894
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78587: LD_ADDR_VAR 0 10
78591: PUSH
78592: LD_INT 5
78594: PUSH
78595: LD_INT 6
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 2
78604: PUSH
78605: LD_INT 4
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 3
78614: PUSH
78615: LD_INT 5
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 24
78629: PUSH
78630: LD_INT 25
78632: PUSH
78633: EMPTY
78634: LIST
78635: LIST
78636: PUSH
78637: LD_INT 23
78639: PUSH
78640: LD_INT 27
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: EMPTY
78648: LIST
78649: LIST
78650: PUSH
78651: LD_INT 42
78653: PUSH
78654: LD_INT 43
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PUSH
78661: LD_INT 44
78663: PUSH
78664: LD_INT 46
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: PUSH
78671: LD_INT 45
78673: PUSH
78674: LD_INT 47
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: LIST
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: LIST
78690: ST_TO_ADDR
// result := [ ] ;
78691: LD_ADDR_VAR 0 3
78695: PUSH
78696: EMPTY
78697: ST_TO_ADDR
// for i in turrets do
78698: LD_ADDR_VAR 0 4
78702: PUSH
78703: LD_VAR 0 1
78707: PUSH
78708: FOR_IN
78709: IFFALSE 78892
// begin nat := GetNation ( i ) ;
78711: LD_ADDR_VAR 0 7
78715: PUSH
78716: LD_VAR 0 4
78720: PPUSH
78721: CALL_OW 248
78725: ST_TO_ADDR
// weapon := 0 ;
78726: LD_ADDR_VAR 0 8
78730: PUSH
78731: LD_INT 0
78733: ST_TO_ADDR
// if not nat then
78734: LD_VAR 0 7
78738: NOT
78739: IFFALSE 78743
// continue ;
78741: GO 78708
// for j in list [ nat ] do
78743: LD_ADDR_VAR 0 5
78747: PUSH
78748: LD_VAR 0 10
78752: PUSH
78753: LD_VAR 0 7
78757: ARRAY
78758: PUSH
78759: FOR_IN
78760: IFFALSE 78801
// if GetBWeapon ( i ) = j [ 1 ] then
78762: LD_VAR 0 4
78766: PPUSH
78767: CALL_OW 269
78771: PUSH
78772: LD_VAR 0 5
78776: PUSH
78777: LD_INT 1
78779: ARRAY
78780: EQUAL
78781: IFFALSE 78799
// begin weapon := j [ 2 ] ;
78783: LD_ADDR_VAR 0 8
78787: PUSH
78788: LD_VAR 0 5
78792: PUSH
78793: LD_INT 2
78795: ARRAY
78796: ST_TO_ADDR
// break ;
78797: GO 78801
// end ;
78799: GO 78759
78801: POP
78802: POP
// if not weapon then
78803: LD_VAR 0 8
78807: NOT
78808: IFFALSE 78812
// continue ;
78810: GO 78708
// for k in factories do
78812: LD_ADDR_VAR 0 6
78816: PUSH
78817: LD_VAR 0 2
78821: PUSH
78822: FOR_IN
78823: IFFALSE 78888
// begin weapons := AvailableWeaponList ( k ) ;
78825: LD_ADDR_VAR 0 9
78829: PUSH
78830: LD_VAR 0 6
78834: PPUSH
78835: CALL_OW 478
78839: ST_TO_ADDR
// if not weapons then
78840: LD_VAR 0 9
78844: NOT
78845: IFFALSE 78849
// continue ;
78847: GO 78822
// if weapon in weapons then
78849: LD_VAR 0 8
78853: PUSH
78854: LD_VAR 0 9
78858: IN
78859: IFFALSE 78886
// begin result := [ i , weapon ] ;
78861: LD_ADDR_VAR 0 3
78865: PUSH
78866: LD_VAR 0 4
78870: PUSH
78871: LD_VAR 0 8
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: ST_TO_ADDR
// exit ;
78880: POP
78881: POP
78882: POP
78883: POP
78884: GO 78894
// end ; end ;
78886: GO 78822
78888: POP
78889: POP
// end ;
78890: GO 78708
78892: POP
78893: POP
// end ;
78894: LD_VAR 0 3
78898: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78899: LD_INT 0
78901: PPUSH
// if not side or side > 8 then
78902: LD_VAR 0 3
78906: NOT
78907: PUSH
78908: LD_VAR 0 3
78912: PUSH
78913: LD_INT 8
78915: GREATER
78916: OR
78917: IFFALSE 78921
// exit ;
78919: GO 78980
// if not range then
78921: LD_VAR 0 4
78925: NOT
78926: IFFALSE 78937
// range := - 12 ;
78928: LD_ADDR_VAR 0 4
78932: PUSH
78933: LD_INT 12
78935: NEG
78936: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78937: LD_VAR 0 1
78941: PPUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: LD_VAR 0 3
78951: PPUSH
78952: LD_VAR 0 4
78956: PPUSH
78957: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78961: LD_VAR 0 1
78965: PPUSH
78966: LD_VAR 0 2
78970: PPUSH
78971: LD_VAR 0 3
78975: PPUSH
78976: CALL_OW 331
// end ;
78980: LD_VAR 0 5
78984: RET
// export function Video ( mode ) ; begin
78985: LD_INT 0
78987: PPUSH
// ingame_video = mode ;
78988: LD_ADDR_OWVAR 52
78992: PUSH
78993: LD_VAR 0 1
78997: ST_TO_ADDR
// interface_hidden = mode ;
78998: LD_ADDR_OWVAR 54
79002: PUSH
79003: LD_VAR 0 1
79007: ST_TO_ADDR
// end ;
79008: LD_VAR 0 2
79012: RET
// export function Join ( array , element ) ; begin
79013: LD_INT 0
79015: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79016: LD_ADDR_VAR 0 3
79020: PUSH
79021: LD_VAR 0 1
79025: PPUSH
79026: LD_VAR 0 1
79030: PUSH
79031: LD_INT 1
79033: PLUS
79034: PPUSH
79035: LD_VAR 0 2
79039: PPUSH
79040: CALL_OW 1
79044: ST_TO_ADDR
// end ;
79045: LD_VAR 0 3
79049: RET
// export function JoinUnion ( array , element ) ; begin
79050: LD_INT 0
79052: PPUSH
// result := array union element ;
79053: LD_ADDR_VAR 0 3
79057: PUSH
79058: LD_VAR 0 1
79062: PUSH
79063: LD_VAR 0 2
79067: UNION
79068: ST_TO_ADDR
// end ;
79069: LD_VAR 0 3
79073: RET
// export function GetBehemoths ( side ) ; begin
79074: LD_INT 0
79076: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
79077: LD_ADDR_VAR 0 2
79081: PUSH
79082: LD_INT 22
79084: PUSH
79085: LD_VAR 0 1
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: PUSH
79094: LD_INT 31
79096: PUSH
79097: LD_INT 25
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: PUSH
79104: EMPTY
79105: LIST
79106: LIST
79107: PPUSH
79108: CALL_OW 69
79112: ST_TO_ADDR
// end ;
79113: LD_VAR 0 2
79117: RET
// export function Shuffle ( array ) ; var i , index ; begin
79118: LD_INT 0
79120: PPUSH
79121: PPUSH
79122: PPUSH
// result := [ ] ;
79123: LD_ADDR_VAR 0 2
79127: PUSH
79128: EMPTY
79129: ST_TO_ADDR
// if not array then
79130: LD_VAR 0 1
79134: NOT
79135: IFFALSE 79139
// exit ;
79137: GO 79238
// Randomize ;
79139: CALL_OW 10
// for i = array downto 1 do
79143: LD_ADDR_VAR 0 3
79147: PUSH
79148: DOUBLE
79149: LD_VAR 0 1
79153: INC
79154: ST_TO_ADDR
79155: LD_INT 1
79157: PUSH
79158: FOR_DOWNTO
79159: IFFALSE 79236
// begin index := rand ( 1 , array ) ;
79161: LD_ADDR_VAR 0 4
79165: PUSH
79166: LD_INT 1
79168: PPUSH
79169: LD_VAR 0 1
79173: PPUSH
79174: CALL_OW 12
79178: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79179: LD_ADDR_VAR 0 2
79183: PUSH
79184: LD_VAR 0 2
79188: PPUSH
79189: LD_VAR 0 2
79193: PUSH
79194: LD_INT 1
79196: PLUS
79197: PPUSH
79198: LD_VAR 0 1
79202: PUSH
79203: LD_VAR 0 4
79207: ARRAY
79208: PPUSH
79209: CALL_OW 2
79213: ST_TO_ADDR
// array := Delete ( array , index ) ;
79214: LD_ADDR_VAR 0 1
79218: PUSH
79219: LD_VAR 0 1
79223: PPUSH
79224: LD_VAR 0 4
79228: PPUSH
79229: CALL_OW 3
79233: ST_TO_ADDR
// end ;
79234: GO 79158
79236: POP
79237: POP
// end ;
79238: LD_VAR 0 2
79242: RET
// export function GetBaseMaterials ( base ) ; begin
79243: LD_INT 0
79245: PPUSH
// result := [ 0 , 0 , 0 ] ;
79246: LD_ADDR_VAR 0 2
79250: PUSH
79251: LD_INT 0
79253: PUSH
79254: LD_INT 0
79256: PUSH
79257: LD_INT 0
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: LIST
79264: ST_TO_ADDR
// if not base then
79265: LD_VAR 0 1
79269: NOT
79270: IFFALSE 79274
// exit ;
79272: GO 79323
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79274: LD_ADDR_VAR 0 2
79278: PUSH
79279: LD_VAR 0 1
79283: PPUSH
79284: LD_INT 1
79286: PPUSH
79287: CALL_OW 275
79291: PUSH
79292: LD_VAR 0 1
79296: PPUSH
79297: LD_INT 2
79299: PPUSH
79300: CALL_OW 275
79304: PUSH
79305: LD_VAR 0 1
79309: PPUSH
79310: LD_INT 3
79312: PPUSH
79313: CALL_OW 275
79317: PUSH
79318: EMPTY
79319: LIST
79320: LIST
79321: LIST
79322: ST_TO_ADDR
// end ;
79323: LD_VAR 0 2
79327: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79328: LD_INT 0
79330: PPUSH
79331: PPUSH
// result := array ;
79332: LD_ADDR_VAR 0 3
79336: PUSH
79337: LD_VAR 0 1
79341: ST_TO_ADDR
// if size > 0 then
79342: LD_VAR 0 2
79346: PUSH
79347: LD_INT 0
79349: GREATER
79350: IFFALSE 79396
// for i := array downto size do
79352: LD_ADDR_VAR 0 4
79356: PUSH
79357: DOUBLE
79358: LD_VAR 0 1
79362: INC
79363: ST_TO_ADDR
79364: LD_VAR 0 2
79368: PUSH
79369: FOR_DOWNTO
79370: IFFALSE 79394
// result := Delete ( result , result ) ;
79372: LD_ADDR_VAR 0 3
79376: PUSH
79377: LD_VAR 0 3
79381: PPUSH
79382: LD_VAR 0 3
79386: PPUSH
79387: CALL_OW 3
79391: ST_TO_ADDR
79392: GO 79369
79394: POP
79395: POP
// end ;
79396: LD_VAR 0 3
79400: RET
// export function ComExit ( unit ) ; var tmp ; begin
79401: LD_INT 0
79403: PPUSH
79404: PPUSH
// if not IsInUnit ( unit ) then
79405: LD_VAR 0 1
79409: PPUSH
79410: CALL_OW 310
79414: NOT
79415: IFFALSE 79419
// exit ;
79417: GO 79479
// tmp := IsInUnit ( unit ) ;
79419: LD_ADDR_VAR 0 3
79423: PUSH
79424: LD_VAR 0 1
79428: PPUSH
79429: CALL_OW 310
79433: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79434: LD_VAR 0 3
79438: PPUSH
79439: CALL_OW 247
79443: PUSH
79444: LD_INT 2
79446: EQUAL
79447: IFFALSE 79460
// ComExitVehicle ( unit ) else
79449: LD_VAR 0 1
79453: PPUSH
79454: CALL_OW 121
79458: GO 79469
// ComExitBuilding ( unit ) ;
79460: LD_VAR 0 1
79464: PPUSH
79465: CALL_OW 122
// result := tmp ;
79469: LD_ADDR_VAR 0 2
79473: PUSH
79474: LD_VAR 0 3
79478: ST_TO_ADDR
// end ;
79479: LD_VAR 0 2
79483: RET
// export function ComExitAll ( units ) ; var i ; begin
79484: LD_INT 0
79486: PPUSH
79487: PPUSH
// if not units then
79488: LD_VAR 0 1
79492: NOT
79493: IFFALSE 79497
// exit ;
79495: GO 79523
// for i in units do
79497: LD_ADDR_VAR 0 3
79501: PUSH
79502: LD_VAR 0 1
79506: PUSH
79507: FOR_IN
79508: IFFALSE 79521
// ComExit ( i ) ;
79510: LD_VAR 0 3
79514: PPUSH
79515: CALL 79401 0 1
79519: GO 79507
79521: POP
79522: POP
// end ;
79523: LD_VAR 0 2
79527: RET
// export function ResetHc ; begin
79528: LD_INT 0
79530: PPUSH
// InitHc ;
79531: CALL_OW 19
// hc_importance := 0 ;
79535: LD_ADDR_OWVAR 32
79539: PUSH
79540: LD_INT 0
79542: ST_TO_ADDR
// end ;
79543: LD_VAR 0 1
79547: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79548: LD_INT 0
79550: PPUSH
79551: PPUSH
79552: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79553: LD_ADDR_VAR 0 6
79557: PUSH
79558: LD_VAR 0 1
79562: PUSH
79563: LD_VAR 0 3
79567: PLUS
79568: PUSH
79569: LD_INT 2
79571: DIV
79572: ST_TO_ADDR
// if _x < 0 then
79573: LD_VAR 0 6
79577: PUSH
79578: LD_INT 0
79580: LESS
79581: IFFALSE 79598
// _x := _x * - 1 ;
79583: LD_ADDR_VAR 0 6
79587: PUSH
79588: LD_VAR 0 6
79592: PUSH
79593: LD_INT 1
79595: NEG
79596: MUL
79597: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79598: LD_ADDR_VAR 0 7
79602: PUSH
79603: LD_VAR 0 2
79607: PUSH
79608: LD_VAR 0 4
79612: PLUS
79613: PUSH
79614: LD_INT 2
79616: DIV
79617: ST_TO_ADDR
// if _y < 0 then
79618: LD_VAR 0 7
79622: PUSH
79623: LD_INT 0
79625: LESS
79626: IFFALSE 79643
// _y := _y * - 1 ;
79628: LD_ADDR_VAR 0 7
79632: PUSH
79633: LD_VAR 0 7
79637: PUSH
79638: LD_INT 1
79640: NEG
79641: MUL
79642: ST_TO_ADDR
// result := [ _x , _y ] ;
79643: LD_ADDR_VAR 0 5
79647: PUSH
79648: LD_VAR 0 6
79652: PUSH
79653: LD_VAR 0 7
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: ST_TO_ADDR
// end ;
79662: LD_VAR 0 5
79666: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79667: LD_INT 0
79669: PPUSH
79670: PPUSH
79671: PPUSH
79672: PPUSH
// task := GetTaskList ( unit ) ;
79673: LD_ADDR_VAR 0 7
79677: PUSH
79678: LD_VAR 0 1
79682: PPUSH
79683: CALL_OW 437
79687: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79688: LD_VAR 0 7
79692: NOT
79693: PUSH
79694: LD_VAR 0 1
79698: PPUSH
79699: LD_VAR 0 2
79703: PPUSH
79704: CALL_OW 308
79708: NOT
79709: AND
79710: IFFALSE 79714
// exit ;
79712: GO 79832
// if IsInArea ( unit , area ) then
79714: LD_VAR 0 1
79718: PPUSH
79719: LD_VAR 0 2
79723: PPUSH
79724: CALL_OW 308
79728: IFFALSE 79746
// begin ComMoveToArea ( unit , goAway ) ;
79730: LD_VAR 0 1
79734: PPUSH
79735: LD_VAR 0 3
79739: PPUSH
79740: CALL_OW 113
// exit ;
79744: GO 79832
// end ; if task [ 1 ] [ 1 ] <> M then
79746: LD_VAR 0 7
79750: PUSH
79751: LD_INT 1
79753: ARRAY
79754: PUSH
79755: LD_INT 1
79757: ARRAY
79758: PUSH
79759: LD_STRING M
79761: NONEQUAL
79762: IFFALSE 79766
// exit ;
79764: GO 79832
// x := task [ 1 ] [ 2 ] ;
79766: LD_ADDR_VAR 0 5
79770: PUSH
79771: LD_VAR 0 7
79775: PUSH
79776: LD_INT 1
79778: ARRAY
79779: PUSH
79780: LD_INT 2
79782: ARRAY
79783: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79784: LD_ADDR_VAR 0 6
79788: PUSH
79789: LD_VAR 0 7
79793: PUSH
79794: LD_INT 1
79796: ARRAY
79797: PUSH
79798: LD_INT 3
79800: ARRAY
79801: ST_TO_ADDR
// if InArea ( x , y , area ) then
79802: LD_VAR 0 5
79806: PPUSH
79807: LD_VAR 0 6
79811: PPUSH
79812: LD_VAR 0 2
79816: PPUSH
79817: CALL_OW 309
79821: IFFALSE 79832
// ComStop ( unit ) ;
79823: LD_VAR 0 1
79827: PPUSH
79828: CALL_OW 141
// end ;
79832: LD_VAR 0 4
79836: RET
// export function Abs ( value ) ; begin
79837: LD_INT 0
79839: PPUSH
// result := value ;
79840: LD_ADDR_VAR 0 2
79844: PUSH
79845: LD_VAR 0 1
79849: ST_TO_ADDR
// if value < 0 then
79850: LD_VAR 0 1
79854: PUSH
79855: LD_INT 0
79857: LESS
79858: IFFALSE 79875
// result := value * - 1 ;
79860: LD_ADDR_VAR 0 2
79864: PUSH
79865: LD_VAR 0 1
79869: PUSH
79870: LD_INT 1
79872: NEG
79873: MUL
79874: ST_TO_ADDR
// end ;
79875: LD_VAR 0 2
79879: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79880: LD_INT 0
79882: PPUSH
79883: PPUSH
79884: PPUSH
79885: PPUSH
79886: PPUSH
79887: PPUSH
79888: PPUSH
79889: PPUSH
// if not unit or not building then
79890: LD_VAR 0 1
79894: NOT
79895: PUSH
79896: LD_VAR 0 2
79900: NOT
79901: OR
79902: IFFALSE 79906
// exit ;
79904: GO 80132
// x := GetX ( building ) ;
79906: LD_ADDR_VAR 0 4
79910: PUSH
79911: LD_VAR 0 2
79915: PPUSH
79916: CALL_OW 250
79920: ST_TO_ADDR
// y := GetY ( building ) ;
79921: LD_ADDR_VAR 0 6
79925: PUSH
79926: LD_VAR 0 2
79930: PPUSH
79931: CALL_OW 251
79935: ST_TO_ADDR
// d := GetDir ( building ) ;
79936: LD_ADDR_VAR 0 8
79940: PUSH
79941: LD_VAR 0 2
79945: PPUSH
79946: CALL_OW 254
79950: ST_TO_ADDR
// r := 4 ;
79951: LD_ADDR_VAR 0 9
79955: PUSH
79956: LD_INT 4
79958: ST_TO_ADDR
// for i := 1 to 5 do
79959: LD_ADDR_VAR 0 10
79963: PUSH
79964: DOUBLE
79965: LD_INT 1
79967: DEC
79968: ST_TO_ADDR
79969: LD_INT 5
79971: PUSH
79972: FOR_TO
79973: IFFALSE 80130
// begin _x := ShiftX ( x , d , r + i ) ;
79975: LD_ADDR_VAR 0 5
79979: PUSH
79980: LD_VAR 0 4
79984: PPUSH
79985: LD_VAR 0 8
79989: PPUSH
79990: LD_VAR 0 9
79994: PUSH
79995: LD_VAR 0 10
79999: PLUS
80000: PPUSH
80001: CALL_OW 272
80005: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80006: LD_ADDR_VAR 0 7
80010: PUSH
80011: LD_VAR 0 6
80015: PPUSH
80016: LD_VAR 0 8
80020: PPUSH
80021: LD_VAR 0 9
80025: PUSH
80026: LD_VAR 0 10
80030: PLUS
80031: PPUSH
80032: CALL_OW 273
80036: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80037: LD_VAR 0 5
80041: PPUSH
80042: LD_VAR 0 7
80046: PPUSH
80047: CALL_OW 488
80051: PUSH
80052: LD_VAR 0 5
80056: PPUSH
80057: LD_VAR 0 7
80061: PPUSH
80062: CALL_OW 428
80066: PPUSH
80067: CALL_OW 247
80071: PUSH
80072: LD_INT 3
80074: PUSH
80075: LD_INT 2
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: IN
80082: NOT
80083: AND
80084: IFFALSE 80128
// begin ComMoveXY ( unit , _x , _y ) ;
80086: LD_VAR 0 1
80090: PPUSH
80091: LD_VAR 0 5
80095: PPUSH
80096: LD_VAR 0 7
80100: PPUSH
80101: CALL_OW 111
// result := [ _x , _y ] ;
80105: LD_ADDR_VAR 0 3
80109: PUSH
80110: LD_VAR 0 5
80114: PUSH
80115: LD_VAR 0 7
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: ST_TO_ADDR
// exit ;
80124: POP
80125: POP
80126: GO 80132
// end ; end ;
80128: GO 79972
80130: POP
80131: POP
// end ;
80132: LD_VAR 0 3
80136: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80137: LD_INT 0
80139: PPUSH
80140: PPUSH
80141: PPUSH
// result := 0 ;
80142: LD_ADDR_VAR 0 3
80146: PUSH
80147: LD_INT 0
80149: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80150: LD_VAR 0 1
80154: PUSH
80155: LD_INT 0
80157: LESS
80158: PUSH
80159: LD_VAR 0 1
80163: PUSH
80164: LD_INT 8
80166: GREATER
80167: OR
80168: PUSH
80169: LD_VAR 0 2
80173: PUSH
80174: LD_INT 0
80176: LESS
80177: OR
80178: PUSH
80179: LD_VAR 0 2
80183: PUSH
80184: LD_INT 8
80186: GREATER
80187: OR
80188: IFFALSE 80192
// exit ;
80190: GO 80267
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80192: LD_ADDR_VAR 0 4
80196: PUSH
80197: LD_INT 22
80199: PUSH
80200: LD_VAR 0 2
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PPUSH
80209: CALL_OW 69
80213: PUSH
80214: FOR_IN
80215: IFFALSE 80265
// begin un := UnitShoot ( i ) ;
80217: LD_ADDR_VAR 0 5
80221: PUSH
80222: LD_VAR 0 4
80226: PPUSH
80227: CALL_OW 504
80231: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80232: LD_VAR 0 5
80236: PPUSH
80237: CALL_OW 255
80241: PUSH
80242: LD_VAR 0 1
80246: EQUAL
80247: IFFALSE 80263
// begin result := un ;
80249: LD_ADDR_VAR 0 3
80253: PUSH
80254: LD_VAR 0 5
80258: ST_TO_ADDR
// exit ;
80259: POP
80260: POP
80261: GO 80267
// end ; end ;
80263: GO 80214
80265: POP
80266: POP
// end ;
80267: LD_VAR 0 3
80271: RET
// export function GetCargoBay ( units ) ; begin
80272: LD_INT 0
80274: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80275: LD_ADDR_VAR 0 2
80279: PUSH
80280: LD_VAR 0 1
80284: PPUSH
80285: LD_INT 2
80287: PUSH
80288: LD_INT 34
80290: PUSH
80291: LD_INT 12
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 34
80300: PUSH
80301: LD_INT 51
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 34
80310: PUSH
80311: LD_INT 32
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 34
80320: PUSH
80321: LD_EXP 122
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: PUSH
80330: EMPTY
80331: LIST
80332: LIST
80333: LIST
80334: LIST
80335: LIST
80336: PPUSH
80337: CALL_OW 72
80341: ST_TO_ADDR
// end ;
80342: LD_VAR 0 2
80346: RET
// export function Negate ( value ) ; begin
80347: LD_INT 0
80349: PPUSH
// result := not value ;
80350: LD_ADDR_VAR 0 2
80354: PUSH
80355: LD_VAR 0 1
80359: NOT
80360: ST_TO_ADDR
// end ;
80361: LD_VAR 0 2
80365: RET
// export function Inc ( value ) ; begin
80366: LD_INT 0
80368: PPUSH
// result := value + 1 ;
80369: LD_ADDR_VAR 0 2
80373: PUSH
80374: LD_VAR 0 1
80378: PUSH
80379: LD_INT 1
80381: PLUS
80382: ST_TO_ADDR
// end ;
80383: LD_VAR 0 2
80387: RET
// export function Dec ( value ) ; begin
80388: LD_INT 0
80390: PPUSH
// result := value - 1 ;
80391: LD_ADDR_VAR 0 2
80395: PUSH
80396: LD_VAR 0 1
80400: PUSH
80401: LD_INT 1
80403: MINUS
80404: ST_TO_ADDR
// end ;
80405: LD_VAR 0 2
80409: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80410: LD_INT 0
80412: PPUSH
80413: PPUSH
80414: PPUSH
80415: PPUSH
80416: PPUSH
80417: PPUSH
80418: PPUSH
80419: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80420: LD_VAR 0 1
80424: PPUSH
80425: LD_VAR 0 2
80429: PPUSH
80430: CALL_OW 488
80434: NOT
80435: PUSH
80436: LD_VAR 0 3
80440: PPUSH
80441: LD_VAR 0 4
80445: PPUSH
80446: CALL_OW 488
80450: NOT
80451: OR
80452: IFFALSE 80465
// begin result := - 1 ;
80454: LD_ADDR_VAR 0 5
80458: PUSH
80459: LD_INT 1
80461: NEG
80462: ST_TO_ADDR
// exit ;
80463: GO 80700
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80465: LD_ADDR_VAR 0 12
80469: PUSH
80470: LD_VAR 0 1
80474: PPUSH
80475: LD_VAR 0 2
80479: PPUSH
80480: LD_VAR 0 3
80484: PPUSH
80485: LD_VAR 0 4
80489: PPUSH
80490: CALL 79548 0 4
80494: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80495: LD_ADDR_VAR 0 11
80499: PUSH
80500: LD_VAR 0 1
80504: PPUSH
80505: LD_VAR 0 2
80509: PPUSH
80510: LD_VAR 0 12
80514: PUSH
80515: LD_INT 1
80517: ARRAY
80518: PPUSH
80519: LD_VAR 0 12
80523: PUSH
80524: LD_INT 2
80526: ARRAY
80527: PPUSH
80528: CALL_OW 298
80532: ST_TO_ADDR
// distance := 9999 ;
80533: LD_ADDR_VAR 0 10
80537: PUSH
80538: LD_INT 9999
80540: ST_TO_ADDR
// for i := 0 to 5 do
80541: LD_ADDR_VAR 0 6
80545: PUSH
80546: DOUBLE
80547: LD_INT 0
80549: DEC
80550: ST_TO_ADDR
80551: LD_INT 5
80553: PUSH
80554: FOR_TO
80555: IFFALSE 80698
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80557: LD_ADDR_VAR 0 7
80561: PUSH
80562: LD_VAR 0 1
80566: PPUSH
80567: LD_VAR 0 6
80571: PPUSH
80572: LD_VAR 0 11
80576: PPUSH
80577: CALL_OW 272
80581: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80582: LD_ADDR_VAR 0 8
80586: PUSH
80587: LD_VAR 0 2
80591: PPUSH
80592: LD_VAR 0 6
80596: PPUSH
80597: LD_VAR 0 11
80601: PPUSH
80602: CALL_OW 273
80606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80607: LD_VAR 0 7
80611: PPUSH
80612: LD_VAR 0 8
80616: PPUSH
80617: CALL_OW 488
80621: NOT
80622: IFFALSE 80626
// continue ;
80624: GO 80554
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80626: LD_ADDR_VAR 0 9
80630: PUSH
80631: LD_VAR 0 12
80635: PUSH
80636: LD_INT 1
80638: ARRAY
80639: PPUSH
80640: LD_VAR 0 12
80644: PUSH
80645: LD_INT 2
80647: ARRAY
80648: PPUSH
80649: LD_VAR 0 7
80653: PPUSH
80654: LD_VAR 0 8
80658: PPUSH
80659: CALL_OW 298
80663: ST_TO_ADDR
// if tmp < distance then
80664: LD_VAR 0 9
80668: PUSH
80669: LD_VAR 0 10
80673: LESS
80674: IFFALSE 80696
// begin result := i ;
80676: LD_ADDR_VAR 0 5
80680: PUSH
80681: LD_VAR 0 6
80685: ST_TO_ADDR
// distance := tmp ;
80686: LD_ADDR_VAR 0 10
80690: PUSH
80691: LD_VAR 0 9
80695: ST_TO_ADDR
// end ; end ;
80696: GO 80554
80698: POP
80699: POP
// end ;
80700: LD_VAR 0 5
80704: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80705: LD_INT 0
80707: PPUSH
80708: PPUSH
// if not driver or not IsInUnit ( driver ) then
80709: LD_VAR 0 1
80713: NOT
80714: PUSH
80715: LD_VAR 0 1
80719: PPUSH
80720: CALL_OW 310
80724: NOT
80725: OR
80726: IFFALSE 80730
// exit ;
80728: GO 80820
// vehicle := IsInUnit ( driver ) ;
80730: LD_ADDR_VAR 0 3
80734: PUSH
80735: LD_VAR 0 1
80739: PPUSH
80740: CALL_OW 310
80744: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80745: LD_VAR 0 1
80749: PPUSH
80750: LD_STRING \
80752: PUSH
80753: LD_INT 0
80755: PUSH
80756: LD_INT 0
80758: PUSH
80759: LD_INT 0
80761: PUSH
80762: LD_INT 0
80764: PUSH
80765: LD_INT 0
80767: PUSH
80768: LD_INT 0
80770: PUSH
80771: EMPTY
80772: LIST
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: PUSH
80780: LD_STRING E
80782: PUSH
80783: LD_INT 0
80785: PUSH
80786: LD_INT 0
80788: PUSH
80789: LD_VAR 0 3
80793: PUSH
80794: LD_INT 0
80796: PUSH
80797: LD_INT 0
80799: PUSH
80800: LD_INT 0
80802: PUSH
80803: EMPTY
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PPUSH
80816: CALL_OW 446
// end ;
80820: LD_VAR 0 2
80824: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80825: LD_INT 0
80827: PPUSH
80828: PPUSH
// if not driver or not IsInUnit ( driver ) then
80829: LD_VAR 0 1
80833: NOT
80834: PUSH
80835: LD_VAR 0 1
80839: PPUSH
80840: CALL_OW 310
80844: NOT
80845: OR
80846: IFFALSE 80850
// exit ;
80848: GO 80940
// vehicle := IsInUnit ( driver ) ;
80850: LD_ADDR_VAR 0 3
80854: PUSH
80855: LD_VAR 0 1
80859: PPUSH
80860: CALL_OW 310
80864: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80865: LD_VAR 0 1
80869: PPUSH
80870: LD_STRING \
80872: PUSH
80873: LD_INT 0
80875: PUSH
80876: LD_INT 0
80878: PUSH
80879: LD_INT 0
80881: PUSH
80882: LD_INT 0
80884: PUSH
80885: LD_INT 0
80887: PUSH
80888: LD_INT 0
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: PUSH
80900: LD_STRING E
80902: PUSH
80903: LD_INT 0
80905: PUSH
80906: LD_INT 0
80908: PUSH
80909: LD_VAR 0 3
80913: PUSH
80914: LD_INT 0
80916: PUSH
80917: LD_INT 0
80919: PUSH
80920: LD_INT 0
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: LIST
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PPUSH
80936: CALL_OW 447
// end ;
80940: LD_VAR 0 2
80944: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80945: LD_INT 0
80947: PPUSH
80948: PPUSH
80949: PPUSH
// tmp := [ ] ;
80950: LD_ADDR_VAR 0 5
80954: PUSH
80955: EMPTY
80956: ST_TO_ADDR
// for i in units do
80957: LD_ADDR_VAR 0 4
80961: PUSH
80962: LD_VAR 0 1
80966: PUSH
80967: FOR_IN
80968: IFFALSE 81006
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80970: LD_ADDR_VAR 0 5
80974: PUSH
80975: LD_VAR 0 5
80979: PPUSH
80980: LD_VAR 0 5
80984: PUSH
80985: LD_INT 1
80987: PLUS
80988: PPUSH
80989: LD_VAR 0 4
80993: PPUSH
80994: CALL_OW 256
80998: PPUSH
80999: CALL_OW 2
81003: ST_TO_ADDR
81004: GO 80967
81006: POP
81007: POP
// if not tmp then
81008: LD_VAR 0 5
81012: NOT
81013: IFFALSE 81017
// exit ;
81015: GO 81065
// if asc then
81017: LD_VAR 0 2
81021: IFFALSE 81045
// result := SortListByListAsc ( units , tmp ) else
81023: LD_ADDR_VAR 0 3
81027: PUSH
81028: LD_VAR 0 1
81032: PPUSH
81033: LD_VAR 0 5
81037: PPUSH
81038: CALL_OW 76
81042: ST_TO_ADDR
81043: GO 81065
// result := SortListByListDesc ( units , tmp ) ;
81045: LD_ADDR_VAR 0 3
81049: PUSH
81050: LD_VAR 0 1
81054: PPUSH
81055: LD_VAR 0 5
81059: PPUSH
81060: CALL_OW 77
81064: ST_TO_ADDR
// end ;
81065: LD_VAR 0 3
81069: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81070: LD_INT 0
81072: PPUSH
81073: PPUSH
// task := GetTaskList ( mech ) ;
81074: LD_ADDR_VAR 0 4
81078: PUSH
81079: LD_VAR 0 1
81083: PPUSH
81084: CALL_OW 437
81088: ST_TO_ADDR
// if not task then
81089: LD_VAR 0 4
81093: NOT
81094: IFFALSE 81098
// exit ;
81096: GO 81140
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81098: LD_ADDR_VAR 0 3
81102: PUSH
81103: LD_VAR 0 4
81107: PUSH
81108: LD_INT 1
81110: ARRAY
81111: PUSH
81112: LD_INT 1
81114: ARRAY
81115: PUSH
81116: LD_STRING r
81118: EQUAL
81119: PUSH
81120: LD_VAR 0 4
81124: PUSH
81125: LD_INT 1
81127: ARRAY
81128: PUSH
81129: LD_INT 4
81131: ARRAY
81132: PUSH
81133: LD_VAR 0 2
81137: EQUAL
81138: AND
81139: ST_TO_ADDR
// end ;
81140: LD_VAR 0 3
81144: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81145: LD_INT 0
81147: PPUSH
// SetDir ( unit , d ) ;
81148: LD_VAR 0 1
81152: PPUSH
81153: LD_VAR 0 4
81157: PPUSH
81158: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81162: LD_VAR 0 1
81166: PPUSH
81167: LD_VAR 0 2
81171: PPUSH
81172: LD_VAR 0 3
81176: PPUSH
81177: LD_VAR 0 5
81181: PPUSH
81182: CALL_OW 48
// end ;
81186: LD_VAR 0 6
81190: RET
// export function ToNaturalNumber ( number ) ; begin
81191: LD_INT 0
81193: PPUSH
// result := number div 1 ;
81194: LD_ADDR_VAR 0 2
81198: PUSH
81199: LD_VAR 0 1
81203: PUSH
81204: LD_INT 1
81206: DIV
81207: ST_TO_ADDR
// if number < 0 then
81208: LD_VAR 0 1
81212: PUSH
81213: LD_INT 0
81215: LESS
81216: IFFALSE 81226
// result := 0 ;
81218: LD_ADDR_VAR 0 2
81222: PUSH
81223: LD_INT 0
81225: ST_TO_ADDR
// end ;
81226: LD_VAR 0 2
81230: RET
// export function SortByClass ( units , class ) ; var un ; begin
81231: LD_INT 0
81233: PPUSH
81234: PPUSH
// if not units or not class then
81235: LD_VAR 0 1
81239: NOT
81240: PUSH
81241: LD_VAR 0 2
81245: NOT
81246: OR
81247: IFFALSE 81251
// exit ;
81249: GO 81346
// result := [ ] ;
81251: LD_ADDR_VAR 0 3
81255: PUSH
81256: EMPTY
81257: ST_TO_ADDR
// for un in units do
81258: LD_ADDR_VAR 0 4
81262: PUSH
81263: LD_VAR 0 1
81267: PUSH
81268: FOR_IN
81269: IFFALSE 81344
// if GetClass ( un ) = class then
81271: LD_VAR 0 4
81275: PPUSH
81276: CALL_OW 257
81280: PUSH
81281: LD_VAR 0 2
81285: EQUAL
81286: IFFALSE 81313
// result := Insert ( result , 1 , un ) else
81288: LD_ADDR_VAR 0 3
81292: PUSH
81293: LD_VAR 0 3
81297: PPUSH
81298: LD_INT 1
81300: PPUSH
81301: LD_VAR 0 4
81305: PPUSH
81306: CALL_OW 2
81310: ST_TO_ADDR
81311: GO 81342
// result := Replace ( result , result + 1 , un ) ;
81313: LD_ADDR_VAR 0 3
81317: PUSH
81318: LD_VAR 0 3
81322: PPUSH
81323: LD_VAR 0 3
81327: PUSH
81328: LD_INT 1
81330: PLUS
81331: PPUSH
81332: LD_VAR 0 4
81336: PPUSH
81337: CALL_OW 1
81341: ST_TO_ADDR
81342: GO 81268
81344: POP
81345: POP
// end ;
81346: LD_VAR 0 3
81350: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81351: LD_INT 0
81353: PPUSH
81354: PPUSH
81355: PPUSH
81356: PPUSH
81357: PPUSH
81358: PPUSH
81359: PPUSH
// result := [ ] ;
81360: LD_ADDR_VAR 0 4
81364: PUSH
81365: EMPTY
81366: ST_TO_ADDR
// if x - r < 0 then
81367: LD_VAR 0 1
81371: PUSH
81372: LD_VAR 0 3
81376: MINUS
81377: PUSH
81378: LD_INT 0
81380: LESS
81381: IFFALSE 81393
// min_x := 0 else
81383: LD_ADDR_VAR 0 8
81387: PUSH
81388: LD_INT 0
81390: ST_TO_ADDR
81391: GO 81409
// min_x := x - r ;
81393: LD_ADDR_VAR 0 8
81397: PUSH
81398: LD_VAR 0 1
81402: PUSH
81403: LD_VAR 0 3
81407: MINUS
81408: ST_TO_ADDR
// if y - r < 0 then
81409: LD_VAR 0 2
81413: PUSH
81414: LD_VAR 0 3
81418: MINUS
81419: PUSH
81420: LD_INT 0
81422: LESS
81423: IFFALSE 81435
// min_y := 0 else
81425: LD_ADDR_VAR 0 7
81429: PUSH
81430: LD_INT 0
81432: ST_TO_ADDR
81433: GO 81451
// min_y := y - r ;
81435: LD_ADDR_VAR 0 7
81439: PUSH
81440: LD_VAR 0 2
81444: PUSH
81445: LD_VAR 0 3
81449: MINUS
81450: ST_TO_ADDR
// max_x := x + r ;
81451: LD_ADDR_VAR 0 9
81455: PUSH
81456: LD_VAR 0 1
81460: PUSH
81461: LD_VAR 0 3
81465: PLUS
81466: ST_TO_ADDR
// max_y := y + r ;
81467: LD_ADDR_VAR 0 10
81471: PUSH
81472: LD_VAR 0 2
81476: PUSH
81477: LD_VAR 0 3
81481: PLUS
81482: ST_TO_ADDR
// for _x = min_x to max_x do
81483: LD_ADDR_VAR 0 5
81487: PUSH
81488: DOUBLE
81489: LD_VAR 0 8
81493: DEC
81494: ST_TO_ADDR
81495: LD_VAR 0 9
81499: PUSH
81500: FOR_TO
81501: IFFALSE 81602
// for _y = min_y to max_y do
81503: LD_ADDR_VAR 0 6
81507: PUSH
81508: DOUBLE
81509: LD_VAR 0 7
81513: DEC
81514: ST_TO_ADDR
81515: LD_VAR 0 10
81519: PUSH
81520: FOR_TO
81521: IFFALSE 81598
// begin if not ValidHex ( _x , _y ) then
81523: LD_VAR 0 5
81527: PPUSH
81528: LD_VAR 0 6
81532: PPUSH
81533: CALL_OW 488
81537: NOT
81538: IFFALSE 81542
// continue ;
81540: GO 81520
// if GetResourceTypeXY ( _x , _y ) then
81542: LD_VAR 0 5
81546: PPUSH
81547: LD_VAR 0 6
81551: PPUSH
81552: CALL_OW 283
81556: IFFALSE 81596
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81558: LD_ADDR_VAR 0 4
81562: PUSH
81563: LD_VAR 0 4
81567: PPUSH
81568: LD_VAR 0 4
81572: PUSH
81573: LD_INT 1
81575: PLUS
81576: PPUSH
81577: LD_VAR 0 5
81581: PUSH
81582: LD_VAR 0 6
81586: PUSH
81587: EMPTY
81588: LIST
81589: LIST
81590: PPUSH
81591: CALL_OW 1
81595: ST_TO_ADDR
// end ;
81596: GO 81520
81598: POP
81599: POP
81600: GO 81500
81602: POP
81603: POP
// end ;
81604: LD_VAR 0 4
81608: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81609: LD_INT 0
81611: PPUSH
81612: PPUSH
81613: PPUSH
81614: PPUSH
81615: PPUSH
81616: PPUSH
81617: PPUSH
81618: PPUSH
// if not units then
81619: LD_VAR 0 1
81623: NOT
81624: IFFALSE 81628
// exit ;
81626: GO 82053
// result := UnitFilter ( units , [ f_ok ] ) ;
81628: LD_ADDR_VAR 0 3
81632: PUSH
81633: LD_VAR 0 1
81637: PPUSH
81638: LD_INT 50
81640: PUSH
81641: EMPTY
81642: LIST
81643: PPUSH
81644: CALL_OW 72
81648: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81649: LD_ADDR_VAR 0 8
81653: PUSH
81654: LD_VAR 0 1
81658: PUSH
81659: LD_INT 1
81661: ARRAY
81662: PPUSH
81663: CALL_OW 255
81667: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
81668: LD_ADDR_VAR 0 10
81672: PUSH
81673: LD_INT 29
81675: PUSH
81676: LD_EXP 125
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: ST_TO_ADDR
// if not result then
81685: LD_VAR 0 3
81689: NOT
81690: IFFALSE 81694
// exit ;
81692: GO 82053
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81694: LD_ADDR_VAR 0 5
81698: PUSH
81699: LD_INT 81
81701: PUSH
81702: LD_VAR 0 8
81706: PUSH
81707: EMPTY
81708: LIST
81709: LIST
81710: PPUSH
81711: CALL_OW 69
81715: ST_TO_ADDR
// for i in result do
81716: LD_ADDR_VAR 0 4
81720: PUSH
81721: LD_VAR 0 3
81725: PUSH
81726: FOR_IN
81727: IFFALSE 82051
// begin tag := GetTag ( i ) + 1 ;
81729: LD_ADDR_VAR 0 9
81733: PUSH
81734: LD_VAR 0 4
81738: PPUSH
81739: CALL_OW 110
81743: PUSH
81744: LD_INT 1
81746: PLUS
81747: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81748: LD_ADDR_VAR 0 7
81752: PUSH
81753: LD_VAR 0 4
81757: PPUSH
81758: CALL_OW 250
81762: PPUSH
81763: LD_VAR 0 4
81767: PPUSH
81768: CALL_OW 251
81772: PPUSH
81773: LD_INT 6
81775: PPUSH
81776: CALL 81351 0 3
81780: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81781: LD_VAR 0 7
81785: PUSH
81786: LD_VAR 0 4
81790: PPUSH
81791: CALL_OW 264
81795: PUSH
81796: LD_VAR 0 10
81800: IN
81801: NOT
81802: AND
81803: IFFALSE 81842
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81805: LD_VAR 0 4
81809: PPUSH
81810: LD_VAR 0 7
81814: PUSH
81815: LD_INT 1
81817: ARRAY
81818: PUSH
81819: LD_INT 1
81821: ARRAY
81822: PPUSH
81823: LD_VAR 0 7
81827: PUSH
81828: LD_INT 1
81830: ARRAY
81831: PUSH
81832: LD_INT 2
81834: ARRAY
81835: PPUSH
81836: CALL_OW 116
81840: GO 82049
// if path > tag then
81842: LD_VAR 0 2
81846: PUSH
81847: LD_VAR 0 9
81851: GREATER
81852: IFFALSE 82019
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
81854: LD_ADDR_VAR 0 6
81858: PUSH
81859: LD_VAR 0 5
81863: PPUSH
81864: LD_INT 91
81866: PUSH
81867: LD_VAR 0 4
81871: PUSH
81872: LD_INT 12
81874: PUSH
81875: EMPTY
81876: LIST
81877: LIST
81878: LIST
81879: PPUSH
81880: CALL_OW 72
81884: ST_TO_ADDR
// if nearEnemy then
81885: LD_VAR 0 6
81889: IFFALSE 81917
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81891: LD_VAR 0 4
81895: PPUSH
81896: LD_VAR 0 6
81900: PPUSH
81901: LD_VAR 0 4
81905: PPUSH
81906: CALL_OW 74
81910: PPUSH
81911: CALL_OW 115
81915: GO 82017
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81917: LD_VAR 0 4
81921: PPUSH
81922: LD_VAR 0 2
81926: PUSH
81927: LD_VAR 0 9
81931: ARRAY
81932: PUSH
81933: LD_INT 1
81935: ARRAY
81936: PPUSH
81937: LD_VAR 0 2
81941: PUSH
81942: LD_VAR 0 9
81946: ARRAY
81947: PUSH
81948: LD_INT 2
81950: ARRAY
81951: PPUSH
81952: CALL_OW 297
81956: PUSH
81957: LD_INT 6
81959: GREATER
81960: IFFALSE 82003
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81962: LD_VAR 0 4
81966: PPUSH
81967: LD_VAR 0 2
81971: PUSH
81972: LD_VAR 0 9
81976: ARRAY
81977: PUSH
81978: LD_INT 1
81980: ARRAY
81981: PPUSH
81982: LD_VAR 0 2
81986: PUSH
81987: LD_VAR 0 9
81991: ARRAY
81992: PUSH
81993: LD_INT 2
81995: ARRAY
81996: PPUSH
81997: CALL_OW 114
82001: GO 82017
// SetTag ( i , tag ) ;
82003: LD_VAR 0 4
82007: PPUSH
82008: LD_VAR 0 9
82012: PPUSH
82013: CALL_OW 109
// end else
82017: GO 82049
// if enemy then
82019: LD_VAR 0 5
82023: IFFALSE 82049
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82025: LD_VAR 0 4
82029: PPUSH
82030: LD_VAR 0 5
82034: PPUSH
82035: LD_VAR 0 4
82039: PPUSH
82040: CALL_OW 74
82044: PPUSH
82045: CALL_OW 115
// end ;
82049: GO 81726
82051: POP
82052: POP
// end ;
82053: LD_VAR 0 3
82057: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82058: LD_INT 0
82060: PPUSH
82061: PPUSH
82062: PPUSH
// if not unit or IsInUnit ( unit ) then
82063: LD_VAR 0 1
82067: NOT
82068: PUSH
82069: LD_VAR 0 1
82073: PPUSH
82074: CALL_OW 310
82078: OR
82079: IFFALSE 82083
// exit ;
82081: GO 82174
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82083: LD_ADDR_VAR 0 4
82087: PUSH
82088: LD_VAR 0 1
82092: PPUSH
82093: CALL_OW 250
82097: PPUSH
82098: LD_VAR 0 2
82102: PPUSH
82103: LD_INT 1
82105: PPUSH
82106: CALL_OW 272
82110: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82111: LD_ADDR_VAR 0 5
82115: PUSH
82116: LD_VAR 0 1
82120: PPUSH
82121: CALL_OW 251
82125: PPUSH
82126: LD_VAR 0 2
82130: PPUSH
82131: LD_INT 1
82133: PPUSH
82134: CALL_OW 273
82138: ST_TO_ADDR
// if ValidHex ( x , y ) then
82139: LD_VAR 0 4
82143: PPUSH
82144: LD_VAR 0 5
82148: PPUSH
82149: CALL_OW 488
82153: IFFALSE 82174
// ComTurnXY ( unit , x , y ) ;
82155: LD_VAR 0 1
82159: PPUSH
82160: LD_VAR 0 4
82164: PPUSH
82165: LD_VAR 0 5
82169: PPUSH
82170: CALL_OW 118
// end ;
82174: LD_VAR 0 3
82178: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82179: LD_INT 0
82181: PPUSH
82182: PPUSH
// result := false ;
82183: LD_ADDR_VAR 0 3
82187: PUSH
82188: LD_INT 0
82190: ST_TO_ADDR
// if not units then
82191: LD_VAR 0 2
82195: NOT
82196: IFFALSE 82200
// exit ;
82198: GO 82245
// for i in units do
82200: LD_ADDR_VAR 0 4
82204: PUSH
82205: LD_VAR 0 2
82209: PUSH
82210: FOR_IN
82211: IFFALSE 82243
// if See ( side , i ) then
82213: LD_VAR 0 1
82217: PPUSH
82218: LD_VAR 0 4
82222: PPUSH
82223: CALL_OW 292
82227: IFFALSE 82241
// begin result := true ;
82229: LD_ADDR_VAR 0 3
82233: PUSH
82234: LD_INT 1
82236: ST_TO_ADDR
// exit ;
82237: POP
82238: POP
82239: GO 82245
// end ;
82241: GO 82210
82243: POP
82244: POP
// end ;
82245: LD_VAR 0 3
82249: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82250: LD_INT 0
82252: PPUSH
82253: PPUSH
82254: PPUSH
82255: PPUSH
// if not unit or not points then
82256: LD_VAR 0 1
82260: NOT
82261: PUSH
82262: LD_VAR 0 2
82266: NOT
82267: OR
82268: IFFALSE 82272
// exit ;
82270: GO 82362
// dist := 99999 ;
82272: LD_ADDR_VAR 0 5
82276: PUSH
82277: LD_INT 99999
82279: ST_TO_ADDR
// for i in points do
82280: LD_ADDR_VAR 0 4
82284: PUSH
82285: LD_VAR 0 2
82289: PUSH
82290: FOR_IN
82291: IFFALSE 82360
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82293: LD_ADDR_VAR 0 6
82297: PUSH
82298: LD_VAR 0 1
82302: PPUSH
82303: LD_VAR 0 4
82307: PUSH
82308: LD_INT 1
82310: ARRAY
82311: PPUSH
82312: LD_VAR 0 4
82316: PUSH
82317: LD_INT 2
82319: ARRAY
82320: PPUSH
82321: CALL_OW 297
82325: ST_TO_ADDR
// if tmpDist < dist then
82326: LD_VAR 0 6
82330: PUSH
82331: LD_VAR 0 5
82335: LESS
82336: IFFALSE 82358
// begin result := i ;
82338: LD_ADDR_VAR 0 3
82342: PUSH
82343: LD_VAR 0 4
82347: ST_TO_ADDR
// dist := tmpDist ;
82348: LD_ADDR_VAR 0 5
82352: PUSH
82353: LD_VAR 0 6
82357: ST_TO_ADDR
// end ; end ;
82358: GO 82290
82360: POP
82361: POP
// end ; end_of_file
82362: LD_VAR 0 3
82366: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
82367: LD_INT 0
82369: PPUSH
// ar_miner := 81 ;
82370: LD_ADDR_EXP 128
82374: PUSH
82375: LD_INT 81
82377: ST_TO_ADDR
// ar_crane := 88 ;
82378: LD_ADDR_EXP 127
82382: PUSH
82383: LD_INT 88
82385: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
82386: LD_ADDR_EXP 122
82390: PUSH
82391: LD_INT 89
82393: ST_TO_ADDR
// us_hack := 99 ;
82394: LD_ADDR_EXP 123
82398: PUSH
82399: LD_INT 99
82401: ST_TO_ADDR
// us_artillery := 97 ;
82402: LD_ADDR_EXP 124
82406: PUSH
82407: LD_INT 97
82409: ST_TO_ADDR
// ar_bio_bomb := 91 ;
82410: LD_ADDR_EXP 125
82414: PUSH
82415: LD_INT 91
82417: ST_TO_ADDR
// ar_mortar := 92 ;
82418: LD_ADDR_EXP 126
82422: PUSH
82423: LD_INT 92
82425: ST_TO_ADDR
// ru_radar := 98 ;
82426: LD_ADDR_EXP 121
82430: PUSH
82431: LD_INT 98
82433: ST_TO_ADDR
// tech_Artillery := 80 ;
82434: LD_ADDR_EXP 129
82438: PUSH
82439: LD_INT 80
82441: ST_TO_ADDR
// tech_RadMat := 81 ;
82442: LD_ADDR_EXP 130
82446: PUSH
82447: LD_INT 81
82449: ST_TO_ADDR
// tech_BasicTools := 82 ;
82450: LD_ADDR_EXP 131
82454: PUSH
82455: LD_INT 82
82457: ST_TO_ADDR
// tech_Cargo := 83 ;
82458: LD_ADDR_EXP 132
82462: PUSH
82463: LD_INT 83
82465: ST_TO_ADDR
// tech_Track := 84 ;
82466: LD_ADDR_EXP 133
82470: PUSH
82471: LD_INT 84
82473: ST_TO_ADDR
// tech_Crane := 85 ;
82474: LD_ADDR_EXP 134
82478: PUSH
82479: LD_INT 85
82481: ST_TO_ADDR
// tech_Bulldozer := 86 ;
82482: LD_ADDR_EXP 135
82486: PUSH
82487: LD_INT 86
82489: ST_TO_ADDR
// tech_Hovercraft := 87 ;
82490: LD_ADDR_EXP 136
82494: PUSH
82495: LD_INT 87
82497: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
82498: LD_ADDR_EXP 137
82502: PUSH
82503: LD_INT 88
82505: ST_TO_ADDR
// class_mastodont := 31 ;
82506: LD_ADDR_EXP 138
82510: PUSH
82511: LD_INT 31
82513: ST_TO_ADDR
// class_horse := 21 ;
82514: LD_ADDR_EXP 139
82518: PUSH
82519: LD_INT 21
82521: ST_TO_ADDR
// end ;
82522: LD_VAR 0 1
82526: RET
// every 1 do
82527: GO 82529
82529: DISABLE
// InitGlobalVariables ; end_of_file
82530: CALL 82367 0 0
82534: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82535: LD_INT 0
82537: PPUSH
82538: PPUSH
82539: PPUSH
82540: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82541: LD_VAR 0 1
82545: PPUSH
82546: CALL_OW 264
82550: PUSH
82551: LD_EXP 125
82555: EQUAL
82556: IFFALSE 82628
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82558: LD_INT 68
82560: PPUSH
82561: LD_VAR 0 1
82565: PPUSH
82566: CALL_OW 255
82570: PPUSH
82571: CALL_OW 321
82575: PUSH
82576: LD_INT 2
82578: EQUAL
82579: IFFALSE 82591
// eff := 70 else
82581: LD_ADDR_VAR 0 4
82585: PUSH
82586: LD_INT 70
82588: ST_TO_ADDR
82589: GO 82599
// eff := 30 ;
82591: LD_ADDR_VAR 0 4
82595: PUSH
82596: LD_INT 30
82598: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82599: LD_VAR 0 1
82603: PPUSH
82604: CALL_OW 250
82608: PPUSH
82609: LD_VAR 0 1
82613: PPUSH
82614: CALL_OW 251
82618: PPUSH
82619: LD_VAR 0 4
82623: PPUSH
82624: CALL_OW 495
// end ; end ;
82628: LD_VAR 0 2
82632: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82633: LD_INT 0
82635: PPUSH
// end ;
82636: LD_VAR 0 4
82640: RET
// export function SOS_Command ( cmd ) ; begin
82641: LD_INT 0
82643: PPUSH
// end ;
82644: LD_VAR 0 2
82648: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
82649: LD_INT 0
82651: PPUSH
// end ;
82652: LD_VAR 0 6
82656: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
82657: LD_INT 0
82659: PPUSH
82660: PPUSH
// if not vehicle or not factory then
82661: LD_VAR 0 1
82665: NOT
82666: PUSH
82667: LD_VAR 0 2
82671: NOT
82672: OR
82673: IFFALSE 82677
// exit ;
82675: GO 82908
// if factoryWaypoints >= factory then
82677: LD_EXP 140
82681: PUSH
82682: LD_VAR 0 2
82686: GREATEREQUAL
82687: IFFALSE 82908
// if factoryWaypoints [ factory ] then
82689: LD_EXP 140
82693: PUSH
82694: LD_VAR 0 2
82698: ARRAY
82699: IFFALSE 82908
// begin if GetControl ( vehicle ) = control_manual then
82701: LD_VAR 0 1
82705: PPUSH
82706: CALL_OW 263
82710: PUSH
82711: LD_INT 1
82713: EQUAL
82714: IFFALSE 82795
// begin driver := IsDrivenBy ( vehicle ) ;
82716: LD_ADDR_VAR 0 4
82720: PUSH
82721: LD_VAR 0 1
82725: PPUSH
82726: CALL_OW 311
82730: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
82731: LD_VAR 0 4
82735: PPUSH
82736: LD_EXP 140
82740: PUSH
82741: LD_VAR 0 2
82745: ARRAY
82746: PUSH
82747: LD_INT 1
82749: ARRAY
82750: PPUSH
82751: LD_EXP 140
82755: PUSH
82756: LD_VAR 0 2
82760: ARRAY
82761: PUSH
82762: LD_INT 2
82764: ARRAY
82765: PPUSH
82766: CALL_OW 171
// AddComExitVehicle ( driver ) ;
82770: LD_VAR 0 4
82774: PPUSH
82775: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
82779: LD_VAR 0 4
82783: PPUSH
82784: LD_VAR 0 2
82788: PPUSH
82789: CALL_OW 180
// end else
82793: GO 82908
// if GetControl ( vehicle ) = control_remote then
82795: LD_VAR 0 1
82799: PPUSH
82800: CALL_OW 263
82804: PUSH
82805: LD_INT 2
82807: EQUAL
82808: IFFALSE 82869
// begin wait ( 0 0$2 ) ;
82810: LD_INT 70
82812: PPUSH
82813: CALL_OW 67
// if Connect ( vehicle ) then
82817: LD_VAR 0 1
82821: PPUSH
82822: CALL 50233 0 1
82826: IFFALSE 82867
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
82828: LD_VAR 0 1
82832: PPUSH
82833: LD_EXP 140
82837: PUSH
82838: LD_VAR 0 2
82842: ARRAY
82843: PUSH
82844: LD_INT 1
82846: ARRAY
82847: PPUSH
82848: LD_EXP 140
82852: PUSH
82853: LD_VAR 0 2
82857: ARRAY
82858: PUSH
82859: LD_INT 2
82861: ARRAY
82862: PPUSH
82863: CALL_OW 171
// end else
82867: GO 82908
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
82869: LD_VAR 0 1
82873: PPUSH
82874: LD_EXP 140
82878: PUSH
82879: LD_VAR 0 2
82883: ARRAY
82884: PUSH
82885: LD_INT 1
82887: ARRAY
82888: PPUSH
82889: LD_EXP 140
82893: PUSH
82894: LD_VAR 0 2
82898: ARRAY
82899: PUSH
82900: LD_INT 2
82902: ARRAY
82903: PPUSH
82904: CALL_OW 171
// end ; end ;
82908: LD_VAR 0 3
82912: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82913: LD_INT 0
82915: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82916: LD_VAR 0 1
82920: PUSH
82921: LD_INT 250
82923: EQUAL
82924: PUSH
82925: LD_VAR 0 2
82929: PPUSH
82930: CALL_OW 264
82934: PUSH
82935: LD_EXP 128
82939: EQUAL
82940: AND
82941: IFFALSE 82962
// MinerPlaceMine ( unit , x , y ) ;
82943: LD_VAR 0 2
82947: PPUSH
82948: LD_VAR 0 4
82952: PPUSH
82953: LD_VAR 0 5
82957: PPUSH
82958: CALL 85690 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82962: LD_VAR 0 1
82966: PUSH
82967: LD_INT 251
82969: EQUAL
82970: PUSH
82971: LD_VAR 0 2
82975: PPUSH
82976: CALL_OW 264
82980: PUSH
82981: LD_EXP 128
82985: EQUAL
82986: AND
82987: IFFALSE 83008
// MinerDetonateMine ( unit , x , y ) ;
82989: LD_VAR 0 2
82993: PPUSH
82994: LD_VAR 0 4
82998: PPUSH
82999: LD_VAR 0 5
83003: PPUSH
83004: CALL 85967 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
83008: LD_VAR 0 1
83012: PUSH
83013: LD_INT 252
83015: EQUAL
83016: PUSH
83017: LD_VAR 0 2
83021: PPUSH
83022: CALL_OW 264
83026: PUSH
83027: LD_EXP 128
83031: EQUAL
83032: AND
83033: IFFALSE 83054
// MinerCreateMinefield ( unit , x , y ) ;
83035: LD_VAR 0 2
83039: PPUSH
83040: LD_VAR 0 4
83044: PPUSH
83045: LD_VAR 0 5
83049: PPUSH
83050: CALL 86384 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
83054: LD_VAR 0 1
83058: PUSH
83059: LD_INT 253
83061: EQUAL
83062: PUSH
83063: LD_VAR 0 2
83067: PPUSH
83068: CALL_OW 257
83072: PUSH
83073: LD_INT 5
83075: EQUAL
83076: AND
83077: IFFALSE 83098
// ComBinocular ( unit , x , y ) ;
83079: LD_VAR 0 2
83083: PPUSH
83084: LD_VAR 0 4
83088: PPUSH
83089: LD_VAR 0 5
83093: PPUSH
83094: CALL 86755 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
83098: LD_VAR 0 1
83102: PUSH
83103: LD_INT 254
83105: EQUAL
83106: PUSH
83107: LD_VAR 0 2
83111: PPUSH
83112: CALL_OW 264
83116: PUSH
83117: LD_EXP 123
83121: EQUAL
83122: AND
83123: PUSH
83124: LD_VAR 0 3
83128: PPUSH
83129: CALL_OW 263
83133: PUSH
83134: LD_INT 3
83136: EQUAL
83137: AND
83138: IFFALSE 83154
// HackDestroyVehicle ( unit , selectedUnit ) ;
83140: LD_VAR 0 2
83144: PPUSH
83145: LD_VAR 0 3
83149: PPUSH
83150: CALL 85050 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
83154: LD_VAR 0 1
83158: PUSH
83159: LD_INT 255
83161: EQUAL
83162: PUSH
83163: LD_VAR 0 2
83167: PPUSH
83168: CALL_OW 264
83172: PUSH
83173: LD_INT 14
83175: PUSH
83176: LD_INT 53
83178: PUSH
83179: EMPTY
83180: LIST
83181: LIST
83182: IN
83183: AND
83184: PUSH
83185: LD_VAR 0 4
83189: PPUSH
83190: LD_VAR 0 5
83194: PPUSH
83195: CALL_OW 488
83199: AND
83200: IFFALSE 83224
// CutTreeXYR ( unit , x , y , 12 ) ;
83202: LD_VAR 0 2
83206: PPUSH
83207: LD_VAR 0 4
83211: PPUSH
83212: LD_VAR 0 5
83216: PPUSH
83217: LD_INT 12
83219: PPUSH
83220: CALL 83616 0 4
// if cmd = 256 then
83224: LD_VAR 0 1
83228: PUSH
83229: LD_INT 256
83231: EQUAL
83232: IFFALSE 83253
// SetFactoryWaypoint ( unit , x , y ) ;
83234: LD_VAR 0 2
83238: PPUSH
83239: LD_VAR 0 4
83243: PPUSH
83244: LD_VAR 0 5
83248: PPUSH
83249: CALL 83258 0 3
// end ;
83253: LD_VAR 0 6
83257: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
83258: LD_INT 0
83260: PPUSH
83261: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
83262: LD_VAR 0 1
83266: NOT
83267: PUSH
83268: LD_VAR 0 2
83272: PPUSH
83273: LD_VAR 0 3
83277: PPUSH
83278: CALL_OW 488
83282: NOT
83283: OR
83284: PUSH
83285: LD_VAR 0 1
83289: PPUSH
83290: CALL_OW 266
83294: PUSH
83295: LD_INT 3
83297: NONEQUAL
83298: PUSH
83299: LD_VAR 0 1
83303: PPUSH
83304: CALL_OW 247
83308: PUSH
83309: LD_INT 1
83311: EQUAL
83312: NOT
83313: AND
83314: OR
83315: IFFALSE 83319
// exit ;
83317: GO 83468
// if GetType ( factory ) = unit_human then
83319: LD_VAR 0 1
83323: PPUSH
83324: CALL_OW 247
83328: PUSH
83329: LD_INT 1
83331: EQUAL
83332: IFFALSE 83349
// factory := IsInUnit ( factory ) ;
83334: LD_ADDR_VAR 0 1
83338: PUSH
83339: LD_VAR 0 1
83343: PPUSH
83344: CALL_OW 310
83348: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
83349: LD_VAR 0 1
83353: PPUSH
83354: CALL_OW 266
83358: PUSH
83359: LD_INT 3
83361: NONEQUAL
83362: IFFALSE 83366
// exit ;
83364: GO 83468
// if HexInfo ( x , y ) = factory then
83366: LD_VAR 0 2
83370: PPUSH
83371: LD_VAR 0 3
83375: PPUSH
83376: CALL_OW 428
83380: PUSH
83381: LD_VAR 0 1
83385: EQUAL
83386: IFFALSE 83413
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
83388: LD_ADDR_EXP 140
83392: PUSH
83393: LD_EXP 140
83397: PPUSH
83398: LD_VAR 0 1
83402: PPUSH
83403: LD_INT 0
83405: PPUSH
83406: CALL_OW 1
83410: ST_TO_ADDR
83411: GO 83464
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
83413: LD_ADDR_EXP 140
83417: PUSH
83418: LD_EXP 140
83422: PPUSH
83423: LD_VAR 0 1
83427: PPUSH
83428: LD_VAR 0 1
83432: PPUSH
83433: CALL_OW 255
83437: PUSH
83438: LD_VAR 0 1
83442: PUSH
83443: LD_VAR 0 2
83447: PUSH
83448: LD_VAR 0 3
83452: PUSH
83453: EMPTY
83454: LIST
83455: LIST
83456: LIST
83457: LIST
83458: PPUSH
83459: CALL_OW 1
83463: ST_TO_ADDR
// UpdateFactoryWaypoints ;
83464: CALL 83473 0 0
// end ;
83468: LD_VAR 0 4
83472: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
83473: LD_INT 0
83475: PPUSH
83476: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
83477: LD_STRING resetFactoryWaypoint();
83479: PPUSH
83480: CALL_OW 559
// if factoryWaypoints then
83484: LD_EXP 140
83488: IFFALSE 83611
// begin for i := 1 to factoryWaypoints do
83490: LD_ADDR_VAR 0 2
83494: PUSH
83495: DOUBLE
83496: LD_INT 1
83498: DEC
83499: ST_TO_ADDR
83500: LD_EXP 140
83504: PUSH
83505: FOR_TO
83506: IFFALSE 83609
// if factoryWaypoints [ i ] then
83508: LD_EXP 140
83512: PUSH
83513: LD_VAR 0 2
83517: ARRAY
83518: IFFALSE 83607
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
83520: LD_STRING setFactoryWaypointXY(
83522: PUSH
83523: LD_EXP 140
83527: PUSH
83528: LD_VAR 0 2
83532: ARRAY
83533: PUSH
83534: LD_INT 1
83536: ARRAY
83537: STR
83538: PUSH
83539: LD_STRING ,
83541: STR
83542: PUSH
83543: LD_EXP 140
83547: PUSH
83548: LD_VAR 0 2
83552: ARRAY
83553: PUSH
83554: LD_INT 2
83556: ARRAY
83557: STR
83558: PUSH
83559: LD_STRING ,
83561: STR
83562: PUSH
83563: LD_EXP 140
83567: PUSH
83568: LD_VAR 0 2
83572: ARRAY
83573: PUSH
83574: LD_INT 3
83576: ARRAY
83577: STR
83578: PUSH
83579: LD_STRING ,
83581: STR
83582: PUSH
83583: LD_EXP 140
83587: PUSH
83588: LD_VAR 0 2
83592: ARRAY
83593: PUSH
83594: LD_INT 4
83596: ARRAY
83597: STR
83598: PUSH
83599: LD_STRING )
83601: STR
83602: PPUSH
83603: CALL_OW 559
83607: GO 83505
83609: POP
83610: POP
// end ; end ;
83611: LD_VAR 0 1
83615: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83616: LD_INT 0
83618: PPUSH
83619: PPUSH
83620: PPUSH
83621: PPUSH
83622: PPUSH
83623: PPUSH
83624: PPUSH
83625: PPUSH
83626: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83627: LD_VAR 0 1
83631: NOT
83632: PUSH
83633: LD_VAR 0 2
83637: PPUSH
83638: LD_VAR 0 3
83642: PPUSH
83643: CALL_OW 488
83647: NOT
83648: OR
83649: PUSH
83650: LD_VAR 0 4
83654: NOT
83655: OR
83656: IFFALSE 83660
// exit ;
83658: GO 84000
// list := [ ] ;
83660: LD_ADDR_VAR 0 13
83664: PUSH
83665: EMPTY
83666: ST_TO_ADDR
// if x - r < 0 then
83667: LD_VAR 0 2
83671: PUSH
83672: LD_VAR 0 4
83676: MINUS
83677: PUSH
83678: LD_INT 0
83680: LESS
83681: IFFALSE 83693
// min_x := 0 else
83683: LD_ADDR_VAR 0 7
83687: PUSH
83688: LD_INT 0
83690: ST_TO_ADDR
83691: GO 83709
// min_x := x - r ;
83693: LD_ADDR_VAR 0 7
83697: PUSH
83698: LD_VAR 0 2
83702: PUSH
83703: LD_VAR 0 4
83707: MINUS
83708: ST_TO_ADDR
// if y - r < 0 then
83709: LD_VAR 0 3
83713: PUSH
83714: LD_VAR 0 4
83718: MINUS
83719: PUSH
83720: LD_INT 0
83722: LESS
83723: IFFALSE 83735
// min_y := 0 else
83725: LD_ADDR_VAR 0 8
83729: PUSH
83730: LD_INT 0
83732: ST_TO_ADDR
83733: GO 83751
// min_y := y - r ;
83735: LD_ADDR_VAR 0 8
83739: PUSH
83740: LD_VAR 0 3
83744: PUSH
83745: LD_VAR 0 4
83749: MINUS
83750: ST_TO_ADDR
// max_x := x + r ;
83751: LD_ADDR_VAR 0 9
83755: PUSH
83756: LD_VAR 0 2
83760: PUSH
83761: LD_VAR 0 4
83765: PLUS
83766: ST_TO_ADDR
// max_y := y + r ;
83767: LD_ADDR_VAR 0 10
83771: PUSH
83772: LD_VAR 0 3
83776: PUSH
83777: LD_VAR 0 4
83781: PLUS
83782: ST_TO_ADDR
// for _x = min_x to max_x do
83783: LD_ADDR_VAR 0 11
83787: PUSH
83788: DOUBLE
83789: LD_VAR 0 7
83793: DEC
83794: ST_TO_ADDR
83795: LD_VAR 0 9
83799: PUSH
83800: FOR_TO
83801: IFFALSE 83918
// for _y = min_y to max_y do
83803: LD_ADDR_VAR 0 12
83807: PUSH
83808: DOUBLE
83809: LD_VAR 0 8
83813: DEC
83814: ST_TO_ADDR
83815: LD_VAR 0 10
83819: PUSH
83820: FOR_TO
83821: IFFALSE 83914
// begin if not ValidHex ( _x , _y ) then
83823: LD_VAR 0 11
83827: PPUSH
83828: LD_VAR 0 12
83832: PPUSH
83833: CALL_OW 488
83837: NOT
83838: IFFALSE 83842
// continue ;
83840: GO 83820
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83842: LD_VAR 0 11
83846: PPUSH
83847: LD_VAR 0 12
83851: PPUSH
83852: CALL_OW 351
83856: PUSH
83857: LD_VAR 0 11
83861: PPUSH
83862: LD_VAR 0 12
83866: PPUSH
83867: CALL_OW 554
83871: AND
83872: IFFALSE 83912
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83874: LD_ADDR_VAR 0 13
83878: PUSH
83879: LD_VAR 0 13
83883: PPUSH
83884: LD_VAR 0 13
83888: PUSH
83889: LD_INT 1
83891: PLUS
83892: PPUSH
83893: LD_VAR 0 11
83897: PUSH
83898: LD_VAR 0 12
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: PPUSH
83907: CALL_OW 2
83911: ST_TO_ADDR
// end ;
83912: GO 83820
83914: POP
83915: POP
83916: GO 83800
83918: POP
83919: POP
// if not list then
83920: LD_VAR 0 13
83924: NOT
83925: IFFALSE 83929
// exit ;
83927: GO 84000
// for i in list do
83929: LD_ADDR_VAR 0 6
83933: PUSH
83934: LD_VAR 0 13
83938: PUSH
83939: FOR_IN
83940: IFFALSE 83998
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83942: LD_VAR 0 1
83946: PPUSH
83947: LD_STRING M
83949: PUSH
83950: LD_VAR 0 6
83954: PUSH
83955: LD_INT 1
83957: ARRAY
83958: PUSH
83959: LD_VAR 0 6
83963: PUSH
83964: LD_INT 2
83966: ARRAY
83967: PUSH
83968: LD_INT 0
83970: PUSH
83971: LD_INT 0
83973: PUSH
83974: LD_INT 0
83976: PUSH
83977: LD_INT 0
83979: PUSH
83980: EMPTY
83981: LIST
83982: LIST
83983: LIST
83984: LIST
83985: LIST
83986: LIST
83987: LIST
83988: PUSH
83989: EMPTY
83990: LIST
83991: PPUSH
83992: CALL_OW 447
83996: GO 83939
83998: POP
83999: POP
// end ;
84000: LD_VAR 0 5
84004: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
84005: LD_EXP 141
84009: NOT
84010: IFFALSE 84060
84012: GO 84014
84014: DISABLE
// begin initHack := true ;
84015: LD_ADDR_EXP 141
84019: PUSH
84020: LD_INT 1
84022: ST_TO_ADDR
// hackTanks := [ ] ;
84023: LD_ADDR_EXP 142
84027: PUSH
84028: EMPTY
84029: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84030: LD_ADDR_EXP 143
84034: PUSH
84035: EMPTY
84036: ST_TO_ADDR
// hackLimit := 3 ;
84037: LD_ADDR_EXP 144
84041: PUSH
84042: LD_INT 3
84044: ST_TO_ADDR
// hackDist := 12 ;
84045: LD_ADDR_EXP 145
84049: PUSH
84050: LD_INT 12
84052: ST_TO_ADDR
// hackCounter := [ ] ;
84053: LD_ADDR_EXP 146
84057: PUSH
84058: EMPTY
84059: ST_TO_ADDR
// end ;
84060: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84061: LD_EXP 141
84065: PUSH
84066: LD_INT 34
84068: PUSH
84069: LD_EXP 123
84073: PUSH
84074: EMPTY
84075: LIST
84076: LIST
84077: PPUSH
84078: CALL_OW 69
84082: AND
84083: IFFALSE 84338
84085: GO 84087
84087: DISABLE
84088: LD_INT 0
84090: PPUSH
84091: PPUSH
// begin enable ;
84092: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84093: LD_ADDR_VAR 0 1
84097: PUSH
84098: LD_INT 34
84100: PUSH
84101: LD_EXP 123
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: PPUSH
84110: CALL_OW 69
84114: PUSH
84115: FOR_IN
84116: IFFALSE 84336
// begin if not i in hackTanks then
84118: LD_VAR 0 1
84122: PUSH
84123: LD_EXP 142
84127: IN
84128: NOT
84129: IFFALSE 84212
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84131: LD_ADDR_EXP 142
84135: PUSH
84136: LD_EXP 142
84140: PPUSH
84141: LD_EXP 142
84145: PUSH
84146: LD_INT 1
84148: PLUS
84149: PPUSH
84150: LD_VAR 0 1
84154: PPUSH
84155: CALL_OW 1
84159: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
84160: LD_ADDR_EXP 143
84164: PUSH
84165: LD_EXP 143
84169: PPUSH
84170: LD_EXP 143
84174: PUSH
84175: LD_INT 1
84177: PLUS
84178: PPUSH
84179: EMPTY
84180: PPUSH
84181: CALL_OW 1
84185: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
84186: LD_ADDR_EXP 146
84190: PUSH
84191: LD_EXP 146
84195: PPUSH
84196: LD_EXP 146
84200: PUSH
84201: LD_INT 1
84203: PLUS
84204: PPUSH
84205: EMPTY
84206: PPUSH
84207: CALL_OW 1
84211: ST_TO_ADDR
// end ; if not IsOk ( i ) then
84212: LD_VAR 0 1
84216: PPUSH
84217: CALL_OW 302
84221: NOT
84222: IFFALSE 84235
// begin HackUnlinkAll ( i ) ;
84224: LD_VAR 0 1
84228: PPUSH
84229: CALL 84341 0 1
// continue ;
84233: GO 84115
// end ; HackCheckCapturedStatus ( i ) ;
84235: LD_VAR 0 1
84239: PPUSH
84240: CALL 84784 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
84244: LD_ADDR_VAR 0 2
84248: PUSH
84249: LD_INT 81
84251: PUSH
84252: LD_VAR 0 1
84256: PPUSH
84257: CALL_OW 255
84261: PUSH
84262: EMPTY
84263: LIST
84264: LIST
84265: PUSH
84266: LD_INT 33
84268: PUSH
84269: LD_INT 3
84271: PUSH
84272: EMPTY
84273: LIST
84274: LIST
84275: PUSH
84276: LD_INT 91
84278: PUSH
84279: LD_VAR 0 1
84283: PUSH
84284: LD_EXP 145
84288: PUSH
84289: EMPTY
84290: LIST
84291: LIST
84292: LIST
84293: PUSH
84294: LD_INT 50
84296: PUSH
84297: EMPTY
84298: LIST
84299: PUSH
84300: EMPTY
84301: LIST
84302: LIST
84303: LIST
84304: LIST
84305: PPUSH
84306: CALL_OW 69
84310: ST_TO_ADDR
// if not tmp then
84311: LD_VAR 0 2
84315: NOT
84316: IFFALSE 84320
// continue ;
84318: GO 84115
// HackLink ( i , tmp ) ;
84320: LD_VAR 0 1
84324: PPUSH
84325: LD_VAR 0 2
84329: PPUSH
84330: CALL 84477 0 2
// end ;
84334: GO 84115
84336: POP
84337: POP
// end ;
84338: PPOPN 2
84340: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
84341: LD_INT 0
84343: PPUSH
84344: PPUSH
84345: PPUSH
// if not hack in hackTanks then
84346: LD_VAR 0 1
84350: PUSH
84351: LD_EXP 142
84355: IN
84356: NOT
84357: IFFALSE 84361
// exit ;
84359: GO 84472
// index := GetElementIndex ( hackTanks , hack ) ;
84361: LD_ADDR_VAR 0 4
84365: PUSH
84366: LD_EXP 142
84370: PPUSH
84371: LD_VAR 0 1
84375: PPUSH
84376: CALL 47047 0 2
84380: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
84381: LD_EXP 143
84385: PUSH
84386: LD_VAR 0 4
84390: ARRAY
84391: IFFALSE 84472
// begin for i in hackTanksCaptured [ index ] do
84393: LD_ADDR_VAR 0 3
84397: PUSH
84398: LD_EXP 143
84402: PUSH
84403: LD_VAR 0 4
84407: ARRAY
84408: PUSH
84409: FOR_IN
84410: IFFALSE 84436
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
84412: LD_VAR 0 3
84416: PUSH
84417: LD_INT 1
84419: ARRAY
84420: PPUSH
84421: LD_VAR 0 3
84425: PUSH
84426: LD_INT 2
84428: ARRAY
84429: PPUSH
84430: CALL_OW 235
84434: GO 84409
84436: POP
84437: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
84438: LD_ADDR_EXP 143
84442: PUSH
84443: LD_EXP 143
84447: PPUSH
84448: LD_VAR 0 4
84452: PPUSH
84453: EMPTY
84454: PPUSH
84455: CALL_OW 1
84459: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
84460: LD_VAR 0 1
84464: PPUSH
84465: LD_INT 0
84467: PPUSH
84468: CALL_OW 505
// end ; end ;
84472: LD_VAR 0 2
84476: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
84477: LD_INT 0
84479: PPUSH
84480: PPUSH
84481: PPUSH
// if not hack in hackTanks or not vehicles then
84482: LD_VAR 0 1
84486: PUSH
84487: LD_EXP 142
84491: IN
84492: NOT
84493: PUSH
84494: LD_VAR 0 2
84498: NOT
84499: OR
84500: IFFALSE 84504
// exit ;
84502: GO 84779
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84504: LD_ADDR_VAR 0 2
84508: PUSH
84509: LD_VAR 0 1
84513: PPUSH
84514: LD_VAR 0 2
84518: PPUSH
84519: LD_INT 1
84521: PPUSH
84522: LD_INT 1
84524: PPUSH
84525: CALL 47697 0 4
84529: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84530: LD_ADDR_VAR 0 5
84534: PUSH
84535: LD_EXP 142
84539: PPUSH
84540: LD_VAR 0 1
84544: PPUSH
84545: CALL 47047 0 2
84549: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84550: LD_EXP 143
84554: PUSH
84555: LD_VAR 0 5
84559: ARRAY
84560: PUSH
84561: LD_EXP 144
84565: LESS
84566: IFFALSE 84755
// begin for i := 1 to vehicles do
84568: LD_ADDR_VAR 0 4
84572: PUSH
84573: DOUBLE
84574: LD_INT 1
84576: DEC
84577: ST_TO_ADDR
84578: LD_VAR 0 2
84582: PUSH
84583: FOR_TO
84584: IFFALSE 84753
// begin if hackTanksCaptured [ index ] = hackLimit then
84586: LD_EXP 143
84590: PUSH
84591: LD_VAR 0 5
84595: ARRAY
84596: PUSH
84597: LD_EXP 144
84601: EQUAL
84602: IFFALSE 84606
// break ;
84604: GO 84753
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84606: LD_ADDR_EXP 146
84610: PUSH
84611: LD_EXP 146
84615: PPUSH
84616: LD_VAR 0 5
84620: PPUSH
84621: LD_EXP 146
84625: PUSH
84626: LD_VAR 0 5
84630: ARRAY
84631: PUSH
84632: LD_INT 1
84634: PLUS
84635: PPUSH
84636: CALL_OW 1
84640: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84641: LD_ADDR_EXP 143
84645: PUSH
84646: LD_EXP 143
84650: PPUSH
84651: LD_VAR 0 5
84655: PUSH
84656: LD_EXP 143
84660: PUSH
84661: LD_VAR 0 5
84665: ARRAY
84666: PUSH
84667: LD_INT 1
84669: PLUS
84670: PUSH
84671: EMPTY
84672: LIST
84673: LIST
84674: PPUSH
84675: LD_VAR 0 2
84679: PUSH
84680: LD_VAR 0 4
84684: ARRAY
84685: PUSH
84686: LD_VAR 0 2
84690: PUSH
84691: LD_VAR 0 4
84695: ARRAY
84696: PPUSH
84697: CALL_OW 255
84701: PUSH
84702: EMPTY
84703: LIST
84704: LIST
84705: PPUSH
84706: CALL 47262 0 3
84710: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84711: LD_VAR 0 2
84715: PUSH
84716: LD_VAR 0 4
84720: ARRAY
84721: PPUSH
84722: LD_VAR 0 1
84726: PPUSH
84727: CALL_OW 255
84731: PPUSH
84732: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84736: LD_VAR 0 2
84740: PUSH
84741: LD_VAR 0 4
84745: ARRAY
84746: PPUSH
84747: CALL_OW 141
// end ;
84751: GO 84583
84753: POP
84754: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84755: LD_VAR 0 1
84759: PPUSH
84760: LD_EXP 143
84764: PUSH
84765: LD_VAR 0 5
84769: ARRAY
84770: PUSH
84771: LD_INT 0
84773: PLUS
84774: PPUSH
84775: CALL_OW 505
// end ;
84779: LD_VAR 0 3
84783: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84784: LD_INT 0
84786: PPUSH
84787: PPUSH
84788: PPUSH
84789: PPUSH
// if not hack in hackTanks then
84790: LD_VAR 0 1
84794: PUSH
84795: LD_EXP 142
84799: IN
84800: NOT
84801: IFFALSE 84805
// exit ;
84803: GO 85045
// index := GetElementIndex ( hackTanks , hack ) ;
84805: LD_ADDR_VAR 0 4
84809: PUSH
84810: LD_EXP 142
84814: PPUSH
84815: LD_VAR 0 1
84819: PPUSH
84820: CALL 47047 0 2
84824: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84825: LD_ADDR_VAR 0 3
84829: PUSH
84830: DOUBLE
84831: LD_EXP 143
84835: PUSH
84836: LD_VAR 0 4
84840: ARRAY
84841: INC
84842: ST_TO_ADDR
84843: LD_INT 1
84845: PUSH
84846: FOR_DOWNTO
84847: IFFALSE 85019
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84849: LD_ADDR_VAR 0 5
84853: PUSH
84854: LD_EXP 143
84858: PUSH
84859: LD_VAR 0 4
84863: ARRAY
84864: PUSH
84865: LD_VAR 0 3
84869: ARRAY
84870: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84871: LD_VAR 0 5
84875: PUSH
84876: LD_INT 1
84878: ARRAY
84879: PPUSH
84880: CALL_OW 302
84884: NOT
84885: PUSH
84886: LD_VAR 0 5
84890: PUSH
84891: LD_INT 1
84893: ARRAY
84894: PPUSH
84895: CALL_OW 255
84899: PUSH
84900: LD_VAR 0 1
84904: PPUSH
84905: CALL_OW 255
84909: NONEQUAL
84910: OR
84911: IFFALSE 85017
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84913: LD_VAR 0 5
84917: PUSH
84918: LD_INT 1
84920: ARRAY
84921: PPUSH
84922: CALL_OW 305
84926: PUSH
84927: LD_VAR 0 5
84931: PUSH
84932: LD_INT 1
84934: ARRAY
84935: PPUSH
84936: CALL_OW 255
84940: PUSH
84941: LD_VAR 0 1
84945: PPUSH
84946: CALL_OW 255
84950: EQUAL
84951: AND
84952: IFFALSE 84976
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84954: LD_VAR 0 5
84958: PUSH
84959: LD_INT 1
84961: ARRAY
84962: PPUSH
84963: LD_VAR 0 5
84967: PUSH
84968: LD_INT 2
84970: ARRAY
84971: PPUSH
84972: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84976: LD_ADDR_EXP 143
84980: PUSH
84981: LD_EXP 143
84985: PPUSH
84986: LD_VAR 0 4
84990: PPUSH
84991: LD_EXP 143
84995: PUSH
84996: LD_VAR 0 4
85000: ARRAY
85001: PPUSH
85002: LD_VAR 0 3
85006: PPUSH
85007: CALL_OW 3
85011: PPUSH
85012: CALL_OW 1
85016: ST_TO_ADDR
// end ; end ;
85017: GO 84846
85019: POP
85020: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85021: LD_VAR 0 1
85025: PPUSH
85026: LD_EXP 143
85030: PUSH
85031: LD_VAR 0 4
85035: ARRAY
85036: PUSH
85037: LD_INT 0
85039: PLUS
85040: PPUSH
85041: CALL_OW 505
// end ;
85045: LD_VAR 0 2
85049: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85050: LD_INT 0
85052: PPUSH
85053: PPUSH
85054: PPUSH
85055: PPUSH
// if not hack in hackTanks then
85056: LD_VAR 0 1
85060: PUSH
85061: LD_EXP 142
85065: IN
85066: NOT
85067: IFFALSE 85071
// exit ;
85069: GO 85156
// index := GetElementIndex ( hackTanks , hack ) ;
85071: LD_ADDR_VAR 0 5
85075: PUSH
85076: LD_EXP 142
85080: PPUSH
85081: LD_VAR 0 1
85085: PPUSH
85086: CALL 47047 0 2
85090: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85091: LD_ADDR_VAR 0 4
85095: PUSH
85096: DOUBLE
85097: LD_INT 1
85099: DEC
85100: ST_TO_ADDR
85101: LD_EXP 143
85105: PUSH
85106: LD_VAR 0 5
85110: ARRAY
85111: PUSH
85112: FOR_TO
85113: IFFALSE 85154
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85115: LD_EXP 143
85119: PUSH
85120: LD_VAR 0 5
85124: ARRAY
85125: PUSH
85126: LD_VAR 0 4
85130: ARRAY
85131: PUSH
85132: LD_INT 1
85134: ARRAY
85135: PUSH
85136: LD_VAR 0 2
85140: EQUAL
85141: IFFALSE 85152
// KillUnit ( vehicle ) ;
85143: LD_VAR 0 2
85147: PPUSH
85148: CALL_OW 66
85152: GO 85112
85154: POP
85155: POP
// end ;
85156: LD_VAR 0 3
85160: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
85161: LD_EXP 147
85165: NOT
85166: IFFALSE 85201
85168: GO 85170
85170: DISABLE
// begin initMiner := true ;
85171: LD_ADDR_EXP 147
85175: PUSH
85176: LD_INT 1
85178: ST_TO_ADDR
// minersList := [ ] ;
85179: LD_ADDR_EXP 148
85183: PUSH
85184: EMPTY
85185: ST_TO_ADDR
// minerMinesList := [ ] ;
85186: LD_ADDR_EXP 149
85190: PUSH
85191: EMPTY
85192: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
85193: LD_ADDR_EXP 150
85197: PUSH
85198: LD_INT 5
85200: ST_TO_ADDR
// end ;
85201: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
85202: LD_EXP 147
85206: PUSH
85207: LD_INT 34
85209: PUSH
85210: LD_EXP 128
85214: PUSH
85215: EMPTY
85216: LIST
85217: LIST
85218: PPUSH
85219: CALL_OW 69
85223: AND
85224: IFFALSE 85687
85226: GO 85228
85228: DISABLE
85229: LD_INT 0
85231: PPUSH
85232: PPUSH
85233: PPUSH
85234: PPUSH
// begin enable ;
85235: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
85236: LD_ADDR_VAR 0 1
85240: PUSH
85241: LD_INT 34
85243: PUSH
85244: LD_EXP 128
85248: PUSH
85249: EMPTY
85250: LIST
85251: LIST
85252: PPUSH
85253: CALL_OW 69
85257: PUSH
85258: FOR_IN
85259: IFFALSE 85331
// begin if not i in minersList then
85261: LD_VAR 0 1
85265: PUSH
85266: LD_EXP 148
85270: IN
85271: NOT
85272: IFFALSE 85329
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
85274: LD_ADDR_EXP 148
85278: PUSH
85279: LD_EXP 148
85283: PPUSH
85284: LD_EXP 148
85288: PUSH
85289: LD_INT 1
85291: PLUS
85292: PPUSH
85293: LD_VAR 0 1
85297: PPUSH
85298: CALL_OW 1
85302: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
85303: LD_ADDR_EXP 149
85307: PUSH
85308: LD_EXP 149
85312: PPUSH
85313: LD_EXP 149
85317: PUSH
85318: LD_INT 1
85320: PLUS
85321: PPUSH
85322: EMPTY
85323: PPUSH
85324: CALL_OW 1
85328: ST_TO_ADDR
// end end ;
85329: GO 85258
85331: POP
85332: POP
// for i := minerMinesList downto 1 do
85333: LD_ADDR_VAR 0 1
85337: PUSH
85338: DOUBLE
85339: LD_EXP 149
85343: INC
85344: ST_TO_ADDR
85345: LD_INT 1
85347: PUSH
85348: FOR_DOWNTO
85349: IFFALSE 85685
// begin if IsLive ( minersList [ i ] ) then
85351: LD_EXP 148
85355: PUSH
85356: LD_VAR 0 1
85360: ARRAY
85361: PPUSH
85362: CALL_OW 300
85366: IFFALSE 85394
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
85368: LD_EXP 148
85372: PUSH
85373: LD_VAR 0 1
85377: ARRAY
85378: PPUSH
85379: LD_EXP 149
85383: PUSH
85384: LD_VAR 0 1
85388: ARRAY
85389: PPUSH
85390: CALL_OW 505
// if not minerMinesList [ i ] then
85394: LD_EXP 149
85398: PUSH
85399: LD_VAR 0 1
85403: ARRAY
85404: NOT
85405: IFFALSE 85409
// continue ;
85407: GO 85348
// for j := minerMinesList [ i ] downto 1 do
85409: LD_ADDR_VAR 0 2
85413: PUSH
85414: DOUBLE
85415: LD_EXP 149
85419: PUSH
85420: LD_VAR 0 1
85424: ARRAY
85425: INC
85426: ST_TO_ADDR
85427: LD_INT 1
85429: PUSH
85430: FOR_DOWNTO
85431: IFFALSE 85681
// begin side := GetSide ( minersList [ i ] ) ;
85433: LD_ADDR_VAR 0 3
85437: PUSH
85438: LD_EXP 148
85442: PUSH
85443: LD_VAR 0 1
85447: ARRAY
85448: PPUSH
85449: CALL_OW 255
85453: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85454: LD_ADDR_VAR 0 4
85458: PUSH
85459: LD_EXP 149
85463: PUSH
85464: LD_VAR 0 1
85468: ARRAY
85469: PUSH
85470: LD_VAR 0 2
85474: ARRAY
85475: PUSH
85476: LD_INT 1
85478: ARRAY
85479: PPUSH
85480: LD_EXP 149
85484: PUSH
85485: LD_VAR 0 1
85489: ARRAY
85490: PUSH
85491: LD_VAR 0 2
85495: ARRAY
85496: PUSH
85497: LD_INT 2
85499: ARRAY
85500: PPUSH
85501: CALL_OW 428
85505: ST_TO_ADDR
// if not tmp then
85506: LD_VAR 0 4
85510: NOT
85511: IFFALSE 85515
// continue ;
85513: GO 85430
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85515: LD_VAR 0 4
85519: PUSH
85520: LD_INT 81
85522: PUSH
85523: LD_VAR 0 3
85527: PUSH
85528: EMPTY
85529: LIST
85530: LIST
85531: PPUSH
85532: CALL_OW 69
85536: IN
85537: PUSH
85538: LD_EXP 149
85542: PUSH
85543: LD_VAR 0 1
85547: ARRAY
85548: PUSH
85549: LD_VAR 0 2
85553: ARRAY
85554: PUSH
85555: LD_INT 1
85557: ARRAY
85558: PPUSH
85559: LD_EXP 149
85563: PUSH
85564: LD_VAR 0 1
85568: ARRAY
85569: PUSH
85570: LD_VAR 0 2
85574: ARRAY
85575: PUSH
85576: LD_INT 2
85578: ARRAY
85579: PPUSH
85580: CALL_OW 458
85584: AND
85585: IFFALSE 85679
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85587: LD_EXP 149
85591: PUSH
85592: LD_VAR 0 1
85596: ARRAY
85597: PUSH
85598: LD_VAR 0 2
85602: ARRAY
85603: PUSH
85604: LD_INT 1
85606: ARRAY
85607: PPUSH
85608: LD_EXP 149
85612: PUSH
85613: LD_VAR 0 1
85617: ARRAY
85618: PUSH
85619: LD_VAR 0 2
85623: ARRAY
85624: PUSH
85625: LD_INT 2
85627: ARRAY
85628: PPUSH
85629: LD_VAR 0 3
85633: PPUSH
85634: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85638: LD_ADDR_EXP 149
85642: PUSH
85643: LD_EXP 149
85647: PPUSH
85648: LD_VAR 0 1
85652: PPUSH
85653: LD_EXP 149
85657: PUSH
85658: LD_VAR 0 1
85662: ARRAY
85663: PPUSH
85664: LD_VAR 0 2
85668: PPUSH
85669: CALL_OW 3
85673: PPUSH
85674: CALL_OW 1
85678: ST_TO_ADDR
// end ; end ;
85679: GO 85430
85681: POP
85682: POP
// end ;
85683: GO 85348
85685: POP
85686: POP
// end ;
85687: PPOPN 4
85689: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85690: LD_INT 0
85692: PPUSH
85693: PPUSH
// result := false ;
85694: LD_ADDR_VAR 0 4
85698: PUSH
85699: LD_INT 0
85701: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85702: LD_VAR 0 1
85706: PPUSH
85707: CALL_OW 264
85711: PUSH
85712: LD_EXP 128
85716: EQUAL
85717: NOT
85718: IFFALSE 85722
// exit ;
85720: GO 85962
// index := GetElementIndex ( minersList , unit ) ;
85722: LD_ADDR_VAR 0 5
85726: PUSH
85727: LD_EXP 148
85731: PPUSH
85732: LD_VAR 0 1
85736: PPUSH
85737: CALL 47047 0 2
85741: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85742: LD_EXP 149
85746: PUSH
85747: LD_VAR 0 5
85751: ARRAY
85752: PUSH
85753: LD_EXP 150
85757: GREATEREQUAL
85758: IFFALSE 85762
// exit ;
85760: GO 85962
// ComMoveXY ( unit , x , y ) ;
85762: LD_VAR 0 1
85766: PPUSH
85767: LD_VAR 0 2
85771: PPUSH
85772: LD_VAR 0 3
85776: PPUSH
85777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85781: LD_INT 35
85783: PPUSH
85784: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85788: LD_VAR 0 1
85792: PPUSH
85793: LD_VAR 0 2
85797: PPUSH
85798: LD_VAR 0 3
85802: PPUSH
85803: CALL 77819 0 3
85807: NOT
85808: PUSH
85809: LD_VAR 0 1
85813: PPUSH
85814: CALL_OW 314
85818: AND
85819: IFFALSE 85823
// exit ;
85821: GO 85962
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85823: LD_VAR 0 2
85827: PPUSH
85828: LD_VAR 0 3
85832: PPUSH
85833: CALL_OW 428
85837: PUSH
85838: LD_VAR 0 1
85842: EQUAL
85843: PUSH
85844: LD_VAR 0 1
85848: PPUSH
85849: CALL_OW 314
85853: NOT
85854: AND
85855: IFFALSE 85781
// PlaySoundXY ( x , y , PlantMine ) ;
85857: LD_VAR 0 2
85861: PPUSH
85862: LD_VAR 0 3
85866: PPUSH
85867: LD_STRING PlantMine
85869: PPUSH
85870: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85874: LD_VAR 0 2
85878: PPUSH
85879: LD_VAR 0 3
85883: PPUSH
85884: LD_VAR 0 1
85888: PPUSH
85889: CALL_OW 255
85893: PPUSH
85894: LD_INT 0
85896: PPUSH
85897: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85901: LD_ADDR_EXP 149
85905: PUSH
85906: LD_EXP 149
85910: PPUSH
85911: LD_VAR 0 5
85915: PUSH
85916: LD_EXP 149
85920: PUSH
85921: LD_VAR 0 5
85925: ARRAY
85926: PUSH
85927: LD_INT 1
85929: PLUS
85930: PUSH
85931: EMPTY
85932: LIST
85933: LIST
85934: PPUSH
85935: LD_VAR 0 2
85939: PUSH
85940: LD_VAR 0 3
85944: PUSH
85945: EMPTY
85946: LIST
85947: LIST
85948: PPUSH
85949: CALL 47262 0 3
85953: ST_TO_ADDR
// result := true ;
85954: LD_ADDR_VAR 0 4
85958: PUSH
85959: LD_INT 1
85961: ST_TO_ADDR
// end ;
85962: LD_VAR 0 4
85966: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85967: LD_INT 0
85969: PPUSH
85970: PPUSH
85971: PPUSH
// if not unit in minersList then
85972: LD_VAR 0 1
85976: PUSH
85977: LD_EXP 148
85981: IN
85982: NOT
85983: IFFALSE 85987
// exit ;
85985: GO 86379
// index := GetElementIndex ( minersList , unit ) ;
85987: LD_ADDR_VAR 0 6
85991: PUSH
85992: LD_EXP 148
85996: PPUSH
85997: LD_VAR 0 1
86001: PPUSH
86002: CALL 47047 0 2
86006: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
86007: LD_ADDR_VAR 0 5
86011: PUSH
86012: DOUBLE
86013: LD_EXP 149
86017: PUSH
86018: LD_VAR 0 6
86022: ARRAY
86023: INC
86024: ST_TO_ADDR
86025: LD_INT 1
86027: PUSH
86028: FOR_DOWNTO
86029: IFFALSE 86190
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86031: LD_EXP 149
86035: PUSH
86036: LD_VAR 0 6
86040: ARRAY
86041: PUSH
86042: LD_VAR 0 5
86046: ARRAY
86047: PUSH
86048: LD_INT 1
86050: ARRAY
86051: PUSH
86052: LD_VAR 0 2
86056: EQUAL
86057: PUSH
86058: LD_EXP 149
86062: PUSH
86063: LD_VAR 0 6
86067: ARRAY
86068: PUSH
86069: LD_VAR 0 5
86073: ARRAY
86074: PUSH
86075: LD_INT 2
86077: ARRAY
86078: PUSH
86079: LD_VAR 0 3
86083: EQUAL
86084: AND
86085: IFFALSE 86188
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86087: LD_EXP 149
86091: PUSH
86092: LD_VAR 0 6
86096: ARRAY
86097: PUSH
86098: LD_VAR 0 5
86102: ARRAY
86103: PUSH
86104: LD_INT 1
86106: ARRAY
86107: PPUSH
86108: LD_EXP 149
86112: PUSH
86113: LD_VAR 0 6
86117: ARRAY
86118: PUSH
86119: LD_VAR 0 5
86123: ARRAY
86124: PUSH
86125: LD_INT 2
86127: ARRAY
86128: PPUSH
86129: LD_VAR 0 1
86133: PPUSH
86134: CALL_OW 255
86138: PPUSH
86139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86143: LD_ADDR_EXP 149
86147: PUSH
86148: LD_EXP 149
86152: PPUSH
86153: LD_VAR 0 6
86157: PPUSH
86158: LD_EXP 149
86162: PUSH
86163: LD_VAR 0 6
86167: ARRAY
86168: PPUSH
86169: LD_VAR 0 5
86173: PPUSH
86174: CALL_OW 3
86178: PPUSH
86179: CALL_OW 1
86183: ST_TO_ADDR
// exit ;
86184: POP
86185: POP
86186: GO 86379
// end ; end ;
86188: GO 86028
86190: POP
86191: POP
// for i := minerMinesList [ index ] downto 1 do
86192: LD_ADDR_VAR 0 5
86196: PUSH
86197: DOUBLE
86198: LD_EXP 149
86202: PUSH
86203: LD_VAR 0 6
86207: ARRAY
86208: INC
86209: ST_TO_ADDR
86210: LD_INT 1
86212: PUSH
86213: FOR_DOWNTO
86214: IFFALSE 86377
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
86216: LD_EXP 149
86220: PUSH
86221: LD_VAR 0 6
86225: ARRAY
86226: PUSH
86227: LD_VAR 0 5
86231: ARRAY
86232: PUSH
86233: LD_INT 1
86235: ARRAY
86236: PPUSH
86237: LD_EXP 149
86241: PUSH
86242: LD_VAR 0 6
86246: ARRAY
86247: PUSH
86248: LD_VAR 0 5
86252: ARRAY
86253: PUSH
86254: LD_INT 2
86256: ARRAY
86257: PPUSH
86258: LD_VAR 0 2
86262: PPUSH
86263: LD_VAR 0 3
86267: PPUSH
86268: CALL_OW 298
86272: PUSH
86273: LD_INT 6
86275: LESS
86276: IFFALSE 86375
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86278: LD_EXP 149
86282: PUSH
86283: LD_VAR 0 6
86287: ARRAY
86288: PUSH
86289: LD_VAR 0 5
86293: ARRAY
86294: PUSH
86295: LD_INT 1
86297: ARRAY
86298: PPUSH
86299: LD_EXP 149
86303: PUSH
86304: LD_VAR 0 6
86308: ARRAY
86309: PUSH
86310: LD_VAR 0 5
86314: ARRAY
86315: PUSH
86316: LD_INT 2
86318: ARRAY
86319: PPUSH
86320: LD_VAR 0 1
86324: PPUSH
86325: CALL_OW 255
86329: PPUSH
86330: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86334: LD_ADDR_EXP 149
86338: PUSH
86339: LD_EXP 149
86343: PPUSH
86344: LD_VAR 0 6
86348: PPUSH
86349: LD_EXP 149
86353: PUSH
86354: LD_VAR 0 6
86358: ARRAY
86359: PPUSH
86360: LD_VAR 0 5
86364: PPUSH
86365: CALL_OW 3
86369: PPUSH
86370: CALL_OW 1
86374: ST_TO_ADDR
// end ; end ;
86375: GO 86213
86377: POP
86378: POP
// end ;
86379: LD_VAR 0 4
86383: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
86384: LD_INT 0
86386: PPUSH
86387: PPUSH
86388: PPUSH
86389: PPUSH
86390: PPUSH
86391: PPUSH
86392: PPUSH
86393: PPUSH
86394: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
86395: LD_VAR 0 1
86399: PPUSH
86400: CALL_OW 264
86404: PUSH
86405: LD_EXP 128
86409: EQUAL
86410: NOT
86411: PUSH
86412: LD_VAR 0 1
86416: PUSH
86417: LD_EXP 148
86421: IN
86422: NOT
86423: OR
86424: IFFALSE 86428
// exit ;
86426: GO 86750
// index := GetElementIndex ( minersList , unit ) ;
86428: LD_ADDR_VAR 0 6
86432: PUSH
86433: LD_EXP 148
86437: PPUSH
86438: LD_VAR 0 1
86442: PPUSH
86443: CALL 47047 0 2
86447: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
86448: LD_ADDR_VAR 0 8
86452: PUSH
86453: LD_EXP 150
86457: PUSH
86458: LD_EXP 149
86462: PUSH
86463: LD_VAR 0 6
86467: ARRAY
86468: MINUS
86469: ST_TO_ADDR
// if not minesFreeAmount then
86470: LD_VAR 0 8
86474: NOT
86475: IFFALSE 86479
// exit ;
86477: GO 86750
// tmp := [ ] ;
86479: LD_ADDR_VAR 0 7
86483: PUSH
86484: EMPTY
86485: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86486: LD_ADDR_VAR 0 5
86490: PUSH
86491: DOUBLE
86492: LD_INT 1
86494: DEC
86495: ST_TO_ADDR
86496: LD_VAR 0 8
86500: PUSH
86501: FOR_TO
86502: IFFALSE 86697
// begin _d := rand ( 0 , 5 ) ;
86504: LD_ADDR_VAR 0 11
86508: PUSH
86509: LD_INT 0
86511: PPUSH
86512: LD_INT 5
86514: PPUSH
86515: CALL_OW 12
86519: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86520: LD_ADDR_VAR 0 12
86524: PUSH
86525: LD_INT 2
86527: PPUSH
86528: LD_INT 6
86530: PPUSH
86531: CALL_OW 12
86535: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86536: LD_ADDR_VAR 0 9
86540: PUSH
86541: LD_VAR 0 2
86545: PPUSH
86546: LD_VAR 0 11
86550: PPUSH
86551: LD_VAR 0 12
86555: PPUSH
86556: CALL_OW 272
86560: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86561: LD_ADDR_VAR 0 10
86565: PUSH
86566: LD_VAR 0 3
86570: PPUSH
86571: LD_VAR 0 11
86575: PPUSH
86576: LD_VAR 0 12
86580: PPUSH
86581: CALL_OW 273
86585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86586: LD_VAR 0 9
86590: PPUSH
86591: LD_VAR 0 10
86595: PPUSH
86596: CALL_OW 488
86600: PUSH
86601: LD_VAR 0 9
86605: PUSH
86606: LD_VAR 0 10
86610: PUSH
86611: EMPTY
86612: LIST
86613: LIST
86614: PUSH
86615: LD_VAR 0 7
86619: IN
86620: NOT
86621: AND
86622: PUSH
86623: LD_VAR 0 9
86627: PPUSH
86628: LD_VAR 0 10
86632: PPUSH
86633: CALL_OW 458
86637: NOT
86638: AND
86639: IFFALSE 86681
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86641: LD_ADDR_VAR 0 7
86645: PUSH
86646: LD_VAR 0 7
86650: PPUSH
86651: LD_VAR 0 7
86655: PUSH
86656: LD_INT 1
86658: PLUS
86659: PPUSH
86660: LD_VAR 0 9
86664: PUSH
86665: LD_VAR 0 10
86669: PUSH
86670: EMPTY
86671: LIST
86672: LIST
86673: PPUSH
86674: CALL_OW 1
86678: ST_TO_ADDR
86679: GO 86695
// i := i - 1 ;
86681: LD_ADDR_VAR 0 5
86685: PUSH
86686: LD_VAR 0 5
86690: PUSH
86691: LD_INT 1
86693: MINUS
86694: ST_TO_ADDR
// end ;
86695: GO 86501
86697: POP
86698: POP
// for i in tmp do
86699: LD_ADDR_VAR 0 5
86703: PUSH
86704: LD_VAR 0 7
86708: PUSH
86709: FOR_IN
86710: IFFALSE 86748
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86712: LD_VAR 0 1
86716: PPUSH
86717: LD_VAR 0 5
86721: PUSH
86722: LD_INT 1
86724: ARRAY
86725: PPUSH
86726: LD_VAR 0 5
86730: PUSH
86731: LD_INT 2
86733: ARRAY
86734: PPUSH
86735: CALL 85690 0 3
86739: NOT
86740: IFFALSE 86746
// exit ;
86742: POP
86743: POP
86744: GO 86750
86746: GO 86709
86748: POP
86749: POP
// end ;
86750: LD_VAR 0 4
86754: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86755: LD_INT 0
86757: PPUSH
86758: PPUSH
86759: PPUSH
86760: PPUSH
86761: PPUSH
86762: PPUSH
86763: PPUSH
// if not GetClass ( unit ) = class_sniper then
86764: LD_VAR 0 1
86768: PPUSH
86769: CALL_OW 257
86773: PUSH
86774: LD_INT 5
86776: EQUAL
86777: NOT
86778: IFFALSE 86782
// exit ;
86780: GO 87170
// dist := 8 ;
86782: LD_ADDR_VAR 0 5
86786: PUSH
86787: LD_INT 8
86789: ST_TO_ADDR
// viewRange := 12 ;
86790: LD_ADDR_VAR 0 7
86794: PUSH
86795: LD_INT 12
86797: ST_TO_ADDR
// side := GetSide ( unit ) ;
86798: LD_ADDR_VAR 0 6
86802: PUSH
86803: LD_VAR 0 1
86807: PPUSH
86808: CALL_OW 255
86812: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86813: LD_INT 61
86815: PPUSH
86816: LD_VAR 0 6
86820: PPUSH
86821: CALL_OW 321
86825: PUSH
86826: LD_INT 2
86828: EQUAL
86829: IFFALSE 86839
// viewRange := 16 ;
86831: LD_ADDR_VAR 0 7
86835: PUSH
86836: LD_INT 16
86838: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86839: LD_VAR 0 1
86843: PPUSH
86844: LD_VAR 0 2
86848: PPUSH
86849: LD_VAR 0 3
86853: PPUSH
86854: CALL_OW 297
86858: PUSH
86859: LD_VAR 0 5
86863: GREATER
86864: IFFALSE 86943
// begin ComMoveXY ( unit , x , y ) ;
86866: LD_VAR 0 1
86870: PPUSH
86871: LD_VAR 0 2
86875: PPUSH
86876: LD_VAR 0 3
86880: PPUSH
86881: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86885: LD_INT 35
86887: PPUSH
86888: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86892: LD_VAR 0 1
86896: PPUSH
86897: LD_VAR 0 2
86901: PPUSH
86902: LD_VAR 0 3
86906: PPUSH
86907: CALL 77819 0 3
86911: NOT
86912: IFFALSE 86916
// exit ;
86914: GO 87170
// until GetDistUnitXY ( unit , x , y ) < dist ;
86916: LD_VAR 0 1
86920: PPUSH
86921: LD_VAR 0 2
86925: PPUSH
86926: LD_VAR 0 3
86930: PPUSH
86931: CALL_OW 297
86935: PUSH
86936: LD_VAR 0 5
86940: LESS
86941: IFFALSE 86885
// end ; ComTurnXY ( unit , x , y ) ;
86943: LD_VAR 0 1
86947: PPUSH
86948: LD_VAR 0 2
86952: PPUSH
86953: LD_VAR 0 3
86957: PPUSH
86958: CALL_OW 118
// wait ( 5 ) ;
86962: LD_INT 5
86964: PPUSH
86965: CALL_OW 67
// _d := GetDir ( unit ) ;
86969: LD_ADDR_VAR 0 10
86973: PUSH
86974: LD_VAR 0 1
86978: PPUSH
86979: CALL_OW 254
86983: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86984: LD_ADDR_VAR 0 8
86988: PUSH
86989: LD_VAR 0 1
86993: PPUSH
86994: CALL_OW 250
86998: PPUSH
86999: LD_VAR 0 10
87003: PPUSH
87004: LD_VAR 0 5
87008: PPUSH
87009: CALL_OW 272
87013: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87014: LD_ADDR_VAR 0 9
87018: PUSH
87019: LD_VAR 0 1
87023: PPUSH
87024: CALL_OW 251
87028: PPUSH
87029: LD_VAR 0 10
87033: PPUSH
87034: LD_VAR 0 5
87038: PPUSH
87039: CALL_OW 273
87043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87044: LD_VAR 0 8
87048: PPUSH
87049: LD_VAR 0 9
87053: PPUSH
87054: CALL_OW 488
87058: NOT
87059: IFFALSE 87063
// exit ;
87061: GO 87170
// ComAnimCustom ( unit , 1 ) ;
87063: LD_VAR 0 1
87067: PPUSH
87068: LD_INT 1
87070: PPUSH
87071: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87075: LD_VAR 0 8
87079: PPUSH
87080: LD_VAR 0 9
87084: PPUSH
87085: LD_VAR 0 6
87089: PPUSH
87090: LD_VAR 0 7
87094: PPUSH
87095: CALL_OW 330
// repeat wait ( 1 ) ;
87099: LD_INT 1
87101: PPUSH
87102: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
87106: LD_VAR 0 1
87110: PPUSH
87111: CALL_OW 316
87115: PUSH
87116: LD_VAR 0 1
87120: PPUSH
87121: CALL_OW 314
87125: OR
87126: PUSH
87127: LD_VAR 0 1
87131: PPUSH
87132: CALL_OW 302
87136: NOT
87137: OR
87138: PUSH
87139: LD_VAR 0 1
87143: PPUSH
87144: CALL_OW 301
87148: OR
87149: IFFALSE 87099
// RemoveSeeing ( _x , _y , side ) ;
87151: LD_VAR 0 8
87155: PPUSH
87156: LD_VAR 0 9
87160: PPUSH
87161: LD_VAR 0 6
87165: PPUSH
87166: CALL_OW 331
// end ; end_of_file
87170: LD_VAR 0 4
87174: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87175: LD_VAR 0 1
87179: PUSH
87180: LD_INT 200
87182: DOUBLE
87183: GREATEREQUAL
87184: IFFALSE 87192
87186: LD_INT 299
87188: DOUBLE
87189: LESSEQUAL
87190: IFTRUE 87194
87192: GO 87226
87194: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87195: LD_VAR 0 1
87199: PPUSH
87200: LD_VAR 0 2
87204: PPUSH
87205: LD_VAR 0 3
87209: PPUSH
87210: LD_VAR 0 4
87214: PPUSH
87215: LD_VAR 0 5
87219: PPUSH
87220: CALL 82913 0 5
87224: GO 87303
87226: LD_INT 300
87228: DOUBLE
87229: GREATEREQUAL
87230: IFFALSE 87238
87232: LD_INT 399
87234: DOUBLE
87235: LESSEQUAL
87236: IFTRUE 87240
87238: GO 87302
87240: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87241: LD_VAR 0 1
87245: PPUSH
87246: LD_VAR 0 2
87250: PPUSH
87251: LD_VAR 0 3
87255: PPUSH
87256: LD_VAR 0 4
87260: PPUSH
87261: LD_VAR 0 5
87265: PPUSH
87266: LD_VAR 0 6
87270: PPUSH
87271: LD_VAR 0 7
87275: PPUSH
87276: LD_VAR 0 8
87280: PPUSH
87281: LD_VAR 0 9
87285: PPUSH
87286: LD_VAR 0 10
87290: PPUSH
87291: LD_VAR 0 11
87295: PPUSH
87296: CALL 40296 0 11
87300: GO 87303
87302: POP
// end ;
87303: PPOPN 11
87305: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87306: LD_VAR 0 1
87310: PPUSH
87311: LD_VAR 0 2
87315: PPUSH
87316: LD_VAR 0 3
87320: PPUSH
87321: LD_VAR 0 4
87325: PPUSH
87326: LD_VAR 0 5
87330: PPUSH
87331: CALL 82649 0 5
// end ;
87335: PPOPN 5
87337: END
