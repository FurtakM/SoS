// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InitMapConfig ;
  16: CALL 79 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_STRING 06_Vehicles_2
  27: PPUSH
  28: EMPTY
  29: PPUSH
  30: CALL_OW 30
  34: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  35: LD_ADDR_EXP 3
  39: PUSH
  40: LD_STRING 06_ResourcesInCargo_3
  42: PPUSH
  43: EMPTY
  44: PPUSH
  45: CALL_OW 30
  49: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  50: LD_ADDR_EXP 1
  54: PUSH
  55: LD_STRING 06_VsevolodStatus_4
  57: PPUSH
  58: LD_INT 0
  60: PPUSH
  61: CALL_OW 30
  65: ST_TO_ADDR
// PrepareRussians ;
  66: CALL 515 0 0
// MissionIntro ;
  70: CALL 2197 0 0
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export function InitMapConfig ; begin
  79: LD_INT 0
  81: PPUSH
// BaseMapConfig ;
  82: CALL 95 0 0
// MissionMapConfig ;
  86: CALL 185 0 0
// end ;
  90: LD_VAR 0 1
  94: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
  95: LD_INT 0
  97: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
  98: LD_ADDR_EXP 4
 102: PUSH
 103: LD_INT 3
 105: PUSH
 106: LD_INT 3
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 3
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 125: LD_ADDR_EXP 5
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 2
 135: PUSH
 136: LD_INT 2
 138: PUSH
 139: LD_INT 2
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: ST_TO_ADDR
// animalsAgression = 3 ;
 148: LD_ADDR_EXP 6
 152: PUSH
 153: LD_INT 3
 155: ST_TO_ADDR
// debugMode = 0 ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// missionPrefix = 07_ ;
 164: LD_ADDR_EXP 7
 168: PUSH
 169: LD_STRING 07_
 171: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 172: LD_ADDR_EXP 8
 176: PUSH
 177: LD_STRING 06_
 179: ST_TO_ADDR
// end ;
 180: LD_VAR 0 1
 184: RET
// export enemySkillLevel ; function MissionMapConfig ; begin
 185: LD_INT 0
 187: PPUSH
// end ;
 188: LD_VAR 0 1
 192: RET
// every 0 0$1 trigger debugMode do var i ;
 193: LD_EXP 9
 197: IFFALSE 512
 199: GO 201
 201: DISABLE
 202: LD_INT 0
 204: PPUSH
// begin enable ;
 205: ENABLE
// FogOff ( your_side ) ;
 206: LD_OWVAR 2
 210: PPUSH
 211: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 215: LD_ADDR_VAR 0 1
 219: PUSH
 220: LD_INT 22
 222: PUSH
 223: LD_OWVAR 2
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 21
 237: PUSH
 238: LD_INT 1
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: LD_INT 21
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PUSH
 269: FOR_IN
 270: IFFALSE 286
// SetLives ( i , 1000 ) ;
 272: LD_VAR 0 1
 276: PPUSH
 277: LD_INT 1000
 279: PPUSH
 280: CALL_OW 234
 284: GO 269
 286: POP
 287: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 288: LD_ADDR_VAR 0 1
 292: PUSH
 293: LD_INT 22
 295: PUSH
 296: LD_OWVAR 2
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: LD_INT 21
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL_OW 69
 323: PUSH
 324: FOR_IN
 325: IFFALSE 389
// begin SetSkill ( i , skill_combat , 10 ) ;
 327: LD_VAR 0 1
 331: PPUSH
 332: LD_INT 1
 334: PPUSH
 335: LD_INT 10
 337: PPUSH
 338: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 2
 349: PPUSH
 350: LD_INT 10
 352: PPUSH
 353: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 357: LD_VAR 0 1
 361: PPUSH
 362: LD_INT 3
 364: PPUSH
 365: LD_INT 10
 367: PPUSH
 368: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 4
 379: PPUSH
 380: LD_INT 10
 382: PPUSH
 383: CALL_OW 237
// end ;
 387: GO 324
 389: POP
 390: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 391: LD_ADDR_VAR 0 1
 395: PUSH
 396: LD_INT 22
 398: PUSH
 399: LD_OWVAR 2
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 30
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 30
 423: PUSH
 424: LD_INT 1
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PPUSH
 440: CALL_OW 69
 444: PUSH
 445: FOR_IN
 446: IFFALSE 510
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 448: LD_VAR 0 1
 452: PPUSH
 453: CALL_OW 274
 457: PPUSH
 458: LD_INT 1
 460: PPUSH
 461: LD_INT 9999
 463: PPUSH
 464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 468: LD_VAR 0 1
 472: PPUSH
 473: CALL_OW 274
 477: PPUSH
 478: LD_INT 2
 480: PPUSH
 481: LD_INT 9999
 483: PPUSH
 484: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: CALL_OW 274
 497: PPUSH
 498: LD_INT 3
 500: PPUSH
 501: LD_INT 9999
 503: PPUSH
 504: CALL_OW 277
// end ;
 508: GO 445
 510: POP
 511: POP
// end ; end_of_file
 512: PPOPN 1
 514: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Vsevolod ; export Platonov ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
 515: LD_INT 0
 517: PPUSH
// if savedVsevolod then
 518: LD_EXP 1
 522: IFFALSE 536
// PrepareHeroes ( RussianSpawnArea1 , 0 ) else
 524: LD_INT 1
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: CALL 555 0 2
 534: GO 550
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
 536: LD_INT 2
 538: PPUSH
 539: LD_INT 5
 541: PPUSH
 542: CALL 555 0 2
// SpawnPlatonovReinforces ;
 546: CALL 1842 0 0
// end ; end ;
 550: LD_VAR 0 1
 554: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList ; begin
 555: LD_INT 0
 557: PPUSH
 558: PPUSH
 559: PPUSH
 560: PPUSH
 561: PPUSH
// uc_side = 3 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// uc_nation = 3 ;
 570: LD_ADDR_OWVAR 21
 574: PUSH
 575: LD_INT 3
 577: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 578: LD_ADDR_EXP 11
 582: PUSH
 583: LD_STRING Burlak
 585: PPUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 0
 591: PPUSH
 592: CALL 2205 0 3
 596: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 597: LD_ADDR_EXP 16
 601: PUSH
 602: LD_STRING Titov
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL 2205 0 3
 615: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
 616: LD_ADDR_EXP 17
 620: PUSH
 621: LD_STRING Dolgov
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL 2205 0 3
 634: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
 635: LD_ADDR_EXP 18
 639: PUSH
 640: LD_STRING Lipshchin
 642: PPUSH
 643: LD_INT 1
 645: PPUSH
 646: LD_INT 0
 648: PPUSH
 649: CALL 2205 0 3
 653: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
 654: LD_ADDR_EXP 12
 658: PUSH
 659: LD_STRING Karamazov
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: CALL 2205 0 3
 672: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
 673: LD_ADDR_EXP 13
 677: PUSH
 678: LD_STRING Petrovova
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: CALL 2205 0 3
 691: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
 692: LD_ADDR_EXP 14
 696: PUSH
 697: LD_STRING Gleb
 699: PPUSH
 700: LD_INT 1
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL 2205 0 3
 710: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
 711: LD_ADDR_EXP 15
 715: PUSH
 716: LD_STRING Petrosyan
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 2205 0 3
 729: ST_TO_ADDR
// if savedVsevolod then
 730: LD_EXP 1
 734: IFFALSE 774
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , 0 ) ;
 736: LD_ADDR_EXP 19
 740: PUSH
 741: LD_STRING Kirilenkova
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL 2205 0 3
 754: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
 755: LD_ADDR_EXP 20
 759: PUSH
 760: LD_STRING Vsevolod
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL 2205 0 3
 773: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
 774: LD_ADDR_EXP 21
 778: PUSH
 779: LD_STRING Platonov
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL 2205 0 3
 792: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
 793: LD_ADDR_EXP 22
 797: PUSH
 798: LD_STRING 06_other_survivors
 800: PPUSH
 801: CALL_OW 31
 805: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
 806: LD_ADDR_EXP 23
 810: PUSH
 811: LD_EXP 22
 815: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
 816: LD_ADDR_VAR 0 4
 820: PUSH
 821: DOUBLE
 822: LD_INT 1
 824: DEC
 825: ST_TO_ADDR
 826: LD_EXP 2
 830: PUSH
 831: FOR_TO
 832: IFFALSE 1279
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_EXP 2
 843: PUSH
 844: LD_VAR 0 4
 848: ARRAY
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
 854: LD_ADDR_OWVAR 37
 858: PUSH
 859: LD_EXP 2
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PUSH
 870: LD_INT 2
 872: ARRAY
 873: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
 874: LD_ADDR_OWVAR 39
 878: PUSH
 879: LD_EXP 2
 883: PUSH
 884: LD_VAR 0 4
 888: ARRAY
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
 894: LD_ADDR_OWVAR 38
 898: PUSH
 899: LD_EXP 2
 903: PUSH
 904: LD_VAR 0 4
 908: ARRAY
 909: PUSH
 910: LD_INT 4
 912: ARRAY
 913: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
 914: LD_ADDR_OWVAR 40
 918: PUSH
 919: LD_EXP 2
 923: PUSH
 924: LD_VAR 0 4
 928: ARRAY
 929: PUSH
 930: LD_INT 5
 932: ARRAY
 933: ST_TO_ADDR
// uc_direction := dir ;
 934: LD_ADDR_OWVAR 24
 938: PUSH
 939: LD_VAR 0 2
 943: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
 944: LD_ADDR_OWVAR 41
 948: PUSH
 949: LD_INT 60
 951: PPUSH
 952: LD_INT 70
 954: PPUSH
 955: CALL_OW 12
 959: ST_TO_ADDR
// car := CreateVehicle ;
 960: LD_ADDR_VAR 0 6
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
 970: LD_VAR 0 6
 974: PPUSH
 975: LD_VAR 0 1
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
 987: LD_EXP 2
 991: PUSH
 992: LD_VAR 0 4
 996: ARRAY
 997: PUSH
 998: LD_INT 6
1000: ARRAY
1001: PUSH
1002: LD_STRING Bur
1004: DOUBLE
1005: EQUAL
1006: IFTRUE 1010
1008: GO 1027
1010: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1011: LD_EXP 11
1015: PPUSH
1016: LD_VAR 0 6
1020: PPUSH
1021: CALL_OW 52
1025: GO 1277
1027: LD_STRING Kar
1029: DOUBLE
1030: EQUAL
1031: IFTRUE 1035
1033: GO 1052
1035: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1036: LD_EXP 12
1040: PPUSH
1041: LD_VAR 0 6
1045: PPUSH
1046: CALL_OW 52
1050: GO 1277
1052: LD_STRING Ptr
1054: DOUBLE
1055: EQUAL
1056: IFTRUE 1060
1058: GO 1077
1060: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1061: LD_EXP 13
1065: PPUSH
1066: LD_VAR 0 6
1070: PPUSH
1071: CALL_OW 52
1075: GO 1277
1077: LD_STRING Glb
1079: DOUBLE
1080: EQUAL
1081: IFTRUE 1085
1083: GO 1102
1085: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1086: LD_EXP 14
1090: PPUSH
1091: LD_VAR 0 6
1095: PPUSH
1096: CALL_OW 52
1100: GO 1277
1102: LD_STRING Pet
1104: DOUBLE
1105: EQUAL
1106: IFTRUE 1110
1108: GO 1127
1110: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1111: LD_EXP 15
1115: PPUSH
1116: LD_VAR 0 6
1120: PPUSH
1121: CALL_OW 52
1125: GO 1277
1127: LD_STRING Dol
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1152
1135: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1136: LD_EXP 17
1140: PPUSH
1141: LD_VAR 0 6
1145: PPUSH
1146: CALL_OW 52
1150: GO 1277
1152: LD_STRING Lip
1154: DOUBLE
1155: EQUAL
1156: IFTRUE 1160
1158: GO 1177
1160: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1161: LD_EXP 18
1165: PPUSH
1166: LD_VAR 0 6
1170: PPUSH
1171: CALL_OW 52
1175: GO 1277
1177: LD_STRING Tit
1179: DOUBLE
1180: EQUAL
1181: IFTRUE 1185
1183: GO 1202
1185: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
1186: LD_EXP 16
1190: PPUSH
1191: LD_VAR 0 6
1195: PPUSH
1196: CALL_OW 52
1200: GO 1277
1202: LD_STRING Kir
1204: DOUBLE
1205: EQUAL
1206: IFTRUE 1210
1208: GO 1227
1210: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; rand :
1211: LD_EXP 19
1215: PPUSH
1216: LD_VAR 0 6
1220: PPUSH
1221: CALL_OW 52
1225: GO 1277
1227: LD_STRING rand
1229: DOUBLE
1230: EQUAL
1231: IFTRUE 1235
1233: GO 1276
1235: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
1236: LD_EXP 23
1240: PUSH
1241: LD_INT 1
1243: ARRAY
1244: PPUSH
1245: LD_VAR 0 6
1249: PPUSH
1250: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
1254: LD_ADDR_EXP 23
1258: PUSH
1259: LD_EXP 23
1263: PUSH
1264: LD_EXP 23
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: DIFF
1273: ST_TO_ADDR
// end ; end ;
1274: GO 1277
1276: POP
// end ;
1277: GO 831
1279: POP
1280: POP
// if Burlak and not IsPlaced ( Burlak ) then
1281: LD_EXP 11
1285: PUSH
1286: LD_EXP 11
1290: PPUSH
1291: CALL_OW 305
1295: NOT
1296: AND
1297: IFFALSE 1316
// PlaceUnitArea ( Burlak , area , false ) ;
1299: LD_EXP 11
1303: PPUSH
1304: LD_VAR 0 1
1308: PPUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) then
1316: LD_EXP 12
1320: PUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL_OW 305
1330: NOT
1331: AND
1332: IFFALSE 1351
// PlaceUnitArea ( Karamazov , area , false ) ;
1334: LD_EXP 12
1338: PPUSH
1339: LD_VAR 0 1
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) then
1351: LD_EXP 13
1355: PUSH
1356: LD_EXP 13
1360: PPUSH
1361: CALL_OW 305
1365: NOT
1366: AND
1367: IFFALSE 1386
// PlaceUnitArea ( Petrovova , area , false ) ;
1369: LD_EXP 13
1373: PPUSH
1374: LD_VAR 0 1
1378: PPUSH
1379: LD_INT 0
1381: PPUSH
1382: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) then
1386: LD_EXP 14
1390: PUSH
1391: LD_EXP 14
1395: PPUSH
1396: CALL_OW 305
1400: NOT
1401: AND
1402: IFFALSE 1421
// PlaceUnitArea ( Gleb , area , false ) ;
1404: LD_EXP 14
1408: PPUSH
1409: LD_VAR 0 1
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) then
1421: LD_EXP 15
1425: PUSH
1426: LD_EXP 15
1430: PPUSH
1431: CALL_OW 305
1435: NOT
1436: AND
1437: IFFALSE 1456
// PlaceUnitArea ( Petrosyan , area , false ) ;
1439: LD_EXP 15
1443: PPUSH
1444: LD_VAR 0 1
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) then
1456: LD_EXP 17
1460: PUSH
1461: LD_EXP 17
1465: PPUSH
1466: CALL_OW 305
1470: NOT
1471: AND
1472: IFFALSE 1491
// PlaceUnitArea ( Dolgov , area , false ) ;
1474: LD_EXP 17
1478: PPUSH
1479: LD_VAR 0 1
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) then
1491: LD_EXP 18
1495: PUSH
1496: LD_EXP 18
1500: PPUSH
1501: CALL_OW 305
1505: NOT
1506: AND
1507: IFFALSE 1526
// PlaceUnitArea ( Lipshchin , area , false ) ;
1509: LD_EXP 18
1513: PPUSH
1514: LD_VAR 0 1
1518: PPUSH
1519: LD_INT 0
1521: PPUSH
1522: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) then
1526: LD_EXP 16
1530: PUSH
1531: LD_EXP 16
1535: PPUSH
1536: CALL_OW 305
1540: NOT
1541: AND
1542: IFFALSE 1561
// PlaceUnitArea ( Titov , area , false ) ;
1544: LD_EXP 16
1548: PPUSH
1549: LD_VAR 0 1
1553: PPUSH
1554: LD_INT 0
1556: PPUSH
1557: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) then
1561: LD_EXP 19
1565: PUSH
1566: LD_EXP 19
1570: PPUSH
1571: CALL_OW 305
1575: NOT
1576: AND
1577: IFFALSE 1596
// PlaceUnitArea ( Kirilenkova , area , false ) ;
1579: LD_EXP 19
1583: PPUSH
1584: LD_VAR 0 1
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL_OW 49
// for unit in survivorsToPlace do
1596: LD_ADDR_VAR 0 5
1600: PUSH
1601: LD_EXP 23
1605: PUSH
1606: FOR_IN
1607: IFFALSE 1628
// PlaceUnitArea ( unit , area , false ) ;
1609: LD_VAR 0 5
1613: PPUSH
1614: LD_VAR 0 1
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL_OW 49
1626: GO 1606
1628: POP
1629: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1630: LD_ADDR_VAR 0 7
1634: PUSH
1635: LD_INT 22
1637: PUSH
1638: LD_INT 3
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 21
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 34
1660: PUSH
1661: LD_INT 51
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 34
1670: PUSH
1671: LD_INT 32
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 34
1680: PUSH
1681: LD_INT 12
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 69
1703: ST_TO_ADDR
// if cargoList then
1704: LD_VAR 0 7
1708: IFFALSE 1837
// for i = 1 to cargoList do
1710: LD_ADDR_VAR 0 4
1714: PUSH
1715: DOUBLE
1716: LD_INT 1
1718: DEC
1719: ST_TO_ADDR
1720: LD_VAR 0 7
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1835
// if resourcesFrom06 then
1728: LD_EXP 3
1732: IFFALSE 1833
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
1734: LD_VAR 0 7
1738: PUSH
1739: LD_VAR 0 4
1743: ARRAY
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_EXP 3
1752: PUSH
1753: LD_VAR 0 4
1757: ARRAY
1758: PUSH
1759: LD_INT 1
1761: ARRAY
1762: PPUSH
1763: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
1767: LD_VAR 0 7
1771: PUSH
1772: LD_VAR 0 4
1776: ARRAY
1777: PPUSH
1778: LD_INT 2
1780: PPUSH
1781: LD_EXP 3
1785: PUSH
1786: LD_VAR 0 4
1790: ARRAY
1791: PUSH
1792: LD_INT 2
1794: ARRAY
1795: PPUSH
1796: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
1800: LD_VAR 0 7
1804: PUSH
1805: LD_VAR 0 4
1809: ARRAY
1810: PPUSH
1811: LD_INT 3
1813: PPUSH
1814: LD_EXP 3
1818: PUSH
1819: LD_VAR 0 4
1823: ARRAY
1824: PUSH
1825: LD_INT 3
1827: ARRAY
1828: PPUSH
1829: CALL_OW 291
// end ;
1833: GO 1725
1835: POP
1836: POP
// end ;
1837: LD_VAR 0 3
1841: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
1842: LD_INT 0
1844: PPUSH
1845: PPUSH
1846: PPUSH
1847: PPUSH
// uc_side = 3 ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_INT 3
1855: ST_TO_ADDR
// uc_nation = 3 ;
1856: LD_ADDR_OWVAR 21
1860: PUSH
1861: LD_INT 3
1863: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
1864: LD_INT 0
1866: PPUSH
1867: LD_INT 4
1869: PPUSH
1870: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
1874: LD_INT 22
1876: PPUSH
1877: LD_INT 1
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_INT 43
1885: PUSH
1886: LD_INT 44
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 1
1895: PPUSH
1896: LD_INT 2
1898: PPUSH
1899: CALL_OW 12
1903: ARRAY
1904: PPUSH
1905: LD_INT 50
1907: PPUSH
1908: LD_INT 60
1910: PPUSH
1911: CALL_OW 12
1915: PPUSH
1916: CALL 23251 0 5
// veh = CreateVehicle ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: CALL_OW 45
1929: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
1942: LD_VAR 0 4
1946: PPUSH
1947: LD_INT 134
1949: PPUSH
1950: LD_INT 230
1952: PPUSH
1953: LD_INT 0
1955: PPUSH
1956: CALL_OW 48
// un = CreateHuman ;
1960: LD_ADDR_VAR 0 3
1964: PUSH
1965: CALL_OW 44
1969: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_VAR 0 4
1979: PPUSH
1980: CALL_OW 52
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
1984: LD_INT 22
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: LD_INT 51
1995: PPUSH
1996: LD_INT 50
1998: PPUSH
1999: LD_INT 60
2001: PPUSH
2002: CALL_OW 12
2006: PPUSH
2007: CALL 23251 0 5
// veh = CreateVehicle ;
2011: LD_ADDR_VAR 0 4
2015: PUSH
2016: CALL_OW 45
2020: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
2033: LD_VAR 0 4
2037: PPUSH
2038: LD_INT 134
2040: PPUSH
2041: LD_INT 233
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2051: LD_VAR 0 4
2055: PPUSH
2056: LD_INT 1
2058: PPUSH
2059: LD_INT 100
2061: PPUSH
2062: CALL_OW 290
// un = CreateHuman ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: CALL_OW 44
2075: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2076: LD_VAR 0 3
2080: PPUSH
2081: LD_VAR 0 4
2085: PPUSH
2086: CALL_OW 52
// if Kirilenkova then
2090: LD_EXP 19
2094: IFFALSE 2192
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2096: LD_INT 22
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 51
2107: PPUSH
2108: LD_INT 50
2110: PPUSH
2111: LD_INT 60
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 23251 0 5
// veh = CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2133: LD_VAR 0 4
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
2145: LD_VAR 0 4
2149: PPUSH
2150: LD_INT 134
2152: PPUSH
2153: LD_INT 236
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2163: LD_VAR 0 4
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: LD_INT 100
2173: PPUSH
2174: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
2178: LD_EXP 19
2182: PPUSH
2183: LD_VAR 0 4
2187: PPUSH
2188: CALL_OW 52
// end ; end ; end_of_file end_of_file end_of_file
2192: LD_VAR 0 1
2196: RET
// export function MissionIntro ; begin
2197: LD_INT 0
2199: PPUSH
// end ; end_of_file
2200: LD_VAR 0 1
2204: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
2205: LD_INT 0
2207: PPUSH
2208: PPUSH
// if debugMode then
2209: LD_EXP 9
2213: IFFALSE 2230
// unit := NewCharacter ( ident ) ;
2215: LD_ADDR_VAR 0 5
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 25
2229: ST_TO_ADDR
// if exist_mode and not debugMode then
2230: LD_VAR 0 2
2234: PUSH
2235: LD_EXP 9
2239: NOT
2240: AND
2241: IFFALSE 2266
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
2243: LD_ADDR_VAR 0 5
2247: PUSH
2248: LD_EXP 8
2252: PUSH
2253: LD_VAR 0 1
2257: STR
2258: PPUSH
2259: CALL_OW 34
2263: ST_TO_ADDR
2264: GO 2288
// if not debugMode then
2266: LD_EXP 9
2270: NOT
2271: IFFALSE 2288
// unit := NewCharacter ( ident ) ;
2273: LD_ADDR_VAR 0 5
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 25
2287: ST_TO_ADDR
// if class then
2288: LD_VAR 0 3
2292: IFFALSE 2308
// SetClass ( unit , class ) ;
2294: LD_VAR 0 5
2298: PPUSH
2299: LD_VAR 0 3
2303: PPUSH
2304: CALL_OW 336
// result := unit ;
2308: LD_ADDR_VAR 0 4
2312: PUSH
2313: LD_VAR 0 5
2317: ST_TO_ADDR
// end ;
2318: LD_VAR 0 4
2322: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
2323: LD_INT 0
2325: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
2326: LD_VAR 0 1
2330: PPUSH
2331: CALL_OW 255
2335: PUSH
2336: LD_VAR 0 3
2340: EQUAL
2341: PUSH
2342: LD_VAR 0 1
2346: PPUSH
2347: CALL_OW 302
2351: AND
2352: IFFALSE 2374
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
2354: LD_VAR 0 1
2358: PPUSH
2359: LD_EXP 7
2363: PUSH
2364: LD_VAR 0 2
2368: STR
2369: PPUSH
2370: CALL_OW 38
// end ;
2374: LD_VAR 0 4
2378: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
2379: LD_INT 0
2381: PPUSH
2382: PPUSH
2383: PPUSH
// resultCharactersToSave = [ ] ;
2384: LD_ADDR_VAR 0 6
2388: PUSH
2389: EMPTY
2390: ST_TO_ADDR
// for unit in characters do
2391: LD_ADDR_VAR 0 5
2395: PUSH
2396: LD_VAR 0 1
2400: PUSH
2401: FOR_IN
2402: IFFALSE 2450
// if GetSide ( unit ) = side and IsOK ( unit ) then
2404: LD_VAR 0 5
2408: PPUSH
2409: CALL_OW 255
2413: PUSH
2414: LD_VAR 0 3
2418: EQUAL
2419: PUSH
2420: LD_VAR 0 5
2424: PPUSH
2425: CALL_OW 302
2429: AND
2430: IFFALSE 2448
// resultCharactersToSave = resultCharactersToSave ^ unit ;
2432: LD_ADDR_VAR 0 6
2436: PUSH
2437: LD_VAR 0 6
2441: PUSH
2442: LD_VAR 0 5
2446: ADD
2447: ST_TO_ADDR
2448: GO 2401
2450: POP
2451: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
2452: LD_VAR 0 6
2456: PPUSH
2457: LD_EXP 7
2461: PUSH
2462: LD_VAR 0 2
2466: STR
2467: PPUSH
2468: CALL_OW 38
// end ;
2472: LD_VAR 0 4
2476: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
2477: LD_INT 0
2479: PPUSH
2480: PPUSH
// for unit in units do
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_VAR 0 1
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2515
// PlaceUnitArea ( unit , area , spawnMode ) ;
2494: LD_VAR 0 5
2498: PPUSH
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_VAR 0 3
2508: PPUSH
2509: CALL_OW 49
2513: GO 2491
2515: POP
2516: POP
// end ;
2517: LD_VAR 0 4
2521: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
// units = characters ;
2528: LD_ADDR_VAR 0 9
2532: PUSH
2533: LD_VAR 0 1
2537: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
2538: LD_ADDR_VAR 0 9
2542: PUSH
2543: LD_VAR 0 9
2547: PUSH
2548: LD_EXP 11
2552: PUSH
2553: LD_EXP 12
2557: PUSH
2558: LD_EXP 13
2562: PUSH
2563: LD_EXP 14
2567: PUSH
2568: LD_EXP 15
2572: PUSH
2573: LD_EXP 16
2577: PUSH
2578: LD_EXP 17
2582: PUSH
2583: LD_EXP 18
2587: PUSH
2588: LD_EXP 20
2592: PUSH
2593: LD_EXP 19
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: DIFF
2610: ST_TO_ADDR
// if not units and not canTalkHero then
2611: LD_VAR 0 9
2615: NOT
2616: PUSH
2617: LD_VAR 0 5
2621: NOT
2622: AND
2623: IFFALSE 2627
// exit ;
2625: GO 2800
// if not units then
2627: LD_VAR 0 9
2631: NOT
2632: IFFALSE 2653
// units = characters diff [ Burlak ] ;
2634: LD_ADDR_VAR 0 9
2638: PUSH
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 11
2648: PUSH
2649: EMPTY
2650: LIST
2651: DIFF
2652: ST_TO_ADDR
// if not units and canTalkHero then
2653: LD_VAR 0 9
2657: NOT
2658: PUSH
2659: LD_VAR 0 5
2663: AND
2664: IFFALSE 2668
// exit ;
2666: GO 2800
// speaker := units [ rand ( 1 , units ) ] ;
2668: LD_ADDR_VAR 0 8
2672: PUSH
2673: LD_VAR 0 9
2677: PUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_VAR 0 9
2685: PPUSH
2686: CALL_OW 12
2690: ARRAY
2691: ST_TO_ADDR
// if radio then
2692: LD_VAR 0 4
2696: IFFALSE 2745
// begin if GetSex ( speaker ) = sex_male then
2698: LD_VAR 0 8
2702: PPUSH
2703: CALL_OW 258
2707: PUSH
2708: LD_INT 1
2710: EQUAL
2711: IFFALSE 2729
// SayRadio ( speaker , dialogMID ) else
2713: LD_VAR 0 8
2717: PPUSH
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL_OW 94
2727: GO 2743
// SayRadio ( speaker , dialogFID ) ;
2729: LD_VAR 0 8
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL_OW 94
// end else
2743: GO 2790
// begin if GetSex ( speaker ) = sex_male then
2745: LD_VAR 0 8
2749: PPUSH
2750: CALL_OW 258
2754: PUSH
2755: LD_INT 1
2757: EQUAL
2758: IFFALSE 2776
// Say ( speaker , dialogMID ) else
2760: LD_VAR 0 8
2764: PPUSH
2765: LD_VAR 0 2
2769: PPUSH
2770: CALL_OW 88
2774: GO 2790
// Say ( speaker , dialogFID ) ;
2776: LD_VAR 0 8
2780: PPUSH
2781: LD_VAR 0 3
2785: PPUSH
2786: CALL_OW 88
// end ; result := speaker ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_VAR 0 8
2799: ST_TO_ADDR
// end ;
2800: LD_VAR 0 6
2804: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// dir := GetDir ( bunker ) - 3 ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_VAR 0 2
2818: PPUSH
2819: CALL_OW 254
2823: PUSH
2824: LD_INT 3
2826: MINUS
2827: ST_TO_ADDR
// if dir < 0 then
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 0
2835: LESS
2836: IFFALSE 2852
// dir := 6 + dir ;
2838: LD_ADDR_VAR 0 4
2842: PUSH
2843: LD_INT 6
2845: PUSH
2846: LD_VAR 0 4
2850: PLUS
2851: ST_TO_ADDR
// SetDir ( un , dir ) ;
2852: LD_VAR 0 1
2856: PPUSH
2857: LD_VAR 0 4
2861: PPUSH
2862: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 52
// result = un ;
2880: LD_ADDR_VAR 0 3
2884: PUSH
2885: LD_VAR 0 1
2889: ST_TO_ADDR
// end ;
2890: LD_VAR 0 3
2894: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
// for eng in engs do
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_VAR 0 1
2908: PUSH
2909: FOR_IN
2910: IFFALSE 3027
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
2912: LD_VAR 0 4
2916: PPUSH
2917: CALL_OW 257
2921: PUSH
2922: LD_INT 2
2924: EQUAL
2925: PUSH
2926: LD_VAR 0 4
2930: PPUSH
2931: CALL_OW 302
2935: AND
2936: PUSH
2937: LD_VAR 0 2
2941: AND
2942: PUSH
2943: LD_VAR 0 2
2947: PPUSH
2948: CALL_OW 255
2952: PUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 255
2962: EQUAL
2963: NOT
2964: AND
2965: IFFALSE 3025
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
2967: LD_VAR 0 4
2971: PPUSH
2972: LD_STRING e
2974: PUSH
2975: LD_VAR 0 2
2979: PPUSH
2980: CALL_OW 250
2984: PUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: CALL_OW 251
2994: PUSH
2995: LD_VAR 0 2
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: LD_INT 0
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: PPUSH
3021: CALL_OW 447
3025: GO 2909
3027: POP
3028: POP
3029: LD_VAR 0 3
3033: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
3040: LD_ADDR_VAR 0 7
3044: PUSH
3045: LD_VAR 0 1
3049: PUSH
3050: LD_VAR 0 2
3054: ARRAY
3055: PPUSH
3056: LD_VAR 0 3
3060: PPUSH
3061: CALL_OW 3
3065: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
3066: LD_ADDR_VAR 0 1
3070: PUSH
3071: LD_VAR 0 1
3075: PPUSH
3076: LD_VAR 0 2
3080: PPUSH
3081: LD_VAR 0 7
3085: PPUSH
3086: CALL_OW 1
3090: ST_TO_ADDR
// result := tab ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_VAR 0 1
3100: ST_TO_ADDR
// end ;
3101: LD_VAR 0 4
3105: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
3106: LD_INT 0
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// result := [ ] ;
3120: LD_ADDR_VAR 0 8
3124: PUSH
3125: EMPTY
3126: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 266
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: IN
3147: NOT
3148: IFFALSE 3152
// exit ;
3150: GO 4778
// if name then
3152: LD_VAR 0 3
3156: IFFALSE 3172
// SetBName ( base_dep , name ) ;
3158: LD_VAR 0 1
3162: PPUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: CALL_OW 500
// base := GetBase ( base_dep ) ;
3172: LD_ADDR_VAR 0 16
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 274
3186: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
3187: LD_ADDR_VAR 0 17
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: CALL_OW 255
3201: ST_TO_ADDR
// if sources then
3202: LD_VAR 0 5
3206: IFFALSE 3253
// for i = 1 to 3 do
3208: LD_ADDR_VAR 0 9
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 3
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3251
// AddResourceType ( base , i , sources [ i ] ) ;
3224: LD_VAR 0 16
3228: PPUSH
3229: LD_VAR 0 9
3233: PPUSH
3234: LD_VAR 0 5
3238: PUSH
3239: LD_VAR 0 9
3243: ARRAY
3244: PPUSH
3245: CALL_OW 276
3249: GO 3221
3251: POP
3252: POP
// buildings := GetBaseBuildings ( base , area ) ;
3253: LD_ADDR_VAR 0 18
3257: PUSH
3258: LD_VAR 0 16
3262: PPUSH
3263: LD_VAR 0 2
3267: PPUSH
3268: CALL 26115 0 2
3272: ST_TO_ADDR
// InitHc ;
3273: CALL_OW 19
// InitUc ;
3277: CALL_OW 18
// uc_side := side ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_VAR 0 17
3290: ST_TO_ADDR
// uc_nation := nation ;
3291: LD_ADDR_OWVAR 21
3295: PUSH
3296: LD_VAR 0 6
3300: ST_TO_ADDR
// if buildings then
3301: LD_VAR 0 18
3305: IFFALSE 4637
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
3307: LD_ADDR_VAR 0 19
3311: PUSH
3312: LD_VAR 0 18
3316: PPUSH
3317: LD_INT 2
3319: PUSH
3320: LD_INT 30
3322: PUSH
3323: LD_INT 29
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PUSH
3330: LD_INT 30
3332: PUSH
3333: LD_INT 30
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 72
3349: ST_TO_ADDR
// if tmp then
3350: LD_VAR 0 19
3354: IFFALSE 3402
// for i in tmp do
3356: LD_ADDR_VAR 0 9
3360: PUSH
3361: LD_VAR 0 19
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3400
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
3369: LD_VAR 0 9
3373: PPUSH
3374: CALL_OW 250
3378: PPUSH
3379: LD_VAR 0 9
3383: PPUSH
3384: CALL_OW 251
3388: PPUSH
3389: LD_VAR 0 17
3393: PPUSH
3394: CALL_OW 441
3398: GO 3366
3400: POP
3401: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
3402: LD_VAR 0 18
3406: PPUSH
3407: LD_INT 2
3409: PUSH
3410: LD_INT 30
3412: PUSH
3413: LD_INT 31
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: LD_INT 30
3422: PUSH
3423: LD_INT 32
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 30
3432: PUSH
3433: LD_INT 33
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 72
3450: IFFALSE 3549
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
3452: LD_ADDR_VAR 0 9
3456: PUSH
3457: LD_VAR 0 18
3461: PPUSH
3462: LD_INT 2
3464: PUSH
3465: LD_INT 30
3467: PUSH
3468: LD_INT 31
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 30
3477: PUSH
3478: LD_INT 32
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 33
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PPUSH
3501: CALL_OW 72
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3547
// begin if not GetBWeapon ( i ) then
3509: LD_VAR 0 9
3513: PPUSH
3514: CALL_OW 269
3518: NOT
3519: IFFALSE 3545
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
3521: LD_VAR 0 9
3525: PPUSH
3526: LD_VAR 0 9
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: CALL 28343 0 2
3540: PPUSH
3541: CALL_OW 431
// end ;
3545: GO 3506
3547: POP
3548: POP
// end ; for i = 1 to personel do
3549: LD_ADDR_VAR 0 9
3553: PUSH
3554: DOUBLE
3555: LD_INT 1
3557: DEC
3558: ST_TO_ADDR
3559: LD_VAR 0 7
3563: PUSH
3564: FOR_TO
3565: IFFALSE 4617
// begin if i > 4 then
3567: LD_VAR 0 9
3571: PUSH
3572: LD_INT 4
3574: GREATER
3575: IFFALSE 3579
// break ;
3577: GO 4617
// case i of 1 :
3579: LD_VAR 0 9
3583: PUSH
3584: LD_INT 1
3586: DOUBLE
3587: EQUAL
3588: IFTRUE 3592
3590: GO 3683
3592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
3593: LD_ADDR_VAR 0 13
3597: PUSH
3598: LD_VAR 0 18
3602: PPUSH
3603: LD_INT 22
3605: PUSH
3606: LD_VAR 0 17
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: LD_INT 58
3617: PUSH
3618: EMPTY
3619: LIST
3620: PUSH
3621: LD_INT 2
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 30
3636: PUSH
3637: LD_INT 32
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 30
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 30
3656: PUSH
3657: LD_INT 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: PPUSH
3676: CALL_OW 72
3680: ST_TO_ADDR
3681: GO 3905
3683: LD_INT 2
3685: DOUBLE
3686: EQUAL
3687: IFTRUE 3691
3689: GO 3753
3691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
3692: LD_ADDR_VAR 0 13
3696: PUSH
3697: LD_VAR 0 18
3701: PPUSH
3702: LD_INT 22
3704: PUSH
3705: LD_VAR 0 17
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 30
3719: PUSH
3720: LD_INT 0
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: LD_INT 30
3729: PUSH
3730: LD_INT 1
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PPUSH
3746: CALL_OW 72
3750: ST_TO_ADDR
3751: GO 3905
3753: LD_INT 3
3755: DOUBLE
3756: EQUAL
3757: IFTRUE 3761
3759: GO 3823
3761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
3762: LD_ADDR_VAR 0 13
3766: PUSH
3767: LD_VAR 0 18
3771: PPUSH
3772: LD_INT 22
3774: PUSH
3775: LD_VAR 0 17
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 30
3789: PUSH
3790: LD_INT 2
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 30
3799: PUSH
3800: LD_INT 3
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PPUSH
3816: CALL_OW 72
3820: ST_TO_ADDR
3821: GO 3905
3823: LD_INT 4
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3831
3829: GO 3904
3831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
3832: LD_ADDR_VAR 0 13
3836: PUSH
3837: LD_VAR 0 18
3841: PPUSH
3842: LD_INT 22
3844: PUSH
3845: LD_VAR 0 17
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 2
3856: PUSH
3857: LD_INT 30
3859: PUSH
3860: LD_INT 6
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 30
3869: PUSH
3870: LD_INT 7
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PUSH
3877: LD_INT 30
3879: PUSH
3880: LD_INT 8
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PPUSH
3897: CALL_OW 72
3901: ST_TO_ADDR
3902: GO 3905
3904: POP
// if i = 1 then
3905: LD_VAR 0 9
3909: PUSH
3910: LD_INT 1
3912: EQUAL
3913: IFFALSE 4031
// begin tmp := [ ] ;
3915: LD_ADDR_VAR 0 19
3919: PUSH
3920: EMPTY
3921: ST_TO_ADDR
// for j in f do
3922: LD_ADDR_VAR 0 10
3926: PUSH
3927: LD_VAR 0 13
3931: PUSH
3932: FOR_IN
3933: IFFALSE 4013
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
3935: LD_VAR 0 10
3939: PPUSH
3940: CALL_OW 266
3944: PUSH
3945: LD_INT 31
3947: PUSH
3948: LD_INT 32
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: IN
3955: IFFALSE 3982
// tmp := Insert ( tmp , 1 , j ) else
3957: LD_ADDR_VAR 0 19
3961: PUSH
3962: LD_VAR 0 19
3966: PPUSH
3967: LD_INT 1
3969: PPUSH
3970: LD_VAR 0 10
3974: PPUSH
3975: CALL_OW 2
3979: ST_TO_ADDR
3980: GO 4011
// tmp := Insert ( tmp , tmp + 1 , j ) ;
3982: LD_ADDR_VAR 0 19
3986: PUSH
3987: LD_VAR 0 19
3991: PPUSH
3992: LD_VAR 0 19
3996: PUSH
3997: LD_INT 1
3999: PLUS
4000: PPUSH
4001: LD_VAR 0 10
4005: PPUSH
4006: CALL_OW 2
4010: ST_TO_ADDR
4011: GO 3932
4013: POP
4014: POP
// if tmp then
4015: LD_VAR 0 19
4019: IFFALSE 4031
// f := tmp ;
4021: LD_ADDR_VAR 0 13
4025: PUSH
4026: LD_VAR 0 19
4030: ST_TO_ADDR
// end ; x := personel [ i ] ;
4031: LD_ADDR_VAR 0 14
4035: PUSH
4036: LD_VAR 0 7
4040: PUSH
4041: LD_VAR 0 9
4045: ARRAY
4046: ST_TO_ADDR
// if x = - 1 then
4047: LD_VAR 0 14
4051: PUSH
4052: LD_INT 1
4054: NEG
4055: EQUAL
4056: IFFALSE 4250
// begin for j in f do
4058: LD_ADDR_VAR 0 10
4062: PUSH
4063: LD_VAR 0 13
4067: PUSH
4068: FOR_IN
4069: IFFALSE 4246
// repeat InitHc ;
4071: CALL_OW 19
// if GetBType ( j ) = b_barracks then
4075: LD_VAR 0 10
4079: PPUSH
4080: CALL_OW 266
4084: PUSH
4085: LD_INT 5
4087: EQUAL
4088: IFFALSE 4143
// begin if UnitsInside ( j ) < 3 then
4090: LD_VAR 0 10
4094: PPUSH
4095: CALL_OW 313
4099: PUSH
4100: LD_INT 3
4102: LESS
4103: IFFALSE 4124
// PrepareHuman ( false , i , skill ) else
4105: LD_INT 0
4107: PPUSH
4108: LD_VAR 0 9
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: CALL_OW 380
4122: GO 4141
// PrepareHuman ( false , i , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 9
4131: PPUSH
4132: LD_VAR 0 4
4136: PPUSH
4137: CALL_OW 380
// end else
4141: GO 4160
// PrepareHuman ( false , i , skill ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_VAR 0 9
4150: PPUSH
4151: LD_VAR 0 4
4155: PPUSH
4156: CALL_OW 380
// un := CreateHuman ;
4160: LD_ADDR_VAR 0 15
4164: PUSH
4165: CALL_OW 44
4169: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
4170: LD_ADDR_VAR 0 8
4174: PUSH
4175: LD_VAR 0 8
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: LD_VAR 0 15
4187: PPUSH
4188: CALL_OW 2
4192: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4193: LD_VAR 0 15
4197: PPUSH
4198: LD_VAR 0 10
4202: PPUSH
4203: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
4207: LD_VAR 0 10
4211: PPUSH
4212: CALL_OW 313
4216: PUSH
4217: LD_INT 6
4219: EQUAL
4220: PUSH
4221: LD_VAR 0 10
4225: PPUSH
4226: CALL_OW 266
4230: PUSH
4231: LD_INT 32
4233: PUSH
4234: LD_INT 31
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: IN
4241: OR
4242: IFFALSE 4071
4244: GO 4068
4246: POP
4247: POP
// end else
4248: GO 4615
// for j = 1 to x do
4250: LD_ADDR_VAR 0 10
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_VAR 0 14
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4613
// begin InitHc ;
4268: CALL_OW 19
// if not f then
4272: LD_VAR 0 13
4276: NOT
4277: IFFALSE 4366
// begin PrepareHuman ( false , i , skill ) ;
4279: LD_INT 0
4281: PPUSH
4282: LD_VAR 0 9
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: CALL_OW 380
// un := CreateHuman ;
4296: LD_ADDR_VAR 0 15
4300: PUSH
4301: CALL_OW 44
4305: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
4306: LD_ADDR_VAR 0 8
4310: PUSH
4311: LD_VAR 0 8
4315: PPUSH
4316: LD_INT 1
4318: PPUSH
4319: LD_VAR 0 15
4323: PPUSH
4324: CALL_OW 2
4328: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
4329: LD_VAR 0 15
4333: PPUSH
4334: LD_VAR 0 1
4338: PPUSH
4339: CALL_OW 250
4343: PPUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 251
4353: PPUSH
4354: LD_INT 10
4356: PPUSH
4357: LD_INT 0
4359: PPUSH
4360: CALL_OW 50
// continue ;
4364: GO 4265
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
4366: LD_VAR 0 13
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PPUSH
4375: CALL_OW 313
4379: PUSH
4380: LD_VAR 0 13
4384: PUSH
4385: LD_INT 1
4387: ARRAY
4388: PPUSH
4389: CALL_OW 266
4393: PUSH
4394: LD_INT 32
4396: PUSH
4397: LD_INT 31
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: IN
4404: AND
4405: PUSH
4406: LD_VAR 0 13
4410: PUSH
4411: LD_INT 1
4413: ARRAY
4414: PPUSH
4415: CALL_OW 313
4419: PUSH
4420: LD_INT 6
4422: EQUAL
4423: OR
4424: IFFALSE 4444
// f := Delete ( f , 1 ) ;
4426: LD_ADDR_VAR 0 13
4430: PUSH
4431: LD_VAR 0 13
4435: PPUSH
4436: LD_INT 1
4438: PPUSH
4439: CALL_OW 3
4443: ST_TO_ADDR
// if not f then
4444: LD_VAR 0 13
4448: NOT
4449: IFFALSE 4467
// begin x := x + 2 ;
4451: LD_ADDR_VAR 0 14
4455: PUSH
4456: LD_VAR 0 14
4460: PUSH
4461: LD_INT 2
4463: PLUS
4464: ST_TO_ADDR
// continue ;
4465: GO 4265
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
4467: LD_VAR 0 13
4471: PUSH
4472: LD_INT 1
4474: ARRAY
4475: PPUSH
4476: CALL_OW 266
4480: PUSH
4481: LD_INT 5
4483: EQUAL
4484: IFFALSE 4543
// begin if UnitsInside ( f [ 1 ] ) < 3 then
4486: LD_VAR 0 13
4490: PUSH
4491: LD_INT 1
4493: ARRAY
4494: PPUSH
4495: CALL_OW 313
4499: PUSH
4500: LD_INT 3
4502: LESS
4503: IFFALSE 4524
// PrepareHuman ( false , i , skill ) else
4505: LD_INT 0
4507: PPUSH
4508: LD_VAR 0 9
4512: PPUSH
4513: LD_VAR 0 4
4517: PPUSH
4518: CALL_OW 380
4522: GO 4541
// PrepareHuman ( false , i , skill ) ;
4524: LD_INT 0
4526: PPUSH
4527: LD_VAR 0 9
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL_OW 380
// end else
4541: GO 4560
// PrepareHuman ( false , i , skill ) ;
4543: LD_INT 0
4545: PPUSH
4546: LD_VAR 0 9
4550: PPUSH
4551: LD_VAR 0 4
4555: PPUSH
4556: CALL_OW 380
// un := CreateHuman ;
4560: LD_ADDR_VAR 0 15
4564: PUSH
4565: CALL_OW 44
4569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
4570: LD_ADDR_VAR 0 8
4574: PUSH
4575: LD_VAR 0 8
4579: PPUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_VAR 0 15
4587: PPUSH
4588: CALL_OW 2
4592: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
4593: LD_VAR 0 15
4597: PPUSH
4598: LD_VAR 0 13
4602: PUSH
4603: LD_INT 1
4605: ARRAY
4606: PPUSH
4607: CALL_OW 52
// end ;
4611: GO 4265
4613: POP
4614: POP
// end ;
4615: GO 3564
4617: POP
4618: POP
// result := result ^ buildings ;
4619: LD_ADDR_VAR 0 8
4623: PUSH
4624: LD_VAR 0 8
4628: PUSH
4629: LD_VAR 0 18
4633: ADD
4634: ST_TO_ADDR
// end else
4635: GO 4778
// begin for i = 1 to personel do
4637: LD_ADDR_VAR 0 9
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_VAR 0 7
4651: PUSH
4652: FOR_TO
4653: IFFALSE 4776
// begin if i > 4 then
4655: LD_VAR 0 9
4659: PUSH
4660: LD_INT 4
4662: GREATER
4663: IFFALSE 4667
// break ;
4665: GO 4776
// x := personel [ i ] ;
4667: LD_ADDR_VAR 0 14
4671: PUSH
4672: LD_VAR 0 7
4676: PUSH
4677: LD_VAR 0 9
4681: ARRAY
4682: ST_TO_ADDR
// if x = - 1 then
4683: LD_VAR 0 14
4687: PUSH
4688: LD_INT 1
4690: NEG
4691: EQUAL
4692: IFFALSE 4696
// continue ;
4694: GO 4652
// PrepareHuman ( false , i , skill ) ;
4696: LD_INT 0
4698: PPUSH
4699: LD_VAR 0 9
4703: PPUSH
4704: LD_VAR 0 4
4708: PPUSH
4709: CALL_OW 380
// un := CreateHuman ;
4713: LD_ADDR_VAR 0 15
4717: PUSH
4718: CALL_OW 44
4722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
4723: LD_VAR 0 15
4727: PPUSH
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL_OW 250
4737: PPUSH
4738: LD_VAR 0 1
4742: PPUSH
4743: CALL_OW 251
4747: PPUSH
4748: LD_INT 10
4750: PPUSH
4751: LD_INT 0
4753: PPUSH
4754: CALL_OW 50
// result := result ^ un ;
4758: LD_ADDR_VAR 0 8
4762: PUSH
4763: LD_VAR 0 8
4767: PUSH
4768: LD_VAR 0 15
4772: ADD
4773: ST_TO_ADDR
// end ;
4774: GO 4652
4776: POP
4777: POP
// end ; end ;
4778: LD_VAR 0 8
4782: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
4789: LD_ADDR_VAR 0 6
4793: PUSH
4794: LD_INT 34
4796: PUSH
4797: LD_INT 71
4799: PUSH
4800: LD_INT 70
4802: PUSH
4803: LD_INT 69
4805: PUSH
4806: LD_INT 39
4808: PUSH
4809: LD_INT 31
4811: PUSH
4812: LD_INT 14
4814: PUSH
4815: LD_INT 10
4817: PUSH
4818: LD_INT 40
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: ST_TO_ADDR
// resultWeapons = [ ] ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: EMPTY
4838: ST_TO_ADDR
// for i := 1 to weaponTechs do
4839: LD_ADDR_VAR 0 4
4843: PUSH
4844: DOUBLE
4845: LD_INT 1
4847: DEC
4848: ST_TO_ADDR
4849: LD_VAR 0 6
4853: PUSH
4854: FOR_TO
4855: IFFALSE 5042
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
4857: LD_VAR 0 6
4861: PUSH
4862: LD_VAR 0 4
4866: ARRAY
4867: PPUSH
4868: LD_VAR 0 2
4872: PPUSH
4873: CALL_OW 482
4877: PUSH
4878: LD_VAR 0 6
4882: PUSH
4883: LD_VAR 0 4
4887: ARRAY
4888: PPUSH
4889: LD_VAR 0 1
4893: PPUSH
4894: CALL_OW 321
4898: PUSH
4899: LD_INT 2
4901: EQUAL
4902: AND
4903: IFFALSE 5040
// case nation of nation_american :
4905: LD_VAR 0 2
4909: PUSH
4910: LD_INT 1
4912: DOUBLE
4913: EQUAL
4914: IFTRUE 4918
4916: GO 4953
4918: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
4919: LD_ADDR_VAR 0 5
4923: PUSH
4924: LD_VAR 0 5
4928: PUSH
4929: LD_VAR 0 6
4933: PUSH
4934: LD_VAR 0 4
4938: ARRAY
4939: PPUSH
4940: LD_VAR 0 2
4944: PPUSH
4945: CALL 5059 0 2
4949: ADD
4950: ST_TO_ADDR
4951: GO 5040
4953: LD_INT 2
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4996
4961: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
4962: LD_ADDR_VAR 0 5
4966: PUSH
4967: LD_VAR 0 5
4971: PUSH
4972: LD_VAR 0 6
4976: PUSH
4977: LD_VAR 0 4
4981: ARRAY
4982: PPUSH
4983: LD_VAR 0 2
4987: PPUSH
4988: CALL 5059 0 2
4992: ADD
4993: ST_TO_ADDR
4994: GO 5040
4996: LD_INT 3
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5004
5002: GO 5039
5004: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
5005: LD_ADDR_VAR 0 5
5009: PUSH
5010: LD_VAR 0 5
5014: PUSH
5015: LD_VAR 0 6
5019: PUSH
5020: LD_VAR 0 4
5024: ARRAY
5025: PPUSH
5026: LD_VAR 0 2
5030: PPUSH
5031: CALL 5059 0 2
5035: ADD
5036: ST_TO_ADDR
5037: GO 5040
5039: POP
// end ;
5040: GO 4854
5042: POP
5043: POP
// result = resultWeapons ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: LD_VAR 0 5
5053: ST_TO_ADDR
// end ;
5054: LD_VAR 0 3
5058: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
5059: LD_INT 0
5061: PPUSH
// case tech of tech_AdvMet :
5062: LD_VAR 0 1
5066: PUSH
5067: LD_INT 34
5069: DOUBLE
5070: EQUAL
5071: IFTRUE 5075
5073: GO 5103
5075: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
5076: LD_ADDR_VAR 0 3
5080: PUSH
5081: LD_INT 6
5083: PUSH
5084: LD_STRING 
5086: PUSH
5087: LD_INT 46
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 2
5099: ARRAY
5100: ST_TO_ADDR
5101: GO 5392
5103: LD_INT 71
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5111
5109: GO 5139
5111: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
5112: LD_ADDR_VAR 0 3
5116: PUSH
5117: LD_STRING 
5119: PUSH
5120: LD_STRING 
5122: PUSH
5123: LD_INT 47
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: PUSH
5131: LD_VAR 0 2
5135: ARRAY
5136: ST_TO_ADDR
5137: GO 5392
5139: LD_INT 70
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5147
5145: GO 5175
5147: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_STRING 
5155: PUSH
5156: LD_INT 26
5158: PUSH
5159: LD_STRING 
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: LIST
5166: PUSH
5167: LD_VAR 0 2
5171: ARRAY
5172: ST_TO_ADDR
5173: GO 5392
5175: LD_INT 69
5177: DOUBLE
5178: EQUAL
5179: IFTRUE 5183
5181: GO 5211
5183: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
5184: LD_ADDR_VAR 0 3
5188: PUSH
5189: LD_INT 4
5191: PUSH
5192: LD_INT 25
5194: PUSH
5195: LD_INT 43
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: ST_TO_ADDR
5209: GO 5392
5211: LD_INT 39
5213: DOUBLE
5214: EQUAL
5215: IFTRUE 5219
5217: GO 5247
5219: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
5220: LD_ADDR_VAR 0 3
5224: PUSH
5225: LD_INT 5
5227: PUSH
5228: LD_INT 27
5230: PUSH
5231: LD_INT 44
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: PUSH
5239: LD_VAR 0 2
5243: ARRAY
5244: ST_TO_ADDR
5245: GO 5392
5247: LD_INT 31
5249: DOUBLE
5250: EQUAL
5251: IFTRUE 5255
5253: GO 5283
5255: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: LD_STRING 
5263: PUSH
5264: LD_STRING 
5266: PUSH
5267: LD_INT 49
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: PUSH
5275: LD_VAR 0 2
5279: ARRAY
5280: ST_TO_ADDR
5281: GO 5392
5283: LD_INT 14
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5319
5291: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
5292: LD_ADDR_VAR 0 3
5296: PUSH
5297: LD_INT 10
5299: PUSH
5300: LD_STRING 
5302: PUSH
5303: LD_STRING 
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_VAR 0 2
5315: ARRAY
5316: ST_TO_ADDR
5317: GO 5392
5319: LD_INT 10
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5327
5325: GO 5355
5327: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_INT 9
5335: PUSH
5336: LD_STRING 
5338: PUSH
5339: LD_STRING 
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: PUSH
5347: LD_VAR 0 2
5351: ARRAY
5352: ST_TO_ADDR
5353: GO 5392
5355: LD_INT 40
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5391
5363: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
5364: LD_ADDR_VAR 0 3
5368: PUSH
5369: LD_INT 7
5371: PUSH
5372: LD_INT 28
5374: PUSH
5375: LD_INT 45
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: PUSH
5383: LD_VAR 0 2
5387: ARRAY
5388: ST_TO_ADDR
5389: GO 5392
5391: POP
// end ;
5392: LD_VAR 0 3
5396: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5397: LD_INT 0
5399: PPUSH
5400: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_VAR 0 1
5410: PPUSH
5411: LD_INT 1
5413: PPUSH
5414: CALL_OW 289
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: LD_INT 2
5426: PPUSH
5427: CALL_OW 289
5431: PUSH
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 3
5439: PPUSH
5440: CALL_OW 289
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: ST_TO_ADDR
// end ;
5450: LD_VAR 0 2
5454: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5455: LD_INT 0
5457: PPUSH
5458: PPUSH
// area = ListEnvironmentArea ( area ) ;
5459: LD_ADDR_VAR 0 2
5463: PUSH
5464: LD_VAR 0 2
5468: PPUSH
5469: CALL_OW 353
5473: ST_TO_ADDR
// if bulldozer > 0 then
5474: LD_VAR 0 1
5478: PUSH
5479: LD_INT 0
5481: GREATER
5482: IFFALSE 5593
// for i = area downto 1 do
5484: LD_ADDR_VAR 0 4
5488: PUSH
5489: DOUBLE
5490: LD_VAR 0 2
5494: INC
5495: ST_TO_ADDR
5496: LD_INT 1
5498: PUSH
5499: FOR_DOWNTO
5500: IFFALSE 5591
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5502: LD_VAR 0 2
5506: PUSH
5507: LD_VAR 0 4
5511: ARRAY
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: LD_VAR 0 2
5521: PUSH
5522: LD_VAR 0 4
5526: ARRAY
5527: PUSH
5528: LD_INT 2
5530: ARRAY
5531: PPUSH
5532: CALL_OW 351
5536: IFFALSE 5589
// if not HasTask ( bulldozer ) then
5538: LD_VAR 0 1
5542: PPUSH
5543: CALL_OW 314
5547: NOT
5548: IFFALSE 5589
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5550: LD_VAR 0 1
5554: PPUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_VAR 0 4
5564: ARRAY
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: LD_VAR 0 2
5574: PUSH
5575: LD_VAR 0 4
5579: ARRAY
5580: PUSH
5581: LD_INT 2
5583: ARRAY
5584: PPUSH
5585: CALL_OW 171
5589: GO 5499
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 3
5597: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5598: LD_INT 0
5600: PPUSH
5601: PPUSH
5602: PPUSH
// uc_side := GetSide ( b ) ;
5603: LD_ADDR_OWVAR 20
5607: PUSH
5608: LD_VAR 0 2
5612: PPUSH
5613: CALL_OW 255
5617: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5618: LD_ADDR_OWVAR 21
5622: PUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: CALL_OW 248
5632: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5633: LD_INT 0
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 380
// un = CreateHuman ;
5648: LD_ADDR_VAR 0 4
5652: PUSH
5653: CALL_OW 44
5657: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: LD_VAR 0 2
5667: PPUSH
5668: CALL_OW 254
5672: PUSH
5673: LD_INT 3
5675: MINUS
5676: ST_TO_ADDR
// if dir < 0 then
5677: LD_VAR 0 5
5681: PUSH
5682: LD_INT 0
5684: LESS
5685: IFFALSE 5701
// dir := 6 + dir ;
5687: LD_ADDR_VAR 0 5
5691: PUSH
5692: LD_INT 6
5694: PUSH
5695: LD_VAR 0 5
5699: PLUS
5700: ST_TO_ADDR
// SetDir ( un , dir ) ;
5701: LD_VAR 0 4
5705: PPUSH
5706: LD_VAR 0 5
5710: PPUSH
5711: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5715: LD_VAR 0 4
5719: PPUSH
5720: LD_VAR 0 2
5724: PPUSH
5725: CALL_OW 52
// result = un ;
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: LD_VAR 0 4
5738: ST_TO_ADDR
// end ; end_of_file
5739: LD_VAR 0 3
5743: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5744: LD_VAR 0 2
5748: PUSH
5749: LD_INT 100
5751: EQUAL
5752: IFFALSE 6701
// begin if not StreamModeActive then
5754: LD_EXP 24
5758: NOT
5759: IFFALSE 5769
// StreamModeActive := true ;
5761: LD_ADDR_EXP 24
5765: PUSH
5766: LD_INT 1
5768: ST_TO_ADDR
// if p3 = 0 then
5769: LD_VAR 0 3
5773: PUSH
5774: LD_INT 0
5776: EQUAL
5777: IFFALSE 5783
// InitStreamMode ;
5779: CALL 6934 0 0
// if p3 = 1 then
5783: LD_VAR 0 3
5787: PUSH
5788: LD_INT 1
5790: EQUAL
5791: IFFALSE 5801
// sRocket := true ;
5793: LD_ADDR_EXP 29
5797: PUSH
5798: LD_INT 1
5800: ST_TO_ADDR
// if p3 = 2 then
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 2
5808: EQUAL
5809: IFFALSE 5819
// sSpeed := true ;
5811: LD_ADDR_EXP 28
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// if p3 = 3 then
5819: LD_VAR 0 3
5823: PUSH
5824: LD_INT 3
5826: EQUAL
5827: IFFALSE 5837
// sEngine := true ;
5829: LD_ADDR_EXP 30
5833: PUSH
5834: LD_INT 1
5836: ST_TO_ADDR
// if p3 = 4 then
5837: LD_VAR 0 3
5841: PUSH
5842: LD_INT 4
5844: EQUAL
5845: IFFALSE 5855
// sSpec := true ;
5847: LD_ADDR_EXP 27
5851: PUSH
5852: LD_INT 1
5854: ST_TO_ADDR
// if p3 = 5 then
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 5
5862: EQUAL
5863: IFFALSE 5873
// sLevel := true ;
5865: LD_ADDR_EXP 31
5869: PUSH
5870: LD_INT 1
5872: ST_TO_ADDR
// if p3 = 6 then
5873: LD_VAR 0 3
5877: PUSH
5878: LD_INT 6
5880: EQUAL
5881: IFFALSE 5891
// sArmoury := true ;
5883: LD_ADDR_EXP 32
5887: PUSH
5888: LD_INT 1
5890: ST_TO_ADDR
// if p3 = 7 then
5891: LD_VAR 0 3
5895: PUSH
5896: LD_INT 7
5898: EQUAL
5899: IFFALSE 5909
// sRadar := true ;
5901: LD_ADDR_EXP 33
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// if p3 = 8 then
5909: LD_VAR 0 3
5913: PUSH
5914: LD_INT 8
5916: EQUAL
5917: IFFALSE 5927
// sBunker := true ;
5919: LD_ADDR_EXP 34
5923: PUSH
5924: LD_INT 1
5926: ST_TO_ADDR
// if p3 = 9 then
5927: LD_VAR 0 3
5931: PUSH
5932: LD_INT 9
5934: EQUAL
5935: IFFALSE 5945
// sHack := true ;
5937: LD_ADDR_EXP 35
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// if p3 = 10 then
5945: LD_VAR 0 3
5949: PUSH
5950: LD_INT 10
5952: EQUAL
5953: IFFALSE 5963
// sFire := true ;
5955: LD_ADDR_EXP 36
5959: PUSH
5960: LD_INT 1
5962: ST_TO_ADDR
// if p3 = 11 then
5963: LD_VAR 0 3
5967: PUSH
5968: LD_INT 11
5970: EQUAL
5971: IFFALSE 5981
// sRefresh := true ;
5973: LD_ADDR_EXP 37
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if p3 = 12 then
5981: LD_VAR 0 3
5985: PUSH
5986: LD_INT 12
5988: EQUAL
5989: IFFALSE 5999
// sExp := true ;
5991: LD_ADDR_EXP 38
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// if p3 = 13 then
5999: LD_VAR 0 3
6003: PUSH
6004: LD_INT 13
6006: EQUAL
6007: IFFALSE 6017
// sDepot := true ;
6009: LD_ADDR_EXP 39
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// if p3 = 14 then
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 14
6024: EQUAL
6025: IFFALSE 6035
// sFlag := true ;
6027: LD_ADDR_EXP 40
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// if p3 = 15 then
6035: LD_VAR 0 3
6039: PUSH
6040: LD_INT 15
6042: EQUAL
6043: IFFALSE 6053
// sKamikadze := true ;
6045: LD_ADDR_EXP 48
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// if p3 = 16 then
6053: LD_VAR 0 3
6057: PUSH
6058: LD_INT 16
6060: EQUAL
6061: IFFALSE 6071
// sTroll := true ;
6063: LD_ADDR_EXP 49
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// if p3 = 17 then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 17
6078: EQUAL
6079: IFFALSE 6089
// sSlow := true ;
6081: LD_ADDR_EXP 50
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// if p3 = 18 then
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 18
6096: EQUAL
6097: IFFALSE 6107
// sLack := true ;
6099: LD_ADDR_EXP 51
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if p3 = 19 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 19
6114: EQUAL
6115: IFFALSE 6125
// sTank := true ;
6117: LD_ADDR_EXP 53
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 20 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 20
6132: EQUAL
6133: IFFALSE 6143
// sRemote := true ;
6135: LD_ADDR_EXP 54
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 21 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 21
6150: EQUAL
6151: IFFALSE 6161
// sPowell := true ;
6153: LD_ADDR_EXP 55
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// if p3 = 22 then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 22
6168: EQUAL
6169: IFFALSE 6179
// sTeleport := true ;
6171: LD_ADDR_EXP 58
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if p3 = 23 then
6179: LD_VAR 0 3
6183: PUSH
6184: LD_INT 23
6186: EQUAL
6187: IFFALSE 6197
// sOilTower := true ;
6189: LD_ADDR_EXP 60
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if p3 = 24 then
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 24
6204: EQUAL
6205: IFFALSE 6215
// sShovel := true ;
6207: LD_ADDR_EXP 61
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// if p3 = 25 then
6215: LD_VAR 0 3
6219: PUSH
6220: LD_INT 25
6222: EQUAL
6223: IFFALSE 6233
// sSheik := true ;
6225: LD_ADDR_EXP 62
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if p3 = 26 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 26
6240: EQUAL
6241: IFFALSE 6251
// sEarthquake := true ;
6243: LD_ADDR_EXP 64
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// if p3 = 27 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 27
6258: EQUAL
6259: IFFALSE 6269
// sAI := true ;
6261: LD_ADDR_EXP 65
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// if p3 = 28 then
6269: LD_VAR 0 3
6273: PUSH
6274: LD_INT 28
6276: EQUAL
6277: IFFALSE 6287
// sCargo := true ;
6279: LD_ADDR_EXP 68
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if p3 = 29 then
6287: LD_VAR 0 3
6291: PUSH
6292: LD_INT 29
6294: EQUAL
6295: IFFALSE 6305
// sDLaser := true ;
6297: LD_ADDR_EXP 69
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// if p3 = 30 then
6305: LD_VAR 0 3
6309: PUSH
6310: LD_INT 30
6312: EQUAL
6313: IFFALSE 6323
// sExchange := true ;
6315: LD_ADDR_EXP 70
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if p3 = 31 then
6323: LD_VAR 0 3
6327: PUSH
6328: LD_INT 31
6330: EQUAL
6331: IFFALSE 6341
// sFac := true ;
6333: LD_ADDR_EXP 71
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// if p3 = 32 then
6341: LD_VAR 0 3
6345: PUSH
6346: LD_INT 32
6348: EQUAL
6349: IFFALSE 6359
// sPower := true ;
6351: LD_ADDR_EXP 72
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// if p3 = 33 then
6359: LD_VAR 0 3
6363: PUSH
6364: LD_INT 33
6366: EQUAL
6367: IFFALSE 6377
// sRandom := true ;
6369: LD_ADDR_EXP 73
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// if p3 = 34 then
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 34
6384: EQUAL
6385: IFFALSE 6395
// sShield := true ;
6387: LD_ADDR_EXP 74
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if p3 = 35 then
6395: LD_VAR 0 3
6399: PUSH
6400: LD_INT 35
6402: EQUAL
6403: IFFALSE 6413
// sTime := true ;
6405: LD_ADDR_EXP 75
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// if p3 = 36 then
6413: LD_VAR 0 3
6417: PUSH
6418: LD_INT 36
6420: EQUAL
6421: IFFALSE 6431
// sTools := true ;
6423: LD_ADDR_EXP 76
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// if p3 = 101 then
6431: LD_VAR 0 3
6435: PUSH
6436: LD_INT 101
6438: EQUAL
6439: IFFALSE 6449
// sSold := true ;
6441: LD_ADDR_EXP 41
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// if p3 = 102 then
6449: LD_VAR 0 3
6453: PUSH
6454: LD_INT 102
6456: EQUAL
6457: IFFALSE 6467
// sDiff := true ;
6459: LD_ADDR_EXP 42
6463: PUSH
6464: LD_INT 1
6466: ST_TO_ADDR
// if p3 = 103 then
6467: LD_VAR 0 3
6471: PUSH
6472: LD_INT 103
6474: EQUAL
6475: IFFALSE 6485
// sFog := true ;
6477: LD_ADDR_EXP 45
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 104 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 104
6492: EQUAL
6493: IFFALSE 6503
// sReset := true ;
6495: LD_ADDR_EXP 46
6499: PUSH
6500: LD_INT 1
6502: ST_TO_ADDR
// if p3 = 105 then
6503: LD_VAR 0 3
6507: PUSH
6508: LD_INT 105
6510: EQUAL
6511: IFFALSE 6521
// sSun := true ;
6513: LD_ADDR_EXP 47
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// if p3 = 106 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 106
6528: EQUAL
6529: IFFALSE 6539
// sTiger := true ;
6531: LD_ADDR_EXP 43
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 107 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 107
6546: EQUAL
6547: IFFALSE 6557
// sBomb := true ;
6549: LD_ADDR_EXP 44
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 108 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 108
6564: EQUAL
6565: IFFALSE 6575
// sWound := true ;
6567: LD_ADDR_EXP 52
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// if p3 = 109 then
6575: LD_VAR 0 3
6579: PUSH
6580: LD_INT 109
6582: EQUAL
6583: IFFALSE 6593
// sBetray := true ;
6585: LD_ADDR_EXP 56
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// if p3 = 110 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 110
6600: EQUAL
6601: IFFALSE 6611
// sContamin := true ;
6603: LD_ADDR_EXP 57
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// if p3 = 111 then
6611: LD_VAR 0 3
6615: PUSH
6616: LD_INT 111
6618: EQUAL
6619: IFFALSE 6629
// sOil := true ;
6621: LD_ADDR_EXP 59
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// if p3 = 112 then
6629: LD_VAR 0 3
6633: PUSH
6634: LD_INT 112
6636: EQUAL
6637: IFFALSE 6647
// sStu := true ;
6639: LD_ADDR_EXP 63
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if p3 = 113 then
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 113
6654: EQUAL
6655: IFFALSE 6665
// sBazooka := true ;
6657: LD_ADDR_EXP 66
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if p3 = 114 then
6665: LD_VAR 0 3
6669: PUSH
6670: LD_INT 114
6672: EQUAL
6673: IFFALSE 6683
// sMortar := true ;
6675: LD_ADDR_EXP 67
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// if p3 = 115 then
6683: LD_VAR 0 3
6687: PUSH
6688: LD_INT 115
6690: EQUAL
6691: IFFALSE 6701
// sRanger := true ;
6693: LD_ADDR_EXP 77
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// end ; if p2 = 101 then
6701: LD_VAR 0 2
6705: PUSH
6706: LD_INT 101
6708: EQUAL
6709: IFFALSE 6912
// begin case p3 of 1 :
6711: LD_VAR 0 3
6715: PUSH
6716: LD_INT 1
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6731
6724: POP
// hHackUnlimitedResources ; 2 :
6725: CALL 17031 0 0
6729: GO 6912
6731: LD_INT 2
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6746
6739: POP
// hHackSetLevel10 ; 3 :
6740: CALL 17164 0 0
6744: GO 6912
6746: LD_INT 3
6748: DOUBLE
6749: EQUAL
6750: IFTRUE 6754
6752: GO 6761
6754: POP
// hHackSetLevel10YourUnits ; 4 :
6755: CALL 17249 0 0
6759: GO 6912
6761: LD_INT 4
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6791
6769: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
6770: LD_VAR 0 4
6774: PPUSH
6775: LD_VAR 0 5
6779: PPUSH
6780: LD_VAR 0 6
6784: PPUSH
6785: CALL 17339 0 3
6789: GO 6912
6791: LD_INT 5
6793: DOUBLE
6794: EQUAL
6795: IFTRUE 6799
6797: GO 6806
6799: POP
// hHackSpawnVehicle ; 6 :
6800: CALL 17400 0 0
6804: GO 6912
6806: LD_INT 6
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6821
6814: POP
// hHackInvincible ; 7 :
6815: CALL 17946 0 0
6819: GO 6912
6821: LD_INT 7
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6836
6829: POP
// hHackInvisible ; 8 :
6830: CALL 18057 0 0
6834: GO 6912
6836: LD_INT 8
6838: DOUBLE
6839: EQUAL
6840: IFTRUE 6844
6842: GO 6851
6844: POP
// hHackChangeYourSide ; 9 :
6845: CALL 18114 0 0
6849: GO 6912
6851: LD_INT 9
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6866
6859: POP
// hHackChangeUnitSide ; 10 :
6860: CALL 18156 0 0
6864: GO 6912
6866: LD_INT 10
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6881
6874: POP
// hHackFog ; 11 :
6875: CALL 18257 0 0
6879: GO 6912
6881: LD_INT 11
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 6896
6889: POP
// hHackApeman ; 12 :
6890: CALL 18272 0 0
6894: GO 6912
6896: LD_INT 12
6898: DOUBLE
6899: EQUAL
6900: IFTRUE 6904
6902: GO 6911
6904: POP
// hHackBoom ; end ;
6905: CALL 18357 0 0
6909: GO 6912
6911: POP
// end ; end ;
6912: PPOPN 6
6914: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6915: GO 6917
6917: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6918: LD_STRING initStreamRollete();
6920: PPUSH
6921: CALL_OW 559
// InitStreamMode ;
6925: CALL 6934 0 0
// DefineStreamItems ( ) ;
6929: CALL 7374 0 0
// end ;
6933: END
// function InitStreamMode ; begin
6934: LD_INT 0
6936: PPUSH
// streamModeActive := false ;
6937: LD_ADDR_EXP 24
6941: PUSH
6942: LD_INT 0
6944: ST_TO_ADDR
// normalCounter := 36 ;
6945: LD_ADDR_EXP 25
6949: PUSH
6950: LD_INT 36
6952: ST_TO_ADDR
// hardcoreCounter := 16 ;
6953: LD_ADDR_EXP 26
6957: PUSH
6958: LD_INT 16
6960: ST_TO_ADDR
// sRocket := false ;
6961: LD_ADDR_EXP 29
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// sSpeed := false ;
6969: LD_ADDR_EXP 28
6973: PUSH
6974: LD_INT 0
6976: ST_TO_ADDR
// sEngine := false ;
6977: LD_ADDR_EXP 30
6981: PUSH
6982: LD_INT 0
6984: ST_TO_ADDR
// sSpec := false ;
6985: LD_ADDR_EXP 27
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// sLevel := false ;
6993: LD_ADDR_EXP 31
6997: PUSH
6998: LD_INT 0
7000: ST_TO_ADDR
// sArmoury := false ;
7001: LD_ADDR_EXP 32
7005: PUSH
7006: LD_INT 0
7008: ST_TO_ADDR
// sRadar := false ;
7009: LD_ADDR_EXP 33
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// sBunker := false ;
7017: LD_ADDR_EXP 34
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// sHack := false ;
7025: LD_ADDR_EXP 35
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
// sFire := false ;
7033: LD_ADDR_EXP 36
7037: PUSH
7038: LD_INT 0
7040: ST_TO_ADDR
// sRefresh := false ;
7041: LD_ADDR_EXP 37
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// sExp := false ;
7049: LD_ADDR_EXP 38
7053: PUSH
7054: LD_INT 0
7056: ST_TO_ADDR
// sDepot := false ;
7057: LD_ADDR_EXP 39
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// sFlag := false ;
7065: LD_ADDR_EXP 40
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// sKamikadze := false ;
7073: LD_ADDR_EXP 48
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// sTroll := false ;
7081: LD_ADDR_EXP 49
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// sSlow := false ;
7089: LD_ADDR_EXP 50
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// sLack := false ;
7097: LD_ADDR_EXP 51
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// sTank := false ;
7105: LD_ADDR_EXP 53
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// sRemote := false ;
7113: LD_ADDR_EXP 54
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// sPowell := false ;
7121: LD_ADDR_EXP 55
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// sTeleport := false ;
7129: LD_ADDR_EXP 58
7133: PUSH
7134: LD_INT 0
7136: ST_TO_ADDR
// sOilTower := false ;
7137: LD_ADDR_EXP 60
7141: PUSH
7142: LD_INT 0
7144: ST_TO_ADDR
// sShovel := false ;
7145: LD_ADDR_EXP 61
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// sSheik := false ;
7153: LD_ADDR_EXP 62
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// sEarthquake := false ;
7161: LD_ADDR_EXP 64
7165: PUSH
7166: LD_INT 0
7168: ST_TO_ADDR
// sAI := false ;
7169: LD_ADDR_EXP 65
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// sCargo := false ;
7177: LD_ADDR_EXP 68
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// sDLaser := false ;
7185: LD_ADDR_EXP 69
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// sExchange := false ;
7193: LD_ADDR_EXP 70
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// sFac := false ;
7201: LD_ADDR_EXP 71
7205: PUSH
7206: LD_INT 0
7208: ST_TO_ADDR
// sPower := false ;
7209: LD_ADDR_EXP 72
7213: PUSH
7214: LD_INT 0
7216: ST_TO_ADDR
// sRandom := false ;
7217: LD_ADDR_EXP 73
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// sShield := false ;
7225: LD_ADDR_EXP 74
7229: PUSH
7230: LD_INT 0
7232: ST_TO_ADDR
// sTime := false ;
7233: LD_ADDR_EXP 75
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// sTools := false ;
7241: LD_ADDR_EXP 76
7245: PUSH
7246: LD_INT 0
7248: ST_TO_ADDR
// sSold := false ;
7249: LD_ADDR_EXP 41
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// sDiff := false ;
7257: LD_ADDR_EXP 42
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// sFog := false ;
7265: LD_ADDR_EXP 45
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
// sReset := false ;
7273: LD_ADDR_EXP 46
7277: PUSH
7278: LD_INT 0
7280: ST_TO_ADDR
// sSun := false ;
7281: LD_ADDR_EXP 47
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// sTiger := false ;
7289: LD_ADDR_EXP 43
7293: PUSH
7294: LD_INT 0
7296: ST_TO_ADDR
// sBomb := false ;
7297: LD_ADDR_EXP 44
7301: PUSH
7302: LD_INT 0
7304: ST_TO_ADDR
// sWound := false ;
7305: LD_ADDR_EXP 52
7309: PUSH
7310: LD_INT 0
7312: ST_TO_ADDR
// sBetray := false ;
7313: LD_ADDR_EXP 56
7317: PUSH
7318: LD_INT 0
7320: ST_TO_ADDR
// sContamin := false ;
7321: LD_ADDR_EXP 57
7325: PUSH
7326: LD_INT 0
7328: ST_TO_ADDR
// sOil := false ;
7329: LD_ADDR_EXP 59
7333: PUSH
7334: LD_INT 0
7336: ST_TO_ADDR
// sStu := false ;
7337: LD_ADDR_EXP 63
7341: PUSH
7342: LD_INT 0
7344: ST_TO_ADDR
// sBazooka := false ;
7345: LD_ADDR_EXP 66
7349: PUSH
7350: LD_INT 0
7352: ST_TO_ADDR
// sMortar := false ;
7353: LD_ADDR_EXP 67
7357: PUSH
7358: LD_INT 0
7360: ST_TO_ADDR
// sRanger := false ;
7361: LD_ADDR_EXP 77
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 1
7373: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
// result := [ ] ;
7381: LD_ADDR_VAR 0 1
7385: PUSH
7386: EMPTY
7387: ST_TO_ADDR
// if campaign_id = 1 then
7388: LD_OWVAR 69
7392: PUSH
7393: LD_INT 1
7395: EQUAL
7396: IFFALSE 10334
// begin case mission_number of 1 :
7398: LD_OWVAR 70
7402: PUSH
7403: LD_INT 1
7405: DOUBLE
7406: EQUAL
7407: IFTRUE 7411
7409: GO 7475
7411: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7412: LD_ADDR_VAR 0 1
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: LD_INT 4
7422: PUSH
7423: LD_INT 11
7425: PUSH
7426: LD_INT 12
7428: PUSH
7429: LD_INT 15
7431: PUSH
7432: LD_INT 16
7434: PUSH
7435: LD_INT 22
7437: PUSH
7438: LD_INT 23
7440: PUSH
7441: LD_INT 26
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 102
7460: PUSH
7461: LD_INT 106
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: ST_TO_ADDR
7473: GO 10332
7475: LD_INT 2
7477: DOUBLE
7478: EQUAL
7479: IFTRUE 7483
7481: GO 7555
7483: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7484: LD_ADDR_VAR 0 1
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: LD_INT 4
7494: PUSH
7495: LD_INT 11
7497: PUSH
7498: LD_INT 12
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: LD_INT 16
7506: PUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 23
7512: PUSH
7513: LD_INT 26
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 101
7529: PUSH
7530: LD_INT 102
7532: PUSH
7533: LD_INT 105
7535: PUSH
7536: LD_INT 106
7538: PUSH
7539: LD_INT 108
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
7553: GO 10332
7555: LD_INT 3
7557: DOUBLE
7558: EQUAL
7559: IFTRUE 7563
7561: GO 7639
7563: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7564: LD_ADDR_VAR 0 1
7568: PUSH
7569: LD_INT 2
7571: PUSH
7572: LD_INT 4
7574: PUSH
7575: LD_INT 5
7577: PUSH
7578: LD_INT 11
7580: PUSH
7581: LD_INT 12
7583: PUSH
7584: LD_INT 15
7586: PUSH
7587: LD_INT 16
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 26
7595: PUSH
7596: LD_INT 36
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 101
7613: PUSH
7614: LD_INT 102
7616: PUSH
7617: LD_INT 105
7619: PUSH
7620: LD_INT 106
7622: PUSH
7623: LD_INT 108
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: ST_TO_ADDR
7637: GO 10332
7639: LD_INT 4
7641: DOUBLE
7642: EQUAL
7643: IFTRUE 7647
7645: GO 7731
7647: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_INT 2
7655: PUSH
7656: LD_INT 4
7658: PUSH
7659: LD_INT 5
7661: PUSH
7662: LD_INT 8
7664: PUSH
7665: LD_INT 11
7667: PUSH
7668: LD_INT 12
7670: PUSH
7671: LD_INT 15
7673: PUSH
7674: LD_INT 16
7676: PUSH
7677: LD_INT 22
7679: PUSH
7680: LD_INT 23
7682: PUSH
7683: LD_INT 26
7685: PUSH
7686: LD_INT 36
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 102
7708: PUSH
7709: LD_INT 105
7711: PUSH
7712: LD_INT 106
7714: PUSH
7715: LD_INT 108
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: ST_TO_ADDR
7729: GO 10332
7731: LD_INT 5
7733: DOUBLE
7734: EQUAL
7735: IFTRUE 7739
7737: GO 7839
7739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7740: LD_ADDR_VAR 0 1
7744: PUSH
7745: LD_INT 2
7747: PUSH
7748: LD_INT 4
7750: PUSH
7751: LD_INT 5
7753: PUSH
7754: LD_INT 6
7756: PUSH
7757: LD_INT 8
7759: PUSH
7760: LD_INT 11
7762: PUSH
7763: LD_INT 12
7765: PUSH
7766: LD_INT 15
7768: PUSH
7769: LD_INT 16
7771: PUSH
7772: LD_INT 22
7774: PUSH
7775: LD_INT 23
7777: PUSH
7778: LD_INT 25
7780: PUSH
7781: LD_INT 26
7783: PUSH
7784: LD_INT 36
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 101
7805: PUSH
7806: LD_INT 102
7808: PUSH
7809: LD_INT 105
7811: PUSH
7812: LD_INT 106
7814: PUSH
7815: LD_INT 108
7817: PUSH
7818: LD_INT 109
7820: PUSH
7821: LD_INT 112
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: ST_TO_ADDR
7837: GO 10332
7839: LD_INT 6
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7967
7847: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7848: LD_ADDR_VAR 0 1
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 4
7858: PUSH
7859: LD_INT 5
7861: PUSH
7862: LD_INT 6
7864: PUSH
7865: LD_INT 8
7867: PUSH
7868: LD_INT 11
7870: PUSH
7871: LD_INT 12
7873: PUSH
7874: LD_INT 15
7876: PUSH
7877: LD_INT 16
7879: PUSH
7880: LD_INT 20
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 25
7894: PUSH
7895: LD_INT 26
7897: PUSH
7898: LD_INT 30
7900: PUSH
7901: LD_INT 31
7903: PUSH
7904: LD_INT 32
7906: PUSH
7907: LD_INT 36
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 101
7933: PUSH
7934: LD_INT 102
7936: PUSH
7937: LD_INT 105
7939: PUSH
7940: LD_INT 106
7942: PUSH
7943: LD_INT 108
7945: PUSH
7946: LD_INT 109
7948: PUSH
7949: LD_INT 112
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
7965: GO 10332
7967: LD_INT 7
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 8075
7975: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7976: LD_ADDR_VAR 0 1
7980: PUSH
7981: LD_INT 2
7983: PUSH
7984: LD_INT 4
7986: PUSH
7987: LD_INT 5
7989: PUSH
7990: LD_INT 7
7992: PUSH
7993: LD_INT 11
7995: PUSH
7996: LD_INT 12
7998: PUSH
7999: LD_INT 15
8001: PUSH
8002: LD_INT 16
8004: PUSH
8005: LD_INT 20
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_INT 23
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: LD_INT 26
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 101
8041: PUSH
8042: LD_INT 102
8044: PUSH
8045: LD_INT 103
8047: PUSH
8048: LD_INT 105
8050: PUSH
8051: LD_INT 106
8053: PUSH
8054: LD_INT 108
8056: PUSH
8057: LD_INT 112
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: ST_TO_ADDR
8073: GO 10332
8075: LD_INT 8
8077: DOUBLE
8078: EQUAL
8079: IFTRUE 8083
8081: GO 8211
8083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8084: LD_ADDR_VAR 0 1
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: LD_INT 4
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: LD_INT 6
8100: PUSH
8101: LD_INT 7
8103: PUSH
8104: LD_INT 8
8106: PUSH
8107: LD_INT 11
8109: PUSH
8110: LD_INT 12
8112: PUSH
8113: LD_INT 15
8115: PUSH
8116: LD_INT 16
8118: PUSH
8119: LD_INT 20
8121: PUSH
8122: LD_INT 21
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_INT 23
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 26
8136: PUSH
8137: LD_INT 30
8139: PUSH
8140: LD_INT 31
8142: PUSH
8143: LD_INT 32
8145: PUSH
8146: LD_INT 36
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 101
8173: PUSH
8174: LD_INT 102
8176: PUSH
8177: LD_INT 103
8179: PUSH
8180: LD_INT 105
8182: PUSH
8183: LD_INT 106
8185: PUSH
8186: LD_INT 108
8188: PUSH
8189: LD_INT 109
8191: PUSH
8192: LD_INT 112
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: ST_TO_ADDR
8209: GO 10332
8211: LD_INT 9
8213: DOUBLE
8214: EQUAL
8215: IFTRUE 8219
8217: GO 8355
8219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8220: LD_ADDR_VAR 0 1
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: LD_INT 4
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: LD_INT 6
8236: PUSH
8237: LD_INT 7
8239: PUSH
8240: LD_INT 8
8242: PUSH
8243: LD_INT 11
8245: PUSH
8246: LD_INT 12
8248: PUSH
8249: LD_INT 15
8251: PUSH
8252: LD_INT 16
8254: PUSH
8255: LD_INT 20
8257: PUSH
8258: LD_INT 21
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 23
8266: PUSH
8267: LD_INT 25
8269: PUSH
8270: LD_INT 26
8272: PUSH
8273: LD_INT 28
8275: PUSH
8276: LD_INT 30
8278: PUSH
8279: LD_INT 31
8281: PUSH
8282: LD_INT 32
8284: PUSH
8285: LD_INT 36
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 101
8313: PUSH
8314: LD_INT 102
8316: PUSH
8317: LD_INT 103
8319: PUSH
8320: LD_INT 105
8322: PUSH
8323: LD_INT 106
8325: PUSH
8326: LD_INT 108
8328: PUSH
8329: LD_INT 109
8331: PUSH
8332: LD_INT 112
8334: PUSH
8335: LD_INT 114
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
8353: GO 10332
8355: LD_INT 10
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8547
8363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8364: LD_ADDR_VAR 0 1
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: LD_INT 4
8374: PUSH
8375: LD_INT 5
8377: PUSH
8378: LD_INT 6
8380: PUSH
8381: LD_INT 7
8383: PUSH
8384: LD_INT 8
8386: PUSH
8387: LD_INT 9
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: LD_INT 11
8395: PUSH
8396: LD_INT 12
8398: PUSH
8399: LD_INT 13
8401: PUSH
8402: LD_INT 14
8404: PUSH
8405: LD_INT 15
8407: PUSH
8408: LD_INT 16
8410: PUSH
8411: LD_INT 17
8413: PUSH
8414: LD_INT 18
8416: PUSH
8417: LD_INT 19
8419: PUSH
8420: LD_INT 20
8422: PUSH
8423: LD_INT 21
8425: PUSH
8426: LD_INT 22
8428: PUSH
8429: LD_INT 23
8431: PUSH
8432: LD_INT 24
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 26
8440: PUSH
8441: LD_INT 28
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_INT 31
8449: PUSH
8450: LD_INT 32
8452: PUSH
8453: LD_INT 36
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 101
8489: PUSH
8490: LD_INT 102
8492: PUSH
8493: LD_INT 103
8495: PUSH
8496: LD_INT 104
8498: PUSH
8499: LD_INT 105
8501: PUSH
8502: LD_INT 106
8504: PUSH
8505: LD_INT 107
8507: PUSH
8508: LD_INT 108
8510: PUSH
8511: LD_INT 109
8513: PUSH
8514: LD_INT 110
8516: PUSH
8517: LD_INT 111
8519: PUSH
8520: LD_INT 112
8522: PUSH
8523: LD_INT 114
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: ST_TO_ADDR
8545: GO 10332
8547: LD_INT 11
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8747
8555: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8556: LD_ADDR_VAR 0 1
8560: PUSH
8561: LD_INT 2
8563: PUSH
8564: LD_INT 3
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: LD_INT 5
8572: PUSH
8573: LD_INT 6
8575: PUSH
8576: LD_INT 7
8578: PUSH
8579: LD_INT 8
8581: PUSH
8582: LD_INT 9
8584: PUSH
8585: LD_INT 10
8587: PUSH
8588: LD_INT 11
8590: PUSH
8591: LD_INT 12
8593: PUSH
8594: LD_INT 13
8596: PUSH
8597: LD_INT 14
8599: PUSH
8600: LD_INT 15
8602: PUSH
8603: LD_INT 16
8605: PUSH
8606: LD_INT 17
8608: PUSH
8609: LD_INT 18
8611: PUSH
8612: LD_INT 19
8614: PUSH
8615: LD_INT 20
8617: PUSH
8618: LD_INT 21
8620: PUSH
8621: LD_INT 22
8623: PUSH
8624: LD_INT 23
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 25
8632: PUSH
8633: LD_INT 26
8635: PUSH
8636: LD_INT 28
8638: PUSH
8639: LD_INT 30
8641: PUSH
8642: LD_INT 31
8644: PUSH
8645: LD_INT 32
8647: PUSH
8648: LD_INT 34
8650: PUSH
8651: LD_INT 36
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 114
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: ST_TO_ADDR
8745: GO 10332
8747: LD_INT 12
8749: DOUBLE
8750: EQUAL
8751: IFTRUE 8755
8753: GO 8963
8755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8756: LD_ADDR_VAR 0 1
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 2
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: LD_INT 4
8772: PUSH
8773: LD_INT 5
8775: PUSH
8776: LD_INT 6
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: LD_INT 8
8784: PUSH
8785: LD_INT 9
8787: PUSH
8788: LD_INT 10
8790: PUSH
8791: LD_INT 11
8793: PUSH
8794: LD_INT 12
8796: PUSH
8797: LD_INT 13
8799: PUSH
8800: LD_INT 14
8802: PUSH
8803: LD_INT 15
8805: PUSH
8806: LD_INT 16
8808: PUSH
8809: LD_INT 17
8811: PUSH
8812: LD_INT 18
8814: PUSH
8815: LD_INT 19
8817: PUSH
8818: LD_INT 20
8820: PUSH
8821: LD_INT 21
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_INT 23
8829: PUSH
8830: LD_INT 24
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 26
8838: PUSH
8839: LD_INT 27
8841: PUSH
8842: LD_INT 28
8844: PUSH
8845: LD_INT 30
8847: PUSH
8848: LD_INT 31
8850: PUSH
8851: LD_INT 32
8853: PUSH
8854: LD_INT 33
8856: PUSH
8857: LD_INT 34
8859: PUSH
8860: LD_INT 36
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 101
8901: PUSH
8902: LD_INT 102
8904: PUSH
8905: LD_INT 103
8907: PUSH
8908: LD_INT 104
8910: PUSH
8911: LD_INT 105
8913: PUSH
8914: LD_INT 106
8916: PUSH
8917: LD_INT 107
8919: PUSH
8920: LD_INT 108
8922: PUSH
8923: LD_INT 109
8925: PUSH
8926: LD_INT 110
8928: PUSH
8929: LD_INT 111
8931: PUSH
8932: LD_INT 112
8934: PUSH
8935: LD_INT 113
8937: PUSH
8938: LD_INT 114
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: ST_TO_ADDR
8961: GO 10332
8963: LD_INT 13
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9167
8971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: LD_INT 2
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 8
8994: PUSH
8995: LD_INT 9
8997: PUSH
8998: LD_INT 10
9000: PUSH
9001: LD_INT 11
9003: PUSH
9004: LD_INT 12
9006: PUSH
9007: LD_INT 14
9009: PUSH
9010: LD_INT 15
9012: PUSH
9013: LD_INT 16
9015: PUSH
9016: LD_INT 17
9018: PUSH
9019: LD_INT 18
9021: PUSH
9022: LD_INT 19
9024: PUSH
9025: LD_INT 20
9027: PUSH
9028: LD_INT 21
9030: PUSH
9031: LD_INT 22
9033: PUSH
9034: LD_INT 23
9036: PUSH
9037: LD_INT 24
9039: PUSH
9040: LD_INT 25
9042: PUSH
9043: LD_INT 26
9045: PUSH
9046: LD_INT 27
9048: PUSH
9049: LD_INT 28
9051: PUSH
9052: LD_INT 30
9054: PUSH
9055: LD_INT 31
9057: PUSH
9058: LD_INT 32
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 34
9066: PUSH
9067: LD_INT 36
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 101
9105: PUSH
9106: LD_INT 102
9108: PUSH
9109: LD_INT 103
9111: PUSH
9112: LD_INT 104
9114: PUSH
9115: LD_INT 105
9117: PUSH
9118: LD_INT 106
9120: PUSH
9121: LD_INT 107
9123: PUSH
9124: LD_INT 108
9126: PUSH
9127: LD_INT 109
9129: PUSH
9130: LD_INT 110
9132: PUSH
9133: LD_INT 111
9135: PUSH
9136: LD_INT 112
9138: PUSH
9139: LD_INT 113
9141: PUSH
9142: LD_INT 114
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: ST_TO_ADDR
9165: GO 10332
9167: LD_INT 14
9169: DOUBLE
9170: EQUAL
9171: IFTRUE 9175
9173: GO 9387
9175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9176: LD_ADDR_VAR 0 1
9180: PUSH
9181: LD_INT 1
9183: PUSH
9184: LD_INT 2
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: LD_INT 4
9192: PUSH
9193: LD_INT 5
9195: PUSH
9196: LD_INT 6
9198: PUSH
9199: LD_INT 7
9201: PUSH
9202: LD_INT 8
9204: PUSH
9205: LD_INT 9
9207: PUSH
9208: LD_INT 10
9210: PUSH
9211: LD_INT 11
9213: PUSH
9214: LD_INT 12
9216: PUSH
9217: LD_INT 13
9219: PUSH
9220: LD_INT 14
9222: PUSH
9223: LD_INT 15
9225: PUSH
9226: LD_INT 16
9228: PUSH
9229: LD_INT 17
9231: PUSH
9232: LD_INT 18
9234: PUSH
9235: LD_INT 19
9237: PUSH
9238: LD_INT 20
9240: PUSH
9241: LD_INT 21
9243: PUSH
9244: LD_INT 22
9246: PUSH
9247: LD_INT 23
9249: PUSH
9250: LD_INT 24
9252: PUSH
9253: LD_INT 25
9255: PUSH
9256: LD_INT 26
9258: PUSH
9259: LD_INT 27
9261: PUSH
9262: LD_INT 28
9264: PUSH
9265: LD_INT 29
9267: PUSH
9268: LD_INT 30
9270: PUSH
9271: LD_INT 31
9273: PUSH
9274: LD_INT 32
9276: PUSH
9277: LD_INT 33
9279: PUSH
9280: LD_INT 34
9282: PUSH
9283: LD_INT 36
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 101
9325: PUSH
9326: LD_INT 102
9328: PUSH
9329: LD_INT 103
9331: PUSH
9332: LD_INT 104
9334: PUSH
9335: LD_INT 105
9337: PUSH
9338: LD_INT 106
9340: PUSH
9341: LD_INT 107
9343: PUSH
9344: LD_INT 108
9346: PUSH
9347: LD_INT 109
9349: PUSH
9350: LD_INT 110
9352: PUSH
9353: LD_INT 111
9355: PUSH
9356: LD_INT 112
9358: PUSH
9359: LD_INT 113
9361: PUSH
9362: LD_INT 114
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: ST_TO_ADDR
9385: GO 10332
9387: LD_INT 15
9389: DOUBLE
9390: EQUAL
9391: IFTRUE 9395
9393: GO 9607
9395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9396: LD_ADDR_VAR 0 1
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: LD_INT 4
9412: PUSH
9413: LD_INT 5
9415: PUSH
9416: LD_INT 6
9418: PUSH
9419: LD_INT 7
9421: PUSH
9422: LD_INT 8
9424: PUSH
9425: LD_INT 9
9427: PUSH
9428: LD_INT 10
9430: PUSH
9431: LD_INT 11
9433: PUSH
9434: LD_INT 12
9436: PUSH
9437: LD_INT 13
9439: PUSH
9440: LD_INT 14
9442: PUSH
9443: LD_INT 15
9445: PUSH
9446: LD_INT 16
9448: PUSH
9449: LD_INT 17
9451: PUSH
9452: LD_INT 18
9454: PUSH
9455: LD_INT 19
9457: PUSH
9458: LD_INT 20
9460: PUSH
9461: LD_INT 21
9463: PUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 23
9469: PUSH
9470: LD_INT 24
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 26
9478: PUSH
9479: LD_INT 27
9481: PUSH
9482: LD_INT 28
9484: PUSH
9485: LD_INT 29
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 33
9499: PUSH
9500: LD_INT 34
9502: PUSH
9503: LD_INT 36
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 101
9545: PUSH
9546: LD_INT 102
9548: PUSH
9549: LD_INT 103
9551: PUSH
9552: LD_INT 104
9554: PUSH
9555: LD_INT 105
9557: PUSH
9558: LD_INT 106
9560: PUSH
9561: LD_INT 107
9563: PUSH
9564: LD_INT 108
9566: PUSH
9567: LD_INT 109
9569: PUSH
9570: LD_INT 110
9572: PUSH
9573: LD_INT 111
9575: PUSH
9576: LD_INT 112
9578: PUSH
9579: LD_INT 113
9581: PUSH
9582: LD_INT 114
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: ST_TO_ADDR
9605: GO 10332
9607: LD_INT 16
9609: DOUBLE
9610: EQUAL
9611: IFTRUE 9615
9613: GO 9739
9615: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9616: LD_ADDR_VAR 0 1
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: LD_INT 4
9626: PUSH
9627: LD_INT 5
9629: PUSH
9630: LD_INT 7
9632: PUSH
9633: LD_INT 11
9635: PUSH
9636: LD_INT 12
9638: PUSH
9639: LD_INT 15
9641: PUSH
9642: LD_INT 16
9644: PUSH
9645: LD_INT 20
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 23
9656: PUSH
9657: LD_INT 25
9659: PUSH
9660: LD_INT 26
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 31
9668: PUSH
9669: LD_INT 32
9671: PUSH
9672: LD_INT 33
9674: PUSH
9675: LD_INT 34
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 101
9701: PUSH
9702: LD_INT 102
9704: PUSH
9705: LD_INT 103
9707: PUSH
9708: LD_INT 106
9710: PUSH
9711: LD_INT 108
9713: PUSH
9714: LD_INT 112
9716: PUSH
9717: LD_INT 113
9719: PUSH
9720: LD_INT 114
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: ST_TO_ADDR
9737: GO 10332
9739: LD_INT 17
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9747
9745: GO 9959
9747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9748: LD_ADDR_VAR 0 1
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: LD_INT 4
9764: PUSH
9765: LD_INT 5
9767: PUSH
9768: LD_INT 6
9770: PUSH
9771: LD_INT 7
9773: PUSH
9774: LD_INT 8
9776: PUSH
9777: LD_INT 9
9779: PUSH
9780: LD_INT 10
9782: PUSH
9783: LD_INT 11
9785: PUSH
9786: LD_INT 12
9788: PUSH
9789: LD_INT 13
9791: PUSH
9792: LD_INT 14
9794: PUSH
9795: LD_INT 15
9797: PUSH
9798: LD_INT 16
9800: PUSH
9801: LD_INT 17
9803: PUSH
9804: LD_INT 18
9806: PUSH
9807: LD_INT 19
9809: PUSH
9810: LD_INT 20
9812: PUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: LD_INT 23
9821: PUSH
9822: LD_INT 24
9824: PUSH
9825: LD_INT 25
9827: PUSH
9828: LD_INT 26
9830: PUSH
9831: LD_INT 27
9833: PUSH
9834: LD_INT 28
9836: PUSH
9837: LD_INT 29
9839: PUSH
9840: LD_INT 30
9842: PUSH
9843: LD_INT 31
9845: PUSH
9846: LD_INT 32
9848: PUSH
9849: LD_INT 33
9851: PUSH
9852: LD_INT 34
9854: PUSH
9855: LD_INT 36
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 101
9897: PUSH
9898: LD_INT 102
9900: PUSH
9901: LD_INT 103
9903: PUSH
9904: LD_INT 104
9906: PUSH
9907: LD_INT 105
9909: PUSH
9910: LD_INT 106
9912: PUSH
9913: LD_INT 107
9915: PUSH
9916: LD_INT 108
9918: PUSH
9919: LD_INT 109
9921: PUSH
9922: LD_INT 110
9924: PUSH
9925: LD_INT 111
9927: PUSH
9928: LD_INT 112
9930: PUSH
9931: LD_INT 113
9933: PUSH
9934: LD_INT 114
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: ST_TO_ADDR
9957: GO 10332
9959: LD_INT 18
9961: DOUBLE
9962: EQUAL
9963: IFTRUE 9967
9965: GO 10103
9967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9968: LD_ADDR_VAR 0 1
9972: PUSH
9973: LD_INT 2
9975: PUSH
9976: LD_INT 4
9978: PUSH
9979: LD_INT 5
9981: PUSH
9982: LD_INT 7
9984: PUSH
9985: LD_INT 11
9987: PUSH
9988: LD_INT 12
9990: PUSH
9991: LD_INT 15
9993: PUSH
9994: LD_INT 16
9996: PUSH
9997: LD_INT 20
9999: PUSH
10000: LD_INT 21
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_INT 23
10008: PUSH
10009: LD_INT 25
10011: PUSH
10012: LD_INT 26
10014: PUSH
10015: LD_INT 30
10017: PUSH
10018: LD_INT 31
10020: PUSH
10021: LD_INT 32
10023: PUSH
10024: LD_INT 33
10026: PUSH
10027: LD_INT 34
10029: PUSH
10030: LD_INT 35
10032: PUSH
10033: LD_INT 36
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 101
10061: PUSH
10062: LD_INT 102
10064: PUSH
10065: LD_INT 103
10067: PUSH
10068: LD_INT 106
10070: PUSH
10071: LD_INT 108
10073: PUSH
10074: LD_INT 112
10076: PUSH
10077: LD_INT 113
10079: PUSH
10080: LD_INT 114
10082: PUSH
10083: LD_INT 115
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: ST_TO_ADDR
10101: GO 10332
10103: LD_INT 19
10105: DOUBLE
10106: EQUAL
10107: IFTRUE 10111
10109: GO 10331
10111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10112: LD_ADDR_VAR 0 1
10116: PUSH
10117: LD_INT 1
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 4
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: LD_INT 6
10134: PUSH
10135: LD_INT 7
10137: PUSH
10138: LD_INT 8
10140: PUSH
10141: LD_INT 9
10143: PUSH
10144: LD_INT 10
10146: PUSH
10147: LD_INT 11
10149: PUSH
10150: LD_INT 12
10152: PUSH
10153: LD_INT 13
10155: PUSH
10156: LD_INT 14
10158: PUSH
10159: LD_INT 15
10161: PUSH
10162: LD_INT 16
10164: PUSH
10165: LD_INT 17
10167: PUSH
10168: LD_INT 18
10170: PUSH
10171: LD_INT 19
10173: PUSH
10174: LD_INT 20
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 22
10182: PUSH
10183: LD_INT 23
10185: PUSH
10186: LD_INT 24
10188: PUSH
10189: LD_INT 25
10191: PUSH
10192: LD_INT 26
10194: PUSH
10195: LD_INT 27
10197: PUSH
10198: LD_INT 28
10200: PUSH
10201: LD_INT 29
10203: PUSH
10204: LD_INT 30
10206: PUSH
10207: LD_INT 31
10209: PUSH
10210: LD_INT 32
10212: PUSH
10213: LD_INT 33
10215: PUSH
10216: LD_INT 34
10218: PUSH
10219: LD_INT 35
10221: PUSH
10222: LD_INT 36
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 101
10265: PUSH
10266: LD_INT 102
10268: PUSH
10269: LD_INT 103
10271: PUSH
10272: LD_INT 104
10274: PUSH
10275: LD_INT 105
10277: PUSH
10278: LD_INT 106
10280: PUSH
10281: LD_INT 107
10283: PUSH
10284: LD_INT 108
10286: PUSH
10287: LD_INT 109
10289: PUSH
10290: LD_INT 110
10292: PUSH
10293: LD_INT 111
10295: PUSH
10296: LD_INT 112
10298: PUSH
10299: LD_INT 113
10301: PUSH
10302: LD_INT 114
10304: PUSH
10305: LD_INT 115
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: ST_TO_ADDR
10329: GO 10332
10331: POP
// end else
10332: GO 10551
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10334: LD_ADDR_VAR 0 1
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 2
10344: PUSH
10345: LD_INT 3
10347: PUSH
10348: LD_INT 4
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: LD_INT 6
10356: PUSH
10357: LD_INT 7
10359: PUSH
10360: LD_INT 8
10362: PUSH
10363: LD_INT 9
10365: PUSH
10366: LD_INT 10
10368: PUSH
10369: LD_INT 11
10371: PUSH
10372: LD_INT 12
10374: PUSH
10375: LD_INT 13
10377: PUSH
10378: LD_INT 14
10380: PUSH
10381: LD_INT 15
10383: PUSH
10384: LD_INT 16
10386: PUSH
10387: LD_INT 17
10389: PUSH
10390: LD_INT 18
10392: PUSH
10393: LD_INT 19
10395: PUSH
10396: LD_INT 20
10398: PUSH
10399: LD_INT 21
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 23
10407: PUSH
10408: LD_INT 24
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 26
10416: PUSH
10417: LD_INT 27
10419: PUSH
10420: LD_INT 28
10422: PUSH
10423: LD_INT 29
10425: PUSH
10426: LD_INT 30
10428: PUSH
10429: LD_INT 31
10431: PUSH
10432: LD_INT 32
10434: PUSH
10435: LD_INT 33
10437: PUSH
10438: LD_INT 34
10440: PUSH
10441: LD_INT 35
10443: PUSH
10444: LD_INT 36
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 101
10487: PUSH
10488: LD_INT 102
10490: PUSH
10491: LD_INT 103
10493: PUSH
10494: LD_INT 104
10496: PUSH
10497: LD_INT 105
10499: PUSH
10500: LD_INT 106
10502: PUSH
10503: LD_INT 107
10505: PUSH
10506: LD_INT 108
10508: PUSH
10509: LD_INT 109
10511: PUSH
10512: LD_INT 110
10514: PUSH
10515: LD_INT 111
10517: PUSH
10518: LD_INT 112
10520: PUSH
10521: LD_INT 113
10523: PUSH
10524: LD_INT 114
10526: PUSH
10527: LD_INT 115
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: ST_TO_ADDR
// if result then
10551: LD_VAR 0 1
10555: IFFALSE 10844
// begin normal :=  ;
10557: LD_ADDR_VAR 0 3
10561: PUSH
10562: LD_STRING 
10564: ST_TO_ADDR
// hardcore :=  ;
10565: LD_ADDR_VAR 0 4
10569: PUSH
10570: LD_STRING 
10572: ST_TO_ADDR
// for i = 1 to normalCounter do
10573: LD_ADDR_VAR 0 5
10577: PUSH
10578: DOUBLE
10579: LD_INT 1
10581: DEC
10582: ST_TO_ADDR
10583: LD_EXP 25
10587: PUSH
10588: FOR_TO
10589: IFFALSE 10690
// begin tmp := 0 ;
10591: LD_ADDR_VAR 0 2
10595: PUSH
10596: LD_STRING 0
10598: ST_TO_ADDR
// if result [ 1 ] then
10599: LD_VAR 0 1
10603: PUSH
10604: LD_INT 1
10606: ARRAY
10607: IFFALSE 10672
// if result [ 1 ] [ 1 ] = i then
10609: LD_VAR 0 1
10613: PUSH
10614: LD_INT 1
10616: ARRAY
10617: PUSH
10618: LD_INT 1
10620: ARRAY
10621: PUSH
10622: LD_VAR 0 5
10626: EQUAL
10627: IFFALSE 10672
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10629: LD_ADDR_VAR 0 1
10633: PUSH
10634: LD_VAR 0 1
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: LD_VAR 0 1
10646: PUSH
10647: LD_INT 1
10649: ARRAY
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: CALL_OW 3
10658: PPUSH
10659: CALL_OW 1
10663: ST_TO_ADDR
// tmp := 1 ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_STRING 1
10671: ST_TO_ADDR
// end ; normal := normal & tmp ;
10672: LD_ADDR_VAR 0 3
10676: PUSH
10677: LD_VAR 0 3
10681: PUSH
10682: LD_VAR 0 2
10686: STR
10687: ST_TO_ADDR
// end ;
10688: GO 10588
10690: POP
10691: POP
// for i = 1 to hardcoreCounter do
10692: LD_ADDR_VAR 0 5
10696: PUSH
10697: DOUBLE
10698: LD_INT 1
10700: DEC
10701: ST_TO_ADDR
10702: LD_EXP 26
10706: PUSH
10707: FOR_TO
10708: IFFALSE 10813
// begin tmp := 0 ;
10710: LD_ADDR_VAR 0 2
10714: PUSH
10715: LD_STRING 0
10717: ST_TO_ADDR
// if result [ 2 ] then
10718: LD_VAR 0 1
10722: PUSH
10723: LD_INT 2
10725: ARRAY
10726: IFFALSE 10795
// if result [ 2 ] [ 1 ] = 100 + i then
10728: LD_VAR 0 1
10732: PUSH
10733: LD_INT 2
10735: ARRAY
10736: PUSH
10737: LD_INT 1
10739: ARRAY
10740: PUSH
10741: LD_INT 100
10743: PUSH
10744: LD_VAR 0 5
10748: PLUS
10749: EQUAL
10750: IFFALSE 10795
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10752: LD_ADDR_VAR 0 1
10756: PUSH
10757: LD_VAR 0 1
10761: PPUSH
10762: LD_INT 2
10764: PPUSH
10765: LD_VAR 0 1
10769: PUSH
10770: LD_INT 2
10772: ARRAY
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 3
10781: PPUSH
10782: CALL_OW 1
10786: ST_TO_ADDR
// tmp := 1 ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_STRING 1
10794: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10795: LD_ADDR_VAR 0 4
10799: PUSH
10800: LD_VAR 0 4
10804: PUSH
10805: LD_VAR 0 2
10809: STR
10810: ST_TO_ADDR
// end ;
10811: GO 10707
10813: POP
10814: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10815: LD_STRING getStreamItemsFromMission("
10817: PUSH
10818: LD_VAR 0 3
10822: STR
10823: PUSH
10824: LD_STRING ","
10826: STR
10827: PUSH
10828: LD_VAR 0 4
10832: STR
10833: PUSH
10834: LD_STRING ")
10836: STR
10837: PPUSH
10838: CALL_OW 559
// end else
10842: GO 10851
// ToLua ( getStreamItemsFromMission("","") ) ;
10844: LD_STRING getStreamItemsFromMission("","")
10846: PPUSH
10847: CALL_OW 559
// end ;
10851: LD_VAR 0 1
10855: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10856: LD_EXP 24
10860: PUSH
10861: LD_EXP 29
10865: AND
10866: IFFALSE 10990
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
10874: PPUSH
// begin enable ;
10875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10876: LD_ADDR_VAR 0 2
10880: PUSH
10881: LD_INT 22
10883: PUSH
10884: LD_OWVAR 2
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 2
10895: PUSH
10896: LD_INT 34
10898: PUSH
10899: LD_INT 7
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 34
10908: PUSH
10909: LD_INT 45
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 34
10918: PUSH
10919: LD_INT 28
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 34
10928: PUSH
10929: LD_INT 47
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PPUSH
10947: CALL_OW 69
10951: ST_TO_ADDR
// if not tmp then
10952: LD_VAR 0 2
10956: NOT
10957: IFFALSE 10961
// exit ;
10959: GO 10990
// for i in tmp do
10961: LD_ADDR_VAR 0 1
10965: PUSH
10966: LD_VAR 0 2
10970: PUSH
10971: FOR_IN
10972: IFFALSE 10988
// begin SetLives ( i , 0 ) ;
10974: LD_VAR 0 1
10978: PPUSH
10979: LD_INT 0
10981: PPUSH
10982: CALL_OW 234
// end ;
10986: GO 10971
10988: POP
10989: POP
// end ;
10990: PPOPN 2
10992: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10993: LD_EXP 24
10997: PUSH
10998: LD_EXP 30
11002: AND
11003: IFFALSE 11087
11005: GO 11007
11007: DISABLE
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
// begin enable ;
11012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11013: LD_ADDR_VAR 0 2
11017: PUSH
11018: LD_INT 22
11020: PUSH
11021: LD_OWVAR 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 32
11032: PUSH
11033: LD_INT 3
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: ST_TO_ADDR
// if not tmp then
11049: LD_VAR 0 2
11053: NOT
11054: IFFALSE 11058
// exit ;
11056: GO 11087
// for i in tmp do
11058: LD_ADDR_VAR 0 1
11062: PUSH
11063: LD_VAR 0 2
11067: PUSH
11068: FOR_IN
11069: IFFALSE 11085
// begin SetLives ( i , 0 ) ;
11071: LD_VAR 0 1
11075: PPUSH
11076: LD_INT 0
11078: PPUSH
11079: CALL_OW 234
// end ;
11083: GO 11068
11085: POP
11086: POP
// end ;
11087: PPOPN 2
11089: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11090: LD_EXP 24
11094: PUSH
11095: LD_EXP 27
11099: AND
11100: IFFALSE 11193
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
// begin enable ;
11108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_INT 22
11116: PUSH
11117: LD_OWVAR 2
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: LD_INT 5
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 9
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 8
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11191
// begin SetClass ( i , 1 ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 336
// end ;
11189: GO 11174
11191: POP
11192: POP
// end ;
11193: PPOPN 1
11195: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11196: LD_EXP 24
11200: PUSH
11201: LD_EXP 28
11205: AND
11206: PUSH
11207: LD_OWVAR 65
11211: PUSH
11212: LD_INT 7
11214: LESS
11215: AND
11216: IFFALSE 11230
11218: GO 11220
11220: DISABLE
// begin enable ;
11221: ENABLE
// game_speed := 7 ;
11222: LD_ADDR_OWVAR 65
11226: PUSH
11227: LD_INT 7
11229: ST_TO_ADDR
// end ;
11230: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11231: LD_EXP 24
11235: PUSH
11236: LD_EXP 31
11240: AND
11241: IFFALSE 11443
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
11249: PPUSH
11250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: LD_INT 81
11258: PUSH
11259: LD_OWVAR 2
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 21
11270: PUSH
11271: LD_INT 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PPUSH
11282: CALL_OW 69
11286: ST_TO_ADDR
// if not tmp then
11287: LD_VAR 0 3
11291: NOT
11292: IFFALSE 11296
// exit ;
11294: GO 11443
// if tmp > 5 then
11296: LD_VAR 0 3
11300: PUSH
11301: LD_INT 5
11303: GREATER
11304: IFFALSE 11316
// k := 5 else
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_INT 5
11313: ST_TO_ADDR
11314: GO 11326
// k := tmp ;
11316: LD_ADDR_VAR 0 2
11320: PUSH
11321: LD_VAR 0 3
11325: ST_TO_ADDR
// for i := 1 to k do
11326: LD_ADDR_VAR 0 1
11330: PUSH
11331: DOUBLE
11332: LD_INT 1
11334: DEC
11335: ST_TO_ADDR
11336: LD_VAR 0 2
11340: PUSH
11341: FOR_TO
11342: IFFALSE 11441
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11344: LD_VAR 0 3
11348: PUSH
11349: LD_VAR 0 1
11353: ARRAY
11354: PPUSH
11355: LD_VAR 0 1
11359: PUSH
11360: LD_INT 4
11362: MOD
11363: PUSH
11364: LD_INT 1
11366: PLUS
11367: PPUSH
11368: CALL_OW 259
11372: PUSH
11373: LD_INT 10
11375: LESS
11376: IFFALSE 11439
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11378: LD_VAR 0 3
11382: PUSH
11383: LD_VAR 0 1
11387: ARRAY
11388: PPUSH
11389: LD_VAR 0 1
11393: PUSH
11394: LD_INT 4
11396: MOD
11397: PUSH
11398: LD_INT 1
11400: PLUS
11401: PPUSH
11402: LD_VAR 0 3
11406: PUSH
11407: LD_VAR 0 1
11411: ARRAY
11412: PPUSH
11413: LD_VAR 0 1
11417: PUSH
11418: LD_INT 4
11420: MOD
11421: PUSH
11422: LD_INT 1
11424: PLUS
11425: PPUSH
11426: CALL_OW 259
11430: PUSH
11431: LD_INT 1
11433: PLUS
11434: PPUSH
11435: CALL_OW 237
11439: GO 11341
11441: POP
11442: POP
// end ;
11443: PPOPN 3
11445: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11446: LD_EXP 24
11450: PUSH
11451: LD_EXP 32
11455: AND
11456: IFFALSE 11476
11458: GO 11460
11460: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11461: LD_INT 4
11463: PPUSH
11464: LD_OWVAR 2
11468: PPUSH
11469: LD_INT 0
11471: PPUSH
11472: CALL_OW 324
11476: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11477: LD_EXP 24
11481: PUSH
11482: LD_EXP 61
11486: AND
11487: IFFALSE 11507
11489: GO 11491
11491: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11492: LD_INT 19
11494: PPUSH
11495: LD_OWVAR 2
11499: PPUSH
11500: LD_INT 0
11502: PPUSH
11503: CALL_OW 324
11507: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11508: LD_EXP 24
11512: PUSH
11513: LD_EXP 33
11517: AND
11518: IFFALSE 11620
11520: GO 11522
11522: DISABLE
11523: LD_INT 0
11525: PPUSH
11526: PPUSH
// begin enable ;
11527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11528: LD_ADDR_VAR 0 2
11532: PUSH
11533: LD_INT 22
11535: PUSH
11536: LD_OWVAR 2
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 34
11550: PUSH
11551: LD_INT 11
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 34
11560: PUSH
11561: LD_INT 30
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 69
11581: ST_TO_ADDR
// if not tmp then
11582: LD_VAR 0 2
11586: NOT
11587: IFFALSE 11591
// exit ;
11589: GO 11620
// for i in tmp do
11591: LD_ADDR_VAR 0 1
11595: PUSH
11596: LD_VAR 0 2
11600: PUSH
11601: FOR_IN
11602: IFFALSE 11618
// begin SetLives ( i , 0 ) ;
11604: LD_VAR 0 1
11608: PPUSH
11609: LD_INT 0
11611: PPUSH
11612: CALL_OW 234
// end ;
11616: GO 11601
11618: POP
11619: POP
// end ;
11620: PPOPN 2
11622: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11623: LD_EXP 24
11627: PUSH
11628: LD_EXP 34
11632: AND
11633: IFFALSE 11653
11635: GO 11637
11637: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11638: LD_INT 32
11640: PPUSH
11641: LD_OWVAR 2
11645: PPUSH
11646: LD_INT 0
11648: PPUSH
11649: CALL_OW 324
11653: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11654: LD_EXP 24
11658: PUSH
11659: LD_EXP 35
11663: AND
11664: IFFALSE 11845
11666: GO 11668
11668: DISABLE
11669: LD_INT 0
11671: PPUSH
11672: PPUSH
11673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11674: LD_ADDR_VAR 0 2
11678: PUSH
11679: LD_INT 22
11681: PUSH
11682: LD_OWVAR 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 33
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 69
11709: ST_TO_ADDR
// if not tmp then
11710: LD_VAR 0 2
11714: NOT
11715: IFFALSE 11719
// exit ;
11717: GO 11845
// side := 0 ;
11719: LD_ADDR_VAR 0 3
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// for i := 1 to 8 do
11727: LD_ADDR_VAR 0 1
11731: PUSH
11732: DOUBLE
11733: LD_INT 1
11735: DEC
11736: ST_TO_ADDR
11737: LD_INT 8
11739: PUSH
11740: FOR_TO
11741: IFFALSE 11789
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11743: LD_OWVAR 2
11747: PUSH
11748: LD_VAR 0 1
11752: NONEQUAL
11753: PUSH
11754: LD_OWVAR 2
11758: PPUSH
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 81
11768: PUSH
11769: LD_INT 2
11771: EQUAL
11772: AND
11773: IFFALSE 11787
// begin side := i ;
11775: LD_ADDR_VAR 0 3
11779: PUSH
11780: LD_VAR 0 1
11784: ST_TO_ADDR
// break ;
11785: GO 11789
// end ;
11787: GO 11740
11789: POP
11790: POP
// if not side then
11791: LD_VAR 0 3
11795: NOT
11796: IFFALSE 11800
// exit ;
11798: GO 11845
// for i := 1 to tmp do
11800: LD_ADDR_VAR 0 1
11804: PUSH
11805: DOUBLE
11806: LD_INT 1
11808: DEC
11809: ST_TO_ADDR
11810: LD_VAR 0 2
11814: PUSH
11815: FOR_TO
11816: IFFALSE 11843
// if Prob ( 60 ) then
11818: LD_INT 60
11820: PPUSH
11821: CALL_OW 13
11825: IFFALSE 11841
// SetSide ( i , side ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_VAR 0 3
11836: PPUSH
11837: CALL_OW 235
11841: GO 11815
11843: POP
11844: POP
// end ;
11845: PPOPN 3
11847: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11848: LD_EXP 24
11852: PUSH
11853: LD_EXP 37
11857: AND
11858: IFFALSE 11977
11860: GO 11862
11862: DISABLE
11863: LD_INT 0
11865: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11866: LD_ADDR_VAR 0 1
11870: PUSH
11871: LD_INT 22
11873: PUSH
11874: LD_OWVAR 2
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 21
11885: PUSH
11886: LD_INT 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 3
11895: PUSH
11896: LD_INT 23
11898: PUSH
11899: LD_INT 0
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: PPUSH
11915: CALL_OW 69
11919: PUSH
11920: FOR_IN
11921: IFFALSE 11975
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 257
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: LD_INT 3
11941: PUSH
11942: LD_INT 4
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: IN
11951: IFFALSE 11973
// SetClass ( un , rand ( 1 , 4 ) ) ;
11953: LD_VAR 0 1
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: LD_INT 4
11963: PPUSH
11964: CALL_OW 12
11968: PPUSH
11969: CALL_OW 336
11973: GO 11920
11975: POP
11976: POP
// end ;
11977: PPOPN 1
11979: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11980: LD_EXP 24
11984: PUSH
11985: LD_EXP 36
11989: AND
11990: IFFALSE 12069
11992: GO 11994
11994: DISABLE
11995: LD_INT 0
11997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11998: LD_ADDR_VAR 0 1
12002: PUSH
12003: LD_INT 22
12005: PUSH
12006: LD_OWVAR 2
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 21
12017: PUSH
12018: LD_INT 3
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: ST_TO_ADDR
// if not tmp then
12034: LD_VAR 0 1
12038: NOT
12039: IFFALSE 12043
// exit ;
12041: GO 12069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12043: LD_VAR 0 1
12047: PUSH
12048: LD_INT 1
12050: PPUSH
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 12
12060: ARRAY
12061: PPUSH
12062: LD_INT 100
12064: PPUSH
12065: CALL_OW 234
// end ;
12069: PPOPN 1
12071: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12072: LD_EXP 24
12076: PUSH
12077: LD_EXP 38
12081: AND
12082: IFFALSE 12180
12084: GO 12086
12086: DISABLE
12087: LD_INT 0
12089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12090: LD_ADDR_VAR 0 1
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: LD_OWVAR 2
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 21
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 69
12125: ST_TO_ADDR
// if not tmp then
12126: LD_VAR 0 1
12130: NOT
12131: IFFALSE 12135
// exit ;
12133: GO 12180
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12135: LD_VAR 0 1
12139: PUSH
12140: LD_INT 1
12142: PPUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 12
12152: ARRAY
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: LD_INT 4
12159: PPUSH
12160: CALL_OW 12
12164: PPUSH
12165: LD_INT 3000
12167: PPUSH
12168: LD_INT 9000
12170: PPUSH
12171: CALL_OW 12
12175: PPUSH
12176: CALL_OW 492
// end ;
12180: PPOPN 1
12182: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12183: LD_EXP 24
12187: PUSH
12188: LD_EXP 39
12192: AND
12193: IFFALSE 12213
12195: GO 12197
12197: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12198: LD_INT 1
12200: PPUSH
12201: LD_OWVAR 2
12205: PPUSH
12206: LD_INT 0
12208: PPUSH
12209: CALL_OW 324
12213: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12214: LD_EXP 24
12218: PUSH
12219: LD_EXP 40
12223: AND
12224: IFFALSE 12307
12226: GO 12228
12228: DISABLE
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: LD_INT 22
12240: PUSH
12241: LD_OWVAR 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 3
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: ST_TO_ADDR
// if not tmp then
12269: LD_VAR 0 2
12273: NOT
12274: IFFALSE 12278
// exit ;
12276: GO 12307
// for i in tmp do
12278: LD_ADDR_VAR 0 1
12282: PUSH
12283: LD_VAR 0 2
12287: PUSH
12288: FOR_IN
12289: IFFALSE 12305
// SetBLevel ( i , 10 ) ;
12291: LD_VAR 0 1
12295: PPUSH
12296: LD_INT 10
12298: PPUSH
12299: CALL_OW 241
12303: GO 12288
12305: POP
12306: POP
// end ;
12307: PPOPN 2
12309: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12310: LD_EXP 24
12314: PUSH
12315: LD_EXP 41
12319: AND
12320: IFFALSE 12431
12322: GO 12324
12324: DISABLE
12325: LD_INT 0
12327: PPUSH
12328: PPUSH
12329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12330: LD_ADDR_VAR 0 3
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_OWVAR 2
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 25
12349: PUSH
12350: LD_INT 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: ST_TO_ADDR
// if not tmp then
12366: LD_VAR 0 3
12370: NOT
12371: IFFALSE 12375
// exit ;
12373: GO 12431
// un := tmp [ rand ( 1 , tmp ) ] ;
12375: LD_ADDR_VAR 0 2
12379: PUSH
12380: LD_VAR 0 3
12384: PUSH
12385: LD_INT 1
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 12
12397: ARRAY
12398: ST_TO_ADDR
// if Crawls ( un ) then
12399: LD_VAR 0 2
12403: PPUSH
12404: CALL_OW 318
12408: IFFALSE 12419
// ComWalk ( un ) ;
12410: LD_VAR 0 2
12414: PPUSH
12415: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12419: LD_VAR 0 2
12423: PPUSH
12424: LD_INT 5
12426: PPUSH
12427: CALL_OW 336
// end ;
12431: PPOPN 3
12433: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12434: LD_EXP 24
12438: PUSH
12439: LD_EXP 42
12443: AND
12444: PUSH
12445: LD_OWVAR 67
12449: PUSH
12450: LD_INT 3
12452: LESS
12453: AND
12454: IFFALSE 12473
12456: GO 12458
12458: DISABLE
// Difficulty := Difficulty + 1 ;
12459: LD_ADDR_OWVAR 67
12463: PUSH
12464: LD_OWVAR 67
12468: PUSH
12469: LD_INT 1
12471: PLUS
12472: ST_TO_ADDR
12473: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12474: LD_EXP 24
12478: PUSH
12479: LD_EXP 43
12483: AND
12484: IFFALSE 12587
12486: GO 12488
12488: DISABLE
12489: LD_INT 0
12491: PPUSH
// begin for i := 1 to 5 do
12492: LD_ADDR_VAR 0 1
12496: PUSH
12497: DOUBLE
12498: LD_INT 1
12500: DEC
12501: ST_TO_ADDR
12502: LD_INT 5
12504: PUSH
12505: FOR_TO
12506: IFFALSE 12585
// begin uc_nation := nation_nature ;
12508: LD_ADDR_OWVAR 21
12512: PUSH
12513: LD_INT 0
12515: ST_TO_ADDR
// uc_side := 0 ;
12516: LD_ADDR_OWVAR 20
12520: PUSH
12521: LD_INT 0
12523: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12524: LD_ADDR_OWVAR 29
12528: PUSH
12529: LD_INT 12
12531: PUSH
12532: LD_INT 12
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: ST_TO_ADDR
// hc_agressivity := 20 ;
12539: LD_ADDR_OWVAR 35
12543: PUSH
12544: LD_INT 20
12546: ST_TO_ADDR
// hc_class := class_tiger ;
12547: LD_ADDR_OWVAR 28
12551: PUSH
12552: LD_INT 14
12554: ST_TO_ADDR
// hc_gallery :=  ;
12555: LD_ADDR_OWVAR 33
12559: PUSH
12560: LD_STRING 
12562: ST_TO_ADDR
// hc_name :=  ;
12563: LD_ADDR_OWVAR 26
12567: PUSH
12568: LD_STRING 
12570: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12571: CALL_OW 44
12575: PPUSH
12576: LD_INT 0
12578: PPUSH
12579: CALL_OW 51
// end ;
12583: GO 12505
12585: POP
12586: POP
// end ;
12587: PPOPN 1
12589: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12590: LD_EXP 24
12594: PUSH
12595: LD_EXP 44
12599: AND
12600: IFFALSE 12609
12602: GO 12604
12604: DISABLE
// StreamSibBomb ;
12605: CALL 12610 0 0
12609: END
// export function StreamSibBomb ; var i , x , y ; begin
12610: LD_INT 0
12612: PPUSH
12613: PPUSH
12614: PPUSH
12615: PPUSH
// result := false ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// for i := 1 to 16 do
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: DOUBLE
12630: LD_INT 1
12632: DEC
12633: ST_TO_ADDR
12634: LD_INT 16
12636: PUSH
12637: FOR_TO
12638: IFFALSE 12837
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12640: LD_ADDR_VAR 0 3
12644: PUSH
12645: LD_INT 10
12647: PUSH
12648: LD_INT 20
12650: PUSH
12651: LD_INT 30
12653: PUSH
12654: LD_INT 40
12656: PUSH
12657: LD_INT 50
12659: PUSH
12660: LD_INT 60
12662: PUSH
12663: LD_INT 70
12665: PUSH
12666: LD_INT 80
12668: PUSH
12669: LD_INT 90
12671: PUSH
12672: LD_INT 100
12674: PUSH
12675: LD_INT 110
12677: PUSH
12678: LD_INT 120
12680: PUSH
12681: LD_INT 130
12683: PUSH
12684: LD_INT 140
12686: PUSH
12687: LD_INT 150
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 1
12709: PPUSH
12710: LD_INT 15
12712: PPUSH
12713: CALL_OW 12
12717: ARRAY
12718: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12719: LD_ADDR_VAR 0 4
12723: PUSH
12724: LD_INT 10
12726: PUSH
12727: LD_INT 20
12729: PUSH
12730: LD_INT 30
12732: PUSH
12733: LD_INT 40
12735: PUSH
12736: LD_INT 50
12738: PUSH
12739: LD_INT 60
12741: PUSH
12742: LD_INT 70
12744: PUSH
12745: LD_INT 80
12747: PUSH
12748: LD_INT 90
12750: PUSH
12751: LD_INT 100
12753: PUSH
12754: LD_INT 110
12756: PUSH
12757: LD_INT 120
12759: PUSH
12760: LD_INT 130
12762: PUSH
12763: LD_INT 140
12765: PUSH
12766: LD_INT 150
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: LD_INT 15
12791: PPUSH
12792: CALL_OW 12
12796: ARRAY
12797: ST_TO_ADDR
// if ValidHex ( x , y ) then
12798: LD_VAR 0 3
12802: PPUSH
12803: LD_VAR 0 4
12807: PPUSH
12808: CALL_OW 488
12812: IFFALSE 12835
// begin result := [ x , y ] ;
12814: LD_ADDR_VAR 0 1
12818: PUSH
12819: LD_VAR 0 3
12823: PUSH
12824: LD_VAR 0 4
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: ST_TO_ADDR
// break ;
12833: GO 12837
// end ; end ;
12835: GO 12637
12837: POP
12838: POP
// if result then
12839: LD_VAR 0 1
12843: IFFALSE 12903
// begin ToLua ( playSibBomb() ) ;
12845: LD_STRING playSibBomb()
12847: PPUSH
12848: CALL_OW 559
// wait ( 0 0$14 ) ;
12852: LD_INT 490
12854: PPUSH
12855: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12859: LD_VAR 0 1
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: PPUSH
12868: LD_VAR 0 1
12872: PUSH
12873: LD_INT 2
12875: ARRAY
12876: PPUSH
12877: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12881: LD_VAR 0 1
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 2
12897: ARRAY
12898: PPUSH
12899: CALL_OW 429
// end ; end ;
12903: LD_VAR 0 1
12907: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12908: LD_EXP 24
12912: PUSH
12913: LD_EXP 46
12917: AND
12918: IFFALSE 12930
12920: GO 12922
12922: DISABLE
// YouLost (  ) ;
12923: LD_STRING 
12925: PPUSH
12926: CALL_OW 104
12930: END
// every 0 0$1 trigger StreamModeActive and sFog do
12931: LD_EXP 24
12935: PUSH
12936: LD_EXP 45
12940: AND
12941: IFFALSE 12955
12943: GO 12945
12945: DISABLE
// FogOff ( your_side ) ;
12946: LD_OWVAR 2
12950: PPUSH
12951: CALL_OW 344
12955: END
// every 0 0$1 trigger StreamModeActive and sSun do
12956: LD_EXP 24
12960: PUSH
12961: LD_EXP 47
12965: AND
12966: IFFALSE 12994
12968: GO 12970
12970: DISABLE
// begin solar_recharge_percent := 0 ;
12971: LD_ADDR_OWVAR 79
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12979: LD_INT 10500
12981: PPUSH
12982: CALL_OW 67
// solar_recharge_percent := 100 ;
12986: LD_ADDR_OWVAR 79
12990: PUSH
12991: LD_INT 100
12993: ST_TO_ADDR
// end ;
12994: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12995: LD_EXP 24
12999: PUSH
13000: LD_EXP 48
13004: AND
13005: IFFALSE 13244
13007: GO 13009
13009: DISABLE
13010: LD_INT 0
13012: PPUSH
13013: PPUSH
13014: PPUSH
// begin tmp := [ ] ;
13015: LD_ADDR_VAR 0 3
13019: PUSH
13020: EMPTY
13021: ST_TO_ADDR
// for i := 1 to 6 do
13022: LD_ADDR_VAR 0 1
13026: PUSH
13027: DOUBLE
13028: LD_INT 1
13030: DEC
13031: ST_TO_ADDR
13032: LD_INT 6
13034: PUSH
13035: FOR_TO
13036: IFFALSE 13141
// begin uc_nation := nation_nature ;
13038: LD_ADDR_OWVAR 21
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// uc_side := 0 ;
13046: LD_ADDR_OWVAR 20
13050: PUSH
13051: LD_INT 0
13053: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13054: LD_ADDR_OWVAR 29
13058: PUSH
13059: LD_INT 12
13061: PUSH
13062: LD_INT 12
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: ST_TO_ADDR
// hc_agressivity := 20 ;
13069: LD_ADDR_OWVAR 35
13073: PUSH
13074: LD_INT 20
13076: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13077: LD_ADDR_OWVAR 28
13081: PUSH
13082: LD_INT 17
13084: ST_TO_ADDR
// hc_gallery :=  ;
13085: LD_ADDR_OWVAR 33
13089: PUSH
13090: LD_STRING 
13092: ST_TO_ADDR
// hc_name :=  ;
13093: LD_ADDR_OWVAR 26
13097: PUSH
13098: LD_STRING 
13100: ST_TO_ADDR
// un := CreateHuman ;
13101: LD_ADDR_VAR 0 2
13105: PUSH
13106: CALL_OW 44
13110: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13111: LD_VAR 0 2
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: CALL_OW 51
// tmp := tmp ^ un ;
13123: LD_ADDR_VAR 0 3
13127: PUSH
13128: LD_VAR 0 3
13132: PUSH
13133: LD_VAR 0 2
13137: ADD
13138: ST_TO_ADDR
// end ;
13139: GO 13035
13141: POP
13142: POP
// repeat wait ( 0 0$1 ) ;
13143: LD_INT 35
13145: PPUSH
13146: CALL_OW 67
// for un in tmp do
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_VAR 0 3
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13235
// begin if IsDead ( un ) then
13163: LD_VAR 0 2
13167: PPUSH
13168: CALL_OW 301
13172: IFFALSE 13192
// begin tmp := tmp diff un ;
13174: LD_ADDR_VAR 0 3
13178: PUSH
13179: LD_VAR 0 3
13183: PUSH
13184: LD_VAR 0 2
13188: DIFF
13189: ST_TO_ADDR
// continue ;
13190: GO 13160
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13192: LD_VAR 0 2
13196: PPUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 0
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PPUSH
13214: CALL_OW 69
13218: PPUSH
13219: LD_VAR 0 2
13223: PPUSH
13224: CALL_OW 74
13228: PPUSH
13229: CALL_OW 115
// end ;
13233: GO 13160
13235: POP
13236: POP
// until not tmp ;
13237: LD_VAR 0 3
13241: NOT
13242: IFFALSE 13143
// end ;
13244: PPOPN 3
13246: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13247: LD_EXP 24
13251: PUSH
13252: LD_EXP 49
13256: AND
13257: IFFALSE 13311
13259: GO 13261
13261: DISABLE
// begin ToLua ( displayTroll(); ) ;
13262: LD_STRING displayTroll();
13264: PPUSH
13265: CALL_OW 559
// wait ( 3 3$00 ) ;
13269: LD_INT 6300
13271: PPUSH
13272: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13276: LD_STRING hideTroll();
13278: PPUSH
13279: CALL_OW 559
// wait ( 1 1$00 ) ;
13283: LD_INT 2100
13285: PPUSH
13286: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13290: LD_STRING displayTroll();
13292: PPUSH
13293: CALL_OW 559
// wait ( 1 1$00 ) ;
13297: LD_INT 2100
13299: PPUSH
13300: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13304: LD_STRING hideTroll();
13306: PPUSH
13307: CALL_OW 559
// end ;
13311: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13312: LD_EXP 24
13316: PUSH
13317: LD_EXP 50
13321: AND
13322: IFFALSE 13385
13324: GO 13326
13326: DISABLE
13327: LD_INT 0
13329: PPUSH
// begin p := 0 ;
13330: LD_ADDR_VAR 0 1
13334: PUSH
13335: LD_INT 0
13337: ST_TO_ADDR
// repeat game_speed := 1 ;
13338: LD_ADDR_OWVAR 65
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13346: LD_INT 35
13348: PPUSH
13349: CALL_OW 67
// p := p + 1 ;
13353: LD_ADDR_VAR 0 1
13357: PUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_INT 1
13365: PLUS
13366: ST_TO_ADDR
// until p >= 60 ;
13367: LD_VAR 0 1
13371: PUSH
13372: LD_INT 60
13374: GREATEREQUAL
13375: IFFALSE 13338
// game_speed := 4 ;
13377: LD_ADDR_OWVAR 65
13381: PUSH
13382: LD_INT 4
13384: ST_TO_ADDR
// end ;
13385: PPOPN 1
13387: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13388: LD_EXP 24
13392: PUSH
13393: LD_EXP 51
13397: AND
13398: IFFALSE 13544
13400: GO 13402
13402: DISABLE
13403: LD_INT 0
13405: PPUSH
13406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13407: LD_ADDR_VAR 0 1
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_OWVAR 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 2
13426: PUSH
13427: LD_INT 30
13429: PUSH
13430: LD_INT 0
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 30
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 69
13460: ST_TO_ADDR
// if not depot then
13461: LD_VAR 0 1
13465: NOT
13466: IFFALSE 13470
// exit ;
13468: GO 13544
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_VAR 0 1
13479: PUSH
13480: LD_INT 1
13482: PPUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 12
13492: ARRAY
13493: PPUSH
13494: CALL_OW 274
13498: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13499: LD_VAR 0 2
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: LD_INT 0
13509: PPUSH
13510: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13514: LD_VAR 0 2
13518: PPUSH
13519: LD_INT 2
13521: PPUSH
13522: LD_INT 0
13524: PPUSH
13525: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13529: LD_VAR 0 2
13533: PPUSH
13534: LD_INT 3
13536: PPUSH
13537: LD_INT 0
13539: PPUSH
13540: CALL_OW 277
// end ;
13544: PPOPN 2
13546: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13547: LD_EXP 24
13551: PUSH
13552: LD_EXP 52
13556: AND
13557: IFFALSE 13654
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_OWVAR 2
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 3
13594: PUSH
13595: LD_INT 23
13597: PUSH
13598: LD_INT 0
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: ST_TO_ADDR
// if not tmp then
13619: LD_VAR 0 1
13623: NOT
13624: IFFALSE 13628
// exit ;
13626: GO 13654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13628: LD_VAR 0 1
13632: PUSH
13633: LD_INT 1
13635: PPUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 12
13645: ARRAY
13646: PPUSH
13647: LD_INT 200
13649: PPUSH
13650: CALL_OW 234
// end ;
13654: PPOPN 1
13656: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13657: LD_EXP 24
13661: PUSH
13662: LD_EXP 53
13666: AND
13667: IFFALSE 13746
13669: GO 13671
13671: DISABLE
13672: LD_INT 0
13674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13675: LD_ADDR_VAR 0 1
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_OWVAR 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: ST_TO_ADDR
// if not tmp then
13711: LD_VAR 0 1
13715: NOT
13716: IFFALSE 13720
// exit ;
13718: GO 13746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 1
13727: PPUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 12
13737: ARRAY
13738: PPUSH
13739: LD_INT 60
13741: PPUSH
13742: CALL_OW 234
// end ;
13746: PPOPN 1
13748: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13749: LD_EXP 24
13753: PUSH
13754: LD_EXP 54
13758: AND
13759: IFFALSE 13858
13761: GO 13763
13763: DISABLE
13764: LD_INT 0
13766: PPUSH
13767: PPUSH
// begin enable ;
13768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13769: LD_ADDR_VAR 0 1
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_OWVAR 2
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 61
13788: PUSH
13789: EMPTY
13790: LIST
13791: PUSH
13792: LD_INT 33
13794: PUSH
13795: LD_INT 2
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: ST_TO_ADDR
// if not tmp then
13812: LD_VAR 0 1
13816: NOT
13817: IFFALSE 13821
// exit ;
13819: GO 13858
// for i in tmp do
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: LD_VAR 0 1
13830: PUSH
13831: FOR_IN
13832: IFFALSE 13856
// if IsControledBy ( i ) then
13834: LD_VAR 0 2
13838: PPUSH
13839: CALL_OW 312
13843: IFFALSE 13854
// ComUnlink ( i ) ;
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 136
13854: GO 13831
13856: POP
13857: POP
// end ;
13858: PPOPN 2
13860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13861: LD_EXP 24
13865: PUSH
13866: LD_EXP 55
13870: AND
13871: IFFALSE 14011
13873: GO 13875
13875: DISABLE
13876: LD_INT 0
13878: PPUSH
13879: PPUSH
// begin ToLua ( displayPowell(); ) ;
13880: LD_STRING displayPowell();
13882: PPUSH
13883: CALL_OW 559
// uc_side := 0 ;
13887: LD_ADDR_OWVAR 20
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// uc_nation := 2 ;
13895: LD_ADDR_OWVAR 21
13899: PUSH
13900: LD_INT 2
13902: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13903: LD_ADDR_OWVAR 37
13907: PUSH
13908: LD_INT 14
13910: ST_TO_ADDR
// vc_engine := engine_siberite ;
13911: LD_ADDR_OWVAR 39
13915: PUSH
13916: LD_INT 3
13918: ST_TO_ADDR
// vc_control := control_apeman ;
13919: LD_ADDR_OWVAR 38
13923: PUSH
13924: LD_INT 5
13926: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13927: LD_ADDR_OWVAR 40
13931: PUSH
13932: LD_INT 29
13934: ST_TO_ADDR
// un := CreateVehicle ;
13935: LD_ADDR_VAR 0 2
13939: PUSH
13940: CALL_OW 45
13944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13945: LD_VAR 0 2
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13957: LD_INT 35
13959: PPUSH
13960: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13964: LD_VAR 0 2
13968: PPUSH
13969: LD_INT 22
13971: PUSH
13972: LD_OWVAR 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PPUSH
13981: CALL_OW 69
13985: PPUSH
13986: LD_VAR 0 2
13990: PPUSH
13991: CALL_OW 74
13995: PPUSH
13996: CALL_OW 115
// until IsDead ( un ) ;
14000: LD_VAR 0 2
14004: PPUSH
14005: CALL_OW 301
14009: IFFALSE 13957
// end ;
14011: PPOPN 2
14013: END
// every 0 0$1 trigger StreamModeActive and sStu do
14014: LD_EXP 24
14018: PUSH
14019: LD_EXP 63
14023: AND
14024: IFFALSE 14040
14026: GO 14028
14028: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14029: LD_STRING displayStucuk();
14031: PPUSH
14032: CALL_OW 559
// ResetFog ;
14036: CALL_OW 335
// end ;
14040: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14041: LD_EXP 24
14045: PUSH
14046: LD_EXP 56
14050: AND
14051: IFFALSE 14192
14053: GO 14055
14055: DISABLE
14056: LD_INT 0
14058: PPUSH
14059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14060: LD_ADDR_VAR 0 2
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_OWVAR 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 21
14079: PUSH
14080: LD_INT 1
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: ST_TO_ADDR
// if not tmp then
14096: LD_VAR 0 2
14100: NOT
14101: IFFALSE 14105
// exit ;
14103: GO 14192
// un := tmp [ rand ( 1 , tmp ) ] ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: LD_VAR 0 2
14114: PUSH
14115: LD_INT 1
14117: PPUSH
14118: LD_VAR 0 2
14122: PPUSH
14123: CALL_OW 12
14127: ARRAY
14128: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14129: LD_VAR 0 1
14133: PPUSH
14134: LD_INT 0
14136: PPUSH
14137: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_OWVAR 3
14150: PUSH
14151: LD_VAR 0 1
14155: DIFF
14156: PPUSH
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 74
14166: PPUSH
14167: CALL_OW 115
// wait ( 0 0$20 ) ;
14171: LD_INT 700
14173: PPUSH
14174: CALL_OW 67
// SetSide ( un , your_side ) ;
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_OWVAR 2
14187: PPUSH
14188: CALL_OW 235
// end ;
14192: PPOPN 2
14194: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14195: LD_EXP 24
14199: PUSH
14200: LD_EXP 57
14204: AND
14205: IFFALSE 14311
14207: GO 14209
14209: DISABLE
14210: LD_INT 0
14212: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14213: LD_ADDR_VAR 0 1
14217: PUSH
14218: LD_INT 22
14220: PUSH
14221: LD_OWVAR 2
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 2
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 0
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 30
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PPUSH
14262: CALL_OW 69
14266: ST_TO_ADDR
// if not depot then
14267: LD_VAR 0 1
14271: NOT
14272: IFFALSE 14276
// exit ;
14274: GO 14311
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14276: LD_VAR 0 1
14280: PUSH
14281: LD_INT 1
14283: ARRAY
14284: PPUSH
14285: CALL_OW 250
14289: PPUSH
14290: LD_VAR 0 1
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: PPUSH
14299: CALL_OW 251
14303: PPUSH
14304: LD_INT 70
14306: PPUSH
14307: CALL_OW 495
// end ;
14311: PPOPN 1
14313: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14314: LD_EXP 24
14318: PUSH
14319: LD_EXP 58
14323: AND
14324: IFFALSE 14535
14326: GO 14328
14328: DISABLE
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14336: LD_ADDR_VAR 0 5
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_OWVAR 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: ST_TO_ADDR
// if not tmp then
14372: LD_VAR 0 5
14376: NOT
14377: IFFALSE 14381
// exit ;
14379: GO 14535
// for i in tmp do
14381: LD_ADDR_VAR 0 1
14385: PUSH
14386: LD_VAR 0 5
14390: PUSH
14391: FOR_IN
14392: IFFALSE 14533
// begin d := rand ( 0 , 5 ) ;
14394: LD_ADDR_VAR 0 4
14398: PUSH
14399: LD_INT 0
14401: PPUSH
14402: LD_INT 5
14404: PPUSH
14405: CALL_OW 12
14409: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 250
14424: PPUSH
14425: LD_VAR 0 4
14429: PPUSH
14430: LD_INT 3
14432: PPUSH
14433: LD_INT 12
14435: PPUSH
14436: CALL_OW 12
14440: PPUSH
14441: CALL_OW 272
14445: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 251
14460: PPUSH
14461: LD_VAR 0 4
14465: PPUSH
14466: LD_INT 3
14468: PPUSH
14469: LD_INT 12
14471: PPUSH
14472: CALL_OW 12
14476: PPUSH
14477: CALL_OW 273
14481: ST_TO_ADDR
// if ValidHex ( x , y ) then
14482: LD_VAR 0 2
14486: PPUSH
14487: LD_VAR 0 3
14491: PPUSH
14492: CALL_OW 488
14496: IFFALSE 14531
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_VAR 0 2
14507: PPUSH
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 3
14515: PPUSH
14516: LD_INT 6
14518: PPUSH
14519: CALL_OW 12
14523: PPUSH
14524: LD_INT 1
14526: PPUSH
14527: CALL_OW 483
// end ;
14531: GO 14391
14533: POP
14534: POP
// end ;
14535: PPOPN 5
14537: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14538: LD_EXP 24
14542: PUSH
14543: LD_EXP 59
14547: AND
14548: IFFALSE 14642
14550: GO 14552
14552: DISABLE
14553: LD_INT 0
14555: PPUSH
14556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14557: LD_ADDR_VAR 0 2
14561: PUSH
14562: LD_INT 22
14564: PUSH
14565: LD_OWVAR 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 32
14576: PUSH
14577: LD_INT 1
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 21
14586: PUSH
14587: LD_INT 2
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: PPUSH
14599: CALL_OW 69
14603: ST_TO_ADDR
// if not tmp then
14604: LD_VAR 0 2
14608: NOT
14609: IFFALSE 14613
// exit ;
14611: GO 14642
// for i in tmp do
14613: LD_ADDR_VAR 0 1
14617: PUSH
14618: LD_VAR 0 2
14622: PUSH
14623: FOR_IN
14624: IFFALSE 14640
// SetFuel ( i , 0 ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 0
14633: PPUSH
14634: CALL_OW 240
14638: GO 14623
14640: POP
14641: POP
// end ;
14642: PPOPN 2
14644: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14645: LD_EXP 24
14649: PUSH
14650: LD_EXP 60
14654: AND
14655: IFFALSE 14721
14657: GO 14659
14659: DISABLE
14660: LD_INT 0
14662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_OWVAR 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 30
14682: PUSH
14683: LD_INT 29
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 1
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14721
// DestroyUnit ( tmp [ 1 ] ) ;
14708: LD_VAR 0 1
14712: PUSH
14713: LD_INT 1
14715: ARRAY
14716: PPUSH
14717: CALL_OW 65
// end ;
14721: PPOPN 1
14723: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14724: LD_EXP 24
14728: PUSH
14729: LD_EXP 62
14733: AND
14734: IFFALSE 14863
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
// begin uc_side := 0 ;
14742: LD_ADDR_OWVAR 20
14746: PUSH
14747: LD_INT 0
14749: ST_TO_ADDR
// uc_nation := nation_arabian ;
14750: LD_ADDR_OWVAR 21
14754: PUSH
14755: LD_INT 2
14757: ST_TO_ADDR
// hc_gallery :=  ;
14758: LD_ADDR_OWVAR 33
14762: PUSH
14763: LD_STRING 
14765: ST_TO_ADDR
// hc_name :=  ;
14766: LD_ADDR_OWVAR 26
14770: PUSH
14771: LD_STRING 
14773: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14774: LD_INT 1
14776: PPUSH
14777: LD_INT 11
14779: PPUSH
14780: LD_INT 10
14782: PPUSH
14783: CALL_OW 380
// un := CreateHuman ;
14787: LD_ADDR_VAR 0 1
14791: PUSH
14792: CALL_OW 44
14796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: LD_INT 1
14804: PPUSH
14805: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14809: LD_INT 35
14811: PPUSH
14812: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14816: LD_VAR 0 1
14820: PPUSH
14821: LD_INT 22
14823: PUSH
14824: LD_OWVAR 2
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: PPUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 74
14847: PPUSH
14848: CALL_OW 115
// until IsDead ( un ) ;
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 301
14861: IFFALSE 14809
// end ;
14863: PPOPN 1
14865: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14866: LD_EXP 24
14870: PUSH
14871: LD_EXP 64
14875: AND
14876: IFFALSE 14888
14878: GO 14880
14880: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14881: LD_STRING earthquake(getX(game), 0, 32)
14883: PPUSH
14884: CALL_OW 559
14888: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14889: LD_EXP 24
14893: PUSH
14894: LD_EXP 65
14898: AND
14899: IFFALSE 14990
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
// begin enable ;
14907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14908: LD_ADDR_VAR 0 1
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_OWVAR 2
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 33
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: PPUSH
14950: CALL_OW 69
14954: ST_TO_ADDR
// if not tmp then
14955: LD_VAR 0 1
14959: NOT
14960: IFFALSE 14964
// exit ;
14962: GO 14990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14964: LD_VAR 0 1
14968: PUSH
14969: LD_INT 1
14971: PPUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 12
14981: ARRAY
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 234
// end ;
14990: PPOPN 1
14992: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14993: LD_EXP 24
14997: PUSH
14998: LD_EXP 66
15002: AND
15003: IFFALSE 15144
15005: GO 15007
15007: DISABLE
15008: LD_INT 0
15010: PPUSH
15011: PPUSH
15012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_OWVAR 2
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 25
15032: PUSH
15033: LD_INT 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: ST_TO_ADDR
// if not tmp then
15049: LD_VAR 0 3
15053: NOT
15054: IFFALSE 15058
// exit ;
15056: GO 15144
// un := tmp [ rand ( 1 , tmp ) ] ;
15058: LD_ADDR_VAR 0 2
15062: PUSH
15063: LD_VAR 0 3
15067: PUSH
15068: LD_INT 1
15070: PPUSH
15071: LD_VAR 0 3
15075: PPUSH
15076: CALL_OW 12
15080: ARRAY
15081: ST_TO_ADDR
// if Crawls ( un ) then
15082: LD_VAR 0 2
15086: PPUSH
15087: CALL_OW 318
15091: IFFALSE 15102
// ComWalk ( un ) ;
15093: LD_VAR 0 2
15097: PPUSH
15098: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15102: LD_VAR 0 2
15106: PPUSH
15107: LD_INT 9
15109: PPUSH
15110: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15114: LD_INT 28
15116: PPUSH
15117: LD_OWVAR 2
15121: PPUSH
15122: LD_INT 2
15124: PPUSH
15125: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15129: LD_INT 29
15131: PPUSH
15132: LD_OWVAR 2
15136: PPUSH
15137: LD_INT 2
15139: PPUSH
15140: CALL_OW 322
// end ;
15144: PPOPN 3
15146: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15147: LD_EXP 24
15151: PUSH
15152: LD_EXP 67
15156: AND
15157: IFFALSE 15268
15159: GO 15161
15161: DISABLE
15162: LD_INT 0
15164: PPUSH
15165: PPUSH
15166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: LD_INT 22
15174: PUSH
15175: LD_OWVAR 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 25
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: ST_TO_ADDR
// if not tmp then
15203: LD_VAR 0 3
15207: NOT
15208: IFFALSE 15212
// exit ;
15210: GO 15268
// un := tmp [ rand ( 1 , tmp ) ] ;
15212: LD_ADDR_VAR 0 2
15216: PUSH
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 1
15224: PPUSH
15225: LD_VAR 0 3
15229: PPUSH
15230: CALL_OW 12
15234: ARRAY
15235: ST_TO_ADDR
// if Crawls ( un ) then
15236: LD_VAR 0 2
15240: PPUSH
15241: CALL_OW 318
15245: IFFALSE 15256
// ComWalk ( un ) ;
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15256: LD_VAR 0 2
15260: PPUSH
15261: LD_INT 8
15263: PPUSH
15264: CALL_OW 336
// end ;
15268: PPOPN 3
15270: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15271: LD_EXP 24
15275: PUSH
15276: LD_EXP 68
15280: AND
15281: IFFALSE 15425
15283: GO 15285
15285: DISABLE
15286: LD_INT 0
15288: PPUSH
15289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15290: LD_ADDR_VAR 0 2
15294: PUSH
15295: LD_INT 22
15297: PUSH
15298: LD_OWVAR 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 21
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 2
15319: PUSH
15320: LD_INT 34
15322: PUSH
15323: LD_INT 12
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 51
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 34
15342: PUSH
15343: LD_INT 32
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: ST_TO_ADDR
// if not tmp then
15366: LD_VAR 0 2
15370: NOT
15371: IFFALSE 15375
// exit ;
15373: GO 15425
// for i in tmp do
15375: LD_ADDR_VAR 0 1
15379: PUSH
15380: LD_VAR 0 2
15384: PUSH
15385: FOR_IN
15386: IFFALSE 15423
// if GetCargo ( i , mat_artifact ) = 0 then
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 4
15395: PPUSH
15396: CALL_OW 289
15400: PUSH
15401: LD_INT 0
15403: EQUAL
15404: IFFALSE 15421
// SetCargo ( i , mat_siberit , 100 ) ;
15406: LD_VAR 0 1
15410: PPUSH
15411: LD_INT 3
15413: PPUSH
15414: LD_INT 100
15416: PPUSH
15417: CALL_OW 290
15421: GO 15385
15423: POP
15424: POP
// end ;
15425: PPOPN 2
15427: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15428: LD_EXP 24
15432: PUSH
15433: LD_EXP 69
15437: AND
15438: IFFALSE 15621
15440: GO 15442
15442: DISABLE
15443: LD_INT 0
15445: PPUSH
15446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15447: LD_ADDR_VAR 0 2
15451: PUSH
15452: LD_INT 22
15454: PUSH
15455: LD_OWVAR 2
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 69
15468: ST_TO_ADDR
// if not tmp then
15469: LD_VAR 0 2
15473: NOT
15474: IFFALSE 15478
// exit ;
15476: GO 15621
// for i := 1 to 2 do
15478: LD_ADDR_VAR 0 1
15482: PUSH
15483: DOUBLE
15484: LD_INT 1
15486: DEC
15487: ST_TO_ADDR
15488: LD_INT 2
15490: PUSH
15491: FOR_TO
15492: IFFALSE 15619
// begin uc_side := your_side ;
15494: LD_ADDR_OWVAR 20
15498: PUSH
15499: LD_OWVAR 2
15503: ST_TO_ADDR
// uc_nation := nation_american ;
15504: LD_ADDR_OWVAR 21
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// vc_chassis := us_morphling ;
15512: LD_ADDR_OWVAR 37
15516: PUSH
15517: LD_INT 5
15519: ST_TO_ADDR
// vc_engine := engine_siberite ;
15520: LD_ADDR_OWVAR 39
15524: PUSH
15525: LD_INT 3
15527: ST_TO_ADDR
// vc_control := control_computer ;
15528: LD_ADDR_OWVAR 38
15532: PUSH
15533: LD_INT 3
15535: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15536: LD_ADDR_OWVAR 40
15540: PUSH
15541: LD_INT 10
15543: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15544: LD_VAR 0 2
15548: PUSH
15549: LD_INT 1
15551: ARRAY
15552: PPUSH
15553: CALL_OW 310
15557: NOT
15558: IFFALSE 15605
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15560: CALL_OW 45
15564: PPUSH
15565: LD_VAR 0 2
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: CALL_OW 250
15578: PPUSH
15579: LD_VAR 0 2
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: CALL_OW 251
15592: PPUSH
15593: LD_INT 12
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 50
15603: GO 15617
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15605: CALL_OW 45
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: CALL_OW 51
// end ;
15617: GO 15491
15619: POP
15620: POP
// end ;
15621: PPOPN 2
15623: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15624: LD_EXP 24
15628: PUSH
15629: LD_EXP 70
15633: AND
15634: IFFALSE 15856
15636: GO 15638
15638: DISABLE
15639: LD_INT 0
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15647: LD_ADDR_VAR 0 6
15651: PUSH
15652: LD_INT 22
15654: PUSH
15655: LD_OWVAR 2
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 3
15676: PUSH
15677: LD_INT 23
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: ST_TO_ADDR
// if not tmp then
15701: LD_VAR 0 6
15705: NOT
15706: IFFALSE 15710
// exit ;
15708: GO 15856
// s1 := rand ( 1 , 4 ) ;
15710: LD_ADDR_VAR 0 2
15714: PUSH
15715: LD_INT 1
15717: PPUSH
15718: LD_INT 4
15720: PPUSH
15721: CALL_OW 12
15725: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15726: LD_ADDR_VAR 0 4
15730: PUSH
15731: LD_VAR 0 6
15735: PUSH
15736: LD_INT 1
15738: ARRAY
15739: PPUSH
15740: LD_VAR 0 2
15744: PPUSH
15745: CALL_OW 259
15749: ST_TO_ADDR
// if s1 = 1 then
15750: LD_VAR 0 2
15754: PUSH
15755: LD_INT 1
15757: EQUAL
15758: IFFALSE 15778
// s2 := rand ( 2 , 4 ) else
15760: LD_ADDR_VAR 0 3
15764: PUSH
15765: LD_INT 2
15767: PPUSH
15768: LD_INT 4
15770: PPUSH
15771: CALL_OW 12
15775: ST_TO_ADDR
15776: GO 15786
// s2 := 1 ;
15778: LD_ADDR_VAR 0 3
15782: PUSH
15783: LD_INT 1
15785: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15786: LD_ADDR_VAR 0 5
15790: PUSH
15791: LD_VAR 0 6
15795: PUSH
15796: LD_INT 1
15798: ARRAY
15799: PPUSH
15800: LD_VAR 0 3
15804: PPUSH
15805: CALL_OW 259
15809: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15810: LD_VAR 0 6
15814: PUSH
15815: LD_INT 1
15817: ARRAY
15818: PPUSH
15819: LD_VAR 0 2
15823: PPUSH
15824: LD_VAR 0 5
15828: PPUSH
15829: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15833: LD_VAR 0 6
15837: PUSH
15838: LD_INT 1
15840: ARRAY
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_VAR 0 4
15851: PPUSH
15852: CALL_OW 237
// end ;
15856: PPOPN 6
15858: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15859: LD_EXP 24
15863: PUSH
15864: LD_EXP 71
15868: AND
15869: IFFALSE 15948
15871: GO 15873
15873: DISABLE
15874: LD_INT 0
15876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15877: LD_ADDR_VAR 0 1
15881: PUSH
15882: LD_INT 22
15884: PUSH
15885: LD_OWVAR 2
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 3
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: ST_TO_ADDR
// if not tmp then
15913: LD_VAR 0 1
15917: NOT
15918: IFFALSE 15922
// exit ;
15920: GO 15948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15922: LD_VAR 0 1
15926: PUSH
15927: LD_INT 1
15929: PPUSH
15930: LD_VAR 0 1
15934: PPUSH
15935: CALL_OW 12
15939: ARRAY
15940: PPUSH
15941: LD_INT 1
15943: PPUSH
15944: CALL_OW 234
// end ;
15948: PPOPN 1
15950: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15951: LD_EXP 24
15955: PUSH
15956: LD_EXP 72
15960: AND
15961: IFFALSE 16073
15963: GO 15965
15965: DISABLE
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_OWVAR 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: LD_INT 30
15992: PUSH
15993: LD_INT 27
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 30
16002: PUSH
16003: LD_INT 26
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 30
16012: PUSH
16013: LD_INT 28
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 69
16034: ST_TO_ADDR
// if not tmp then
16035: LD_VAR 0 2
16039: NOT
16040: IFFALSE 16044
// exit ;
16042: GO 16073
// for i in tmp do
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_VAR 0 2
16053: PUSH
16054: FOR_IN
16055: IFFALSE 16071
// SetLives ( i , 1 ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: LD_INT 1
16064: PPUSH
16065: CALL_OW 234
16069: GO 16054
16071: POP
16072: POP
// end ;
16073: PPOPN 2
16075: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16076: LD_EXP 24
16080: PUSH
16081: LD_EXP 73
16085: AND
16086: IFFALSE 16360
16088: GO 16090
16090: DISABLE
16091: LD_INT 0
16093: PPUSH
16094: PPUSH
16095: PPUSH
// begin i := rand ( 1 , 7 ) ;
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_INT 1
16103: PPUSH
16104: LD_INT 7
16106: PPUSH
16107: CALL_OW 12
16111: ST_TO_ADDR
// case i of 1 :
16112: LD_VAR 0 1
16116: PUSH
16117: LD_INT 1
16119: DOUBLE
16120: EQUAL
16121: IFTRUE 16125
16123: GO 16135
16125: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16126: LD_STRING earthquake(getX(game), 0, 32)
16128: PPUSH
16129: CALL_OW 559
16133: GO 16360
16135: LD_INT 2
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16157
16143: POP
// begin ToLua ( displayStucuk(); ) ;
16144: LD_STRING displayStucuk();
16146: PPUSH
16147: CALL_OW 559
// ResetFog ;
16151: CALL_OW 335
// end ; 3 :
16155: GO 16360
16157: LD_INT 3
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16269
16165: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16166: LD_ADDR_VAR 0 2
16170: PUSH
16171: LD_INT 22
16173: PUSH
16174: LD_OWVAR 2
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 25
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: ST_TO_ADDR
// if not tmp then
16202: LD_VAR 0 2
16206: NOT
16207: IFFALSE 16211
// exit ;
16209: GO 16360
// un := tmp [ rand ( 1 , tmp ) ] ;
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_VAR 0 2
16220: PUSH
16221: LD_INT 1
16223: PPUSH
16224: LD_VAR 0 2
16228: PPUSH
16229: CALL_OW 12
16233: ARRAY
16234: ST_TO_ADDR
// if Crawls ( un ) then
16235: LD_VAR 0 3
16239: PPUSH
16240: CALL_OW 318
16244: IFFALSE 16255
// ComWalk ( un ) ;
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16255: LD_VAR 0 3
16259: PPUSH
16260: LD_INT 8
16262: PPUSH
16263: CALL_OW 336
// end ; 4 :
16267: GO 16360
16269: LD_INT 4
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16338
16277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_INT 22
16285: PUSH
16286: LD_OWVAR 2
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 30
16297: PUSH
16298: LD_INT 29
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: ST_TO_ADDR
// if not tmp then
16314: LD_VAR 0 2
16318: NOT
16319: IFFALSE 16323
// exit ;
16321: GO 16360
// DestroyUnit ( tmp [ 1 ] ) ;
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PPUSH
16332: CALL_OW 65
// end ; 5 .. 7 :
16336: GO 16360
16338: LD_INT 5
16340: DOUBLE
16341: GREATEREQUAL
16342: IFFALSE 16350
16344: LD_INT 7
16346: DOUBLE
16347: LESSEQUAL
16348: IFTRUE 16352
16350: GO 16359
16352: POP
// StreamSibBomb ; end ;
16353: CALL 12610 0 0
16357: GO 16360
16359: POP
// end ;
16360: PPOPN 3
16362: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16363: LD_EXP 24
16367: PUSH
16368: LD_EXP 74
16372: AND
16373: IFFALSE 16529
16375: GO 16377
16377: DISABLE
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
16382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16383: LD_ADDR_VAR 0 2
16387: PUSH
16388: LD_INT 81
16390: PUSH
16391: LD_OWVAR 2
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: LD_INT 21
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 21
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: ST_TO_ADDR
// if not tmp then
16437: LD_VAR 0 2
16441: NOT
16442: IFFALSE 16446
// exit ;
16444: GO 16529
// p := 0 ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16454: LD_INT 35
16456: PPUSH
16457: CALL_OW 67
// p := p + 1 ;
16461: LD_ADDR_VAR 0 3
16465: PUSH
16466: LD_VAR 0 3
16470: PUSH
16471: LD_INT 1
16473: PLUS
16474: ST_TO_ADDR
// for i in tmp do
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_VAR 0 2
16484: PUSH
16485: FOR_IN
16486: IFFALSE 16517
// if GetLives ( i ) < 1000 then
16488: LD_VAR 0 1
16492: PPUSH
16493: CALL_OW 256
16497: PUSH
16498: LD_INT 1000
16500: LESS
16501: IFFALSE 16515
// SetLives ( i , 1000 ) ;
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_INT 1000
16510: PPUSH
16511: CALL_OW 234
16515: GO 16485
16517: POP
16518: POP
// until p > 20 ;
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 20
16526: GREATER
16527: IFFALSE 16454
// end ;
16529: PPOPN 3
16531: END
// every 0 0$1 trigger StreamModeActive and sTime do
16532: LD_EXP 24
16536: PUSH
16537: LD_EXP 75
16541: AND
16542: IFFALSE 16577
16544: GO 16546
16546: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16547: LD_INT 28
16549: PPUSH
16550: LD_OWVAR 2
16554: PPUSH
16555: LD_INT 2
16557: PPUSH
16558: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16562: LD_INT 30
16564: PPUSH
16565: LD_OWVAR 2
16569: PPUSH
16570: LD_INT 2
16572: PPUSH
16573: CALL_OW 322
// end ;
16577: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16578: LD_EXP 24
16582: PUSH
16583: LD_EXP 76
16587: AND
16588: IFFALSE 16709
16590: GO 16592
16592: DISABLE
16593: LD_INT 0
16595: PPUSH
16596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16597: LD_ADDR_VAR 0 2
16601: PUSH
16602: LD_INT 22
16604: PUSH
16605: LD_OWVAR 2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 3
16626: PUSH
16627: LD_INT 23
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: ST_TO_ADDR
// if not tmp then
16651: LD_VAR 0 2
16655: NOT
16656: IFFALSE 16660
// exit ;
16658: GO 16709
// for i in tmp do
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_VAR 0 2
16669: PUSH
16670: FOR_IN
16671: IFFALSE 16707
// begin if Crawls ( i ) then
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 318
16682: IFFALSE 16693
// ComWalk ( i ) ;
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 138
// SetClass ( i , 2 ) ;
16693: LD_VAR 0 1
16697: PPUSH
16698: LD_INT 2
16700: PPUSH
16701: CALL_OW 336
// end ;
16705: GO 16670
16707: POP
16708: POP
// end ;
16709: PPOPN 2
16711: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16712: LD_EXP 24
16716: PUSH
16717: LD_EXP 77
16721: AND
16722: IFFALSE 17003
16724: GO 16726
16726: DISABLE
16727: LD_INT 0
16729: PPUSH
16730: PPUSH
16731: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16732: LD_OWVAR 2
16736: PPUSH
16737: LD_INT 9
16739: PPUSH
16740: LD_INT 1
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16750: LD_INT 9
16752: PPUSH
16753: LD_OWVAR 2
16757: PPUSH
16758: CALL_OW 343
// uc_side := 9 ;
16762: LD_ADDR_OWVAR 20
16766: PUSH
16767: LD_INT 9
16769: ST_TO_ADDR
// uc_nation := 2 ;
16770: LD_ADDR_OWVAR 21
16774: PUSH
16775: LD_INT 2
16777: ST_TO_ADDR
// hc_name := Dark Warrior ;
16778: LD_ADDR_OWVAR 26
16782: PUSH
16783: LD_STRING Dark Warrior
16785: ST_TO_ADDR
// hc_gallery :=  ;
16786: LD_ADDR_OWVAR 33
16790: PUSH
16791: LD_STRING 
16793: ST_TO_ADDR
// hc_noskilllimit := true ;
16794: LD_ADDR_OWVAR 76
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16802: LD_ADDR_OWVAR 31
16806: PUSH
16807: LD_INT 30
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: LD_INT 30
16815: PUSH
16816: LD_INT 30
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: ST_TO_ADDR
// un := CreateHuman ;
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: CALL_OW 44
16834: ST_TO_ADDR
// hc_noskilllimit := false ;
16835: LD_ADDR_OWVAR 76
16839: PUSH
16840: LD_INT 0
16842: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 51
// p := 0 ;
16855: LD_ADDR_VAR 0 2
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16863: LD_INT 35
16865: PPUSH
16866: CALL_OW 67
// p := p + 1 ;
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: LD_VAR 0 2
16879: PUSH
16880: LD_INT 1
16882: PLUS
16883: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16884: LD_VAR 0 3
16888: PPUSH
16889: CALL_OW 256
16893: PUSH
16894: LD_INT 1000
16896: LESS
16897: IFFALSE 16911
// SetLives ( un , 1000 ) ;
16899: LD_VAR 0 3
16903: PPUSH
16904: LD_INT 1000
16906: PPUSH
16907: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16911: LD_VAR 0 3
16915: PPUSH
16916: LD_INT 81
16918: PUSH
16919: LD_OWVAR 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 91
16930: PUSH
16931: LD_VAR 0 3
16935: PUSH
16936: LD_INT 30
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PPUSH
16948: CALL_OW 69
16952: PPUSH
16953: LD_VAR 0 3
16957: PPUSH
16958: CALL_OW 74
16962: PPUSH
16963: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16967: LD_VAR 0 2
16971: PUSH
16972: LD_INT 60
16974: GREATER
16975: PUSH
16976: LD_VAR 0 3
16980: PPUSH
16981: CALL_OW 301
16985: OR
16986: IFFALSE 16863
// if un then
16988: LD_VAR 0 3
16992: IFFALSE 17003
// RemoveUnit ( un ) ;
16994: LD_VAR 0 3
16998: PPUSH
16999: CALL_OW 64
// end ;
17003: PPOPN 3
17005: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y ) ; begin
17006: LD_INT 0
17008: PPUSH
// case cmd of 301 :
17009: LD_VAR 0 1
17013: PUSH
17014: LD_INT 301
17016: DOUBLE
17017: EQUAL
17018: IFTRUE 17022
17020: GO 17025
17022: POP
// ; end ;
17023: GO 17026
17025: POP
// end ;
17026: LD_VAR 0 6
17030: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17031: LD_INT 0
17033: PPUSH
17034: PPUSH
17035: PPUSH
17036: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17037: LD_ADDR_VAR 0 4
17041: PUSH
17042: LD_INT 22
17044: PUSH
17045: LD_OWVAR 2
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: LD_INT 30
17059: PUSH
17060: LD_INT 0
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 30
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PPUSH
17086: CALL_OW 69
17090: ST_TO_ADDR
// if not tmp then
17091: LD_VAR 0 4
17095: NOT
17096: IFFALSE 17100
// exit ;
17098: GO 17159
// for i in tmp do
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_VAR 0 4
17109: PUSH
17110: FOR_IN
17111: IFFALSE 17157
// for j = 1 to 3 do
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: DOUBLE
17119: LD_INT 1
17121: DEC
17122: ST_TO_ADDR
17123: LD_INT 3
17125: PUSH
17126: FOR_TO
17127: IFFALSE 17153
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 274
17138: PPUSH
17139: LD_VAR 0 3
17143: PPUSH
17144: LD_INT 99999
17146: PPUSH
17147: CALL_OW 277
17151: GO 17126
17153: POP
17154: POP
17155: GO 17110
17157: POP
17158: POP
// end ;
17159: LD_VAR 0 1
17163: RET
// export function hHackSetLevel10 ; var i , j ; begin
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17169: LD_ADDR_VAR 0 2
17173: PUSH
17174: LD_INT 21
17176: PUSH
17177: LD_INT 1
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PPUSH
17184: CALL_OW 69
17188: PUSH
17189: FOR_IN
17190: IFFALSE 17242
// if IsSelected ( i ) then
17192: LD_VAR 0 2
17196: PPUSH
17197: CALL_OW 306
17201: IFFALSE 17240
// begin for j := 1 to 4 do
17203: LD_ADDR_VAR 0 3
17207: PUSH
17208: DOUBLE
17209: LD_INT 1
17211: DEC
17212: ST_TO_ADDR
17213: LD_INT 4
17215: PUSH
17216: FOR_TO
17217: IFFALSE 17238
// SetSkill ( i , j , 10 ) ;
17219: LD_VAR 0 2
17223: PPUSH
17224: LD_VAR 0 3
17228: PPUSH
17229: LD_INT 10
17231: PPUSH
17232: CALL_OW 237
17236: GO 17216
17238: POP
17239: POP
// end ;
17240: GO 17189
17242: POP
17243: POP
// end ;
17244: LD_VAR 0 1
17248: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
17253: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_INT 22
17261: PUSH
17262: LD_OWVAR 2
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 21
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 69
17289: PUSH
17290: FOR_IN
17291: IFFALSE 17332
// begin for j := 1 to 4 do
17293: LD_ADDR_VAR 0 3
17297: PUSH
17298: DOUBLE
17299: LD_INT 1
17301: DEC
17302: ST_TO_ADDR
17303: LD_INT 4
17305: PUSH
17306: FOR_TO
17307: IFFALSE 17328
// SetSkill ( i , j , 10 ) ;
17309: LD_VAR 0 2
17313: PPUSH
17314: LD_VAR 0 3
17318: PPUSH
17319: LD_INT 10
17321: PPUSH
17322: CALL_OW 237
17326: GO 17306
17328: POP
17329: POP
// end ;
17330: GO 17290
17332: POP
17333: POP
// end ;
17334: LD_VAR 0 1
17338: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
17339: LD_INT 0
17341: PPUSH
// uc_side := your_side ;
17342: LD_ADDR_OWVAR 20
17346: PUSH
17347: LD_OWVAR 2
17351: ST_TO_ADDR
// uc_nation := nation ;
17352: LD_ADDR_OWVAR 21
17356: PUSH
17357: LD_VAR 0 1
17361: ST_TO_ADDR
// InitHc ;
17362: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17366: LD_INT 0
17368: PPUSH
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17383: CALL_OW 44
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 51
// end ;
17395: LD_VAR 0 4
17399: RET
// export function hHackSpawnVehicle ; begin
17400: LD_INT 0
17402: PPUSH
// uc_side := your_side ;
17403: LD_ADDR_OWVAR 20
17407: PUSH
17408: LD_OWVAR 2
17412: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 1
17420: PPUSH
17421: LD_INT 3
17423: PPUSH
17424: CALL_OW 12
17428: ST_TO_ADDR
// InitVc ;
17429: CALL_OW 20
// case uc_nation of 1 :
17433: LD_OWVAR 21
17437: PUSH
17438: LD_INT 1
17440: DOUBLE
17441: EQUAL
17442: IFTRUE 17446
17444: GO 17590
17446: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
17447: LD_ADDR_OWVAR 37
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 4
17463: PUSH
17464: LD_INT 5
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 5
17479: PPUSH
17480: CALL_OW 12
17484: ARRAY
17485: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17486: LD_ADDR_OWVAR 39
17490: PUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 3
17496: PPUSH
17497: CALL_OW 12
17501: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
17502: LD_ADDR_OWVAR 38
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: LD_INT 2
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PPUSH
17524: LD_INT 3
17526: PPUSH
17527: CALL_OW 12
17531: ARRAY
17532: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
17533: LD_ADDR_OWVAR 40
17537: PUSH
17538: LD_INT 2
17540: PUSH
17541: LD_INT 4
17543: PUSH
17544: LD_INT 5
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 7
17552: PUSH
17553: LD_INT 8
17555: PUSH
17556: LD_INT 9
17558: PUSH
17559: LD_INT 10
17561: PUSH
17562: LD_INT 6
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 9
17581: PPUSH
17582: CALL_OW 12
17586: ARRAY
17587: ST_TO_ADDR
// end ; 2 :
17588: GO 17855
17590: LD_INT 2
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17722
17598: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
17599: LD_ADDR_OWVAR 37
17603: PUSH
17604: LD_INT 11
17606: PUSH
17607: LD_INT 12
17609: PUSH
17610: LD_INT 13
17612: PUSH
17613: LD_INT 14
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: PPUSH
17625: LD_INT 4
17627: PPUSH
17628: CALL_OW 12
17632: ARRAY
17633: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17634: LD_ADDR_OWVAR 39
17638: PUSH
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 3
17644: PPUSH
17645: CALL_OW 12
17649: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
17650: LD_ADDR_OWVAR 38
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: LD_INT 5
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: PPUSH
17672: LD_INT 3
17674: PPUSH
17675: CALL_OW 12
17679: ARRAY
17680: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
17681: LD_ADDR_OWVAR 40
17685: PUSH
17686: LD_INT 24
17688: PUSH
17689: LD_INT 26
17691: PUSH
17692: LD_INT 27
17694: PUSH
17695: LD_INT 28
17697: PUSH
17698: LD_INT 29
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 1
17710: PPUSH
17711: LD_INT 5
17713: PPUSH
17714: CALL_OW 12
17718: ARRAY
17719: ST_TO_ADDR
// end ; 3 :
17720: GO 17855
17722: LD_INT 3
17724: DOUBLE
17725: EQUAL
17726: IFTRUE 17730
17728: GO 17854
17730: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
17731: LD_ADDR_OWVAR 37
17735: PUSH
17736: LD_INT 21
17738: PUSH
17739: LD_INT 23
17741: PUSH
17742: LD_INT 22
17744: PUSH
17745: LD_INT 24
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: PPUSH
17757: LD_INT 4
17759: PPUSH
17760: CALL_OW 12
17764: ARRAY
17765: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17766: LD_ADDR_OWVAR 39
17770: PUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 3
17776: PPUSH
17777: CALL_OW 12
17781: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
17782: LD_ADDR_OWVAR 38
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: LD_INT 3
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PPUSH
17800: LD_INT 2
17802: PPUSH
17803: CALL_OW 12
17807: ARRAY
17808: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17809: LD_ADDR_OWVAR 40
17813: PUSH
17814: LD_INT 42
17816: PUSH
17817: LD_INT 43
17819: PUSH
17820: LD_INT 44
17822: PUSH
17823: LD_INT 46
17825: PUSH
17826: LD_INT 48
17828: PUSH
17829: LD_INT 47
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: PPUSH
17843: LD_INT 6
17845: PPUSH
17846: CALL_OW 12
17850: ARRAY
17851: ST_TO_ADDR
// end ; end ;
17852: GO 17855
17854: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17855: CALL_OW 45
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: CALL_OW 51
// end ;
17867: LD_VAR 0 1
17871: RET
// export hInvincible ; every 1 do
17872: GO 17874
17874: DISABLE
// hInvincible := [ ] ;
17875: LD_ADDR_EXP 78
17879: PUSH
17880: EMPTY
17881: ST_TO_ADDR
17882: END
// every 10 do var i ;
17883: GO 17885
17885: DISABLE
17886: LD_INT 0
17888: PPUSH
// begin enable ;
17889: ENABLE
// if not hInvincible then
17890: LD_EXP 78
17894: NOT
17895: IFFALSE 17899
// exit ;
17897: GO 17943
// for i in hInvincible do
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: LD_EXP 78
17908: PUSH
17909: FOR_IN
17910: IFFALSE 17941
// if GetLives ( i ) < 1000 then
17912: LD_VAR 0 1
17916: PPUSH
17917: CALL_OW 256
17921: PUSH
17922: LD_INT 1000
17924: LESS
17925: IFFALSE 17939
// SetLives ( i , 1000 ) ;
17927: LD_VAR 0 1
17931: PPUSH
17932: LD_INT 1000
17934: PPUSH
17935: CALL_OW 234
17939: GO 17909
17941: POP
17942: POP
// end ;
17943: PPOPN 1
17945: END
// export function hHackInvincible ; var i ; begin
17946: LD_INT 0
17948: PPUSH
17949: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17950: LD_ADDR_VAR 0 2
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: LD_INT 21
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 21
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: PPUSH
17983: CALL_OW 69
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18050
// if IsSelected ( i ) then
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 306
18000: IFFALSE 18048
// begin if i in hInvincible then
18002: LD_VAR 0 2
18006: PUSH
18007: LD_EXP 78
18011: IN
18012: IFFALSE 18032
// hInvincible := hInvincible diff i else
18014: LD_ADDR_EXP 78
18018: PUSH
18019: LD_EXP 78
18023: PUSH
18024: LD_VAR 0 2
18028: DIFF
18029: ST_TO_ADDR
18030: GO 18048
// hInvincible := hInvincible union i ;
18032: LD_ADDR_EXP 78
18036: PUSH
18037: LD_EXP 78
18041: PUSH
18042: LD_VAR 0 2
18046: UNION
18047: ST_TO_ADDR
// end ;
18048: GO 17988
18050: POP
18051: POP
// end ;
18052: LD_VAR 0 1
18056: RET
// export function hHackInvisible ; var i , j ; begin
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
18061: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18062: LD_ADDR_VAR 0 2
18066: PUSH
18067: LD_INT 21
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 69
18081: PUSH
18082: FOR_IN
18083: IFFALSE 18107
// if IsSelected ( i ) then
18085: LD_VAR 0 2
18089: PPUSH
18090: CALL_OW 306
18094: IFFALSE 18105
// ComForceInvisible ( i ) ;
18096: LD_VAR 0 2
18100: PPUSH
18101: CALL_OW 496
18105: GO 18082
18107: POP
18108: POP
// end ;
18109: LD_VAR 0 1
18113: RET
// export function hHackChangeYourSide ; begin
18114: LD_INT 0
18116: PPUSH
// if your_side = 8 then
18117: LD_OWVAR 2
18121: PUSH
18122: LD_INT 8
18124: EQUAL
18125: IFFALSE 18137
// your_side := 0 else
18127: LD_ADDR_OWVAR 2
18131: PUSH
18132: LD_INT 0
18134: ST_TO_ADDR
18135: GO 18151
// your_side := your_side + 1 ;
18137: LD_ADDR_OWVAR 2
18141: PUSH
18142: LD_OWVAR 2
18146: PUSH
18147: LD_INT 1
18149: PLUS
18150: ST_TO_ADDR
// end ;
18151: LD_VAR 0 1
18155: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18156: LD_INT 0
18158: PPUSH
18159: PPUSH
18160: PPUSH
// for i in all_units do
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: LD_OWVAR 3
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18250
// if IsSelected ( i ) then
18174: LD_VAR 0 2
18178: PPUSH
18179: CALL_OW 306
18183: IFFALSE 18248
// begin j := GetSide ( i ) ;
18185: LD_ADDR_VAR 0 3
18189: PUSH
18190: LD_VAR 0 2
18194: PPUSH
18195: CALL_OW 255
18199: ST_TO_ADDR
// if j = 8 then
18200: LD_VAR 0 3
18204: PUSH
18205: LD_INT 8
18207: EQUAL
18208: IFFALSE 18220
// j := 0 else
18210: LD_ADDR_VAR 0 3
18214: PUSH
18215: LD_INT 0
18217: ST_TO_ADDR
18218: GO 18234
// j := j + 1 ;
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 1
18232: PLUS
18233: ST_TO_ADDR
// SetSide ( i , j ) ;
18234: LD_VAR 0 2
18238: PPUSH
18239: LD_VAR 0 3
18243: PPUSH
18244: CALL_OW 235
// end ;
18248: GO 18171
18250: POP
18251: POP
// end ;
18252: LD_VAR 0 1
18256: RET
// export function hHackFog ; begin
18257: LD_INT 0
18259: PPUSH
// FogOff ( true ) ;
18260: LD_INT 1
18262: PPUSH
18263: CALL_OW 344
// end ;
18267: LD_VAR 0 1
18271: RET
// export function hHackApeman ; begin
18272: LD_INT 0
18274: PPUSH
// uc_side := your_side ;
18275: LD_ADDR_OWVAR 20
18279: PUSH
18280: LD_OWVAR 2
18284: ST_TO_ADDR
// uc_nation := 0 ;
18285: LD_ADDR_OWVAR 21
18289: PUSH
18290: LD_INT 0
18292: ST_TO_ADDR
// hc_name :=  ;
18293: LD_ADDR_OWVAR 26
18297: PUSH
18298: LD_STRING 
18300: ST_TO_ADDR
// hc_gallery :=  ;
18301: LD_ADDR_OWVAR 33
18305: PUSH
18306: LD_STRING 
18308: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
18309: LD_ADDR_OWVAR 31
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: ST_TO_ADDR
// hc_class := class_apeman ;
18332: LD_ADDR_OWVAR 28
18336: PUSH
18337: LD_INT 12
18339: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18340: CALL_OW 44
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 51
// end ;
18352: LD_VAR 0 1
18356: RET
// export function hHackBoom ; begin
18357: LD_INT 0
18359: PPUSH
// uc_side := your_side ;
18360: LD_ADDR_OWVAR 20
18364: PUSH
18365: LD_OWVAR 2
18369: ST_TO_ADDR
// uc_nation := 1 ;
18370: LD_ADDR_OWVAR 21
18374: PUSH
18375: LD_INT 1
18377: ST_TO_ADDR
// vc_chassis := us_morphling ;
18378: LD_ADDR_OWVAR 37
18382: PUSH
18383: LD_INT 5
18385: ST_TO_ADDR
// vc_engine := engine_siberite ;
18386: LD_ADDR_OWVAR 39
18390: PUSH
18391: LD_INT 3
18393: ST_TO_ADDR
// vc_control := control_computer ;
18394: LD_ADDR_OWVAR 38
18398: PUSH
18399: LD_INT 3
18401: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
18402: LD_ADDR_OWVAR 40
18406: PUSH
18407: LD_INT 8
18409: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18410: CALL_OW 45
18414: PPUSH
18415: LD_INT 1
18417: PPUSH
18418: CALL_OW 51
// end ; end_of_file
18422: LD_VAR 0 1
18426: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
18427: LD_INT 0
18429: PPUSH
18430: PPUSH
// if exist_mode then
18431: LD_VAR 0 2
18435: IFFALSE 18460
// unit := CreateCharacter ( prefix & ident ) else
18437: LD_ADDR_VAR 0 5
18441: PUSH
18442: LD_VAR 0 3
18446: PUSH
18447: LD_VAR 0 1
18451: STR
18452: PPUSH
18453: CALL_OW 34
18457: ST_TO_ADDR
18458: GO 18475
// unit := NewCharacter ( ident ) ;
18460: LD_ADDR_VAR 0 5
18464: PUSH
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 25
18474: ST_TO_ADDR
// result := unit ;
18475: LD_ADDR_VAR 0 4
18479: PUSH
18480: LD_VAR 0 5
18484: ST_TO_ADDR
// end ;
18485: LD_VAR 0 4
18489: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18490: LD_INT 0
18492: PPUSH
18493: PPUSH
// if not side or not nation then
18494: LD_VAR 0 1
18498: NOT
18499: PUSH
18500: LD_VAR 0 2
18504: NOT
18505: OR
18506: IFFALSE 18510
// exit ;
18508: GO 19274
// case nation of nation_american :
18510: LD_VAR 0 2
18514: PUSH
18515: LD_INT 1
18517: DOUBLE
18518: EQUAL
18519: IFTRUE 18523
18521: GO 18737
18523: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
18524: LD_ADDR_VAR 0 4
18528: PUSH
18529: LD_INT 35
18531: PUSH
18532: LD_INT 45
18534: PUSH
18535: LD_INT 46
18537: PUSH
18538: LD_INT 47
18540: PUSH
18541: LD_INT 82
18543: PUSH
18544: LD_INT 83
18546: PUSH
18547: LD_INT 84
18549: PUSH
18550: LD_INT 85
18552: PUSH
18553: LD_INT 86
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: LD_INT 6
18564: PUSH
18565: LD_INT 15
18567: PUSH
18568: LD_INT 16
18570: PUSH
18571: LD_INT 7
18573: PUSH
18574: LD_INT 12
18576: PUSH
18577: LD_INT 13
18579: PUSH
18580: LD_INT 10
18582: PUSH
18583: LD_INT 14
18585: PUSH
18586: LD_INT 20
18588: PUSH
18589: LD_INT 21
18591: PUSH
18592: LD_INT 22
18594: PUSH
18595: LD_INT 25
18597: PUSH
18598: LD_INT 32
18600: PUSH
18601: LD_INT 27
18603: PUSH
18604: LD_INT 36
18606: PUSH
18607: LD_INT 69
18609: PUSH
18610: LD_INT 39
18612: PUSH
18613: LD_INT 34
18615: PUSH
18616: LD_INT 40
18618: PUSH
18619: LD_INT 48
18621: PUSH
18622: LD_INT 49
18624: PUSH
18625: LD_INT 50
18627: PUSH
18628: LD_INT 51
18630: PUSH
18631: LD_INT 52
18633: PUSH
18634: LD_INT 53
18636: PUSH
18637: LD_INT 54
18639: PUSH
18640: LD_INT 55
18642: PUSH
18643: LD_INT 56
18645: PUSH
18646: LD_INT 57
18648: PUSH
18649: LD_INT 58
18651: PUSH
18652: LD_INT 59
18654: PUSH
18655: LD_INT 60
18657: PUSH
18658: LD_INT 61
18660: PUSH
18661: LD_INT 62
18663: PUSH
18664: LD_INT 80
18666: PUSH
18667: LD_INT 82
18669: PUSH
18670: LD_INT 83
18672: PUSH
18673: LD_INT 84
18675: PUSH
18676: LD_INT 85
18678: PUSH
18679: LD_INT 86
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
18735: GO 19198
18737: LD_INT 2
18739: DOUBLE
18740: EQUAL
18741: IFTRUE 18745
18743: GO 18967
18745: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
18746: LD_ADDR_VAR 0 4
18750: PUSH
18751: LD_INT 35
18753: PUSH
18754: LD_INT 45
18756: PUSH
18757: LD_INT 46
18759: PUSH
18760: LD_INT 47
18762: PUSH
18763: LD_INT 82
18765: PUSH
18766: LD_INT 83
18768: PUSH
18769: LD_INT 84
18771: PUSH
18772: LD_INT 85
18774: PUSH
18775: LD_INT 87
18777: PUSH
18778: LD_INT 70
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: LD_INT 11
18786: PUSH
18787: LD_INT 3
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: LD_INT 5
18795: PUSH
18796: LD_INT 6
18798: PUSH
18799: LD_INT 15
18801: PUSH
18802: LD_INT 18
18804: PUSH
18805: LD_INT 7
18807: PUSH
18808: LD_INT 17
18810: PUSH
18811: LD_INT 8
18813: PUSH
18814: LD_INT 20
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_INT 72
18825: PUSH
18826: LD_INT 26
18828: PUSH
18829: LD_INT 69
18831: PUSH
18832: LD_INT 39
18834: PUSH
18835: LD_INT 40
18837: PUSH
18838: LD_INT 41
18840: PUSH
18841: LD_INT 42
18843: PUSH
18844: LD_INT 43
18846: PUSH
18847: LD_INT 48
18849: PUSH
18850: LD_INT 49
18852: PUSH
18853: LD_INT 50
18855: PUSH
18856: LD_INT 51
18858: PUSH
18859: LD_INT 52
18861: PUSH
18862: LD_INT 53
18864: PUSH
18865: LD_INT 54
18867: PUSH
18868: LD_INT 55
18870: PUSH
18871: LD_INT 56
18873: PUSH
18874: LD_INT 60
18876: PUSH
18877: LD_INT 61
18879: PUSH
18880: LD_INT 62
18882: PUSH
18883: LD_INT 66
18885: PUSH
18886: LD_INT 67
18888: PUSH
18889: LD_INT 68
18891: PUSH
18892: LD_INT 81
18894: PUSH
18895: LD_INT 82
18897: PUSH
18898: LD_INT 83
18900: PUSH
18901: LD_INT 84
18903: PUSH
18904: LD_INT 85
18906: PUSH
18907: LD_INT 87
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: ST_TO_ADDR
18965: GO 19198
18967: LD_INT 3
18969: DOUBLE
18970: EQUAL
18971: IFTRUE 18975
18973: GO 19197
18975: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18976: LD_ADDR_VAR 0 4
18980: PUSH
18981: LD_INT 46
18983: PUSH
18984: LD_INT 47
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 82
18995: PUSH
18996: LD_INT 83
18998: PUSH
18999: LD_INT 84
19001: PUSH
19002: LD_INT 85
19004: PUSH
19005: LD_INT 86
19007: PUSH
19008: LD_INT 11
19010: PUSH
19011: LD_INT 9
19013: PUSH
19014: LD_INT 20
19016: PUSH
19017: LD_INT 19
19019: PUSH
19020: LD_INT 21
19022: PUSH
19023: LD_INT 24
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_INT 25
19031: PUSH
19032: LD_INT 28
19034: PUSH
19035: LD_INT 29
19037: PUSH
19038: LD_INT 30
19040: PUSH
19041: LD_INT 31
19043: PUSH
19044: LD_INT 37
19046: PUSH
19047: LD_INT 38
19049: PUSH
19050: LD_INT 32
19052: PUSH
19053: LD_INT 27
19055: PUSH
19056: LD_INT 33
19058: PUSH
19059: LD_INT 69
19061: PUSH
19062: LD_INT 39
19064: PUSH
19065: LD_INT 34
19067: PUSH
19068: LD_INT 40
19070: PUSH
19071: LD_INT 71
19073: PUSH
19074: LD_INT 23
19076: PUSH
19077: LD_INT 44
19079: PUSH
19080: LD_INT 48
19082: PUSH
19083: LD_INT 49
19085: PUSH
19086: LD_INT 50
19088: PUSH
19089: LD_INT 51
19091: PUSH
19092: LD_INT 52
19094: PUSH
19095: LD_INT 53
19097: PUSH
19098: LD_INT 54
19100: PUSH
19101: LD_INT 55
19103: PUSH
19104: LD_INT 56
19106: PUSH
19107: LD_INT 57
19109: PUSH
19110: LD_INT 58
19112: PUSH
19113: LD_INT 59
19115: PUSH
19116: LD_INT 63
19118: PUSH
19119: LD_INT 64
19121: PUSH
19122: LD_INT 65
19124: PUSH
19125: LD_INT 82
19127: PUSH
19128: LD_INT 83
19130: PUSH
19131: LD_INT 84
19133: PUSH
19134: LD_INT 85
19136: PUSH
19137: LD_INT 86
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: ST_TO_ADDR
19195: GO 19198
19197: POP
// if state > - 1 and state < 3 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: GREATER
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 3
19215: LESS
19216: AND
19217: IFFALSE 19274
// for i in result do
19219: LD_ADDR_VAR 0 5
19223: PUSH
19224: LD_VAR 0 4
19228: PUSH
19229: FOR_IN
19230: IFFALSE 19272
// if GetTech ( i , side ) <> state then
19232: LD_VAR 0 5
19236: PPUSH
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 321
19246: PUSH
19247: LD_VAR 0 3
19251: NONEQUAL
19252: IFFALSE 19270
// result := result diff i ;
19254: LD_ADDR_VAR 0 4
19258: PUSH
19259: LD_VAR 0 4
19263: PUSH
19264: LD_VAR 0 5
19268: DIFF
19269: ST_TO_ADDR
19270: GO 19229
19272: POP
19273: POP
// end ;
19274: LD_VAR 0 4
19278: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19279: LD_INT 0
19281: PPUSH
19282: PPUSH
19283: PPUSH
// result := true ;
19284: LD_ADDR_VAR 0 3
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
19292: LD_ADDR_VAR 0 5
19296: PUSH
19297: LD_VAR 0 2
19301: PPUSH
19302: CALL_OW 480
19306: ST_TO_ADDR
// if not tmp then
19307: LD_VAR 0 5
19311: NOT
19312: IFFALSE 19316
// exit ;
19314: GO 19365
// for i in tmp do
19316: LD_ADDR_VAR 0 4
19320: PUSH
19321: LD_VAR 0 5
19325: PUSH
19326: FOR_IN
19327: IFFALSE 19363
// if GetTech ( i , side ) <> state_researched then
19329: LD_VAR 0 4
19333: PPUSH
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL_OW 321
19343: PUSH
19344: LD_INT 2
19346: NONEQUAL
19347: IFFALSE 19361
// begin result := false ;
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 0
19356: ST_TO_ADDR
// exit ;
19357: POP
19358: POP
19359: GO 19365
// end ;
19361: GO 19326
19363: POP
19364: POP
// end ;
19365: LD_VAR 0 3
19369: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
19370: LD_INT 0
19372: PPUSH
19373: PPUSH
19374: PPUSH
19375: PPUSH
19376: PPUSH
19377: PPUSH
19378: PPUSH
19379: PPUSH
19380: PPUSH
19381: PPUSH
19382: PPUSH
19383: PPUSH
19384: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
19385: LD_VAR 0 1
19389: NOT
19390: PUSH
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 257
19400: PUSH
19401: LD_INT 9
19403: NONEQUAL
19404: OR
19405: IFFALSE 19409
// exit ;
19407: GO 19982
// side := GetSide ( unit ) ;
19409: LD_ADDR_VAR 0 9
19413: PUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 255
19423: ST_TO_ADDR
// tech_space := tech_spacanom ;
19424: LD_ADDR_VAR 0 12
19428: PUSH
19429: LD_INT 29
19431: ST_TO_ADDR
// tech_time := tech_taurad ;
19432: LD_ADDR_VAR 0 13
19436: PUSH
19437: LD_INT 28
19439: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19440: LD_ADDR_VAR 0 11
19444: PUSH
19445: LD_VAR 0 1
19449: PPUSH
19450: CALL_OW 310
19454: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19455: LD_VAR 0 11
19459: PPUSH
19460: CALL_OW 247
19464: PUSH
19465: LD_INT 2
19467: EQUAL
19468: IFFALSE 19472
// exit ;
19470: GO 19982
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19472: LD_ADDR_VAR 0 8
19476: PUSH
19477: LD_INT 81
19479: PUSH
19480: LD_VAR 0 9
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 21
19494: PUSH
19495: LD_INT 3
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PPUSH
19510: CALL_OW 69
19514: ST_TO_ADDR
// if not tmp then
19515: LD_VAR 0 8
19519: NOT
19520: IFFALSE 19524
// exit ;
19522: GO 19982
// if in_unit then
19524: LD_VAR 0 11
19528: IFFALSE 19552
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19530: LD_ADDR_VAR 0 10
19534: PUSH
19535: LD_VAR 0 8
19539: PPUSH
19540: LD_VAR 0 11
19544: PPUSH
19545: CALL_OW 74
19549: ST_TO_ADDR
19550: GO 19572
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19552: LD_ADDR_VAR 0 10
19556: PUSH
19557: LD_VAR 0 8
19561: PPUSH
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 74
19571: ST_TO_ADDR
// if not enemy then
19572: LD_VAR 0 10
19576: NOT
19577: IFFALSE 19581
// exit ;
19579: GO 19982
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19581: LD_VAR 0 11
19585: PUSH
19586: LD_VAR 0 11
19590: PPUSH
19591: LD_VAR 0 10
19595: PPUSH
19596: CALL_OW 296
19600: PUSH
19601: LD_INT 13
19603: GREATER
19604: AND
19605: PUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: LD_VAR 0 10
19615: PPUSH
19616: CALL_OW 296
19620: PUSH
19621: LD_INT 12
19623: GREATER
19624: OR
19625: IFFALSE 19629
// exit ;
19627: GO 19982
// missile := [ 1 ] ;
19629: LD_ADDR_VAR 0 14
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19640: LD_VAR 0 9
19644: PPUSH
19645: LD_VAR 0 12
19649: PPUSH
19650: CALL_OW 325
19654: IFFALSE 19683
// missile := Insert ( missile , missile + 1 , 2 ) ;
19656: LD_ADDR_VAR 0 14
19660: PUSH
19661: LD_VAR 0 14
19665: PPUSH
19666: LD_VAR 0 14
19670: PUSH
19671: LD_INT 1
19673: PLUS
19674: PPUSH
19675: LD_INT 2
19677: PPUSH
19678: CALL_OW 2
19682: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19683: LD_VAR 0 9
19687: PPUSH
19688: LD_VAR 0 13
19692: PPUSH
19693: CALL_OW 325
19697: PUSH
19698: LD_VAR 0 10
19702: PPUSH
19703: CALL_OW 255
19707: PPUSH
19708: LD_VAR 0 13
19712: PPUSH
19713: CALL_OW 325
19717: NOT
19718: AND
19719: IFFALSE 19748
// missile := Insert ( missile , missile + 1 , 3 ) ;
19721: LD_ADDR_VAR 0 14
19725: PUSH
19726: LD_VAR 0 14
19730: PPUSH
19731: LD_VAR 0 14
19735: PUSH
19736: LD_INT 1
19738: PLUS
19739: PPUSH
19740: LD_INT 3
19742: PPUSH
19743: CALL_OW 2
19747: ST_TO_ADDR
// if missile < 2 then
19748: LD_VAR 0 14
19752: PUSH
19753: LD_INT 2
19755: LESS
19756: IFFALSE 19760
// exit ;
19758: GO 19982
// x := GetX ( enemy ) ;
19760: LD_ADDR_VAR 0 4
19764: PUSH
19765: LD_VAR 0 10
19769: PPUSH
19770: CALL_OW 250
19774: ST_TO_ADDR
// y := GetY ( enemy ) ;
19775: LD_ADDR_VAR 0 5
19779: PUSH
19780: LD_VAR 0 10
19784: PPUSH
19785: CALL_OW 251
19789: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19790: LD_ADDR_VAR 0 6
19794: PUSH
19795: LD_VAR 0 4
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PPUSH
19804: LD_INT 1
19806: PPUSH
19807: CALL_OW 12
19811: PLUS
19812: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19813: LD_ADDR_VAR 0 7
19817: PUSH
19818: LD_VAR 0 5
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PPUSH
19827: LD_INT 1
19829: PPUSH
19830: CALL_OW 12
19834: PLUS
19835: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19836: LD_VAR 0 6
19840: PPUSH
19841: LD_VAR 0 7
19845: PPUSH
19846: CALL_OW 488
19850: NOT
19851: IFFALSE 19873
// begin _x := x ;
19853: LD_ADDR_VAR 0 6
19857: PUSH
19858: LD_VAR 0 4
19862: ST_TO_ADDR
// _y := y ;
19863: LD_ADDR_VAR 0 7
19867: PUSH
19868: LD_VAR 0 5
19872: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: LD_INT 1
19880: PPUSH
19881: LD_VAR 0 14
19885: PPUSH
19886: CALL_OW 12
19890: ST_TO_ADDR
// case i of 1 :
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 1
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 19921
19904: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19905: LD_VAR 0 1
19909: PPUSH
19910: LD_VAR 0 10
19914: PPUSH
19915: CALL_OW 115
19919: GO 19982
19921: LD_INT 2
19923: DOUBLE
19924: EQUAL
19925: IFTRUE 19929
19927: GO 19951
19929: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19930: LD_VAR 0 1
19934: PPUSH
19935: LD_VAR 0 6
19939: PPUSH
19940: LD_VAR 0 7
19944: PPUSH
19945: CALL_OW 153
19949: GO 19982
19951: LD_INT 3
19953: DOUBLE
19954: EQUAL
19955: IFTRUE 19959
19957: GO 19981
19959: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_VAR 0 6
19969: PPUSH
19970: LD_VAR 0 7
19974: PPUSH
19975: CALL_OW 154
19979: GO 19982
19981: POP
// end ;
19982: LD_VAR 0 2
19986: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19987: LD_INT 0
19989: PPUSH
19990: PPUSH
19991: PPUSH
19992: PPUSH
19993: PPUSH
19994: PPUSH
// if not unit or not building then
19995: LD_VAR 0 1
19999: NOT
20000: PUSH
20001: LD_VAR 0 2
20005: NOT
20006: OR
20007: IFFALSE 20011
// exit ;
20009: GO 20169
// x := GetX ( building ) ;
20011: LD_ADDR_VAR 0 5
20015: PUSH
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 250
20025: ST_TO_ADDR
// y := GetY ( building ) ;
20026: LD_ADDR_VAR 0 6
20030: PUSH
20031: LD_VAR 0 2
20035: PPUSH
20036: CALL_OW 251
20040: ST_TO_ADDR
// for i = 0 to 5 do
20041: LD_ADDR_VAR 0 4
20045: PUSH
20046: DOUBLE
20047: LD_INT 0
20049: DEC
20050: ST_TO_ADDR
20051: LD_INT 5
20053: PUSH
20054: FOR_TO
20055: IFFALSE 20167
// begin _x := ShiftX ( x , i , 3 ) ;
20057: LD_ADDR_VAR 0 7
20061: PUSH
20062: LD_VAR 0 5
20066: PPUSH
20067: LD_VAR 0 4
20071: PPUSH
20072: LD_INT 3
20074: PPUSH
20075: CALL_OW 272
20079: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20080: LD_ADDR_VAR 0 8
20084: PUSH
20085: LD_VAR 0 6
20089: PPUSH
20090: LD_VAR 0 4
20094: PPUSH
20095: LD_INT 3
20097: PPUSH
20098: CALL_OW 273
20102: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20103: LD_VAR 0 7
20107: PPUSH
20108: LD_VAR 0 8
20112: PPUSH
20113: CALL_OW 488
20117: NOT
20118: IFFALSE 20122
// continue ;
20120: GO 20054
// if HexInfo ( _x , _y ) = 0 then
20122: LD_VAR 0 7
20126: PPUSH
20127: LD_VAR 0 8
20131: PPUSH
20132: CALL_OW 428
20136: PUSH
20137: LD_INT 0
20139: EQUAL
20140: IFFALSE 20165
// begin ComMoveXY ( unit , _x , _y ) ;
20142: LD_VAR 0 1
20146: PPUSH
20147: LD_VAR 0 7
20151: PPUSH
20152: LD_VAR 0 8
20156: PPUSH
20157: CALL_OW 111
// exit ;
20161: POP
20162: POP
20163: GO 20169
// end ; end ;
20165: GO 20054
20167: POP
20168: POP
// end ;
20169: LD_VAR 0 3
20173: RET
// export function ScanBase ( side , base_area ) ; begin
20174: LD_INT 0
20176: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: LD_VAR 0 2
20186: PPUSH
20187: LD_INT 81
20189: PUSH
20190: LD_VAR 0 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PPUSH
20199: CALL_OW 70
20203: ST_TO_ADDR
// end ;
20204: LD_VAR 0 3
20208: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
// result := false ;
20215: LD_ADDR_VAR 0 2
20219: PUSH
20220: LD_INT 0
20222: ST_TO_ADDR
// side := GetSide ( unit ) ;
20223: LD_ADDR_VAR 0 3
20227: PUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 255
20237: ST_TO_ADDR
// nat := GetNation ( unit ) ;
20238: LD_ADDR_VAR 0 4
20242: PUSH
20243: LD_VAR 0 1
20247: PPUSH
20248: CALL_OW 248
20252: ST_TO_ADDR
// case nat of 1 :
20253: LD_VAR 0 4
20257: PUSH
20258: LD_INT 1
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20277
20266: POP
// tech := tech_lassight ; 2 :
20267: LD_ADDR_VAR 0 5
20271: PUSH
20272: LD_INT 12
20274: ST_TO_ADDR
20275: GO 20316
20277: LD_INT 2
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20296
20285: POP
// tech := tech_mortar ; 3 :
20286: LD_ADDR_VAR 0 5
20290: PUSH
20291: LD_INT 41
20293: ST_TO_ADDR
20294: GO 20316
20296: LD_INT 3
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20315
20304: POP
// tech := tech_bazooka ; end ;
20305: LD_ADDR_VAR 0 5
20309: PUSH
20310: LD_INT 44
20312: ST_TO_ADDR
20313: GO 20316
20315: POP
// if Researched ( side , tech ) then
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_VAR 0 5
20325: PPUSH
20326: CALL_OW 325
20330: IFFALSE 20357
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
20332: LD_ADDR_VAR 0 2
20336: PUSH
20337: LD_INT 5
20339: PUSH
20340: LD_INT 8
20342: PUSH
20343: LD_INT 9
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: LD_VAR 0 4
20355: ARRAY
20356: ST_TO_ADDR
// end ;
20357: LD_VAR 0 2
20361: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
20362: LD_INT 0
20364: PPUSH
20365: PPUSH
20366: PPUSH
// if not mines then
20367: LD_VAR 0 2
20371: NOT
20372: IFFALSE 20376
// exit ;
20374: GO 20520
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20376: LD_ADDR_VAR 0 5
20380: PUSH
20381: LD_INT 81
20383: PUSH
20384: LD_VAR 0 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 3
20395: PUSH
20396: LD_INT 21
20398: PUSH
20399: LD_INT 3
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: CALL_OW 69
20418: ST_TO_ADDR
// for i in mines do
20419: LD_ADDR_VAR 0 4
20423: PUSH
20424: LD_VAR 0 2
20428: PUSH
20429: FOR_IN
20430: IFFALSE 20518
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
20432: LD_VAR 0 4
20436: PUSH
20437: LD_INT 1
20439: ARRAY
20440: PPUSH
20441: LD_VAR 0 4
20445: PUSH
20446: LD_INT 2
20448: ARRAY
20449: PPUSH
20450: CALL_OW 458
20454: NOT
20455: IFFALSE 20459
// continue ;
20457: GO 20429
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
20459: LD_VAR 0 4
20463: PUSH
20464: LD_INT 1
20466: ARRAY
20467: PPUSH
20468: LD_VAR 0 4
20472: PUSH
20473: LD_INT 2
20475: ARRAY
20476: PPUSH
20477: CALL_OW 428
20481: PUSH
20482: LD_VAR 0 5
20486: IN
20487: IFFALSE 20516
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
20489: LD_VAR 0 4
20493: PUSH
20494: LD_INT 1
20496: ARRAY
20497: PPUSH
20498: LD_VAR 0 4
20502: PUSH
20503: LD_INT 2
20505: ARRAY
20506: PPUSH
20507: LD_VAR 0 1
20511: PPUSH
20512: CALL_OW 456
// end ;
20516: GO 20429
20518: POP
20519: POP
// end ;
20520: LD_VAR 0 3
20524: RET
// export function Count ( array ) ; var i ; begin
20525: LD_INT 0
20527: PPUSH
20528: PPUSH
// result := 0 ;
20529: LD_ADDR_VAR 0 2
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// for i in array do
20537: LD_ADDR_VAR 0 3
20541: PUSH
20542: LD_VAR 0 1
20546: PUSH
20547: FOR_IN
20548: IFFALSE 20572
// if i then
20550: LD_VAR 0 3
20554: IFFALSE 20570
// result := result + 1 ;
20556: LD_ADDR_VAR 0 2
20560: PUSH
20561: LD_VAR 0 2
20565: PUSH
20566: LD_INT 1
20568: PLUS
20569: ST_TO_ADDR
20570: GO 20547
20572: POP
20573: POP
// end ;
20574: LD_VAR 0 2
20578: RET
// export function IsEmpty ( building ) ; begin
20579: LD_INT 0
20581: PPUSH
// if not building then
20582: LD_VAR 0 1
20586: NOT
20587: IFFALSE 20591
// exit ;
20589: GO 20634
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: LD_VAR 0 1
20600: PUSH
20601: LD_INT 22
20603: PUSH
20604: LD_VAR 0 1
20608: PPUSH
20609: CALL_OW 255
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 58
20620: PUSH
20621: EMPTY
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PPUSH
20628: CALL_OW 69
20632: IN
20633: ST_TO_ADDR
// end ;
20634: LD_VAR 0 2
20638: RET
// export function IsNotFull ( building ) ; begin
20639: LD_INT 0
20641: PPUSH
// if not building then
20642: LD_VAR 0 1
20646: NOT
20647: IFFALSE 20651
// exit ;
20649: GO 20670
// result := UnitsInside ( building ) < 6 ;
20651: LD_ADDR_VAR 0 2
20655: PUSH
20656: LD_VAR 0 1
20660: PPUSH
20661: CALL_OW 313
20665: PUSH
20666: LD_INT 6
20668: LESS
20669: ST_TO_ADDR
// end ;
20670: LD_VAR 0 2
20674: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
20675: LD_INT 0
20677: PPUSH
20678: PPUSH
20679: PPUSH
20680: PPUSH
// tmp := [ ] ;
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: EMPTY
20687: ST_TO_ADDR
// list := [ ] ;
20688: LD_ADDR_VAR 0 5
20692: PUSH
20693: EMPTY
20694: ST_TO_ADDR
// for i = 16 to 25 do
20695: LD_ADDR_VAR 0 4
20699: PUSH
20700: DOUBLE
20701: LD_INT 16
20703: DEC
20704: ST_TO_ADDR
20705: LD_INT 25
20707: PUSH
20708: FOR_TO
20709: IFFALSE 20782
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 255
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 91
20740: PUSH
20741: LD_VAR 0 1
20745: PUSH
20746: LD_INT 6
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_VAR 0 4
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: ADD
20779: ST_TO_ADDR
20780: GO 20708
20782: POP
20783: POP
// for i = 1 to tmp do
20784: LD_ADDR_VAR 0 4
20788: PUSH
20789: DOUBLE
20790: LD_INT 1
20792: DEC
20793: ST_TO_ADDR
20794: LD_VAR 0 3
20798: PUSH
20799: FOR_TO
20800: IFFALSE 20888
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20802: LD_ADDR_VAR 0 5
20806: PUSH
20807: LD_VAR 0 5
20811: PUSH
20812: LD_VAR 0 3
20816: PUSH
20817: LD_VAR 0 4
20821: ARRAY
20822: PPUSH
20823: CALL_OW 266
20827: PUSH
20828: LD_VAR 0 3
20832: PUSH
20833: LD_VAR 0 4
20837: ARRAY
20838: PPUSH
20839: CALL_OW 250
20843: PUSH
20844: LD_VAR 0 3
20848: PUSH
20849: LD_VAR 0 4
20853: ARRAY
20854: PPUSH
20855: CALL_OW 251
20859: PUSH
20860: LD_VAR 0 3
20864: PUSH
20865: LD_VAR 0 4
20869: ARRAY
20870: PPUSH
20871: CALL_OW 254
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: ADD
20885: ST_TO_ADDR
20886: GO 20799
20888: POP
20889: POP
// result := list ;
20890: LD_ADDR_VAR 0 2
20894: PUSH
20895: LD_VAR 0 5
20899: ST_TO_ADDR
// end ;
20900: LD_VAR 0 2
20904: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20905: LD_INT 0
20907: PPUSH
20908: PPUSH
20909: PPUSH
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
// if not factory then
20914: LD_VAR 0 1
20918: NOT
20919: IFFALSE 20923
// exit ;
20921: GO 21516
// if control = control_apeman then
20923: LD_VAR 0 4
20927: PUSH
20928: LD_INT 5
20930: EQUAL
20931: IFFALSE 21040
// begin tmp := UnitsInside ( factory ) ;
20933: LD_ADDR_VAR 0 8
20937: PUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 313
20947: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20948: LD_VAR 0 8
20952: PPUSH
20953: LD_INT 25
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 72
20967: NOT
20968: IFFALSE 20978
// control := control_manual ;
20970: LD_ADDR_VAR 0 4
20974: PUSH
20975: LD_INT 1
20977: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20978: LD_ADDR_VAR 0 8
20982: PUSH
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL 20675 0 1
20992: ST_TO_ADDR
// if tmp then
20993: LD_VAR 0 8
20997: IFFALSE 21040
// begin for i in tmp do
20999: LD_ADDR_VAR 0 7
21003: PUSH
21004: LD_VAR 0 8
21008: PUSH
21009: FOR_IN
21010: IFFALSE 21038
// if i [ 1 ] = b_ext_radio then
21012: LD_VAR 0 7
21016: PUSH
21017: LD_INT 1
21019: ARRAY
21020: PUSH
21021: LD_INT 22
21023: EQUAL
21024: IFFALSE 21036
// begin control := control_remote ;
21026: LD_ADDR_VAR 0 4
21030: PUSH
21031: LD_INT 2
21033: ST_TO_ADDR
// break ;
21034: GO 21038
// end ;
21036: GO 21009
21038: POP
21039: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21040: LD_VAR 0 1
21044: PPUSH
21045: LD_VAR 0 2
21049: PPUSH
21050: LD_VAR 0 3
21054: PPUSH
21055: LD_VAR 0 4
21059: PPUSH
21060: LD_VAR 0 5
21064: PPUSH
21065: CALL_OW 448
21069: IFFALSE 21104
// begin result := [ chassis , engine , control , weapon ] ;
21071: LD_ADDR_VAR 0 6
21075: PUSH
21076: LD_VAR 0 2
21080: PUSH
21081: LD_VAR 0 3
21085: PUSH
21086: LD_VAR 0 4
21090: PUSH
21091: LD_VAR 0 5
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: ST_TO_ADDR
// exit ;
21102: GO 21516
// end ; _chassis := AvailableChassisList ( factory ) ;
21104: LD_ADDR_VAR 0 9
21108: PUSH
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 475
21118: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21119: LD_ADDR_VAR 0 11
21123: PUSH
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 476
21133: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21134: LD_ADDR_VAR 0 12
21138: PUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 477
21148: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21149: LD_ADDR_VAR 0 10
21153: PUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 478
21163: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21164: LD_VAR 0 9
21168: NOT
21169: PUSH
21170: LD_VAR 0 11
21174: NOT
21175: OR
21176: PUSH
21177: LD_VAR 0 12
21181: NOT
21182: OR
21183: PUSH
21184: LD_VAR 0 10
21188: NOT
21189: OR
21190: IFFALSE 21225
// begin result := [ chassis , engine , control , weapon ] ;
21192: LD_ADDR_VAR 0 6
21196: PUSH
21197: LD_VAR 0 2
21201: PUSH
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 4
21211: PUSH
21212: LD_VAR 0 5
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: ST_TO_ADDR
// exit ;
21223: GO 21516
// end ; if not chassis in _chassis then
21225: LD_VAR 0 2
21229: PUSH
21230: LD_VAR 0 9
21234: IN
21235: NOT
21236: IFFALSE 21262
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
21238: LD_ADDR_VAR 0 2
21242: PUSH
21243: LD_VAR 0 9
21247: PUSH
21248: LD_INT 1
21250: PPUSH
21251: LD_VAR 0 9
21255: PPUSH
21256: CALL_OW 12
21260: ARRAY
21261: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: CALL 21521 0 2
21276: NOT
21277: IFFALSE 21336
// repeat engine := _engine [ 1 ] ;
21279: LD_ADDR_VAR 0 3
21283: PUSH
21284: LD_VAR 0 11
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
21293: LD_ADDR_VAR 0 11
21297: PUSH
21298: LD_VAR 0 11
21302: PPUSH
21303: LD_INT 1
21305: PPUSH
21306: CALL_OW 3
21310: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
21311: LD_VAR 0 2
21315: PPUSH
21316: LD_VAR 0 3
21320: PPUSH
21321: CALL 21521 0 2
21325: PUSH
21326: LD_VAR 0 11
21330: PUSH
21331: EMPTY
21332: EQUAL
21333: OR
21334: IFFALSE 21279
// if not control in _control then
21336: LD_VAR 0 4
21340: PUSH
21341: LD_VAR 0 12
21345: IN
21346: NOT
21347: IFFALSE 21373
// control := _control [ rand ( 1 , _control ) ] ;
21349: LD_ADDR_VAR 0 4
21353: PUSH
21354: LD_VAR 0 12
21358: PUSH
21359: LD_INT 1
21361: PPUSH
21362: LD_VAR 0 12
21366: PPUSH
21367: CALL_OW 12
21371: ARRAY
21372: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
21373: LD_VAR 0 2
21377: PPUSH
21378: LD_VAR 0 5
21382: PPUSH
21383: CALL 21741 0 2
21387: NOT
21388: IFFALSE 21447
// repeat weapon := _weapon [ 1 ] ;
21390: LD_ADDR_VAR 0 5
21394: PUSH
21395: LD_VAR 0 10
21399: PUSH
21400: LD_INT 1
21402: ARRAY
21403: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
21404: LD_ADDR_VAR 0 10
21408: PUSH
21409: LD_VAR 0 10
21413: PPUSH
21414: LD_INT 1
21416: PPUSH
21417: CALL_OW 3
21421: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL 21741 0 2
21436: PUSH
21437: LD_VAR 0 10
21441: PUSH
21442: EMPTY
21443: EQUAL
21444: OR
21445: IFFALSE 21390
// result := [ ] ;
21447: LD_ADDR_VAR 0 6
21451: PUSH
21452: EMPTY
21453: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_VAR 0 3
21468: PPUSH
21469: LD_VAR 0 4
21473: PPUSH
21474: LD_VAR 0 5
21478: PPUSH
21479: CALL_OW 448
21483: IFFALSE 21516
// result := [ chassis , engine , control , weapon ] ;
21485: LD_ADDR_VAR 0 6
21489: PUSH
21490: LD_VAR 0 2
21494: PUSH
21495: LD_VAR 0 3
21499: PUSH
21500: LD_VAR 0 4
21504: PUSH
21505: LD_VAR 0 5
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: ST_TO_ADDR
// end ;
21516: LD_VAR 0 6
21520: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
21521: LD_INT 0
21523: PPUSH
// if not chassis or not engine then
21524: LD_VAR 0 1
21528: NOT
21529: PUSH
21530: LD_VAR 0 2
21534: NOT
21535: OR
21536: IFFALSE 21540
// exit ;
21538: GO 21736
// case engine of engine_solar :
21540: LD_VAR 0 2
21544: PUSH
21545: LD_INT 2
21547: DOUBLE
21548: EQUAL
21549: IFTRUE 21553
21551: GO 21591
21553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
21554: LD_ADDR_VAR 0 3
21558: PUSH
21559: LD_INT 11
21561: PUSH
21562: LD_INT 12
21564: PUSH
21565: LD_INT 13
21567: PUSH
21568: LD_INT 14
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: LD_INT 3
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: ST_TO_ADDR
21589: GO 21720
21591: LD_INT 1
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21661
21599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
21600: LD_ADDR_VAR 0 3
21604: PUSH
21605: LD_INT 11
21607: PUSH
21608: LD_INT 12
21610: PUSH
21611: LD_INT 13
21613: PUSH
21614: LD_INT 14
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: LD_INT 21
21634: PUSH
21635: LD_INT 23
21637: PUSH
21638: LD_INT 22
21640: PUSH
21641: LD_INT 24
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: ST_TO_ADDR
21659: GO 21720
21661: LD_INT 3
21663: DOUBLE
21664: EQUAL
21665: IFTRUE 21669
21667: GO 21719
21669: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_INT 13
21677: PUSH
21678: LD_INT 14
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: LD_INT 4
21689: PUSH
21690: LD_INT 5
21692: PUSH
21693: LD_INT 21
21695: PUSH
21696: LD_INT 22
21698: PUSH
21699: LD_INT 23
21701: PUSH
21702: LD_INT 24
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: ST_TO_ADDR
21717: GO 21720
21719: POP
// result := ( chassis in result ) ;
21720: LD_ADDR_VAR 0 3
21724: PUSH
21725: LD_VAR 0 1
21729: PUSH
21730: LD_VAR 0 3
21734: IN
21735: ST_TO_ADDR
// end ;
21736: LD_VAR 0 3
21740: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21741: LD_INT 0
21743: PPUSH
// if not chassis or not weapon then
21744: LD_VAR 0 1
21748: NOT
21749: PUSH
21750: LD_VAR 0 2
21754: NOT
21755: OR
21756: IFFALSE 21760
// exit ;
21758: GO 22786
// case weapon of us_machine_gun :
21760: LD_VAR 0 2
21764: PUSH
21765: LD_INT 2
21767: DOUBLE
21768: EQUAL
21769: IFTRUE 21773
21771: GO 21803
21773: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21774: LD_ADDR_VAR 0 3
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 3
21787: PUSH
21788: LD_INT 4
21790: PUSH
21791: LD_INT 5
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: ST_TO_ADDR
21801: GO 22770
21803: LD_INT 3
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21811
21809: GO 21841
21811: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21812: LD_ADDR_VAR 0 3
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: LD_INT 4
21828: PUSH
21829: LD_INT 5
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: ST_TO_ADDR
21839: GO 22770
21841: LD_INT 11
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21879
21849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21850: LD_ADDR_VAR 0 3
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: LD_INT 3
21863: PUSH
21864: LD_INT 4
21866: PUSH
21867: LD_INT 5
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: ST_TO_ADDR
21877: GO 22770
21879: LD_INT 4
21881: DOUBLE
21882: EQUAL
21883: IFTRUE 21887
21885: GO 21913
21887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21888: LD_ADDR_VAR 0 3
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: LD_INT 4
21901: PUSH
21902: LD_INT 5
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: ST_TO_ADDR
21911: GO 22770
21913: LD_INT 5
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21947
21921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: LD_INT 3
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: LD_INT 5
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 22770
21947: LD_INT 9
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 21981
21955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21956: LD_ADDR_VAR 0 3
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: LD_INT 4
21969: PUSH
21970: LD_INT 5
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: ST_TO_ADDR
21979: GO 22770
21981: LD_INT 7
21983: DOUBLE
21984: EQUAL
21985: IFTRUE 21989
21987: GO 22015
21989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21990: LD_ADDR_VAR 0 3
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: LD_INT 3
22000: PUSH
22001: LD_INT 4
22003: PUSH
22004: LD_INT 5
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: ST_TO_ADDR
22013: GO 22770
22015: LD_INT 12
22017: DOUBLE
22018: EQUAL
22019: IFTRUE 22023
22021: GO 22049
22023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 3
22034: PUSH
22035: LD_INT 4
22037: PUSH
22038: LD_INT 5
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: ST_TO_ADDR
22047: GO 22770
22049: LD_INT 13
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22083
22057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22058: LD_ADDR_VAR 0 3
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: LD_INT 4
22071: PUSH
22072: LD_INT 5
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: ST_TO_ADDR
22081: GO 22770
22083: LD_INT 14
22085: DOUBLE
22086: EQUAL
22087: IFTRUE 22091
22089: GO 22109
22091: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22092: LD_ADDR_VAR 0 3
22096: PUSH
22097: LD_INT 4
22099: PUSH
22100: LD_INT 5
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: ST_TO_ADDR
22107: GO 22770
22109: LD_INT 6
22111: DOUBLE
22112: EQUAL
22113: IFTRUE 22117
22115: GO 22135
22117: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22118: LD_ADDR_VAR 0 3
22122: PUSH
22123: LD_INT 4
22125: PUSH
22126: LD_INT 5
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: ST_TO_ADDR
22133: GO 22770
22135: LD_INT 10
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22161
22143: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_INT 4
22151: PUSH
22152: LD_INT 5
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: ST_TO_ADDR
22159: GO 22770
22161: LD_INT 22
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22195
22169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22170: LD_ADDR_VAR 0 3
22174: PUSH
22175: LD_INT 11
22177: PUSH
22178: LD_INT 12
22180: PUSH
22181: LD_INT 13
22183: PUSH
22184: LD_INT 14
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: ST_TO_ADDR
22193: GO 22770
22195: LD_INT 23
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22229
22203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22204: LD_ADDR_VAR 0 3
22208: PUSH
22209: LD_INT 11
22211: PUSH
22212: LD_INT 12
22214: PUSH
22215: LD_INT 13
22217: PUSH
22218: LD_INT 14
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: ST_TO_ADDR
22227: GO 22770
22229: LD_INT 24
22231: DOUBLE
22232: EQUAL
22233: IFTRUE 22237
22235: GO 22263
22237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
22238: LD_ADDR_VAR 0 3
22242: PUSH
22243: LD_INT 11
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 13
22251: PUSH
22252: LD_INT 14
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: ST_TO_ADDR
22261: GO 22770
22263: LD_INT 30
22265: DOUBLE
22266: EQUAL
22267: IFTRUE 22271
22269: GO 22297
22271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
22272: LD_ADDR_VAR 0 3
22276: PUSH
22277: LD_INT 11
22279: PUSH
22280: LD_INT 12
22282: PUSH
22283: LD_INT 13
22285: PUSH
22286: LD_INT 14
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: ST_TO_ADDR
22295: GO 22770
22297: LD_INT 25
22299: DOUBLE
22300: EQUAL
22301: IFTRUE 22305
22303: GO 22323
22305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
22306: LD_ADDR_VAR 0 3
22310: PUSH
22311: LD_INT 13
22313: PUSH
22314: LD_INT 14
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 22770
22323: LD_INT 27
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22349
22331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_INT 13
22339: PUSH
22340: LD_INT 14
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: ST_TO_ADDR
22347: GO 22770
22349: LD_INT 28
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22375
22357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
22358: LD_ADDR_VAR 0 3
22362: PUSH
22363: LD_INT 13
22365: PUSH
22366: LD_INT 14
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: ST_TO_ADDR
22373: GO 22770
22375: LD_INT 29
22377: DOUBLE
22378: EQUAL
22379: IFTRUE 22383
22381: GO 22401
22383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
22384: LD_ADDR_VAR 0 3
22388: PUSH
22389: LD_INT 13
22391: PUSH
22392: LD_INT 14
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: ST_TO_ADDR
22399: GO 22770
22401: LD_INT 31
22403: DOUBLE
22404: EQUAL
22405: IFTRUE 22409
22407: GO 22427
22409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
22410: LD_ADDR_VAR 0 3
22414: PUSH
22415: LD_INT 13
22417: PUSH
22418: LD_INT 14
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: ST_TO_ADDR
22425: GO 22770
22427: LD_INT 26
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22453
22435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
22436: LD_ADDR_VAR 0 3
22440: PUSH
22441: LD_INT 13
22443: PUSH
22444: LD_INT 14
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: ST_TO_ADDR
22451: GO 22770
22453: LD_INT 42
22455: DOUBLE
22456: EQUAL
22457: IFTRUE 22461
22459: GO 22487
22461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
22462: LD_ADDR_VAR 0 3
22466: PUSH
22467: LD_INT 21
22469: PUSH
22470: LD_INT 22
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 24
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: ST_TO_ADDR
22485: GO 22770
22487: LD_INT 43
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22521
22495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_INT 21
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_INT 23
22509: PUSH
22510: LD_INT 24
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: ST_TO_ADDR
22519: GO 22770
22521: LD_INT 44
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22555
22529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
22530: LD_ADDR_VAR 0 3
22534: PUSH
22535: LD_INT 21
22537: PUSH
22538: LD_INT 22
22540: PUSH
22541: LD_INT 23
22543: PUSH
22544: LD_INT 24
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: ST_TO_ADDR
22553: GO 22770
22555: LD_INT 45
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22589
22563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
22564: LD_ADDR_VAR 0 3
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 22
22574: PUSH
22575: LD_INT 23
22577: PUSH
22578: LD_INT 24
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
22587: GO 22770
22589: LD_INT 49
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22623
22597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_INT 21
22605: PUSH
22606: LD_INT 22
22608: PUSH
22609: LD_INT 23
22611: PUSH
22612: LD_INT 24
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: ST_TO_ADDR
22621: GO 22770
22623: LD_INT 51
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22657
22631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22632: LD_ADDR_VAR 0 3
22636: PUSH
22637: LD_INT 21
22639: PUSH
22640: LD_INT 22
22642: PUSH
22643: LD_INT 23
22645: PUSH
22646: LD_INT 24
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: ST_TO_ADDR
22655: GO 22770
22657: LD_INT 52
22659: DOUBLE
22660: EQUAL
22661: IFTRUE 22665
22663: GO 22691
22665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22666: LD_ADDR_VAR 0 3
22670: PUSH
22671: LD_INT 21
22673: PUSH
22674: LD_INT 22
22676: PUSH
22677: LD_INT 23
22679: PUSH
22680: LD_INT 24
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: ST_TO_ADDR
22689: GO 22770
22691: LD_INT 53
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22717
22699: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22700: LD_ADDR_VAR 0 3
22704: PUSH
22705: LD_INT 23
22707: PUSH
22708: LD_INT 24
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: ST_TO_ADDR
22715: GO 22770
22717: LD_INT 46
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 22743
22725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22726: LD_ADDR_VAR 0 3
22730: PUSH
22731: LD_INT 23
22733: PUSH
22734: LD_INT 24
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: ST_TO_ADDR
22741: GO 22770
22743: LD_INT 47
22745: DOUBLE
22746: EQUAL
22747: IFTRUE 22751
22749: GO 22769
22751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22752: LD_ADDR_VAR 0 3
22756: PUSH
22757: LD_INT 23
22759: PUSH
22760: LD_INT 24
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: ST_TO_ADDR
22767: GO 22770
22769: POP
// result := ( chassis in result ) ;
22770: LD_ADDR_VAR 0 3
22774: PUSH
22775: LD_VAR 0 1
22779: PUSH
22780: LD_VAR 0 3
22784: IN
22785: ST_TO_ADDR
// end ;
22786: LD_VAR 0 3
22790: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22791: LD_INT 0
22793: PPUSH
22794: PPUSH
22795: PPUSH
22796: PPUSH
22797: PPUSH
22798: PPUSH
22799: PPUSH
// result := array ;
22800: LD_ADDR_VAR 0 5
22804: PUSH
22805: LD_VAR 0 1
22809: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22810: LD_VAR 0 1
22814: NOT
22815: PUSH
22816: LD_VAR 0 2
22820: NOT
22821: OR
22822: PUSH
22823: LD_VAR 0 3
22827: NOT
22828: OR
22829: PUSH
22830: LD_VAR 0 2
22834: PUSH
22835: LD_VAR 0 1
22839: GREATER
22840: OR
22841: PUSH
22842: LD_VAR 0 3
22846: PUSH
22847: LD_VAR 0 1
22851: GREATER
22852: OR
22853: IFFALSE 22857
// exit ;
22855: GO 23153
// if direction then
22857: LD_VAR 0 4
22861: IFFALSE 22925
// begin d := 1 ;
22863: LD_ADDR_VAR 0 9
22867: PUSH
22868: LD_INT 1
22870: ST_TO_ADDR
// if i_from > i_to then
22871: LD_VAR 0 2
22875: PUSH
22876: LD_VAR 0 3
22880: GREATER
22881: IFFALSE 22907
// length := ( array - i_from ) + i_to else
22883: LD_ADDR_VAR 0 11
22887: PUSH
22888: LD_VAR 0 1
22892: PUSH
22893: LD_VAR 0 2
22897: MINUS
22898: PUSH
22899: LD_VAR 0 3
22903: PLUS
22904: ST_TO_ADDR
22905: GO 22923
// length := i_to - i_from ;
22907: LD_ADDR_VAR 0 11
22911: PUSH
22912: LD_VAR 0 3
22916: PUSH
22917: LD_VAR 0 2
22921: MINUS
22922: ST_TO_ADDR
// end else
22923: GO 22986
// begin d := - 1 ;
22925: LD_ADDR_VAR 0 9
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: ST_TO_ADDR
// if i_from > i_to then
22934: LD_VAR 0 2
22938: PUSH
22939: LD_VAR 0 3
22943: GREATER
22944: IFFALSE 22964
// length := i_from - i_to else
22946: LD_ADDR_VAR 0 11
22950: PUSH
22951: LD_VAR 0 2
22955: PUSH
22956: LD_VAR 0 3
22960: MINUS
22961: ST_TO_ADDR
22962: GO 22986
// length := ( array - i_to ) + i_from ;
22964: LD_ADDR_VAR 0 11
22968: PUSH
22969: LD_VAR 0 1
22973: PUSH
22974: LD_VAR 0 3
22978: MINUS
22979: PUSH
22980: LD_VAR 0 2
22984: PLUS
22985: ST_TO_ADDR
// end ; if not length then
22986: LD_VAR 0 11
22990: NOT
22991: IFFALSE 22995
// exit ;
22993: GO 23153
// tmp := array ;
22995: LD_ADDR_VAR 0 10
22999: PUSH
23000: LD_VAR 0 1
23004: ST_TO_ADDR
// for i = 1 to length do
23005: LD_ADDR_VAR 0 6
23009: PUSH
23010: DOUBLE
23011: LD_INT 1
23013: DEC
23014: ST_TO_ADDR
23015: LD_VAR 0 11
23019: PUSH
23020: FOR_TO
23021: IFFALSE 23141
// begin for j = 1 to array do
23023: LD_ADDR_VAR 0 7
23027: PUSH
23028: DOUBLE
23029: LD_INT 1
23031: DEC
23032: ST_TO_ADDR
23033: LD_VAR 0 1
23037: PUSH
23038: FOR_TO
23039: IFFALSE 23127
// begin k := j + d ;
23041: LD_ADDR_VAR 0 8
23045: PUSH
23046: LD_VAR 0 7
23050: PUSH
23051: LD_VAR 0 9
23055: PLUS
23056: ST_TO_ADDR
// if k > array then
23057: LD_VAR 0 8
23061: PUSH
23062: LD_VAR 0 1
23066: GREATER
23067: IFFALSE 23077
// k := 1 ;
23069: LD_ADDR_VAR 0 8
23073: PUSH
23074: LD_INT 1
23076: ST_TO_ADDR
// if not k then
23077: LD_VAR 0 8
23081: NOT
23082: IFFALSE 23094
// k := array ;
23084: LD_ADDR_VAR 0 8
23088: PUSH
23089: LD_VAR 0 1
23093: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23094: LD_ADDR_VAR 0 10
23098: PUSH
23099: LD_VAR 0 10
23103: PPUSH
23104: LD_VAR 0 8
23108: PPUSH
23109: LD_VAR 0 1
23113: PUSH
23114: LD_VAR 0 7
23118: ARRAY
23119: PPUSH
23120: CALL_OW 1
23124: ST_TO_ADDR
// end ;
23125: GO 23038
23127: POP
23128: POP
// array := tmp ;
23129: LD_ADDR_VAR 0 1
23133: PUSH
23134: LD_VAR 0 10
23138: ST_TO_ADDR
// end ;
23139: GO 23020
23141: POP
23142: POP
// result := array ;
23143: LD_ADDR_VAR 0 5
23147: PUSH
23148: LD_VAR 0 1
23152: ST_TO_ADDR
// end ;
23153: LD_VAR 0 5
23157: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23158: LD_INT 0
23160: PPUSH
23161: PPUSH
// result := 0 ;
23162: LD_ADDR_VAR 0 3
23166: PUSH
23167: LD_INT 0
23169: ST_TO_ADDR
// if not array or not value in array then
23170: LD_VAR 0 1
23174: NOT
23175: PUSH
23176: LD_VAR 0 2
23180: PUSH
23181: LD_VAR 0 1
23185: IN
23186: NOT
23187: OR
23188: IFFALSE 23192
// exit ;
23190: GO 23246
// for i = 1 to array do
23192: LD_ADDR_VAR 0 4
23196: PUSH
23197: DOUBLE
23198: LD_INT 1
23200: DEC
23201: ST_TO_ADDR
23202: LD_VAR 0 1
23206: PUSH
23207: FOR_TO
23208: IFFALSE 23244
// if value = array [ i ] then
23210: LD_VAR 0 2
23214: PUSH
23215: LD_VAR 0 1
23219: PUSH
23220: LD_VAR 0 4
23224: ARRAY
23225: EQUAL
23226: IFFALSE 23242
// begin result := i ;
23228: LD_ADDR_VAR 0 3
23232: PUSH
23233: LD_VAR 0 4
23237: ST_TO_ADDR
// exit ;
23238: POP
23239: POP
23240: GO 23246
// end ;
23242: GO 23207
23244: POP
23245: POP
// end ;
23246: LD_VAR 0 3
23250: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
23251: LD_INT 0
23253: PPUSH
// vc_chassis := chassis ;
23254: LD_ADDR_OWVAR 37
23258: PUSH
23259: LD_VAR 0 1
23263: ST_TO_ADDR
// vc_engine := engine ;
23264: LD_ADDR_OWVAR 39
23268: PUSH
23269: LD_VAR 0 2
23273: ST_TO_ADDR
// vc_control := control ;
23274: LD_ADDR_OWVAR 38
23278: PUSH
23279: LD_VAR 0 3
23283: ST_TO_ADDR
// vc_weapon := weapon ;
23284: LD_ADDR_OWVAR 40
23288: PUSH
23289: LD_VAR 0 4
23293: ST_TO_ADDR
// vc_fuel_battery := fuel ;
23294: LD_ADDR_OWVAR 41
23298: PUSH
23299: LD_VAR 0 5
23303: ST_TO_ADDR
// end ;
23304: LD_VAR 0 6
23308: RET
// export function WantPlant ( unit ) ; var task ; begin
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
// result := false ;
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
23321: LD_ADDR_VAR 0 3
23325: PUSH
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 437
23335: ST_TO_ADDR
// if task then
23336: LD_VAR 0 3
23340: IFFALSE 23368
// if task [ 1 ] [ 1 ] = p then
23342: LD_VAR 0 3
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PUSH
23351: LD_INT 1
23353: ARRAY
23354: PUSH
23355: LD_STRING p
23357: EQUAL
23358: IFFALSE 23368
// result := true ;
23360: LD_ADDR_VAR 0 2
23364: PUSH
23365: LD_INT 1
23367: ST_TO_ADDR
// end ;
23368: LD_VAR 0 2
23372: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
23373: LD_INT 0
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
// if pos < 1 then
23379: LD_VAR 0 2
23383: PUSH
23384: LD_INT 1
23386: LESS
23387: IFFALSE 23391
// exit ;
23389: GO 23694
// if pos = 1 then
23391: LD_VAR 0 2
23395: PUSH
23396: LD_INT 1
23398: EQUAL
23399: IFFALSE 23432
// result := Replace ( arr , pos [ 1 ] , value ) else
23401: LD_ADDR_VAR 0 4
23405: PUSH
23406: LD_VAR 0 1
23410: PPUSH
23411: LD_VAR 0 2
23415: PUSH
23416: LD_INT 1
23418: ARRAY
23419: PPUSH
23420: LD_VAR 0 3
23424: PPUSH
23425: CALL_OW 1
23429: ST_TO_ADDR
23430: GO 23694
// begin tmp := arr ;
23432: LD_ADDR_VAR 0 6
23436: PUSH
23437: LD_VAR 0 1
23441: ST_TO_ADDR
// s_arr := [ tmp ] ;
23442: LD_ADDR_VAR 0 7
23446: PUSH
23447: LD_VAR 0 6
23451: PUSH
23452: EMPTY
23453: LIST
23454: ST_TO_ADDR
// for i = 1 to pos - 1 do
23455: LD_ADDR_VAR 0 5
23459: PUSH
23460: DOUBLE
23461: LD_INT 1
23463: DEC
23464: ST_TO_ADDR
23465: LD_VAR 0 2
23469: PUSH
23470: LD_INT 1
23472: MINUS
23473: PUSH
23474: FOR_TO
23475: IFFALSE 23520
// begin tmp := tmp [ pos [ i ] ] ;
23477: LD_ADDR_VAR 0 6
23481: PUSH
23482: LD_VAR 0 6
23486: PUSH
23487: LD_VAR 0 2
23491: PUSH
23492: LD_VAR 0 5
23496: ARRAY
23497: ARRAY
23498: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
23499: LD_ADDR_VAR 0 7
23503: PUSH
23504: LD_VAR 0 7
23508: PUSH
23509: LD_VAR 0 6
23513: PUSH
23514: EMPTY
23515: LIST
23516: ADD
23517: ST_TO_ADDR
// end ;
23518: GO 23474
23520: POP
23521: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
23522: LD_ADDR_VAR 0 6
23526: PUSH
23527: LD_VAR 0 6
23531: PPUSH
23532: LD_VAR 0 2
23536: PUSH
23537: LD_VAR 0 2
23541: ARRAY
23542: PPUSH
23543: LD_VAR 0 3
23547: PPUSH
23548: CALL_OW 1
23552: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
23553: LD_ADDR_VAR 0 7
23557: PUSH
23558: LD_VAR 0 7
23562: PPUSH
23563: LD_VAR 0 7
23567: PPUSH
23568: LD_VAR 0 6
23572: PPUSH
23573: CALL_OW 1
23577: ST_TO_ADDR
// for i = s_arr downto 2 do
23578: LD_ADDR_VAR 0 5
23582: PUSH
23583: DOUBLE
23584: LD_VAR 0 7
23588: INC
23589: ST_TO_ADDR
23590: LD_INT 2
23592: PUSH
23593: FOR_DOWNTO
23594: IFFALSE 23678
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23596: LD_ADDR_VAR 0 6
23600: PUSH
23601: LD_VAR 0 7
23605: PUSH
23606: LD_VAR 0 5
23610: PUSH
23611: LD_INT 1
23613: MINUS
23614: ARRAY
23615: PPUSH
23616: LD_VAR 0 2
23620: PUSH
23621: LD_VAR 0 5
23625: PUSH
23626: LD_INT 1
23628: MINUS
23629: ARRAY
23630: PPUSH
23631: LD_VAR 0 7
23635: PUSH
23636: LD_VAR 0 5
23640: ARRAY
23641: PPUSH
23642: CALL_OW 1
23646: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23647: LD_ADDR_VAR 0 7
23651: PUSH
23652: LD_VAR 0 7
23656: PPUSH
23657: LD_VAR 0 5
23661: PUSH
23662: LD_INT 1
23664: MINUS
23665: PPUSH
23666: LD_VAR 0 6
23670: PPUSH
23671: CALL_OW 1
23675: ST_TO_ADDR
// end ;
23676: GO 23593
23678: POP
23679: POP
// result := s_arr [ 1 ] ;
23680: LD_ADDR_VAR 0 4
23684: PUSH
23685: LD_VAR 0 7
23689: PUSH
23690: LD_INT 1
23692: ARRAY
23693: ST_TO_ADDR
// end ; end ;
23694: LD_VAR 0 4
23698: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23699: LD_INT 0
23701: PPUSH
23702: PPUSH
// if not list then
23703: LD_VAR 0 1
23707: NOT
23708: IFFALSE 23712
// exit ;
23710: GO 23803
// i := list [ pos1 ] ;
23712: LD_ADDR_VAR 0 5
23716: PUSH
23717: LD_VAR 0 1
23721: PUSH
23722: LD_VAR 0 2
23726: ARRAY
23727: ST_TO_ADDR
// if not i then
23728: LD_VAR 0 5
23732: NOT
23733: IFFALSE 23737
// exit ;
23735: GO 23803
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23737: LD_ADDR_VAR 0 1
23741: PUSH
23742: LD_VAR 0 1
23746: PPUSH
23747: LD_VAR 0 2
23751: PPUSH
23752: LD_VAR 0 1
23756: PUSH
23757: LD_VAR 0 3
23761: ARRAY
23762: PPUSH
23763: CALL_OW 1
23767: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23768: LD_ADDR_VAR 0 1
23772: PUSH
23773: LD_VAR 0 1
23777: PPUSH
23778: LD_VAR 0 3
23782: PPUSH
23783: LD_VAR 0 5
23787: PPUSH
23788: CALL_OW 1
23792: ST_TO_ADDR
// result := list ;
23793: LD_ADDR_VAR 0 4
23797: PUSH
23798: LD_VAR 0 1
23802: ST_TO_ADDR
// end ;
23803: LD_VAR 0 4
23807: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23808: LD_INT 0
23810: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23811: LD_ADDR_VAR 0 5
23815: PUSH
23816: LD_VAR 0 1
23820: PPUSH
23821: CALL_OW 250
23825: PPUSH
23826: LD_VAR 0 1
23830: PPUSH
23831: CALL_OW 251
23835: PPUSH
23836: LD_VAR 0 2
23840: PPUSH
23841: LD_VAR 0 3
23845: PPUSH
23846: LD_VAR 0 4
23850: PPUSH
23851: CALL 23861 0 5
23855: ST_TO_ADDR
// end ;
23856: LD_VAR 0 5
23860: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23861: LD_INT 0
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
// if not list then
23867: LD_VAR 0 3
23871: NOT
23872: IFFALSE 23876
// exit ;
23874: GO 24264
// result := [ ] ;
23876: LD_ADDR_VAR 0 6
23880: PUSH
23881: EMPTY
23882: ST_TO_ADDR
// for i in list do
23883: LD_ADDR_VAR 0 7
23887: PUSH
23888: LD_VAR 0 3
23892: PUSH
23893: FOR_IN
23894: IFFALSE 24096
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23896: LD_ADDR_VAR 0 9
23900: PUSH
23901: LD_VAR 0 7
23905: PPUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: LD_VAR 0 2
23915: PPUSH
23916: CALL_OW 297
23920: ST_TO_ADDR
// if not result then
23921: LD_VAR 0 6
23925: NOT
23926: IFFALSE 23952
// result := [ [ i , tmp ] ] else
23928: LD_ADDR_VAR 0 6
23932: PUSH
23933: LD_VAR 0 7
23937: PUSH
23938: LD_VAR 0 9
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: ST_TO_ADDR
23950: GO 24094
// begin if result [ result ] [ 2 ] < tmp then
23952: LD_VAR 0 6
23956: PUSH
23957: LD_VAR 0 6
23961: ARRAY
23962: PUSH
23963: LD_INT 2
23965: ARRAY
23966: PUSH
23967: LD_VAR 0 9
23971: LESS
23972: IFFALSE 24014
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23974: LD_ADDR_VAR 0 6
23978: PUSH
23979: LD_VAR 0 6
23983: PPUSH
23984: LD_VAR 0 6
23988: PUSH
23989: LD_INT 1
23991: PLUS
23992: PPUSH
23993: LD_VAR 0 7
23997: PUSH
23998: LD_VAR 0 9
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 2
24011: ST_TO_ADDR
24012: GO 24094
// for j = 1 to result do
24014: LD_ADDR_VAR 0 8
24018: PUSH
24019: DOUBLE
24020: LD_INT 1
24022: DEC
24023: ST_TO_ADDR
24024: LD_VAR 0 6
24028: PUSH
24029: FOR_TO
24030: IFFALSE 24092
// begin if tmp < result [ j ] [ 2 ] then
24032: LD_VAR 0 9
24036: PUSH
24037: LD_VAR 0 6
24041: PUSH
24042: LD_VAR 0 8
24046: ARRAY
24047: PUSH
24048: LD_INT 2
24050: ARRAY
24051: LESS
24052: IFFALSE 24090
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24054: LD_ADDR_VAR 0 6
24058: PUSH
24059: LD_VAR 0 6
24063: PPUSH
24064: LD_VAR 0 8
24068: PPUSH
24069: LD_VAR 0 7
24073: PUSH
24074: LD_VAR 0 9
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PPUSH
24083: CALL_OW 2
24087: ST_TO_ADDR
// break ;
24088: GO 24092
// end ; end ;
24090: GO 24029
24092: POP
24093: POP
// end ; end ;
24094: GO 23893
24096: POP
24097: POP
// if result and not asc then
24098: LD_VAR 0 6
24102: PUSH
24103: LD_VAR 0 4
24107: NOT
24108: AND
24109: IFFALSE 24184
// begin tmp := result ;
24111: LD_ADDR_VAR 0 9
24115: PUSH
24116: LD_VAR 0 6
24120: ST_TO_ADDR
// for i = tmp downto 1 do
24121: LD_ADDR_VAR 0 7
24125: PUSH
24126: DOUBLE
24127: LD_VAR 0 9
24131: INC
24132: ST_TO_ADDR
24133: LD_INT 1
24135: PUSH
24136: FOR_DOWNTO
24137: IFFALSE 24182
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24139: LD_ADDR_VAR 0 6
24143: PUSH
24144: LD_VAR 0 6
24148: PPUSH
24149: LD_VAR 0 9
24153: PUSH
24154: LD_VAR 0 7
24158: MINUS
24159: PUSH
24160: LD_INT 1
24162: PLUS
24163: PPUSH
24164: LD_VAR 0 9
24168: PUSH
24169: LD_VAR 0 7
24173: ARRAY
24174: PPUSH
24175: CALL_OW 1
24179: ST_TO_ADDR
24180: GO 24136
24182: POP
24183: POP
// end ; tmp := [ ] ;
24184: LD_ADDR_VAR 0 9
24188: PUSH
24189: EMPTY
24190: ST_TO_ADDR
// if mode then
24191: LD_VAR 0 5
24195: IFFALSE 24264
// begin for i = 1 to result do
24197: LD_ADDR_VAR 0 7
24201: PUSH
24202: DOUBLE
24203: LD_INT 1
24205: DEC
24206: ST_TO_ADDR
24207: LD_VAR 0 6
24211: PUSH
24212: FOR_TO
24213: IFFALSE 24252
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
24215: LD_ADDR_VAR 0 9
24219: PUSH
24220: LD_VAR 0 9
24224: PPUSH
24225: LD_VAR 0 7
24229: PPUSH
24230: LD_VAR 0 6
24234: PUSH
24235: LD_VAR 0 7
24239: ARRAY
24240: PUSH
24241: LD_INT 1
24243: ARRAY
24244: PPUSH
24245: CALL_OW 1
24249: ST_TO_ADDR
24250: GO 24212
24252: POP
24253: POP
// result := tmp ;
24254: LD_ADDR_VAR 0 6
24258: PUSH
24259: LD_VAR 0 9
24263: ST_TO_ADDR
// end ; end ;
24264: LD_VAR 0 6
24268: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
24269: LD_INT 0
24271: PPUSH
24272: PPUSH
24273: PPUSH
24274: PPUSH
24275: PPUSH
24276: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
24277: LD_ADDR_VAR 0 5
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
// if not x or not y then
24299: LD_VAR 0 2
24303: NOT
24304: PUSH
24305: LD_VAR 0 3
24309: NOT
24310: OR
24311: IFFALSE 24315
// exit ;
24313: GO 25961
// if not range then
24315: LD_VAR 0 4
24319: NOT
24320: IFFALSE 24330
// range := 10 ;
24322: LD_ADDR_VAR 0 4
24326: PUSH
24327: LD_INT 10
24329: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24330: LD_ADDR_VAR 0 8
24334: PUSH
24335: LD_INT 81
24337: PUSH
24338: LD_VAR 0 1
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 92
24349: PUSH
24350: LD_VAR 0 2
24354: PUSH
24355: LD_VAR 0 3
24359: PUSH
24360: LD_VAR 0 4
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 3
24373: PUSH
24374: LD_INT 21
24376: PUSH
24377: LD_INT 3
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: PPUSH
24393: CALL_OW 69
24397: ST_TO_ADDR
// if not tmp then
24398: LD_VAR 0 8
24402: NOT
24403: IFFALSE 24407
// exit ;
24405: GO 25961
// for i in tmp do
24407: LD_ADDR_VAR 0 6
24411: PUSH
24412: LD_VAR 0 8
24416: PUSH
24417: FOR_IN
24418: IFFALSE 25936
// begin points := [ 0 , 0 , 0 ] ;
24420: LD_ADDR_VAR 0 9
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: ST_TO_ADDR
// bpoints := 1 ;
24439: LD_ADDR_VAR 0 10
24443: PUSH
24444: LD_INT 1
24446: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24447: LD_VAR 0 6
24451: PPUSH
24452: CALL_OW 247
24456: PUSH
24457: LD_INT 1
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 25043
24465: POP
// begin if GetClass ( i ) = 1 then
24466: LD_VAR 0 6
24470: PPUSH
24471: CALL_OW 257
24475: PUSH
24476: LD_INT 1
24478: EQUAL
24479: IFFALSE 24500
// points := [ 10 , 5 , 3 ] ;
24481: LD_ADDR_VAR 0 9
24485: PUSH
24486: LD_INT 10
24488: PUSH
24489: LD_INT 5
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24500: LD_VAR 0 6
24504: PPUSH
24505: CALL_OW 257
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: LD_INT 4
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: IN
24524: IFFALSE 24545
// points := [ 3 , 2 , 1 ] ;
24526: LD_ADDR_VAR 0 9
24530: PUSH
24531: LD_INT 3
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24545: LD_VAR 0 6
24549: PPUSH
24550: CALL_OW 257
24554: PUSH
24555: LD_INT 5
24557: EQUAL
24558: IFFALSE 24579
// points := [ 130 , 5 , 2 ] ;
24560: LD_ADDR_VAR 0 9
24564: PUSH
24565: LD_INT 130
24567: PUSH
24568: LD_INT 5
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24579: LD_VAR 0 6
24583: PPUSH
24584: CALL_OW 257
24588: PUSH
24589: LD_INT 8
24591: EQUAL
24592: IFFALSE 24613
// points := [ 35 , 35 , 30 ] ;
24594: LD_ADDR_VAR 0 9
24598: PUSH
24599: LD_INT 35
24601: PUSH
24602: LD_INT 35
24604: PUSH
24605: LD_INT 30
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24613: LD_VAR 0 6
24617: PPUSH
24618: CALL_OW 257
24622: PUSH
24623: LD_INT 9
24625: EQUAL
24626: IFFALSE 24647
// points := [ 20 , 55 , 40 ] ;
24628: LD_ADDR_VAR 0 9
24632: PUSH
24633: LD_INT 20
24635: PUSH
24636: LD_INT 55
24638: PUSH
24639: LD_INT 40
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24647: LD_VAR 0 6
24651: PPUSH
24652: CALL_OW 257
24656: PUSH
24657: LD_INT 12
24659: PUSH
24660: LD_INT 16
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: IN
24667: IFFALSE 24688
// points := [ 5 , 3 , 2 ] ;
24669: LD_ADDR_VAR 0 9
24673: PUSH
24674: LD_INT 5
24676: PUSH
24677: LD_INT 3
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24688: LD_VAR 0 6
24692: PPUSH
24693: CALL_OW 257
24697: PUSH
24698: LD_INT 17
24700: EQUAL
24701: IFFALSE 24722
// points := [ 100 , 50 , 75 ] ;
24703: LD_ADDR_VAR 0 9
24707: PUSH
24708: LD_INT 100
24710: PUSH
24711: LD_INT 50
24713: PUSH
24714: LD_INT 75
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24722: LD_VAR 0 6
24726: PPUSH
24727: CALL_OW 257
24731: PUSH
24732: LD_INT 15
24734: EQUAL
24735: IFFALSE 24756
// points := [ 10 , 5 , 3 ] ;
24737: LD_ADDR_VAR 0 9
24741: PUSH
24742: LD_INT 10
24744: PUSH
24745: LD_INT 5
24747: PUSH
24748: LD_INT 3
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24756: LD_VAR 0 6
24760: PPUSH
24761: CALL_OW 257
24765: PUSH
24766: LD_INT 14
24768: EQUAL
24769: IFFALSE 24790
// points := [ 10 , 0 , 0 ] ;
24771: LD_ADDR_VAR 0 9
24775: PUSH
24776: LD_INT 10
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24790: LD_VAR 0 6
24794: PPUSH
24795: CALL_OW 257
24799: PUSH
24800: LD_INT 11
24802: EQUAL
24803: IFFALSE 24824
// points := [ 30 , 10 , 5 ] ;
24805: LD_ADDR_VAR 0 9
24809: PUSH
24810: LD_INT 30
24812: PUSH
24813: LD_INT 10
24815: PUSH
24816: LD_INT 5
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24824: LD_VAR 0 1
24828: PPUSH
24829: LD_INT 5
24831: PPUSH
24832: CALL_OW 321
24836: PUSH
24837: LD_INT 2
24839: EQUAL
24840: IFFALSE 24857
// bpoints := bpoints * 1.8 ;
24842: LD_ADDR_VAR 0 10
24846: PUSH
24847: LD_VAR 0 10
24851: PUSH
24852: LD_REAL  1.80000000000000E+0000
24855: MUL
24856: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24857: LD_VAR 0 6
24861: PPUSH
24862: CALL_OW 257
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 3
24875: PUSH
24876: LD_INT 4
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: IN
24885: PUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: LD_INT 51
24893: PPUSH
24894: CALL_OW 321
24898: PUSH
24899: LD_INT 2
24901: EQUAL
24902: AND
24903: IFFALSE 24920
// bpoints := bpoints * 1.2 ;
24905: LD_ADDR_VAR 0 10
24909: PUSH
24910: LD_VAR 0 10
24914: PUSH
24915: LD_REAL  1.20000000000000E+0000
24918: MUL
24919: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24920: LD_VAR 0 6
24924: PPUSH
24925: CALL_OW 257
24929: PUSH
24930: LD_INT 5
24932: PUSH
24933: LD_INT 7
24935: PUSH
24936: LD_INT 9
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: IN
24944: PUSH
24945: LD_VAR 0 1
24949: PPUSH
24950: LD_INT 52
24952: PPUSH
24953: CALL_OW 321
24957: PUSH
24958: LD_INT 2
24960: EQUAL
24961: AND
24962: IFFALSE 24979
// bpoints := bpoints * 1.5 ;
24964: LD_ADDR_VAR 0 10
24968: PUSH
24969: LD_VAR 0 10
24973: PUSH
24974: LD_REAL  1.50000000000000E+0000
24977: MUL
24978: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24979: LD_VAR 0 1
24983: PPUSH
24984: LD_INT 66
24986: PPUSH
24987: CALL_OW 321
24991: PUSH
24992: LD_INT 2
24994: EQUAL
24995: IFFALSE 25012
// bpoints := bpoints * 1.1 ;
24997: LD_ADDR_VAR 0 10
25001: PUSH
25002: LD_VAR 0 10
25006: PUSH
25007: LD_REAL  1.10000000000000E+0000
25010: MUL
25011: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25012: LD_ADDR_VAR 0 10
25016: PUSH
25017: LD_VAR 0 10
25021: PUSH
25022: LD_VAR 0 6
25026: PPUSH
25027: LD_INT 1
25029: PPUSH
25030: CALL_OW 259
25034: PUSH
25035: LD_REAL  1.15000000000000E+0000
25038: MUL
25039: MUL
25040: ST_TO_ADDR
// end ; unit_vehicle :
25041: GO 25865
25043: LD_INT 2
25045: DOUBLE
25046: EQUAL
25047: IFTRUE 25051
25049: GO 25853
25051: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25052: LD_VAR 0 6
25056: PPUSH
25057: CALL_OW 264
25061: PUSH
25062: LD_INT 2
25064: PUSH
25065: LD_INT 42
25067: PUSH
25068: LD_INT 24
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: IN
25076: IFFALSE 25097
// points := [ 25 , 5 , 3 ] ;
25078: LD_ADDR_VAR 0 9
25082: PUSH
25083: LD_INT 25
25085: PUSH
25086: LD_INT 5
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25097: LD_VAR 0 6
25101: PPUSH
25102: CALL_OW 264
25106: PUSH
25107: LD_INT 4
25109: PUSH
25110: LD_INT 43
25112: PUSH
25113: LD_INT 25
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: IN
25121: IFFALSE 25142
// points := [ 40 , 15 , 5 ] ;
25123: LD_ADDR_VAR 0 9
25127: PUSH
25128: LD_INT 40
25130: PUSH
25131: LD_INT 15
25133: PUSH
25134: LD_INT 5
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25142: LD_VAR 0 6
25146: PPUSH
25147: CALL_OW 264
25151: PUSH
25152: LD_INT 3
25154: PUSH
25155: LD_INT 23
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: IN
25162: IFFALSE 25183
// points := [ 7 , 25 , 8 ] ;
25164: LD_ADDR_VAR 0 9
25168: PUSH
25169: LD_INT 7
25171: PUSH
25172: LD_INT 25
25174: PUSH
25175: LD_INT 8
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
25183: LD_VAR 0 6
25187: PPUSH
25188: CALL_OW 264
25192: PUSH
25193: LD_INT 5
25195: PUSH
25196: LD_INT 27
25198: PUSH
25199: LD_INT 44
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: IN
25207: IFFALSE 25228
// points := [ 14 , 50 , 16 ] ;
25209: LD_ADDR_VAR 0 9
25213: PUSH
25214: LD_INT 14
25216: PUSH
25217: LD_INT 50
25219: PUSH
25220: LD_INT 16
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
25228: LD_VAR 0 6
25232: PPUSH
25233: CALL_OW 264
25237: PUSH
25238: LD_INT 6
25240: PUSH
25241: LD_INT 46
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: IN
25248: IFFALSE 25269
// points := [ 32 , 120 , 70 ] ;
25250: LD_ADDR_VAR 0 9
25254: PUSH
25255: LD_INT 32
25257: PUSH
25258: LD_INT 120
25260: PUSH
25261: LD_INT 70
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
25269: LD_VAR 0 6
25273: PPUSH
25274: CALL_OW 264
25278: PUSH
25279: LD_INT 7
25281: PUSH
25282: LD_INT 28
25284: PUSH
25285: LD_INT 45
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: IN
25293: IFFALSE 25314
// points := [ 35 , 20 , 45 ] ;
25295: LD_ADDR_VAR 0 9
25299: PUSH
25300: LD_INT 35
25302: PUSH
25303: LD_INT 20
25305: PUSH
25306: LD_INT 45
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
25314: LD_VAR 0 6
25318: PPUSH
25319: CALL_OW 264
25323: PUSH
25324: LD_INT 47
25326: PUSH
25327: EMPTY
25328: LIST
25329: IN
25330: IFFALSE 25351
// points := [ 67 , 45 , 75 ] ;
25332: LD_ADDR_VAR 0 9
25336: PUSH
25337: LD_INT 67
25339: PUSH
25340: LD_INT 45
25342: PUSH
25343: LD_INT 75
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25351: LD_VAR 0 6
25355: PPUSH
25356: CALL_OW 264
25360: PUSH
25361: LD_INT 26
25363: PUSH
25364: EMPTY
25365: LIST
25366: IN
25367: IFFALSE 25388
// points := [ 120 , 30 , 80 ] ;
25369: LD_ADDR_VAR 0 9
25373: PUSH
25374: LD_INT 120
25376: PUSH
25377: LD_INT 30
25379: PUSH
25380: LD_INT 80
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25388: LD_VAR 0 6
25392: PPUSH
25393: CALL_OW 264
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: EMPTY
25402: LIST
25403: IN
25404: IFFALSE 25425
// points := [ 40 , 1 , 1 ] ;
25406: LD_ADDR_VAR 0 9
25410: PUSH
25411: LD_INT 40
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25425: LD_VAR 0 6
25429: PPUSH
25430: CALL_OW 264
25434: PUSH
25435: LD_INT 29
25437: PUSH
25438: EMPTY
25439: LIST
25440: IN
25441: IFFALSE 25462
// points := [ 70 , 200 , 400 ] ;
25443: LD_ADDR_VAR 0 9
25447: PUSH
25448: LD_INT 70
25450: PUSH
25451: LD_INT 200
25453: PUSH
25454: LD_INT 400
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25462: LD_VAR 0 6
25466: PPUSH
25467: CALL_OW 264
25471: PUSH
25472: LD_INT 14
25474: PUSH
25475: LD_INT 53
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: IN
25482: IFFALSE 25503
// points := [ 40 , 10 , 20 ] ;
25484: LD_ADDR_VAR 0 9
25488: PUSH
25489: LD_INT 40
25491: PUSH
25492: LD_INT 10
25494: PUSH
25495: LD_INT 20
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25503: LD_VAR 0 6
25507: PPUSH
25508: CALL_OW 264
25512: PUSH
25513: LD_INT 9
25515: PUSH
25516: EMPTY
25517: LIST
25518: IN
25519: IFFALSE 25540
// points := [ 5 , 70 , 20 ] ;
25521: LD_ADDR_VAR 0 9
25525: PUSH
25526: LD_INT 5
25528: PUSH
25529: LD_INT 70
25531: PUSH
25532: LD_INT 20
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: LIST
25539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25540: LD_VAR 0 6
25544: PPUSH
25545: CALL_OW 264
25549: PUSH
25550: LD_INT 10
25552: PUSH
25553: EMPTY
25554: LIST
25555: IN
25556: IFFALSE 25577
// points := [ 35 , 110 , 70 ] ;
25558: LD_ADDR_VAR 0 9
25562: PUSH
25563: LD_INT 35
25565: PUSH
25566: LD_INT 110
25568: PUSH
25569: LD_INT 70
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25577: LD_VAR 0 6
25581: PPUSH
25582: CALL_OW 265
25586: PUSH
25587: LD_INT 25
25589: EQUAL
25590: IFFALSE 25611
// points := [ 80 , 65 , 100 ] ;
25592: LD_ADDR_VAR 0 9
25596: PUSH
25597: LD_INT 80
25599: PUSH
25600: LD_INT 65
25602: PUSH
25603: LD_INT 100
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25611: LD_VAR 0 6
25615: PPUSH
25616: CALL_OW 263
25620: PUSH
25621: LD_INT 1
25623: EQUAL
25624: IFFALSE 25659
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25626: LD_ADDR_VAR 0 10
25630: PUSH
25631: LD_VAR 0 10
25635: PUSH
25636: LD_VAR 0 6
25640: PPUSH
25641: CALL_OW 311
25645: PPUSH
25646: LD_INT 3
25648: PPUSH
25649: CALL_OW 259
25653: PUSH
25654: LD_INT 4
25656: MUL
25657: MUL
25658: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25659: LD_VAR 0 6
25663: PPUSH
25664: CALL_OW 263
25668: PUSH
25669: LD_INT 2
25671: EQUAL
25672: IFFALSE 25723
// begin j := IsControledBy ( i ) ;
25674: LD_ADDR_VAR 0 7
25678: PUSH
25679: LD_VAR 0 6
25683: PPUSH
25684: CALL_OW 312
25688: ST_TO_ADDR
// if j then
25689: LD_VAR 0 7
25693: IFFALSE 25723
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25695: LD_ADDR_VAR 0 10
25699: PUSH
25700: LD_VAR 0 10
25704: PUSH
25705: LD_VAR 0 7
25709: PPUSH
25710: LD_INT 3
25712: PPUSH
25713: CALL_OW 259
25717: PUSH
25718: LD_INT 3
25720: MUL
25721: MUL
25722: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25723: LD_VAR 0 6
25727: PPUSH
25728: CALL_OW 264
25732: PUSH
25733: LD_INT 5
25735: PUSH
25736: LD_INT 6
25738: PUSH
25739: LD_INT 46
25741: PUSH
25742: LD_INT 44
25744: PUSH
25745: LD_INT 47
25747: PUSH
25748: LD_INT 45
25750: PUSH
25751: LD_INT 28
25753: PUSH
25754: LD_INT 7
25756: PUSH
25757: LD_INT 27
25759: PUSH
25760: LD_INT 29
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: IN
25775: PUSH
25776: LD_VAR 0 1
25780: PPUSH
25781: LD_INT 52
25783: PPUSH
25784: CALL_OW 321
25788: PUSH
25789: LD_INT 2
25791: EQUAL
25792: AND
25793: IFFALSE 25810
// bpoints := bpoints * 1.2 ;
25795: LD_ADDR_VAR 0 10
25799: PUSH
25800: LD_VAR 0 10
25804: PUSH
25805: LD_REAL  1.20000000000000E+0000
25808: MUL
25809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25810: LD_VAR 0 6
25814: PPUSH
25815: CALL_OW 264
25819: PUSH
25820: LD_INT 6
25822: PUSH
25823: LD_INT 46
25825: PUSH
25826: LD_INT 47
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: IN
25834: IFFALSE 25851
// bpoints := bpoints * 1.2 ;
25836: LD_ADDR_VAR 0 10
25840: PUSH
25841: LD_VAR 0 10
25845: PUSH
25846: LD_REAL  1.20000000000000E+0000
25849: MUL
25850: ST_TO_ADDR
// end ; unit_building :
25851: GO 25865
25853: LD_INT 3
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25864
25861: POP
// ; end ;
25862: GO 25865
25864: POP
// for j = 1 to 3 do
25865: LD_ADDR_VAR 0 7
25869: PUSH
25870: DOUBLE
25871: LD_INT 1
25873: DEC
25874: ST_TO_ADDR
25875: LD_INT 3
25877: PUSH
25878: FOR_TO
25879: IFFALSE 25932
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25881: LD_ADDR_VAR 0 5
25885: PUSH
25886: LD_VAR 0 5
25890: PPUSH
25891: LD_VAR 0 7
25895: PPUSH
25896: LD_VAR 0 5
25900: PUSH
25901: LD_VAR 0 7
25905: ARRAY
25906: PUSH
25907: LD_VAR 0 9
25911: PUSH
25912: LD_VAR 0 7
25916: ARRAY
25917: PUSH
25918: LD_VAR 0 10
25922: MUL
25923: PLUS
25924: PPUSH
25925: CALL_OW 1
25929: ST_TO_ADDR
25930: GO 25878
25932: POP
25933: POP
// end ;
25934: GO 24417
25936: POP
25937: POP
// result := Replace ( result , 4 , tmp ) ;
25938: LD_ADDR_VAR 0 5
25942: PUSH
25943: LD_VAR 0 5
25947: PPUSH
25948: LD_INT 4
25950: PPUSH
25951: LD_VAR 0 8
25955: PPUSH
25956: CALL_OW 1
25960: ST_TO_ADDR
// end ;
25961: LD_VAR 0 5
25965: RET
// export function DangerAtRange ( unit , range ) ; begin
25966: LD_INT 0
25968: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25969: LD_ADDR_VAR 0 3
25973: PUSH
25974: LD_VAR 0 1
25978: PPUSH
25979: CALL_OW 255
25983: PPUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL_OW 250
25993: PPUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 251
26003: PPUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: CALL 24269 0 4
26013: ST_TO_ADDR
// end ;
26014: LD_VAR 0 3
26018: RET
// export function DangerInArea ( side , area ) ; begin
26019: LD_INT 0
26021: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26022: LD_ADDR_VAR 0 3
26026: PUSH
26027: LD_VAR 0 2
26031: PPUSH
26032: LD_INT 81
26034: PUSH
26035: LD_VAR 0 1
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PPUSH
26044: CALL_OW 70
26048: ST_TO_ADDR
// end ;
26049: LD_VAR 0 3
26053: RET
// export function IsExtension ( b ) ; begin
26054: LD_INT 0
26056: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26057: LD_ADDR_VAR 0 2
26061: PUSH
26062: LD_VAR 0 1
26066: PUSH
26067: LD_INT 23
26069: PUSH
26070: LD_INT 20
26072: PUSH
26073: LD_INT 22
26075: PUSH
26076: LD_INT 17
26078: PUSH
26079: LD_INT 24
26081: PUSH
26082: LD_INT 21
26084: PUSH
26085: LD_INT 19
26087: PUSH
26088: LD_INT 16
26090: PUSH
26091: LD_INT 25
26093: PUSH
26094: LD_INT 18
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: IN
26109: ST_TO_ADDR
// end ;
26110: LD_VAR 0 2
26114: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26115: LD_INT 0
26117: PPUSH
26118: PPUSH
26119: PPUSH
// result := [ ] ;
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: EMPTY
26126: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26127: LD_ADDR_VAR 0 4
26131: PUSH
26132: LD_VAR 0 2
26136: PPUSH
26137: LD_INT 21
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PPUSH
26147: CALL_OW 70
26151: ST_TO_ADDR
// if not tmp then
26152: LD_VAR 0 4
26156: NOT
26157: IFFALSE 26161
// exit ;
26159: GO 26219
// for i in tmp do
26161: LD_ADDR_VAR 0 5
26165: PUSH
26166: LD_VAR 0 4
26170: PUSH
26171: FOR_IN
26172: IFFALSE 26207
// if GetBase ( i ) <> base then
26174: LD_VAR 0 5
26178: PPUSH
26179: CALL_OW 274
26183: PUSH
26184: LD_VAR 0 1
26188: NONEQUAL
26189: IFFALSE 26205
// ComLinkToBase ( base , i ) ;
26191: LD_VAR 0 1
26195: PPUSH
26196: LD_VAR 0 5
26200: PPUSH
26201: CALL_OW 169
26205: GO 26171
26207: POP
26208: POP
// result := tmp ;
26209: LD_ADDR_VAR 0 3
26213: PUSH
26214: LD_VAR 0 4
26218: ST_TO_ADDR
// end ;
26219: LD_VAR 0 3
26223: RET
// export function ComComplete ( unit , b ) ; var i ; begin
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
// if BuildingStatus ( b ) = bs_build then
26228: LD_VAR 0 2
26232: PPUSH
26233: CALL_OW 461
26237: PUSH
26238: LD_INT 1
26240: EQUAL
26241: IFFALSE 26301
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
26243: LD_VAR 0 1
26247: PPUSH
26248: LD_STRING h
26250: PUSH
26251: LD_VAR 0 2
26255: PPUSH
26256: CALL_OW 250
26260: PUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: CALL_OW 251
26270: PUSH
26271: LD_VAR 0 2
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: PPUSH
26297: CALL_OW 446
// end ;
26301: LD_VAR 0 3
26305: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26306: LD_INT 0
26308: PPUSH
26309: PPUSH
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
26314: LD_VAR 0 1
26318: NOT
26319: PUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 263
26329: PUSH
26330: LD_INT 2
26332: EQUAL
26333: NOT
26334: OR
26335: IFFALSE 26339
// exit ;
26337: GO 26655
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26339: LD_ADDR_VAR 0 6
26343: PUSH
26344: LD_INT 22
26346: PUSH
26347: LD_VAR 0 1
26351: PPUSH
26352: CALL_OW 255
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 30
26366: PUSH
26367: LD_INT 36
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 34
26376: PUSH
26377: LD_INT 31
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PPUSH
26393: CALL_OW 69
26397: ST_TO_ADDR
// if not tmp then
26398: LD_VAR 0 6
26402: NOT
26403: IFFALSE 26407
// exit ;
26405: GO 26655
// result := [ ] ;
26407: LD_ADDR_VAR 0 2
26411: PUSH
26412: EMPTY
26413: ST_TO_ADDR
// for i in tmp do
26414: LD_ADDR_VAR 0 3
26418: PUSH
26419: LD_VAR 0 6
26423: PUSH
26424: FOR_IN
26425: IFFALSE 26496
// begin t := UnitsInside ( i ) ;
26427: LD_ADDR_VAR 0 4
26431: PUSH
26432: LD_VAR 0 3
26436: PPUSH
26437: CALL_OW 313
26441: ST_TO_ADDR
// if t then
26442: LD_VAR 0 4
26446: IFFALSE 26494
// for j in t do
26448: LD_ADDR_VAR 0 7
26452: PUSH
26453: LD_VAR 0 4
26457: PUSH
26458: FOR_IN
26459: IFFALSE 26492
// result := Insert ( result , result + 1 , j ) ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_VAR 0 2
26470: PPUSH
26471: LD_VAR 0 2
26475: PUSH
26476: LD_INT 1
26478: PLUS
26479: PPUSH
26480: LD_VAR 0 7
26484: PPUSH
26485: CALL_OW 2
26489: ST_TO_ADDR
26490: GO 26458
26492: POP
26493: POP
// end ;
26494: GO 26424
26496: POP
26497: POP
// if not result then
26498: LD_VAR 0 2
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26655
// mech := result [ 1 ] ;
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: LD_INT 1
26519: ARRAY
26520: ST_TO_ADDR
// if result > 1 then
26521: LD_VAR 0 2
26525: PUSH
26526: LD_INT 1
26528: GREATER
26529: IFFALSE 26641
// for i = 2 to result do
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: DOUBLE
26537: LD_INT 2
26539: DEC
26540: ST_TO_ADDR
26541: LD_VAR 0 2
26545: PUSH
26546: FOR_TO
26547: IFFALSE 26639
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26549: LD_ADDR_VAR 0 4
26553: PUSH
26554: LD_VAR 0 2
26558: PUSH
26559: LD_VAR 0 3
26563: ARRAY
26564: PPUSH
26565: LD_INT 3
26567: PPUSH
26568: CALL_OW 259
26572: PUSH
26573: LD_VAR 0 2
26577: PUSH
26578: LD_VAR 0 3
26582: ARRAY
26583: PPUSH
26584: CALL_OW 432
26588: MINUS
26589: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26590: LD_VAR 0 4
26594: PUSH
26595: LD_VAR 0 5
26599: PPUSH
26600: LD_INT 3
26602: PPUSH
26603: CALL_OW 259
26607: PUSH
26608: LD_VAR 0 5
26612: PPUSH
26613: CALL_OW 432
26617: MINUS
26618: GREATEREQUAL
26619: IFFALSE 26637
// mech := result [ i ] ;
26621: LD_ADDR_VAR 0 5
26625: PUSH
26626: LD_VAR 0 2
26630: PUSH
26631: LD_VAR 0 3
26635: ARRAY
26636: ST_TO_ADDR
// end ;
26637: GO 26546
26639: POP
26640: POP
// ComLinkTo ( vehicle , mech ) ;
26641: LD_VAR 0 1
26645: PPUSH
26646: LD_VAR 0 5
26650: PPUSH
26651: CALL_OW 135
// end ;
26655: LD_VAR 0 2
26659: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26660: LD_INT 0
26662: PPUSH
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
// result := [ ] ;
26675: LD_ADDR_VAR 0 7
26679: PUSH
26680: EMPTY
26681: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26682: LD_VAR 0 1
26686: PPUSH
26687: CALL_OW 266
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: IN
26702: NOT
26703: IFFALSE 26707
// exit ;
26705: GO 28338
// if name then
26707: LD_VAR 0 3
26711: IFFALSE 26727
// SetBName ( base_dep , name ) ;
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_VAR 0 3
26722: PPUSH
26723: CALL_OW 500
// base := GetBase ( base_dep ) ;
26727: LD_ADDR_VAR 0 15
26731: PUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 274
26741: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26742: LD_ADDR_VAR 0 16
26746: PUSH
26747: LD_VAR 0 1
26751: PPUSH
26752: CALL_OW 255
26756: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26757: LD_ADDR_VAR 0 17
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 248
26771: ST_TO_ADDR
// if sources then
26772: LD_VAR 0 5
26776: IFFALSE 26823
// for i = 1 to 3 do
26778: LD_ADDR_VAR 0 8
26782: PUSH
26783: DOUBLE
26784: LD_INT 1
26786: DEC
26787: ST_TO_ADDR
26788: LD_INT 3
26790: PUSH
26791: FOR_TO
26792: IFFALSE 26821
// AddResourceType ( base , i , sources [ i ] ) ;
26794: LD_VAR 0 15
26798: PPUSH
26799: LD_VAR 0 8
26803: PPUSH
26804: LD_VAR 0 5
26808: PUSH
26809: LD_VAR 0 8
26813: ARRAY
26814: PPUSH
26815: CALL_OW 276
26819: GO 26791
26821: POP
26822: POP
// buildings := GetBaseBuildings ( base , area ) ;
26823: LD_ADDR_VAR 0 18
26827: PUSH
26828: LD_VAR 0 15
26832: PPUSH
26833: LD_VAR 0 2
26837: PPUSH
26838: CALL 26115 0 2
26842: ST_TO_ADDR
// InitHc ;
26843: CALL_OW 19
// InitUc ;
26847: CALL_OW 18
// uc_side := side ;
26851: LD_ADDR_OWVAR 20
26855: PUSH
26856: LD_VAR 0 16
26860: ST_TO_ADDR
// uc_nation := nation ;
26861: LD_ADDR_OWVAR 21
26865: PUSH
26866: LD_VAR 0 17
26870: ST_TO_ADDR
// if buildings then
26871: LD_VAR 0 18
26875: IFFALSE 28197
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26877: LD_ADDR_VAR 0 19
26881: PUSH
26882: LD_VAR 0 18
26886: PPUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 30
26892: PUSH
26893: LD_INT 29
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_INT 30
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: PPUSH
26915: CALL_OW 72
26919: ST_TO_ADDR
// if tmp then
26920: LD_VAR 0 19
26924: IFFALSE 26972
// for i in tmp do
26926: LD_ADDR_VAR 0 8
26930: PUSH
26931: LD_VAR 0 19
26935: PUSH
26936: FOR_IN
26937: IFFALSE 26970
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26939: LD_VAR 0 8
26943: PPUSH
26944: CALL_OW 250
26948: PPUSH
26949: LD_VAR 0 8
26953: PPUSH
26954: CALL_OW 251
26958: PPUSH
26959: LD_VAR 0 16
26963: PPUSH
26964: CALL_OW 441
26968: GO 26936
26970: POP
26971: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26972: LD_VAR 0 18
26976: PPUSH
26977: LD_INT 2
26979: PUSH
26980: LD_INT 30
26982: PUSH
26983: LD_INT 32
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 30
26992: PUSH
26993: LD_INT 33
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: PPUSH
27005: CALL_OW 72
27009: IFFALSE 27097
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27011: LD_ADDR_VAR 0 8
27015: PUSH
27016: LD_VAR 0 18
27020: PPUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 30
27026: PUSH
27027: LD_INT 32
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 30
27036: PUSH
27037: LD_INT 33
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 72
27053: PUSH
27054: FOR_IN
27055: IFFALSE 27095
// begin if not GetBWeapon ( i ) then
27057: LD_VAR 0 8
27061: PPUSH
27062: CALL_OW 269
27066: NOT
27067: IFFALSE 27093
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27069: LD_VAR 0 8
27073: PPUSH
27074: LD_VAR 0 8
27078: PPUSH
27079: LD_VAR 0 2
27083: PPUSH
27084: CALL 28343 0 2
27088: PPUSH
27089: CALL_OW 431
// end ;
27093: GO 27054
27095: POP
27096: POP
// end ; for i = 1 to personel do
27097: LD_ADDR_VAR 0 8
27101: PUSH
27102: DOUBLE
27103: LD_INT 1
27105: DEC
27106: ST_TO_ADDR
27107: LD_VAR 0 6
27111: PUSH
27112: FOR_TO
27113: IFFALSE 28177
// begin if i > 4 then
27115: LD_VAR 0 8
27119: PUSH
27120: LD_INT 4
27122: GREATER
27123: IFFALSE 27127
// break ;
27125: GO 28177
// case i of 1 :
27127: LD_VAR 0 8
27131: PUSH
27132: LD_INT 1
27134: DOUBLE
27135: EQUAL
27136: IFTRUE 27140
27138: GO 27220
27140: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27141: LD_ADDR_VAR 0 12
27145: PUSH
27146: LD_VAR 0 18
27150: PPUSH
27151: LD_INT 22
27153: PUSH
27154: LD_VAR 0 16
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 58
27165: PUSH
27166: EMPTY
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 30
27174: PUSH
27175: LD_INT 32
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 30
27184: PUSH
27185: LD_INT 4
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 30
27194: PUSH
27195: LD_INT 5
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 72
27217: ST_TO_ADDR
27218: GO 27442
27220: LD_INT 2
27222: DOUBLE
27223: EQUAL
27224: IFTRUE 27228
27226: GO 27290
27228: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
27229: LD_ADDR_VAR 0 12
27233: PUSH
27234: LD_VAR 0 18
27238: PPUSH
27239: LD_INT 22
27241: PUSH
27242: LD_VAR 0 16
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 30
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 30
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 72
27287: ST_TO_ADDR
27288: GO 27442
27290: LD_INT 3
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 27360
27298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27299: LD_ADDR_VAR 0 12
27303: PUSH
27304: LD_VAR 0 18
27308: PPUSH
27309: LD_INT 22
27311: PUSH
27312: LD_VAR 0 16
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 30
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 30
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PPUSH
27353: CALL_OW 72
27357: ST_TO_ADDR
27358: GO 27442
27360: LD_INT 4
27362: DOUBLE
27363: EQUAL
27364: IFTRUE 27368
27366: GO 27441
27368: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27369: LD_ADDR_VAR 0 12
27373: PUSH
27374: LD_VAR 0 18
27378: PPUSH
27379: LD_INT 22
27381: PUSH
27382: LD_VAR 0 16
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 30
27396: PUSH
27397: LD_INT 6
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 30
27406: PUSH
27407: LD_INT 7
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 30
27416: PUSH
27417: LD_INT 8
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PPUSH
27434: CALL_OW 72
27438: ST_TO_ADDR
27439: GO 27442
27441: POP
// if i = 1 then
27442: LD_VAR 0 8
27446: PUSH
27447: LD_INT 1
27449: EQUAL
27450: IFFALSE 27561
// begin tmp := [ ] ;
27452: LD_ADDR_VAR 0 19
27456: PUSH
27457: EMPTY
27458: ST_TO_ADDR
// for j in f do
27459: LD_ADDR_VAR 0 9
27463: PUSH
27464: LD_VAR 0 12
27468: PUSH
27469: FOR_IN
27470: IFFALSE 27543
// if GetBType ( j ) = b_bunker then
27472: LD_VAR 0 9
27476: PPUSH
27477: CALL_OW 266
27481: PUSH
27482: LD_INT 32
27484: EQUAL
27485: IFFALSE 27512
// tmp := Insert ( tmp , 1 , j ) else
27487: LD_ADDR_VAR 0 19
27491: PUSH
27492: LD_VAR 0 19
27496: PPUSH
27497: LD_INT 1
27499: PPUSH
27500: LD_VAR 0 9
27504: PPUSH
27505: CALL_OW 2
27509: ST_TO_ADDR
27510: GO 27541
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27512: LD_ADDR_VAR 0 19
27516: PUSH
27517: LD_VAR 0 19
27521: PPUSH
27522: LD_VAR 0 19
27526: PUSH
27527: LD_INT 1
27529: PLUS
27530: PPUSH
27531: LD_VAR 0 9
27535: PPUSH
27536: CALL_OW 2
27540: ST_TO_ADDR
27541: GO 27469
27543: POP
27544: POP
// if tmp then
27545: LD_VAR 0 19
27549: IFFALSE 27561
// f := tmp ;
27551: LD_ADDR_VAR 0 12
27555: PUSH
27556: LD_VAR 0 19
27560: ST_TO_ADDR
// end ; x := personel [ i ] ;
27561: LD_ADDR_VAR 0 13
27565: PUSH
27566: LD_VAR 0 6
27570: PUSH
27571: LD_VAR 0 8
27575: ARRAY
27576: ST_TO_ADDR
// if x = - 1 then
27577: LD_VAR 0 13
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: EQUAL
27586: IFFALSE 27795
// begin for j in f do
27588: LD_ADDR_VAR 0 9
27592: PUSH
27593: LD_VAR 0 12
27597: PUSH
27598: FOR_IN
27599: IFFALSE 27791
// repeat InitHc ;
27601: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27605: LD_VAR 0 9
27609: PPUSH
27610: CALL_OW 266
27614: PUSH
27615: LD_INT 5
27617: EQUAL
27618: IFFALSE 27688
// begin if UnitsInside ( j ) < 3 then
27620: LD_VAR 0 9
27624: PPUSH
27625: CALL_OW 313
27629: PUSH
27630: LD_INT 3
27632: LESS
27633: IFFALSE 27669
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27635: LD_INT 0
27637: PPUSH
27638: LD_INT 5
27640: PUSH
27641: LD_INT 8
27643: PUSH
27644: LD_INT 9
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: PUSH
27652: LD_VAR 0 17
27656: ARRAY
27657: PPUSH
27658: LD_VAR 0 4
27662: PPUSH
27663: CALL_OW 380
27667: GO 27686
// PrepareHuman ( false , i , skill ) ;
27669: LD_INT 0
27671: PPUSH
27672: LD_VAR 0 8
27676: PPUSH
27677: LD_VAR 0 4
27681: PPUSH
27682: CALL_OW 380
// end else
27686: GO 27705
// PrepareHuman ( false , i , skill ) ;
27688: LD_INT 0
27690: PPUSH
27691: LD_VAR 0 8
27695: PPUSH
27696: LD_VAR 0 4
27700: PPUSH
27701: CALL_OW 380
// un := CreateHuman ;
27705: LD_ADDR_VAR 0 14
27709: PUSH
27710: CALL_OW 44
27714: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27715: LD_ADDR_VAR 0 7
27719: PUSH
27720: LD_VAR 0 7
27724: PPUSH
27725: LD_INT 1
27727: PPUSH
27728: LD_VAR 0 14
27732: PPUSH
27733: CALL_OW 2
27737: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27738: LD_VAR 0 14
27742: PPUSH
27743: LD_VAR 0 9
27747: PPUSH
27748: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27752: LD_VAR 0 9
27756: PPUSH
27757: CALL_OW 313
27761: PUSH
27762: LD_INT 6
27764: EQUAL
27765: PUSH
27766: LD_VAR 0 9
27770: PPUSH
27771: CALL_OW 266
27775: PUSH
27776: LD_INT 32
27778: PUSH
27779: LD_INT 31
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: IN
27786: OR
27787: IFFALSE 27601
27789: GO 27598
27791: POP
27792: POP
// end else
27793: GO 28175
// for j = 1 to x do
27795: LD_ADDR_VAR 0 9
27799: PUSH
27800: DOUBLE
27801: LD_INT 1
27803: DEC
27804: ST_TO_ADDR
27805: LD_VAR 0 13
27809: PUSH
27810: FOR_TO
27811: IFFALSE 28173
// begin InitHc ;
27813: CALL_OW 19
// if not f then
27817: LD_VAR 0 12
27821: NOT
27822: IFFALSE 27911
// begin PrepareHuman ( false , i , skill ) ;
27824: LD_INT 0
27826: PPUSH
27827: LD_VAR 0 8
27831: PPUSH
27832: LD_VAR 0 4
27836: PPUSH
27837: CALL_OW 380
// un := CreateHuman ;
27841: LD_ADDR_VAR 0 14
27845: PUSH
27846: CALL_OW 44
27850: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27851: LD_ADDR_VAR 0 7
27855: PUSH
27856: LD_VAR 0 7
27860: PPUSH
27861: LD_INT 1
27863: PPUSH
27864: LD_VAR 0 14
27868: PPUSH
27869: CALL_OW 2
27873: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27874: LD_VAR 0 14
27878: PPUSH
27879: LD_VAR 0 1
27883: PPUSH
27884: CALL_OW 250
27888: PPUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 251
27898: PPUSH
27899: LD_INT 10
27901: PPUSH
27902: LD_INT 0
27904: PPUSH
27905: CALL_OW 50
// continue ;
27909: GO 27810
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27911: LD_VAR 0 12
27915: PUSH
27916: LD_INT 1
27918: ARRAY
27919: PPUSH
27920: CALL_OW 313
27924: PUSH
27925: LD_VAR 0 12
27929: PUSH
27930: LD_INT 1
27932: ARRAY
27933: PPUSH
27934: CALL_OW 266
27938: PUSH
27939: LD_INT 32
27941: PUSH
27942: LD_INT 31
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: IN
27949: AND
27950: PUSH
27951: LD_VAR 0 12
27955: PUSH
27956: LD_INT 1
27958: ARRAY
27959: PPUSH
27960: CALL_OW 313
27964: PUSH
27965: LD_INT 6
27967: EQUAL
27968: OR
27969: IFFALSE 27989
// f := Delete ( f , 1 ) ;
27971: LD_ADDR_VAR 0 12
27975: PUSH
27976: LD_VAR 0 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: CALL_OW 3
27988: ST_TO_ADDR
// if not f then
27989: LD_VAR 0 12
27993: NOT
27994: IFFALSE 28012
// begin x := x + 2 ;
27996: LD_ADDR_VAR 0 13
28000: PUSH
28001: LD_VAR 0 13
28005: PUSH
28006: LD_INT 2
28008: PLUS
28009: ST_TO_ADDR
// continue ;
28010: GO 27810
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28012: LD_VAR 0 12
28016: PUSH
28017: LD_INT 1
28019: ARRAY
28020: PPUSH
28021: CALL_OW 266
28025: PUSH
28026: LD_INT 5
28028: EQUAL
28029: IFFALSE 28103
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28031: LD_VAR 0 12
28035: PUSH
28036: LD_INT 1
28038: ARRAY
28039: PPUSH
28040: CALL_OW 313
28044: PUSH
28045: LD_INT 3
28047: LESS
28048: IFFALSE 28084
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28050: LD_INT 0
28052: PPUSH
28053: LD_INT 5
28055: PUSH
28056: LD_INT 8
28058: PUSH
28059: LD_INT 9
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: PUSH
28067: LD_VAR 0 17
28071: ARRAY
28072: PPUSH
28073: LD_VAR 0 4
28077: PPUSH
28078: CALL_OW 380
28082: GO 28101
// PrepareHuman ( false , i , skill ) ;
28084: LD_INT 0
28086: PPUSH
28087: LD_VAR 0 8
28091: PPUSH
28092: LD_VAR 0 4
28096: PPUSH
28097: CALL_OW 380
// end else
28101: GO 28120
// PrepareHuman ( false , i , skill ) ;
28103: LD_INT 0
28105: PPUSH
28106: LD_VAR 0 8
28110: PPUSH
28111: LD_VAR 0 4
28115: PPUSH
28116: CALL_OW 380
// un := CreateHuman ;
28120: LD_ADDR_VAR 0 14
28124: PUSH
28125: CALL_OW 44
28129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28130: LD_ADDR_VAR 0 7
28134: PUSH
28135: LD_VAR 0 7
28139: PPUSH
28140: LD_INT 1
28142: PPUSH
28143: LD_VAR 0 14
28147: PPUSH
28148: CALL_OW 2
28152: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28153: LD_VAR 0 14
28157: PPUSH
28158: LD_VAR 0 12
28162: PUSH
28163: LD_INT 1
28165: ARRAY
28166: PPUSH
28167: CALL_OW 52
// end ;
28171: GO 27810
28173: POP
28174: POP
// end ;
28175: GO 27112
28177: POP
28178: POP
// result := result ^ buildings ;
28179: LD_ADDR_VAR 0 7
28183: PUSH
28184: LD_VAR 0 7
28188: PUSH
28189: LD_VAR 0 18
28193: ADD
28194: ST_TO_ADDR
// end else
28195: GO 28338
// begin for i = 1 to personel do
28197: LD_ADDR_VAR 0 8
28201: PUSH
28202: DOUBLE
28203: LD_INT 1
28205: DEC
28206: ST_TO_ADDR
28207: LD_VAR 0 6
28211: PUSH
28212: FOR_TO
28213: IFFALSE 28336
// begin if i > 4 then
28215: LD_VAR 0 8
28219: PUSH
28220: LD_INT 4
28222: GREATER
28223: IFFALSE 28227
// break ;
28225: GO 28336
// x := personel [ i ] ;
28227: LD_ADDR_VAR 0 13
28231: PUSH
28232: LD_VAR 0 6
28236: PUSH
28237: LD_VAR 0 8
28241: ARRAY
28242: ST_TO_ADDR
// if x = - 1 then
28243: LD_VAR 0 13
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: EQUAL
28252: IFFALSE 28256
// continue ;
28254: GO 28212
// PrepareHuman ( false , i , skill ) ;
28256: LD_INT 0
28258: PPUSH
28259: LD_VAR 0 8
28263: PPUSH
28264: LD_VAR 0 4
28268: PPUSH
28269: CALL_OW 380
// un := CreateHuman ;
28273: LD_ADDR_VAR 0 14
28277: PUSH
28278: CALL_OW 44
28282: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28283: LD_VAR 0 14
28287: PPUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 250
28297: PPUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 251
28307: PPUSH
28308: LD_INT 10
28310: PPUSH
28311: LD_INT 0
28313: PPUSH
28314: CALL_OW 50
// result := result ^ un ;
28318: LD_ADDR_VAR 0 7
28322: PUSH
28323: LD_VAR 0 7
28327: PUSH
28328: LD_VAR 0 14
28332: ADD
28333: ST_TO_ADDR
// end ;
28334: GO 28212
28336: POP
28337: POP
// end ; end ;
28338: LD_VAR 0 7
28342: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28343: LD_INT 0
28345: PPUSH
28346: PPUSH
28347: PPUSH
28348: PPUSH
28349: PPUSH
28350: PPUSH
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
28355: PPUSH
28356: PPUSH
28357: PPUSH
28358: PPUSH
28359: PPUSH
28360: PPUSH
// result := false ;
28361: LD_ADDR_VAR 0 3
28365: PUSH
28366: LD_INT 0
28368: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28369: LD_VAR 0 1
28373: NOT
28374: PUSH
28375: LD_VAR 0 1
28379: PPUSH
28380: CALL_OW 266
28384: PUSH
28385: LD_INT 32
28387: PUSH
28388: LD_INT 33
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: IN
28395: NOT
28396: OR
28397: IFFALSE 28401
// exit ;
28399: GO 29537
// nat := GetNation ( tower ) ;
28401: LD_ADDR_VAR 0 12
28405: PUSH
28406: LD_VAR 0 1
28410: PPUSH
28411: CALL_OW 248
28415: ST_TO_ADDR
// side := GetSide ( tower ) ;
28416: LD_ADDR_VAR 0 16
28420: PUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 255
28430: ST_TO_ADDR
// x := GetX ( tower ) ;
28431: LD_ADDR_VAR 0 10
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 250
28445: ST_TO_ADDR
// y := GetY ( tower ) ;
28446: LD_ADDR_VAR 0 11
28450: PUSH
28451: LD_VAR 0 1
28455: PPUSH
28456: CALL_OW 251
28460: ST_TO_ADDR
// if not x or not y then
28461: LD_VAR 0 10
28465: NOT
28466: PUSH
28467: LD_VAR 0 11
28471: NOT
28472: OR
28473: IFFALSE 28477
// exit ;
28475: GO 29537
// weapon := 0 ;
28477: LD_ADDR_VAR 0 18
28481: PUSH
28482: LD_INT 0
28484: ST_TO_ADDR
// fac_list := [ ] ;
28485: LD_ADDR_VAR 0 17
28489: PUSH
28490: EMPTY
28491: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
28492: LD_ADDR_VAR 0 6
28496: PUSH
28497: LD_VAR 0 1
28501: PPUSH
28502: CALL_OW 274
28506: PPUSH
28507: LD_VAR 0 2
28511: PPUSH
28512: CALL 26115 0 2
28516: PPUSH
28517: LD_INT 30
28519: PUSH
28520: LD_INT 3
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PPUSH
28527: CALL_OW 72
28531: ST_TO_ADDR
// if not factories then
28532: LD_VAR 0 6
28536: NOT
28537: IFFALSE 28541
// exit ;
28539: GO 29537
// for i in factories do
28541: LD_ADDR_VAR 0 8
28545: PUSH
28546: LD_VAR 0 6
28550: PUSH
28551: FOR_IN
28552: IFFALSE 28577
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28554: LD_ADDR_VAR 0 17
28558: PUSH
28559: LD_VAR 0 17
28563: PUSH
28564: LD_VAR 0 8
28568: PPUSH
28569: CALL_OW 478
28573: UNION
28574: ST_TO_ADDR
28575: GO 28551
28577: POP
28578: POP
// if not fac_list then
28579: LD_VAR 0 17
28583: NOT
28584: IFFALSE 28588
// exit ;
28586: GO 29537
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28588: LD_ADDR_VAR 0 5
28592: PUSH
28593: LD_INT 4
28595: PUSH
28596: LD_INT 5
28598: PUSH
28599: LD_INT 9
28601: PUSH
28602: LD_INT 10
28604: PUSH
28605: LD_INT 6
28607: PUSH
28608: LD_INT 7
28610: PUSH
28611: LD_INT 11
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 27
28625: PUSH
28626: LD_INT 28
28628: PUSH
28629: LD_INT 26
28631: PUSH
28632: LD_INT 30
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 43
28643: PUSH
28644: LD_INT 44
28646: PUSH
28647: LD_INT 46
28649: PUSH
28650: LD_INT 45
28652: PUSH
28653: LD_INT 47
28655: PUSH
28656: LD_INT 49
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: PUSH
28672: LD_VAR 0 12
28676: ARRAY
28677: ST_TO_ADDR
// for i in list do
28678: LD_ADDR_VAR 0 8
28682: PUSH
28683: LD_VAR 0 5
28687: PUSH
28688: FOR_IN
28689: IFFALSE 28722
// if not i in fac_list then
28691: LD_VAR 0 8
28695: PUSH
28696: LD_VAR 0 17
28700: IN
28701: NOT
28702: IFFALSE 28720
// list := list diff i ;
28704: LD_ADDR_VAR 0 5
28708: PUSH
28709: LD_VAR 0 5
28713: PUSH
28714: LD_VAR 0 8
28718: DIFF
28719: ST_TO_ADDR
28720: GO 28688
28722: POP
28723: POP
// if not list then
28724: LD_VAR 0 5
28728: NOT
28729: IFFALSE 28733
// exit ;
28731: GO 29537
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28733: LD_VAR 0 12
28737: PUSH
28738: LD_INT 3
28740: EQUAL
28741: PUSH
28742: LD_INT 49
28744: PUSH
28745: LD_VAR 0 5
28749: IN
28750: AND
28751: PUSH
28752: LD_INT 31
28754: PPUSH
28755: LD_VAR 0 16
28759: PPUSH
28760: CALL_OW 321
28764: PUSH
28765: LD_INT 2
28767: EQUAL
28768: AND
28769: IFFALSE 28829
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28771: LD_INT 22
28773: PUSH
28774: LD_VAR 0 16
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 35
28785: PUSH
28786: LD_INT 49
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 91
28795: PUSH
28796: LD_VAR 0 1
28800: PUSH
28801: LD_INT 10
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: PPUSH
28814: CALL_OW 69
28818: NOT
28819: IFFALSE 28829
// weapon := ru_time_lapser ;
28821: LD_ADDR_VAR 0 18
28825: PUSH
28826: LD_INT 49
28828: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28829: LD_VAR 0 12
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: IN
28844: PUSH
28845: LD_INT 11
28847: PUSH
28848: LD_VAR 0 5
28852: IN
28853: PUSH
28854: LD_INT 30
28856: PUSH
28857: LD_VAR 0 5
28861: IN
28862: OR
28863: AND
28864: PUSH
28865: LD_INT 6
28867: PPUSH
28868: LD_VAR 0 16
28872: PPUSH
28873: CALL_OW 321
28877: PUSH
28878: LD_INT 2
28880: EQUAL
28881: AND
28882: IFFALSE 29047
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28884: LD_INT 22
28886: PUSH
28887: LD_VAR 0 16
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: LD_INT 35
28901: PUSH
28902: LD_INT 11
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 35
28911: PUSH
28912: LD_INT 30
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 91
28926: PUSH
28927: LD_VAR 0 1
28931: PUSH
28932: LD_INT 18
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: LIST
28944: PPUSH
28945: CALL_OW 69
28949: NOT
28950: PUSH
28951: LD_INT 22
28953: PUSH
28954: LD_VAR 0 16
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 30
28968: PUSH
28969: LD_INT 32
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 30
28978: PUSH
28979: LD_INT 33
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 91
28993: PUSH
28994: LD_VAR 0 1
28998: PUSH
28999: LD_INT 12
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: PUSH
29020: LD_INT 2
29022: GREATER
29023: AND
29024: IFFALSE 29047
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29026: LD_ADDR_VAR 0 18
29030: PUSH
29031: LD_INT 11
29033: PUSH
29034: LD_INT 30
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_VAR 0 12
29045: ARRAY
29046: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29047: LD_VAR 0 18
29051: NOT
29052: PUSH
29053: LD_INT 40
29055: PPUSH
29056: LD_VAR 0 16
29060: PPUSH
29061: CALL_OW 321
29065: PUSH
29066: LD_INT 2
29068: EQUAL
29069: AND
29070: PUSH
29071: LD_INT 7
29073: PUSH
29074: LD_VAR 0 5
29078: IN
29079: PUSH
29080: LD_INT 28
29082: PUSH
29083: LD_VAR 0 5
29087: IN
29088: OR
29089: PUSH
29090: LD_INT 45
29092: PUSH
29093: LD_VAR 0 5
29097: IN
29098: OR
29099: AND
29100: IFFALSE 29354
// begin hex := GetHexInfo ( x , y ) ;
29102: LD_ADDR_VAR 0 4
29106: PUSH
29107: LD_VAR 0 10
29111: PPUSH
29112: LD_VAR 0 11
29116: PPUSH
29117: CALL_OW 546
29121: ST_TO_ADDR
// if hex [ 1 ] then
29122: LD_VAR 0 4
29126: PUSH
29127: LD_INT 1
29129: ARRAY
29130: IFFALSE 29134
// exit ;
29132: GO 29537
// height := hex [ 2 ] ;
29134: LD_ADDR_VAR 0 15
29138: PUSH
29139: LD_VAR 0 4
29143: PUSH
29144: LD_INT 2
29146: ARRAY
29147: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29148: LD_ADDR_VAR 0 14
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 2
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 5
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// for i in tmp do
29171: LD_ADDR_VAR 0 8
29175: PUSH
29176: LD_VAR 0 14
29180: PUSH
29181: FOR_IN
29182: IFFALSE 29352
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29184: LD_ADDR_VAR 0 9
29188: PUSH
29189: LD_VAR 0 10
29193: PPUSH
29194: LD_VAR 0 8
29198: PPUSH
29199: LD_INT 5
29201: PPUSH
29202: CALL_OW 272
29206: PUSH
29207: LD_VAR 0 11
29211: PPUSH
29212: LD_VAR 0 8
29216: PPUSH
29217: LD_INT 5
29219: PPUSH
29220: CALL_OW 273
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29229: LD_VAR 0 9
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: LD_VAR 0 9
29242: PUSH
29243: LD_INT 2
29245: ARRAY
29246: PPUSH
29247: CALL_OW 488
29251: IFFALSE 29350
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
29253: LD_ADDR_VAR 0 4
29257: PUSH
29258: LD_VAR 0 9
29262: PUSH
29263: LD_INT 1
29265: ARRAY
29266: PPUSH
29267: LD_VAR 0 9
29271: PUSH
29272: LD_INT 2
29274: ARRAY
29275: PPUSH
29276: CALL_OW 546
29280: ST_TO_ADDR
// if hex [ 1 ] then
29281: LD_VAR 0 4
29285: PUSH
29286: LD_INT 1
29288: ARRAY
29289: IFFALSE 29293
// continue ;
29291: GO 29181
// h := hex [ 2 ] ;
29293: LD_ADDR_VAR 0 13
29297: PUSH
29298: LD_VAR 0 4
29302: PUSH
29303: LD_INT 2
29305: ARRAY
29306: ST_TO_ADDR
// if h + 7 < height then
29307: LD_VAR 0 13
29311: PUSH
29312: LD_INT 7
29314: PLUS
29315: PUSH
29316: LD_VAR 0 15
29320: LESS
29321: IFFALSE 29350
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29323: LD_ADDR_VAR 0 18
29327: PUSH
29328: LD_INT 7
29330: PUSH
29331: LD_INT 28
29333: PUSH
29334: LD_INT 45
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: PUSH
29342: LD_VAR 0 12
29346: ARRAY
29347: ST_TO_ADDR
// break ;
29348: GO 29352
// end ; end ; end ;
29350: GO 29181
29352: POP
29353: POP
// end ; if not weapon then
29354: LD_VAR 0 18
29358: NOT
29359: IFFALSE 29419
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29361: LD_ADDR_VAR 0 5
29365: PUSH
29366: LD_VAR 0 5
29370: PUSH
29371: LD_INT 11
29373: PUSH
29374: LD_INT 30
29376: PUSH
29377: LD_INT 49
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: DIFF
29385: ST_TO_ADDR
// if not list then
29386: LD_VAR 0 5
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29537
// weapon := list [ rand ( 1 , list ) ] ;
29395: LD_ADDR_VAR 0 18
29399: PUSH
29400: LD_VAR 0 5
29404: PUSH
29405: LD_INT 1
29407: PPUSH
29408: LD_VAR 0 5
29412: PPUSH
29413: CALL_OW 12
29417: ARRAY
29418: ST_TO_ADDR
// end ; if weapon then
29419: LD_VAR 0 18
29423: IFFALSE 29537
// begin tmp := CostOfWeapon ( weapon ) ;
29425: LD_ADDR_VAR 0 14
29429: PUSH
29430: LD_VAR 0 18
29434: PPUSH
29435: CALL_OW 451
29439: ST_TO_ADDR
// j := GetBase ( tower ) ;
29440: LD_ADDR_VAR 0 9
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 274
29454: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29455: LD_VAR 0 9
29459: PPUSH
29460: LD_INT 1
29462: PPUSH
29463: CALL_OW 275
29467: PUSH
29468: LD_VAR 0 14
29472: PUSH
29473: LD_INT 1
29475: ARRAY
29476: GREATEREQUAL
29477: PUSH
29478: LD_VAR 0 9
29482: PPUSH
29483: LD_INT 2
29485: PPUSH
29486: CALL_OW 275
29490: PUSH
29491: LD_VAR 0 14
29495: PUSH
29496: LD_INT 2
29498: ARRAY
29499: GREATEREQUAL
29500: AND
29501: PUSH
29502: LD_VAR 0 9
29506: PPUSH
29507: LD_INT 3
29509: PPUSH
29510: CALL_OW 275
29514: PUSH
29515: LD_VAR 0 14
29519: PUSH
29520: LD_INT 3
29522: ARRAY
29523: GREATEREQUAL
29524: AND
29525: IFFALSE 29537
// result := weapon ;
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_VAR 0 18
29536: ST_TO_ADDR
// end ; end ;
29537: LD_VAR 0 3
29541: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
// result := true ;
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: LD_INT 1
29553: ST_TO_ADDR
// if array1 = array2 then
29554: LD_VAR 0 1
29558: PUSH
29559: LD_VAR 0 2
29563: EQUAL
29564: IFFALSE 29624
// begin for i = 1 to array1 do
29566: LD_ADDR_VAR 0 4
29570: PUSH
29571: DOUBLE
29572: LD_INT 1
29574: DEC
29575: ST_TO_ADDR
29576: LD_VAR 0 1
29580: PUSH
29581: FOR_TO
29582: IFFALSE 29620
// if array1 [ i ] <> array2 [ i ] then
29584: LD_VAR 0 1
29588: PUSH
29589: LD_VAR 0 4
29593: ARRAY
29594: PUSH
29595: LD_VAR 0 2
29599: PUSH
29600: LD_VAR 0 4
29604: ARRAY
29605: NONEQUAL
29606: IFFALSE 29618
// begin result := false ;
29608: LD_ADDR_VAR 0 3
29612: PUSH
29613: LD_INT 0
29615: ST_TO_ADDR
// break ;
29616: GO 29620
// end ;
29618: GO 29581
29620: POP
29621: POP
// end else
29622: GO 29632
// result := false ;
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_INT 0
29631: ST_TO_ADDR
// end ;
29632: LD_VAR 0 3
29636: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29637: LD_INT 0
29639: PPUSH
29640: PPUSH
29641: PPUSH
// pom := GetBase ( fac ) ;
29642: LD_ADDR_VAR 0 5
29646: PUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 274
29656: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29657: LD_ADDR_VAR 0 4
29661: PUSH
29662: LD_VAR 0 2
29666: PUSH
29667: LD_INT 1
29669: ARRAY
29670: PPUSH
29671: LD_VAR 0 2
29675: PUSH
29676: LD_INT 2
29678: ARRAY
29679: PPUSH
29680: LD_VAR 0 2
29684: PUSH
29685: LD_INT 3
29687: ARRAY
29688: PPUSH
29689: LD_VAR 0 2
29693: PUSH
29694: LD_INT 4
29696: ARRAY
29697: PPUSH
29698: CALL_OW 449
29702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_VAR 0 5
29712: PPUSH
29713: LD_INT 1
29715: PPUSH
29716: CALL_OW 275
29720: PUSH
29721: LD_VAR 0 4
29725: PUSH
29726: LD_INT 1
29728: ARRAY
29729: GREATEREQUAL
29730: PUSH
29731: LD_VAR 0 5
29735: PPUSH
29736: LD_INT 2
29738: PPUSH
29739: CALL_OW 275
29743: PUSH
29744: LD_VAR 0 4
29748: PUSH
29749: LD_INT 2
29751: ARRAY
29752: GREATEREQUAL
29753: AND
29754: PUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: LD_INT 3
29762: PPUSH
29763: CALL_OW 275
29767: PUSH
29768: LD_VAR 0 4
29772: PUSH
29773: LD_INT 3
29775: ARRAY
29776: GREATEREQUAL
29777: AND
29778: ST_TO_ADDR
// end ;
29779: LD_VAR 0 3
29783: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29784: LD_INT 0
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
// pom := GetBase ( building ) ;
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 274
29804: ST_TO_ADDR
// if not pom then
29805: LD_VAR 0 3
29809: NOT
29810: IFFALSE 29814
// exit ;
29812: GO 29984
// btype := GetBType ( building ) ;
29814: LD_ADDR_VAR 0 5
29818: PUSH
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 266
29828: ST_TO_ADDR
// if btype = b_armoury then
29829: LD_VAR 0 5
29833: PUSH
29834: LD_INT 4
29836: EQUAL
29837: IFFALSE 29847
// btype := b_barracks ;
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: LD_INT 5
29846: ST_TO_ADDR
// if btype = b_depot then
29847: LD_VAR 0 5
29851: PUSH
29852: LD_INT 0
29854: EQUAL
29855: IFFALSE 29865
// btype := b_warehouse ;
29857: LD_ADDR_VAR 0 5
29861: PUSH
29862: LD_INT 1
29864: ST_TO_ADDR
// if btype = b_workshop then
29865: LD_VAR 0 5
29869: PUSH
29870: LD_INT 2
29872: EQUAL
29873: IFFALSE 29883
// btype := b_factory ;
29875: LD_ADDR_VAR 0 5
29879: PUSH
29880: LD_INT 3
29882: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29883: LD_ADDR_VAR 0 4
29887: PUSH
29888: LD_VAR 0 5
29892: PPUSH
29893: LD_VAR 0 1
29897: PPUSH
29898: CALL_OW 248
29902: PPUSH
29903: CALL_OW 450
29907: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29908: LD_ADDR_VAR 0 2
29912: PUSH
29913: LD_VAR 0 3
29917: PPUSH
29918: LD_INT 1
29920: PPUSH
29921: CALL_OW 275
29925: PUSH
29926: LD_VAR 0 4
29930: PUSH
29931: LD_INT 1
29933: ARRAY
29934: GREATEREQUAL
29935: PUSH
29936: LD_VAR 0 3
29940: PPUSH
29941: LD_INT 2
29943: PPUSH
29944: CALL_OW 275
29948: PUSH
29949: LD_VAR 0 4
29953: PUSH
29954: LD_INT 2
29956: ARRAY
29957: GREATEREQUAL
29958: AND
29959: PUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: LD_INT 3
29967: PPUSH
29968: CALL_OW 275
29972: PUSH
29973: LD_VAR 0 4
29977: PUSH
29978: LD_INT 3
29980: ARRAY
29981: GREATEREQUAL
29982: AND
29983: ST_TO_ADDR
// end ;
29984: LD_VAR 0 2
29988: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29989: LD_INT 0
29991: PPUSH
29992: PPUSH
29993: PPUSH
// pom := GetBase ( building ) ;
29994: LD_ADDR_VAR 0 4
29998: PUSH
29999: LD_VAR 0 1
30003: PPUSH
30004: CALL_OW 274
30008: ST_TO_ADDR
// if not pom then
30009: LD_VAR 0 4
30013: NOT
30014: IFFALSE 30018
// exit ;
30016: GO 30119
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30018: LD_ADDR_VAR 0 5
30022: PUSH
30023: LD_VAR 0 2
30027: PPUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 248
30037: PPUSH
30038: CALL_OW 450
30042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30043: LD_ADDR_VAR 0 3
30047: PUSH
30048: LD_VAR 0 4
30052: PPUSH
30053: LD_INT 1
30055: PPUSH
30056: CALL_OW 275
30060: PUSH
30061: LD_VAR 0 5
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: GREATEREQUAL
30070: PUSH
30071: LD_VAR 0 4
30075: PPUSH
30076: LD_INT 2
30078: PPUSH
30079: CALL_OW 275
30083: PUSH
30084: LD_VAR 0 5
30088: PUSH
30089: LD_INT 2
30091: ARRAY
30092: GREATEREQUAL
30093: AND
30094: PUSH
30095: LD_VAR 0 4
30099: PPUSH
30100: LD_INT 3
30102: PPUSH
30103: CALL_OW 275
30107: PUSH
30108: LD_VAR 0 5
30112: PUSH
30113: LD_INT 3
30115: ARRAY
30116: GREATEREQUAL
30117: AND
30118: ST_TO_ADDR
// end ;
30119: LD_VAR 0 3
30123: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30124: LD_INT 0
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
30133: PPUSH
30134: PPUSH
30135: PPUSH
// result := false ;
30136: LD_ADDR_VAR 0 6
30140: PUSH
30141: LD_INT 0
30143: ST_TO_ADDR
// if not base or not btype or not x or not y then
30144: LD_VAR 0 1
30148: NOT
30149: PUSH
30150: LD_VAR 0 2
30154: NOT
30155: OR
30156: PUSH
30157: LD_VAR 0 3
30161: NOT
30162: OR
30163: PUSH
30164: LD_VAR 0 4
30168: NOT
30169: OR
30170: IFFALSE 30174
// exit ;
30172: GO 30783
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
30174: LD_ADDR_VAR 0 12
30178: PUSH
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: LD_VAR 0 4
30193: PPUSH
30194: LD_VAR 0 5
30198: PPUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_INT 1
30206: ARRAY
30207: PPUSH
30208: CALL_OW 248
30212: PPUSH
30213: LD_INT 0
30215: PPUSH
30216: CALL 31620 0 6
30220: ST_TO_ADDR
// if not hexes then
30221: LD_VAR 0 12
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30783
// for i = 1 to hexes do
30230: LD_ADDR_VAR 0 7
30234: PUSH
30235: DOUBLE
30236: LD_INT 1
30238: DEC
30239: ST_TO_ADDR
30240: LD_VAR 0 12
30244: PUSH
30245: FOR_TO
30246: IFFALSE 30781
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30248: LD_ADDR_VAR 0 11
30252: PUSH
30253: LD_VAR 0 12
30257: PUSH
30258: LD_VAR 0 7
30262: ARRAY
30263: PUSH
30264: LD_INT 1
30266: ARRAY
30267: PPUSH
30268: LD_VAR 0 12
30272: PUSH
30273: LD_VAR 0 7
30277: ARRAY
30278: PUSH
30279: LD_INT 2
30281: ARRAY
30282: PPUSH
30283: CALL_OW 428
30287: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30288: LD_VAR 0 12
30292: PUSH
30293: LD_VAR 0 7
30297: ARRAY
30298: PUSH
30299: LD_INT 1
30301: ARRAY
30302: PPUSH
30303: LD_VAR 0 12
30307: PUSH
30308: LD_VAR 0 7
30312: ARRAY
30313: PUSH
30314: LD_INT 2
30316: ARRAY
30317: PPUSH
30318: CALL_OW 351
30322: PUSH
30323: LD_VAR 0 12
30327: PUSH
30328: LD_VAR 0 7
30332: ARRAY
30333: PUSH
30334: LD_INT 1
30336: ARRAY
30337: PPUSH
30338: LD_VAR 0 12
30342: PUSH
30343: LD_VAR 0 7
30347: ARRAY
30348: PUSH
30349: LD_INT 2
30351: ARRAY
30352: PPUSH
30353: CALL_OW 488
30357: NOT
30358: OR
30359: PUSH
30360: LD_VAR 0 11
30364: PPUSH
30365: CALL_OW 247
30369: PUSH
30370: LD_INT 3
30372: EQUAL
30373: OR
30374: IFFALSE 30380
// exit ;
30376: POP
30377: POP
30378: GO 30783
// if not tmp or not tmp in base then
30380: LD_VAR 0 11
30384: NOT
30385: PUSH
30386: LD_VAR 0 11
30390: PUSH
30391: LD_VAR 0 1
30395: IN
30396: NOT
30397: OR
30398: IFFALSE 30402
// continue ;
30400: GO 30245
// result := true ;
30402: LD_ADDR_VAR 0 6
30406: PUSH
30407: LD_INT 1
30409: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30410: LD_ADDR_VAR 0 15
30414: PUSH
30415: LD_VAR 0 1
30419: PPUSH
30420: LD_INT 22
30422: PUSH
30423: LD_VAR 0 11
30427: PPUSH
30428: CALL_OW 255
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 30
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 72
30473: ST_TO_ADDR
// if dep then
30474: LD_VAR 0 15
30478: IFFALSE 30614
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30480: LD_ADDR_VAR 0 14
30484: PUSH
30485: LD_VAR 0 15
30489: PUSH
30490: LD_INT 1
30492: ARRAY
30493: PPUSH
30494: CALL_OW 250
30498: PPUSH
30499: LD_VAR 0 15
30503: PUSH
30504: LD_INT 1
30506: ARRAY
30507: PPUSH
30508: CALL_OW 254
30512: PPUSH
30513: LD_INT 5
30515: PPUSH
30516: CALL_OW 272
30520: PUSH
30521: LD_VAR 0 15
30525: PUSH
30526: LD_INT 1
30528: ARRAY
30529: PPUSH
30530: CALL_OW 251
30534: PPUSH
30535: LD_VAR 0 15
30539: PUSH
30540: LD_INT 1
30542: ARRAY
30543: PPUSH
30544: CALL_OW 254
30548: PPUSH
30549: LD_INT 5
30551: PPUSH
30552: CALL_OW 273
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30561: LD_VAR 0 14
30565: PUSH
30566: LD_INT 1
30568: ARRAY
30569: PPUSH
30570: LD_VAR 0 14
30574: PUSH
30575: LD_INT 2
30577: ARRAY
30578: PPUSH
30579: CALL_OW 488
30583: IFFALSE 30614
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30585: LD_VAR 0 11
30589: PPUSH
30590: LD_VAR 0 14
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_VAR 0 14
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: PPUSH
30608: CALL_OW 111
// continue ;
30612: GO 30245
// end ; end ; r := GetDir ( tmp ) ;
30614: LD_ADDR_VAR 0 13
30618: PUSH
30619: LD_VAR 0 11
30623: PPUSH
30624: CALL_OW 254
30628: ST_TO_ADDR
// if r = 5 then
30629: LD_VAR 0 13
30633: PUSH
30634: LD_INT 5
30636: EQUAL
30637: IFFALSE 30647
// r := 0 ;
30639: LD_ADDR_VAR 0 13
30643: PUSH
30644: LD_INT 0
30646: ST_TO_ADDR
// for j = r to 5 do
30647: LD_ADDR_VAR 0 8
30651: PUSH
30652: DOUBLE
30653: LD_VAR 0 13
30657: DEC
30658: ST_TO_ADDR
30659: LD_INT 5
30661: PUSH
30662: FOR_TO
30663: IFFALSE 30777
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30665: LD_ADDR_VAR 0 9
30669: PUSH
30670: LD_VAR 0 11
30674: PPUSH
30675: CALL_OW 250
30679: PPUSH
30680: LD_VAR 0 8
30684: PPUSH
30685: LD_INT 2
30687: PPUSH
30688: CALL_OW 272
30692: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30693: LD_ADDR_VAR 0 10
30697: PUSH
30698: LD_VAR 0 11
30702: PPUSH
30703: CALL_OW 251
30707: PPUSH
30708: LD_VAR 0 8
30712: PPUSH
30713: LD_INT 2
30715: PPUSH
30716: CALL_OW 273
30720: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30721: LD_VAR 0 9
30725: PPUSH
30726: LD_VAR 0 10
30730: PPUSH
30731: CALL_OW 488
30735: PUSH
30736: LD_VAR 0 9
30740: PPUSH
30741: LD_VAR 0 10
30745: PPUSH
30746: CALL_OW 428
30750: NOT
30751: AND
30752: IFFALSE 30775
// begin ComMoveXY ( tmp , _x , _y ) ;
30754: LD_VAR 0 11
30758: PPUSH
30759: LD_VAR 0 9
30763: PPUSH
30764: LD_VAR 0 10
30768: PPUSH
30769: CALL_OW 111
// break ;
30773: GO 30777
// end ; end ;
30775: GO 30662
30777: POP
30778: POP
// end ;
30779: GO 30245
30781: POP
30782: POP
// end ;
30783: LD_VAR 0 6
30787: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
30788: LD_INT 0
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
// result := false ;
30800: LD_ADDR_VAR 0 6
30804: PUSH
30805: LD_INT 0
30807: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30808: LD_VAR 0 1
30812: NOT
30813: PUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 266
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: IN
30834: NOT
30835: OR
30836: PUSH
30837: LD_VAR 0 2
30841: NOT
30842: OR
30843: PUSH
30844: LD_VAR 0 5
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 3
30860: PUSH
30861: LD_INT 4
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: IN
30875: NOT
30876: OR
30877: PUSH
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_VAR 0 4
30887: PPUSH
30888: CALL_OW 488
30892: NOT
30893: OR
30894: IFFALSE 30898
// exit ;
30896: GO 31615
// pom := GetBase ( depot ) ;
30898: LD_ADDR_VAR 0 10
30902: PUSH
30903: LD_VAR 0 1
30907: PPUSH
30908: CALL_OW 274
30912: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30913: LD_ADDR_VAR 0 11
30917: PUSH
30918: LD_VAR 0 2
30922: PPUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 248
30932: PPUSH
30933: CALL_OW 450
30937: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30938: LD_VAR 0 10
30942: PPUSH
30943: LD_INT 1
30945: PPUSH
30946: CALL_OW 275
30950: PUSH
30951: LD_VAR 0 11
30955: PUSH
30956: LD_INT 1
30958: ARRAY
30959: GREATEREQUAL
30960: PUSH
30961: LD_VAR 0 10
30965: PPUSH
30966: LD_INT 2
30968: PPUSH
30969: CALL_OW 275
30973: PUSH
30974: LD_VAR 0 11
30978: PUSH
30979: LD_INT 2
30981: ARRAY
30982: GREATEREQUAL
30983: AND
30984: PUSH
30985: LD_VAR 0 10
30989: PPUSH
30990: LD_INT 3
30992: PPUSH
30993: CALL_OW 275
30997: PUSH
30998: LD_VAR 0 11
31002: PUSH
31003: LD_INT 3
31005: ARRAY
31006: GREATEREQUAL
31007: AND
31008: NOT
31009: IFFALSE 31013
// exit ;
31011: GO 31615
// if GetBType ( depot ) = b_depot then
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL_OW 266
31022: PUSH
31023: LD_INT 0
31025: EQUAL
31026: IFFALSE 31038
// dist := 28 else
31028: LD_ADDR_VAR 0 14
31032: PUSH
31033: LD_INT 28
31035: ST_TO_ADDR
31036: GO 31046
// dist := 36 ;
31038: LD_ADDR_VAR 0 14
31042: PUSH
31043: LD_INT 36
31045: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_VAR 0 3
31055: PPUSH
31056: LD_VAR 0 4
31060: PPUSH
31061: CALL_OW 297
31065: PUSH
31066: LD_VAR 0 14
31070: GREATER
31071: IFFALSE 31075
// exit ;
31073: GO 31615
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31075: LD_ADDR_VAR 0 12
31079: PUSH
31080: LD_VAR 0 2
31084: PPUSH
31085: LD_VAR 0 3
31089: PPUSH
31090: LD_VAR 0 4
31094: PPUSH
31095: LD_VAR 0 5
31099: PPUSH
31100: LD_VAR 0 1
31104: PPUSH
31105: CALL_OW 248
31109: PPUSH
31110: LD_INT 0
31112: PPUSH
31113: CALL 31620 0 6
31117: ST_TO_ADDR
// if not hexes then
31118: LD_VAR 0 12
31122: NOT
31123: IFFALSE 31127
// exit ;
31125: GO 31615
// hex := GetHexInfo ( x , y ) ;
31127: LD_ADDR_VAR 0 15
31131: PUSH
31132: LD_VAR 0 3
31136: PPUSH
31137: LD_VAR 0 4
31141: PPUSH
31142: CALL_OW 546
31146: ST_TO_ADDR
// if hex [ 1 ] then
31147: LD_VAR 0 15
31151: PUSH
31152: LD_INT 1
31154: ARRAY
31155: IFFALSE 31159
// exit ;
31157: GO 31615
// height := hex [ 2 ] ;
31159: LD_ADDR_VAR 0 13
31163: PUSH
31164: LD_VAR 0 15
31168: PUSH
31169: LD_INT 2
31171: ARRAY
31172: ST_TO_ADDR
// for i = 1 to hexes do
31173: LD_ADDR_VAR 0 7
31177: PUSH
31178: DOUBLE
31179: LD_INT 1
31181: DEC
31182: ST_TO_ADDR
31183: LD_VAR 0 12
31187: PUSH
31188: FOR_TO
31189: IFFALSE 31519
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31191: LD_VAR 0 12
31195: PUSH
31196: LD_VAR 0 7
31200: ARRAY
31201: PUSH
31202: LD_INT 1
31204: ARRAY
31205: PPUSH
31206: LD_VAR 0 12
31210: PUSH
31211: LD_VAR 0 7
31215: ARRAY
31216: PUSH
31217: LD_INT 2
31219: ARRAY
31220: PPUSH
31221: CALL_OW 488
31225: NOT
31226: PUSH
31227: LD_VAR 0 12
31231: PUSH
31232: LD_VAR 0 7
31236: ARRAY
31237: PUSH
31238: LD_INT 1
31240: ARRAY
31241: PPUSH
31242: LD_VAR 0 12
31246: PUSH
31247: LD_VAR 0 7
31251: ARRAY
31252: PUSH
31253: LD_INT 2
31255: ARRAY
31256: PPUSH
31257: CALL_OW 428
31261: PUSH
31262: LD_INT 0
31264: GREATER
31265: OR
31266: PUSH
31267: LD_VAR 0 12
31271: PUSH
31272: LD_VAR 0 7
31276: ARRAY
31277: PUSH
31278: LD_INT 1
31280: ARRAY
31281: PPUSH
31282: LD_VAR 0 12
31286: PUSH
31287: LD_VAR 0 7
31291: ARRAY
31292: PUSH
31293: LD_INT 2
31295: ARRAY
31296: PPUSH
31297: CALL_OW 351
31301: OR
31302: IFFALSE 31308
// exit ;
31304: POP
31305: POP
31306: GO 31615
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31308: LD_ADDR_VAR 0 8
31312: PUSH
31313: LD_VAR 0 12
31317: PUSH
31318: LD_VAR 0 7
31322: ARRAY
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: LD_VAR 0 12
31332: PUSH
31333: LD_VAR 0 7
31337: ARRAY
31338: PUSH
31339: LD_INT 2
31341: ARRAY
31342: PPUSH
31343: CALL_OW 546
31347: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31348: LD_VAR 0 8
31352: PUSH
31353: LD_INT 1
31355: ARRAY
31356: PUSH
31357: LD_VAR 0 8
31361: PUSH
31362: LD_INT 2
31364: ARRAY
31365: PUSH
31366: LD_VAR 0 13
31370: PUSH
31371: LD_INT 2
31373: PLUS
31374: GREATER
31375: OR
31376: PUSH
31377: LD_VAR 0 8
31381: PUSH
31382: LD_INT 2
31384: ARRAY
31385: PUSH
31386: LD_VAR 0 13
31390: PUSH
31391: LD_INT 2
31393: MINUS
31394: LESS
31395: OR
31396: PUSH
31397: LD_VAR 0 8
31401: PUSH
31402: LD_INT 3
31404: ARRAY
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 8
31411: PUSH
31412: LD_INT 9
31414: PUSH
31415: LD_INT 10
31417: PUSH
31418: LD_INT 11
31420: PUSH
31421: LD_INT 12
31423: PUSH
31424: LD_INT 13
31426: PUSH
31427: LD_INT 16
31429: PUSH
31430: LD_INT 17
31432: PUSH
31433: LD_INT 18
31435: PUSH
31436: LD_INT 19
31438: PUSH
31439: LD_INT 20
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: IN
31460: NOT
31461: OR
31462: PUSH
31463: LD_VAR 0 8
31467: PUSH
31468: LD_INT 5
31470: ARRAY
31471: NOT
31472: OR
31473: PUSH
31474: LD_VAR 0 8
31478: PUSH
31479: LD_INT 6
31481: ARRAY
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: LD_INT 7
31491: PUSH
31492: LD_INT 9
31494: PUSH
31495: LD_INT 10
31497: PUSH
31498: LD_INT 11
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: IN
31509: NOT
31510: OR
31511: IFFALSE 31517
// exit ;
31513: POP
31514: POP
31515: GO 31615
// end ;
31517: GO 31188
31519: POP
31520: POP
// side := GetSide ( depot ) ;
31521: LD_ADDR_VAR 0 9
31525: PUSH
31526: LD_VAR 0 1
31530: PPUSH
31531: CALL_OW 255
31535: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31536: LD_VAR 0 9
31540: PPUSH
31541: LD_VAR 0 3
31545: PPUSH
31546: LD_VAR 0 4
31550: PPUSH
31551: LD_INT 20
31553: PPUSH
31554: CALL 24269 0 4
31558: PUSH
31559: LD_INT 4
31561: ARRAY
31562: IFFALSE 31566
// exit ;
31564: GO 31615
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31566: LD_VAR 0 2
31570: PUSH
31571: LD_INT 29
31573: PUSH
31574: LD_INT 30
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: IN
31581: PUSH
31582: LD_VAR 0 3
31586: PPUSH
31587: LD_VAR 0 4
31591: PPUSH
31592: LD_VAR 0 9
31596: PPUSH
31597: CALL_OW 440
31601: NOT
31602: AND
31603: IFFALSE 31607
// exit ;
31605: GO 31615
// result := true ;
31607: LD_ADDR_VAR 0 6
31611: PUSH
31612: LD_INT 1
31614: ST_TO_ADDR
// end ;
31615: LD_VAR 0 6
31619: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31620: LD_INT 0
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
31637: PPUSH
31638: PPUSH
31639: PPUSH
31640: PPUSH
31641: PPUSH
31642: PPUSH
31643: PPUSH
31644: PPUSH
31645: PPUSH
31646: PPUSH
31647: PPUSH
31648: PPUSH
31649: PPUSH
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
31665: PPUSH
31666: PPUSH
31667: PPUSH
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
// result = [ ] ;
31680: LD_ADDR_VAR 0 7
31684: PUSH
31685: EMPTY
31686: ST_TO_ADDR
// temp_list = [ ] ;
31687: LD_ADDR_VAR 0 9
31691: PUSH
31692: EMPTY
31693: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31694: LD_VAR 0 4
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: IN
31725: NOT
31726: PUSH
31727: LD_VAR 0 1
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: IN
31742: PUSH
31743: LD_VAR 0 5
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: IN
31762: NOT
31763: AND
31764: OR
31765: IFFALSE 31769
// exit ;
31767: GO 50160
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31769: LD_VAR 0 1
31773: PUSH
31774: LD_INT 6
31776: PUSH
31777: LD_INT 7
31779: PUSH
31780: LD_INT 8
31782: PUSH
31783: LD_INT 13
31785: PUSH
31786: LD_INT 12
31788: PUSH
31789: LD_INT 15
31791: PUSH
31792: LD_INT 11
31794: PUSH
31795: LD_INT 14
31797: PUSH
31798: LD_INT 10
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: IN
31812: IFFALSE 31822
// btype = b_lab ;
31814: LD_ADDR_VAR 0 1
31818: PUSH
31819: LD_INT 6
31821: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31822: LD_VAR 0 6
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: IN
31841: NOT
31842: PUSH
31843: LD_VAR 0 1
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 6
31862: PUSH
31863: LD_INT 36
31865: PUSH
31866: LD_INT 4
31868: PUSH
31869: LD_INT 5
31871: PUSH
31872: LD_INT 31
31874: PUSH
31875: LD_INT 32
31877: PUSH
31878: LD_INT 33
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: IN
31894: NOT
31895: PUSH
31896: LD_VAR 0 6
31900: PUSH
31901: LD_INT 1
31903: EQUAL
31904: AND
31905: OR
31906: PUSH
31907: LD_VAR 0 1
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: IN
31922: NOT
31923: PUSH
31924: LD_VAR 0 6
31928: PUSH
31929: LD_INT 2
31931: EQUAL
31932: AND
31933: OR
31934: IFFALSE 31944
// mode = 0 ;
31936: LD_ADDR_VAR 0 6
31940: PUSH
31941: LD_INT 0
31943: ST_TO_ADDR
// case mode of 0 :
31944: LD_VAR 0 6
31948: PUSH
31949: LD_INT 0
31951: DOUBLE
31952: EQUAL
31953: IFTRUE 31957
31955: GO 43410
31957: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31958: LD_ADDR_VAR 0 11
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32151: LD_ADDR_VAR 0 12
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: NEG
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32347: LD_ADDR_VAR 0 13
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 3
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32546: LD_ADDR_VAR 0 14
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 2
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 3
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32742: LD_ADDR_VAR 0 15
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 3
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32935: LD_ADDR_VAR 0 16
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 3
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33128: LD_ADDR_VAR 0 17
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33358: LD_ADDR_VAR 0 18
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 2
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 2
33557: NEG
33558: PUSH
33559: LD_INT 2
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33588: LD_ADDR_VAR 0 19
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 2
33787: NEG
33788: PUSH
33789: LD_INT 2
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33818: LD_ADDR_VAR 0 20
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: NEG
34018: PUSH
34019: LD_INT 2
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34048: LD_ADDR_VAR 0 21
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34278: LD_ADDR_VAR 0 22
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34508: LD_ADDR_VAR 0 23
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 2
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: LD_INT 3
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: NEG
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34788: LD_ADDR_VAR 0 24
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 3
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35064: LD_ADDR_VAR 0 25
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 3
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 3
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35338: LD_ADDR_VAR 0 26
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 2
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35614: LD_ADDR_VAR 0 27
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 2
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 3
35859: NEG
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35894: LD_ADDR_VAR 0 28
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 2
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 2
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: LD_INT 3
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 3
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 3
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 3
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36176: LD_ADDR_VAR 0 29
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PUSH
36368: LD_INT 3
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 3
36420: NEG
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36455: LD_ADDR_VAR 0 30
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 2
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: LD_INT 3
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 3
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 3
36698: NEG
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36733: LD_ADDR_VAR 0 31
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: LD_INT 3
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 3
36976: NEG
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37011: LD_ADDR_VAR 0 32
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 2
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: NEG
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: LD_INT 3
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37289: LD_ADDR_VAR 0 33
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: LD_INT 3
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 3
37533: NEG
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37568: LD_ADDR_VAR 0 34
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 2
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: NEG
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 3
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 3
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37848: LD_ADDR_VAR 0 35
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37960: LD_ADDR_VAR 0 36
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38072: LD_ADDR_VAR 0 37
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38184: LD_ADDR_VAR 0 38
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38296: LD_ADDR_VAR 0 39
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38408: LD_ADDR_VAR 0 40
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38520: LD_ADDR_VAR 0 41
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 3
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 3
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 3
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 3
38794: NEG
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 3
38805: NEG
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 3
38829: NEG
38830: PUSH
38831: LD_INT 3
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38870: LD_ADDR_VAR 0 42
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 3
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 2
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 3
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: NEG
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39220: LD_ADDR_VAR 0 43
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 3
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: NEG
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39568: LD_ADDR_VAR 0 44
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: LD_INT 2
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 3
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: LD_INT 3
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 3
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: NEG
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: NEG
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: NEG
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 3
39877: NEG
39878: PUSH
39879: LD_INT 3
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39918: LD_ADDR_VAR 0 45
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 2
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 3
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: LD_INT 3
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 3
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 3
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: LD_INT 3
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 3
40227: NEG
40228: PUSH
40229: LD_INT 3
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40268: LD_ADDR_VAR 0 46
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 3
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 3
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 3
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 3
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40616: LD_ADDR_VAR 0 47
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40767: LD_ADDR_VAR 0 48
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40914: LD_ADDR_VAR 0 49
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41058: LD_ADDR_VAR 0 50
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41202: LD_ADDR_VAR 0 51
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41349: LD_ADDR_VAR 0 52
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41500: LD_ADDR_VAR 0 53
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41730: LD_ADDR_VAR 0 54
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41960: LD_ADDR_VAR 0 55
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42190: LD_ADDR_VAR 0 56
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: NEG
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42420: LD_ADDR_VAR 0 57
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42650: LD_ADDR_VAR 0 58
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42880: LD_ADDR_VAR 0 59
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42968: LD_ADDR_VAR 0 60
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43056: LD_ADDR_VAR 0 61
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43144: LD_ADDR_VAR 0 62
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43232: LD_ADDR_VAR 0 63
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43320: LD_ADDR_VAR 0 64
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// end ; 1 :
43408: GO 49305
43410: LD_INT 1
43412: DOUBLE
43413: EQUAL
43414: IFTRUE 43418
43416: GO 46041
43418: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43419: LD_ADDR_VAR 0 11
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 3
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43463: LD_ADDR_VAR 0 12
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43504: LD_ADDR_VAR 0 13
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43544: LD_ADDR_VAR 0 14
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43585: LD_ADDR_VAR 0 15
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43629: LD_ADDR_VAR 0 16
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 3
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 3
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 3
43660: NEG
43661: PUSH
43662: LD_INT 3
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43675: LD_ADDR_VAR 0 17
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43719: LD_ADDR_VAR 0 18
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43760: LD_ADDR_VAR 0 19
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43800: LD_ADDR_VAR 0 20
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43841: LD_ADDR_VAR 0 21
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43885: LD_ADDR_VAR 0 22
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43931: LD_ADDR_VAR 0 23
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 3
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 4
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 3
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43975: LD_ADDR_VAR 0 24
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44016: LD_ADDR_VAR 0 25
44020: PUSH
44021: LD_INT 3
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 4
44033: PUSH
44034: LD_INT 3
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 4
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44056: LD_ADDR_VAR 0 26
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 4
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44097: LD_ADDR_VAR 0 27
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 3
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 4
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44141: LD_ADDR_VAR 0 28
44145: PUSH
44146: LD_INT 3
44148: NEG
44149: PUSH
44150: LD_INT 3
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 3
44160: NEG
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 4
44172: NEG
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44187: LD_ADDR_VAR 0 29
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 4
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 4
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 5
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 4
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 6
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 6
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 5
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44342: LD_ADDR_VAR 0 30
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 4
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 4
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 4
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 5
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 5
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 5
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 6
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 6
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44485: LD_ADDR_VAR 0 31
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: LD_INT 3
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 3
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 4
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 4
44532: PUSH
44533: LD_INT 4
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: LD_INT 4
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 5
44552: PUSH
44553: LD_INT 4
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 5
44562: PUSH
44563: LD_INT 5
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 4
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 6
44582: PUSH
44583: LD_INT 5
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 6
44592: PUSH
44593: LD_INT 6
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 5
44602: PUSH
44603: LD_INT 6
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44624: LD_ADDR_VAR 0 32
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 4
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 4
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 5
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 5
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 4
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 6
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 6
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 5
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44767: LD_ADDR_VAR 0 33
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 3
44785: NEG
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 4
44819: NEG
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 4
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 4
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 5
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 5
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 5
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 6
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 6
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44922: LD_ADDR_VAR 0 34
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 3
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 3
44965: NEG
44966: PUSH
44967: LD_INT 4
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 4
44977: NEG
44978: PUSH
44979: LD_INT 3
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 4
44989: NEG
44990: PUSH
44991: LD_INT 4
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 4
45001: NEG
45002: PUSH
45003: LD_INT 5
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 5
45013: NEG
45014: PUSH
45015: LD_INT 4
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 5
45025: NEG
45026: PUSH
45027: LD_INT 5
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 5
45037: NEG
45038: PUSH
45039: LD_INT 6
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 6
45049: NEG
45050: PUSH
45051: LD_INT 5
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 6
45061: NEG
45062: PUSH
45063: LD_INT 6
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45085: LD_ADDR_VAR 0 41
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 3
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45129: LD_ADDR_VAR 0 42
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45170: LD_ADDR_VAR 0 43
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45210: LD_ADDR_VAR 0 44
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45251: LD_ADDR_VAR 0 45
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45295: LD_ADDR_VAR 0 46
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45341: LD_ADDR_VAR 0 47
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 3
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 3
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45374: LD_ADDR_VAR 0 48
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45405: LD_ADDR_VAR 0 49
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45434: LD_ADDR_VAR 0 50
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 3
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45463: LD_ADDR_VAR 0 51
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45494: LD_ADDR_VAR 0 52
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 3
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45527: LD_ADDR_VAR 0 53
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45571: LD_ADDR_VAR 0 54
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45612: LD_ADDR_VAR 0 55
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45652: LD_ADDR_VAR 0 56
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 3
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45693: LD_ADDR_VAR 0 57
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 3
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 3
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45737: LD_ADDR_VAR 0 58
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: LD_INT 3
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45783: LD_ADDR_VAR 0 59
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45827: LD_ADDR_VAR 0 60
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45868: LD_ADDR_VAR 0 61
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45908: LD_ADDR_VAR 0 62
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45949: LD_ADDR_VAR 0 63
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45993: LD_ADDR_VAR 0 64
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: ST_TO_ADDR
// end ; 2 :
46039: GO 49305
46041: LD_INT 2
46043: DOUBLE
46044: EQUAL
46045: IFTRUE 46049
46047: GO 49304
46049: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46050: LD_ADDR_VAR 0 29
46054: PUSH
46055: LD_INT 4
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 4
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 5
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 5
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 4
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 5
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 3
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 4
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 4
46180: PUSH
46181: LD_INT 4
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 4
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 4
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 4
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 4
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 5
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 5
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 4
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 3
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 4
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 4
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 4
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 4
46435: NEG
46436: PUSH
46437: LD_INT 4
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 4
46447: NEG
46448: PUSH
46449: LD_INT 5
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: LD_INT 4
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 3
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 4
46483: NEG
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 5
46495: NEG
46496: PUSH
46497: LD_INT 4
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 5
46507: NEG
46508: PUSH
46509: LD_INT 5
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 3
46519: NEG
46520: PUSH
46521: LD_INT 5
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 5
46531: NEG
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46588: LD_ADDR_VAR 0 30
46592: PUSH
46593: LD_INT 4
46595: PUSH
46596: LD_INT 4
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 4
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 5
46615: PUSH
46616: LD_INT 4
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: LD_INT 5
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 4
46635: PUSH
46636: LD_INT 5
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: LD_INT 4
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 5
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: LD_INT 5
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 4
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 4
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 4
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 3
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 4
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 5
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 5
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 5
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: NEG
46893: PUSH
46894: LD_INT 4
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 3
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 4
46952: NEG
46953: PUSH
46954: LD_INT 4
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 4
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 4
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 5
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 4
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 4
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 5
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 3
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 5
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47135: LD_ADDR_VAR 0 31
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 4
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 4
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 5
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 5
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 4
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 3
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 5
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 4
47291: NEG
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 4
47302: NEG
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 4
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 4
47337: NEG
47338: PUSH
47339: LD_INT 4
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 4
47349: NEG
47350: PUSH
47351: LD_INT 5
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: LD_INT 4
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 4
47385: NEG
47386: PUSH
47387: LD_INT 3
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 5
47397: NEG
47398: PUSH
47399: LD_INT 4
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 5
47409: NEG
47410: PUSH
47411: LD_INT 5
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: LD_INT 5
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 5
47433: NEG
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 3
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 4
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 4
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 4
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 4
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 4
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 5
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 4
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 5
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47685: LD_ADDR_VAR 0 32
47689: PUSH
47690: LD_INT 4
47692: NEG
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 4
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 4
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 5
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 5
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 5
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 3
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 4
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: NEG
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 4
47866: NEG
47867: PUSH
47868: LD_INT 4
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 4
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 4
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 4
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 5
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 4
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 4
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 5
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 5
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 4
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 4
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 4
48097: PUSH
48098: LD_INT 4
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 4
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: LD_INT 4
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 5
48127: PUSH
48128: LD_INT 5
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 4
48137: PUSH
48138: LD_INT 5
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: LD_INT 4
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 5
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: LD_INT 5
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48232: LD_ADDR_VAR 0 33
48236: PUSH
48237: LD_INT 4
48239: NEG
48240: PUSH
48241: LD_INT 4
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 4
48251: NEG
48252: PUSH
48253: LD_INT 5
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: NEG
48264: PUSH
48265: LD_INT 4
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 3
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 4
48287: NEG
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 5
48299: NEG
48300: PUSH
48301: LD_INT 4
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 5
48311: NEG
48312: PUSH
48313: LD_INT 5
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: LD_INT 5
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 5
48335: NEG
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 4
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 4
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 4
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 4
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 4
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 5
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 5
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 4
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 5
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 3
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 4
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 4
48572: PUSH
48573: LD_INT 4
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: LD_INT 4
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 4
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 4
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 5
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 5
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 4
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 5
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 3
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48770: LD_ADDR_VAR 0 34
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 4
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 5
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 4
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 4
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 5
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 5
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 4
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 4
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 4
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 4
48972: PUSH
48973: LD_INT 4
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 5
48992: PUSH
48993: LD_INT 4
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 5
49002: PUSH
49003: LD_INT 5
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 4
49012: PUSH
49013: LD_INT 5
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: LD_INT 4
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 5
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 5
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 4
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 4
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 4
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 4
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 4
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 4
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 5
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 5
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// end ; end ;
49302: GO 49305
49304: POP
// case btype of b_depot , b_warehouse :
49305: LD_VAR 0 1
49309: PUSH
49310: LD_INT 0
49312: DOUBLE
49313: EQUAL
49314: IFTRUE 49324
49316: LD_INT 1
49318: DOUBLE
49319: EQUAL
49320: IFTRUE 49324
49322: GO 49525
49324: POP
// case nation of nation_american :
49325: LD_VAR 0 5
49329: PUSH
49330: LD_INT 1
49332: DOUBLE
49333: EQUAL
49334: IFTRUE 49338
49336: GO 49394
49338: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49339: LD_ADDR_VAR 0 9
49343: PUSH
49344: LD_VAR 0 11
49348: PUSH
49349: LD_VAR 0 12
49353: PUSH
49354: LD_VAR 0 13
49358: PUSH
49359: LD_VAR 0 14
49363: PUSH
49364: LD_VAR 0 15
49368: PUSH
49369: LD_VAR 0 16
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: PUSH
49382: LD_VAR 0 4
49386: PUSH
49387: LD_INT 1
49389: PLUS
49390: ARRAY
49391: ST_TO_ADDR
49392: GO 49523
49394: LD_INT 2
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49402
49400: GO 49458
49402: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49403: LD_ADDR_VAR 0 9
49407: PUSH
49408: LD_VAR 0 17
49412: PUSH
49413: LD_VAR 0 18
49417: PUSH
49418: LD_VAR 0 19
49422: PUSH
49423: LD_VAR 0 20
49427: PUSH
49428: LD_VAR 0 21
49432: PUSH
49433: LD_VAR 0 22
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: PUSH
49446: LD_VAR 0 4
49450: PUSH
49451: LD_INT 1
49453: PLUS
49454: ARRAY
49455: ST_TO_ADDR
49456: GO 49523
49458: LD_INT 3
49460: DOUBLE
49461: EQUAL
49462: IFTRUE 49466
49464: GO 49522
49466: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49467: LD_ADDR_VAR 0 9
49471: PUSH
49472: LD_VAR 0 23
49476: PUSH
49477: LD_VAR 0 24
49481: PUSH
49482: LD_VAR 0 25
49486: PUSH
49487: LD_VAR 0 26
49491: PUSH
49492: LD_VAR 0 27
49496: PUSH
49497: LD_VAR 0 28
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: PUSH
49510: LD_VAR 0 4
49514: PUSH
49515: LD_INT 1
49517: PLUS
49518: ARRAY
49519: ST_TO_ADDR
49520: GO 49523
49522: POP
49523: GO 50078
49525: LD_INT 2
49527: DOUBLE
49528: EQUAL
49529: IFTRUE 49539
49531: LD_INT 3
49533: DOUBLE
49534: EQUAL
49535: IFTRUE 49539
49537: GO 49595
49539: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49540: LD_ADDR_VAR 0 9
49544: PUSH
49545: LD_VAR 0 29
49549: PUSH
49550: LD_VAR 0 30
49554: PUSH
49555: LD_VAR 0 31
49559: PUSH
49560: LD_VAR 0 32
49564: PUSH
49565: LD_VAR 0 33
49569: PUSH
49570: LD_VAR 0 34
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: PUSH
49583: LD_VAR 0 4
49587: PUSH
49588: LD_INT 1
49590: PLUS
49591: ARRAY
49592: ST_TO_ADDR
49593: GO 50078
49595: LD_INT 16
49597: DOUBLE
49598: EQUAL
49599: IFTRUE 49657
49601: LD_INT 17
49603: DOUBLE
49604: EQUAL
49605: IFTRUE 49657
49607: LD_INT 18
49609: DOUBLE
49610: EQUAL
49611: IFTRUE 49657
49613: LD_INT 19
49615: DOUBLE
49616: EQUAL
49617: IFTRUE 49657
49619: LD_INT 22
49621: DOUBLE
49622: EQUAL
49623: IFTRUE 49657
49625: LD_INT 20
49627: DOUBLE
49628: EQUAL
49629: IFTRUE 49657
49631: LD_INT 21
49633: DOUBLE
49634: EQUAL
49635: IFTRUE 49657
49637: LD_INT 23
49639: DOUBLE
49640: EQUAL
49641: IFTRUE 49657
49643: LD_INT 24
49645: DOUBLE
49646: EQUAL
49647: IFTRUE 49657
49649: LD_INT 25
49651: DOUBLE
49652: EQUAL
49653: IFTRUE 49657
49655: GO 49713
49657: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49658: LD_ADDR_VAR 0 9
49662: PUSH
49663: LD_VAR 0 35
49667: PUSH
49668: LD_VAR 0 36
49672: PUSH
49673: LD_VAR 0 37
49677: PUSH
49678: LD_VAR 0 38
49682: PUSH
49683: LD_VAR 0 39
49687: PUSH
49688: LD_VAR 0 40
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: PUSH
49701: LD_VAR 0 4
49705: PUSH
49706: LD_INT 1
49708: PLUS
49709: ARRAY
49710: ST_TO_ADDR
49711: GO 50078
49713: LD_INT 6
49715: DOUBLE
49716: EQUAL
49717: IFTRUE 49769
49719: LD_INT 7
49721: DOUBLE
49722: EQUAL
49723: IFTRUE 49769
49725: LD_INT 8
49727: DOUBLE
49728: EQUAL
49729: IFTRUE 49769
49731: LD_INT 13
49733: DOUBLE
49734: EQUAL
49735: IFTRUE 49769
49737: LD_INT 12
49739: DOUBLE
49740: EQUAL
49741: IFTRUE 49769
49743: LD_INT 15
49745: DOUBLE
49746: EQUAL
49747: IFTRUE 49769
49749: LD_INT 11
49751: DOUBLE
49752: EQUAL
49753: IFTRUE 49769
49755: LD_INT 14
49757: DOUBLE
49758: EQUAL
49759: IFTRUE 49769
49761: LD_INT 10
49763: DOUBLE
49764: EQUAL
49765: IFTRUE 49769
49767: GO 49825
49769: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49770: LD_ADDR_VAR 0 9
49774: PUSH
49775: LD_VAR 0 41
49779: PUSH
49780: LD_VAR 0 42
49784: PUSH
49785: LD_VAR 0 43
49789: PUSH
49790: LD_VAR 0 44
49794: PUSH
49795: LD_VAR 0 45
49799: PUSH
49800: LD_VAR 0 46
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: PUSH
49813: LD_VAR 0 4
49817: PUSH
49818: LD_INT 1
49820: PLUS
49821: ARRAY
49822: ST_TO_ADDR
49823: GO 50078
49825: LD_INT 36
49827: DOUBLE
49828: EQUAL
49829: IFTRUE 49833
49831: GO 49889
49833: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49834: LD_ADDR_VAR 0 9
49838: PUSH
49839: LD_VAR 0 47
49843: PUSH
49844: LD_VAR 0 48
49848: PUSH
49849: LD_VAR 0 49
49853: PUSH
49854: LD_VAR 0 50
49858: PUSH
49859: LD_VAR 0 51
49863: PUSH
49864: LD_VAR 0 52
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: PUSH
49877: LD_VAR 0 4
49881: PUSH
49882: LD_INT 1
49884: PLUS
49885: ARRAY
49886: ST_TO_ADDR
49887: GO 50078
49889: LD_INT 4
49891: DOUBLE
49892: EQUAL
49893: IFTRUE 49915
49895: LD_INT 5
49897: DOUBLE
49898: EQUAL
49899: IFTRUE 49915
49901: LD_INT 34
49903: DOUBLE
49904: EQUAL
49905: IFTRUE 49915
49907: LD_INT 37
49909: DOUBLE
49910: EQUAL
49911: IFTRUE 49915
49913: GO 49971
49915: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49916: LD_ADDR_VAR 0 9
49920: PUSH
49921: LD_VAR 0 53
49925: PUSH
49926: LD_VAR 0 54
49930: PUSH
49931: LD_VAR 0 55
49935: PUSH
49936: LD_VAR 0 56
49940: PUSH
49941: LD_VAR 0 57
49945: PUSH
49946: LD_VAR 0 58
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: PUSH
49959: LD_VAR 0 4
49963: PUSH
49964: LD_INT 1
49966: PLUS
49967: ARRAY
49968: ST_TO_ADDR
49969: GO 50078
49971: LD_INT 31
49973: DOUBLE
49974: EQUAL
49975: IFTRUE 50021
49977: LD_INT 32
49979: DOUBLE
49980: EQUAL
49981: IFTRUE 50021
49983: LD_INT 33
49985: DOUBLE
49986: EQUAL
49987: IFTRUE 50021
49989: LD_INT 27
49991: DOUBLE
49992: EQUAL
49993: IFTRUE 50021
49995: LD_INT 26
49997: DOUBLE
49998: EQUAL
49999: IFTRUE 50021
50001: LD_INT 28
50003: DOUBLE
50004: EQUAL
50005: IFTRUE 50021
50007: LD_INT 29
50009: DOUBLE
50010: EQUAL
50011: IFTRUE 50021
50013: LD_INT 30
50015: DOUBLE
50016: EQUAL
50017: IFTRUE 50021
50019: GO 50077
50021: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50022: LD_ADDR_VAR 0 9
50026: PUSH
50027: LD_VAR 0 59
50031: PUSH
50032: LD_VAR 0 60
50036: PUSH
50037: LD_VAR 0 61
50041: PUSH
50042: LD_VAR 0 62
50046: PUSH
50047: LD_VAR 0 63
50051: PUSH
50052: LD_VAR 0 64
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: PUSH
50065: LD_VAR 0 4
50069: PUSH
50070: LD_INT 1
50072: PLUS
50073: ARRAY
50074: ST_TO_ADDR
50075: GO 50078
50077: POP
// temp_list2 = [ ] ;
50078: LD_ADDR_VAR 0 10
50082: PUSH
50083: EMPTY
50084: ST_TO_ADDR
// for i in temp_list do
50085: LD_ADDR_VAR 0 8
50089: PUSH
50090: LD_VAR 0 9
50094: PUSH
50095: FOR_IN
50096: IFFALSE 50148
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50098: LD_ADDR_VAR 0 10
50102: PUSH
50103: LD_VAR 0 10
50107: PUSH
50108: LD_VAR 0 8
50112: PUSH
50113: LD_INT 1
50115: ARRAY
50116: PUSH
50117: LD_VAR 0 2
50121: PLUS
50122: PUSH
50123: LD_VAR 0 8
50127: PUSH
50128: LD_INT 2
50130: ARRAY
50131: PUSH
50132: LD_VAR 0 3
50136: PLUS
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: ADD
50145: ST_TO_ADDR
50146: GO 50095
50148: POP
50149: POP
// result = temp_list2 ;
50150: LD_ADDR_VAR 0 7
50154: PUSH
50155: LD_VAR 0 10
50159: ST_TO_ADDR
// end ;
50160: LD_VAR 0 7
50164: RET
// export function EnemyInRange ( unit , dist ) ; begin
50165: LD_INT 0
50167: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50168: LD_ADDR_VAR 0 3
50172: PUSH
50173: LD_VAR 0 1
50177: PPUSH
50178: CALL_OW 255
50182: PPUSH
50183: LD_VAR 0 1
50187: PPUSH
50188: CALL_OW 250
50192: PPUSH
50193: LD_VAR 0 1
50197: PPUSH
50198: CALL_OW 251
50202: PPUSH
50203: LD_VAR 0 2
50207: PPUSH
50208: CALL 24269 0 4
50212: PUSH
50213: LD_INT 4
50215: ARRAY
50216: ST_TO_ADDR
// end ;
50217: LD_VAR 0 3
50221: RET
// export function PlayerSeeMe ( unit ) ; begin
50222: LD_INT 0
50224: PPUSH
// result := See ( your_side , unit ) ;
50225: LD_ADDR_VAR 0 2
50229: PUSH
50230: LD_OWVAR 2
50234: PPUSH
50235: LD_VAR 0 1
50239: PPUSH
50240: CALL_OW 292
50244: ST_TO_ADDR
// end ;
50245: LD_VAR 0 2
50249: RET
// export function ReverseDir ( unit ) ; begin
50250: LD_INT 0
50252: PPUSH
// if not unit then
50253: LD_VAR 0 1
50257: NOT
50258: IFFALSE 50262
// exit ;
50260: GO 50285
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50262: LD_ADDR_VAR 0 2
50266: PUSH
50267: LD_VAR 0 1
50271: PPUSH
50272: CALL_OW 254
50276: PUSH
50277: LD_INT 3
50279: PLUS
50280: PUSH
50281: LD_INT 6
50283: MOD
50284: ST_TO_ADDR
// end ;
50285: LD_VAR 0 2
50289: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
50290: LD_INT 0
50292: PPUSH
50293: PPUSH
50294: PPUSH
50295: PPUSH
50296: PPUSH
// if not hexes then
50297: LD_VAR 0 2
50301: NOT
50302: IFFALSE 50306
// exit ;
50304: GO 50454
// dist := 9999 ;
50306: LD_ADDR_VAR 0 5
50310: PUSH
50311: LD_INT 9999
50313: ST_TO_ADDR
// for i = 1 to hexes do
50314: LD_ADDR_VAR 0 4
50318: PUSH
50319: DOUBLE
50320: LD_INT 1
50322: DEC
50323: ST_TO_ADDR
50324: LD_VAR 0 2
50328: PUSH
50329: FOR_TO
50330: IFFALSE 50442
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
50332: LD_VAR 0 1
50336: PPUSH
50337: LD_VAR 0 2
50341: PUSH
50342: LD_VAR 0 4
50346: ARRAY
50347: PUSH
50348: LD_INT 1
50350: ARRAY
50351: PPUSH
50352: LD_VAR 0 2
50356: PUSH
50357: LD_VAR 0 4
50361: ARRAY
50362: PUSH
50363: LD_INT 2
50365: ARRAY
50366: PPUSH
50367: CALL_OW 297
50371: PUSH
50372: LD_VAR 0 5
50376: LESS
50377: IFFALSE 50440
// begin hex := hexes [ i ] ;
50379: LD_ADDR_VAR 0 7
50383: PUSH
50384: LD_VAR 0 2
50388: PUSH
50389: LD_VAR 0 4
50393: ARRAY
50394: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50395: LD_ADDR_VAR 0 5
50399: PUSH
50400: LD_VAR 0 1
50404: PPUSH
50405: LD_VAR 0 2
50409: PUSH
50410: LD_VAR 0 4
50414: ARRAY
50415: PUSH
50416: LD_INT 1
50418: ARRAY
50419: PPUSH
50420: LD_VAR 0 2
50424: PUSH
50425: LD_VAR 0 4
50429: ARRAY
50430: PUSH
50431: LD_INT 2
50433: ARRAY
50434: PPUSH
50435: CALL_OW 297
50439: ST_TO_ADDR
// end ; end ;
50440: GO 50329
50442: POP
50443: POP
// result := hex ;
50444: LD_ADDR_VAR 0 3
50448: PUSH
50449: LD_VAR 0 7
50453: ST_TO_ADDR
// end ;
50454: LD_VAR 0 3
50458: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50459: LD_INT 0
50461: PPUSH
50462: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50463: LD_VAR 0 1
50467: NOT
50468: PUSH
50469: LD_VAR 0 1
50473: PUSH
50474: LD_INT 21
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 23
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PPUSH
50498: CALL_OW 69
50502: IN
50503: NOT
50504: OR
50505: IFFALSE 50509
// exit ;
50507: GO 50556
// for i = 1 to 3 do
50509: LD_ADDR_VAR 0 3
50513: PUSH
50514: DOUBLE
50515: LD_INT 1
50517: DEC
50518: ST_TO_ADDR
50519: LD_INT 3
50521: PUSH
50522: FOR_TO
50523: IFFALSE 50554
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50525: LD_VAR 0 1
50529: PPUSH
50530: CALL_OW 250
50534: PPUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 251
50544: PPUSH
50545: LD_INT 1
50547: PPUSH
50548: CALL_OW 453
50552: GO 50522
50554: POP
50555: POP
// end ;
50556: LD_VAR 0 2
50560: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50561: LD_INT 0
50563: PPUSH
50564: PPUSH
50565: PPUSH
50566: PPUSH
50567: PPUSH
50568: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50569: LD_VAR 0 1
50573: NOT
50574: PUSH
50575: LD_VAR 0 2
50579: NOT
50580: OR
50581: PUSH
50582: LD_VAR 0 1
50586: PPUSH
50587: CALL_OW 314
50591: OR
50592: IFFALSE 50596
// exit ;
50594: GO 51037
// x := GetX ( enemy_unit ) ;
50596: LD_ADDR_VAR 0 7
50600: PUSH
50601: LD_VAR 0 2
50605: PPUSH
50606: CALL_OW 250
50610: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50611: LD_ADDR_VAR 0 8
50615: PUSH
50616: LD_VAR 0 2
50620: PPUSH
50621: CALL_OW 251
50625: ST_TO_ADDR
// if not x or not y then
50626: LD_VAR 0 7
50630: NOT
50631: PUSH
50632: LD_VAR 0 8
50636: NOT
50637: OR
50638: IFFALSE 50642
// exit ;
50640: GO 51037
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50642: LD_ADDR_VAR 0 6
50646: PUSH
50647: LD_VAR 0 7
50651: PPUSH
50652: LD_INT 0
50654: PPUSH
50655: LD_INT 4
50657: PPUSH
50658: CALL_OW 272
50662: PUSH
50663: LD_VAR 0 8
50667: PPUSH
50668: LD_INT 0
50670: PPUSH
50671: LD_INT 4
50673: PPUSH
50674: CALL_OW 273
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_VAR 0 7
50687: PPUSH
50688: LD_INT 1
50690: PPUSH
50691: LD_INT 4
50693: PPUSH
50694: CALL_OW 272
50698: PUSH
50699: LD_VAR 0 8
50703: PPUSH
50704: LD_INT 1
50706: PPUSH
50707: LD_INT 4
50709: PPUSH
50710: CALL_OW 273
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_VAR 0 7
50723: PPUSH
50724: LD_INT 2
50726: PPUSH
50727: LD_INT 4
50729: PPUSH
50730: CALL_OW 272
50734: PUSH
50735: LD_VAR 0 8
50739: PPUSH
50740: LD_INT 2
50742: PPUSH
50743: LD_INT 4
50745: PPUSH
50746: CALL_OW 273
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_VAR 0 7
50759: PPUSH
50760: LD_INT 3
50762: PPUSH
50763: LD_INT 4
50765: PPUSH
50766: CALL_OW 272
50770: PUSH
50771: LD_VAR 0 8
50775: PPUSH
50776: LD_INT 3
50778: PPUSH
50779: LD_INT 4
50781: PPUSH
50782: CALL_OW 273
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_VAR 0 7
50795: PPUSH
50796: LD_INT 4
50798: PPUSH
50799: LD_INT 4
50801: PPUSH
50802: CALL_OW 272
50806: PUSH
50807: LD_VAR 0 8
50811: PPUSH
50812: LD_INT 4
50814: PPUSH
50815: LD_INT 4
50817: PPUSH
50818: CALL_OW 273
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_VAR 0 7
50831: PPUSH
50832: LD_INT 5
50834: PPUSH
50835: LD_INT 4
50837: PPUSH
50838: CALL_OW 272
50842: PUSH
50843: LD_VAR 0 8
50847: PPUSH
50848: LD_INT 5
50850: PPUSH
50851: LD_INT 4
50853: PPUSH
50854: CALL_OW 273
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// for i = tmp downto 1 do
50871: LD_ADDR_VAR 0 4
50875: PUSH
50876: DOUBLE
50877: LD_VAR 0 6
50881: INC
50882: ST_TO_ADDR
50883: LD_INT 1
50885: PUSH
50886: FOR_DOWNTO
50887: IFFALSE 50988
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50889: LD_VAR 0 6
50893: PUSH
50894: LD_VAR 0 4
50898: ARRAY
50899: PUSH
50900: LD_INT 1
50902: ARRAY
50903: PPUSH
50904: LD_VAR 0 6
50908: PUSH
50909: LD_VAR 0 4
50913: ARRAY
50914: PUSH
50915: LD_INT 2
50917: ARRAY
50918: PPUSH
50919: CALL_OW 488
50923: NOT
50924: PUSH
50925: LD_VAR 0 6
50929: PUSH
50930: LD_VAR 0 4
50934: ARRAY
50935: PUSH
50936: LD_INT 1
50938: ARRAY
50939: PPUSH
50940: LD_VAR 0 6
50944: PUSH
50945: LD_VAR 0 4
50949: ARRAY
50950: PUSH
50951: LD_INT 2
50953: ARRAY
50954: PPUSH
50955: CALL_OW 428
50959: PUSH
50960: LD_INT 0
50962: NONEQUAL
50963: OR
50964: IFFALSE 50986
// tmp := Delete ( tmp , i ) ;
50966: LD_ADDR_VAR 0 6
50970: PUSH
50971: LD_VAR 0 6
50975: PPUSH
50976: LD_VAR 0 4
50980: PPUSH
50981: CALL_OW 3
50985: ST_TO_ADDR
50986: GO 50886
50988: POP
50989: POP
// j := GetClosestHex ( unit , tmp ) ;
50990: LD_ADDR_VAR 0 5
50994: PUSH
50995: LD_VAR 0 1
50999: PPUSH
51000: LD_VAR 0 6
51004: PPUSH
51005: CALL 50290 0 2
51009: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51010: LD_VAR 0 1
51014: PPUSH
51015: LD_VAR 0 5
51019: PUSH
51020: LD_INT 1
51022: ARRAY
51023: PPUSH
51024: LD_VAR 0 5
51028: PUSH
51029: LD_INT 2
51031: ARRAY
51032: PPUSH
51033: CALL_OW 111
// end ;
51037: LD_VAR 0 3
51041: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51042: LD_INT 0
51044: PPUSH
51045: PPUSH
51046: PPUSH
// uc_side = 0 ;
51047: LD_ADDR_OWVAR 20
51051: PUSH
51052: LD_INT 0
51054: ST_TO_ADDR
// uc_nation = 0 ;
51055: LD_ADDR_OWVAR 21
51059: PUSH
51060: LD_INT 0
51062: ST_TO_ADDR
// InitHc ;
51063: CALL_OW 19
// InitVc ;
51067: CALL_OW 20
// if mastodonts then
51071: LD_VAR 0 6
51075: IFFALSE 51142
// for i = 1 to mastodonts do
51077: LD_ADDR_VAR 0 11
51081: PUSH
51082: DOUBLE
51083: LD_INT 1
51085: DEC
51086: ST_TO_ADDR
51087: LD_VAR 0 6
51091: PUSH
51092: FOR_TO
51093: IFFALSE 51140
// begin vc_chassis := 31 ;
51095: LD_ADDR_OWVAR 37
51099: PUSH
51100: LD_INT 31
51102: ST_TO_ADDR
// vc_control := control_rider ;
51103: LD_ADDR_OWVAR 38
51107: PUSH
51108: LD_INT 4
51110: ST_TO_ADDR
// animal := CreateVehicle ;
51111: LD_ADDR_VAR 0 12
51115: PUSH
51116: CALL_OW 45
51120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51121: LD_VAR 0 12
51125: PPUSH
51126: LD_VAR 0 8
51130: PPUSH
51131: LD_INT 0
51133: PPUSH
51134: CALL 53211 0 3
// end ;
51138: GO 51092
51140: POP
51141: POP
// if horses then
51142: LD_VAR 0 5
51146: IFFALSE 51213
// for i = 1 to horses do
51148: LD_ADDR_VAR 0 11
51152: PUSH
51153: DOUBLE
51154: LD_INT 1
51156: DEC
51157: ST_TO_ADDR
51158: LD_VAR 0 5
51162: PUSH
51163: FOR_TO
51164: IFFALSE 51211
// begin hc_class := 21 ;
51166: LD_ADDR_OWVAR 28
51170: PUSH
51171: LD_INT 21
51173: ST_TO_ADDR
// hc_gallery :=  ;
51174: LD_ADDR_OWVAR 33
51178: PUSH
51179: LD_STRING 
51181: ST_TO_ADDR
// animal := CreateHuman ;
51182: LD_ADDR_VAR 0 12
51186: PUSH
51187: CALL_OW 44
51191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51192: LD_VAR 0 12
51196: PPUSH
51197: LD_VAR 0 8
51201: PPUSH
51202: LD_INT 0
51204: PPUSH
51205: CALL 53211 0 3
// end ;
51209: GO 51163
51211: POP
51212: POP
// if birds then
51213: LD_VAR 0 1
51217: IFFALSE 51284
// for i = 1 to birds do
51219: LD_ADDR_VAR 0 11
51223: PUSH
51224: DOUBLE
51225: LD_INT 1
51227: DEC
51228: ST_TO_ADDR
51229: LD_VAR 0 1
51233: PUSH
51234: FOR_TO
51235: IFFALSE 51282
// begin hc_class = 18 ;
51237: LD_ADDR_OWVAR 28
51241: PUSH
51242: LD_INT 18
51244: ST_TO_ADDR
// hc_gallery =  ;
51245: LD_ADDR_OWVAR 33
51249: PUSH
51250: LD_STRING 
51252: ST_TO_ADDR
// animal := CreateHuman ;
51253: LD_ADDR_VAR 0 12
51257: PUSH
51258: CALL_OW 44
51262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51263: LD_VAR 0 12
51267: PPUSH
51268: LD_VAR 0 8
51272: PPUSH
51273: LD_INT 0
51275: PPUSH
51276: CALL 53211 0 3
// end ;
51280: GO 51234
51282: POP
51283: POP
// if tigers then
51284: LD_VAR 0 2
51288: IFFALSE 51372
// for i = 1 to tigers do
51290: LD_ADDR_VAR 0 11
51294: PUSH
51295: DOUBLE
51296: LD_INT 1
51298: DEC
51299: ST_TO_ADDR
51300: LD_VAR 0 2
51304: PUSH
51305: FOR_TO
51306: IFFALSE 51370
// begin hc_class = class_tiger ;
51308: LD_ADDR_OWVAR 28
51312: PUSH
51313: LD_INT 14
51315: ST_TO_ADDR
// hc_gallery =  ;
51316: LD_ADDR_OWVAR 33
51320: PUSH
51321: LD_STRING 
51323: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51324: LD_ADDR_OWVAR 35
51328: PUSH
51329: LD_INT 7
51331: NEG
51332: PPUSH
51333: LD_INT 7
51335: PPUSH
51336: CALL_OW 12
51340: ST_TO_ADDR
// animal := CreateHuman ;
51341: LD_ADDR_VAR 0 12
51345: PUSH
51346: CALL_OW 44
51350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51351: LD_VAR 0 12
51355: PPUSH
51356: LD_VAR 0 8
51360: PPUSH
51361: LD_INT 0
51363: PPUSH
51364: CALL 53211 0 3
// end ;
51368: GO 51305
51370: POP
51371: POP
// if apemans then
51372: LD_VAR 0 3
51376: IFFALSE 51499
// for i = 1 to apemans do
51378: LD_ADDR_VAR 0 11
51382: PUSH
51383: DOUBLE
51384: LD_INT 1
51386: DEC
51387: ST_TO_ADDR
51388: LD_VAR 0 3
51392: PUSH
51393: FOR_TO
51394: IFFALSE 51497
// begin hc_class = class_apeman ;
51396: LD_ADDR_OWVAR 28
51400: PUSH
51401: LD_INT 12
51403: ST_TO_ADDR
// hc_gallery =  ;
51404: LD_ADDR_OWVAR 33
51408: PUSH
51409: LD_STRING 
51411: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
51412: LD_ADDR_OWVAR 35
51416: PUSH
51417: LD_INT 5
51419: NEG
51420: PPUSH
51421: LD_INT 5
51423: PPUSH
51424: CALL_OW 12
51428: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51429: LD_ADDR_OWVAR 31
51433: PUSH
51434: LD_INT 1
51436: PPUSH
51437: LD_INT 3
51439: PPUSH
51440: CALL_OW 12
51444: PUSH
51445: LD_INT 1
51447: PPUSH
51448: LD_INT 3
51450: PPUSH
51451: CALL_OW 12
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// animal := CreateHuman ;
51468: LD_ADDR_VAR 0 12
51472: PUSH
51473: CALL_OW 44
51477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51478: LD_VAR 0 12
51482: PPUSH
51483: LD_VAR 0 8
51487: PPUSH
51488: LD_INT 0
51490: PPUSH
51491: CALL 53211 0 3
// end ;
51495: GO 51393
51497: POP
51498: POP
// if enchidnas then
51499: LD_VAR 0 4
51503: IFFALSE 51570
// for i = 1 to enchidnas do
51505: LD_ADDR_VAR 0 11
51509: PUSH
51510: DOUBLE
51511: LD_INT 1
51513: DEC
51514: ST_TO_ADDR
51515: LD_VAR 0 4
51519: PUSH
51520: FOR_TO
51521: IFFALSE 51568
// begin hc_class = 13 ;
51523: LD_ADDR_OWVAR 28
51527: PUSH
51528: LD_INT 13
51530: ST_TO_ADDR
// hc_gallery =  ;
51531: LD_ADDR_OWVAR 33
51535: PUSH
51536: LD_STRING 
51538: ST_TO_ADDR
// animal := CreateHuman ;
51539: LD_ADDR_VAR 0 12
51543: PUSH
51544: CALL_OW 44
51548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51549: LD_VAR 0 12
51553: PPUSH
51554: LD_VAR 0 8
51558: PPUSH
51559: LD_INT 0
51561: PPUSH
51562: CALL 53211 0 3
// end ;
51566: GO 51520
51568: POP
51569: POP
// if fishes then
51570: LD_VAR 0 7
51574: IFFALSE 51641
// for i = 1 to fishes do
51576: LD_ADDR_VAR 0 11
51580: PUSH
51581: DOUBLE
51582: LD_INT 1
51584: DEC
51585: ST_TO_ADDR
51586: LD_VAR 0 7
51590: PUSH
51591: FOR_TO
51592: IFFALSE 51639
// begin hc_class = 20 ;
51594: LD_ADDR_OWVAR 28
51598: PUSH
51599: LD_INT 20
51601: ST_TO_ADDR
// hc_gallery =  ;
51602: LD_ADDR_OWVAR 33
51606: PUSH
51607: LD_STRING 
51609: ST_TO_ADDR
// animal := CreateHuman ;
51610: LD_ADDR_VAR 0 12
51614: PUSH
51615: CALL_OW 44
51619: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51620: LD_VAR 0 12
51624: PPUSH
51625: LD_VAR 0 9
51629: PPUSH
51630: LD_INT 0
51632: PPUSH
51633: CALL 53211 0 3
// end ;
51637: GO 51591
51639: POP
51640: POP
// end ;
51641: LD_VAR 0 10
51645: RET
// export function WantHeal ( sci , unit ) ; begin
51646: LD_INT 0
51648: PPUSH
// if GetTaskList ( sci ) > 0 then
51649: LD_VAR 0 1
51653: PPUSH
51654: CALL_OW 437
51658: PUSH
51659: LD_INT 0
51661: GREATER
51662: IFFALSE 51732
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51664: LD_VAR 0 1
51668: PPUSH
51669: CALL_OW 437
51673: PUSH
51674: LD_INT 1
51676: ARRAY
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PUSH
51682: LD_STRING l
51684: EQUAL
51685: PUSH
51686: LD_VAR 0 1
51690: PPUSH
51691: CALL_OW 437
51695: PUSH
51696: LD_INT 1
51698: ARRAY
51699: PUSH
51700: LD_INT 4
51702: ARRAY
51703: PUSH
51704: LD_VAR 0 2
51708: EQUAL
51709: AND
51710: IFFALSE 51722
// result := true else
51712: LD_ADDR_VAR 0 3
51716: PUSH
51717: LD_INT 1
51719: ST_TO_ADDR
51720: GO 51730
// result := false ;
51722: LD_ADDR_VAR 0 3
51726: PUSH
51727: LD_INT 0
51729: ST_TO_ADDR
// end else
51730: GO 51740
// result := false ;
51732: LD_ADDR_VAR 0 3
51736: PUSH
51737: LD_INT 0
51739: ST_TO_ADDR
// end ;
51740: LD_VAR 0 3
51744: RET
// export function HealTarget ( sci ) ; begin
51745: LD_INT 0
51747: PPUSH
// if not sci then
51748: LD_VAR 0 1
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 51822
// result := 0 ;
51757: LD_ADDR_VAR 0 2
51761: PUSH
51762: LD_INT 0
51764: ST_TO_ADDR
// if GetTaskList ( sci ) then
51765: LD_VAR 0 1
51769: PPUSH
51770: CALL_OW 437
51774: IFFALSE 51822
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 437
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: PUSH
51790: LD_INT 1
51792: ARRAY
51793: PUSH
51794: LD_STRING l
51796: EQUAL
51797: IFFALSE 51822
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51799: LD_ADDR_VAR 0 2
51803: PUSH
51804: LD_VAR 0 1
51808: PPUSH
51809: CALL_OW 437
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: PUSH
51818: LD_INT 4
51820: ARRAY
51821: ST_TO_ADDR
// end ;
51822: LD_VAR 0 2
51826: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51827: LD_INT 0
51829: PPUSH
51830: PPUSH
51831: PPUSH
51832: PPUSH
// if not base_units then
51833: LD_VAR 0 1
51837: NOT
51838: IFFALSE 51842
// exit ;
51840: GO 51929
// result := false ;
51842: LD_ADDR_VAR 0 2
51846: PUSH
51847: LD_INT 0
51849: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51850: LD_ADDR_VAR 0 5
51854: PUSH
51855: LD_VAR 0 1
51859: PPUSH
51860: LD_INT 21
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PPUSH
51870: CALL_OW 72
51874: ST_TO_ADDR
// if not tmp then
51875: LD_VAR 0 5
51879: NOT
51880: IFFALSE 51884
// exit ;
51882: GO 51929
// for i in tmp do
51884: LD_ADDR_VAR 0 3
51888: PUSH
51889: LD_VAR 0 5
51893: PUSH
51894: FOR_IN
51895: IFFALSE 51927
// begin result := EnemyInRange ( i , 22 ) ;
51897: LD_ADDR_VAR 0 2
51901: PUSH
51902: LD_VAR 0 3
51906: PPUSH
51907: LD_INT 22
51909: PPUSH
51910: CALL 50165 0 2
51914: ST_TO_ADDR
// if result then
51915: LD_VAR 0 2
51919: IFFALSE 51925
// exit ;
51921: POP
51922: POP
51923: GO 51929
// end ;
51925: GO 51894
51927: POP
51928: POP
// end ;
51929: LD_VAR 0 2
51933: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51934: LD_INT 0
51936: PPUSH
51937: PPUSH
// if not units then
51938: LD_VAR 0 1
51942: NOT
51943: IFFALSE 51947
// exit ;
51945: GO 52017
// result := [ ] ;
51947: LD_ADDR_VAR 0 3
51951: PUSH
51952: EMPTY
51953: ST_TO_ADDR
// for i in units do
51954: LD_ADDR_VAR 0 4
51958: PUSH
51959: LD_VAR 0 1
51963: PUSH
51964: FOR_IN
51965: IFFALSE 52015
// if GetTag ( i ) = tag then
51967: LD_VAR 0 4
51971: PPUSH
51972: CALL_OW 110
51976: PUSH
51977: LD_VAR 0 2
51981: EQUAL
51982: IFFALSE 52013
// result := Insert ( result , result + 1 , i ) ;
51984: LD_ADDR_VAR 0 3
51988: PUSH
51989: LD_VAR 0 3
51993: PPUSH
51994: LD_VAR 0 3
51998: PUSH
51999: LD_INT 1
52001: PLUS
52002: PPUSH
52003: LD_VAR 0 4
52007: PPUSH
52008: CALL_OW 2
52012: ST_TO_ADDR
52013: GO 51964
52015: POP
52016: POP
// end ;
52017: LD_VAR 0 3
52021: RET
// export function IsDriver ( un ) ; begin
52022: LD_INT 0
52024: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52025: LD_ADDR_VAR 0 2
52029: PUSH
52030: LD_VAR 0 1
52034: PUSH
52035: LD_INT 55
52037: PUSH
52038: EMPTY
52039: LIST
52040: PPUSH
52041: CALL_OW 69
52045: IN
52046: ST_TO_ADDR
// end ;
52047: LD_VAR 0 2
52051: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52052: LD_INT 0
52054: PPUSH
52055: PPUSH
// list := [ ] ;
52056: LD_ADDR_VAR 0 5
52060: PUSH
52061: EMPTY
52062: ST_TO_ADDR
// case d of 0 :
52063: LD_VAR 0 3
52067: PUSH
52068: LD_INT 0
52070: DOUBLE
52071: EQUAL
52072: IFTRUE 52076
52074: GO 52209
52076: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52077: LD_ADDR_VAR 0 5
52081: PUSH
52082: LD_VAR 0 1
52086: PUSH
52087: LD_INT 4
52089: MINUS
52090: PUSH
52091: LD_VAR 0 2
52095: PUSH
52096: LD_INT 4
52098: MINUS
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: PUSH
52108: LD_VAR 0 1
52112: PUSH
52113: LD_INT 3
52115: MINUS
52116: PUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: PUSH
52130: LD_VAR 0 1
52134: PUSH
52135: LD_INT 4
52137: PLUS
52138: PUSH
52139: LD_VAR 0 2
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: PUSH
52152: LD_VAR 0 1
52156: PUSH
52157: LD_INT 3
52159: PLUS
52160: PUSH
52161: LD_VAR 0 2
52165: PUSH
52166: LD_INT 3
52168: PLUS
52169: PUSH
52170: LD_INT 5
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: PUSH
52178: LD_VAR 0 1
52182: PUSH
52183: LD_VAR 0 2
52187: PUSH
52188: LD_INT 4
52190: PLUS
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// end ; 1 :
52207: GO 52907
52209: LD_INT 1
52211: DOUBLE
52212: EQUAL
52213: IFTRUE 52217
52215: GO 52350
52217: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52218: LD_ADDR_VAR 0 5
52222: PUSH
52223: LD_VAR 0 1
52227: PUSH
52228: LD_VAR 0 2
52232: PUSH
52233: LD_INT 4
52235: MINUS
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: LIST
52244: PUSH
52245: LD_VAR 0 1
52249: PUSH
52250: LD_INT 3
52252: MINUS
52253: PUSH
52254: LD_VAR 0 2
52258: PUSH
52259: LD_INT 3
52261: MINUS
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: PUSH
52271: LD_VAR 0 1
52275: PUSH
52276: LD_INT 4
52278: MINUS
52279: PUSH
52280: LD_VAR 0 2
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: PUSH
52293: LD_VAR 0 1
52297: PUSH
52298: LD_VAR 0 2
52302: PUSH
52303: LD_INT 3
52305: PLUS
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: PUSH
52315: LD_VAR 0 1
52319: PUSH
52320: LD_INT 4
52322: PLUS
52323: PUSH
52324: LD_VAR 0 2
52328: PUSH
52329: LD_INT 4
52331: PLUS
52332: PUSH
52333: LD_INT 5
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// end ; 2 :
52348: GO 52907
52350: LD_INT 2
52352: DOUBLE
52353: EQUAL
52354: IFTRUE 52358
52356: GO 52487
52358: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52359: LD_ADDR_VAR 0 5
52363: PUSH
52364: LD_VAR 0 1
52368: PUSH
52369: LD_VAR 0 2
52373: PUSH
52374: LD_INT 3
52376: MINUS
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: PUSH
52386: LD_VAR 0 1
52390: PUSH
52391: LD_INT 4
52393: PLUS
52394: PUSH
52395: LD_VAR 0 2
52399: PUSH
52400: LD_INT 4
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: PUSH
52408: LD_VAR 0 1
52412: PUSH
52413: LD_VAR 0 2
52417: PUSH
52418: LD_INT 4
52420: PLUS
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: PUSH
52430: LD_VAR 0 1
52434: PUSH
52435: LD_INT 3
52437: MINUS
52438: PUSH
52439: LD_VAR 0 2
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: PUSH
52452: LD_VAR 0 1
52456: PUSH
52457: LD_INT 4
52459: MINUS
52460: PUSH
52461: LD_VAR 0 2
52465: PUSH
52466: LD_INT 4
52468: MINUS
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// end ; 3 :
52485: GO 52907
52487: LD_INT 3
52489: DOUBLE
52490: EQUAL
52491: IFTRUE 52495
52493: GO 52628
52495: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52496: LD_ADDR_VAR 0 5
52500: PUSH
52501: LD_VAR 0 1
52505: PUSH
52506: LD_INT 3
52508: PLUS
52509: PUSH
52510: LD_VAR 0 2
52514: PUSH
52515: LD_INT 4
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: PUSH
52523: LD_VAR 0 1
52527: PUSH
52528: LD_INT 4
52530: PLUS
52531: PUSH
52532: LD_VAR 0 2
52536: PUSH
52537: LD_INT 4
52539: PLUS
52540: PUSH
52541: LD_INT 5
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: PUSH
52549: LD_VAR 0 1
52553: PUSH
52554: LD_INT 4
52556: MINUS
52557: PUSH
52558: LD_VAR 0 2
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: PUSH
52571: LD_VAR 0 1
52575: PUSH
52576: LD_VAR 0 2
52580: PUSH
52581: LD_INT 4
52583: MINUS
52584: PUSH
52585: LD_INT 3
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: PUSH
52593: LD_VAR 0 1
52597: PUSH
52598: LD_INT 3
52600: MINUS
52601: PUSH
52602: LD_VAR 0 2
52606: PUSH
52607: LD_INT 3
52609: MINUS
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// end ; 4 :
52626: GO 52907
52628: LD_INT 4
52630: DOUBLE
52631: EQUAL
52632: IFTRUE 52636
52634: GO 52769
52636: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52637: LD_ADDR_VAR 0 5
52641: PUSH
52642: LD_VAR 0 1
52646: PUSH
52647: LD_VAR 0 2
52651: PUSH
52652: LD_INT 4
52654: PLUS
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: PUSH
52664: LD_VAR 0 1
52668: PUSH
52669: LD_INT 3
52671: PLUS
52672: PUSH
52673: LD_VAR 0 2
52677: PUSH
52678: LD_INT 3
52680: PLUS
52681: PUSH
52682: LD_INT 5
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_INT 4
52697: PLUS
52698: PUSH
52699: LD_VAR 0 2
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: PUSH
52712: LD_VAR 0 1
52716: PUSH
52717: LD_VAR 0 2
52721: PUSH
52722: LD_INT 3
52724: MINUS
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: PUSH
52734: LD_VAR 0 1
52738: PUSH
52739: LD_INT 4
52741: MINUS
52742: PUSH
52743: LD_VAR 0 2
52747: PUSH
52748: LD_INT 4
52750: MINUS
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// end ; 5 :
52767: GO 52907
52769: LD_INT 5
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52777
52775: GO 52906
52777: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52778: LD_ADDR_VAR 0 5
52782: PUSH
52783: LD_VAR 0 1
52787: PUSH
52788: LD_INT 4
52790: MINUS
52791: PUSH
52792: LD_VAR 0 2
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: PUSH
52805: LD_VAR 0 1
52809: PUSH
52810: LD_VAR 0 2
52814: PUSH
52815: LD_INT 4
52817: MINUS
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: LIST
52826: PUSH
52827: LD_VAR 0 1
52831: PUSH
52832: LD_INT 4
52834: PLUS
52835: PUSH
52836: LD_VAR 0 2
52840: PUSH
52841: LD_INT 4
52843: PLUS
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: PUSH
52853: LD_VAR 0 1
52857: PUSH
52858: LD_INT 3
52860: PLUS
52861: PUSH
52862: LD_VAR 0 2
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: PUSH
52875: LD_VAR 0 1
52879: PUSH
52880: LD_VAR 0 2
52884: PUSH
52885: LD_INT 3
52887: PLUS
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: ST_TO_ADDR
// end ; end ;
52904: GO 52907
52906: POP
// result := list ;
52907: LD_ADDR_VAR 0 4
52911: PUSH
52912: LD_VAR 0 5
52916: ST_TO_ADDR
// end ;
52917: LD_VAR 0 4
52921: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
52926: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52927: LD_VAR 0 1
52931: NOT
52932: PUSH
52933: LD_VAR 0 2
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: IN
52956: NOT
52957: OR
52958: IFFALSE 52962
// exit ;
52960: GO 53054
// tmp := [ ] ;
52962: LD_ADDR_VAR 0 5
52966: PUSH
52967: EMPTY
52968: ST_TO_ADDR
// for i in units do
52969: LD_ADDR_VAR 0 4
52973: PUSH
52974: LD_VAR 0 1
52978: PUSH
52979: FOR_IN
52980: IFFALSE 53023
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52982: LD_ADDR_VAR 0 5
52986: PUSH
52987: LD_VAR 0 5
52991: PPUSH
52992: LD_VAR 0 5
52996: PUSH
52997: LD_INT 1
52999: PLUS
53000: PPUSH
53001: LD_VAR 0 4
53005: PPUSH
53006: LD_VAR 0 2
53010: PPUSH
53011: CALL_OW 259
53015: PPUSH
53016: CALL_OW 2
53020: ST_TO_ADDR
53021: GO 52979
53023: POP
53024: POP
// if not tmp then
53025: LD_VAR 0 5
53029: NOT
53030: IFFALSE 53034
// exit ;
53032: GO 53054
// result := SortListByListDesc ( units , tmp ) ;
53034: LD_ADDR_VAR 0 3
53038: PUSH
53039: LD_VAR 0 1
53043: PPUSH
53044: LD_VAR 0 5
53048: PPUSH
53049: CALL_OW 77
53053: ST_TO_ADDR
// end ;
53054: LD_VAR 0 3
53058: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53059: LD_INT 0
53061: PPUSH
53062: PPUSH
53063: PPUSH
// x := GetX ( building ) ;
53064: LD_ADDR_VAR 0 4
53068: PUSH
53069: LD_VAR 0 2
53073: PPUSH
53074: CALL_OW 250
53078: ST_TO_ADDR
// y := GetY ( building ) ;
53079: LD_ADDR_VAR 0 5
53083: PUSH
53084: LD_VAR 0 2
53088: PPUSH
53089: CALL_OW 251
53093: ST_TO_ADDR
// if GetTaskList ( unit ) then
53094: LD_VAR 0 1
53098: PPUSH
53099: CALL_OW 437
53103: IFFALSE 53198
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53105: LD_STRING e
53107: PUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 437
53117: PUSH
53118: LD_INT 1
53120: ARRAY
53121: PUSH
53122: LD_INT 1
53124: ARRAY
53125: EQUAL
53126: PUSH
53127: LD_VAR 0 4
53131: PUSH
53132: LD_VAR 0 1
53136: PPUSH
53137: CALL_OW 437
53141: PUSH
53142: LD_INT 1
53144: ARRAY
53145: PUSH
53146: LD_INT 2
53148: ARRAY
53149: EQUAL
53150: AND
53151: PUSH
53152: LD_VAR 0 5
53156: PUSH
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 437
53166: PUSH
53167: LD_INT 1
53169: ARRAY
53170: PUSH
53171: LD_INT 3
53173: ARRAY
53174: EQUAL
53175: AND
53176: IFFALSE 53188
// result := true else
53178: LD_ADDR_VAR 0 3
53182: PUSH
53183: LD_INT 1
53185: ST_TO_ADDR
53186: GO 53196
// result := false ;
53188: LD_ADDR_VAR 0 3
53192: PUSH
53193: LD_INT 0
53195: ST_TO_ADDR
// end else
53196: GO 53206
// result := false ;
53198: LD_ADDR_VAR 0 3
53202: PUSH
53203: LD_INT 0
53205: ST_TO_ADDR
// end ;
53206: LD_VAR 0 3
53210: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53211: LD_INT 0
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
// if not unit or not area then
53217: LD_VAR 0 1
53221: NOT
53222: PUSH
53223: LD_VAR 0 2
53227: NOT
53228: OR
53229: IFFALSE 53233
// exit ;
53231: GO 53397
// tmp := AreaToList ( area , i ) ;
53233: LD_ADDR_VAR 0 6
53237: PUSH
53238: LD_VAR 0 2
53242: PPUSH
53243: LD_VAR 0 5
53247: PPUSH
53248: CALL_OW 517
53252: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53253: LD_ADDR_VAR 0 5
53257: PUSH
53258: DOUBLE
53259: LD_INT 1
53261: DEC
53262: ST_TO_ADDR
53263: LD_VAR 0 6
53267: PUSH
53268: LD_INT 1
53270: ARRAY
53271: PUSH
53272: FOR_TO
53273: IFFALSE 53395
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53275: LD_ADDR_VAR 0 7
53279: PUSH
53280: LD_VAR 0 6
53284: PUSH
53285: LD_INT 1
53287: ARRAY
53288: PUSH
53289: LD_VAR 0 5
53293: ARRAY
53294: PUSH
53295: LD_VAR 0 6
53299: PUSH
53300: LD_INT 2
53302: ARRAY
53303: PUSH
53304: LD_VAR 0 5
53308: ARRAY
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53314: LD_VAR 0 7
53318: PUSH
53319: LD_INT 1
53321: ARRAY
53322: PPUSH
53323: LD_VAR 0 7
53327: PUSH
53328: LD_INT 2
53330: ARRAY
53331: PPUSH
53332: CALL_OW 428
53336: PUSH
53337: LD_INT 0
53339: EQUAL
53340: IFFALSE 53393
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53342: LD_VAR 0 1
53346: PPUSH
53347: LD_VAR 0 7
53351: PUSH
53352: LD_INT 1
53354: ARRAY
53355: PPUSH
53356: LD_VAR 0 7
53360: PUSH
53361: LD_INT 2
53363: ARRAY
53364: PPUSH
53365: LD_VAR 0 3
53369: PPUSH
53370: CALL_OW 48
// result := IsPlaced ( unit ) ;
53374: LD_ADDR_VAR 0 4
53378: PUSH
53379: LD_VAR 0 1
53383: PPUSH
53384: CALL_OW 305
53388: ST_TO_ADDR
// exit ;
53389: POP
53390: POP
53391: GO 53397
// end ; end ;
53393: GO 53272
53395: POP
53396: POP
// end ;
53397: LD_VAR 0 4
53401: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53402: LD_INT 0
53404: PPUSH
53405: PPUSH
53406: PPUSH
// if not side or side > 8 then
53407: LD_VAR 0 1
53411: NOT
53412: PUSH
53413: LD_VAR 0 1
53417: PUSH
53418: LD_INT 8
53420: GREATER
53421: OR
53422: IFFALSE 53426
// exit ;
53424: GO 53613
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53426: LD_ADDR_VAR 0 4
53430: PUSH
53431: LD_INT 22
53433: PUSH
53434: LD_VAR 0 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 21
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PPUSH
53457: CALL_OW 69
53461: ST_TO_ADDR
// if not tmp then
53462: LD_VAR 0 4
53466: NOT
53467: IFFALSE 53471
// exit ;
53469: GO 53613
// enable_addtolog := true ;
53471: LD_ADDR_OWVAR 81
53475: PUSH
53476: LD_INT 1
53478: ST_TO_ADDR
// AddToLog ( [ ) ;
53479: LD_STRING [
53481: PPUSH
53482: CALL_OW 561
// for i in tmp do
53486: LD_ADDR_VAR 0 3
53490: PUSH
53491: LD_VAR 0 4
53495: PUSH
53496: FOR_IN
53497: IFFALSE 53604
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53499: LD_STRING [
53501: PUSH
53502: LD_VAR 0 3
53506: PPUSH
53507: CALL_OW 266
53511: STR
53512: PUSH
53513: LD_STRING , 
53515: STR
53516: PUSH
53517: LD_VAR 0 3
53521: PPUSH
53522: CALL_OW 250
53526: STR
53527: PUSH
53528: LD_STRING , 
53530: STR
53531: PUSH
53532: LD_VAR 0 3
53536: PPUSH
53537: CALL_OW 251
53541: STR
53542: PUSH
53543: LD_STRING , 
53545: STR
53546: PUSH
53547: LD_VAR 0 3
53551: PPUSH
53552: CALL_OW 254
53556: STR
53557: PUSH
53558: LD_STRING , 
53560: STR
53561: PUSH
53562: LD_VAR 0 3
53566: PPUSH
53567: LD_INT 1
53569: PPUSH
53570: CALL_OW 268
53574: STR
53575: PUSH
53576: LD_STRING , 
53578: STR
53579: PUSH
53580: LD_VAR 0 3
53584: PPUSH
53585: LD_INT 2
53587: PPUSH
53588: CALL_OW 268
53592: STR
53593: PUSH
53594: LD_STRING ],
53596: STR
53597: PPUSH
53598: CALL_OW 561
// end ;
53602: GO 53496
53604: POP
53605: POP
// AddToLog ( ]; ) ;
53606: LD_STRING ];
53608: PPUSH
53609: CALL_OW 561
// end ;
53613: LD_VAR 0 2
53617: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53618: LD_INT 0
53620: PPUSH
53621: PPUSH
53622: PPUSH
53623: PPUSH
53624: PPUSH
// if not area or not rate or not max then
53625: LD_VAR 0 1
53629: NOT
53630: PUSH
53631: LD_VAR 0 2
53635: NOT
53636: OR
53637: PUSH
53638: LD_VAR 0 4
53642: NOT
53643: OR
53644: IFFALSE 53648
// exit ;
53646: GO 53840
// while 1 do
53648: LD_INT 1
53650: IFFALSE 53840
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53652: LD_ADDR_VAR 0 9
53656: PUSH
53657: LD_VAR 0 1
53661: PPUSH
53662: LD_INT 1
53664: PPUSH
53665: CALL_OW 287
53669: PUSH
53670: LD_INT 10
53672: MUL
53673: ST_TO_ADDR
// r := rate / 10 ;
53674: LD_ADDR_VAR 0 7
53678: PUSH
53679: LD_VAR 0 2
53683: PUSH
53684: LD_INT 10
53686: DIVREAL
53687: ST_TO_ADDR
// time := 1 1$00 ;
53688: LD_ADDR_VAR 0 8
53692: PUSH
53693: LD_INT 2100
53695: ST_TO_ADDR
// if amount < min then
53696: LD_VAR 0 9
53700: PUSH
53701: LD_VAR 0 3
53705: LESS
53706: IFFALSE 53724
// r := r * 2 else
53708: LD_ADDR_VAR 0 7
53712: PUSH
53713: LD_VAR 0 7
53717: PUSH
53718: LD_INT 2
53720: MUL
53721: ST_TO_ADDR
53722: GO 53750
// if amount > max then
53724: LD_VAR 0 9
53728: PUSH
53729: LD_VAR 0 4
53733: GREATER
53734: IFFALSE 53750
// r := r / 2 ;
53736: LD_ADDR_VAR 0 7
53740: PUSH
53741: LD_VAR 0 7
53745: PUSH
53746: LD_INT 2
53748: DIVREAL
53749: ST_TO_ADDR
// time := time / r ;
53750: LD_ADDR_VAR 0 8
53754: PUSH
53755: LD_VAR 0 8
53759: PUSH
53760: LD_VAR 0 7
53764: DIVREAL
53765: ST_TO_ADDR
// if time < 0 then
53766: LD_VAR 0 8
53770: PUSH
53771: LD_INT 0
53773: LESS
53774: IFFALSE 53791
// time := time * - 1 ;
53776: LD_ADDR_VAR 0 8
53780: PUSH
53781: LD_VAR 0 8
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: MUL
53790: ST_TO_ADDR
// wait ( time ) ;
53791: LD_VAR 0 8
53795: PPUSH
53796: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53800: LD_INT 35
53802: PPUSH
53803: LD_INT 875
53805: PPUSH
53806: CALL_OW 12
53810: PPUSH
53811: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53815: LD_INT 1
53817: PPUSH
53818: LD_INT 5
53820: PPUSH
53821: CALL_OW 12
53825: PPUSH
53826: LD_VAR 0 1
53830: PPUSH
53831: LD_INT 1
53833: PPUSH
53834: CALL_OW 55
// end ;
53838: GO 53648
// end ;
53840: LD_VAR 0 5
53844: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53845: LD_INT 0
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
// if not turrets or not factories then
53855: LD_VAR 0 1
53859: NOT
53860: PUSH
53861: LD_VAR 0 2
53865: NOT
53866: OR
53867: IFFALSE 53871
// exit ;
53869: GO 54178
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53871: LD_ADDR_VAR 0 10
53875: PUSH
53876: LD_INT 5
53878: PUSH
53879: LD_INT 6
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 24
53913: PUSH
53914: LD_INT 25
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 23
53923: PUSH
53924: LD_INT 27
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 42
53937: PUSH
53938: LD_INT 43
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 44
53947: PUSH
53948: LD_INT 46
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 45
53957: PUSH
53958: LD_INT 47
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// result := [ ] ;
53975: LD_ADDR_VAR 0 3
53979: PUSH
53980: EMPTY
53981: ST_TO_ADDR
// for i in turrets do
53982: LD_ADDR_VAR 0 4
53986: PUSH
53987: LD_VAR 0 1
53991: PUSH
53992: FOR_IN
53993: IFFALSE 54176
// begin nat := GetNation ( i ) ;
53995: LD_ADDR_VAR 0 7
53999: PUSH
54000: LD_VAR 0 4
54004: PPUSH
54005: CALL_OW 248
54009: ST_TO_ADDR
// weapon := 0 ;
54010: LD_ADDR_VAR 0 8
54014: PUSH
54015: LD_INT 0
54017: ST_TO_ADDR
// if not nat then
54018: LD_VAR 0 7
54022: NOT
54023: IFFALSE 54027
// continue ;
54025: GO 53992
// for j in list [ nat ] do
54027: LD_ADDR_VAR 0 5
54031: PUSH
54032: LD_VAR 0 10
54036: PUSH
54037: LD_VAR 0 7
54041: ARRAY
54042: PUSH
54043: FOR_IN
54044: IFFALSE 54085
// if GetBWeapon ( i ) = j [ 1 ] then
54046: LD_VAR 0 4
54050: PPUSH
54051: CALL_OW 269
54055: PUSH
54056: LD_VAR 0 5
54060: PUSH
54061: LD_INT 1
54063: ARRAY
54064: EQUAL
54065: IFFALSE 54083
// begin weapon := j [ 2 ] ;
54067: LD_ADDR_VAR 0 8
54071: PUSH
54072: LD_VAR 0 5
54076: PUSH
54077: LD_INT 2
54079: ARRAY
54080: ST_TO_ADDR
// break ;
54081: GO 54085
// end ;
54083: GO 54043
54085: POP
54086: POP
// if not weapon then
54087: LD_VAR 0 8
54091: NOT
54092: IFFALSE 54096
// continue ;
54094: GO 53992
// for k in factories do
54096: LD_ADDR_VAR 0 6
54100: PUSH
54101: LD_VAR 0 2
54105: PUSH
54106: FOR_IN
54107: IFFALSE 54172
// begin weapons := AvailableWeaponList ( k ) ;
54109: LD_ADDR_VAR 0 9
54113: PUSH
54114: LD_VAR 0 6
54118: PPUSH
54119: CALL_OW 478
54123: ST_TO_ADDR
// if not weapons then
54124: LD_VAR 0 9
54128: NOT
54129: IFFALSE 54133
// continue ;
54131: GO 54106
// if weapon in weapons then
54133: LD_VAR 0 8
54137: PUSH
54138: LD_VAR 0 9
54142: IN
54143: IFFALSE 54170
// begin result := [ i , weapon ] ;
54145: LD_ADDR_VAR 0 3
54149: PUSH
54150: LD_VAR 0 4
54154: PUSH
54155: LD_VAR 0 8
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// exit ;
54164: POP
54165: POP
54166: POP
54167: POP
54168: GO 54178
// end ; end ;
54170: GO 54106
54172: POP
54173: POP
// end ;
54174: GO 53992
54176: POP
54177: POP
// end ;
54178: LD_VAR 0 3
54182: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54183: LD_INT 0
54185: PPUSH
// if not side or side > 8 then
54186: LD_VAR 0 3
54190: NOT
54191: PUSH
54192: LD_VAR 0 3
54196: PUSH
54197: LD_INT 8
54199: GREATER
54200: OR
54201: IFFALSE 54205
// exit ;
54203: GO 54264
// if not range then
54205: LD_VAR 0 4
54209: NOT
54210: IFFALSE 54221
// range := - 12 ;
54212: LD_ADDR_VAR 0 4
54216: PUSH
54217: LD_INT 12
54219: NEG
54220: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54221: LD_VAR 0 1
54225: PPUSH
54226: LD_VAR 0 2
54230: PPUSH
54231: LD_VAR 0 3
54235: PPUSH
54236: LD_VAR 0 4
54240: PPUSH
54241: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54245: LD_VAR 0 1
54249: PPUSH
54250: LD_VAR 0 2
54254: PPUSH
54255: LD_VAR 0 3
54259: PPUSH
54260: CALL_OW 331
// end ;
54264: LD_VAR 0 5
54268: RET
// export function Video ( mode ) ; begin
54269: LD_INT 0
54271: PPUSH
// ingame_video = mode ;
54272: LD_ADDR_OWVAR 52
54276: PUSH
54277: LD_VAR 0 1
54281: ST_TO_ADDR
// interface_hidden = mode ;
54282: LD_ADDR_OWVAR 54
54286: PUSH
54287: LD_VAR 0 1
54291: ST_TO_ADDR
// end ;
54292: LD_VAR 0 2
54296: RET
// export function Join ( array , element ) ; begin
54297: LD_INT 0
54299: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54300: LD_ADDR_VAR 0 3
54304: PUSH
54305: LD_VAR 0 1
54309: PPUSH
54310: LD_VAR 0 1
54314: PUSH
54315: LD_INT 1
54317: PLUS
54318: PPUSH
54319: LD_VAR 0 2
54323: PPUSH
54324: CALL_OW 1
54328: ST_TO_ADDR
// end ;
54329: LD_VAR 0 3
54333: RET
// export function JoinUnion ( array , element ) ; begin
54334: LD_INT 0
54336: PPUSH
// result := array union element ;
54337: LD_ADDR_VAR 0 3
54341: PUSH
54342: LD_VAR 0 1
54346: PUSH
54347: LD_VAR 0 2
54351: UNION
54352: ST_TO_ADDR
// end ;
54353: LD_VAR 0 3
54357: RET
// export function GetBehemoths ( side ) ; begin
54358: LD_INT 0
54360: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54361: LD_ADDR_VAR 0 2
54365: PUSH
54366: LD_INT 22
54368: PUSH
54369: LD_VAR 0 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 31
54380: PUSH
54381: LD_INT 25
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PPUSH
54392: CALL_OW 69
54396: ST_TO_ADDR
// end ;
54397: LD_VAR 0 2
54401: RET
// export function Shuffle ( array ) ; var i , index ; begin
54402: LD_INT 0
54404: PPUSH
54405: PPUSH
54406: PPUSH
// result := [ ] ;
54407: LD_ADDR_VAR 0 2
54411: PUSH
54412: EMPTY
54413: ST_TO_ADDR
// if not array then
54414: LD_VAR 0 1
54418: NOT
54419: IFFALSE 54423
// exit ;
54421: GO 54522
// Randomize ;
54423: CALL_OW 10
// for i = array downto 1 do
54427: LD_ADDR_VAR 0 3
54431: PUSH
54432: DOUBLE
54433: LD_VAR 0 1
54437: INC
54438: ST_TO_ADDR
54439: LD_INT 1
54441: PUSH
54442: FOR_DOWNTO
54443: IFFALSE 54520
// begin index := rand ( 1 , array ) ;
54445: LD_ADDR_VAR 0 4
54449: PUSH
54450: LD_INT 1
54452: PPUSH
54453: LD_VAR 0 1
54457: PPUSH
54458: CALL_OW 12
54462: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54463: LD_ADDR_VAR 0 2
54467: PUSH
54468: LD_VAR 0 2
54472: PPUSH
54473: LD_VAR 0 2
54477: PUSH
54478: LD_INT 1
54480: PLUS
54481: PPUSH
54482: LD_VAR 0 1
54486: PUSH
54487: LD_VAR 0 4
54491: ARRAY
54492: PPUSH
54493: CALL_OW 2
54497: ST_TO_ADDR
// array := Delete ( array , index ) ;
54498: LD_ADDR_VAR 0 1
54502: PUSH
54503: LD_VAR 0 1
54507: PPUSH
54508: LD_VAR 0 4
54512: PPUSH
54513: CALL_OW 3
54517: ST_TO_ADDR
// end ;
54518: GO 54442
54520: POP
54521: POP
// end ;
54522: LD_VAR 0 2
54526: RET
// export function GetBaseMaterials ( base ) ; begin
54527: LD_INT 0
54529: PPUSH
// result := [ 0 , 0 , 0 ] ;
54530: LD_ADDR_VAR 0 2
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: ST_TO_ADDR
// if not base then
54549: LD_VAR 0 1
54553: NOT
54554: IFFALSE 54558
// exit ;
54556: GO 54607
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54558: LD_ADDR_VAR 0 2
54562: PUSH
54563: LD_VAR 0 1
54567: PPUSH
54568: LD_INT 1
54570: PPUSH
54571: CALL_OW 275
54575: PUSH
54576: LD_VAR 0 1
54580: PPUSH
54581: LD_INT 2
54583: PPUSH
54584: CALL_OW 275
54588: PUSH
54589: LD_VAR 0 1
54593: PPUSH
54594: LD_INT 3
54596: PPUSH
54597: CALL_OW 275
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// end ;
54607: LD_VAR 0 2
54611: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54612: LD_INT 0
54614: PPUSH
54615: PPUSH
// result := array ;
54616: LD_ADDR_VAR 0 3
54620: PUSH
54621: LD_VAR 0 1
54625: ST_TO_ADDR
// if size > 0 then
54626: LD_VAR 0 2
54630: PUSH
54631: LD_INT 0
54633: GREATER
54634: IFFALSE 54680
// for i := array downto size do
54636: LD_ADDR_VAR 0 4
54640: PUSH
54641: DOUBLE
54642: LD_VAR 0 1
54646: INC
54647: ST_TO_ADDR
54648: LD_VAR 0 2
54652: PUSH
54653: FOR_DOWNTO
54654: IFFALSE 54678
// result := Delete ( result , result ) ;
54656: LD_ADDR_VAR 0 3
54660: PUSH
54661: LD_VAR 0 3
54665: PPUSH
54666: LD_VAR 0 3
54670: PPUSH
54671: CALL_OW 3
54675: ST_TO_ADDR
54676: GO 54653
54678: POP
54679: POP
// end ;
54680: LD_VAR 0 3
54684: RET
// export function ComExit ( unit ) ; var tmp ; begin
54685: LD_INT 0
54687: PPUSH
54688: PPUSH
// if not IsInUnit ( unit ) then
54689: LD_VAR 0 1
54693: PPUSH
54694: CALL_OW 310
54698: NOT
54699: IFFALSE 54703
// exit ;
54701: GO 54763
// tmp := IsInUnit ( unit ) ;
54703: LD_ADDR_VAR 0 3
54707: PUSH
54708: LD_VAR 0 1
54712: PPUSH
54713: CALL_OW 310
54717: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54718: LD_VAR 0 3
54722: PPUSH
54723: CALL_OW 247
54727: PUSH
54728: LD_INT 2
54730: EQUAL
54731: IFFALSE 54744
// ComExitVehicle ( unit ) else
54733: LD_VAR 0 1
54737: PPUSH
54738: CALL_OW 121
54742: GO 54753
// ComExitBuilding ( unit ) ;
54744: LD_VAR 0 1
54748: PPUSH
54749: CALL_OW 122
// result := tmp ;
54753: LD_ADDR_VAR 0 2
54757: PUSH
54758: LD_VAR 0 3
54762: ST_TO_ADDR
// end ;
54763: LD_VAR 0 2
54767: RET
// export function ResetHc ; begin
54768: LD_INT 0
54770: PPUSH
// InitHc ;
54771: CALL_OW 19
// hc_importance := 0 ;
54775: LD_ADDR_OWVAR 32
54779: PUSH
54780: LD_INT 0
54782: ST_TO_ADDR
// end ; end_of_file
54783: LD_VAR 0 1
54787: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
54788: LD_INT 0
54790: PPUSH
// ar_crane := 88 ;
54791: LD_ADDR_EXP 85
54795: PUSH
54796: LD_INT 88
54798: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
54799: LD_ADDR_EXP 80
54803: PUSH
54804: LD_INT 89
54806: ST_TO_ADDR
// us_hack := 99 ;
54807: LD_ADDR_EXP 81
54811: PUSH
54812: LD_INT 99
54814: ST_TO_ADDR
// us_artillery := 97 ;
54815: LD_ADDR_EXP 82
54819: PUSH
54820: LD_INT 97
54822: ST_TO_ADDR
// ar_bio_bomb := 91 ;
54823: LD_ADDR_EXP 83
54827: PUSH
54828: LD_INT 91
54830: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
54831: LD_ADDR_EXP 84
54835: PUSH
54836: LD_INT 92
54838: ST_TO_ADDR
// ru_radar := 98 ;
54839: LD_ADDR_EXP 79
54843: PUSH
54844: LD_INT 98
54846: ST_TO_ADDR
// tech_Artillery := 80 ;
54847: LD_ADDR_EXP 86
54851: PUSH
54852: LD_INT 80
54854: ST_TO_ADDR
// tech_RadMat := 81 ;
54855: LD_ADDR_EXP 87
54859: PUSH
54860: LD_INT 81
54862: ST_TO_ADDR
// tech_BasicTools := 82 ;
54863: LD_ADDR_EXP 88
54867: PUSH
54868: LD_INT 82
54870: ST_TO_ADDR
// tech_Cargo := 83 ;
54871: LD_ADDR_EXP 89
54875: PUSH
54876: LD_INT 83
54878: ST_TO_ADDR
// tech_Track := 84 ;
54879: LD_ADDR_EXP 90
54883: PUSH
54884: LD_INT 84
54886: ST_TO_ADDR
// tech_Crane := 85 ;
54887: LD_ADDR_EXP 91
54891: PUSH
54892: LD_INT 85
54894: ST_TO_ADDR
// tech_Bulldozer := 86 ;
54895: LD_ADDR_EXP 92
54899: PUSH
54900: LD_INT 86
54902: ST_TO_ADDR
// tech_Hovercraft := 87 ;
54903: LD_ADDR_EXP 93
54907: PUSH
54908: LD_INT 87
54910: ST_TO_ADDR
// end ;
54911: LD_VAR 0 1
54915: RET
// every 1 do
54916: GO 54918
54918: DISABLE
// InitGlobalVariables ;
54919: CALL 54788 0 0
54923: END
