// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27326 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 46618 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 46618 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 46618 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 46618 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 46618 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18824 0 1
7815: PPUSH
7816: CALL 18668 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18824 0 1
11310: PPUSH
11311: CALL 18706 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25622 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25622 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16601 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16601 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 49488 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 51750 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17266 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17281 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19372 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19281 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19094 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19372 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16516
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_EXP 127
16305: PUSH
16306: LD_INT 52
16308: PUSH
16309: LD_INT 14
16311: PUSH
16312: LD_INT 53
16314: PUSH
16315: LD_INT 31
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: IN
16329: NOT
16330: IFFALSE 16389
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 13
16339: ARRAY
16340: PUSH
16341: LD_VAR 0 3
16345: PPUSH
16346: CALL 19452 0 1
16350: GREATER
16351: IFFALSE 16372
// AddNewVehicle ( aiData , vehicle , 2 ) else
16353: LD_VAR 0 3
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 2
16365: PPUSH
16366: CALL 18989 0 3
16370: GO 16389
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_INT 4
16384: PPUSH
16385: CALL 18989 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 264
16398: PUSH
16399: LD_INT 12
16401: PUSH
16402: LD_INT 32
16404: PUSH
16405: LD_INT 51
16407: PUSH
16408: LD_INT 13
16410: PUSH
16411: LD_EXP 127
16415: PUSH
16416: LD_INT 52
16418: PUSH
16419: LD_INT 14
16421: PUSH
16422: LD_INT 53
16424: PUSH
16425: LD_INT 31
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: IN
16439: IFFALSE 16458
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL 18989 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16458: LD_EXP 60
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 263
16472: PUSH
16473: LD_INT 2
16475: EQUAL
16476: AND
16477: IFFALSE 16516
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_EXP 60
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 60
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: PPUSH
16503: CALL_OW 313
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: CALL_OW 53
// end ; end ;
16516: PPOPN 3
16518: END
// on BuildingStarted ( building , unit ) do var aiData ;
16519: LD_INT 0
16521: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: LD_VAR 0 2
16531: PPUSH
16532: CALL_OW 255
16536: PPUSH
16537: CALL 19372 0 1
16541: ST_TO_ADDR
// if ( aiData ) then
16542: LD_VAR 0 3
16546: IFFALSE 16571
// begin RemoveDestroyedBuilding ( aiData ) ;
16548: LD_VAR 0 3
16552: PPUSH
16553: CALL 19188 0 1
// AddNewUnit ( aiData , building ) ;
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL 18898 0 2
// end ; end ;
16571: PPOPN 3
16573: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16574: LD_VAR 0 2
16578: PUSH
16579: LD_EXP 51
16583: EQUAL
16584: IFFALSE 16598
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 19
16593: PPUSH
16594: CALL_OW 113
// end ; end_of_file
16598: PPOPN 2
16600: END
// export function FinishMission ; begin
16601: LD_INT 0
16603: PPUSH
// SetRewards ;
16604: CALL 16625 0 0
// SavePlayerCharacters ;
16608: CALL 16804 0 0
// SaveGlobalVariables ;
16612: CALL 17246 0 0
// YouWin ;
16616: CALL_OW 103
// end ;
16620: LD_VAR 0 1
16624: RET
// function SetRewards ; begin
16625: LD_INT 0
16627: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16628: LD_EXP 55
16632: PPUSH
16633: CALL_OW 302
16637: PUSH
16638: LD_EXP 55
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: LD_INT 3
16650: EQUAL
16651: AND
16652: IFFALSE 16666
// AddMedal ( Xavier , 1 ) else
16654: LD_STRING Xavier
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 101
16664: GO 16677
// AddMedal ( Xavier , - 1 ) ;
16666: LD_STRING Xavier
16668: PPUSH
16669: LD_INT 1
16671: NEG
16672: PPUSH
16673: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16677: LD_EXP 19
16681: PUSH
16682: LD_EXP 28
16686: LESSEQUAL
16687: IFFALSE 16701
// AddMedal ( TimeVS , 1 ) else
16689: LD_STRING TimeVS
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 101
16699: GO 16712
// AddMedal ( TimeVS , - 1 ) ;
16701: LD_STRING TimeVS
16703: PPUSH
16704: LD_INT 1
16706: NEG
16707: PPUSH
16708: CALL_OW 101
// if heikeCaptured then
16712: LD_EXP 17
16716: IFFALSE 16730
// AddMedal ( Heike , 1 ) else
16718: LD_STRING Heike
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 101
16728: GO 16741
// AddMedal ( Heike , - 1 ) ;
16730: LD_STRING Heike
16732: PPUSH
16733: LD_INT 1
16735: NEG
16736: PPUSH
16737: CALL_OW 101
// GiveMedals ( Main1 ) ;
16741: LD_STRING Main1
16743: PPUSH
16744: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16748: LD_INT 22
16750: PUSH
16751: LD_INT 3
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 21
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 50
16780: PUSH
16781: EMPTY
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: PPUSH
16795: CALL_OW 43
// end ;
16799: LD_VAR 0 1
16803: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16804: LD_INT 0
16806: PPUSH
16807: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16808: LD_EXP 37
16812: PPUSH
16813: LD_STRING Burlak
16815: PPUSH
16816: LD_INT 3
16818: PPUSH
16819: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16823: LD_EXP 38
16827: PPUSH
16828: LD_STRING Karamazov
16830: PPUSH
16831: LD_INT 3
16833: PPUSH
16834: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16838: LD_EXP 39
16842: PPUSH
16843: LD_STRING Petrovova
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16853: LD_EXP 40
16857: PPUSH
16858: LD_STRING Gleb
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16868: LD_EXP 41
16872: PPUSH
16873: LD_STRING Petrosyan
16875: PPUSH
16876: LD_INT 3
16878: PPUSH
16879: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16883: LD_EXP 43
16887: PPUSH
16888: LD_STRING Dolgov
16890: PPUSH
16891: LD_INT 3
16893: PPUSH
16894: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16898: LD_EXP 44
16902: PPUSH
16903: LD_STRING Lipshchin
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16913: LD_EXP 42
16917: PPUSH
16918: LD_STRING Titov
16920: PPUSH
16921: LD_INT 3
16923: PPUSH
16924: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16928: LD_EXP 45
16932: PPUSH
16933: LD_STRING Kirilenkova
16935: PPUSH
16936: LD_INT 3
16938: PPUSH
16939: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16943: LD_EXP 46
16947: PPUSH
16948: LD_STRING Belkov
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16958: LD_EXP 47
16962: PPUSH
16963: LD_STRING Belkov2
16965: PPUSH
16966: LD_INT 3
16968: PPUSH
16969: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16973: LD_EXP 55
16977: PPUSH
16978: LD_STRING Xavier
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16988: LD_EXP 48
16992: PPUSH
16993: LD_STRING Vsevolod
16995: PPUSH
16996: LD_INT 3
16998: PPUSH
16999: CALL 12290 0 3
// if heikeCaptured then
17003: LD_EXP 17
17007: IFFALSE 17021
// SaveCharacters ( Heike , 07_Heike ) ;
17009: LD_EXP 56
17013: PPUSH
17014: LD_STRING 07_Heike
17016: PPUSH
17017: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17021: LD_INT 22
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 25
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 25
17056: PUSH
17057: LD_INT 16
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 15
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: PPUSH
17090: LD_STRING other_apemans
17092: PPUSH
17093: LD_INT 3
17095: PPUSH
17096: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 23
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PUSH
17145: LD_EXP 37
17149: PUSH
17150: LD_EXP 38
17154: PUSH
17155: LD_EXP 39
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_EXP 41
17169: PUSH
17170: LD_EXP 42
17174: PUSH
17175: LD_EXP 43
17179: PUSH
17180: LD_EXP 44
17184: PUSH
17185: LD_EXP 45
17189: PUSH
17190: LD_EXP 46
17194: PUSH
17195: LD_EXP 47
17199: PUSH
17200: LD_EXP 55
17204: PUSH
17205: LD_EXP 48
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: DIFF
17225: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17226: LD_VAR 0 2
17230: PPUSH
17231: LD_STRING other_survivors
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: CALL 12347 0 3
// end ;
17241: LD_VAR 0 1
17245: RET
// function SaveGlobalVariables ; begin
17246: LD_INT 0
17248: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17249: LD_EXP 17
17253: PPUSH
17254: LD_STRING 07_HeikeCaptured_1
17256: PPUSH
17257: CALL_OW 39
// end ; end_of_file
17261: LD_VAR 0 1
17265: RET
// export function Lose_Burlak ; begin
17266: LD_INT 0
17268: PPUSH
// YouLost ( Burlak ) ;
17269: LD_STRING Burlak
17271: PPUSH
17272: CALL_OW 104
// end ;
17276: LD_VAR 0 1
17280: RET
// export function Lose_Vsevolod ; begin
17281: LD_INT 0
17283: PPUSH
// YouLost ( Sevi ) ;
17284: LD_STRING Sevi
17286: PPUSH
17287: CALL_OW 104
// end ;
17291: LD_VAR 0 1
17295: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17296: LD_EXP 56
17300: PPUSH
17301: LD_INT 9
17303: PPUSH
17304: CALL_OW 308
17308: PUSH
17309: LD_EXP 57
17313: PPUSH
17314: LD_INT 9
17316: PPUSH
17317: CALL_OW 308
17321: OR
17322: IFFALSE 17334
17324: GO 17326
17326: DISABLE
// YouLost ( Heike ) ; end_of_file
17327: LD_STRING Heike
17329: PPUSH
17330: CALL_OW 104
17334: END
// export aiStructDatas ; export function InitAIManager ; begin
17335: LD_INT 0
17337: PPUSH
// aiStructDatas = [ ] ;
17338: LD_ADDR_EXP 62
17342: PUSH
17343: EMPTY
17344: ST_TO_ADDR
// end ;
17345: LD_VAR 0 1
17349: RET
// every 1 do
17350: GO 17352
17352: DISABLE
// begin InitAIManager ;
17353: CALL 17335 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17357: LD_INT 1
17359: PPUSH
17360: LD_INT 0
17362: PPUSH
17363: LD_INT 2
17365: PPUSH
17366: LD_INT 2
17368: PPUSH
17369: LD_EXP 59
17373: PPUSH
17374: LD_INT 10
17376: PPUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PPUSH
17401: CALL_OW 70
17405: PPUSH
17406: EMPTY
17407: PPUSH
17408: LD_INT 10
17410: PPUSH
17411: LD_INT 12
17413: PPUSH
17414: LD_INT 13
17416: PPUSH
17417: LD_INT 11
17419: PPUSH
17420: LD_INT 13
17422: PPUSH
17423: LD_INT 13
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 25
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 26
17443: PUSH
17444: LD_INT 28
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 13
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 27
17474: PUSH
17475: LD_INT 23
17477: PUSH
17478: LD_INT 26
17480: PUSH
17481: LD_INT 28
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: LD_INT 13
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 27
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 26
17521: PUSH
17522: LD_INT 28
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 13
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 25
17549: PUSH
17550: LD_INT 27
17552: PUSH
17553: LD_INT 23
17555: PUSH
17556: LD_INT 26
17558: PUSH
17559: LD_INT 28
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 13
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 25
17586: PUSH
17587: LD_INT 27
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 26
17595: PUSH
17596: LD_INT 28
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PPUSH
17617: LD_INT 1
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PPUSH
17631: LD_INT 5250
17633: PPUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL 18524 0 20
// end ;
17661: END
// every 0 0$1 do
17662: GO 17664
17664: DISABLE
// begin StateManager ( 1 ) ;
17665: LD_INT 1
17667: PPUSH
17668: CALL 19672 0 1
// MechanicsManager ( 1 ) ;
17672: LD_INT 1
17674: PPUSH
17675: CALL 20785 0 1
// VehiclesManager ( 1 ) ;
17679: LD_INT 1
17681: PPUSH
17682: CALL 21049 0 1
// SoldiersManager ( 1 ) ;
17686: LD_INT 1
17688: PPUSH
17689: CALL 20158 0 1
// DefenceManager ( 1 ) ;
17693: LD_INT 1
17695: PPUSH
17696: CALL 21559 0 1
// CollectCrates ( 1 ) ;
17700: LD_INT 1
17702: PPUSH
17703: CALL 22491 0 1
// FleeToHealArea ( 1 ) ;
17707: LD_INT 1
17709: PPUSH
17710: CALL 22681 0 1
// FleeToRepairArea ( 1 ) ;
17714: LD_INT 1
17716: PPUSH
17717: CALL 22812 0 1
// RepairBuildings ( 1 ) ;
17721: LD_INT 1
17723: PPUSH
17724: CALL 22968 0 1
// HealDamageUnits ( 1 ) ;
17728: LD_INT 1
17730: PPUSH
17731: CALL 23713 0 1
// enable ;
17735: ENABLE
// end ;
17736: END
// every 0 0$1 do
17737: GO 17739
17739: DISABLE
// begin ProduceVehicles ( 1 ) ;
17740: LD_INT 1
17742: PPUSH
17743: CALL 24211 0 1
// enable ;
17747: ENABLE
// end ;
17748: END
// every 0 0$1 do
17749: GO 17751
17751: DISABLE
// begin AttackManager ( 1 ) ;
17752: LD_INT 1
17754: PPUSH
17755: CALL 22057 0 1
// enable ;
17759: ENABLE
// end ;
17760: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17761: LD_INT 14
17763: PPUSH
17764: LD_INT 22
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PPUSH
17774: CALL_OW 70
17778: PUSH
17779: LD_INT 15
17781: PPUSH
17782: LD_INT 22
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 70
17796: OR
17797: PUSH
17798: LD_INT 16
17800: PPUSH
17801: LD_INT 22
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 70
17815: OR
17816: PUSH
17817: LD_INT 17
17819: PPUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 70
17834: OR
17835: PUSH
17836: LD_INT 18
17838: PPUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 70
17853: OR
17854: PUSH
17855: LD_EXP 61
17859: AND
17860: IFFALSE 18280
17862: GO 17864
17864: DISABLE
17865: LD_INT 0
17867: PPUSH
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin unitsInArea = [ ] ;
17872: LD_ADDR_VAR 0 2
17876: PUSH
17877: EMPTY
17878: ST_TO_ADDR
// tmp = [ ] ;
17879: LD_ADDR_VAR 0 5
17883: PUSH
17884: EMPTY
17885: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: LD_VAR 0 2
17895: PUSH
17896: LD_INT 14
17898: PPUSH
17899: LD_INT 22
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 70
17913: ADD
17914: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: LD_INT 15
17927: PPUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 70
17942: ADD
17943: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_VAR 0 2
17953: PUSH
17954: LD_INT 16
17956: PPUSH
17957: LD_INT 22
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 70
17971: ADD
17972: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: LD_INT 17
17985: PPUSH
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 70
18000: ADD
18001: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 18
18014: PPUSH
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 70
18029: ADD
18030: ST_TO_ADDR
// for unit in unitsInArea do
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 2
18040: PUSH
18041: FOR_IN
18042: IFFALSE 18277
// begin if GetType ( unit ) = unit_human then
18044: LD_VAR 0 3
18048: PPUSH
18049: CALL_OW 247
18053: PUSH
18054: LD_INT 1
18056: EQUAL
18057: IFFALSE 18069
// minDistance = 3 else
18059: LD_ADDR_VAR 0 4
18063: PUSH
18064: LD_INT 3
18066: ST_TO_ADDR
18067: GO 18077
// minDistance = 4 ;
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: LD_INT 4
18076: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: DOUBLE
18083: LD_INT 1
18085: DEC
18086: ST_TO_ADDR
18087: LD_EXP 61
18091: PUSH
18092: LD_INT 2
18094: DIV
18095: PUSH
18096: FOR_TO
18097: IFFALSE 18256
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18099: LD_EXP 61
18103: PUSH
18104: LD_VAR 0 1
18108: PUSH
18109: LD_INT 2
18111: MUL
18112: PUSH
18113: LD_INT 1
18115: MINUS
18116: ARRAY
18117: PPUSH
18118: LD_EXP 61
18122: PUSH
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 2
18130: MUL
18131: ARRAY
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 250
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: CALL_OW 251
18152: PPUSH
18153: CALL_OW 298
18157: PUSH
18158: LD_VAR 0 4
18162: LESS
18163: IFFALSE 18208
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18165: LD_EXP 61
18169: PUSH
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 2
18177: MUL
18178: PUSH
18179: LD_INT 1
18181: MINUS
18182: ARRAY
18183: PPUSH
18184: LD_EXP 61
18188: PUSH
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 2
18196: MUL
18197: ARRAY
18198: PPUSH
18199: LD_INT 2
18201: PPUSH
18202: CALL_OW 456
18206: GO 18254
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_VAR 0 5
18217: PUSH
18218: LD_EXP 61
18222: PUSH
18223: LD_VAR 0 1
18227: PUSH
18228: LD_INT 2
18230: MUL
18231: PUSH
18232: LD_INT 1
18234: MINUS
18235: ARRAY
18236: ADD
18237: PUSH
18238: LD_EXP 61
18242: PUSH
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 2
18250: MUL
18251: ARRAY
18252: ADD
18253: ST_TO_ADDR
18254: GO 18096
18256: POP
18257: POP
// minesList = tmp ;
18258: LD_ADDR_EXP 61
18262: PUSH
18263: LD_VAR 0 5
18267: ST_TO_ADDR
// tmp := [ ] ;
18268: LD_ADDR_VAR 0 5
18272: PUSH
18273: EMPTY
18274: ST_TO_ADDR
// end ;
18275: GO 18041
18277: POP
18278: POP
// enable ;
18279: ENABLE
// end ;
18280: PPOPN 5
18282: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18283: LD_INT 2
18285: PPUSH
18286: CALL_OW 255
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: PUSH
18295: LD_INT 2
18297: PPUSH
18298: CALL_OW 303
18302: OR
18303: IFFALSE 18432
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 50
18329: PUSH
18330: EMPTY
18331: LIST
18332: PUSH
18333: LD_INT 21
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 30
18345: PUSH
18346: LD_INT 32
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18430
// if UnitsInside ( turret ) then
18367: LD_VAR 0 2
18371: PPUSH
18372: CALL_OW 313
18376: IFFALSE 18428
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 313
18392: PUSH
18393: LD_INT 1
18395: ARRAY
18396: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 122
// wait ( 0 0$01 ) ;
18406: LD_INT 35
18408: PPUSH
18409: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 103
18420: PPUSH
18421: LD_INT 48
18423: PPUSH
18424: CALL_OW 114
// end ;
18428: GO 18364
18430: POP
18431: POP
// end ;
18432: PPOPN 2
18434: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18444: LD_ADDR_VAR 0 4
18448: PUSH
18449: LD_INT 2
18451: PPUSH
18452: LD_INT 2
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL 41817 0 3
18462: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: DOUBLE
18469: LD_INT 1
18471: DEC
18472: ST_TO_ADDR
18473: LD_VAR 0 4
18477: PUSH
18478: FOR_TO
18479: IFFALSE 18519
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18481: LD_INT 13
18483: PPUSH
18484: LD_VAR 0 4
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18499: LD_INT 14
18501: PPUSH
18502: LD_VAR 0 4
18506: PUSH
18507: LD_VAR 0 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 184
// end ;
18517: GO 18478
18519: POP
18520: POP
// end ;
18521: PPOPN 4
18523: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18524: LD_INT 0
18526: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18527: LD_ADDR_EXP 62
18531: PUSH
18532: LD_EXP 62
18536: PUSH
18537: LD_VAR 0 1
18541: PUSH
18542: LD_VAR 0 2
18546: PUSH
18547: LD_VAR 0 3
18551: PUSH
18552: LD_VAR 0 4
18556: PUSH
18557: LD_VAR 0 5
18561: PUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_VAR 0 7
18571: PUSH
18572: LD_VAR 0 8
18576: PUSH
18577: LD_VAR 0 9
18581: PUSH
18582: LD_VAR 0 10
18586: PUSH
18587: LD_VAR 0 11
18591: PUSH
18592: LD_VAR 0 12
18596: PUSH
18597: LD_VAR 0 13
18601: PUSH
18602: LD_VAR 0 14
18606: PUSH
18607: LD_VAR 0 15
18611: PUSH
18612: LD_VAR 0 16
18616: PUSH
18617: LD_VAR 0 17
18621: PUSH
18622: LD_VAR 0 18
18626: PUSH
18627: LD_VAR 0 19
18631: PUSH
18632: LD_VAR 0 20
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: ADD
18662: ST_TO_ADDR
// end ;
18663: LD_VAR 0 21
18667: RET
// export function ActiveAI ( index ) ; begin
18668: LD_INT 0
18670: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18671: LD_ADDR_EXP 62
18675: PUSH
18676: LD_EXP 62
18680: PPUSH
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: LD_INT 1
18695: PPUSH
18696: CALL 46740 0 3
18700: ST_TO_ADDR
// end ;
18701: LD_VAR 0 2
18705: RET
// export function DeactiveAI ( index ) ; begin
18706: LD_INT 0
18708: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18709: LD_ADDR_EXP 62
18713: PUSH
18714: LD_EXP 62
18718: PPUSH
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL 46740 0 3
18738: ST_TO_ADDR
// end ;
18739: LD_VAR 0 2
18743: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// for i := 1 to aiStructDatas do
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 62
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18766: LD_EXP 62
18770: PUSH
18771: LD_VAR 0 3
18775: ARRAY
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PUSH
18781: LD_VAR 0 1
18785: EQUAL
18786: IFFALSE 18808
// begin result = aiStructDatas [ i ] ;
18788: LD_ADDR_VAR 0 2
18792: PUSH
18793: LD_EXP 62
18797: PUSH
18798: LD_VAR 0 3
18802: ARRAY
18803: ST_TO_ADDR
// exit ;
18804: POP
18805: POP
18806: GO 18819
// end ;
18808: GO 18763
18810: POP
18811: POP
// result = [ ] ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: EMPTY
18818: ST_TO_ADDR
// end ;
18819: LD_VAR 0 2
18823: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18824: LD_INT 0
18826: PPUSH
18827: PPUSH
// for i := 1 to aiStructDatas do
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: DOUBLE
18834: LD_INT 1
18836: DEC
18837: ST_TO_ADDR
18838: LD_EXP 62
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18884
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18846: LD_EXP 62
18850: PUSH
18851: LD_VAR 0 3
18855: ARRAY
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PUSH
18861: LD_VAR 0 1
18865: EQUAL
18866: IFFALSE 18882
// begin result = i ;
18868: LD_ADDR_VAR 0 2
18872: PUSH
18873: LD_VAR 0 3
18877: ST_TO_ADDR
// exit ;
18878: POP
18879: POP
18880: GO 18893
// end ;
18882: GO 18843
18884: POP
18885: POP
// result = [ ] ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: EMPTY
18892: ST_TO_ADDR
// end ;
18893: LD_VAR 0 2
18897: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18903: LD_ADDR_VAR 0 4
18907: PUSH
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PPUSH
18917: CALL 18824 0 1
18921: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18922: LD_ADDR_VAR 0 5
18926: PUSH
18927: LD_VAR 0 1
18931: PUSH
18932: LD_INT 5
18934: ARRAY
18935: ST_TO_ADDR
// newArray = newArray ^ unit ;
18936: LD_ADDR_VAR 0 5
18940: PUSH
18941: LD_VAR 0 5
18945: PUSH
18946: LD_VAR 0 2
18950: ADD
18951: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18952: LD_ADDR_EXP 62
18956: PUSH
18957: LD_EXP 62
18961: PPUSH
18962: LD_VAR 0 4
18966: PUSH
18967: LD_INT 5
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: LD_VAR 0 5
18978: PPUSH
18979: CALL 46740 0 3
18983: ST_TO_ADDR
// end ;
18984: LD_VAR 0 3
18988: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
18993: PPUSH
// SetTag ( veh , state ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: PPUSH
19022: CALL 18824 0 1
19026: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19027: LD_ADDR_VAR 0 6
19031: PUSH
19032: LD_VAR 0 1
19036: PUSH
19037: LD_INT 5
19039: ARRAY
19040: ST_TO_ADDR
// newArray = newArray ^ veh ;
19041: LD_ADDR_VAR 0 6
19045: PUSH
19046: LD_VAR 0 6
19050: PUSH
19051: LD_VAR 0 2
19055: ADD
19056: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19057: LD_ADDR_EXP 62
19061: PUSH
19062: LD_EXP 62
19066: PPUSH
19067: LD_VAR 0 5
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: LD_VAR 0 6
19083: PPUSH
19084: CALL 46740 0 3
19088: ST_TO_ADDR
// end ;
19089: LD_VAR 0 4
19093: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19094: LD_INT 0
19096: PPUSH
19097: PPUSH
19098: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: LD_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: CALL 18824 0 1
19117: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19118: LD_ADDR_VAR 0 5
19122: PUSH
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 7
19130: ARRAY
19131: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_VAR 0 5
19141: PUSH
19142: LD_VAR 0 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: ADD
19150: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19151: LD_ADDR_EXP 62
19155: PUSH
19156: LD_EXP 62
19160: PPUSH
19161: LD_VAR 0 4
19165: PUSH
19166: LD_INT 7
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PPUSH
19173: LD_VAR 0 5
19177: PPUSH
19178: CALL 46740 0 3
19182: ST_TO_ADDR
// end ;
19183: LD_VAR 0 3
19187: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
19192: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19193: LD_ADDR_VAR 0 3
19197: PUSH
19198: LD_VAR 0 1
19202: PUSH
19203: LD_INT 1
19205: ARRAY
19206: PPUSH
19207: CALL 18824 0 1
19211: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19212: LD_ADDR_VAR 0 4
19216: PUSH
19217: LD_VAR 0 1
19221: PUSH
19222: LD_INT 7
19224: ARRAY
19225: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19226: LD_ADDR_VAR 0 4
19230: PUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 3
19243: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19244: LD_ADDR_EXP 62
19248: PUSH
19249: LD_EXP 62
19253: PPUSH
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 7
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PPUSH
19266: LD_VAR 0 4
19270: PPUSH
19271: CALL 46740 0 3
19275: ST_TO_ADDR
// end ;
19276: LD_VAR 0 2
19280: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
19285: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: CALL 18824 0 1
19304: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19305: LD_ADDR_VAR 0 5
19309: PUSH
19310: LD_VAR 0 1
19314: PUSH
19315: LD_INT 5
19317: ARRAY
19318: ST_TO_ADDR
// newArray = newArray diff unit ;
19319: LD_ADDR_VAR 0 5
19323: PUSH
19324: LD_VAR 0 5
19328: PUSH
19329: LD_VAR 0 2
19333: DIFF
19334: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19335: LD_ADDR_EXP 62
19339: PUSH
19340: LD_EXP 62
19344: PPUSH
19345: LD_VAR 0 4
19349: PUSH
19350: LD_INT 5
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: LD_VAR 0 5
19361: PPUSH
19362: CALL 46740 0 3
19366: ST_TO_ADDR
// end ;
19367: LD_VAR 0 3
19371: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// for i := 1 to aiStructDatas do
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: DOUBLE
19382: LD_INT 1
19384: DEC
19385: ST_TO_ADDR
19386: LD_EXP 62
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19438
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19394: LD_EXP 62
19398: PUSH
19399: LD_VAR 0 3
19403: ARRAY
19404: PUSH
19405: LD_INT 3
19407: ARRAY
19408: PUSH
19409: LD_VAR 0 1
19413: EQUAL
19414: IFFALSE 19436
// begin result = aiStructDatas [ i ] ;
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_EXP 62
19425: PUSH
19426: LD_VAR 0 3
19430: ARRAY
19431: ST_TO_ADDR
// exit ;
19432: POP
19433: POP
19434: GO 19447
// end ;
19436: GO 19391
19438: POP
19439: POP
// result = [ ] ;
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: EMPTY
19446: ST_TO_ADDR
// end ;
19447: LD_VAR 0 2
19451: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// if not aiData then
19457: LD_VAR 0 1
19461: NOT
19462: IFFALSE 19473
// begin result = [ ] ;
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: EMPTY
19470: ST_TO_ADDR
// exit ;
19471: GO 19557
// end ; defVehs = [ ] ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: EMPTY
19479: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19480: LD_ADDR_VAR 0 4
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: LD_INT 5
19492: ARRAY
19493: PPUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 72
19508: PUSH
19509: FOR_IN
19510: IFFALSE 19545
// if GetTag ( veh ) = 2 then
19512: LD_VAR 0 4
19516: PPUSH
19517: CALL_OW 110
19521: PUSH
19522: LD_INT 2
19524: EQUAL
19525: IFFALSE 19543
// defVehs = defVehs ^ veh ;
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: LD_VAR 0 3
19536: PUSH
19537: LD_VAR 0 4
19541: ADD
19542: ST_TO_ADDR
19543: GO 19509
19545: POP
19546: POP
// result = defVehs ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 3
19556: ST_TO_ADDR
// end ;
19557: LD_VAR 0 2
19561: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
// if not aiData then
19567: LD_VAR 0 1
19571: NOT
19572: IFFALSE 19583
// begin result = [ ] ;
19574: LD_ADDR_VAR 0 2
19578: PUSH
19579: EMPTY
19580: ST_TO_ADDR
// exit ;
19581: GO 19667
// end ; attackVehs = [ ] ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: EMPTY
19589: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19590: LD_ADDR_VAR 0 4
19594: PUSH
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 5
19602: ARRAY
19603: PPUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 72
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19655
// if GetTag ( veh ) = 4 then
19622: LD_VAR 0 4
19626: PPUSH
19627: CALL_OW 110
19631: PUSH
19632: LD_INT 4
19634: EQUAL
19635: IFFALSE 19653
// attackVehs = attackVehs ^ veh ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 3
19646: PUSH
19647: LD_VAR 0 4
19651: ADD
19652: ST_TO_ADDR
19653: GO 19619
19655: POP
19656: POP
// result = attackVehs ;
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: LD_VAR 0 3
19666: ST_TO_ADDR
// end ;
19667: LD_VAR 0 2
19671: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19672: LD_INT 0
19674: PPUSH
19675: PPUSH
19676: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19677: LD_ADDR_VAR 0 3
19681: PUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 18744 0 1
19691: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: PUSH
19701: LD_INT 0
19703: EQUAL
19704: IFFALSE 19708
// exit ;
19706: GO 20153
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19708: LD_ADDR_VAR 0 4
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 5
19720: ARRAY
19721: PPUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 72
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19843
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19740: LD_VAR 0 4
19744: PPUSH
19745: CALL_OW 256
19749: PUSH
19750: LD_INT 1000
19752: EQUAL
19753: PUSH
19754: LD_VAR 0 4
19758: PPUSH
19759: CALL_OW 110
19763: PUSH
19764: LD_INT 0
19766: EQUAL
19767: AND
19768: IFFALSE 19784
// SetTag ( unit , 1 ) else
19770: LD_VAR 0 4
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 109
19782: GO 19841
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19784: LD_VAR 0 4
19788: PPUSH
19789: CALL_OW 256
19793: PUSH
19794: LD_INT 950
19796: LESSEQUAL
19797: PUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: CALL_OW 256
19807: PUSH
19808: LD_INT 250
19810: GREATER
19811: AND
19812: PUSH
19813: LD_VAR 0 4
19817: PPUSH
19818: CALL_OW 110
19822: PUSH
19823: LD_INT 1
19825: EQUAL
19826: AND
19827: IFFALSE 19841
// SetTag ( unit , 0 ) ;
19829: LD_VAR 0 4
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 109
// end ;
19841: GO 19737
19843: POP
19844: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19845: LD_ADDR_VAR 0 4
19849: PUSH
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 5
19857: ARRAY
19858: PPUSH
19859: LD_INT 21
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 72
19873: PUSH
19874: FOR_IN
19875: IFFALSE 20151
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 256
19886: PUSH
19887: LD_INT 1000
19889: EQUAL
19890: PUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 110
19900: PUSH
19901: LD_INT 3
19903: EQUAL
19904: AND
19905: IFFALSE 19919
// SetTag ( unit , 2 ) ;
19907: LD_VAR 0 4
19911: PPUSH
19912: LD_INT 2
19914: PPUSH
19915: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19919: LD_VAR 0 4
19923: PPUSH
19924: CALL_OW 256
19928: PUSH
19929: LD_INT 1000
19931: EQUAL
19932: PUSH
19933: LD_VAR 0 4
19937: PPUSH
19938: CALL_OW 110
19942: PUSH
19943: LD_INT 5
19945: EQUAL
19946: AND
19947: IFFALSE 19961
// SetTag ( unit , 4 ) ;
19949: LD_VAR 0 4
19953: PPUSH
19954: LD_INT 4
19956: PPUSH
19957: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19961: LD_VAR 0 4
19965: PPUSH
19966: CALL_OW 256
19970: PUSH
19971: LD_INT 650
19973: LESSEQUAL
19974: PUSH
19975: LD_VAR 0 4
19979: PPUSH
19980: CALL_OW 110
19984: PUSH
19985: LD_INT 4
19987: EQUAL
19988: AND
19989: PUSH
19990: LD_VAR 0 4
19994: PPUSH
19995: CALL_OW 263
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: AND
20004: IFFALSE 20018
// SetTag ( unit , 5 ) ;
20006: LD_VAR 0 4
20010: PPUSH
20011: LD_INT 5
20013: PPUSH
20014: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20018: LD_VAR 0 4
20022: PPUSH
20023: CALL_OW 256
20027: PUSH
20028: LD_INT 650
20030: LESSEQUAL
20031: PUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: CALL_OW 110
20041: PUSH
20042: LD_INT 2
20044: EQUAL
20045: AND
20046: PUSH
20047: LD_VAR 0 4
20051: PPUSH
20052: CALL_OW 263
20056: PUSH
20057: LD_INT 1
20059: EQUAL
20060: AND
20061: IFFALSE 20075
// SetTag ( unit , 3 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_INT 3
20070: PPUSH
20071: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20075: LD_VAR 0 4
20079: PPUSH
20080: CALL_OW 263
20084: PUSH
20085: LD_INT 1
20087: EQUAL
20088: IFFALSE 20122
// if ( UnitsInside ( unit ) ) then
20090: LD_VAR 0 4
20094: PPUSH
20095: CALL_OW 313
20099: IFFALSE 20122
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20101: LD_VAR 0 4
20105: PPUSH
20106: CALL_OW 313
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PPUSH
20115: LD_INT 7
20117: PPUSH
20118: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20122: LD_VAR 0 4
20126: PPUSH
20127: CALL_OW 261
20131: PUSH
20132: LD_INT 50
20134: LESS
20135: IFFALSE 20149
// SetFuel ( unit , 100 ) ;
20137: LD_VAR 0 4
20141: PPUSH
20142: LD_INT 100
20144: PPUSH
20145: CALL_OW 240
// end ;
20149: GO 19874
20151: POP
20152: POP
// end ;
20153: LD_VAR 0 2
20157: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL 18744 0 1
20184: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: PUSH
20194: LD_INT 0
20196: EQUAL
20197: IFFALSE 20201
// exit ;
20199: GO 20780
// soldiersInsideBarracks = [ ] ;
20201: LD_ADDR_VAR 0 10
20205: PUSH
20206: EMPTY
20207: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20208: LD_ADDR_VAR 0 4
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 5
20220: ARRAY
20221: PPUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 50
20234: PUSH
20235: EMPTY
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 72
20246: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20247: LD_ADDR_VAR 0 6
20251: PUSH
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 6
20259: ARRAY
20260: PPUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 50
20273: PUSH
20274: EMPTY
20275: LIST
20276: PUSH
20277: LD_INT 3
20279: PUSH
20280: LD_INT 59
20282: PUSH
20283: EMPTY
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 30
20295: PUSH
20296: LD_INT 31
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 32
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 72
20328: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 3
20338: PUSH
20339: LD_INT 6
20341: ARRAY
20342: PPUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 3
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 50
20355: PUSH
20356: EMPTY
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 30
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 72
20396: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20397: LD_ADDR_VAR 0 9
20401: PUSH
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 6
20409: ARRAY
20410: PPUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 3
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 50
20423: PUSH
20424: EMPTY
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 30
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 72
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: ST_TO_ADDR
// for barrack in barracks do
20469: LD_ADDR_VAR 0 11
20473: PUSH
20474: LD_VAR 0 7
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20505
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: LD_VAR 0 10
20491: PUSH
20492: LD_VAR 0 11
20496: PPUSH
20497: CALL_OW 313
20501: ADD
20502: ST_TO_ADDR
20503: GO 20479
20505: POP
20506: POP
// index = 1 ;
20507: LD_ADDR_VAR 0 8
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_INT 56
20522: PUSH
20523: EMPTY
20524: LIST
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 60
20531: PUSH
20532: EMPTY
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 72
20547: PUSH
20548: LD_VAR 0 6
20552: AND
20553: PUSH
20554: LD_VAR 0 9
20558: AND
20559: IFFALSE 20659
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20561: LD_ADDR_VAR 0 5
20565: PUSH
20566: LD_VAR 0 4
20570: PPUSH
20571: LD_INT 56
20573: PUSH
20574: EMPTY
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: PPUSH
20580: CALL_OW 72
20584: PUSH
20585: LD_VAR 0 10
20589: ADD
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20657
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20594: LD_VAR 0 5
20598: PPUSH
20599: CALL_OW 110
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: PUSH
20608: LD_VAR 0 8
20612: PUSH
20613: LD_VAR 0 6
20617: LESSEQUAL
20618: AND
20619: IFFALSE 20655
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20621: LD_VAR 0 5
20625: PPUSH
20626: LD_VAR 0 6
20630: PUSH
20631: LD_VAR 0 8
20635: ARRAY
20636: PPUSH
20637: CALL_OW 120
// index = index + 1 ;
20641: LD_ADDR_VAR 0 8
20645: PUSH
20646: LD_VAR 0 8
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: ST_TO_ADDR
// end ;
20655: GO 20591
20657: POP
20658: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_INT 56
20666: PUSH
20667: EMPTY
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 60
20675: PUSH
20676: EMPTY
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PPUSH
20687: CALL_OW 72
20691: PUSH
20692: LD_VAR 0 6
20696: NOT
20697: AND
20698: PUSH
20699: LD_VAR 0 7
20703: AND
20704: IFFALSE 20780
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20706: LD_ADDR_VAR 0 5
20710: PUSH
20711: LD_VAR 0 4
20715: PPUSH
20716: LD_INT 56
20718: PUSH
20719: EMPTY
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: PPUSH
20725: CALL_OW 72
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20778
// if ( GetTag ( sold ) = 1 ) then
20733: LD_VAR 0 5
20737: PPUSH
20738: CALL_OW 110
20742: PUSH
20743: LD_INT 1
20745: EQUAL
20746: IFFALSE 20776
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20748: LD_VAR 0 5
20752: PPUSH
20753: LD_VAR 0 7
20757: PUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 12
20770: ARRAY
20771: PPUSH
20772: CALL_OW 120
20776: GO 20730
20778: POP
20779: POP
// end ;
20780: LD_VAR 0 2
20784: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20785: LD_INT 0
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL 18744 0 1
20806: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 2
20814: ARRAY
20815: PUSH
20816: LD_INT 0
20818: EQUAL
20819: IFFALSE 20823
// exit ;
20821: GO 21044
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 5
20835: ARRAY
20836: PPUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 50
20849: PUSH
20850: EMPTY
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PPUSH
20857: CALL_OW 72
20861: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20862: LD_ADDR_VAR 0 6
20866: PUSH
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 6
20874: ARRAY
20875: PPUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 50
20888: PUSH
20889: EMPTY
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 30
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 72
20929: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20930: LD_VAR 0 4
20934: PPUSH
20935: LD_INT 56
20937: PUSH
20938: EMPTY
20939: LIST
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 60
20946: PUSH
20947: EMPTY
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 72
20962: PUSH
20963: LD_VAR 0 6
20967: AND
20968: IFFALSE 21044
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 4
20979: PPUSH
20980: LD_INT 56
20982: PUSH
20983: EMPTY
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: PPUSH
20989: CALL_OW 72
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21042
// if ( GetTag ( mech ) = 1 ) then
20997: LD_VAR 0 5
21001: PPUSH
21002: CALL_OW 110
21006: PUSH
21007: LD_INT 1
21009: EQUAL
21010: IFFALSE 21040
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21012: LD_VAR 0 5
21016: PPUSH
21017: LD_VAR 0 6
21021: PUSH
21022: LD_INT 1
21024: PPUSH
21025: LD_VAR 0 6
21029: PPUSH
21030: CALL_OW 12
21034: ARRAY
21035: PPUSH
21036: CALL_OW 120
21040: GO 20994
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 2
21048: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21060: LD_ADDR_VAR 0 3
21064: PUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL 18744 0 1
21074: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 2
21082: ARRAY
21083: PUSH
21084: LD_INT 0
21086: EQUAL
21087: IFFALSE 21091
// exit ;
21089: GO 21554
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21091: LD_ADDR_VAR 0 5
21095: PUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 5
21103: ARRAY
21104: PPUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 50
21117: PUSH
21118: EMPTY
21119: LIST
21120: PUSH
21121: LD_INT 59
21123: PUSH
21124: EMPTY
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: LD_INT 30
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 30
21142: PUSH
21143: LD_INT 3
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 72
21165: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21166: LD_ADDR_VAR 0 8
21170: PUSH
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 5
21178: ARRAY
21179: PPUSH
21180: LD_INT 21
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 92
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 10
21210: ARRAY
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 517
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PUSH
21228: LD_VAR 0 3
21232: PUSH
21233: LD_INT 10
21235: ARRAY
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 517
21244: PUSH
21245: LD_INT 2
21247: ARRAY
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PUSH
21253: LD_INT 16
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 24
21267: PUSH
21268: LD_INT 1000
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 72
21289: ST_TO_ADDR
// if not damageVehicles then
21290: LD_VAR 0 8
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21554
// if fabs then
21299: LD_VAR 0 5
21303: IFFALSE 21428
// begin for damageVeh in damageVehicles do
21305: LD_ADDR_VAR 0 9
21309: PUSH
21310: LD_VAR 0 8
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21426
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21318: LD_VAR 0 9
21322: PPUSH
21323: CALL_OW 110
21327: PUSH
21328: LD_INT 3
21330: EQUAL
21331: PUSH
21332: LD_VAR 0 9
21336: PPUSH
21337: CALL_OW 110
21341: PUSH
21342: LD_INT 5
21344: EQUAL
21345: OR
21346: IFFALSE 21424
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21348: LD_ADDR_VAR 0 7
21352: PUSH
21353: LD_VAR 0 5
21357: PPUSH
21358: LD_VAR 0 9
21362: PPUSH
21363: CALL_OW 74
21367: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21368: LD_ADDR_VAR 0 4
21372: PUSH
21373: LD_VAR 0 7
21377: PPUSH
21378: CALL_OW 313
21382: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21383: LD_VAR 0 4
21387: PPUSH
21388: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21392: LD_VAR 0 4
21396: PPUSH
21397: LD_INT 3
21399: PUSH
21400: LD_INT 60
21402: PUSH
21403: EMPTY
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 72
21414: PPUSH
21415: LD_VAR 0 9
21419: PPUSH
21420: CALL_OW 189
// end ;
21424: GO 21315
21426: POP
21427: POP
// end ; for damageVeh in damageVehicles do
21428: LD_ADDR_VAR 0 9
21432: PUSH
21433: LD_VAR 0 8
21437: PUSH
21438: FOR_IN
21439: IFFALSE 21552
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21441: LD_VAR 0 9
21445: PPUSH
21446: CALL_OW 110
21450: PUSH
21451: LD_INT 3
21453: EQUAL
21454: PUSH
21455: LD_VAR 0 9
21459: PPUSH
21460: CALL_OW 110
21464: PUSH
21465: LD_INT 5
21467: EQUAL
21468: OR
21469: IFFALSE 21550
// begin mehInside = UnitsInside ( damageVeh ) ;
21471: LD_ADDR_VAR 0 10
21475: PUSH
21476: LD_VAR 0 9
21480: PPUSH
21481: CALL_OW 313
21485: ST_TO_ADDR
// if mehInside then
21486: LD_VAR 0 10
21490: IFFALSE 21550
// begin mehInside = mehInside [ 1 ] ;
21492: LD_ADDR_VAR 0 10
21496: PUSH
21497: LD_VAR 0 10
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21506: LD_VAR 0 10
21510: PPUSH
21511: CALL_OW 181
// wait ( 0 0$01 ) ;
21515: LD_INT 35
21517: PPUSH
21518: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21522: LD_VAR 0 10
21526: PPUSH
21527: LD_VAR 0 9
21531: PPUSH
21532: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21536: LD_VAR 0 10
21540: PPUSH
21541: LD_VAR 0 9
21545: PPUSH
21546: CALL_OW 180
// end ; end ;
21550: GO 21438
21552: POP
21553: POP
// end ;
21554: LD_VAR 0 2
21558: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 18744 0 1
21581: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21582: LD_VAR 0 3
21586: PUSH
21587: LD_INT 2
21589: ARRAY
21590: PUSH
21591: LD_INT 0
21593: EQUAL
21594: IFFALSE 21598
// exit ;
21596: GO 22052
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21598: LD_ADDR_VAR 0 7
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 6
21610: ARRAY
21611: PPUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 50
21624: PUSH
21625: EMPTY
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 30
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 30
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 72
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21670: LD_VAR 0 3
21674: PPUSH
21675: CALL 19452 0 1
21679: NOT
21680: IFFALSE 21684
// exit ;
21682: GO 22052
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21684: LD_VAR 0 7
21688: PUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL 19452 0 1
21698: AND
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 11
21707: ARRAY
21708: PPUSH
21709: LD_INT 81
21711: PUSH
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 3
21719: ARRAY
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 70
21729: NOT
21730: AND
21731: IFFALSE 21881
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21733: LD_ADDR_VAR 0 5
21737: PUSH
21738: LD_VAR 0 3
21742: PPUSH
21743: CALL 19452 0 1
21747: PPUSH
21748: LD_INT 50
21750: PUSH
21751: EMPTY
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 60
21759: PUSH
21760: EMPTY
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 92
21772: PUSH
21773: LD_VAR 0 7
21777: PPUSH
21778: CALL_OW 250
21782: PUSH
21783: LD_VAR 0 7
21787: PPUSH
21788: CALL_OW 251
21792: PUSH
21793: LD_INT 12
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: PPUSH
21811: CALL_OW 72
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21879
// if GetLives ( veh ) = 1000 then
21819: LD_VAR 0 5
21823: PPUSH
21824: CALL_OW 256
21828: PUSH
21829: LD_INT 1000
21831: EQUAL
21832: IFFALSE 21865
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21834: LD_VAR 0 5
21838: PPUSH
21839: LD_VAR 0 7
21843: PPUSH
21844: CALL_OW 250
21848: PPUSH
21849: LD_VAR 0 7
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: CALL_OW 111
21863: GO 21877
// SetTag ( veh , 3 ) ;
21865: LD_VAR 0 5
21869: PPUSH
21870: LD_INT 3
21872: PPUSH
21873: CALL_OW 109
21877: GO 21816
21879: POP
21880: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 11
21888: ARRAY
21889: PPUSH
21890: LD_INT 81
21892: PUSH
21893: LD_VAR 0 3
21897: PUSH
21898: LD_INT 3
21900: ARRAY
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 70
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 22052
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21915: LD_ADDR_VAR 0 5
21919: PUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL 19452 0 1
21929: PPUSH
21930: LD_INT 50
21932: PUSH
21933: EMPTY
21934: LIST
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 60
21941: PUSH
21942: EMPTY
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 72
21957: PUSH
21958: FOR_IN
21959: IFFALSE 22050
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21961: LD_VAR 0 5
21965: PPUSH
21966: LD_VAR 0 3
21970: PUSH
21971: LD_INT 11
21973: ARRAY
21974: PPUSH
21975: LD_INT 81
21977: PUSH
21978: LD_VAR 0 3
21982: PUSH
21983: LD_INT 3
21985: ARRAY
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 70
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: CALL_OW 250
22004: PPUSH
22005: LD_VAR 0 3
22009: PUSH
22010: LD_INT 11
22012: ARRAY
22013: PPUSH
22014: LD_INT 81
22016: PUSH
22017: LD_VAR 0 3
22021: PUSH
22022: LD_INT 3
22024: ARRAY
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 70
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: PPUSH
22039: CALL_OW 251
22043: PPUSH
22044: CALL_OW 114
22048: GO 21958
22050: POP
22051: POP
// end ;
22052: LD_VAR 0 2
22056: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22057: LD_INT 0
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL 18744 0 1
22079: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22080: LD_VAR 0 3
22084: PUSH
22085: LD_INT 2
22087: ARRAY
22088: PUSH
22089: LD_INT 0
22091: EQUAL
22092: IFFALSE 22096
// exit ;
22094: GO 22486
// if ( aiData [ 18 ] = 0 ) then
22096: LD_VAR 0 3
22100: PUSH
22101: LD_INT 18
22103: ARRAY
22104: PUSH
22105: LD_INT 0
22107: EQUAL
22108: IFFALSE 22112
// exit ;
22110: GO 22486
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL 19562 0 1
22121: PUSH
22122: LD_VAR 0 3
22126: PUSH
22127: LD_INT 14
22129: ARRAY
22130: GREATEREQUAL
22131: IFFALSE 22486
// begin repeat wait ( 0 0$01 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22140: LD_ADDR_VAR 0 6
22144: PUSH
22145: LD_VAR 0 3
22149: PPUSH
22150: CALL 19562 0 1
22154: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22155: LD_ADDR_VAR 0 7
22159: PUSH
22160: LD_VAR 0 6
22164: PUSH
22165: FOR_IN
22166: IFFALSE 22466
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_INT 81
22175: PUSH
22176: LD_VAR 0 3
22180: PUSH
22181: LD_INT 3
22183: ARRAY
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: PPUSH
22194: LD_VAR 0 7
22198: PPUSH
22199: CALL_OW 74
22203: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22204: LD_ADDR_VAR 0 5
22208: PUSH
22209: LD_INT 81
22211: PUSH
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 3
22219: ARRAY
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 59
22230: PUSH
22231: EMPTY
22232: LIST
22233: PUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PPUSH
22272: LD_VAR 0 7
22276: PPUSH
22277: CALL_OW 74
22281: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22282: LD_VAR 0 7
22286: PPUSH
22287: LD_VAR 0 4
22291: PPUSH
22292: CALL_OW 296
22296: PUSH
22297: LD_INT 12
22299: PLUS
22300: PUSH
22301: LD_VAR 0 7
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL_OW 296
22315: LESS
22316: IFFALSE 22392
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22318: LD_VAR 0 7
22322: PPUSH
22323: LD_INT 50
22325: PUSH
22326: EMPTY
22327: LIST
22328: PPUSH
22329: CALL_OW 72
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: CALL_OW 250
22343: PPUSH
22344: LD_VAR 0 4
22348: PPUSH
22349: CALL_OW 251
22353: PPUSH
22354: CALL_OW 114
// wait ( 0 0$01 ) ;
22358: LD_INT 35
22360: PPUSH
22361: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22365: LD_VAR 0 7
22369: PPUSH
22370: LD_INT 50
22372: PUSH
22373: EMPTY
22374: LIST
22375: PPUSH
22376: CALL_OW 72
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: CALL_OW 115
// end else
22390: GO 22464
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22392: LD_VAR 0 7
22396: PPUSH
22397: LD_INT 50
22399: PUSH
22400: EMPTY
22401: LIST
22402: PPUSH
22403: CALL_OW 72
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL_OW 250
22417: PPUSH
22418: LD_VAR 0 5
22422: PPUSH
22423: CALL_OW 251
22427: PPUSH
22428: CALL_OW 114
// wait ( 0 0$01 ) ;
22432: LD_INT 35
22434: PPUSH
22435: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_INT 50
22446: PUSH
22447: EMPTY
22448: LIST
22449: PPUSH
22450: CALL_OW 72
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 115
// end ; end ;
22464: GO 22165
22466: POP
22467: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22468: LD_VAR 0 6
22472: PPUSH
22473: LD_INT 50
22475: PUSH
22476: EMPTY
22477: LIST
22478: PPUSH
22479: CALL_OW 72
22483: NOT
22484: IFFALSE 22133
// end ; end ;
22486: LD_VAR 0 2
22490: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22491: LD_INT 0
22493: PPUSH
22494: PPUSH
22495: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL 18744 0 1
22510: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22511: LD_VAR 0 3
22515: PUSH
22516: LD_INT 2
22518: ARRAY
22519: PUSH
22520: LD_INT 0
22522: EQUAL
22523: IFFALSE 22527
// exit ;
22525: GO 22676
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22527: LD_ADDR_VAR 0 4
22531: PUSH
22532: LD_VAR 0 3
22536: PUSH
22537: LD_INT 5
22539: ARRAY
22540: PPUSH
22541: LD_INT 21
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 50
22553: PUSH
22554: EMPTY
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 34
22562: PUSH
22563: LD_INT 12
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 34
22572: PUSH
22573: LD_INT 32
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 51
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 72
22605: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 8
22613: ARRAY
22614: PPUSH
22615: CALL_OW 435
22619: NOT
22620: PUSH
22621: LD_VAR 0 4
22625: NOT
22626: OR
22627: IFFALSE 22631
// exit ;
22629: GO 22676
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22631: LD_VAR 0 4
22635: PPUSH
22636: LD_VAR 0 3
22640: PUSH
22641: LD_INT 8
22643: ARRAY
22644: PPUSH
22645: CALL_OW 435
22649: PUSH
22650: LD_INT 1
22652: ARRAY
22653: PPUSH
22654: LD_VAR 0 3
22658: PUSH
22659: LD_INT 8
22661: ARRAY
22662: PPUSH
22663: CALL_OW 435
22667: PUSH
22668: LD_INT 2
22670: ARRAY
22671: PPUSH
22672: CALL_OW 117
// end ;
22676: LD_VAR 0 2
22680: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
22685: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22686: LD_ADDR_VAR 0 3
22690: PUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL 18744 0 1
22700: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22701: LD_VAR 0 3
22705: PUSH
22706: LD_INT 2
22708: ARRAY
22709: PUSH
22710: LD_INT 0
22712: EQUAL
22713: IFFALSE 22717
// exit ;
22715: GO 22807
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 3
22726: PUSH
22727: LD_INT 5
22729: ARRAY
22730: PPUSH
22731: LD_INT 21
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 72
22745: PUSH
22746: FOR_IN
22747: IFFALSE 22805
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22749: LD_VAR 0 4
22753: PPUSH
22754: CALL_OW 110
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: PUSH
22763: LD_VAR 0 4
22767: PPUSH
22768: LD_VAR 0 3
22772: PUSH
22773: LD_INT 9
22775: ARRAY
22776: PPUSH
22777: CALL_OW 308
22781: NOT
22782: AND
22783: IFFALSE 22803
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22785: LD_VAR 0 4
22789: PPUSH
22790: LD_VAR 0 3
22794: PUSH
22795: LD_INT 9
22797: ARRAY
22798: PPUSH
22799: CALL_OW 113
22803: GO 22746
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL 18744 0 1
22831: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22832: LD_VAR 0 3
22836: PUSH
22837: LD_INT 2
22839: ARRAY
22840: PUSH
22841: LD_INT 0
22843: EQUAL
22844: IFFALSE 22848
// exit ;
22846: GO 22963
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22848: LD_ADDR_VAR 0 4
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: LD_INT 5
22860: ARRAY
22861: PPUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 50
22874: PUSH
22875: EMPTY
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 72
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22961
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22890: LD_VAR 0 4
22894: PPUSH
22895: CALL_OW 110
22899: PUSH
22900: LD_INT 3
22902: EQUAL
22903: PUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: CALL_OW 110
22913: PUSH
22914: LD_INT 5
22916: EQUAL
22917: OR
22918: PUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_VAR 0 3
22928: PUSH
22929: LD_INT 10
22931: ARRAY
22932: PPUSH
22933: CALL_OW 308
22937: NOT
22938: AND
22939: IFFALSE 22959
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 10
22953: ARRAY
22954: PPUSH
22955: CALL_OW 113
22959: GO 22887
22961: POP
22962: POP
// end ;
22963: LD_VAR 0 2
22967: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL 18744 0 1
22991: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 2
22999: ARRAY
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23008
// exit ;
23006: GO 23708
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 5
23020: ARRAY
23021: PPUSH
23022: LD_INT 25
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 50
23034: PUSH
23035: EMPTY
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 72
23046: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23047: LD_ADDR_VAR 0 5
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_INT 5
23059: ARRAY
23060: PPUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 50
23073: PUSH
23074: EMPTY
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 13
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 34
23092: PUSH
23093: LD_EXP 127
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 34
23104: PUSH
23105: LD_INT 52
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 72
23127: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23128: LD_ADDR_VAR 0 8
23132: PUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_INT 6
23140: ARRAY
23141: PPUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 1000
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 72
23177: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23178: LD_VAR 0 4
23182: PPUSH
23183: LD_INT 56
23185: PUSH
23186: EMPTY
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 60
23194: PUSH
23195: EMPTY
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 72
23210: PUSH
23211: LD_VAR 0 8
23215: NOT
23216: AND
23217: PUSH
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 6
23225: ARRAY
23226: PPUSH
23227: LD_INT 21
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 50
23239: PUSH
23240: EMPTY
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 30
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 72
23280: AND
23281: IFFALSE 23419
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23283: LD_ADDR_VAR 0 7
23287: PUSH
23288: LD_VAR 0 4
23292: PPUSH
23293: LD_INT 56
23295: PUSH
23296: EMPTY
23297: LIST
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: LD_INT 60
23304: PUSH
23305: EMPTY
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 72
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23417
// if ( GetTag ( eng ) = 1 ) then
23324: LD_VAR 0 7
23328: PPUSH
23329: CALL_OW 110
23333: PUSH
23334: LD_INT 1
23336: EQUAL
23337: IFFALSE 23415
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23339: LD_VAR 0 7
23343: PPUSH
23344: LD_VAR 0 3
23348: PUSH
23349: LD_INT 6
23351: ARRAY
23352: PPUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 50
23365: PUSH
23366: EMPTY
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 30
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 30
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: PPUSH
23402: CALL_OW 72
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: CALL_OW 120
23415: GO 23321
23417: POP
23418: POP
// if engineers and damagedBuildings then
23419: LD_VAR 0 4
23423: PUSH
23424: LD_VAR 0 8
23428: AND
23429: IFFALSE 23576
// begin for eng in engineers do
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_VAR 0 4
23440: PUSH
23441: FOR_IN
23442: IFFALSE 23515
// if ( GetTag ( eng ) = 1 ) then
23444: LD_VAR 0 7
23448: PPUSH
23449: CALL_OW 110
23453: PUSH
23454: LD_INT 1
23456: EQUAL
23457: IFFALSE 23513
// begin ForceResetTaskList ( eng ) ;
23459: LD_VAR 0 7
23463: PPUSH
23464: CALL 27062 0 1
// ExitUnitFromBuilding ( eng ) ;
23468: LD_VAR 0 7
23472: PPUSH
23473: CALL 27115 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23477: LD_VAR 0 7
23481: PPUSH
23482: LD_INT 3
23484: PUSH
23485: LD_INT 60
23487: PUSH
23488: EMPTY
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 72
23499: PPUSH
23500: LD_VAR 0 8
23504: PUSH
23505: LD_INT 1
23507: ARRAY
23508: PPUSH
23509: CALL_OW 190
// end ;
23513: GO 23441
23515: POP
23516: POP
// if cranes then
23517: LD_VAR 0 5
23521: IFFALSE 23576
// for crane in cranes do
23523: LD_ADDR_VAR 0 6
23527: PUSH
23528: LD_VAR 0 5
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23574
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23536: LD_VAR 0 6
23540: PPUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 60
23546: PUSH
23547: EMPTY
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 72
23558: PPUSH
23559: LD_VAR 0 8
23563: PUSH
23564: LD_INT 1
23566: ARRAY
23567: PPUSH
23568: CALL_OW 190
23572: GO 23533
23574: POP
23575: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23576: LD_VAR 0 4
23580: PUSH
23581: LD_VAR 0 8
23585: NOT
23586: AND
23587: PUSH
23588: LD_VAR 0 3
23592: PUSH
23593: LD_INT 7
23595: ARRAY
23596: AND
23597: IFFALSE 23708
// begin for eng in engineers do
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_VAR 0 4
23608: PUSH
23609: FOR_IN
23610: IFFALSE 23706
// if ( GetTag ( eng ) = 1 ) then
23612: LD_VAR 0 7
23616: PPUSH
23617: CALL_OW 110
23621: PUSH
23622: LD_INT 1
23624: EQUAL
23625: IFFALSE 23704
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23627: LD_VAR 0 7
23631: PPUSH
23632: LD_VAR 0 3
23636: PUSH
23637: LD_INT 7
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: PUSH
23645: LD_INT 1
23647: ARRAY
23648: PPUSH
23649: LD_VAR 0 3
23653: PUSH
23654: LD_INT 7
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: PUSH
23662: LD_INT 2
23664: ARRAY
23665: PPUSH
23666: LD_VAR 0 3
23670: PUSH
23671: LD_INT 7
23673: ARRAY
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PUSH
23679: LD_INT 3
23681: ARRAY
23682: PPUSH
23683: LD_VAR 0 3
23687: PUSH
23688: LD_INT 7
23690: ARRAY
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: PUSH
23696: LD_INT 4
23698: ARRAY
23699: PPUSH
23700: CALL_OW 145
23704: GO 23609
23706: POP
23707: POP
// end ;
23708: LD_VAR 0 2
23712: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: LD_VAR 0 1
23730: PPUSH
23731: CALL 18744 0 1
23735: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23736: LD_VAR 0 3
23740: PUSH
23741: LD_INT 2
23743: ARRAY
23744: PUSH
23745: LD_INT 0
23747: EQUAL
23748: IFFALSE 23752
// exit ;
23750: GO 24206
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 3
23761: PUSH
23762: LD_INT 5
23764: ARRAY
23765: PPUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 4
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 50
23778: PUSH
23779: EMPTY
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PPUSH
23786: CALL_OW 72
23790: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 3
23800: PUSH
23801: LD_INT 5
23803: ARRAY
23804: PPUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 92
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_INT 9
23825: ARRAY
23826: PPUSH
23827: LD_INT 0
23829: PPUSH
23830: CALL_OW 517
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PUSH
23843: LD_VAR 0 3
23847: PUSH
23848: LD_INT 9
23850: ARRAY
23851: PPUSH
23852: LD_INT 0
23854: PPUSH
23855: CALL_OW 517
23859: PUSH
23860: LD_INT 2
23862: ARRAY
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 24
23882: PUSH
23883: LD_INT 1000
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 72
23903: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23904: LD_ADDR_VAR 0 7
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_INT 5
23916: ARRAY
23917: PPUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 50
23930: PUSH
23931: EMPTY
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 6
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 30
23949: PUSH
23950: LD_INT 7
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 8
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 72
23982: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23983: LD_VAR 0 4
23987: PPUSH
23988: LD_INT 56
23990: PUSH
23991: EMPTY
23992: LIST
23993: PUSH
23994: LD_INT 3
23996: PUSH
23997: LD_INT 60
23999: PUSH
24000: EMPTY
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 72
24015: PUSH
24016: LD_VAR 0 6
24020: NOT
24021: AND
24022: PUSH
24023: LD_VAR 0 7
24027: AND
24028: IFFALSE 24104
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 4
24039: PPUSH
24040: LD_INT 56
24042: PUSH
24043: EMPTY
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: PPUSH
24049: CALL_OW 72
24053: PUSH
24054: FOR_IN
24055: IFFALSE 24102
// if ( GetTag ( sci ) = 1 ) then
24057: LD_VAR 0 5
24061: PPUSH
24062: CALL_OW 110
24066: PUSH
24067: LD_INT 1
24069: EQUAL
24070: IFFALSE 24100
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24072: LD_VAR 0 5
24076: PPUSH
24077: LD_VAR 0 7
24081: PUSH
24082: LD_INT 1
24084: PPUSH
24085: LD_VAR 0 7
24089: PPUSH
24090: CALL_OW 12
24094: ARRAY
24095: PPUSH
24096: CALL_OW 120
24100: GO 24054
24102: POP
24103: POP
// if not scientists or not damageUnits then
24104: LD_VAR 0 4
24108: NOT
24109: PUSH
24110: LD_VAR 0 6
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24206
// for sci in scientists do
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 4
24129: PUSH
24130: FOR_IN
24131: IFFALSE 24204
// if ( GetTag ( sci ) = 1 ) then
24133: LD_VAR 0 5
24137: PPUSH
24138: CALL_OW 110
24142: PUSH
24143: LD_INT 1
24145: EQUAL
24146: IFFALSE 24202
// begin ForceResetTaskList ( sci ) ;
24148: LD_VAR 0 5
24152: PPUSH
24153: CALL 27062 0 1
// ExitUnitFromBuilding ( sci ) ;
24157: LD_VAR 0 5
24161: PPUSH
24162: CALL 27115 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24166: LD_VAR 0 5
24170: PPUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 60
24176: PUSH
24177: EMPTY
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 72
24188: PPUSH
24189: LD_VAR 0 6
24193: PUSH
24194: LD_INT 1
24196: ARRAY
24197: PPUSH
24198: CALL_OW 188
// end ;
24202: GO 24130
24204: POP
24205: POP
// end ;
24206: LD_VAR 0 2
24210: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24219: LD_ADDR_VAR 0 3
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL 18744 0 1
24233: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24234: LD_VAR 0 3
24238: PUSH
24239: LD_INT 2
24241: ARRAY
24242: PUSH
24243: LD_INT 0
24245: EQUAL
24246: IFFALSE 24250
// exit ;
24248: GO 25617
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24250: LD_ADDR_VAR 0 4
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_INT 6
24262: ARRAY
24263: PPUSH
24264: LD_INT 21
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 30
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: PPUSH
24313: CALL_OW 72
24317: ST_TO_ADDR
// if not fabs then
24318: LD_VAR 0 4
24322: NOT
24323: IFFALSE 24327
// exit ;
24325: GO 25617
// wait ( aiData [ 16 ] ) ;
24327: LD_VAR 0 3
24331: PUSH
24332: LD_INT 16
24334: ARRAY
24335: PPUSH
24336: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24340: LD_VAR 0 3
24344: PUSH
24345: LD_INT 17
24347: ARRAY
24348: PUSH
24349: LD_INT 1
24351: ARRAY
24352: IFFALSE 24524
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 13
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: CALL 19452 0 1
24382: MINUS
24383: PUSH
24384: FOR_TO
24385: IFFALSE 24522
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24387: LD_ADDR_VAR 0 6
24391: PUSH
24392: LD_VAR 0 3
24396: PUSH
24397: LD_INT 13
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_INT 4
24409: ARRAY
24410: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24411: LD_ADDR_VAR 0 7
24415: PUSH
24416: LD_VAR 0 6
24420: PUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_VAR 0 6
24428: PPUSH
24429: CALL_OW 12
24433: ARRAY
24434: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24435: LD_VAR 0 4
24439: PUSH
24440: LD_INT 0
24442: PPUSH
24443: LD_VAR 0 4
24447: PPUSH
24448: CALL_OW 12
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 13
24461: ARRAY
24462: PUSH
24463: LD_VAR 0 5
24467: ARRAY
24468: PUSH
24469: LD_INT 1
24471: ARRAY
24472: PPUSH
24473: LD_VAR 0 3
24477: PUSH
24478: LD_INT 13
24480: ARRAY
24481: PUSH
24482: LD_VAR 0 5
24486: ARRAY
24487: PUSH
24488: LD_INT 2
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 13
24499: ARRAY
24500: PUSH
24501: LD_VAR 0 5
24505: ARRAY
24506: PUSH
24507: LD_INT 3
24509: ARRAY
24510: PPUSH
24511: LD_VAR 0 7
24515: PPUSH
24516: CALL_OW 185
// end ;
24520: GO 24384
24522: POP
24523: POP
// end ; if aiData [ 17 ] [ 3 ] then
24524: LD_VAR 0 3
24528: PUSH
24529: LD_INT 17
24531: ARRAY
24532: PUSH
24533: LD_INT 3
24535: ARRAY
24536: IFFALSE 25433
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24538: LD_INT 22
24540: PUSH
24541: LD_VAR 0 3
24545: PUSH
24546: LD_INT 3
24548: ARRAY
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 34
24569: PUSH
24570: LD_INT 12
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 34
24579: PUSH
24580: LD_INT 32
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 34
24589: PUSH
24590: LD_INT 51
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: PPUSH
24608: CALL_OW 69
24612: PUSH
24613: LD_VAR 0 3
24617: PUSH
24618: LD_INT 15
24620: ARRAY
24621: PUSH
24622: LD_INT 1
24624: ARRAY
24625: LESS
24626: IFFALSE 24837
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 15
24645: ARRAY
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PUSH
24651: LD_INT 22
24653: PUSH
24654: LD_VAR 0 3
24658: PUSH
24659: LD_INT 3
24661: ARRAY
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 21
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 34
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 34
24692: PUSH
24693: LD_INT 32
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 34
24702: PUSH
24703: LD_INT 51
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: MINUS
24726: PUSH
24727: FOR_TO
24728: IFFALSE 24835
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24730: LD_VAR 0 4
24734: PUSH
24735: LD_INT 0
24737: PPUSH
24738: LD_VAR 0 4
24742: PPUSH
24743: CALL_OW 12
24747: ARRAY
24748: PPUSH
24749: LD_INT 3
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: LD_INT 22
24763: PUSH
24764: EMPTY
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: PUSH
24772: LD_VAR 0 3
24776: PUSH
24777: LD_INT 4
24779: ARRAY
24780: ARRAY
24781: PUSH
24782: LD_INT 1
24784: ARRAY
24785: PPUSH
24786: LD_INT 1
24788: PPUSH
24789: LD_INT 2
24791: PPUSH
24792: LD_INT 12
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 32
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: LD_INT 51
24806: PUSH
24807: EMPTY
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: PUSH
24815: LD_VAR 0 3
24819: PUSH
24820: LD_INT 4
24822: ARRAY
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: CALL_OW 185
24833: GO 24727
24835: POP
24836: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24837: LD_INT 22
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_INT 3
24847: ARRAY
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 21
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 34
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: LD_EXP 127
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 34
24890: PUSH
24891: LD_INT 52
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: PPUSH
24909: CALL_OW 69
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_INT 15
24921: ARRAY
24922: PUSH
24923: LD_INT 2
24925: ARRAY
24926: LESS
24927: IFFALSE 25142
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24929: LD_ADDR_VAR 0 5
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 15
24946: ARRAY
24947: PUSH
24948: LD_INT 2
24950: ARRAY
24951: PUSH
24952: LD_INT 22
24954: PUSH
24955: LD_VAR 0 3
24959: PUSH
24960: LD_INT 3
24962: ARRAY
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 34
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_EXP 127
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 34
25005: PUSH
25006: LD_INT 52
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: MINUS
25029: PUSH
25030: FOR_TO
25031: IFFALSE 25140
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25033: LD_VAR 0 4
25037: PUSH
25038: LD_INT 0
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: CALL_OW 12
25050: ARRAY
25051: PPUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: EMPTY
25062: LIST
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: EMPTY
25068: LIST
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: LD_VAR 0 3
25079: PUSH
25080: LD_INT 4
25082: ARRAY
25083: ARRAY
25084: PUSH
25085: LD_INT 1
25087: ARRAY
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: LD_INT 2
25094: PPUSH
25095: LD_INT 13
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: LD_EXP 127
25105: PUSH
25106: EMPTY
25107: LIST
25108: PUSH
25109: LD_INT 52
25111: PUSH
25112: EMPTY
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: PUSH
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 4
25127: ARRAY
25128: ARRAY
25129: PUSH
25130: LD_INT 1
25132: ARRAY
25133: PPUSH
25134: CALL_OW 185
25138: GO 25030
25140: POP
25141: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25142: LD_INT 22
25144: PUSH
25145: LD_VAR 0 3
25149: PUSH
25150: LD_INT 3
25152: ARRAY
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 21
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: LD_INT 34
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 14
25183: PUSH
25184: EMPTY
25185: LIST
25186: PUSH
25187: LD_INT 34
25189: PUSH
25190: LD_INT 53
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_INT 15
25220: ARRAY
25221: PUSH
25222: LD_INT 3
25224: ARRAY
25225: LESS
25226: IFFALSE 25433
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: DOUBLE
25234: LD_INT 1
25236: DEC
25237: ST_TO_ADDR
25238: LD_VAR 0 3
25242: PUSH
25243: LD_INT 15
25245: ARRAY
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_VAR 0 3
25258: PUSH
25259: LD_INT 3
25261: ARRAY
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 34
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 14
25292: PUSH
25293: EMPTY
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 53
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: MINUS
25322: PUSH
25323: FOR_TO
25324: IFFALSE 25431
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25326: LD_VAR 0 4
25330: PUSH
25331: LD_INT 0
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: CALL_OW 12
25343: ARRAY
25344: PPUSH
25345: LD_INT 4
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: EMPTY
25355: LIST
25356: PUSH
25357: LD_INT 24
25359: PUSH
25360: EMPTY
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_VAR 0 3
25372: PUSH
25373: LD_INT 4
25375: ARRAY
25376: ARRAY
25377: PUSH
25378: LD_INT 1
25380: ARRAY
25381: PPUSH
25382: LD_INT 1
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_INT 14
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: LD_INT 53
25402: PUSH
25403: EMPTY
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 4
25418: ARRAY
25419: ARRAY
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PPUSH
25425: CALL_OW 185
25429: GO 25323
25431: POP
25432: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25433: LD_VAR 0 3
25437: PUSH
25438: LD_INT 17
25440: ARRAY
25441: PUSH
25442: LD_INT 2
25444: ARRAY
25445: PUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: CALL 19562 0 1
25455: MINUS
25456: IFFALSE 25617
// begin for i := 1 to aiData [ 14 ] do
25458: LD_ADDR_VAR 0 5
25462: PUSH
25463: DOUBLE
25464: LD_INT 1
25466: DEC
25467: ST_TO_ADDR
25468: LD_VAR 0 3
25472: PUSH
25473: LD_INT 14
25475: ARRAY
25476: PUSH
25477: FOR_TO
25478: IFFALSE 25615
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25480: LD_ADDR_VAR 0 6
25484: PUSH
25485: LD_VAR 0 3
25489: PUSH
25490: LD_INT 14
25492: ARRAY
25493: PUSH
25494: LD_VAR 0 5
25498: ARRAY
25499: PUSH
25500: LD_INT 4
25502: ARRAY
25503: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25504: LD_ADDR_VAR 0 7
25508: PUSH
25509: LD_VAR 0 6
25513: PUSH
25514: LD_INT 1
25516: PPUSH
25517: LD_VAR 0 6
25521: PPUSH
25522: CALL_OW 12
25526: ARRAY
25527: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25528: LD_VAR 0 4
25532: PUSH
25533: LD_INT 0
25535: PPUSH
25536: LD_VAR 0 4
25540: PPUSH
25541: CALL_OW 12
25545: ARRAY
25546: PPUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_INT 14
25554: ARRAY
25555: PUSH
25556: LD_VAR 0 5
25560: ARRAY
25561: PUSH
25562: LD_INT 1
25564: ARRAY
25565: PPUSH
25566: LD_VAR 0 3
25570: PUSH
25571: LD_INT 14
25573: ARRAY
25574: PUSH
25575: LD_VAR 0 5
25579: ARRAY
25580: PUSH
25581: LD_INT 2
25583: ARRAY
25584: PPUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_INT 14
25592: ARRAY
25593: PUSH
25594: LD_VAR 0 5
25598: ARRAY
25599: PUSH
25600: LD_INT 3
25602: ARRAY
25603: PPUSH
25604: LD_VAR 0 7
25608: PPUSH
25609: CALL_OW 185
// end ;
25613: GO 25477
25615: POP
25616: POP
// end ; end ;
25617: LD_VAR 0 2
25621: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25622: LD_INT 0
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// for unit in units do
25638: LD_ADDR_VAR 0 6
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: FOR_IN
25649: IFFALSE 25665
// SetTag ( unit , 0 ) ;
25651: LD_VAR 0 6
25655: PPUSH
25656: LD_INT 0
25658: PPUSH
25659: CALL_OW 109
25663: GO 25648
25665: POP
25666: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25667: LD_ADDR_VAR 0 13
25671: PUSH
25672: LD_VAR 0 3
25676: PUSH
25677: LD_VAR 0 3
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PUSH
25687: LD_VAR 0 3
25691: PUSH
25692: LD_VAR 0 3
25696: ARRAY
25697: PUSH
25698: LD_INT 2
25700: ARRAY
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25706: LD_ADDR_VAR 0 7
25710: PUSH
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_INT 50
25718: PUSH
25719: EMPTY
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 59
25727: PUSH
25728: EMPTY
25729: LIST
25730: PUSH
25731: LD_INT 25
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 25
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 21
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PPUSH
25772: CALL_OW 72
25776: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25777: LD_ADDR_VAR 0 9
25781: PUSH
25782: LD_VAR 0 2
25786: PPUSH
25787: LD_INT 50
25789: PUSH
25790: EMPTY
25791: LIST
25792: PUSH
25793: LD_INT 25
25795: PUSH
25796: LD_INT 4
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 72
25811: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25812: LD_ADDR_VAR 0 10
25816: PUSH
25817: LD_VAR 0 2
25821: PPUSH
25822: LD_INT 21
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 24
25837: PUSH
25838: LD_INT 1000
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PPUSH
25853: CALL_OW 72
25857: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25858: LD_ADDR_VAR 0 11
25862: PUSH
25863: LD_INT 21
25865: PPUSH
25866: CALL_OW 435
25870: ST_TO_ADDR
// for unit in attackUnits do
25871: LD_ADDR_VAR 0 6
25875: PUSH
25876: LD_VAR 0 7
25880: PUSH
25881: FOR_IN
25882: IFFALSE 26631
// begin if path then
25884: LD_VAR 0 3
25888: IFFALSE 26620
// begin i = 1 ;
25890: LD_ADDR_VAR 0 5
25894: PUSH
25895: LD_INT 1
25897: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25898: LD_ADDR_VAR 0 11
25902: PUSH
25903: LD_INT 21
25905: PPUSH
25906: CALL_OW 435
25910: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25911: LD_ADDR_VAR 0 14
25915: PUSH
25916: LD_INT 81
25918: PUSH
25919: LD_VAR 0 6
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: PPUSH
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 74
25947: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25948: LD_ADDR_VAR 0 15
25952: PUSH
25953: LD_VAR 0 11
25957: PPUSH
25958: LD_VAR 0 6
25962: PPUSH
25963: CALL_OW 250
25967: PPUSH
25968: LD_VAR 0 6
25972: PPUSH
25973: CALL_OW 251
25977: PPUSH
25978: CALL_OW 439
25982: ST_TO_ADDR
// if damageUnits and medics then
25983: LD_VAR 0 10
25987: PUSH
25988: LD_VAR 0 9
25992: AND
25993: IFFALSE 26015
// ComHeal ( medics , damageUnits [ 1 ] ) else
25995: LD_VAR 0 9
25999: PPUSH
26000: LD_VAR 0 10
26004: PUSH
26005: LD_INT 1
26007: ARRAY
26008: PPUSH
26009: CALL_OW 128
26013: GO 26058
// if medics then
26015: LD_VAR 0 9
26019: IFFALSE 26058
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26021: LD_VAR 0 9
26025: PPUSH
26026: LD_VAR 0 7
26030: PUSH
26031: LD_INT 1
26033: ARRAY
26034: PPUSH
26035: CALL_OW 250
26039: PPUSH
26040: LD_VAR 0 7
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: CALL_OW 251
26053: PPUSH
26054: CALL_OW 111
// if not HasTask ( unit ) then
26058: LD_VAR 0 6
26062: PPUSH
26063: CALL_OW 314
26067: NOT
26068: IFFALSE 26307
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26070: LD_ADDR_VAR 0 15
26074: PUSH
26075: LD_VAR 0 11
26079: PPUSH
26080: LD_VAR 0 6
26084: PPUSH
26085: CALL_OW 250
26089: PPUSH
26090: LD_VAR 0 6
26094: PPUSH
26095: CALL_OW 251
26099: PPUSH
26100: CALL_OW 439
26104: ST_TO_ADDR
// if i > crates then
26105: LD_VAR 0 5
26109: PUSH
26110: LD_VAR 0 11
26114: GREATER
26115: IFFALSE 26125
// i = 1 ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_INT 1
26124: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26125: LD_VAR 0 14
26129: PUSH
26130: LD_VAR 0 15
26134: AND
26135: IFFALSE 26250
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26137: LD_VAR 0 6
26141: PPUSH
26142: LD_VAR 0 14
26146: PPUSH
26147: CALL_OW 250
26151: PPUSH
26152: LD_VAR 0 14
26156: PPUSH
26157: CALL_OW 251
26161: PPUSH
26162: CALL_OW 297
26166: PUSH
26167: LD_VAR 0 6
26171: PPUSH
26172: LD_VAR 0 15
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 15
26185: PUSH
26186: LD_INT 2
26188: ARRAY
26189: PPUSH
26190: CALL_OW 297
26194: LESS
26195: IFFALSE 26213
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26197: LD_VAR 0 7
26201: PPUSH
26202: LD_VAR 0 14
26206: PPUSH
26207: CALL_OW 115
26211: GO 26248
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26213: LD_VAR 0 7
26217: PPUSH
26218: LD_VAR 0 11
26222: PUSH
26223: LD_VAR 0 5
26227: ARRAY
26228: PPUSH
26229: LD_VAR 0 11
26233: PUSH
26234: LD_VAR 0 5
26238: PUSH
26239: LD_INT 1
26241: PLUS
26242: ARRAY
26243: PPUSH
26244: CALL_OW 116
// end else
26248: GO 26307
// if crates then
26250: LD_VAR 0 11
26254: IFFALSE 26293
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26256: LD_VAR 0 7
26260: PPUSH
26261: LD_VAR 0 11
26265: PUSH
26266: LD_VAR 0 5
26270: ARRAY
26271: PPUSH
26272: LD_VAR 0 11
26276: PUSH
26277: LD_VAR 0 5
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: ARRAY
26286: PPUSH
26287: CALL_OW 116
26291: GO 26307
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26293: LD_VAR 0 7
26297: PPUSH
26298: LD_VAR 0 14
26302: PPUSH
26303: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26307: LD_INT 35
26309: PPUSH
26310: CALL_OW 67
// if path then
26314: LD_VAR 0 3
26318: IFFALSE 26394
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26320: LD_ADDR_VAR 0 16
26324: PUSH
26325: LD_VAR 0 6
26329: PPUSH
26330: LD_VAR 0 3
26334: PPUSH
26335: CALL 26849 0 2
26339: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26340: LD_VAR 0 7
26344: PPUSH
26345: LD_VAR 0 16
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 16
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26367: LD_VAR 0 1
26371: PPUSH
26372: LD_VAR 0 16
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 16
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: PPUSH
26390: CALL_OW 114
// end ; i = i + 2 ;
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_VAR 0 5
26403: PUSH
26404: LD_INT 2
26406: PLUS
26407: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_VAR 0 16
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: LD_VAR 0 16
26426: PUSH
26427: LD_INT 2
26429: ARRAY
26430: PPUSH
26431: CALL_OW 297
26435: PUSH
26436: LD_INT 6
26438: LESSEQUAL
26439: IFFALSE 25898
// repeat wait ( 0 0$1 ) ;
26441: LD_INT 35
26443: PPUSH
26444: CALL_OW 67
// nearUnitsCounter = 0 ;
26448: LD_ADDR_VAR 0 12
26452: PUSH
26453: LD_INT 0
26455: ST_TO_ADDR
// for attackUnit in attackUnits do
26456: LD_ADDR_VAR 0 8
26460: PUSH
26461: LD_VAR 0 7
26465: PUSH
26466: FOR_IN
26467: IFFALSE 26505
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26469: LD_VAR 0 6
26473: PPUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 296
26483: PUSH
26484: LD_INT 7
26486: LESSEQUAL
26487: IFFALSE 26503
// nearUnitsCounter = nearUnitsCounter + 1 ;
26489: LD_ADDR_VAR 0 12
26493: PUSH
26494: LD_VAR 0 12
26498: PUSH
26499: LD_INT 1
26501: PLUS
26502: ST_TO_ADDR
26503: GO 26466
26505: POP
26506: POP
// until nearUnitsCounter = attackUnits ;
26507: LD_VAR 0 12
26511: PUSH
26512: LD_VAR 0 7
26516: EQUAL
26517: IFFALSE 26441
// for i := 1 to path do
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: DOUBLE
26525: LD_INT 1
26527: DEC
26528: ST_TO_ADDR
26529: LD_VAR 0 3
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26618
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26537: LD_VAR 0 3
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PUSH
26552: LD_VAR 0 16
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: EQUAL
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_VAR 0 5
26571: ARRAY
26572: PUSH
26573: LD_INT 2
26575: ARRAY
26576: PUSH
26577: LD_VAR 0 16
26581: PUSH
26582: LD_INT 2
26584: ARRAY
26585: EQUAL
26586: AND
26587: IFFALSE 26616
// begin path = path diff [ path [ i ] ] ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_VAR 0 5
26608: ARRAY
26609: PUSH
26610: EMPTY
26611: LIST
26612: DIFF
26613: ST_TO_ADDR
// break ;
26614: GO 26618
// end ;
26616: GO 26534
26618: POP
26619: POP
// end ; if not path then
26620: LD_VAR 0 3
26624: NOT
26625: IFFALSE 26629
// break ;
26627: GO 26631
// end ;
26629: GO 25881
26631: POP
26632: POP
// repeat unitsReachPathEnd = 0 ;
26633: LD_ADDR_VAR 0 17
26637: PUSH
26638: LD_INT 0
26640: ST_TO_ADDR
// for attackUnit in attackUnits do
26641: LD_ADDR_VAR 0 8
26645: PUSH
26646: LD_VAR 0 7
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26790
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_VAR 0 13
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_VAR 0 13
26672: PUSH
26673: LD_INT 2
26675: ARRAY
26676: PPUSH
26677: CALL_OW 297
26681: PUSH
26682: LD_INT 7
26684: LESS
26685: NOT
26686: PUSH
26687: LD_VAR 0 8
26691: PPUSH
26692: CALL_OW 110
26696: PUSH
26697: LD_INT 0
26699: EQUAL
26700: AND
26701: IFFALSE 26732
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26703: LD_VAR 0 8
26707: PPUSH
26708: LD_VAR 0 13
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 13
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: CALL_OW 111
26730: GO 26759
// if GetTag ( attackUnit ) = 0 then
26732: LD_VAR 0 8
26736: PPUSH
26737: CALL_OW 110
26741: PUSH
26742: LD_INT 0
26744: EQUAL
26745: IFFALSE 26759
// SetTag ( attackUnit , 1 ) ;
26747: LD_VAR 0 8
26751: PPUSH
26752: LD_INT 1
26754: PPUSH
26755: CALL_OW 109
// if GetTag ( unit ) = 1 then
26759: LD_VAR 0 6
26763: PPUSH
26764: CALL_OW 110
26768: PUSH
26769: LD_INT 1
26771: EQUAL
26772: IFFALSE 26788
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26774: LD_ADDR_VAR 0 17
26778: PUSH
26779: LD_VAR 0 17
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: ST_TO_ADDR
// end ;
26788: GO 26651
26790: POP
26791: POP
// wait ( 0 0$1 ) ;
26792: LD_INT 35
26794: PPUSH
26795: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26799: LD_VAR 0 17
26803: PUSH
26804: LD_VAR 0 7
26808: PUSH
26809: LD_INT 3
26811: MINUS
26812: GREATER
26813: IFFALSE 26633
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 50
26822: PUSH
26823: EMPTY
26824: LIST
26825: PPUSH
26826: CALL_OW 72
26830: NOT
26831: PUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 303
26841: OR
26842: IFFALSE 25706
// end ;
26844: LD_VAR 0 4
26848: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
26853: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 2
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PUSH
26881: LD_INT 2
26883: ARRAY
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// for i := 2 to path do
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: DOUBLE
26895: LD_INT 2
26897: DEC
26898: ST_TO_ADDR
26899: LD_VAR 0 2
26903: PUSH
26904: FOR_TO
26905: IFFALSE 27045
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26907: LD_VAR 0 1
26911: PPUSH
26912: LD_VAR 0 2
26916: PUSH
26917: LD_VAR 0 4
26921: ARRAY
26922: PUSH
26923: LD_INT 1
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 2
26931: PUSH
26932: LD_VAR 0 4
26936: ARRAY
26937: PUSH
26938: LD_INT 2
26940: ARRAY
26941: PPUSH
26942: CALL_OW 297
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: LD_VAR 0 5
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: PPUSH
26961: LD_VAR 0 5
26965: PUSH
26966: LD_INT 2
26968: ARRAY
26969: PPUSH
26970: CALL_OW 297
26974: LESS
26975: IFFALSE 27043
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 5
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: LD_VAR 0 2
26994: PUSH
26995: LD_VAR 0 4
26999: ARRAY
27000: PUSH
27001: LD_INT 1
27003: ARRAY
27004: PPUSH
27005: CALL_OW 1
27009: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_VAR 0 5
27019: PPUSH
27020: LD_INT 2
27022: PPUSH
27023: LD_VAR 0 2
27027: PUSH
27028: LD_VAR 0 4
27032: ARRAY
27033: PUSH
27034: LD_INT 2
27036: ARRAY
27037: PPUSH
27038: CALL_OW 1
27042: ST_TO_ADDR
// end ; end ;
27043: GO 26904
27045: POP
27046: POP
// result = nearPosition ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 5
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 3
27061: RET
// function ForceResetTaskList ( unit ) ; begin
27062: LD_INT 0
27064: PPUSH
// if GetTaskList ( unit ) then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 437
27074: IFFALSE 27110
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 437
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PUSH
27090: LD_INT 1
27092: ARRAY
27093: PUSH
27094: LD_STRING e
27096: EQUAL
27097: IFFALSE 27110
// SetTaskList ( unit , [ ] ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: EMPTY
27105: PPUSH
27106: CALL_OW 446
// end ;
27110: LD_VAR 0 2
27114: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27115: LD_INT 0
27117: PPUSH
// if IsInUnit ( unit ) then
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 310
27127: IFFALSE 27138
// ComExitBuilding ( unit ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 122
// end ; end_of_file
27138: LD_VAR 0 2
27142: RET
// every 0 0$1 trigger enableCounter do
27143: LD_EXP 18
27147: IFFALSE 27184
27149: GO 27151
27151: DISABLE
// begin enable ;
27152: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27153: LD_ADDR_OWVAR 47
27157: PUSH
27158: LD_STRING #Am01-1
27160: PUSH
27161: LD_EXP 19
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27170: LD_ADDR_EXP 19
27174: PUSH
27175: LD_EXP 19
27179: PUSH
27180: LD_INT 35
27182: PLUS
27183: ST_TO_ADDR
// end ; end_of_file end_of_file
27184: END
// every 0 0$01 do var timer ;
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
// begin timer := 1 1$30 ;
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_INT 3150
27198: ST_TO_ADDR
// repeat wait ( timer ) ;
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27208: LD_EXP 20
27212: PUSH
27213: LD_INT 6
27215: GREATEREQUAL
27216: PUSH
27217: LD_EXP 20
27221: PUSH
27222: LD_INT 12
27224: LESS
27225: AND
27226: IFFALSE 27242
// timer := timer + 0 0$3 ;
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 105
27240: PLUS
27241: ST_TO_ADDR
// if cratesSpawned >= 12 then
27242: LD_EXP 20
27246: PUSH
27247: LD_INT 12
27249: GREATEREQUAL
27250: IFFALSE 27266
// timer := timer + 0 0$9 ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_VAR 0 1
27261: PUSH
27262: LD_INT 315
27264: PLUS
27265: ST_TO_ADDR
// if timer > 3 3$00 then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 6300
27273: GREATER
27274: IFFALSE 27284
// timer := 0 0$50 ;
27276: LD_ADDR_VAR 0 1
27280: PUSH
27281: LD_INT 1750
27283: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27284: LD_INT 3
27286: PPUSH
27287: LD_INT 5
27289: PPUSH
27290: CALL_OW 12
27294: PPUSH
27295: LD_INT 22
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27305: LD_ADDR_EXP 20
27309: PUSH
27310: LD_EXP 20
27314: PUSH
27315: LD_INT 1
27317: PLUS
27318: ST_TO_ADDR
// until false ;
27319: LD_INT 0
27321: IFFALSE 27199
// end ; end_of_file
27323: PPOPN 1
27325: END
// export function Nef_PrepareNature ; var i , un ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
27330: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_EXP 21
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: FOR_TO
27351: IFFALSE 27461
// begin uc_side = 0 ;
27353: LD_ADDR_OWVAR 20
27357: PUSH
27358: LD_INT 0
27360: ST_TO_ADDR
// uc_nation = nation_nature ;
27361: LD_ADDR_OWVAR 21
27365: PUSH
27366: LD_INT 0
27368: ST_TO_ADDR
// hc_class = class_apeman ;
27369: LD_ADDR_OWVAR 28
27373: PUSH
27374: LD_INT 12
27376: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27377: LD_ADDR_OWVAR 31
27381: PUSH
27382: LD_EXP 22
27386: PUSH
27387: LD_INT 1
27389: ARRAY
27390: PUSH
27391: LD_EXP 22
27395: PUSH
27396: LD_INT 2
27398: ARRAY
27399: PUSH
27400: LD_EXP 22
27404: PUSH
27405: LD_INT 3
27407: ARRAY
27408: PUSH
27409: LD_EXP 22
27413: PUSH
27414: LD_INT 4
27416: ARRAY
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27424: LD_ADDR_OWVAR 35
27428: PUSH
27429: LD_EXP 23
27433: ST_TO_ADDR
// un = CreateHuman ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: CALL_OW 44
27443: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27444: LD_VAR 0 3
27448: PPUSH
27449: LD_INT 23
27451: PPUSH
27452: LD_INT 0
27454: PPUSH
27455: CALL_OW 49
// end ;
27459: GO 27350
27461: POP
27462: POP
// for i := 1 to animalsAmount [ 2 ] do
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: DOUBLE
27469: LD_INT 1
27471: DEC
27472: ST_TO_ADDR
27473: LD_EXP 21
27477: PUSH
27478: LD_INT 2
27480: ARRAY
27481: PUSH
27482: FOR_TO
27483: IFFALSE 27593
// begin uc_side = 0 ;
27485: LD_ADDR_OWVAR 20
27489: PUSH
27490: LD_INT 0
27492: ST_TO_ADDR
// uc_nation = nation_nature ;
27493: LD_ADDR_OWVAR 21
27497: PUSH
27498: LD_INT 0
27500: ST_TO_ADDR
// hc_class = class_phororhacos ;
27501: LD_ADDR_OWVAR 28
27505: PUSH
27506: LD_INT 18
27508: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27509: LD_ADDR_OWVAR 31
27513: PUSH
27514: LD_EXP 22
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PUSH
27523: LD_EXP 22
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PUSH
27532: LD_EXP 22
27536: PUSH
27537: LD_INT 3
27539: ARRAY
27540: PUSH
27541: LD_EXP 22
27545: PUSH
27546: LD_INT 4
27548: ARRAY
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27556: LD_ADDR_OWVAR 35
27560: PUSH
27561: LD_EXP 23
27565: ST_TO_ADDR
// un = CreateHuman ;
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: CALL_OW 44
27575: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27576: LD_VAR 0 3
27580: PPUSH
27581: LD_INT 23
27583: PPUSH
27584: LD_INT 0
27586: PPUSH
27587: CALL_OW 49
// end ;
27591: GO 27482
27593: POP
27594: POP
// for i := 1 to animalsAmount [ 3 ] do
27595: LD_ADDR_VAR 0 2
27599: PUSH
27600: DOUBLE
27601: LD_INT 1
27603: DEC
27604: ST_TO_ADDR
27605: LD_EXP 21
27609: PUSH
27610: LD_INT 3
27612: ARRAY
27613: PUSH
27614: FOR_TO
27615: IFFALSE 27725
// begin uc_side = 0 ;
27617: LD_ADDR_OWVAR 20
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
// uc_nation = nation_nature ;
27625: LD_ADDR_OWVAR 21
27629: PUSH
27630: LD_INT 0
27632: ST_TO_ADDR
// hc_class = class_tiger ;
27633: LD_ADDR_OWVAR 28
27637: PUSH
27638: LD_INT 14
27640: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27641: LD_ADDR_OWVAR 31
27645: PUSH
27646: LD_EXP 22
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PUSH
27655: LD_EXP 22
27659: PUSH
27660: LD_INT 2
27662: ARRAY
27663: PUSH
27664: LD_EXP 22
27668: PUSH
27669: LD_INT 3
27671: ARRAY
27672: PUSH
27673: LD_EXP 22
27677: PUSH
27678: LD_INT 4
27680: ARRAY
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27688: LD_ADDR_OWVAR 35
27692: PUSH
27693: LD_EXP 23
27697: ST_TO_ADDR
// un = CreateHuman ;
27698: LD_ADDR_VAR 0 3
27702: PUSH
27703: CALL_OW 44
27707: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27708: LD_VAR 0 3
27712: PPUSH
27713: LD_INT 23
27715: PPUSH
27716: LD_INT 0
27718: PPUSH
27719: CALL_OW 49
// end ;
27723: GO 27614
27725: POP
27726: POP
// for i := 1 to animalsAmount [ 4 ] do
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: DOUBLE
27733: LD_INT 1
27735: DEC
27736: ST_TO_ADDR
27737: LD_EXP 21
27741: PUSH
27742: LD_INT 4
27744: ARRAY
27745: PUSH
27746: FOR_TO
27747: IFFALSE 27857
// begin uc_side = 0 ;
27749: LD_ADDR_OWVAR 20
27753: PUSH
27754: LD_INT 0
27756: ST_TO_ADDR
// uc_nation = nation_nature ;
27757: LD_ADDR_OWVAR 21
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// hc_class = 21 ;
27765: LD_ADDR_OWVAR 28
27769: PUSH
27770: LD_INT 21
27772: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27773: LD_ADDR_OWVAR 31
27777: PUSH
27778: LD_EXP 22
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PUSH
27787: LD_EXP 22
27791: PUSH
27792: LD_INT 2
27794: ARRAY
27795: PUSH
27796: LD_EXP 22
27800: PUSH
27801: LD_INT 3
27803: ARRAY
27804: PUSH
27805: LD_EXP 22
27809: PUSH
27810: LD_INT 4
27812: ARRAY
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27820: LD_ADDR_OWVAR 35
27824: PUSH
27825: LD_EXP 23
27829: ST_TO_ADDR
// un = CreateHuman ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: CALL_OW 44
27839: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 23
27847: PPUSH
27848: LD_INT 0
27850: PPUSH
27851: CALL_OW 49
// end ;
27855: GO 27746
27857: POP
27858: POP
// for i := 1 to animalsAmount [ 5 ] do
27859: LD_ADDR_VAR 0 2
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_EXP 21
27873: PUSH
27874: LD_INT 5
27876: ARRAY
27877: PUSH
27878: FOR_TO
27879: IFFALSE 27940
// begin uc_side = 0 ;
27881: LD_ADDR_OWVAR 20
27885: PUSH
27886: LD_INT 0
27888: ST_TO_ADDR
// uc_nation = nation_nature ;
27889: LD_ADDR_OWVAR 21
27893: PUSH
27894: LD_INT 0
27896: ST_TO_ADDR
// vc_chassis := 31 ;
27897: LD_ADDR_OWVAR 37
27901: PUSH
27902: LD_INT 31
27904: ST_TO_ADDR
// vc_control := control_rider ;
27905: LD_ADDR_OWVAR 38
27909: PUSH
27910: LD_INT 4
27912: ST_TO_ADDR
// un := CreateVehicle ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: CALL_OW 45
27922: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: LD_INT 23
27930: PPUSH
27931: LD_INT 0
27933: PPUSH
27934: CALL_OW 49
// end ;
27938: GO 27878
27940: POP
27941: POP
// end ; end_of_file
27942: LD_VAR 0 1
27946: RET
// every 0 0$1 do
27947: GO 27949
27949: DISABLE
// begin enable ;
27950: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27951: LD_STRING updateTimer(
27953: PUSH
27954: LD_OWVAR 1
27958: STR
27959: PUSH
27960: LD_STRING );
27962: STR
27963: PPUSH
27964: CALL_OW 559
// end ;
27968: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27969: LD_INT 0
27971: PPUSH
// if p2 = 100 then
27972: LD_VAR 0 2
27976: PUSH
27977: LD_INT 100
27979: EQUAL
27980: IFFALSE 28983
// begin if not StreamModeActive then
27982: LD_EXP 63
27986: NOT
27987: IFFALSE 27997
// StreamModeActive := true ;
27989: LD_ADDR_EXP 63
27993: PUSH
27994: LD_INT 1
27996: ST_TO_ADDR
// if p3 = 0 then
27997: LD_VAR 0 3
28001: PUSH
28002: LD_INT 0
28004: EQUAL
28005: IFFALSE 28011
// InitStreamMode ;
28007: CALL 29143 0 0
// if p3 = 1 then
28011: LD_VAR 0 3
28015: PUSH
28016: LD_INT 1
28018: EQUAL
28019: IFFALSE 28029
// sRocket := true ;
28021: LD_ADDR_EXP 68
28025: PUSH
28026: LD_INT 1
28028: ST_TO_ADDR
// if p3 = 2 then
28029: LD_VAR 0 3
28033: PUSH
28034: LD_INT 2
28036: EQUAL
28037: IFFALSE 28047
// sSpeed := true ;
28039: LD_ADDR_EXP 67
28043: PUSH
28044: LD_INT 1
28046: ST_TO_ADDR
// if p3 = 3 then
28047: LD_VAR 0 3
28051: PUSH
28052: LD_INT 3
28054: EQUAL
28055: IFFALSE 28065
// sEngine := true ;
28057: LD_ADDR_EXP 69
28061: PUSH
28062: LD_INT 1
28064: ST_TO_ADDR
// if p3 = 4 then
28065: LD_VAR 0 3
28069: PUSH
28070: LD_INT 4
28072: EQUAL
28073: IFFALSE 28083
// sSpec := true ;
28075: LD_ADDR_EXP 66
28079: PUSH
28080: LD_INT 1
28082: ST_TO_ADDR
// if p3 = 5 then
28083: LD_VAR 0 3
28087: PUSH
28088: LD_INT 5
28090: EQUAL
28091: IFFALSE 28101
// sLevel := true ;
28093: LD_ADDR_EXP 70
28097: PUSH
28098: LD_INT 1
28100: ST_TO_ADDR
// if p3 = 6 then
28101: LD_VAR 0 3
28105: PUSH
28106: LD_INT 6
28108: EQUAL
28109: IFFALSE 28119
// sArmoury := true ;
28111: LD_ADDR_EXP 71
28115: PUSH
28116: LD_INT 1
28118: ST_TO_ADDR
// if p3 = 7 then
28119: LD_VAR 0 3
28123: PUSH
28124: LD_INT 7
28126: EQUAL
28127: IFFALSE 28137
// sRadar := true ;
28129: LD_ADDR_EXP 72
28133: PUSH
28134: LD_INT 1
28136: ST_TO_ADDR
// if p3 = 8 then
28137: LD_VAR 0 3
28141: PUSH
28142: LD_INT 8
28144: EQUAL
28145: IFFALSE 28155
// sBunker := true ;
28147: LD_ADDR_EXP 73
28151: PUSH
28152: LD_INT 1
28154: ST_TO_ADDR
// if p3 = 9 then
28155: LD_VAR 0 3
28159: PUSH
28160: LD_INT 9
28162: EQUAL
28163: IFFALSE 28173
// sHack := true ;
28165: LD_ADDR_EXP 74
28169: PUSH
28170: LD_INT 1
28172: ST_TO_ADDR
// if p3 = 10 then
28173: LD_VAR 0 3
28177: PUSH
28178: LD_INT 10
28180: EQUAL
28181: IFFALSE 28191
// sFire := true ;
28183: LD_ADDR_EXP 75
28187: PUSH
28188: LD_INT 1
28190: ST_TO_ADDR
// if p3 = 11 then
28191: LD_VAR 0 3
28195: PUSH
28196: LD_INT 11
28198: EQUAL
28199: IFFALSE 28209
// sRefresh := true ;
28201: LD_ADDR_EXP 76
28205: PUSH
28206: LD_INT 1
28208: ST_TO_ADDR
// if p3 = 12 then
28209: LD_VAR 0 3
28213: PUSH
28214: LD_INT 12
28216: EQUAL
28217: IFFALSE 28227
// sExp := true ;
28219: LD_ADDR_EXP 77
28223: PUSH
28224: LD_INT 1
28226: ST_TO_ADDR
// if p3 = 13 then
28227: LD_VAR 0 3
28231: PUSH
28232: LD_INT 13
28234: EQUAL
28235: IFFALSE 28245
// sDepot := true ;
28237: LD_ADDR_EXP 78
28241: PUSH
28242: LD_INT 1
28244: ST_TO_ADDR
// if p3 = 14 then
28245: LD_VAR 0 3
28249: PUSH
28250: LD_INT 14
28252: EQUAL
28253: IFFALSE 28263
// sFlag := true ;
28255: LD_ADDR_EXP 79
28259: PUSH
28260: LD_INT 1
28262: ST_TO_ADDR
// if p3 = 15 then
28263: LD_VAR 0 3
28267: PUSH
28268: LD_INT 15
28270: EQUAL
28271: IFFALSE 28281
// sKamikadze := true ;
28273: LD_ADDR_EXP 87
28277: PUSH
28278: LD_INT 1
28280: ST_TO_ADDR
// if p3 = 16 then
28281: LD_VAR 0 3
28285: PUSH
28286: LD_INT 16
28288: EQUAL
28289: IFFALSE 28299
// sTroll := true ;
28291: LD_ADDR_EXP 88
28295: PUSH
28296: LD_INT 1
28298: ST_TO_ADDR
// if p3 = 17 then
28299: LD_VAR 0 3
28303: PUSH
28304: LD_INT 17
28306: EQUAL
28307: IFFALSE 28317
// sSlow := true ;
28309: LD_ADDR_EXP 89
28313: PUSH
28314: LD_INT 1
28316: ST_TO_ADDR
// if p3 = 18 then
28317: LD_VAR 0 3
28321: PUSH
28322: LD_INT 18
28324: EQUAL
28325: IFFALSE 28335
// sLack := true ;
28327: LD_ADDR_EXP 90
28331: PUSH
28332: LD_INT 1
28334: ST_TO_ADDR
// if p3 = 19 then
28335: LD_VAR 0 3
28339: PUSH
28340: LD_INT 19
28342: EQUAL
28343: IFFALSE 28353
// sTank := true ;
28345: LD_ADDR_EXP 92
28349: PUSH
28350: LD_INT 1
28352: ST_TO_ADDR
// if p3 = 20 then
28353: LD_VAR 0 3
28357: PUSH
28358: LD_INT 20
28360: EQUAL
28361: IFFALSE 28371
// sRemote := true ;
28363: LD_ADDR_EXP 93
28367: PUSH
28368: LD_INT 1
28370: ST_TO_ADDR
// if p3 = 21 then
28371: LD_VAR 0 3
28375: PUSH
28376: LD_INT 21
28378: EQUAL
28379: IFFALSE 28389
// sPowell := true ;
28381: LD_ADDR_EXP 94
28385: PUSH
28386: LD_INT 1
28388: ST_TO_ADDR
// if p3 = 22 then
28389: LD_VAR 0 3
28393: PUSH
28394: LD_INT 22
28396: EQUAL
28397: IFFALSE 28407
// sTeleport := true ;
28399: LD_ADDR_EXP 97
28403: PUSH
28404: LD_INT 1
28406: ST_TO_ADDR
// if p3 = 23 then
28407: LD_VAR 0 3
28411: PUSH
28412: LD_INT 23
28414: EQUAL
28415: IFFALSE 28425
// sOilTower := true ;
28417: LD_ADDR_EXP 99
28421: PUSH
28422: LD_INT 1
28424: ST_TO_ADDR
// if p3 = 24 then
28425: LD_VAR 0 3
28429: PUSH
28430: LD_INT 24
28432: EQUAL
28433: IFFALSE 28443
// sShovel := true ;
28435: LD_ADDR_EXP 100
28439: PUSH
28440: LD_INT 1
28442: ST_TO_ADDR
// if p3 = 25 then
28443: LD_VAR 0 3
28447: PUSH
28448: LD_INT 25
28450: EQUAL
28451: IFFALSE 28461
// sSheik := true ;
28453: LD_ADDR_EXP 101
28457: PUSH
28458: LD_INT 1
28460: ST_TO_ADDR
// if p3 = 26 then
28461: LD_VAR 0 3
28465: PUSH
28466: LD_INT 26
28468: EQUAL
28469: IFFALSE 28479
// sEarthquake := true ;
28471: LD_ADDR_EXP 103
28475: PUSH
28476: LD_INT 1
28478: ST_TO_ADDR
// if p3 = 27 then
28479: LD_VAR 0 3
28483: PUSH
28484: LD_INT 27
28486: EQUAL
28487: IFFALSE 28497
// sAI := true ;
28489: LD_ADDR_EXP 104
28493: PUSH
28494: LD_INT 1
28496: ST_TO_ADDR
// if p3 = 28 then
28497: LD_VAR 0 3
28501: PUSH
28502: LD_INT 28
28504: EQUAL
28505: IFFALSE 28515
// sCargo := true ;
28507: LD_ADDR_EXP 107
28511: PUSH
28512: LD_INT 1
28514: ST_TO_ADDR
// if p3 = 29 then
28515: LD_VAR 0 3
28519: PUSH
28520: LD_INT 29
28522: EQUAL
28523: IFFALSE 28533
// sDLaser := true ;
28525: LD_ADDR_EXP 108
28529: PUSH
28530: LD_INT 1
28532: ST_TO_ADDR
// if p3 = 30 then
28533: LD_VAR 0 3
28537: PUSH
28538: LD_INT 30
28540: EQUAL
28541: IFFALSE 28551
// sExchange := true ;
28543: LD_ADDR_EXP 109
28547: PUSH
28548: LD_INT 1
28550: ST_TO_ADDR
// if p3 = 31 then
28551: LD_VAR 0 3
28555: PUSH
28556: LD_INT 31
28558: EQUAL
28559: IFFALSE 28569
// sFac := true ;
28561: LD_ADDR_EXP 110
28565: PUSH
28566: LD_INT 1
28568: ST_TO_ADDR
// if p3 = 32 then
28569: LD_VAR 0 3
28573: PUSH
28574: LD_INT 32
28576: EQUAL
28577: IFFALSE 28587
// sPower := true ;
28579: LD_ADDR_EXP 111
28583: PUSH
28584: LD_INT 1
28586: ST_TO_ADDR
// if p3 = 33 then
28587: LD_VAR 0 3
28591: PUSH
28592: LD_INT 33
28594: EQUAL
28595: IFFALSE 28605
// sRandom := true ;
28597: LD_ADDR_EXP 112
28601: PUSH
28602: LD_INT 1
28604: ST_TO_ADDR
// if p3 = 34 then
28605: LD_VAR 0 3
28609: PUSH
28610: LD_INT 34
28612: EQUAL
28613: IFFALSE 28623
// sShield := true ;
28615: LD_ADDR_EXP 113
28619: PUSH
28620: LD_INT 1
28622: ST_TO_ADDR
// if p3 = 35 then
28623: LD_VAR 0 3
28627: PUSH
28628: LD_INT 35
28630: EQUAL
28631: IFFALSE 28641
// sTime := true ;
28633: LD_ADDR_EXP 114
28637: PUSH
28638: LD_INT 1
28640: ST_TO_ADDR
// if p3 = 36 then
28641: LD_VAR 0 3
28645: PUSH
28646: LD_INT 36
28648: EQUAL
28649: IFFALSE 28659
// sTools := true ;
28651: LD_ADDR_EXP 115
28655: PUSH
28656: LD_INT 1
28658: ST_TO_ADDR
// if p3 = 101 then
28659: LD_VAR 0 3
28663: PUSH
28664: LD_INT 101
28666: EQUAL
28667: IFFALSE 28677
// sSold := true ;
28669: LD_ADDR_EXP 80
28673: PUSH
28674: LD_INT 1
28676: ST_TO_ADDR
// if p3 = 102 then
28677: LD_VAR 0 3
28681: PUSH
28682: LD_INT 102
28684: EQUAL
28685: IFFALSE 28695
// sDiff := true ;
28687: LD_ADDR_EXP 81
28691: PUSH
28692: LD_INT 1
28694: ST_TO_ADDR
// if p3 = 103 then
28695: LD_VAR 0 3
28699: PUSH
28700: LD_INT 103
28702: EQUAL
28703: IFFALSE 28713
// sFog := true ;
28705: LD_ADDR_EXP 84
28709: PUSH
28710: LD_INT 1
28712: ST_TO_ADDR
// if p3 = 104 then
28713: LD_VAR 0 3
28717: PUSH
28718: LD_INT 104
28720: EQUAL
28721: IFFALSE 28731
// sReset := true ;
28723: LD_ADDR_EXP 85
28727: PUSH
28728: LD_INT 1
28730: ST_TO_ADDR
// if p3 = 105 then
28731: LD_VAR 0 3
28735: PUSH
28736: LD_INT 105
28738: EQUAL
28739: IFFALSE 28749
// sSun := true ;
28741: LD_ADDR_EXP 86
28745: PUSH
28746: LD_INT 1
28748: ST_TO_ADDR
// if p3 = 106 then
28749: LD_VAR 0 3
28753: PUSH
28754: LD_INT 106
28756: EQUAL
28757: IFFALSE 28767
// sTiger := true ;
28759: LD_ADDR_EXP 82
28763: PUSH
28764: LD_INT 1
28766: ST_TO_ADDR
// if p3 = 107 then
28767: LD_VAR 0 3
28771: PUSH
28772: LD_INT 107
28774: EQUAL
28775: IFFALSE 28785
// sBomb := true ;
28777: LD_ADDR_EXP 83
28781: PUSH
28782: LD_INT 1
28784: ST_TO_ADDR
// if p3 = 108 then
28785: LD_VAR 0 3
28789: PUSH
28790: LD_INT 108
28792: EQUAL
28793: IFFALSE 28803
// sWound := true ;
28795: LD_ADDR_EXP 91
28799: PUSH
28800: LD_INT 1
28802: ST_TO_ADDR
// if p3 = 109 then
28803: LD_VAR 0 3
28807: PUSH
28808: LD_INT 109
28810: EQUAL
28811: IFFALSE 28821
// sBetray := true ;
28813: LD_ADDR_EXP 95
28817: PUSH
28818: LD_INT 1
28820: ST_TO_ADDR
// if p3 = 110 then
28821: LD_VAR 0 3
28825: PUSH
28826: LD_INT 110
28828: EQUAL
28829: IFFALSE 28839
// sContamin := true ;
28831: LD_ADDR_EXP 96
28835: PUSH
28836: LD_INT 1
28838: ST_TO_ADDR
// if p3 = 111 then
28839: LD_VAR 0 3
28843: PUSH
28844: LD_INT 111
28846: EQUAL
28847: IFFALSE 28857
// sOil := true ;
28849: LD_ADDR_EXP 98
28853: PUSH
28854: LD_INT 1
28856: ST_TO_ADDR
// if p3 = 112 then
28857: LD_VAR 0 3
28861: PUSH
28862: LD_INT 112
28864: EQUAL
28865: IFFALSE 28875
// sStu := true ;
28867: LD_ADDR_EXP 102
28871: PUSH
28872: LD_INT 1
28874: ST_TO_ADDR
// if p3 = 113 then
28875: LD_VAR 0 3
28879: PUSH
28880: LD_INT 113
28882: EQUAL
28883: IFFALSE 28893
// sBazooka := true ;
28885: LD_ADDR_EXP 105
28889: PUSH
28890: LD_INT 1
28892: ST_TO_ADDR
// if p3 = 114 then
28893: LD_VAR 0 3
28897: PUSH
28898: LD_INT 114
28900: EQUAL
28901: IFFALSE 28911
// sMortar := true ;
28903: LD_ADDR_EXP 106
28907: PUSH
28908: LD_INT 1
28910: ST_TO_ADDR
// if p3 = 115 then
28911: LD_VAR 0 3
28915: PUSH
28916: LD_INT 115
28918: EQUAL
28919: IFFALSE 28929
// sRanger := true ;
28921: LD_ADDR_EXP 116
28925: PUSH
28926: LD_INT 1
28928: ST_TO_ADDR
// if p3 = 116 then
28929: LD_VAR 0 3
28933: PUSH
28934: LD_INT 116
28936: EQUAL
28937: IFFALSE 28947
// sComputer := true ;
28939: LD_ADDR_EXP 117
28943: PUSH
28944: LD_INT 1
28946: ST_TO_ADDR
// if p3 = 117 then
28947: LD_VAR 0 3
28951: PUSH
28952: LD_INT 117
28954: EQUAL
28955: IFFALSE 28965
// s30 := true ;
28957: LD_ADDR_EXP 118
28961: PUSH
28962: LD_INT 1
28964: ST_TO_ADDR
// if p3 = 118 then
28965: LD_VAR 0 3
28969: PUSH
28970: LD_INT 118
28972: EQUAL
28973: IFFALSE 28983
// s60 := true ;
28975: LD_ADDR_EXP 119
28979: PUSH
28980: LD_INT 1
28982: ST_TO_ADDR
// end ; if p2 = 101 then
28983: LD_VAR 0 2
28987: PUSH
28988: LD_INT 101
28990: EQUAL
28991: IFFALSE 29119
// begin case p3 of 1 :
28993: LD_VAR 0 3
28997: PUSH
28998: LD_INT 1
29000: DOUBLE
29001: EQUAL
29002: IFTRUE 29006
29004: GO 29013
29006: POP
// hHackUnlimitedResources ; 2 :
29007: CALL 40715 0 0
29011: GO 29119
29013: LD_INT 2
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29028
29021: POP
// hHackSetLevel10 ; 3 :
29022: CALL 40848 0 0
29026: GO 29119
29028: LD_INT 3
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29043
29036: POP
// hHackSetLevel10YourUnits ; 4 :
29037: CALL 40933 0 0
29041: GO 29119
29043: LD_INT 4
29045: DOUBLE
29046: EQUAL
29047: IFTRUE 29051
29049: GO 29058
29051: POP
// hHackInvincible ; 5 :
29052: CALL 41381 0 0
29056: GO 29119
29058: LD_INT 5
29060: DOUBLE
29061: EQUAL
29062: IFTRUE 29066
29064: GO 29073
29066: POP
// hHackInvisible ; 6 :
29067: CALL 41492 0 0
29071: GO 29119
29073: LD_INT 6
29075: DOUBLE
29076: EQUAL
29077: IFTRUE 29081
29079: GO 29088
29081: POP
// hHackChangeYourSide ; 7 :
29082: CALL 41549 0 0
29086: GO 29119
29088: LD_INT 7
29090: DOUBLE
29091: EQUAL
29092: IFTRUE 29096
29094: GO 29103
29096: POP
// hHackChangeUnitSide ; 8 :
29097: CALL 41591 0 0
29101: GO 29119
29103: LD_INT 8
29105: DOUBLE
29106: EQUAL
29107: IFTRUE 29111
29109: GO 29118
29111: POP
// hHackFog ; end ;
29112: CALL 41692 0 0
29116: GO 29119
29118: POP
// end ; end ;
29119: LD_VAR 0 7
29123: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
29124: GO 29126
29126: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29127: LD_STRING initStreamRollete();
29129: PPUSH
29130: CALL_OW 559
// InitStreamMode ;
29134: CALL 29143 0 0
// DefineStreamItems ( ) ;
29138: CALL 29607 0 0
// end ;
29142: END
// function InitStreamMode ; begin
29143: LD_INT 0
29145: PPUSH
// streamModeActive := false ;
29146: LD_ADDR_EXP 63
29150: PUSH
29151: LD_INT 0
29153: ST_TO_ADDR
// normalCounter := 36 ;
29154: LD_ADDR_EXP 64
29158: PUSH
29159: LD_INT 36
29161: ST_TO_ADDR
// hardcoreCounter := 16 ;
29162: LD_ADDR_EXP 65
29166: PUSH
29167: LD_INT 16
29169: ST_TO_ADDR
// sRocket := false ;
29170: LD_ADDR_EXP 68
29174: PUSH
29175: LD_INT 0
29177: ST_TO_ADDR
// sSpeed := false ;
29178: LD_ADDR_EXP 67
29182: PUSH
29183: LD_INT 0
29185: ST_TO_ADDR
// sEngine := false ;
29186: LD_ADDR_EXP 69
29190: PUSH
29191: LD_INT 0
29193: ST_TO_ADDR
// sSpec := false ;
29194: LD_ADDR_EXP 66
29198: PUSH
29199: LD_INT 0
29201: ST_TO_ADDR
// sLevel := false ;
29202: LD_ADDR_EXP 70
29206: PUSH
29207: LD_INT 0
29209: ST_TO_ADDR
// sArmoury := false ;
29210: LD_ADDR_EXP 71
29214: PUSH
29215: LD_INT 0
29217: ST_TO_ADDR
// sRadar := false ;
29218: LD_ADDR_EXP 72
29222: PUSH
29223: LD_INT 0
29225: ST_TO_ADDR
// sBunker := false ;
29226: LD_ADDR_EXP 73
29230: PUSH
29231: LD_INT 0
29233: ST_TO_ADDR
// sHack := false ;
29234: LD_ADDR_EXP 74
29238: PUSH
29239: LD_INT 0
29241: ST_TO_ADDR
// sFire := false ;
29242: LD_ADDR_EXP 75
29246: PUSH
29247: LD_INT 0
29249: ST_TO_ADDR
// sRefresh := false ;
29250: LD_ADDR_EXP 76
29254: PUSH
29255: LD_INT 0
29257: ST_TO_ADDR
// sExp := false ;
29258: LD_ADDR_EXP 77
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// sDepot := false ;
29266: LD_ADDR_EXP 78
29270: PUSH
29271: LD_INT 0
29273: ST_TO_ADDR
// sFlag := false ;
29274: LD_ADDR_EXP 79
29278: PUSH
29279: LD_INT 0
29281: ST_TO_ADDR
// sKamikadze := false ;
29282: LD_ADDR_EXP 87
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// sTroll := false ;
29290: LD_ADDR_EXP 88
29294: PUSH
29295: LD_INT 0
29297: ST_TO_ADDR
// sSlow := false ;
29298: LD_ADDR_EXP 89
29302: PUSH
29303: LD_INT 0
29305: ST_TO_ADDR
// sLack := false ;
29306: LD_ADDR_EXP 90
29310: PUSH
29311: LD_INT 0
29313: ST_TO_ADDR
// sTank := false ;
29314: LD_ADDR_EXP 92
29318: PUSH
29319: LD_INT 0
29321: ST_TO_ADDR
// sRemote := false ;
29322: LD_ADDR_EXP 93
29326: PUSH
29327: LD_INT 0
29329: ST_TO_ADDR
// sPowell := false ;
29330: LD_ADDR_EXP 94
29334: PUSH
29335: LD_INT 0
29337: ST_TO_ADDR
// sTeleport := false ;
29338: LD_ADDR_EXP 97
29342: PUSH
29343: LD_INT 0
29345: ST_TO_ADDR
// sOilTower := false ;
29346: LD_ADDR_EXP 99
29350: PUSH
29351: LD_INT 0
29353: ST_TO_ADDR
// sShovel := false ;
29354: LD_ADDR_EXP 100
29358: PUSH
29359: LD_INT 0
29361: ST_TO_ADDR
// sSheik := false ;
29362: LD_ADDR_EXP 101
29366: PUSH
29367: LD_INT 0
29369: ST_TO_ADDR
// sEarthquake := false ;
29370: LD_ADDR_EXP 103
29374: PUSH
29375: LD_INT 0
29377: ST_TO_ADDR
// sAI := false ;
29378: LD_ADDR_EXP 104
29382: PUSH
29383: LD_INT 0
29385: ST_TO_ADDR
// sCargo := false ;
29386: LD_ADDR_EXP 107
29390: PUSH
29391: LD_INT 0
29393: ST_TO_ADDR
// sDLaser := false ;
29394: LD_ADDR_EXP 108
29398: PUSH
29399: LD_INT 0
29401: ST_TO_ADDR
// sExchange := false ;
29402: LD_ADDR_EXP 109
29406: PUSH
29407: LD_INT 0
29409: ST_TO_ADDR
// sFac := false ;
29410: LD_ADDR_EXP 110
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
// sPower := false ;
29418: LD_ADDR_EXP 111
29422: PUSH
29423: LD_INT 0
29425: ST_TO_ADDR
// sRandom := false ;
29426: LD_ADDR_EXP 112
29430: PUSH
29431: LD_INT 0
29433: ST_TO_ADDR
// sShield := false ;
29434: LD_ADDR_EXP 113
29438: PUSH
29439: LD_INT 0
29441: ST_TO_ADDR
// sTime := false ;
29442: LD_ADDR_EXP 114
29446: PUSH
29447: LD_INT 0
29449: ST_TO_ADDR
// sTools := false ;
29450: LD_ADDR_EXP 115
29454: PUSH
29455: LD_INT 0
29457: ST_TO_ADDR
// sSold := false ;
29458: LD_ADDR_EXP 80
29462: PUSH
29463: LD_INT 0
29465: ST_TO_ADDR
// sDiff := false ;
29466: LD_ADDR_EXP 81
29470: PUSH
29471: LD_INT 0
29473: ST_TO_ADDR
// sFog := false ;
29474: LD_ADDR_EXP 84
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
// sReset := false ;
29482: LD_ADDR_EXP 85
29486: PUSH
29487: LD_INT 0
29489: ST_TO_ADDR
// sSun := false ;
29490: LD_ADDR_EXP 86
29494: PUSH
29495: LD_INT 0
29497: ST_TO_ADDR
// sTiger := false ;
29498: LD_ADDR_EXP 82
29502: PUSH
29503: LD_INT 0
29505: ST_TO_ADDR
// sBomb := false ;
29506: LD_ADDR_EXP 83
29510: PUSH
29511: LD_INT 0
29513: ST_TO_ADDR
// sWound := false ;
29514: LD_ADDR_EXP 91
29518: PUSH
29519: LD_INT 0
29521: ST_TO_ADDR
// sBetray := false ;
29522: LD_ADDR_EXP 95
29526: PUSH
29527: LD_INT 0
29529: ST_TO_ADDR
// sContamin := false ;
29530: LD_ADDR_EXP 96
29534: PUSH
29535: LD_INT 0
29537: ST_TO_ADDR
// sOil := false ;
29538: LD_ADDR_EXP 98
29542: PUSH
29543: LD_INT 0
29545: ST_TO_ADDR
// sStu := false ;
29546: LD_ADDR_EXP 102
29550: PUSH
29551: LD_INT 0
29553: ST_TO_ADDR
// sBazooka := false ;
29554: LD_ADDR_EXP 105
29558: PUSH
29559: LD_INT 0
29561: ST_TO_ADDR
// sMortar := false ;
29562: LD_ADDR_EXP 106
29566: PUSH
29567: LD_INT 0
29569: ST_TO_ADDR
// sRanger := false ;
29570: LD_ADDR_EXP 116
29574: PUSH
29575: LD_INT 0
29577: ST_TO_ADDR
// sComputer := false ;
29578: LD_ADDR_EXP 117
29582: PUSH
29583: LD_INT 0
29585: ST_TO_ADDR
// s30 := false ;
29586: LD_ADDR_EXP 118
29590: PUSH
29591: LD_INT 0
29593: ST_TO_ADDR
// s60 := false ;
29594: LD_ADDR_EXP 119
29598: PUSH
29599: LD_INT 0
29601: ST_TO_ADDR
// end ;
29602: LD_VAR 0 1
29606: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
29607: LD_INT 0
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
// result := [ ] ;
29614: LD_ADDR_VAR 0 1
29618: PUSH
29619: EMPTY
29620: ST_TO_ADDR
// if campaign_id = 1 then
29621: LD_OWVAR 69
29625: PUSH
29626: LD_INT 1
29628: EQUAL
29629: IFFALSE 32795
// begin case mission_number of 1 :
29631: LD_OWVAR 70
29635: PUSH
29636: LD_INT 1
29638: DOUBLE
29639: EQUAL
29640: IFTRUE 29644
29642: GO 29720
29644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 4
29655: PUSH
29656: LD_INT 11
29658: PUSH
29659: LD_INT 12
29661: PUSH
29662: LD_INT 15
29664: PUSH
29665: LD_INT 16
29667: PUSH
29668: LD_INT 22
29670: PUSH
29671: LD_INT 23
29673: PUSH
29674: LD_INT 26
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 101
29690: PUSH
29691: LD_INT 102
29693: PUSH
29694: LD_INT 106
29696: PUSH
29697: LD_INT 116
29699: PUSH
29700: LD_INT 117
29702: PUSH
29703: LD_INT 118
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: ST_TO_ADDR
29718: GO 32793
29720: LD_INT 2
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29812
29728: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29729: LD_ADDR_VAR 0 1
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: LD_INT 4
29739: PUSH
29740: LD_INT 11
29742: PUSH
29743: LD_INT 12
29745: PUSH
29746: LD_INT 15
29748: PUSH
29749: LD_INT 16
29751: PUSH
29752: LD_INT 22
29754: PUSH
29755: LD_INT 23
29757: PUSH
29758: LD_INT 26
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 101
29774: PUSH
29775: LD_INT 102
29777: PUSH
29778: LD_INT 105
29780: PUSH
29781: LD_INT 106
29783: PUSH
29784: LD_INT 108
29786: PUSH
29787: LD_INT 116
29789: PUSH
29790: LD_INT 117
29792: PUSH
29793: LD_INT 118
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: ST_TO_ADDR
29810: GO 32793
29812: LD_INT 3
29814: DOUBLE
29815: EQUAL
29816: IFTRUE 29820
29818: GO 29908
29820: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29821: LD_ADDR_VAR 0 1
29825: PUSH
29826: LD_INT 2
29828: PUSH
29829: LD_INT 4
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: LD_INT 11
29837: PUSH
29838: LD_INT 12
29840: PUSH
29841: LD_INT 15
29843: PUSH
29844: LD_INT 16
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_INT 26
29852: PUSH
29853: LD_INT 36
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 101
29870: PUSH
29871: LD_INT 102
29873: PUSH
29874: LD_INT 105
29876: PUSH
29877: LD_INT 106
29879: PUSH
29880: LD_INT 108
29882: PUSH
29883: LD_INT 116
29885: PUSH
29886: LD_INT 117
29888: PUSH
29889: LD_INT 118
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: ST_TO_ADDR
29906: GO 32793
29908: LD_INT 4
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 30012
29916: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29917: LD_ADDR_VAR 0 1
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 4
29927: PUSH
29928: LD_INT 5
29930: PUSH
29931: LD_INT 8
29933: PUSH
29934: LD_INT 11
29936: PUSH
29937: LD_INT 12
29939: PUSH
29940: LD_INT 15
29942: PUSH
29943: LD_INT 16
29945: PUSH
29946: LD_INT 22
29948: PUSH
29949: LD_INT 23
29951: PUSH
29952: LD_INT 26
29954: PUSH
29955: LD_INT 36
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 101
29974: PUSH
29975: LD_INT 102
29977: PUSH
29978: LD_INT 105
29980: PUSH
29981: LD_INT 106
29983: PUSH
29984: LD_INT 108
29986: PUSH
29987: LD_INT 116
29989: PUSH
29990: LD_INT 117
29992: PUSH
29993: LD_INT 118
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: ST_TO_ADDR
30010: GO 32793
30012: LD_INT 5
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30132
30020: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
30021: LD_ADDR_VAR 0 1
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: LD_INT 6
30037: PUSH
30038: LD_INT 8
30040: PUSH
30041: LD_INT 11
30043: PUSH
30044: LD_INT 12
30046: PUSH
30047: LD_INT 15
30049: PUSH
30050: LD_INT 16
30052: PUSH
30053: LD_INT 22
30055: PUSH
30056: LD_INT 23
30058: PUSH
30059: LD_INT 25
30061: PUSH
30062: LD_INT 26
30064: PUSH
30065: LD_INT 36
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 101
30086: PUSH
30087: LD_INT 102
30089: PUSH
30090: LD_INT 105
30092: PUSH
30093: LD_INT 106
30095: PUSH
30096: LD_INT 108
30098: PUSH
30099: LD_INT 109
30101: PUSH
30102: LD_INT 112
30104: PUSH
30105: LD_INT 116
30107: PUSH
30108: LD_INT 117
30110: PUSH
30111: LD_INT 118
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: ST_TO_ADDR
30130: GO 32793
30132: LD_INT 6
30134: DOUBLE
30135: EQUAL
30136: IFTRUE 30140
30138: GO 30272
30140: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
30141: LD_ADDR_VAR 0 1
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: LD_INT 5
30154: PUSH
30155: LD_INT 6
30157: PUSH
30158: LD_INT 8
30160: PUSH
30161: LD_INT 11
30163: PUSH
30164: LD_INT 12
30166: PUSH
30167: LD_INT 15
30169: PUSH
30170: LD_INT 16
30172: PUSH
30173: LD_INT 20
30175: PUSH
30176: LD_INT 21
30178: PUSH
30179: LD_INT 22
30181: PUSH
30182: LD_INT 23
30184: PUSH
30185: LD_INT 25
30187: PUSH
30188: LD_INT 26
30190: PUSH
30191: LD_INT 30
30193: PUSH
30194: LD_INT 31
30196: PUSH
30197: LD_INT 32
30199: PUSH
30200: LD_INT 36
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 101
30226: PUSH
30227: LD_INT 102
30229: PUSH
30230: LD_INT 105
30232: PUSH
30233: LD_INT 106
30235: PUSH
30236: LD_INT 108
30238: PUSH
30239: LD_INT 109
30241: PUSH
30242: LD_INT 112
30244: PUSH
30245: LD_INT 116
30247: PUSH
30248: LD_INT 117
30250: PUSH
30251: LD_INT 118
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: ST_TO_ADDR
30270: GO 32793
30272: LD_INT 7
30274: DOUBLE
30275: EQUAL
30276: IFTRUE 30280
30278: GO 30392
30280: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
30281: LD_ADDR_VAR 0 1
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 4
30291: PUSH
30292: LD_INT 5
30294: PUSH
30295: LD_INT 7
30297: PUSH
30298: LD_INT 11
30300: PUSH
30301: LD_INT 12
30303: PUSH
30304: LD_INT 15
30306: PUSH
30307: LD_INT 16
30309: PUSH
30310: LD_INT 20
30312: PUSH
30313: LD_INT 21
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 23
30321: PUSH
30322: LD_INT 25
30324: PUSH
30325: LD_INT 26
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 101
30346: PUSH
30347: LD_INT 102
30349: PUSH
30350: LD_INT 103
30352: PUSH
30353: LD_INT 105
30355: PUSH
30356: LD_INT 106
30358: PUSH
30359: LD_INT 108
30361: PUSH
30362: LD_INT 112
30364: PUSH
30365: LD_INT 116
30367: PUSH
30368: LD_INT 117
30370: PUSH
30371: LD_INT 118
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: ST_TO_ADDR
30390: GO 32793
30392: LD_INT 8
30394: DOUBLE
30395: EQUAL
30396: IFTRUE 30400
30398: GO 30540
30400: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
30401: LD_ADDR_VAR 0 1
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 4
30411: PUSH
30412: LD_INT 5
30414: PUSH
30415: LD_INT 6
30417: PUSH
30418: LD_INT 7
30420: PUSH
30421: LD_INT 8
30423: PUSH
30424: LD_INT 11
30426: PUSH
30427: LD_INT 12
30429: PUSH
30430: LD_INT 15
30432: PUSH
30433: LD_INT 16
30435: PUSH
30436: LD_INT 20
30438: PUSH
30439: LD_INT 21
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_INT 23
30447: PUSH
30448: LD_INT 25
30450: PUSH
30451: LD_INT 26
30453: PUSH
30454: LD_INT 30
30456: PUSH
30457: LD_INT 31
30459: PUSH
30460: LD_INT 32
30462: PUSH
30463: LD_INT 36
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 101
30490: PUSH
30491: LD_INT 102
30493: PUSH
30494: LD_INT 103
30496: PUSH
30497: LD_INT 105
30499: PUSH
30500: LD_INT 106
30502: PUSH
30503: LD_INT 108
30505: PUSH
30506: LD_INT 109
30508: PUSH
30509: LD_INT 112
30511: PUSH
30512: LD_INT 116
30514: PUSH
30515: LD_INT 117
30517: PUSH
30518: LD_INT 118
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: ST_TO_ADDR
30538: GO 32793
30540: LD_INT 9
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30696
30548: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
30549: LD_ADDR_VAR 0 1
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 4
30559: PUSH
30560: LD_INT 5
30562: PUSH
30563: LD_INT 6
30565: PUSH
30566: LD_INT 7
30568: PUSH
30569: LD_INT 8
30571: PUSH
30572: LD_INT 11
30574: PUSH
30575: LD_INT 12
30577: PUSH
30578: LD_INT 15
30580: PUSH
30581: LD_INT 16
30583: PUSH
30584: LD_INT 20
30586: PUSH
30587: LD_INT 21
30589: PUSH
30590: LD_INT 22
30592: PUSH
30593: LD_INT 23
30595: PUSH
30596: LD_INT 25
30598: PUSH
30599: LD_INT 26
30601: PUSH
30602: LD_INT 28
30604: PUSH
30605: LD_INT 30
30607: PUSH
30608: LD_INT 31
30610: PUSH
30611: LD_INT 32
30613: PUSH
30614: LD_INT 36
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 101
30642: PUSH
30643: LD_INT 102
30645: PUSH
30646: LD_INT 103
30648: PUSH
30649: LD_INT 105
30651: PUSH
30652: LD_INT 106
30654: PUSH
30655: LD_INT 108
30657: PUSH
30658: LD_INT 109
30660: PUSH
30661: LD_INT 112
30663: PUSH
30664: LD_INT 114
30666: PUSH
30667: LD_INT 116
30669: PUSH
30670: LD_INT 117
30672: PUSH
30673: LD_INT 118
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: ST_TO_ADDR
30694: GO 32793
30696: LD_INT 10
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30900
30704: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30705: LD_ADDR_VAR 0 1
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: LD_INT 4
30715: PUSH
30716: LD_INT 5
30718: PUSH
30719: LD_INT 6
30721: PUSH
30722: LD_INT 7
30724: PUSH
30725: LD_INT 8
30727: PUSH
30728: LD_INT 9
30730: PUSH
30731: LD_INT 10
30733: PUSH
30734: LD_INT 11
30736: PUSH
30737: LD_INT 12
30739: PUSH
30740: LD_INT 13
30742: PUSH
30743: LD_INT 14
30745: PUSH
30746: LD_INT 15
30748: PUSH
30749: LD_INT 16
30751: PUSH
30752: LD_INT 17
30754: PUSH
30755: LD_INT 18
30757: PUSH
30758: LD_INT 19
30760: PUSH
30761: LD_INT 20
30763: PUSH
30764: LD_INT 21
30766: PUSH
30767: LD_INT 22
30769: PUSH
30770: LD_INT 23
30772: PUSH
30773: LD_INT 24
30775: PUSH
30776: LD_INT 25
30778: PUSH
30779: LD_INT 26
30781: PUSH
30782: LD_INT 28
30784: PUSH
30785: LD_INT 30
30787: PUSH
30788: LD_INT 31
30790: PUSH
30791: LD_INT 32
30793: PUSH
30794: LD_INT 36
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 101
30830: PUSH
30831: LD_INT 102
30833: PUSH
30834: LD_INT 103
30836: PUSH
30837: LD_INT 104
30839: PUSH
30840: LD_INT 105
30842: PUSH
30843: LD_INT 106
30845: PUSH
30846: LD_INT 107
30848: PUSH
30849: LD_INT 108
30851: PUSH
30852: LD_INT 109
30854: PUSH
30855: LD_INT 110
30857: PUSH
30858: LD_INT 111
30860: PUSH
30861: LD_INT 112
30863: PUSH
30864: LD_INT 114
30866: PUSH
30867: LD_INT 116
30869: PUSH
30870: LD_INT 117
30872: PUSH
30873: LD_INT 118
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: ST_TO_ADDR
30898: GO 32793
30900: LD_INT 11
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 31112
30908: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30909: LD_ADDR_VAR 0 1
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 4
30922: PUSH
30923: LD_INT 5
30925: PUSH
30926: LD_INT 6
30928: PUSH
30929: LD_INT 7
30931: PUSH
30932: LD_INT 8
30934: PUSH
30935: LD_INT 9
30937: PUSH
30938: LD_INT 10
30940: PUSH
30941: LD_INT 11
30943: PUSH
30944: LD_INT 12
30946: PUSH
30947: LD_INT 13
30949: PUSH
30950: LD_INT 14
30952: PUSH
30953: LD_INT 15
30955: PUSH
30956: LD_INT 16
30958: PUSH
30959: LD_INT 17
30961: PUSH
30962: LD_INT 18
30964: PUSH
30965: LD_INT 19
30967: PUSH
30968: LD_INT 20
30970: PUSH
30971: LD_INT 21
30973: PUSH
30974: LD_INT 22
30976: PUSH
30977: LD_INT 23
30979: PUSH
30980: LD_INT 24
30982: PUSH
30983: LD_INT 25
30985: PUSH
30986: LD_INT 26
30988: PUSH
30989: LD_INT 28
30991: PUSH
30992: LD_INT 30
30994: PUSH
30995: LD_INT 31
30997: PUSH
30998: LD_INT 32
31000: PUSH
31001: LD_INT 34
31003: PUSH
31004: LD_INT 36
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 101
31042: PUSH
31043: LD_INT 102
31045: PUSH
31046: LD_INT 103
31048: PUSH
31049: LD_INT 104
31051: PUSH
31052: LD_INT 105
31054: PUSH
31055: LD_INT 106
31057: PUSH
31058: LD_INT 107
31060: PUSH
31061: LD_INT 108
31063: PUSH
31064: LD_INT 109
31066: PUSH
31067: LD_INT 110
31069: PUSH
31070: LD_INT 111
31072: PUSH
31073: LD_INT 112
31075: PUSH
31076: LD_INT 114
31078: PUSH
31079: LD_INT 116
31081: PUSH
31082: LD_INT 117
31084: PUSH
31085: LD_INT 118
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: ST_TO_ADDR
31110: GO 32793
31112: LD_INT 12
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31120
31118: GO 31340
31120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
31121: LD_ADDR_VAR 0 1
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: LD_INT 3
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: LD_INT 5
31140: PUSH
31141: LD_INT 6
31143: PUSH
31144: LD_INT 7
31146: PUSH
31147: LD_INT 8
31149: PUSH
31150: LD_INT 9
31152: PUSH
31153: LD_INT 10
31155: PUSH
31156: LD_INT 11
31158: PUSH
31159: LD_INT 12
31161: PUSH
31162: LD_INT 13
31164: PUSH
31165: LD_INT 14
31167: PUSH
31168: LD_INT 15
31170: PUSH
31171: LD_INT 16
31173: PUSH
31174: LD_INT 17
31176: PUSH
31177: LD_INT 18
31179: PUSH
31180: LD_INT 19
31182: PUSH
31183: LD_INT 20
31185: PUSH
31186: LD_INT 21
31188: PUSH
31189: LD_INT 22
31191: PUSH
31192: LD_INT 23
31194: PUSH
31195: LD_INT 24
31197: PUSH
31198: LD_INT 25
31200: PUSH
31201: LD_INT 26
31203: PUSH
31204: LD_INT 27
31206: PUSH
31207: LD_INT 28
31209: PUSH
31210: LD_INT 30
31212: PUSH
31213: LD_INT 31
31215: PUSH
31216: LD_INT 32
31218: PUSH
31219: LD_INT 33
31221: PUSH
31222: LD_INT 34
31224: PUSH
31225: LD_INT 36
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 101
31266: PUSH
31267: LD_INT 102
31269: PUSH
31270: LD_INT 103
31272: PUSH
31273: LD_INT 104
31275: PUSH
31276: LD_INT 105
31278: PUSH
31279: LD_INT 106
31281: PUSH
31282: LD_INT 107
31284: PUSH
31285: LD_INT 108
31287: PUSH
31288: LD_INT 109
31290: PUSH
31291: LD_INT 110
31293: PUSH
31294: LD_INT 111
31296: PUSH
31297: LD_INT 112
31299: PUSH
31300: LD_INT 113
31302: PUSH
31303: LD_INT 114
31305: PUSH
31306: LD_INT 116
31308: PUSH
31309: LD_INT 117
31311: PUSH
31312: LD_INT 118
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: ST_TO_ADDR
31338: GO 32793
31340: LD_INT 13
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31556
31348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
31349: LD_ADDR_VAR 0 1
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: LD_INT 3
31362: PUSH
31363: LD_INT 4
31365: PUSH
31366: LD_INT 5
31368: PUSH
31369: LD_INT 8
31371: PUSH
31372: LD_INT 9
31374: PUSH
31375: LD_INT 10
31377: PUSH
31378: LD_INT 11
31380: PUSH
31381: LD_INT 12
31383: PUSH
31384: LD_INT 14
31386: PUSH
31387: LD_INT 15
31389: PUSH
31390: LD_INT 16
31392: PUSH
31393: LD_INT 17
31395: PUSH
31396: LD_INT 18
31398: PUSH
31399: LD_INT 19
31401: PUSH
31402: LD_INT 20
31404: PUSH
31405: LD_INT 21
31407: PUSH
31408: LD_INT 22
31410: PUSH
31411: LD_INT 23
31413: PUSH
31414: LD_INT 24
31416: PUSH
31417: LD_INT 25
31419: PUSH
31420: LD_INT 26
31422: PUSH
31423: LD_INT 27
31425: PUSH
31426: LD_INT 28
31428: PUSH
31429: LD_INT 30
31431: PUSH
31432: LD_INT 31
31434: PUSH
31435: LD_INT 32
31437: PUSH
31438: LD_INT 33
31440: PUSH
31441: LD_INT 34
31443: PUSH
31444: LD_INT 36
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 101
31482: PUSH
31483: LD_INT 102
31485: PUSH
31486: LD_INT 103
31488: PUSH
31489: LD_INT 104
31491: PUSH
31492: LD_INT 105
31494: PUSH
31495: LD_INT 106
31497: PUSH
31498: LD_INT 107
31500: PUSH
31501: LD_INT 108
31503: PUSH
31504: LD_INT 109
31506: PUSH
31507: LD_INT 110
31509: PUSH
31510: LD_INT 111
31512: PUSH
31513: LD_INT 112
31515: PUSH
31516: LD_INT 113
31518: PUSH
31519: LD_INT 114
31521: PUSH
31522: LD_INT 116
31524: PUSH
31525: LD_INT 117
31527: PUSH
31528: LD_INT 118
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: ST_TO_ADDR
31554: GO 32793
31556: LD_INT 14
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31788
31564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
31565: LD_ADDR_VAR 0 1
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: LD_INT 4
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: LD_INT 6
31587: PUSH
31588: LD_INT 7
31590: PUSH
31591: LD_INT 8
31593: PUSH
31594: LD_INT 9
31596: PUSH
31597: LD_INT 10
31599: PUSH
31600: LD_INT 11
31602: PUSH
31603: LD_INT 12
31605: PUSH
31606: LD_INT 13
31608: PUSH
31609: LD_INT 14
31611: PUSH
31612: LD_INT 15
31614: PUSH
31615: LD_INT 16
31617: PUSH
31618: LD_INT 17
31620: PUSH
31621: LD_INT 18
31623: PUSH
31624: LD_INT 19
31626: PUSH
31627: LD_INT 20
31629: PUSH
31630: LD_INT 21
31632: PUSH
31633: LD_INT 22
31635: PUSH
31636: LD_INT 23
31638: PUSH
31639: LD_INT 24
31641: PUSH
31642: LD_INT 25
31644: PUSH
31645: LD_INT 26
31647: PUSH
31648: LD_INT 27
31650: PUSH
31651: LD_INT 28
31653: PUSH
31654: LD_INT 29
31656: PUSH
31657: LD_INT 30
31659: PUSH
31660: LD_INT 31
31662: PUSH
31663: LD_INT 32
31665: PUSH
31666: LD_INT 33
31668: PUSH
31669: LD_INT 34
31671: PUSH
31672: LD_INT 36
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 101
31714: PUSH
31715: LD_INT 102
31717: PUSH
31718: LD_INT 103
31720: PUSH
31721: LD_INT 104
31723: PUSH
31724: LD_INT 105
31726: PUSH
31727: LD_INT 106
31729: PUSH
31730: LD_INT 107
31732: PUSH
31733: LD_INT 108
31735: PUSH
31736: LD_INT 109
31738: PUSH
31739: LD_INT 110
31741: PUSH
31742: LD_INT 111
31744: PUSH
31745: LD_INT 112
31747: PUSH
31748: LD_INT 113
31750: PUSH
31751: LD_INT 114
31753: PUSH
31754: LD_INT 116
31756: PUSH
31757: LD_INT 117
31759: PUSH
31760: LD_INT 118
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: ST_TO_ADDR
31786: GO 32793
31788: LD_INT 15
31790: DOUBLE
31791: EQUAL
31792: IFTRUE 31796
31794: GO 32020
31796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31797: LD_ADDR_VAR 0 1
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: LD_INT 5
31816: PUSH
31817: LD_INT 6
31819: PUSH
31820: LD_INT 7
31822: PUSH
31823: LD_INT 8
31825: PUSH
31826: LD_INT 9
31828: PUSH
31829: LD_INT 10
31831: PUSH
31832: LD_INT 11
31834: PUSH
31835: LD_INT 12
31837: PUSH
31838: LD_INT 13
31840: PUSH
31841: LD_INT 14
31843: PUSH
31844: LD_INT 15
31846: PUSH
31847: LD_INT 16
31849: PUSH
31850: LD_INT 17
31852: PUSH
31853: LD_INT 18
31855: PUSH
31856: LD_INT 19
31858: PUSH
31859: LD_INT 20
31861: PUSH
31862: LD_INT 21
31864: PUSH
31865: LD_INT 22
31867: PUSH
31868: LD_INT 23
31870: PUSH
31871: LD_INT 24
31873: PUSH
31874: LD_INT 25
31876: PUSH
31877: LD_INT 26
31879: PUSH
31880: LD_INT 27
31882: PUSH
31883: LD_INT 28
31885: PUSH
31886: LD_INT 29
31888: PUSH
31889: LD_INT 30
31891: PUSH
31892: LD_INT 31
31894: PUSH
31895: LD_INT 32
31897: PUSH
31898: LD_INT 33
31900: PUSH
31901: LD_INT 34
31903: PUSH
31904: LD_INT 36
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 101
31946: PUSH
31947: LD_INT 102
31949: PUSH
31950: LD_INT 103
31952: PUSH
31953: LD_INT 104
31955: PUSH
31956: LD_INT 105
31958: PUSH
31959: LD_INT 106
31961: PUSH
31962: LD_INT 107
31964: PUSH
31965: LD_INT 108
31967: PUSH
31968: LD_INT 109
31970: PUSH
31971: LD_INT 110
31973: PUSH
31974: LD_INT 111
31976: PUSH
31977: LD_INT 112
31979: PUSH
31980: LD_INT 113
31982: PUSH
31983: LD_INT 114
31985: PUSH
31986: LD_INT 116
31988: PUSH
31989: LD_INT 117
31991: PUSH
31992: LD_INT 118
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: ST_TO_ADDR
32018: GO 32793
32020: LD_INT 16
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32164
32028: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
32029: LD_ADDR_VAR 0 1
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 4
32039: PUSH
32040: LD_INT 5
32042: PUSH
32043: LD_INT 7
32045: PUSH
32046: LD_INT 11
32048: PUSH
32049: LD_INT 12
32051: PUSH
32052: LD_INT 15
32054: PUSH
32055: LD_INT 16
32057: PUSH
32058: LD_INT 20
32060: PUSH
32061: LD_INT 21
32063: PUSH
32064: LD_INT 22
32066: PUSH
32067: LD_INT 23
32069: PUSH
32070: LD_INT 25
32072: PUSH
32073: LD_INT 26
32075: PUSH
32076: LD_INT 30
32078: PUSH
32079: LD_INT 31
32081: PUSH
32082: LD_INT 32
32084: PUSH
32085: LD_INT 33
32087: PUSH
32088: LD_INT 34
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 101
32114: PUSH
32115: LD_INT 102
32117: PUSH
32118: LD_INT 103
32120: PUSH
32121: LD_INT 106
32123: PUSH
32124: LD_INT 108
32126: PUSH
32127: LD_INT 112
32129: PUSH
32130: LD_INT 113
32132: PUSH
32133: LD_INT 114
32135: PUSH
32136: LD_INT 116
32138: PUSH
32139: LD_INT 117
32141: PUSH
32142: LD_INT 118
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: ST_TO_ADDR
32162: GO 32793
32164: LD_INT 17
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32172
32170: GO 32396
32172: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
32173: LD_ADDR_VAR 0 1
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: LD_INT 4
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: LD_INT 6
32195: PUSH
32196: LD_INT 7
32198: PUSH
32199: LD_INT 8
32201: PUSH
32202: LD_INT 9
32204: PUSH
32205: LD_INT 10
32207: PUSH
32208: LD_INT 11
32210: PUSH
32211: LD_INT 12
32213: PUSH
32214: LD_INT 13
32216: PUSH
32217: LD_INT 14
32219: PUSH
32220: LD_INT 15
32222: PUSH
32223: LD_INT 16
32225: PUSH
32226: LD_INT 17
32228: PUSH
32229: LD_INT 18
32231: PUSH
32232: LD_INT 19
32234: PUSH
32235: LD_INT 20
32237: PUSH
32238: LD_INT 21
32240: PUSH
32241: LD_INT 22
32243: PUSH
32244: LD_INT 23
32246: PUSH
32247: LD_INT 24
32249: PUSH
32250: LD_INT 25
32252: PUSH
32253: LD_INT 26
32255: PUSH
32256: LD_INT 27
32258: PUSH
32259: LD_INT 28
32261: PUSH
32262: LD_INT 29
32264: PUSH
32265: LD_INT 30
32267: PUSH
32268: LD_INT 31
32270: PUSH
32271: LD_INT 32
32273: PUSH
32274: LD_INT 33
32276: PUSH
32277: LD_INT 34
32279: PUSH
32280: LD_INT 36
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 101
32322: PUSH
32323: LD_INT 102
32325: PUSH
32326: LD_INT 103
32328: PUSH
32329: LD_INT 104
32331: PUSH
32332: LD_INT 105
32334: PUSH
32335: LD_INT 106
32337: PUSH
32338: LD_INT 107
32340: PUSH
32341: LD_INT 108
32343: PUSH
32344: LD_INT 109
32346: PUSH
32347: LD_INT 110
32349: PUSH
32350: LD_INT 111
32352: PUSH
32353: LD_INT 112
32355: PUSH
32356: LD_INT 113
32358: PUSH
32359: LD_INT 114
32361: PUSH
32362: LD_INT 116
32364: PUSH
32365: LD_INT 117
32367: PUSH
32368: LD_INT 118
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: ST_TO_ADDR
32394: GO 32793
32396: LD_INT 18
32398: DOUBLE
32399: EQUAL
32400: IFTRUE 32404
32402: GO 32552
32404: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
32405: LD_ADDR_VAR 0 1
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 4
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: LD_INT 7
32421: PUSH
32422: LD_INT 11
32424: PUSH
32425: LD_INT 12
32427: PUSH
32428: LD_INT 15
32430: PUSH
32431: LD_INT 16
32433: PUSH
32434: LD_INT 20
32436: PUSH
32437: LD_INT 21
32439: PUSH
32440: LD_INT 22
32442: PUSH
32443: LD_INT 23
32445: PUSH
32446: LD_INT 25
32448: PUSH
32449: LD_INT 26
32451: PUSH
32452: LD_INT 30
32454: PUSH
32455: LD_INT 31
32457: PUSH
32458: LD_INT 32
32460: PUSH
32461: LD_INT 33
32463: PUSH
32464: LD_INT 34
32466: PUSH
32467: LD_INT 35
32469: PUSH
32470: LD_INT 36
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 101
32498: PUSH
32499: LD_INT 102
32501: PUSH
32502: LD_INT 103
32504: PUSH
32505: LD_INT 106
32507: PUSH
32508: LD_INT 108
32510: PUSH
32511: LD_INT 112
32513: PUSH
32514: LD_INT 113
32516: PUSH
32517: LD_INT 114
32519: PUSH
32520: LD_INT 115
32522: PUSH
32523: LD_INT 116
32525: PUSH
32526: LD_INT 117
32528: PUSH
32529: LD_INT 118
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: ST_TO_ADDR
32550: GO 32793
32552: LD_INT 19
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32792
32560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
32561: LD_ADDR_VAR 0 1
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 5
32580: PUSH
32581: LD_INT 6
32583: PUSH
32584: LD_INT 7
32586: PUSH
32587: LD_INT 8
32589: PUSH
32590: LD_INT 9
32592: PUSH
32593: LD_INT 10
32595: PUSH
32596: LD_INT 11
32598: PUSH
32599: LD_INT 12
32601: PUSH
32602: LD_INT 13
32604: PUSH
32605: LD_INT 14
32607: PUSH
32608: LD_INT 15
32610: PUSH
32611: LD_INT 16
32613: PUSH
32614: LD_INT 17
32616: PUSH
32617: LD_INT 18
32619: PUSH
32620: LD_INT 19
32622: PUSH
32623: LD_INT 20
32625: PUSH
32626: LD_INT 21
32628: PUSH
32629: LD_INT 22
32631: PUSH
32632: LD_INT 23
32634: PUSH
32635: LD_INT 24
32637: PUSH
32638: LD_INT 25
32640: PUSH
32641: LD_INT 26
32643: PUSH
32644: LD_INT 27
32646: PUSH
32647: LD_INT 28
32649: PUSH
32650: LD_INT 29
32652: PUSH
32653: LD_INT 30
32655: PUSH
32656: LD_INT 31
32658: PUSH
32659: LD_INT 32
32661: PUSH
32662: LD_INT 33
32664: PUSH
32665: LD_INT 34
32667: PUSH
32668: LD_INT 35
32670: PUSH
32671: LD_INT 36
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 101
32714: PUSH
32715: LD_INT 102
32717: PUSH
32718: LD_INT 103
32720: PUSH
32721: LD_INT 104
32723: PUSH
32724: LD_INT 105
32726: PUSH
32727: LD_INT 106
32729: PUSH
32730: LD_INT 107
32732: PUSH
32733: LD_INT 108
32735: PUSH
32736: LD_INT 109
32738: PUSH
32739: LD_INT 110
32741: PUSH
32742: LD_INT 111
32744: PUSH
32745: LD_INT 112
32747: PUSH
32748: LD_INT 113
32750: PUSH
32751: LD_INT 114
32753: PUSH
32754: LD_INT 115
32756: PUSH
32757: LD_INT 116
32759: PUSH
32760: LD_INT 117
32762: PUSH
32763: LD_INT 118
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: ST_TO_ADDR
32790: GO 32793
32792: POP
// end else
32793: GO 33024
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32795: LD_ADDR_VAR 0 1
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 4
32811: PUSH
32812: LD_INT 5
32814: PUSH
32815: LD_INT 6
32817: PUSH
32818: LD_INT 7
32820: PUSH
32821: LD_INT 8
32823: PUSH
32824: LD_INT 9
32826: PUSH
32827: LD_INT 10
32829: PUSH
32830: LD_INT 11
32832: PUSH
32833: LD_INT 12
32835: PUSH
32836: LD_INT 13
32838: PUSH
32839: LD_INT 14
32841: PUSH
32842: LD_INT 15
32844: PUSH
32845: LD_INT 16
32847: PUSH
32848: LD_INT 17
32850: PUSH
32851: LD_INT 18
32853: PUSH
32854: LD_INT 19
32856: PUSH
32857: LD_INT 20
32859: PUSH
32860: LD_INT 21
32862: PUSH
32863: LD_INT 22
32865: PUSH
32866: LD_INT 23
32868: PUSH
32869: LD_INT 24
32871: PUSH
32872: LD_INT 25
32874: PUSH
32875: LD_INT 26
32877: PUSH
32878: LD_INT 27
32880: PUSH
32881: LD_INT 28
32883: PUSH
32884: LD_INT 29
32886: PUSH
32887: LD_INT 30
32889: PUSH
32890: LD_INT 31
32892: PUSH
32893: LD_INT 32
32895: PUSH
32896: LD_INT 33
32898: PUSH
32899: LD_INT 34
32901: PUSH
32902: LD_INT 35
32904: PUSH
32905: LD_INT 36
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 101
32948: PUSH
32949: LD_INT 102
32951: PUSH
32952: LD_INT 103
32954: PUSH
32955: LD_INT 104
32957: PUSH
32958: LD_INT 105
32960: PUSH
32961: LD_INT 106
32963: PUSH
32964: LD_INT 107
32966: PUSH
32967: LD_INT 108
32969: PUSH
32970: LD_INT 109
32972: PUSH
32973: LD_INT 110
32975: PUSH
32976: LD_INT 111
32978: PUSH
32979: LD_INT 112
32981: PUSH
32982: LD_INT 113
32984: PUSH
32985: LD_INT 114
32987: PUSH
32988: LD_INT 115
32990: PUSH
32991: LD_INT 116
32993: PUSH
32994: LD_INT 117
32996: PUSH
32997: LD_INT 118
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// if result then
33024: LD_VAR 0 1
33028: IFFALSE 33317
// begin normal :=  ;
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: LD_STRING 
33037: ST_TO_ADDR
// hardcore :=  ;
33038: LD_ADDR_VAR 0 4
33042: PUSH
33043: LD_STRING 
33045: ST_TO_ADDR
// for i = 1 to normalCounter do
33046: LD_ADDR_VAR 0 5
33050: PUSH
33051: DOUBLE
33052: LD_INT 1
33054: DEC
33055: ST_TO_ADDR
33056: LD_EXP 64
33060: PUSH
33061: FOR_TO
33062: IFFALSE 33163
// begin tmp := 0 ;
33064: LD_ADDR_VAR 0 2
33068: PUSH
33069: LD_STRING 0
33071: ST_TO_ADDR
// if result [ 1 ] then
33072: LD_VAR 0 1
33076: PUSH
33077: LD_INT 1
33079: ARRAY
33080: IFFALSE 33145
// if result [ 1 ] [ 1 ] = i then
33082: LD_VAR 0 1
33086: PUSH
33087: LD_INT 1
33089: ARRAY
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: PUSH
33095: LD_VAR 0 5
33099: EQUAL
33100: IFFALSE 33145
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33102: LD_ADDR_VAR 0 1
33106: PUSH
33107: LD_VAR 0 1
33111: PPUSH
33112: LD_INT 1
33114: PPUSH
33115: LD_VAR 0 1
33119: PUSH
33120: LD_INT 1
33122: ARRAY
33123: PPUSH
33124: LD_INT 1
33126: PPUSH
33127: CALL_OW 3
33131: PPUSH
33132: CALL_OW 1
33136: ST_TO_ADDR
// tmp := 1 ;
33137: LD_ADDR_VAR 0 2
33141: PUSH
33142: LD_STRING 1
33144: ST_TO_ADDR
// end ; normal := normal & tmp ;
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_VAR 0 3
33154: PUSH
33155: LD_VAR 0 2
33159: STR
33160: ST_TO_ADDR
// end ;
33161: GO 33061
33163: POP
33164: POP
// for i = 1 to hardcoreCounter do
33165: LD_ADDR_VAR 0 5
33169: PUSH
33170: DOUBLE
33171: LD_INT 1
33173: DEC
33174: ST_TO_ADDR
33175: LD_EXP 65
33179: PUSH
33180: FOR_TO
33181: IFFALSE 33286
// begin tmp := 0 ;
33183: LD_ADDR_VAR 0 2
33187: PUSH
33188: LD_STRING 0
33190: ST_TO_ADDR
// if result [ 2 ] then
33191: LD_VAR 0 1
33195: PUSH
33196: LD_INT 2
33198: ARRAY
33199: IFFALSE 33268
// if result [ 2 ] [ 1 ] = 100 + i then
33201: LD_VAR 0 1
33205: PUSH
33206: LD_INT 2
33208: ARRAY
33209: PUSH
33210: LD_INT 1
33212: ARRAY
33213: PUSH
33214: LD_INT 100
33216: PUSH
33217: LD_VAR 0 5
33221: PLUS
33222: EQUAL
33223: IFFALSE 33268
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33225: LD_ADDR_VAR 0 1
33229: PUSH
33230: LD_VAR 0 1
33234: PPUSH
33235: LD_INT 2
33237: PPUSH
33238: LD_VAR 0 1
33242: PUSH
33243: LD_INT 2
33245: ARRAY
33246: PPUSH
33247: LD_INT 1
33249: PPUSH
33250: CALL_OW 3
33254: PPUSH
33255: CALL_OW 1
33259: ST_TO_ADDR
// tmp := 1 ;
33260: LD_ADDR_VAR 0 2
33264: PUSH
33265: LD_STRING 1
33267: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33268: LD_ADDR_VAR 0 4
33272: PUSH
33273: LD_VAR 0 4
33277: PUSH
33278: LD_VAR 0 2
33282: STR
33283: ST_TO_ADDR
// end ;
33284: GO 33180
33286: POP
33287: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
33288: LD_STRING getStreamItemsFromMission("
33290: PUSH
33291: LD_VAR 0 3
33295: STR
33296: PUSH
33297: LD_STRING ","
33299: STR
33300: PUSH
33301: LD_VAR 0 4
33305: STR
33306: PUSH
33307: LD_STRING ")
33309: STR
33310: PPUSH
33311: CALL_OW 559
// end else
33315: GO 33324
// ToLua ( getStreamItemsFromMission("","") ) ;
33317: LD_STRING getStreamItemsFromMission("","")
33319: PPUSH
33320: CALL_OW 559
// end ;
33324: LD_VAR 0 1
33328: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33329: LD_EXP 63
33333: PUSH
33334: LD_EXP 68
33338: AND
33339: IFFALSE 33463
33341: GO 33343
33343: DISABLE
33344: LD_INT 0
33346: PPUSH
33347: PPUSH
// begin enable ;
33348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33349: LD_ADDR_VAR 0 2
33353: PUSH
33354: LD_INT 22
33356: PUSH
33357: LD_OWVAR 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 34
33371: PUSH
33372: LD_INT 7
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 34
33381: PUSH
33382: LD_INT 45
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 34
33391: PUSH
33392: LD_INT 28
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 34
33401: PUSH
33402: LD_INT 47
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PPUSH
33420: CALL_OW 69
33424: ST_TO_ADDR
// if not tmp then
33425: LD_VAR 0 2
33429: NOT
33430: IFFALSE 33434
// exit ;
33432: GO 33463
// for i in tmp do
33434: LD_ADDR_VAR 0 1
33438: PUSH
33439: LD_VAR 0 2
33443: PUSH
33444: FOR_IN
33445: IFFALSE 33461
// begin SetLives ( i , 0 ) ;
33447: LD_VAR 0 1
33451: PPUSH
33452: LD_INT 0
33454: PPUSH
33455: CALL_OW 234
// end ;
33459: GO 33444
33461: POP
33462: POP
// end ;
33463: PPOPN 2
33465: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33466: LD_EXP 63
33470: PUSH
33471: LD_EXP 69
33475: AND
33476: IFFALSE 33560
33478: GO 33480
33480: DISABLE
33481: LD_INT 0
33483: PPUSH
33484: PPUSH
// begin enable ;
33485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33486: LD_ADDR_VAR 0 2
33490: PUSH
33491: LD_INT 22
33493: PUSH
33494: LD_OWVAR 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 32
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PPUSH
33517: CALL_OW 69
33521: ST_TO_ADDR
// if not tmp then
33522: LD_VAR 0 2
33526: NOT
33527: IFFALSE 33531
// exit ;
33529: GO 33560
// for i in tmp do
33531: LD_ADDR_VAR 0 1
33535: PUSH
33536: LD_VAR 0 2
33540: PUSH
33541: FOR_IN
33542: IFFALSE 33558
// begin SetLives ( i , 0 ) ;
33544: LD_VAR 0 1
33548: PPUSH
33549: LD_INT 0
33551: PPUSH
33552: CALL_OW 234
// end ;
33556: GO 33541
33558: POP
33559: POP
// end ;
33560: PPOPN 2
33562: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33563: LD_EXP 63
33567: PUSH
33568: LD_EXP 66
33572: AND
33573: IFFALSE 33666
33575: GO 33577
33577: DISABLE
33578: LD_INT 0
33580: PPUSH
// begin enable ;
33581: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33582: LD_ADDR_VAR 0 1
33586: PUSH
33587: LD_INT 22
33589: PUSH
33590: LD_OWVAR 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 25
33604: PUSH
33605: LD_INT 5
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 25
33614: PUSH
33615: LD_INT 9
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 25
33624: PUSH
33625: LD_INT 8
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PPUSH
33642: CALL_OW 69
33646: PUSH
33647: FOR_IN
33648: IFFALSE 33664
// begin SetClass ( i , 1 ) ;
33650: LD_VAR 0 1
33654: PPUSH
33655: LD_INT 1
33657: PPUSH
33658: CALL_OW 336
// end ;
33662: GO 33647
33664: POP
33665: POP
// end ;
33666: PPOPN 1
33668: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33669: LD_EXP 63
33673: PUSH
33674: LD_EXP 67
33678: AND
33679: PUSH
33680: LD_OWVAR 65
33684: PUSH
33685: LD_INT 7
33687: LESS
33688: AND
33689: IFFALSE 33703
33691: GO 33693
33693: DISABLE
// begin enable ;
33694: ENABLE
// game_speed := 7 ;
33695: LD_ADDR_OWVAR 65
33699: PUSH
33700: LD_INT 7
33702: ST_TO_ADDR
// end ;
33703: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33704: LD_EXP 63
33708: PUSH
33709: LD_EXP 70
33713: AND
33714: IFFALSE 33916
33716: GO 33718
33718: DISABLE
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33724: LD_ADDR_VAR 0 3
33728: PUSH
33729: LD_INT 81
33731: PUSH
33732: LD_OWVAR 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 21
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PPUSH
33755: CALL_OW 69
33759: ST_TO_ADDR
// if not tmp then
33760: LD_VAR 0 3
33764: NOT
33765: IFFALSE 33769
// exit ;
33767: GO 33916
// if tmp > 5 then
33769: LD_VAR 0 3
33773: PUSH
33774: LD_INT 5
33776: GREATER
33777: IFFALSE 33789
// k := 5 else
33779: LD_ADDR_VAR 0 2
33783: PUSH
33784: LD_INT 5
33786: ST_TO_ADDR
33787: GO 33799
// k := tmp ;
33789: LD_ADDR_VAR 0 2
33793: PUSH
33794: LD_VAR 0 3
33798: ST_TO_ADDR
// for i := 1 to k do
33799: LD_ADDR_VAR 0 1
33803: PUSH
33804: DOUBLE
33805: LD_INT 1
33807: DEC
33808: ST_TO_ADDR
33809: LD_VAR 0 2
33813: PUSH
33814: FOR_TO
33815: IFFALSE 33914
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33817: LD_VAR 0 3
33821: PUSH
33822: LD_VAR 0 1
33826: ARRAY
33827: PPUSH
33828: LD_VAR 0 1
33832: PUSH
33833: LD_INT 4
33835: MOD
33836: PUSH
33837: LD_INT 1
33839: PLUS
33840: PPUSH
33841: CALL_OW 259
33845: PUSH
33846: LD_INT 10
33848: LESS
33849: IFFALSE 33912
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33851: LD_VAR 0 3
33855: PUSH
33856: LD_VAR 0 1
33860: ARRAY
33861: PPUSH
33862: LD_VAR 0 1
33866: PUSH
33867: LD_INT 4
33869: MOD
33870: PUSH
33871: LD_INT 1
33873: PLUS
33874: PPUSH
33875: LD_VAR 0 3
33879: PUSH
33880: LD_VAR 0 1
33884: ARRAY
33885: PPUSH
33886: LD_VAR 0 1
33890: PUSH
33891: LD_INT 4
33893: MOD
33894: PUSH
33895: LD_INT 1
33897: PLUS
33898: PPUSH
33899: CALL_OW 259
33903: PUSH
33904: LD_INT 1
33906: PLUS
33907: PPUSH
33908: CALL_OW 237
33912: GO 33814
33914: POP
33915: POP
// end ;
33916: PPOPN 3
33918: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33919: LD_EXP 63
33923: PUSH
33924: LD_EXP 71
33928: AND
33929: IFFALSE 33949
33931: GO 33933
33933: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33934: LD_INT 4
33936: PPUSH
33937: LD_OWVAR 2
33941: PPUSH
33942: LD_INT 0
33944: PPUSH
33945: CALL_OW 324
33949: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33950: LD_EXP 63
33954: PUSH
33955: LD_EXP 100
33959: AND
33960: IFFALSE 33980
33962: GO 33964
33964: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33965: LD_INT 19
33967: PPUSH
33968: LD_OWVAR 2
33972: PPUSH
33973: LD_INT 0
33975: PPUSH
33976: CALL_OW 324
33980: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33981: LD_EXP 63
33985: PUSH
33986: LD_EXP 72
33990: AND
33991: IFFALSE 34093
33993: GO 33995
33995: DISABLE
33996: LD_INT 0
33998: PPUSH
33999: PPUSH
// begin enable ;
34000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
34001: LD_ADDR_VAR 0 2
34005: PUSH
34006: LD_INT 22
34008: PUSH
34009: LD_OWVAR 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 34
34023: PUSH
34024: LD_INT 11
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 34
34033: PUSH
34034: LD_INT 30
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PPUSH
34050: CALL_OW 69
34054: ST_TO_ADDR
// if not tmp then
34055: LD_VAR 0 2
34059: NOT
34060: IFFALSE 34064
// exit ;
34062: GO 34093
// for i in tmp do
34064: LD_ADDR_VAR 0 1
34068: PUSH
34069: LD_VAR 0 2
34073: PUSH
34074: FOR_IN
34075: IFFALSE 34091
// begin SetLives ( i , 0 ) ;
34077: LD_VAR 0 1
34081: PPUSH
34082: LD_INT 0
34084: PPUSH
34085: CALL_OW 234
// end ;
34089: GO 34074
34091: POP
34092: POP
// end ;
34093: PPOPN 2
34095: END
// every 0 0$1 trigger StreamModeActive and sBunker do
34096: LD_EXP 63
34100: PUSH
34101: LD_EXP 73
34105: AND
34106: IFFALSE 34126
34108: GO 34110
34110: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
34111: LD_INT 32
34113: PPUSH
34114: LD_OWVAR 2
34118: PPUSH
34119: LD_INT 0
34121: PPUSH
34122: CALL_OW 324
34126: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34127: LD_EXP 63
34131: PUSH
34132: LD_EXP 74
34136: AND
34137: IFFALSE 34318
34139: GO 34141
34141: DISABLE
34142: LD_INT 0
34144: PPUSH
34145: PPUSH
34146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34147: LD_ADDR_VAR 0 2
34151: PUSH
34152: LD_INT 22
34154: PUSH
34155: LD_OWVAR 2
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 33
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 69
34182: ST_TO_ADDR
// if not tmp then
34183: LD_VAR 0 2
34187: NOT
34188: IFFALSE 34192
// exit ;
34190: GO 34318
// side := 0 ;
34192: LD_ADDR_VAR 0 3
34196: PUSH
34197: LD_INT 0
34199: ST_TO_ADDR
// for i := 1 to 8 do
34200: LD_ADDR_VAR 0 1
34204: PUSH
34205: DOUBLE
34206: LD_INT 1
34208: DEC
34209: ST_TO_ADDR
34210: LD_INT 8
34212: PUSH
34213: FOR_TO
34214: IFFALSE 34262
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34216: LD_OWVAR 2
34220: PUSH
34221: LD_VAR 0 1
34225: NONEQUAL
34226: PUSH
34227: LD_OWVAR 2
34231: PPUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 81
34241: PUSH
34242: LD_INT 2
34244: EQUAL
34245: AND
34246: IFFALSE 34260
// begin side := i ;
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_VAR 0 1
34257: ST_TO_ADDR
// break ;
34258: GO 34262
// end ;
34260: GO 34213
34262: POP
34263: POP
// if not side then
34264: LD_VAR 0 3
34268: NOT
34269: IFFALSE 34273
// exit ;
34271: GO 34318
// for i := 1 to tmp do
34273: LD_ADDR_VAR 0 1
34277: PUSH
34278: DOUBLE
34279: LD_INT 1
34281: DEC
34282: ST_TO_ADDR
34283: LD_VAR 0 2
34287: PUSH
34288: FOR_TO
34289: IFFALSE 34316
// if Prob ( 60 ) then
34291: LD_INT 60
34293: PPUSH
34294: CALL_OW 13
34298: IFFALSE 34314
// SetSide ( i , side ) ;
34300: LD_VAR 0 1
34304: PPUSH
34305: LD_VAR 0 3
34309: PPUSH
34310: CALL_OW 235
34314: GO 34288
34316: POP
34317: POP
// end ;
34318: PPOPN 3
34320: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34321: LD_EXP 63
34325: PUSH
34326: LD_EXP 76
34330: AND
34331: IFFALSE 34450
34333: GO 34335
34335: DISABLE
34336: LD_INT 0
34338: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34339: LD_ADDR_VAR 0 1
34343: PUSH
34344: LD_INT 22
34346: PUSH
34347: LD_OWVAR 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 21
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: LD_INT 23
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: PPUSH
34388: CALL_OW 69
34392: PUSH
34393: FOR_IN
34394: IFFALSE 34448
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34396: LD_VAR 0 1
34400: PPUSH
34401: CALL_OW 257
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 4
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: IN
34424: IFFALSE 34446
// SetClass ( un , rand ( 1 , 4 ) ) ;
34426: LD_VAR 0 1
34430: PPUSH
34431: LD_INT 1
34433: PPUSH
34434: LD_INT 4
34436: PPUSH
34437: CALL_OW 12
34441: PPUSH
34442: CALL_OW 336
34446: GO 34393
34448: POP
34449: POP
// end ;
34450: PPOPN 1
34452: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34453: LD_EXP 63
34457: PUSH
34458: LD_EXP 75
34462: AND
34463: IFFALSE 34542
34465: GO 34467
34467: DISABLE
34468: LD_INT 0
34470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34471: LD_ADDR_VAR 0 1
34475: PUSH
34476: LD_INT 22
34478: PUSH
34479: LD_OWVAR 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 21
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PPUSH
34502: CALL_OW 69
34506: ST_TO_ADDR
// if not tmp then
34507: LD_VAR 0 1
34511: NOT
34512: IFFALSE 34516
// exit ;
34514: GO 34542
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34516: LD_VAR 0 1
34520: PUSH
34521: LD_INT 1
34523: PPUSH
34524: LD_VAR 0 1
34528: PPUSH
34529: CALL_OW 12
34533: ARRAY
34534: PPUSH
34535: LD_INT 100
34537: PPUSH
34538: CALL_OW 234
// end ;
34542: PPOPN 1
34544: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34545: LD_EXP 63
34549: PUSH
34550: LD_EXP 77
34554: AND
34555: IFFALSE 34653
34557: GO 34559
34559: DISABLE
34560: LD_INT 0
34562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34563: LD_ADDR_VAR 0 1
34567: PUSH
34568: LD_INT 22
34570: PUSH
34571: LD_OWVAR 2
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 21
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PPUSH
34594: CALL_OW 69
34598: ST_TO_ADDR
// if not tmp then
34599: LD_VAR 0 1
34603: NOT
34604: IFFALSE 34608
// exit ;
34606: GO 34653
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34608: LD_VAR 0 1
34612: PUSH
34613: LD_INT 1
34615: PPUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 12
34625: ARRAY
34626: PPUSH
34627: LD_INT 1
34629: PPUSH
34630: LD_INT 4
34632: PPUSH
34633: CALL_OW 12
34637: PPUSH
34638: LD_INT 3000
34640: PPUSH
34641: LD_INT 9000
34643: PPUSH
34644: CALL_OW 12
34648: PPUSH
34649: CALL_OW 492
// end ;
34653: PPOPN 1
34655: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34656: LD_EXP 63
34660: PUSH
34661: LD_EXP 78
34665: AND
34666: IFFALSE 34686
34668: GO 34670
34670: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34671: LD_INT 1
34673: PPUSH
34674: LD_OWVAR 2
34678: PPUSH
34679: LD_INT 0
34681: PPUSH
34682: CALL_OW 324
34686: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34687: LD_EXP 63
34691: PUSH
34692: LD_EXP 79
34696: AND
34697: IFFALSE 34780
34699: GO 34701
34701: DISABLE
34702: LD_INT 0
34704: PPUSH
34705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34706: LD_ADDR_VAR 0 2
34710: PUSH
34711: LD_INT 22
34713: PUSH
34714: LD_OWVAR 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 21
34725: PUSH
34726: LD_INT 3
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PPUSH
34737: CALL_OW 69
34741: ST_TO_ADDR
// if not tmp then
34742: LD_VAR 0 2
34746: NOT
34747: IFFALSE 34751
// exit ;
34749: GO 34780
// for i in tmp do
34751: LD_ADDR_VAR 0 1
34755: PUSH
34756: LD_VAR 0 2
34760: PUSH
34761: FOR_IN
34762: IFFALSE 34778
// SetBLevel ( i , 10 ) ;
34764: LD_VAR 0 1
34768: PPUSH
34769: LD_INT 10
34771: PPUSH
34772: CALL_OW 241
34776: GO 34761
34778: POP
34779: POP
// end ;
34780: PPOPN 2
34782: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34783: LD_EXP 63
34787: PUSH
34788: LD_EXP 80
34792: AND
34793: IFFALSE 34904
34795: GO 34797
34797: DISABLE
34798: LD_INT 0
34800: PPUSH
34801: PPUSH
34802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_INT 22
34810: PUSH
34811: LD_OWVAR 2
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 25
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PPUSH
34834: CALL_OW 69
34838: ST_TO_ADDR
// if not tmp then
34839: LD_VAR 0 3
34843: NOT
34844: IFFALSE 34848
// exit ;
34846: GO 34904
// un := tmp [ rand ( 1 , tmp ) ] ;
34848: LD_ADDR_VAR 0 2
34852: PUSH
34853: LD_VAR 0 3
34857: PUSH
34858: LD_INT 1
34860: PPUSH
34861: LD_VAR 0 3
34865: PPUSH
34866: CALL_OW 12
34870: ARRAY
34871: ST_TO_ADDR
// if Crawls ( un ) then
34872: LD_VAR 0 2
34876: PPUSH
34877: CALL_OW 318
34881: IFFALSE 34892
// ComWalk ( un ) ;
34883: LD_VAR 0 2
34887: PPUSH
34888: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34892: LD_VAR 0 2
34896: PPUSH
34897: LD_INT 5
34899: PPUSH
34900: CALL_OW 336
// end ;
34904: PPOPN 3
34906: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34907: LD_EXP 63
34911: PUSH
34912: LD_EXP 81
34916: AND
34917: PUSH
34918: LD_OWVAR 67
34922: PUSH
34923: LD_INT 4
34925: LESS
34926: AND
34927: IFFALSE 34946
34929: GO 34931
34931: DISABLE
// begin Difficulty := Difficulty + 1 ;
34932: LD_ADDR_OWVAR 67
34936: PUSH
34937: LD_OWVAR 67
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: ST_TO_ADDR
// end ;
34946: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34947: LD_EXP 63
34951: PUSH
34952: LD_EXP 82
34956: AND
34957: IFFALSE 35060
34959: GO 34961
34961: DISABLE
34962: LD_INT 0
34964: PPUSH
// begin for i := 1 to 5 do
34965: LD_ADDR_VAR 0 1
34969: PUSH
34970: DOUBLE
34971: LD_INT 1
34973: DEC
34974: ST_TO_ADDR
34975: LD_INT 5
34977: PUSH
34978: FOR_TO
34979: IFFALSE 35058
// begin uc_nation := nation_nature ;
34981: LD_ADDR_OWVAR 21
34985: PUSH
34986: LD_INT 0
34988: ST_TO_ADDR
// uc_side := 0 ;
34989: LD_ADDR_OWVAR 20
34993: PUSH
34994: LD_INT 0
34996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34997: LD_ADDR_OWVAR 29
35001: PUSH
35002: LD_INT 12
35004: PUSH
35005: LD_INT 12
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: ST_TO_ADDR
// hc_agressivity := 20 ;
35012: LD_ADDR_OWVAR 35
35016: PUSH
35017: LD_INT 20
35019: ST_TO_ADDR
// hc_class := class_tiger ;
35020: LD_ADDR_OWVAR 28
35024: PUSH
35025: LD_INT 14
35027: ST_TO_ADDR
// hc_gallery :=  ;
35028: LD_ADDR_OWVAR 33
35032: PUSH
35033: LD_STRING 
35035: ST_TO_ADDR
// hc_name :=  ;
35036: LD_ADDR_OWVAR 26
35040: PUSH
35041: LD_STRING 
35043: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
35044: CALL_OW 44
35048: PPUSH
35049: LD_INT 0
35051: PPUSH
35052: CALL_OW 51
// end ;
35056: GO 34978
35058: POP
35059: POP
// end ;
35060: PPOPN 1
35062: END
// every 0 0$1 trigger StreamModeActive and sBomb do
35063: LD_EXP 63
35067: PUSH
35068: LD_EXP 83
35072: AND
35073: IFFALSE 35082
35075: GO 35077
35077: DISABLE
// StreamSibBomb ;
35078: CALL 35083 0 0
35082: END
// export function StreamSibBomb ; var i , x , y ; begin
35083: LD_INT 0
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
// result := false ;
35089: LD_ADDR_VAR 0 1
35093: PUSH
35094: LD_INT 0
35096: ST_TO_ADDR
// for i := 1 to 16 do
35097: LD_ADDR_VAR 0 2
35101: PUSH
35102: DOUBLE
35103: LD_INT 1
35105: DEC
35106: ST_TO_ADDR
35107: LD_INT 16
35109: PUSH
35110: FOR_TO
35111: IFFALSE 35310
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_INT 10
35120: PUSH
35121: LD_INT 20
35123: PUSH
35124: LD_INT 30
35126: PUSH
35127: LD_INT 40
35129: PUSH
35130: LD_INT 50
35132: PUSH
35133: LD_INT 60
35135: PUSH
35136: LD_INT 70
35138: PUSH
35139: LD_INT 80
35141: PUSH
35142: LD_INT 90
35144: PUSH
35145: LD_INT 100
35147: PUSH
35148: LD_INT 110
35150: PUSH
35151: LD_INT 120
35153: PUSH
35154: LD_INT 130
35156: PUSH
35157: LD_INT 140
35159: PUSH
35160: LD_INT 150
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PPUSH
35183: LD_INT 15
35185: PPUSH
35186: CALL_OW 12
35190: ARRAY
35191: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35192: LD_ADDR_VAR 0 4
35196: PUSH
35197: LD_INT 10
35199: PUSH
35200: LD_INT 20
35202: PUSH
35203: LD_INT 30
35205: PUSH
35206: LD_INT 40
35208: PUSH
35209: LD_INT 50
35211: PUSH
35212: LD_INT 60
35214: PUSH
35215: LD_INT 70
35217: PUSH
35218: LD_INT 80
35220: PUSH
35221: LD_INT 90
35223: PUSH
35224: LD_INT 100
35226: PUSH
35227: LD_INT 110
35229: PUSH
35230: LD_INT 120
35232: PUSH
35233: LD_INT 130
35235: PUSH
35236: LD_INT 140
35238: PUSH
35239: LD_INT 150
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: PPUSH
35262: LD_INT 15
35264: PPUSH
35265: CALL_OW 12
35269: ARRAY
35270: ST_TO_ADDR
// if ValidHex ( x , y ) then
35271: LD_VAR 0 3
35275: PPUSH
35276: LD_VAR 0 4
35280: PPUSH
35281: CALL_OW 488
35285: IFFALSE 35308
// begin result := [ x , y ] ;
35287: LD_ADDR_VAR 0 1
35291: PUSH
35292: LD_VAR 0 3
35296: PUSH
35297: LD_VAR 0 4
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: ST_TO_ADDR
// break ;
35306: GO 35310
// end ; end ;
35308: GO 35110
35310: POP
35311: POP
// if result then
35312: LD_VAR 0 1
35316: IFFALSE 35376
// begin ToLua ( playSibBomb() ) ;
35318: LD_STRING playSibBomb()
35320: PPUSH
35321: CALL_OW 559
// wait ( 0 0$14 ) ;
35325: LD_INT 490
35327: PPUSH
35328: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35332: LD_VAR 0 1
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PPUSH
35341: LD_VAR 0 1
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: PPUSH
35350: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35354: LD_VAR 0 1
35358: PUSH
35359: LD_INT 1
35361: ARRAY
35362: PPUSH
35363: LD_VAR 0 1
35367: PUSH
35368: LD_INT 2
35370: ARRAY
35371: PPUSH
35372: CALL_OW 429
// end ; end ;
35376: LD_VAR 0 1
35380: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35381: LD_EXP 63
35385: PUSH
35386: LD_EXP 85
35390: AND
35391: IFFALSE 35403
35393: GO 35395
35395: DISABLE
// YouLost (  ) ;
35396: LD_STRING 
35398: PPUSH
35399: CALL_OW 104
35403: END
// every 0 0$1 trigger StreamModeActive and sFog do
35404: LD_EXP 63
35408: PUSH
35409: LD_EXP 84
35413: AND
35414: IFFALSE 35428
35416: GO 35418
35418: DISABLE
// FogOff ( your_side ) ;
35419: LD_OWVAR 2
35423: PPUSH
35424: CALL_OW 344
35428: END
// every 0 0$1 trigger StreamModeActive and sSun do
35429: LD_EXP 63
35433: PUSH
35434: LD_EXP 86
35438: AND
35439: IFFALSE 35467
35441: GO 35443
35443: DISABLE
// begin solar_recharge_percent := 0 ;
35444: LD_ADDR_OWVAR 79
35448: PUSH
35449: LD_INT 0
35451: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35452: LD_INT 10500
35454: PPUSH
35455: CALL_OW 67
// solar_recharge_percent := 100 ;
35459: LD_ADDR_OWVAR 79
35463: PUSH
35464: LD_INT 100
35466: ST_TO_ADDR
// end ;
35467: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35468: LD_EXP 63
35472: PUSH
35473: LD_EXP 87
35477: AND
35478: IFFALSE 35717
35480: GO 35482
35482: DISABLE
35483: LD_INT 0
35485: PPUSH
35486: PPUSH
35487: PPUSH
// begin tmp := [ ] ;
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: EMPTY
35494: ST_TO_ADDR
// for i := 1 to 6 do
35495: LD_ADDR_VAR 0 1
35499: PUSH
35500: DOUBLE
35501: LD_INT 1
35503: DEC
35504: ST_TO_ADDR
35505: LD_INT 6
35507: PUSH
35508: FOR_TO
35509: IFFALSE 35614
// begin uc_nation := nation_nature ;
35511: LD_ADDR_OWVAR 21
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// uc_side := 0 ;
35519: LD_ADDR_OWVAR 20
35523: PUSH
35524: LD_INT 0
35526: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35527: LD_ADDR_OWVAR 29
35531: PUSH
35532: LD_INT 12
35534: PUSH
35535: LD_INT 12
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// hc_agressivity := 20 ;
35542: LD_ADDR_OWVAR 35
35546: PUSH
35547: LD_INT 20
35549: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35550: LD_ADDR_OWVAR 28
35554: PUSH
35555: LD_INT 17
35557: ST_TO_ADDR
// hc_gallery :=  ;
35558: LD_ADDR_OWVAR 33
35562: PUSH
35563: LD_STRING 
35565: ST_TO_ADDR
// hc_name :=  ;
35566: LD_ADDR_OWVAR 26
35570: PUSH
35571: LD_STRING 
35573: ST_TO_ADDR
// un := CreateHuman ;
35574: LD_ADDR_VAR 0 2
35578: PUSH
35579: CALL_OW 44
35583: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35584: LD_VAR 0 2
35588: PPUSH
35589: LD_INT 1
35591: PPUSH
35592: CALL_OW 51
// tmp := tmp ^ un ;
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_VAR 0 3
35605: PUSH
35606: LD_VAR 0 2
35610: ADD
35611: ST_TO_ADDR
// end ;
35612: GO 35508
35614: POP
35615: POP
// repeat wait ( 0 0$1 ) ;
35616: LD_INT 35
35618: PPUSH
35619: CALL_OW 67
// for un in tmp do
35623: LD_ADDR_VAR 0 2
35627: PUSH
35628: LD_VAR 0 3
35632: PUSH
35633: FOR_IN
35634: IFFALSE 35708
// begin if IsDead ( un ) then
35636: LD_VAR 0 2
35640: PPUSH
35641: CALL_OW 301
35645: IFFALSE 35665
// begin tmp := tmp diff un ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_VAR 0 3
35656: PUSH
35657: LD_VAR 0 2
35661: DIFF
35662: ST_TO_ADDR
// continue ;
35663: GO 35633
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35665: LD_VAR 0 2
35669: PPUSH
35670: LD_INT 3
35672: PUSH
35673: LD_INT 22
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PPUSH
35687: CALL_OW 69
35691: PPUSH
35692: LD_VAR 0 2
35696: PPUSH
35697: CALL_OW 74
35701: PPUSH
35702: CALL_OW 115
// end ;
35706: GO 35633
35708: POP
35709: POP
// until not tmp ;
35710: LD_VAR 0 3
35714: NOT
35715: IFFALSE 35616
// end ;
35717: PPOPN 3
35719: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35720: LD_EXP 63
35724: PUSH
35725: LD_EXP 88
35729: AND
35730: IFFALSE 35784
35732: GO 35734
35734: DISABLE
// begin ToLua ( displayTroll(); ) ;
35735: LD_STRING displayTroll();
35737: PPUSH
35738: CALL_OW 559
// wait ( 3 3$00 ) ;
35742: LD_INT 6300
35744: PPUSH
35745: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35749: LD_STRING hideTroll();
35751: PPUSH
35752: CALL_OW 559
// wait ( 1 1$00 ) ;
35756: LD_INT 2100
35758: PPUSH
35759: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35763: LD_STRING displayTroll();
35765: PPUSH
35766: CALL_OW 559
// wait ( 1 1$00 ) ;
35770: LD_INT 2100
35772: PPUSH
35773: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35777: LD_STRING hideTroll();
35779: PPUSH
35780: CALL_OW 559
// end ;
35784: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35785: LD_EXP 63
35789: PUSH
35790: LD_EXP 89
35794: AND
35795: IFFALSE 35858
35797: GO 35799
35799: DISABLE
35800: LD_INT 0
35802: PPUSH
// begin p := 0 ;
35803: LD_ADDR_VAR 0 1
35807: PUSH
35808: LD_INT 0
35810: ST_TO_ADDR
// repeat game_speed := 1 ;
35811: LD_ADDR_OWVAR 65
35815: PUSH
35816: LD_INT 1
35818: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35819: LD_INT 35
35821: PPUSH
35822: CALL_OW 67
// p := p + 1 ;
35826: LD_ADDR_VAR 0 1
35830: PUSH
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 1
35838: PLUS
35839: ST_TO_ADDR
// until p >= 60 ;
35840: LD_VAR 0 1
35844: PUSH
35845: LD_INT 60
35847: GREATEREQUAL
35848: IFFALSE 35811
// game_speed := 4 ;
35850: LD_ADDR_OWVAR 65
35854: PUSH
35855: LD_INT 4
35857: ST_TO_ADDR
// end ;
35858: PPOPN 1
35860: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35861: LD_EXP 63
35865: PUSH
35866: LD_EXP 90
35870: AND
35871: IFFALSE 36017
35873: GO 35875
35875: DISABLE
35876: LD_INT 0
35878: PPUSH
35879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35880: LD_ADDR_VAR 0 1
35884: PUSH
35885: LD_INT 22
35887: PUSH
35888: LD_OWVAR 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 30
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 30
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PPUSH
35929: CALL_OW 69
35933: ST_TO_ADDR
// if not depot then
35934: LD_VAR 0 1
35938: NOT
35939: IFFALSE 35943
// exit ;
35941: GO 36017
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35943: LD_ADDR_VAR 0 2
35947: PUSH
35948: LD_VAR 0 1
35952: PUSH
35953: LD_INT 1
35955: PPUSH
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL_OW 12
35965: ARRAY
35966: PPUSH
35967: CALL_OW 274
35971: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35972: LD_VAR 0 2
35976: PPUSH
35977: LD_INT 1
35979: PPUSH
35980: LD_INT 0
35982: PPUSH
35983: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35987: LD_VAR 0 2
35991: PPUSH
35992: LD_INT 2
35994: PPUSH
35995: LD_INT 0
35997: PPUSH
35998: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
36002: LD_VAR 0 2
36006: PPUSH
36007: LD_INT 3
36009: PPUSH
36010: LD_INT 0
36012: PPUSH
36013: CALL_OW 277
// end ;
36017: PPOPN 2
36019: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
36020: LD_EXP 63
36024: PUSH
36025: LD_EXP 91
36029: AND
36030: IFFALSE 36127
36032: GO 36034
36034: DISABLE
36035: LD_INT 0
36037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36038: LD_ADDR_VAR 0 1
36042: PUSH
36043: LD_INT 22
36045: PUSH
36046: LD_OWVAR 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 21
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 3
36067: PUSH
36068: LD_INT 23
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: PPUSH
36087: CALL_OW 69
36091: ST_TO_ADDR
// if not tmp then
36092: LD_VAR 0 1
36096: NOT
36097: IFFALSE 36101
// exit ;
36099: GO 36127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
36101: LD_VAR 0 1
36105: PUSH
36106: LD_INT 1
36108: PPUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 12
36118: ARRAY
36119: PPUSH
36120: LD_INT 200
36122: PPUSH
36123: CALL_OW 234
// end ;
36127: PPOPN 1
36129: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36130: LD_EXP 63
36134: PUSH
36135: LD_EXP 92
36139: AND
36140: IFFALSE 36219
36142: GO 36144
36144: DISABLE
36145: LD_INT 0
36147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36148: LD_ADDR_VAR 0 1
36152: PUSH
36153: LD_INT 22
36155: PUSH
36156: LD_OWVAR 2
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 21
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PPUSH
36179: CALL_OW 69
36183: ST_TO_ADDR
// if not tmp then
36184: LD_VAR 0 1
36188: NOT
36189: IFFALSE 36193
// exit ;
36191: GO 36219
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36193: LD_VAR 0 1
36197: PUSH
36198: LD_INT 1
36200: PPUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 12
36210: ARRAY
36211: PPUSH
36212: LD_INT 60
36214: PPUSH
36215: CALL_OW 234
// end ;
36219: PPOPN 1
36221: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36222: LD_EXP 63
36226: PUSH
36227: LD_EXP 93
36231: AND
36232: IFFALSE 36331
36234: GO 36236
36236: DISABLE
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
// begin enable ;
36241: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36242: LD_ADDR_VAR 0 1
36246: PUSH
36247: LD_INT 22
36249: PUSH
36250: LD_OWVAR 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 61
36261: PUSH
36262: EMPTY
36263: LIST
36264: PUSH
36265: LD_INT 33
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: PPUSH
36280: CALL_OW 69
36284: ST_TO_ADDR
// if not tmp then
36285: LD_VAR 0 1
36289: NOT
36290: IFFALSE 36294
// exit ;
36292: GO 36331
// for i in tmp do
36294: LD_ADDR_VAR 0 2
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: FOR_IN
36305: IFFALSE 36329
// if IsControledBy ( i ) then
36307: LD_VAR 0 2
36311: PPUSH
36312: CALL_OW 312
36316: IFFALSE 36327
// ComUnlink ( i ) ;
36318: LD_VAR 0 2
36322: PPUSH
36323: CALL_OW 136
36327: GO 36304
36329: POP
36330: POP
// end ;
36331: PPOPN 2
36333: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36334: LD_EXP 63
36338: PUSH
36339: LD_EXP 94
36343: AND
36344: IFFALSE 36484
36346: GO 36348
36348: DISABLE
36349: LD_INT 0
36351: PPUSH
36352: PPUSH
// begin ToLua ( displayPowell(); ) ;
36353: LD_STRING displayPowell();
36355: PPUSH
36356: CALL_OW 559
// uc_side := 0 ;
36360: LD_ADDR_OWVAR 20
36364: PUSH
36365: LD_INT 0
36367: ST_TO_ADDR
// uc_nation := 2 ;
36368: LD_ADDR_OWVAR 21
36372: PUSH
36373: LD_INT 2
36375: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36376: LD_ADDR_OWVAR 37
36380: PUSH
36381: LD_INT 14
36383: ST_TO_ADDR
// vc_engine := engine_siberite ;
36384: LD_ADDR_OWVAR 39
36388: PUSH
36389: LD_INT 3
36391: ST_TO_ADDR
// vc_control := control_apeman ;
36392: LD_ADDR_OWVAR 38
36396: PUSH
36397: LD_INT 5
36399: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36400: LD_ADDR_OWVAR 40
36404: PUSH
36405: LD_INT 29
36407: ST_TO_ADDR
// un := CreateVehicle ;
36408: LD_ADDR_VAR 0 2
36412: PUSH
36413: CALL_OW 45
36417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36418: LD_VAR 0 2
36422: PPUSH
36423: LD_INT 1
36425: PPUSH
36426: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36430: LD_INT 35
36432: PPUSH
36433: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36437: LD_VAR 0 2
36441: PPUSH
36442: LD_INT 22
36444: PUSH
36445: LD_OWVAR 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PPUSH
36454: CALL_OW 69
36458: PPUSH
36459: LD_VAR 0 2
36463: PPUSH
36464: CALL_OW 74
36468: PPUSH
36469: CALL_OW 115
// until IsDead ( un ) ;
36473: LD_VAR 0 2
36477: PPUSH
36478: CALL_OW 301
36482: IFFALSE 36430
// end ;
36484: PPOPN 2
36486: END
// every 0 0$1 trigger StreamModeActive and sStu do
36487: LD_EXP 63
36491: PUSH
36492: LD_EXP 102
36496: AND
36497: IFFALSE 36513
36499: GO 36501
36501: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36502: LD_STRING displayStucuk();
36504: PPUSH
36505: CALL_OW 559
// ResetFog ;
36509: CALL_OW 335
// end ;
36513: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36514: LD_EXP 63
36518: PUSH
36519: LD_EXP 95
36523: AND
36524: IFFALSE 36665
36526: GO 36528
36528: DISABLE
36529: LD_INT 0
36531: PPUSH
36532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36533: LD_ADDR_VAR 0 2
36537: PUSH
36538: LD_INT 22
36540: PUSH
36541: LD_OWVAR 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 21
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PPUSH
36564: CALL_OW 69
36568: ST_TO_ADDR
// if not tmp then
36569: LD_VAR 0 2
36573: NOT
36574: IFFALSE 36578
// exit ;
36576: GO 36665
// un := tmp [ rand ( 1 , tmp ) ] ;
36578: LD_ADDR_VAR 0 1
36582: PUSH
36583: LD_VAR 0 2
36587: PUSH
36588: LD_INT 1
36590: PPUSH
36591: LD_VAR 0 2
36595: PPUSH
36596: CALL_OW 12
36600: ARRAY
36601: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_INT 0
36609: PPUSH
36610: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36614: LD_VAR 0 1
36618: PPUSH
36619: LD_OWVAR 3
36623: PUSH
36624: LD_VAR 0 1
36628: DIFF
36629: PPUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 74
36639: PPUSH
36640: CALL_OW 115
// wait ( 0 0$20 ) ;
36644: LD_INT 700
36646: PPUSH
36647: CALL_OW 67
// SetSide ( un , your_side ) ;
36651: LD_VAR 0 1
36655: PPUSH
36656: LD_OWVAR 2
36660: PPUSH
36661: CALL_OW 235
// end ;
36665: PPOPN 2
36667: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36668: LD_EXP 63
36672: PUSH
36673: LD_EXP 96
36677: AND
36678: IFFALSE 36784
36680: GO 36682
36682: DISABLE
36683: LD_INT 0
36685: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36686: LD_ADDR_VAR 0 1
36690: PUSH
36691: LD_INT 22
36693: PUSH
36694: LD_OWVAR 2
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 30
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 30
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PPUSH
36735: CALL_OW 69
36739: ST_TO_ADDR
// if not depot then
36740: LD_VAR 0 1
36744: NOT
36745: IFFALSE 36749
// exit ;
36747: GO 36784
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36749: LD_VAR 0 1
36753: PUSH
36754: LD_INT 1
36756: ARRAY
36757: PPUSH
36758: CALL_OW 250
36762: PPUSH
36763: LD_VAR 0 1
36767: PUSH
36768: LD_INT 1
36770: ARRAY
36771: PPUSH
36772: CALL_OW 251
36776: PPUSH
36777: LD_INT 70
36779: PPUSH
36780: CALL_OW 495
// end ;
36784: PPOPN 1
36786: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36787: LD_EXP 63
36791: PUSH
36792: LD_EXP 97
36796: AND
36797: IFFALSE 37008
36799: GO 36801
36801: DISABLE
36802: LD_INT 0
36804: PPUSH
36805: PPUSH
36806: PPUSH
36807: PPUSH
36808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36809: LD_ADDR_VAR 0 5
36813: PUSH
36814: LD_INT 22
36816: PUSH
36817: LD_OWVAR 2
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 21
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PPUSH
36840: CALL_OW 69
36844: ST_TO_ADDR
// if not tmp then
36845: LD_VAR 0 5
36849: NOT
36850: IFFALSE 36854
// exit ;
36852: GO 37008
// for i in tmp do
36854: LD_ADDR_VAR 0 1
36858: PUSH
36859: LD_VAR 0 5
36863: PUSH
36864: FOR_IN
36865: IFFALSE 37006
// begin d := rand ( 0 , 5 ) ;
36867: LD_ADDR_VAR 0 4
36871: PUSH
36872: LD_INT 0
36874: PPUSH
36875: LD_INT 5
36877: PPUSH
36878: CALL_OW 12
36882: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36883: LD_ADDR_VAR 0 2
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 250
36897: PPUSH
36898: LD_VAR 0 4
36902: PPUSH
36903: LD_INT 3
36905: PPUSH
36906: LD_INT 12
36908: PPUSH
36909: CALL_OW 12
36913: PPUSH
36914: CALL_OW 272
36918: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 251
36933: PPUSH
36934: LD_VAR 0 4
36938: PPUSH
36939: LD_INT 3
36941: PPUSH
36942: LD_INT 12
36944: PPUSH
36945: CALL_OW 12
36949: PPUSH
36950: CALL_OW 273
36954: ST_TO_ADDR
// if ValidHex ( x , y ) then
36955: LD_VAR 0 2
36959: PPUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: CALL_OW 488
36969: IFFALSE 37004
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36971: LD_VAR 0 1
36975: PPUSH
36976: LD_VAR 0 2
36980: PPUSH
36981: LD_VAR 0 3
36985: PPUSH
36986: LD_INT 3
36988: PPUSH
36989: LD_INT 6
36991: PPUSH
36992: CALL_OW 12
36996: PPUSH
36997: LD_INT 1
36999: PPUSH
37000: CALL_OW 483
// end ;
37004: GO 36864
37006: POP
37007: POP
// end ;
37008: PPOPN 5
37010: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
37011: LD_EXP 63
37015: PUSH
37016: LD_EXP 98
37020: AND
37021: IFFALSE 37115
37023: GO 37025
37025: DISABLE
37026: LD_INT 0
37028: PPUSH
37029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
37030: LD_ADDR_VAR 0 2
37034: PUSH
37035: LD_INT 22
37037: PUSH
37038: LD_OWVAR 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 32
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 21
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: PPUSH
37072: CALL_OW 69
37076: ST_TO_ADDR
// if not tmp then
37077: LD_VAR 0 2
37081: NOT
37082: IFFALSE 37086
// exit ;
37084: GO 37115
// for i in tmp do
37086: LD_ADDR_VAR 0 1
37090: PUSH
37091: LD_VAR 0 2
37095: PUSH
37096: FOR_IN
37097: IFFALSE 37113
// SetFuel ( i , 0 ) ;
37099: LD_VAR 0 1
37103: PPUSH
37104: LD_INT 0
37106: PPUSH
37107: CALL_OW 240
37111: GO 37096
37113: POP
37114: POP
// end ;
37115: PPOPN 2
37117: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
37118: LD_EXP 63
37122: PUSH
37123: LD_EXP 99
37127: AND
37128: IFFALSE 37194
37130: GO 37132
37132: DISABLE
37133: LD_INT 0
37135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37136: LD_ADDR_VAR 0 1
37140: PUSH
37141: LD_INT 22
37143: PUSH
37144: LD_OWVAR 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 30
37155: PUSH
37156: LD_INT 29
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PPUSH
37167: CALL_OW 69
37171: ST_TO_ADDR
// if not tmp then
37172: LD_VAR 0 1
37176: NOT
37177: IFFALSE 37181
// exit ;
37179: GO 37194
// DestroyUnit ( tmp [ 1 ] ) ;
37181: LD_VAR 0 1
37185: PUSH
37186: LD_INT 1
37188: ARRAY
37189: PPUSH
37190: CALL_OW 65
// end ;
37194: PPOPN 1
37196: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37197: LD_EXP 63
37201: PUSH
37202: LD_EXP 101
37206: AND
37207: IFFALSE 37336
37209: GO 37211
37211: DISABLE
37212: LD_INT 0
37214: PPUSH
// begin uc_side := 0 ;
37215: LD_ADDR_OWVAR 20
37219: PUSH
37220: LD_INT 0
37222: ST_TO_ADDR
// uc_nation := nation_arabian ;
37223: LD_ADDR_OWVAR 21
37227: PUSH
37228: LD_INT 2
37230: ST_TO_ADDR
// hc_gallery :=  ;
37231: LD_ADDR_OWVAR 33
37235: PUSH
37236: LD_STRING 
37238: ST_TO_ADDR
// hc_name :=  ;
37239: LD_ADDR_OWVAR 26
37243: PUSH
37244: LD_STRING 
37246: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37247: LD_INT 1
37249: PPUSH
37250: LD_INT 11
37252: PPUSH
37253: LD_INT 10
37255: PPUSH
37256: CALL_OW 380
// un := CreateHuman ;
37260: LD_ADDR_VAR 0 1
37264: PUSH
37265: CALL_OW 44
37269: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37270: LD_VAR 0 1
37274: PPUSH
37275: LD_INT 1
37277: PPUSH
37278: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37282: LD_INT 35
37284: PPUSH
37285: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37289: LD_VAR 0 1
37293: PPUSH
37294: LD_INT 22
37296: PUSH
37297: LD_OWVAR 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PPUSH
37306: CALL_OW 69
37310: PPUSH
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 74
37320: PPUSH
37321: CALL_OW 115
// until IsDead ( un ) ;
37325: LD_VAR 0 1
37329: PPUSH
37330: CALL_OW 301
37334: IFFALSE 37282
// end ;
37336: PPOPN 1
37338: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37339: LD_EXP 63
37343: PUSH
37344: LD_EXP 103
37348: AND
37349: IFFALSE 37361
37351: GO 37353
37353: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37354: LD_STRING earthquake(getX(game), 0, 32)
37356: PPUSH
37357: CALL_OW 559
37361: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37362: LD_EXP 63
37366: PUSH
37367: LD_EXP 104
37371: AND
37372: IFFALSE 37463
37374: GO 37376
37376: DISABLE
37377: LD_INT 0
37379: PPUSH
// begin enable ;
37380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37381: LD_ADDR_VAR 0 1
37385: PUSH
37386: LD_INT 22
37388: PUSH
37389: LD_OWVAR 2
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 21
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 33
37410: PUSH
37411: LD_INT 3
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: PPUSH
37423: CALL_OW 69
37427: ST_TO_ADDR
// if not tmp then
37428: LD_VAR 0 1
37432: NOT
37433: IFFALSE 37437
// exit ;
37435: GO 37463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37437: LD_VAR 0 1
37441: PUSH
37442: LD_INT 1
37444: PPUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 12
37454: ARRAY
37455: PPUSH
37456: LD_INT 1
37458: PPUSH
37459: CALL_OW 234
// end ;
37463: PPOPN 1
37465: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37466: LD_EXP 63
37470: PUSH
37471: LD_EXP 105
37475: AND
37476: IFFALSE 37617
37478: GO 37480
37480: DISABLE
37481: LD_INT 0
37483: PPUSH
37484: PPUSH
37485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37486: LD_ADDR_VAR 0 3
37490: PUSH
37491: LD_INT 22
37493: PUSH
37494: LD_OWVAR 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 25
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PPUSH
37517: CALL_OW 69
37521: ST_TO_ADDR
// if not tmp then
37522: LD_VAR 0 3
37526: NOT
37527: IFFALSE 37531
// exit ;
37529: GO 37617
// un := tmp [ rand ( 1 , tmp ) ] ;
37531: LD_ADDR_VAR 0 2
37535: PUSH
37536: LD_VAR 0 3
37540: PUSH
37541: LD_INT 1
37543: PPUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: CALL_OW 12
37553: ARRAY
37554: ST_TO_ADDR
// if Crawls ( un ) then
37555: LD_VAR 0 2
37559: PPUSH
37560: CALL_OW 318
37564: IFFALSE 37575
// ComWalk ( un ) ;
37566: LD_VAR 0 2
37570: PPUSH
37571: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_INT 9
37582: PPUSH
37583: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37587: LD_INT 28
37589: PPUSH
37590: LD_OWVAR 2
37594: PPUSH
37595: LD_INT 2
37597: PPUSH
37598: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37602: LD_INT 29
37604: PPUSH
37605: LD_OWVAR 2
37609: PPUSH
37610: LD_INT 2
37612: PPUSH
37613: CALL_OW 322
// end ;
37617: PPOPN 3
37619: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37620: LD_EXP 63
37624: PUSH
37625: LD_EXP 106
37629: AND
37630: IFFALSE 37741
37632: GO 37634
37634: DISABLE
37635: LD_INT 0
37637: PPUSH
37638: PPUSH
37639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37640: LD_ADDR_VAR 0 3
37644: PUSH
37645: LD_INT 22
37647: PUSH
37648: LD_OWVAR 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 25
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PPUSH
37671: CALL_OW 69
37675: ST_TO_ADDR
// if not tmp then
37676: LD_VAR 0 3
37680: NOT
37681: IFFALSE 37685
// exit ;
37683: GO 37741
// un := tmp [ rand ( 1 , tmp ) ] ;
37685: LD_ADDR_VAR 0 2
37689: PUSH
37690: LD_VAR 0 3
37694: PUSH
37695: LD_INT 1
37697: PPUSH
37698: LD_VAR 0 3
37702: PPUSH
37703: CALL_OW 12
37707: ARRAY
37708: ST_TO_ADDR
// if Crawls ( un ) then
37709: LD_VAR 0 2
37713: PPUSH
37714: CALL_OW 318
37718: IFFALSE 37729
// ComWalk ( un ) ;
37720: LD_VAR 0 2
37724: PPUSH
37725: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37729: LD_VAR 0 2
37733: PPUSH
37734: LD_INT 8
37736: PPUSH
37737: CALL_OW 336
// end ;
37741: PPOPN 3
37743: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37744: LD_EXP 63
37748: PUSH
37749: LD_EXP 107
37753: AND
37754: IFFALSE 37898
37756: GO 37758
37758: DISABLE
37759: LD_INT 0
37761: PPUSH
37762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37763: LD_ADDR_VAR 0 2
37767: PUSH
37768: LD_INT 22
37770: PUSH
37771: LD_OWVAR 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 21
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 34
37795: PUSH
37796: LD_INT 12
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 34
37805: PUSH
37806: LD_INT 51
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 34
37815: PUSH
37816: LD_INT 32
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: PPUSH
37834: CALL_OW 69
37838: ST_TO_ADDR
// if not tmp then
37839: LD_VAR 0 2
37843: NOT
37844: IFFALSE 37848
// exit ;
37846: GO 37898
// for i in tmp do
37848: LD_ADDR_VAR 0 1
37852: PUSH
37853: LD_VAR 0 2
37857: PUSH
37858: FOR_IN
37859: IFFALSE 37896
// if GetCargo ( i , mat_artifact ) = 0 then
37861: LD_VAR 0 1
37865: PPUSH
37866: LD_INT 4
37868: PPUSH
37869: CALL_OW 289
37873: PUSH
37874: LD_INT 0
37876: EQUAL
37877: IFFALSE 37894
// SetCargo ( i , mat_siberit , 100 ) ;
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_INT 3
37886: PPUSH
37887: LD_INT 100
37889: PPUSH
37890: CALL_OW 290
37894: GO 37858
37896: POP
37897: POP
// end ;
37898: PPOPN 2
37900: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37901: LD_EXP 63
37905: PUSH
37906: LD_EXP 108
37910: AND
37911: IFFALSE 38094
37913: GO 37915
37915: DISABLE
37916: LD_INT 0
37918: PPUSH
37919: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37920: LD_ADDR_VAR 0 2
37924: PUSH
37925: LD_INT 22
37927: PUSH
37928: LD_OWVAR 2
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PPUSH
37937: CALL_OW 69
37941: ST_TO_ADDR
// if not tmp then
37942: LD_VAR 0 2
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 38094
// for i := 1 to 2 do
37951: LD_ADDR_VAR 0 1
37955: PUSH
37956: DOUBLE
37957: LD_INT 1
37959: DEC
37960: ST_TO_ADDR
37961: LD_INT 2
37963: PUSH
37964: FOR_TO
37965: IFFALSE 38092
// begin uc_side := your_side ;
37967: LD_ADDR_OWVAR 20
37971: PUSH
37972: LD_OWVAR 2
37976: ST_TO_ADDR
// uc_nation := nation_american ;
37977: LD_ADDR_OWVAR 21
37981: PUSH
37982: LD_INT 1
37984: ST_TO_ADDR
// vc_chassis := us_morphling ;
37985: LD_ADDR_OWVAR 37
37989: PUSH
37990: LD_INT 5
37992: ST_TO_ADDR
// vc_engine := engine_siberite ;
37993: LD_ADDR_OWVAR 39
37997: PUSH
37998: LD_INT 3
38000: ST_TO_ADDR
// vc_control := control_computer ;
38001: LD_ADDR_OWVAR 38
38005: PUSH
38006: LD_INT 3
38008: ST_TO_ADDR
// vc_weapon := us_double_laser ;
38009: LD_ADDR_OWVAR 40
38013: PUSH
38014: LD_INT 10
38016: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
38017: LD_VAR 0 2
38021: PUSH
38022: LD_INT 1
38024: ARRAY
38025: PPUSH
38026: CALL_OW 310
38030: NOT
38031: IFFALSE 38078
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
38033: CALL_OW 45
38037: PPUSH
38038: LD_VAR 0 2
38042: PUSH
38043: LD_INT 1
38045: ARRAY
38046: PPUSH
38047: CALL_OW 250
38051: PPUSH
38052: LD_VAR 0 2
38056: PUSH
38057: LD_INT 1
38059: ARRAY
38060: PPUSH
38061: CALL_OW 251
38065: PPUSH
38066: LD_INT 12
38068: PPUSH
38069: LD_INT 1
38071: PPUSH
38072: CALL_OW 50
38076: GO 38090
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
38078: CALL_OW 45
38082: PPUSH
38083: LD_INT 1
38085: PPUSH
38086: CALL_OW 51
// end ;
38090: GO 37964
38092: POP
38093: POP
// end ;
38094: PPOPN 2
38096: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
38097: LD_EXP 63
38101: PUSH
38102: LD_EXP 109
38106: AND
38107: IFFALSE 38329
38109: GO 38111
38111: DISABLE
38112: LD_INT 0
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38120: LD_ADDR_VAR 0 6
38124: PUSH
38125: LD_INT 22
38127: PUSH
38128: LD_OWVAR 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 21
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: LD_INT 23
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: PPUSH
38169: CALL_OW 69
38173: ST_TO_ADDR
// if not tmp then
38174: LD_VAR 0 6
38178: NOT
38179: IFFALSE 38183
// exit ;
38181: GO 38329
// s1 := rand ( 1 , 4 ) ;
38183: LD_ADDR_VAR 0 2
38187: PUSH
38188: LD_INT 1
38190: PPUSH
38191: LD_INT 4
38193: PPUSH
38194: CALL_OW 12
38198: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38199: LD_ADDR_VAR 0 4
38203: PUSH
38204: LD_VAR 0 6
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: PPUSH
38213: LD_VAR 0 2
38217: PPUSH
38218: CALL_OW 259
38222: ST_TO_ADDR
// if s1 = 1 then
38223: LD_VAR 0 2
38227: PUSH
38228: LD_INT 1
38230: EQUAL
38231: IFFALSE 38251
// s2 := rand ( 2 , 4 ) else
38233: LD_ADDR_VAR 0 3
38237: PUSH
38238: LD_INT 2
38240: PPUSH
38241: LD_INT 4
38243: PPUSH
38244: CALL_OW 12
38248: ST_TO_ADDR
38249: GO 38259
// s2 := 1 ;
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: LD_INT 1
38258: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: LD_VAR 0 6
38268: PUSH
38269: LD_INT 1
38271: ARRAY
38272: PPUSH
38273: LD_VAR 0 3
38277: PPUSH
38278: CALL_OW 259
38282: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38283: LD_VAR 0 6
38287: PUSH
38288: LD_INT 1
38290: ARRAY
38291: PPUSH
38292: LD_VAR 0 2
38296: PPUSH
38297: LD_VAR 0 5
38301: PPUSH
38302: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38306: LD_VAR 0 6
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 3
38319: PPUSH
38320: LD_VAR 0 4
38324: PPUSH
38325: CALL_OW 237
// end ;
38329: PPOPN 6
38331: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38332: LD_EXP 63
38336: PUSH
38337: LD_EXP 110
38341: AND
38342: IFFALSE 38421
38344: GO 38346
38346: DISABLE
38347: LD_INT 0
38349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38350: LD_ADDR_VAR 0 1
38354: PUSH
38355: LD_INT 22
38357: PUSH
38358: LD_OWVAR 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 30
38369: PUSH
38370: LD_INT 3
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PPUSH
38381: CALL_OW 69
38385: ST_TO_ADDR
// if not tmp then
38386: LD_VAR 0 1
38390: NOT
38391: IFFALSE 38395
// exit ;
38393: GO 38421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38395: LD_VAR 0 1
38399: PUSH
38400: LD_INT 1
38402: PPUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL_OW 12
38412: ARRAY
38413: PPUSH
38414: LD_INT 1
38416: PPUSH
38417: CALL_OW 234
// end ;
38421: PPOPN 1
38423: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38424: LD_EXP 63
38428: PUSH
38429: LD_EXP 111
38433: AND
38434: IFFALSE 38546
38436: GO 38438
38438: DISABLE
38439: LD_INT 0
38441: PPUSH
38442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38443: LD_ADDR_VAR 0 2
38447: PUSH
38448: LD_INT 22
38450: PUSH
38451: LD_OWVAR 2
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 30
38465: PUSH
38466: LD_INT 27
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 30
38475: PUSH
38476: LD_INT 26
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 30
38485: PUSH
38486: LD_INT 28
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PPUSH
38503: CALL_OW 69
38507: ST_TO_ADDR
// if not tmp then
38508: LD_VAR 0 2
38512: NOT
38513: IFFALSE 38517
// exit ;
38515: GO 38546
// for i in tmp do
38517: LD_ADDR_VAR 0 1
38521: PUSH
38522: LD_VAR 0 2
38526: PUSH
38527: FOR_IN
38528: IFFALSE 38544
// SetLives ( i , 1 ) ;
38530: LD_VAR 0 1
38534: PPUSH
38535: LD_INT 1
38537: PPUSH
38538: CALL_OW 234
38542: GO 38527
38544: POP
38545: POP
// end ;
38546: PPOPN 2
38548: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38549: LD_EXP 63
38553: PUSH
38554: LD_EXP 112
38558: AND
38559: IFFALSE 38846
38561: GO 38563
38563: DISABLE
38564: LD_INT 0
38566: PPUSH
38567: PPUSH
38568: PPUSH
// begin i := rand ( 1 , 7 ) ;
38569: LD_ADDR_VAR 0 1
38573: PUSH
38574: LD_INT 1
38576: PPUSH
38577: LD_INT 7
38579: PPUSH
38580: CALL_OW 12
38584: ST_TO_ADDR
// case i of 1 :
38585: LD_VAR 0 1
38589: PUSH
38590: LD_INT 1
38592: DOUBLE
38593: EQUAL
38594: IFTRUE 38598
38596: GO 38608
38598: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38599: LD_STRING earthquake(getX(game), 0, 32)
38601: PPUSH
38602: CALL_OW 559
38606: GO 38846
38608: LD_INT 2
38610: DOUBLE
38611: EQUAL
38612: IFTRUE 38616
38614: GO 38630
38616: POP
// begin ToLua ( displayStucuk(); ) ;
38617: LD_STRING displayStucuk();
38619: PPUSH
38620: CALL_OW 559
// ResetFog ;
38624: CALL_OW 335
// end ; 3 :
38628: GO 38846
38630: LD_INT 3
38632: DOUBLE
38633: EQUAL
38634: IFTRUE 38638
38636: GO 38742
38638: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38639: LD_ADDR_VAR 0 2
38643: PUSH
38644: LD_INT 22
38646: PUSH
38647: LD_OWVAR 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 25
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PPUSH
38670: CALL_OW 69
38674: ST_TO_ADDR
// if not tmp then
38675: LD_VAR 0 2
38679: NOT
38680: IFFALSE 38684
// exit ;
38682: GO 38846
// un := tmp [ rand ( 1 , tmp ) ] ;
38684: LD_ADDR_VAR 0 3
38688: PUSH
38689: LD_VAR 0 2
38693: PUSH
38694: LD_INT 1
38696: PPUSH
38697: LD_VAR 0 2
38701: PPUSH
38702: CALL_OW 12
38706: ARRAY
38707: ST_TO_ADDR
// if Crawls ( un ) then
38708: LD_VAR 0 3
38712: PPUSH
38713: CALL_OW 318
38717: IFFALSE 38728
// ComWalk ( un ) ;
38719: LD_VAR 0 3
38723: PPUSH
38724: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38728: LD_VAR 0 3
38732: PPUSH
38733: LD_INT 8
38735: PPUSH
38736: CALL_OW 336
// end ; 4 :
38740: GO 38846
38742: LD_INT 4
38744: DOUBLE
38745: EQUAL
38746: IFTRUE 38750
38748: GO 38824
38750: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38751: LD_ADDR_VAR 0 2
38755: PUSH
38756: LD_INT 22
38758: PUSH
38759: LD_OWVAR 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 30
38770: PUSH
38771: LD_INT 29
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PPUSH
38782: CALL_OW 69
38786: ST_TO_ADDR
// if not tmp then
38787: LD_VAR 0 2
38791: NOT
38792: IFFALSE 38796
// exit ;
38794: GO 38846
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38796: LD_VAR 0 2
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PPUSH
38805: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38809: LD_VAR 0 2
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PPUSH
38818: CALL_OW 65
// end ; 5 .. 7 :
38822: GO 38846
38824: LD_INT 5
38826: DOUBLE
38827: GREATEREQUAL
38828: IFFALSE 38836
38830: LD_INT 7
38832: DOUBLE
38833: LESSEQUAL
38834: IFTRUE 38838
38836: GO 38845
38838: POP
// StreamSibBomb ; end ;
38839: CALL 35083 0 0
38843: GO 38846
38845: POP
// end ;
38846: PPOPN 3
38848: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38849: LD_EXP 63
38853: PUSH
38854: LD_EXP 113
38858: AND
38859: IFFALSE 39015
38861: GO 38863
38863: DISABLE
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38869: LD_ADDR_VAR 0 2
38873: PUSH
38874: LD_INT 81
38876: PUSH
38877: LD_OWVAR 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 21
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 21
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PPUSH
38918: CALL_OW 69
38922: ST_TO_ADDR
// if not tmp then
38923: LD_VAR 0 2
38927: NOT
38928: IFFALSE 38932
// exit ;
38930: GO 39015
// p := 0 ;
38932: LD_ADDR_VAR 0 3
38936: PUSH
38937: LD_INT 0
38939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38940: LD_INT 35
38942: PPUSH
38943: CALL_OW 67
// p := p + 1 ;
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: LD_VAR 0 3
38956: PUSH
38957: LD_INT 1
38959: PLUS
38960: ST_TO_ADDR
// for i in tmp do
38961: LD_ADDR_VAR 0 1
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: FOR_IN
38972: IFFALSE 39003
// if GetLives ( i ) < 1000 then
38974: LD_VAR 0 1
38978: PPUSH
38979: CALL_OW 256
38983: PUSH
38984: LD_INT 1000
38986: LESS
38987: IFFALSE 39001
// SetLives ( i , 1000 ) ;
38989: LD_VAR 0 1
38993: PPUSH
38994: LD_INT 1000
38996: PPUSH
38997: CALL_OW 234
39001: GO 38971
39003: POP
39004: POP
// until p > 20 ;
39005: LD_VAR 0 3
39009: PUSH
39010: LD_INT 20
39012: GREATER
39013: IFFALSE 38940
// end ;
39015: PPOPN 3
39017: END
// every 0 0$1 trigger StreamModeActive and sTime do
39018: LD_EXP 63
39022: PUSH
39023: LD_EXP 114
39027: AND
39028: IFFALSE 39063
39030: GO 39032
39032: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
39033: LD_INT 28
39035: PPUSH
39036: LD_OWVAR 2
39040: PPUSH
39041: LD_INT 2
39043: PPUSH
39044: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
39048: LD_INT 30
39050: PPUSH
39051: LD_OWVAR 2
39055: PPUSH
39056: LD_INT 2
39058: PPUSH
39059: CALL_OW 322
// end ;
39063: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
39064: LD_EXP 63
39068: PUSH
39069: LD_EXP 115
39073: AND
39074: IFFALSE 39195
39076: GO 39078
39078: DISABLE
39079: LD_INT 0
39081: PPUSH
39082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39083: LD_ADDR_VAR 0 2
39087: PUSH
39088: LD_INT 22
39090: PUSH
39091: LD_OWVAR 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 21
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: LD_INT 23
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: PPUSH
39132: CALL_OW 69
39136: ST_TO_ADDR
// if not tmp then
39137: LD_VAR 0 2
39141: NOT
39142: IFFALSE 39146
// exit ;
39144: GO 39195
// for i in tmp do
39146: LD_ADDR_VAR 0 1
39150: PUSH
39151: LD_VAR 0 2
39155: PUSH
39156: FOR_IN
39157: IFFALSE 39193
// begin if Crawls ( i ) then
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 318
39168: IFFALSE 39179
// ComWalk ( i ) ;
39170: LD_VAR 0 1
39174: PPUSH
39175: CALL_OW 138
// SetClass ( i , 2 ) ;
39179: LD_VAR 0 1
39183: PPUSH
39184: LD_INT 2
39186: PPUSH
39187: CALL_OW 336
// end ;
39191: GO 39156
39193: POP
39194: POP
// end ;
39195: PPOPN 2
39197: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39198: LD_EXP 63
39202: PUSH
39203: LD_EXP 116
39207: AND
39208: IFFALSE 39496
39210: GO 39212
39212: DISABLE
39213: LD_INT 0
39215: PPUSH
39216: PPUSH
39217: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39218: LD_OWVAR 2
39222: PPUSH
39223: LD_INT 9
39225: PPUSH
39226: LD_INT 1
39228: PPUSH
39229: LD_INT 1
39231: PPUSH
39232: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39236: LD_INT 9
39238: PPUSH
39239: LD_OWVAR 2
39243: PPUSH
39244: CALL_OW 343
// uc_side := 9 ;
39248: LD_ADDR_OWVAR 20
39252: PUSH
39253: LD_INT 9
39255: ST_TO_ADDR
// uc_nation := 2 ;
39256: LD_ADDR_OWVAR 21
39260: PUSH
39261: LD_INT 2
39263: ST_TO_ADDR
// hc_name := Dark Warrior ;
39264: LD_ADDR_OWVAR 26
39268: PUSH
39269: LD_STRING Dark Warrior
39271: ST_TO_ADDR
// hc_gallery :=  ;
39272: LD_ADDR_OWVAR 33
39276: PUSH
39277: LD_STRING 
39279: ST_TO_ADDR
// hc_noskilllimit := true ;
39280: LD_ADDR_OWVAR 76
39284: PUSH
39285: LD_INT 1
39287: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39288: LD_ADDR_OWVAR 31
39292: PUSH
39293: LD_INT 30
39295: PUSH
39296: LD_INT 30
39298: PUSH
39299: LD_INT 30
39301: PUSH
39302: LD_INT 30
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: ST_TO_ADDR
// un := CreateHuman ;
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: CALL_OW 44
39320: ST_TO_ADDR
// hc_noskilllimit := false ;
39321: LD_ADDR_OWVAR 76
39325: PUSH
39326: LD_INT 0
39328: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39329: LD_VAR 0 3
39333: PPUSH
39334: LD_INT 1
39336: PPUSH
39337: CALL_OW 51
// ToLua ( playRanger() ) ;
39341: LD_STRING playRanger()
39343: PPUSH
39344: CALL_OW 559
// p := 0 ;
39348: LD_ADDR_VAR 0 2
39352: PUSH
39353: LD_INT 0
39355: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39356: LD_INT 35
39358: PPUSH
39359: CALL_OW 67
// p := p + 1 ;
39363: LD_ADDR_VAR 0 2
39367: PUSH
39368: LD_VAR 0 2
39372: PUSH
39373: LD_INT 1
39375: PLUS
39376: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39377: LD_VAR 0 3
39381: PPUSH
39382: CALL_OW 256
39386: PUSH
39387: LD_INT 1000
39389: LESS
39390: IFFALSE 39404
// SetLives ( un , 1000 ) ;
39392: LD_VAR 0 3
39396: PPUSH
39397: LD_INT 1000
39399: PPUSH
39400: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39404: LD_VAR 0 3
39408: PPUSH
39409: LD_INT 81
39411: PUSH
39412: LD_OWVAR 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 91
39423: PUSH
39424: LD_VAR 0 3
39428: PUSH
39429: LD_INT 30
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PPUSH
39441: CALL_OW 69
39445: PPUSH
39446: LD_VAR 0 3
39450: PPUSH
39451: CALL_OW 74
39455: PPUSH
39456: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39460: LD_VAR 0 2
39464: PUSH
39465: LD_INT 80
39467: GREATER
39468: PUSH
39469: LD_VAR 0 3
39473: PPUSH
39474: CALL_OW 301
39478: OR
39479: IFFALSE 39356
// if un then
39481: LD_VAR 0 3
39485: IFFALSE 39496
// RemoveUnit ( un ) ;
39487: LD_VAR 0 3
39491: PPUSH
39492: CALL_OW 64
// end ;
39496: PPOPN 3
39498: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
39499: LD_EXP 117
39503: IFFALSE 39619
39505: GO 39507
39507: DISABLE
39508: LD_INT 0
39510: PPUSH
39511: PPUSH
39512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
39513: LD_ADDR_VAR 0 2
39517: PUSH
39518: LD_INT 81
39520: PUSH
39521: LD_OWVAR 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 21
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PPUSH
39544: CALL_OW 69
39548: ST_TO_ADDR
// ToLua ( playComputer() ) ;
39549: LD_STRING playComputer()
39551: PPUSH
39552: CALL_OW 559
// if not tmp then
39556: LD_VAR 0 2
39560: NOT
39561: IFFALSE 39565
// exit ;
39563: GO 39619
// for i in tmp do
39565: LD_ADDR_VAR 0 1
39569: PUSH
39570: LD_VAR 0 2
39574: PUSH
39575: FOR_IN
39576: IFFALSE 39617
// for j := 1 to 4 do
39578: LD_ADDR_VAR 0 3
39582: PUSH
39583: DOUBLE
39584: LD_INT 1
39586: DEC
39587: ST_TO_ADDR
39588: LD_INT 4
39590: PUSH
39591: FOR_TO
39592: IFFALSE 39613
// SetSkill ( i , j , 10 ) ;
39594: LD_VAR 0 1
39598: PPUSH
39599: LD_VAR 0 3
39603: PPUSH
39604: LD_INT 10
39606: PPUSH
39607: CALL_OW 237
39611: GO 39591
39613: POP
39614: POP
39615: GO 39575
39617: POP
39618: POP
// end ;
39619: PPOPN 3
39621: END
// every 0 0$1 trigger s30 do var i , tmp ;
39622: LD_EXP 118
39626: IFFALSE 39695
39628: GO 39630
39630: DISABLE
39631: LD_INT 0
39633: PPUSH
39634: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39635: LD_ADDR_VAR 0 2
39639: PUSH
39640: LD_INT 22
39642: PUSH
39643: LD_OWVAR 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PPUSH
39652: CALL_OW 69
39656: ST_TO_ADDR
// if not tmp then
39657: LD_VAR 0 2
39661: NOT
39662: IFFALSE 39666
// exit ;
39664: GO 39695
// for i in tmp do
39666: LD_ADDR_VAR 0 1
39670: PUSH
39671: LD_VAR 0 2
39675: PUSH
39676: FOR_IN
39677: IFFALSE 39693
// SetLives ( i , 300 ) ;
39679: LD_VAR 0 1
39683: PPUSH
39684: LD_INT 300
39686: PPUSH
39687: CALL_OW 234
39691: GO 39676
39693: POP
39694: POP
// end ;
39695: PPOPN 2
39697: END
// every 0 0$1 trigger s60 do var i , tmp ;
39698: LD_EXP 119
39702: IFFALSE 39771
39704: GO 39706
39706: DISABLE
39707: LD_INT 0
39709: PPUSH
39710: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39711: LD_ADDR_VAR 0 2
39715: PUSH
39716: LD_INT 22
39718: PUSH
39719: LD_OWVAR 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PPUSH
39728: CALL_OW 69
39732: ST_TO_ADDR
// if not tmp then
39733: LD_VAR 0 2
39737: NOT
39738: IFFALSE 39742
// exit ;
39740: GO 39771
// for i in tmp do
39742: LD_ADDR_VAR 0 1
39746: PUSH
39747: LD_VAR 0 2
39751: PUSH
39752: FOR_IN
39753: IFFALSE 39769
// SetLives ( i , 600 ) ;
39755: LD_VAR 0 1
39759: PPUSH
39760: LD_INT 600
39762: PPUSH
39763: CALL_OW 234
39767: GO 39752
39769: POP
39770: POP
// end ;
39771: PPOPN 2
39773: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39774: LD_INT 0
39776: PPUSH
// case cmd of 301 :
39777: LD_VAR 0 1
39781: PUSH
39782: LD_INT 301
39784: DOUBLE
39785: EQUAL
39786: IFTRUE 39790
39788: GO 39822
39790: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39791: LD_VAR 0 6
39795: PPUSH
39796: LD_VAR 0 7
39800: PPUSH
39801: LD_VAR 0 8
39805: PPUSH
39806: LD_VAR 0 4
39810: PPUSH
39811: LD_VAR 0 5
39815: PPUSH
39816: CALL 41023 0 5
39820: GO 39943
39822: LD_INT 302
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39830
39828: GO 39867
39830: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39831: LD_VAR 0 6
39835: PPUSH
39836: LD_VAR 0 7
39840: PPUSH
39841: LD_VAR 0 8
39845: PPUSH
39846: LD_VAR 0 9
39850: PPUSH
39851: LD_VAR 0 4
39855: PPUSH
39856: LD_VAR 0 5
39860: PPUSH
39861: CALL 41114 0 6
39865: GO 39943
39867: LD_INT 303
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39875
39873: GO 39912
39875: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39876: LD_VAR 0 6
39880: PPUSH
39881: LD_VAR 0 7
39885: PPUSH
39886: LD_VAR 0 8
39890: PPUSH
39891: LD_VAR 0 9
39895: PPUSH
39896: LD_VAR 0 4
39900: PPUSH
39901: LD_VAR 0 5
39905: PPUSH
39906: CALL 39948 0 6
39910: GO 39943
39912: LD_INT 304
39914: DOUBLE
39915: EQUAL
39916: IFTRUE 39920
39918: GO 39942
39920: POP
// hHackTeleport ( unit , x , y ) ; end ;
39921: LD_VAR 0 2
39925: PPUSH
39926: LD_VAR 0 4
39930: PPUSH
39931: LD_VAR 0 5
39935: PPUSH
39936: CALL 41707 0 3
39940: GO 39943
39942: POP
// end ;
39943: LD_VAR 0 12
39947: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39948: LD_INT 0
39950: PPUSH
39951: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39952: LD_VAR 0 1
39956: PUSH
39957: LD_INT 1
39959: LESS
39960: PUSH
39961: LD_VAR 0 1
39965: PUSH
39966: LD_INT 3
39968: GREATER
39969: OR
39970: PUSH
39971: LD_VAR 0 5
39975: PPUSH
39976: LD_VAR 0 6
39980: PPUSH
39981: CALL_OW 428
39985: OR
39986: IFFALSE 39990
// exit ;
39988: GO 40710
// uc_side := your_side ;
39990: LD_ADDR_OWVAR 20
39994: PUSH
39995: LD_OWVAR 2
39999: ST_TO_ADDR
// uc_nation := nation ;
40000: LD_ADDR_OWVAR 21
40004: PUSH
40005: LD_VAR 0 1
40009: ST_TO_ADDR
// bc_level = 1 ;
40010: LD_ADDR_OWVAR 43
40014: PUSH
40015: LD_INT 1
40017: ST_TO_ADDR
// case btype of 1 :
40018: LD_VAR 0 2
40022: PUSH
40023: LD_INT 1
40025: DOUBLE
40026: EQUAL
40027: IFTRUE 40031
40029: GO 40042
40031: POP
// bc_type := b_depot ; 2 :
40032: LD_ADDR_OWVAR 42
40036: PUSH
40037: LD_INT 0
40039: ST_TO_ADDR
40040: GO 40654
40042: LD_INT 2
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40061
40050: POP
// bc_type := b_warehouse ; 3 :
40051: LD_ADDR_OWVAR 42
40055: PUSH
40056: LD_INT 1
40058: ST_TO_ADDR
40059: GO 40654
40061: LD_INT 3
40063: DOUBLE
40064: EQUAL
40065: IFTRUE 40069
40067: GO 40080
40069: POP
// bc_type := b_lab ; 4 .. 9 :
40070: LD_ADDR_OWVAR 42
40074: PUSH
40075: LD_INT 6
40077: ST_TO_ADDR
40078: GO 40654
40080: LD_INT 4
40082: DOUBLE
40083: GREATEREQUAL
40084: IFFALSE 40092
40086: LD_INT 9
40088: DOUBLE
40089: LESSEQUAL
40090: IFTRUE 40094
40092: GO 40146
40094: POP
// begin bc_type := b_lab_half ;
40095: LD_ADDR_OWVAR 42
40099: PUSH
40100: LD_INT 7
40102: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
40103: LD_ADDR_OWVAR 44
40107: PUSH
40108: LD_INT 10
40110: PUSH
40111: LD_INT 11
40113: PUSH
40114: LD_INT 12
40116: PUSH
40117: LD_INT 15
40119: PUSH
40120: LD_INT 14
40122: PUSH
40123: LD_INT 13
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: LD_VAR 0 2
40138: PUSH
40139: LD_INT 3
40141: MINUS
40142: ARRAY
40143: ST_TO_ADDR
// end ; 10 .. 13 :
40144: GO 40654
40146: LD_INT 10
40148: DOUBLE
40149: GREATEREQUAL
40150: IFFALSE 40158
40152: LD_INT 13
40154: DOUBLE
40155: LESSEQUAL
40156: IFTRUE 40160
40158: GO 40237
40160: POP
// begin bc_type := b_lab_full ;
40161: LD_ADDR_OWVAR 42
40165: PUSH
40166: LD_INT 8
40168: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40169: LD_ADDR_OWVAR 44
40173: PUSH
40174: LD_INT 10
40176: PUSH
40177: LD_INT 12
40179: PUSH
40180: LD_INT 14
40182: PUSH
40183: LD_INT 13
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: PUSH
40192: LD_VAR 0 2
40196: PUSH
40197: LD_INT 9
40199: MINUS
40200: ARRAY
40201: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40202: LD_ADDR_OWVAR 45
40206: PUSH
40207: LD_INT 11
40209: PUSH
40210: LD_INT 15
40212: PUSH
40213: LD_INT 12
40215: PUSH
40216: LD_INT 15
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: PUSH
40225: LD_VAR 0 2
40229: PUSH
40230: LD_INT 9
40232: MINUS
40233: ARRAY
40234: ST_TO_ADDR
// end ; 14 :
40235: GO 40654
40237: LD_INT 14
40239: DOUBLE
40240: EQUAL
40241: IFTRUE 40245
40243: GO 40256
40245: POP
// bc_type := b_workshop ; 15 :
40246: LD_ADDR_OWVAR 42
40250: PUSH
40251: LD_INT 2
40253: ST_TO_ADDR
40254: GO 40654
40256: LD_INT 15
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40264
40262: GO 40275
40264: POP
// bc_type := b_factory ; 16 :
40265: LD_ADDR_OWVAR 42
40269: PUSH
40270: LD_INT 3
40272: ST_TO_ADDR
40273: GO 40654
40275: LD_INT 16
40277: DOUBLE
40278: EQUAL
40279: IFTRUE 40283
40281: GO 40294
40283: POP
// bc_type := b_ext_gun ; 17 :
40284: LD_ADDR_OWVAR 42
40288: PUSH
40289: LD_INT 17
40291: ST_TO_ADDR
40292: GO 40654
40294: LD_INT 17
40296: DOUBLE
40297: EQUAL
40298: IFTRUE 40302
40300: GO 40330
40302: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40303: LD_ADDR_OWVAR 42
40307: PUSH
40308: LD_INT 19
40310: PUSH
40311: LD_INT 23
40313: PUSH
40314: LD_INT 19
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: PUSH
40322: LD_VAR 0 1
40326: ARRAY
40327: ST_TO_ADDR
40328: GO 40654
40330: LD_INT 18
40332: DOUBLE
40333: EQUAL
40334: IFTRUE 40338
40336: GO 40349
40338: POP
// bc_type := b_ext_radar ; 19 :
40339: LD_ADDR_OWVAR 42
40343: PUSH
40344: LD_INT 20
40346: ST_TO_ADDR
40347: GO 40654
40349: LD_INT 19
40351: DOUBLE
40352: EQUAL
40353: IFTRUE 40357
40355: GO 40368
40357: POP
// bc_type := b_ext_radio ; 20 :
40358: LD_ADDR_OWVAR 42
40362: PUSH
40363: LD_INT 22
40365: ST_TO_ADDR
40366: GO 40654
40368: LD_INT 20
40370: DOUBLE
40371: EQUAL
40372: IFTRUE 40376
40374: GO 40387
40376: POP
// bc_type := b_ext_siberium ; 21 :
40377: LD_ADDR_OWVAR 42
40381: PUSH
40382: LD_INT 21
40384: ST_TO_ADDR
40385: GO 40654
40387: LD_INT 21
40389: DOUBLE
40390: EQUAL
40391: IFTRUE 40395
40393: GO 40406
40395: POP
// bc_type := b_ext_computer ; 22 :
40396: LD_ADDR_OWVAR 42
40400: PUSH
40401: LD_INT 24
40403: ST_TO_ADDR
40404: GO 40654
40406: LD_INT 22
40408: DOUBLE
40409: EQUAL
40410: IFTRUE 40414
40412: GO 40425
40414: POP
// bc_type := b_ext_track ; 23 :
40415: LD_ADDR_OWVAR 42
40419: PUSH
40420: LD_INT 16
40422: ST_TO_ADDR
40423: GO 40654
40425: LD_INT 23
40427: DOUBLE
40428: EQUAL
40429: IFTRUE 40433
40431: GO 40444
40433: POP
// bc_type := b_ext_laser ; 24 :
40434: LD_ADDR_OWVAR 42
40438: PUSH
40439: LD_INT 25
40441: ST_TO_ADDR
40442: GO 40654
40444: LD_INT 24
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40463
40452: POP
// bc_type := b_control_tower ; 25 :
40453: LD_ADDR_OWVAR 42
40457: PUSH
40458: LD_INT 36
40460: ST_TO_ADDR
40461: GO 40654
40463: LD_INT 25
40465: DOUBLE
40466: EQUAL
40467: IFTRUE 40471
40469: GO 40482
40471: POP
// bc_type := b_breastwork ; 26 :
40472: LD_ADDR_OWVAR 42
40476: PUSH
40477: LD_INT 31
40479: ST_TO_ADDR
40480: GO 40654
40482: LD_INT 26
40484: DOUBLE
40485: EQUAL
40486: IFTRUE 40490
40488: GO 40501
40490: POP
// bc_type := b_bunker ; 27 :
40491: LD_ADDR_OWVAR 42
40495: PUSH
40496: LD_INT 32
40498: ST_TO_ADDR
40499: GO 40654
40501: LD_INT 27
40503: DOUBLE
40504: EQUAL
40505: IFTRUE 40509
40507: GO 40520
40509: POP
// bc_type := b_turret ; 28 :
40510: LD_ADDR_OWVAR 42
40514: PUSH
40515: LD_INT 33
40517: ST_TO_ADDR
40518: GO 40654
40520: LD_INT 28
40522: DOUBLE
40523: EQUAL
40524: IFTRUE 40528
40526: GO 40539
40528: POP
// bc_type := b_armoury ; 29 :
40529: LD_ADDR_OWVAR 42
40533: PUSH
40534: LD_INT 4
40536: ST_TO_ADDR
40537: GO 40654
40539: LD_INT 29
40541: DOUBLE
40542: EQUAL
40543: IFTRUE 40547
40545: GO 40558
40547: POP
// bc_type := b_barracks ; 30 :
40548: LD_ADDR_OWVAR 42
40552: PUSH
40553: LD_INT 5
40555: ST_TO_ADDR
40556: GO 40654
40558: LD_INT 30
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40577
40566: POP
// bc_type := b_solar_power ; 31 :
40567: LD_ADDR_OWVAR 42
40571: PUSH
40572: LD_INT 27
40574: ST_TO_ADDR
40575: GO 40654
40577: LD_INT 31
40579: DOUBLE
40580: EQUAL
40581: IFTRUE 40585
40583: GO 40596
40585: POP
// bc_type := b_oil_power ; 32 :
40586: LD_ADDR_OWVAR 42
40590: PUSH
40591: LD_INT 26
40593: ST_TO_ADDR
40594: GO 40654
40596: LD_INT 32
40598: DOUBLE
40599: EQUAL
40600: IFTRUE 40604
40602: GO 40615
40604: POP
// bc_type := b_siberite_power ; 33 :
40605: LD_ADDR_OWVAR 42
40609: PUSH
40610: LD_INT 28
40612: ST_TO_ADDR
40613: GO 40654
40615: LD_INT 33
40617: DOUBLE
40618: EQUAL
40619: IFTRUE 40623
40621: GO 40634
40623: POP
// bc_type := b_oil_mine ; 34 :
40624: LD_ADDR_OWVAR 42
40628: PUSH
40629: LD_INT 29
40631: ST_TO_ADDR
40632: GO 40654
40634: LD_INT 34
40636: DOUBLE
40637: EQUAL
40638: IFTRUE 40642
40640: GO 40653
40642: POP
// bc_type := b_siberite_mine ; end ;
40643: LD_ADDR_OWVAR 42
40647: PUSH
40648: LD_INT 30
40650: ST_TO_ADDR
40651: GO 40654
40653: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40654: LD_ADDR_VAR 0 8
40658: PUSH
40659: LD_VAR 0 5
40663: PPUSH
40664: LD_VAR 0 6
40668: PPUSH
40669: LD_VAR 0 3
40673: PPUSH
40674: CALL_OW 47
40678: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40679: LD_OWVAR 42
40683: PUSH
40684: LD_INT 32
40686: PUSH
40687: LD_INT 33
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: IN
40694: IFFALSE 40710
// PlaceWeaponTurret ( b , weapon ) ;
40696: LD_VAR 0 8
40700: PPUSH
40701: LD_VAR 0 4
40705: PPUSH
40706: CALL_OW 431
// end ;
40710: LD_VAR 0 7
40714: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40715: LD_INT 0
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40721: LD_ADDR_VAR 0 4
40725: PUSH
40726: LD_INT 22
40728: PUSH
40729: LD_OWVAR 2
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 30
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 30
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 69
40774: ST_TO_ADDR
// if not tmp then
40775: LD_VAR 0 4
40779: NOT
40780: IFFALSE 40784
// exit ;
40782: GO 40843
// for i in tmp do
40784: LD_ADDR_VAR 0 2
40788: PUSH
40789: LD_VAR 0 4
40793: PUSH
40794: FOR_IN
40795: IFFALSE 40841
// for j = 1 to 3 do
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: DOUBLE
40803: LD_INT 1
40805: DEC
40806: ST_TO_ADDR
40807: LD_INT 3
40809: PUSH
40810: FOR_TO
40811: IFFALSE 40837
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40813: LD_VAR 0 2
40817: PPUSH
40818: CALL_OW 274
40822: PPUSH
40823: LD_VAR 0 3
40827: PPUSH
40828: LD_INT 99999
40830: PPUSH
40831: CALL_OW 277
40835: GO 40810
40837: POP
40838: POP
40839: GO 40794
40841: POP
40842: POP
// end ;
40843: LD_VAR 0 1
40847: RET
// export function hHackSetLevel10 ; var i , j ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
40852: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40853: LD_ADDR_VAR 0 2
40857: PUSH
40858: LD_INT 21
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PPUSH
40868: CALL_OW 69
40872: PUSH
40873: FOR_IN
40874: IFFALSE 40926
// if IsSelected ( i ) then
40876: LD_VAR 0 2
40880: PPUSH
40881: CALL_OW 306
40885: IFFALSE 40924
// begin for j := 1 to 4 do
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: DOUBLE
40893: LD_INT 1
40895: DEC
40896: ST_TO_ADDR
40897: LD_INT 4
40899: PUSH
40900: FOR_TO
40901: IFFALSE 40922
// SetSkill ( i , j , 10 ) ;
40903: LD_VAR 0 2
40907: PPUSH
40908: LD_VAR 0 3
40912: PPUSH
40913: LD_INT 10
40915: PPUSH
40916: CALL_OW 237
40920: GO 40900
40922: POP
40923: POP
// end ;
40924: GO 40873
40926: POP
40927: POP
// end ;
40928: LD_VAR 0 1
40932: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40933: LD_INT 0
40935: PPUSH
40936: PPUSH
40937: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40938: LD_ADDR_VAR 0 2
40942: PUSH
40943: LD_INT 22
40945: PUSH
40946: LD_OWVAR 2
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 21
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PPUSH
40969: CALL_OW 69
40973: PUSH
40974: FOR_IN
40975: IFFALSE 41016
// begin for j := 1 to 4 do
40977: LD_ADDR_VAR 0 3
40981: PUSH
40982: DOUBLE
40983: LD_INT 1
40985: DEC
40986: ST_TO_ADDR
40987: LD_INT 4
40989: PUSH
40990: FOR_TO
40991: IFFALSE 41012
// SetSkill ( i , j , 10 ) ;
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: LD_INT 10
41005: PPUSH
41006: CALL_OW 237
41010: GO 40990
41012: POP
41013: POP
// end ;
41014: GO 40974
41016: POP
41017: POP
// end ;
41018: LD_VAR 0 1
41022: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
41023: LD_INT 0
41025: PPUSH
// uc_side := your_side ;
41026: LD_ADDR_OWVAR 20
41030: PUSH
41031: LD_OWVAR 2
41035: ST_TO_ADDR
// uc_nation := nation ;
41036: LD_ADDR_OWVAR 21
41040: PUSH
41041: LD_VAR 0 1
41045: ST_TO_ADDR
// InitHc ;
41046: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41050: LD_INT 0
41052: PPUSH
41053: LD_VAR 0 2
41057: PPUSH
41058: LD_VAR 0 3
41062: PPUSH
41063: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
41067: LD_VAR 0 4
41071: PPUSH
41072: LD_VAR 0 5
41076: PPUSH
41077: CALL_OW 428
41081: PUSH
41082: LD_INT 0
41084: EQUAL
41085: IFFALSE 41109
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
41087: CALL_OW 44
41091: PPUSH
41092: LD_VAR 0 4
41096: PPUSH
41097: LD_VAR 0 5
41101: PPUSH
41102: LD_INT 1
41104: PPUSH
41105: CALL_OW 48
// end ;
41109: LD_VAR 0 6
41113: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
// uc_side := your_side ;
41118: LD_ADDR_OWVAR 20
41122: PUSH
41123: LD_OWVAR 2
41127: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41128: LD_VAR 0 1
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 4
41144: PUSH
41145: LD_INT 5
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: IN
41155: IFFALSE 41167
// uc_nation := nation_american else
41157: LD_ADDR_OWVAR 21
41161: PUSH
41162: LD_INT 1
41164: ST_TO_ADDR
41165: GO 41210
// if chassis in [ 11 , 12 , 13 , 14 ] then
41167: LD_VAR 0 1
41171: PUSH
41172: LD_INT 11
41174: PUSH
41175: LD_INT 12
41177: PUSH
41178: LD_INT 13
41180: PUSH
41181: LD_INT 14
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: IN
41190: IFFALSE 41202
// uc_nation := nation_arabian else
41192: LD_ADDR_OWVAR 21
41196: PUSH
41197: LD_INT 2
41199: ST_TO_ADDR
41200: GO 41210
// uc_nation := nation_russian ;
41202: LD_ADDR_OWVAR 21
41206: PUSH
41207: LD_INT 3
41209: ST_TO_ADDR
// vc_chassis := chassis ;
41210: LD_ADDR_OWVAR 37
41214: PUSH
41215: LD_VAR 0 1
41219: ST_TO_ADDR
// vc_engine := engine ;
41220: LD_ADDR_OWVAR 39
41224: PUSH
41225: LD_VAR 0 2
41229: ST_TO_ADDR
// vc_control := control ;
41230: LD_ADDR_OWVAR 38
41234: PUSH
41235: LD_VAR 0 3
41239: ST_TO_ADDR
// vc_weapon := weapon ;
41240: LD_ADDR_OWVAR 40
41244: PUSH
41245: LD_VAR 0 4
41249: ST_TO_ADDR
// un := CreateVehicle ;
41250: LD_ADDR_VAR 0 8
41254: PUSH
41255: CALL_OW 45
41259: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41260: LD_VAR 0 8
41264: PPUSH
41265: LD_INT 0
41267: PPUSH
41268: LD_INT 5
41270: PPUSH
41271: CALL_OW 12
41275: PPUSH
41276: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41280: LD_VAR 0 8
41284: PPUSH
41285: LD_VAR 0 5
41289: PPUSH
41290: LD_VAR 0 6
41294: PPUSH
41295: LD_INT 1
41297: PPUSH
41298: CALL_OW 48
// end ;
41302: LD_VAR 0 7
41306: RET
// export hInvincible ; every 1 do
41307: GO 41309
41309: DISABLE
// hInvincible := [ ] ;
41310: LD_ADDR_EXP 120
41314: PUSH
41315: EMPTY
41316: ST_TO_ADDR
41317: END
// every 10 do var i ;
41318: GO 41320
41320: DISABLE
41321: LD_INT 0
41323: PPUSH
// begin enable ;
41324: ENABLE
// if not hInvincible then
41325: LD_EXP 120
41329: NOT
41330: IFFALSE 41334
// exit ;
41332: GO 41378
// for i in hInvincible do
41334: LD_ADDR_VAR 0 1
41338: PUSH
41339: LD_EXP 120
41343: PUSH
41344: FOR_IN
41345: IFFALSE 41376
// if GetLives ( i ) < 1000 then
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 256
41356: PUSH
41357: LD_INT 1000
41359: LESS
41360: IFFALSE 41374
// SetLives ( i , 1000 ) ;
41362: LD_VAR 0 1
41366: PPUSH
41367: LD_INT 1000
41369: PPUSH
41370: CALL_OW 234
41374: GO 41344
41376: POP
41377: POP
// end ;
41378: PPOPN 1
41380: END
// export function hHackInvincible ; var i ; begin
41381: LD_INT 0
41383: PPUSH
41384: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41385: LD_ADDR_VAR 0 2
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 21
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 21
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: PPUSH
41418: CALL_OW 69
41422: PUSH
41423: FOR_IN
41424: IFFALSE 41485
// if IsSelected ( i ) then
41426: LD_VAR 0 2
41430: PPUSH
41431: CALL_OW 306
41435: IFFALSE 41483
// begin if i in hInvincible then
41437: LD_VAR 0 2
41441: PUSH
41442: LD_EXP 120
41446: IN
41447: IFFALSE 41467
// hInvincible := hInvincible diff i else
41449: LD_ADDR_EXP 120
41453: PUSH
41454: LD_EXP 120
41458: PUSH
41459: LD_VAR 0 2
41463: DIFF
41464: ST_TO_ADDR
41465: GO 41483
// hInvincible := hInvincible union i ;
41467: LD_ADDR_EXP 120
41471: PUSH
41472: LD_EXP 120
41476: PUSH
41477: LD_VAR 0 2
41481: UNION
41482: ST_TO_ADDR
// end ;
41483: GO 41423
41485: POP
41486: POP
// end ;
41487: LD_VAR 0 1
41491: RET
// export function hHackInvisible ; var i , j ; begin
41492: LD_INT 0
41494: PPUSH
41495: PPUSH
41496: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41497: LD_ADDR_VAR 0 2
41501: PUSH
41502: LD_INT 21
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PPUSH
41512: CALL_OW 69
41516: PUSH
41517: FOR_IN
41518: IFFALSE 41542
// if IsSelected ( i ) then
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL_OW 306
41529: IFFALSE 41540
// ComForceInvisible ( i ) ;
41531: LD_VAR 0 2
41535: PPUSH
41536: CALL_OW 496
41540: GO 41517
41542: POP
41543: POP
// end ;
41544: LD_VAR 0 1
41548: RET
// export function hHackChangeYourSide ; begin
41549: LD_INT 0
41551: PPUSH
// if your_side = 8 then
41552: LD_OWVAR 2
41556: PUSH
41557: LD_INT 8
41559: EQUAL
41560: IFFALSE 41572
// your_side := 0 else
41562: LD_ADDR_OWVAR 2
41566: PUSH
41567: LD_INT 0
41569: ST_TO_ADDR
41570: GO 41586
// your_side := your_side + 1 ;
41572: LD_ADDR_OWVAR 2
41576: PUSH
41577: LD_OWVAR 2
41581: PUSH
41582: LD_INT 1
41584: PLUS
41585: ST_TO_ADDR
// end ;
41586: LD_VAR 0 1
41590: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41591: LD_INT 0
41593: PPUSH
41594: PPUSH
41595: PPUSH
// for i in all_units do
41596: LD_ADDR_VAR 0 2
41600: PUSH
41601: LD_OWVAR 3
41605: PUSH
41606: FOR_IN
41607: IFFALSE 41685
// if IsSelected ( i ) then
41609: LD_VAR 0 2
41613: PPUSH
41614: CALL_OW 306
41618: IFFALSE 41683
// begin j := GetSide ( i ) ;
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_VAR 0 2
41629: PPUSH
41630: CALL_OW 255
41634: ST_TO_ADDR
// if j = 8 then
41635: LD_VAR 0 3
41639: PUSH
41640: LD_INT 8
41642: EQUAL
41643: IFFALSE 41655
// j := 0 else
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: LD_INT 0
41652: ST_TO_ADDR
41653: GO 41669
// j := j + 1 ;
41655: LD_ADDR_VAR 0 3
41659: PUSH
41660: LD_VAR 0 3
41664: PUSH
41665: LD_INT 1
41667: PLUS
41668: ST_TO_ADDR
// SetSide ( i , j ) ;
41669: LD_VAR 0 2
41673: PPUSH
41674: LD_VAR 0 3
41678: PPUSH
41679: CALL_OW 235
// end ;
41683: GO 41606
41685: POP
41686: POP
// end ;
41687: LD_VAR 0 1
41691: RET
// export function hHackFog ; begin
41692: LD_INT 0
41694: PPUSH
// FogOff ( true ) ;
41695: LD_INT 1
41697: PPUSH
41698: CALL_OW 344
// end ;
41702: LD_VAR 0 1
41706: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41707: LD_INT 0
41709: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41710: LD_VAR 0 1
41714: PPUSH
41715: LD_VAR 0 2
41719: PPUSH
41720: LD_VAR 0 3
41724: PPUSH
41725: LD_INT 1
41727: PPUSH
41728: LD_INT 1
41730: PPUSH
41731: CALL_OW 483
// CenterOnXY ( x , y ) ;
41735: LD_VAR 0 2
41739: PPUSH
41740: LD_VAR 0 3
41744: PPUSH
41745: CALL_OW 84
// end ; end_of_file
41749: LD_VAR 0 4
41753: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41754: LD_INT 0
41756: PPUSH
41757: PPUSH
// if exist_mode then
41758: LD_VAR 0 2
41762: IFFALSE 41787
// unit := CreateCharacter ( prefix & ident ) else
41764: LD_ADDR_VAR 0 5
41768: PUSH
41769: LD_VAR 0 3
41773: PUSH
41774: LD_VAR 0 1
41778: STR
41779: PPUSH
41780: CALL_OW 34
41784: ST_TO_ADDR
41785: GO 41802
// unit := NewCharacter ( ident ) ;
41787: LD_ADDR_VAR 0 5
41791: PUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: CALL_OW 25
41801: ST_TO_ADDR
// result := unit ;
41802: LD_ADDR_VAR 0 4
41806: PUSH
41807: LD_VAR 0 5
41811: ST_TO_ADDR
// end ;
41812: LD_VAR 0 4
41816: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41817: LD_INT 0
41819: PPUSH
41820: PPUSH
// if not side or not nation then
41821: LD_VAR 0 1
41825: NOT
41826: PUSH
41827: LD_VAR 0 2
41831: NOT
41832: OR
41833: IFFALSE 41837
// exit ;
41835: GO 42605
// case nation of nation_american :
41837: LD_VAR 0 2
41841: PUSH
41842: LD_INT 1
41844: DOUBLE
41845: EQUAL
41846: IFTRUE 41850
41848: GO 42064
41850: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41851: LD_ADDR_VAR 0 4
41855: PUSH
41856: LD_INT 35
41858: PUSH
41859: LD_INT 45
41861: PUSH
41862: LD_INT 46
41864: PUSH
41865: LD_INT 47
41867: PUSH
41868: LD_INT 82
41870: PUSH
41871: LD_INT 83
41873: PUSH
41874: LD_INT 84
41876: PUSH
41877: LD_INT 85
41879: PUSH
41880: LD_INT 86
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 6
41891: PUSH
41892: LD_INT 15
41894: PUSH
41895: LD_INT 16
41897: PUSH
41898: LD_INT 7
41900: PUSH
41901: LD_INT 12
41903: PUSH
41904: LD_INT 13
41906: PUSH
41907: LD_INT 10
41909: PUSH
41910: LD_INT 14
41912: PUSH
41913: LD_INT 20
41915: PUSH
41916: LD_INT 21
41918: PUSH
41919: LD_INT 22
41921: PUSH
41922: LD_INT 25
41924: PUSH
41925: LD_INT 32
41927: PUSH
41928: LD_INT 27
41930: PUSH
41931: LD_INT 36
41933: PUSH
41934: LD_INT 69
41936: PUSH
41937: LD_INT 39
41939: PUSH
41940: LD_INT 34
41942: PUSH
41943: LD_INT 40
41945: PUSH
41946: LD_INT 48
41948: PUSH
41949: LD_INT 49
41951: PUSH
41952: LD_INT 50
41954: PUSH
41955: LD_INT 51
41957: PUSH
41958: LD_INT 52
41960: PUSH
41961: LD_INT 53
41963: PUSH
41964: LD_INT 54
41966: PUSH
41967: LD_INT 55
41969: PUSH
41970: LD_INT 56
41972: PUSH
41973: LD_INT 57
41975: PUSH
41976: LD_INT 58
41978: PUSH
41979: LD_INT 59
41981: PUSH
41982: LD_INT 60
41984: PUSH
41985: LD_INT 61
41987: PUSH
41988: LD_INT 62
41990: PUSH
41991: LD_INT 80
41993: PUSH
41994: LD_INT 82
41996: PUSH
41997: LD_INT 83
41999: PUSH
42000: LD_INT 84
42002: PUSH
42003: LD_INT 85
42005: PUSH
42006: LD_INT 86
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: ST_TO_ADDR
42062: GO 42529
42064: LD_INT 2
42066: DOUBLE
42067: EQUAL
42068: IFTRUE 42072
42070: GO 42298
42072: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42073: LD_ADDR_VAR 0 4
42077: PUSH
42078: LD_INT 35
42080: PUSH
42081: LD_INT 45
42083: PUSH
42084: LD_INT 46
42086: PUSH
42087: LD_INT 47
42089: PUSH
42090: LD_INT 82
42092: PUSH
42093: LD_INT 83
42095: PUSH
42096: LD_INT 84
42098: PUSH
42099: LD_INT 85
42101: PUSH
42102: LD_INT 87
42104: PUSH
42105: LD_INT 70
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 11
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 4
42119: PUSH
42120: LD_INT 5
42122: PUSH
42123: LD_INT 6
42125: PUSH
42126: LD_INT 15
42128: PUSH
42129: LD_INT 18
42131: PUSH
42132: LD_INT 7
42134: PUSH
42135: LD_INT 17
42137: PUSH
42138: LD_INT 8
42140: PUSH
42141: LD_INT 20
42143: PUSH
42144: LD_INT 21
42146: PUSH
42147: LD_INT 22
42149: PUSH
42150: LD_INT 72
42152: PUSH
42153: LD_INT 26
42155: PUSH
42156: LD_INT 69
42158: PUSH
42159: LD_INT 39
42161: PUSH
42162: LD_INT 40
42164: PUSH
42165: LD_INT 41
42167: PUSH
42168: LD_INT 42
42170: PUSH
42171: LD_INT 43
42173: PUSH
42174: LD_INT 48
42176: PUSH
42177: LD_INT 49
42179: PUSH
42180: LD_INT 50
42182: PUSH
42183: LD_INT 51
42185: PUSH
42186: LD_INT 52
42188: PUSH
42189: LD_INT 53
42191: PUSH
42192: LD_INT 54
42194: PUSH
42195: LD_INT 55
42197: PUSH
42198: LD_INT 56
42200: PUSH
42201: LD_INT 60
42203: PUSH
42204: LD_INT 61
42206: PUSH
42207: LD_INT 62
42209: PUSH
42210: LD_INT 66
42212: PUSH
42213: LD_INT 67
42215: PUSH
42216: LD_INT 68
42218: PUSH
42219: LD_INT 81
42221: PUSH
42222: LD_INT 82
42224: PUSH
42225: LD_INT 83
42227: PUSH
42228: LD_INT 84
42230: PUSH
42231: LD_INT 85
42233: PUSH
42234: LD_INT 87
42236: PUSH
42237: LD_INT 88
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
42296: GO 42529
42298: LD_INT 3
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42306
42304: GO 42528
42306: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42307: LD_ADDR_VAR 0 4
42311: PUSH
42312: LD_INT 46
42314: PUSH
42315: LD_INT 47
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 82
42326: PUSH
42327: LD_INT 83
42329: PUSH
42330: LD_INT 84
42332: PUSH
42333: LD_INT 85
42335: PUSH
42336: LD_INT 86
42338: PUSH
42339: LD_INT 11
42341: PUSH
42342: LD_INT 9
42344: PUSH
42345: LD_INT 20
42347: PUSH
42348: LD_INT 19
42350: PUSH
42351: LD_INT 21
42353: PUSH
42354: LD_INT 24
42356: PUSH
42357: LD_INT 22
42359: PUSH
42360: LD_INT 25
42362: PUSH
42363: LD_INT 28
42365: PUSH
42366: LD_INT 29
42368: PUSH
42369: LD_INT 30
42371: PUSH
42372: LD_INT 31
42374: PUSH
42375: LD_INT 37
42377: PUSH
42378: LD_INT 38
42380: PUSH
42381: LD_INT 32
42383: PUSH
42384: LD_INT 27
42386: PUSH
42387: LD_INT 33
42389: PUSH
42390: LD_INT 69
42392: PUSH
42393: LD_INT 39
42395: PUSH
42396: LD_INT 34
42398: PUSH
42399: LD_INT 40
42401: PUSH
42402: LD_INT 71
42404: PUSH
42405: LD_INT 23
42407: PUSH
42408: LD_INT 44
42410: PUSH
42411: LD_INT 48
42413: PUSH
42414: LD_INT 49
42416: PUSH
42417: LD_INT 50
42419: PUSH
42420: LD_INT 51
42422: PUSH
42423: LD_INT 52
42425: PUSH
42426: LD_INT 53
42428: PUSH
42429: LD_INT 54
42431: PUSH
42432: LD_INT 55
42434: PUSH
42435: LD_INT 56
42437: PUSH
42438: LD_INT 57
42440: PUSH
42441: LD_INT 58
42443: PUSH
42444: LD_INT 59
42446: PUSH
42447: LD_INT 63
42449: PUSH
42450: LD_INT 64
42452: PUSH
42453: LD_INT 65
42455: PUSH
42456: LD_INT 82
42458: PUSH
42459: LD_INT 83
42461: PUSH
42462: LD_INT 84
42464: PUSH
42465: LD_INT 85
42467: PUSH
42468: LD_INT 86
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
42526: GO 42529
42528: POP
// if state > - 1 and state < 3 then
42529: LD_VAR 0 3
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: GREATER
42538: PUSH
42539: LD_VAR 0 3
42543: PUSH
42544: LD_INT 3
42546: LESS
42547: AND
42548: IFFALSE 42605
// for i in result do
42550: LD_ADDR_VAR 0 5
42554: PUSH
42555: LD_VAR 0 4
42559: PUSH
42560: FOR_IN
42561: IFFALSE 42603
// if GetTech ( i , side ) <> state then
42563: LD_VAR 0 5
42567: PPUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: CALL_OW 321
42577: PUSH
42578: LD_VAR 0 3
42582: NONEQUAL
42583: IFFALSE 42601
// result := result diff i ;
42585: LD_ADDR_VAR 0 4
42589: PUSH
42590: LD_VAR 0 4
42594: PUSH
42595: LD_VAR 0 5
42599: DIFF
42600: ST_TO_ADDR
42601: GO 42560
42603: POP
42604: POP
// end ;
42605: LD_VAR 0 4
42609: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42610: LD_INT 0
42612: PPUSH
42613: PPUSH
42614: PPUSH
// result := true ;
42615: LD_ADDR_VAR 0 3
42619: PUSH
42620: LD_INT 1
42622: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 2
42632: PPUSH
42633: CALL_OW 480
42637: ST_TO_ADDR
// if not tmp then
42638: LD_VAR 0 5
42642: NOT
42643: IFFALSE 42647
// exit ;
42645: GO 42696
// for i in tmp do
42647: LD_ADDR_VAR 0 4
42651: PUSH
42652: LD_VAR 0 5
42656: PUSH
42657: FOR_IN
42658: IFFALSE 42694
// if GetTech ( i , side ) <> state_researched then
42660: LD_VAR 0 4
42664: PPUSH
42665: LD_VAR 0 1
42669: PPUSH
42670: CALL_OW 321
42674: PUSH
42675: LD_INT 2
42677: NONEQUAL
42678: IFFALSE 42692
// begin result := false ;
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_INT 0
42687: ST_TO_ADDR
// exit ;
42688: POP
42689: POP
42690: GO 42696
// end ;
42692: GO 42657
42694: POP
42695: POP
// end ;
42696: LD_VAR 0 3
42700: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42701: LD_INT 0
42703: PPUSH
42704: PPUSH
42705: PPUSH
42706: PPUSH
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42716: LD_VAR 0 1
42720: NOT
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 257
42731: PUSH
42732: LD_INT 9
42734: NONEQUAL
42735: OR
42736: IFFALSE 42740
// exit ;
42738: GO 43313
// side := GetSide ( unit ) ;
42740: LD_ADDR_VAR 0 9
42744: PUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 255
42754: ST_TO_ADDR
// tech_space := tech_spacanom ;
42755: LD_ADDR_VAR 0 12
42759: PUSH
42760: LD_INT 29
42762: ST_TO_ADDR
// tech_time := tech_taurad ;
42763: LD_ADDR_VAR 0 13
42767: PUSH
42768: LD_INT 28
42770: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42771: LD_ADDR_VAR 0 11
42775: PUSH
42776: LD_VAR 0 1
42780: PPUSH
42781: CALL_OW 310
42785: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42786: LD_VAR 0 11
42790: PPUSH
42791: CALL_OW 247
42795: PUSH
42796: LD_INT 2
42798: EQUAL
42799: IFFALSE 42803
// exit ;
42801: GO 43313
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42803: LD_ADDR_VAR 0 8
42807: PUSH
42808: LD_INT 81
42810: PUSH
42811: LD_VAR 0 9
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 21
42825: PUSH
42826: LD_INT 3
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PPUSH
42841: CALL_OW 69
42845: ST_TO_ADDR
// if not tmp then
42846: LD_VAR 0 8
42850: NOT
42851: IFFALSE 42855
// exit ;
42853: GO 43313
// if in_unit then
42855: LD_VAR 0 11
42859: IFFALSE 42883
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42861: LD_ADDR_VAR 0 10
42865: PUSH
42866: LD_VAR 0 8
42870: PPUSH
42871: LD_VAR 0 11
42875: PPUSH
42876: CALL_OW 74
42880: ST_TO_ADDR
42881: GO 42903
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42883: LD_ADDR_VAR 0 10
42887: PUSH
42888: LD_VAR 0 8
42892: PPUSH
42893: LD_VAR 0 1
42897: PPUSH
42898: CALL_OW 74
42902: ST_TO_ADDR
// if not enemy then
42903: LD_VAR 0 10
42907: NOT
42908: IFFALSE 42912
// exit ;
42910: GO 43313
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42912: LD_VAR 0 11
42916: PUSH
42917: LD_VAR 0 11
42921: PPUSH
42922: LD_VAR 0 10
42926: PPUSH
42927: CALL_OW 296
42931: PUSH
42932: LD_INT 13
42934: GREATER
42935: AND
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: LD_VAR 0 10
42946: PPUSH
42947: CALL_OW 296
42951: PUSH
42952: LD_INT 12
42954: GREATER
42955: OR
42956: IFFALSE 42960
// exit ;
42958: GO 43313
// missile := [ 1 ] ;
42960: LD_ADDR_VAR 0 14
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42971: LD_VAR 0 9
42975: PPUSH
42976: LD_VAR 0 12
42980: PPUSH
42981: CALL_OW 325
42985: IFFALSE 43014
// missile := Insert ( missile , missile + 1 , 2 ) ;
42987: LD_ADDR_VAR 0 14
42991: PUSH
42992: LD_VAR 0 14
42996: PPUSH
42997: LD_VAR 0 14
43001: PUSH
43002: LD_INT 1
43004: PLUS
43005: PPUSH
43006: LD_INT 2
43008: PPUSH
43009: CALL_OW 2
43013: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43014: LD_VAR 0 9
43018: PPUSH
43019: LD_VAR 0 13
43023: PPUSH
43024: CALL_OW 325
43028: PUSH
43029: LD_VAR 0 10
43033: PPUSH
43034: CALL_OW 255
43038: PPUSH
43039: LD_VAR 0 13
43043: PPUSH
43044: CALL_OW 325
43048: NOT
43049: AND
43050: IFFALSE 43079
// missile := Insert ( missile , missile + 1 , 3 ) ;
43052: LD_ADDR_VAR 0 14
43056: PUSH
43057: LD_VAR 0 14
43061: PPUSH
43062: LD_VAR 0 14
43066: PUSH
43067: LD_INT 1
43069: PLUS
43070: PPUSH
43071: LD_INT 3
43073: PPUSH
43074: CALL_OW 2
43078: ST_TO_ADDR
// if missile < 2 then
43079: LD_VAR 0 14
43083: PUSH
43084: LD_INT 2
43086: LESS
43087: IFFALSE 43091
// exit ;
43089: GO 43313
// x := GetX ( enemy ) ;
43091: LD_ADDR_VAR 0 4
43095: PUSH
43096: LD_VAR 0 10
43100: PPUSH
43101: CALL_OW 250
43105: ST_TO_ADDR
// y := GetY ( enemy ) ;
43106: LD_ADDR_VAR 0 5
43110: PUSH
43111: LD_VAR 0 10
43115: PPUSH
43116: CALL_OW 251
43120: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43121: LD_ADDR_VAR 0 6
43125: PUSH
43126: LD_VAR 0 4
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PPUSH
43135: LD_INT 1
43137: PPUSH
43138: CALL_OW 12
43142: PLUS
43143: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43144: LD_ADDR_VAR 0 7
43148: PUSH
43149: LD_VAR 0 5
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PPUSH
43158: LD_INT 1
43160: PPUSH
43161: CALL_OW 12
43165: PLUS
43166: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43167: LD_VAR 0 6
43171: PPUSH
43172: LD_VAR 0 7
43176: PPUSH
43177: CALL_OW 488
43181: NOT
43182: IFFALSE 43204
// begin _x := x ;
43184: LD_ADDR_VAR 0 6
43188: PUSH
43189: LD_VAR 0 4
43193: ST_TO_ADDR
// _y := y ;
43194: LD_ADDR_VAR 0 7
43198: PUSH
43199: LD_VAR 0 5
43203: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43204: LD_ADDR_VAR 0 3
43208: PUSH
43209: LD_INT 1
43211: PPUSH
43212: LD_VAR 0 14
43216: PPUSH
43217: CALL_OW 12
43221: ST_TO_ADDR
// case i of 1 :
43222: LD_VAR 0 3
43226: PUSH
43227: LD_INT 1
43229: DOUBLE
43230: EQUAL
43231: IFTRUE 43235
43233: GO 43252
43235: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43236: LD_VAR 0 1
43240: PPUSH
43241: LD_VAR 0 10
43245: PPUSH
43246: CALL_OW 115
43250: GO 43313
43252: LD_INT 2
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43282
43260: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43261: LD_VAR 0 1
43265: PPUSH
43266: LD_VAR 0 6
43270: PPUSH
43271: LD_VAR 0 7
43275: PPUSH
43276: CALL_OW 153
43280: GO 43313
43282: LD_INT 3
43284: DOUBLE
43285: EQUAL
43286: IFTRUE 43290
43288: GO 43312
43290: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43291: LD_VAR 0 1
43295: PPUSH
43296: LD_VAR 0 6
43300: PPUSH
43301: LD_VAR 0 7
43305: PPUSH
43306: CALL_OW 154
43310: GO 43313
43312: POP
// end ;
43313: LD_VAR 0 2
43317: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43318: LD_INT 0
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
// if not unit or not building then
43326: LD_VAR 0 1
43330: NOT
43331: PUSH
43332: LD_VAR 0 2
43336: NOT
43337: OR
43338: IFFALSE 43342
// exit ;
43340: GO 43500
// x := GetX ( building ) ;
43342: LD_ADDR_VAR 0 5
43346: PUSH
43347: LD_VAR 0 2
43351: PPUSH
43352: CALL_OW 250
43356: ST_TO_ADDR
// y := GetY ( building ) ;
43357: LD_ADDR_VAR 0 6
43361: PUSH
43362: LD_VAR 0 2
43366: PPUSH
43367: CALL_OW 251
43371: ST_TO_ADDR
// for i = 0 to 5 do
43372: LD_ADDR_VAR 0 4
43376: PUSH
43377: DOUBLE
43378: LD_INT 0
43380: DEC
43381: ST_TO_ADDR
43382: LD_INT 5
43384: PUSH
43385: FOR_TO
43386: IFFALSE 43498
// begin _x := ShiftX ( x , i , 3 ) ;
43388: LD_ADDR_VAR 0 7
43392: PUSH
43393: LD_VAR 0 5
43397: PPUSH
43398: LD_VAR 0 4
43402: PPUSH
43403: LD_INT 3
43405: PPUSH
43406: CALL_OW 272
43410: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43411: LD_ADDR_VAR 0 8
43415: PUSH
43416: LD_VAR 0 6
43420: PPUSH
43421: LD_VAR 0 4
43425: PPUSH
43426: LD_INT 3
43428: PPUSH
43429: CALL_OW 273
43433: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43434: LD_VAR 0 7
43438: PPUSH
43439: LD_VAR 0 8
43443: PPUSH
43444: CALL_OW 488
43448: NOT
43449: IFFALSE 43453
// continue ;
43451: GO 43385
// if HexInfo ( _x , _y ) = 0 then
43453: LD_VAR 0 7
43457: PPUSH
43458: LD_VAR 0 8
43462: PPUSH
43463: CALL_OW 428
43467: PUSH
43468: LD_INT 0
43470: EQUAL
43471: IFFALSE 43496
// begin ComMoveXY ( unit , _x , _y ) ;
43473: LD_VAR 0 1
43477: PPUSH
43478: LD_VAR 0 7
43482: PPUSH
43483: LD_VAR 0 8
43487: PPUSH
43488: CALL_OW 111
// exit ;
43492: POP
43493: POP
43494: GO 43500
// end ; end ;
43496: GO 43385
43498: POP
43499: POP
// end ;
43500: LD_VAR 0 3
43504: RET
// export function ScanBase ( side , base_area ) ; begin
43505: LD_INT 0
43507: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43508: LD_ADDR_VAR 0 3
43512: PUSH
43513: LD_VAR 0 2
43517: PPUSH
43518: LD_INT 81
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PPUSH
43530: CALL_OW 70
43534: ST_TO_ADDR
// end ;
43535: LD_VAR 0 3
43539: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43540: LD_INT 0
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
// result := false ;
43546: LD_ADDR_VAR 0 2
43550: PUSH
43551: LD_INT 0
43553: ST_TO_ADDR
// side := GetSide ( unit ) ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 255
43568: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43569: LD_ADDR_VAR 0 4
43573: PUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: CALL_OW 248
43583: ST_TO_ADDR
// case nat of 1 :
43584: LD_VAR 0 4
43588: PUSH
43589: LD_INT 1
43591: DOUBLE
43592: EQUAL
43593: IFTRUE 43597
43595: GO 43608
43597: POP
// tech := tech_lassight ; 2 :
43598: LD_ADDR_VAR 0 5
43602: PUSH
43603: LD_INT 12
43605: ST_TO_ADDR
43606: GO 43647
43608: LD_INT 2
43610: DOUBLE
43611: EQUAL
43612: IFTRUE 43616
43614: GO 43627
43616: POP
// tech := tech_mortar ; 3 :
43617: LD_ADDR_VAR 0 5
43621: PUSH
43622: LD_INT 41
43624: ST_TO_ADDR
43625: GO 43647
43627: LD_INT 3
43629: DOUBLE
43630: EQUAL
43631: IFTRUE 43635
43633: GO 43646
43635: POP
// tech := tech_bazooka ; end ;
43636: LD_ADDR_VAR 0 5
43640: PUSH
43641: LD_INT 44
43643: ST_TO_ADDR
43644: GO 43647
43646: POP
// if Researched ( side , tech ) then
43647: LD_VAR 0 3
43651: PPUSH
43652: LD_VAR 0 5
43656: PPUSH
43657: CALL_OW 325
43661: IFFALSE 43688
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43663: LD_ADDR_VAR 0 2
43667: PUSH
43668: LD_INT 5
43670: PUSH
43671: LD_INT 8
43673: PUSH
43674: LD_INT 9
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: PUSH
43682: LD_VAR 0 4
43686: ARRAY
43687: ST_TO_ADDR
// end ;
43688: LD_VAR 0 2
43692: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43693: LD_INT 0
43695: PPUSH
43696: PPUSH
43697: PPUSH
// if not mines then
43698: LD_VAR 0 2
43702: NOT
43703: IFFALSE 43707
// exit ;
43705: GO 43851
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43707: LD_ADDR_VAR 0 5
43711: PUSH
43712: LD_INT 81
43714: PUSH
43715: LD_VAR 0 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 3
43726: PUSH
43727: LD_INT 21
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PPUSH
43745: CALL_OW 69
43749: ST_TO_ADDR
// for i in mines do
43750: LD_ADDR_VAR 0 4
43754: PUSH
43755: LD_VAR 0 2
43759: PUSH
43760: FOR_IN
43761: IFFALSE 43849
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43763: LD_VAR 0 4
43767: PUSH
43768: LD_INT 1
43770: ARRAY
43771: PPUSH
43772: LD_VAR 0 4
43776: PUSH
43777: LD_INT 2
43779: ARRAY
43780: PPUSH
43781: CALL_OW 458
43785: NOT
43786: IFFALSE 43790
// continue ;
43788: GO 43760
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43790: LD_VAR 0 4
43794: PUSH
43795: LD_INT 1
43797: ARRAY
43798: PPUSH
43799: LD_VAR 0 4
43803: PUSH
43804: LD_INT 2
43806: ARRAY
43807: PPUSH
43808: CALL_OW 428
43812: PUSH
43813: LD_VAR 0 5
43817: IN
43818: IFFALSE 43847
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43820: LD_VAR 0 4
43824: PUSH
43825: LD_INT 1
43827: ARRAY
43828: PPUSH
43829: LD_VAR 0 4
43833: PUSH
43834: LD_INT 2
43836: ARRAY
43837: PPUSH
43838: LD_VAR 0 1
43842: PPUSH
43843: CALL_OW 456
// end ;
43847: GO 43760
43849: POP
43850: POP
// end ;
43851: LD_VAR 0 3
43855: RET
// export function Count ( array ) ; var i ; begin
43856: LD_INT 0
43858: PPUSH
43859: PPUSH
// result := 0 ;
43860: LD_ADDR_VAR 0 2
43864: PUSH
43865: LD_INT 0
43867: ST_TO_ADDR
// for i in array do
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: LD_VAR 0 1
43877: PUSH
43878: FOR_IN
43879: IFFALSE 43903
// if i then
43881: LD_VAR 0 3
43885: IFFALSE 43901
// result := result + 1 ;
43887: LD_ADDR_VAR 0 2
43891: PUSH
43892: LD_VAR 0 2
43896: PUSH
43897: LD_INT 1
43899: PLUS
43900: ST_TO_ADDR
43901: GO 43878
43903: POP
43904: POP
// end ;
43905: LD_VAR 0 2
43909: RET
// export function IsEmpty ( building ) ; begin
43910: LD_INT 0
43912: PPUSH
// if not building then
43913: LD_VAR 0 1
43917: NOT
43918: IFFALSE 43922
// exit ;
43920: GO 43965
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43922: LD_ADDR_VAR 0 2
43926: PUSH
43927: LD_VAR 0 1
43931: PUSH
43932: LD_INT 22
43934: PUSH
43935: LD_VAR 0 1
43939: PPUSH
43940: CALL_OW 255
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 58
43951: PUSH
43952: EMPTY
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PPUSH
43959: CALL_OW 69
43963: IN
43964: ST_TO_ADDR
// end ;
43965: LD_VAR 0 2
43969: RET
// export function IsNotFull ( building ) ; begin
43970: LD_INT 0
43972: PPUSH
// if not building then
43973: LD_VAR 0 1
43977: NOT
43978: IFFALSE 43982
// exit ;
43980: GO 44001
// result := UnitsInside ( building ) < 6 ;
43982: LD_ADDR_VAR 0 2
43986: PUSH
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 313
43996: PUSH
43997: LD_INT 6
43999: LESS
44000: ST_TO_ADDR
// end ;
44001: LD_VAR 0 2
44005: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44006: LD_INT 0
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
// tmp := [ ] ;
44012: LD_ADDR_VAR 0 3
44016: PUSH
44017: EMPTY
44018: ST_TO_ADDR
// list := [ ] ;
44019: LD_ADDR_VAR 0 5
44023: PUSH
44024: EMPTY
44025: ST_TO_ADDR
// for i = 16 to 25 do
44026: LD_ADDR_VAR 0 4
44030: PUSH
44031: DOUBLE
44032: LD_INT 16
44034: DEC
44035: ST_TO_ADDR
44036: LD_INT 25
44038: PUSH
44039: FOR_TO
44040: IFFALSE 44113
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_VAR 0 3
44051: PUSH
44052: LD_INT 22
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 255
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 91
44071: PUSH
44072: LD_VAR 0 1
44076: PUSH
44077: LD_INT 6
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 30
44087: PUSH
44088: LD_VAR 0 4
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: PPUSH
44105: CALL_OW 69
44109: ADD
44110: ST_TO_ADDR
44111: GO 44039
44113: POP
44114: POP
// for i = 1 to tmp do
44115: LD_ADDR_VAR 0 4
44119: PUSH
44120: DOUBLE
44121: LD_INT 1
44123: DEC
44124: ST_TO_ADDR
44125: LD_VAR 0 3
44129: PUSH
44130: FOR_TO
44131: IFFALSE 44219
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44133: LD_ADDR_VAR 0 5
44137: PUSH
44138: LD_VAR 0 5
44142: PUSH
44143: LD_VAR 0 3
44147: PUSH
44148: LD_VAR 0 4
44152: ARRAY
44153: PPUSH
44154: CALL_OW 266
44158: PUSH
44159: LD_VAR 0 3
44163: PUSH
44164: LD_VAR 0 4
44168: ARRAY
44169: PPUSH
44170: CALL_OW 250
44174: PUSH
44175: LD_VAR 0 3
44179: PUSH
44180: LD_VAR 0 4
44184: ARRAY
44185: PPUSH
44186: CALL_OW 251
44190: PUSH
44191: LD_VAR 0 3
44195: PUSH
44196: LD_VAR 0 4
44200: ARRAY
44201: PPUSH
44202: CALL_OW 254
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: ADD
44216: ST_TO_ADDR
44217: GO 44130
44219: POP
44220: POP
// result := list ;
44221: LD_ADDR_VAR 0 2
44225: PUSH
44226: LD_VAR 0 5
44230: ST_TO_ADDR
// end ;
44231: LD_VAR 0 2
44235: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44236: LD_INT 0
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
// if not factory then
44245: LD_VAR 0 1
44249: NOT
44250: IFFALSE 44254
// exit ;
44252: GO 44847
// if control = control_apeman then
44254: LD_VAR 0 4
44258: PUSH
44259: LD_INT 5
44261: EQUAL
44262: IFFALSE 44371
// begin tmp := UnitsInside ( factory ) ;
44264: LD_ADDR_VAR 0 8
44268: PUSH
44269: LD_VAR 0 1
44273: PPUSH
44274: CALL_OW 313
44278: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44279: LD_VAR 0 8
44283: PPUSH
44284: LD_INT 25
44286: PUSH
44287: LD_INT 12
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PPUSH
44294: CALL_OW 72
44298: NOT
44299: IFFALSE 44309
// control := control_manual ;
44301: LD_ADDR_VAR 0 4
44305: PUSH
44306: LD_INT 1
44308: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44309: LD_ADDR_VAR 0 8
44313: PUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL 44006 0 1
44323: ST_TO_ADDR
// if tmp then
44324: LD_VAR 0 8
44328: IFFALSE 44371
// begin for i in tmp do
44330: LD_ADDR_VAR 0 7
44334: PUSH
44335: LD_VAR 0 8
44339: PUSH
44340: FOR_IN
44341: IFFALSE 44369
// if i [ 1 ] = b_ext_radio then
44343: LD_VAR 0 7
44347: PUSH
44348: LD_INT 1
44350: ARRAY
44351: PUSH
44352: LD_INT 22
44354: EQUAL
44355: IFFALSE 44367
// begin control := control_remote ;
44357: LD_ADDR_VAR 0 4
44361: PUSH
44362: LD_INT 2
44364: ST_TO_ADDR
// break ;
44365: GO 44369
// end ;
44367: GO 44340
44369: POP
44370: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44371: LD_VAR 0 1
44375: PPUSH
44376: LD_VAR 0 2
44380: PPUSH
44381: LD_VAR 0 3
44385: PPUSH
44386: LD_VAR 0 4
44390: PPUSH
44391: LD_VAR 0 5
44395: PPUSH
44396: CALL_OW 448
44400: IFFALSE 44435
// begin result := [ chassis , engine , control , weapon ] ;
44402: LD_ADDR_VAR 0 6
44406: PUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_VAR 0 3
44416: PUSH
44417: LD_VAR 0 4
44421: PUSH
44422: LD_VAR 0 5
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// exit ;
44433: GO 44847
// end ; _chassis := AvailableChassisList ( factory ) ;
44435: LD_ADDR_VAR 0 9
44439: PUSH
44440: LD_VAR 0 1
44444: PPUSH
44445: CALL_OW 475
44449: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44450: LD_ADDR_VAR 0 11
44454: PUSH
44455: LD_VAR 0 1
44459: PPUSH
44460: CALL_OW 476
44464: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44465: LD_ADDR_VAR 0 12
44469: PUSH
44470: LD_VAR 0 1
44474: PPUSH
44475: CALL_OW 477
44479: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44480: LD_ADDR_VAR 0 10
44484: PUSH
44485: LD_VAR 0 1
44489: PPUSH
44490: CALL_OW 478
44494: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44495: LD_VAR 0 9
44499: NOT
44500: PUSH
44501: LD_VAR 0 11
44505: NOT
44506: OR
44507: PUSH
44508: LD_VAR 0 12
44512: NOT
44513: OR
44514: PUSH
44515: LD_VAR 0 10
44519: NOT
44520: OR
44521: IFFALSE 44556
// begin result := [ chassis , engine , control , weapon ] ;
44523: LD_ADDR_VAR 0 6
44527: PUSH
44528: LD_VAR 0 2
44532: PUSH
44533: LD_VAR 0 3
44537: PUSH
44538: LD_VAR 0 4
44542: PUSH
44543: LD_VAR 0 5
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: ST_TO_ADDR
// exit ;
44554: GO 44847
// end ; if not chassis in _chassis then
44556: LD_VAR 0 2
44560: PUSH
44561: LD_VAR 0 9
44565: IN
44566: NOT
44567: IFFALSE 44593
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44569: LD_ADDR_VAR 0 2
44573: PUSH
44574: LD_VAR 0 9
44578: PUSH
44579: LD_INT 1
44581: PPUSH
44582: LD_VAR 0 9
44586: PPUSH
44587: CALL_OW 12
44591: ARRAY
44592: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44593: LD_VAR 0 2
44597: PPUSH
44598: LD_VAR 0 3
44602: PPUSH
44603: CALL 44852 0 2
44607: NOT
44608: IFFALSE 44667
// repeat engine := _engine [ 1 ] ;
44610: LD_ADDR_VAR 0 3
44614: PUSH
44615: LD_VAR 0 11
44619: PUSH
44620: LD_INT 1
44622: ARRAY
44623: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44624: LD_ADDR_VAR 0 11
44628: PUSH
44629: LD_VAR 0 11
44633: PPUSH
44634: LD_INT 1
44636: PPUSH
44637: CALL_OW 3
44641: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44642: LD_VAR 0 2
44646: PPUSH
44647: LD_VAR 0 3
44651: PPUSH
44652: CALL 44852 0 2
44656: PUSH
44657: LD_VAR 0 11
44661: PUSH
44662: EMPTY
44663: EQUAL
44664: OR
44665: IFFALSE 44610
// if not control in _control then
44667: LD_VAR 0 4
44671: PUSH
44672: LD_VAR 0 12
44676: IN
44677: NOT
44678: IFFALSE 44704
// control := _control [ rand ( 1 , _control ) ] ;
44680: LD_ADDR_VAR 0 4
44684: PUSH
44685: LD_VAR 0 12
44689: PUSH
44690: LD_INT 1
44692: PPUSH
44693: LD_VAR 0 12
44697: PPUSH
44698: CALL_OW 12
44702: ARRAY
44703: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44704: LD_VAR 0 2
44708: PPUSH
44709: LD_VAR 0 5
44713: PPUSH
44714: CALL 45072 0 2
44718: NOT
44719: IFFALSE 44778
// repeat weapon := _weapon [ 1 ] ;
44721: LD_ADDR_VAR 0 5
44725: PUSH
44726: LD_VAR 0 10
44730: PUSH
44731: LD_INT 1
44733: ARRAY
44734: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44735: LD_ADDR_VAR 0 10
44739: PUSH
44740: LD_VAR 0 10
44744: PPUSH
44745: LD_INT 1
44747: PPUSH
44748: CALL_OW 3
44752: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44753: LD_VAR 0 2
44757: PPUSH
44758: LD_VAR 0 5
44762: PPUSH
44763: CALL 45072 0 2
44767: PUSH
44768: LD_VAR 0 10
44772: PUSH
44773: EMPTY
44774: EQUAL
44775: OR
44776: IFFALSE 44721
// result := [ ] ;
44778: LD_ADDR_VAR 0 6
44782: PUSH
44783: EMPTY
44784: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44785: LD_VAR 0 1
44789: PPUSH
44790: LD_VAR 0 2
44794: PPUSH
44795: LD_VAR 0 3
44799: PPUSH
44800: LD_VAR 0 4
44804: PPUSH
44805: LD_VAR 0 5
44809: PPUSH
44810: CALL_OW 448
44814: IFFALSE 44847
// result := [ chassis , engine , control , weapon ] ;
44816: LD_ADDR_VAR 0 6
44820: PUSH
44821: LD_VAR 0 2
44825: PUSH
44826: LD_VAR 0 3
44830: PUSH
44831: LD_VAR 0 4
44835: PUSH
44836: LD_VAR 0 5
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 6
44851: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44852: LD_INT 0
44854: PPUSH
// if not chassis or not engine then
44855: LD_VAR 0 1
44859: NOT
44860: PUSH
44861: LD_VAR 0 2
44865: NOT
44866: OR
44867: IFFALSE 44871
// exit ;
44869: GO 45067
// case engine of engine_solar :
44871: LD_VAR 0 2
44875: PUSH
44876: LD_INT 2
44878: DOUBLE
44879: EQUAL
44880: IFTRUE 44884
44882: GO 44922
44884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44885: LD_ADDR_VAR 0 3
44889: PUSH
44890: LD_INT 11
44892: PUSH
44893: LD_INT 12
44895: PUSH
44896: LD_INT 13
44898: PUSH
44899: LD_INT 14
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: ST_TO_ADDR
44920: GO 45051
44922: LD_INT 1
44924: DOUBLE
44925: EQUAL
44926: IFTRUE 44930
44928: GO 44992
44930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_INT 11
44938: PUSH
44939: LD_INT 12
44941: PUSH
44942: LD_INT 13
44944: PUSH
44945: LD_INT 14
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: LD_INT 4
44959: PUSH
44960: LD_INT 5
44962: PUSH
44963: LD_INT 21
44965: PUSH
44966: LD_INT 23
44968: PUSH
44969: LD_INT 22
44971: PUSH
44972: LD_INT 24
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
44990: GO 45051
44992: LD_INT 3
44994: DOUBLE
44995: EQUAL
44996: IFTRUE 45000
44998: GO 45050
45000: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45001: LD_ADDR_VAR 0 3
45005: PUSH
45006: LD_INT 13
45008: PUSH
45009: LD_INT 14
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: LD_INT 4
45020: PUSH
45021: LD_INT 5
45023: PUSH
45024: LD_INT 21
45026: PUSH
45027: LD_INT 22
45029: PUSH
45030: LD_INT 23
45032: PUSH
45033: LD_INT 24
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
45048: GO 45051
45050: POP
// result := ( chassis in result ) ;
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: LD_VAR 0 1
45060: PUSH
45061: LD_VAR 0 3
45065: IN
45066: ST_TO_ADDR
// end ;
45067: LD_VAR 0 3
45071: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45072: LD_INT 0
45074: PPUSH
// if not chassis or not weapon then
45075: LD_VAR 0 1
45079: NOT
45080: PUSH
45081: LD_VAR 0 2
45085: NOT
45086: OR
45087: IFFALSE 45091
// exit ;
45089: GO 46153
// case weapon of us_machine_gun :
45091: LD_VAR 0 2
45095: PUSH
45096: LD_INT 2
45098: DOUBLE
45099: EQUAL
45100: IFTRUE 45104
45102: GO 45134
45104: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45105: LD_ADDR_VAR 0 3
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: LD_INT 4
45121: PUSH
45122: LD_INT 5
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
45132: GO 46137
45134: LD_INT 3
45136: DOUBLE
45137: EQUAL
45138: IFTRUE 45142
45140: GO 45172
45142: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: LD_INT 4
45159: PUSH
45160: LD_INT 5
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
45170: GO 46137
45172: LD_INT 11
45174: DOUBLE
45175: EQUAL
45176: IFTRUE 45180
45178: GO 45210
45180: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: LD_INT 4
45197: PUSH
45198: LD_INT 5
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
45208: GO 46137
45210: LD_INT 4
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45244
45218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: LD_INT 5
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
45242: GO 46137
45244: LD_INT 5
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45278
45252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 4
45266: PUSH
45267: LD_INT 5
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
45276: GO 46137
45278: LD_INT 9
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45312
45286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: LD_INT 4
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
45310: GO 46137
45312: LD_INT 7
45314: DOUBLE
45315: EQUAL
45316: IFTRUE 45320
45318: GO 45346
45320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45321: LD_ADDR_VAR 0 3
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: LD_INT 4
45334: PUSH
45335: LD_INT 5
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
45344: GO 46137
45346: LD_INT 12
45348: DOUBLE
45349: EQUAL
45350: IFTRUE 45354
45352: GO 45380
45354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45355: LD_ADDR_VAR 0 3
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: LD_INT 4
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
45378: GO 46137
45380: LD_INT 13
45382: DOUBLE
45383: EQUAL
45384: IFTRUE 45388
45386: GO 45414
45388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45389: LD_ADDR_VAR 0 3
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: LD_INT 4
45402: PUSH
45403: LD_INT 5
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: ST_TO_ADDR
45412: GO 46137
45414: LD_INT 14
45416: DOUBLE
45417: EQUAL
45418: IFTRUE 45422
45420: GO 45440
45422: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45423: LD_ADDR_VAR 0 3
45427: PUSH
45428: LD_INT 4
45430: PUSH
45431: LD_INT 5
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: ST_TO_ADDR
45438: GO 46137
45440: LD_INT 6
45442: DOUBLE
45443: EQUAL
45444: IFTRUE 45448
45446: GO 45466
45448: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45449: LD_ADDR_VAR 0 3
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: LD_INT 5
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: ST_TO_ADDR
45464: GO 46137
45466: LD_INT 10
45468: DOUBLE
45469: EQUAL
45470: IFTRUE 45474
45472: GO 45492
45474: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45475: LD_ADDR_VAR 0 3
45479: PUSH
45480: LD_INT 4
45482: PUSH
45483: LD_INT 5
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: ST_TO_ADDR
45490: GO 46137
45492: LD_INT 22
45494: DOUBLE
45495: EQUAL
45496: IFTRUE 45500
45498: GO 45526
45500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45501: LD_ADDR_VAR 0 3
45505: PUSH
45506: LD_INT 11
45508: PUSH
45509: LD_INT 12
45511: PUSH
45512: LD_INT 13
45514: PUSH
45515: LD_INT 14
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
45524: GO 46137
45526: LD_INT 23
45528: DOUBLE
45529: EQUAL
45530: IFTRUE 45534
45532: GO 45560
45534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_INT 11
45542: PUSH
45543: LD_INT 12
45545: PUSH
45546: LD_INT 13
45548: PUSH
45549: LD_INT 14
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
45558: GO 46137
45560: LD_INT 24
45562: DOUBLE
45563: EQUAL
45564: IFTRUE 45568
45566: GO 45594
45568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45569: LD_ADDR_VAR 0 3
45573: PUSH
45574: LD_INT 11
45576: PUSH
45577: LD_INT 12
45579: PUSH
45580: LD_INT 13
45582: PUSH
45583: LD_INT 14
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: ST_TO_ADDR
45592: GO 46137
45594: LD_INT 30
45596: DOUBLE
45597: EQUAL
45598: IFTRUE 45602
45600: GO 45628
45602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45603: LD_ADDR_VAR 0 3
45607: PUSH
45608: LD_INT 11
45610: PUSH
45611: LD_INT 12
45613: PUSH
45614: LD_INT 13
45616: PUSH
45617: LD_INT 14
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: ST_TO_ADDR
45626: GO 46137
45628: LD_INT 25
45630: DOUBLE
45631: EQUAL
45632: IFTRUE 45636
45634: GO 45654
45636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45637: LD_ADDR_VAR 0 3
45641: PUSH
45642: LD_INT 13
45644: PUSH
45645: LD_INT 14
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: ST_TO_ADDR
45652: GO 46137
45654: LD_INT 27
45656: DOUBLE
45657: EQUAL
45658: IFTRUE 45662
45660: GO 45680
45662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45663: LD_ADDR_VAR 0 3
45667: PUSH
45668: LD_INT 13
45670: PUSH
45671: LD_INT 14
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: ST_TO_ADDR
45678: GO 46137
45680: LD_EXP 126
45684: DOUBLE
45685: EQUAL
45686: IFTRUE 45690
45688: GO 45716
45690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45691: LD_ADDR_VAR 0 3
45695: PUSH
45696: LD_INT 11
45698: PUSH
45699: LD_INT 12
45701: PUSH
45702: LD_INT 13
45704: PUSH
45705: LD_INT 14
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
45714: GO 46137
45716: LD_INT 28
45718: DOUBLE
45719: EQUAL
45720: IFTRUE 45724
45722: GO 45742
45724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45725: LD_ADDR_VAR 0 3
45729: PUSH
45730: LD_INT 13
45732: PUSH
45733: LD_INT 14
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: ST_TO_ADDR
45740: GO 46137
45742: LD_INT 29
45744: DOUBLE
45745: EQUAL
45746: IFTRUE 45750
45748: GO 45768
45750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45751: LD_ADDR_VAR 0 3
45755: PUSH
45756: LD_INT 13
45758: PUSH
45759: LD_INT 14
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: ST_TO_ADDR
45766: GO 46137
45768: LD_INT 31
45770: DOUBLE
45771: EQUAL
45772: IFTRUE 45776
45774: GO 45794
45776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45777: LD_ADDR_VAR 0 3
45781: PUSH
45782: LD_INT 13
45784: PUSH
45785: LD_INT 14
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: ST_TO_ADDR
45792: GO 46137
45794: LD_INT 26
45796: DOUBLE
45797: EQUAL
45798: IFTRUE 45802
45800: GO 45820
45802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45803: LD_ADDR_VAR 0 3
45807: PUSH
45808: LD_INT 13
45810: PUSH
45811: LD_INT 14
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: ST_TO_ADDR
45818: GO 46137
45820: LD_INT 42
45822: DOUBLE
45823: EQUAL
45824: IFTRUE 45828
45826: GO 45854
45828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45829: LD_ADDR_VAR 0 3
45833: PUSH
45834: LD_INT 21
45836: PUSH
45837: LD_INT 22
45839: PUSH
45840: LD_INT 23
45842: PUSH
45843: LD_INT 24
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: ST_TO_ADDR
45852: GO 46137
45854: LD_INT 43
45856: DOUBLE
45857: EQUAL
45858: IFTRUE 45862
45860: GO 45888
45862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45863: LD_ADDR_VAR 0 3
45867: PUSH
45868: LD_INT 21
45870: PUSH
45871: LD_INT 22
45873: PUSH
45874: LD_INT 23
45876: PUSH
45877: LD_INT 24
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: ST_TO_ADDR
45886: GO 46137
45888: LD_INT 44
45890: DOUBLE
45891: EQUAL
45892: IFTRUE 45896
45894: GO 45922
45896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45897: LD_ADDR_VAR 0 3
45901: PUSH
45902: LD_INT 21
45904: PUSH
45905: LD_INT 22
45907: PUSH
45908: LD_INT 23
45910: PUSH
45911: LD_INT 24
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
45920: GO 46137
45922: LD_INT 45
45924: DOUBLE
45925: EQUAL
45926: IFTRUE 45930
45928: GO 45956
45930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45931: LD_ADDR_VAR 0 3
45935: PUSH
45936: LD_INT 21
45938: PUSH
45939: LD_INT 22
45941: PUSH
45942: LD_INT 23
45944: PUSH
45945: LD_INT 24
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
45954: GO 46137
45956: LD_INT 49
45958: DOUBLE
45959: EQUAL
45960: IFTRUE 45964
45962: GO 45990
45964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45965: LD_ADDR_VAR 0 3
45969: PUSH
45970: LD_INT 21
45972: PUSH
45973: LD_INT 22
45975: PUSH
45976: LD_INT 23
45978: PUSH
45979: LD_INT 24
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
45988: GO 46137
45990: LD_INT 51
45992: DOUBLE
45993: EQUAL
45994: IFTRUE 45998
45996: GO 46024
45998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45999: LD_ADDR_VAR 0 3
46003: PUSH
46004: LD_INT 21
46006: PUSH
46007: LD_INT 22
46009: PUSH
46010: LD_INT 23
46012: PUSH
46013: LD_INT 24
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
46022: GO 46137
46024: LD_INT 52
46026: DOUBLE
46027: EQUAL
46028: IFTRUE 46032
46030: GO 46058
46032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46033: LD_ADDR_VAR 0 3
46037: PUSH
46038: LD_INT 21
46040: PUSH
46041: LD_INT 22
46043: PUSH
46044: LD_INT 23
46046: PUSH
46047: LD_INT 24
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: ST_TO_ADDR
46056: GO 46137
46058: LD_INT 53
46060: DOUBLE
46061: EQUAL
46062: IFTRUE 46066
46064: GO 46084
46066: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46067: LD_ADDR_VAR 0 3
46071: PUSH
46072: LD_INT 23
46074: PUSH
46075: LD_INT 24
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: ST_TO_ADDR
46082: GO 46137
46084: LD_INT 46
46086: DOUBLE
46087: EQUAL
46088: IFTRUE 46092
46090: GO 46110
46092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46093: LD_ADDR_VAR 0 3
46097: PUSH
46098: LD_INT 23
46100: PUSH
46101: LD_INT 24
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: ST_TO_ADDR
46108: GO 46137
46110: LD_INT 47
46112: DOUBLE
46113: EQUAL
46114: IFTRUE 46118
46116: GO 46136
46118: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46119: LD_ADDR_VAR 0 3
46123: PUSH
46124: LD_INT 23
46126: PUSH
46127: LD_INT 24
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: ST_TO_ADDR
46134: GO 46137
46136: POP
// result := ( chassis in result ) ;
46137: LD_ADDR_VAR 0 3
46141: PUSH
46142: LD_VAR 0 1
46146: PUSH
46147: LD_VAR 0 3
46151: IN
46152: ST_TO_ADDR
// end ;
46153: LD_VAR 0 3
46157: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46158: LD_INT 0
46160: PPUSH
46161: PPUSH
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
// result := array ;
46167: LD_ADDR_VAR 0 5
46171: PUSH
46172: LD_VAR 0 1
46176: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46177: LD_VAR 0 1
46181: NOT
46182: PUSH
46183: LD_VAR 0 2
46187: NOT
46188: OR
46189: PUSH
46190: LD_VAR 0 3
46194: NOT
46195: OR
46196: PUSH
46197: LD_VAR 0 2
46201: PUSH
46202: LD_VAR 0 1
46206: GREATER
46207: OR
46208: PUSH
46209: LD_VAR 0 3
46213: PUSH
46214: LD_VAR 0 1
46218: GREATER
46219: OR
46220: IFFALSE 46224
// exit ;
46222: GO 46520
// if direction then
46224: LD_VAR 0 4
46228: IFFALSE 46292
// begin d := 1 ;
46230: LD_ADDR_VAR 0 9
46234: PUSH
46235: LD_INT 1
46237: ST_TO_ADDR
// if i_from > i_to then
46238: LD_VAR 0 2
46242: PUSH
46243: LD_VAR 0 3
46247: GREATER
46248: IFFALSE 46274
// length := ( array - i_from ) + i_to else
46250: LD_ADDR_VAR 0 11
46254: PUSH
46255: LD_VAR 0 1
46259: PUSH
46260: LD_VAR 0 2
46264: MINUS
46265: PUSH
46266: LD_VAR 0 3
46270: PLUS
46271: ST_TO_ADDR
46272: GO 46290
// length := i_to - i_from ;
46274: LD_ADDR_VAR 0 11
46278: PUSH
46279: LD_VAR 0 3
46283: PUSH
46284: LD_VAR 0 2
46288: MINUS
46289: ST_TO_ADDR
// end else
46290: GO 46353
// begin d := - 1 ;
46292: LD_ADDR_VAR 0 9
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: ST_TO_ADDR
// if i_from > i_to then
46301: LD_VAR 0 2
46305: PUSH
46306: LD_VAR 0 3
46310: GREATER
46311: IFFALSE 46331
// length := i_from - i_to else
46313: LD_ADDR_VAR 0 11
46317: PUSH
46318: LD_VAR 0 2
46322: PUSH
46323: LD_VAR 0 3
46327: MINUS
46328: ST_TO_ADDR
46329: GO 46353
// length := ( array - i_to ) + i_from ;
46331: LD_ADDR_VAR 0 11
46335: PUSH
46336: LD_VAR 0 1
46340: PUSH
46341: LD_VAR 0 3
46345: MINUS
46346: PUSH
46347: LD_VAR 0 2
46351: PLUS
46352: ST_TO_ADDR
// end ; if not length then
46353: LD_VAR 0 11
46357: NOT
46358: IFFALSE 46362
// exit ;
46360: GO 46520
// tmp := array ;
46362: LD_ADDR_VAR 0 10
46366: PUSH
46367: LD_VAR 0 1
46371: ST_TO_ADDR
// for i = 1 to length do
46372: LD_ADDR_VAR 0 6
46376: PUSH
46377: DOUBLE
46378: LD_INT 1
46380: DEC
46381: ST_TO_ADDR
46382: LD_VAR 0 11
46386: PUSH
46387: FOR_TO
46388: IFFALSE 46508
// begin for j = 1 to array do
46390: LD_ADDR_VAR 0 7
46394: PUSH
46395: DOUBLE
46396: LD_INT 1
46398: DEC
46399: ST_TO_ADDR
46400: LD_VAR 0 1
46404: PUSH
46405: FOR_TO
46406: IFFALSE 46494
// begin k := j + d ;
46408: LD_ADDR_VAR 0 8
46412: PUSH
46413: LD_VAR 0 7
46417: PUSH
46418: LD_VAR 0 9
46422: PLUS
46423: ST_TO_ADDR
// if k > array then
46424: LD_VAR 0 8
46428: PUSH
46429: LD_VAR 0 1
46433: GREATER
46434: IFFALSE 46444
// k := 1 ;
46436: LD_ADDR_VAR 0 8
46440: PUSH
46441: LD_INT 1
46443: ST_TO_ADDR
// if not k then
46444: LD_VAR 0 8
46448: NOT
46449: IFFALSE 46461
// k := array ;
46451: LD_ADDR_VAR 0 8
46455: PUSH
46456: LD_VAR 0 1
46460: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46461: LD_ADDR_VAR 0 10
46465: PUSH
46466: LD_VAR 0 10
46470: PPUSH
46471: LD_VAR 0 8
46475: PPUSH
46476: LD_VAR 0 1
46480: PUSH
46481: LD_VAR 0 7
46485: ARRAY
46486: PPUSH
46487: CALL_OW 1
46491: ST_TO_ADDR
// end ;
46492: GO 46405
46494: POP
46495: POP
// array := tmp ;
46496: LD_ADDR_VAR 0 1
46500: PUSH
46501: LD_VAR 0 10
46505: ST_TO_ADDR
// end ;
46506: GO 46387
46508: POP
46509: POP
// result := array ;
46510: LD_ADDR_VAR 0 5
46514: PUSH
46515: LD_VAR 0 1
46519: ST_TO_ADDR
// end ;
46520: LD_VAR 0 5
46524: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46525: LD_INT 0
46527: PPUSH
46528: PPUSH
// result := 0 ;
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: LD_INT 0
46536: ST_TO_ADDR
// if not array or not value in array then
46537: LD_VAR 0 1
46541: NOT
46542: PUSH
46543: LD_VAR 0 2
46547: PUSH
46548: LD_VAR 0 1
46552: IN
46553: NOT
46554: OR
46555: IFFALSE 46559
// exit ;
46557: GO 46613
// for i = 1 to array do
46559: LD_ADDR_VAR 0 4
46563: PUSH
46564: DOUBLE
46565: LD_INT 1
46567: DEC
46568: ST_TO_ADDR
46569: LD_VAR 0 1
46573: PUSH
46574: FOR_TO
46575: IFFALSE 46611
// if value = array [ i ] then
46577: LD_VAR 0 2
46581: PUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_VAR 0 4
46591: ARRAY
46592: EQUAL
46593: IFFALSE 46609
// begin result := i ;
46595: LD_ADDR_VAR 0 3
46599: PUSH
46600: LD_VAR 0 4
46604: ST_TO_ADDR
// exit ;
46605: POP
46606: POP
46607: GO 46613
// end ;
46609: GO 46574
46611: POP
46612: POP
// end ;
46613: LD_VAR 0 3
46617: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46618: LD_INT 0
46620: PPUSH
// vc_chassis := chassis ;
46621: LD_ADDR_OWVAR 37
46625: PUSH
46626: LD_VAR 0 1
46630: ST_TO_ADDR
// vc_engine := engine ;
46631: LD_ADDR_OWVAR 39
46635: PUSH
46636: LD_VAR 0 2
46640: ST_TO_ADDR
// vc_control := control ;
46641: LD_ADDR_OWVAR 38
46645: PUSH
46646: LD_VAR 0 3
46650: ST_TO_ADDR
// vc_weapon := weapon ;
46651: LD_ADDR_OWVAR 40
46655: PUSH
46656: LD_VAR 0 4
46660: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46661: LD_ADDR_OWVAR 41
46665: PUSH
46666: LD_VAR 0 5
46670: ST_TO_ADDR
// end ;
46671: LD_VAR 0 6
46675: RET
// export function WantPlant ( unit ) ; var task ; begin
46676: LD_INT 0
46678: PPUSH
46679: PPUSH
// result := false ;
46680: LD_ADDR_VAR 0 2
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46688: LD_ADDR_VAR 0 3
46692: PUSH
46693: LD_VAR 0 1
46697: PPUSH
46698: CALL_OW 437
46702: ST_TO_ADDR
// if task then
46703: LD_VAR 0 3
46707: IFFALSE 46735
// if task [ 1 ] [ 1 ] = p then
46709: LD_VAR 0 3
46713: PUSH
46714: LD_INT 1
46716: ARRAY
46717: PUSH
46718: LD_INT 1
46720: ARRAY
46721: PUSH
46722: LD_STRING p
46724: EQUAL
46725: IFFALSE 46735
// result := true ;
46727: LD_ADDR_VAR 0 2
46731: PUSH
46732: LD_INT 1
46734: ST_TO_ADDR
// end ;
46735: LD_VAR 0 2
46739: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46740: LD_INT 0
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
// if pos < 1 then
46746: LD_VAR 0 2
46750: PUSH
46751: LD_INT 1
46753: LESS
46754: IFFALSE 46758
// exit ;
46756: GO 47061
// if pos = 1 then
46758: LD_VAR 0 2
46762: PUSH
46763: LD_INT 1
46765: EQUAL
46766: IFFALSE 46799
// result := Replace ( arr , pos [ 1 ] , value ) else
46768: LD_ADDR_VAR 0 4
46772: PUSH
46773: LD_VAR 0 1
46777: PPUSH
46778: LD_VAR 0 2
46782: PUSH
46783: LD_INT 1
46785: ARRAY
46786: PPUSH
46787: LD_VAR 0 3
46791: PPUSH
46792: CALL_OW 1
46796: ST_TO_ADDR
46797: GO 47061
// begin tmp := arr ;
46799: LD_ADDR_VAR 0 6
46803: PUSH
46804: LD_VAR 0 1
46808: ST_TO_ADDR
// s_arr := [ tmp ] ;
46809: LD_ADDR_VAR 0 7
46813: PUSH
46814: LD_VAR 0 6
46818: PUSH
46819: EMPTY
46820: LIST
46821: ST_TO_ADDR
// for i = 1 to pos - 1 do
46822: LD_ADDR_VAR 0 5
46826: PUSH
46827: DOUBLE
46828: LD_INT 1
46830: DEC
46831: ST_TO_ADDR
46832: LD_VAR 0 2
46836: PUSH
46837: LD_INT 1
46839: MINUS
46840: PUSH
46841: FOR_TO
46842: IFFALSE 46887
// begin tmp := tmp [ pos [ i ] ] ;
46844: LD_ADDR_VAR 0 6
46848: PUSH
46849: LD_VAR 0 6
46853: PUSH
46854: LD_VAR 0 2
46858: PUSH
46859: LD_VAR 0 5
46863: ARRAY
46864: ARRAY
46865: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46866: LD_ADDR_VAR 0 7
46870: PUSH
46871: LD_VAR 0 7
46875: PUSH
46876: LD_VAR 0 6
46880: PUSH
46881: EMPTY
46882: LIST
46883: ADD
46884: ST_TO_ADDR
// end ;
46885: GO 46841
46887: POP
46888: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46889: LD_ADDR_VAR 0 6
46893: PUSH
46894: LD_VAR 0 6
46898: PPUSH
46899: LD_VAR 0 2
46903: PUSH
46904: LD_VAR 0 2
46908: ARRAY
46909: PPUSH
46910: LD_VAR 0 3
46914: PPUSH
46915: CALL_OW 1
46919: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46920: LD_ADDR_VAR 0 7
46924: PUSH
46925: LD_VAR 0 7
46929: PPUSH
46930: LD_VAR 0 7
46934: PPUSH
46935: LD_VAR 0 6
46939: PPUSH
46940: CALL_OW 1
46944: ST_TO_ADDR
// for i = s_arr downto 2 do
46945: LD_ADDR_VAR 0 5
46949: PUSH
46950: DOUBLE
46951: LD_VAR 0 7
46955: INC
46956: ST_TO_ADDR
46957: LD_INT 2
46959: PUSH
46960: FOR_DOWNTO
46961: IFFALSE 47045
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46963: LD_ADDR_VAR 0 6
46967: PUSH
46968: LD_VAR 0 7
46972: PUSH
46973: LD_VAR 0 5
46977: PUSH
46978: LD_INT 1
46980: MINUS
46981: ARRAY
46982: PPUSH
46983: LD_VAR 0 2
46987: PUSH
46988: LD_VAR 0 5
46992: PUSH
46993: LD_INT 1
46995: MINUS
46996: ARRAY
46997: PPUSH
46998: LD_VAR 0 7
47002: PUSH
47003: LD_VAR 0 5
47007: ARRAY
47008: PPUSH
47009: CALL_OW 1
47013: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47014: LD_ADDR_VAR 0 7
47018: PUSH
47019: LD_VAR 0 7
47023: PPUSH
47024: LD_VAR 0 5
47028: PUSH
47029: LD_INT 1
47031: MINUS
47032: PPUSH
47033: LD_VAR 0 6
47037: PPUSH
47038: CALL_OW 1
47042: ST_TO_ADDR
// end ;
47043: GO 46960
47045: POP
47046: POP
// result := s_arr [ 1 ] ;
47047: LD_ADDR_VAR 0 4
47051: PUSH
47052: LD_VAR 0 7
47056: PUSH
47057: LD_INT 1
47059: ARRAY
47060: ST_TO_ADDR
// end ; end ;
47061: LD_VAR 0 4
47065: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47066: LD_INT 0
47068: PPUSH
47069: PPUSH
// if not list then
47070: LD_VAR 0 1
47074: NOT
47075: IFFALSE 47079
// exit ;
47077: GO 47170
// i := list [ pos1 ] ;
47079: LD_ADDR_VAR 0 5
47083: PUSH
47084: LD_VAR 0 1
47088: PUSH
47089: LD_VAR 0 2
47093: ARRAY
47094: ST_TO_ADDR
// if not i then
47095: LD_VAR 0 5
47099: NOT
47100: IFFALSE 47104
// exit ;
47102: GO 47170
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47104: LD_ADDR_VAR 0 1
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: LD_VAR 0 2
47118: PPUSH
47119: LD_VAR 0 1
47123: PUSH
47124: LD_VAR 0 3
47128: ARRAY
47129: PPUSH
47130: CALL_OW 1
47134: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47135: LD_ADDR_VAR 0 1
47139: PUSH
47140: LD_VAR 0 1
47144: PPUSH
47145: LD_VAR 0 3
47149: PPUSH
47150: LD_VAR 0 5
47154: PPUSH
47155: CALL_OW 1
47159: ST_TO_ADDR
// result := list ;
47160: LD_ADDR_VAR 0 4
47164: PUSH
47165: LD_VAR 0 1
47169: ST_TO_ADDR
// end ;
47170: LD_VAR 0 4
47174: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47175: LD_INT 0
47177: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47178: LD_ADDR_VAR 0 5
47182: PUSH
47183: LD_VAR 0 1
47187: PPUSH
47188: CALL_OW 250
47192: PPUSH
47193: LD_VAR 0 1
47197: PPUSH
47198: CALL_OW 251
47202: PPUSH
47203: LD_VAR 0 2
47207: PPUSH
47208: LD_VAR 0 3
47212: PPUSH
47213: LD_VAR 0 4
47217: PPUSH
47218: CALL 47228 0 5
47222: ST_TO_ADDR
// end ;
47223: LD_VAR 0 5
47227: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47228: LD_INT 0
47230: PPUSH
47231: PPUSH
47232: PPUSH
47233: PPUSH
// if not list then
47234: LD_VAR 0 3
47238: NOT
47239: IFFALSE 47243
// exit ;
47241: GO 47631
// result := [ ] ;
47243: LD_ADDR_VAR 0 6
47247: PUSH
47248: EMPTY
47249: ST_TO_ADDR
// for i in list do
47250: LD_ADDR_VAR 0 7
47254: PUSH
47255: LD_VAR 0 3
47259: PUSH
47260: FOR_IN
47261: IFFALSE 47463
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47263: LD_ADDR_VAR 0 9
47267: PUSH
47268: LD_VAR 0 7
47272: PPUSH
47273: LD_VAR 0 1
47277: PPUSH
47278: LD_VAR 0 2
47282: PPUSH
47283: CALL_OW 297
47287: ST_TO_ADDR
// if not result then
47288: LD_VAR 0 6
47292: NOT
47293: IFFALSE 47319
// result := [ [ i , tmp ] ] else
47295: LD_ADDR_VAR 0 6
47299: PUSH
47300: LD_VAR 0 7
47304: PUSH
47305: LD_VAR 0 9
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: ST_TO_ADDR
47317: GO 47461
// begin if result [ result ] [ 2 ] < tmp then
47319: LD_VAR 0 6
47323: PUSH
47324: LD_VAR 0 6
47328: ARRAY
47329: PUSH
47330: LD_INT 2
47332: ARRAY
47333: PUSH
47334: LD_VAR 0 9
47338: LESS
47339: IFFALSE 47381
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47341: LD_ADDR_VAR 0 6
47345: PUSH
47346: LD_VAR 0 6
47350: PPUSH
47351: LD_VAR 0 6
47355: PUSH
47356: LD_INT 1
47358: PLUS
47359: PPUSH
47360: LD_VAR 0 7
47364: PUSH
47365: LD_VAR 0 9
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PPUSH
47374: CALL_OW 2
47378: ST_TO_ADDR
47379: GO 47461
// for j = 1 to result do
47381: LD_ADDR_VAR 0 8
47385: PUSH
47386: DOUBLE
47387: LD_INT 1
47389: DEC
47390: ST_TO_ADDR
47391: LD_VAR 0 6
47395: PUSH
47396: FOR_TO
47397: IFFALSE 47459
// begin if tmp < result [ j ] [ 2 ] then
47399: LD_VAR 0 9
47403: PUSH
47404: LD_VAR 0 6
47408: PUSH
47409: LD_VAR 0 8
47413: ARRAY
47414: PUSH
47415: LD_INT 2
47417: ARRAY
47418: LESS
47419: IFFALSE 47457
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47421: LD_ADDR_VAR 0 6
47425: PUSH
47426: LD_VAR 0 6
47430: PPUSH
47431: LD_VAR 0 8
47435: PPUSH
47436: LD_VAR 0 7
47440: PUSH
47441: LD_VAR 0 9
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PPUSH
47450: CALL_OW 2
47454: ST_TO_ADDR
// break ;
47455: GO 47459
// end ; end ;
47457: GO 47396
47459: POP
47460: POP
// end ; end ;
47461: GO 47260
47463: POP
47464: POP
// if result and not asc then
47465: LD_VAR 0 6
47469: PUSH
47470: LD_VAR 0 4
47474: NOT
47475: AND
47476: IFFALSE 47551
// begin tmp := result ;
47478: LD_ADDR_VAR 0 9
47482: PUSH
47483: LD_VAR 0 6
47487: ST_TO_ADDR
// for i = tmp downto 1 do
47488: LD_ADDR_VAR 0 7
47492: PUSH
47493: DOUBLE
47494: LD_VAR 0 9
47498: INC
47499: ST_TO_ADDR
47500: LD_INT 1
47502: PUSH
47503: FOR_DOWNTO
47504: IFFALSE 47549
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47506: LD_ADDR_VAR 0 6
47510: PUSH
47511: LD_VAR 0 6
47515: PPUSH
47516: LD_VAR 0 9
47520: PUSH
47521: LD_VAR 0 7
47525: MINUS
47526: PUSH
47527: LD_INT 1
47529: PLUS
47530: PPUSH
47531: LD_VAR 0 9
47535: PUSH
47536: LD_VAR 0 7
47540: ARRAY
47541: PPUSH
47542: CALL_OW 1
47546: ST_TO_ADDR
47547: GO 47503
47549: POP
47550: POP
// end ; tmp := [ ] ;
47551: LD_ADDR_VAR 0 9
47555: PUSH
47556: EMPTY
47557: ST_TO_ADDR
// if mode then
47558: LD_VAR 0 5
47562: IFFALSE 47631
// begin for i = 1 to result do
47564: LD_ADDR_VAR 0 7
47568: PUSH
47569: DOUBLE
47570: LD_INT 1
47572: DEC
47573: ST_TO_ADDR
47574: LD_VAR 0 6
47578: PUSH
47579: FOR_TO
47580: IFFALSE 47619
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47582: LD_ADDR_VAR 0 9
47586: PUSH
47587: LD_VAR 0 9
47591: PPUSH
47592: LD_VAR 0 7
47596: PPUSH
47597: LD_VAR 0 6
47601: PUSH
47602: LD_VAR 0 7
47606: ARRAY
47607: PUSH
47608: LD_INT 1
47610: ARRAY
47611: PPUSH
47612: CALL_OW 1
47616: ST_TO_ADDR
47617: GO 47579
47619: POP
47620: POP
// result := tmp ;
47621: LD_ADDR_VAR 0 6
47625: PUSH
47626: LD_VAR 0 9
47630: ST_TO_ADDR
// end ; end ;
47631: LD_VAR 0 6
47635: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47636: LD_INT 0
47638: PPUSH
47639: PPUSH
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47644: LD_ADDR_VAR 0 5
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// if not x or not y then
47666: LD_VAR 0 2
47670: NOT
47671: PUSH
47672: LD_VAR 0 3
47676: NOT
47677: OR
47678: IFFALSE 47682
// exit ;
47680: GO 49334
// if not range then
47682: LD_VAR 0 4
47686: NOT
47687: IFFALSE 47697
// range := 10 ;
47689: LD_ADDR_VAR 0 4
47693: PUSH
47694: LD_INT 10
47696: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47697: LD_ADDR_VAR 0 8
47701: PUSH
47702: LD_INT 81
47704: PUSH
47705: LD_VAR 0 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 92
47716: PUSH
47717: LD_VAR 0 2
47721: PUSH
47722: LD_VAR 0 3
47726: PUSH
47727: LD_VAR 0 4
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: LD_INT 21
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: PPUSH
47760: CALL_OW 69
47764: ST_TO_ADDR
// if not tmp then
47765: LD_VAR 0 8
47769: NOT
47770: IFFALSE 47774
// exit ;
47772: GO 49334
// for i in tmp do
47774: LD_ADDR_VAR 0 6
47778: PUSH
47779: LD_VAR 0 8
47783: PUSH
47784: FOR_IN
47785: IFFALSE 49309
// begin points := [ 0 , 0 , 0 ] ;
47787: LD_ADDR_VAR 0 9
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// bpoints := 1 ;
47806: LD_ADDR_VAR 0 10
47810: PUSH
47811: LD_INT 1
47813: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47814: LD_VAR 0 6
47818: PPUSH
47819: CALL_OW 247
47823: PUSH
47824: LD_INT 1
47826: DOUBLE
47827: EQUAL
47828: IFTRUE 47832
47830: GO 48410
47832: POP
// begin if GetClass ( i ) = 1 then
47833: LD_VAR 0 6
47837: PPUSH
47838: CALL_OW 257
47842: PUSH
47843: LD_INT 1
47845: EQUAL
47846: IFFALSE 47867
// points := [ 10 , 5 , 3 ] ;
47848: LD_ADDR_VAR 0 9
47852: PUSH
47853: LD_INT 10
47855: PUSH
47856: LD_INT 5
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47867: LD_VAR 0 6
47871: PPUSH
47872: CALL_OW 257
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: LD_INT 4
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: IN
47891: IFFALSE 47912
// points := [ 3 , 2 , 1 ] ;
47893: LD_ADDR_VAR 0 9
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47912: LD_VAR 0 6
47916: PPUSH
47917: CALL_OW 257
47921: PUSH
47922: LD_INT 5
47924: EQUAL
47925: IFFALSE 47946
// points := [ 130 , 5 , 2 ] ;
47927: LD_ADDR_VAR 0 9
47931: PUSH
47932: LD_INT 130
47934: PUSH
47935: LD_INT 5
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47946: LD_VAR 0 6
47950: PPUSH
47951: CALL_OW 257
47955: PUSH
47956: LD_INT 8
47958: EQUAL
47959: IFFALSE 47980
// points := [ 35 , 35 , 30 ] ;
47961: LD_ADDR_VAR 0 9
47965: PUSH
47966: LD_INT 35
47968: PUSH
47969: LD_INT 35
47971: PUSH
47972: LD_INT 30
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47980: LD_VAR 0 6
47984: PPUSH
47985: CALL_OW 257
47989: PUSH
47990: LD_INT 9
47992: EQUAL
47993: IFFALSE 48014
// points := [ 20 , 55 , 40 ] ;
47995: LD_ADDR_VAR 0 9
47999: PUSH
48000: LD_INT 20
48002: PUSH
48003: LD_INT 55
48005: PUSH
48006: LD_INT 40
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48014: LD_VAR 0 6
48018: PPUSH
48019: CALL_OW 257
48023: PUSH
48024: LD_INT 12
48026: PUSH
48027: LD_INT 16
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: IN
48034: IFFALSE 48055
// points := [ 5 , 3 , 2 ] ;
48036: LD_ADDR_VAR 0 9
48040: PUSH
48041: LD_INT 5
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48055: LD_VAR 0 6
48059: PPUSH
48060: CALL_OW 257
48064: PUSH
48065: LD_INT 17
48067: EQUAL
48068: IFFALSE 48089
// points := [ 100 , 50 , 75 ] ;
48070: LD_ADDR_VAR 0 9
48074: PUSH
48075: LD_INT 100
48077: PUSH
48078: LD_INT 50
48080: PUSH
48081: LD_INT 75
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48089: LD_VAR 0 6
48093: PPUSH
48094: CALL_OW 257
48098: PUSH
48099: LD_INT 15
48101: EQUAL
48102: IFFALSE 48123
// points := [ 10 , 5 , 3 ] ;
48104: LD_ADDR_VAR 0 9
48108: PUSH
48109: LD_INT 10
48111: PUSH
48112: LD_INT 5
48114: PUSH
48115: LD_INT 3
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48123: LD_VAR 0 6
48127: PPUSH
48128: CALL_OW 257
48132: PUSH
48133: LD_INT 14
48135: EQUAL
48136: IFFALSE 48157
// points := [ 10 , 0 , 0 ] ;
48138: LD_ADDR_VAR 0 9
48142: PUSH
48143: LD_INT 10
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48157: LD_VAR 0 6
48161: PPUSH
48162: CALL_OW 257
48166: PUSH
48167: LD_INT 11
48169: EQUAL
48170: IFFALSE 48191
// points := [ 30 , 10 , 5 ] ;
48172: LD_ADDR_VAR 0 9
48176: PUSH
48177: LD_INT 30
48179: PUSH
48180: LD_INT 10
48182: PUSH
48183: LD_INT 5
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48191: LD_VAR 0 1
48195: PPUSH
48196: LD_INT 5
48198: PPUSH
48199: CALL_OW 321
48203: PUSH
48204: LD_INT 2
48206: EQUAL
48207: IFFALSE 48224
// bpoints := bpoints * 1.8 ;
48209: LD_ADDR_VAR 0 10
48213: PUSH
48214: LD_VAR 0 10
48218: PUSH
48219: LD_REAL  1.80000000000000E+0000
48222: MUL
48223: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48224: LD_VAR 0 6
48228: PPUSH
48229: CALL_OW 257
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 4
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: IN
48252: PUSH
48253: LD_VAR 0 1
48257: PPUSH
48258: LD_INT 51
48260: PPUSH
48261: CALL_OW 321
48265: PUSH
48266: LD_INT 2
48268: EQUAL
48269: AND
48270: IFFALSE 48287
// bpoints := bpoints * 1.2 ;
48272: LD_ADDR_VAR 0 10
48276: PUSH
48277: LD_VAR 0 10
48281: PUSH
48282: LD_REAL  1.20000000000000E+0000
48285: MUL
48286: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48287: LD_VAR 0 6
48291: PPUSH
48292: CALL_OW 257
48296: PUSH
48297: LD_INT 5
48299: PUSH
48300: LD_INT 7
48302: PUSH
48303: LD_INT 9
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: IN
48311: PUSH
48312: LD_VAR 0 1
48316: PPUSH
48317: LD_INT 52
48319: PPUSH
48320: CALL_OW 321
48324: PUSH
48325: LD_INT 2
48327: EQUAL
48328: AND
48329: IFFALSE 48346
// bpoints := bpoints * 1.5 ;
48331: LD_ADDR_VAR 0 10
48335: PUSH
48336: LD_VAR 0 10
48340: PUSH
48341: LD_REAL  1.50000000000000E+0000
48344: MUL
48345: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48346: LD_VAR 0 1
48350: PPUSH
48351: LD_INT 66
48353: PPUSH
48354: CALL_OW 321
48358: PUSH
48359: LD_INT 2
48361: EQUAL
48362: IFFALSE 48379
// bpoints := bpoints * 1.1 ;
48364: LD_ADDR_VAR 0 10
48368: PUSH
48369: LD_VAR 0 10
48373: PUSH
48374: LD_REAL  1.10000000000000E+0000
48377: MUL
48378: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48379: LD_ADDR_VAR 0 10
48383: PUSH
48384: LD_VAR 0 10
48388: PUSH
48389: LD_VAR 0 6
48393: PPUSH
48394: LD_INT 1
48396: PPUSH
48397: CALL_OW 259
48401: PUSH
48402: LD_REAL  1.15000000000000E+0000
48405: MUL
48406: MUL
48407: ST_TO_ADDR
// end ; unit_vehicle :
48408: GO 49238
48410: LD_INT 2
48412: DOUBLE
48413: EQUAL
48414: IFTRUE 48418
48416: GO 49226
48418: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48419: LD_VAR 0 6
48423: PPUSH
48424: CALL_OW 264
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 42
48434: PUSH
48435: LD_INT 24
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: IN
48443: IFFALSE 48464
// points := [ 25 , 5 , 3 ] ;
48445: LD_ADDR_VAR 0 9
48449: PUSH
48450: LD_INT 25
48452: PUSH
48453: LD_INT 5
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48464: LD_VAR 0 6
48468: PPUSH
48469: CALL_OW 264
48473: PUSH
48474: LD_INT 4
48476: PUSH
48477: LD_INT 43
48479: PUSH
48480: LD_INT 25
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: IN
48488: IFFALSE 48509
// points := [ 40 , 15 , 5 ] ;
48490: LD_ADDR_VAR 0 9
48494: PUSH
48495: LD_INT 40
48497: PUSH
48498: LD_INT 15
48500: PUSH
48501: LD_INT 5
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48509: LD_VAR 0 6
48513: PPUSH
48514: CALL_OW 264
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: LD_INT 23
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: IN
48529: IFFALSE 48550
// points := [ 7 , 25 , 8 ] ;
48531: LD_ADDR_VAR 0 9
48535: PUSH
48536: LD_INT 7
48538: PUSH
48539: LD_INT 25
48541: PUSH
48542: LD_INT 8
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48550: LD_VAR 0 6
48554: PPUSH
48555: CALL_OW 264
48559: PUSH
48560: LD_INT 5
48562: PUSH
48563: LD_INT 27
48565: PUSH
48566: LD_INT 44
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: IN
48574: IFFALSE 48595
// points := [ 14 , 50 , 16 ] ;
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_INT 14
48583: PUSH
48584: LD_INT 50
48586: PUSH
48587: LD_INT 16
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48595: LD_VAR 0 6
48599: PPUSH
48600: CALL_OW 264
48604: PUSH
48605: LD_INT 6
48607: PUSH
48608: LD_INT 46
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: IN
48615: IFFALSE 48636
// points := [ 32 , 120 , 70 ] ;
48617: LD_ADDR_VAR 0 9
48621: PUSH
48622: LD_INT 32
48624: PUSH
48625: LD_INT 120
48627: PUSH
48628: LD_INT 70
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 264
48645: PUSH
48646: LD_INT 7
48648: PUSH
48649: LD_INT 28
48651: PUSH
48652: LD_INT 45
48654: PUSH
48655: LD_EXP 126
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: IN
48666: IFFALSE 48687
// points := [ 35 , 20 , 45 ] ;
48668: LD_ADDR_VAR 0 9
48672: PUSH
48673: LD_INT 35
48675: PUSH
48676: LD_INT 20
48678: PUSH
48679: LD_INT 45
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48687: LD_VAR 0 6
48691: PPUSH
48692: CALL_OW 264
48696: PUSH
48697: LD_INT 47
48699: PUSH
48700: EMPTY
48701: LIST
48702: IN
48703: IFFALSE 48724
// points := [ 67 , 45 , 75 ] ;
48705: LD_ADDR_VAR 0 9
48709: PUSH
48710: LD_INT 67
48712: PUSH
48713: LD_INT 45
48715: PUSH
48716: LD_INT 75
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48724: LD_VAR 0 6
48728: PPUSH
48729: CALL_OW 264
48733: PUSH
48734: LD_INT 26
48736: PUSH
48737: EMPTY
48738: LIST
48739: IN
48740: IFFALSE 48761
// points := [ 120 , 30 , 80 ] ;
48742: LD_ADDR_VAR 0 9
48746: PUSH
48747: LD_INT 120
48749: PUSH
48750: LD_INT 30
48752: PUSH
48753: LD_INT 80
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48761: LD_VAR 0 6
48765: PPUSH
48766: CALL_OW 264
48770: PUSH
48771: LD_INT 22
48773: PUSH
48774: EMPTY
48775: LIST
48776: IN
48777: IFFALSE 48798
// points := [ 40 , 1 , 1 ] ;
48779: LD_ADDR_VAR 0 9
48783: PUSH
48784: LD_INT 40
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48798: LD_VAR 0 6
48802: PPUSH
48803: CALL_OW 264
48807: PUSH
48808: LD_INT 29
48810: PUSH
48811: EMPTY
48812: LIST
48813: IN
48814: IFFALSE 48835
// points := [ 70 , 200 , 400 ] ;
48816: LD_ADDR_VAR 0 9
48820: PUSH
48821: LD_INT 70
48823: PUSH
48824: LD_INT 200
48826: PUSH
48827: LD_INT 400
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48835: LD_VAR 0 6
48839: PPUSH
48840: CALL_OW 264
48844: PUSH
48845: LD_INT 14
48847: PUSH
48848: LD_INT 53
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: IN
48855: IFFALSE 48876
// points := [ 40 , 10 , 20 ] ;
48857: LD_ADDR_VAR 0 9
48861: PUSH
48862: LD_INT 40
48864: PUSH
48865: LD_INT 10
48867: PUSH
48868: LD_INT 20
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48876: LD_VAR 0 6
48880: PPUSH
48881: CALL_OW 264
48885: PUSH
48886: LD_INT 9
48888: PUSH
48889: EMPTY
48890: LIST
48891: IN
48892: IFFALSE 48913
// points := [ 5 , 70 , 20 ] ;
48894: LD_ADDR_VAR 0 9
48898: PUSH
48899: LD_INT 5
48901: PUSH
48902: LD_INT 70
48904: PUSH
48905: LD_INT 20
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48913: LD_VAR 0 6
48917: PPUSH
48918: CALL_OW 264
48922: PUSH
48923: LD_INT 10
48925: PUSH
48926: EMPTY
48927: LIST
48928: IN
48929: IFFALSE 48950
// points := [ 35 , 110 , 70 ] ;
48931: LD_ADDR_VAR 0 9
48935: PUSH
48936: LD_INT 35
48938: PUSH
48939: LD_INT 110
48941: PUSH
48942: LD_INT 70
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48950: LD_VAR 0 6
48954: PPUSH
48955: CALL_OW 265
48959: PUSH
48960: LD_INT 25
48962: EQUAL
48963: IFFALSE 48984
// points := [ 80 , 65 , 100 ] ;
48965: LD_ADDR_VAR 0 9
48969: PUSH
48970: LD_INT 80
48972: PUSH
48973: LD_INT 65
48975: PUSH
48976: LD_INT 100
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48984: LD_VAR 0 6
48988: PPUSH
48989: CALL_OW 263
48993: PUSH
48994: LD_INT 1
48996: EQUAL
48997: IFFALSE 49032
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48999: LD_ADDR_VAR 0 10
49003: PUSH
49004: LD_VAR 0 10
49008: PUSH
49009: LD_VAR 0 6
49013: PPUSH
49014: CALL_OW 311
49018: PPUSH
49019: LD_INT 3
49021: PPUSH
49022: CALL_OW 259
49026: PUSH
49027: LD_INT 4
49029: MUL
49030: MUL
49031: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49032: LD_VAR 0 6
49036: PPUSH
49037: CALL_OW 263
49041: PUSH
49042: LD_INT 2
49044: EQUAL
49045: IFFALSE 49096
// begin j := IsControledBy ( i ) ;
49047: LD_ADDR_VAR 0 7
49051: PUSH
49052: LD_VAR 0 6
49056: PPUSH
49057: CALL_OW 312
49061: ST_TO_ADDR
// if j then
49062: LD_VAR 0 7
49066: IFFALSE 49096
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49068: LD_ADDR_VAR 0 10
49072: PUSH
49073: LD_VAR 0 10
49077: PUSH
49078: LD_VAR 0 7
49082: PPUSH
49083: LD_INT 3
49085: PPUSH
49086: CALL_OW 259
49090: PUSH
49091: LD_INT 3
49093: MUL
49094: MUL
49095: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49096: LD_VAR 0 6
49100: PPUSH
49101: CALL_OW 264
49105: PUSH
49106: LD_INT 5
49108: PUSH
49109: LD_INT 6
49111: PUSH
49112: LD_INT 46
49114: PUSH
49115: LD_INT 44
49117: PUSH
49118: LD_INT 47
49120: PUSH
49121: LD_INT 45
49123: PUSH
49124: LD_INT 28
49126: PUSH
49127: LD_INT 7
49129: PUSH
49130: LD_INT 27
49132: PUSH
49133: LD_INT 29
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: IN
49148: PUSH
49149: LD_VAR 0 1
49153: PPUSH
49154: LD_INT 52
49156: PPUSH
49157: CALL_OW 321
49161: PUSH
49162: LD_INT 2
49164: EQUAL
49165: AND
49166: IFFALSE 49183
// bpoints := bpoints * 1.2 ;
49168: LD_ADDR_VAR 0 10
49172: PUSH
49173: LD_VAR 0 10
49177: PUSH
49178: LD_REAL  1.20000000000000E+0000
49181: MUL
49182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49183: LD_VAR 0 6
49187: PPUSH
49188: CALL_OW 264
49192: PUSH
49193: LD_INT 6
49195: PUSH
49196: LD_INT 46
49198: PUSH
49199: LD_INT 47
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: IN
49207: IFFALSE 49224
// bpoints := bpoints * 1.2 ;
49209: LD_ADDR_VAR 0 10
49213: PUSH
49214: LD_VAR 0 10
49218: PUSH
49219: LD_REAL  1.20000000000000E+0000
49222: MUL
49223: ST_TO_ADDR
// end ; unit_building :
49224: GO 49238
49226: LD_INT 3
49228: DOUBLE
49229: EQUAL
49230: IFTRUE 49234
49232: GO 49237
49234: POP
// ; end ;
49235: GO 49238
49237: POP
// for j = 1 to 3 do
49238: LD_ADDR_VAR 0 7
49242: PUSH
49243: DOUBLE
49244: LD_INT 1
49246: DEC
49247: ST_TO_ADDR
49248: LD_INT 3
49250: PUSH
49251: FOR_TO
49252: IFFALSE 49305
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49254: LD_ADDR_VAR 0 5
49258: PUSH
49259: LD_VAR 0 5
49263: PPUSH
49264: LD_VAR 0 7
49268: PPUSH
49269: LD_VAR 0 5
49273: PUSH
49274: LD_VAR 0 7
49278: ARRAY
49279: PUSH
49280: LD_VAR 0 9
49284: PUSH
49285: LD_VAR 0 7
49289: ARRAY
49290: PUSH
49291: LD_VAR 0 10
49295: MUL
49296: PLUS
49297: PPUSH
49298: CALL_OW 1
49302: ST_TO_ADDR
49303: GO 49251
49305: POP
49306: POP
// end ;
49307: GO 47784
49309: POP
49310: POP
// result := Replace ( result , 4 , tmp ) ;
49311: LD_ADDR_VAR 0 5
49315: PUSH
49316: LD_VAR 0 5
49320: PPUSH
49321: LD_INT 4
49323: PPUSH
49324: LD_VAR 0 8
49328: PPUSH
49329: CALL_OW 1
49333: ST_TO_ADDR
// end ;
49334: LD_VAR 0 5
49338: RET
// export function DangerAtRange ( unit , range ) ; begin
49339: LD_INT 0
49341: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49342: LD_ADDR_VAR 0 3
49346: PUSH
49347: LD_VAR 0 1
49351: PPUSH
49352: CALL_OW 255
49356: PPUSH
49357: LD_VAR 0 1
49361: PPUSH
49362: CALL_OW 250
49366: PPUSH
49367: LD_VAR 0 1
49371: PPUSH
49372: CALL_OW 251
49376: PPUSH
49377: LD_VAR 0 2
49381: PPUSH
49382: CALL 47636 0 4
49386: ST_TO_ADDR
// end ;
49387: LD_VAR 0 3
49391: RET
// export function DangerInArea ( side , area ) ; begin
49392: LD_INT 0
49394: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49395: LD_ADDR_VAR 0 3
49399: PUSH
49400: LD_VAR 0 2
49404: PPUSH
49405: LD_INT 81
49407: PUSH
49408: LD_VAR 0 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 70
49421: ST_TO_ADDR
// end ;
49422: LD_VAR 0 3
49426: RET
// export function IsExtension ( b ) ; begin
49427: LD_INT 0
49429: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49430: LD_ADDR_VAR 0 2
49434: PUSH
49435: LD_VAR 0 1
49439: PUSH
49440: LD_INT 23
49442: PUSH
49443: LD_INT 20
49445: PUSH
49446: LD_INT 22
49448: PUSH
49449: LD_INT 17
49451: PUSH
49452: LD_INT 24
49454: PUSH
49455: LD_INT 21
49457: PUSH
49458: LD_INT 19
49460: PUSH
49461: LD_INT 16
49463: PUSH
49464: LD_INT 25
49466: PUSH
49467: LD_INT 18
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: IN
49482: ST_TO_ADDR
// end ;
49483: LD_VAR 0 2
49487: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49488: LD_INT 0
49490: PPUSH
49491: PPUSH
49492: PPUSH
// result := [ ] ;
49493: LD_ADDR_VAR 0 4
49497: PUSH
49498: EMPTY
49499: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49500: LD_ADDR_VAR 0 5
49504: PUSH
49505: LD_VAR 0 2
49509: PPUSH
49510: LD_INT 21
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PPUSH
49520: CALL_OW 70
49524: ST_TO_ADDR
// if not tmp then
49525: LD_VAR 0 5
49529: NOT
49530: IFFALSE 49534
// exit ;
49532: GO 49598
// if checkLink then
49534: LD_VAR 0 3
49538: IFFALSE 49588
// begin for i in tmp do
49540: LD_ADDR_VAR 0 6
49544: PUSH
49545: LD_VAR 0 5
49549: PUSH
49550: FOR_IN
49551: IFFALSE 49586
// if GetBase ( i ) <> base then
49553: LD_VAR 0 6
49557: PPUSH
49558: CALL_OW 274
49562: PUSH
49563: LD_VAR 0 1
49567: NONEQUAL
49568: IFFALSE 49584
// ComLinkToBase ( base , i ) ;
49570: LD_VAR 0 1
49574: PPUSH
49575: LD_VAR 0 6
49579: PPUSH
49580: CALL_OW 169
49584: GO 49550
49586: POP
49587: POP
// end ; result := tmp ;
49588: LD_ADDR_VAR 0 4
49592: PUSH
49593: LD_VAR 0 5
49597: ST_TO_ADDR
// end ;
49598: LD_VAR 0 4
49602: RET
// export function ComComplete ( units , b ) ; var i ; begin
49603: LD_INT 0
49605: PPUSH
49606: PPUSH
// if not units then
49607: LD_VAR 0 1
49611: NOT
49612: IFFALSE 49616
// exit ;
49614: GO 49706
// for i in units do
49616: LD_ADDR_VAR 0 4
49620: PUSH
49621: LD_VAR 0 1
49625: PUSH
49626: FOR_IN
49627: IFFALSE 49704
// if BuildingStatus ( b ) = bs_build then
49629: LD_VAR 0 2
49633: PPUSH
49634: CALL_OW 461
49638: PUSH
49639: LD_INT 1
49641: EQUAL
49642: IFFALSE 49702
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49644: LD_VAR 0 4
49648: PPUSH
49649: LD_STRING h
49651: PUSH
49652: LD_VAR 0 2
49656: PPUSH
49657: CALL_OW 250
49661: PUSH
49662: LD_VAR 0 2
49666: PPUSH
49667: CALL_OW 251
49671: PUSH
49672: LD_VAR 0 2
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: PPUSH
49698: CALL_OW 446
49702: GO 49626
49704: POP
49705: POP
// end ;
49706: LD_VAR 0 3
49710: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49711: LD_INT 0
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49719: LD_VAR 0 1
49723: NOT
49724: PUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: CALL_OW 263
49734: PUSH
49735: LD_INT 2
49737: NONEQUAL
49738: OR
49739: IFFALSE 49743
// exit ;
49741: GO 50059
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49743: LD_ADDR_VAR 0 6
49747: PUSH
49748: LD_INT 22
49750: PUSH
49751: LD_VAR 0 1
49755: PPUSH
49756: CALL_OW 255
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 30
49770: PUSH
49771: LD_INT 36
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 34
49780: PUSH
49781: LD_INT 31
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PPUSH
49797: CALL_OW 69
49801: ST_TO_ADDR
// if not tmp then
49802: LD_VAR 0 6
49806: NOT
49807: IFFALSE 49811
// exit ;
49809: GO 50059
// result := [ ] ;
49811: LD_ADDR_VAR 0 2
49815: PUSH
49816: EMPTY
49817: ST_TO_ADDR
// for i in tmp do
49818: LD_ADDR_VAR 0 3
49822: PUSH
49823: LD_VAR 0 6
49827: PUSH
49828: FOR_IN
49829: IFFALSE 49900
// begin t := UnitsInside ( i ) ;
49831: LD_ADDR_VAR 0 4
49835: PUSH
49836: LD_VAR 0 3
49840: PPUSH
49841: CALL_OW 313
49845: ST_TO_ADDR
// if t then
49846: LD_VAR 0 4
49850: IFFALSE 49898
// for j in t do
49852: LD_ADDR_VAR 0 7
49856: PUSH
49857: LD_VAR 0 4
49861: PUSH
49862: FOR_IN
49863: IFFALSE 49896
// result := Replace ( result , result + 1 , j ) ;
49865: LD_ADDR_VAR 0 2
49869: PUSH
49870: LD_VAR 0 2
49874: PPUSH
49875: LD_VAR 0 2
49879: PUSH
49880: LD_INT 1
49882: PLUS
49883: PPUSH
49884: LD_VAR 0 7
49888: PPUSH
49889: CALL_OW 1
49893: ST_TO_ADDR
49894: GO 49862
49896: POP
49897: POP
// end ;
49898: GO 49828
49900: POP
49901: POP
// if not result then
49902: LD_VAR 0 2
49906: NOT
49907: IFFALSE 49911
// exit ;
49909: GO 50059
// mech := result [ 1 ] ;
49911: LD_ADDR_VAR 0 5
49915: PUSH
49916: LD_VAR 0 2
49920: PUSH
49921: LD_INT 1
49923: ARRAY
49924: ST_TO_ADDR
// if result > 1 then
49925: LD_VAR 0 2
49929: PUSH
49930: LD_INT 1
49932: GREATER
49933: IFFALSE 50045
// begin for i = 2 to result do
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: DOUBLE
49941: LD_INT 2
49943: DEC
49944: ST_TO_ADDR
49945: LD_VAR 0 2
49949: PUSH
49950: FOR_TO
49951: IFFALSE 50043
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49953: LD_ADDR_VAR 0 4
49957: PUSH
49958: LD_VAR 0 2
49962: PUSH
49963: LD_VAR 0 3
49967: ARRAY
49968: PPUSH
49969: LD_INT 3
49971: PPUSH
49972: CALL_OW 259
49976: PUSH
49977: LD_VAR 0 2
49981: PUSH
49982: LD_VAR 0 3
49986: ARRAY
49987: PPUSH
49988: CALL_OW 432
49992: MINUS
49993: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49994: LD_VAR 0 4
49998: PUSH
49999: LD_VAR 0 5
50003: PPUSH
50004: LD_INT 3
50006: PPUSH
50007: CALL_OW 259
50011: PUSH
50012: LD_VAR 0 5
50016: PPUSH
50017: CALL_OW 432
50021: MINUS
50022: GREATEREQUAL
50023: IFFALSE 50041
// mech := result [ i ] ;
50025: LD_ADDR_VAR 0 5
50029: PUSH
50030: LD_VAR 0 2
50034: PUSH
50035: LD_VAR 0 3
50039: ARRAY
50040: ST_TO_ADDR
// end ;
50041: GO 49950
50043: POP
50044: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50045: LD_VAR 0 1
50049: PPUSH
50050: LD_VAR 0 5
50054: PPUSH
50055: CALL_OW 135
// end ;
50059: LD_VAR 0 2
50063: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50064: LD_INT 0
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
// result := [ ] ;
50079: LD_ADDR_VAR 0 7
50083: PUSH
50084: EMPTY
50085: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50086: LD_VAR 0 1
50090: PPUSH
50091: CALL_OW 266
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: IN
50106: NOT
50107: IFFALSE 50111
// exit ;
50109: GO 51745
// if name then
50111: LD_VAR 0 3
50115: IFFALSE 50131
// SetBName ( base_dep , name ) ;
50117: LD_VAR 0 1
50121: PPUSH
50122: LD_VAR 0 3
50126: PPUSH
50127: CALL_OW 500
// base := GetBase ( base_dep ) ;
50131: LD_ADDR_VAR 0 15
50135: PUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 274
50145: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50146: LD_ADDR_VAR 0 16
50150: PUSH
50151: LD_VAR 0 1
50155: PPUSH
50156: CALL_OW 255
50160: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50161: LD_ADDR_VAR 0 17
50165: PUSH
50166: LD_VAR 0 1
50170: PPUSH
50171: CALL_OW 248
50175: ST_TO_ADDR
// if sources then
50176: LD_VAR 0 5
50180: IFFALSE 50227
// for i = 1 to 3 do
50182: LD_ADDR_VAR 0 8
50186: PUSH
50187: DOUBLE
50188: LD_INT 1
50190: DEC
50191: ST_TO_ADDR
50192: LD_INT 3
50194: PUSH
50195: FOR_TO
50196: IFFALSE 50225
// AddResourceType ( base , i , sources [ i ] ) ;
50198: LD_VAR 0 15
50202: PPUSH
50203: LD_VAR 0 8
50207: PPUSH
50208: LD_VAR 0 5
50212: PUSH
50213: LD_VAR 0 8
50217: ARRAY
50218: PPUSH
50219: CALL_OW 276
50223: GO 50195
50225: POP
50226: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50227: LD_ADDR_VAR 0 18
50231: PUSH
50232: LD_VAR 0 15
50236: PPUSH
50237: LD_VAR 0 2
50241: PPUSH
50242: LD_INT 1
50244: PPUSH
50245: CALL 49488 0 3
50249: ST_TO_ADDR
// InitHc ;
50250: CALL_OW 19
// InitUc ;
50254: CALL_OW 18
// uc_side := side ;
50258: LD_ADDR_OWVAR 20
50262: PUSH
50263: LD_VAR 0 16
50267: ST_TO_ADDR
// uc_nation := nation ;
50268: LD_ADDR_OWVAR 21
50272: PUSH
50273: LD_VAR 0 17
50277: ST_TO_ADDR
// if buildings then
50278: LD_VAR 0 18
50282: IFFALSE 51604
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50284: LD_ADDR_VAR 0 19
50288: PUSH
50289: LD_VAR 0 18
50293: PPUSH
50294: LD_INT 2
50296: PUSH
50297: LD_INT 30
50299: PUSH
50300: LD_INT 29
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 30
50309: PUSH
50310: LD_INT 30
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: PPUSH
50322: CALL_OW 72
50326: ST_TO_ADDR
// if tmp then
50327: LD_VAR 0 19
50331: IFFALSE 50379
// for i in tmp do
50333: LD_ADDR_VAR 0 8
50337: PUSH
50338: LD_VAR 0 19
50342: PUSH
50343: FOR_IN
50344: IFFALSE 50377
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50346: LD_VAR 0 8
50350: PPUSH
50351: CALL_OW 250
50355: PPUSH
50356: LD_VAR 0 8
50360: PPUSH
50361: CALL_OW 251
50365: PPUSH
50366: LD_VAR 0 16
50370: PPUSH
50371: CALL_OW 441
50375: GO 50343
50377: POP
50378: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50379: LD_VAR 0 18
50383: PPUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 30
50389: PUSH
50390: LD_INT 32
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 30
50399: PUSH
50400: LD_INT 33
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: PPUSH
50412: CALL_OW 72
50416: IFFALSE 50504
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50418: LD_ADDR_VAR 0 8
50422: PUSH
50423: LD_VAR 0 18
50427: PPUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 30
50433: PUSH
50434: LD_INT 32
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 30
50443: PUSH
50444: LD_INT 33
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: PPUSH
50456: CALL_OW 72
50460: PUSH
50461: FOR_IN
50462: IFFALSE 50502
// begin if not GetBWeapon ( i ) then
50464: LD_VAR 0 8
50468: PPUSH
50469: CALL_OW 269
50473: NOT
50474: IFFALSE 50500
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50476: LD_VAR 0 8
50480: PPUSH
50481: LD_VAR 0 8
50485: PPUSH
50486: LD_VAR 0 2
50490: PPUSH
50491: CALL 51750 0 2
50495: PPUSH
50496: CALL_OW 431
// end ;
50500: GO 50461
50502: POP
50503: POP
// end ; for i = 1 to personel do
50504: LD_ADDR_VAR 0 8
50508: PUSH
50509: DOUBLE
50510: LD_INT 1
50512: DEC
50513: ST_TO_ADDR
50514: LD_VAR 0 6
50518: PUSH
50519: FOR_TO
50520: IFFALSE 51584
// begin if i > 4 then
50522: LD_VAR 0 8
50526: PUSH
50527: LD_INT 4
50529: GREATER
50530: IFFALSE 50534
// break ;
50532: GO 51584
// case i of 1 :
50534: LD_VAR 0 8
50538: PUSH
50539: LD_INT 1
50541: DOUBLE
50542: EQUAL
50543: IFTRUE 50547
50545: GO 50627
50547: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50548: LD_ADDR_VAR 0 12
50552: PUSH
50553: LD_VAR 0 18
50557: PPUSH
50558: LD_INT 22
50560: PUSH
50561: LD_VAR 0 16
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 58
50572: PUSH
50573: EMPTY
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 30
50581: PUSH
50582: LD_INT 32
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 30
50591: PUSH
50592: LD_INT 4
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 30
50601: PUSH
50602: LD_INT 5
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: PPUSH
50620: CALL_OW 72
50624: ST_TO_ADDR
50625: GO 50849
50627: LD_INT 2
50629: DOUBLE
50630: EQUAL
50631: IFTRUE 50635
50633: GO 50697
50635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50636: LD_ADDR_VAR 0 12
50640: PUSH
50641: LD_VAR 0 18
50645: PPUSH
50646: LD_INT 22
50648: PUSH
50649: LD_VAR 0 16
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 30
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 30
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PPUSH
50690: CALL_OW 72
50694: ST_TO_ADDR
50695: GO 50849
50697: LD_INT 3
50699: DOUBLE
50700: EQUAL
50701: IFTRUE 50705
50703: GO 50767
50705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50706: LD_ADDR_VAR 0 12
50710: PUSH
50711: LD_VAR 0 18
50715: PPUSH
50716: LD_INT 22
50718: PUSH
50719: LD_VAR 0 16
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 30
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 30
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PPUSH
50760: CALL_OW 72
50764: ST_TO_ADDR
50765: GO 50849
50767: LD_INT 4
50769: DOUBLE
50770: EQUAL
50771: IFTRUE 50775
50773: GO 50848
50775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50776: LD_ADDR_VAR 0 12
50780: PUSH
50781: LD_VAR 0 18
50785: PPUSH
50786: LD_INT 22
50788: PUSH
50789: LD_VAR 0 16
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 30
50803: PUSH
50804: LD_INT 6
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 30
50813: PUSH
50814: LD_INT 7
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 30
50823: PUSH
50824: LD_INT 8
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PPUSH
50841: CALL_OW 72
50845: ST_TO_ADDR
50846: GO 50849
50848: POP
// if i = 1 then
50849: LD_VAR 0 8
50853: PUSH
50854: LD_INT 1
50856: EQUAL
50857: IFFALSE 50968
// begin tmp := [ ] ;
50859: LD_ADDR_VAR 0 19
50863: PUSH
50864: EMPTY
50865: ST_TO_ADDR
// for j in f do
50866: LD_ADDR_VAR 0 9
50870: PUSH
50871: LD_VAR 0 12
50875: PUSH
50876: FOR_IN
50877: IFFALSE 50950
// if GetBType ( j ) = b_bunker then
50879: LD_VAR 0 9
50883: PPUSH
50884: CALL_OW 266
50888: PUSH
50889: LD_INT 32
50891: EQUAL
50892: IFFALSE 50919
// tmp := Insert ( tmp , 1 , j ) else
50894: LD_ADDR_VAR 0 19
50898: PUSH
50899: LD_VAR 0 19
50903: PPUSH
50904: LD_INT 1
50906: PPUSH
50907: LD_VAR 0 9
50911: PPUSH
50912: CALL_OW 2
50916: ST_TO_ADDR
50917: GO 50948
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50919: LD_ADDR_VAR 0 19
50923: PUSH
50924: LD_VAR 0 19
50928: PPUSH
50929: LD_VAR 0 19
50933: PUSH
50934: LD_INT 1
50936: PLUS
50937: PPUSH
50938: LD_VAR 0 9
50942: PPUSH
50943: CALL_OW 2
50947: ST_TO_ADDR
50948: GO 50876
50950: POP
50951: POP
// if tmp then
50952: LD_VAR 0 19
50956: IFFALSE 50968
// f := tmp ;
50958: LD_ADDR_VAR 0 12
50962: PUSH
50963: LD_VAR 0 19
50967: ST_TO_ADDR
// end ; x := personel [ i ] ;
50968: LD_ADDR_VAR 0 13
50972: PUSH
50973: LD_VAR 0 6
50977: PUSH
50978: LD_VAR 0 8
50982: ARRAY
50983: ST_TO_ADDR
// if x = - 1 then
50984: LD_VAR 0 13
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: EQUAL
50993: IFFALSE 51202
// begin for j in f do
50995: LD_ADDR_VAR 0 9
50999: PUSH
51000: LD_VAR 0 12
51004: PUSH
51005: FOR_IN
51006: IFFALSE 51198
// repeat InitHc ;
51008: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51012: LD_VAR 0 9
51016: PPUSH
51017: CALL_OW 266
51021: PUSH
51022: LD_INT 5
51024: EQUAL
51025: IFFALSE 51095
// begin if UnitsInside ( j ) < 3 then
51027: LD_VAR 0 9
51031: PPUSH
51032: CALL_OW 313
51036: PUSH
51037: LD_INT 3
51039: LESS
51040: IFFALSE 51076
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51042: LD_INT 0
51044: PPUSH
51045: LD_INT 5
51047: PUSH
51048: LD_INT 8
51050: PUSH
51051: LD_INT 9
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: PUSH
51059: LD_VAR 0 17
51063: ARRAY
51064: PPUSH
51065: LD_VAR 0 4
51069: PPUSH
51070: CALL_OW 380
51074: GO 51093
// PrepareHuman ( false , i , skill ) ;
51076: LD_INT 0
51078: PPUSH
51079: LD_VAR 0 8
51083: PPUSH
51084: LD_VAR 0 4
51088: PPUSH
51089: CALL_OW 380
// end else
51093: GO 51112
// PrepareHuman ( false , i , skill ) ;
51095: LD_INT 0
51097: PPUSH
51098: LD_VAR 0 8
51102: PPUSH
51103: LD_VAR 0 4
51107: PPUSH
51108: CALL_OW 380
// un := CreateHuman ;
51112: LD_ADDR_VAR 0 14
51116: PUSH
51117: CALL_OW 44
51121: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51122: LD_ADDR_VAR 0 7
51126: PUSH
51127: LD_VAR 0 7
51131: PPUSH
51132: LD_INT 1
51134: PPUSH
51135: LD_VAR 0 14
51139: PPUSH
51140: CALL_OW 2
51144: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51145: LD_VAR 0 14
51149: PPUSH
51150: LD_VAR 0 9
51154: PPUSH
51155: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51159: LD_VAR 0 9
51163: PPUSH
51164: CALL_OW 313
51168: PUSH
51169: LD_INT 6
51171: EQUAL
51172: PUSH
51173: LD_VAR 0 9
51177: PPUSH
51178: CALL_OW 266
51182: PUSH
51183: LD_INT 32
51185: PUSH
51186: LD_INT 31
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: IN
51193: OR
51194: IFFALSE 51008
51196: GO 51005
51198: POP
51199: POP
// end else
51200: GO 51582
// for j = 1 to x do
51202: LD_ADDR_VAR 0 9
51206: PUSH
51207: DOUBLE
51208: LD_INT 1
51210: DEC
51211: ST_TO_ADDR
51212: LD_VAR 0 13
51216: PUSH
51217: FOR_TO
51218: IFFALSE 51580
// begin InitHc ;
51220: CALL_OW 19
// if not f then
51224: LD_VAR 0 12
51228: NOT
51229: IFFALSE 51318
// begin PrepareHuman ( false , i , skill ) ;
51231: LD_INT 0
51233: PPUSH
51234: LD_VAR 0 8
51238: PPUSH
51239: LD_VAR 0 4
51243: PPUSH
51244: CALL_OW 380
// un := CreateHuman ;
51248: LD_ADDR_VAR 0 14
51252: PUSH
51253: CALL_OW 44
51257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51258: LD_ADDR_VAR 0 7
51262: PUSH
51263: LD_VAR 0 7
51267: PPUSH
51268: LD_INT 1
51270: PPUSH
51271: LD_VAR 0 14
51275: PPUSH
51276: CALL_OW 2
51280: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51281: LD_VAR 0 14
51285: PPUSH
51286: LD_VAR 0 1
51290: PPUSH
51291: CALL_OW 250
51295: PPUSH
51296: LD_VAR 0 1
51300: PPUSH
51301: CALL_OW 251
51305: PPUSH
51306: LD_INT 10
51308: PPUSH
51309: LD_INT 0
51311: PPUSH
51312: CALL_OW 50
// continue ;
51316: GO 51217
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51318: LD_VAR 0 12
51322: PUSH
51323: LD_INT 1
51325: ARRAY
51326: PPUSH
51327: CALL_OW 313
51331: PUSH
51332: LD_VAR 0 12
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: CALL_OW 266
51345: PUSH
51346: LD_INT 32
51348: PUSH
51349: LD_INT 31
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: IN
51356: AND
51357: PUSH
51358: LD_VAR 0 12
51362: PUSH
51363: LD_INT 1
51365: ARRAY
51366: PPUSH
51367: CALL_OW 313
51371: PUSH
51372: LD_INT 6
51374: EQUAL
51375: OR
51376: IFFALSE 51396
// f := Delete ( f , 1 ) ;
51378: LD_ADDR_VAR 0 12
51382: PUSH
51383: LD_VAR 0 12
51387: PPUSH
51388: LD_INT 1
51390: PPUSH
51391: CALL_OW 3
51395: ST_TO_ADDR
// if not f then
51396: LD_VAR 0 12
51400: NOT
51401: IFFALSE 51419
// begin x := x + 2 ;
51403: LD_ADDR_VAR 0 13
51407: PUSH
51408: LD_VAR 0 13
51412: PUSH
51413: LD_INT 2
51415: PLUS
51416: ST_TO_ADDR
// continue ;
51417: GO 51217
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51419: LD_VAR 0 12
51423: PUSH
51424: LD_INT 1
51426: ARRAY
51427: PPUSH
51428: CALL_OW 266
51432: PUSH
51433: LD_INT 5
51435: EQUAL
51436: IFFALSE 51510
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51438: LD_VAR 0 12
51442: PUSH
51443: LD_INT 1
51445: ARRAY
51446: PPUSH
51447: CALL_OW 313
51451: PUSH
51452: LD_INT 3
51454: LESS
51455: IFFALSE 51491
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51457: LD_INT 0
51459: PPUSH
51460: LD_INT 5
51462: PUSH
51463: LD_INT 8
51465: PUSH
51466: LD_INT 9
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: PUSH
51474: LD_VAR 0 17
51478: ARRAY
51479: PPUSH
51480: LD_VAR 0 4
51484: PPUSH
51485: CALL_OW 380
51489: GO 51508
// PrepareHuman ( false , i , skill ) ;
51491: LD_INT 0
51493: PPUSH
51494: LD_VAR 0 8
51498: PPUSH
51499: LD_VAR 0 4
51503: PPUSH
51504: CALL_OW 380
// end else
51508: GO 51527
// PrepareHuman ( false , i , skill ) ;
51510: LD_INT 0
51512: PPUSH
51513: LD_VAR 0 8
51517: PPUSH
51518: LD_VAR 0 4
51522: PPUSH
51523: CALL_OW 380
// un := CreateHuman ;
51527: LD_ADDR_VAR 0 14
51531: PUSH
51532: CALL_OW 44
51536: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51537: LD_ADDR_VAR 0 7
51541: PUSH
51542: LD_VAR 0 7
51546: PPUSH
51547: LD_INT 1
51549: PPUSH
51550: LD_VAR 0 14
51554: PPUSH
51555: CALL_OW 2
51559: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51560: LD_VAR 0 14
51564: PPUSH
51565: LD_VAR 0 12
51569: PUSH
51570: LD_INT 1
51572: ARRAY
51573: PPUSH
51574: CALL_OW 52
// end ;
51578: GO 51217
51580: POP
51581: POP
// end ;
51582: GO 50519
51584: POP
51585: POP
// result := result ^ buildings ;
51586: LD_ADDR_VAR 0 7
51590: PUSH
51591: LD_VAR 0 7
51595: PUSH
51596: LD_VAR 0 18
51600: ADD
51601: ST_TO_ADDR
// end else
51602: GO 51745
// begin for i = 1 to personel do
51604: LD_ADDR_VAR 0 8
51608: PUSH
51609: DOUBLE
51610: LD_INT 1
51612: DEC
51613: ST_TO_ADDR
51614: LD_VAR 0 6
51618: PUSH
51619: FOR_TO
51620: IFFALSE 51743
// begin if i > 4 then
51622: LD_VAR 0 8
51626: PUSH
51627: LD_INT 4
51629: GREATER
51630: IFFALSE 51634
// break ;
51632: GO 51743
// x := personel [ i ] ;
51634: LD_ADDR_VAR 0 13
51638: PUSH
51639: LD_VAR 0 6
51643: PUSH
51644: LD_VAR 0 8
51648: ARRAY
51649: ST_TO_ADDR
// if x = - 1 then
51650: LD_VAR 0 13
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: EQUAL
51659: IFFALSE 51663
// continue ;
51661: GO 51619
// PrepareHuman ( false , i , skill ) ;
51663: LD_INT 0
51665: PPUSH
51666: LD_VAR 0 8
51670: PPUSH
51671: LD_VAR 0 4
51675: PPUSH
51676: CALL_OW 380
// un := CreateHuman ;
51680: LD_ADDR_VAR 0 14
51684: PUSH
51685: CALL_OW 44
51689: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51690: LD_VAR 0 14
51694: PPUSH
51695: LD_VAR 0 1
51699: PPUSH
51700: CALL_OW 250
51704: PPUSH
51705: LD_VAR 0 1
51709: PPUSH
51710: CALL_OW 251
51714: PPUSH
51715: LD_INT 10
51717: PPUSH
51718: LD_INT 0
51720: PPUSH
51721: CALL_OW 50
// result := result ^ un ;
51725: LD_ADDR_VAR 0 7
51729: PUSH
51730: LD_VAR 0 7
51734: PUSH
51735: LD_VAR 0 14
51739: ADD
51740: ST_TO_ADDR
// end ;
51741: GO 51619
51743: POP
51744: POP
// end ; end ;
51745: LD_VAR 0 7
51749: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51750: LD_INT 0
51752: PPUSH
51753: PPUSH
51754: PPUSH
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
51760: PPUSH
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
51766: PPUSH
51767: PPUSH
// result := false ;
51768: LD_ADDR_VAR 0 3
51772: PUSH
51773: LD_INT 0
51775: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51776: LD_VAR 0 1
51780: NOT
51781: PUSH
51782: LD_VAR 0 1
51786: PPUSH
51787: CALL_OW 266
51791: PUSH
51792: LD_INT 32
51794: PUSH
51795: LD_INT 33
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: IN
51802: NOT
51803: OR
51804: IFFALSE 51808
// exit ;
51806: GO 52917
// nat := GetNation ( tower ) ;
51808: LD_ADDR_VAR 0 12
51812: PUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 248
51822: ST_TO_ADDR
// side := GetSide ( tower ) ;
51823: LD_ADDR_VAR 0 16
51827: PUSH
51828: LD_VAR 0 1
51832: PPUSH
51833: CALL_OW 255
51837: ST_TO_ADDR
// x := GetX ( tower ) ;
51838: LD_ADDR_VAR 0 10
51842: PUSH
51843: LD_VAR 0 1
51847: PPUSH
51848: CALL_OW 250
51852: ST_TO_ADDR
// y := GetY ( tower ) ;
51853: LD_ADDR_VAR 0 11
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 251
51867: ST_TO_ADDR
// if not x or not y then
51868: LD_VAR 0 10
51872: NOT
51873: PUSH
51874: LD_VAR 0 11
51878: NOT
51879: OR
51880: IFFALSE 51884
// exit ;
51882: GO 52917
// weapon := 0 ;
51884: LD_ADDR_VAR 0 18
51888: PUSH
51889: LD_INT 0
51891: ST_TO_ADDR
// fac_list := [ ] ;
51892: LD_ADDR_VAR 0 17
51896: PUSH
51897: EMPTY
51898: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51899: LD_ADDR_VAR 0 6
51903: PUSH
51904: LD_VAR 0 1
51908: PPUSH
51909: CALL_OW 274
51913: PPUSH
51914: LD_VAR 0 2
51918: PPUSH
51919: LD_INT 0
51921: PPUSH
51922: CALL 49488 0 3
51926: PPUSH
51927: LD_INT 30
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PPUSH
51937: CALL_OW 72
51941: ST_TO_ADDR
// if not factories then
51942: LD_VAR 0 6
51946: NOT
51947: IFFALSE 51951
// exit ;
51949: GO 52917
// for i in factories do
51951: LD_ADDR_VAR 0 8
51955: PUSH
51956: LD_VAR 0 6
51960: PUSH
51961: FOR_IN
51962: IFFALSE 51987
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51964: LD_ADDR_VAR 0 17
51968: PUSH
51969: LD_VAR 0 17
51973: PUSH
51974: LD_VAR 0 8
51978: PPUSH
51979: CALL_OW 478
51983: UNION
51984: ST_TO_ADDR
51985: GO 51961
51987: POP
51988: POP
// if not fac_list then
51989: LD_VAR 0 17
51993: NOT
51994: IFFALSE 51998
// exit ;
51996: GO 52917
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51998: LD_ADDR_VAR 0 5
52002: PUSH
52003: LD_INT 4
52005: PUSH
52006: LD_INT 5
52008: PUSH
52009: LD_INT 9
52011: PUSH
52012: LD_INT 10
52014: PUSH
52015: LD_INT 6
52017: PUSH
52018: LD_INT 7
52020: PUSH
52021: LD_INT 11
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 27
52035: PUSH
52036: LD_INT 28
52038: PUSH
52039: LD_INT 26
52041: PUSH
52042: LD_INT 30
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 43
52053: PUSH
52054: LD_INT 44
52056: PUSH
52057: LD_INT 46
52059: PUSH
52060: LD_INT 45
52062: PUSH
52063: LD_INT 47
52065: PUSH
52066: LD_INT 49
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: PUSH
52082: LD_VAR 0 12
52086: ARRAY
52087: ST_TO_ADDR
// list := list isect fac_list ;
52088: LD_ADDR_VAR 0 5
52092: PUSH
52093: LD_VAR 0 5
52097: PUSH
52098: LD_VAR 0 17
52102: ISECT
52103: ST_TO_ADDR
// if not list then
52104: LD_VAR 0 5
52108: NOT
52109: IFFALSE 52113
// exit ;
52111: GO 52917
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52113: LD_VAR 0 12
52117: PUSH
52118: LD_INT 3
52120: EQUAL
52121: PUSH
52122: LD_INT 49
52124: PUSH
52125: LD_VAR 0 5
52129: IN
52130: AND
52131: PUSH
52132: LD_INT 31
52134: PPUSH
52135: LD_VAR 0 16
52139: PPUSH
52140: CALL_OW 321
52144: PUSH
52145: LD_INT 2
52147: EQUAL
52148: AND
52149: IFFALSE 52209
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52151: LD_INT 22
52153: PUSH
52154: LD_VAR 0 16
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 35
52165: PUSH
52166: LD_INT 49
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 91
52175: PUSH
52176: LD_VAR 0 1
52180: PUSH
52181: LD_INT 10
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: PPUSH
52194: CALL_OW 69
52198: NOT
52199: IFFALSE 52209
// weapon := ru_time_lapser ;
52201: LD_ADDR_VAR 0 18
52205: PUSH
52206: LD_INT 49
52208: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52209: LD_VAR 0 12
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: IN
52224: PUSH
52225: LD_INT 11
52227: PUSH
52228: LD_VAR 0 5
52232: IN
52233: PUSH
52234: LD_INT 30
52236: PUSH
52237: LD_VAR 0 5
52241: IN
52242: OR
52243: AND
52244: PUSH
52245: LD_INT 6
52247: PPUSH
52248: LD_VAR 0 16
52252: PPUSH
52253: CALL_OW 321
52257: PUSH
52258: LD_INT 2
52260: EQUAL
52261: AND
52262: IFFALSE 52427
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52264: LD_INT 22
52266: PUSH
52267: LD_VAR 0 16
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: LD_INT 35
52281: PUSH
52282: LD_INT 11
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 35
52291: PUSH
52292: LD_INT 30
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 91
52306: PUSH
52307: LD_VAR 0 1
52311: PUSH
52312: LD_INT 18
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: PPUSH
52325: CALL_OW 69
52329: NOT
52330: PUSH
52331: LD_INT 22
52333: PUSH
52334: LD_VAR 0 16
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 30
52348: PUSH
52349: LD_INT 32
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 30
52358: PUSH
52359: LD_INT 33
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 91
52373: PUSH
52374: LD_VAR 0 1
52378: PUSH
52379: LD_INT 12
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: PPUSH
52395: CALL_OW 69
52399: PUSH
52400: LD_INT 2
52402: GREATER
52403: AND
52404: IFFALSE 52427
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52406: LD_ADDR_VAR 0 18
52410: PUSH
52411: LD_INT 11
52413: PUSH
52414: LD_INT 30
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_VAR 0 12
52425: ARRAY
52426: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52427: LD_VAR 0 18
52431: NOT
52432: PUSH
52433: LD_INT 40
52435: PPUSH
52436: LD_VAR 0 16
52440: PPUSH
52441: CALL_OW 321
52445: PUSH
52446: LD_INT 2
52448: EQUAL
52449: AND
52450: PUSH
52451: LD_INT 7
52453: PUSH
52454: LD_VAR 0 5
52458: IN
52459: PUSH
52460: LD_INT 28
52462: PUSH
52463: LD_VAR 0 5
52467: IN
52468: OR
52469: PUSH
52470: LD_INT 45
52472: PUSH
52473: LD_VAR 0 5
52477: IN
52478: OR
52479: AND
52480: IFFALSE 52734
// begin hex := GetHexInfo ( x , y ) ;
52482: LD_ADDR_VAR 0 4
52486: PUSH
52487: LD_VAR 0 10
52491: PPUSH
52492: LD_VAR 0 11
52496: PPUSH
52497: CALL_OW 546
52501: ST_TO_ADDR
// if hex [ 1 ] then
52502: LD_VAR 0 4
52506: PUSH
52507: LD_INT 1
52509: ARRAY
52510: IFFALSE 52514
// exit ;
52512: GO 52917
// height := hex [ 2 ] ;
52514: LD_ADDR_VAR 0 15
52518: PUSH
52519: LD_VAR 0 4
52523: PUSH
52524: LD_INT 2
52526: ARRAY
52527: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52528: LD_ADDR_VAR 0 14
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 5
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: ST_TO_ADDR
// for i in tmp do
52551: LD_ADDR_VAR 0 8
52555: PUSH
52556: LD_VAR 0 14
52560: PUSH
52561: FOR_IN
52562: IFFALSE 52732
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52564: LD_ADDR_VAR 0 9
52568: PUSH
52569: LD_VAR 0 10
52573: PPUSH
52574: LD_VAR 0 8
52578: PPUSH
52579: LD_INT 5
52581: PPUSH
52582: CALL_OW 272
52586: PUSH
52587: LD_VAR 0 11
52591: PPUSH
52592: LD_VAR 0 8
52596: PPUSH
52597: LD_INT 5
52599: PPUSH
52600: CALL_OW 273
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52609: LD_VAR 0 9
52613: PUSH
52614: LD_INT 1
52616: ARRAY
52617: PPUSH
52618: LD_VAR 0 9
52622: PUSH
52623: LD_INT 2
52625: ARRAY
52626: PPUSH
52627: CALL_OW 488
52631: IFFALSE 52730
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52633: LD_ADDR_VAR 0 4
52637: PUSH
52638: LD_VAR 0 9
52642: PUSH
52643: LD_INT 1
52645: ARRAY
52646: PPUSH
52647: LD_VAR 0 9
52651: PUSH
52652: LD_INT 2
52654: ARRAY
52655: PPUSH
52656: CALL_OW 546
52660: ST_TO_ADDR
// if hex [ 1 ] then
52661: LD_VAR 0 4
52665: PUSH
52666: LD_INT 1
52668: ARRAY
52669: IFFALSE 52673
// continue ;
52671: GO 52561
// h := hex [ 2 ] ;
52673: LD_ADDR_VAR 0 13
52677: PUSH
52678: LD_VAR 0 4
52682: PUSH
52683: LD_INT 2
52685: ARRAY
52686: ST_TO_ADDR
// if h + 7 < height then
52687: LD_VAR 0 13
52691: PUSH
52692: LD_INT 7
52694: PLUS
52695: PUSH
52696: LD_VAR 0 15
52700: LESS
52701: IFFALSE 52730
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52703: LD_ADDR_VAR 0 18
52707: PUSH
52708: LD_INT 7
52710: PUSH
52711: LD_INT 28
52713: PUSH
52714: LD_INT 45
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: PUSH
52722: LD_VAR 0 12
52726: ARRAY
52727: ST_TO_ADDR
// break ;
52728: GO 52732
// end ; end ; end ;
52730: GO 52561
52732: POP
52733: POP
// end ; if not weapon then
52734: LD_VAR 0 18
52738: NOT
52739: IFFALSE 52799
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52741: LD_ADDR_VAR 0 5
52745: PUSH
52746: LD_VAR 0 5
52750: PUSH
52751: LD_INT 11
52753: PUSH
52754: LD_INT 30
52756: PUSH
52757: LD_INT 49
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: DIFF
52765: ST_TO_ADDR
// if not list then
52766: LD_VAR 0 5
52770: NOT
52771: IFFALSE 52775
// exit ;
52773: GO 52917
// weapon := list [ rand ( 1 , list ) ] ;
52775: LD_ADDR_VAR 0 18
52779: PUSH
52780: LD_VAR 0 5
52784: PUSH
52785: LD_INT 1
52787: PPUSH
52788: LD_VAR 0 5
52792: PPUSH
52793: CALL_OW 12
52797: ARRAY
52798: ST_TO_ADDR
// end ; if weapon then
52799: LD_VAR 0 18
52803: IFFALSE 52917
// begin tmp := CostOfWeapon ( weapon ) ;
52805: LD_ADDR_VAR 0 14
52809: PUSH
52810: LD_VAR 0 18
52814: PPUSH
52815: CALL_OW 451
52819: ST_TO_ADDR
// j := GetBase ( tower ) ;
52820: LD_ADDR_VAR 0 9
52824: PUSH
52825: LD_VAR 0 1
52829: PPUSH
52830: CALL_OW 274
52834: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52835: LD_VAR 0 9
52839: PPUSH
52840: LD_INT 1
52842: PPUSH
52843: CALL_OW 275
52847: PUSH
52848: LD_VAR 0 14
52852: PUSH
52853: LD_INT 1
52855: ARRAY
52856: GREATEREQUAL
52857: PUSH
52858: LD_VAR 0 9
52862: PPUSH
52863: LD_INT 2
52865: PPUSH
52866: CALL_OW 275
52870: PUSH
52871: LD_VAR 0 14
52875: PUSH
52876: LD_INT 2
52878: ARRAY
52879: GREATEREQUAL
52880: AND
52881: PUSH
52882: LD_VAR 0 9
52886: PPUSH
52887: LD_INT 3
52889: PPUSH
52890: CALL_OW 275
52894: PUSH
52895: LD_VAR 0 14
52899: PUSH
52900: LD_INT 3
52902: ARRAY
52903: GREATEREQUAL
52904: AND
52905: IFFALSE 52917
// result := weapon ;
52907: LD_ADDR_VAR 0 3
52911: PUSH
52912: LD_VAR 0 18
52916: ST_TO_ADDR
// end ; end ;
52917: LD_VAR 0 3
52921: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
// result := true ;
52926: LD_ADDR_VAR 0 3
52930: PUSH
52931: LD_INT 1
52933: ST_TO_ADDR
// if array1 = array2 then
52934: LD_VAR 0 1
52938: PUSH
52939: LD_VAR 0 2
52943: EQUAL
52944: IFFALSE 53004
// begin for i = 1 to array1 do
52946: LD_ADDR_VAR 0 4
52950: PUSH
52951: DOUBLE
52952: LD_INT 1
52954: DEC
52955: ST_TO_ADDR
52956: LD_VAR 0 1
52960: PUSH
52961: FOR_TO
52962: IFFALSE 53000
// if array1 [ i ] <> array2 [ i ] then
52964: LD_VAR 0 1
52968: PUSH
52969: LD_VAR 0 4
52973: ARRAY
52974: PUSH
52975: LD_VAR 0 2
52979: PUSH
52980: LD_VAR 0 4
52984: ARRAY
52985: NONEQUAL
52986: IFFALSE 52998
// begin result := false ;
52988: LD_ADDR_VAR 0 3
52992: PUSH
52993: LD_INT 0
52995: ST_TO_ADDR
// break ;
52996: GO 53000
// end ;
52998: GO 52961
53000: POP
53001: POP
// end else
53002: GO 53012
// result := false ;
53004: LD_ADDR_VAR 0 3
53008: PUSH
53009: LD_INT 0
53011: ST_TO_ADDR
// end ;
53012: LD_VAR 0 3
53016: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53017: LD_INT 0
53019: PPUSH
53020: PPUSH
// if not array1 or not array2 then
53021: LD_VAR 0 1
53025: NOT
53026: PUSH
53027: LD_VAR 0 2
53031: NOT
53032: OR
53033: IFFALSE 53037
// exit ;
53035: GO 53101
// result := true ;
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_INT 1
53044: ST_TO_ADDR
// for i = 1 to array1 do
53045: LD_ADDR_VAR 0 4
53049: PUSH
53050: DOUBLE
53051: LD_INT 1
53053: DEC
53054: ST_TO_ADDR
53055: LD_VAR 0 1
53059: PUSH
53060: FOR_TO
53061: IFFALSE 53099
// if array1 [ i ] <> array2 [ i ] then
53063: LD_VAR 0 1
53067: PUSH
53068: LD_VAR 0 4
53072: ARRAY
53073: PUSH
53074: LD_VAR 0 2
53078: PUSH
53079: LD_VAR 0 4
53083: ARRAY
53084: NONEQUAL
53085: IFFALSE 53097
// begin result := false ;
53087: LD_ADDR_VAR 0 3
53091: PUSH
53092: LD_INT 0
53094: ST_TO_ADDR
// break ;
53095: GO 53099
// end ;
53097: GO 53060
53099: POP
53100: POP
// end ;
53101: LD_VAR 0 3
53105: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53106: LD_INT 0
53108: PPUSH
53109: PPUSH
53110: PPUSH
// pom := GetBase ( fac ) ;
53111: LD_ADDR_VAR 0 5
53115: PUSH
53116: LD_VAR 0 1
53120: PPUSH
53121: CALL_OW 274
53125: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53126: LD_ADDR_VAR 0 4
53130: PUSH
53131: LD_VAR 0 2
53135: PUSH
53136: LD_INT 1
53138: ARRAY
53139: PPUSH
53140: LD_VAR 0 2
53144: PUSH
53145: LD_INT 2
53147: ARRAY
53148: PPUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 3
53156: ARRAY
53157: PPUSH
53158: LD_VAR 0 2
53162: PUSH
53163: LD_INT 4
53165: ARRAY
53166: PPUSH
53167: CALL_OW 449
53171: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53172: LD_ADDR_VAR 0 3
53176: PUSH
53177: LD_VAR 0 5
53181: PPUSH
53182: LD_INT 1
53184: PPUSH
53185: CALL_OW 275
53189: PUSH
53190: LD_VAR 0 4
53194: PUSH
53195: LD_INT 1
53197: ARRAY
53198: GREATEREQUAL
53199: PUSH
53200: LD_VAR 0 5
53204: PPUSH
53205: LD_INT 2
53207: PPUSH
53208: CALL_OW 275
53212: PUSH
53213: LD_VAR 0 4
53217: PUSH
53218: LD_INT 2
53220: ARRAY
53221: GREATEREQUAL
53222: AND
53223: PUSH
53224: LD_VAR 0 5
53228: PPUSH
53229: LD_INT 3
53231: PPUSH
53232: CALL_OW 275
53236: PUSH
53237: LD_VAR 0 4
53241: PUSH
53242: LD_INT 3
53244: ARRAY
53245: GREATEREQUAL
53246: AND
53247: ST_TO_ADDR
// end ;
53248: LD_VAR 0 3
53252: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53253: LD_INT 0
53255: PPUSH
53256: PPUSH
53257: PPUSH
53258: PPUSH
// pom := GetBase ( building ) ;
53259: LD_ADDR_VAR 0 3
53263: PUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 274
53273: ST_TO_ADDR
// if not pom then
53274: LD_VAR 0 3
53278: NOT
53279: IFFALSE 53283
// exit ;
53281: GO 53453
// btype := GetBType ( building ) ;
53283: LD_ADDR_VAR 0 5
53287: PUSH
53288: LD_VAR 0 1
53292: PPUSH
53293: CALL_OW 266
53297: ST_TO_ADDR
// if btype = b_armoury then
53298: LD_VAR 0 5
53302: PUSH
53303: LD_INT 4
53305: EQUAL
53306: IFFALSE 53316
// btype := b_barracks ;
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: LD_INT 5
53315: ST_TO_ADDR
// if btype = b_depot then
53316: LD_VAR 0 5
53320: PUSH
53321: LD_INT 0
53323: EQUAL
53324: IFFALSE 53334
// btype := b_warehouse ;
53326: LD_ADDR_VAR 0 5
53330: PUSH
53331: LD_INT 1
53333: ST_TO_ADDR
// if btype = b_workshop then
53334: LD_VAR 0 5
53338: PUSH
53339: LD_INT 2
53341: EQUAL
53342: IFFALSE 53352
// btype := b_factory ;
53344: LD_ADDR_VAR 0 5
53348: PUSH
53349: LD_INT 3
53351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53352: LD_ADDR_VAR 0 4
53356: PUSH
53357: LD_VAR 0 5
53361: PPUSH
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 248
53371: PPUSH
53372: CALL_OW 450
53376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53377: LD_ADDR_VAR 0 2
53381: PUSH
53382: LD_VAR 0 3
53386: PPUSH
53387: LD_INT 1
53389: PPUSH
53390: CALL_OW 275
53394: PUSH
53395: LD_VAR 0 4
53399: PUSH
53400: LD_INT 1
53402: ARRAY
53403: GREATEREQUAL
53404: PUSH
53405: LD_VAR 0 3
53409: PPUSH
53410: LD_INT 2
53412: PPUSH
53413: CALL_OW 275
53417: PUSH
53418: LD_VAR 0 4
53422: PUSH
53423: LD_INT 2
53425: ARRAY
53426: GREATEREQUAL
53427: AND
53428: PUSH
53429: LD_VAR 0 3
53433: PPUSH
53434: LD_INT 3
53436: PPUSH
53437: CALL_OW 275
53441: PUSH
53442: LD_VAR 0 4
53446: PUSH
53447: LD_INT 3
53449: ARRAY
53450: GREATEREQUAL
53451: AND
53452: ST_TO_ADDR
// end ;
53453: LD_VAR 0 2
53457: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53458: LD_INT 0
53460: PPUSH
53461: PPUSH
53462: PPUSH
// pom := GetBase ( building ) ;
53463: LD_ADDR_VAR 0 4
53467: PUSH
53468: LD_VAR 0 1
53472: PPUSH
53473: CALL_OW 274
53477: ST_TO_ADDR
// if not pom then
53478: LD_VAR 0 4
53482: NOT
53483: IFFALSE 53487
// exit ;
53485: GO 53588
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53487: LD_ADDR_VAR 0 5
53491: PUSH
53492: LD_VAR 0 2
53496: PPUSH
53497: LD_VAR 0 1
53501: PPUSH
53502: CALL_OW 248
53506: PPUSH
53507: CALL_OW 450
53511: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53512: LD_ADDR_VAR 0 3
53516: PUSH
53517: LD_VAR 0 4
53521: PPUSH
53522: LD_INT 1
53524: PPUSH
53525: CALL_OW 275
53529: PUSH
53530: LD_VAR 0 5
53534: PUSH
53535: LD_INT 1
53537: ARRAY
53538: GREATEREQUAL
53539: PUSH
53540: LD_VAR 0 4
53544: PPUSH
53545: LD_INT 2
53547: PPUSH
53548: CALL_OW 275
53552: PUSH
53553: LD_VAR 0 5
53557: PUSH
53558: LD_INT 2
53560: ARRAY
53561: GREATEREQUAL
53562: AND
53563: PUSH
53564: LD_VAR 0 4
53568: PPUSH
53569: LD_INT 3
53571: PPUSH
53572: CALL_OW 275
53576: PUSH
53577: LD_VAR 0 5
53581: PUSH
53582: LD_INT 3
53584: ARRAY
53585: GREATEREQUAL
53586: AND
53587: ST_TO_ADDR
// end ;
53588: LD_VAR 0 3
53592: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53593: LD_INT 0
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
// result := false ;
53606: LD_ADDR_VAR 0 8
53610: PUSH
53611: LD_INT 0
53613: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53614: LD_VAR 0 5
53618: NOT
53619: PUSH
53620: LD_VAR 0 1
53624: NOT
53625: OR
53626: PUSH
53627: LD_VAR 0 2
53631: NOT
53632: OR
53633: PUSH
53634: LD_VAR 0 3
53638: NOT
53639: OR
53640: IFFALSE 53644
// exit ;
53642: GO 54458
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53644: LD_ADDR_VAR 0 14
53648: PUSH
53649: LD_VAR 0 1
53653: PPUSH
53654: LD_VAR 0 2
53658: PPUSH
53659: LD_VAR 0 3
53663: PPUSH
53664: LD_VAR 0 4
53668: PPUSH
53669: LD_VAR 0 5
53673: PUSH
53674: LD_INT 1
53676: ARRAY
53677: PPUSH
53678: CALL_OW 248
53682: PPUSH
53683: LD_INT 0
53685: PPUSH
53686: CALL 55695 0 6
53690: ST_TO_ADDR
// if not hexes then
53691: LD_VAR 0 14
53695: NOT
53696: IFFALSE 53700
// exit ;
53698: GO 54458
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53700: LD_ADDR_VAR 0 17
53704: PUSH
53705: LD_VAR 0 5
53709: PPUSH
53710: LD_INT 22
53712: PUSH
53713: LD_VAR 0 13
53717: PPUSH
53718: CALL_OW 255
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 30
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 30
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PPUSH
53759: CALL_OW 72
53763: ST_TO_ADDR
// for i = 1 to hexes do
53764: LD_ADDR_VAR 0 9
53768: PUSH
53769: DOUBLE
53770: LD_INT 1
53772: DEC
53773: ST_TO_ADDR
53774: LD_VAR 0 14
53778: PUSH
53779: FOR_TO
53780: IFFALSE 54456
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53782: LD_ADDR_VAR 0 13
53786: PUSH
53787: LD_VAR 0 14
53791: PUSH
53792: LD_VAR 0 9
53796: ARRAY
53797: PUSH
53798: LD_INT 1
53800: ARRAY
53801: PPUSH
53802: LD_VAR 0 14
53806: PUSH
53807: LD_VAR 0 9
53811: ARRAY
53812: PUSH
53813: LD_INT 2
53815: ARRAY
53816: PPUSH
53817: CALL_OW 428
53821: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53822: LD_VAR 0 14
53826: PUSH
53827: LD_VAR 0 9
53831: ARRAY
53832: PUSH
53833: LD_INT 1
53835: ARRAY
53836: PPUSH
53837: LD_VAR 0 14
53841: PUSH
53842: LD_VAR 0 9
53846: ARRAY
53847: PUSH
53848: LD_INT 2
53850: ARRAY
53851: PPUSH
53852: CALL_OW 351
53856: PUSH
53857: LD_VAR 0 14
53861: PUSH
53862: LD_VAR 0 9
53866: ARRAY
53867: PUSH
53868: LD_INT 1
53870: ARRAY
53871: PPUSH
53872: LD_VAR 0 14
53876: PUSH
53877: LD_VAR 0 9
53881: ARRAY
53882: PUSH
53883: LD_INT 2
53885: ARRAY
53886: PPUSH
53887: CALL_OW 488
53891: NOT
53892: OR
53893: PUSH
53894: LD_VAR 0 13
53898: PPUSH
53899: CALL_OW 247
53903: PUSH
53904: LD_INT 3
53906: EQUAL
53907: OR
53908: IFFALSE 53914
// exit ;
53910: POP
53911: POP
53912: GO 54458
// if not tmp then
53914: LD_VAR 0 13
53918: NOT
53919: IFFALSE 53923
// continue ;
53921: GO 53779
// result := true ;
53923: LD_ADDR_VAR 0 8
53927: PUSH
53928: LD_INT 1
53930: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53931: LD_VAR 0 6
53935: PUSH
53936: LD_VAR 0 13
53940: PPUSH
53941: CALL_OW 247
53945: PUSH
53946: LD_INT 2
53948: EQUAL
53949: AND
53950: PUSH
53951: LD_VAR 0 13
53955: PPUSH
53956: CALL_OW 263
53960: PUSH
53961: LD_INT 1
53963: EQUAL
53964: AND
53965: IFFALSE 54129
// begin if IsDrivenBy ( tmp ) then
53967: LD_VAR 0 13
53971: PPUSH
53972: CALL_OW 311
53976: IFFALSE 53980
// continue ;
53978: GO 53779
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53980: LD_VAR 0 6
53984: PPUSH
53985: LD_INT 3
53987: PUSH
53988: LD_INT 60
53990: PUSH
53991: EMPTY
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: LD_INT 55
54003: PUSH
54004: EMPTY
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PPUSH
54015: CALL_OW 72
54019: IFFALSE 54127
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54021: LD_ADDR_VAR 0 18
54025: PUSH
54026: LD_VAR 0 6
54030: PPUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 60
54036: PUSH
54037: EMPTY
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 55
54049: PUSH
54050: EMPTY
54051: LIST
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PPUSH
54061: CALL_OW 72
54065: PUSH
54066: LD_INT 1
54068: ARRAY
54069: ST_TO_ADDR
// if IsInUnit ( driver ) then
54070: LD_VAR 0 18
54074: PPUSH
54075: CALL_OW 310
54079: IFFALSE 54090
// ComExit ( driver ) ;
54081: LD_VAR 0 18
54085: PPUSH
54086: CALL 78879 0 1
// AddComEnterUnit ( driver , tmp ) ;
54090: LD_VAR 0 18
54094: PPUSH
54095: LD_VAR 0 13
54099: PPUSH
54100: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54104: LD_VAR 0 18
54108: PPUSH
54109: LD_VAR 0 7
54113: PPUSH
54114: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54118: LD_VAR 0 18
54122: PPUSH
54123: CALL_OW 181
// end ; continue ;
54127: GO 53779
// end ; if not cleaners or not tmp in cleaners then
54129: LD_VAR 0 6
54133: NOT
54134: PUSH
54135: LD_VAR 0 13
54139: PUSH
54140: LD_VAR 0 6
54144: IN
54145: NOT
54146: OR
54147: IFFALSE 54454
// begin if dep then
54149: LD_VAR 0 17
54153: IFFALSE 54289
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54155: LD_ADDR_VAR 0 16
54159: PUSH
54160: LD_VAR 0 17
54164: PUSH
54165: LD_INT 1
54167: ARRAY
54168: PPUSH
54169: CALL_OW 250
54173: PPUSH
54174: LD_VAR 0 17
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: PPUSH
54183: CALL_OW 254
54187: PPUSH
54188: LD_INT 5
54190: PPUSH
54191: CALL_OW 272
54195: PUSH
54196: LD_VAR 0 17
54200: PUSH
54201: LD_INT 1
54203: ARRAY
54204: PPUSH
54205: CALL_OW 251
54209: PPUSH
54210: LD_VAR 0 17
54214: PUSH
54215: LD_INT 1
54217: ARRAY
54218: PPUSH
54219: CALL_OW 254
54223: PPUSH
54224: LD_INT 5
54226: PPUSH
54227: CALL_OW 273
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54236: LD_VAR 0 16
54240: PUSH
54241: LD_INT 1
54243: ARRAY
54244: PPUSH
54245: LD_VAR 0 16
54249: PUSH
54250: LD_INT 2
54252: ARRAY
54253: PPUSH
54254: CALL_OW 488
54258: IFFALSE 54289
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54260: LD_VAR 0 13
54264: PPUSH
54265: LD_VAR 0 16
54269: PUSH
54270: LD_INT 1
54272: ARRAY
54273: PPUSH
54274: LD_VAR 0 16
54278: PUSH
54279: LD_INT 2
54281: ARRAY
54282: PPUSH
54283: CALL_OW 111
// continue ;
54287: GO 53779
// end ; end ; r := GetDir ( tmp ) ;
54289: LD_ADDR_VAR 0 15
54293: PUSH
54294: LD_VAR 0 13
54298: PPUSH
54299: CALL_OW 254
54303: ST_TO_ADDR
// if r = 5 then
54304: LD_VAR 0 15
54308: PUSH
54309: LD_INT 5
54311: EQUAL
54312: IFFALSE 54322
// r := 0 ;
54314: LD_ADDR_VAR 0 15
54318: PUSH
54319: LD_INT 0
54321: ST_TO_ADDR
// for j = r to 5 do
54322: LD_ADDR_VAR 0 10
54326: PUSH
54327: DOUBLE
54328: LD_VAR 0 15
54332: DEC
54333: ST_TO_ADDR
54334: LD_INT 5
54336: PUSH
54337: FOR_TO
54338: IFFALSE 54452
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54340: LD_ADDR_VAR 0 11
54344: PUSH
54345: LD_VAR 0 13
54349: PPUSH
54350: CALL_OW 250
54354: PPUSH
54355: LD_VAR 0 10
54359: PPUSH
54360: LD_INT 2
54362: PPUSH
54363: CALL_OW 272
54367: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54368: LD_ADDR_VAR 0 12
54372: PUSH
54373: LD_VAR 0 13
54377: PPUSH
54378: CALL_OW 251
54382: PPUSH
54383: LD_VAR 0 10
54387: PPUSH
54388: LD_INT 2
54390: PPUSH
54391: CALL_OW 273
54395: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54396: LD_VAR 0 11
54400: PPUSH
54401: LD_VAR 0 12
54405: PPUSH
54406: CALL_OW 488
54410: PUSH
54411: LD_VAR 0 11
54415: PPUSH
54416: LD_VAR 0 12
54420: PPUSH
54421: CALL_OW 428
54425: NOT
54426: AND
54427: IFFALSE 54450
// begin ComMoveXY ( tmp , _x , _y ) ;
54429: LD_VAR 0 13
54433: PPUSH
54434: LD_VAR 0 11
54438: PPUSH
54439: LD_VAR 0 12
54443: PPUSH
54444: CALL_OW 111
// break ;
54448: GO 54452
// end ; end ;
54450: GO 54337
54452: POP
54453: POP
// end ; end ;
54454: GO 53779
54456: POP
54457: POP
// end ;
54458: LD_VAR 0 8
54462: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54463: LD_INT 0
54465: PPUSH
// result := true ;
54466: LD_ADDR_VAR 0 3
54470: PUSH
54471: LD_INT 1
54473: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54474: LD_VAR 0 2
54478: PUSH
54479: LD_INT 24
54481: DOUBLE
54482: EQUAL
54483: IFTRUE 54493
54485: LD_INT 33
54487: DOUBLE
54488: EQUAL
54489: IFTRUE 54493
54491: GO 54518
54493: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54494: LD_ADDR_VAR 0 3
54498: PUSH
54499: LD_INT 32
54501: PPUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 321
54511: PUSH
54512: LD_INT 2
54514: EQUAL
54515: ST_TO_ADDR
54516: GO 54838
54518: LD_INT 20
54520: DOUBLE
54521: EQUAL
54522: IFTRUE 54526
54524: GO 54551
54526: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54527: LD_ADDR_VAR 0 3
54531: PUSH
54532: LD_INT 6
54534: PPUSH
54535: LD_VAR 0 1
54539: PPUSH
54540: CALL_OW 321
54544: PUSH
54545: LD_INT 2
54547: EQUAL
54548: ST_TO_ADDR
54549: GO 54838
54551: LD_INT 22
54553: DOUBLE
54554: EQUAL
54555: IFTRUE 54565
54557: LD_INT 36
54559: DOUBLE
54560: EQUAL
54561: IFTRUE 54565
54563: GO 54590
54565: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54566: LD_ADDR_VAR 0 3
54570: PUSH
54571: LD_INT 15
54573: PPUSH
54574: LD_VAR 0 1
54578: PPUSH
54579: CALL_OW 321
54583: PUSH
54584: LD_INT 2
54586: EQUAL
54587: ST_TO_ADDR
54588: GO 54838
54590: LD_INT 30
54592: DOUBLE
54593: EQUAL
54594: IFTRUE 54598
54596: GO 54623
54598: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54599: LD_ADDR_VAR 0 3
54603: PUSH
54604: LD_INT 20
54606: PPUSH
54607: LD_VAR 0 1
54611: PPUSH
54612: CALL_OW 321
54616: PUSH
54617: LD_INT 2
54619: EQUAL
54620: ST_TO_ADDR
54621: GO 54838
54623: LD_INT 28
54625: DOUBLE
54626: EQUAL
54627: IFTRUE 54637
54629: LD_INT 21
54631: DOUBLE
54632: EQUAL
54633: IFTRUE 54637
54635: GO 54662
54637: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54638: LD_ADDR_VAR 0 3
54642: PUSH
54643: LD_INT 21
54645: PPUSH
54646: LD_VAR 0 1
54650: PPUSH
54651: CALL_OW 321
54655: PUSH
54656: LD_INT 2
54658: EQUAL
54659: ST_TO_ADDR
54660: GO 54838
54662: LD_INT 16
54664: DOUBLE
54665: EQUAL
54666: IFTRUE 54670
54668: GO 54697
54670: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54671: LD_ADDR_VAR 0 3
54675: PUSH
54676: LD_EXP 133
54680: PPUSH
54681: LD_VAR 0 1
54685: PPUSH
54686: CALL_OW 321
54690: PUSH
54691: LD_INT 2
54693: EQUAL
54694: ST_TO_ADDR
54695: GO 54838
54697: LD_INT 19
54699: DOUBLE
54700: EQUAL
54701: IFTRUE 54711
54703: LD_INT 23
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54711
54709: GO 54738
54711: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54712: LD_ADDR_VAR 0 3
54716: PUSH
54717: LD_EXP 132
54721: PPUSH
54722: LD_VAR 0 1
54726: PPUSH
54727: CALL_OW 321
54731: PUSH
54732: LD_INT 2
54734: EQUAL
54735: ST_TO_ADDR
54736: GO 54838
54738: LD_INT 17
54740: DOUBLE
54741: EQUAL
54742: IFTRUE 54746
54744: GO 54771
54746: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54747: LD_ADDR_VAR 0 3
54751: PUSH
54752: LD_INT 39
54754: PPUSH
54755: LD_VAR 0 1
54759: PPUSH
54760: CALL_OW 321
54764: PUSH
54765: LD_INT 2
54767: EQUAL
54768: ST_TO_ADDR
54769: GO 54838
54771: LD_INT 18
54773: DOUBLE
54774: EQUAL
54775: IFTRUE 54779
54777: GO 54804
54779: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54780: LD_ADDR_VAR 0 3
54784: PUSH
54785: LD_INT 40
54787: PPUSH
54788: LD_VAR 0 1
54792: PPUSH
54793: CALL_OW 321
54797: PUSH
54798: LD_INT 2
54800: EQUAL
54801: ST_TO_ADDR
54802: GO 54838
54804: LD_INT 27
54806: DOUBLE
54807: EQUAL
54808: IFTRUE 54812
54810: GO 54837
54812: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54813: LD_ADDR_VAR 0 3
54817: PUSH
54818: LD_INT 35
54820: PPUSH
54821: LD_VAR 0 1
54825: PPUSH
54826: CALL_OW 321
54830: PUSH
54831: LD_INT 2
54833: EQUAL
54834: ST_TO_ADDR
54835: GO 54838
54837: POP
// end ;
54838: LD_VAR 0 3
54842: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54843: LD_INT 0
54845: PPUSH
54846: PPUSH
54847: PPUSH
54848: PPUSH
54849: PPUSH
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
54855: PPUSH
// result := false ;
54856: LD_ADDR_VAR 0 6
54860: PUSH
54861: LD_INT 0
54863: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54864: LD_VAR 0 1
54868: NOT
54869: PUSH
54870: LD_VAR 0 1
54874: PPUSH
54875: CALL_OW 266
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: IN
54890: NOT
54891: OR
54892: PUSH
54893: LD_VAR 0 2
54897: NOT
54898: OR
54899: PUSH
54900: LD_VAR 0 5
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: LD_INT 4
54919: PUSH
54920: LD_INT 5
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: IN
54931: NOT
54932: OR
54933: PUSH
54934: LD_VAR 0 3
54938: PPUSH
54939: LD_VAR 0 4
54943: PPUSH
54944: CALL_OW 488
54948: NOT
54949: OR
54950: IFFALSE 54954
// exit ;
54952: GO 55690
// side := GetSide ( depot ) ;
54954: LD_ADDR_VAR 0 9
54958: PUSH
54959: LD_VAR 0 1
54963: PPUSH
54964: CALL_OW 255
54968: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54969: LD_VAR 0 9
54973: PPUSH
54974: LD_VAR 0 2
54978: PPUSH
54979: CALL 54463 0 2
54983: NOT
54984: IFFALSE 54988
// exit ;
54986: GO 55690
// pom := GetBase ( depot ) ;
54988: LD_ADDR_VAR 0 10
54992: PUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: CALL_OW 274
55002: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55003: LD_ADDR_VAR 0 11
55007: PUSH
55008: LD_VAR 0 2
55012: PPUSH
55013: LD_VAR 0 1
55017: PPUSH
55018: CALL_OW 248
55022: PPUSH
55023: CALL_OW 450
55027: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55028: LD_VAR 0 10
55032: PPUSH
55033: LD_INT 1
55035: PPUSH
55036: CALL_OW 275
55040: PUSH
55041: LD_VAR 0 11
55045: PUSH
55046: LD_INT 1
55048: ARRAY
55049: GREATEREQUAL
55050: PUSH
55051: LD_VAR 0 10
55055: PPUSH
55056: LD_INT 2
55058: PPUSH
55059: CALL_OW 275
55063: PUSH
55064: LD_VAR 0 11
55068: PUSH
55069: LD_INT 2
55071: ARRAY
55072: GREATEREQUAL
55073: AND
55074: PUSH
55075: LD_VAR 0 10
55079: PPUSH
55080: LD_INT 3
55082: PPUSH
55083: CALL_OW 275
55087: PUSH
55088: LD_VAR 0 11
55092: PUSH
55093: LD_INT 3
55095: ARRAY
55096: GREATEREQUAL
55097: AND
55098: NOT
55099: IFFALSE 55103
// exit ;
55101: GO 55690
// if GetBType ( depot ) = b_depot then
55103: LD_VAR 0 1
55107: PPUSH
55108: CALL_OW 266
55112: PUSH
55113: LD_INT 0
55115: EQUAL
55116: IFFALSE 55128
// dist := 28 else
55118: LD_ADDR_VAR 0 14
55122: PUSH
55123: LD_INT 28
55125: ST_TO_ADDR
55126: GO 55136
// dist := 36 ;
55128: LD_ADDR_VAR 0 14
55132: PUSH
55133: LD_INT 36
55135: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55136: LD_VAR 0 1
55140: PPUSH
55141: LD_VAR 0 3
55145: PPUSH
55146: LD_VAR 0 4
55150: PPUSH
55151: CALL_OW 297
55155: PUSH
55156: LD_VAR 0 14
55160: GREATER
55161: IFFALSE 55165
// exit ;
55163: GO 55690
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55165: LD_ADDR_VAR 0 12
55169: PUSH
55170: LD_VAR 0 2
55174: PPUSH
55175: LD_VAR 0 3
55179: PPUSH
55180: LD_VAR 0 4
55184: PPUSH
55185: LD_VAR 0 5
55189: PPUSH
55190: LD_VAR 0 1
55194: PPUSH
55195: CALL_OW 248
55199: PPUSH
55200: LD_INT 0
55202: PPUSH
55203: CALL 55695 0 6
55207: ST_TO_ADDR
// if not hexes then
55208: LD_VAR 0 12
55212: NOT
55213: IFFALSE 55217
// exit ;
55215: GO 55690
// hex := GetHexInfo ( x , y ) ;
55217: LD_ADDR_VAR 0 15
55221: PUSH
55222: LD_VAR 0 3
55226: PPUSH
55227: LD_VAR 0 4
55231: PPUSH
55232: CALL_OW 546
55236: ST_TO_ADDR
// if hex [ 1 ] then
55237: LD_VAR 0 15
55241: PUSH
55242: LD_INT 1
55244: ARRAY
55245: IFFALSE 55249
// exit ;
55247: GO 55690
// height := hex [ 2 ] ;
55249: LD_ADDR_VAR 0 13
55253: PUSH
55254: LD_VAR 0 15
55258: PUSH
55259: LD_INT 2
55261: ARRAY
55262: ST_TO_ADDR
// for i = 1 to hexes do
55263: LD_ADDR_VAR 0 7
55267: PUSH
55268: DOUBLE
55269: LD_INT 1
55271: DEC
55272: ST_TO_ADDR
55273: LD_VAR 0 12
55277: PUSH
55278: FOR_TO
55279: IFFALSE 55609
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55281: LD_VAR 0 12
55285: PUSH
55286: LD_VAR 0 7
55290: ARRAY
55291: PUSH
55292: LD_INT 1
55294: ARRAY
55295: PPUSH
55296: LD_VAR 0 12
55300: PUSH
55301: LD_VAR 0 7
55305: ARRAY
55306: PUSH
55307: LD_INT 2
55309: ARRAY
55310: PPUSH
55311: CALL_OW 488
55315: NOT
55316: PUSH
55317: LD_VAR 0 12
55321: PUSH
55322: LD_VAR 0 7
55326: ARRAY
55327: PUSH
55328: LD_INT 1
55330: ARRAY
55331: PPUSH
55332: LD_VAR 0 12
55336: PUSH
55337: LD_VAR 0 7
55341: ARRAY
55342: PUSH
55343: LD_INT 2
55345: ARRAY
55346: PPUSH
55347: CALL_OW 428
55351: PUSH
55352: LD_INT 0
55354: GREATER
55355: OR
55356: PUSH
55357: LD_VAR 0 12
55361: PUSH
55362: LD_VAR 0 7
55366: ARRAY
55367: PUSH
55368: LD_INT 1
55370: ARRAY
55371: PPUSH
55372: LD_VAR 0 12
55376: PUSH
55377: LD_VAR 0 7
55381: ARRAY
55382: PUSH
55383: LD_INT 2
55385: ARRAY
55386: PPUSH
55387: CALL_OW 351
55391: OR
55392: IFFALSE 55398
// exit ;
55394: POP
55395: POP
55396: GO 55690
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55398: LD_ADDR_VAR 0 8
55402: PUSH
55403: LD_VAR 0 12
55407: PUSH
55408: LD_VAR 0 7
55412: ARRAY
55413: PUSH
55414: LD_INT 1
55416: ARRAY
55417: PPUSH
55418: LD_VAR 0 12
55422: PUSH
55423: LD_VAR 0 7
55427: ARRAY
55428: PUSH
55429: LD_INT 2
55431: ARRAY
55432: PPUSH
55433: CALL_OW 546
55437: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55438: LD_VAR 0 8
55442: PUSH
55443: LD_INT 1
55445: ARRAY
55446: PUSH
55447: LD_VAR 0 8
55451: PUSH
55452: LD_INT 2
55454: ARRAY
55455: PUSH
55456: LD_VAR 0 13
55460: PUSH
55461: LD_INT 2
55463: PLUS
55464: GREATER
55465: OR
55466: PUSH
55467: LD_VAR 0 8
55471: PUSH
55472: LD_INT 2
55474: ARRAY
55475: PUSH
55476: LD_VAR 0 13
55480: PUSH
55481: LD_INT 2
55483: MINUS
55484: LESS
55485: OR
55486: PUSH
55487: LD_VAR 0 8
55491: PUSH
55492: LD_INT 3
55494: ARRAY
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 8
55501: PUSH
55502: LD_INT 9
55504: PUSH
55505: LD_INT 10
55507: PUSH
55508: LD_INT 11
55510: PUSH
55511: LD_INT 12
55513: PUSH
55514: LD_INT 13
55516: PUSH
55517: LD_INT 16
55519: PUSH
55520: LD_INT 17
55522: PUSH
55523: LD_INT 18
55525: PUSH
55526: LD_INT 19
55528: PUSH
55529: LD_INT 20
55531: PUSH
55532: LD_INT 21
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: IN
55550: NOT
55551: OR
55552: PUSH
55553: LD_VAR 0 8
55557: PUSH
55558: LD_INT 5
55560: ARRAY
55561: NOT
55562: OR
55563: PUSH
55564: LD_VAR 0 8
55568: PUSH
55569: LD_INT 6
55571: ARRAY
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: LD_INT 7
55581: PUSH
55582: LD_INT 9
55584: PUSH
55585: LD_INT 10
55587: PUSH
55588: LD_INT 11
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: IN
55599: NOT
55600: OR
55601: IFFALSE 55607
// exit ;
55603: POP
55604: POP
55605: GO 55690
// end ;
55607: GO 55278
55609: POP
55610: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55611: LD_VAR 0 9
55615: PPUSH
55616: LD_VAR 0 3
55620: PPUSH
55621: LD_VAR 0 4
55625: PPUSH
55626: LD_INT 20
55628: PPUSH
55629: CALL 47636 0 4
55633: PUSH
55634: LD_INT 4
55636: ARRAY
55637: IFFALSE 55641
// exit ;
55639: GO 55690
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55641: LD_VAR 0 2
55645: PUSH
55646: LD_INT 29
55648: PUSH
55649: LD_INT 30
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: IN
55656: PUSH
55657: LD_VAR 0 3
55661: PPUSH
55662: LD_VAR 0 4
55666: PPUSH
55667: LD_VAR 0 9
55671: PPUSH
55672: CALL_OW 440
55676: NOT
55677: AND
55678: IFFALSE 55682
// exit ;
55680: GO 55690
// result := true ;
55682: LD_ADDR_VAR 0 6
55686: PUSH
55687: LD_INT 1
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 6
55694: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55695: LD_INT 0
55697: PPUSH
55698: PPUSH
55699: PPUSH
55700: PPUSH
55701: PPUSH
55702: PPUSH
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
55707: PPUSH
55708: PPUSH
55709: PPUSH
55710: PPUSH
55711: PPUSH
55712: PPUSH
55713: PPUSH
55714: PPUSH
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
55733: PPUSH
55734: PPUSH
55735: PPUSH
55736: PPUSH
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
55741: PPUSH
55742: PPUSH
55743: PPUSH
55744: PPUSH
55745: PPUSH
55746: PPUSH
55747: PPUSH
55748: PPUSH
55749: PPUSH
55750: PPUSH
55751: PPUSH
55752: PPUSH
55753: PPUSH
55754: PPUSH
// result = [ ] ;
55755: LD_ADDR_VAR 0 7
55759: PUSH
55760: EMPTY
55761: ST_TO_ADDR
// temp_list = [ ] ;
55762: LD_ADDR_VAR 0 9
55766: PUSH
55767: EMPTY
55768: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55769: LD_VAR 0 4
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 4
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: IN
55800: NOT
55801: PUSH
55802: LD_VAR 0 1
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: IN
55817: PUSH
55818: LD_VAR 0 5
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: IN
55837: NOT
55838: AND
55839: OR
55840: IFFALSE 55844
// exit ;
55842: GO 74235
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55844: LD_VAR 0 1
55848: PUSH
55849: LD_INT 6
55851: PUSH
55852: LD_INT 7
55854: PUSH
55855: LD_INT 8
55857: PUSH
55858: LD_INT 13
55860: PUSH
55861: LD_INT 12
55863: PUSH
55864: LD_INT 15
55866: PUSH
55867: LD_INT 11
55869: PUSH
55870: LD_INT 14
55872: PUSH
55873: LD_INT 10
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: IN
55887: IFFALSE 55897
// btype = b_lab ;
55889: LD_ADDR_VAR 0 1
55893: PUSH
55894: LD_INT 6
55896: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55897: LD_VAR 0 6
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: IN
55916: NOT
55917: PUSH
55918: LD_VAR 0 1
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: LD_INT 6
55937: PUSH
55938: LD_INT 36
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: LD_INT 5
55946: PUSH
55947: LD_INT 31
55949: PUSH
55950: LD_INT 32
55952: PUSH
55953: LD_INT 33
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: IN
55969: NOT
55970: PUSH
55971: LD_VAR 0 6
55975: PUSH
55976: LD_INT 1
55978: EQUAL
55979: AND
55980: OR
55981: PUSH
55982: LD_VAR 0 1
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: IN
55997: NOT
55998: PUSH
55999: LD_VAR 0 6
56003: PUSH
56004: LD_INT 2
56006: EQUAL
56007: AND
56008: OR
56009: IFFALSE 56019
// mode = 0 ;
56011: LD_ADDR_VAR 0 6
56015: PUSH
56016: LD_INT 0
56018: ST_TO_ADDR
// case mode of 0 :
56019: LD_VAR 0 6
56023: PUSH
56024: LD_INT 0
56026: DOUBLE
56027: EQUAL
56028: IFTRUE 56032
56030: GO 67485
56032: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56033: LD_ADDR_VAR 0 11
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56226: LD_ADDR_VAR 0 12
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56422: LD_ADDR_VAR 0 13
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56621: LD_ADDR_VAR 0 14
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56817: LD_ADDR_VAR 0 15
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57010: LD_ADDR_VAR 0 16
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 3
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: LD_INT 3
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57203: LD_ADDR_VAR 0 17
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57433: LD_ADDR_VAR 0 18
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57663: LD_ADDR_VAR 0 19
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57893: LD_ADDR_VAR 0 20
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58123: LD_ADDR_VAR 0 21
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58353: LD_ADDR_VAR 0 22
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58583: LD_ADDR_VAR 0 23
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58863: LD_ADDR_VAR 0 24
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 2
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59139: LD_ADDR_VAR 0 25
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 3
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59413: LD_ADDR_VAR 0 26
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 3
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59689: LD_ADDR_VAR 0 27
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59969: LD_ADDR_VAR 0 28
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60251: LD_ADDR_VAR 0 29
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 3
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60530: LD_ADDR_VAR 0 30
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 3
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60808: LD_ADDR_VAR 0 31
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61086: LD_ADDR_VAR 0 32
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: LD_INT 3
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61364: LD_ADDR_VAR 0 33
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 3
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61643: LD_ADDR_VAR 0 34
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 2
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61923: LD_ADDR_VAR 0 35
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62035: LD_ADDR_VAR 0 36
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62147: LD_ADDR_VAR 0 37
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62259: LD_ADDR_VAR 0 38
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62371: LD_ADDR_VAR 0 39
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62483: LD_ADDR_VAR 0 40
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62595: LD_ADDR_VAR 0 41
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62945: LD_ADDR_VAR 0 42
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 2
63135: NEG
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 3
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 3
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 3
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: LD_INT 3
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63295: LD_ADDR_VAR 0 43
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 3
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: NEG
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 3
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63643: LD_ADDR_VAR 0 44
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: LD_INT 3
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 3
63876: PUSH
63877: LD_INT 2
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 3
63886: PUSH
63887: LD_INT 3
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: LD_INT 3
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: NEG
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63993: LD_ADDR_VAR 0 45
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 2
64159: NEG
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: NEG
64172: PUSH
64173: LD_INT 2
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: LD_INT 3
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 3
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: LD_INT 3
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 3
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: LD_INT 3
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64343: LD_ADDR_VAR 0 46
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 3
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 3
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 2
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 3
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 3
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 3
64639: NEG
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64691: LD_ADDR_VAR 0 47
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 1
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 2
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 2
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64842: LD_ADDR_VAR 0 48
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64989: LD_ADDR_VAR 0 49
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65133: LD_ADDR_VAR 0 50
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 2
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65277: LD_ADDR_VAR 0 51
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65424: LD_ADDR_VAR 0 52
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: LD_INT 2
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 2
65539: NEG
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 2
65551: NEG
65552: PUSH
65553: LD_INT 2
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65575: LD_ADDR_VAR 0 53
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65805: LD_ADDR_VAR 0 54
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66035: LD_ADDR_VAR 0 55
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 2
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 2
66211: NEG
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: LD_INT 1
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66265: LD_ADDR_VAR 0 56
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: LD_INT 2
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 2
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: NEG
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66495: LD_ADDR_VAR 0 57
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: NEG
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 2
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 2
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: PUSH
66631: LD_INT 2
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: LD_INT 1
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 2
66694: NEG
66695: PUSH
66696: LD_INT 2
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66725: LD_ADDR_VAR 0 58
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 1
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: NEG
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: LD_INT 2
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 2
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: LD_INT 2
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 2
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: LD_INT 2
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66955: LD_ADDR_VAR 0 59
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 1
67013: NEG
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: LD_INT 1
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67043: LD_ADDR_VAR 0 60
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 1
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67131: LD_ADDR_VAR 0 61
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: LD_INT 1
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67219: LD_ADDR_VAR 0 62
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67307: LD_ADDR_VAR 0 63
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67395: LD_ADDR_VAR 0 64
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 1
67453: NEG
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: ST_TO_ADDR
// end ; 1 :
67483: GO 73380
67485: LD_INT 1
67487: DOUBLE
67488: EQUAL
67489: IFTRUE 67493
67491: GO 70116
67493: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67494: LD_ADDR_VAR 0 11
67498: PUSH
67499: LD_INT 1
67501: NEG
67502: PUSH
67503: LD_INT 3
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: LD_INT 3
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 2
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: LIST
67537: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67538: LD_ADDR_VAR 0 12
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: LD_INT 1
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67579: LD_ADDR_VAR 0 13
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: LD_INT 2
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67619: LD_ADDR_VAR 0 14
67623: PUSH
67624: LD_INT 1
67626: PUSH
67627: LD_INT 3
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67660: LD_ADDR_VAR 0 15
67664: PUSH
67665: LD_INT 2
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 3
67689: NEG
67690: PUSH
67691: LD_INT 1
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67704: LD_ADDR_VAR 0 16
67708: PUSH
67709: LD_INT 2
67711: NEG
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 3
67723: NEG
67724: PUSH
67725: LD_INT 2
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: LD_INT 3
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67750: LD_ADDR_VAR 0 17
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: LD_INT 3
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: LD_INT 2
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67794: LD_ADDR_VAR 0 18
67798: PUSH
67799: LD_INT 2
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: LIST
67834: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67835: LD_ADDR_VAR 0 19
67839: PUSH
67840: LD_INT 3
67842: PUSH
67843: LD_INT 2
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: LD_INT 3
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: LD_INT 3
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: LIST
67874: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67875: LD_ADDR_VAR 0 20
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67916: LD_ADDR_VAR 0 21
67920: PUSH
67921: LD_INT 2
67923: NEG
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: LIST
67959: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67960: LD_ADDR_VAR 0 22
67964: PUSH
67965: LD_INT 2
67967: NEG
67968: PUSH
67969: LD_INT 3
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 3
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 3
67991: NEG
67992: PUSH
67993: LD_INT 3
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68006: LD_ADDR_VAR 0 23
68010: PUSH
68011: LD_INT 0
68013: PUSH
68014: LD_INT 3
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 1
68024: NEG
68025: PUSH
68026: LD_INT 4
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: LD_INT 3
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: LIST
68049: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68050: LD_ADDR_VAR 0 24
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: LD_INT 1
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: LIST
68090: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68091: LD_ADDR_VAR 0 25
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 4
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 4
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: LIST
68130: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68131: LD_ADDR_VAR 0 26
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: LIST
68171: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68172: LD_ADDR_VAR 0 27
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 3
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 4
68201: NEG
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: LIST
68215: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68216: LD_ADDR_VAR 0 28
68220: PUSH
68221: LD_INT 3
68223: NEG
68224: PUSH
68225: LD_INT 3
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 3
68235: NEG
68236: PUSH
68237: LD_INT 4
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 4
68247: NEG
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68262: LD_ADDR_VAR 0 29
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: LD_INT 3
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 0
68315: PUSH
68316: LD_INT 4
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: LD_INT 3
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: LD_INT 5
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 5
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 1
68371: NEG
68372: PUSH
68373: LD_INT 6
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: LD_INT 6
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: LD_INT 5
68397: NEG
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68417: LD_ADDR_VAR 0 30
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: LD_INT 1
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 3
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: PUSH
68446: LD_INT 1
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 4
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 4
68486: PUSH
68487: LD_INT 1
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 5
68497: PUSH
68498: LD_INT 0
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 5
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 5
68517: PUSH
68518: LD_INT 1
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 6
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 6
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68560: LD_ADDR_VAR 0 31
68564: PUSH
68565: LD_INT 3
68567: PUSH
68568: LD_INT 2
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 3
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 2
68587: PUSH
68588: LD_INT 3
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 4
68597: PUSH
68598: LD_INT 3
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 4
68607: PUSH
68608: LD_INT 4
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 3
68617: PUSH
68618: LD_INT 4
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 5
68627: PUSH
68628: LD_INT 4
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 5
68637: PUSH
68638: LD_INT 5
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 4
68647: PUSH
68648: LD_INT 5
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 6
68657: PUSH
68658: LD_INT 5
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 6
68667: PUSH
68668: LD_INT 6
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 5
68677: PUSH
68678: LD_INT 6
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68699: LD_ADDR_VAR 0 32
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 3
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 1
68726: NEG
68727: PUSH
68728: LD_INT 2
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: LD_INT 4
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 4
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: LD_INT 3
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 5
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: LD_INT 5
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: LD_INT 4
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: LD_INT 6
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 6
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: LD_INT 5
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68842: LD_ADDR_VAR 0 33
68846: PUSH
68847: LD_INT 2
68849: NEG
68850: PUSH
68851: LD_INT 1
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 3
68883: NEG
68884: PUSH
68885: LD_INT 1
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 4
68894: NEG
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 4
68905: NEG
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 4
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 5
68928: NEG
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 5
68939: NEG
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: LD_INT 1
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 6
68962: NEG
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 6
68973: NEG
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68997: LD_ADDR_VAR 0 34
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: LD_INT 3
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 3
69040: NEG
69041: PUSH
69042: LD_INT 4
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 4
69052: NEG
69053: PUSH
69054: LD_INT 3
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 4
69064: NEG
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 4
69076: NEG
69077: PUSH
69078: LD_INT 5
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 5
69088: NEG
69089: PUSH
69090: LD_INT 4
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 5
69100: NEG
69101: PUSH
69102: LD_INT 5
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 5
69112: NEG
69113: PUSH
69114: LD_INT 6
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 6
69124: NEG
69125: PUSH
69126: LD_INT 5
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 6
69136: NEG
69137: PUSH
69138: LD_INT 6
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69160: LD_ADDR_VAR 0 41
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 2
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: NEG
69179: PUSH
69180: LD_INT 3
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: LD_INT 2
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: LIST
69203: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69204: LD_ADDR_VAR 0 42
69208: PUSH
69209: LD_INT 2
69211: PUSH
69212: LD_INT 0
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 3
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: LIST
69244: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69245: LD_ADDR_VAR 0 43
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: LD_INT 2
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 2
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: LIST
69284: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69285: LD_ADDR_VAR 0 44
69289: PUSH
69290: LD_INT 0
69292: PUSH
69293: LD_INT 2
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: LD_INT 3
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: LIST
69325: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69326: LD_ADDR_VAR 0 45
69330: PUSH
69331: LD_INT 2
69333: NEG
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 3
69355: NEG
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: LIST
69369: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69370: LD_ADDR_VAR 0 46
69374: PUSH
69375: LD_INT 2
69377: NEG
69378: PUSH
69379: LD_INT 2
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 2
69389: NEG
69390: PUSH
69391: LD_INT 3
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 3
69401: NEG
69402: PUSH
69403: LD_INT 2
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69416: LD_ADDR_VAR 0 47
69420: PUSH
69421: LD_INT 2
69423: NEG
69424: PUSH
69425: LD_INT 3
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: LD_INT 3
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69449: LD_ADDR_VAR 0 48
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: LD_INT 2
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: LD_INT 1
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69480: LD_ADDR_VAR 0 49
69484: PUSH
69485: LD_INT 3
69487: PUSH
69488: LD_INT 1
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: PUSH
69498: LD_INT 2
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69509: LD_ADDR_VAR 0 50
69513: PUSH
69514: LD_INT 2
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: LD_INT 3
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69538: LD_ADDR_VAR 0 51
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 2
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69569: LD_ADDR_VAR 0 52
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: LD_INT 1
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: LD_INT 2
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69602: LD_ADDR_VAR 0 53
69606: PUSH
69607: LD_INT 1
69609: NEG
69610: PUSH
69611: LD_INT 3
69613: NEG
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: LD_INT 3
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: LD_INT 2
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69646: LD_ADDR_VAR 0 54
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: LD_INT 1
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69687: LD_ADDR_VAR 0 55
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: PUSH
69705: LD_INT 3
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 2
69714: PUSH
69715: LD_INT 3
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: LIST
69726: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69727: LD_ADDR_VAR 0 56
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: LD_INT 3
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: LD_INT 3
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69768: LD_ADDR_VAR 0 57
69772: PUSH
69773: LD_INT 2
69775: NEG
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 3
69786: NEG
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 3
69797: NEG
69798: PUSH
69799: LD_INT 1
69801: NEG
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: LIST
69811: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69812: LD_ADDR_VAR 0 58
69816: PUSH
69817: LD_INT 2
69819: NEG
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 3
69831: NEG
69832: PUSH
69833: LD_INT 2
69835: NEG
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: LD_INT 3
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69858: LD_ADDR_VAR 0 59
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: LD_INT 2
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 2
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: LD_INT 1
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: LIST
69901: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69902: LD_ADDR_VAR 0 60
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: LD_INT 0
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: LIST
69942: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69943: LD_ADDR_VAR 0 61
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: LIST
69982: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69983: LD_ADDR_VAR 0 62
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: LD_INT 2
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70024: LD_ADDR_VAR 0 63
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: LD_INT 0
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 2
70053: NEG
70054: PUSH
70055: LD_INT 1
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70068: LD_ADDR_VAR 0 64
70072: PUSH
70073: LD_INT 1
70075: NEG
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 2
70087: NEG
70088: PUSH
70089: LD_INT 1
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 2
70099: NEG
70100: PUSH
70101: LD_INT 2
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: ST_TO_ADDR
// end ; 2 :
70114: GO 73380
70116: LD_INT 2
70118: DOUBLE
70119: EQUAL
70120: IFTRUE 70124
70122: GO 73379
70124: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70125: LD_ADDR_VAR 0 29
70129: PUSH
70130: LD_INT 4
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: LD_INT 1
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 5
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 5
70163: PUSH
70164: LD_INT 1
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 4
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 3
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 3
70204: PUSH
70205: LD_INT 2
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 5
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: PUSH
70226: LD_INT 3
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 3
70235: PUSH
70236: LD_INT 2
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 4
70245: PUSH
70246: LD_INT 3
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 4
70255: PUSH
70256: LD_INT 4
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: LD_INT 4
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 2
70275: PUSH
70276: LD_INT 3
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: LD_INT 2
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 4
70295: PUSH
70296: LD_INT 2
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: LD_INT 4
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: LD_INT 4
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 0
70325: PUSH
70326: LD_INT 3
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: LD_INT 4
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: LD_INT 5
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 5
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: NEG
70366: PUSH
70367: LD_INT 4
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: NEG
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: PUSH
70388: LD_INT 5
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: LD_INT 3
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 3
70408: NEG
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 3
70419: NEG
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 2
70431: NEG
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 2
70442: NEG
70443: PUSH
70444: LD_INT 1
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 3
70453: NEG
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 4
70464: NEG
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 4
70475: NEG
70476: PUSH
70477: LD_INT 1
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 4
70487: NEG
70488: PUSH
70489: LD_INT 2
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: NEG
70500: PUSH
70501: LD_INT 2
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 4
70510: NEG
70511: PUSH
70512: LD_INT 4
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 4
70522: NEG
70523: PUSH
70524: LD_INT 5
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 3
70534: NEG
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 3
70546: NEG
70547: PUSH
70548: LD_INT 3
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 4
70558: NEG
70559: PUSH
70560: LD_INT 3
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 5
70570: NEG
70571: PUSH
70572: LD_INT 4
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 5
70582: NEG
70583: PUSH
70584: LD_INT 5
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 3
70594: NEG
70595: PUSH
70596: LD_INT 5
70598: NEG
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 5
70606: NEG
70607: PUSH
70608: LD_INT 3
70610: NEG
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70663: LD_ADDR_VAR 0 30
70667: PUSH
70668: LD_INT 4
70670: PUSH
70671: LD_INT 4
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 4
70680: PUSH
70681: LD_INT 3
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 5
70690: PUSH
70691: LD_INT 4
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 5
70700: PUSH
70701: LD_INT 5
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 4
70710: PUSH
70711: LD_INT 5
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: LD_INT 4
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 3
70730: PUSH
70731: LD_INT 3
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 5
70740: PUSH
70741: LD_INT 3
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 3
70750: PUSH
70751: LD_INT 5
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: LD_INT 3
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 0
70770: PUSH
70771: LD_INT 2
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 1
70780: PUSH
70781: LD_INT 3
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: LD_INT 4
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 4
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 1
70810: NEG
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: NEG
70822: PUSH
70823: LD_INT 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 2
70832: PUSH
70833: LD_INT 4
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 2
70842: NEG
70843: PUSH
70844: LD_INT 2
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 4
70853: NEG
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 4
70864: NEG
70865: PUSH
70866: LD_INT 1
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 3
70876: NEG
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 3
70887: NEG
70888: PUSH
70889: LD_INT 1
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: NEG
70899: PUSH
70900: LD_INT 1
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 5
70909: NEG
70910: PUSH
70911: LD_INT 0
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 5
70920: NEG
70921: PUSH
70922: LD_INT 1
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 5
70932: NEG
70933: PUSH
70934: LD_INT 2
70936: NEG
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 3
70944: NEG
70945: PUSH
70946: LD_INT 2
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 3
70955: NEG
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 3
70967: NEG
70968: PUSH
70969: LD_INT 4
70971: NEG
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 2
70979: NEG
70980: PUSH
70981: LD_INT 3
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 2
70991: NEG
70992: PUSH
70993: LD_INT 2
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 3
71003: NEG
71004: PUSH
71005: LD_INT 2
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 4
71015: NEG
71016: PUSH
71017: LD_INT 3
71019: NEG
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 4
71027: NEG
71028: PUSH
71029: LD_INT 4
71031: NEG
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 2
71039: NEG
71040: PUSH
71041: LD_INT 4
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 4
71051: NEG
71052: PUSH
71053: LD_INT 2
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: LD_INT 4
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 0
71074: PUSH
71075: LD_INT 5
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 1
71085: PUSH
71086: LD_INT 4
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: LD_INT 3
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: LD_INT 3
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 1
71118: NEG
71119: PUSH
71120: LD_INT 4
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 1
71130: NEG
71131: PUSH
71132: LD_INT 5
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 2
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 2
71153: NEG
71154: PUSH
71155: LD_INT 5
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71210: LD_ADDR_VAR 0 31
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: LD_INT 4
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 0
71227: PUSH
71228: LD_INT 3
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 1
71237: PUSH
71238: LD_INT 4
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: LD_INT 5
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 0
71257: PUSH
71258: LD_INT 5
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 1
71267: NEG
71268: PUSH
71269: LD_INT 4
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 1
71278: NEG
71279: PUSH
71280: LD_INT 3
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: PUSH
71290: LD_INT 5
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 2
71299: NEG
71300: PUSH
71301: LD_INT 3
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 3
71310: NEG
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 3
71321: NEG
71322: PUSH
71323: LD_INT 1
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 2
71333: NEG
71334: PUSH
71335: LD_INT 0
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 2
71344: NEG
71345: PUSH
71346: LD_INT 1
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 3
71355: NEG
71356: PUSH
71357: LD_INT 1
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 4
71366: NEG
71367: PUSH
71368: LD_INT 0
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 4
71377: NEG
71378: PUSH
71379: LD_INT 1
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 4
71389: NEG
71390: PUSH
71391: LD_INT 2
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 2
71401: NEG
71402: PUSH
71403: LD_INT 2
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 4
71412: NEG
71413: PUSH
71414: LD_INT 4
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 4
71424: NEG
71425: PUSH
71426: LD_INT 5
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 3
71436: NEG
71437: PUSH
71438: LD_INT 4
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 3
71448: NEG
71449: PUSH
71450: LD_INT 3
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 4
71460: NEG
71461: PUSH
71462: LD_INT 3
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 5
71472: NEG
71473: PUSH
71474: LD_INT 4
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 5
71484: NEG
71485: PUSH
71486: LD_INT 5
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 3
71496: NEG
71497: PUSH
71498: LD_INT 5
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 5
71508: NEG
71509: PUSH
71510: LD_INT 3
71512: NEG
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: LD_INT 4
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 1
71542: PUSH
71543: LD_INT 3
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: LD_INT 2
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 0
71564: PUSH
71565: LD_INT 2
71567: NEG
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: PUSH
71577: LD_INT 3
71579: NEG
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 1
71587: NEG
71588: PUSH
71589: LD_INT 4
71591: NEG
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: LD_INT 2
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 2
71610: NEG
71611: PUSH
71612: LD_INT 4
71614: NEG
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 4
71622: PUSH
71623: LD_INT 0
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 4
71632: PUSH
71633: LD_INT 1
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 5
71643: PUSH
71644: LD_INT 0
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 5
71653: PUSH
71654: LD_INT 1
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 4
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 3
71673: PUSH
71674: LD_INT 0
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 3
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 3
71694: PUSH
71695: LD_INT 2
71697: NEG
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 5
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71760: LD_ADDR_VAR 0 32
71764: PUSH
71765: LD_INT 4
71767: NEG
71768: PUSH
71769: LD_INT 0
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 4
71778: NEG
71779: PUSH
71780: LD_INT 1
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: LD_INT 0
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 3
71801: NEG
71802: PUSH
71803: LD_INT 1
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: LD_INT 1
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 5
71823: NEG
71824: PUSH
71825: LD_INT 0
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 5
71834: NEG
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 5
71846: NEG
71847: PUSH
71848: LD_INT 2
71850: NEG
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 3
71858: NEG
71859: PUSH
71860: LD_INT 2
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 3
71869: NEG
71870: PUSH
71871: LD_INT 3
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 3
71881: NEG
71882: PUSH
71883: LD_INT 4
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 2
71893: NEG
71894: PUSH
71895: LD_INT 3
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 2
71905: NEG
71906: PUSH
71907: LD_INT 2
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: NEG
71918: PUSH
71919: LD_INT 2
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 4
71929: NEG
71930: PUSH
71931: LD_INT 3
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 4
71941: NEG
71942: PUSH
71943: LD_INT 4
71945: NEG
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 2
71953: NEG
71954: PUSH
71955: LD_INT 4
71957: NEG
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 4
71965: NEG
71966: PUSH
71967: LD_INT 2
71969: NEG
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: LD_INT 4
71980: NEG
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 0
71988: PUSH
71989: LD_INT 5
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 1
71999: PUSH
72000: LD_INT 4
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: LD_INT 3
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: LD_INT 3
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: NEG
72033: PUSH
72034: LD_INT 4
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 1
72044: NEG
72045: PUSH
72046: LD_INT 5
72048: NEG
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: LD_INT 3
72059: NEG
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 2
72067: NEG
72068: PUSH
72069: LD_INT 5
72071: NEG
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 3
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 3
72089: PUSH
72090: LD_INT 1
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 4
72100: PUSH
72101: LD_INT 0
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 4
72110: PUSH
72111: LD_INT 1
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 3
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 2
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 2
72140: PUSH
72141: LD_INT 1
72143: NEG
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 2
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 4
72162: PUSH
72163: LD_INT 2
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 4
72172: PUSH
72173: LD_INT 4
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 4
72182: PUSH
72183: LD_INT 3
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 5
72192: PUSH
72193: LD_INT 4
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 5
72202: PUSH
72203: LD_INT 5
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 4
72212: PUSH
72213: LD_INT 5
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 3
72222: PUSH
72223: LD_INT 4
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 3
72232: PUSH
72233: LD_INT 3
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 5
72242: PUSH
72243: LD_INT 3
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 3
72252: PUSH
72253: LD_INT 5
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72307: LD_ADDR_VAR 0 33
72311: PUSH
72312: LD_INT 4
72314: NEG
72315: PUSH
72316: LD_INT 4
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 4
72326: NEG
72327: PUSH
72328: LD_INT 5
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 3
72338: NEG
72339: PUSH
72340: LD_INT 4
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 3
72350: NEG
72351: PUSH
72352: LD_INT 3
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 4
72362: NEG
72363: PUSH
72364: LD_INT 3
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 5
72374: NEG
72375: PUSH
72376: LD_INT 4
72378: NEG
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 5
72386: NEG
72387: PUSH
72388: LD_INT 5
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 3
72398: NEG
72399: PUSH
72400: LD_INT 5
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 5
72410: NEG
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: LD_INT 3
72425: NEG
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 0
72433: PUSH
72434: LD_INT 4
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: LD_INT 3
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: PUSH
72456: LD_INT 2
72458: NEG
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 0
72466: PUSH
72467: LD_INT 2
72469: NEG
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 1
72477: NEG
72478: PUSH
72479: LD_INT 3
72481: NEG
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: NEG
72490: PUSH
72491: LD_INT 4
72493: NEG
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 2
72501: PUSH
72502: LD_INT 2
72504: NEG
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 2
72512: NEG
72513: PUSH
72514: LD_INT 4
72516: NEG
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 4
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 4
72534: PUSH
72535: LD_INT 1
72537: NEG
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 5
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 5
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 4
72565: PUSH
72566: LD_INT 1
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 3
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 3
72585: PUSH
72586: LD_INT 1
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: LD_INT 2
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 5
72607: PUSH
72608: LD_INT 2
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 3
72617: PUSH
72618: LD_INT 3
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 3
72627: PUSH
72628: LD_INT 2
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 4
72637: PUSH
72638: LD_INT 3
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 4
72647: PUSH
72648: LD_INT 4
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 3
72657: PUSH
72658: LD_INT 4
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 2
72667: PUSH
72668: LD_INT 3
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 2
72677: PUSH
72678: LD_INT 2
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 4
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 2
72697: PUSH
72698: LD_INT 4
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 0
72707: PUSH
72708: LD_INT 4
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 0
72717: PUSH
72718: LD_INT 3
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 1
72727: PUSH
72728: LD_INT 4
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 1
72737: PUSH
72738: LD_INT 5
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: LD_INT 5
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 1
72757: NEG
72758: PUSH
72759: LD_INT 4
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 1
72768: NEG
72769: PUSH
72770: LD_INT 3
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 2
72779: PUSH
72780: LD_INT 5
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 2
72789: NEG
72790: PUSH
72791: LD_INT 3
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72845: LD_ADDR_VAR 0 34
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: LD_INT 4
72855: NEG
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: LD_INT 5
72866: NEG
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 1
72874: PUSH
72875: LD_INT 4
72877: NEG
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 1
72885: PUSH
72886: LD_INT 3
72888: NEG
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 0
72896: PUSH
72897: LD_INT 3
72899: NEG
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 1
72907: NEG
72908: PUSH
72909: LD_INT 4
72911: NEG
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 1
72919: NEG
72920: PUSH
72921: LD_INT 5
72923: NEG
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 2
72931: PUSH
72932: LD_INT 3
72934: NEG
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 2
72942: NEG
72943: PUSH
72944: LD_INT 5
72946: NEG
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 3
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 3
72964: PUSH
72965: LD_INT 1
72967: NEG
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 4
72975: PUSH
72976: LD_INT 0
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 4
72985: PUSH
72986: LD_INT 1
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 3
72995: PUSH
72996: LD_INT 1
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: LD_INT 2
73005: PUSH
73006: LD_INT 0
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 2
73015: PUSH
73016: LD_INT 1
73018: NEG
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 2
73026: PUSH
73027: LD_INT 2
73029: NEG
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 4
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 4
73047: PUSH
73048: LD_INT 4
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 4
73057: PUSH
73058: LD_INT 3
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 5
73067: PUSH
73068: LD_INT 4
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 5
73077: PUSH
73078: LD_INT 5
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 4
73087: PUSH
73088: LD_INT 5
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 3
73097: PUSH
73098: LD_INT 4
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 3
73107: PUSH
73108: LD_INT 3
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 5
73117: PUSH
73118: LD_INT 3
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 3
73127: PUSH
73128: LD_INT 5
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: LD_INT 3
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: LD_INT 2
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 1
73157: PUSH
73158: LD_INT 3
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: LD_INT 4
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 0
73177: PUSH
73178: LD_INT 4
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 1
73187: NEG
73188: PUSH
73189: LD_INT 3
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 1
73198: NEG
73199: PUSH
73200: LD_INT 2
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: PUSH
73210: LD_INT 4
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 2
73219: NEG
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 4
73230: NEG
73231: PUSH
73232: LD_INT 0
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 4
73241: NEG
73242: PUSH
73243: LD_INT 1
73245: NEG
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 3
73253: NEG
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: LD_INT 1
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 4
73275: NEG
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 5
73286: NEG
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 5
73297: NEG
73298: PUSH
73299: LD_INT 1
73301: NEG
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 5
73309: NEG
73310: PUSH
73311: LD_INT 2
73313: NEG
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 3
73321: NEG
73322: PUSH
73323: LD_INT 2
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: ST_TO_ADDR
// end ; end ;
73377: GO 73380
73379: POP
// case btype of b_depot , b_warehouse :
73380: LD_VAR 0 1
73384: PUSH
73385: LD_INT 0
73387: DOUBLE
73388: EQUAL
73389: IFTRUE 73399
73391: LD_INT 1
73393: DOUBLE
73394: EQUAL
73395: IFTRUE 73399
73397: GO 73600
73399: POP
// case nation of nation_american :
73400: LD_VAR 0 5
73404: PUSH
73405: LD_INT 1
73407: DOUBLE
73408: EQUAL
73409: IFTRUE 73413
73411: GO 73469
73413: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73414: LD_ADDR_VAR 0 9
73418: PUSH
73419: LD_VAR 0 11
73423: PUSH
73424: LD_VAR 0 12
73428: PUSH
73429: LD_VAR 0 13
73433: PUSH
73434: LD_VAR 0 14
73438: PUSH
73439: LD_VAR 0 15
73443: PUSH
73444: LD_VAR 0 16
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: PUSH
73457: LD_VAR 0 4
73461: PUSH
73462: LD_INT 1
73464: PLUS
73465: ARRAY
73466: ST_TO_ADDR
73467: GO 73598
73469: LD_INT 2
73471: DOUBLE
73472: EQUAL
73473: IFTRUE 73477
73475: GO 73533
73477: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73478: LD_ADDR_VAR 0 9
73482: PUSH
73483: LD_VAR 0 17
73487: PUSH
73488: LD_VAR 0 18
73492: PUSH
73493: LD_VAR 0 19
73497: PUSH
73498: LD_VAR 0 20
73502: PUSH
73503: LD_VAR 0 21
73507: PUSH
73508: LD_VAR 0 22
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: PUSH
73521: LD_VAR 0 4
73525: PUSH
73526: LD_INT 1
73528: PLUS
73529: ARRAY
73530: ST_TO_ADDR
73531: GO 73598
73533: LD_INT 3
73535: DOUBLE
73536: EQUAL
73537: IFTRUE 73541
73539: GO 73597
73541: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73542: LD_ADDR_VAR 0 9
73546: PUSH
73547: LD_VAR 0 23
73551: PUSH
73552: LD_VAR 0 24
73556: PUSH
73557: LD_VAR 0 25
73561: PUSH
73562: LD_VAR 0 26
73566: PUSH
73567: LD_VAR 0 27
73571: PUSH
73572: LD_VAR 0 28
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: PUSH
73585: LD_VAR 0 4
73589: PUSH
73590: LD_INT 1
73592: PLUS
73593: ARRAY
73594: ST_TO_ADDR
73595: GO 73598
73597: POP
73598: GO 74153
73600: LD_INT 2
73602: DOUBLE
73603: EQUAL
73604: IFTRUE 73614
73606: LD_INT 3
73608: DOUBLE
73609: EQUAL
73610: IFTRUE 73614
73612: GO 73670
73614: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73615: LD_ADDR_VAR 0 9
73619: PUSH
73620: LD_VAR 0 29
73624: PUSH
73625: LD_VAR 0 30
73629: PUSH
73630: LD_VAR 0 31
73634: PUSH
73635: LD_VAR 0 32
73639: PUSH
73640: LD_VAR 0 33
73644: PUSH
73645: LD_VAR 0 34
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: PUSH
73658: LD_VAR 0 4
73662: PUSH
73663: LD_INT 1
73665: PLUS
73666: ARRAY
73667: ST_TO_ADDR
73668: GO 74153
73670: LD_INT 16
73672: DOUBLE
73673: EQUAL
73674: IFTRUE 73732
73676: LD_INT 17
73678: DOUBLE
73679: EQUAL
73680: IFTRUE 73732
73682: LD_INT 18
73684: DOUBLE
73685: EQUAL
73686: IFTRUE 73732
73688: LD_INT 19
73690: DOUBLE
73691: EQUAL
73692: IFTRUE 73732
73694: LD_INT 22
73696: DOUBLE
73697: EQUAL
73698: IFTRUE 73732
73700: LD_INT 20
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73732
73706: LD_INT 21
73708: DOUBLE
73709: EQUAL
73710: IFTRUE 73732
73712: LD_INT 23
73714: DOUBLE
73715: EQUAL
73716: IFTRUE 73732
73718: LD_INT 24
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73732
73724: LD_INT 25
73726: DOUBLE
73727: EQUAL
73728: IFTRUE 73732
73730: GO 73788
73732: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73733: LD_ADDR_VAR 0 9
73737: PUSH
73738: LD_VAR 0 35
73742: PUSH
73743: LD_VAR 0 36
73747: PUSH
73748: LD_VAR 0 37
73752: PUSH
73753: LD_VAR 0 38
73757: PUSH
73758: LD_VAR 0 39
73762: PUSH
73763: LD_VAR 0 40
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: PUSH
73776: LD_VAR 0 4
73780: PUSH
73781: LD_INT 1
73783: PLUS
73784: ARRAY
73785: ST_TO_ADDR
73786: GO 74153
73788: LD_INT 6
73790: DOUBLE
73791: EQUAL
73792: IFTRUE 73844
73794: LD_INT 7
73796: DOUBLE
73797: EQUAL
73798: IFTRUE 73844
73800: LD_INT 8
73802: DOUBLE
73803: EQUAL
73804: IFTRUE 73844
73806: LD_INT 13
73808: DOUBLE
73809: EQUAL
73810: IFTRUE 73844
73812: LD_INT 12
73814: DOUBLE
73815: EQUAL
73816: IFTRUE 73844
73818: LD_INT 15
73820: DOUBLE
73821: EQUAL
73822: IFTRUE 73844
73824: LD_INT 11
73826: DOUBLE
73827: EQUAL
73828: IFTRUE 73844
73830: LD_INT 14
73832: DOUBLE
73833: EQUAL
73834: IFTRUE 73844
73836: LD_INT 10
73838: DOUBLE
73839: EQUAL
73840: IFTRUE 73844
73842: GO 73900
73844: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73845: LD_ADDR_VAR 0 9
73849: PUSH
73850: LD_VAR 0 41
73854: PUSH
73855: LD_VAR 0 42
73859: PUSH
73860: LD_VAR 0 43
73864: PUSH
73865: LD_VAR 0 44
73869: PUSH
73870: LD_VAR 0 45
73874: PUSH
73875: LD_VAR 0 46
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: PUSH
73888: LD_VAR 0 4
73892: PUSH
73893: LD_INT 1
73895: PLUS
73896: ARRAY
73897: ST_TO_ADDR
73898: GO 74153
73900: LD_INT 36
73902: DOUBLE
73903: EQUAL
73904: IFTRUE 73908
73906: GO 73964
73908: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73909: LD_ADDR_VAR 0 9
73913: PUSH
73914: LD_VAR 0 47
73918: PUSH
73919: LD_VAR 0 48
73923: PUSH
73924: LD_VAR 0 49
73928: PUSH
73929: LD_VAR 0 50
73933: PUSH
73934: LD_VAR 0 51
73938: PUSH
73939: LD_VAR 0 52
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: PUSH
73952: LD_VAR 0 4
73956: PUSH
73957: LD_INT 1
73959: PLUS
73960: ARRAY
73961: ST_TO_ADDR
73962: GO 74153
73964: LD_INT 4
73966: DOUBLE
73967: EQUAL
73968: IFTRUE 73990
73970: LD_INT 5
73972: DOUBLE
73973: EQUAL
73974: IFTRUE 73990
73976: LD_INT 34
73978: DOUBLE
73979: EQUAL
73980: IFTRUE 73990
73982: LD_INT 37
73984: DOUBLE
73985: EQUAL
73986: IFTRUE 73990
73988: GO 74046
73990: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73991: LD_ADDR_VAR 0 9
73995: PUSH
73996: LD_VAR 0 53
74000: PUSH
74001: LD_VAR 0 54
74005: PUSH
74006: LD_VAR 0 55
74010: PUSH
74011: LD_VAR 0 56
74015: PUSH
74016: LD_VAR 0 57
74020: PUSH
74021: LD_VAR 0 58
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: PUSH
74034: LD_VAR 0 4
74038: PUSH
74039: LD_INT 1
74041: PLUS
74042: ARRAY
74043: ST_TO_ADDR
74044: GO 74153
74046: LD_INT 31
74048: DOUBLE
74049: EQUAL
74050: IFTRUE 74096
74052: LD_INT 32
74054: DOUBLE
74055: EQUAL
74056: IFTRUE 74096
74058: LD_INT 33
74060: DOUBLE
74061: EQUAL
74062: IFTRUE 74096
74064: LD_INT 27
74066: DOUBLE
74067: EQUAL
74068: IFTRUE 74096
74070: LD_INT 26
74072: DOUBLE
74073: EQUAL
74074: IFTRUE 74096
74076: LD_INT 28
74078: DOUBLE
74079: EQUAL
74080: IFTRUE 74096
74082: LD_INT 29
74084: DOUBLE
74085: EQUAL
74086: IFTRUE 74096
74088: LD_INT 30
74090: DOUBLE
74091: EQUAL
74092: IFTRUE 74096
74094: GO 74152
74096: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74097: LD_ADDR_VAR 0 9
74101: PUSH
74102: LD_VAR 0 59
74106: PUSH
74107: LD_VAR 0 60
74111: PUSH
74112: LD_VAR 0 61
74116: PUSH
74117: LD_VAR 0 62
74121: PUSH
74122: LD_VAR 0 63
74126: PUSH
74127: LD_VAR 0 64
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: PUSH
74140: LD_VAR 0 4
74144: PUSH
74145: LD_INT 1
74147: PLUS
74148: ARRAY
74149: ST_TO_ADDR
74150: GO 74153
74152: POP
// temp_list2 = [ ] ;
74153: LD_ADDR_VAR 0 10
74157: PUSH
74158: EMPTY
74159: ST_TO_ADDR
// for i in temp_list do
74160: LD_ADDR_VAR 0 8
74164: PUSH
74165: LD_VAR 0 9
74169: PUSH
74170: FOR_IN
74171: IFFALSE 74223
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74173: LD_ADDR_VAR 0 10
74177: PUSH
74178: LD_VAR 0 10
74182: PUSH
74183: LD_VAR 0 8
74187: PUSH
74188: LD_INT 1
74190: ARRAY
74191: PUSH
74192: LD_VAR 0 2
74196: PLUS
74197: PUSH
74198: LD_VAR 0 8
74202: PUSH
74203: LD_INT 2
74205: ARRAY
74206: PUSH
74207: LD_VAR 0 3
74211: PLUS
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: EMPTY
74218: LIST
74219: ADD
74220: ST_TO_ADDR
74221: GO 74170
74223: POP
74224: POP
// result = temp_list2 ;
74225: LD_ADDR_VAR 0 7
74229: PUSH
74230: LD_VAR 0 10
74234: ST_TO_ADDR
// end ;
74235: LD_VAR 0 7
74239: RET
// export function EnemyInRange ( unit , dist ) ; begin
74240: LD_INT 0
74242: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74243: LD_ADDR_VAR 0 3
74247: PUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: CALL_OW 255
74257: PPUSH
74258: LD_VAR 0 1
74262: PPUSH
74263: CALL_OW 250
74267: PPUSH
74268: LD_VAR 0 1
74272: PPUSH
74273: CALL_OW 251
74277: PPUSH
74278: LD_VAR 0 2
74282: PPUSH
74283: CALL 47636 0 4
74287: PUSH
74288: LD_INT 4
74290: ARRAY
74291: ST_TO_ADDR
// end ;
74292: LD_VAR 0 3
74296: RET
// export function PlayerSeeMe ( unit ) ; begin
74297: LD_INT 0
74299: PPUSH
// result := See ( your_side , unit ) ;
74300: LD_ADDR_VAR 0 2
74304: PUSH
74305: LD_OWVAR 2
74309: PPUSH
74310: LD_VAR 0 1
74314: PPUSH
74315: CALL_OW 292
74319: ST_TO_ADDR
// end ;
74320: LD_VAR 0 2
74324: RET
// export function ReverseDir ( unit ) ; begin
74325: LD_INT 0
74327: PPUSH
// if not unit then
74328: LD_VAR 0 1
74332: NOT
74333: IFFALSE 74337
// exit ;
74335: GO 74360
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74337: LD_ADDR_VAR 0 2
74341: PUSH
74342: LD_VAR 0 1
74346: PPUSH
74347: CALL_OW 254
74351: PUSH
74352: LD_INT 3
74354: PLUS
74355: PUSH
74356: LD_INT 6
74358: MOD
74359: ST_TO_ADDR
// end ;
74360: LD_VAR 0 2
74364: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74365: LD_INT 0
74367: PPUSH
74368: PPUSH
74369: PPUSH
74370: PPUSH
74371: PPUSH
// if not hexes then
74372: LD_VAR 0 2
74376: NOT
74377: IFFALSE 74381
// exit ;
74379: GO 74529
// dist := 9999 ;
74381: LD_ADDR_VAR 0 5
74385: PUSH
74386: LD_INT 9999
74388: ST_TO_ADDR
// for i = 1 to hexes do
74389: LD_ADDR_VAR 0 4
74393: PUSH
74394: DOUBLE
74395: LD_INT 1
74397: DEC
74398: ST_TO_ADDR
74399: LD_VAR 0 2
74403: PUSH
74404: FOR_TO
74405: IFFALSE 74517
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74407: LD_VAR 0 1
74411: PPUSH
74412: LD_VAR 0 2
74416: PUSH
74417: LD_VAR 0 4
74421: ARRAY
74422: PUSH
74423: LD_INT 1
74425: ARRAY
74426: PPUSH
74427: LD_VAR 0 2
74431: PUSH
74432: LD_VAR 0 4
74436: ARRAY
74437: PUSH
74438: LD_INT 2
74440: ARRAY
74441: PPUSH
74442: CALL_OW 297
74446: PUSH
74447: LD_VAR 0 5
74451: LESS
74452: IFFALSE 74515
// begin hex := hexes [ i ] ;
74454: LD_ADDR_VAR 0 7
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_VAR 0 4
74468: ARRAY
74469: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74470: LD_ADDR_VAR 0 5
74474: PUSH
74475: LD_VAR 0 1
74479: PPUSH
74480: LD_VAR 0 2
74484: PUSH
74485: LD_VAR 0 4
74489: ARRAY
74490: PUSH
74491: LD_INT 1
74493: ARRAY
74494: PPUSH
74495: LD_VAR 0 2
74499: PUSH
74500: LD_VAR 0 4
74504: ARRAY
74505: PUSH
74506: LD_INT 2
74508: ARRAY
74509: PPUSH
74510: CALL_OW 297
74514: ST_TO_ADDR
// end ; end ;
74515: GO 74404
74517: POP
74518: POP
// result := hex ;
74519: LD_ADDR_VAR 0 3
74523: PUSH
74524: LD_VAR 0 7
74528: ST_TO_ADDR
// end ;
74529: LD_VAR 0 3
74533: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74534: LD_INT 0
74536: PPUSH
74537: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74538: LD_VAR 0 1
74542: NOT
74543: PUSH
74544: LD_VAR 0 1
74548: PUSH
74549: LD_INT 21
74551: PUSH
74552: LD_INT 2
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 23
74561: PUSH
74562: LD_INT 2
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PPUSH
74573: CALL_OW 69
74577: IN
74578: NOT
74579: OR
74580: IFFALSE 74584
// exit ;
74582: GO 74631
// for i = 1 to 3 do
74584: LD_ADDR_VAR 0 3
74588: PUSH
74589: DOUBLE
74590: LD_INT 1
74592: DEC
74593: ST_TO_ADDR
74594: LD_INT 3
74596: PUSH
74597: FOR_TO
74598: IFFALSE 74629
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74600: LD_VAR 0 1
74604: PPUSH
74605: CALL_OW 250
74609: PPUSH
74610: LD_VAR 0 1
74614: PPUSH
74615: CALL_OW 251
74619: PPUSH
74620: LD_INT 1
74622: PPUSH
74623: CALL_OW 453
74627: GO 74597
74629: POP
74630: POP
// end ;
74631: LD_VAR 0 2
74635: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74636: LD_INT 0
74638: PPUSH
74639: PPUSH
74640: PPUSH
74641: PPUSH
74642: PPUSH
74643: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74644: LD_VAR 0 1
74648: NOT
74649: PUSH
74650: LD_VAR 0 2
74654: NOT
74655: OR
74656: PUSH
74657: LD_VAR 0 1
74661: PPUSH
74662: CALL_OW 314
74666: OR
74667: IFFALSE 74671
// exit ;
74669: GO 75112
// x := GetX ( enemy_unit ) ;
74671: LD_ADDR_VAR 0 7
74675: PUSH
74676: LD_VAR 0 2
74680: PPUSH
74681: CALL_OW 250
74685: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74686: LD_ADDR_VAR 0 8
74690: PUSH
74691: LD_VAR 0 2
74695: PPUSH
74696: CALL_OW 251
74700: ST_TO_ADDR
// if not x or not y then
74701: LD_VAR 0 7
74705: NOT
74706: PUSH
74707: LD_VAR 0 8
74711: NOT
74712: OR
74713: IFFALSE 74717
// exit ;
74715: GO 75112
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74717: LD_ADDR_VAR 0 6
74721: PUSH
74722: LD_VAR 0 7
74726: PPUSH
74727: LD_INT 0
74729: PPUSH
74730: LD_INT 4
74732: PPUSH
74733: CALL_OW 272
74737: PUSH
74738: LD_VAR 0 8
74742: PPUSH
74743: LD_INT 0
74745: PPUSH
74746: LD_INT 4
74748: PPUSH
74749: CALL_OW 273
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_VAR 0 7
74762: PPUSH
74763: LD_INT 1
74765: PPUSH
74766: LD_INT 4
74768: PPUSH
74769: CALL_OW 272
74773: PUSH
74774: LD_VAR 0 8
74778: PPUSH
74779: LD_INT 1
74781: PPUSH
74782: LD_INT 4
74784: PPUSH
74785: CALL_OW 273
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_VAR 0 7
74798: PPUSH
74799: LD_INT 2
74801: PPUSH
74802: LD_INT 4
74804: PPUSH
74805: CALL_OW 272
74809: PUSH
74810: LD_VAR 0 8
74814: PPUSH
74815: LD_INT 2
74817: PPUSH
74818: LD_INT 4
74820: PPUSH
74821: CALL_OW 273
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_VAR 0 7
74834: PPUSH
74835: LD_INT 3
74837: PPUSH
74838: LD_INT 4
74840: PPUSH
74841: CALL_OW 272
74845: PUSH
74846: LD_VAR 0 8
74850: PPUSH
74851: LD_INT 3
74853: PPUSH
74854: LD_INT 4
74856: PPUSH
74857: CALL_OW 273
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: PUSH
74866: LD_VAR 0 7
74870: PPUSH
74871: LD_INT 4
74873: PPUSH
74874: LD_INT 4
74876: PPUSH
74877: CALL_OW 272
74881: PUSH
74882: LD_VAR 0 8
74886: PPUSH
74887: LD_INT 4
74889: PPUSH
74890: LD_INT 4
74892: PPUSH
74893: CALL_OW 273
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_VAR 0 7
74906: PPUSH
74907: LD_INT 5
74909: PPUSH
74910: LD_INT 4
74912: PPUSH
74913: CALL_OW 272
74917: PUSH
74918: LD_VAR 0 8
74922: PPUSH
74923: LD_INT 5
74925: PPUSH
74926: LD_INT 4
74928: PPUSH
74929: CALL_OW 273
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: ST_TO_ADDR
// for i = tmp downto 1 do
74946: LD_ADDR_VAR 0 4
74950: PUSH
74951: DOUBLE
74952: LD_VAR 0 6
74956: INC
74957: ST_TO_ADDR
74958: LD_INT 1
74960: PUSH
74961: FOR_DOWNTO
74962: IFFALSE 75063
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74964: LD_VAR 0 6
74968: PUSH
74969: LD_VAR 0 4
74973: ARRAY
74974: PUSH
74975: LD_INT 1
74977: ARRAY
74978: PPUSH
74979: LD_VAR 0 6
74983: PUSH
74984: LD_VAR 0 4
74988: ARRAY
74989: PUSH
74990: LD_INT 2
74992: ARRAY
74993: PPUSH
74994: CALL_OW 488
74998: NOT
74999: PUSH
75000: LD_VAR 0 6
75004: PUSH
75005: LD_VAR 0 4
75009: ARRAY
75010: PUSH
75011: LD_INT 1
75013: ARRAY
75014: PPUSH
75015: LD_VAR 0 6
75019: PUSH
75020: LD_VAR 0 4
75024: ARRAY
75025: PUSH
75026: LD_INT 2
75028: ARRAY
75029: PPUSH
75030: CALL_OW 428
75034: PUSH
75035: LD_INT 0
75037: NONEQUAL
75038: OR
75039: IFFALSE 75061
// tmp := Delete ( tmp , i ) ;
75041: LD_ADDR_VAR 0 6
75045: PUSH
75046: LD_VAR 0 6
75050: PPUSH
75051: LD_VAR 0 4
75055: PPUSH
75056: CALL_OW 3
75060: ST_TO_ADDR
75061: GO 74961
75063: POP
75064: POP
// j := GetClosestHex ( unit , tmp ) ;
75065: LD_ADDR_VAR 0 5
75069: PUSH
75070: LD_VAR 0 1
75074: PPUSH
75075: LD_VAR 0 6
75079: PPUSH
75080: CALL 74365 0 2
75084: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75085: LD_VAR 0 1
75089: PPUSH
75090: LD_VAR 0 5
75094: PUSH
75095: LD_INT 1
75097: ARRAY
75098: PPUSH
75099: LD_VAR 0 5
75103: PUSH
75104: LD_INT 2
75106: ARRAY
75107: PPUSH
75108: CALL_OW 111
// end ;
75112: LD_VAR 0 3
75116: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75117: LD_INT 0
75119: PPUSH
75120: PPUSH
75121: PPUSH
// uc_side = 0 ;
75122: LD_ADDR_OWVAR 20
75126: PUSH
75127: LD_INT 0
75129: ST_TO_ADDR
// uc_nation = 0 ;
75130: LD_ADDR_OWVAR 21
75134: PUSH
75135: LD_INT 0
75137: ST_TO_ADDR
// InitHc_All ( ) ;
75138: CALL_OW 584
// InitVc ;
75142: CALL_OW 20
// if mastodonts then
75146: LD_VAR 0 6
75150: IFFALSE 75217
// for i = 1 to mastodonts do
75152: LD_ADDR_VAR 0 11
75156: PUSH
75157: DOUBLE
75158: LD_INT 1
75160: DEC
75161: ST_TO_ADDR
75162: LD_VAR 0 6
75166: PUSH
75167: FOR_TO
75168: IFFALSE 75215
// begin vc_chassis := 31 ;
75170: LD_ADDR_OWVAR 37
75174: PUSH
75175: LD_INT 31
75177: ST_TO_ADDR
// vc_control := control_rider ;
75178: LD_ADDR_OWVAR 38
75182: PUSH
75183: LD_INT 4
75185: ST_TO_ADDR
// animal := CreateVehicle ;
75186: LD_ADDR_VAR 0 12
75190: PUSH
75191: CALL_OW 45
75195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75196: LD_VAR 0 12
75200: PPUSH
75201: LD_VAR 0 8
75205: PPUSH
75206: LD_INT 0
75208: PPUSH
75209: CALL 77405 0 3
// end ;
75213: GO 75167
75215: POP
75216: POP
// if horses then
75217: LD_VAR 0 5
75221: IFFALSE 75288
// for i = 1 to horses do
75223: LD_ADDR_VAR 0 11
75227: PUSH
75228: DOUBLE
75229: LD_INT 1
75231: DEC
75232: ST_TO_ADDR
75233: LD_VAR 0 5
75237: PUSH
75238: FOR_TO
75239: IFFALSE 75286
// begin hc_class := 21 ;
75241: LD_ADDR_OWVAR 28
75245: PUSH
75246: LD_INT 21
75248: ST_TO_ADDR
// hc_gallery :=  ;
75249: LD_ADDR_OWVAR 33
75253: PUSH
75254: LD_STRING 
75256: ST_TO_ADDR
// animal := CreateHuman ;
75257: LD_ADDR_VAR 0 12
75261: PUSH
75262: CALL_OW 44
75266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75267: LD_VAR 0 12
75271: PPUSH
75272: LD_VAR 0 8
75276: PPUSH
75277: LD_INT 0
75279: PPUSH
75280: CALL 77405 0 3
// end ;
75284: GO 75238
75286: POP
75287: POP
// if birds then
75288: LD_VAR 0 1
75292: IFFALSE 75359
// for i = 1 to birds do
75294: LD_ADDR_VAR 0 11
75298: PUSH
75299: DOUBLE
75300: LD_INT 1
75302: DEC
75303: ST_TO_ADDR
75304: LD_VAR 0 1
75308: PUSH
75309: FOR_TO
75310: IFFALSE 75357
// begin hc_class = 18 ;
75312: LD_ADDR_OWVAR 28
75316: PUSH
75317: LD_INT 18
75319: ST_TO_ADDR
// hc_gallery =  ;
75320: LD_ADDR_OWVAR 33
75324: PUSH
75325: LD_STRING 
75327: ST_TO_ADDR
// animal := CreateHuman ;
75328: LD_ADDR_VAR 0 12
75332: PUSH
75333: CALL_OW 44
75337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75338: LD_VAR 0 12
75342: PPUSH
75343: LD_VAR 0 8
75347: PPUSH
75348: LD_INT 0
75350: PPUSH
75351: CALL 77405 0 3
// end ;
75355: GO 75309
75357: POP
75358: POP
// if tigers then
75359: LD_VAR 0 2
75363: IFFALSE 75447
// for i = 1 to tigers do
75365: LD_ADDR_VAR 0 11
75369: PUSH
75370: DOUBLE
75371: LD_INT 1
75373: DEC
75374: ST_TO_ADDR
75375: LD_VAR 0 2
75379: PUSH
75380: FOR_TO
75381: IFFALSE 75445
// begin hc_class = class_tiger ;
75383: LD_ADDR_OWVAR 28
75387: PUSH
75388: LD_INT 14
75390: ST_TO_ADDR
// hc_gallery =  ;
75391: LD_ADDR_OWVAR 33
75395: PUSH
75396: LD_STRING 
75398: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75399: LD_ADDR_OWVAR 35
75403: PUSH
75404: LD_INT 7
75406: NEG
75407: PPUSH
75408: LD_INT 7
75410: PPUSH
75411: CALL_OW 12
75415: ST_TO_ADDR
// animal := CreateHuman ;
75416: LD_ADDR_VAR 0 12
75420: PUSH
75421: CALL_OW 44
75425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75426: LD_VAR 0 12
75430: PPUSH
75431: LD_VAR 0 8
75435: PPUSH
75436: LD_INT 0
75438: PPUSH
75439: CALL 77405 0 3
// end ;
75443: GO 75380
75445: POP
75446: POP
// if apemans then
75447: LD_VAR 0 3
75451: IFFALSE 75574
// for i = 1 to apemans do
75453: LD_ADDR_VAR 0 11
75457: PUSH
75458: DOUBLE
75459: LD_INT 1
75461: DEC
75462: ST_TO_ADDR
75463: LD_VAR 0 3
75467: PUSH
75468: FOR_TO
75469: IFFALSE 75572
// begin hc_class = class_apeman ;
75471: LD_ADDR_OWVAR 28
75475: PUSH
75476: LD_INT 12
75478: ST_TO_ADDR
// hc_gallery =  ;
75479: LD_ADDR_OWVAR 33
75483: PUSH
75484: LD_STRING 
75486: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75487: LD_ADDR_OWVAR 35
75491: PUSH
75492: LD_INT 2
75494: NEG
75495: PPUSH
75496: LD_INT 2
75498: PPUSH
75499: CALL_OW 12
75503: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75504: LD_ADDR_OWVAR 31
75508: PUSH
75509: LD_INT 1
75511: PPUSH
75512: LD_INT 3
75514: PPUSH
75515: CALL_OW 12
75519: PUSH
75520: LD_INT 1
75522: PPUSH
75523: LD_INT 3
75525: PPUSH
75526: CALL_OW 12
75530: PUSH
75531: LD_INT 0
75533: PUSH
75534: LD_INT 0
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: ST_TO_ADDR
// animal := CreateHuman ;
75543: LD_ADDR_VAR 0 12
75547: PUSH
75548: CALL_OW 44
75552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75553: LD_VAR 0 12
75557: PPUSH
75558: LD_VAR 0 8
75562: PPUSH
75563: LD_INT 0
75565: PPUSH
75566: CALL 77405 0 3
// end ;
75570: GO 75468
75572: POP
75573: POP
// if enchidnas then
75574: LD_VAR 0 4
75578: IFFALSE 75645
// for i = 1 to enchidnas do
75580: LD_ADDR_VAR 0 11
75584: PUSH
75585: DOUBLE
75586: LD_INT 1
75588: DEC
75589: ST_TO_ADDR
75590: LD_VAR 0 4
75594: PUSH
75595: FOR_TO
75596: IFFALSE 75643
// begin hc_class = 13 ;
75598: LD_ADDR_OWVAR 28
75602: PUSH
75603: LD_INT 13
75605: ST_TO_ADDR
// hc_gallery =  ;
75606: LD_ADDR_OWVAR 33
75610: PUSH
75611: LD_STRING 
75613: ST_TO_ADDR
// animal := CreateHuman ;
75614: LD_ADDR_VAR 0 12
75618: PUSH
75619: CALL_OW 44
75623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75624: LD_VAR 0 12
75628: PPUSH
75629: LD_VAR 0 8
75633: PPUSH
75634: LD_INT 0
75636: PPUSH
75637: CALL 77405 0 3
// end ;
75641: GO 75595
75643: POP
75644: POP
// if fishes then
75645: LD_VAR 0 7
75649: IFFALSE 75716
// for i = 1 to fishes do
75651: LD_ADDR_VAR 0 11
75655: PUSH
75656: DOUBLE
75657: LD_INT 1
75659: DEC
75660: ST_TO_ADDR
75661: LD_VAR 0 7
75665: PUSH
75666: FOR_TO
75667: IFFALSE 75714
// begin hc_class = 20 ;
75669: LD_ADDR_OWVAR 28
75673: PUSH
75674: LD_INT 20
75676: ST_TO_ADDR
// hc_gallery =  ;
75677: LD_ADDR_OWVAR 33
75681: PUSH
75682: LD_STRING 
75684: ST_TO_ADDR
// animal := CreateHuman ;
75685: LD_ADDR_VAR 0 12
75689: PUSH
75690: CALL_OW 44
75694: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75695: LD_VAR 0 12
75699: PPUSH
75700: LD_VAR 0 9
75704: PPUSH
75705: LD_INT 0
75707: PPUSH
75708: CALL 77405 0 3
// end ;
75712: GO 75666
75714: POP
75715: POP
// end ;
75716: LD_VAR 0 10
75720: RET
// export function WantHeal ( sci , unit ) ; begin
75721: LD_INT 0
75723: PPUSH
// if GetTaskList ( sci ) > 0 then
75724: LD_VAR 0 1
75728: PPUSH
75729: CALL_OW 437
75733: PUSH
75734: LD_INT 0
75736: GREATER
75737: IFFALSE 75807
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75739: LD_VAR 0 1
75743: PPUSH
75744: CALL_OW 437
75748: PUSH
75749: LD_INT 1
75751: ARRAY
75752: PUSH
75753: LD_INT 1
75755: ARRAY
75756: PUSH
75757: LD_STRING l
75759: EQUAL
75760: PUSH
75761: LD_VAR 0 1
75765: PPUSH
75766: CALL_OW 437
75770: PUSH
75771: LD_INT 1
75773: ARRAY
75774: PUSH
75775: LD_INT 4
75777: ARRAY
75778: PUSH
75779: LD_VAR 0 2
75783: EQUAL
75784: AND
75785: IFFALSE 75797
// result := true else
75787: LD_ADDR_VAR 0 3
75791: PUSH
75792: LD_INT 1
75794: ST_TO_ADDR
75795: GO 75805
// result := false ;
75797: LD_ADDR_VAR 0 3
75801: PUSH
75802: LD_INT 0
75804: ST_TO_ADDR
// end else
75805: GO 75815
// result := false ;
75807: LD_ADDR_VAR 0 3
75811: PUSH
75812: LD_INT 0
75814: ST_TO_ADDR
// end ;
75815: LD_VAR 0 3
75819: RET
// export function HealTarget ( sci ) ; begin
75820: LD_INT 0
75822: PPUSH
// if not sci then
75823: LD_VAR 0 1
75827: NOT
75828: IFFALSE 75832
// exit ;
75830: GO 75897
// result := 0 ;
75832: LD_ADDR_VAR 0 2
75836: PUSH
75837: LD_INT 0
75839: ST_TO_ADDR
// if GetTaskList ( sci ) then
75840: LD_VAR 0 1
75844: PPUSH
75845: CALL_OW 437
75849: IFFALSE 75897
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75851: LD_VAR 0 1
75855: PPUSH
75856: CALL_OW 437
75860: PUSH
75861: LD_INT 1
75863: ARRAY
75864: PUSH
75865: LD_INT 1
75867: ARRAY
75868: PUSH
75869: LD_STRING l
75871: EQUAL
75872: IFFALSE 75897
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75874: LD_ADDR_VAR 0 2
75878: PUSH
75879: LD_VAR 0 1
75883: PPUSH
75884: CALL_OW 437
75888: PUSH
75889: LD_INT 1
75891: ARRAY
75892: PUSH
75893: LD_INT 4
75895: ARRAY
75896: ST_TO_ADDR
// end ;
75897: LD_VAR 0 2
75901: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75902: LD_INT 0
75904: PPUSH
75905: PPUSH
75906: PPUSH
75907: PPUSH
// if not base_units then
75908: LD_VAR 0 1
75912: NOT
75913: IFFALSE 75917
// exit ;
75915: GO 76004
// result := false ;
75917: LD_ADDR_VAR 0 2
75921: PUSH
75922: LD_INT 0
75924: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75925: LD_ADDR_VAR 0 5
75929: PUSH
75930: LD_VAR 0 1
75934: PPUSH
75935: LD_INT 21
75937: PUSH
75938: LD_INT 3
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PPUSH
75945: CALL_OW 72
75949: ST_TO_ADDR
// if not tmp then
75950: LD_VAR 0 5
75954: NOT
75955: IFFALSE 75959
// exit ;
75957: GO 76004
// for i in tmp do
75959: LD_ADDR_VAR 0 3
75963: PUSH
75964: LD_VAR 0 5
75968: PUSH
75969: FOR_IN
75970: IFFALSE 76002
// begin result := EnemyInRange ( i , 22 ) ;
75972: LD_ADDR_VAR 0 2
75976: PUSH
75977: LD_VAR 0 3
75981: PPUSH
75982: LD_INT 22
75984: PPUSH
75985: CALL 74240 0 2
75989: ST_TO_ADDR
// if result then
75990: LD_VAR 0 2
75994: IFFALSE 76000
// exit ;
75996: POP
75997: POP
75998: GO 76004
// end ;
76000: GO 75969
76002: POP
76003: POP
// end ;
76004: LD_VAR 0 2
76008: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
76009: LD_INT 0
76011: PPUSH
76012: PPUSH
// if not units then
76013: LD_VAR 0 1
76017: NOT
76018: IFFALSE 76022
// exit ;
76020: GO 76092
// result := [ ] ;
76022: LD_ADDR_VAR 0 3
76026: PUSH
76027: EMPTY
76028: ST_TO_ADDR
// for i in units do
76029: LD_ADDR_VAR 0 4
76033: PUSH
76034: LD_VAR 0 1
76038: PUSH
76039: FOR_IN
76040: IFFALSE 76090
// if GetTag ( i ) = tag then
76042: LD_VAR 0 4
76046: PPUSH
76047: CALL_OW 110
76051: PUSH
76052: LD_VAR 0 2
76056: EQUAL
76057: IFFALSE 76088
// result := Replace ( result , result + 1 , i ) ;
76059: LD_ADDR_VAR 0 3
76063: PUSH
76064: LD_VAR 0 3
76068: PPUSH
76069: LD_VAR 0 3
76073: PUSH
76074: LD_INT 1
76076: PLUS
76077: PPUSH
76078: LD_VAR 0 4
76082: PPUSH
76083: CALL_OW 1
76087: ST_TO_ADDR
76088: GO 76039
76090: POP
76091: POP
// end ;
76092: LD_VAR 0 3
76096: RET
// export function IsDriver ( un ) ; begin
76097: LD_INT 0
76099: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76100: LD_ADDR_VAR 0 2
76104: PUSH
76105: LD_VAR 0 1
76109: PUSH
76110: LD_INT 55
76112: PUSH
76113: EMPTY
76114: LIST
76115: PPUSH
76116: CALL_OW 69
76120: IN
76121: ST_TO_ADDR
// end ;
76122: LD_VAR 0 2
76126: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76127: LD_INT 0
76129: PPUSH
76130: PPUSH
// list := [ ] ;
76131: LD_ADDR_VAR 0 5
76135: PUSH
76136: EMPTY
76137: ST_TO_ADDR
// case d of 0 :
76138: LD_VAR 0 3
76142: PUSH
76143: LD_INT 0
76145: DOUBLE
76146: EQUAL
76147: IFTRUE 76151
76149: GO 76284
76151: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76152: LD_ADDR_VAR 0 5
76156: PUSH
76157: LD_VAR 0 1
76161: PUSH
76162: LD_INT 4
76164: MINUS
76165: PUSH
76166: LD_VAR 0 2
76170: PUSH
76171: LD_INT 4
76173: MINUS
76174: PUSH
76175: LD_INT 2
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: LIST
76182: PUSH
76183: LD_VAR 0 1
76187: PUSH
76188: LD_INT 3
76190: MINUS
76191: PUSH
76192: LD_VAR 0 2
76196: PUSH
76197: LD_INT 1
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: LIST
76204: PUSH
76205: LD_VAR 0 1
76209: PUSH
76210: LD_INT 4
76212: PLUS
76213: PUSH
76214: LD_VAR 0 2
76218: PUSH
76219: LD_INT 4
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: LIST
76226: PUSH
76227: LD_VAR 0 1
76231: PUSH
76232: LD_INT 3
76234: PLUS
76235: PUSH
76236: LD_VAR 0 2
76240: PUSH
76241: LD_INT 3
76243: PLUS
76244: PUSH
76245: LD_INT 5
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: LIST
76252: PUSH
76253: LD_VAR 0 1
76257: PUSH
76258: LD_VAR 0 2
76262: PUSH
76263: LD_INT 4
76265: PLUS
76266: PUSH
76267: LD_INT 0
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: LIST
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: ST_TO_ADDR
// end ; 1 :
76282: GO 76982
76284: LD_INT 1
76286: DOUBLE
76287: EQUAL
76288: IFTRUE 76292
76290: GO 76425
76292: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76293: LD_ADDR_VAR 0 5
76297: PUSH
76298: LD_VAR 0 1
76302: PUSH
76303: LD_VAR 0 2
76307: PUSH
76308: LD_INT 4
76310: MINUS
76311: PUSH
76312: LD_INT 3
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: LIST
76319: PUSH
76320: LD_VAR 0 1
76324: PUSH
76325: LD_INT 3
76327: MINUS
76328: PUSH
76329: LD_VAR 0 2
76333: PUSH
76334: LD_INT 3
76336: MINUS
76337: PUSH
76338: LD_INT 2
76340: PUSH
76341: EMPTY
76342: LIST
76343: LIST
76344: LIST
76345: PUSH
76346: LD_VAR 0 1
76350: PUSH
76351: LD_INT 4
76353: MINUS
76354: PUSH
76355: LD_VAR 0 2
76359: PUSH
76360: LD_INT 1
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: LIST
76367: PUSH
76368: LD_VAR 0 1
76372: PUSH
76373: LD_VAR 0 2
76377: PUSH
76378: LD_INT 3
76380: PLUS
76381: PUSH
76382: LD_INT 0
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: LIST
76389: PUSH
76390: LD_VAR 0 1
76394: PUSH
76395: LD_INT 4
76397: PLUS
76398: PUSH
76399: LD_VAR 0 2
76403: PUSH
76404: LD_INT 4
76406: PLUS
76407: PUSH
76408: LD_INT 5
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: LIST
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: ST_TO_ADDR
// end ; 2 :
76423: GO 76982
76425: LD_INT 2
76427: DOUBLE
76428: EQUAL
76429: IFTRUE 76433
76431: GO 76562
76433: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76434: LD_ADDR_VAR 0 5
76438: PUSH
76439: LD_VAR 0 1
76443: PUSH
76444: LD_VAR 0 2
76448: PUSH
76449: LD_INT 3
76451: MINUS
76452: PUSH
76453: LD_INT 3
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: LIST
76460: PUSH
76461: LD_VAR 0 1
76465: PUSH
76466: LD_INT 4
76468: PLUS
76469: PUSH
76470: LD_VAR 0 2
76474: PUSH
76475: LD_INT 4
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: LIST
76482: PUSH
76483: LD_VAR 0 1
76487: PUSH
76488: LD_VAR 0 2
76492: PUSH
76493: LD_INT 4
76495: PLUS
76496: PUSH
76497: LD_INT 0
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: LIST
76504: PUSH
76505: LD_VAR 0 1
76509: PUSH
76510: LD_INT 3
76512: MINUS
76513: PUSH
76514: LD_VAR 0 2
76518: PUSH
76519: LD_INT 1
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: LIST
76526: PUSH
76527: LD_VAR 0 1
76531: PUSH
76532: LD_INT 4
76534: MINUS
76535: PUSH
76536: LD_VAR 0 2
76540: PUSH
76541: LD_INT 4
76543: MINUS
76544: PUSH
76545: LD_INT 2
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: LIST
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: ST_TO_ADDR
// end ; 3 :
76560: GO 76982
76562: LD_INT 3
76564: DOUBLE
76565: EQUAL
76566: IFTRUE 76570
76568: GO 76703
76570: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76571: LD_ADDR_VAR 0 5
76575: PUSH
76576: LD_VAR 0 1
76580: PUSH
76581: LD_INT 3
76583: PLUS
76584: PUSH
76585: LD_VAR 0 2
76589: PUSH
76590: LD_INT 4
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: LIST
76597: PUSH
76598: LD_VAR 0 1
76602: PUSH
76603: LD_INT 4
76605: PLUS
76606: PUSH
76607: LD_VAR 0 2
76611: PUSH
76612: LD_INT 4
76614: PLUS
76615: PUSH
76616: LD_INT 5
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: LIST
76623: PUSH
76624: LD_VAR 0 1
76628: PUSH
76629: LD_INT 4
76631: MINUS
76632: PUSH
76633: LD_VAR 0 2
76637: PUSH
76638: LD_INT 1
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: LIST
76645: PUSH
76646: LD_VAR 0 1
76650: PUSH
76651: LD_VAR 0 2
76655: PUSH
76656: LD_INT 4
76658: MINUS
76659: PUSH
76660: LD_INT 3
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: PUSH
76668: LD_VAR 0 1
76672: PUSH
76673: LD_INT 3
76675: MINUS
76676: PUSH
76677: LD_VAR 0 2
76681: PUSH
76682: LD_INT 3
76684: MINUS
76685: PUSH
76686: LD_INT 2
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: LIST
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: ST_TO_ADDR
// end ; 4 :
76701: GO 76982
76703: LD_INT 4
76705: DOUBLE
76706: EQUAL
76707: IFTRUE 76711
76709: GO 76844
76711: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76712: LD_ADDR_VAR 0 5
76716: PUSH
76717: LD_VAR 0 1
76721: PUSH
76722: LD_VAR 0 2
76726: PUSH
76727: LD_INT 4
76729: PLUS
76730: PUSH
76731: LD_INT 0
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: LIST
76738: PUSH
76739: LD_VAR 0 1
76743: PUSH
76744: LD_INT 3
76746: PLUS
76747: PUSH
76748: LD_VAR 0 2
76752: PUSH
76753: LD_INT 3
76755: PLUS
76756: PUSH
76757: LD_INT 5
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: LIST
76764: PUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_INT 4
76772: PLUS
76773: PUSH
76774: LD_VAR 0 2
76778: PUSH
76779: LD_INT 4
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: LIST
76786: PUSH
76787: LD_VAR 0 1
76791: PUSH
76792: LD_VAR 0 2
76796: PUSH
76797: LD_INT 3
76799: MINUS
76800: PUSH
76801: LD_INT 3
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: LIST
76808: PUSH
76809: LD_VAR 0 1
76813: PUSH
76814: LD_INT 4
76816: MINUS
76817: PUSH
76818: LD_VAR 0 2
76822: PUSH
76823: LD_INT 4
76825: MINUS
76826: PUSH
76827: LD_INT 2
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: LIST
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: ST_TO_ADDR
// end ; 5 :
76842: GO 76982
76844: LD_INT 5
76846: DOUBLE
76847: EQUAL
76848: IFTRUE 76852
76850: GO 76981
76852: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76853: LD_ADDR_VAR 0 5
76857: PUSH
76858: LD_VAR 0 1
76862: PUSH
76863: LD_INT 4
76865: MINUS
76866: PUSH
76867: LD_VAR 0 2
76871: PUSH
76872: LD_INT 1
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: PUSH
76880: LD_VAR 0 1
76884: PUSH
76885: LD_VAR 0 2
76889: PUSH
76890: LD_INT 4
76892: MINUS
76893: PUSH
76894: LD_INT 3
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: LIST
76901: PUSH
76902: LD_VAR 0 1
76906: PUSH
76907: LD_INT 4
76909: PLUS
76910: PUSH
76911: LD_VAR 0 2
76915: PUSH
76916: LD_INT 4
76918: PLUS
76919: PUSH
76920: LD_INT 5
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: LIST
76927: PUSH
76928: LD_VAR 0 1
76932: PUSH
76933: LD_INT 3
76935: PLUS
76936: PUSH
76937: LD_VAR 0 2
76941: PUSH
76942: LD_INT 4
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: LIST
76949: PUSH
76950: LD_VAR 0 1
76954: PUSH
76955: LD_VAR 0 2
76959: PUSH
76960: LD_INT 3
76962: PLUS
76963: PUSH
76964: LD_INT 0
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: LIST
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: ST_TO_ADDR
// end ; end ;
76979: GO 76982
76981: POP
// result := list ;
76982: LD_ADDR_VAR 0 4
76986: PUSH
76987: LD_VAR 0 5
76991: ST_TO_ADDR
// end ;
76992: LD_VAR 0 4
76996: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76997: LD_INT 0
76999: PPUSH
77000: PPUSH
77001: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77002: LD_VAR 0 1
77006: NOT
77007: PUSH
77008: LD_VAR 0 2
77012: PUSH
77013: LD_INT 1
77015: PUSH
77016: LD_INT 2
77018: PUSH
77019: LD_INT 3
77021: PUSH
77022: LD_INT 4
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: IN
77031: NOT
77032: OR
77033: IFFALSE 77037
// exit ;
77035: GO 77129
// tmp := [ ] ;
77037: LD_ADDR_VAR 0 5
77041: PUSH
77042: EMPTY
77043: ST_TO_ADDR
// for i in units do
77044: LD_ADDR_VAR 0 4
77048: PUSH
77049: LD_VAR 0 1
77053: PUSH
77054: FOR_IN
77055: IFFALSE 77098
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77057: LD_ADDR_VAR 0 5
77061: PUSH
77062: LD_VAR 0 5
77066: PPUSH
77067: LD_VAR 0 5
77071: PUSH
77072: LD_INT 1
77074: PLUS
77075: PPUSH
77076: LD_VAR 0 4
77080: PPUSH
77081: LD_VAR 0 2
77085: PPUSH
77086: CALL_OW 259
77090: PPUSH
77091: CALL_OW 2
77095: ST_TO_ADDR
77096: GO 77054
77098: POP
77099: POP
// if not tmp then
77100: LD_VAR 0 5
77104: NOT
77105: IFFALSE 77109
// exit ;
77107: GO 77129
// result := SortListByListDesc ( units , tmp ) ;
77109: LD_ADDR_VAR 0 3
77113: PUSH
77114: LD_VAR 0 1
77118: PPUSH
77119: LD_VAR 0 5
77123: PPUSH
77124: CALL_OW 77
77128: ST_TO_ADDR
// end ;
77129: LD_VAR 0 3
77133: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77134: LD_INT 0
77136: PPUSH
77137: PPUSH
77138: PPUSH
// result := false ;
77139: LD_ADDR_VAR 0 3
77143: PUSH
77144: LD_INT 0
77146: ST_TO_ADDR
// x := GetX ( building ) ;
77147: LD_ADDR_VAR 0 4
77151: PUSH
77152: LD_VAR 0 2
77156: PPUSH
77157: CALL_OW 250
77161: ST_TO_ADDR
// y := GetY ( building ) ;
77162: LD_ADDR_VAR 0 5
77166: PUSH
77167: LD_VAR 0 2
77171: PPUSH
77172: CALL_OW 251
77176: ST_TO_ADDR
// if not building or not x or not y then
77177: LD_VAR 0 2
77181: NOT
77182: PUSH
77183: LD_VAR 0 4
77187: NOT
77188: OR
77189: PUSH
77190: LD_VAR 0 5
77194: NOT
77195: OR
77196: IFFALSE 77200
// exit ;
77198: GO 77292
// if GetTaskList ( unit ) then
77200: LD_VAR 0 1
77204: PPUSH
77205: CALL_OW 437
77209: IFFALSE 77292
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77211: LD_STRING e
77213: PUSH
77214: LD_VAR 0 1
77218: PPUSH
77219: CALL_OW 437
77223: PUSH
77224: LD_INT 1
77226: ARRAY
77227: PUSH
77228: LD_INT 1
77230: ARRAY
77231: EQUAL
77232: PUSH
77233: LD_VAR 0 4
77237: PUSH
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 437
77247: PUSH
77248: LD_INT 1
77250: ARRAY
77251: PUSH
77252: LD_INT 2
77254: ARRAY
77255: EQUAL
77256: AND
77257: PUSH
77258: LD_VAR 0 5
77262: PUSH
77263: LD_VAR 0 1
77267: PPUSH
77268: CALL_OW 437
77272: PUSH
77273: LD_INT 1
77275: ARRAY
77276: PUSH
77277: LD_INT 3
77279: ARRAY
77280: EQUAL
77281: AND
77282: IFFALSE 77292
// result := true end ;
77284: LD_ADDR_VAR 0 3
77288: PUSH
77289: LD_INT 1
77291: ST_TO_ADDR
// end ;
77292: LD_VAR 0 3
77296: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77297: LD_INT 0
77299: PPUSH
// result := false ;
77300: LD_ADDR_VAR 0 4
77304: PUSH
77305: LD_INT 0
77307: ST_TO_ADDR
// if GetTaskList ( unit ) then
77308: LD_VAR 0 1
77312: PPUSH
77313: CALL_OW 437
77317: IFFALSE 77400
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77319: LD_STRING M
77321: PUSH
77322: LD_VAR 0 1
77326: PPUSH
77327: CALL_OW 437
77331: PUSH
77332: LD_INT 1
77334: ARRAY
77335: PUSH
77336: LD_INT 1
77338: ARRAY
77339: EQUAL
77340: PUSH
77341: LD_VAR 0 2
77345: PUSH
77346: LD_VAR 0 1
77350: PPUSH
77351: CALL_OW 437
77355: PUSH
77356: LD_INT 1
77358: ARRAY
77359: PUSH
77360: LD_INT 2
77362: ARRAY
77363: EQUAL
77364: AND
77365: PUSH
77366: LD_VAR 0 3
77370: PUSH
77371: LD_VAR 0 1
77375: PPUSH
77376: CALL_OW 437
77380: PUSH
77381: LD_INT 1
77383: ARRAY
77384: PUSH
77385: LD_INT 3
77387: ARRAY
77388: EQUAL
77389: AND
77390: IFFALSE 77400
// result := true ;
77392: LD_ADDR_VAR 0 4
77396: PUSH
77397: LD_INT 1
77399: ST_TO_ADDR
// end ; end ;
77400: LD_VAR 0 4
77404: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77405: LD_INT 0
77407: PPUSH
77408: PPUSH
77409: PPUSH
77410: PPUSH
// if not unit or not area then
77411: LD_VAR 0 1
77415: NOT
77416: PUSH
77417: LD_VAR 0 2
77421: NOT
77422: OR
77423: IFFALSE 77427
// exit ;
77425: GO 77591
// tmp := AreaToList ( area , i ) ;
77427: LD_ADDR_VAR 0 6
77431: PUSH
77432: LD_VAR 0 2
77436: PPUSH
77437: LD_VAR 0 5
77441: PPUSH
77442: CALL_OW 517
77446: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77447: LD_ADDR_VAR 0 5
77451: PUSH
77452: DOUBLE
77453: LD_INT 1
77455: DEC
77456: ST_TO_ADDR
77457: LD_VAR 0 6
77461: PUSH
77462: LD_INT 1
77464: ARRAY
77465: PUSH
77466: FOR_TO
77467: IFFALSE 77589
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77469: LD_ADDR_VAR 0 7
77473: PUSH
77474: LD_VAR 0 6
77478: PUSH
77479: LD_INT 1
77481: ARRAY
77482: PUSH
77483: LD_VAR 0 5
77487: ARRAY
77488: PUSH
77489: LD_VAR 0 6
77493: PUSH
77494: LD_INT 2
77496: ARRAY
77497: PUSH
77498: LD_VAR 0 5
77502: ARRAY
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77508: LD_VAR 0 7
77512: PUSH
77513: LD_INT 1
77515: ARRAY
77516: PPUSH
77517: LD_VAR 0 7
77521: PUSH
77522: LD_INT 2
77524: ARRAY
77525: PPUSH
77526: CALL_OW 428
77530: PUSH
77531: LD_INT 0
77533: EQUAL
77534: IFFALSE 77587
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77536: LD_VAR 0 1
77540: PPUSH
77541: LD_VAR 0 7
77545: PUSH
77546: LD_INT 1
77548: ARRAY
77549: PPUSH
77550: LD_VAR 0 7
77554: PUSH
77555: LD_INT 2
77557: ARRAY
77558: PPUSH
77559: LD_VAR 0 3
77563: PPUSH
77564: CALL_OW 48
// result := IsPlaced ( unit ) ;
77568: LD_ADDR_VAR 0 4
77572: PUSH
77573: LD_VAR 0 1
77577: PPUSH
77578: CALL_OW 305
77582: ST_TO_ADDR
// exit ;
77583: POP
77584: POP
77585: GO 77591
// end ; end ;
77587: GO 77466
77589: POP
77590: POP
// end ;
77591: LD_VAR 0 4
77595: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77596: LD_INT 0
77598: PPUSH
77599: PPUSH
77600: PPUSH
// if not side or side > 8 then
77601: LD_VAR 0 1
77605: NOT
77606: PUSH
77607: LD_VAR 0 1
77611: PUSH
77612: LD_INT 8
77614: GREATER
77615: OR
77616: IFFALSE 77620
// exit ;
77618: GO 77807
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77620: LD_ADDR_VAR 0 4
77624: PUSH
77625: LD_INT 22
77627: PUSH
77628: LD_VAR 0 1
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: LD_INT 21
77639: PUSH
77640: LD_INT 3
77642: PUSH
77643: EMPTY
77644: LIST
77645: LIST
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PPUSH
77651: CALL_OW 69
77655: ST_TO_ADDR
// if not tmp then
77656: LD_VAR 0 4
77660: NOT
77661: IFFALSE 77665
// exit ;
77663: GO 77807
// enable_addtolog := true ;
77665: LD_ADDR_OWVAR 81
77669: PUSH
77670: LD_INT 1
77672: ST_TO_ADDR
// AddToLog ( [ ) ;
77673: LD_STRING [
77675: PPUSH
77676: CALL_OW 561
// for i in tmp do
77680: LD_ADDR_VAR 0 3
77684: PUSH
77685: LD_VAR 0 4
77689: PUSH
77690: FOR_IN
77691: IFFALSE 77798
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77693: LD_STRING [
77695: PUSH
77696: LD_VAR 0 3
77700: PPUSH
77701: CALL_OW 266
77705: STR
77706: PUSH
77707: LD_STRING , 
77709: STR
77710: PUSH
77711: LD_VAR 0 3
77715: PPUSH
77716: CALL_OW 250
77720: STR
77721: PUSH
77722: LD_STRING , 
77724: STR
77725: PUSH
77726: LD_VAR 0 3
77730: PPUSH
77731: CALL_OW 251
77735: STR
77736: PUSH
77737: LD_STRING , 
77739: STR
77740: PUSH
77741: LD_VAR 0 3
77745: PPUSH
77746: CALL_OW 254
77750: STR
77751: PUSH
77752: LD_STRING , 
77754: STR
77755: PUSH
77756: LD_VAR 0 3
77760: PPUSH
77761: LD_INT 1
77763: PPUSH
77764: CALL_OW 268
77768: STR
77769: PUSH
77770: LD_STRING , 
77772: STR
77773: PUSH
77774: LD_VAR 0 3
77778: PPUSH
77779: LD_INT 2
77781: PPUSH
77782: CALL_OW 268
77786: STR
77787: PUSH
77788: LD_STRING ],
77790: STR
77791: PPUSH
77792: CALL_OW 561
// end ;
77796: GO 77690
77798: POP
77799: POP
// AddToLog ( ]; ) ;
77800: LD_STRING ];
77802: PPUSH
77803: CALL_OW 561
// end ;
77807: LD_VAR 0 2
77811: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77812: LD_INT 0
77814: PPUSH
77815: PPUSH
77816: PPUSH
77817: PPUSH
77818: PPUSH
// if not area or not rate or not max then
77819: LD_VAR 0 1
77823: NOT
77824: PUSH
77825: LD_VAR 0 2
77829: NOT
77830: OR
77831: PUSH
77832: LD_VAR 0 4
77836: NOT
77837: OR
77838: IFFALSE 77842
// exit ;
77840: GO 78034
// while 1 do
77842: LD_INT 1
77844: IFFALSE 78034
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77846: LD_ADDR_VAR 0 9
77850: PUSH
77851: LD_VAR 0 1
77855: PPUSH
77856: LD_INT 1
77858: PPUSH
77859: CALL_OW 287
77863: PUSH
77864: LD_INT 10
77866: MUL
77867: ST_TO_ADDR
// r := rate / 10 ;
77868: LD_ADDR_VAR 0 7
77872: PUSH
77873: LD_VAR 0 2
77877: PUSH
77878: LD_INT 10
77880: DIVREAL
77881: ST_TO_ADDR
// time := 1 1$00 ;
77882: LD_ADDR_VAR 0 8
77886: PUSH
77887: LD_INT 2100
77889: ST_TO_ADDR
// if amount < min then
77890: LD_VAR 0 9
77894: PUSH
77895: LD_VAR 0 3
77899: LESS
77900: IFFALSE 77918
// r := r * 2 else
77902: LD_ADDR_VAR 0 7
77906: PUSH
77907: LD_VAR 0 7
77911: PUSH
77912: LD_INT 2
77914: MUL
77915: ST_TO_ADDR
77916: GO 77944
// if amount > max then
77918: LD_VAR 0 9
77922: PUSH
77923: LD_VAR 0 4
77927: GREATER
77928: IFFALSE 77944
// r := r / 2 ;
77930: LD_ADDR_VAR 0 7
77934: PUSH
77935: LD_VAR 0 7
77939: PUSH
77940: LD_INT 2
77942: DIVREAL
77943: ST_TO_ADDR
// time := time / r ;
77944: LD_ADDR_VAR 0 8
77948: PUSH
77949: LD_VAR 0 8
77953: PUSH
77954: LD_VAR 0 7
77958: DIVREAL
77959: ST_TO_ADDR
// if time < 0 then
77960: LD_VAR 0 8
77964: PUSH
77965: LD_INT 0
77967: LESS
77968: IFFALSE 77985
// time := time * - 1 ;
77970: LD_ADDR_VAR 0 8
77974: PUSH
77975: LD_VAR 0 8
77979: PUSH
77980: LD_INT 1
77982: NEG
77983: MUL
77984: ST_TO_ADDR
// wait ( time ) ;
77985: LD_VAR 0 8
77989: PPUSH
77990: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77994: LD_INT 35
77996: PPUSH
77997: LD_INT 875
77999: PPUSH
78000: CALL_OW 12
78004: PPUSH
78005: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78009: LD_INT 1
78011: PPUSH
78012: LD_INT 5
78014: PPUSH
78015: CALL_OW 12
78019: PPUSH
78020: LD_VAR 0 1
78024: PPUSH
78025: LD_INT 1
78027: PPUSH
78028: CALL_OW 55
// end ;
78032: GO 77842
// end ;
78034: LD_VAR 0 5
78038: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78039: LD_INT 0
78041: PPUSH
78042: PPUSH
78043: PPUSH
78044: PPUSH
78045: PPUSH
78046: PPUSH
78047: PPUSH
78048: PPUSH
// if not turrets or not factories then
78049: LD_VAR 0 1
78053: NOT
78054: PUSH
78055: LD_VAR 0 2
78059: NOT
78060: OR
78061: IFFALSE 78065
// exit ;
78063: GO 78372
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78065: LD_ADDR_VAR 0 10
78069: PUSH
78070: LD_INT 5
78072: PUSH
78073: LD_INT 6
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: PUSH
78080: LD_INT 2
78082: PUSH
78083: LD_INT 4
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: PUSH
78090: LD_INT 3
78092: PUSH
78093: LD_INT 5
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: LIST
78104: PUSH
78105: LD_INT 24
78107: PUSH
78108: LD_INT 25
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: PUSH
78115: LD_INT 23
78117: PUSH
78118: LD_INT 27
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: PUSH
78129: LD_INT 42
78131: PUSH
78132: LD_INT 43
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PUSH
78139: LD_INT 44
78141: PUSH
78142: LD_INT 46
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 45
78151: PUSH
78152: LD_INT 47
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: LIST
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: LIST
78168: ST_TO_ADDR
// result := [ ] ;
78169: LD_ADDR_VAR 0 3
78173: PUSH
78174: EMPTY
78175: ST_TO_ADDR
// for i in turrets do
78176: LD_ADDR_VAR 0 4
78180: PUSH
78181: LD_VAR 0 1
78185: PUSH
78186: FOR_IN
78187: IFFALSE 78370
// begin nat := GetNation ( i ) ;
78189: LD_ADDR_VAR 0 7
78193: PUSH
78194: LD_VAR 0 4
78198: PPUSH
78199: CALL_OW 248
78203: ST_TO_ADDR
// weapon := 0 ;
78204: LD_ADDR_VAR 0 8
78208: PUSH
78209: LD_INT 0
78211: ST_TO_ADDR
// if not nat then
78212: LD_VAR 0 7
78216: NOT
78217: IFFALSE 78221
// continue ;
78219: GO 78186
// for j in list [ nat ] do
78221: LD_ADDR_VAR 0 5
78225: PUSH
78226: LD_VAR 0 10
78230: PUSH
78231: LD_VAR 0 7
78235: ARRAY
78236: PUSH
78237: FOR_IN
78238: IFFALSE 78279
// if GetBWeapon ( i ) = j [ 1 ] then
78240: LD_VAR 0 4
78244: PPUSH
78245: CALL_OW 269
78249: PUSH
78250: LD_VAR 0 5
78254: PUSH
78255: LD_INT 1
78257: ARRAY
78258: EQUAL
78259: IFFALSE 78277
// begin weapon := j [ 2 ] ;
78261: LD_ADDR_VAR 0 8
78265: PUSH
78266: LD_VAR 0 5
78270: PUSH
78271: LD_INT 2
78273: ARRAY
78274: ST_TO_ADDR
// break ;
78275: GO 78279
// end ;
78277: GO 78237
78279: POP
78280: POP
// if not weapon then
78281: LD_VAR 0 8
78285: NOT
78286: IFFALSE 78290
// continue ;
78288: GO 78186
// for k in factories do
78290: LD_ADDR_VAR 0 6
78294: PUSH
78295: LD_VAR 0 2
78299: PUSH
78300: FOR_IN
78301: IFFALSE 78366
// begin weapons := AvailableWeaponList ( k ) ;
78303: LD_ADDR_VAR 0 9
78307: PUSH
78308: LD_VAR 0 6
78312: PPUSH
78313: CALL_OW 478
78317: ST_TO_ADDR
// if not weapons then
78318: LD_VAR 0 9
78322: NOT
78323: IFFALSE 78327
// continue ;
78325: GO 78300
// if weapon in weapons then
78327: LD_VAR 0 8
78331: PUSH
78332: LD_VAR 0 9
78336: IN
78337: IFFALSE 78364
// begin result := [ i , weapon ] ;
78339: LD_ADDR_VAR 0 3
78343: PUSH
78344: LD_VAR 0 4
78348: PUSH
78349: LD_VAR 0 8
78353: PUSH
78354: EMPTY
78355: LIST
78356: LIST
78357: ST_TO_ADDR
// exit ;
78358: POP
78359: POP
78360: POP
78361: POP
78362: GO 78372
// end ; end ;
78364: GO 78300
78366: POP
78367: POP
// end ;
78368: GO 78186
78370: POP
78371: POP
// end ;
78372: LD_VAR 0 3
78376: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78377: LD_INT 0
78379: PPUSH
// if not side or side > 8 then
78380: LD_VAR 0 3
78384: NOT
78385: PUSH
78386: LD_VAR 0 3
78390: PUSH
78391: LD_INT 8
78393: GREATER
78394: OR
78395: IFFALSE 78399
// exit ;
78397: GO 78458
// if not range then
78399: LD_VAR 0 4
78403: NOT
78404: IFFALSE 78415
// range := - 12 ;
78406: LD_ADDR_VAR 0 4
78410: PUSH
78411: LD_INT 12
78413: NEG
78414: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78415: LD_VAR 0 1
78419: PPUSH
78420: LD_VAR 0 2
78424: PPUSH
78425: LD_VAR 0 3
78429: PPUSH
78430: LD_VAR 0 4
78434: PPUSH
78435: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78439: LD_VAR 0 1
78443: PPUSH
78444: LD_VAR 0 2
78448: PPUSH
78449: LD_VAR 0 3
78453: PPUSH
78454: CALL_OW 331
// end ;
78458: LD_VAR 0 5
78462: RET
// export function Video ( mode ) ; begin
78463: LD_INT 0
78465: PPUSH
// ingame_video = mode ;
78466: LD_ADDR_OWVAR 52
78470: PUSH
78471: LD_VAR 0 1
78475: ST_TO_ADDR
// interface_hidden = mode ;
78476: LD_ADDR_OWVAR 54
78480: PUSH
78481: LD_VAR 0 1
78485: ST_TO_ADDR
// end ;
78486: LD_VAR 0 2
78490: RET
// export function Join ( array , element ) ; begin
78491: LD_INT 0
78493: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78494: LD_ADDR_VAR 0 3
78498: PUSH
78499: LD_VAR 0 1
78503: PPUSH
78504: LD_VAR 0 1
78508: PUSH
78509: LD_INT 1
78511: PLUS
78512: PPUSH
78513: LD_VAR 0 2
78517: PPUSH
78518: CALL_OW 1
78522: ST_TO_ADDR
// end ;
78523: LD_VAR 0 3
78527: RET
// export function JoinUnion ( array , element ) ; begin
78528: LD_INT 0
78530: PPUSH
// result := array union element ;
78531: LD_ADDR_VAR 0 3
78535: PUSH
78536: LD_VAR 0 1
78540: PUSH
78541: LD_VAR 0 2
78545: UNION
78546: ST_TO_ADDR
// end ;
78547: LD_VAR 0 3
78551: RET
// export function GetBehemoths ( side ) ; begin
78552: LD_INT 0
78554: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78555: LD_ADDR_VAR 0 2
78559: PUSH
78560: LD_INT 22
78562: PUSH
78563: LD_VAR 0 1
78567: PUSH
78568: EMPTY
78569: LIST
78570: LIST
78571: PUSH
78572: LD_INT 31
78574: PUSH
78575: LD_INT 25
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PPUSH
78586: CALL_OW 69
78590: ST_TO_ADDR
// end ;
78591: LD_VAR 0 2
78595: RET
// export function Shuffle ( array ) ; var i , index ; begin
78596: LD_INT 0
78598: PPUSH
78599: PPUSH
78600: PPUSH
// result := [ ] ;
78601: LD_ADDR_VAR 0 2
78605: PUSH
78606: EMPTY
78607: ST_TO_ADDR
// if not array then
78608: LD_VAR 0 1
78612: NOT
78613: IFFALSE 78617
// exit ;
78615: GO 78716
// Randomize ;
78617: CALL_OW 10
// for i = array downto 1 do
78621: LD_ADDR_VAR 0 3
78625: PUSH
78626: DOUBLE
78627: LD_VAR 0 1
78631: INC
78632: ST_TO_ADDR
78633: LD_INT 1
78635: PUSH
78636: FOR_DOWNTO
78637: IFFALSE 78714
// begin index := rand ( 1 , array ) ;
78639: LD_ADDR_VAR 0 4
78643: PUSH
78644: LD_INT 1
78646: PPUSH
78647: LD_VAR 0 1
78651: PPUSH
78652: CALL_OW 12
78656: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78657: LD_ADDR_VAR 0 2
78661: PUSH
78662: LD_VAR 0 2
78666: PPUSH
78667: LD_VAR 0 2
78671: PUSH
78672: LD_INT 1
78674: PLUS
78675: PPUSH
78676: LD_VAR 0 1
78680: PUSH
78681: LD_VAR 0 4
78685: ARRAY
78686: PPUSH
78687: CALL_OW 2
78691: ST_TO_ADDR
// array := Delete ( array , index ) ;
78692: LD_ADDR_VAR 0 1
78696: PUSH
78697: LD_VAR 0 1
78701: PPUSH
78702: LD_VAR 0 4
78706: PPUSH
78707: CALL_OW 3
78711: ST_TO_ADDR
// end ;
78712: GO 78636
78714: POP
78715: POP
// end ;
78716: LD_VAR 0 2
78720: RET
// export function GetBaseMaterials ( base ) ; begin
78721: LD_INT 0
78723: PPUSH
// result := [ 0 , 0 , 0 ] ;
78724: LD_ADDR_VAR 0 2
78728: PUSH
78729: LD_INT 0
78731: PUSH
78732: LD_INT 0
78734: PUSH
78735: LD_INT 0
78737: PUSH
78738: EMPTY
78739: LIST
78740: LIST
78741: LIST
78742: ST_TO_ADDR
// if not base then
78743: LD_VAR 0 1
78747: NOT
78748: IFFALSE 78752
// exit ;
78750: GO 78801
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78752: LD_ADDR_VAR 0 2
78756: PUSH
78757: LD_VAR 0 1
78761: PPUSH
78762: LD_INT 1
78764: PPUSH
78765: CALL_OW 275
78769: PUSH
78770: LD_VAR 0 1
78774: PPUSH
78775: LD_INT 2
78777: PPUSH
78778: CALL_OW 275
78782: PUSH
78783: LD_VAR 0 1
78787: PPUSH
78788: LD_INT 3
78790: PPUSH
78791: CALL_OW 275
78795: PUSH
78796: EMPTY
78797: LIST
78798: LIST
78799: LIST
78800: ST_TO_ADDR
// end ;
78801: LD_VAR 0 2
78805: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78806: LD_INT 0
78808: PPUSH
78809: PPUSH
// result := array ;
78810: LD_ADDR_VAR 0 3
78814: PUSH
78815: LD_VAR 0 1
78819: ST_TO_ADDR
// if size > 0 then
78820: LD_VAR 0 2
78824: PUSH
78825: LD_INT 0
78827: GREATER
78828: IFFALSE 78874
// for i := array downto size do
78830: LD_ADDR_VAR 0 4
78834: PUSH
78835: DOUBLE
78836: LD_VAR 0 1
78840: INC
78841: ST_TO_ADDR
78842: LD_VAR 0 2
78846: PUSH
78847: FOR_DOWNTO
78848: IFFALSE 78872
// result := Delete ( result , result ) ;
78850: LD_ADDR_VAR 0 3
78854: PUSH
78855: LD_VAR 0 3
78859: PPUSH
78860: LD_VAR 0 3
78864: PPUSH
78865: CALL_OW 3
78869: ST_TO_ADDR
78870: GO 78847
78872: POP
78873: POP
// end ;
78874: LD_VAR 0 3
78878: RET
// export function ComExit ( unit ) ; var tmp ; begin
78879: LD_INT 0
78881: PPUSH
78882: PPUSH
// if not IsInUnit ( unit ) then
78883: LD_VAR 0 1
78887: PPUSH
78888: CALL_OW 310
78892: NOT
78893: IFFALSE 78897
// exit ;
78895: GO 78957
// tmp := IsInUnit ( unit ) ;
78897: LD_ADDR_VAR 0 3
78901: PUSH
78902: LD_VAR 0 1
78906: PPUSH
78907: CALL_OW 310
78911: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78912: LD_VAR 0 3
78916: PPUSH
78917: CALL_OW 247
78921: PUSH
78922: LD_INT 2
78924: EQUAL
78925: IFFALSE 78938
// ComExitVehicle ( unit ) else
78927: LD_VAR 0 1
78931: PPUSH
78932: CALL_OW 121
78936: GO 78947
// ComExitBuilding ( unit ) ;
78938: LD_VAR 0 1
78942: PPUSH
78943: CALL_OW 122
// result := tmp ;
78947: LD_ADDR_VAR 0 2
78951: PUSH
78952: LD_VAR 0 3
78956: ST_TO_ADDR
// end ;
78957: LD_VAR 0 2
78961: RET
// export function ComExitAll ( units ) ; var i ; begin
78962: LD_INT 0
78964: PPUSH
78965: PPUSH
// if not units then
78966: LD_VAR 0 1
78970: NOT
78971: IFFALSE 78975
// exit ;
78973: GO 79001
// for i in units do
78975: LD_ADDR_VAR 0 3
78979: PUSH
78980: LD_VAR 0 1
78984: PUSH
78985: FOR_IN
78986: IFFALSE 78999
// ComExit ( i ) ;
78988: LD_VAR 0 3
78992: PPUSH
78993: CALL 78879 0 1
78997: GO 78985
78999: POP
79000: POP
// end ;
79001: LD_VAR 0 2
79005: RET
// export function ResetHc ; begin
79006: LD_INT 0
79008: PPUSH
// InitHc ;
79009: CALL_OW 19
// hc_importance := 0 ;
79013: LD_ADDR_OWVAR 32
79017: PUSH
79018: LD_INT 0
79020: ST_TO_ADDR
// end ;
79021: LD_VAR 0 1
79025: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79026: LD_INT 0
79028: PPUSH
79029: PPUSH
79030: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79031: LD_ADDR_VAR 0 6
79035: PUSH
79036: LD_VAR 0 1
79040: PUSH
79041: LD_VAR 0 3
79045: PLUS
79046: PUSH
79047: LD_INT 2
79049: DIV
79050: ST_TO_ADDR
// if _x < 0 then
79051: LD_VAR 0 6
79055: PUSH
79056: LD_INT 0
79058: LESS
79059: IFFALSE 79076
// _x := _x * - 1 ;
79061: LD_ADDR_VAR 0 6
79065: PUSH
79066: LD_VAR 0 6
79070: PUSH
79071: LD_INT 1
79073: NEG
79074: MUL
79075: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79076: LD_ADDR_VAR 0 7
79080: PUSH
79081: LD_VAR 0 2
79085: PUSH
79086: LD_VAR 0 4
79090: PLUS
79091: PUSH
79092: LD_INT 2
79094: DIV
79095: ST_TO_ADDR
// if _y < 0 then
79096: LD_VAR 0 7
79100: PUSH
79101: LD_INT 0
79103: LESS
79104: IFFALSE 79121
// _y := _y * - 1 ;
79106: LD_ADDR_VAR 0 7
79110: PUSH
79111: LD_VAR 0 7
79115: PUSH
79116: LD_INT 1
79118: NEG
79119: MUL
79120: ST_TO_ADDR
// result := [ _x , _y ] ;
79121: LD_ADDR_VAR 0 5
79125: PUSH
79126: LD_VAR 0 6
79130: PUSH
79131: LD_VAR 0 7
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: ST_TO_ADDR
// end ;
79140: LD_VAR 0 5
79144: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79145: LD_INT 0
79147: PPUSH
79148: PPUSH
79149: PPUSH
79150: PPUSH
// task := GetTaskList ( unit ) ;
79151: LD_ADDR_VAR 0 7
79155: PUSH
79156: LD_VAR 0 1
79160: PPUSH
79161: CALL_OW 437
79165: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79166: LD_VAR 0 7
79170: NOT
79171: PUSH
79172: LD_VAR 0 1
79176: PPUSH
79177: LD_VAR 0 2
79181: PPUSH
79182: CALL_OW 308
79186: NOT
79187: AND
79188: IFFALSE 79192
// exit ;
79190: GO 79310
// if IsInArea ( unit , area ) then
79192: LD_VAR 0 1
79196: PPUSH
79197: LD_VAR 0 2
79201: PPUSH
79202: CALL_OW 308
79206: IFFALSE 79224
// begin ComMoveToArea ( unit , goAway ) ;
79208: LD_VAR 0 1
79212: PPUSH
79213: LD_VAR 0 3
79217: PPUSH
79218: CALL_OW 113
// exit ;
79222: GO 79310
// end ; if task [ 1 ] [ 1 ] <> M then
79224: LD_VAR 0 7
79228: PUSH
79229: LD_INT 1
79231: ARRAY
79232: PUSH
79233: LD_INT 1
79235: ARRAY
79236: PUSH
79237: LD_STRING M
79239: NONEQUAL
79240: IFFALSE 79244
// exit ;
79242: GO 79310
// x := task [ 1 ] [ 2 ] ;
79244: LD_ADDR_VAR 0 5
79248: PUSH
79249: LD_VAR 0 7
79253: PUSH
79254: LD_INT 1
79256: ARRAY
79257: PUSH
79258: LD_INT 2
79260: ARRAY
79261: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79262: LD_ADDR_VAR 0 6
79266: PUSH
79267: LD_VAR 0 7
79271: PUSH
79272: LD_INT 1
79274: ARRAY
79275: PUSH
79276: LD_INT 3
79278: ARRAY
79279: ST_TO_ADDR
// if InArea ( x , y , area ) then
79280: LD_VAR 0 5
79284: PPUSH
79285: LD_VAR 0 6
79289: PPUSH
79290: LD_VAR 0 2
79294: PPUSH
79295: CALL_OW 309
79299: IFFALSE 79310
// ComStop ( unit ) ;
79301: LD_VAR 0 1
79305: PPUSH
79306: CALL_OW 141
// end ;
79310: LD_VAR 0 4
79314: RET
// export function Abs ( value ) ; begin
79315: LD_INT 0
79317: PPUSH
// result := value ;
79318: LD_ADDR_VAR 0 2
79322: PUSH
79323: LD_VAR 0 1
79327: ST_TO_ADDR
// if value < 0 then
79328: LD_VAR 0 1
79332: PUSH
79333: LD_INT 0
79335: LESS
79336: IFFALSE 79353
// result := value * - 1 ;
79338: LD_ADDR_VAR 0 2
79342: PUSH
79343: LD_VAR 0 1
79347: PUSH
79348: LD_INT 1
79350: NEG
79351: MUL
79352: ST_TO_ADDR
// end ;
79353: LD_VAR 0 2
79357: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79358: LD_INT 0
79360: PPUSH
79361: PPUSH
79362: PPUSH
79363: PPUSH
79364: PPUSH
79365: PPUSH
79366: PPUSH
79367: PPUSH
// if not unit or not building then
79368: LD_VAR 0 1
79372: NOT
79373: PUSH
79374: LD_VAR 0 2
79378: NOT
79379: OR
79380: IFFALSE 79384
// exit ;
79382: GO 79610
// x := GetX ( building ) ;
79384: LD_ADDR_VAR 0 4
79388: PUSH
79389: LD_VAR 0 2
79393: PPUSH
79394: CALL_OW 250
79398: ST_TO_ADDR
// y := GetY ( building ) ;
79399: LD_ADDR_VAR 0 6
79403: PUSH
79404: LD_VAR 0 2
79408: PPUSH
79409: CALL_OW 251
79413: ST_TO_ADDR
// d := GetDir ( building ) ;
79414: LD_ADDR_VAR 0 8
79418: PUSH
79419: LD_VAR 0 2
79423: PPUSH
79424: CALL_OW 254
79428: ST_TO_ADDR
// r := 4 ;
79429: LD_ADDR_VAR 0 9
79433: PUSH
79434: LD_INT 4
79436: ST_TO_ADDR
// for i := 1 to 5 do
79437: LD_ADDR_VAR 0 10
79441: PUSH
79442: DOUBLE
79443: LD_INT 1
79445: DEC
79446: ST_TO_ADDR
79447: LD_INT 5
79449: PUSH
79450: FOR_TO
79451: IFFALSE 79608
// begin _x := ShiftX ( x , d , r + i ) ;
79453: LD_ADDR_VAR 0 5
79457: PUSH
79458: LD_VAR 0 4
79462: PPUSH
79463: LD_VAR 0 8
79467: PPUSH
79468: LD_VAR 0 9
79472: PUSH
79473: LD_VAR 0 10
79477: PLUS
79478: PPUSH
79479: CALL_OW 272
79483: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79484: LD_ADDR_VAR 0 7
79488: PUSH
79489: LD_VAR 0 6
79493: PPUSH
79494: LD_VAR 0 8
79498: PPUSH
79499: LD_VAR 0 9
79503: PUSH
79504: LD_VAR 0 10
79508: PLUS
79509: PPUSH
79510: CALL_OW 273
79514: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79515: LD_VAR 0 5
79519: PPUSH
79520: LD_VAR 0 7
79524: PPUSH
79525: CALL_OW 488
79529: PUSH
79530: LD_VAR 0 5
79534: PPUSH
79535: LD_VAR 0 7
79539: PPUSH
79540: CALL_OW 428
79544: PPUSH
79545: CALL_OW 247
79549: PUSH
79550: LD_INT 3
79552: PUSH
79553: LD_INT 2
79555: PUSH
79556: EMPTY
79557: LIST
79558: LIST
79559: IN
79560: NOT
79561: AND
79562: IFFALSE 79606
// begin ComMoveXY ( unit , _x , _y ) ;
79564: LD_VAR 0 1
79568: PPUSH
79569: LD_VAR 0 5
79573: PPUSH
79574: LD_VAR 0 7
79578: PPUSH
79579: CALL_OW 111
// result := [ _x , _y ] ;
79583: LD_ADDR_VAR 0 3
79587: PUSH
79588: LD_VAR 0 5
79592: PUSH
79593: LD_VAR 0 7
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: ST_TO_ADDR
// exit ;
79602: POP
79603: POP
79604: GO 79610
// end ; end ;
79606: GO 79450
79608: POP
79609: POP
// end ;
79610: LD_VAR 0 3
79614: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79615: LD_INT 0
79617: PPUSH
79618: PPUSH
79619: PPUSH
// result := 0 ;
79620: LD_ADDR_VAR 0 3
79624: PUSH
79625: LD_INT 0
79627: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79628: LD_VAR 0 1
79632: PUSH
79633: LD_INT 0
79635: LESS
79636: PUSH
79637: LD_VAR 0 1
79641: PUSH
79642: LD_INT 8
79644: GREATER
79645: OR
79646: PUSH
79647: LD_VAR 0 2
79651: PUSH
79652: LD_INT 0
79654: LESS
79655: OR
79656: PUSH
79657: LD_VAR 0 2
79661: PUSH
79662: LD_INT 8
79664: GREATER
79665: OR
79666: IFFALSE 79670
// exit ;
79668: GO 79745
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79670: LD_ADDR_VAR 0 4
79674: PUSH
79675: LD_INT 22
79677: PUSH
79678: LD_VAR 0 2
79682: PUSH
79683: EMPTY
79684: LIST
79685: LIST
79686: PPUSH
79687: CALL_OW 69
79691: PUSH
79692: FOR_IN
79693: IFFALSE 79743
// begin un := UnitShoot ( i ) ;
79695: LD_ADDR_VAR 0 5
79699: PUSH
79700: LD_VAR 0 4
79704: PPUSH
79705: CALL_OW 504
79709: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79710: LD_VAR 0 5
79714: PPUSH
79715: CALL_OW 255
79719: PUSH
79720: LD_VAR 0 1
79724: EQUAL
79725: IFFALSE 79741
// begin result := un ;
79727: LD_ADDR_VAR 0 3
79731: PUSH
79732: LD_VAR 0 5
79736: ST_TO_ADDR
// exit ;
79737: POP
79738: POP
79739: GO 79745
// end ; end ;
79741: GO 79692
79743: POP
79744: POP
// end ;
79745: LD_VAR 0 3
79749: RET
// export function GetCargoBay ( units ) ; begin
79750: LD_INT 0
79752: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79753: LD_ADDR_VAR 0 2
79757: PUSH
79758: LD_VAR 0 1
79762: PPUSH
79763: LD_INT 2
79765: PUSH
79766: LD_INT 34
79768: PUSH
79769: LD_INT 12
79771: PUSH
79772: EMPTY
79773: LIST
79774: LIST
79775: PUSH
79776: LD_INT 34
79778: PUSH
79779: LD_INT 51
79781: PUSH
79782: EMPTY
79783: LIST
79784: LIST
79785: PUSH
79786: LD_INT 34
79788: PUSH
79789: LD_INT 32
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PUSH
79796: LD_INT 34
79798: PUSH
79799: LD_EXP 122
79803: PUSH
79804: EMPTY
79805: LIST
79806: LIST
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: LIST
79812: LIST
79813: LIST
79814: PPUSH
79815: CALL_OW 72
79819: ST_TO_ADDR
// end ;
79820: LD_VAR 0 2
79824: RET
// export function Negate ( value ) ; begin
79825: LD_INT 0
79827: PPUSH
// result := not value ;
79828: LD_ADDR_VAR 0 2
79832: PUSH
79833: LD_VAR 0 1
79837: NOT
79838: ST_TO_ADDR
// end ;
79839: LD_VAR 0 2
79843: RET
// export function Inc ( value ) ; begin
79844: LD_INT 0
79846: PPUSH
// result := value + 1 ;
79847: LD_ADDR_VAR 0 2
79851: PUSH
79852: LD_VAR 0 1
79856: PUSH
79857: LD_INT 1
79859: PLUS
79860: ST_TO_ADDR
// end ;
79861: LD_VAR 0 2
79865: RET
// export function Dec ( value ) ; begin
79866: LD_INT 0
79868: PPUSH
// result := value - 1 ;
79869: LD_ADDR_VAR 0 2
79873: PUSH
79874: LD_VAR 0 1
79878: PUSH
79879: LD_INT 1
79881: MINUS
79882: ST_TO_ADDR
// end ;
79883: LD_VAR 0 2
79887: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79888: LD_INT 0
79890: PPUSH
79891: PPUSH
79892: PPUSH
79893: PPUSH
79894: PPUSH
79895: PPUSH
79896: PPUSH
79897: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79898: LD_VAR 0 1
79902: PPUSH
79903: LD_VAR 0 2
79907: PPUSH
79908: CALL_OW 488
79912: NOT
79913: PUSH
79914: LD_VAR 0 3
79918: PPUSH
79919: LD_VAR 0 4
79923: PPUSH
79924: CALL_OW 488
79928: NOT
79929: OR
79930: IFFALSE 79943
// begin result := - 1 ;
79932: LD_ADDR_VAR 0 5
79936: PUSH
79937: LD_INT 1
79939: NEG
79940: ST_TO_ADDR
// exit ;
79941: GO 80178
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79943: LD_ADDR_VAR 0 12
79947: PUSH
79948: LD_VAR 0 1
79952: PPUSH
79953: LD_VAR 0 2
79957: PPUSH
79958: LD_VAR 0 3
79962: PPUSH
79963: LD_VAR 0 4
79967: PPUSH
79968: CALL 79026 0 4
79972: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79973: LD_ADDR_VAR 0 11
79977: PUSH
79978: LD_VAR 0 1
79982: PPUSH
79983: LD_VAR 0 2
79987: PPUSH
79988: LD_VAR 0 12
79992: PUSH
79993: LD_INT 1
79995: ARRAY
79996: PPUSH
79997: LD_VAR 0 12
80001: PUSH
80002: LD_INT 2
80004: ARRAY
80005: PPUSH
80006: CALL_OW 298
80010: ST_TO_ADDR
// distance := 9999 ;
80011: LD_ADDR_VAR 0 10
80015: PUSH
80016: LD_INT 9999
80018: ST_TO_ADDR
// for i := 0 to 5 do
80019: LD_ADDR_VAR 0 6
80023: PUSH
80024: DOUBLE
80025: LD_INT 0
80027: DEC
80028: ST_TO_ADDR
80029: LD_INT 5
80031: PUSH
80032: FOR_TO
80033: IFFALSE 80176
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80035: LD_ADDR_VAR 0 7
80039: PUSH
80040: LD_VAR 0 1
80044: PPUSH
80045: LD_VAR 0 6
80049: PPUSH
80050: LD_VAR 0 11
80054: PPUSH
80055: CALL_OW 272
80059: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80060: LD_ADDR_VAR 0 8
80064: PUSH
80065: LD_VAR 0 2
80069: PPUSH
80070: LD_VAR 0 6
80074: PPUSH
80075: LD_VAR 0 11
80079: PPUSH
80080: CALL_OW 273
80084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80085: LD_VAR 0 7
80089: PPUSH
80090: LD_VAR 0 8
80094: PPUSH
80095: CALL_OW 488
80099: NOT
80100: IFFALSE 80104
// continue ;
80102: GO 80032
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80104: LD_ADDR_VAR 0 9
80108: PUSH
80109: LD_VAR 0 12
80113: PUSH
80114: LD_INT 1
80116: ARRAY
80117: PPUSH
80118: LD_VAR 0 12
80122: PUSH
80123: LD_INT 2
80125: ARRAY
80126: PPUSH
80127: LD_VAR 0 7
80131: PPUSH
80132: LD_VAR 0 8
80136: PPUSH
80137: CALL_OW 298
80141: ST_TO_ADDR
// if tmp < distance then
80142: LD_VAR 0 9
80146: PUSH
80147: LD_VAR 0 10
80151: LESS
80152: IFFALSE 80174
// begin result := i ;
80154: LD_ADDR_VAR 0 5
80158: PUSH
80159: LD_VAR 0 6
80163: ST_TO_ADDR
// distance := tmp ;
80164: LD_ADDR_VAR 0 10
80168: PUSH
80169: LD_VAR 0 9
80173: ST_TO_ADDR
// end ; end ;
80174: GO 80032
80176: POP
80177: POP
// end ;
80178: LD_VAR 0 5
80182: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80183: LD_INT 0
80185: PPUSH
80186: PPUSH
// if not driver or not IsInUnit ( driver ) then
80187: LD_VAR 0 1
80191: NOT
80192: PUSH
80193: LD_VAR 0 1
80197: PPUSH
80198: CALL_OW 310
80202: NOT
80203: OR
80204: IFFALSE 80208
// exit ;
80206: GO 80298
// vehicle := IsInUnit ( driver ) ;
80208: LD_ADDR_VAR 0 3
80212: PUSH
80213: LD_VAR 0 1
80217: PPUSH
80218: CALL_OW 310
80222: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80223: LD_VAR 0 1
80227: PPUSH
80228: LD_STRING \
80230: PUSH
80231: LD_INT 0
80233: PUSH
80234: LD_INT 0
80236: PUSH
80237: LD_INT 0
80239: PUSH
80240: LD_INT 0
80242: PUSH
80243: LD_INT 0
80245: PUSH
80246: LD_INT 0
80248: PUSH
80249: EMPTY
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: PUSH
80258: LD_STRING E
80260: PUSH
80261: LD_INT 0
80263: PUSH
80264: LD_INT 0
80266: PUSH
80267: LD_VAR 0 3
80271: PUSH
80272: LD_INT 0
80274: PUSH
80275: LD_INT 0
80277: PUSH
80278: LD_INT 0
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: LIST
80285: LIST
80286: LIST
80287: LIST
80288: LIST
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PPUSH
80294: CALL_OW 446
// end ;
80298: LD_VAR 0 2
80302: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80303: LD_INT 0
80305: PPUSH
80306: PPUSH
// if not driver or not IsInUnit ( driver ) then
80307: LD_VAR 0 1
80311: NOT
80312: PUSH
80313: LD_VAR 0 1
80317: PPUSH
80318: CALL_OW 310
80322: NOT
80323: OR
80324: IFFALSE 80328
// exit ;
80326: GO 80418
// vehicle := IsInUnit ( driver ) ;
80328: LD_ADDR_VAR 0 3
80332: PUSH
80333: LD_VAR 0 1
80337: PPUSH
80338: CALL_OW 310
80342: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80343: LD_VAR 0 1
80347: PPUSH
80348: LD_STRING \
80350: PUSH
80351: LD_INT 0
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: LD_INT 0
80359: PUSH
80360: LD_INT 0
80362: PUSH
80363: LD_INT 0
80365: PUSH
80366: LD_INT 0
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: LIST
80376: LIST
80377: PUSH
80378: LD_STRING E
80380: PUSH
80381: LD_INT 0
80383: PUSH
80384: LD_INT 0
80386: PUSH
80387: LD_VAR 0 3
80391: PUSH
80392: LD_INT 0
80394: PUSH
80395: LD_INT 0
80397: PUSH
80398: LD_INT 0
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: PPUSH
80414: CALL_OW 447
// end ;
80418: LD_VAR 0 2
80422: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80423: LD_INT 0
80425: PPUSH
80426: PPUSH
80427: PPUSH
// tmp := [ ] ;
80428: LD_ADDR_VAR 0 5
80432: PUSH
80433: EMPTY
80434: ST_TO_ADDR
// for i in units do
80435: LD_ADDR_VAR 0 4
80439: PUSH
80440: LD_VAR 0 1
80444: PUSH
80445: FOR_IN
80446: IFFALSE 80484
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80448: LD_ADDR_VAR 0 5
80452: PUSH
80453: LD_VAR 0 5
80457: PPUSH
80458: LD_VAR 0 5
80462: PUSH
80463: LD_INT 1
80465: PLUS
80466: PPUSH
80467: LD_VAR 0 4
80471: PPUSH
80472: CALL_OW 256
80476: PPUSH
80477: CALL_OW 2
80481: ST_TO_ADDR
80482: GO 80445
80484: POP
80485: POP
// if not tmp then
80486: LD_VAR 0 5
80490: NOT
80491: IFFALSE 80495
// exit ;
80493: GO 80543
// if asc then
80495: LD_VAR 0 2
80499: IFFALSE 80523
// result := SortListByListAsc ( units , tmp ) else
80501: LD_ADDR_VAR 0 3
80505: PUSH
80506: LD_VAR 0 1
80510: PPUSH
80511: LD_VAR 0 5
80515: PPUSH
80516: CALL_OW 76
80520: ST_TO_ADDR
80521: GO 80543
// result := SortListByListDesc ( units , tmp ) ;
80523: LD_ADDR_VAR 0 3
80527: PUSH
80528: LD_VAR 0 1
80532: PPUSH
80533: LD_VAR 0 5
80537: PPUSH
80538: CALL_OW 77
80542: ST_TO_ADDR
// end ;
80543: LD_VAR 0 3
80547: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80548: LD_INT 0
80550: PPUSH
80551: PPUSH
// task := GetTaskList ( mech ) ;
80552: LD_ADDR_VAR 0 4
80556: PUSH
80557: LD_VAR 0 1
80561: PPUSH
80562: CALL_OW 437
80566: ST_TO_ADDR
// if not task then
80567: LD_VAR 0 4
80571: NOT
80572: IFFALSE 80576
// exit ;
80574: GO 80618
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80576: LD_ADDR_VAR 0 3
80580: PUSH
80581: LD_VAR 0 4
80585: PUSH
80586: LD_INT 1
80588: ARRAY
80589: PUSH
80590: LD_INT 1
80592: ARRAY
80593: PUSH
80594: LD_STRING r
80596: EQUAL
80597: PUSH
80598: LD_VAR 0 4
80602: PUSH
80603: LD_INT 1
80605: ARRAY
80606: PUSH
80607: LD_INT 4
80609: ARRAY
80610: PUSH
80611: LD_VAR 0 2
80615: EQUAL
80616: AND
80617: ST_TO_ADDR
// end ;
80618: LD_VAR 0 3
80622: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80623: LD_INT 0
80625: PPUSH
// SetDir ( unit , d ) ;
80626: LD_VAR 0 1
80630: PPUSH
80631: LD_VAR 0 4
80635: PPUSH
80636: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80640: LD_VAR 0 1
80644: PPUSH
80645: LD_VAR 0 2
80649: PPUSH
80650: LD_VAR 0 3
80654: PPUSH
80655: LD_VAR 0 5
80659: PPUSH
80660: CALL_OW 48
// end ;
80664: LD_VAR 0 6
80668: RET
// export function ToNaturalNumber ( number ) ; begin
80669: LD_INT 0
80671: PPUSH
// result := number div 1 ;
80672: LD_ADDR_VAR 0 2
80676: PUSH
80677: LD_VAR 0 1
80681: PUSH
80682: LD_INT 1
80684: DIV
80685: ST_TO_ADDR
// if number < 0 then
80686: LD_VAR 0 1
80690: PUSH
80691: LD_INT 0
80693: LESS
80694: IFFALSE 80704
// result := 0 ;
80696: LD_ADDR_VAR 0 2
80700: PUSH
80701: LD_INT 0
80703: ST_TO_ADDR
// end ;
80704: LD_VAR 0 2
80708: RET
// export function SortByClass ( units , class ) ; var un ; begin
80709: LD_INT 0
80711: PPUSH
80712: PPUSH
// if not units or not class then
80713: LD_VAR 0 1
80717: NOT
80718: PUSH
80719: LD_VAR 0 2
80723: NOT
80724: OR
80725: IFFALSE 80729
// exit ;
80727: GO 80824
// result := [ ] ;
80729: LD_ADDR_VAR 0 3
80733: PUSH
80734: EMPTY
80735: ST_TO_ADDR
// for un in units do
80736: LD_ADDR_VAR 0 4
80740: PUSH
80741: LD_VAR 0 1
80745: PUSH
80746: FOR_IN
80747: IFFALSE 80822
// if GetClass ( un ) = class then
80749: LD_VAR 0 4
80753: PPUSH
80754: CALL_OW 257
80758: PUSH
80759: LD_VAR 0 2
80763: EQUAL
80764: IFFALSE 80791
// result := Insert ( result , 1 , un ) else
80766: LD_ADDR_VAR 0 3
80770: PUSH
80771: LD_VAR 0 3
80775: PPUSH
80776: LD_INT 1
80778: PPUSH
80779: LD_VAR 0 4
80783: PPUSH
80784: CALL_OW 2
80788: ST_TO_ADDR
80789: GO 80820
// result := Replace ( result , result + 1 , un ) ;
80791: LD_ADDR_VAR 0 3
80795: PUSH
80796: LD_VAR 0 3
80800: PPUSH
80801: LD_VAR 0 3
80805: PUSH
80806: LD_INT 1
80808: PLUS
80809: PPUSH
80810: LD_VAR 0 4
80814: PPUSH
80815: CALL_OW 1
80819: ST_TO_ADDR
80820: GO 80746
80822: POP
80823: POP
// end ;
80824: LD_VAR 0 3
80828: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80829: LD_INT 0
80831: PPUSH
80832: PPUSH
80833: PPUSH
80834: PPUSH
80835: PPUSH
80836: PPUSH
80837: PPUSH
// result := [ ] ;
80838: LD_ADDR_VAR 0 4
80842: PUSH
80843: EMPTY
80844: ST_TO_ADDR
// if x - r < 0 then
80845: LD_VAR 0 1
80849: PUSH
80850: LD_VAR 0 3
80854: MINUS
80855: PUSH
80856: LD_INT 0
80858: LESS
80859: IFFALSE 80871
// min_x := 0 else
80861: LD_ADDR_VAR 0 8
80865: PUSH
80866: LD_INT 0
80868: ST_TO_ADDR
80869: GO 80887
// min_x := x - r ;
80871: LD_ADDR_VAR 0 8
80875: PUSH
80876: LD_VAR 0 1
80880: PUSH
80881: LD_VAR 0 3
80885: MINUS
80886: ST_TO_ADDR
// if y - r < 0 then
80887: LD_VAR 0 2
80891: PUSH
80892: LD_VAR 0 3
80896: MINUS
80897: PUSH
80898: LD_INT 0
80900: LESS
80901: IFFALSE 80913
// min_y := 0 else
80903: LD_ADDR_VAR 0 7
80907: PUSH
80908: LD_INT 0
80910: ST_TO_ADDR
80911: GO 80929
// min_y := y - r ;
80913: LD_ADDR_VAR 0 7
80917: PUSH
80918: LD_VAR 0 2
80922: PUSH
80923: LD_VAR 0 3
80927: MINUS
80928: ST_TO_ADDR
// max_x := x + r ;
80929: LD_ADDR_VAR 0 9
80933: PUSH
80934: LD_VAR 0 1
80938: PUSH
80939: LD_VAR 0 3
80943: PLUS
80944: ST_TO_ADDR
// max_y := y + r ;
80945: LD_ADDR_VAR 0 10
80949: PUSH
80950: LD_VAR 0 2
80954: PUSH
80955: LD_VAR 0 3
80959: PLUS
80960: ST_TO_ADDR
// for _x = min_x to max_x do
80961: LD_ADDR_VAR 0 5
80965: PUSH
80966: DOUBLE
80967: LD_VAR 0 8
80971: DEC
80972: ST_TO_ADDR
80973: LD_VAR 0 9
80977: PUSH
80978: FOR_TO
80979: IFFALSE 81080
// for _y = min_y to max_y do
80981: LD_ADDR_VAR 0 6
80985: PUSH
80986: DOUBLE
80987: LD_VAR 0 7
80991: DEC
80992: ST_TO_ADDR
80993: LD_VAR 0 10
80997: PUSH
80998: FOR_TO
80999: IFFALSE 81076
// begin if not ValidHex ( _x , _y ) then
81001: LD_VAR 0 5
81005: PPUSH
81006: LD_VAR 0 6
81010: PPUSH
81011: CALL_OW 488
81015: NOT
81016: IFFALSE 81020
// continue ;
81018: GO 80998
// if GetResourceTypeXY ( _x , _y ) then
81020: LD_VAR 0 5
81024: PPUSH
81025: LD_VAR 0 6
81029: PPUSH
81030: CALL_OW 283
81034: IFFALSE 81074
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81036: LD_ADDR_VAR 0 4
81040: PUSH
81041: LD_VAR 0 4
81045: PPUSH
81046: LD_VAR 0 4
81050: PUSH
81051: LD_INT 1
81053: PLUS
81054: PPUSH
81055: LD_VAR 0 5
81059: PUSH
81060: LD_VAR 0 6
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PPUSH
81069: CALL_OW 1
81073: ST_TO_ADDR
// end ;
81074: GO 80998
81076: POP
81077: POP
81078: GO 80978
81080: POP
81081: POP
// end ;
81082: LD_VAR 0 4
81086: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81087: LD_INT 0
81089: PPUSH
81090: PPUSH
81091: PPUSH
81092: PPUSH
81093: PPUSH
81094: PPUSH
81095: PPUSH
81096: PPUSH
// if not units then
81097: LD_VAR 0 1
81101: NOT
81102: IFFALSE 81106
// exit ;
81104: GO 81531
// result := UnitFilter ( units , [ f_ok ] ) ;
81106: LD_ADDR_VAR 0 3
81110: PUSH
81111: LD_VAR 0 1
81115: PPUSH
81116: LD_INT 50
81118: PUSH
81119: EMPTY
81120: LIST
81121: PPUSH
81122: CALL_OW 72
81126: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81127: LD_ADDR_VAR 0 8
81131: PUSH
81132: LD_VAR 0 1
81136: PUSH
81137: LD_INT 1
81139: ARRAY
81140: PPUSH
81141: CALL_OW 255
81145: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
81146: LD_ADDR_VAR 0 10
81150: PUSH
81151: LD_INT 29
81153: PUSH
81154: LD_EXP 125
81158: PUSH
81159: EMPTY
81160: LIST
81161: LIST
81162: ST_TO_ADDR
// if not result then
81163: LD_VAR 0 3
81167: NOT
81168: IFFALSE 81172
// exit ;
81170: GO 81531
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81172: LD_ADDR_VAR 0 5
81176: PUSH
81177: LD_INT 81
81179: PUSH
81180: LD_VAR 0 8
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: PPUSH
81189: CALL_OW 69
81193: ST_TO_ADDR
// for i in result do
81194: LD_ADDR_VAR 0 4
81198: PUSH
81199: LD_VAR 0 3
81203: PUSH
81204: FOR_IN
81205: IFFALSE 81529
// begin tag := GetTag ( i ) + 1 ;
81207: LD_ADDR_VAR 0 9
81211: PUSH
81212: LD_VAR 0 4
81216: PPUSH
81217: CALL_OW 110
81221: PUSH
81222: LD_INT 1
81224: PLUS
81225: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81226: LD_ADDR_VAR 0 7
81230: PUSH
81231: LD_VAR 0 4
81235: PPUSH
81236: CALL_OW 250
81240: PPUSH
81241: LD_VAR 0 4
81245: PPUSH
81246: CALL_OW 251
81250: PPUSH
81251: LD_INT 6
81253: PPUSH
81254: CALL 80829 0 3
81258: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81259: LD_VAR 0 7
81263: PUSH
81264: LD_VAR 0 4
81268: PPUSH
81269: CALL_OW 264
81273: PUSH
81274: LD_VAR 0 10
81278: IN
81279: NOT
81280: AND
81281: IFFALSE 81320
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81283: LD_VAR 0 4
81287: PPUSH
81288: LD_VAR 0 7
81292: PUSH
81293: LD_INT 1
81295: ARRAY
81296: PUSH
81297: LD_INT 1
81299: ARRAY
81300: PPUSH
81301: LD_VAR 0 7
81305: PUSH
81306: LD_INT 1
81308: ARRAY
81309: PUSH
81310: LD_INT 2
81312: ARRAY
81313: PPUSH
81314: CALL_OW 116
81318: GO 81527
// if path > tag then
81320: LD_VAR 0 2
81324: PUSH
81325: LD_VAR 0 9
81329: GREATER
81330: IFFALSE 81497
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
81332: LD_ADDR_VAR 0 6
81336: PUSH
81337: LD_VAR 0 5
81341: PPUSH
81342: LD_INT 91
81344: PUSH
81345: LD_VAR 0 4
81349: PUSH
81350: LD_INT 12
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: LIST
81357: PPUSH
81358: CALL_OW 72
81362: ST_TO_ADDR
// if nearEnemy then
81363: LD_VAR 0 6
81367: IFFALSE 81395
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81369: LD_VAR 0 4
81373: PPUSH
81374: LD_VAR 0 6
81378: PPUSH
81379: LD_VAR 0 4
81383: PPUSH
81384: CALL_OW 74
81388: PPUSH
81389: CALL_OW 115
81393: GO 81495
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81395: LD_VAR 0 4
81399: PPUSH
81400: LD_VAR 0 2
81404: PUSH
81405: LD_VAR 0 9
81409: ARRAY
81410: PUSH
81411: LD_INT 1
81413: ARRAY
81414: PPUSH
81415: LD_VAR 0 2
81419: PUSH
81420: LD_VAR 0 9
81424: ARRAY
81425: PUSH
81426: LD_INT 2
81428: ARRAY
81429: PPUSH
81430: CALL_OW 297
81434: PUSH
81435: LD_INT 6
81437: GREATER
81438: IFFALSE 81481
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81440: LD_VAR 0 4
81444: PPUSH
81445: LD_VAR 0 2
81449: PUSH
81450: LD_VAR 0 9
81454: ARRAY
81455: PUSH
81456: LD_INT 1
81458: ARRAY
81459: PPUSH
81460: LD_VAR 0 2
81464: PUSH
81465: LD_VAR 0 9
81469: ARRAY
81470: PUSH
81471: LD_INT 2
81473: ARRAY
81474: PPUSH
81475: CALL_OW 114
81479: GO 81495
// SetTag ( i , tag ) ;
81481: LD_VAR 0 4
81485: PPUSH
81486: LD_VAR 0 9
81490: PPUSH
81491: CALL_OW 109
// end else
81495: GO 81527
// if enemy then
81497: LD_VAR 0 5
81501: IFFALSE 81527
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81503: LD_VAR 0 4
81507: PPUSH
81508: LD_VAR 0 5
81512: PPUSH
81513: LD_VAR 0 4
81517: PPUSH
81518: CALL_OW 74
81522: PPUSH
81523: CALL_OW 115
// end ;
81527: GO 81204
81529: POP
81530: POP
// end ;
81531: LD_VAR 0 3
81535: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81536: LD_INT 0
81538: PPUSH
81539: PPUSH
81540: PPUSH
// if not unit or IsInUnit ( unit ) then
81541: LD_VAR 0 1
81545: NOT
81546: PUSH
81547: LD_VAR 0 1
81551: PPUSH
81552: CALL_OW 310
81556: OR
81557: IFFALSE 81561
// exit ;
81559: GO 81652
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81561: LD_ADDR_VAR 0 4
81565: PUSH
81566: LD_VAR 0 1
81570: PPUSH
81571: CALL_OW 250
81575: PPUSH
81576: LD_VAR 0 2
81580: PPUSH
81581: LD_INT 1
81583: PPUSH
81584: CALL_OW 272
81588: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81589: LD_ADDR_VAR 0 5
81593: PUSH
81594: LD_VAR 0 1
81598: PPUSH
81599: CALL_OW 251
81603: PPUSH
81604: LD_VAR 0 2
81608: PPUSH
81609: LD_INT 1
81611: PPUSH
81612: CALL_OW 273
81616: ST_TO_ADDR
// if ValidHex ( x , y ) then
81617: LD_VAR 0 4
81621: PPUSH
81622: LD_VAR 0 5
81626: PPUSH
81627: CALL_OW 488
81631: IFFALSE 81652
// ComTurnXY ( unit , x , y ) ;
81633: LD_VAR 0 1
81637: PPUSH
81638: LD_VAR 0 4
81642: PPUSH
81643: LD_VAR 0 5
81647: PPUSH
81648: CALL_OW 118
// end ;
81652: LD_VAR 0 3
81656: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81657: LD_INT 0
81659: PPUSH
81660: PPUSH
// result := false ;
81661: LD_ADDR_VAR 0 3
81665: PUSH
81666: LD_INT 0
81668: ST_TO_ADDR
// if not units then
81669: LD_VAR 0 2
81673: NOT
81674: IFFALSE 81678
// exit ;
81676: GO 81723
// for i in units do
81678: LD_ADDR_VAR 0 4
81682: PUSH
81683: LD_VAR 0 2
81687: PUSH
81688: FOR_IN
81689: IFFALSE 81721
// if See ( side , i ) then
81691: LD_VAR 0 1
81695: PPUSH
81696: LD_VAR 0 4
81700: PPUSH
81701: CALL_OW 292
81705: IFFALSE 81719
// begin result := true ;
81707: LD_ADDR_VAR 0 3
81711: PUSH
81712: LD_INT 1
81714: ST_TO_ADDR
// exit ;
81715: POP
81716: POP
81717: GO 81723
// end ;
81719: GO 81688
81721: POP
81722: POP
// end ;
81723: LD_VAR 0 3
81727: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81728: LD_INT 0
81730: PPUSH
81731: PPUSH
81732: PPUSH
81733: PPUSH
// if not unit or not points then
81734: LD_VAR 0 1
81738: NOT
81739: PUSH
81740: LD_VAR 0 2
81744: NOT
81745: OR
81746: IFFALSE 81750
// exit ;
81748: GO 81840
// dist := 99999 ;
81750: LD_ADDR_VAR 0 5
81754: PUSH
81755: LD_INT 99999
81757: ST_TO_ADDR
// for i in points do
81758: LD_ADDR_VAR 0 4
81762: PUSH
81763: LD_VAR 0 2
81767: PUSH
81768: FOR_IN
81769: IFFALSE 81838
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81771: LD_ADDR_VAR 0 6
81775: PUSH
81776: LD_VAR 0 1
81780: PPUSH
81781: LD_VAR 0 4
81785: PUSH
81786: LD_INT 1
81788: ARRAY
81789: PPUSH
81790: LD_VAR 0 4
81794: PUSH
81795: LD_INT 2
81797: ARRAY
81798: PPUSH
81799: CALL_OW 297
81803: ST_TO_ADDR
// if tmpDist < dist then
81804: LD_VAR 0 6
81808: PUSH
81809: LD_VAR 0 5
81813: LESS
81814: IFFALSE 81836
// begin result := i ;
81816: LD_ADDR_VAR 0 3
81820: PUSH
81821: LD_VAR 0 4
81825: ST_TO_ADDR
// dist := tmpDist ;
81826: LD_ADDR_VAR 0 5
81830: PUSH
81831: LD_VAR 0 6
81835: ST_TO_ADDR
// end ; end ;
81836: GO 81768
81838: POP
81839: POP
// end ; end_of_file
81840: LD_VAR 0 3
81844: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
81845: LD_INT 0
81847: PPUSH
// ar_miner := 81 ;
81848: LD_ADDR_EXP 128
81852: PUSH
81853: LD_INT 81
81855: ST_TO_ADDR
// ar_crane := 88 ;
81856: LD_ADDR_EXP 127
81860: PUSH
81861: LD_INT 88
81863: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
81864: LD_ADDR_EXP 122
81868: PUSH
81869: LD_INT 89
81871: ST_TO_ADDR
// us_hack := 99 ;
81872: LD_ADDR_EXP 123
81876: PUSH
81877: LD_INT 99
81879: ST_TO_ADDR
// us_artillery := 97 ;
81880: LD_ADDR_EXP 124
81884: PUSH
81885: LD_INT 97
81887: ST_TO_ADDR
// ar_bio_bomb := 91 ;
81888: LD_ADDR_EXP 125
81892: PUSH
81893: LD_INT 91
81895: ST_TO_ADDR
// ar_mortar := 92 ;
81896: LD_ADDR_EXP 126
81900: PUSH
81901: LD_INT 92
81903: ST_TO_ADDR
// ru_radar := 98 ;
81904: LD_ADDR_EXP 121
81908: PUSH
81909: LD_INT 98
81911: ST_TO_ADDR
// tech_Artillery := 80 ;
81912: LD_ADDR_EXP 129
81916: PUSH
81917: LD_INT 80
81919: ST_TO_ADDR
// tech_RadMat := 81 ;
81920: LD_ADDR_EXP 130
81924: PUSH
81925: LD_INT 81
81927: ST_TO_ADDR
// tech_BasicTools := 82 ;
81928: LD_ADDR_EXP 131
81932: PUSH
81933: LD_INT 82
81935: ST_TO_ADDR
// tech_Cargo := 83 ;
81936: LD_ADDR_EXP 132
81940: PUSH
81941: LD_INT 83
81943: ST_TO_ADDR
// tech_Track := 84 ;
81944: LD_ADDR_EXP 133
81948: PUSH
81949: LD_INT 84
81951: ST_TO_ADDR
// tech_Crane := 85 ;
81952: LD_ADDR_EXP 134
81956: PUSH
81957: LD_INT 85
81959: ST_TO_ADDR
// tech_Bulldozer := 86 ;
81960: LD_ADDR_EXP 135
81964: PUSH
81965: LD_INT 86
81967: ST_TO_ADDR
// tech_Hovercraft := 87 ;
81968: LD_ADDR_EXP 136
81972: PUSH
81973: LD_INT 87
81975: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
81976: LD_ADDR_EXP 137
81980: PUSH
81981: LD_INT 88
81983: ST_TO_ADDR
// class_mastodont := 31 ;
81984: LD_ADDR_EXP 138
81988: PUSH
81989: LD_INT 31
81991: ST_TO_ADDR
// class_horse := 21 ;
81992: LD_ADDR_EXP 139
81996: PUSH
81997: LD_INT 21
81999: ST_TO_ADDR
// end ;
82000: LD_VAR 0 1
82004: RET
// every 1 do
82005: GO 82007
82007: DISABLE
// InitGlobalVariables ; end_of_file
82008: CALL 81845 0 0
82012: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82013: LD_INT 0
82015: PPUSH
82016: PPUSH
82017: PPUSH
82018: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82019: LD_VAR 0 1
82023: PPUSH
82024: CALL_OW 264
82028: PUSH
82029: LD_EXP 125
82033: EQUAL
82034: IFFALSE 82106
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82036: LD_INT 68
82038: PPUSH
82039: LD_VAR 0 1
82043: PPUSH
82044: CALL_OW 255
82048: PPUSH
82049: CALL_OW 321
82053: PUSH
82054: LD_INT 2
82056: EQUAL
82057: IFFALSE 82069
// eff := 70 else
82059: LD_ADDR_VAR 0 4
82063: PUSH
82064: LD_INT 70
82066: ST_TO_ADDR
82067: GO 82077
// eff := 30 ;
82069: LD_ADDR_VAR 0 4
82073: PUSH
82074: LD_INT 30
82076: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82077: LD_VAR 0 1
82081: PPUSH
82082: CALL_OW 250
82086: PPUSH
82087: LD_VAR 0 1
82091: PPUSH
82092: CALL_OW 251
82096: PPUSH
82097: LD_VAR 0 4
82101: PPUSH
82102: CALL_OW 495
// end ; end ;
82106: LD_VAR 0 2
82110: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82111: LD_INT 0
82113: PPUSH
// end ;
82114: LD_VAR 0 4
82118: RET
// export function SOS_Command ( cmd ) ; begin
82119: LD_INT 0
82121: PPUSH
// end ;
82122: LD_VAR 0 2
82126: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
82127: LD_INT 0
82129: PPUSH
// end ;
82130: LD_VAR 0 6
82134: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82135: LD_INT 0
82137: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82138: LD_VAR 0 1
82142: PUSH
82143: LD_INT 250
82145: EQUAL
82146: PUSH
82147: LD_VAR 0 2
82151: PPUSH
82152: CALL_OW 264
82156: PUSH
82157: LD_EXP 128
82161: EQUAL
82162: AND
82163: IFFALSE 82184
// MinerPlaceMine ( unit , x , y ) ;
82165: LD_VAR 0 2
82169: PPUSH
82170: LD_VAR 0 4
82174: PPUSH
82175: LD_VAR 0 5
82179: PPUSH
82180: CALL 84533 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82184: LD_VAR 0 1
82188: PUSH
82189: LD_INT 251
82191: EQUAL
82192: PUSH
82193: LD_VAR 0 2
82197: PPUSH
82198: CALL_OW 264
82202: PUSH
82203: LD_EXP 128
82207: EQUAL
82208: AND
82209: IFFALSE 82230
// MinerDetonateMine ( unit , x , y ) ;
82211: LD_VAR 0 2
82215: PPUSH
82216: LD_VAR 0 4
82220: PPUSH
82221: LD_VAR 0 5
82225: PPUSH
82226: CALL 84810 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
82230: LD_VAR 0 1
82234: PUSH
82235: LD_INT 252
82237: EQUAL
82238: PUSH
82239: LD_VAR 0 2
82243: PPUSH
82244: CALL_OW 264
82248: PUSH
82249: LD_EXP 128
82253: EQUAL
82254: AND
82255: IFFALSE 82276
// MinerCreateMinefield ( unit , x , y ) ;
82257: LD_VAR 0 2
82261: PPUSH
82262: LD_VAR 0 4
82266: PPUSH
82267: LD_VAR 0 5
82271: PPUSH
82272: CALL 85227 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
82276: LD_VAR 0 1
82280: PUSH
82281: LD_INT 253
82283: EQUAL
82284: PUSH
82285: LD_VAR 0 2
82289: PPUSH
82290: CALL_OW 257
82294: PUSH
82295: LD_INT 5
82297: EQUAL
82298: AND
82299: IFFALSE 82320
// ComBinocular ( unit , x , y ) ;
82301: LD_VAR 0 2
82305: PPUSH
82306: LD_VAR 0 4
82310: PPUSH
82311: LD_VAR 0 5
82315: PPUSH
82316: CALL 85598 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
82320: LD_VAR 0 1
82324: PUSH
82325: LD_INT 254
82327: EQUAL
82328: PUSH
82329: LD_VAR 0 2
82333: PPUSH
82334: CALL_OW 264
82338: PUSH
82339: LD_EXP 123
82343: EQUAL
82344: AND
82345: PUSH
82346: LD_VAR 0 3
82350: PPUSH
82351: CALL_OW 263
82355: PUSH
82356: LD_INT 3
82358: EQUAL
82359: AND
82360: IFFALSE 82376
// HackDestroyVehicle ( unit , selectedUnit ) ;
82362: LD_VAR 0 2
82366: PPUSH
82367: LD_VAR 0 3
82371: PPUSH
82372: CALL 83893 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
82376: LD_VAR 0 1
82380: PUSH
82381: LD_INT 255
82383: EQUAL
82384: PUSH
82385: LD_VAR 0 2
82389: PPUSH
82390: CALL_OW 264
82394: PUSH
82395: LD_INT 14
82397: PUSH
82398: LD_INT 53
82400: PUSH
82401: EMPTY
82402: LIST
82403: LIST
82404: IN
82405: AND
82406: PUSH
82407: LD_VAR 0 4
82411: PPUSH
82412: LD_VAR 0 5
82416: PPUSH
82417: CALL_OW 488
82421: AND
82422: IFFALSE 82446
// CutTreeXYR ( unit , x , y , 12 ) ;
82424: LD_VAR 0 2
82428: PPUSH
82429: LD_VAR 0 4
82433: PPUSH
82434: LD_VAR 0 5
82438: PPUSH
82439: LD_INT 12
82441: PPUSH
82442: CALL 82459 0 4
// end ;
82446: LD_VAR 0 6
82450: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
82451: LD_INT 0
82453: PPUSH
// end ;
82454: LD_VAR 0 4
82458: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
82459: LD_INT 0
82461: PPUSH
82462: PPUSH
82463: PPUSH
82464: PPUSH
82465: PPUSH
82466: PPUSH
82467: PPUSH
82468: PPUSH
82469: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
82470: LD_VAR 0 1
82474: NOT
82475: PUSH
82476: LD_VAR 0 2
82480: PPUSH
82481: LD_VAR 0 3
82485: PPUSH
82486: CALL_OW 488
82490: NOT
82491: OR
82492: PUSH
82493: LD_VAR 0 4
82497: NOT
82498: OR
82499: IFFALSE 82503
// exit ;
82501: GO 82843
// list := [ ] ;
82503: LD_ADDR_VAR 0 13
82507: PUSH
82508: EMPTY
82509: ST_TO_ADDR
// if x - r < 0 then
82510: LD_VAR 0 2
82514: PUSH
82515: LD_VAR 0 4
82519: MINUS
82520: PUSH
82521: LD_INT 0
82523: LESS
82524: IFFALSE 82536
// min_x := 0 else
82526: LD_ADDR_VAR 0 7
82530: PUSH
82531: LD_INT 0
82533: ST_TO_ADDR
82534: GO 82552
// min_x := x - r ;
82536: LD_ADDR_VAR 0 7
82540: PUSH
82541: LD_VAR 0 2
82545: PUSH
82546: LD_VAR 0 4
82550: MINUS
82551: ST_TO_ADDR
// if y - r < 0 then
82552: LD_VAR 0 3
82556: PUSH
82557: LD_VAR 0 4
82561: MINUS
82562: PUSH
82563: LD_INT 0
82565: LESS
82566: IFFALSE 82578
// min_y := 0 else
82568: LD_ADDR_VAR 0 8
82572: PUSH
82573: LD_INT 0
82575: ST_TO_ADDR
82576: GO 82594
// min_y := y - r ;
82578: LD_ADDR_VAR 0 8
82582: PUSH
82583: LD_VAR 0 3
82587: PUSH
82588: LD_VAR 0 4
82592: MINUS
82593: ST_TO_ADDR
// max_x := x + r ;
82594: LD_ADDR_VAR 0 9
82598: PUSH
82599: LD_VAR 0 2
82603: PUSH
82604: LD_VAR 0 4
82608: PLUS
82609: ST_TO_ADDR
// max_y := y + r ;
82610: LD_ADDR_VAR 0 10
82614: PUSH
82615: LD_VAR 0 3
82619: PUSH
82620: LD_VAR 0 4
82624: PLUS
82625: ST_TO_ADDR
// for _x = min_x to max_x do
82626: LD_ADDR_VAR 0 11
82630: PUSH
82631: DOUBLE
82632: LD_VAR 0 7
82636: DEC
82637: ST_TO_ADDR
82638: LD_VAR 0 9
82642: PUSH
82643: FOR_TO
82644: IFFALSE 82761
// for _y = min_y to max_y do
82646: LD_ADDR_VAR 0 12
82650: PUSH
82651: DOUBLE
82652: LD_VAR 0 8
82656: DEC
82657: ST_TO_ADDR
82658: LD_VAR 0 10
82662: PUSH
82663: FOR_TO
82664: IFFALSE 82757
// begin if not ValidHex ( _x , _y ) then
82666: LD_VAR 0 11
82670: PPUSH
82671: LD_VAR 0 12
82675: PPUSH
82676: CALL_OW 488
82680: NOT
82681: IFFALSE 82685
// continue ;
82683: GO 82663
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
82685: LD_VAR 0 11
82689: PPUSH
82690: LD_VAR 0 12
82694: PPUSH
82695: CALL_OW 351
82699: PUSH
82700: LD_VAR 0 11
82704: PPUSH
82705: LD_VAR 0 12
82709: PPUSH
82710: CALL_OW 554
82714: AND
82715: IFFALSE 82755
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
82717: LD_ADDR_VAR 0 13
82721: PUSH
82722: LD_VAR 0 13
82726: PPUSH
82727: LD_VAR 0 13
82731: PUSH
82732: LD_INT 1
82734: PLUS
82735: PPUSH
82736: LD_VAR 0 11
82740: PUSH
82741: LD_VAR 0 12
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PPUSH
82750: CALL_OW 2
82754: ST_TO_ADDR
// end ;
82755: GO 82663
82757: POP
82758: POP
82759: GO 82643
82761: POP
82762: POP
// if not list then
82763: LD_VAR 0 13
82767: NOT
82768: IFFALSE 82772
// exit ;
82770: GO 82843
// for i in list do
82772: LD_ADDR_VAR 0 6
82776: PUSH
82777: LD_VAR 0 13
82781: PUSH
82782: FOR_IN
82783: IFFALSE 82841
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
82785: LD_VAR 0 1
82789: PPUSH
82790: LD_STRING M
82792: PUSH
82793: LD_VAR 0 6
82797: PUSH
82798: LD_INT 1
82800: ARRAY
82801: PUSH
82802: LD_VAR 0 6
82806: PUSH
82807: LD_INT 2
82809: ARRAY
82810: PUSH
82811: LD_INT 0
82813: PUSH
82814: LD_INT 0
82816: PUSH
82817: LD_INT 0
82819: PUSH
82820: LD_INT 0
82822: PUSH
82823: EMPTY
82824: LIST
82825: LIST
82826: LIST
82827: LIST
82828: LIST
82829: LIST
82830: LIST
82831: PUSH
82832: EMPTY
82833: LIST
82834: PPUSH
82835: CALL_OW 447
82839: GO 82782
82841: POP
82842: POP
// end ;
82843: LD_VAR 0 5
82847: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
82848: LD_EXP 142
82852: NOT
82853: IFFALSE 82903
82855: GO 82857
82857: DISABLE
// begin initHack := true ;
82858: LD_ADDR_EXP 142
82862: PUSH
82863: LD_INT 1
82865: ST_TO_ADDR
// hackTanks := [ ] ;
82866: LD_ADDR_EXP 143
82870: PUSH
82871: EMPTY
82872: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
82873: LD_ADDR_EXP 144
82877: PUSH
82878: EMPTY
82879: ST_TO_ADDR
// hackLimit := 3 ;
82880: LD_ADDR_EXP 145
82884: PUSH
82885: LD_INT 3
82887: ST_TO_ADDR
// hackDist := 12 ;
82888: LD_ADDR_EXP 146
82892: PUSH
82893: LD_INT 12
82895: ST_TO_ADDR
// hackCounter := [ ] ;
82896: LD_ADDR_EXP 147
82900: PUSH
82901: EMPTY
82902: ST_TO_ADDR
// end ;
82903: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
82904: LD_EXP 142
82908: PUSH
82909: LD_INT 34
82911: PUSH
82912: LD_EXP 123
82916: PUSH
82917: EMPTY
82918: LIST
82919: LIST
82920: PPUSH
82921: CALL_OW 69
82925: AND
82926: IFFALSE 83181
82928: GO 82930
82930: DISABLE
82931: LD_INT 0
82933: PPUSH
82934: PPUSH
// begin enable ;
82935: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
82936: LD_ADDR_VAR 0 1
82940: PUSH
82941: LD_INT 34
82943: PUSH
82944: LD_EXP 123
82948: PUSH
82949: EMPTY
82950: LIST
82951: LIST
82952: PPUSH
82953: CALL_OW 69
82957: PUSH
82958: FOR_IN
82959: IFFALSE 83179
// begin if not i in hackTanks then
82961: LD_VAR 0 1
82965: PUSH
82966: LD_EXP 143
82970: IN
82971: NOT
82972: IFFALSE 83055
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
82974: LD_ADDR_EXP 143
82978: PUSH
82979: LD_EXP 143
82983: PPUSH
82984: LD_EXP 143
82988: PUSH
82989: LD_INT 1
82991: PLUS
82992: PPUSH
82993: LD_VAR 0 1
82997: PPUSH
82998: CALL_OW 1
83002: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83003: LD_ADDR_EXP 144
83007: PUSH
83008: LD_EXP 144
83012: PPUSH
83013: LD_EXP 144
83017: PUSH
83018: LD_INT 1
83020: PLUS
83021: PPUSH
83022: EMPTY
83023: PPUSH
83024: CALL_OW 1
83028: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83029: LD_ADDR_EXP 147
83033: PUSH
83034: LD_EXP 147
83038: PPUSH
83039: LD_EXP 147
83043: PUSH
83044: LD_INT 1
83046: PLUS
83047: PPUSH
83048: EMPTY
83049: PPUSH
83050: CALL_OW 1
83054: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83055: LD_VAR 0 1
83059: PPUSH
83060: CALL_OW 302
83064: NOT
83065: IFFALSE 83078
// begin HackUnlinkAll ( i ) ;
83067: LD_VAR 0 1
83071: PPUSH
83072: CALL 83184 0 1
// continue ;
83076: GO 82958
// end ; HackCheckCapturedStatus ( i ) ;
83078: LD_VAR 0 1
83082: PPUSH
83083: CALL 83627 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83087: LD_ADDR_VAR 0 2
83091: PUSH
83092: LD_INT 81
83094: PUSH
83095: LD_VAR 0 1
83099: PPUSH
83100: CALL_OW 255
83104: PUSH
83105: EMPTY
83106: LIST
83107: LIST
83108: PUSH
83109: LD_INT 33
83111: PUSH
83112: LD_INT 3
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: PUSH
83119: LD_INT 91
83121: PUSH
83122: LD_VAR 0 1
83126: PUSH
83127: LD_EXP 146
83131: PUSH
83132: EMPTY
83133: LIST
83134: LIST
83135: LIST
83136: PUSH
83137: LD_INT 50
83139: PUSH
83140: EMPTY
83141: LIST
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: LIST
83147: LIST
83148: PPUSH
83149: CALL_OW 69
83153: ST_TO_ADDR
// if not tmp then
83154: LD_VAR 0 2
83158: NOT
83159: IFFALSE 83163
// continue ;
83161: GO 82958
// HackLink ( i , tmp ) ;
83163: LD_VAR 0 1
83167: PPUSH
83168: LD_VAR 0 2
83172: PPUSH
83173: CALL 83320 0 2
// end ;
83177: GO 82958
83179: POP
83180: POP
// end ;
83181: PPOPN 2
83183: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83184: LD_INT 0
83186: PPUSH
83187: PPUSH
83188: PPUSH
// if not hack in hackTanks then
83189: LD_VAR 0 1
83193: PUSH
83194: LD_EXP 143
83198: IN
83199: NOT
83200: IFFALSE 83204
// exit ;
83202: GO 83315
// index := GetElementIndex ( hackTanks , hack ) ;
83204: LD_ADDR_VAR 0 4
83208: PUSH
83209: LD_EXP 143
83213: PPUSH
83214: LD_VAR 0 1
83218: PPUSH
83219: CALL 46525 0 2
83223: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
83224: LD_EXP 144
83228: PUSH
83229: LD_VAR 0 4
83233: ARRAY
83234: IFFALSE 83315
// begin for i in hackTanksCaptured [ index ] do
83236: LD_ADDR_VAR 0 3
83240: PUSH
83241: LD_EXP 144
83245: PUSH
83246: LD_VAR 0 4
83250: ARRAY
83251: PUSH
83252: FOR_IN
83253: IFFALSE 83279
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
83255: LD_VAR 0 3
83259: PUSH
83260: LD_INT 1
83262: ARRAY
83263: PPUSH
83264: LD_VAR 0 3
83268: PUSH
83269: LD_INT 2
83271: ARRAY
83272: PPUSH
83273: CALL_OW 235
83277: GO 83252
83279: POP
83280: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
83281: LD_ADDR_EXP 144
83285: PUSH
83286: LD_EXP 144
83290: PPUSH
83291: LD_VAR 0 4
83295: PPUSH
83296: EMPTY
83297: PPUSH
83298: CALL_OW 1
83302: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
83303: LD_VAR 0 1
83307: PPUSH
83308: LD_INT 0
83310: PPUSH
83311: CALL_OW 505
// end ; end ;
83315: LD_VAR 0 2
83319: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
83320: LD_INT 0
83322: PPUSH
83323: PPUSH
83324: PPUSH
// if not hack in hackTanks or not vehicles then
83325: LD_VAR 0 1
83329: PUSH
83330: LD_EXP 143
83334: IN
83335: NOT
83336: PUSH
83337: LD_VAR 0 2
83341: NOT
83342: OR
83343: IFFALSE 83347
// exit ;
83345: GO 83622
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
83347: LD_ADDR_VAR 0 2
83351: PUSH
83352: LD_VAR 0 1
83356: PPUSH
83357: LD_VAR 0 2
83361: PPUSH
83362: LD_INT 1
83364: PPUSH
83365: LD_INT 1
83367: PPUSH
83368: CALL 47175 0 4
83372: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
83373: LD_ADDR_VAR 0 5
83377: PUSH
83378: LD_EXP 143
83382: PPUSH
83383: LD_VAR 0 1
83387: PPUSH
83388: CALL 46525 0 2
83392: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
83393: LD_EXP 144
83397: PUSH
83398: LD_VAR 0 5
83402: ARRAY
83403: PUSH
83404: LD_EXP 145
83408: LESS
83409: IFFALSE 83598
// begin for i := 1 to vehicles do
83411: LD_ADDR_VAR 0 4
83415: PUSH
83416: DOUBLE
83417: LD_INT 1
83419: DEC
83420: ST_TO_ADDR
83421: LD_VAR 0 2
83425: PUSH
83426: FOR_TO
83427: IFFALSE 83596
// begin if hackTanksCaptured [ index ] = hackLimit then
83429: LD_EXP 144
83433: PUSH
83434: LD_VAR 0 5
83438: ARRAY
83439: PUSH
83440: LD_EXP 145
83444: EQUAL
83445: IFFALSE 83449
// break ;
83447: GO 83596
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
83449: LD_ADDR_EXP 147
83453: PUSH
83454: LD_EXP 147
83458: PPUSH
83459: LD_VAR 0 5
83463: PPUSH
83464: LD_EXP 147
83468: PUSH
83469: LD_VAR 0 5
83473: ARRAY
83474: PUSH
83475: LD_INT 1
83477: PLUS
83478: PPUSH
83479: CALL_OW 1
83483: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
83484: LD_ADDR_EXP 144
83488: PUSH
83489: LD_EXP 144
83493: PPUSH
83494: LD_VAR 0 5
83498: PUSH
83499: LD_EXP 144
83503: PUSH
83504: LD_VAR 0 5
83508: ARRAY
83509: PUSH
83510: LD_INT 1
83512: PLUS
83513: PUSH
83514: EMPTY
83515: LIST
83516: LIST
83517: PPUSH
83518: LD_VAR 0 2
83522: PUSH
83523: LD_VAR 0 4
83527: ARRAY
83528: PUSH
83529: LD_VAR 0 2
83533: PUSH
83534: LD_VAR 0 4
83538: ARRAY
83539: PPUSH
83540: CALL_OW 255
83544: PUSH
83545: EMPTY
83546: LIST
83547: LIST
83548: PPUSH
83549: CALL 46740 0 3
83553: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
83554: LD_VAR 0 2
83558: PUSH
83559: LD_VAR 0 4
83563: ARRAY
83564: PPUSH
83565: LD_VAR 0 1
83569: PPUSH
83570: CALL_OW 255
83574: PPUSH
83575: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
83579: LD_VAR 0 2
83583: PUSH
83584: LD_VAR 0 4
83588: ARRAY
83589: PPUSH
83590: CALL_OW 141
// end ;
83594: GO 83426
83596: POP
83597: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83598: LD_VAR 0 1
83602: PPUSH
83603: LD_EXP 144
83607: PUSH
83608: LD_VAR 0 5
83612: ARRAY
83613: PUSH
83614: LD_INT 0
83616: PLUS
83617: PPUSH
83618: CALL_OW 505
// end ;
83622: LD_VAR 0 3
83626: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
83627: LD_INT 0
83629: PPUSH
83630: PPUSH
83631: PPUSH
83632: PPUSH
// if not hack in hackTanks then
83633: LD_VAR 0 1
83637: PUSH
83638: LD_EXP 143
83642: IN
83643: NOT
83644: IFFALSE 83648
// exit ;
83646: GO 83888
// index := GetElementIndex ( hackTanks , hack ) ;
83648: LD_ADDR_VAR 0 4
83652: PUSH
83653: LD_EXP 143
83657: PPUSH
83658: LD_VAR 0 1
83662: PPUSH
83663: CALL 46525 0 2
83667: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
83668: LD_ADDR_VAR 0 3
83672: PUSH
83673: DOUBLE
83674: LD_EXP 144
83678: PUSH
83679: LD_VAR 0 4
83683: ARRAY
83684: INC
83685: ST_TO_ADDR
83686: LD_INT 1
83688: PUSH
83689: FOR_DOWNTO
83690: IFFALSE 83862
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
83692: LD_ADDR_VAR 0 5
83696: PUSH
83697: LD_EXP 144
83701: PUSH
83702: LD_VAR 0 4
83706: ARRAY
83707: PUSH
83708: LD_VAR 0 3
83712: ARRAY
83713: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
83714: LD_VAR 0 5
83718: PUSH
83719: LD_INT 1
83721: ARRAY
83722: PPUSH
83723: CALL_OW 302
83727: NOT
83728: PUSH
83729: LD_VAR 0 5
83733: PUSH
83734: LD_INT 1
83736: ARRAY
83737: PPUSH
83738: CALL_OW 255
83742: PUSH
83743: LD_VAR 0 1
83747: PPUSH
83748: CALL_OW 255
83752: NONEQUAL
83753: OR
83754: IFFALSE 83860
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
83756: LD_VAR 0 5
83760: PUSH
83761: LD_INT 1
83763: ARRAY
83764: PPUSH
83765: CALL_OW 305
83769: PUSH
83770: LD_VAR 0 5
83774: PUSH
83775: LD_INT 1
83777: ARRAY
83778: PPUSH
83779: CALL_OW 255
83783: PUSH
83784: LD_VAR 0 1
83788: PPUSH
83789: CALL_OW 255
83793: EQUAL
83794: AND
83795: IFFALSE 83819
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
83797: LD_VAR 0 5
83801: PUSH
83802: LD_INT 1
83804: ARRAY
83805: PPUSH
83806: LD_VAR 0 5
83810: PUSH
83811: LD_INT 2
83813: ARRAY
83814: PPUSH
83815: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
83819: LD_ADDR_EXP 144
83823: PUSH
83824: LD_EXP 144
83828: PPUSH
83829: LD_VAR 0 4
83833: PPUSH
83834: LD_EXP 144
83838: PUSH
83839: LD_VAR 0 4
83843: ARRAY
83844: PPUSH
83845: LD_VAR 0 3
83849: PPUSH
83850: CALL_OW 3
83854: PPUSH
83855: CALL_OW 1
83859: ST_TO_ADDR
// end ; end ;
83860: GO 83689
83862: POP
83863: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83864: LD_VAR 0 1
83868: PPUSH
83869: LD_EXP 144
83873: PUSH
83874: LD_VAR 0 4
83878: ARRAY
83879: PUSH
83880: LD_INT 0
83882: PLUS
83883: PPUSH
83884: CALL_OW 505
// end ;
83888: LD_VAR 0 2
83892: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
83893: LD_INT 0
83895: PPUSH
83896: PPUSH
83897: PPUSH
83898: PPUSH
// if not hack in hackTanks then
83899: LD_VAR 0 1
83903: PUSH
83904: LD_EXP 143
83908: IN
83909: NOT
83910: IFFALSE 83914
// exit ;
83912: GO 83999
// index := GetElementIndex ( hackTanks , hack ) ;
83914: LD_ADDR_VAR 0 5
83918: PUSH
83919: LD_EXP 143
83923: PPUSH
83924: LD_VAR 0 1
83928: PPUSH
83929: CALL 46525 0 2
83933: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
83934: LD_ADDR_VAR 0 4
83938: PUSH
83939: DOUBLE
83940: LD_INT 1
83942: DEC
83943: ST_TO_ADDR
83944: LD_EXP 144
83948: PUSH
83949: LD_VAR 0 5
83953: ARRAY
83954: PUSH
83955: FOR_TO
83956: IFFALSE 83997
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
83958: LD_EXP 144
83962: PUSH
83963: LD_VAR 0 5
83967: ARRAY
83968: PUSH
83969: LD_VAR 0 4
83973: ARRAY
83974: PUSH
83975: LD_INT 1
83977: ARRAY
83978: PUSH
83979: LD_VAR 0 2
83983: EQUAL
83984: IFFALSE 83995
// KillUnit ( vehicle ) ;
83986: LD_VAR 0 2
83990: PPUSH
83991: CALL_OW 66
83995: GO 83955
83997: POP
83998: POP
// end ;
83999: LD_VAR 0 3
84003: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
84004: LD_EXP 148
84008: NOT
84009: IFFALSE 84044
84011: GO 84013
84013: DISABLE
// begin initMiner := true ;
84014: LD_ADDR_EXP 148
84018: PUSH
84019: LD_INT 1
84021: ST_TO_ADDR
// minersList := [ ] ;
84022: LD_ADDR_EXP 149
84026: PUSH
84027: EMPTY
84028: ST_TO_ADDR
// minerMinesList := [ ] ;
84029: LD_ADDR_EXP 150
84033: PUSH
84034: EMPTY
84035: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
84036: LD_ADDR_EXP 151
84040: PUSH
84041: LD_INT 5
84043: ST_TO_ADDR
// end ;
84044: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
84045: LD_EXP 148
84049: PUSH
84050: LD_INT 34
84052: PUSH
84053: LD_EXP 128
84057: PUSH
84058: EMPTY
84059: LIST
84060: LIST
84061: PPUSH
84062: CALL_OW 69
84066: AND
84067: IFFALSE 84530
84069: GO 84071
84071: DISABLE
84072: LD_INT 0
84074: PPUSH
84075: PPUSH
84076: PPUSH
84077: PPUSH
// begin enable ;
84078: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84079: LD_ADDR_VAR 0 1
84083: PUSH
84084: LD_INT 34
84086: PUSH
84087: LD_EXP 128
84091: PUSH
84092: EMPTY
84093: LIST
84094: LIST
84095: PPUSH
84096: CALL_OW 69
84100: PUSH
84101: FOR_IN
84102: IFFALSE 84174
// begin if not i in minersList then
84104: LD_VAR 0 1
84108: PUSH
84109: LD_EXP 149
84113: IN
84114: NOT
84115: IFFALSE 84172
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84117: LD_ADDR_EXP 149
84121: PUSH
84122: LD_EXP 149
84126: PPUSH
84127: LD_EXP 149
84131: PUSH
84132: LD_INT 1
84134: PLUS
84135: PPUSH
84136: LD_VAR 0 1
84140: PPUSH
84141: CALL_OW 1
84145: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84146: LD_ADDR_EXP 150
84150: PUSH
84151: LD_EXP 150
84155: PPUSH
84156: LD_EXP 150
84160: PUSH
84161: LD_INT 1
84163: PLUS
84164: PPUSH
84165: EMPTY
84166: PPUSH
84167: CALL_OW 1
84171: ST_TO_ADDR
// end end ;
84172: GO 84101
84174: POP
84175: POP
// for i := minerMinesList downto 1 do
84176: LD_ADDR_VAR 0 1
84180: PUSH
84181: DOUBLE
84182: LD_EXP 150
84186: INC
84187: ST_TO_ADDR
84188: LD_INT 1
84190: PUSH
84191: FOR_DOWNTO
84192: IFFALSE 84528
// begin if IsLive ( minersList [ i ] ) then
84194: LD_EXP 149
84198: PUSH
84199: LD_VAR 0 1
84203: ARRAY
84204: PPUSH
84205: CALL_OW 300
84209: IFFALSE 84237
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
84211: LD_EXP 149
84215: PUSH
84216: LD_VAR 0 1
84220: ARRAY
84221: PPUSH
84222: LD_EXP 150
84226: PUSH
84227: LD_VAR 0 1
84231: ARRAY
84232: PPUSH
84233: CALL_OW 505
// if not minerMinesList [ i ] then
84237: LD_EXP 150
84241: PUSH
84242: LD_VAR 0 1
84246: ARRAY
84247: NOT
84248: IFFALSE 84252
// continue ;
84250: GO 84191
// for j := minerMinesList [ i ] downto 1 do
84252: LD_ADDR_VAR 0 2
84256: PUSH
84257: DOUBLE
84258: LD_EXP 150
84262: PUSH
84263: LD_VAR 0 1
84267: ARRAY
84268: INC
84269: ST_TO_ADDR
84270: LD_INT 1
84272: PUSH
84273: FOR_DOWNTO
84274: IFFALSE 84524
// begin side := GetSide ( minersList [ i ] ) ;
84276: LD_ADDR_VAR 0 3
84280: PUSH
84281: LD_EXP 149
84285: PUSH
84286: LD_VAR 0 1
84290: ARRAY
84291: PPUSH
84292: CALL_OW 255
84296: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
84297: LD_ADDR_VAR 0 4
84301: PUSH
84302: LD_EXP 150
84306: PUSH
84307: LD_VAR 0 1
84311: ARRAY
84312: PUSH
84313: LD_VAR 0 2
84317: ARRAY
84318: PUSH
84319: LD_INT 1
84321: ARRAY
84322: PPUSH
84323: LD_EXP 150
84327: PUSH
84328: LD_VAR 0 1
84332: ARRAY
84333: PUSH
84334: LD_VAR 0 2
84338: ARRAY
84339: PUSH
84340: LD_INT 2
84342: ARRAY
84343: PPUSH
84344: CALL_OW 428
84348: ST_TO_ADDR
// if not tmp then
84349: LD_VAR 0 4
84353: NOT
84354: IFFALSE 84358
// continue ;
84356: GO 84273
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
84358: LD_VAR 0 4
84362: PUSH
84363: LD_INT 81
84365: PUSH
84366: LD_VAR 0 3
84370: PUSH
84371: EMPTY
84372: LIST
84373: LIST
84374: PPUSH
84375: CALL_OW 69
84379: IN
84380: PUSH
84381: LD_EXP 150
84385: PUSH
84386: LD_VAR 0 1
84390: ARRAY
84391: PUSH
84392: LD_VAR 0 2
84396: ARRAY
84397: PUSH
84398: LD_INT 1
84400: ARRAY
84401: PPUSH
84402: LD_EXP 150
84406: PUSH
84407: LD_VAR 0 1
84411: ARRAY
84412: PUSH
84413: LD_VAR 0 2
84417: ARRAY
84418: PUSH
84419: LD_INT 2
84421: ARRAY
84422: PPUSH
84423: CALL_OW 458
84427: AND
84428: IFFALSE 84522
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
84430: LD_EXP 150
84434: PUSH
84435: LD_VAR 0 1
84439: ARRAY
84440: PUSH
84441: LD_VAR 0 2
84445: ARRAY
84446: PUSH
84447: LD_INT 1
84449: ARRAY
84450: PPUSH
84451: LD_EXP 150
84455: PUSH
84456: LD_VAR 0 1
84460: ARRAY
84461: PUSH
84462: LD_VAR 0 2
84466: ARRAY
84467: PUSH
84468: LD_INT 2
84470: ARRAY
84471: PPUSH
84472: LD_VAR 0 3
84476: PPUSH
84477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
84481: LD_ADDR_EXP 150
84485: PUSH
84486: LD_EXP 150
84490: PPUSH
84491: LD_VAR 0 1
84495: PPUSH
84496: LD_EXP 150
84500: PUSH
84501: LD_VAR 0 1
84505: ARRAY
84506: PPUSH
84507: LD_VAR 0 2
84511: PPUSH
84512: CALL_OW 3
84516: PPUSH
84517: CALL_OW 1
84521: ST_TO_ADDR
// end ; end ;
84522: GO 84273
84524: POP
84525: POP
// end ;
84526: GO 84191
84528: POP
84529: POP
// end ;
84530: PPOPN 4
84532: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
84533: LD_INT 0
84535: PPUSH
84536: PPUSH
// result := false ;
84537: LD_ADDR_VAR 0 4
84541: PUSH
84542: LD_INT 0
84544: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
84545: LD_VAR 0 1
84549: PPUSH
84550: CALL_OW 264
84554: PUSH
84555: LD_EXP 128
84559: EQUAL
84560: NOT
84561: IFFALSE 84565
// exit ;
84563: GO 84805
// index := GetElementIndex ( minersList , unit ) ;
84565: LD_ADDR_VAR 0 5
84569: PUSH
84570: LD_EXP 149
84574: PPUSH
84575: LD_VAR 0 1
84579: PPUSH
84580: CALL 46525 0 2
84584: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
84585: LD_EXP 150
84589: PUSH
84590: LD_VAR 0 5
84594: ARRAY
84595: PUSH
84596: LD_EXP 151
84600: GREATEREQUAL
84601: IFFALSE 84605
// exit ;
84603: GO 84805
// ComMoveXY ( unit , x , y ) ;
84605: LD_VAR 0 1
84609: PPUSH
84610: LD_VAR 0 2
84614: PPUSH
84615: LD_VAR 0 3
84619: PPUSH
84620: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84624: LD_INT 35
84626: PPUSH
84627: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
84631: LD_VAR 0 1
84635: PPUSH
84636: LD_VAR 0 2
84640: PPUSH
84641: LD_VAR 0 3
84645: PPUSH
84646: CALL 77297 0 3
84650: NOT
84651: PUSH
84652: LD_VAR 0 1
84656: PPUSH
84657: CALL_OW 314
84661: AND
84662: IFFALSE 84666
// exit ;
84664: GO 84805
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
84666: LD_VAR 0 2
84670: PPUSH
84671: LD_VAR 0 3
84675: PPUSH
84676: CALL_OW 428
84680: PUSH
84681: LD_VAR 0 1
84685: EQUAL
84686: PUSH
84687: LD_VAR 0 1
84691: PPUSH
84692: CALL_OW 314
84696: NOT
84697: AND
84698: IFFALSE 84624
// PlaySoundXY ( x , y , PlantMine ) ;
84700: LD_VAR 0 2
84704: PPUSH
84705: LD_VAR 0 3
84709: PPUSH
84710: LD_STRING PlantMine
84712: PPUSH
84713: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
84717: LD_VAR 0 2
84721: PPUSH
84722: LD_VAR 0 3
84726: PPUSH
84727: LD_VAR 0 1
84731: PPUSH
84732: CALL_OW 255
84736: PPUSH
84737: LD_INT 0
84739: PPUSH
84740: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
84744: LD_ADDR_EXP 150
84748: PUSH
84749: LD_EXP 150
84753: PPUSH
84754: LD_VAR 0 5
84758: PUSH
84759: LD_EXP 150
84763: PUSH
84764: LD_VAR 0 5
84768: ARRAY
84769: PUSH
84770: LD_INT 1
84772: PLUS
84773: PUSH
84774: EMPTY
84775: LIST
84776: LIST
84777: PPUSH
84778: LD_VAR 0 2
84782: PUSH
84783: LD_VAR 0 3
84787: PUSH
84788: EMPTY
84789: LIST
84790: LIST
84791: PPUSH
84792: CALL 46740 0 3
84796: ST_TO_ADDR
// result := true ;
84797: LD_ADDR_VAR 0 4
84801: PUSH
84802: LD_INT 1
84804: ST_TO_ADDR
// end ;
84805: LD_VAR 0 4
84809: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
84810: LD_INT 0
84812: PPUSH
84813: PPUSH
84814: PPUSH
// if not unit in minersList then
84815: LD_VAR 0 1
84819: PUSH
84820: LD_EXP 149
84824: IN
84825: NOT
84826: IFFALSE 84830
// exit ;
84828: GO 85222
// index := GetElementIndex ( minersList , unit ) ;
84830: LD_ADDR_VAR 0 6
84834: PUSH
84835: LD_EXP 149
84839: PPUSH
84840: LD_VAR 0 1
84844: PPUSH
84845: CALL 46525 0 2
84849: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
84850: LD_ADDR_VAR 0 5
84854: PUSH
84855: DOUBLE
84856: LD_EXP 150
84860: PUSH
84861: LD_VAR 0 6
84865: ARRAY
84866: INC
84867: ST_TO_ADDR
84868: LD_INT 1
84870: PUSH
84871: FOR_DOWNTO
84872: IFFALSE 85033
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
84874: LD_EXP 150
84878: PUSH
84879: LD_VAR 0 6
84883: ARRAY
84884: PUSH
84885: LD_VAR 0 5
84889: ARRAY
84890: PUSH
84891: LD_INT 1
84893: ARRAY
84894: PUSH
84895: LD_VAR 0 2
84899: EQUAL
84900: PUSH
84901: LD_EXP 150
84905: PUSH
84906: LD_VAR 0 6
84910: ARRAY
84911: PUSH
84912: LD_VAR 0 5
84916: ARRAY
84917: PUSH
84918: LD_INT 2
84920: ARRAY
84921: PUSH
84922: LD_VAR 0 3
84926: EQUAL
84927: AND
84928: IFFALSE 85031
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84930: LD_EXP 150
84934: PUSH
84935: LD_VAR 0 6
84939: ARRAY
84940: PUSH
84941: LD_VAR 0 5
84945: ARRAY
84946: PUSH
84947: LD_INT 1
84949: ARRAY
84950: PPUSH
84951: LD_EXP 150
84955: PUSH
84956: LD_VAR 0 6
84960: ARRAY
84961: PUSH
84962: LD_VAR 0 5
84966: ARRAY
84967: PUSH
84968: LD_INT 2
84970: ARRAY
84971: PPUSH
84972: LD_VAR 0 1
84976: PPUSH
84977: CALL_OW 255
84981: PPUSH
84982: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84986: LD_ADDR_EXP 150
84990: PUSH
84991: LD_EXP 150
84995: PPUSH
84996: LD_VAR 0 6
85000: PPUSH
85001: LD_EXP 150
85005: PUSH
85006: LD_VAR 0 6
85010: ARRAY
85011: PPUSH
85012: LD_VAR 0 5
85016: PPUSH
85017: CALL_OW 3
85021: PPUSH
85022: CALL_OW 1
85026: ST_TO_ADDR
// exit ;
85027: POP
85028: POP
85029: GO 85222
// end ; end ;
85031: GO 84871
85033: POP
85034: POP
// for i := minerMinesList [ index ] downto 1 do
85035: LD_ADDR_VAR 0 5
85039: PUSH
85040: DOUBLE
85041: LD_EXP 150
85045: PUSH
85046: LD_VAR 0 6
85050: ARRAY
85051: INC
85052: ST_TO_ADDR
85053: LD_INT 1
85055: PUSH
85056: FOR_DOWNTO
85057: IFFALSE 85220
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85059: LD_EXP 150
85063: PUSH
85064: LD_VAR 0 6
85068: ARRAY
85069: PUSH
85070: LD_VAR 0 5
85074: ARRAY
85075: PUSH
85076: LD_INT 1
85078: ARRAY
85079: PPUSH
85080: LD_EXP 150
85084: PUSH
85085: LD_VAR 0 6
85089: ARRAY
85090: PUSH
85091: LD_VAR 0 5
85095: ARRAY
85096: PUSH
85097: LD_INT 2
85099: ARRAY
85100: PPUSH
85101: LD_VAR 0 2
85105: PPUSH
85106: LD_VAR 0 3
85110: PPUSH
85111: CALL_OW 298
85115: PUSH
85116: LD_INT 6
85118: LESS
85119: IFFALSE 85218
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85121: LD_EXP 150
85125: PUSH
85126: LD_VAR 0 6
85130: ARRAY
85131: PUSH
85132: LD_VAR 0 5
85136: ARRAY
85137: PUSH
85138: LD_INT 1
85140: ARRAY
85141: PPUSH
85142: LD_EXP 150
85146: PUSH
85147: LD_VAR 0 6
85151: ARRAY
85152: PUSH
85153: LD_VAR 0 5
85157: ARRAY
85158: PUSH
85159: LD_INT 2
85161: ARRAY
85162: PPUSH
85163: LD_VAR 0 1
85167: PPUSH
85168: CALL_OW 255
85172: PPUSH
85173: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85177: LD_ADDR_EXP 150
85181: PUSH
85182: LD_EXP 150
85186: PPUSH
85187: LD_VAR 0 6
85191: PPUSH
85192: LD_EXP 150
85196: PUSH
85197: LD_VAR 0 6
85201: ARRAY
85202: PPUSH
85203: LD_VAR 0 5
85207: PPUSH
85208: CALL_OW 3
85212: PPUSH
85213: CALL_OW 1
85217: ST_TO_ADDR
// end ; end ;
85218: GO 85056
85220: POP
85221: POP
// end ;
85222: LD_VAR 0 4
85226: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
85227: LD_INT 0
85229: PPUSH
85230: PPUSH
85231: PPUSH
85232: PPUSH
85233: PPUSH
85234: PPUSH
85235: PPUSH
85236: PPUSH
85237: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
85238: LD_VAR 0 1
85242: PPUSH
85243: CALL_OW 264
85247: PUSH
85248: LD_EXP 128
85252: EQUAL
85253: NOT
85254: PUSH
85255: LD_VAR 0 1
85259: PUSH
85260: LD_EXP 149
85264: IN
85265: NOT
85266: OR
85267: IFFALSE 85271
// exit ;
85269: GO 85593
// index := GetElementIndex ( minersList , unit ) ;
85271: LD_ADDR_VAR 0 6
85275: PUSH
85276: LD_EXP 149
85280: PPUSH
85281: LD_VAR 0 1
85285: PPUSH
85286: CALL 46525 0 2
85290: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
85291: LD_ADDR_VAR 0 8
85295: PUSH
85296: LD_EXP 151
85300: PUSH
85301: LD_EXP 150
85305: PUSH
85306: LD_VAR 0 6
85310: ARRAY
85311: MINUS
85312: ST_TO_ADDR
// if not minesFreeAmount then
85313: LD_VAR 0 8
85317: NOT
85318: IFFALSE 85322
// exit ;
85320: GO 85593
// tmp := [ ] ;
85322: LD_ADDR_VAR 0 7
85326: PUSH
85327: EMPTY
85328: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
85329: LD_ADDR_VAR 0 5
85333: PUSH
85334: DOUBLE
85335: LD_INT 1
85337: DEC
85338: ST_TO_ADDR
85339: LD_VAR 0 8
85343: PUSH
85344: FOR_TO
85345: IFFALSE 85540
// begin _d := rand ( 0 , 5 ) ;
85347: LD_ADDR_VAR 0 11
85351: PUSH
85352: LD_INT 0
85354: PPUSH
85355: LD_INT 5
85357: PPUSH
85358: CALL_OW 12
85362: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
85363: LD_ADDR_VAR 0 12
85367: PUSH
85368: LD_INT 2
85370: PPUSH
85371: LD_INT 6
85373: PPUSH
85374: CALL_OW 12
85378: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
85379: LD_ADDR_VAR 0 9
85383: PUSH
85384: LD_VAR 0 2
85388: PPUSH
85389: LD_VAR 0 11
85393: PPUSH
85394: LD_VAR 0 12
85398: PPUSH
85399: CALL_OW 272
85403: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
85404: LD_ADDR_VAR 0 10
85408: PUSH
85409: LD_VAR 0 3
85413: PPUSH
85414: LD_VAR 0 11
85418: PPUSH
85419: LD_VAR 0 12
85423: PPUSH
85424: CALL_OW 273
85428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
85429: LD_VAR 0 9
85433: PPUSH
85434: LD_VAR 0 10
85438: PPUSH
85439: CALL_OW 488
85443: PUSH
85444: LD_VAR 0 9
85448: PUSH
85449: LD_VAR 0 10
85453: PUSH
85454: EMPTY
85455: LIST
85456: LIST
85457: PUSH
85458: LD_VAR 0 7
85462: IN
85463: NOT
85464: AND
85465: PUSH
85466: LD_VAR 0 9
85470: PPUSH
85471: LD_VAR 0 10
85475: PPUSH
85476: CALL_OW 458
85480: NOT
85481: AND
85482: IFFALSE 85524
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
85484: LD_ADDR_VAR 0 7
85488: PUSH
85489: LD_VAR 0 7
85493: PPUSH
85494: LD_VAR 0 7
85498: PUSH
85499: LD_INT 1
85501: PLUS
85502: PPUSH
85503: LD_VAR 0 9
85507: PUSH
85508: LD_VAR 0 10
85512: PUSH
85513: EMPTY
85514: LIST
85515: LIST
85516: PPUSH
85517: CALL_OW 1
85521: ST_TO_ADDR
85522: GO 85538
// i := i - 1 ;
85524: LD_ADDR_VAR 0 5
85528: PUSH
85529: LD_VAR 0 5
85533: PUSH
85534: LD_INT 1
85536: MINUS
85537: ST_TO_ADDR
// end ;
85538: GO 85344
85540: POP
85541: POP
// for i in tmp do
85542: LD_ADDR_VAR 0 5
85546: PUSH
85547: LD_VAR 0 7
85551: PUSH
85552: FOR_IN
85553: IFFALSE 85591
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
85555: LD_VAR 0 1
85559: PPUSH
85560: LD_VAR 0 5
85564: PUSH
85565: LD_INT 1
85567: ARRAY
85568: PPUSH
85569: LD_VAR 0 5
85573: PUSH
85574: LD_INT 2
85576: ARRAY
85577: PPUSH
85578: CALL 84533 0 3
85582: NOT
85583: IFFALSE 85589
// exit ;
85585: POP
85586: POP
85587: GO 85593
85589: GO 85552
85591: POP
85592: POP
// end ;
85593: LD_VAR 0 4
85597: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
85598: LD_INT 0
85600: PPUSH
85601: PPUSH
85602: PPUSH
85603: PPUSH
85604: PPUSH
85605: PPUSH
85606: PPUSH
// if not GetClass ( unit ) = class_sniper then
85607: LD_VAR 0 1
85611: PPUSH
85612: CALL_OW 257
85616: PUSH
85617: LD_INT 5
85619: EQUAL
85620: NOT
85621: IFFALSE 85625
// exit ;
85623: GO 86013
// dist := 8 ;
85625: LD_ADDR_VAR 0 5
85629: PUSH
85630: LD_INT 8
85632: ST_TO_ADDR
// viewRange := 12 ;
85633: LD_ADDR_VAR 0 7
85637: PUSH
85638: LD_INT 12
85640: ST_TO_ADDR
// side := GetSide ( unit ) ;
85641: LD_ADDR_VAR 0 6
85645: PUSH
85646: LD_VAR 0 1
85650: PPUSH
85651: CALL_OW 255
85655: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
85656: LD_INT 61
85658: PPUSH
85659: LD_VAR 0 6
85663: PPUSH
85664: CALL_OW 321
85668: PUSH
85669: LD_INT 2
85671: EQUAL
85672: IFFALSE 85682
// viewRange := 16 ;
85674: LD_ADDR_VAR 0 7
85678: PUSH
85679: LD_INT 16
85681: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
85682: LD_VAR 0 1
85686: PPUSH
85687: LD_VAR 0 2
85691: PPUSH
85692: LD_VAR 0 3
85696: PPUSH
85697: CALL_OW 297
85701: PUSH
85702: LD_VAR 0 5
85706: GREATER
85707: IFFALSE 85786
// begin ComMoveXY ( unit , x , y ) ;
85709: LD_VAR 0 1
85713: PPUSH
85714: LD_VAR 0 2
85718: PPUSH
85719: LD_VAR 0 3
85723: PPUSH
85724: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85728: LD_INT 35
85730: PPUSH
85731: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
85735: LD_VAR 0 1
85739: PPUSH
85740: LD_VAR 0 2
85744: PPUSH
85745: LD_VAR 0 3
85749: PPUSH
85750: CALL 77297 0 3
85754: NOT
85755: IFFALSE 85759
// exit ;
85757: GO 86013
// until GetDistUnitXY ( unit , x , y ) < dist ;
85759: LD_VAR 0 1
85763: PPUSH
85764: LD_VAR 0 2
85768: PPUSH
85769: LD_VAR 0 3
85773: PPUSH
85774: CALL_OW 297
85778: PUSH
85779: LD_VAR 0 5
85783: LESS
85784: IFFALSE 85728
// end ; ComTurnXY ( unit , x , y ) ;
85786: LD_VAR 0 1
85790: PPUSH
85791: LD_VAR 0 2
85795: PPUSH
85796: LD_VAR 0 3
85800: PPUSH
85801: CALL_OW 118
// wait ( 5 ) ;
85805: LD_INT 5
85807: PPUSH
85808: CALL_OW 67
// _d := GetDir ( unit ) ;
85812: LD_ADDR_VAR 0 10
85816: PUSH
85817: LD_VAR 0 1
85821: PPUSH
85822: CALL_OW 254
85826: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
85827: LD_ADDR_VAR 0 8
85831: PUSH
85832: LD_VAR 0 1
85836: PPUSH
85837: CALL_OW 250
85841: PPUSH
85842: LD_VAR 0 10
85846: PPUSH
85847: LD_VAR 0 5
85851: PPUSH
85852: CALL_OW 272
85856: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
85857: LD_ADDR_VAR 0 9
85861: PUSH
85862: LD_VAR 0 1
85866: PPUSH
85867: CALL_OW 251
85871: PPUSH
85872: LD_VAR 0 10
85876: PPUSH
85877: LD_VAR 0 5
85881: PPUSH
85882: CALL_OW 273
85886: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
85887: LD_VAR 0 8
85891: PPUSH
85892: LD_VAR 0 9
85896: PPUSH
85897: CALL_OW 488
85901: NOT
85902: IFFALSE 85906
// exit ;
85904: GO 86013
// ComAnimCustom ( unit , 1 ) ;
85906: LD_VAR 0 1
85910: PPUSH
85911: LD_INT 1
85913: PPUSH
85914: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
85918: LD_VAR 0 8
85922: PPUSH
85923: LD_VAR 0 9
85927: PPUSH
85928: LD_VAR 0 6
85932: PPUSH
85933: LD_VAR 0 7
85937: PPUSH
85938: CALL_OW 330
// repeat wait ( 1 ) ;
85942: LD_INT 1
85944: PPUSH
85945: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
85949: LD_VAR 0 1
85953: PPUSH
85954: CALL_OW 316
85958: PUSH
85959: LD_VAR 0 1
85963: PPUSH
85964: CALL_OW 314
85968: OR
85969: PUSH
85970: LD_VAR 0 1
85974: PPUSH
85975: CALL_OW 302
85979: NOT
85980: OR
85981: PUSH
85982: LD_VAR 0 1
85986: PPUSH
85987: CALL_OW 301
85991: OR
85992: IFFALSE 85942
// RemoveSeeing ( _x , _y , side ) ;
85994: LD_VAR 0 8
85998: PPUSH
85999: LD_VAR 0 9
86003: PPUSH
86004: LD_VAR 0 6
86008: PPUSH
86009: CALL_OW 331
// end ; end_of_file
86013: LD_VAR 0 4
86017: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86018: LD_VAR 0 1
86022: PUSH
86023: LD_INT 200
86025: DOUBLE
86026: GREATEREQUAL
86027: IFFALSE 86035
86029: LD_INT 299
86031: DOUBLE
86032: LESSEQUAL
86033: IFTRUE 86037
86035: GO 86069
86037: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86038: LD_VAR 0 1
86042: PPUSH
86043: LD_VAR 0 2
86047: PPUSH
86048: LD_VAR 0 3
86052: PPUSH
86053: LD_VAR 0 4
86057: PPUSH
86058: LD_VAR 0 5
86062: PPUSH
86063: CALL 82135 0 5
86067: GO 86146
86069: LD_INT 300
86071: DOUBLE
86072: GREATEREQUAL
86073: IFFALSE 86081
86075: LD_INT 399
86077: DOUBLE
86078: LESSEQUAL
86079: IFTRUE 86083
86081: GO 86145
86083: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86084: LD_VAR 0 1
86088: PPUSH
86089: LD_VAR 0 2
86093: PPUSH
86094: LD_VAR 0 3
86098: PPUSH
86099: LD_VAR 0 4
86103: PPUSH
86104: LD_VAR 0 5
86108: PPUSH
86109: LD_VAR 0 6
86113: PPUSH
86114: LD_VAR 0 7
86118: PPUSH
86119: LD_VAR 0 8
86123: PPUSH
86124: LD_VAR 0 9
86128: PPUSH
86129: LD_VAR 0 10
86133: PPUSH
86134: LD_VAR 0 11
86138: PPUSH
86139: CALL 39774 0 11
86143: GO 86146
86145: POP
// end ;
86146: PPOPN 11
86148: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86149: LD_VAR 0 1
86153: PPUSH
86154: LD_VAR 0 2
86158: PPUSH
86159: LD_VAR 0 3
86163: PPUSH
86164: LD_VAR 0 4
86168: PPUSH
86169: LD_VAR 0 5
86173: PPUSH
86174: CALL 82127 0 5
// end ;
86178: PPOPN 5
86180: END
