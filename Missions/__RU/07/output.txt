// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , false ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1075 0 0
// PrepareArabians ;
 313: CALL 4426 0 0
// Nef_PrepareNature ;
 317: CALL 26552 0 0
// MissionIntro ;
 321: CALL 6080 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 ] [ Difficulty ] ;
 464: LD_ADDR_EXP 28
 468: PUSH
 469: LD_INT 147000
 471: PUSH
 472: LD_INT 126000
 474: PUSH
 475: LD_INT 94500
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_OWVAR 67
 487: ARRAY
 488: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 ] [ Difficulty ] ;
 489: LD_ADDR_EXP 29
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 2
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: LIST
 507: PUSH
 508: LD_OWVAR 67
 512: ARRAY
 513: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 ] [ Difficulty ] ;
 514: LD_ADDR_EXP 30
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 31
 543: PUSH
 544: LD_INT 1
 546: PUSH
 547: LD_INT 2
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 32
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 2
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 33
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 1
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 ] [ Difficulty ] ;
 614: LD_ADDR_EXP 34
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 2
 624: PUSH
 625: LD_INT 3
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: LD_OWVAR 67
 637: ARRAY
 638: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 639: LD_ADDR_EXP 35
 643: PUSH
 644: LD_INT 106
 646: PUSH
 647: LD_INT 159
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 91
 656: PUSH
 657: LD_INT 130
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 75
 666: PUSH
 667: LD_INT 98
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 54
 676: PUSH
 677: LD_INT 60
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 86
 686: PUSH
 687: LD_INT 54
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 128
 696: PUSH
 697: LD_INT 42
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PUSH
 704: LD_INT 142
 706: PUSH
 707: LD_INT 29
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 100 , 50 ] [ Difficulty ] ;
 723: LD_ADDR_EXP 36
 727: PUSH
 728: LD_INT 200
 730: PUSH
 731: LD_INT 100
 733: PUSH
 734: LD_INT 50
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: LD_OWVAR 67
 746: ARRAY
 747: ST_TO_ADDR
// end ;
 748: LD_VAR 0 1
 752: RET
// every 0 0$1 trigger debugMode do var i ;
 753: LD_EXP 26
 757: IFFALSE 1072
 759: GO 761
 761: DISABLE
 762: LD_INT 0
 764: PPUSH
// begin enable ;
 765: ENABLE
// FogOff ( your_side ) ;
 766: LD_OWVAR 2
 770: PPUSH
 771: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 775: LD_ADDR_VAR 0 1
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_OWVAR 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: LD_INT 21
 797: PUSH
 798: LD_INT 1
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 21
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 846
// SetLives ( i , 1000 ) ;
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 1000
 839: PPUSH
 840: CALL_OW 234
 844: GO 829
 846: POP
 847: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 848: LD_ADDR_VAR 0 1
 852: PUSH
 853: LD_INT 22
 855: PUSH
 856: LD_OWVAR 2
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 21
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: PUSH
 884: FOR_IN
 885: IFFALSE 949
// begin SetSkill ( i , skill_combat , 10 ) ;
 887: LD_VAR 0 1
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 10
 897: PPUSH
 898: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 10
 912: PPUSH
 913: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 917: LD_VAR 0 1
 921: PPUSH
 922: LD_INT 3
 924: PPUSH
 925: LD_INT 10
 927: PPUSH
 928: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 932: LD_VAR 0 1
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 10
 942: PPUSH
 943: CALL_OW 237
// end ;
 947: GO 884
 949: POP
 950: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 951: LD_ADDR_VAR 0 1
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_OWVAR 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 2
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 30
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PUSH
1005: FOR_IN
1006: IFFALSE 1070
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1008: LD_VAR 0 1
1012: PPUSH
1013: CALL_OW 274
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 9999
1023: PPUSH
1024: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1028: LD_VAR 0 1
1032: PPUSH
1033: CALL_OW 274
1037: PPUSH
1038: LD_INT 2
1040: PPUSH
1041: LD_INT 9999
1043: PPUSH
1044: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1048: LD_VAR 0 1
1052: PPUSH
1053: CALL_OW 274
1057: PPUSH
1058: LD_INT 3
1060: PPUSH
1061: LD_INT 9999
1063: PPUSH
1064: CALL_OW 277
// end ;
1068: GO 1005
1070: POP
1071: POP
// end ; end_of_file
1072: PPOPN 1
1074: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1075: LD_INT 0
1077: PPUSH
// vsevolodTeam = [ ] ;
1078: LD_ADDR_EXP 52
1082: PUSH
1083: EMPTY
1084: ST_TO_ADDR
// PrepareYashin ;
1085: CALL 3361 0 0
// if savedVsevolod then
1089: LD_EXP 1
1093: IFFALSE 1115
// begin PrepareVsevolodBase ;
1095: CALL 3824 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1099: LD_INT 1
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL 1289 0 2
// SpawnVsevolodTeamInBase ;
1109: CALL 4103 0 0
// end else
1113: GO 1129
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1115: LD_INT 2
1117: PPUSH
1118: LD_INT 5
1120: PPUSH
1121: CALL 1289 0 2
// SpawnPlatonovReinforces ;
1125: CALL 3404 0 0
// end ; if matPredStatus then
1129: LD_EXP 4
1133: IFFALSE 1148
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1135: LD_INT 9
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: LD_INT 2
1143: PPUSH
1144: CALL_OW 322
// end ;
1148: LD_VAR 0 1
1152: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1153: LD_INT 0
1155: PPUSH
// uc_side = 3 ;
1156: LD_ADDR_OWVAR 20
1160: PUSH
1161: LD_INT 3
1163: ST_TO_ADDR
// uc_nation = 3 ;
1164: LD_ADDR_OWVAR 21
1168: PUSH
1169: LD_INT 3
1171: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1172: LD_ADDR_EXP 55
1176: PUSH
1177: LD_STRING Xavier2
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: CALL 11401 0 3
1190: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1191: LD_EXP 55
1195: PPUSH
1196: LD_VAR 0 3
1200: PPUSH
1201: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1205: LD_EXP 55
1209: PPUSH
1210: LD_VAR 0 1
1214: PPUSH
1215: LD_VAR 0 2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 48
// end ;
1227: LD_VAR 0 4
1231: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1232: LD_INT 0
1234: PPUSH
// uc_side = 3 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 3
1242: ST_TO_ADDR
// uc_nation = 3 ;
1243: LD_ADDR_OWVAR 21
1247: PUSH
1248: LD_INT 3
1250: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1251: LD_ADDR_EXP 55
1255: PUSH
1256: LD_STRING Xavier2
1258: PPUSH
1259: LD_INT 0
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL 11401 0 3
1269: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1270: LD_EXP 55
1274: PPUSH
1275: LD_VAR 0 1
1279: PPUSH
1280: CALL_OW 52
// end ;
1284: LD_VAR 0 2
1288: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList ; begin
1289: LD_INT 0
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
// uc_side = 3 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 3
1303: ST_TO_ADDR
// uc_nation = 3 ;
1304: LD_ADDR_OWVAR 21
1308: PUSH
1309: LD_INT 3
1311: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1312: LD_ADDR_EXP 37
1316: PUSH
1317: LD_STRING Burlak
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: CALL 11401 0 3
1330: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1331: LD_ADDR_EXP 42
1335: PUSH
1336: LD_STRING Titov
1338: PPUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL 11401 0 3
1349: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1350: LD_EXP 42
1354: NOT
1355: PUSH
1356: LD_STRING 06_VSTitov
1358: PPUSH
1359: CALL_OW 28
1363: AND
1364: IFFALSE 1401
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1366: LD_ADDR_EXP 42
1370: PUSH
1371: LD_STRING VSTitov
1373: PPUSH
1374: LD_INT 1
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL 11401 0 3
1384: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1385: LD_ADDR_EXP 52
1389: PUSH
1390: LD_EXP 52
1394: PUSH
1395: LD_EXP 42
1399: ADD
1400: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1401: LD_ADDR_EXP 43
1405: PUSH
1406: LD_STRING Dolgov
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL 11401 0 3
1419: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1420: LD_EXP 43
1424: NOT
1425: PUSH
1426: LD_STRING 06_VSDolgov
1428: PPUSH
1429: CALL_OW 28
1433: AND
1434: IFFALSE 1471
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1436: LD_ADDR_EXP 43
1440: PUSH
1441: LD_STRING VSDolgov
1443: PPUSH
1444: LD_INT 1
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL 11401 0 3
1454: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1455: LD_ADDR_EXP 52
1459: PUSH
1460: LD_EXP 52
1464: PUSH
1465: LD_EXP 43
1469: ADD
1470: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1471: LD_ADDR_EXP 44
1475: PUSH
1476: LD_STRING Lipshchin
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 0
1484: PPUSH
1485: CALL 11401 0 3
1489: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1490: LD_EXP 44
1494: NOT
1495: PUSH
1496: LD_STRING 06_VSLipshchin
1498: PPUSH
1499: CALL_OW 28
1503: AND
1504: IFFALSE 1541
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1506: LD_ADDR_EXP 44
1510: PUSH
1511: LD_STRING VSLipshchin
1513: PPUSH
1514: LD_INT 1
1516: PPUSH
1517: LD_INT 0
1519: PPUSH
1520: CALL 11401 0 3
1524: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1525: LD_ADDR_EXP 52
1529: PUSH
1530: LD_EXP 52
1534: PUSH
1535: LD_EXP 44
1539: ADD
1540: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1541: LD_ADDR_EXP 38
1545: PUSH
1546: LD_STRING Karamazov
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: CALL 11401 0 3
1559: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1560: LD_EXP 38
1564: NOT
1565: PUSH
1566: LD_STRING 06_VSKaramazov
1568: PPUSH
1569: CALL_OW 28
1573: AND
1574: IFFALSE 1611
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1576: LD_ADDR_EXP 38
1580: PUSH
1581: LD_STRING VSKaramazov
1583: PPUSH
1584: LD_INT 1
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 11401 0 3
1594: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1595: LD_ADDR_EXP 52
1599: PUSH
1600: LD_EXP 52
1604: PUSH
1605: LD_EXP 38
1609: ADD
1610: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1611: LD_ADDR_EXP 39
1615: PUSH
1616: LD_STRING Petrovova
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL 11401 0 3
1629: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1630: LD_EXP 39
1634: NOT
1635: PUSH
1636: LD_STRING 06_VSPetrovova
1638: PPUSH
1639: CALL_OW 28
1643: AND
1644: IFFALSE 1681
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1646: LD_ADDR_EXP 39
1650: PUSH
1651: LD_STRING VSPetrovova
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_INT 0
1659: PPUSH
1660: CALL 11401 0 3
1664: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1665: LD_ADDR_EXP 52
1669: PUSH
1670: LD_EXP 52
1674: PUSH
1675: LD_EXP 39
1679: ADD
1680: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1681: LD_ADDR_EXP 40
1685: PUSH
1686: LD_STRING Gleb
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL 11401 0 3
1699: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1700: LD_EXP 40
1704: NOT
1705: PUSH
1706: LD_STRING 06_VSGleb
1708: PPUSH
1709: CALL_OW 28
1713: AND
1714: IFFALSE 1751
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1716: LD_ADDR_EXP 40
1720: PUSH
1721: LD_STRING VSGleb
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 0
1729: PPUSH
1730: CALL 11401 0 3
1734: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1735: LD_ADDR_EXP 52
1739: PUSH
1740: LD_EXP 52
1744: PUSH
1745: LD_EXP 40
1749: ADD
1750: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1751: LD_ADDR_EXP 41
1755: PUSH
1756: LD_STRING Petrosyan
1758: PPUSH
1759: LD_INT 1
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 11401 0 3
1769: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1770: LD_EXP 41
1774: NOT
1775: PUSH
1776: LD_STRING 06_VSPetrosyan
1778: PPUSH
1779: CALL_OW 28
1783: AND
1784: IFFALSE 1821
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1786: LD_ADDR_EXP 41
1790: PUSH
1791: LD_STRING VSPetrosyan
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_INT 0
1799: PPUSH
1800: CALL 11401 0 3
1804: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1805: LD_ADDR_EXP 52
1809: PUSH
1810: LD_EXP 52
1814: PUSH
1815: LD_EXP 41
1819: ADD
1820: ST_TO_ADDR
// end ; if savedVsevolod then
1821: LD_EXP 1
1825: IFFALSE 1935
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1827: LD_ADDR_EXP 45
1831: PUSH
1832: LD_STRING Kirilenkova
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 4
1840: PPUSH
1841: CALL 11401 0 3
1845: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1846: LD_ADDR_EXP 46
1850: PUSH
1851: LD_STRING Belkov
1853: PPUSH
1854: LD_INT 1
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL 11401 0 3
1864: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1865: LD_ADDR_EXP 47
1869: PUSH
1870: LD_STRING Belkov2
1872: PPUSH
1873: LD_INT 1
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 11401 0 3
1883: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1884: LD_ADDR_EXP 48
1888: PUSH
1889: LD_STRING Vsevolod
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: CALL 11401 0 3
1902: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1903: LD_EXP 48
1907: PPUSH
1908: LD_INT 4
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1918: LD_EXP 48
1922: PPUSH
1923: LD_INT 100
1925: PPUSH
1926: LD_INT 153
1928: PPUSH
1929: CALL_OW 118
// end else
1933: GO 1974
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1935: LD_ADDR_EXP 45
1939: PUSH
1940: LD_STRING 04_Kirilenkova
1942: PPUSH
1943: CALL_OW 34
1947: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1948: LD_ADDR_EXP 46
1952: PUSH
1953: LD_STRING 04_Belkov
1955: PPUSH
1956: CALL_OW 34
1960: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1961: LD_ADDR_EXP 47
1965: PUSH
1966: LD_STRING 04_Belkov2
1968: PPUSH
1969: CALL_OW 34
1973: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1974: LD_ADDR_EXP 49
1978: PUSH
1979: LD_STRING Platonov
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL 11401 0 3
1992: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
1993: LD_ADDR_EXP 50
1997: PUSH
1998: LD_STRING Popov
2000: PPUSH
2001: LD_INT 0
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 11401 0 3
2011: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2012: LD_ADDR_EXP 53
2016: PUSH
2017: LD_STRING 06_other_survivors
2019: PPUSH
2020: CALL_OW 31
2024: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2025: LD_ADDR_EXP 54
2029: PUSH
2030: LD_EXP 53
2034: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2035: LD_ADDR_EXP 52
2039: PUSH
2040: LD_EXP 52
2044: PUSH
2045: LD_STRING 06_other_survivors_with_vsevolod
2047: PPUSH
2048: CALL_OW 31
2052: ADD
2053: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: DOUBLE
2060: LD_INT 1
2062: DEC
2063: ST_TO_ADDR
2064: LD_EXP 2
2068: PUSH
2069: FOR_TO
2070: IFFALSE 2567
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2072: LD_ADDR_OWVAR 21
2076: PUSH
2077: LD_EXP 2
2081: PUSH
2082: LD_VAR 0 4
2086: ARRAY
2087: PUSH
2088: LD_INT 1
2090: ARRAY
2091: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2092: LD_ADDR_OWVAR 37
2096: PUSH
2097: LD_EXP 2
2101: PUSH
2102: LD_VAR 0 4
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2112: LD_ADDR_OWVAR 39
2116: PUSH
2117: LD_EXP 2
2121: PUSH
2122: LD_VAR 0 4
2126: ARRAY
2127: PUSH
2128: LD_INT 3
2130: ARRAY
2131: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2132: LD_ADDR_OWVAR 38
2136: PUSH
2137: LD_EXP 2
2141: PUSH
2142: LD_VAR 0 4
2146: ARRAY
2147: PUSH
2148: LD_INT 4
2150: ARRAY
2151: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2152: LD_ADDR_OWVAR 40
2156: PUSH
2157: LD_EXP 2
2161: PUSH
2162: LD_VAR 0 4
2166: ARRAY
2167: PUSH
2168: LD_INT 5
2170: ARRAY
2171: ST_TO_ADDR
// uc_direction := dir ;
2172: LD_ADDR_OWVAR 24
2176: PUSH
2177: LD_VAR 0 2
2181: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2182: LD_ADDR_OWVAR 41
2186: PUSH
2187: LD_INT 60
2189: PPUSH
2190: LD_INT 70
2192: PPUSH
2193: CALL_OW 12
2197: ST_TO_ADDR
// car := CreateVehicle ;
2198: LD_ADDR_VAR 0 6
2202: PUSH
2203: CALL_OW 45
2207: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2208: LD_VAR 0 6
2212: PPUSH
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 0
2220: PPUSH
2221: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2225: LD_EXP 2
2229: PUSH
2230: LD_VAR 0 4
2234: ARRAY
2235: PUSH
2236: LD_INT 6
2238: ARRAY
2239: PUSH
2240: LD_STRING Bur
2242: DOUBLE
2243: EQUAL
2244: IFTRUE 2248
2246: GO 2265
2248: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2249: LD_EXP 37
2253: PPUSH
2254: LD_VAR 0 6
2258: PPUSH
2259: CALL_OW 52
2263: GO 2565
2265: LD_STRING Kar
2267: DOUBLE
2268: EQUAL
2269: IFTRUE 2273
2271: GO 2290
2273: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2274: LD_EXP 38
2278: PPUSH
2279: LD_VAR 0 6
2283: PPUSH
2284: CALL_OW 52
2288: GO 2565
2290: LD_STRING Ptr
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2315
2298: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2299: LD_EXP 39
2303: PPUSH
2304: LD_VAR 0 6
2308: PPUSH
2309: CALL_OW 52
2313: GO 2565
2315: LD_STRING Glb
2317: DOUBLE
2318: EQUAL
2319: IFTRUE 2323
2321: GO 2340
2323: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2324: LD_EXP 40
2328: PPUSH
2329: LD_VAR 0 6
2333: PPUSH
2334: CALL_OW 52
2338: GO 2565
2340: LD_STRING Pet
2342: DOUBLE
2343: EQUAL
2344: IFTRUE 2348
2346: GO 2365
2348: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2349: LD_EXP 41
2353: PPUSH
2354: LD_VAR 0 6
2358: PPUSH
2359: CALL_OW 52
2363: GO 2565
2365: LD_STRING Dol
2367: DOUBLE
2368: EQUAL
2369: IFTRUE 2373
2371: GO 2390
2373: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2374: LD_EXP 43
2378: PPUSH
2379: LD_VAR 0 6
2383: PPUSH
2384: CALL_OW 52
2388: GO 2565
2390: LD_STRING Lip
2392: DOUBLE
2393: EQUAL
2394: IFTRUE 2398
2396: GO 2415
2398: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2399: LD_EXP 44
2403: PPUSH
2404: LD_VAR 0 6
2408: PPUSH
2409: CALL_OW 52
2413: GO 2565
2415: LD_STRING Tit
2417: DOUBLE
2418: EQUAL
2419: IFTRUE 2423
2421: GO 2440
2423: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2424: LD_EXP 42
2428: PPUSH
2429: LD_VAR 0 6
2433: PPUSH
2434: CALL_OW 52
2438: GO 2565
2440: LD_STRING Kir
2442: DOUBLE
2443: EQUAL
2444: IFTRUE 2448
2446: GO 2465
2448: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2449: LD_EXP 45
2453: PPUSH
2454: LD_VAR 0 6
2458: PPUSH
2459: CALL_OW 52
2463: GO 2565
2465: LD_STRING Bel
2467: DOUBLE
2468: EQUAL
2469: IFTRUE 2473
2471: GO 2490
2473: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2474: LD_EXP 46
2478: PPUSH
2479: LD_VAR 0 6
2483: PPUSH
2484: CALL_OW 52
2488: GO 2565
2490: LD_STRING Bel2
2492: DOUBLE
2493: EQUAL
2494: IFTRUE 2498
2496: GO 2515
2498: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2499: LD_EXP 47
2503: PPUSH
2504: LD_VAR 0 6
2508: PPUSH
2509: CALL_OW 52
2513: GO 2565
2515: LD_STRING rand
2517: DOUBLE
2518: EQUAL
2519: IFTRUE 2523
2521: GO 2564
2523: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2524: LD_EXP 54
2528: PUSH
2529: LD_INT 1
2531: ARRAY
2532: PPUSH
2533: LD_VAR 0 6
2537: PPUSH
2538: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2542: LD_ADDR_EXP 54
2546: PUSH
2547: LD_EXP 54
2551: PUSH
2552: LD_EXP 54
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: DIFF
2561: ST_TO_ADDR
// end ; end ;
2562: GO 2565
2564: POP
// end ;
2565: GO 2069
2567: POP
2568: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2569: LD_EXP 37
2573: PUSH
2574: LD_EXP 37
2578: PPUSH
2579: CALL_OW 305
2583: NOT
2584: AND
2585: PUSH
2586: LD_EXP 37
2590: PUSH
2591: LD_EXP 52
2595: IN
2596: NOT
2597: AND
2598: IFFALSE 2617
// PlaceUnitArea ( Burlak , area , false ) ;
2600: LD_EXP 37
2604: PPUSH
2605: LD_VAR 0 1
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2617: LD_EXP 38
2621: PUSH
2622: LD_EXP 38
2626: PPUSH
2627: CALL_OW 305
2631: NOT
2632: AND
2633: PUSH
2634: LD_EXP 38
2638: PUSH
2639: LD_EXP 52
2643: IN
2644: NOT
2645: AND
2646: IFFALSE 2665
// PlaceUnitArea ( Karamazov , area , false ) ;
2648: LD_EXP 38
2652: PPUSH
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 0
2660: PPUSH
2661: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2665: LD_EXP 39
2669: PUSH
2670: LD_EXP 39
2674: PPUSH
2675: CALL_OW 305
2679: NOT
2680: AND
2681: PUSH
2682: LD_EXP 39
2686: PUSH
2687: LD_EXP 52
2691: IN
2692: NOT
2693: AND
2694: IFFALSE 2713
// PlaceUnitArea ( Petrovova , area , false ) ;
2696: LD_EXP 39
2700: PPUSH
2701: LD_VAR 0 1
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2713: LD_EXP 40
2717: PUSH
2718: LD_EXP 40
2722: PPUSH
2723: CALL_OW 305
2727: NOT
2728: AND
2729: PUSH
2730: LD_EXP 40
2734: PUSH
2735: LD_EXP 52
2739: IN
2740: NOT
2741: AND
2742: IFFALSE 2761
// PlaceUnitArea ( Gleb , area , false ) ;
2744: LD_EXP 40
2748: PPUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2761: LD_EXP 41
2765: PUSH
2766: LD_EXP 41
2770: PPUSH
2771: CALL_OW 305
2775: NOT
2776: AND
2777: PUSH
2778: LD_EXP 41
2782: PUSH
2783: LD_EXP 52
2787: IN
2788: NOT
2789: AND
2790: IFFALSE 2809
// PlaceUnitArea ( Petrosyan , area , false ) ;
2792: LD_EXP 41
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 0
2804: PPUSH
2805: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2809: LD_EXP 43
2813: PUSH
2814: LD_EXP 43
2818: PPUSH
2819: CALL_OW 305
2823: NOT
2824: AND
2825: PUSH
2826: LD_EXP 43
2830: PUSH
2831: LD_EXP 52
2835: IN
2836: NOT
2837: AND
2838: IFFALSE 2857
// PlaceUnitArea ( Dolgov , area , false ) ;
2840: LD_EXP 43
2844: PPUSH
2845: LD_VAR 0 1
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2857: LD_EXP 44
2861: PUSH
2862: LD_EXP 44
2866: PPUSH
2867: CALL_OW 305
2871: NOT
2872: AND
2873: PUSH
2874: LD_EXP 44
2878: PUSH
2879: LD_EXP 52
2883: IN
2884: NOT
2885: AND
2886: IFFALSE 2905
// PlaceUnitArea ( Lipshchin , area , false ) ;
2888: LD_EXP 44
2892: PPUSH
2893: LD_VAR 0 1
2897: PPUSH
2898: LD_INT 0
2900: PPUSH
2901: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2905: LD_EXP 42
2909: PUSH
2910: LD_EXP 42
2914: PPUSH
2915: CALL_OW 305
2919: NOT
2920: AND
2921: PUSH
2922: LD_EXP 42
2926: PUSH
2927: LD_EXP 52
2931: IN
2932: NOT
2933: AND
2934: IFFALSE 2953
// PlaceUnitArea ( Titov , area , false ) ;
2936: LD_EXP 42
2940: PPUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2953: LD_EXP 45
2957: PUSH
2958: LD_EXP 45
2962: PPUSH
2963: CALL_OW 305
2967: NOT
2968: AND
2969: PUSH
2970: LD_EXP 45
2974: PUSH
2975: LD_EXP 52
2979: IN
2980: NOT
2981: AND
2982: PUSH
2983: LD_EXP 1
2987: AND
2988: IFFALSE 3007
// PlaceUnitArea ( Kirilenkova , area , false ) ;
2990: LD_EXP 45
2994: PPUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3007: LD_EXP 46
3011: PUSH
3012: LD_EXP 46
3016: PPUSH
3017: CALL_OW 305
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_EXP 52
3033: IN
3034: NOT
3035: AND
3036: PUSH
3037: LD_EXP 1
3041: AND
3042: IFFALSE 3061
// PlaceUnitArea ( Belkov , area , false ) ;
3044: LD_EXP 46
3048: PPUSH
3049: LD_VAR 0 1
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3061: LD_EXP 47
3065: PUSH
3066: LD_EXP 47
3070: PPUSH
3071: CALL_OW 305
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 47
3082: PUSH
3083: LD_EXP 52
3087: IN
3088: NOT
3089: AND
3090: PUSH
3091: LD_EXP 1
3095: AND
3096: IFFALSE 3115
// PlaceUnitArea ( Belkov2 , area , false ) ;
3098: LD_EXP 47
3102: PPUSH
3103: LD_VAR 0 1
3107: PPUSH
3108: LD_INT 0
3110: PPUSH
3111: CALL_OW 49
// for unit in survivorsToPlace do
3115: LD_ADDR_VAR 0 5
3119: PUSH
3120: LD_EXP 54
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3147
// PlaceUnitArea ( unit , area , false ) ;
3128: LD_VAR 0 5
3132: PPUSH
3133: LD_VAR 0 1
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 49
3145: GO 3125
3147: POP
3148: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3149: LD_ADDR_VAR 0 7
3153: PUSH
3154: LD_INT 22
3156: PUSH
3157: LD_INT 3
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: LD_INT 21
3166: PUSH
3167: LD_INT 2
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PUSH
3174: LD_INT 2
3176: PUSH
3177: LD_INT 34
3179: PUSH
3180: LD_INT 51
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 34
3189: PUSH
3190: LD_INT 32
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 34
3199: PUSH
3200: LD_INT 12
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PPUSH
3218: CALL_OW 69
3222: ST_TO_ADDR
// if cargoList then
3223: LD_VAR 0 7
3227: IFFALSE 3356
// for i = 1 to cargoList do
3229: LD_ADDR_VAR 0 4
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_VAR 0 7
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3354
// if resourcesFrom06 then
3247: LD_EXP 3
3251: IFFALSE 3352
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3253: LD_VAR 0 7
3257: PUSH
3258: LD_VAR 0 4
3262: ARRAY
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: LD_EXP 3
3271: PUSH
3272: LD_VAR 0 4
3276: ARRAY
3277: PUSH
3278: LD_INT 1
3280: ARRAY
3281: PPUSH
3282: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3286: LD_VAR 0 7
3290: PUSH
3291: LD_VAR 0 4
3295: ARRAY
3296: PPUSH
3297: LD_INT 2
3299: PPUSH
3300: LD_EXP 3
3304: PUSH
3305: LD_VAR 0 4
3309: ARRAY
3310: PUSH
3311: LD_INT 2
3313: ARRAY
3314: PPUSH
3315: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3319: LD_VAR 0 7
3323: PUSH
3324: LD_VAR 0 4
3328: ARRAY
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: LD_EXP 3
3337: PUSH
3338: LD_VAR 0 4
3342: ARRAY
3343: PUSH
3344: LD_INT 3
3346: ARRAY
3347: PPUSH
3348: CALL_OW 291
// end ;
3352: GO 3244
3354: POP
3355: POP
// end ;
3356: LD_VAR 0 3
3360: RET
// function PrepareYashin ; begin
3361: LD_INT 0
3363: PPUSH
// uc_side = 6 ;
3364: LD_ADDR_OWVAR 20
3368: PUSH
3369: LD_INT 6
3371: ST_TO_ADDR
// uc_nation = 3 ;
3372: LD_ADDR_OWVAR 21
3376: PUSH
3377: LD_INT 3
3379: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3380: LD_ADDR_EXP 51
3384: PUSH
3385: LD_STRING Yashin
3387: PPUSH
3388: LD_INT 0
3390: PPUSH
3391: LD_INT 0
3393: PPUSH
3394: CALL 11401 0 3
3398: ST_TO_ADDR
// end ;
3399: LD_VAR 0 1
3403: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 3 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 3
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 4
3431: PPUSH
3432: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3436: LD_INT 22
3438: PPUSH
3439: LD_INT 1
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: LD_INT 43
3447: PUSH
3448: LD_INT 44
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 1
3457: PPUSH
3458: LD_INT 2
3460: PPUSH
3461: CALL_OW 12
3465: ARRAY
3466: PPUSH
3467: LD_INT 50
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 12
3477: PPUSH
3478: CALL 45164 0 5
// veh = CreateVehicle ;
3482: LD_ADDR_VAR 0 4
3486: PUSH
3487: CALL_OW 45
3491: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3492: LD_VAR 0 4
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_INT 2
3511: PPUSH
3512: LD_INT 0
3514: PPUSH
3515: CALL_OW 49
// if Belkov then
3519: LD_EXP 46
3523: IFFALSE 3541
// PlaceHumanInUnit ( Belkov , veh ) else
3525: LD_EXP 46
3529: PPUSH
3530: LD_VAR 0 4
3534: PPUSH
3535: CALL_OW 52
3539: GO 3585
// if Difficulty = 1 or Difficulty = 2 then
3541: LD_OWVAR 67
3545: PUSH
3546: LD_INT 1
3548: EQUAL
3549: PUSH
3550: LD_OWVAR 67
3554: PUSH
3555: LD_INT 2
3557: EQUAL
3558: OR
3559: IFFALSE 3585
// begin un = CreateHuman ;
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: CALL_OW 44
3570: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3571: LD_VAR 0 3
3575: PPUSH
3576: LD_VAR 0 4
3580: PPUSH
3581: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3585: LD_INT 22
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: LD_INT 51
3596: PPUSH
3597: LD_INT 50
3599: PPUSH
3600: LD_INT 60
3602: PPUSH
3603: CALL_OW 12
3607: PPUSH
3608: CALL 45164 0 5
// veh = CreateVehicle ;
3612: LD_ADDR_VAR 0 4
3616: PUSH
3617: CALL_OW 45
3621: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3622: LD_VAR 0 4
3626: PPUSH
3627: LD_INT 0
3629: PPUSH
3630: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3634: LD_VAR 0 4
3638: PPUSH
3639: LD_INT 2
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3649: LD_VAR 0 4
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: LD_INT 100
3659: PPUSH
3660: CALL_OW 290
// if Belkov2 then
3664: LD_EXP 47
3668: IFFALSE 3686
// PlaceHumanInUnit ( Belkov2 , veh ) else
3670: LD_EXP 47
3674: PPUSH
3675: LD_VAR 0 4
3679: PPUSH
3680: CALL_OW 52
3684: GO 3720
// if Difficulty = 1 then
3686: LD_OWVAR 67
3690: PUSH
3691: LD_INT 1
3693: EQUAL
3694: IFFALSE 3720
// begin un = CreateHuman ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: CALL_OW 44
3705: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3706: LD_VAR 0 3
3710: PPUSH
3711: LD_VAR 0 4
3715: PPUSH
3716: CALL_OW 52
// end ; if Kirilenkova then
3720: LD_EXP 45
3724: IFFALSE 3819
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3726: LD_INT 22
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 51
3737: PPUSH
3738: LD_INT 50
3740: PPUSH
3741: LD_INT 60
3743: PPUSH
3744: CALL_OW 12
3748: PPUSH
3749: CALL 45164 0 5
// veh = CreateVehicle ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: CALL_OW 45
3762: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3763: LD_VAR 0 4
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3775: LD_VAR 0 4
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3790: LD_VAR 0 4
3794: PPUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 100
3800: PPUSH
3801: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3805: LD_EXP 45
3809: PPUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: CALL_OW 52
// end ; end ;
3819: LD_VAR 0 1
3823: RET
// function PrepareVsevolodBase ; var units , depot ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
3829: LD_INT 67
3831: PPUSH
3832: LD_INT 115
3834: PPUSH
3835: LD_INT 3
3837: PPUSH
3838: CALL_OW 441
// uc_side = 3 ;
3842: LD_ADDR_OWVAR 20
3846: PUSH
3847: LD_INT 3
3849: ST_TO_ADDR
// uc_nation = 3 ;
3850: LD_ADDR_OWVAR 21
3854: PUSH
3855: LD_INT 3
3857: ST_TO_ADDR
// bc_level = 5 ;
3858: LD_ADDR_OWVAR 43
3862: PUSH
3863: LD_INT 5
3865: ST_TO_ADDR
// bc_type = b_depot ;
3866: LD_ADDR_OWVAR 42
3870: PUSH
3871: LD_INT 0
3873: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
3874: LD_ADDR_VAR 0 3
3878: PUSH
3879: LD_INT 53
3881: PPUSH
3882: LD_INT 97
3884: PPUSH
3885: LD_INT 1
3887: PPUSH
3888: CALL_OW 47
3892: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
3893: LD_VAR 0 3
3897: PPUSH
3898: LD_STRING gorkij
3900: PPUSH
3901: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
3905: LD_VAR 0 3
3909: PPUSH
3910: CALL_OW 274
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: LD_EXP 36
3922: PPUSH
3923: CALL_OW 277
// bc_type = b_lab_half ;
3927: LD_ADDR_OWVAR 42
3931: PUSH
3932: LD_INT 7
3934: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
3935: LD_ADDR_OWVAR 44
3939: PUSH
3940: LD_INT 14
3942: ST_TO_ADDR
// if matPredStatus then
3943: LD_EXP 4
3947: IFFALSE 3967
// begin bc_type = b_lab_full ;
3949: LD_ADDR_OWVAR 42
3953: PUSH
3954: LD_INT 8
3956: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
3957: LD_ADDR_OWVAR 45
3961: PUSH
3962: LD_INT 12
3964: ST_TO_ADDR
3965: GO 3975
// bc_kind2 = b_lab_basic ;
3967: LD_ADDR_OWVAR 45
3971: PUSH
3972: LD_INT 9
3974: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
3975: LD_INT 58
3977: PPUSH
3978: LD_INT 105
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
3984: CALL_OW 47
// bc_type = b_armoury ;
3988: LD_ADDR_OWVAR 42
3992: PUSH
3993: LD_INT 4
3995: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
3996: LD_INT 65
3998: PPUSH
3999: LD_INT 93
4001: PPUSH
4002: LD_INT 3
4004: PPUSH
4005: CALL_OW 47
// bc_type = b_oil_mine ;
4009: LD_ADDR_OWVAR 42
4013: PUSH
4014: LD_INT 29
4016: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4017: LD_INT 67
4019: PPUSH
4020: LD_INT 115
4022: PPUSH
4023: LD_INT 3
4025: PPUSH
4026: CALL_OW 47
// bc_type = b_oil_power ;
4030: LD_ADDR_OWVAR 42
4034: PUSH
4035: LD_INT 26
4037: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4038: LD_INT 68
4040: PPUSH
4041: LD_INT 104
4043: PPUSH
4044: LD_INT 4
4046: PPUSH
4047: CALL_OW 47
// bc_type = b_breastwork ;
4051: LD_ADDR_OWVAR 42
4055: PUSH
4056: LD_INT 31
4058: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4059: LD_INT 60
4061: PPUSH
4062: LD_INT 91
4064: PPUSH
4065: LD_INT 3
4067: PPUSH
4068: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4072: LD_INT 73
4074: PPUSH
4075: LD_INT 112
4077: PPUSH
4078: LD_INT 5
4080: PPUSH
4081: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4085: LD_INT 66
4087: PPUSH
4088: LD_INT 118
4090: PPUSH
4091: LD_INT 5
4093: PPUSH
4094: CALL_OW 47
// end ;
4098: LD_VAR 0 1
4102: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4103: LD_INT 0
4105: PPUSH
4106: PPUSH
4107: PPUSH
4108: PPUSH
4109: PPUSH
// for unit in vsevolodTeam do
4110: LD_ADDR_VAR 0 2
4114: PUSH
4115: LD_EXP 52
4119: PUSH
4120: FOR_IN
4121: IFFALSE 4419
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 3
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 21
4140: PUSH
4141: LD_INT 3
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: LD_INT 30
4150: PUSH
4151: LD_INT 31
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: PPUSH
4163: CALL_OW 69
4167: PUSH
4168: FOR_IN
4169: IFFALSE 4211
// if not UnitsInside ( building ) then
4171: LD_VAR 0 4
4175: PPUSH
4176: CALL_OW 313
4180: NOT
4181: IFFALSE 4209
// begin PlaceHumanInBunker ( unit , building ) ;
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 4
4192: PPUSH
4193: CALL 12003 0 2
// SetClass ( unit , 1 ) ;
4197: LD_VAR 0 2
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 336
// end ;
4209: GO 4168
4211: POP
4212: POP
// if not IsInUnit ( unit ) then
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL_OW 310
4222: NOT
4223: IFFALSE 4417
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: LD_INT 22
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 21
4242: PUSH
4243: LD_INT 3
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 2
4252: PUSH
4253: LD_INT 30
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 30
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 30
4275: PUSH
4276: LD_INT 7
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PPUSH
4294: CALL_OW 69
4298: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4299: LD_ADDR_VAR 0 5
4303: PUSH
4304: LD_VAR 0 3
4308: PUSH
4309: LD_INT 1
4311: PPUSH
4312: LD_VAR 0 3
4316: PPUSH
4317: CALL_OW 12
4321: ARRAY
4322: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4323: LD_VAR 0 2
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4337: LD_VAR 0 5
4341: PPUSH
4342: CALL_OW 266
4346: PUSH
4347: LD_INT 0
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4370
4355: POP
// SetClass ( unit , 2 ) ; b_armoury :
4356: LD_VAR 0 2
4360: PPUSH
4361: LD_INT 2
4363: PPUSH
4364: CALL_OW 336
4368: GO 4417
4370: LD_INT 4
4372: DOUBLE
4373: EQUAL
4374: IFTRUE 4378
4376: GO 4393
4378: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4379: LD_VAR 0 2
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 336
4391: GO 4417
4393: LD_INT 7
4395: DOUBLE
4396: EQUAL
4397: IFTRUE 4401
4399: GO 4416
4401: POP
// SetClass ( unit , 4 ) ; end ;
4402: LD_VAR 0 2
4406: PPUSH
4407: LD_INT 4
4409: PPUSH
4410: CALL_OW 336
4414: GO 4417
4416: POP
// end ; end ;
4417: GO 4120
4419: POP
4420: POP
// end ; end_of_file
4421: LD_VAR 0 1
4425: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4426: LD_INT 0
4428: PPUSH
// remoteVehs = [ ] ;
4429: LD_ADDR_EXP 60
4433: PUSH
4434: EMPTY
4435: ST_TO_ADDR
// minesList = [ ] ;
4436: LD_ADDR_EXP 61
4440: PUSH
4441: EMPTY
4442: ST_TO_ADDR
// heikeGroup = [ ] ;
4443: LD_ADDR_EXP 58
4447: PUSH
4448: EMPTY
4449: ST_TO_ADDR
// PrepareXavierAr ;
4450: CALL 5973 0 0
// PrepareKabulBase ;
4454: CALL 5164 0 0
// end ;
4458: LD_VAR 0 1
4462: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4463: LD_INT 0
4465: PPUSH
4466: PPUSH
4467: PPUSH
// solds = [ ] ;
4468: LD_ADDR_VAR 0 3
4472: PUSH
4473: EMPTY
4474: ST_TO_ADDR
// uc_side = 2 ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_INT 2
4482: ST_TO_ADDR
// uc_nation = 2 ;
4483: LD_ADDR_OWVAR 21
4487: PUSH
4488: LD_INT 2
4490: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4491: LD_INT 0
4493: PPUSH
4494: LD_INT 1
4496: PPUSH
4497: CALL_OW 381
// for i := 1 to 2 do
4501: LD_ADDR_VAR 0 2
4505: PUSH
4506: DOUBLE
4507: LD_INT 1
4509: DEC
4510: ST_TO_ADDR
4511: LD_INT 2
4513: PUSH
4514: FOR_TO
4515: IFFALSE 4574
// begin solds = solds ^ CreateHuman ;
4517: LD_ADDR_VAR 0 3
4521: PUSH
4522: LD_VAR 0 3
4526: PUSH
4527: CALL_OW 44
4531: ADD
4532: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4533: LD_VAR 0 3
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4551: LD_VAR 0 3
4555: PUSH
4556: LD_VAR 0 2
4560: ARRAY
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT 0
4567: PPUSH
4568: CALL_OW 49
// end ;
4572: GO 4514
4574: POP
4575: POP
// result = solds ;
4576: LD_ADDR_VAR 0 1
4580: PUSH
4581: LD_VAR 0 3
4585: ST_TO_ADDR
// end ;
4586: LD_VAR 0 1
4590: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4591: LD_INT 0
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
4600: PPUSH
// uc_side = 8 ;
4601: LD_ADDR_OWVAR 20
4605: PUSH
4606: LD_INT 8
4608: ST_TO_ADDR
// uc_nation = 2 ;
4609: LD_ADDR_OWVAR 21
4613: PUSH
4614: LD_INT 2
4616: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4617: LD_ADDR_EXP 56
4621: PUSH
4622: LD_STRING Heike
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 0
4630: PPUSH
4631: CALL 11401 0 3
4635: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4636: LD_ADDR_VAR 0 5
4640: PUSH
4641: LD_INT 27
4643: PUSH
4644: LD_INT 28
4646: PUSH
4647: LD_INT 26
4649: PUSH
4650: LD_INT 23
4652: PUSH
4653: LD_INT 25
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
4663: LD_INT 14
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_VAR 0 5
4676: PUSH
4677: LD_INT 1
4679: PPUSH
4680: LD_VAR 0 5
4684: PPUSH
4685: CALL_OW 12
4689: ARRAY
4690: PPUSH
4691: LD_INT 65
4693: PPUSH
4694: CALL 45164 0 5
// heikeVehicle = CreateVehicle ;
4698: LD_ADDR_EXP 57
4702: PUSH
4703: CALL_OW 45
4707: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
4708: LD_EXP 57
4712: PPUSH
4713: LD_INT 20
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
4723: LD_EXP 57
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
4735: LD_EXP 56
4739: PPUSH
4740: LD_EXP 57
4744: PPUSH
4745: CALL_OW 52
// uc_side = 2 ;
4749: LD_ADDR_OWVAR 20
4753: PUSH
4754: LD_INT 2
4756: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
4757: LD_ADDR_VAR 0 6
4761: PUSH
4762: LD_EXP 29
4766: ST_TO_ADDR
// if not heikeHeavyLosses then
4767: LD_EXP 5
4771: NOT
4772: IFFALSE 4790
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
4774: LD_ADDR_VAR 0 6
4778: PUSH
4779: LD_VAR 0 6
4783: PUSH
4784: LD_EXP 32
4788: PLUS
4789: ST_TO_ADDR
// mortarAmount = heikeMortars ;
4790: LD_ADDR_VAR 0 7
4794: PUSH
4795: LD_EXP 30
4799: ST_TO_ADDR
// if not heikeHeavyLosses then
4800: LD_EXP 5
4804: NOT
4805: IFFALSE 4823
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
4807: LD_ADDR_VAR 0 7
4811: PUSH
4812: LD_VAR 0 7
4816: PUSH
4817: LD_EXP 33
4821: PLUS
4822: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
4823: LD_ADDR_VAR 0 8
4827: PUSH
4828: LD_EXP 31
4832: ST_TO_ADDR
// if not heikeHeavyLosses then
4833: LD_EXP 5
4837: NOT
4838: IFFALSE 4856
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
4840: LD_ADDR_VAR 0 8
4844: PUSH
4845: LD_VAR 0 8
4849: PUSH
4850: LD_EXP 34
4854: PLUS
4855: ST_TO_ADDR
// for i := 1 to soldAmount do
4856: LD_ADDR_VAR 0 2
4860: PUSH
4861: DOUBLE
4862: LD_INT 1
4864: DEC
4865: ST_TO_ADDR
4866: LD_VAR 0 6
4870: PUSH
4871: FOR_TO
4872: IFFALSE 4929
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4874: LD_INT 0
4876: PPUSH
4877: LD_EXP 27
4881: PPUSH
4882: CALL_OW 381
// un = CreateHuman ;
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: CALL_OW 44
4895: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
4896: LD_ADDR_EXP 58
4900: PUSH
4901: LD_EXP 58
4905: PUSH
4906: LD_VAR 0 3
4910: ADD
4911: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
4912: LD_VAR 0 3
4916: PPUSH
4917: LD_INT 20
4919: PPUSH
4920: LD_INT 0
4922: PPUSH
4923: CALL_OW 49
// end ;
4927: GO 4871
4929: POP
4930: POP
// for i := 1 to mortarAmount do
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: DOUBLE
4937: LD_INT 1
4939: DEC
4940: ST_TO_ADDR
4941: LD_VAR 0 7
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5007
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
4949: LD_INT 0
4951: PPUSH
4952: LD_INT 8
4954: PPUSH
4955: LD_EXP 27
4959: PPUSH
4960: CALL_OW 380
// un = CreateHuman ;
4964: LD_ADDR_VAR 0 3
4968: PUSH
4969: CALL_OW 44
4973: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
4974: LD_ADDR_EXP 58
4978: PUSH
4979: LD_EXP 58
4983: PUSH
4984: LD_VAR 0 3
4988: ADD
4989: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
4990: LD_VAR 0 3
4994: PPUSH
4995: LD_INT 20
4997: PPUSH
4998: LD_INT 0
5000: PPUSH
5001: CALL_OW 49
// end ;
5005: GO 4946
5007: POP
5008: POP
// for i := 1 to vehicleAmount do
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: DOUBLE
5015: LD_INT 1
5017: DEC
5018: ST_TO_ADDR
5019: LD_VAR 0 8
5023: PUSH
5024: FOR_TO
5025: IFFALSE 5157
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5027: LD_INT 0
5029: PPUSH
5030: LD_EXP 27
5034: PPUSH
5035: CALL_OW 383
// un = CreateHuman ;
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: CALL_OW 44
5048: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5049: LD_ADDR_EXP 58
5053: PUSH
5054: LD_EXP 58
5058: PUSH
5059: LD_VAR 0 3
5063: ADD
5064: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5065: LD_INT 14
5067: PPUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: LD_VAR 0 5
5078: PUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_VAR 0 5
5086: PPUSH
5087: CALL_OW 12
5091: ARRAY
5092: PPUSH
5093: LD_INT 65
5095: PPUSH
5096: CALL 45164 0 5
// veh = CreateVehicle ;
5100: LD_ADDR_VAR 0 4
5104: PUSH
5105: CALL_OW 45
5109: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5110: LD_ADDR_EXP 58
5114: PUSH
5115: LD_EXP 58
5119: PUSH
5120: LD_VAR 0 4
5124: ADD
5125: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 20
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_VAR 0 4
5150: PPUSH
5151: CALL_OW 52
// end ;
5155: GO 5024
5157: POP
5158: POP
// end ;
5159: LD_VAR 0 1
5163: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5164: LD_INT 0
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
5170: PPUSH
// kabulBaseUnits = [ ] ;
5171: LD_ADDR_EXP 59
5175: PUSH
5176: EMPTY
5177: ST_TO_ADDR
// uc_side = 2 ;
5178: LD_ADDR_OWVAR 20
5182: PUSH
5183: LD_INT 2
5185: ST_TO_ADDR
// uc_nation = 2 ;
5186: LD_ADDR_OWVAR 21
5190: PUSH
5191: LD_INT 2
5193: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5194: LD_ADDR_EXP 59
5198: PUSH
5199: LD_INT 2
5201: PPUSH
5202: LD_INT 10
5204: PPUSH
5205: LD_STRING newkabul
5207: PPUSH
5208: LD_EXP 27
5212: PPUSH
5213: LD_INT 5000
5215: PUSH
5216: LD_INT 5000
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: LD_INT 2
5229: PPUSH
5230: LD_INT 17
5232: PUSH
5233: LD_INT 3
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: LD_INT 8
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL 12378 0 7
5252: ST_TO_ADDR
// case Difficulty of 2 :
5253: LD_OWVAR 67
5257: PUSH
5258: LD_INT 2
5260: DOUBLE
5261: EQUAL
5262: IFTRUE 5266
5264: GO 5282
5266: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5267: LD_INT 49
5269: PPUSH
5270: LD_INT 2
5272: PPUSH
5273: LD_INT 2
5275: PPUSH
5276: CALL_OW 322
// end ; 3 :
5280: GO 5346
5282: LD_INT 3
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5345
5290: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5291: LD_INT 49
5293: PPUSH
5294: LD_INT 2
5296: PPUSH
5297: LD_INT 2
5299: PPUSH
5300: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5304: LD_INT 50
5306: PPUSH
5307: LD_INT 2
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5317: LD_INT 52
5319: PPUSH
5320: LD_INT 2
5322: PPUSH
5323: LD_INT 2
5325: PPUSH
5326: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5330: LD_INT 61
5332: PPUSH
5333: LD_INT 2
5335: PPUSH
5336: LD_INT 1
5338: PPUSH
5339: CALL_OW 322
// end ; end ;
5343: GO 5346
5345: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_INT 27
5353: PUSH
5354: LD_INT 23
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 28
5362: PUSH
5363: LD_INT 26
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5373: LD_ADDR_VAR 0 3
5377: PUSH
5378: LD_INT 22
5380: PUSH
5381: LD_INT 2
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: LD_INT 30
5390: PUSH
5391: LD_INT 32
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: LD_INT 35
5403: PUSH
5404: LD_INT 30
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: PUSH
5425: FOR_IN
5426: IFFALSE 5458
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5428: LD_VAR 0 3
5432: PPUSH
5433: LD_VAR 0 2
5437: PUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 2
5445: PPUSH
5446: CALL_OW 12
5450: ARRAY
5451: PPUSH
5452: CALL_OW 431
5456: GO 5425
5458: POP
5459: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5460: LD_INT 22
5462: PUSH
5463: LD_INT 2
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 21
5472: PUSH
5473: LD_INT 3
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PPUSH
5484: CALL_OW 69
5488: PPUSH
5489: LD_EXP 27
5493: PPUSH
5494: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5498: LD_ADDR_VAR 0 4
5502: PUSH
5503: LD_INT 22
5505: PUSH
5506: LD_INT 2
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 2
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 50
5525: PUSH
5526: EMPTY
5527: LIST
5528: PUSH
5529: LD_INT 34
5531: PUSH
5532: LD_INT 31
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: PPUSH
5545: CALL_OW 69
5549: PUSH
5550: FOR_IN
5551: IFFALSE 5581
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_EXP 27
5560: PPUSH
5561: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5565: CALL_OW 44
5569: PPUSH
5570: LD_VAR 0 4
5574: PPUSH
5575: CALL_OW 52
// end ;
5579: GO 5550
5581: POP
5582: POP
// if Difficulty = 1 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 1
5590: EQUAL
5591: IFFALSE 5641
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5593: LD_INT 0
5595: PPUSH
5596: LD_EXP 27
5600: PPUSH
5601: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5605: CALL_OW 44
5609: PPUSH
5610: LD_INT 63
5612: PPUSH
5613: CALL 12003 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5617: CALL_OW 44
5621: PPUSH
5622: LD_INT 66
5624: PPUSH
5625: CALL 12003 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5629: CALL_OW 44
5633: PPUSH
5634: LD_INT 68
5636: PPUSH
5637: CALL 12003 0 2
// end ; if Difficulty = 2 then
5641: LD_OWVAR 67
5645: PUSH
5646: LD_INT 2
5648: EQUAL
5649: IFFALSE 5714
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5651: LD_INT 0
5653: PPUSH
5654: LD_EXP 27
5658: PPUSH
5659: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5663: CALL_OW 44
5667: PPUSH
5668: LD_INT 63
5670: PPUSH
5671: CALL 12003 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5675: CALL_OW 44
5679: PPUSH
5680: LD_INT 66
5682: PPUSH
5683: CALL 12003 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5687: LD_INT 0
5689: PPUSH
5690: LD_INT 8
5692: PPUSH
5693: LD_EXP 27
5697: PPUSH
5698: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5702: CALL_OW 44
5706: PPUSH
5707: LD_INT 68
5709: PPUSH
5710: CALL 12003 0 2
// end ; if Difficulty = 3 then
5714: LD_OWVAR 67
5718: PUSH
5719: LD_INT 3
5721: EQUAL
5722: IFFALSE 5775
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5724: LD_INT 0
5726: PPUSH
5727: LD_INT 8
5729: PPUSH
5730: LD_EXP 27
5734: PPUSH
5735: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5739: CALL_OW 44
5743: PPUSH
5744: LD_INT 63
5746: PPUSH
5747: CALL 12003 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5751: CALL_OW 44
5755: PPUSH
5756: LD_INT 66
5758: PPUSH
5759: CALL 12003 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5763: CALL_OW 44
5767: PPUSH
5768: LD_INT 68
5770: PPUSH
5771: CALL 12003 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 7 ] [ Difficulty ] ) ;
5775: LD_INT 14
5777: PPUSH
5778: LD_INT 10
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: LD_INT 5
5786: PUSH
5787: LD_INT 7
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: PUSH
5795: LD_OWVAR 67
5799: ARRAY
5800: PLUS
5801: PPUSH
5802: CALL 5879 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 9 ] [ Difficulty ] ) ;
5806: LD_INT 15
5808: PPUSH
5809: LD_INT 20
5811: PUSH
5812: LD_INT 4
5814: PUSH
5815: LD_INT 6
5817: PUSH
5818: LD_INT 9
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: LD_OWVAR 67
5830: ARRAY
5831: PLUS
5832: PPUSH
5833: CALL 5879 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
5837: LD_INT 16
5839: PPUSH
5840: LD_INT 10
5842: PPUSH
5843: CALL 5879 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
5847: LD_INT 17
5849: PPUSH
5850: LD_INT 5
5852: PPUSH
5853: CALL 5879 0 2
// if not savedVsevolod then
5857: LD_EXP 1
5861: NOT
5862: IFFALSE 5874
// CreateMineField ( MinefieldExtraArea , 1 ) ;
5864: LD_INT 18
5866: PPUSH
5867: LD_INT 1
5869: PPUSH
5870: CALL 5879 0 2
// end ;
5874: LD_VAR 0 1
5878: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
5879: LD_INT 0
5881: PPUSH
5882: PPUSH
5883: PPUSH
// for i = 1 to amount do
5884: LD_ADDR_VAR 0 4
5888: PUSH
5889: DOUBLE
5890: LD_INT 1
5892: DEC
5893: ST_TO_ADDR
5894: LD_VAR 0 2
5898: PUSH
5899: FOR_TO
5900: IFFALSE 5966
// begin randPos = RandHexArea ( area , false ) ;
5902: LD_ADDR_VAR 0 5
5906: PUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: LD_INT 0
5914: PPUSH
5915: CALL_OW 16
5919: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
5920: LD_VAR 0 5
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: LD_VAR 0 5
5933: PUSH
5934: LD_INT 2
5936: ARRAY
5937: PPUSH
5938: LD_INT 2
5940: PPUSH
5941: LD_INT 0
5943: PPUSH
5944: CALL_OW 454
// minesList = minesList ^ randPos ;
5948: LD_ADDR_EXP 61
5952: PUSH
5953: LD_EXP 61
5957: PUSH
5958: LD_VAR 0 5
5962: ADD
5963: ST_TO_ADDR
// end ;
5964: GO 5899
5966: POP
5967: POP
// end ;
5968: LD_VAR 0 3
5972: RET
// function PrepareXavierAr ; begin
5973: LD_INT 0
5975: PPUSH
// uc_side = 5 ;
5976: LD_ADDR_OWVAR 20
5980: PUSH
5981: LD_INT 5
5983: ST_TO_ADDR
// uc_nation = 2 ;
5984: LD_ADDR_OWVAR 21
5988: PUSH
5989: LD_INT 2
5991: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
5992: LD_ADDR_EXP 55
5996: PUSH
5997: LD_STRING Xavier
5999: PPUSH
6000: LD_INT 0
6002: PPUSH
6003: LD_INT 0
6005: PPUSH
6006: CALL 11401 0 3
6010: ST_TO_ADDR
// end ;
6011: LD_VAR 0 1
6015: RET
// every 0 0$1 do
6016: GO 6018
6018: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6019: LD_ADDR_EXP 60
6023: PUSH
6024: LD_INT 22
6026: PUSH
6027: LD_INT 2
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 21
6036: PUSH
6037: LD_INT 2
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 50
6046: PUSH
6047: EMPTY
6048: LIST
6049: PUSH
6050: LD_INT 59
6052: PUSH
6053: EMPTY
6054: LIST
6055: PUSH
6056: LD_INT 34
6058: PUSH
6059: LD_INT 31
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: PPUSH
6073: CALL_OW 69
6077: ST_TO_ADDR
// enable ;
6078: ENABLE
// end ; end_of_file
6079: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6080: LD_INT 0
6082: PPUSH
6083: PPUSH
6084: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6085: LD_ADDR_VAR 0 3
6089: PUSH
6090: LD_INT 6
6092: PPUSH
6093: LD_INT 22
6095: PUSH
6096: LD_INT 3
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 50
6105: PUSH
6106: EMPTY
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_EXP 37
6117: PUSH
6118: LD_EXP 48
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: DIFF
6127: PPUSH
6128: CALL_OW 70
6132: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6133: LD_EXP 37
6137: PPUSH
6138: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6142: LD_EXP 49
6146: PPUSH
6147: LD_STRING DStart-Pla-1
6149: PPUSH
6150: CALL_OW 94
// if savedVsevolod then
6154: LD_EXP 1
6158: IFFALSE 7387
// begin arSolds = PrepareIntroArabians ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: CALL 4463 0 0
6169: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6170: LD_EXP 49
6174: PPUSH
6175: LD_STRING DStartVS-Pla-1
6177: PPUSH
6178: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6182: LD_EXP 49
6186: PPUSH
6187: LD_STRING DStart2-Pla-1
6189: PPUSH
6190: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6194: LD_EXP 37
6198: PPUSH
6199: LD_STRING DStart2-Bur-1
6201: PPUSH
6202: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6206: LD_INT 92
6208: PPUSH
6209: LD_INT 133
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: LD_INT 9
6217: NEG
6218: PPUSH
6219: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6223: LD_INT 103
6225: PPUSH
6226: LD_INT 133
6228: PPUSH
6229: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 93
6244: PPUSH
6245: LD_INT 134
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: CALL 12232 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6255: LD_VAR 0 2
6259: PUSH
6260: LD_INT 2
6262: ARRAY
6263: PPUSH
6264: LD_INT 96
6266: PPUSH
6267: LD_INT 134
6269: PPUSH
6270: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6274: LD_INT 35
6276: PPUSH
6277: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6281: LD_VAR 0 2
6285: PUSH
6286: LD_INT 1
6288: ARRAY
6289: PPUSH
6290: LD_INT 93
6292: PPUSH
6293: LD_INT 134
6295: PPUSH
6296: CALL_OW 297
6300: PUSH
6301: LD_INT 2
6303: LESS
6304: IFFALSE 6274
// wait ( 0 0$5 ) ;
6306: LD_INT 175
6308: PPUSH
6309: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6313: LD_VAR 0 2
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PUSH
6322: LD_VAR 0 2
6326: PUSH
6327: LD_INT 2
6329: ARRAY
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PPUSH
6335: LD_INT 107
6337: PPUSH
6338: LD_INT 134
6340: PPUSH
6341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6345: LD_INT 35
6347: PPUSH
6348: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6352: LD_VAR 0 2
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 107
6363: PPUSH
6364: LD_INT 134
6366: PPUSH
6367: CALL_OW 297
6371: PUSH
6372: LD_INT 5
6374: LESS
6375: IFFALSE 6345
// ComCrawl ( arSolds ) ;
6377: LD_VAR 0 2
6381: PPUSH
6382: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6386: LD_INT 96
6388: PPUSH
6389: LD_INT 161
6391: PPUSH
6392: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6396: LD_EXP 48
6400: PPUSH
6401: LD_INT 97
6403: PPUSH
6404: LD_INT 160
6406: PPUSH
6407: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6411: LD_EXP 48
6415: PPUSH
6416: LD_EXP 37
6420: PPUSH
6421: CALL_OW 179
// if IsInUnit ( Burlak ) then
6425: LD_EXP 37
6429: PPUSH
6430: CALL_OW 310
6434: IFFALSE 6445
// ComExitVehicle ( Burlak ) ;
6436: LD_EXP 37
6440: PPUSH
6441: CALL_OW 121
// wait ( 0 0$01 ) ;
6445: LD_INT 35
6447: PPUSH
6448: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6452: LD_EXP 37
6456: PPUSH
6457: LD_INT 96
6459: PPUSH
6460: LD_INT 162
6462: PPUSH
6463: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6467: LD_EXP 37
6471: PPUSH
6472: LD_EXP 48
6476: PPUSH
6477: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6481: LD_INT 35
6483: PPUSH
6484: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6488: LD_EXP 37
6492: PPUSH
6493: LD_EXP 48
6497: PPUSH
6498: CALL_OW 296
6502: PUSH
6503: LD_INT 5
6505: LESSEQUAL
6506: IFFALSE 6481
// CenterOnXY ( 96 , 160 ) ;
6508: LD_INT 96
6510: PPUSH
6511: LD_INT 160
6513: PPUSH
6514: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING DMeetVsevolodVS-Bur-1
6525: PPUSH
6526: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6530: LD_INT 52
6532: PPUSH
6533: LD_INT 59
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: LD_INT 14
6541: NEG
6542: PPUSH
6543: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6547: LD_INT 58
6549: PPUSH
6550: LD_INT 54
6552: PPUSH
6553: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6557: LD_EXP 48
6561: PPUSH
6562: LD_STRING DMeetVsevolodVS-Vse-1
6564: PPUSH
6565: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6569: LD_EXP 37
6573: PUSH
6574: LD_EXP 48
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6587: LD_EXP 37
6591: PPUSH
6592: LD_STRING DMeetVsevolodVS-Bur-2
6594: PPUSH
6595: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6599: LD_INT 61
6601: PPUSH
6602: LD_INT 102
6604: PPUSH
6605: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6609: LD_EXP 48
6613: PPUSH
6614: LD_STRING DMeetVsevolodVS-Vse-2
6616: PPUSH
6617: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6621: LD_EXP 37
6625: PUSH
6626: LD_EXP 48
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PPUSH
6635: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6639: LD_INT 52
6641: PPUSH
6642: LD_INT 59
6644: PPUSH
6645: LD_INT 3
6647: PPUSH
6648: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
6652: LD_INT 92
6654: PPUSH
6655: LD_INT 133
6657: PPUSH
6658: LD_INT 3
6660: PPUSH
6661: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6665: LD_INT 3
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: LD_INT 1
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_INT 21
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 58
6698: PUSH
6699: EMPTY
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PPUSH
6706: CALL_OW 72
6710: PUSH
6711: LD_VAR 0 3
6715: PPUSH
6716: LD_INT 21
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PPUSH
6726: CALL_OW 72
6730: AND
6731: IFFALSE 6795
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
6733: LD_VAR 0 3
6737: PPUSH
6738: LD_INT 21
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: CALL_OW 72
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: LD_VAR 0 3
6761: PPUSH
6762: LD_INT 21
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 58
6774: PUSH
6775: EMPTY
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 72
6786: PUSH
6787: LD_INT 1
6789: ARRAY
6790: PPUSH
6791: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
6795: LD_VAR 0 3
6799: PPUSH
6800: LD_EXP 37
6804: PPUSH
6805: CALL_OW 250
6809: PPUSH
6810: LD_EXP 37
6814: PPUSH
6815: CALL_OW 251
6819: PPUSH
6820: CALL_OW 171
// wait ( 0 0$6 ) ;
6824: LD_INT 210
6826: PPUSH
6827: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
6831: LD_EXP 37
6835: PPUSH
6836: LD_INT 98
6838: PPUSH
6839: LD_INT 143
6841: PPUSH
6842: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
6846: LD_EXP 48
6850: PPUSH
6851: LD_INT 98
6853: PPUSH
6854: LD_INT 143
6856: PPUSH
6857: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
6861: LD_VAR 0 3
6865: PPUSH
6866: LD_INT 98
6868: PPUSH
6869: LD_INT 143
6871: PPUSH
6872: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6876: LD_INT 35
6878: PPUSH
6879: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
6883: LD_EXP 37
6887: PPUSH
6888: LD_INT 98
6890: PPUSH
6891: LD_INT 143
6893: PPUSH
6894: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
6898: LD_EXP 48
6902: PPUSH
6903: LD_INT 98
6905: PPUSH
6906: LD_INT 143
6908: PPUSH
6909: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
6913: LD_EXP 48
6917: PPUSH
6918: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
6922: LD_EXP 37
6926: PPUSH
6927: LD_INT 98
6929: PPUSH
6930: LD_INT 143
6932: PPUSH
6933: CALL_OW 297
6937: PUSH
6938: LD_INT 4
6940: LESSEQUAL
6941: PUSH
6942: LD_EXP 48
6946: PPUSH
6947: LD_INT 98
6949: PPUSH
6950: LD_INT 143
6952: PPUSH
6953: CALL_OW 297
6957: PUSH
6958: LD_INT 4
6960: LESSEQUAL
6961: AND
6962: IFFALSE 6876
// CenterOnXY ( 93 , 134 ) ;
6964: LD_INT 93
6966: PPUSH
6967: LD_INT 134
6969: PPUSH
6970: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
6974: LD_EXP 48
6978: PPUSH
6979: LD_INT 82
6981: PPUSH
6982: LD_INT 109
6984: PPUSH
6985: CALL_OW 111
// wait ( 0 0$2 ) ;
6989: LD_INT 70
6991: PPUSH
6992: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
6996: LD_EXP 37
7000: PPUSH
7001: LD_INT 82
7003: PPUSH
7004: LD_INT 109
7006: PPUSH
7007: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7011: LD_VAR 0 3
7015: PPUSH
7016: LD_INT 82
7018: PPUSH
7019: LD_INT 109
7021: PPUSH
7022: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7026: LD_INT 35
7028: PPUSH
7029: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7033: LD_EXP 48
7037: PPUSH
7038: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7042: LD_EXP 48
7046: PPUSH
7047: LD_INT 93
7049: PPUSH
7050: LD_INT 134
7052: PPUSH
7053: CALL_OW 297
7057: PUSH
7058: LD_INT 2
7060: LESSEQUAL
7061: IFFALSE 7026
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7063: LD_INT 93
7065: PPUSH
7066: LD_INT 134
7068: PPUSH
7069: LD_INT 2
7071: PPUSH
7072: CALL_OW 456
// wait ( 0 0$1 ) ;
7076: LD_INT 35
7078: PPUSH
7079: CALL_OW 67
// SetLives ( Vsevolod , 250 ) ;
7083: LD_EXP 48
7087: PPUSH
7088: LD_INT 250
7090: PPUSH
7091: CALL_OW 234
// wait ( 0 0$1 ) ;
7095: LD_INT 35
7097: PPUSH
7098: CALL_OW 67
// ComStop ( Burlak ) ;
7102: LD_EXP 37
7106: PPUSH
7107: CALL_OW 141
// ComStop ( Vsevolod ) ;
7111: LD_EXP 48
7115: PPUSH
7116: CALL_OW 141
// ComStop ( burlakUnits ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: CALL_OW 141
// DialogueOn ;
7129: CALL_OW 6
// if Kirilenkova then
7133: LD_EXP 45
7137: IFFALSE 7151
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7139: LD_EXP 45
7143: PPUSH
7144: LD_STRING DStasisVS-Kir-1
7146: PPUSH
7147: CALL_OW 88
// if Titov then
7151: LD_EXP 42
7155: IFFALSE 7169
// Say ( Titov , DStasisVS-Tit-1 ) ;
7157: LD_EXP 42
7161: PPUSH
7162: LD_STRING DStasisVS-Tit-1
7164: PPUSH
7165: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7169: LD_EXP 37
7173: PPUSH
7174: LD_STRING DStasisVS-Bur-1
7176: PPUSH
7177: CALL_OW 88
// if Titov then
7181: LD_EXP 42
7185: IFFALSE 7201
// Say ( Titov , DStasisVS-Tit-2 ) else
7187: LD_EXP 42
7191: PPUSH
7192: LD_STRING DStasisVS-Tit-2
7194: PPUSH
7195: CALL_OW 88
7199: GO 7219
// if Kirilenkova then
7201: LD_EXP 45
7205: IFFALSE 7219
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7207: LD_EXP 45
7211: PPUSH
7212: LD_STRING DStasisVS-Kir-2
7214: PPUSH
7215: CALL_OW 88
// if Titov or Kirilenkova then
7219: LD_EXP 42
7223: PUSH
7224: LD_EXP 45
7228: OR
7229: IFFALSE 7243
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7231: LD_EXP 37
7235: PPUSH
7236: LD_STRING DStasisVS-Bur-2
7238: PPUSH
7239: CALL_OW 88
// wait ( 0 0$2 ) ;
7243: LD_INT 70
7245: PPUSH
7246: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7250: LD_EXP 50
7254: PPUSH
7255: LD_STRING DStasisVS-Pop-2
7257: PPUSH
7258: CALL_OW 94
// if Gleb then
7262: LD_EXP 40
7266: IFFALSE 7280
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7268: LD_EXP 40
7272: PPUSH
7273: LD_STRING DStasisVS-Glb-2
7275: PPUSH
7276: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 2
7285: PPUSH
7286: LD_INT 2
7288: PPUSH
7289: LD_INT 1
7291: PPUSH
7292: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7296: LD_INT 2
7298: PPUSH
7299: LD_INT 2
7301: PPUSH
7302: CALL_OW 343
// DialogueOff ;
7306: CALL_OW 7
// InGameOff ;
7310: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7314: LD_EXP 48
7318: PPUSH
7319: LD_INT 250
7321: PPUSH
7322: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7326: LD_STRING MVsevolod
7328: PPUSH
7329: CALL_OW 337
// wait ( 0 0$2 ) ;
7333: LD_INT 70
7335: PPUSH
7336: CALL_OW 67
// ComWalk ( arSolds ) ;
7340: LD_VAR 0 2
7344: PPUSH
7345: CALL_OW 138
// wait ( 0 0$01 ) ;
7349: LD_INT 35
7351: PPUSH
7352: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7356: LD_VAR 0 2
7360: PPUSH
7361: LD_EXP 48
7365: PPUSH
7366: CALL_OW 250
7370: PPUSH
7371: LD_EXP 48
7375: PPUSH
7376: CALL_OW 251
7380: PPUSH
7381: CALL_OW 174
// end else
7385: GO 7438
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7387: LD_EXP 49
7391: PPUSH
7392: LD_STRING DStartNV-Pla-1
7394: PPUSH
7395: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7399: LD_EXP 49
7403: PPUSH
7404: LD_STRING DStart2-Pla-1
7406: PPUSH
7407: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_STRING DStart2-Bur-1
7418: PPUSH
7419: CALL_OW 88
// DialogueOff ;
7423: CALL_OW 7
// InGameOff ;
7427: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7431: LD_STRING MStart
7433: PPUSH
7434: CALL_OW 337
// end ; SaveForQuickRestart ;
7438: CALL_OW 22
// enableCounter = true ;
7442: LD_ADDR_EXP 18
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7450: LD_INT 1
7452: PPUSH
7453: CALL 18050 0 1
7457: PPUSH
7458: CALL 17894 0 1
// end ;
7462: LD_VAR 0 1
7466: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7467: LD_EXP 48
7471: PUSH
7472: LD_EXP 48
7476: PPUSH
7477: CALL_OW 256
7481: PUSH
7482: LD_INT 250
7484: GREATEREQUAL
7485: AND
7486: IFFALSE 7563
7488: GO 7490
7490: DISABLE
// begin DialogueOn ;
7491: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7495: LD_EXP 48
7499: PPUSH
7500: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING DSeviSaved-Bur-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7516: LD_EXP 48
7520: PPUSH
7521: LD_STRING DSeviSaved-Vse-1
7523: PPUSH
7524: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING DSeviSaved-Bur-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7540: LD_EXP 48
7544: PPUSH
7545: LD_STRING DSeviSaved-Vse-2
7547: PPUSH
7548: CALL_OW 88
// DialogueOff ;
7552: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7556: LD_STRING MStart
7558: PPUSH
7559: CALL_OW 337
// end ;
7563: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7564: LD_EXP 45
7568: PUSH
7569: LD_EXP 45
7573: PPUSH
7574: CALL_OW 301
7578: NOT
7579: AND
7580: IFFALSE 8276
7582: GO 7584
7584: DISABLE
7585: LD_INT 0
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7591: LD_ADDR_VAR 0 1
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_INT 2
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 50
7608: PUSH
7609: EMPTY
7610: LIST
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: LD_INT 59
7617: PUSH
7618: EMPTY
7619: LIST
7620: PUSH
7621: LD_INT 21
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 69
7656: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
7664: LD_EXP 45
7668: PPUSH
7669: CALL_OW 302
7673: PUSH
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_EXP 45
7683: PPUSH
7684: CALL_OW 74
7688: PPUSH
7689: LD_EXP 45
7693: PPUSH
7694: CALL_OW 296
7698: PUSH
7699: LD_INT 12
7701: GREATER
7702: AND
7703: IFFALSE 7657
// if IsInUnit ( Kirilenkova ) then
7705: LD_EXP 45
7709: PPUSH
7710: CALL_OW 310
7714: IFFALSE 7763
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
7716: LD_EXP 55
7720: PPUSH
7721: LD_EXP 45
7725: PPUSH
7726: CALL_OW 310
7730: PPUSH
7731: CALL_OW 250
7735: PPUSH
7736: LD_EXP 45
7740: PPUSH
7741: CALL_OW 310
7745: PPUSH
7746: CALL_OW 251
7750: PPUSH
7751: LD_INT 5
7753: PPUSH
7754: LD_INT 1
7756: PPUSH
7757: CALL_OW 50
7761: GO 7798
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
7763: LD_EXP 55
7767: PPUSH
7768: LD_EXP 45
7772: PPUSH
7773: CALL_OW 250
7777: PPUSH
7778: LD_EXP 45
7782: PPUSH
7783: CALL_OW 251
7787: PPUSH
7788: LD_INT 5
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL_OW 50
// xavierSpawned = true ;
7798: LD_ADDR_EXP 11
7802: PUSH
7803: LD_INT 1
7805: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7806: LD_INT 70
7808: PPUSH
7809: CALL_OW 67
// InGameOn ;
7813: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
7817: LD_EXP 55
7821: PPUSH
7822: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
7826: LD_EXP 55
7830: PPUSH
7831: LD_EXP 45
7835: PPUSH
7836: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
7840: LD_EXP 45
7844: PPUSH
7845: LD_EXP 55
7849: PPUSH
7850: CALL_OW 119
// DialogueOn ;
7854: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
7858: LD_EXP 55
7862: PPUSH
7863: LD_STRING DMeetXavier-Xav-1
7865: PPUSH
7866: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
7870: LD_EXP 45
7874: PPUSH
7875: LD_STRING DMeetXavier-Kir-1
7877: PPUSH
7878: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
7882: LD_EXP 55
7886: PPUSH
7887: LD_STRING DMeetXavier-Xav-2
7889: PPUSH
7890: CALL_OW 88
// case Query ( QXavier ) of 1 :
7894: LD_STRING QXavier
7896: PPUSH
7897: CALL_OW 97
7901: PUSH
7902: LD_INT 1
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 8105
7910: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
7911: LD_EXP 37
7915: PPUSH
7916: LD_STRING DQrXavier#1-Bur-1
7918: PPUSH
7919: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
7923: LD_EXP 45
7927: PPUSH
7928: LD_STRING DQrXavier#1-Kir-1
7930: PPUSH
7931: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
7935: LD_EXP 55
7939: PPUSH
7940: LD_STRING DQrXavier#1-Xav-1
7942: PPUSH
7943: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
7947: LD_EXP 45
7951: PPUSH
7952: LD_STRING DQrXavier#1-Kir-2
7954: PPUSH
7955: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
7959: LD_EXP 55
7963: PPUSH
7964: LD_STRING DQrXavier#1-Xav-2
7966: PPUSH
7967: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
7971: LD_EXP 45
7975: PPUSH
7976: LD_STRING DQrXavier#1-Kir-3
7978: PPUSH
7979: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
7983: LD_EXP 55
7987: PPUSH
7988: LD_STRING DQrXavier#1-Xav-3
7990: PPUSH
7991: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
7995: LD_EXP 45
7999: PPUSH
8000: LD_STRING DQrXavier#1-Kir-4
8002: PPUSH
8003: CALL_OW 88
// if IsOK ( Gleb ) then
8007: LD_EXP 40
8011: PPUSH
8012: CALL_OW 302
8016: IFFALSE 8030
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8018: LD_EXP 40
8022: PPUSH
8023: LD_STRING DQrXavier#1-Glb-4
8025: PPUSH
8026: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8030: LD_ADDR_VAR 0 4
8034: PUSH
8035: LD_EXP 55
8039: PPUSH
8040: CALL_OW 254
8044: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8045: LD_ADDR_VAR 0 2
8049: PUSH
8050: LD_EXP 55
8054: PPUSH
8055: CALL_OW 250
8059: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8060: LD_ADDR_VAR 0 3
8064: PUSH
8065: LD_EXP 55
8069: PPUSH
8070: CALL_OW 251
8074: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8075: LD_EXP 55
8079: PPUSH
8080: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8084: LD_VAR 0 2
8088: PPUSH
8089: LD_VAR 0 3
8093: PPUSH
8094: LD_VAR 0 4
8098: PPUSH
8099: CALL 1153 0 3
// end ; 2 :
8103: GO 8268
8105: LD_INT 2
8107: DOUBLE
8108: EQUAL
8109: IFTRUE 8113
8111: GO 8267
8113: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8114: LD_EXP 37
8118: PPUSH
8119: LD_STRING DQrXavier#2-Bur-1
8121: PPUSH
8122: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8126: LD_EXP 45
8130: PPUSH
8131: LD_STRING DQrXavier#2-Kir-1
8133: PPUSH
8134: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8138: LD_EXP 55
8142: PPUSH
8143: LD_STRING DQrXavier#2-Xav-1
8145: PPUSH
8146: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8150: LD_EXP 45
8154: PPUSH
8155: LD_STRING DQrXavier#2-Kir-2
8157: PPUSH
8158: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8162: LD_EXP 55
8166: PPUSH
8167: LD_STRING DQrXavier#2-Xav-2
8169: PPUSH
8170: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8174: LD_EXP 45
8178: PPUSH
8179: LD_STRING DQrXavier#2-Kir-3
8181: PPUSH
8182: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8186: LD_EXP 55
8190: PPUSH
8191: LD_STRING DQrXavier#2-Xav-3
8193: PPUSH
8194: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_STRING DQrXavier#2-Kir-4
8205: PPUSH
8206: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8210: LD_EXP 55
8214: PPUSH
8215: LD_STRING DQrXavier#2-Xav-4
8217: PPUSH
8218: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8222: LD_EXP 45
8226: PPUSH
8227: LD_STRING DQrXavier#2-Kir-5
8229: PPUSH
8230: CALL_OW 88
// if IsOK ( Gleb ) then
8234: LD_EXP 40
8238: PPUSH
8239: CALL_OW 302
8243: IFFALSE 8257
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8245: LD_EXP 40
8249: PPUSH
8250: LD_STRING DQrXavier#2-Glb-5
8252: PPUSH
8253: CALL_OW 88
// xavierPatrol = true ;
8257: LD_ADDR_EXP 7
8261: PUSH
8262: LD_INT 1
8264: ST_TO_ADDR
// end ; end ;
8265: GO 8268
8267: POP
// InGameOff ;
8268: CALL_OW 9
// DialogueOff ;
8272: CALL_OW 7
// end ;
8276: PPOPN 4
8278: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8279: LD_EXP 7
8283: PUSH
8284: LD_INT 3
8286: PPUSH
8287: LD_INT 5
8289: PPUSH
8290: CALL_OW 81
8294: PUSH
8295: LD_INT 1
8297: EQUAL
8298: AND
8299: IFFALSE 8369
8301: GO 8303
8303: DISABLE
8304: LD_INT 0
8306: PPUSH
// begin enable ;
8307: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8308: LD_ADDR_VAR 0 1
8312: PUSH
8313: DOUBLE
8314: LD_INT 1
8316: DEC
8317: ST_TO_ADDR
8318: LD_EXP 6
8322: PUSH
8323: FOR_TO
8324: IFFALSE 8367
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8326: LD_EXP 55
8330: PPUSH
8331: LD_EXP 6
8335: PUSH
8336: LD_VAR 0 1
8340: ARRAY
8341: PUSH
8342: LD_INT 1
8344: ARRAY
8345: PPUSH
8346: LD_EXP 6
8350: PUSH
8351: LD_VAR 0 1
8355: ARRAY
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: PPUSH
8361: CALL_OW 171
8365: GO 8323
8367: POP
8368: POP
// end ;
8369: PPOPN 1
8371: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8372: LD_EXP 7
8376: PUSH
8377: LD_EXP 8
8381: AND
8382: PUSH
8383: LD_INT 3
8385: PPUSH
8386: LD_INT 5
8388: PPUSH
8389: CALL_OW 81
8393: PUSH
8394: LD_INT 1
8396: EQUAL
8397: AND
8398: IFFALSE 8442
8400: GO 8402
8402: DISABLE
// begin xavierPatrol = false ;
8403: LD_ADDR_EXP 7
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8411: LD_ADDR_EXP 9
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// xavierFirstPatrol = false ;
8419: LD_ADDR_EXP 8
8423: PUSH
8424: LD_INT 0
8426: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8427: LD_EXP 55
8431: PPUSH
8432: LD_INT 123
8434: PPUSH
8435: LD_INT 92
8437: PPUSH
8438: CALL_OW 111
// end ;
8442: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8443: LD_EXP 9
8447: PUSH
8448: LD_EXP 55
8452: PPUSH
8453: LD_INT 123
8455: PPUSH
8456: LD_INT 92
8458: PPUSH
8459: CALL_OW 297
8463: PUSH
8464: LD_INT 2
8466: LESSEQUAL
8467: AND
8468: PUSH
8469: LD_EXP 45
8473: PPUSH
8474: CALL_OW 302
8478: AND
8479: PUSH
8480: LD_INT 3
8482: PPUSH
8483: LD_INT 5
8485: PPUSH
8486: CALL_OW 81
8490: PUSH
8491: LD_INT 1
8493: EQUAL
8494: AND
8495: IFFALSE 8598
8497: GO 8499
8499: DISABLE
// begin DialogueOn ;
8500: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8504: LD_EXP 55
8508: PPUSH
8509: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8513: LD_EXP 55
8517: PPUSH
8518: LD_STRING DPointXavier-Xav-1
8520: PPUSH
8521: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
8525: LD_EXP 45
8529: PPUSH
8530: LD_STRING DPointXavier-Kir-1
8532: PPUSH
8533: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
8537: LD_EXP 55
8541: PPUSH
8542: LD_STRING DPointXavier-Xav-2
8544: PPUSH
8545: CALL_OW 88
// DialogueOff ;
8549: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
8553: LD_INT 7
8555: PPUSH
8556: LD_INT 1
8558: PPUSH
8559: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
8563: LD_EXP 55
8567: PPUSH
8568: EMPTY
8569: PPUSH
8570: CALL_OW 446
// canLeaveMessage = true ;
8574: LD_ADDR_EXP 12
8578: PUSH
8579: LD_INT 1
8581: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
8582: LD_ADDR_EXP 9
8586: PUSH
8587: LD_INT 0
8589: ST_TO_ADDR
// xavierPatrol = true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// end ;
8598: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
8599: LD_EXP 12
8603: PUSH
8604: LD_EXP 45
8608: PPUSH
8609: LD_INT 7
8611: PPUSH
8612: CALL_OW 308
8616: AND
8617: PUSH
8618: LD_INT 3
8620: PPUSH
8621: LD_INT 5
8623: PPUSH
8624: CALL_OW 81
8628: PUSH
8629: LD_INT 1
8631: EQUAL
8632: AND
8633: IFFALSE 8752
8635: GO 8637
8637: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
8638: LD_STRING QActivateXavier
8640: PPUSH
8641: CALL_OW 97
8645: PUSH
8646: LD_INT 1
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8685
8654: POP
// begin messageForXavier = 1 ;
8655: LD_ADDR_EXP 13
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// canLeaveMessage = false ;
8663: LD_ADDR_EXP 12
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
8671: LD_INT 7
8673: PPUSH
8674: LD_INT 0
8676: PPUSH
8677: CALL_OW 424
// exit ;
8681: GO 8752
// end ; 2 :
8683: GO 8744
8685: LD_INT 2
8687: DOUBLE
8688: EQUAL
8689: IFTRUE 8693
8691: GO 8724
8693: POP
// begin messageForXavier = 2 ;
8694: LD_ADDR_EXP 13
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// canLeaveMessage = false ;
8702: LD_ADDR_EXP 12
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
8710: LD_INT 7
8712: PPUSH
8713: LD_INT 0
8715: PPUSH
8716: CALL_OW 424
// exit ;
8720: GO 8752
// end ; 3 :
8722: GO 8744
8724: LD_INT 3
8726: DOUBLE
8727: EQUAL
8728: IFTRUE 8732
8730: GO 8743
8732: POP
// messageForXavier = 3 ; end ;
8733: LD_ADDR_EXP 13
8737: PUSH
8738: LD_INT 3
8740: ST_TO_ADDR
8741: GO 8744
8743: POP
// wait ( 0 0$4 ) ;
8744: LD_INT 140
8746: PPUSH
8747: CALL_OW 67
// enable ;
8751: ENABLE
// end ;
8752: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
8753: LD_EXP 13
8757: PUSH
8758: LD_INT 1
8760: EQUAL
8761: PUSH
8762: LD_EXP 13
8766: PUSH
8767: LD_INT 2
8769: EQUAL
8770: OR
8771: PUSH
8772: LD_INT 3
8774: PPUSH
8775: LD_INT 5
8777: PPUSH
8778: CALL_OW 81
8782: PUSH
8783: LD_INT 1
8785: EQUAL
8786: AND
8787: IFFALSE 8815
8789: GO 8791
8791: DISABLE
// begin xavierPatrol = false ;
8792: LD_ADDR_EXP 7
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8800: LD_EXP 55
8804: PPUSH
8805: LD_INT 123
8807: PPUSH
8808: LD_INT 92
8810: PPUSH
8811: CALL_OW 111
// end ;
8815: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
8816: LD_EXP 13
8820: PUSH
8821: LD_INT 1
8823: EQUAL
8824: PUSH
8825: LD_EXP 13
8829: PUSH
8830: LD_INT 2
8832: EQUAL
8833: OR
8834: PUSH
8835: LD_EXP 55
8839: PPUSH
8840: LD_INT 123
8842: PPUSH
8843: LD_INT 92
8845: PPUSH
8846: CALL_OW 297
8850: PUSH
8851: LD_INT 2
8853: LESSEQUAL
8854: AND
8855: PUSH
8856: LD_INT 3
8858: PPUSH
8859: LD_INT 5
8861: PPUSH
8862: CALL_OW 81
8866: PUSH
8867: LD_INT 1
8869: EQUAL
8870: AND
8871: IFFALSE 8940
8873: GO 8875
8875: DISABLE
// begin if messageForXavier = 1 then
8876: LD_EXP 13
8880: PUSH
8881: LD_INT 1
8883: EQUAL
8884: IFFALSE 8906
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
8886: LD_EXP 37
8890: PPUSH
8891: LD_STRING DQrActivateXavier#1-Bur-1
8893: PPUSH
8894: CALL_OW 88
// xavierJoinToPlayer = true ;
8898: LD_ADDR_EXP 10
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// end ; if messageForXavier = 2 then
8906: LD_EXP 13
8910: PUSH
8911: LD_INT 2
8913: EQUAL
8914: IFFALSE 8940
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
8916: LD_EXP 37
8920: PPUSH
8921: LD_STRING DQrActivateXavier#2-Bur-1
8923: PPUSH
8924: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
8928: LD_EXP 55
8932: PPUSH
8933: LD_INT 53
8935: PPUSH
8936: CALL_OW 120
// end ; end ;
8940: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
8941: LD_EXP 10
8945: PUSH
8946: LD_INT 3
8948: PPUSH
8949: LD_INT 5
8951: PPUSH
8952: CALL_OW 81
8956: PUSH
8957: LD_INT 1
8959: EQUAL
8960: AND
8961: IFFALSE 9341
8963: GO 8965
8965: DISABLE
8966: LD_INT 0
8968: PPUSH
8969: PPUSH
8970: PPUSH
8971: PPUSH
8972: PPUSH
8973: PPUSH
// begin if messageForXavier = 1 then
8974: LD_EXP 13
8978: PUSH
8979: LD_INT 1
8981: EQUAL
8982: IFFALSE 9013
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
8984: LD_EXP 55
8988: PPUSH
8989: LD_EXP 37
8993: PPUSH
8994: CALL_OW 250
8998: PPUSH
8999: LD_EXP 37
9003: PPUSH
9004: CALL_OW 251
9008: PPUSH
9009: CALL_OW 111
// if messageForXavier = 2 then
9013: LD_EXP 13
9017: PUSH
9018: LD_INT 2
9020: EQUAL
9021: IFFALSE 9057
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9023: LD_EXP 55
9027: PPUSH
9028: CALL_OW 310
9032: PPUSH
9033: LD_EXP 37
9037: PPUSH
9038: CALL_OW 250
9042: PPUSH
9043: LD_EXP 37
9047: PPUSH
9048: CALL_OW 251
9052: PPUSH
9053: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9057: LD_ADDR_VAR 0 2
9061: PUSH
9062: LD_INT 22
9064: PUSH
9065: LD_INT 3
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 50
9074: PUSH
9075: EMPTY
9076: LIST
9077: PUSH
9078: LD_INT 2
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 59
9093: PUSH
9094: EMPTY
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: PPUSH
9107: CALL_OW 69
9111: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9112: LD_VAR 0 2
9116: PPUSH
9117: LD_EXP 55
9121: PPUSH
9122: CALL_OW 74
9126: PPUSH
9127: LD_EXP 55
9131: PPUSH
9132: CALL_OW 296
9136: PUSH
9137: LD_INT 6
9139: LESSEQUAL
9140: PUSH
9141: LD_EXP 13
9145: PUSH
9146: LD_INT 1
9148: EQUAL
9149: AND
9150: IFFALSE 9235
// begin xavierJoinToPlayer = false ;
9152: LD_ADDR_EXP 10
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9160: LD_ADDR_VAR 0 3
9164: PUSH
9165: LD_EXP 55
9169: PPUSH
9170: CALL_OW 250
9174: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9175: LD_ADDR_VAR 0 4
9179: PUSH
9180: LD_EXP 55
9184: PPUSH
9185: CALL_OW 251
9189: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_EXP 55
9199: PPUSH
9200: CALL_OW 254
9204: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9205: LD_EXP 55
9209: PPUSH
9210: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9214: LD_VAR 0 3
9218: PPUSH
9219: LD_VAR 0 4
9223: PPUSH
9224: LD_VAR 0 5
9228: PPUSH
9229: CALL 1153 0 3
// exit ;
9233: GO 9341
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9235: LD_VAR 0 2
9239: PPUSH
9240: LD_EXP 55
9244: PPUSH
9245: CALL_OW 310
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: LD_EXP 55
9259: PPUSH
9260: CALL_OW 310
9264: PPUSH
9265: CALL_OW 296
9269: PUSH
9270: LD_INT 6
9272: LESSEQUAL
9273: PUSH
9274: LD_EXP 13
9278: PUSH
9279: LD_INT 2
9281: EQUAL
9282: AND
9283: IFFALSE 9340
// begin xavierJoinToPlayer = false ;
9285: LD_ADDR_EXP 10
9289: PUSH
9290: LD_INT 0
9292: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9293: LD_ADDR_VAR 0 6
9297: PUSH
9298: LD_EXP 55
9302: PPUSH
9303: CALL_OW 310
9307: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9308: LD_EXP 55
9312: PPUSH
9313: CALL_OW 64
// SetSide ( veh , 3 ) ;
9317: LD_VAR 0 6
9321: PPUSH
9322: LD_INT 3
9324: PPUSH
9325: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9329: LD_VAR 0 6
9333: PPUSH
9334: CALL 1232 0 1
// exit ;
9338: GO 9341
// end ; enable ;
9340: ENABLE
// end ;
9341: PPOPN 6
9343: END
// every 8 8$0 do var playerDepot ;
9344: GO 9346
9346: DISABLE
9347: LD_INT 0
9349: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9350: LD_INT 44
9352: PPUSH
9353: LD_INT 3
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9363: LD_EXP 51
9367: PPUSH
9368: LD_INT 8
9370: PPUSH
9371: LD_INT 0
9373: PPUSH
9374: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9378: LD_EXP 51
9382: PPUSH
9383: LD_INT 97
9385: PPUSH
9386: LD_INT 162
9388: PPUSH
9389: CALL_OW 111
// wait ( 0 0$3 ) ;
9393: LD_INT 105
9395: PPUSH
9396: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9400: LD_EXP 51
9404: PPUSH
9405: CALL_OW 87
// DialogueOn ;
9409: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9413: LD_EXP 51
9417: PPUSH
9418: LD_STRING DYashinArrives-Yas-1
9420: PPUSH
9421: CALL_OW 88
// if savedVsevolod then
9425: LD_EXP 1
9429: IFFALSE 9493
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9431: LD_EXP 48
9435: PPUSH
9436: LD_STRING DYashinArrives-Vse-1
9438: PPUSH
9439: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9443: LD_EXP 51
9447: PPUSH
9448: LD_STRING DYashinArrives-Yas-2
9450: PPUSH
9451: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9455: LD_EXP 48
9459: PPUSH
9460: LD_STRING DYashinArrives-Vse-2
9462: PPUSH
9463: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9467: LD_EXP 51
9471: PPUSH
9472: LD_STRING DYashinArrives-Yas-3
9474: PPUSH
9475: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9479: LD_EXP 48
9483: PPUSH
9484: LD_STRING DYashinArrives-Vse-3
9486: PPUSH
9487: CALL_OW 88
// end else
9491: GO 9541
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9493: LD_EXP 37
9497: PPUSH
9498: LD_STRING DYashinArrives-Bur-3
9500: PPUSH
9501: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9505: LD_EXP 51
9509: PPUSH
9510: LD_STRING DYashinArrives-Yas-4
9512: PPUSH
9513: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
9517: LD_EXP 37
9521: PPUSH
9522: LD_STRING DYashinArrives-Bur-4
9524: PPUSH
9525: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
9529: LD_EXP 51
9533: PPUSH
9534: LD_STRING DYashinArrives-Yas-5
9536: PPUSH
9537: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
9541: LD_EXP 37
9545: PPUSH
9546: LD_STRING DYashinArrives-Bur-5
9548: PPUSH
9549: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
9553: LD_EXP 51
9557: PPUSH
9558: LD_STRING DYashinArrives-Yas-6
9560: PPUSH
9561: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
9565: LD_EXP 37
9569: PPUSH
9570: LD_STRING DYashinArrives-Bur-6
9572: PPUSH
9573: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
9577: LD_EXP 51
9581: PPUSH
9582: LD_STRING DYashinArrives-Yas-7
9584: PPUSH
9585: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
9589: LD_INT 63
9591: PPUSH
9592: CALL_OW 301
9596: PUSH
9597: LD_INT 66
9599: PPUSH
9600: CALL_OW 301
9604: AND
9605: PUSH
9606: LD_INT 68
9608: PPUSH
9609: CALL_OW 301
9613: AND
9614: IFFALSE 9697
// begin case Query ( QYashinHelp2 ) of 1 :
9616: LD_STRING QYashinHelp2
9618: PPUSH
9619: CALL_OW 97
9623: PUSH
9624: LD_INT 1
9626: DOUBLE
9627: EQUAL
9628: IFTRUE 9632
9630: GO 9659
9632: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
9633: LD_EXP 37
9637: PPUSH
9638: LD_STRING DQrYashinHelp#2-Bur-1
9640: PPUSH
9641: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
9645: LD_EXP 51
9649: PPUSH
9650: LD_STRING DQrYashinHelp#2-Yas-1
9652: PPUSH
9653: CALL_OW 88
// end ; 2 :
9657: GO 9695
9659: LD_INT 2
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 9694
9667: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
9668: LD_EXP 37
9672: PPUSH
9673: LD_STRING DQrYashinHelp#3-Bur-1
9675: PPUSH
9676: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
9680: LD_EXP 51
9684: PPUSH
9685: LD_STRING DQrYashinHelp#3-Yas-1
9687: PPUSH
9688: CALL_OW 88
// end ; end ;
9692: GO 9695
9694: POP
// end else
9695: GO 9835
// begin case Query ( QYashinHelp ) of 1 :
9697: LD_STRING QYashinHelp
9699: PPUSH
9700: CALL_OW 97
9704: PUSH
9705: LD_INT 1
9707: DOUBLE
9708: EQUAL
9709: IFTRUE 9713
9711: GO 9764
9713: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
9714: LD_EXP 37
9718: PPUSH
9719: LD_STRING DQrYashinHelp#1-Bur-1
9721: PPUSH
9722: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
9726: LD_EXP 51
9730: PPUSH
9731: LD_STRING DQrYashinHelp#1-Yas-1
9733: PPUSH
9734: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
9738: LD_EXP 37
9742: PPUSH
9743: LD_STRING DQrYashinHelp#1-Bur-2
9745: PPUSH
9746: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
9750: LD_EXP 51
9754: PPUSH
9755: LD_STRING DQrYashinHelp#1-Yas-2
9757: PPUSH
9758: CALL_OW 88
// end ; 2 :
9762: GO 9835
9764: LD_INT 2
9766: DOUBLE
9767: EQUAL
9768: IFTRUE 9772
9770: GO 9799
9772: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
9773: LD_EXP 37
9777: PPUSH
9778: LD_STRING DQrYashinHelp#2-Bur-1
9780: PPUSH
9781: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
9785: LD_EXP 51
9789: PPUSH
9790: LD_STRING DQrYashinHelp#2-Yas-1
9792: PPUSH
9793: CALL_OW 88
// end ; 3 :
9797: GO 9835
9799: LD_INT 3
9801: DOUBLE
9802: EQUAL
9803: IFTRUE 9807
9805: GO 9834
9807: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
9808: LD_EXP 37
9812: PPUSH
9813: LD_STRING DQrYashinHelp#3-Bur-1
9815: PPUSH
9816: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
9820: LD_EXP 51
9824: PPUSH
9825: LD_STRING DQrYashinHelp#3-Yas-1
9827: PPUSH
9828: CALL_OW 88
// end ; end ;
9832: GO 9835
9834: POP
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
9835: LD_EXP 51
9839: PPUSH
9840: LD_STRING DYashinLeave-Yas-1
9842: PPUSH
9843: CALL_OW 88
// yashinSearchVeh = true ;
9847: LD_ADDR_EXP 15
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// DialogueOff ;
9855: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9859: LD_ADDR_VAR 0 1
9863: PUSH
9864: LD_INT 22
9866: PUSH
9867: LD_INT 3
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 30
9879: PUSH
9880: LD_INT 0
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 1
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: ST_TO_ADDR
// if playerDepot then
9911: LD_VAR 0 1
9915: IFFALSE 9954
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
9917: LD_EXP 51
9921: PPUSH
9922: LD_VAR 0 1
9926: PUSH
9927: LD_INT 1
9929: ARRAY
9930: PPUSH
9931: CALL_OW 250
9935: PPUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 1
9943: ARRAY
9944: PPUSH
9945: CALL_OW 251
9949: PPUSH
9950: CALL_OW 111
// end ;
9954: PPOPN 1
9956: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
9957: LD_EXP 51
9961: PPUSH
9962: CALL_OW 305
9966: IFFALSE 10082
9968: GO 9970
9970: DISABLE
9971: LD_INT 0
9973: PPUSH
9974: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
9975: LD_ADDR_VAR 0 1
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 3
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PPUSH
9990: CALL_OW 69
9994: ST_TO_ADDR
// for unit in yourUnits do
9995: LD_ADDR_VAR 0 2
9999: PUSH
10000: LD_VAR 0 1
10004: PUSH
10005: FOR_IN
10006: IFFALSE 10079
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10008: LD_VAR 0 2
10012: PPUSH
10013: CALL_OW 319
10017: PUSH
10018: LD_EXP 51
10022: EQUAL
10023: PUSH
10024: LD_EXP 14
10028: PUSH
10029: LD_VAR 0 2
10033: PPUSH
10034: CALL_OW 319
10038: PUSH
10039: LD_EXP 14
10043: EQUAL
10044: AND
10045: OR
10046: IFFALSE 10077
// begin ComStop ( unit ) ;
10048: LD_VAR 0 2
10052: PPUSH
10053: CALL_OW 141
// DialogueOn ;
10057: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10061: LD_EXP 37
10065: PPUSH
10066: LD_STRING DYashinAttack-Bur-1
10068: PPUSH
10069: CALL_OW 88
// DialogueOff end ;
10073: CALL_OW 7
10077: GO 10005
10079: POP
10080: POP
// enable ;
10081: ENABLE
// end ;
10082: PPOPN 2
10084: END
// every 1 trigger IsPlaced ( Yashin ) do
10085: LD_EXP 51
10089: PPUSH
10090: CALL_OW 305
10094: IFFALSE 10130
10096: GO 10098
10098: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10099: LD_EXP 51
10103: PPUSH
10104: LD_INT 1000
10106: PPUSH
10107: CALL_OW 234
// if yashinVeh then
10111: LD_EXP 14
10115: IFFALSE 10129
// SetLives ( yashinVeh , 1000 ) ;
10117: LD_EXP 14
10121: PPUSH
10122: LD_INT 1000
10124: PPUSH
10125: CALL_OW 234
// enable ;
10129: ENABLE
// end ;
10130: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehs , veh ;
10131: LD_EXP 51
10135: PPUSH
10136: CALL_OW 305
10140: PUSH
10141: LD_EXP 15
10145: AND
10146: IFFALSE 10357
10148: GO 10150
10150: DISABLE
10151: LD_INT 0
10153: PPUSH
10154: PPUSH
// begin playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10155: LD_ADDR_VAR 0 1
10159: PUSH
10160: LD_INT 22
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 21
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 58
10182: PUSH
10183: EMPTY
10184: LIST
10185: PUSH
10186: LD_INT 23
10188: PUSH
10189: LD_INT 3
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 2
10198: PUSH
10199: LD_INT 34
10201: PUSH
10202: LD_INT 42
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 34
10211: PUSH
10212: LD_INT 43
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 34
10221: PUSH
10222: LD_INT 44
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 34
10231: PUSH
10232: LD_INT 46
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: ST_TO_ADDR
// if playerVehs then
10258: LD_VAR 0 1
10262: IFFALSE 10356
// begin for veh in playerVehs do
10264: LD_ADDR_VAR 0 2
10268: PUSH
10269: LD_VAR 0 1
10273: PUSH
10274: FOR_IN
10275: IFFALSE 10354
// begin if GetFuel ( veh ) >= 50 then
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 261
10286: PUSH
10287: LD_INT 50
10289: GREATEREQUAL
10290: IFFALSE 10352
// begin yashinSearchVeh = false ;
10292: LD_ADDR_EXP 15
10296: PUSH
10297: LD_INT 0
10299: ST_TO_ADDR
// yashinVeh = veh ;
10300: LD_ADDR_EXP 14
10304: PUSH
10305: LD_VAR 0 2
10309: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10310: LD_EXP 14
10314: PPUSH
10315: LD_INT 6
10317: PPUSH
10318: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10322: LD_EXP 51
10326: PPUSH
10327: LD_EXP 14
10331: PPUSH
10332: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10336: LD_EXP 14
10340: PPUSH
10341: LD_INT 19
10343: PPUSH
10344: CALL_OW 113
// exit ;
10348: POP
10349: POP
10350: GO 10357
// end ; end ;
10352: GO 10274
10354: POP
10355: POP
// end ; enable ;
10356: ENABLE
// end ;
10357: PPOPN 2
10359: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
10360: LD_EXP 14
10364: PPUSH
10365: LD_INT 19
10367: PPUSH
10368: CALL_OW 308
10372: IFFALSE 10395
10374: GO 10376
10376: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
10377: LD_EXP 14
10381: PPUSH
10382: CALL_OW 64
// RemoveUnit ( Yashin ) ;
10386: LD_EXP 51
10390: PPUSH
10391: CALL_OW 64
// end ;
10395: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
10396: LD_INT 22
10398: PUSH
10399: LD_INT 2
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 21
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 50
10418: PUSH
10419: EMPTY
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 69
10431: PUSH
10432: LD_INT 7
10434: LESSEQUAL
10435: PUSH
10436: LD_INT 22
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 21
10448: PUSH
10449: LD_INT 1
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 50
10458: PUSH
10459: EMPTY
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: PUSH
10472: LD_INT 6
10474: LESSEQUAL
10475: AND
10476: PUSH
10477: LD_INT 2
10479: PPUSH
10480: CALL_OW 303
10484: PUSH
10485: LD_INT 2
10487: PPUSH
10488: CALL_OW 301
10492: OR
10493: PUSH
10494: LD_INT 2
10496: PPUSH
10497: CALL_OW 255
10501: PUSH
10502: LD_INT 3
10504: EQUAL
10505: OR
10506: AND
10507: IFFALSE 11168
10509: GO 10511
10511: DISABLE
10512: LD_INT 0
10514: PPUSH
10515: PPUSH
10516: PPUSH
// begin enableCounter = false ;
10517: LD_ADDR_EXP 18
10521: PUSH
10522: LD_INT 0
10524: ST_TO_ADDR
// Display_strings = [ ] ;
10525: LD_ADDR_OWVAR 47
10529: PUSH
10530: EMPTY
10531: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
10532: LD_INT 1
10534: PPUSH
10535: CALL 18050 0 1
10539: PPUSH
10540: CALL 17932 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
10544: LD_EXP 50
10548: PPUSH
10549: LD_STRING DHeikeObj-Pop-1
10551: PPUSH
10552: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
10556: LD_EXP 37
10560: PPUSH
10561: LD_STRING DHeikeObj-Bur-1
10563: PPUSH
10564: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
10568: LD_EXP 50
10572: PPUSH
10573: LD_STRING DHeikeObj-Pop-2
10575: PPUSH
10576: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
10580: LD_EXP 37
10584: PPUSH
10585: LD_STRING DHeikeObj-Bur-2
10587: PPUSH
10588: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
10592: LD_STRING MHeike
10594: PPUSH
10595: CALL_OW 337
// Query ( QHeike ) ;
10599: LD_STRING QHeike
10601: PPUSH
10602: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
10606: LD_EXP 11
10610: NOT
10611: PUSH
10612: LD_EXP 45
10616: AND
10617: PUSH
10618: LD_EXP 45
10622: PPUSH
10623: CALL_OW 301
10627: NOT
10628: AND
10629: IFFALSE 11020
// begin if IsInUnit ( Kirilenkova ) then
10631: LD_EXP 45
10635: PPUSH
10636: CALL_OW 310
10640: IFFALSE 10689
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
10642: LD_EXP 55
10646: PPUSH
10647: LD_EXP 45
10651: PPUSH
10652: CALL_OW 310
10656: PPUSH
10657: CALL_OW 250
10661: PPUSH
10662: LD_EXP 45
10666: PPUSH
10667: CALL_OW 310
10671: PPUSH
10672: CALL_OW 251
10676: PPUSH
10677: LD_INT 5
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 50
10687: GO 10724
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
10689: LD_EXP 55
10693: PPUSH
10694: LD_EXP 45
10698: PPUSH
10699: CALL_OW 250
10703: PPUSH
10704: LD_EXP 45
10708: PPUSH
10709: CALL_OW 251
10713: PPUSH
10714: LD_INT 5
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 50
// xavierSpawned = true ;
10724: LD_ADDR_EXP 11
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10732: LD_INT 70
10734: PPUSH
10735: CALL_OW 67
// InGameOn ;
10739: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
10743: LD_EXP 55
10747: PPUSH
10748: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
10752: LD_EXP 55
10756: PPUSH
10757: LD_EXP 45
10761: PPUSH
10762: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
10766: LD_EXP 45
10770: PPUSH
10771: LD_EXP 55
10775: PPUSH
10776: CALL_OW 119
// DialogueOn ;
10780: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
10784: LD_EXP 55
10788: PPUSH
10789: LD_STRING DMeetXavier-Xav-1
10791: PPUSH
10792: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
10796: LD_EXP 45
10800: PPUSH
10801: LD_STRING DMeetXavier-Kir-1
10803: PPUSH
10804: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
10808: LD_EXP 55
10812: PPUSH
10813: LD_STRING DMeetXavier-Xav-2
10815: PPUSH
10816: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
10820: LD_EXP 37
10824: PPUSH
10825: LD_STRING DQrXavier#1-Bur-1
10827: PPUSH
10828: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
10832: LD_EXP 45
10836: PPUSH
10837: LD_STRING DQrXavier#1-Kir-1
10839: PPUSH
10840: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
10844: LD_EXP 55
10848: PPUSH
10849: LD_STRING DQrXavier#1-Xav-1
10851: PPUSH
10852: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
10856: LD_EXP 45
10860: PPUSH
10861: LD_STRING DQrXavier#1-Kir-2
10863: PPUSH
10864: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
10868: LD_EXP 55
10872: PPUSH
10873: LD_STRING DQrXavier#1-Xav-2
10875: PPUSH
10876: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
10880: LD_EXP 45
10884: PPUSH
10885: LD_STRING DQrXavier#1-Kir-3
10887: PPUSH
10888: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
10892: LD_EXP 55
10896: PPUSH
10897: LD_STRING DQrXavier#1-Xav-3
10899: PPUSH
10900: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
10904: LD_EXP 45
10908: PPUSH
10909: LD_STRING DQrXavier#1-Kir-4
10911: PPUSH
10912: CALL_OW 88
// if IsOK ( Gleb ) then
10916: LD_EXP 40
10920: PPUSH
10921: CALL_OW 302
10925: IFFALSE 10939
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
10927: LD_EXP 40
10931: PPUSH
10932: LD_STRING DQrXavier#1-Glb-4
10934: PPUSH
10935: CALL_OW 88
// dir = GetDir ( Xavier ) ;
10939: LD_ADDR_VAR 0 3
10943: PUSH
10944: LD_EXP 55
10948: PPUSH
10949: CALL_OW 254
10953: ST_TO_ADDR
// x = GetX ( Xavier ) ;
10954: LD_ADDR_VAR 0 1
10958: PUSH
10959: LD_EXP 55
10963: PPUSH
10964: CALL_OW 250
10968: ST_TO_ADDR
// y = GetY ( Xavier ) ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_EXP 55
10978: PPUSH
10979: CALL_OW 251
10983: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
10984: LD_EXP 55
10988: PPUSH
10989: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_VAR 0 2
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: CALL 1153 0 3
// DialogueOff ;
11012: CALL_OW 7
// IngameOff ;
11016: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11020: LD_EXP 11
11024: PUSH
11025: LD_EXP 55
11029: PPUSH
11030: CALL_OW 255
11034: PUSH
11035: LD_INT 5
11037: EQUAL
11038: AND
11039: PUSH
11040: LD_INT 3
11042: PPUSH
11043: LD_INT 5
11045: PPUSH
11046: CALL_OW 81
11050: PUSH
11051: LD_INT 1
11053: EQUAL
11054: AND
11055: IFFALSE 11138
// begin xavierPatrol = false ;
11057: LD_ADDR_EXP 7
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 55
11074: PPUSH
11075: CALL_OW 254
11079: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11080: LD_ADDR_VAR 0 1
11084: PUSH
11085: LD_EXP 55
11089: PPUSH
11090: CALL_OW 250
11094: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11095: LD_ADDR_VAR 0 2
11099: PUSH
11100: LD_EXP 55
11104: PPUSH
11105: CALL_OW 251
11109: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11110: LD_EXP 55
11114: PPUSH
11115: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11119: LD_VAR 0 1
11123: PPUSH
11124: LD_VAR 0 2
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: CALL 1153 0 3
// end ; wait ( 2 2$30 ) ;
11138: LD_INT 5250
11140: PPUSH
11141: CALL_OW 67
// PrepareHeikeGroup ;
11145: CALL 4591 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11149: LD_EXP 57
11153: PPUSH
11154: LD_EXP 58
11158: PPUSH
11159: LD_EXP 35
11163: PPUSH
11164: CALL 24848 0 3
// end ;
11168: PPOPN 3
11170: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11171: LD_EXP 57
11175: PPUSH
11176: CALL_OW 303
11180: IFFALSE 11204
11182: GO 11184
11184: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11185: LD_EXP 56
11189: PPUSH
11190: LD_EXP 58
11194: PPUSH
11195: LD_EXP 35
11199: PPUSH
11200: CALL 24848 0 3
11204: END
// every 0 0$1 trigger IsDying ( Heike ) do
11205: LD_EXP 56
11209: PPUSH
11210: CALL_OW 303
11214: IFFALSE 11252
11216: GO 11218
11218: DISABLE
// begin canCaptureHeike = true ;
11219: LD_ADDR_EXP 16
11223: PUSH
11224: LD_INT 1
11226: ST_TO_ADDR
// ComStop ( Heike ) ;
11227: LD_EXP 56
11231: PPUSH
11232: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
11236: LD_INT 8
11238: PPUSH
11239: LD_INT 3
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 80
// end ;
11252: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
11253: LD_EXP 56
11257: PPUSH
11258: CALL_OW 256
11262: PUSH
11263: LD_INT 250
11265: GREATER
11266: PUSH
11267: LD_EXP 16
11271: AND
11272: IFFALSE 11281
11274: GO 11276
11276: DISABLE
// Dial_CaptureHeike ;
11277: CALL 11282 0 0
11281: END
// export function Dial_CaptureHeike ; begin
11282: LD_INT 0
11284: PPUSH
// heikeCaptured = true ;
11285: LD_ADDR_EXP 17
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// enableCounter = false ;
11293: LD_ADDR_EXP 18
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// InGameOn ;
11301: CALL_OW 8
// DialogueOn ;
11305: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
11309: LD_EXP 56
11313: PPUSH
11314: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
11318: LD_EXP 56
11322: PPUSH
11323: LD_STRING DHeikeCapt-Hke-1
11325: PPUSH
11326: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
11330: LD_EXP 37
11334: PPUSH
11335: LD_STRING DHeikeCapt-Bur-1
11337: PPUSH
11338: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
11342: LD_EXP 56
11346: PPUSH
11347: LD_STRING DHeikeCapt-Hke-2
11349: PPUSH
11350: CALL_OW 88
// DialogueOff ;
11354: CALL_OW 7
// IngameOff ;
11358: CALL_OW 9
// FinishMission ;
11362: CALL 15827 0 0
// end ;
11366: LD_VAR 0 1
11370: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
11371: LD_EXP 56
11375: PPUSH
11376: CALL_OW 301
11380: PUSH
11381: LD_EXP 56
11385: PPUSH
11386: CALL_OW 305
11390: AND
11391: IFFALSE 11400
11393: GO 11395
11395: DISABLE
// FinishMission ; end_of_file
11396: CALL 15827 0 0
11400: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11401: LD_INT 0
11403: PPUSH
11404: PPUSH
// if debugMode then
11405: LD_EXP 26
11409: IFFALSE 11426
// unit := NewCharacter ( ident ) ;
11411: LD_ADDR_VAR 0 5
11415: PUSH
11416: LD_VAR 0 1
11420: PPUSH
11421: CALL_OW 25
11425: ST_TO_ADDR
// if exist_mode and not debugMode then
11426: LD_VAR 0 2
11430: PUSH
11431: LD_EXP 26
11435: NOT
11436: AND
11437: IFFALSE 11462
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11439: LD_ADDR_VAR 0 5
11443: PUSH
11444: LD_EXP 25
11448: PUSH
11449: LD_VAR 0 1
11453: STR
11454: PPUSH
11455: CALL_OW 34
11459: ST_TO_ADDR
11460: GO 11484
// if not debugMode then
11462: LD_EXP 26
11466: NOT
11467: IFFALSE 11484
// unit := NewCharacter ( ident ) ;
11469: LD_ADDR_VAR 0 5
11473: PUSH
11474: LD_VAR 0 1
11478: PPUSH
11479: CALL_OW 25
11483: ST_TO_ADDR
// if class then
11484: LD_VAR 0 3
11488: IFFALSE 11504
// SetClass ( unit , class ) ;
11490: LD_VAR 0 5
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: CALL_OW 336
// result := unit ;
11504: LD_ADDR_VAR 0 4
11508: PUSH
11509: LD_VAR 0 5
11513: ST_TO_ADDR
// end ;
11514: LD_VAR 0 4
11518: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11519: LD_INT 0
11521: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
11522: LD_VAR 0 1
11526: PPUSH
11527: CALL_OW 255
11531: PUSH
11532: LD_VAR 0 3
11536: EQUAL
11537: PUSH
11538: LD_VAR 0 1
11542: PPUSH
11543: CALL_OW 301
11547: NOT
11548: AND
11549: IFFALSE 11571
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11551: LD_VAR 0 1
11555: PPUSH
11556: LD_EXP 24
11560: PUSH
11561: LD_VAR 0 2
11565: STR
11566: PPUSH
11567: CALL_OW 38
// end ;
11571: LD_VAR 0 4
11575: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11576: LD_INT 0
11578: PPUSH
11579: PPUSH
11580: PPUSH
// resultCharactersToSave = [ ] ;
11581: LD_ADDR_VAR 0 6
11585: PUSH
11586: EMPTY
11587: ST_TO_ADDR
// for unit in characters do
11588: LD_ADDR_VAR 0 5
11592: PUSH
11593: LD_VAR 0 1
11597: PUSH
11598: FOR_IN
11599: IFFALSE 11648
// if GetSide ( unit ) = side and not IsDead ( unit ) then
11601: LD_VAR 0 5
11605: PPUSH
11606: CALL_OW 255
11610: PUSH
11611: LD_VAR 0 3
11615: EQUAL
11616: PUSH
11617: LD_VAR 0 5
11621: PPUSH
11622: CALL_OW 301
11626: NOT
11627: AND
11628: IFFALSE 11646
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11630: LD_ADDR_VAR 0 6
11634: PUSH
11635: LD_VAR 0 6
11639: PUSH
11640: LD_VAR 0 5
11644: ADD
11645: ST_TO_ADDR
11646: GO 11598
11648: POP
11649: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
11650: LD_VAR 0 6
11654: PPUSH
11655: LD_EXP 24
11659: PUSH
11660: LD_VAR 0 2
11664: STR
11665: PPUSH
11666: CALL_OW 38
// end ;
11670: LD_VAR 0 4
11674: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
11675: LD_INT 0
11677: PPUSH
11678: PPUSH
// for unit in units do
11679: LD_ADDR_VAR 0 5
11683: PUSH
11684: LD_VAR 0 1
11688: PUSH
11689: FOR_IN
11690: IFFALSE 11713
// PlaceUnitArea ( unit , area , spawnMode ) ;
11692: LD_VAR 0 5
11696: PPUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: LD_VAR 0 3
11706: PPUSH
11707: CALL_OW 49
11711: GO 11689
11713: POP
11714: POP
// end ;
11715: LD_VAR 0 4
11719: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
11720: LD_INT 0
11722: PPUSH
11723: PPUSH
11724: PPUSH
11725: PPUSH
// units = characters ;
11726: LD_ADDR_VAR 0 9
11730: PUSH
11731: LD_VAR 0 1
11735: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
11736: LD_ADDR_VAR 0 9
11740: PUSH
11741: LD_VAR 0 9
11745: PUSH
11746: LD_EXP 37
11750: PUSH
11751: LD_EXP 38
11755: PUSH
11756: LD_EXP 39
11760: PUSH
11761: LD_EXP 40
11765: PUSH
11766: LD_EXP 41
11770: PUSH
11771: LD_EXP 42
11775: PUSH
11776: LD_EXP 43
11780: PUSH
11781: LD_EXP 44
11785: PUSH
11786: LD_EXP 48
11790: PUSH
11791: LD_EXP 45
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: DIFF
11808: ST_TO_ADDR
// if not units and not canTalkHero then
11809: LD_VAR 0 9
11813: NOT
11814: PUSH
11815: LD_VAR 0 5
11819: NOT
11820: AND
11821: IFFALSE 11825
// exit ;
11823: GO 11998
// if not units then
11825: LD_VAR 0 9
11829: NOT
11830: IFFALSE 11851
// units = characters diff [ Burlak ] ;
11832: LD_ADDR_VAR 0 9
11836: PUSH
11837: LD_VAR 0 1
11841: PUSH
11842: LD_EXP 37
11846: PUSH
11847: EMPTY
11848: LIST
11849: DIFF
11850: ST_TO_ADDR
// if not units and canTalkHero then
11851: LD_VAR 0 9
11855: NOT
11856: PUSH
11857: LD_VAR 0 5
11861: AND
11862: IFFALSE 11866
// exit ;
11864: GO 11998
// speaker := units [ rand ( 1 , units ) ] ;
11866: LD_ADDR_VAR 0 8
11870: PUSH
11871: LD_VAR 0 9
11875: PUSH
11876: LD_INT 1
11878: PPUSH
11879: LD_VAR 0 9
11883: PPUSH
11884: CALL_OW 12
11888: ARRAY
11889: ST_TO_ADDR
// if radio then
11890: LD_VAR 0 4
11894: IFFALSE 11943
// begin if GetSex ( speaker ) = sex_male then
11896: LD_VAR 0 8
11900: PPUSH
11901: CALL_OW 258
11905: PUSH
11906: LD_INT 1
11908: EQUAL
11909: IFFALSE 11927
// SayRadio ( speaker , dialogMID ) else
11911: LD_VAR 0 8
11915: PPUSH
11916: LD_VAR 0 2
11920: PPUSH
11921: CALL_OW 94
11925: GO 11941
// SayRadio ( speaker , dialogFID ) ;
11927: LD_VAR 0 8
11931: PPUSH
11932: LD_VAR 0 3
11936: PPUSH
11937: CALL_OW 94
// end else
11941: GO 11988
// begin if GetSex ( speaker ) = sex_male then
11943: LD_VAR 0 8
11947: PPUSH
11948: CALL_OW 258
11952: PUSH
11953: LD_INT 1
11955: EQUAL
11956: IFFALSE 11974
// Say ( speaker , dialogMID ) else
11958: LD_VAR 0 8
11962: PPUSH
11963: LD_VAR 0 2
11967: PPUSH
11968: CALL_OW 88
11972: GO 11988
// Say ( speaker , dialogFID ) ;
11974: LD_VAR 0 8
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: CALL_OW 88
// end ; result := speaker ;
11988: LD_ADDR_VAR 0 6
11992: PUSH
11993: LD_VAR 0 8
11997: ST_TO_ADDR
// end ;
11998: LD_VAR 0 6
12002: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12003: LD_INT 0
12005: PPUSH
12006: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12007: LD_ADDR_VAR 0 4
12011: PUSH
12012: LD_VAR 0 2
12016: PPUSH
12017: CALL_OW 254
12021: PUSH
12022: LD_INT 3
12024: MINUS
12025: ST_TO_ADDR
// if dir < 0 then
12026: LD_VAR 0 4
12030: PUSH
12031: LD_INT 0
12033: LESS
12034: IFFALSE 12050
// dir := 6 + dir ;
12036: LD_ADDR_VAR 0 4
12040: PUSH
12041: LD_INT 6
12043: PUSH
12044: LD_VAR 0 4
12048: PLUS
12049: ST_TO_ADDR
// SetDir ( un , dir ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_VAR 0 4
12059: PPUSH
12060: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12064: LD_VAR 0 1
12068: PPUSH
12069: LD_VAR 0 2
12073: PPUSH
12074: CALL_OW 52
// result = un ;
12078: LD_ADDR_VAR 0 3
12082: PUSH
12083: LD_VAR 0 1
12087: ST_TO_ADDR
// end ;
12088: LD_VAR 0 3
12092: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12093: LD_INT 0
12095: PPUSH
12096: PPUSH
// for eng in engs do
12097: LD_ADDR_VAR 0 4
12101: PUSH
12102: LD_VAR 0 1
12106: PUSH
12107: FOR_IN
12108: IFFALSE 12225
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 257
12119: PUSH
12120: LD_INT 2
12122: EQUAL
12123: PUSH
12124: LD_VAR 0 4
12128: PPUSH
12129: CALL_OW 302
12133: AND
12134: PUSH
12135: LD_VAR 0 2
12139: AND
12140: PUSH
12141: LD_VAR 0 2
12145: PPUSH
12146: CALL_OW 255
12150: PUSH
12151: LD_VAR 0 4
12155: PPUSH
12156: CALL_OW 255
12160: EQUAL
12161: NOT
12162: AND
12163: IFFALSE 12223
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12165: LD_VAR 0 4
12169: PPUSH
12170: LD_STRING e
12172: PUSH
12173: LD_VAR 0 2
12177: PPUSH
12178: CALL_OW 250
12182: PUSH
12183: LD_VAR 0 2
12187: PPUSH
12188: CALL_OW 251
12192: PUSH
12193: LD_VAR 0 2
12197: PUSH
12198: LD_INT 0
12200: PUSH
12201: LD_INT 0
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: PPUSH
12219: CALL_OW 447
12223: GO 12107
12225: POP
12226: POP
12227: LD_VAR 0 3
12231: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
12232: LD_INT 0
12234: PPUSH
// if not GetClass ( unit ) = class_soldier then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 257
12244: PUSH
12245: LD_INT 1
12247: EQUAL
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 12301
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
12253: LD_VAR 0 1
12257: PPUSH
12258: LD_STRING p
12260: PUSH
12261: LD_VAR 0 2
12265: PUSH
12266: LD_VAR 0 3
12270: PUSH
12271: LD_INT 0
12273: PUSH
12274: LD_VAR 0 4
12278: PUSH
12279: LD_INT 0
12281: PUSH
12282: LD_INT 0
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: PPUSH
12297: CALL_OW 447
12301: LD_VAR 0 5
12305: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12312: LD_ADDR_VAR 0 7
12316: PUSH
12317: LD_VAR 0 1
12321: PUSH
12322: LD_VAR 0 2
12326: ARRAY
12327: PPUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: CALL_OW 3
12337: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12338: LD_ADDR_VAR 0 1
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: LD_VAR 0 2
12352: PPUSH
12353: LD_VAR 0 7
12357: PPUSH
12358: CALL_OW 1
12362: ST_TO_ADDR
// result := tab ;
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_VAR 0 1
12372: ST_TO_ADDR
// end ;
12373: LD_VAR 0 4
12377: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12378: LD_INT 0
12380: PPUSH
12381: PPUSH
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
12390: PPUSH
12391: PPUSH
// result := [ ] ;
12392: LD_ADDR_VAR 0 8
12396: PUSH
12397: EMPTY
12398: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 266
12408: PUSH
12409: LD_INT 0
12411: PUSH
12412: LD_INT 1
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: IN
12419: NOT
12420: IFFALSE 12424
// exit ;
12422: GO 14065
// if name then
12424: LD_VAR 0 3
12428: IFFALSE 12444
// SetBName ( base_dep , name ) ;
12430: LD_VAR 0 1
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: CALL_OW 500
// base := GetBase ( base_dep ) ;
12444: LD_ADDR_VAR 0 16
12448: PUSH
12449: LD_VAR 0 1
12453: PPUSH
12454: CALL_OW 274
12458: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12459: LD_ADDR_VAR 0 17
12463: PUSH
12464: LD_VAR 0 1
12468: PPUSH
12469: CALL_OW 255
12473: ST_TO_ADDR
// if sources then
12474: LD_VAR 0 5
12478: IFFALSE 12525
// for i = 1 to 3 do
12480: LD_ADDR_VAR 0 9
12484: PUSH
12485: DOUBLE
12486: LD_INT 1
12488: DEC
12489: ST_TO_ADDR
12490: LD_INT 3
12492: PUSH
12493: FOR_TO
12494: IFFALSE 12523
// AddResourceType ( base , i , sources [ i ] ) ;
12496: LD_VAR 0 16
12500: PPUSH
12501: LD_VAR 0 9
12505: PPUSH
12506: LD_VAR 0 5
12510: PUSH
12511: LD_VAR 0 9
12515: ARRAY
12516: PPUSH
12517: CALL_OW 276
12521: GO 12493
12523: POP
12524: POP
// buildings := GetBaseBuildings ( base , area ) ;
12525: LD_ADDR_VAR 0 18
12529: PUSH
12530: LD_VAR 0 16
12534: PPUSH
12535: LD_VAR 0 2
12539: PPUSH
12540: CALL 48028 0 2
12544: ST_TO_ADDR
// InitHc ;
12545: CALL_OW 19
// InitUc ;
12549: CALL_OW 18
// uc_side := side ;
12553: LD_ADDR_OWVAR 20
12557: PUSH
12558: LD_VAR 0 17
12562: ST_TO_ADDR
// uc_nation := nation ;
12563: LD_ADDR_OWVAR 21
12567: PUSH
12568: LD_VAR 0 6
12572: ST_TO_ADDR
// if buildings then
12573: LD_VAR 0 18
12577: IFFALSE 13924
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12579: LD_ADDR_VAR 0 19
12583: PUSH
12584: LD_VAR 0 18
12588: PPUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 30
12594: PUSH
12595: LD_INT 29
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 30
12604: PUSH
12605: LD_INT 30
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 72
12621: ST_TO_ADDR
// if tmp then
12622: LD_VAR 0 19
12626: IFFALSE 12674
// for i in tmp do
12628: LD_ADDR_VAR 0 9
12632: PUSH
12633: LD_VAR 0 19
12637: PUSH
12638: FOR_IN
12639: IFFALSE 12672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12641: LD_VAR 0 9
12645: PPUSH
12646: CALL_OW 250
12650: PPUSH
12651: LD_VAR 0 9
12655: PPUSH
12656: CALL_OW 251
12660: PPUSH
12661: LD_VAR 0 17
12665: PPUSH
12666: CALL_OW 441
12670: GO 12638
12672: POP
12673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12674: LD_VAR 0 18
12678: PPUSH
12679: LD_INT 2
12681: PUSH
12682: LD_INT 30
12684: PUSH
12685: LD_INT 31
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 32
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 30
12704: PUSH
12705: LD_INT 33
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 72
12722: IFFALSE 12821
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12724: LD_ADDR_VAR 0 9
12728: PUSH
12729: LD_VAR 0 18
12733: PPUSH
12734: LD_INT 2
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 31
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 30
12749: PUSH
12750: LD_INT 32
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 30
12759: PUSH
12760: LD_INT 33
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 72
12777: PUSH
12778: FOR_IN
12779: IFFALSE 12819
// begin if not GetBWeapon ( i ) then
12781: LD_VAR 0 9
12785: PPUSH
12786: CALL_OW 269
12790: NOT
12791: IFFALSE 12817
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12793: LD_VAR 0 9
12797: PPUSH
12798: LD_VAR 0 9
12802: PPUSH
12803: LD_VAR 0 2
12807: PPUSH
12808: CALL 50256 0 2
12812: PPUSH
12813: CALL_OW 431
// end ;
12817: GO 12778
12819: POP
12820: POP
// end ; for i = 1 to personel do
12821: LD_ADDR_VAR 0 9
12825: PUSH
12826: DOUBLE
12827: LD_INT 1
12829: DEC
12830: ST_TO_ADDR
12831: LD_VAR 0 7
12835: PUSH
12836: FOR_TO
12837: IFFALSE 13904
// begin if i > 4 then
12839: LD_VAR 0 9
12843: PUSH
12844: LD_INT 4
12846: GREATER
12847: IFFALSE 12851
// break ;
12849: GO 13904
// case i of 1 :
12851: LD_VAR 0 9
12855: PUSH
12856: LD_INT 1
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 12955
12864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12865: LD_ADDR_VAR 0 13
12869: PUSH
12870: LD_VAR 0 18
12874: PPUSH
12875: LD_INT 22
12877: PUSH
12878: LD_VAR 0 17
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 58
12889: PUSH
12890: EMPTY
12891: LIST
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 31
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: LD_INT 32
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 4
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 5
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: PPUSH
12948: CALL_OW 72
12952: ST_TO_ADDR
12953: GO 13177
12955: LD_INT 2
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 13025
12963: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12964: LD_ADDR_VAR 0 13
12968: PUSH
12969: LD_VAR 0 18
12973: PPUSH
12974: LD_INT 22
12976: PUSH
12977: LD_VAR 0 17
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 2
12988: PUSH
12989: LD_INT 30
12991: PUSH
12992: LD_INT 0
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 1
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PPUSH
13018: CALL_OW 72
13022: ST_TO_ADDR
13023: GO 13177
13025: LD_INT 3
13027: DOUBLE
13028: EQUAL
13029: IFTRUE 13033
13031: GO 13095
13033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13034: LD_ADDR_VAR 0 13
13038: PUSH
13039: LD_VAR 0 18
13043: PPUSH
13044: LD_INT 22
13046: PUSH
13047: LD_VAR 0 17
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 2
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: ST_TO_ADDR
13093: GO 13177
13095: LD_INT 4
13097: DOUBLE
13098: EQUAL
13099: IFTRUE 13103
13101: GO 13176
13103: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13104: LD_ADDR_VAR 0 13
13108: PUSH
13109: LD_VAR 0 18
13113: PPUSH
13114: LD_INT 22
13116: PUSH
13117: LD_VAR 0 17
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 2
13128: PUSH
13129: LD_INT 30
13131: PUSH
13132: LD_INT 6
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 30
13141: PUSH
13142: LD_INT 7
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 8
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 72
13173: ST_TO_ADDR
13174: GO 13177
13176: POP
// if i = 1 then
13177: LD_VAR 0 9
13181: PUSH
13182: LD_INT 1
13184: EQUAL
13185: IFFALSE 13303
// begin tmp := [ ] ;
13187: LD_ADDR_VAR 0 19
13191: PUSH
13192: EMPTY
13193: ST_TO_ADDR
// for j in f do
13194: LD_ADDR_VAR 0 10
13198: PUSH
13199: LD_VAR 0 13
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13285
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13207: LD_VAR 0 10
13211: PPUSH
13212: CALL_OW 266
13216: PUSH
13217: LD_INT 31
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: IN
13227: IFFALSE 13254
// tmp := Insert ( tmp , 1 , j ) else
13229: LD_ADDR_VAR 0 19
13233: PUSH
13234: LD_VAR 0 19
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: LD_VAR 0 10
13246: PPUSH
13247: CALL_OW 2
13251: ST_TO_ADDR
13252: GO 13283
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13254: LD_ADDR_VAR 0 19
13258: PUSH
13259: LD_VAR 0 19
13263: PPUSH
13264: LD_VAR 0 19
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: LD_VAR 0 10
13277: PPUSH
13278: CALL_OW 2
13282: ST_TO_ADDR
13283: GO 13204
13285: POP
13286: POP
// if tmp then
13287: LD_VAR 0 19
13291: IFFALSE 13303
// f := tmp ;
13293: LD_ADDR_VAR 0 13
13297: PUSH
13298: LD_VAR 0 19
13302: ST_TO_ADDR
// end ; x := personel [ i ] ;
13303: LD_ADDR_VAR 0 14
13307: PUSH
13308: LD_VAR 0 7
13312: PUSH
13313: LD_VAR 0 9
13317: ARRAY
13318: ST_TO_ADDR
// if x = - 1 then
13319: LD_VAR 0 14
13323: PUSH
13324: LD_INT 1
13326: NEG
13327: EQUAL
13328: IFFALSE 13522
// begin for j in f do
13330: LD_ADDR_VAR 0 10
13334: PUSH
13335: LD_VAR 0 13
13339: PUSH
13340: FOR_IN
13341: IFFALSE 13518
// repeat InitHc ;
13343: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13347: LD_VAR 0 10
13351: PPUSH
13352: CALL_OW 266
13356: PUSH
13357: LD_INT 5
13359: EQUAL
13360: IFFALSE 13415
// begin if UnitsInside ( j ) < 3 then
13362: LD_VAR 0 10
13366: PPUSH
13367: CALL_OW 313
13371: PUSH
13372: LD_INT 3
13374: LESS
13375: IFFALSE 13396
// PrepareHuman ( false , i , skill ) else
13377: LD_INT 0
13379: PPUSH
13380: LD_VAR 0 9
13384: PPUSH
13385: LD_VAR 0 4
13389: PPUSH
13390: CALL_OW 380
13394: GO 13413
// PrepareHuman ( false , i , skill ) ;
13396: LD_INT 0
13398: PPUSH
13399: LD_VAR 0 9
13403: PPUSH
13404: LD_VAR 0 4
13408: PPUSH
13409: CALL_OW 380
// end else
13413: GO 13432
// PrepareHuman ( false , i , skill ) ;
13415: LD_INT 0
13417: PPUSH
13418: LD_VAR 0 9
13422: PPUSH
13423: LD_VAR 0 4
13427: PPUSH
13428: CALL_OW 380
// un := CreateHuman ;
13432: LD_ADDR_VAR 0 15
13436: PUSH
13437: CALL_OW 44
13441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13442: LD_ADDR_VAR 0 8
13446: PUSH
13447: LD_VAR 0 8
13451: PPUSH
13452: LD_INT 1
13454: PPUSH
13455: LD_VAR 0 15
13459: PPUSH
13460: CALL_OW 2
13464: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13465: LD_VAR 0 15
13469: PPUSH
13470: LD_VAR 0 10
13474: PPUSH
13475: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13479: LD_VAR 0 10
13483: PPUSH
13484: CALL_OW 313
13488: PUSH
13489: LD_INT 6
13491: EQUAL
13492: PUSH
13493: LD_VAR 0 10
13497: PPUSH
13498: CALL_OW 266
13502: PUSH
13503: LD_INT 32
13505: PUSH
13506: LD_INT 31
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: IN
13513: OR
13514: IFFALSE 13343
13516: GO 13340
13518: POP
13519: POP
// end else
13520: GO 13902
// for j = 1 to x do
13522: LD_ADDR_VAR 0 10
13526: PUSH
13527: DOUBLE
13528: LD_INT 1
13530: DEC
13531: ST_TO_ADDR
13532: LD_VAR 0 14
13536: PUSH
13537: FOR_TO
13538: IFFALSE 13900
// begin InitHc ;
13540: CALL_OW 19
// if not f then
13544: LD_VAR 0 13
13548: NOT
13549: IFFALSE 13638
// begin PrepareHuman ( false , i , skill ) ;
13551: LD_INT 0
13553: PPUSH
13554: LD_VAR 0 9
13558: PPUSH
13559: LD_VAR 0 4
13563: PPUSH
13564: CALL_OW 380
// un := CreateHuman ;
13568: LD_ADDR_VAR 0 15
13572: PUSH
13573: CALL_OW 44
13577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13578: LD_ADDR_VAR 0 8
13582: PUSH
13583: LD_VAR 0 8
13587: PPUSH
13588: LD_INT 1
13590: PPUSH
13591: LD_VAR 0 15
13595: PPUSH
13596: CALL_OW 2
13600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13601: LD_VAR 0 15
13605: PPUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 250
13615: PPUSH
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 251
13625: PPUSH
13626: LD_INT 10
13628: PPUSH
13629: LD_INT 0
13631: PPUSH
13632: CALL_OW 50
// continue ;
13636: GO 13537
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13638: LD_VAR 0 13
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: PPUSH
13647: CALL_OW 313
13651: PUSH
13652: LD_VAR 0 13
13656: PUSH
13657: LD_INT 1
13659: ARRAY
13660: PPUSH
13661: CALL_OW 266
13665: PUSH
13666: LD_INT 32
13668: PUSH
13669: LD_INT 31
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: IN
13676: AND
13677: PUSH
13678: LD_VAR 0 13
13682: PUSH
13683: LD_INT 1
13685: ARRAY
13686: PPUSH
13687: CALL_OW 313
13691: PUSH
13692: LD_INT 6
13694: EQUAL
13695: OR
13696: IFFALSE 13716
// f := Delete ( f , 1 ) ;
13698: LD_ADDR_VAR 0 13
13702: PUSH
13703: LD_VAR 0 13
13707: PPUSH
13708: LD_INT 1
13710: PPUSH
13711: CALL_OW 3
13715: ST_TO_ADDR
// if not f then
13716: LD_VAR 0 13
13720: NOT
13721: IFFALSE 13739
// begin x := x + 2 ;
13723: LD_ADDR_VAR 0 14
13727: PUSH
13728: LD_VAR 0 14
13732: PUSH
13733: LD_INT 2
13735: PLUS
13736: ST_TO_ADDR
// continue ;
13737: GO 13537
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13739: LD_VAR 0 13
13743: PUSH
13744: LD_INT 1
13746: ARRAY
13747: PPUSH
13748: CALL_OW 266
13752: PUSH
13753: LD_INT 5
13755: EQUAL
13756: IFFALSE 13830
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13758: LD_VAR 0 13
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PPUSH
13767: CALL_OW 313
13771: PUSH
13772: LD_INT 3
13774: LESS
13775: IFFALSE 13811
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13777: LD_INT 0
13779: PPUSH
13780: LD_INT 5
13782: PUSH
13783: LD_INT 8
13785: PUSH
13786: LD_INT 9
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_VAR 0 6
13798: ARRAY
13799: PPUSH
13800: LD_VAR 0 4
13804: PPUSH
13805: CALL_OW 380
13809: GO 13828
// PrepareHuman ( false , i , skill ) ;
13811: LD_INT 0
13813: PPUSH
13814: LD_VAR 0 9
13818: PPUSH
13819: LD_VAR 0 4
13823: PPUSH
13824: CALL_OW 380
// end else
13828: GO 13847
// PrepareHuman ( false , i , skill ) ;
13830: LD_INT 0
13832: PPUSH
13833: LD_VAR 0 9
13837: PPUSH
13838: LD_VAR 0 4
13842: PPUSH
13843: CALL_OW 380
// un := CreateHuman ;
13847: LD_ADDR_VAR 0 15
13851: PUSH
13852: CALL_OW 44
13856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13857: LD_ADDR_VAR 0 8
13861: PUSH
13862: LD_VAR 0 8
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: LD_VAR 0 15
13874: PPUSH
13875: CALL_OW 2
13879: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13880: LD_VAR 0 15
13884: PPUSH
13885: LD_VAR 0 13
13889: PUSH
13890: LD_INT 1
13892: ARRAY
13893: PPUSH
13894: CALL_OW 52
// end ;
13898: GO 13537
13900: POP
13901: POP
// end ;
13902: GO 12836
13904: POP
13905: POP
// result := result ^ buildings ;
13906: LD_ADDR_VAR 0 8
13910: PUSH
13911: LD_VAR 0 8
13915: PUSH
13916: LD_VAR 0 18
13920: ADD
13921: ST_TO_ADDR
// end else
13922: GO 14065
// begin for i = 1 to personel do
13924: LD_ADDR_VAR 0 9
13928: PUSH
13929: DOUBLE
13930: LD_INT 1
13932: DEC
13933: ST_TO_ADDR
13934: LD_VAR 0 7
13938: PUSH
13939: FOR_TO
13940: IFFALSE 14063
// begin if i > 4 then
13942: LD_VAR 0 9
13946: PUSH
13947: LD_INT 4
13949: GREATER
13950: IFFALSE 13954
// break ;
13952: GO 14063
// x := personel [ i ] ;
13954: LD_ADDR_VAR 0 14
13958: PUSH
13959: LD_VAR 0 7
13963: PUSH
13964: LD_VAR 0 9
13968: ARRAY
13969: ST_TO_ADDR
// if x = - 1 then
13970: LD_VAR 0 14
13974: PUSH
13975: LD_INT 1
13977: NEG
13978: EQUAL
13979: IFFALSE 13983
// continue ;
13981: GO 13939
// PrepareHuman ( false , i , skill ) ;
13983: LD_INT 0
13985: PPUSH
13986: LD_VAR 0 9
13990: PPUSH
13991: LD_VAR 0 4
13995: PPUSH
13996: CALL_OW 380
// un := CreateHuman ;
14000: LD_ADDR_VAR 0 15
14004: PUSH
14005: CALL_OW 44
14009: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14010: LD_VAR 0 15
14014: PPUSH
14015: LD_VAR 0 1
14019: PPUSH
14020: CALL_OW 250
14024: PPUSH
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 251
14034: PPUSH
14035: LD_INT 10
14037: PPUSH
14038: LD_INT 0
14040: PPUSH
14041: CALL_OW 50
// result := result ^ un ;
14045: LD_ADDR_VAR 0 8
14049: PUSH
14050: LD_VAR 0 8
14054: PUSH
14055: LD_VAR 0 15
14059: ADD
14060: ST_TO_ADDR
// end ;
14061: GO 13939
14063: POP
14064: POP
// end ; end ;
14065: LD_VAR 0 8
14069: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14070: LD_INT 0
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14076: LD_ADDR_VAR 0 6
14080: PUSH
14081: LD_INT 34
14083: PUSH
14084: LD_INT 71
14086: PUSH
14087: LD_INT 70
14089: PUSH
14090: LD_INT 69
14092: PUSH
14093: LD_INT 39
14095: PUSH
14096: LD_INT 31
14098: PUSH
14099: LD_INT 14
14101: PUSH
14102: LD_INT 10
14104: PUSH
14105: LD_INT 40
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: ST_TO_ADDR
// resultWeapons = [ ] ;
14119: LD_ADDR_VAR 0 5
14123: PUSH
14124: EMPTY
14125: ST_TO_ADDR
// for i := 1 to weaponTechs do
14126: LD_ADDR_VAR 0 4
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_VAR 0 6
14140: PUSH
14141: FOR_TO
14142: IFFALSE 14329
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14144: LD_VAR 0 6
14148: PUSH
14149: LD_VAR 0 4
14153: ARRAY
14154: PPUSH
14155: LD_VAR 0 2
14159: PPUSH
14160: CALL_OW 482
14164: PUSH
14165: LD_VAR 0 6
14169: PUSH
14170: LD_VAR 0 4
14174: ARRAY
14175: PPUSH
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 321
14185: PUSH
14186: LD_INT 2
14188: EQUAL
14189: AND
14190: IFFALSE 14327
// case nation of nation_american :
14192: LD_VAR 0 2
14196: PUSH
14197: LD_INT 1
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14240
14205: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14206: LD_ADDR_VAR 0 5
14210: PUSH
14211: LD_VAR 0 5
14215: PUSH
14216: LD_VAR 0 6
14220: PUSH
14221: LD_VAR 0 4
14225: ARRAY
14226: PPUSH
14227: LD_VAR 0 2
14231: PPUSH
14232: CALL 14346 0 2
14236: ADD
14237: ST_TO_ADDR
14238: GO 14327
14240: LD_INT 2
14242: DOUBLE
14243: EQUAL
14244: IFTRUE 14248
14246: GO 14283
14248: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14249: LD_ADDR_VAR 0 5
14253: PUSH
14254: LD_VAR 0 5
14258: PUSH
14259: LD_VAR 0 6
14263: PUSH
14264: LD_VAR 0 4
14268: ARRAY
14269: PPUSH
14270: LD_VAR 0 2
14274: PPUSH
14275: CALL 14346 0 2
14279: ADD
14280: ST_TO_ADDR
14281: GO 14327
14283: LD_INT 3
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14326
14291: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14292: LD_ADDR_VAR 0 5
14296: PUSH
14297: LD_VAR 0 5
14301: PUSH
14302: LD_VAR 0 6
14306: PUSH
14307: LD_VAR 0 4
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 2
14317: PPUSH
14318: CALL 14346 0 2
14322: ADD
14323: ST_TO_ADDR
14324: GO 14327
14326: POP
// end ;
14327: GO 14141
14329: POP
14330: POP
// result = resultWeapons ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_VAR 0 5
14340: ST_TO_ADDR
// end ;
14341: LD_VAR 0 3
14345: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14346: LD_INT 0
14348: PPUSH
// case tech of tech_AdvMet :
14349: LD_VAR 0 1
14353: PUSH
14354: LD_INT 34
14356: DOUBLE
14357: EQUAL
14358: IFTRUE 14362
14360: GO 14390
14362: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14363: LD_ADDR_VAR 0 3
14367: PUSH
14368: LD_INT 6
14370: PUSH
14371: LD_STRING 
14373: PUSH
14374: LD_INT 46
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_VAR 0 2
14386: ARRAY
14387: ST_TO_ADDR
14388: GO 14679
14390: LD_INT 71
14392: DOUBLE
14393: EQUAL
14394: IFTRUE 14398
14396: GO 14426
14398: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_STRING 
14406: PUSH
14407: LD_STRING 
14409: PUSH
14410: LD_INT 47
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_VAR 0 2
14422: ARRAY
14423: ST_TO_ADDR
14424: GO 14679
14426: LD_INT 70
14428: DOUBLE
14429: EQUAL
14430: IFTRUE 14434
14432: GO 14462
14434: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_STRING 
14442: PUSH
14443: LD_INT 26
14445: PUSH
14446: LD_STRING 
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: PUSH
14454: LD_VAR 0 2
14458: ARRAY
14459: ST_TO_ADDR
14460: GO 14679
14462: LD_INT 69
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14498
14470: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14471: LD_ADDR_VAR 0 3
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 25
14481: PUSH
14482: LD_INT 43
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PUSH
14490: LD_VAR 0 2
14494: ARRAY
14495: ST_TO_ADDR
14496: GO 14679
14498: LD_INT 39
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14534
14506: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14507: LD_ADDR_VAR 0 3
14511: PUSH
14512: LD_INT 5
14514: PUSH
14515: LD_INT 27
14517: PUSH
14518: LD_INT 44
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: LD_VAR 0 2
14530: ARRAY
14531: ST_TO_ADDR
14532: GO 14679
14534: LD_INT 31
14536: DOUBLE
14537: EQUAL
14538: IFTRUE 14542
14540: GO 14570
14542: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14543: LD_ADDR_VAR 0 3
14547: PUSH
14548: LD_STRING 
14550: PUSH
14551: LD_STRING 
14553: PUSH
14554: LD_INT 49
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: LD_VAR 0 2
14566: ARRAY
14567: ST_TO_ADDR
14568: GO 14679
14570: LD_INT 14
14572: DOUBLE
14573: EQUAL
14574: IFTRUE 14578
14576: GO 14606
14578: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: LD_STRING 
14589: PUSH
14590: LD_STRING 
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: LD_VAR 0 2
14602: ARRAY
14603: ST_TO_ADDR
14604: GO 14679
14606: LD_INT 10
14608: DOUBLE
14609: EQUAL
14610: IFTRUE 14614
14612: GO 14642
14614: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14615: LD_ADDR_VAR 0 3
14619: PUSH
14620: LD_INT 9
14622: PUSH
14623: LD_STRING 
14625: PUSH
14626: LD_STRING 
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: LD_VAR 0 2
14638: ARRAY
14639: ST_TO_ADDR
14640: GO 14679
14642: LD_INT 40
14644: DOUBLE
14645: EQUAL
14646: IFTRUE 14650
14648: GO 14678
14650: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14651: LD_ADDR_VAR 0 3
14655: PUSH
14656: LD_INT 7
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 45
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: PUSH
14670: LD_VAR 0 2
14674: ARRAY
14675: ST_TO_ADDR
14676: GO 14679
14678: POP
// end ;
14679: LD_VAR 0 3
14683: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
14684: LD_INT 0
14686: PPUSH
14687: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
14688: LD_ADDR_VAR 0 2
14692: PUSH
14693: LD_VAR 0 1
14697: PPUSH
14698: LD_INT 1
14700: PPUSH
14701: CALL_OW 289
14705: PUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: LD_INT 2
14713: PPUSH
14714: CALL_OW 289
14718: PUSH
14719: LD_VAR 0 1
14723: PPUSH
14724: LD_INT 3
14726: PPUSH
14727: CALL_OW 289
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: ST_TO_ADDR
// end ;
14737: LD_VAR 0 2
14741: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
14742: LD_INT 0
14744: PPUSH
14745: PPUSH
// area = ListEnvironmentArea ( area ) ;
14746: LD_ADDR_VAR 0 2
14750: PUSH
14751: LD_VAR 0 2
14755: PPUSH
14756: CALL_OW 353
14760: ST_TO_ADDR
// if bulldozer > 0 then
14761: LD_VAR 0 1
14765: PUSH
14766: LD_INT 0
14768: GREATER
14769: IFFALSE 14880
// for i = area downto 1 do
14771: LD_ADDR_VAR 0 4
14775: PUSH
14776: DOUBLE
14777: LD_VAR 0 2
14781: INC
14782: ST_TO_ADDR
14783: LD_INT 1
14785: PUSH
14786: FOR_DOWNTO
14787: IFFALSE 14878
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
14789: LD_VAR 0 2
14793: PUSH
14794: LD_VAR 0 4
14798: ARRAY
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PPUSH
14804: LD_VAR 0 2
14808: PUSH
14809: LD_VAR 0 4
14813: ARRAY
14814: PUSH
14815: LD_INT 2
14817: ARRAY
14818: PPUSH
14819: CALL_OW 351
14823: IFFALSE 14876
// if not HasTask ( bulldozer ) then
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 314
14834: NOT
14835: IFFALSE 14876
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_VAR 0 2
14846: PUSH
14847: LD_VAR 0 4
14851: ARRAY
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: PPUSH
14857: LD_VAR 0 2
14861: PUSH
14862: LD_VAR 0 4
14866: ARRAY
14867: PUSH
14868: LD_INT 2
14870: ARRAY
14871: PPUSH
14872: CALL_OW 171
14876: GO 14786
14878: POP
14879: POP
// end ;
14880: LD_VAR 0 3
14884: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
14885: LD_INT 0
14887: PPUSH
14888: PPUSH
14889: PPUSH
// uc_side := GetSide ( b ) ;
14890: LD_ADDR_OWVAR 20
14894: PUSH
14895: LD_VAR 0 2
14899: PPUSH
14900: CALL_OW 255
14904: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
14905: LD_ADDR_OWVAR 21
14909: PUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 248
14919: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
14920: LD_INT 0
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 380
// un = CreateHuman ;
14935: LD_ADDR_VAR 0 4
14939: PUSH
14940: CALL_OW 44
14944: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
14945: LD_ADDR_VAR 0 5
14949: PUSH
14950: LD_VAR 0 2
14954: PPUSH
14955: CALL_OW 254
14959: PUSH
14960: LD_INT 3
14962: MINUS
14963: ST_TO_ADDR
// if dir < 0 then
14964: LD_VAR 0 5
14968: PUSH
14969: LD_INT 0
14971: LESS
14972: IFFALSE 14988
// dir := 6 + dir ;
14974: LD_ADDR_VAR 0 5
14978: PUSH
14979: LD_INT 6
14981: PUSH
14982: LD_VAR 0 5
14986: PLUS
14987: ST_TO_ADDR
// SetDir ( un , dir ) ;
14988: LD_VAR 0 4
14992: PPUSH
14993: LD_VAR 0 5
14997: PPUSH
14998: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15002: LD_VAR 0 4
15006: PPUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: CALL_OW 52
// result = un ;
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_VAR 0 4
15025: ST_TO_ADDR
// end ; end_of_file
15026: LD_VAR 0 3
15030: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15031: LD_VAR 0 2
15035: PUSH
15036: LD_INT 53
15038: EQUAL
15039: PUSH
15040: LD_VAR 0 4
15044: PUSH
15045: LD_EXP 55
15049: EQUAL
15050: AND
15051: IFFALSE 15061
// xavierJoinToPlayer = true ;
15053: LD_ADDR_EXP 10
15057: PUSH
15058: LD_INT 1
15060: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15061: LD_VAR 0 3
15065: PUSH
15066: LD_INT 6
15068: EQUAL
15069: PUSH
15070: LD_VAR 0 4
15074: PPUSH
15075: CALL_OW 255
15079: PUSH
15080: LD_INT 3
15082: EQUAL
15083: AND
15084: IFFALSE 15130
// begin ComExitVehicle ( human ) ;
15086: LD_VAR 0 4
15090: PPUSH
15091: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15095: LD_VAR 0 2
15099: PUSH
15100: LD_VAR 0 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: LD_INT 6
15111: PPUSH
15112: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15116: LD_EXP 51
15120: PPUSH
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 120
// end ; end ;
15130: PPOPN 4
15132: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15133: LD_VAR 0 1
15137: PUSH
15138: LD_INT 3
15140: EQUAL
15141: PUSH
15142: LD_VAR 0 2
15146: PUSH
15147: LD_INT 5
15149: EQUAL
15150: AND
15151: IFFALSE 15201
// begin xavierPatrol = false ;
15153: LD_ADDR_EXP 7
15157: PUSH
15158: LD_INT 0
15160: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15161: LD_INT 5
15163: PPUSH
15164: LD_INT 5
15166: PPUSH
15167: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15171: LD_INT 3
15173: PPUSH
15174: LD_INT 5
15176: PPUSH
15177: LD_INT 2
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15187: LD_EXP 55
15191: PPUSH
15192: LD_EXP 37
15196: PPUSH
15197: CALL_OW 115
// end ; end ;
15201: PPOPN 2
15203: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15204: LD_INT 0
15206: PPUSH
15207: PPUSH
// begin if unit = Burlak then
15208: LD_VAR 0 1
15212: PUSH
15213: LD_EXP 37
15217: EQUAL
15218: IFFALSE 15224
// Lose_Burlak ;
15220: CALL 16492 0 0
// if unit = Vsevolod then
15224: LD_VAR 0 1
15228: PUSH
15229: LD_EXP 48
15233: EQUAL
15234: IFFALSE 15240
// Lose_Vsevolod ;
15236: CALL 16507 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 255
15254: PPUSH
15255: CALL 18598 0 1
15259: ST_TO_ADDR
// if aiData then
15260: LD_VAR 0 2
15264: IFFALSE 15473
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 250
15275: PPUSH
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 251
15285: PPUSH
15286: LD_VAR 0 2
15290: PUSH
15291: LD_INT 8
15293: ARRAY
15294: PPUSH
15295: CALL_OW 309
15299: NOT
15300: IFFALSE 15304
// exit ;
15302: GO 15473
// RemoveUnitFromAI ( aiData , unit ) ;
15304: LD_VAR 0 2
15308: PPUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL 18507 0 2
// if GetType ( unit ) = unit_building then
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL_OW 247
15327: PUSH
15328: LD_INT 3
15330: EQUAL
15331: IFFALSE 15473
// begin if GetBType ( unit ) = 1 then
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 266
15342: PUSH
15343: LD_INT 1
15345: EQUAL
15346: IFFALSE 15358
// buildingType = 0 else
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_INT 0
15355: ST_TO_ADDR
15356: GO 15423
// if GetBType ( unit ) = 3 then
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 266
15367: PUSH
15368: LD_INT 3
15370: EQUAL
15371: IFFALSE 15383
// buildingType = 2 else
15373: LD_ADDR_VAR 0 3
15377: PUSH
15378: LD_INT 2
15380: ST_TO_ADDR
15381: GO 15423
// if GetBType ( unit ) = 5 then
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 266
15392: PUSH
15393: LD_INT 5
15395: EQUAL
15396: IFFALSE 15408
// buildingType = 4 else
15398: LD_ADDR_VAR 0 3
15402: PUSH
15403: LD_INT 4
15405: ST_TO_ADDR
15406: GO 15423
// buildingType = GetBType ( unit ) ;
15408: LD_ADDR_VAR 0 3
15412: PUSH
15413: LD_VAR 0 1
15417: PPUSH
15418: CALL_OW 266
15422: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_VAR 0 3
15432: PUSH
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 250
15442: PUSH
15443: LD_VAR 0 1
15447: PPUSH
15448: CALL_OW 251
15452: PUSH
15453: LD_VAR 0 1
15457: PPUSH
15458: CALL_OW 254
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL 18320 0 2
// end ; end ; end ;
15473: PPOPN 3
15475: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
15476: LD_INT 0
15478: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
15479: LD_ADDR_VAR 0 3
15483: PUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 255
15493: PPUSH
15494: CALL 18598 0 1
15498: ST_TO_ADDR
// if aiData then
15499: LD_VAR 0 3
15503: IFFALSE 15742
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 264
15514: PUSH
15515: LD_INT 12
15517: PUSH
15518: LD_INT 32
15520: PUSH
15521: LD_INT 51
15523: PUSH
15524: LD_INT 13
15526: PUSH
15527: LD_EXP 124
15531: PUSH
15532: LD_INT 52
15534: PUSH
15535: LD_INT 14
15537: PUSH
15538: LD_INT 53
15540: PUSH
15541: LD_INT 31
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: IN
15555: NOT
15556: IFFALSE 15615
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
15558: LD_VAR 0 3
15562: PUSH
15563: LD_INT 13
15565: ARRAY
15566: PUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: CALL 18678 0 1
15576: GREATER
15577: IFFALSE 15598
// AddNewVehicle ( aiData , vehicle , 2 ) else
15579: LD_VAR 0 3
15583: PPUSH
15584: LD_VAR 0 1
15588: PPUSH
15589: LD_INT 2
15591: PPUSH
15592: CALL 18215 0 3
15596: GO 15615
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
15598: LD_VAR 0 3
15602: PPUSH
15603: LD_VAR 0 1
15607: PPUSH
15608: LD_INT 4
15610: PPUSH
15611: CALL 18215 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 264
15624: PUSH
15625: LD_INT 12
15627: PUSH
15628: LD_INT 32
15630: PUSH
15631: LD_INT 51
15633: PUSH
15634: LD_INT 13
15636: PUSH
15637: LD_EXP 124
15641: PUSH
15642: LD_INT 52
15644: PUSH
15645: LD_INT 14
15647: PUSH
15648: LD_INT 53
15650: PUSH
15651: LD_INT 31
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: IN
15665: IFFALSE 15684
// AddNewVehicle ( aiData , vehicle , 1 ) ;
15667: LD_VAR 0 3
15671: PPUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL 18215 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
15684: LD_EXP 60
15688: PUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 263
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: IFFALSE 15742
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_EXP 60
15714: PUSH
15715: LD_INT 1
15717: PPUSH
15718: LD_EXP 60
15722: PPUSH
15723: CALL_OW 12
15727: ARRAY
15728: PPUSH
15729: CALL_OW 313
15733: PUSH
15734: LD_INT 1
15736: ARRAY
15737: PPUSH
15738: CALL_OW 53
// end ; end ;
15742: PPOPN 3
15744: END
// on BuildingStarted ( building , unit ) do var aiData ;
15745: LD_INT 0
15747: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
15748: LD_ADDR_VAR 0 3
15752: PUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: CALL_OW 255
15762: PPUSH
15763: CALL 18598 0 1
15767: ST_TO_ADDR
// if ( aiData ) then
15768: LD_VAR 0 3
15772: IFFALSE 15797
// begin RemoveDestroyedBuilding ( aiData ) ;
15774: LD_VAR 0 3
15778: PPUSH
15779: CALL 18414 0 1
// AddNewUnit ( aiData , building ) ;
15783: LD_VAR 0 3
15787: PPUSH
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL 18124 0 2
// end ; end ;
15797: PPOPN 3
15799: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
15800: LD_VAR 0 2
15804: PUSH
15805: LD_EXP 51
15809: EQUAL
15810: IFFALSE 15824
// ComMoveToArea ( vehicle , YashinExitArea ) ;
15812: LD_VAR 0 1
15816: PPUSH
15817: LD_INT 19
15819: PPUSH
15820: CALL_OW 113
// end ; end_of_file
15824: PPOPN 2
15826: END
// export function FinishMission ; begin
15827: LD_INT 0
15829: PPUSH
// SetRewards ;
15830: CALL 15851 0 0
// SavePlayerCharacters ;
15834: CALL 16030 0 0
// SaveGlobalVariables ;
15838: CALL 16472 0 0
// YouWin ;
15842: CALL_OW 103
// end ;
15846: LD_VAR 0 1
15850: RET
// function SetRewards ; begin
15851: LD_INT 0
15853: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
15854: LD_EXP 55
15858: PPUSH
15859: CALL_OW 302
15863: PUSH
15864: LD_EXP 55
15868: PPUSH
15869: CALL_OW 255
15873: PUSH
15874: LD_INT 3
15876: EQUAL
15877: AND
15878: IFFALSE 15892
// AddMedal ( Xavier , 1 ) else
15880: LD_STRING Xavier
15882: PPUSH
15883: LD_INT 1
15885: PPUSH
15886: CALL_OW 101
15890: GO 15903
// AddMedal ( Xavier , - 1 ) ;
15892: LD_STRING Xavier
15894: PPUSH
15895: LD_INT 1
15897: NEG
15898: PPUSH
15899: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
15903: LD_EXP 19
15907: PUSH
15908: LD_EXP 28
15912: LESSEQUAL
15913: IFFALSE 15927
// AddMedal ( TimeVS , 1 ) else
15915: LD_STRING TimeVS
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 101
15925: GO 15938
// AddMedal ( TimeVS , - 1 ) ;
15927: LD_STRING TimeVS
15929: PPUSH
15930: LD_INT 1
15932: NEG
15933: PPUSH
15934: CALL_OW 101
// if heikeCaptured then
15938: LD_EXP 17
15942: IFFALSE 15956
// AddMedal ( Heike , 1 ) else
15944: LD_STRING Heike
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 101
15954: GO 15967
// AddMedal ( Heike , - 1 ) ;
15956: LD_STRING Heike
15958: PPUSH
15959: LD_INT 1
15961: NEG
15962: PPUSH
15963: CALL_OW 101
// GiveMedals ( Main1 ) ;
15967: LD_STRING Main1
15969: PPUSH
15970: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
15974: LD_INT 22
15976: PUSH
15977: LD_INT 3
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 21
15986: PUSH
15987: LD_INT 1
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 23
15996: PUSH
15997: LD_INT 3
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 50
16006: PUSH
16007: EMPTY
16008: LIST
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: PPUSH
16021: CALL_OW 43
// end ;
16025: LD_VAR 0 1
16029: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16034: LD_EXP 37
16038: PPUSH
16039: LD_STRING Burlak
16041: PPUSH
16042: LD_INT 3
16044: PPUSH
16045: CALL 11519 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16049: LD_EXP 38
16053: PPUSH
16054: LD_STRING Karamazov
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: CALL 11519 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16064: LD_EXP 39
16068: PPUSH
16069: LD_STRING Petrovova
16071: PPUSH
16072: LD_INT 3
16074: PPUSH
16075: CALL 11519 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16079: LD_EXP 40
16083: PPUSH
16084: LD_STRING Gleb
16086: PPUSH
16087: LD_INT 3
16089: PPUSH
16090: CALL 11519 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16094: LD_EXP 41
16098: PPUSH
16099: LD_STRING Petrosyan
16101: PPUSH
16102: LD_INT 3
16104: PPUSH
16105: CALL 11519 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16109: LD_EXP 43
16113: PPUSH
16114: LD_STRING Dolgov
16116: PPUSH
16117: LD_INT 3
16119: PPUSH
16120: CALL 11519 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16124: LD_EXP 44
16128: PPUSH
16129: LD_STRING Lipshchin
16131: PPUSH
16132: LD_INT 3
16134: PPUSH
16135: CALL 11519 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16139: LD_EXP 42
16143: PPUSH
16144: LD_STRING Titov
16146: PPUSH
16147: LD_INT 3
16149: PPUSH
16150: CALL 11519 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16154: LD_EXP 45
16158: PPUSH
16159: LD_STRING Kirilenkova
16161: PPUSH
16162: LD_INT 3
16164: PPUSH
16165: CALL 11519 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16169: LD_EXP 46
16173: PPUSH
16174: LD_STRING Belkov
16176: PPUSH
16177: LD_INT 3
16179: PPUSH
16180: CALL 11519 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16184: LD_EXP 47
16188: PPUSH
16189: LD_STRING Belkov2
16191: PPUSH
16192: LD_INT 3
16194: PPUSH
16195: CALL 11519 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16199: LD_EXP 55
16203: PPUSH
16204: LD_STRING Xavier
16206: PPUSH
16207: LD_INT 3
16209: PPUSH
16210: CALL 11519 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16214: LD_EXP 48
16218: PPUSH
16219: LD_STRING Vsevolod
16221: PPUSH
16222: LD_INT 3
16224: PPUSH
16225: CALL 11519 0 3
// if heikeCaptured then
16229: LD_EXP 17
16233: IFFALSE 16247
// SaveCharacters ( Heike , 07_Heike ) ;
16235: LD_EXP 56
16239: PPUSH
16240: LD_STRING 07_Heike
16242: PPUSH
16243: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
16247: LD_INT 22
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 12
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 25
16282: PUSH
16283: LD_INT 16
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 15
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: PPUSH
16311: CALL_OW 69
16315: PPUSH
16316: LD_STRING other_apemans
16318: PPUSH
16319: LD_INT 3
16321: PPUSH
16322: CALL 11576 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_INT 22
16333: PUSH
16334: LD_INT 3
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 21
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 23
16353: PUSH
16354: LD_INT 3
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: PPUSH
16366: CALL_OW 69
16370: PUSH
16371: LD_EXP 37
16375: PUSH
16376: LD_EXP 38
16380: PUSH
16381: LD_EXP 39
16385: PUSH
16386: LD_EXP 40
16390: PUSH
16391: LD_EXP 41
16395: PUSH
16396: LD_EXP 42
16400: PUSH
16401: LD_EXP 43
16405: PUSH
16406: LD_EXP 44
16410: PUSH
16411: LD_EXP 45
16415: PUSH
16416: LD_EXP 46
16420: PUSH
16421: LD_EXP 47
16425: PUSH
16426: LD_EXP 55
16430: PUSH
16431: LD_EXP 48
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: DIFF
16451: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
16452: LD_VAR 0 2
16456: PPUSH
16457: LD_STRING other_survivors
16459: PPUSH
16460: LD_INT 3
16462: PPUSH
16463: CALL 11576 0 3
// end ;
16467: LD_VAR 0 1
16471: RET
// function SaveGlobalVariables ; begin
16472: LD_INT 0
16474: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
16475: LD_EXP 17
16479: PPUSH
16480: LD_STRING 07_HeikeCaptured_1
16482: PPUSH
16483: CALL_OW 39
// end ; end_of_file
16487: LD_VAR 0 1
16491: RET
// export function Lose_Burlak ; begin
16492: LD_INT 0
16494: PPUSH
// YouLost ( Burlak ) ;
16495: LD_STRING Burlak
16497: PPUSH
16498: CALL_OW 104
// end ;
16502: LD_VAR 0 1
16506: RET
// export function Lose_Vsevolod ; begin
16507: LD_INT 0
16509: PPUSH
// YouLost ( Sevi ) ;
16510: LD_STRING Sevi
16512: PPUSH
16513: CALL_OW 104
// end ;
16517: LD_VAR 0 1
16521: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
16522: LD_EXP 56
16526: PPUSH
16527: LD_INT 9
16529: PPUSH
16530: CALL_OW 308
16534: PUSH
16535: LD_EXP 57
16539: PPUSH
16540: LD_INT 9
16542: PPUSH
16543: CALL_OW 308
16547: OR
16548: IFFALSE 16560
16550: GO 16552
16552: DISABLE
// YouLost ( Heike ) ; end_of_file
16553: LD_STRING Heike
16555: PPUSH
16556: CALL_OW 104
16560: END
// export aiStructDatas ; export function InitAIManager ; begin
16561: LD_INT 0
16563: PPUSH
// aiStructDatas = [ ] ;
16564: LD_ADDR_EXP 62
16568: PUSH
16569: EMPTY
16570: ST_TO_ADDR
// end ;
16571: LD_VAR 0 1
16575: RET
// every 1 do
16576: GO 16578
16578: DISABLE
// begin InitAIManager ;
16579: CALL 16561 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 0
16588: PPUSH
16589: LD_INT 2
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: LD_EXP 59
16599: PPUSH
16600: LD_INT 10
16602: PPUSH
16603: LD_INT 22
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 21
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PPUSH
16627: CALL_OW 70
16631: PPUSH
16632: EMPTY
16633: PPUSH
16634: LD_INT 10
16636: PPUSH
16637: LD_INT 12
16639: PPUSH
16640: LD_INT 13
16642: PPUSH
16643: LD_INT 11
16645: PPUSH
16646: LD_INT 13
16648: PPUSH
16649: LD_INT 13
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: LD_INT 25
16660: PUSH
16661: LD_INT 27
16663: PUSH
16664: LD_INT 23
16666: PUSH
16667: LD_INT 26
16669: PUSH
16670: LD_INT 28
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 13
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: LD_INT 2
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 27
16700: PUSH
16701: LD_INT 23
16703: PUSH
16704: LD_INT 26
16706: PUSH
16707: LD_INT 28
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PPUSH
16727: LD_INT 13
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: LD_INT 2
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 27
16741: PUSH
16742: LD_INT 23
16744: PUSH
16745: LD_INT 26
16747: PUSH
16748: LD_INT 28
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 13
16766: PUSH
16767: LD_INT 1
16769: PUSH
16770: LD_INT 2
16772: PUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 27
16778: PUSH
16779: LD_INT 23
16781: PUSH
16782: LD_INT 26
16784: PUSH
16785: LD_INT 28
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 13
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 25
16812: PUSH
16813: LD_INT 27
16815: PUSH
16816: LD_INT 23
16818: PUSH
16819: LD_INT 26
16821: PUSH
16822: LD_INT 28
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: PPUSH
16843: LD_INT 1
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: LD_INT 0
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: PPUSH
16857: LD_INT 5250
16859: PPUSH
16860: LD_INT 1
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: LD_INT 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: LIST
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 1
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL 17750 0 20
// end ;
16887: END
// every 0 0$1 do
16888: GO 16890
16890: DISABLE
// begin StateManager ( 1 ) ;
16891: LD_INT 1
16893: PPUSH
16894: CALL 18898 0 1
// MechanicsManager ( 1 ) ;
16898: LD_INT 1
16900: PPUSH
16901: CALL 20011 0 1
// VehiclesManager ( 1 ) ;
16905: LD_INT 1
16907: PPUSH
16908: CALL 20275 0 1
// SoldiersManager ( 1 ) ;
16912: LD_INT 1
16914: PPUSH
16915: CALL 19384 0 1
// DefenceManager ( 1 ) ;
16919: LD_INT 1
16921: PPUSH
16922: CALL 20785 0 1
// CollectCrates ( 1 ) ;
16926: LD_INT 1
16928: PPUSH
16929: CALL 21717 0 1
// FleeToHealArea ( 1 ) ;
16933: LD_INT 1
16935: PPUSH
16936: CALL 21907 0 1
// FleeToRepairArea ( 1 ) ;
16940: LD_INT 1
16942: PPUSH
16943: CALL 22038 0 1
// RepairBuildings ( 1 ) ;
16947: LD_INT 1
16949: PPUSH
16950: CALL 22194 0 1
// HealDamageUnits ( 1 ) ;
16954: LD_INT 1
16956: PPUSH
16957: CALL 22939 0 1
// enable ;
16961: ENABLE
// end ;
16962: END
// every 0 0$1 do
16963: GO 16965
16965: DISABLE
// begin ProduceVehicles ( 1 ) ;
16966: LD_INT 1
16968: PPUSH
16969: CALL 23437 0 1
// enable ;
16973: ENABLE
// end ;
16974: END
// every 0 0$1 do
16975: GO 16977
16977: DISABLE
// begin AttackManager ( 1 ) ;
16978: LD_INT 1
16980: PPUSH
16981: CALL 21283 0 1
// enable ;
16985: ENABLE
// end ;
16986: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
16987: LD_INT 14
16989: PPUSH
16990: LD_INT 22
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 70
17004: PUSH
17005: LD_INT 15
17007: PPUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 3
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 70
17022: OR
17023: PUSH
17024: LD_INT 16
17026: PPUSH
17027: LD_INT 22
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 70
17041: OR
17042: PUSH
17043: LD_INT 17
17045: PPUSH
17046: LD_INT 22
17048: PUSH
17049: LD_INT 3
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 70
17060: OR
17061: PUSH
17062: LD_INT 18
17064: PPUSH
17065: LD_INT 22
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PPUSH
17075: CALL_OW 70
17079: OR
17080: PUSH
17081: LD_EXP 61
17085: AND
17086: IFFALSE 17506
17088: GO 17090
17090: DISABLE
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
// begin unitsInArea = [ ] ;
17098: LD_ADDR_VAR 0 2
17102: PUSH
17103: EMPTY
17104: ST_TO_ADDR
// tmp = [ ] ;
17105: LD_ADDR_VAR 0 5
17109: PUSH
17110: EMPTY
17111: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17112: LD_ADDR_VAR 0 2
17116: PUSH
17117: LD_VAR 0 2
17121: PUSH
17122: LD_INT 14
17124: PPUSH
17125: LD_INT 22
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PPUSH
17135: CALL_OW 70
17139: ADD
17140: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17141: LD_ADDR_VAR 0 2
17145: PUSH
17146: LD_VAR 0 2
17150: PUSH
17151: LD_INT 15
17153: PPUSH
17154: LD_INT 22
17156: PUSH
17157: LD_INT 3
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PPUSH
17164: CALL_OW 70
17168: ADD
17169: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: LD_VAR 0 2
17179: PUSH
17180: LD_INT 16
17182: PPUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 3
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PPUSH
17193: CALL_OW 70
17197: ADD
17198: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17199: LD_ADDR_VAR 0 2
17203: PUSH
17204: LD_VAR 0 2
17208: PUSH
17209: LD_INT 17
17211: PPUSH
17212: LD_INT 22
17214: PUSH
17215: LD_INT 3
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 70
17226: ADD
17227: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_VAR 0 2
17237: PUSH
17238: LD_INT 18
17240: PPUSH
17241: LD_INT 22
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PPUSH
17251: CALL_OW 70
17255: ADD
17256: ST_TO_ADDR
// for unit in unitsInArea do
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_VAR 0 2
17266: PUSH
17267: FOR_IN
17268: IFFALSE 17503
// begin if GetType ( unit ) = unit_human then
17270: LD_VAR 0 3
17274: PPUSH
17275: CALL_OW 247
17279: PUSH
17280: LD_INT 1
17282: EQUAL
17283: IFFALSE 17295
// minDistance = 3 else
17285: LD_ADDR_VAR 0 4
17289: PUSH
17290: LD_INT 3
17292: ST_TO_ADDR
17293: GO 17303
// minDistance = 4 ;
17295: LD_ADDR_VAR 0 4
17299: PUSH
17300: LD_INT 4
17302: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
17303: LD_ADDR_VAR 0 1
17307: PUSH
17308: DOUBLE
17309: LD_INT 1
17311: DEC
17312: ST_TO_ADDR
17313: LD_EXP 61
17317: PUSH
17318: LD_INT 2
17320: DIV
17321: PUSH
17322: FOR_TO
17323: IFFALSE 17482
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
17325: LD_EXP 61
17329: PUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 2
17337: MUL
17338: PUSH
17339: LD_INT 1
17341: MINUS
17342: ARRAY
17343: PPUSH
17344: LD_EXP 61
17348: PUSH
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 2
17356: MUL
17357: ARRAY
17358: PPUSH
17359: LD_VAR 0 3
17363: PPUSH
17364: CALL_OW 250
17368: PPUSH
17369: LD_VAR 0 3
17373: PPUSH
17374: CALL_OW 251
17378: PPUSH
17379: CALL_OW 298
17383: PUSH
17384: LD_VAR 0 4
17388: LESS
17389: IFFALSE 17434
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
17391: LD_EXP 61
17395: PUSH
17396: LD_VAR 0 1
17400: PUSH
17401: LD_INT 2
17403: MUL
17404: PUSH
17405: LD_INT 1
17407: MINUS
17408: ARRAY
17409: PPUSH
17410: LD_EXP 61
17414: PUSH
17415: LD_VAR 0 1
17419: PUSH
17420: LD_INT 2
17422: MUL
17423: ARRAY
17424: PPUSH
17425: LD_INT 2
17427: PPUSH
17428: CALL_OW 456
17432: GO 17480
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
17434: LD_ADDR_VAR 0 5
17438: PUSH
17439: LD_VAR 0 5
17443: PUSH
17444: LD_EXP 61
17448: PUSH
17449: LD_VAR 0 1
17453: PUSH
17454: LD_INT 2
17456: MUL
17457: PUSH
17458: LD_INT 1
17460: MINUS
17461: ARRAY
17462: ADD
17463: PUSH
17464: LD_EXP 61
17468: PUSH
17469: LD_VAR 0 1
17473: PUSH
17474: LD_INT 2
17476: MUL
17477: ARRAY
17478: ADD
17479: ST_TO_ADDR
17480: GO 17322
17482: POP
17483: POP
// minesList = tmp ;
17484: LD_ADDR_EXP 61
17488: PUSH
17489: LD_VAR 0 5
17493: ST_TO_ADDR
// tmp := [ ] ;
17494: LD_ADDR_VAR 0 5
17498: PUSH
17499: EMPTY
17500: ST_TO_ADDR
// end ;
17501: GO 17267
17503: POP
17504: POP
// enable ;
17505: ENABLE
// end ;
17506: PPOPN 5
17508: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 255
17516: PUSH
17517: LD_INT 3
17519: EQUAL
17520: PUSH
17521: LD_INT 2
17523: PPUSH
17524: CALL_OW 303
17528: OR
17529: IFFALSE 17658
17531: GO 17533
17533: DISABLE
17534: LD_INT 0
17536: PPUSH
17537: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
17538: LD_ADDR_VAR 0 2
17542: PUSH
17543: LD_INT 22
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 50
17555: PUSH
17556: EMPTY
17557: LIST
17558: PUSH
17559: LD_INT 21
17561: PUSH
17562: LD_INT 3
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 30
17571: PUSH
17572: LD_INT 32
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: PUSH
17590: FOR_IN
17591: IFFALSE 17656
// if UnitsInside ( turret ) then
17593: LD_VAR 0 2
17597: PPUSH
17598: CALL_OW 313
17602: IFFALSE 17654
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_VAR 0 2
17613: PPUSH
17614: CALL_OW 313
17618: PUSH
17619: LD_INT 1
17621: ARRAY
17622: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: CALL_OW 122
// wait ( 0 0$01 ) ;
17632: LD_INT 35
17634: PPUSH
17635: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_INT 103
17646: PPUSH
17647: LD_INT 48
17649: PPUSH
17650: CALL_OW 114
// end ;
17654: GO 17590
17656: POP
17657: POP
// end ;
17658: PPOPN 2
17660: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
17661: GO 17663
17663: DISABLE
17664: LD_INT 0
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
17670: LD_ADDR_VAR 0 4
17674: PUSH
17675: LD_INT 2
17677: PPUSH
17678: LD_INT 2
17680: PPUSH
17681: LD_INT 1
17683: PPUSH
17684: CALL 40403 0 3
17688: ST_TO_ADDR
// for i = 1 to ar_tech_list do
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: DOUBLE
17695: LD_INT 1
17697: DEC
17698: ST_TO_ADDR
17699: LD_VAR 0 4
17703: PUSH
17704: FOR_TO
17705: IFFALSE 17745
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
17707: LD_INT 13
17709: PPUSH
17710: LD_VAR 0 4
17714: PUSH
17715: LD_VAR 0 1
17719: ARRAY
17720: PPUSH
17721: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
17725: LD_INT 14
17727: PPUSH
17728: LD_VAR 0 4
17732: PUSH
17733: LD_VAR 0 1
17737: ARRAY
17738: PPUSH
17739: CALL_OW 184
// end ;
17743: GO 17704
17745: POP
17746: POP
// end ;
17747: PPOPN 4
17749: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
17750: LD_INT 0
17752: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
17753: LD_ADDR_EXP 62
17757: PUSH
17758: LD_EXP 62
17762: PUSH
17763: LD_VAR 0 1
17767: PUSH
17768: LD_VAR 0 2
17772: PUSH
17773: LD_VAR 0 3
17777: PUSH
17778: LD_VAR 0 4
17782: PUSH
17783: LD_VAR 0 5
17787: PUSH
17788: LD_VAR 0 6
17792: PUSH
17793: LD_VAR 0 7
17797: PUSH
17798: LD_VAR 0 8
17802: PUSH
17803: LD_VAR 0 9
17807: PUSH
17808: LD_VAR 0 10
17812: PUSH
17813: LD_VAR 0 11
17817: PUSH
17818: LD_VAR 0 12
17822: PUSH
17823: LD_VAR 0 13
17827: PUSH
17828: LD_VAR 0 14
17832: PUSH
17833: LD_VAR 0 15
17837: PUSH
17838: LD_VAR 0 16
17842: PUSH
17843: LD_VAR 0 17
17847: PUSH
17848: LD_VAR 0 18
17852: PUSH
17853: LD_VAR 0 19
17857: PUSH
17858: LD_VAR 0 20
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: EMPTY
17886: LIST
17887: ADD
17888: ST_TO_ADDR
// end ;
17889: LD_VAR 0 21
17893: RET
// export function ActiveAI ( index ) ; begin
17894: LD_INT 0
17896: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
17897: LD_ADDR_EXP 62
17901: PUSH
17902: LD_EXP 62
17906: PPUSH
17907: LD_VAR 0 1
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL 45286 0 3
17926: ST_TO_ADDR
// end ;
17927: LD_VAR 0 2
17931: RET
// export function DeactiveAI ( index ) ; begin
17932: LD_INT 0
17934: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
17935: LD_ADDR_EXP 62
17939: PUSH
17940: LD_EXP 62
17944: PPUSH
17945: LD_VAR 0 1
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: LD_INT 0
17959: PPUSH
17960: CALL 45286 0 3
17964: ST_TO_ADDR
// end ;
17965: LD_VAR 0 2
17969: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
17970: LD_INT 0
17972: PPUSH
17973: PPUSH
// for i := 1 to aiStructDatas do
17974: LD_ADDR_VAR 0 3
17978: PUSH
17979: DOUBLE
17980: LD_INT 1
17982: DEC
17983: ST_TO_ADDR
17984: LD_EXP 62
17988: PUSH
17989: FOR_TO
17990: IFFALSE 18036
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
17992: LD_EXP 62
17996: PUSH
17997: LD_VAR 0 3
18001: ARRAY
18002: PUSH
18003: LD_INT 1
18005: ARRAY
18006: PUSH
18007: LD_VAR 0 1
18011: EQUAL
18012: IFFALSE 18034
// begin result = aiStructDatas [ i ] ;
18014: LD_ADDR_VAR 0 2
18018: PUSH
18019: LD_EXP 62
18023: PUSH
18024: LD_VAR 0 3
18028: ARRAY
18029: ST_TO_ADDR
// exit ;
18030: POP
18031: POP
18032: GO 18045
// end ;
18034: GO 17989
18036: POP
18037: POP
// result = [ ] ;
18038: LD_ADDR_VAR 0 2
18042: PUSH
18043: EMPTY
18044: ST_TO_ADDR
// end ;
18045: LD_VAR 0 2
18049: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18050: LD_INT 0
18052: PPUSH
18053: PPUSH
// for i := 1 to aiStructDatas do
18054: LD_ADDR_VAR 0 3
18058: PUSH
18059: DOUBLE
18060: LD_INT 1
18062: DEC
18063: ST_TO_ADDR
18064: LD_EXP 62
18068: PUSH
18069: FOR_TO
18070: IFFALSE 18110
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18072: LD_EXP 62
18076: PUSH
18077: LD_VAR 0 3
18081: ARRAY
18082: PUSH
18083: LD_INT 1
18085: ARRAY
18086: PUSH
18087: LD_VAR 0 1
18091: EQUAL
18092: IFFALSE 18108
// begin result = i ;
18094: LD_ADDR_VAR 0 2
18098: PUSH
18099: LD_VAR 0 3
18103: ST_TO_ADDR
// exit ;
18104: POP
18105: POP
18106: GO 18119
// end ;
18108: GO 18069
18110: POP
18111: POP
// result = [ ] ;
18112: LD_ADDR_VAR 0 2
18116: PUSH
18117: EMPTY
18118: ST_TO_ADDR
// end ;
18119: LD_VAR 0 2
18123: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18124: LD_INT 0
18126: PPUSH
18127: PPUSH
18128: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18129: LD_ADDR_VAR 0 4
18133: PUSH
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PPUSH
18143: CALL 18050 0 1
18147: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18148: LD_ADDR_VAR 0 5
18152: PUSH
18153: LD_VAR 0 1
18157: PUSH
18158: LD_INT 5
18160: ARRAY
18161: ST_TO_ADDR
// newArray = newArray ^ unit ;
18162: LD_ADDR_VAR 0 5
18166: PUSH
18167: LD_VAR 0 5
18171: PUSH
18172: LD_VAR 0 2
18176: ADD
18177: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18178: LD_ADDR_EXP 62
18182: PUSH
18183: LD_EXP 62
18187: PPUSH
18188: LD_VAR 0 4
18192: PUSH
18193: LD_INT 5
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: LD_VAR 0 5
18204: PPUSH
18205: CALL 45286 0 3
18209: ST_TO_ADDR
// end ;
18210: LD_VAR 0 3
18214: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18215: LD_INT 0
18217: PPUSH
18218: PPUSH
18219: PPUSH
// SetTag ( veh , state ) ;
18220: LD_VAR 0 2
18224: PPUSH
18225: LD_VAR 0 3
18229: PPUSH
18230: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18234: LD_ADDR_VAR 0 5
18238: PUSH
18239: LD_VAR 0 1
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PPUSH
18248: CALL 18050 0 1
18252: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18253: LD_ADDR_VAR 0 6
18257: PUSH
18258: LD_VAR 0 1
18262: PUSH
18263: LD_INT 5
18265: ARRAY
18266: ST_TO_ADDR
// newArray = newArray ^ veh ;
18267: LD_ADDR_VAR 0 6
18271: PUSH
18272: LD_VAR 0 6
18276: PUSH
18277: LD_VAR 0 2
18281: ADD
18282: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18283: LD_ADDR_EXP 62
18287: PUSH
18288: LD_EXP 62
18292: PPUSH
18293: LD_VAR 0 5
18297: PUSH
18298: LD_INT 5
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: LD_VAR 0 6
18309: PPUSH
18310: CALL 45286 0 3
18314: ST_TO_ADDR
// end ;
18315: LD_VAR 0 4
18319: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
18320: LD_INT 0
18322: PPUSH
18323: PPUSH
18324: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18325: LD_ADDR_VAR 0 4
18329: PUSH
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: ARRAY
18338: PPUSH
18339: CALL 18050 0 1
18343: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
18344: LD_ADDR_VAR 0 5
18348: PUSH
18349: LD_VAR 0 1
18353: PUSH
18354: LD_INT 7
18356: ARRAY
18357: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
18358: LD_ADDR_VAR 0 5
18362: PUSH
18363: LD_VAR 0 5
18367: PUSH
18368: LD_VAR 0 2
18372: PUSH
18373: EMPTY
18374: LIST
18375: ADD
18376: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
18377: LD_ADDR_EXP 62
18381: PUSH
18382: LD_EXP 62
18386: PPUSH
18387: LD_VAR 0 4
18391: PUSH
18392: LD_INT 7
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PPUSH
18399: LD_VAR 0 5
18403: PPUSH
18404: CALL 45286 0 3
18408: ST_TO_ADDR
// end ;
18409: LD_VAR 0 3
18413: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
18414: LD_INT 0
18416: PPUSH
18417: PPUSH
18418: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_VAR 0 1
18428: PUSH
18429: LD_INT 1
18431: ARRAY
18432: PPUSH
18433: CALL 18050 0 1
18437: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
18438: LD_ADDR_VAR 0 4
18442: PUSH
18443: LD_VAR 0 1
18447: PUSH
18448: LD_INT 7
18450: ARRAY
18451: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
18452: LD_ADDR_VAR 0 4
18456: PUSH
18457: LD_VAR 0 4
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 3
18469: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
18470: LD_ADDR_EXP 62
18474: PUSH
18475: LD_EXP 62
18479: PPUSH
18480: LD_VAR 0 3
18484: PUSH
18485: LD_INT 7
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PPUSH
18492: LD_VAR 0 4
18496: PPUSH
18497: CALL 45286 0 3
18501: ST_TO_ADDR
// end ;
18502: LD_VAR 0 2
18506: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
18507: LD_INT 0
18509: PPUSH
18510: PPUSH
18511: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18512: LD_ADDR_VAR 0 4
18516: PUSH
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL 18050 0 1
18530: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18531: LD_ADDR_VAR 0 5
18535: PUSH
18536: LD_VAR 0 1
18540: PUSH
18541: LD_INT 5
18543: ARRAY
18544: ST_TO_ADDR
// newArray = newArray diff unit ;
18545: LD_ADDR_VAR 0 5
18549: PUSH
18550: LD_VAR 0 5
18554: PUSH
18555: LD_VAR 0 2
18559: DIFF
18560: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18561: LD_ADDR_EXP 62
18565: PUSH
18566: LD_EXP 62
18570: PPUSH
18571: LD_VAR 0 4
18575: PUSH
18576: LD_INT 5
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PPUSH
18583: LD_VAR 0 5
18587: PPUSH
18588: CALL 45286 0 3
18592: ST_TO_ADDR
// end ;
18593: LD_VAR 0 3
18597: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
18598: LD_INT 0
18600: PPUSH
18601: PPUSH
// for i := 1 to aiStructDatas do
18602: LD_ADDR_VAR 0 3
18606: PUSH
18607: DOUBLE
18608: LD_INT 1
18610: DEC
18611: ST_TO_ADDR
18612: LD_EXP 62
18616: PUSH
18617: FOR_TO
18618: IFFALSE 18664
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
18620: LD_EXP 62
18624: PUSH
18625: LD_VAR 0 3
18629: ARRAY
18630: PUSH
18631: LD_INT 3
18633: ARRAY
18634: PUSH
18635: LD_VAR 0 1
18639: EQUAL
18640: IFFALSE 18662
// begin result = aiStructDatas [ i ] ;
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_EXP 62
18651: PUSH
18652: LD_VAR 0 3
18656: ARRAY
18657: ST_TO_ADDR
// exit ;
18658: POP
18659: POP
18660: GO 18673
// end ;
18662: GO 18617
18664: POP
18665: POP
// result = [ ] ;
18666: LD_ADDR_VAR 0 2
18670: PUSH
18671: EMPTY
18672: ST_TO_ADDR
// end ;
18673: LD_VAR 0 2
18677: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
18678: LD_INT 0
18680: PPUSH
18681: PPUSH
18682: PPUSH
// if not aiData then
18683: LD_VAR 0 1
18687: NOT
18688: IFFALSE 18699
// begin result = [ ] ;
18690: LD_ADDR_VAR 0 2
18694: PUSH
18695: EMPTY
18696: ST_TO_ADDR
// exit ;
18697: GO 18783
// end ; defVehs = [ ] ;
18699: LD_ADDR_VAR 0 3
18703: PUSH
18704: EMPTY
18705: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
18706: LD_ADDR_VAR 0 4
18710: PUSH
18711: LD_VAR 0 1
18715: PUSH
18716: LD_INT 5
18718: ARRAY
18719: PPUSH
18720: LD_INT 21
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 72
18734: PUSH
18735: FOR_IN
18736: IFFALSE 18771
// if GetTag ( veh ) = 2 then
18738: LD_VAR 0 4
18742: PPUSH
18743: CALL_OW 110
18747: PUSH
18748: LD_INT 2
18750: EQUAL
18751: IFFALSE 18769
// defVehs = defVehs ^ veh ;
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: LD_VAR 0 3
18762: PUSH
18763: LD_VAR 0 4
18767: ADD
18768: ST_TO_ADDR
18769: GO 18735
18771: POP
18772: POP
// result = defVehs ;
18773: LD_ADDR_VAR 0 2
18777: PUSH
18778: LD_VAR 0 3
18782: ST_TO_ADDR
// end ;
18783: LD_VAR 0 2
18787: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
18788: LD_INT 0
18790: PPUSH
18791: PPUSH
18792: PPUSH
// if not aiData then
18793: LD_VAR 0 1
18797: NOT
18798: IFFALSE 18809
// begin result = [ ] ;
18800: LD_ADDR_VAR 0 2
18804: PUSH
18805: EMPTY
18806: ST_TO_ADDR
// exit ;
18807: GO 18893
// end ; attackVehs = [ ] ;
18809: LD_ADDR_VAR 0 3
18813: PUSH
18814: EMPTY
18815: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
18816: LD_ADDR_VAR 0 4
18820: PUSH
18821: LD_VAR 0 1
18825: PUSH
18826: LD_INT 5
18828: ARRAY
18829: PPUSH
18830: LD_INT 21
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PPUSH
18840: CALL_OW 72
18844: PUSH
18845: FOR_IN
18846: IFFALSE 18881
// if GetTag ( veh ) = 4 then
18848: LD_VAR 0 4
18852: PPUSH
18853: CALL_OW 110
18857: PUSH
18858: LD_INT 4
18860: EQUAL
18861: IFFALSE 18879
// attackVehs = attackVehs ^ veh ;
18863: LD_ADDR_VAR 0 3
18867: PUSH
18868: LD_VAR 0 3
18872: PUSH
18873: LD_VAR 0 4
18877: ADD
18878: ST_TO_ADDR
18879: GO 18845
18881: POP
18882: POP
// result = attackVehs ;
18883: LD_ADDR_VAR 0 2
18887: PUSH
18888: LD_VAR 0 3
18892: ST_TO_ADDR
// end ;
18893: LD_VAR 0 2
18897: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL 17970 0 1
18917: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
18918: LD_VAR 0 3
18922: PUSH
18923: LD_INT 2
18925: ARRAY
18926: PUSH
18927: LD_INT 0
18929: EQUAL
18930: IFFALSE 18934
// exit ;
18932: GO 19379
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
18934: LD_ADDR_VAR 0 4
18938: PUSH
18939: LD_VAR 0 3
18943: PUSH
18944: LD_INT 5
18946: ARRAY
18947: PPUSH
18948: LD_INT 21
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL_OW 72
18962: PUSH
18963: FOR_IN
18964: IFFALSE 19069
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
18966: LD_VAR 0 4
18970: PPUSH
18971: CALL_OW 256
18975: PUSH
18976: LD_INT 1000
18978: EQUAL
18979: PUSH
18980: LD_VAR 0 4
18984: PPUSH
18985: CALL_OW 110
18989: PUSH
18990: LD_INT 0
18992: EQUAL
18993: AND
18994: IFFALSE 19010
// SetTag ( unit , 1 ) else
18996: LD_VAR 0 4
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 109
19008: GO 19067
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19010: LD_VAR 0 4
19014: PPUSH
19015: CALL_OW 256
19019: PUSH
19020: LD_INT 950
19022: LESSEQUAL
19023: PUSH
19024: LD_VAR 0 4
19028: PPUSH
19029: CALL_OW 256
19033: PUSH
19034: LD_INT 250
19036: GREATER
19037: AND
19038: PUSH
19039: LD_VAR 0 4
19043: PPUSH
19044: CALL_OW 110
19048: PUSH
19049: LD_INT 1
19051: EQUAL
19052: AND
19053: IFFALSE 19067
// SetTag ( unit , 0 ) ;
19055: LD_VAR 0 4
19059: PPUSH
19060: LD_INT 0
19062: PPUSH
19063: CALL_OW 109
// end ;
19067: GO 18963
19069: POP
19070: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19071: LD_ADDR_VAR 0 4
19075: PUSH
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 5
19083: ARRAY
19084: PPUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 72
19099: PUSH
19100: FOR_IN
19101: IFFALSE 19377
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19103: LD_VAR 0 4
19107: PPUSH
19108: CALL_OW 256
19112: PUSH
19113: LD_INT 1000
19115: EQUAL
19116: PUSH
19117: LD_VAR 0 4
19121: PPUSH
19122: CALL_OW 110
19126: PUSH
19127: LD_INT 3
19129: EQUAL
19130: AND
19131: IFFALSE 19145
// SetTag ( unit , 2 ) ;
19133: LD_VAR 0 4
19137: PPUSH
19138: LD_INT 2
19140: PPUSH
19141: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19145: LD_VAR 0 4
19149: PPUSH
19150: CALL_OW 256
19154: PUSH
19155: LD_INT 1000
19157: EQUAL
19158: PUSH
19159: LD_VAR 0 4
19163: PPUSH
19164: CALL_OW 110
19168: PUSH
19169: LD_INT 5
19171: EQUAL
19172: AND
19173: IFFALSE 19187
// SetTag ( unit , 4 ) ;
19175: LD_VAR 0 4
19179: PPUSH
19180: LD_INT 4
19182: PPUSH
19183: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19187: LD_VAR 0 4
19191: PPUSH
19192: CALL_OW 256
19196: PUSH
19197: LD_INT 650
19199: LESSEQUAL
19200: PUSH
19201: LD_VAR 0 4
19205: PPUSH
19206: CALL_OW 110
19210: PUSH
19211: LD_INT 4
19213: EQUAL
19214: AND
19215: PUSH
19216: LD_VAR 0 4
19220: PPUSH
19221: CALL_OW 263
19225: PUSH
19226: LD_INT 1
19228: EQUAL
19229: AND
19230: IFFALSE 19244
// SetTag ( unit , 5 ) ;
19232: LD_VAR 0 4
19236: PPUSH
19237: LD_INT 5
19239: PPUSH
19240: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
19244: LD_VAR 0 4
19248: PPUSH
19249: CALL_OW 256
19253: PUSH
19254: LD_INT 650
19256: LESSEQUAL
19257: PUSH
19258: LD_VAR 0 4
19262: PPUSH
19263: CALL_OW 110
19267: PUSH
19268: LD_INT 2
19270: EQUAL
19271: AND
19272: PUSH
19273: LD_VAR 0 4
19277: PPUSH
19278: CALL_OW 263
19282: PUSH
19283: LD_INT 1
19285: EQUAL
19286: AND
19287: IFFALSE 19301
// SetTag ( unit , 3 ) ;
19289: LD_VAR 0 4
19293: PPUSH
19294: LD_INT 3
19296: PPUSH
19297: CALL_OW 109
// if GetControl ( unit ) = control_manual then
19301: LD_VAR 0 4
19305: PPUSH
19306: CALL_OW 263
19310: PUSH
19311: LD_INT 1
19313: EQUAL
19314: IFFALSE 19348
// if ( UnitsInside ( unit ) ) then
19316: LD_VAR 0 4
19320: PPUSH
19321: CALL_OW 313
19325: IFFALSE 19348
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
19327: LD_VAR 0 4
19331: PPUSH
19332: CALL_OW 313
19336: PUSH
19337: LD_INT 1
19339: ARRAY
19340: PPUSH
19341: LD_INT 7
19343: PPUSH
19344: CALL_OW 109
// if GetFuel ( unit ) < 50 then
19348: LD_VAR 0 4
19352: PPUSH
19353: CALL_OW 261
19357: PUSH
19358: LD_INT 50
19360: LESS
19361: IFFALSE 19375
// SetFuel ( unit , 100 ) ;
19363: LD_VAR 0 4
19367: PPUSH
19368: LD_INT 100
19370: PPUSH
19371: CALL_OW 240
// end ;
19375: GO 19100
19377: POP
19378: POP
// end ;
19379: LD_VAR 0 2
19383: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
19384: LD_INT 0
19386: PPUSH
19387: PPUSH
19388: PPUSH
19389: PPUSH
19390: PPUSH
19391: PPUSH
19392: PPUSH
19393: PPUSH
19394: PPUSH
19395: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19396: LD_ADDR_VAR 0 3
19400: PUSH
19401: LD_VAR 0 1
19405: PPUSH
19406: CALL 17970 0 1
19410: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 2
19418: ARRAY
19419: PUSH
19420: LD_INT 0
19422: EQUAL
19423: IFFALSE 19427
// exit ;
19425: GO 20006
// soldiersInsideBarracks = [ ] ;
19427: LD_ADDR_VAR 0 10
19431: PUSH
19432: EMPTY
19433: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
19434: LD_ADDR_VAR 0 4
19438: PUSH
19439: LD_VAR 0 3
19443: PUSH
19444: LD_INT 5
19446: ARRAY
19447: PPUSH
19448: LD_INT 25
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 50
19460: PUSH
19461: EMPTY
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PPUSH
19468: CALL_OW 72
19472: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
19473: LD_ADDR_VAR 0 6
19477: PUSH
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 6
19485: ARRAY
19486: PPUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 3
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 50
19499: PUSH
19500: EMPTY
19501: LIST
19502: PUSH
19503: LD_INT 3
19505: PUSH
19506: LD_INT 59
19508: PUSH
19509: EMPTY
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: LD_INT 30
19521: PUSH
19522: LD_INT 31
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 30
19531: PUSH
19532: LD_INT 32
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: PPUSH
19550: CALL_OW 72
19554: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
19555: LD_ADDR_VAR 0 7
19559: PUSH
19560: LD_VAR 0 3
19564: PUSH
19565: LD_INT 6
19567: ARRAY
19568: PPUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 30
19590: PUSH
19591: LD_INT 4
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 30
19600: PUSH
19601: LD_INT 5
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: PPUSH
19618: CALL_OW 72
19622: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
19623: LD_ADDR_VAR 0 9
19627: PUSH
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 6
19635: ARRAY
19636: PPUSH
19637: LD_INT 21
19639: PUSH
19640: LD_INT 3
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 50
19649: PUSH
19650: EMPTY
19651: LIST
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: LD_INT 30
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 30
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 72
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: ST_TO_ADDR
// for barrack in barracks do
19695: LD_ADDR_VAR 0 11
19699: PUSH
19700: LD_VAR 0 7
19704: PUSH
19705: FOR_IN
19706: IFFALSE 19731
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
19708: LD_ADDR_VAR 0 10
19712: PUSH
19713: LD_VAR 0 10
19717: PUSH
19718: LD_VAR 0 11
19722: PPUSH
19723: CALL_OW 313
19727: ADD
19728: ST_TO_ADDR
19729: GO 19705
19731: POP
19732: POP
// index = 1 ;
19733: LD_ADDR_VAR 0 8
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
19741: LD_VAR 0 4
19745: PPUSH
19746: LD_INT 56
19748: PUSH
19749: EMPTY
19750: LIST
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: LD_INT 60
19757: PUSH
19758: EMPTY
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PPUSH
19769: CALL_OW 72
19773: PUSH
19774: LD_VAR 0 6
19778: AND
19779: PUSH
19780: LD_VAR 0 9
19784: AND
19785: IFFALSE 19885
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
19787: LD_ADDR_VAR 0 5
19791: PUSH
19792: LD_VAR 0 4
19796: PPUSH
19797: LD_INT 56
19799: PUSH
19800: EMPTY
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: PPUSH
19806: CALL_OW 72
19810: PUSH
19811: LD_VAR 0 10
19815: ADD
19816: PUSH
19817: FOR_IN
19818: IFFALSE 19883
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
19820: LD_VAR 0 5
19824: PPUSH
19825: CALL_OW 110
19829: PUSH
19830: LD_INT 1
19832: EQUAL
19833: PUSH
19834: LD_VAR 0 8
19838: PUSH
19839: LD_VAR 0 6
19843: LESSEQUAL
19844: AND
19845: IFFALSE 19881
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
19847: LD_VAR 0 5
19851: PPUSH
19852: LD_VAR 0 6
19856: PUSH
19857: LD_VAR 0 8
19861: ARRAY
19862: PPUSH
19863: CALL_OW 120
// index = index + 1 ;
19867: LD_ADDR_VAR 0 8
19871: PUSH
19872: LD_VAR 0 8
19876: PUSH
19877: LD_INT 1
19879: PLUS
19880: ST_TO_ADDR
// end ;
19881: GO 19817
19883: POP
19884: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
19885: LD_VAR 0 4
19889: PPUSH
19890: LD_INT 56
19892: PUSH
19893: EMPTY
19894: LIST
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: LD_INT 60
19901: PUSH
19902: EMPTY
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL_OW 72
19917: PUSH
19918: LD_VAR 0 6
19922: NOT
19923: AND
19924: PUSH
19925: LD_VAR 0 7
19929: AND
19930: IFFALSE 20006
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_VAR 0 4
19941: PPUSH
19942: LD_INT 56
19944: PUSH
19945: EMPTY
19946: LIST
19947: PUSH
19948: EMPTY
19949: LIST
19950: PPUSH
19951: CALL_OW 72
19955: PUSH
19956: FOR_IN
19957: IFFALSE 20004
// if ( GetTag ( sold ) = 1 ) then
19959: LD_VAR 0 5
19963: PPUSH
19964: CALL_OW 110
19968: PUSH
19969: LD_INT 1
19971: EQUAL
19972: IFFALSE 20002
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
19974: LD_VAR 0 5
19978: PPUSH
19979: LD_VAR 0 7
19983: PUSH
19984: LD_INT 1
19986: PPUSH
19987: LD_VAR 0 7
19991: PPUSH
19992: CALL_OW 12
19996: ARRAY
19997: PPUSH
19998: CALL_OW 120
20002: GO 19956
20004: POP
20005: POP
// end ;
20006: LD_VAR 0 2
20010: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20011: LD_INT 0
20013: PPUSH
20014: PPUSH
20015: PPUSH
20016: PPUSH
20017: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20018: LD_ADDR_VAR 0 3
20022: PUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL 17970 0 1
20032: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20033: LD_VAR 0 3
20037: PUSH
20038: LD_INT 2
20040: ARRAY
20041: PUSH
20042: LD_INT 0
20044: EQUAL
20045: IFFALSE 20049
// exit ;
20047: GO 20270
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20049: LD_ADDR_VAR 0 4
20053: PUSH
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 5
20061: ARRAY
20062: PPUSH
20063: LD_INT 25
20065: PUSH
20066: LD_INT 3
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 50
20075: PUSH
20076: EMPTY
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PPUSH
20083: CALL_OW 72
20087: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20088: LD_ADDR_VAR 0 6
20092: PUSH
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 6
20100: ARRAY
20101: PPUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 3
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 50
20114: PUSH
20115: EMPTY
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 30
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 72
20155: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20156: LD_VAR 0 4
20160: PPUSH
20161: LD_INT 56
20163: PUSH
20164: EMPTY
20165: LIST
20166: PUSH
20167: LD_INT 3
20169: PUSH
20170: LD_INT 60
20172: PUSH
20173: EMPTY
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 72
20188: PUSH
20189: LD_VAR 0 6
20193: AND
20194: IFFALSE 20270
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20196: LD_ADDR_VAR 0 5
20200: PUSH
20201: LD_VAR 0 4
20205: PPUSH
20206: LD_INT 56
20208: PUSH
20209: EMPTY
20210: LIST
20211: PUSH
20212: EMPTY
20213: LIST
20214: PPUSH
20215: CALL_OW 72
20219: PUSH
20220: FOR_IN
20221: IFFALSE 20268
// if ( GetTag ( mech ) = 1 ) then
20223: LD_VAR 0 5
20227: PPUSH
20228: CALL_OW 110
20232: PUSH
20233: LD_INT 1
20235: EQUAL
20236: IFFALSE 20266
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
20238: LD_VAR 0 5
20242: PPUSH
20243: LD_VAR 0 6
20247: PUSH
20248: LD_INT 1
20250: PPUSH
20251: LD_VAR 0 6
20255: PPUSH
20256: CALL_OW 12
20260: ARRAY
20261: PPUSH
20262: CALL_OW 120
20266: GO 20220
20268: POP
20269: POP
// end ;
20270: LD_VAR 0 2
20274: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
20275: LD_INT 0
20277: PPUSH
20278: PPUSH
20279: PPUSH
20280: PPUSH
20281: PPUSH
20282: PPUSH
20283: PPUSH
20284: PPUSH
20285: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20286: LD_ADDR_VAR 0 3
20290: PUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL 17970 0 1
20300: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 2
20308: ARRAY
20309: PUSH
20310: LD_INT 0
20312: EQUAL
20313: IFFALSE 20317
// exit ;
20315: GO 20780
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20317: LD_ADDR_VAR 0 5
20321: PUSH
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 5
20329: ARRAY
20330: PPUSH
20331: LD_INT 21
20333: PUSH
20334: LD_INT 3
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 50
20343: PUSH
20344: EMPTY
20345: LIST
20346: PUSH
20347: LD_INT 59
20349: PUSH
20350: EMPTY
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 30
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 30
20368: PUSH
20369: LD_INT 3
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: PPUSH
20387: CALL_OW 72
20391: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
20392: LD_ADDR_VAR 0 8
20396: PUSH
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 5
20404: ARRAY
20405: PPUSH
20406: LD_INT 21
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 33
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 92
20428: PUSH
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 10
20436: ARRAY
20437: PPUSH
20438: LD_INT 0
20440: PPUSH
20441: CALL_OW 517
20445: PUSH
20446: LD_INT 1
20448: ARRAY
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PUSH
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 10
20461: ARRAY
20462: PPUSH
20463: LD_INT 0
20465: PPUSH
20466: CALL_OW 517
20470: PUSH
20471: LD_INT 2
20473: ARRAY
20474: PUSH
20475: LD_INT 1
20477: ARRAY
20478: PUSH
20479: LD_INT 16
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 3
20490: PUSH
20491: LD_INT 24
20493: PUSH
20494: LD_INT 1000
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PPUSH
20511: CALL_OW 72
20515: ST_TO_ADDR
// if not damageVehicles then
20516: LD_VAR 0 8
20520: NOT
20521: IFFALSE 20525
// exit ;
20523: GO 20780
// if fabs then
20525: LD_VAR 0 5
20529: IFFALSE 20654
// begin for damageVeh in damageVehicles do
20531: LD_ADDR_VAR 0 9
20535: PUSH
20536: LD_VAR 0 8
20540: PUSH
20541: FOR_IN
20542: IFFALSE 20652
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
20544: LD_VAR 0 9
20548: PPUSH
20549: CALL_OW 110
20553: PUSH
20554: LD_INT 3
20556: EQUAL
20557: PUSH
20558: LD_VAR 0 9
20562: PPUSH
20563: CALL_OW 110
20567: PUSH
20568: LD_INT 5
20570: EQUAL
20571: OR
20572: IFFALSE 20650
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
20574: LD_ADDR_VAR 0 7
20578: PUSH
20579: LD_VAR 0 5
20583: PPUSH
20584: LD_VAR 0 9
20588: PPUSH
20589: CALL_OW 74
20593: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
20594: LD_ADDR_VAR 0 4
20598: PUSH
20599: LD_VAR 0 7
20603: PPUSH
20604: CALL_OW 313
20608: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
20609: LD_VAR 0 4
20613: PPUSH
20614: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
20618: LD_VAR 0 4
20622: PPUSH
20623: LD_INT 3
20625: PUSH
20626: LD_INT 60
20628: PUSH
20629: EMPTY
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PPUSH
20636: CALL_OW 72
20640: PPUSH
20641: LD_VAR 0 9
20645: PPUSH
20646: CALL_OW 189
// end ;
20650: GO 20541
20652: POP
20653: POP
// end ; for damageVeh in damageVehicles do
20654: LD_ADDR_VAR 0 9
20658: PUSH
20659: LD_VAR 0 8
20663: PUSH
20664: FOR_IN
20665: IFFALSE 20778
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
20667: LD_VAR 0 9
20671: PPUSH
20672: CALL_OW 110
20676: PUSH
20677: LD_INT 3
20679: EQUAL
20680: PUSH
20681: LD_VAR 0 9
20685: PPUSH
20686: CALL_OW 110
20690: PUSH
20691: LD_INT 5
20693: EQUAL
20694: OR
20695: IFFALSE 20776
// begin mehInside = UnitsInside ( damageVeh ) ;
20697: LD_ADDR_VAR 0 10
20701: PUSH
20702: LD_VAR 0 9
20706: PPUSH
20707: CALL_OW 313
20711: ST_TO_ADDR
// if mehInside then
20712: LD_VAR 0 10
20716: IFFALSE 20776
// begin mehInside = mehInside [ 1 ] ;
20718: LD_ADDR_VAR 0 10
20722: PUSH
20723: LD_VAR 0 10
20727: PUSH
20728: LD_INT 1
20730: ARRAY
20731: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
20732: LD_VAR 0 10
20736: PPUSH
20737: CALL_OW 181
// wait ( 0 0$01 ) ;
20741: LD_INT 35
20743: PPUSH
20744: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
20748: LD_VAR 0 10
20752: PPUSH
20753: LD_VAR 0 9
20757: PPUSH
20758: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
20762: LD_VAR 0 10
20766: PPUSH
20767: LD_VAR 0 9
20771: PPUSH
20772: CALL_OW 180
// end ; end ;
20776: GO 20664
20778: POP
20779: POP
// end ;
20780: LD_VAR 0 2
20784: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
20785: LD_INT 0
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20793: LD_ADDR_VAR 0 3
20797: PUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL 17970 0 1
20807: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 2
20815: ARRAY
20816: PUSH
20817: LD_INT 0
20819: EQUAL
20820: IFFALSE 20824
// exit ;
20822: GO 21278
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20824: LD_ADDR_VAR 0 7
20828: PUSH
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 6
20836: ARRAY
20837: PPUSH
20838: LD_INT 21
20840: PUSH
20841: LD_INT 3
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 50
20850: PUSH
20851: EMPTY
20852: LIST
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: LD_INT 30
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 30
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 72
20891: PUSH
20892: LD_INT 1
20894: ARRAY
20895: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
20896: LD_VAR 0 3
20900: PPUSH
20901: CALL 18678 0 1
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 21278
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
20910: LD_VAR 0 7
20914: PUSH
20915: LD_VAR 0 3
20919: PPUSH
20920: CALL 18678 0 1
20924: AND
20925: PUSH
20926: LD_VAR 0 3
20930: PUSH
20931: LD_INT 11
20933: ARRAY
20934: PPUSH
20935: LD_INT 81
20937: PUSH
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 3
20945: ARRAY
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 70
20955: NOT
20956: AND
20957: IFFALSE 21107
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
20959: LD_ADDR_VAR 0 5
20963: PUSH
20964: LD_VAR 0 3
20968: PPUSH
20969: CALL 18678 0 1
20973: PPUSH
20974: LD_INT 50
20976: PUSH
20977: EMPTY
20978: LIST
20979: PUSH
20980: LD_INT 3
20982: PUSH
20983: LD_INT 60
20985: PUSH
20986: EMPTY
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 3
20995: PUSH
20996: LD_INT 92
20998: PUSH
20999: LD_VAR 0 7
21003: PPUSH
21004: CALL_OW 250
21008: PUSH
21009: LD_VAR 0 7
21013: PPUSH
21014: CALL_OW 251
21018: PUSH
21019: LD_INT 12
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: PPUSH
21037: CALL_OW 72
21041: PUSH
21042: FOR_IN
21043: IFFALSE 21105
// if GetLives ( veh ) = 1000 then
21045: LD_VAR 0 5
21049: PPUSH
21050: CALL_OW 256
21054: PUSH
21055: LD_INT 1000
21057: EQUAL
21058: IFFALSE 21091
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21060: LD_VAR 0 5
21064: PPUSH
21065: LD_VAR 0 7
21069: PPUSH
21070: CALL_OW 250
21074: PPUSH
21075: LD_VAR 0 7
21079: PPUSH
21080: CALL_OW 251
21084: PPUSH
21085: CALL_OW 111
21089: GO 21103
// SetTag ( veh , 3 ) ;
21091: LD_VAR 0 5
21095: PPUSH
21096: LD_INT 3
21098: PPUSH
21099: CALL_OW 109
21103: GO 21042
21105: POP
21106: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21107: LD_VAR 0 3
21111: PUSH
21112: LD_INT 11
21114: ARRAY
21115: PPUSH
21116: LD_INT 81
21118: PUSH
21119: LD_VAR 0 3
21123: PUSH
21124: LD_INT 3
21126: ARRAY
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PPUSH
21132: CALL_OW 70
21136: NOT
21137: IFFALSE 21141
// exit ;
21139: GO 21278
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21141: LD_ADDR_VAR 0 5
21145: PUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: CALL 18678 0 1
21155: PPUSH
21156: LD_INT 50
21158: PUSH
21159: EMPTY
21160: LIST
21161: PUSH
21162: LD_INT 3
21164: PUSH
21165: LD_INT 60
21167: PUSH
21168: EMPTY
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PPUSH
21179: CALL_OW 72
21183: PUSH
21184: FOR_IN
21185: IFFALSE 21276
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21187: LD_VAR 0 5
21191: PPUSH
21192: LD_VAR 0 3
21196: PUSH
21197: LD_INT 11
21199: ARRAY
21200: PPUSH
21201: LD_INT 81
21203: PUSH
21204: LD_VAR 0 3
21208: PUSH
21209: LD_INT 3
21211: ARRAY
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PPUSH
21217: CALL_OW 70
21221: PUSH
21222: LD_INT 1
21224: ARRAY
21225: PPUSH
21226: CALL_OW 250
21230: PPUSH
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 11
21238: ARRAY
21239: PPUSH
21240: LD_INT 81
21242: PUSH
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 3
21250: ARRAY
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PPUSH
21256: CALL_OW 70
21260: PUSH
21261: LD_INT 1
21263: ARRAY
21264: PPUSH
21265: CALL_OW 251
21269: PPUSH
21270: CALL_OW 114
21274: GO 21184
21276: POP
21277: POP
// end ;
21278: LD_VAR 0 2
21282: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
21283: LD_INT 0
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
21290: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL 17970 0 1
21305: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21306: LD_VAR 0 3
21310: PUSH
21311: LD_INT 2
21313: ARRAY
21314: PUSH
21315: LD_INT 0
21317: EQUAL
21318: IFFALSE 21322
// exit ;
21320: GO 21712
// if ( aiData [ 18 ] = 0 ) then
21322: LD_VAR 0 3
21326: PUSH
21327: LD_INT 18
21329: ARRAY
21330: PUSH
21331: LD_INT 0
21333: EQUAL
21334: IFFALSE 21338
// exit ;
21336: GO 21712
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
21338: LD_VAR 0 3
21342: PPUSH
21343: CALL 18788 0 1
21347: PUSH
21348: LD_VAR 0 3
21352: PUSH
21353: LD_INT 14
21355: ARRAY
21356: GREATEREQUAL
21357: IFFALSE 21712
// begin repeat wait ( 0 0$01 ) ;
21359: LD_INT 35
21361: PPUSH
21362: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
21366: LD_ADDR_VAR 0 6
21370: PUSH
21371: LD_VAR 0 3
21375: PPUSH
21376: CALL 18788 0 1
21380: ST_TO_ADDR
// for ofUnit in offensiveUnits do
21381: LD_ADDR_VAR 0 7
21385: PUSH
21386: LD_VAR 0 6
21390: PUSH
21391: FOR_IN
21392: IFFALSE 21692
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
21394: LD_ADDR_VAR 0 4
21398: PUSH
21399: LD_INT 81
21401: PUSH
21402: LD_VAR 0 3
21406: PUSH
21407: LD_INT 3
21409: ARRAY
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: PPUSH
21420: LD_VAR 0 7
21424: PPUSH
21425: CALL_OW 74
21429: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
21430: LD_ADDR_VAR 0 5
21434: PUSH
21435: LD_INT 81
21437: PUSH
21438: LD_VAR 0 3
21442: PUSH
21443: LD_INT 3
21445: ARRAY
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 59
21456: PUSH
21457: EMPTY
21458: LIST
21459: PUSH
21460: LD_INT 21
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 21
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: PPUSH
21493: CALL_OW 69
21497: PPUSH
21498: LD_VAR 0 7
21502: PPUSH
21503: CALL_OW 74
21507: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
21508: LD_VAR 0 7
21512: PPUSH
21513: LD_VAR 0 4
21517: PPUSH
21518: CALL_OW 296
21522: PUSH
21523: LD_INT 12
21525: PLUS
21526: PUSH
21527: LD_VAR 0 7
21531: PPUSH
21532: LD_VAR 0 5
21536: PPUSH
21537: CALL_OW 296
21541: LESS
21542: IFFALSE 21618
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
21544: LD_VAR 0 7
21548: PPUSH
21549: LD_INT 50
21551: PUSH
21552: EMPTY
21553: LIST
21554: PPUSH
21555: CALL_OW 72
21559: PPUSH
21560: LD_VAR 0 4
21564: PPUSH
21565: CALL_OW 250
21569: PPUSH
21570: LD_VAR 0 4
21574: PPUSH
21575: CALL_OW 251
21579: PPUSH
21580: CALL_OW 114
// wait ( 0 0$01 ) ;
21584: LD_INT 35
21586: PPUSH
21587: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
21591: LD_VAR 0 7
21595: PPUSH
21596: LD_INT 50
21598: PUSH
21599: EMPTY
21600: LIST
21601: PPUSH
21602: CALL_OW 72
21606: PPUSH
21607: LD_VAR 0 4
21611: PPUSH
21612: CALL_OW 115
// end else
21616: GO 21690
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
21618: LD_VAR 0 7
21622: PPUSH
21623: LD_INT 50
21625: PUSH
21626: EMPTY
21627: LIST
21628: PPUSH
21629: CALL_OW 72
21633: PPUSH
21634: LD_VAR 0 5
21638: PPUSH
21639: CALL_OW 250
21643: PPUSH
21644: LD_VAR 0 5
21648: PPUSH
21649: CALL_OW 251
21653: PPUSH
21654: CALL_OW 114
// wait ( 0 0$01 ) ;
21658: LD_INT 35
21660: PPUSH
21661: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
21665: LD_VAR 0 7
21669: PPUSH
21670: LD_INT 50
21672: PUSH
21673: EMPTY
21674: LIST
21675: PPUSH
21676: CALL_OW 72
21680: PPUSH
21681: LD_VAR 0 5
21685: PPUSH
21686: CALL_OW 115
// end ; end ;
21690: GO 21391
21692: POP
21693: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
21694: LD_VAR 0 6
21698: PPUSH
21699: LD_INT 50
21701: PUSH
21702: EMPTY
21703: LIST
21704: PPUSH
21705: CALL_OW 72
21709: NOT
21710: IFFALSE 21359
// end ; end ;
21712: LD_VAR 0 2
21716: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
21717: LD_INT 0
21719: PPUSH
21720: PPUSH
21721: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21722: LD_ADDR_VAR 0 3
21726: PUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL 17970 0 1
21736: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21737: LD_VAR 0 3
21741: PUSH
21742: LD_INT 2
21744: ARRAY
21745: PUSH
21746: LD_INT 0
21748: EQUAL
21749: IFFALSE 21753
// exit ;
21751: GO 21902
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21753: LD_ADDR_VAR 0 4
21757: PUSH
21758: LD_VAR 0 3
21762: PUSH
21763: LD_INT 5
21765: ARRAY
21766: PPUSH
21767: LD_INT 21
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 50
21779: PUSH
21780: EMPTY
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 34
21788: PUSH
21789: LD_INT 12
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 34
21798: PUSH
21799: LD_INT 32
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 34
21808: PUSH
21809: LD_INT 51
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: PPUSH
21827: CALL_OW 72
21831: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
21832: LD_VAR 0 3
21836: PUSH
21837: LD_INT 8
21839: ARRAY
21840: PPUSH
21841: CALL_OW 435
21845: NOT
21846: PUSH
21847: LD_VAR 0 4
21851: NOT
21852: OR
21853: IFFALSE 21857
// exit ;
21855: GO 21902
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
21857: LD_VAR 0 4
21861: PPUSH
21862: LD_VAR 0 3
21866: PUSH
21867: LD_INT 8
21869: ARRAY
21870: PPUSH
21871: CALL_OW 435
21875: PUSH
21876: LD_INT 1
21878: ARRAY
21879: PPUSH
21880: LD_VAR 0 3
21884: PUSH
21885: LD_INT 8
21887: ARRAY
21888: PPUSH
21889: CALL_OW 435
21893: PUSH
21894: LD_INT 2
21896: ARRAY
21897: PPUSH
21898: CALL_OW 117
// end ;
21902: LD_VAR 0 2
21906: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
21911: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21912: LD_ADDR_VAR 0 3
21916: PUSH
21917: LD_VAR 0 1
21921: PPUSH
21922: CALL 17970 0 1
21926: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21927: LD_VAR 0 3
21931: PUSH
21932: LD_INT 2
21934: ARRAY
21935: PUSH
21936: LD_INT 0
21938: EQUAL
21939: IFFALSE 21943
// exit ;
21941: GO 22033
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
21943: LD_ADDR_VAR 0 4
21947: PUSH
21948: LD_VAR 0 3
21952: PUSH
21953: LD_INT 5
21955: ARRAY
21956: PPUSH
21957: LD_INT 21
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PPUSH
21967: CALL_OW 72
21971: PUSH
21972: FOR_IN
21973: IFFALSE 22031
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
21975: LD_VAR 0 4
21979: PPUSH
21980: CALL_OW 110
21984: PUSH
21985: LD_INT 0
21987: EQUAL
21988: PUSH
21989: LD_VAR 0 4
21993: PPUSH
21994: LD_VAR 0 3
21998: PUSH
21999: LD_INT 9
22001: ARRAY
22002: PPUSH
22003: CALL_OW 308
22007: NOT
22008: AND
22009: IFFALSE 22029
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22011: LD_VAR 0 4
22015: PPUSH
22016: LD_VAR 0 3
22020: PUSH
22021: LD_INT 9
22023: ARRAY
22024: PPUSH
22025: CALL_OW 113
22029: GO 21972
22031: POP
22032: POP
// end ;
22033: LD_VAR 0 2
22037: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22038: LD_INT 0
22040: PPUSH
22041: PPUSH
22042: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22043: LD_ADDR_VAR 0 3
22047: PUSH
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL 17970 0 1
22057: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22058: LD_VAR 0 3
22062: PUSH
22063: LD_INT 2
22065: ARRAY
22066: PUSH
22067: LD_INT 0
22069: EQUAL
22070: IFFALSE 22074
// exit ;
22072: GO 22189
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22074: LD_ADDR_VAR 0 4
22078: PUSH
22079: LD_VAR 0 3
22083: PUSH
22084: LD_INT 5
22086: ARRAY
22087: PPUSH
22088: LD_INT 21
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 50
22100: PUSH
22101: EMPTY
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 72
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22187
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22116: LD_VAR 0 4
22120: PPUSH
22121: CALL_OW 110
22125: PUSH
22126: LD_INT 3
22128: EQUAL
22129: PUSH
22130: LD_VAR 0 4
22134: PPUSH
22135: CALL_OW 110
22139: PUSH
22140: LD_INT 5
22142: EQUAL
22143: OR
22144: PUSH
22145: LD_VAR 0 4
22149: PPUSH
22150: LD_VAR 0 3
22154: PUSH
22155: LD_INT 10
22157: ARRAY
22158: PPUSH
22159: CALL_OW 308
22163: NOT
22164: AND
22165: IFFALSE 22185
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22167: LD_VAR 0 4
22171: PPUSH
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 10
22179: ARRAY
22180: PPUSH
22181: CALL_OW 113
22185: GO 22113
22187: POP
22188: POP
// end ;
22189: LD_VAR 0 2
22193: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22194: LD_INT 0
22196: PPUSH
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL 17970 0 1
22217: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22218: LD_VAR 0 3
22222: PUSH
22223: LD_INT 2
22225: ARRAY
22226: PUSH
22227: LD_INT 0
22229: EQUAL
22230: IFFALSE 22234
// exit ;
22232: GO 22934
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
22234: LD_ADDR_VAR 0 4
22238: PUSH
22239: LD_VAR 0 3
22243: PUSH
22244: LD_INT 5
22246: ARRAY
22247: PPUSH
22248: LD_INT 25
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 50
22260: PUSH
22261: EMPTY
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 72
22272: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
22273: LD_ADDR_VAR 0 5
22277: PUSH
22278: LD_VAR 0 3
22282: PUSH
22283: LD_INT 5
22285: ARRAY
22286: PPUSH
22287: LD_INT 21
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 50
22299: PUSH
22300: EMPTY
22301: LIST
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: LD_INT 34
22308: PUSH
22309: LD_INT 13
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 34
22318: PUSH
22319: LD_EXP 124
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 34
22330: PUSH
22331: LD_INT 52
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: PPUSH
22349: CALL_OW 72
22353: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
22354: LD_ADDR_VAR 0 8
22358: PUSH
22359: LD_VAR 0 3
22363: PUSH
22364: LD_INT 6
22366: ARRAY
22367: PPUSH
22368: LD_INT 21
22370: PUSH
22371: LD_INT 3
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 24
22383: PUSH
22384: LD_INT 1000
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PPUSH
22399: CALL_OW 72
22403: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
22404: LD_VAR 0 4
22408: PPUSH
22409: LD_INT 56
22411: PUSH
22412: EMPTY
22413: LIST
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 60
22420: PUSH
22421: EMPTY
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 72
22436: PUSH
22437: LD_VAR 0 8
22441: NOT
22442: AND
22443: PUSH
22444: LD_VAR 0 3
22448: PUSH
22449: LD_INT 6
22451: ARRAY
22452: PPUSH
22453: LD_INT 21
22455: PUSH
22456: LD_INT 3
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 50
22465: PUSH
22466: EMPTY
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 30
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 30
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: PPUSH
22502: CALL_OW 72
22506: AND
22507: IFFALSE 22645
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
22509: LD_ADDR_VAR 0 7
22513: PUSH
22514: LD_VAR 0 4
22518: PPUSH
22519: LD_INT 56
22521: PUSH
22522: EMPTY
22523: LIST
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: LD_INT 60
22530: PUSH
22531: EMPTY
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 72
22546: PUSH
22547: FOR_IN
22548: IFFALSE 22643
// if ( GetTag ( eng ) = 1 ) then
22550: LD_VAR 0 7
22554: PPUSH
22555: CALL_OW 110
22559: PUSH
22560: LD_INT 1
22562: EQUAL
22563: IFFALSE 22641
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
22565: LD_VAR 0 7
22569: PPUSH
22570: LD_VAR 0 3
22574: PUSH
22575: LD_INT 6
22577: ARRAY
22578: PPUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 50
22591: PUSH
22592: EMPTY
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 30
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 30
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: PPUSH
22628: CALL_OW 72
22632: PUSH
22633: LD_INT 1
22635: ARRAY
22636: PPUSH
22637: CALL_OW 120
22641: GO 22547
22643: POP
22644: POP
// if engineers and damagedBuildings then
22645: LD_VAR 0 4
22649: PUSH
22650: LD_VAR 0 8
22654: AND
22655: IFFALSE 22802
// begin for eng in engineers do
22657: LD_ADDR_VAR 0 7
22661: PUSH
22662: LD_VAR 0 4
22666: PUSH
22667: FOR_IN
22668: IFFALSE 22741
// if ( GetTag ( eng ) = 1 ) then
22670: LD_VAR 0 7
22674: PPUSH
22675: CALL_OW 110
22679: PUSH
22680: LD_INT 1
22682: EQUAL
22683: IFFALSE 22739
// begin ForceResetTaskList ( eng ) ;
22685: LD_VAR 0 7
22689: PPUSH
22690: CALL 26288 0 1
// ExitUnitFromBuilding ( eng ) ;
22694: LD_VAR 0 7
22698: PPUSH
22699: CALL 26341 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
22703: LD_VAR 0 7
22707: PPUSH
22708: LD_INT 3
22710: PUSH
22711: LD_INT 60
22713: PUSH
22714: EMPTY
22715: LIST
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PPUSH
22721: CALL_OW 72
22725: PPUSH
22726: LD_VAR 0 8
22730: PUSH
22731: LD_INT 1
22733: ARRAY
22734: PPUSH
22735: CALL_OW 190
// end ;
22739: GO 22667
22741: POP
22742: POP
// if cranes then
22743: LD_VAR 0 5
22747: IFFALSE 22802
// for crane in cranes do
22749: LD_ADDR_VAR 0 6
22753: PUSH
22754: LD_VAR 0 5
22758: PUSH
22759: FOR_IN
22760: IFFALSE 22800
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
22762: LD_VAR 0 6
22766: PPUSH
22767: LD_INT 3
22769: PUSH
22770: LD_INT 60
22772: PUSH
22773: EMPTY
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PPUSH
22780: CALL_OW 72
22784: PPUSH
22785: LD_VAR 0 8
22789: PUSH
22790: LD_INT 1
22792: ARRAY
22793: PPUSH
22794: CALL_OW 190
22798: GO 22759
22800: POP
22801: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
22802: LD_VAR 0 4
22806: PUSH
22807: LD_VAR 0 8
22811: NOT
22812: AND
22813: PUSH
22814: LD_VAR 0 3
22818: PUSH
22819: LD_INT 7
22821: ARRAY
22822: AND
22823: IFFALSE 22934
// begin for eng in engineers do
22825: LD_ADDR_VAR 0 7
22829: PUSH
22830: LD_VAR 0 4
22834: PUSH
22835: FOR_IN
22836: IFFALSE 22932
// if ( GetTag ( eng ) = 1 ) then
22838: LD_VAR 0 7
22842: PPUSH
22843: CALL_OW 110
22847: PUSH
22848: LD_INT 1
22850: EQUAL
22851: IFFALSE 22930
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
22853: LD_VAR 0 7
22857: PPUSH
22858: LD_VAR 0 3
22862: PUSH
22863: LD_INT 7
22865: ARRAY
22866: PUSH
22867: LD_INT 1
22869: ARRAY
22870: PUSH
22871: LD_INT 1
22873: ARRAY
22874: PPUSH
22875: LD_VAR 0 3
22879: PUSH
22880: LD_INT 7
22882: ARRAY
22883: PUSH
22884: LD_INT 1
22886: ARRAY
22887: PUSH
22888: LD_INT 2
22890: ARRAY
22891: PPUSH
22892: LD_VAR 0 3
22896: PUSH
22897: LD_INT 7
22899: ARRAY
22900: PUSH
22901: LD_INT 1
22903: ARRAY
22904: PUSH
22905: LD_INT 3
22907: ARRAY
22908: PPUSH
22909: LD_VAR 0 3
22913: PUSH
22914: LD_INT 7
22916: ARRAY
22917: PUSH
22918: LD_INT 1
22920: ARRAY
22921: PUSH
22922: LD_INT 4
22924: ARRAY
22925: PPUSH
22926: CALL_OW 145
22930: GO 22835
22932: POP
22933: POP
// end ;
22934: LD_VAR 0 2
22938: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22947: LD_ADDR_VAR 0 3
22951: PUSH
22952: LD_VAR 0 1
22956: PPUSH
22957: CALL 17970 0 1
22961: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22962: LD_VAR 0 3
22966: PUSH
22967: LD_INT 2
22969: ARRAY
22970: PUSH
22971: LD_INT 0
22973: EQUAL
22974: IFFALSE 22978
// exit ;
22976: GO 23432
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
22978: LD_ADDR_VAR 0 4
22982: PUSH
22983: LD_VAR 0 3
22987: PUSH
22988: LD_INT 5
22990: ARRAY
22991: PPUSH
22992: LD_INT 25
22994: PUSH
22995: LD_INT 4
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 50
23004: PUSH
23005: EMPTY
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 72
23016: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23017: LD_ADDR_VAR 0 6
23021: PUSH
23022: LD_VAR 0 3
23026: PUSH
23027: LD_INT 5
23029: ARRAY
23030: PPUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 92
23043: PUSH
23044: LD_VAR 0 3
23048: PUSH
23049: LD_INT 9
23051: ARRAY
23052: PPUSH
23053: LD_INT 0
23055: PPUSH
23056: CALL_OW 517
23060: PUSH
23061: LD_INT 1
23063: ARRAY
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: PUSH
23069: LD_VAR 0 3
23073: PUSH
23074: LD_INT 9
23076: ARRAY
23077: PPUSH
23078: LD_INT 0
23080: PPUSH
23081: CALL_OW 517
23085: PUSH
23086: LD_INT 2
23088: ARRAY
23089: PUSH
23090: LD_INT 1
23092: ARRAY
23093: PUSH
23094: LD_INT 6
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 24
23108: PUSH
23109: LD_INT 1000
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 72
23129: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23130: LD_ADDR_VAR 0 7
23134: PUSH
23135: LD_VAR 0 3
23139: PUSH
23140: LD_INT 5
23142: ARRAY
23143: PPUSH
23144: LD_INT 21
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 50
23156: PUSH
23157: EMPTY
23158: LIST
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: LD_INT 30
23165: PUSH
23166: LD_INT 6
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 7
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 8
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 72
23208: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23209: LD_VAR 0 4
23213: PPUSH
23214: LD_INT 56
23216: PUSH
23217: EMPTY
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: LD_INT 60
23225: PUSH
23226: EMPTY
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PPUSH
23237: CALL_OW 72
23241: PUSH
23242: LD_VAR 0 6
23246: NOT
23247: AND
23248: PUSH
23249: LD_VAR 0 7
23253: AND
23254: IFFALSE 23330
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
23256: LD_ADDR_VAR 0 5
23260: PUSH
23261: LD_VAR 0 4
23265: PPUSH
23266: LD_INT 56
23268: PUSH
23269: EMPTY
23270: LIST
23271: PUSH
23272: EMPTY
23273: LIST
23274: PPUSH
23275: CALL_OW 72
23279: PUSH
23280: FOR_IN
23281: IFFALSE 23328
// if ( GetTag ( sci ) = 1 ) then
23283: LD_VAR 0 5
23287: PPUSH
23288: CALL_OW 110
23292: PUSH
23293: LD_INT 1
23295: EQUAL
23296: IFFALSE 23326
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
23298: LD_VAR 0 5
23302: PPUSH
23303: LD_VAR 0 7
23307: PUSH
23308: LD_INT 1
23310: PPUSH
23311: LD_VAR 0 7
23315: PPUSH
23316: CALL_OW 12
23320: ARRAY
23321: PPUSH
23322: CALL_OW 120
23326: GO 23280
23328: POP
23329: POP
// if not scientists or not damageUnits then
23330: LD_VAR 0 4
23334: NOT
23335: PUSH
23336: LD_VAR 0 6
23340: NOT
23341: OR
23342: IFFALSE 23346
// exit ;
23344: GO 23432
// for sci in scientists do
23346: LD_ADDR_VAR 0 5
23350: PUSH
23351: LD_VAR 0 4
23355: PUSH
23356: FOR_IN
23357: IFFALSE 23430
// if ( GetTag ( sci ) = 1 ) then
23359: LD_VAR 0 5
23363: PPUSH
23364: CALL_OW 110
23368: PUSH
23369: LD_INT 1
23371: EQUAL
23372: IFFALSE 23428
// begin ForceResetTaskList ( sci ) ;
23374: LD_VAR 0 5
23378: PPUSH
23379: CALL 26288 0 1
// ExitUnitFromBuilding ( sci ) ;
23383: LD_VAR 0 5
23387: PPUSH
23388: CALL 26341 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
23392: LD_VAR 0 5
23396: PPUSH
23397: LD_INT 3
23399: PUSH
23400: LD_INT 60
23402: PUSH
23403: EMPTY
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 72
23414: PPUSH
23415: LD_VAR 0 6
23419: PUSH
23420: LD_INT 1
23422: ARRAY
23423: PPUSH
23424: CALL_OW 188
// end ;
23428: GO 23356
23430: POP
23431: POP
// end ;
23432: LD_VAR 0 2
23436: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
23443: PPUSH
23444: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23445: LD_ADDR_VAR 0 3
23449: PUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL 17970 0 1
23459: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23460: LD_VAR 0 3
23464: PUSH
23465: LD_INT 2
23467: ARRAY
23468: PUSH
23469: LD_INT 0
23471: EQUAL
23472: IFFALSE 23476
// exit ;
23474: GO 24843
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
23476: LD_ADDR_VAR 0 4
23480: PUSH
23481: LD_VAR 0 3
23485: PUSH
23486: LD_INT 6
23488: ARRAY
23489: PPUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 3
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 50
23502: PUSH
23503: EMPTY
23504: LIST
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 30
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: PPUSH
23539: CALL_OW 72
23543: ST_TO_ADDR
// if not fabs then
23544: LD_VAR 0 4
23548: NOT
23549: IFFALSE 23553
// exit ;
23551: GO 24843
// wait ( aiData [ 16 ] ) ;
23553: LD_VAR 0 3
23557: PUSH
23558: LD_INT 16
23560: ARRAY
23561: PPUSH
23562: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
23566: LD_VAR 0 3
23570: PUSH
23571: LD_INT 17
23573: ARRAY
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: IFFALSE 23750
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
23580: LD_ADDR_VAR 0 5
23584: PUSH
23585: DOUBLE
23586: LD_INT 1
23588: DEC
23589: ST_TO_ADDR
23590: LD_VAR 0 3
23594: PUSH
23595: LD_INT 13
23597: ARRAY
23598: PUSH
23599: LD_VAR 0 3
23603: PPUSH
23604: CALL 18678 0 1
23608: MINUS
23609: PUSH
23610: FOR_TO
23611: IFFALSE 23748
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
23613: LD_ADDR_VAR 0 6
23617: PUSH
23618: LD_VAR 0 3
23622: PUSH
23623: LD_INT 13
23625: ARRAY
23626: PUSH
23627: LD_VAR 0 5
23631: ARRAY
23632: PUSH
23633: LD_INT 4
23635: ARRAY
23636: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
23637: LD_ADDR_VAR 0 7
23641: PUSH
23642: LD_VAR 0 6
23646: PUSH
23647: LD_INT 1
23649: PPUSH
23650: LD_VAR 0 6
23654: PPUSH
23655: CALL_OW 12
23659: ARRAY
23660: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
23661: LD_VAR 0 4
23665: PUSH
23666: LD_INT 0
23668: PPUSH
23669: LD_VAR 0 4
23673: PPUSH
23674: CALL_OW 12
23678: ARRAY
23679: PPUSH
23680: LD_VAR 0 3
23684: PUSH
23685: LD_INT 13
23687: ARRAY
23688: PUSH
23689: LD_VAR 0 5
23693: ARRAY
23694: PUSH
23695: LD_INT 1
23697: ARRAY
23698: PPUSH
23699: LD_VAR 0 3
23703: PUSH
23704: LD_INT 13
23706: ARRAY
23707: PUSH
23708: LD_VAR 0 5
23712: ARRAY
23713: PUSH
23714: LD_INT 2
23716: ARRAY
23717: PPUSH
23718: LD_VAR 0 3
23722: PUSH
23723: LD_INT 13
23725: ARRAY
23726: PUSH
23727: LD_VAR 0 5
23731: ARRAY
23732: PUSH
23733: LD_INT 3
23735: ARRAY
23736: PPUSH
23737: LD_VAR 0 7
23741: PPUSH
23742: CALL_OW 185
// end ;
23746: GO 23610
23748: POP
23749: POP
// end ; if aiData [ 17 ] [ 3 ] then
23750: LD_VAR 0 3
23754: PUSH
23755: LD_INT 17
23757: ARRAY
23758: PUSH
23759: LD_INT 3
23761: ARRAY
23762: IFFALSE 24659
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
23764: LD_INT 22
23766: PUSH
23767: LD_VAR 0 3
23771: PUSH
23772: LD_INT 3
23774: ARRAY
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 21
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 34
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 34
23805: PUSH
23806: LD_INT 32
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 34
23815: PUSH
23816: LD_INT 51
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: PUSH
23839: LD_VAR 0 3
23843: PUSH
23844: LD_INT 15
23846: ARRAY
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: LESS
23852: IFFALSE 24063
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
23854: LD_ADDR_VAR 0 5
23858: PUSH
23859: DOUBLE
23860: LD_INT 1
23862: DEC
23863: ST_TO_ADDR
23864: LD_VAR 0 3
23868: PUSH
23869: LD_INT 15
23871: ARRAY
23872: PUSH
23873: LD_INT 1
23875: ARRAY
23876: PUSH
23877: LD_INT 22
23879: PUSH
23880: LD_VAR 0 3
23884: PUSH
23885: LD_INT 3
23887: ARRAY
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 21
23895: PUSH
23896: LD_INT 2
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 34
23908: PUSH
23909: LD_INT 12
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 34
23918: PUSH
23919: LD_INT 32
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 34
23928: PUSH
23929: LD_INT 51
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL_OW 69
23951: MINUS
23952: PUSH
23953: FOR_TO
23954: IFFALSE 24061
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
23956: LD_VAR 0 4
23960: PUSH
23961: LD_INT 0
23963: PPUSH
23964: LD_VAR 0 4
23968: PPUSH
23969: CALL_OW 12
23973: ARRAY
23974: PPUSH
23975: LD_INT 3
23977: PUSH
23978: EMPTY
23979: LIST
23980: PUSH
23981: LD_INT 13
23983: PUSH
23984: EMPTY
23985: LIST
23986: PUSH
23987: LD_INT 22
23989: PUSH
23990: EMPTY
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: PUSH
23998: LD_VAR 0 3
24002: PUSH
24003: LD_INT 4
24005: ARRAY
24006: ARRAY
24007: PUSH
24008: LD_INT 1
24010: ARRAY
24011: PPUSH
24012: LD_INT 1
24014: PPUSH
24015: LD_INT 2
24017: PPUSH
24018: LD_INT 12
24020: PUSH
24021: EMPTY
24022: LIST
24023: PUSH
24024: LD_INT 32
24026: PUSH
24027: EMPTY
24028: LIST
24029: PUSH
24030: LD_INT 51
24032: PUSH
24033: EMPTY
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: PUSH
24041: LD_VAR 0 3
24045: PUSH
24046: LD_INT 4
24048: ARRAY
24049: ARRAY
24050: PUSH
24051: LD_INT 1
24053: ARRAY
24054: PPUSH
24055: CALL_OW 185
24059: GO 23953
24061: POP
24062: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24063: LD_INT 22
24065: PUSH
24066: LD_VAR 0 3
24070: PUSH
24071: LD_INT 3
24073: ARRAY
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 21
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 34
24094: PUSH
24095: LD_INT 13
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 34
24104: PUSH
24105: LD_EXP 124
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 34
24116: PUSH
24117: LD_INT 52
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: PPUSH
24135: CALL_OW 69
24139: PUSH
24140: LD_VAR 0 3
24144: PUSH
24145: LD_INT 15
24147: ARRAY
24148: PUSH
24149: LD_INT 2
24151: ARRAY
24152: LESS
24153: IFFALSE 24368
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24155: LD_ADDR_VAR 0 5
24159: PUSH
24160: DOUBLE
24161: LD_INT 1
24163: DEC
24164: ST_TO_ADDR
24165: LD_VAR 0 3
24169: PUSH
24170: LD_INT 15
24172: ARRAY
24173: PUSH
24174: LD_INT 2
24176: ARRAY
24177: PUSH
24178: LD_INT 22
24180: PUSH
24181: LD_VAR 0 3
24185: PUSH
24186: LD_INT 3
24188: ARRAY
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 21
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: LD_INT 34
24209: PUSH
24210: LD_INT 13
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 34
24219: PUSH
24220: LD_EXP 124
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 34
24231: PUSH
24232: LD_INT 52
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: PPUSH
24250: CALL_OW 69
24254: MINUS
24255: PUSH
24256: FOR_TO
24257: IFFALSE 24366
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24259: LD_VAR 0 4
24263: PUSH
24264: LD_INT 0
24266: PPUSH
24267: LD_VAR 0 4
24271: PPUSH
24272: CALL_OW 12
24276: ARRAY
24277: PPUSH
24278: LD_INT 3
24280: PUSH
24281: EMPTY
24282: LIST
24283: PUSH
24284: LD_INT 13
24286: PUSH
24287: EMPTY
24288: LIST
24289: PUSH
24290: LD_INT 22
24292: PUSH
24293: EMPTY
24294: LIST
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: PUSH
24301: LD_VAR 0 3
24305: PUSH
24306: LD_INT 4
24308: ARRAY
24309: ARRAY
24310: PUSH
24311: LD_INT 1
24313: ARRAY
24314: PPUSH
24315: LD_INT 1
24317: PPUSH
24318: LD_INT 2
24320: PPUSH
24321: LD_INT 13
24323: PUSH
24324: EMPTY
24325: LIST
24326: PUSH
24327: LD_EXP 124
24331: PUSH
24332: EMPTY
24333: LIST
24334: PUSH
24335: LD_INT 52
24337: PUSH
24338: EMPTY
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_VAR 0 3
24350: PUSH
24351: LD_INT 4
24353: ARRAY
24354: ARRAY
24355: PUSH
24356: LD_INT 1
24358: ARRAY
24359: PPUSH
24360: CALL_OW 185
24364: GO 24256
24366: POP
24367: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
24368: LD_INT 22
24370: PUSH
24371: LD_VAR 0 3
24375: PUSH
24376: LD_INT 3
24378: ARRAY
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 21
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 34
24399: PUSH
24400: LD_INT 14
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 14
24409: PUSH
24410: EMPTY
24411: LIST
24412: PUSH
24413: LD_INT 34
24415: PUSH
24416: LD_INT 53
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: PPUSH
24434: CALL_OW 69
24438: PUSH
24439: LD_VAR 0 3
24443: PUSH
24444: LD_INT 15
24446: ARRAY
24447: PUSH
24448: LD_INT 3
24450: ARRAY
24451: LESS
24452: IFFALSE 24659
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
24454: LD_ADDR_VAR 0 5
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_VAR 0 3
24468: PUSH
24469: LD_INT 15
24471: ARRAY
24472: PUSH
24473: LD_INT 3
24475: ARRAY
24476: PUSH
24477: LD_INT 22
24479: PUSH
24480: LD_VAR 0 3
24484: PUSH
24485: LD_INT 3
24487: ARRAY
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 21
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 34
24508: PUSH
24509: LD_INT 14
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 14
24518: PUSH
24519: EMPTY
24520: LIST
24521: PUSH
24522: LD_INT 34
24524: PUSH
24525: LD_INT 53
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: PPUSH
24543: CALL_OW 69
24547: MINUS
24548: PUSH
24549: FOR_TO
24550: IFFALSE 24657
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24552: LD_VAR 0 4
24556: PUSH
24557: LD_INT 0
24559: PPUSH
24560: LD_VAR 0 4
24564: PPUSH
24565: CALL_OW 12
24569: ARRAY
24570: PPUSH
24571: LD_INT 4
24573: PUSH
24574: EMPTY
24575: LIST
24576: PUSH
24577: LD_INT 13
24579: PUSH
24580: EMPTY
24581: LIST
24582: PUSH
24583: LD_INT 24
24585: PUSH
24586: EMPTY
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: PUSH
24594: LD_VAR 0 3
24598: PUSH
24599: LD_INT 4
24601: ARRAY
24602: ARRAY
24603: PUSH
24604: LD_INT 1
24606: ARRAY
24607: PPUSH
24608: LD_INT 1
24610: PPUSH
24611: LD_INT 1
24613: PPUSH
24614: LD_INT 14
24616: PUSH
24617: EMPTY
24618: LIST
24619: PUSH
24620: LD_INT 14
24622: PUSH
24623: EMPTY
24624: LIST
24625: PUSH
24626: LD_INT 53
24628: PUSH
24629: EMPTY
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: PUSH
24637: LD_VAR 0 3
24641: PUSH
24642: LD_INT 4
24644: ARRAY
24645: ARRAY
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PPUSH
24651: CALL_OW 185
24655: GO 24549
24657: POP
24658: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 17
24666: ARRAY
24667: PUSH
24668: LD_INT 2
24670: ARRAY
24671: PUSH
24672: LD_VAR 0 3
24676: PPUSH
24677: CALL 18788 0 1
24681: MINUS
24682: IFFALSE 24843
// begin for i := 1 to aiData [ 14 ] do
24684: LD_ADDR_VAR 0 5
24688: PUSH
24689: DOUBLE
24690: LD_INT 1
24692: DEC
24693: ST_TO_ADDR
24694: LD_VAR 0 3
24698: PUSH
24699: LD_INT 14
24701: ARRAY
24702: PUSH
24703: FOR_TO
24704: IFFALSE 24841
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
24706: LD_ADDR_VAR 0 6
24710: PUSH
24711: LD_VAR 0 3
24715: PUSH
24716: LD_INT 14
24718: ARRAY
24719: PUSH
24720: LD_VAR 0 5
24724: ARRAY
24725: PUSH
24726: LD_INT 4
24728: ARRAY
24729: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24730: LD_ADDR_VAR 0 7
24734: PUSH
24735: LD_VAR 0 6
24739: PUSH
24740: LD_INT 1
24742: PPUSH
24743: LD_VAR 0 6
24747: PPUSH
24748: CALL_OW 12
24752: ARRAY
24753: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
24754: LD_VAR 0 4
24758: PUSH
24759: LD_INT 0
24761: PPUSH
24762: LD_VAR 0 4
24766: PPUSH
24767: CALL_OW 12
24771: ARRAY
24772: PPUSH
24773: LD_VAR 0 3
24777: PUSH
24778: LD_INT 14
24780: ARRAY
24781: PUSH
24782: LD_VAR 0 5
24786: ARRAY
24787: PUSH
24788: LD_INT 1
24790: ARRAY
24791: PPUSH
24792: LD_VAR 0 3
24796: PUSH
24797: LD_INT 14
24799: ARRAY
24800: PUSH
24801: LD_VAR 0 5
24805: ARRAY
24806: PUSH
24807: LD_INT 2
24809: ARRAY
24810: PPUSH
24811: LD_VAR 0 3
24815: PUSH
24816: LD_INT 14
24818: ARRAY
24819: PUSH
24820: LD_VAR 0 5
24824: ARRAY
24825: PUSH
24826: LD_INT 3
24828: ARRAY
24829: PPUSH
24830: LD_VAR 0 7
24834: PPUSH
24835: CALL_OW 185
// end ;
24839: GO 24703
24841: POP
24842: POP
// end ; end ;
24843: LD_VAR 0 2
24847: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
// for unit in units do
24864: LD_ADDR_VAR 0 6
24868: PUSH
24869: LD_VAR 0 2
24873: PUSH
24874: FOR_IN
24875: IFFALSE 24891
// SetTag ( unit , 0 ) ;
24877: LD_VAR 0 6
24881: PPUSH
24882: LD_INT 0
24884: PPUSH
24885: CALL_OW 109
24889: GO 24874
24891: POP
24892: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
24893: LD_ADDR_VAR 0 13
24897: PUSH
24898: LD_VAR 0 3
24902: PUSH
24903: LD_VAR 0 3
24907: ARRAY
24908: PUSH
24909: LD_INT 1
24911: ARRAY
24912: PUSH
24913: LD_VAR 0 3
24917: PUSH
24918: LD_VAR 0 3
24922: ARRAY
24923: PUSH
24924: LD_INT 2
24926: ARRAY
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
24932: LD_ADDR_VAR 0 7
24936: PUSH
24937: LD_VAR 0 2
24941: PPUSH
24942: LD_INT 50
24944: PUSH
24945: EMPTY
24946: LIST
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: LD_INT 59
24953: PUSH
24954: EMPTY
24955: LIST
24956: PUSH
24957: LD_INT 25
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 25
24969: PUSH
24970: LD_INT 8
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 21
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PPUSH
24998: CALL_OW 72
25002: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25003: LD_ADDR_VAR 0 9
25007: PUSH
25008: LD_VAR 0 2
25012: PPUSH
25013: LD_INT 50
25015: PUSH
25016: EMPTY
25017: LIST
25018: PUSH
25019: LD_INT 25
25021: PUSH
25022: LD_INT 4
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PPUSH
25033: CALL_OW 72
25037: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25038: LD_ADDR_VAR 0 10
25042: PUSH
25043: LD_VAR 0 2
25047: PPUSH
25048: LD_INT 21
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: LD_INT 24
25063: PUSH
25064: LD_INT 1000
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 72
25083: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25084: LD_ADDR_VAR 0 11
25088: PUSH
25089: LD_INT 21
25091: PPUSH
25092: CALL_OW 435
25096: ST_TO_ADDR
// for unit in attackUnits do
25097: LD_ADDR_VAR 0 6
25101: PUSH
25102: LD_VAR 0 7
25106: PUSH
25107: FOR_IN
25108: IFFALSE 25857
// begin if path then
25110: LD_VAR 0 3
25114: IFFALSE 25846
// begin i = 1 ;
25116: LD_ADDR_VAR 0 5
25120: PUSH
25121: LD_INT 1
25123: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25124: LD_ADDR_VAR 0 11
25128: PUSH
25129: LD_INT 21
25131: PPUSH
25132: CALL_OW 435
25136: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25137: LD_ADDR_VAR 0 14
25141: PUSH
25142: LD_INT 81
25144: PUSH
25145: LD_VAR 0 6
25149: PPUSH
25150: CALL_OW 255
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PPUSH
25159: CALL_OW 69
25163: PPUSH
25164: LD_VAR 0 6
25168: PPUSH
25169: CALL_OW 74
25173: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25174: LD_ADDR_VAR 0 15
25178: PUSH
25179: LD_VAR 0 11
25183: PPUSH
25184: LD_VAR 0 6
25188: PPUSH
25189: CALL_OW 250
25193: PPUSH
25194: LD_VAR 0 6
25198: PPUSH
25199: CALL_OW 251
25203: PPUSH
25204: CALL_OW 439
25208: ST_TO_ADDR
// if damageUnits and medics then
25209: LD_VAR 0 10
25213: PUSH
25214: LD_VAR 0 9
25218: AND
25219: IFFALSE 25241
// ComHeal ( medics , damageUnits [ 1 ] ) else
25221: LD_VAR 0 9
25225: PPUSH
25226: LD_VAR 0 10
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: PPUSH
25235: CALL_OW 128
25239: GO 25284
// if medics then
25241: LD_VAR 0 9
25245: IFFALSE 25284
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
25247: LD_VAR 0 9
25251: PPUSH
25252: LD_VAR 0 7
25256: PUSH
25257: LD_INT 1
25259: ARRAY
25260: PPUSH
25261: CALL_OW 250
25265: PPUSH
25266: LD_VAR 0 7
25270: PUSH
25271: LD_INT 1
25273: ARRAY
25274: PPUSH
25275: CALL_OW 251
25279: PPUSH
25280: CALL_OW 111
// if not HasTask ( unit ) then
25284: LD_VAR 0 6
25288: PPUSH
25289: CALL_OW 314
25293: NOT
25294: IFFALSE 25533
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25296: LD_ADDR_VAR 0 15
25300: PUSH
25301: LD_VAR 0 11
25305: PPUSH
25306: LD_VAR 0 6
25310: PPUSH
25311: CALL_OW 250
25315: PPUSH
25316: LD_VAR 0 6
25320: PPUSH
25321: CALL_OW 251
25325: PPUSH
25326: CALL_OW 439
25330: ST_TO_ADDR
// if i > crates then
25331: LD_VAR 0 5
25335: PUSH
25336: LD_VAR 0 11
25340: GREATER
25341: IFFALSE 25351
// i = 1 ;
25343: LD_ADDR_VAR 0 5
25347: PUSH
25348: LD_INT 1
25350: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
25351: LD_VAR 0 14
25355: PUSH
25356: LD_VAR 0 15
25360: AND
25361: IFFALSE 25476
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
25363: LD_VAR 0 6
25367: PPUSH
25368: LD_VAR 0 14
25372: PPUSH
25373: CALL_OW 250
25377: PPUSH
25378: LD_VAR 0 14
25382: PPUSH
25383: CALL_OW 251
25387: PPUSH
25388: CALL_OW 297
25392: PUSH
25393: LD_VAR 0 6
25397: PPUSH
25398: LD_VAR 0 15
25402: PUSH
25403: LD_INT 1
25405: ARRAY
25406: PPUSH
25407: LD_VAR 0 15
25411: PUSH
25412: LD_INT 2
25414: ARRAY
25415: PPUSH
25416: CALL_OW 297
25420: LESS
25421: IFFALSE 25439
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
25423: LD_VAR 0 7
25427: PPUSH
25428: LD_VAR 0 14
25432: PPUSH
25433: CALL_OW 115
25437: GO 25474
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
25439: LD_VAR 0 7
25443: PPUSH
25444: LD_VAR 0 11
25448: PUSH
25449: LD_VAR 0 5
25453: ARRAY
25454: PPUSH
25455: LD_VAR 0 11
25459: PUSH
25460: LD_VAR 0 5
25464: PUSH
25465: LD_INT 1
25467: PLUS
25468: ARRAY
25469: PPUSH
25470: CALL_OW 116
// end else
25474: GO 25533
// if crates then
25476: LD_VAR 0 11
25480: IFFALSE 25519
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
25482: LD_VAR 0 7
25486: PPUSH
25487: LD_VAR 0 11
25491: PUSH
25492: LD_VAR 0 5
25496: ARRAY
25497: PPUSH
25498: LD_VAR 0 11
25502: PUSH
25503: LD_VAR 0 5
25507: PUSH
25508: LD_INT 1
25510: PLUS
25511: ARRAY
25512: PPUSH
25513: CALL_OW 116
25517: GO 25533
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
25519: LD_VAR 0 7
25523: PPUSH
25524: LD_VAR 0 14
25528: PPUSH
25529: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
25533: LD_INT 35
25535: PPUSH
25536: CALL_OW 67
// if path then
25540: LD_VAR 0 3
25544: IFFALSE 25620
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
25546: LD_ADDR_VAR 0 16
25550: PUSH
25551: LD_VAR 0 6
25555: PPUSH
25556: LD_VAR 0 3
25560: PPUSH
25561: CALL 26075 0 2
25565: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
25566: LD_VAR 0 7
25570: PPUSH
25571: LD_VAR 0 16
25575: PUSH
25576: LD_INT 1
25578: ARRAY
25579: PPUSH
25580: LD_VAR 0 16
25584: PUSH
25585: LD_INT 2
25587: ARRAY
25588: PPUSH
25589: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
25593: LD_VAR 0 1
25597: PPUSH
25598: LD_VAR 0 16
25602: PUSH
25603: LD_INT 1
25605: ARRAY
25606: PPUSH
25607: LD_VAR 0 16
25611: PUSH
25612: LD_INT 2
25614: ARRAY
25615: PPUSH
25616: CALL_OW 114
// end ; i = i + 2 ;
25620: LD_ADDR_VAR 0 5
25624: PUSH
25625: LD_VAR 0 5
25629: PUSH
25630: LD_INT 2
25632: PLUS
25633: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
25634: LD_VAR 0 1
25638: PPUSH
25639: LD_VAR 0 16
25643: PUSH
25644: LD_INT 1
25646: ARRAY
25647: PPUSH
25648: LD_VAR 0 16
25652: PUSH
25653: LD_INT 2
25655: ARRAY
25656: PPUSH
25657: CALL_OW 297
25661: PUSH
25662: LD_INT 6
25664: LESSEQUAL
25665: IFFALSE 25124
// repeat wait ( 0 0$1 ) ;
25667: LD_INT 35
25669: PPUSH
25670: CALL_OW 67
// nearUnitsCounter = 0 ;
25674: LD_ADDR_VAR 0 12
25678: PUSH
25679: LD_INT 0
25681: ST_TO_ADDR
// for attackUnit in attackUnits do
25682: LD_ADDR_VAR 0 8
25686: PUSH
25687: LD_VAR 0 7
25691: PUSH
25692: FOR_IN
25693: IFFALSE 25731
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
25695: LD_VAR 0 6
25699: PPUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: CALL_OW 296
25709: PUSH
25710: LD_INT 7
25712: LESSEQUAL
25713: IFFALSE 25729
// nearUnitsCounter = nearUnitsCounter + 1 ;
25715: LD_ADDR_VAR 0 12
25719: PUSH
25720: LD_VAR 0 12
25724: PUSH
25725: LD_INT 1
25727: PLUS
25728: ST_TO_ADDR
25729: GO 25692
25731: POP
25732: POP
// until nearUnitsCounter = attackUnits ;
25733: LD_VAR 0 12
25737: PUSH
25738: LD_VAR 0 7
25742: EQUAL
25743: IFFALSE 25667
// for i := 1 to path do
25745: LD_ADDR_VAR 0 5
25749: PUSH
25750: DOUBLE
25751: LD_INT 1
25753: DEC
25754: ST_TO_ADDR
25755: LD_VAR 0 3
25759: PUSH
25760: FOR_TO
25761: IFFALSE 25844
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
25763: LD_VAR 0 3
25767: PUSH
25768: LD_VAR 0 5
25772: ARRAY
25773: PUSH
25774: LD_INT 1
25776: ARRAY
25777: PUSH
25778: LD_VAR 0 16
25782: PUSH
25783: LD_INT 1
25785: ARRAY
25786: EQUAL
25787: PUSH
25788: LD_VAR 0 3
25792: PUSH
25793: LD_VAR 0 5
25797: ARRAY
25798: PUSH
25799: LD_INT 2
25801: ARRAY
25802: PUSH
25803: LD_VAR 0 16
25807: PUSH
25808: LD_INT 2
25810: ARRAY
25811: EQUAL
25812: AND
25813: IFFALSE 25842
// begin path = path diff [ path [ i ] ] ;
25815: LD_ADDR_VAR 0 3
25819: PUSH
25820: LD_VAR 0 3
25824: PUSH
25825: LD_VAR 0 3
25829: PUSH
25830: LD_VAR 0 5
25834: ARRAY
25835: PUSH
25836: EMPTY
25837: LIST
25838: DIFF
25839: ST_TO_ADDR
// break ;
25840: GO 25844
// end ;
25842: GO 25760
25844: POP
25845: POP
// end ; if not path then
25846: LD_VAR 0 3
25850: NOT
25851: IFFALSE 25855
// break ;
25853: GO 25857
// end ;
25855: GO 25107
25857: POP
25858: POP
// repeat unitsReachPathEnd = 0 ;
25859: LD_ADDR_VAR 0 17
25863: PUSH
25864: LD_INT 0
25866: ST_TO_ADDR
// for attackUnit in attackUnits do
25867: LD_ADDR_VAR 0 8
25871: PUSH
25872: LD_VAR 0 7
25876: PUSH
25877: FOR_IN
25878: IFFALSE 26016
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
25880: LD_VAR 0 8
25884: PPUSH
25885: LD_VAR 0 13
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PPUSH
25894: LD_VAR 0 13
25898: PUSH
25899: LD_INT 2
25901: ARRAY
25902: PPUSH
25903: CALL_OW 297
25907: PUSH
25908: LD_INT 7
25910: LESS
25911: NOT
25912: PUSH
25913: LD_VAR 0 8
25917: PPUSH
25918: CALL_OW 110
25922: PUSH
25923: LD_INT 0
25925: EQUAL
25926: AND
25927: IFFALSE 25958
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
25929: LD_VAR 0 8
25933: PPUSH
25934: LD_VAR 0 13
25938: PUSH
25939: LD_INT 1
25941: ARRAY
25942: PPUSH
25943: LD_VAR 0 13
25947: PUSH
25948: LD_INT 2
25950: ARRAY
25951: PPUSH
25952: CALL_OW 111
25956: GO 25985
// if GetTag ( attackUnit ) = 0 then
25958: LD_VAR 0 8
25962: PPUSH
25963: CALL_OW 110
25967: PUSH
25968: LD_INT 0
25970: EQUAL
25971: IFFALSE 25985
// SetTag ( attackUnit , 1 ) ;
25973: LD_VAR 0 8
25977: PPUSH
25978: LD_INT 1
25980: PPUSH
25981: CALL_OW 109
// if GetTag ( unit ) = 1 then
25985: LD_VAR 0 6
25989: PPUSH
25990: CALL_OW 110
25994: PUSH
25995: LD_INT 1
25997: EQUAL
25998: IFFALSE 26014
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26000: LD_ADDR_VAR 0 17
26004: PUSH
26005: LD_VAR 0 17
26009: PUSH
26010: LD_INT 1
26012: PLUS
26013: ST_TO_ADDR
// end ;
26014: GO 25877
26016: POP
26017: POP
// wait ( 0 0$1 ) ;
26018: LD_INT 35
26020: PPUSH
26021: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26025: LD_VAR 0 17
26029: PUSH
26030: LD_VAR 0 7
26034: PUSH
26035: LD_INT 3
26037: MINUS
26038: GREATER
26039: IFFALSE 25859
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26041: LD_VAR 0 2
26045: PPUSH
26046: LD_INT 50
26048: PUSH
26049: EMPTY
26050: LIST
26051: PPUSH
26052: CALL_OW 72
26056: NOT
26057: PUSH
26058: LD_VAR 0 1
26062: PPUSH
26063: CALL_OW 303
26067: OR
26068: IFFALSE 24932
// end ;
26070: LD_VAR 0 4
26074: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26075: LD_INT 0
26077: PPUSH
26078: PPUSH
26079: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26080: LD_ADDR_VAR 0 5
26084: PUSH
26085: LD_VAR 0 2
26089: PUSH
26090: LD_INT 1
26092: ARRAY
26093: PUSH
26094: LD_INT 1
26096: ARRAY
26097: PUSH
26098: LD_VAR 0 2
26102: PUSH
26103: LD_INT 1
26105: ARRAY
26106: PUSH
26107: LD_INT 2
26109: ARRAY
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: ST_TO_ADDR
// for i := 2 to path do
26115: LD_ADDR_VAR 0 4
26119: PUSH
26120: DOUBLE
26121: LD_INT 2
26123: DEC
26124: ST_TO_ADDR
26125: LD_VAR 0 2
26129: PUSH
26130: FOR_TO
26131: IFFALSE 26271
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26133: LD_VAR 0 1
26137: PPUSH
26138: LD_VAR 0 2
26142: PUSH
26143: LD_VAR 0 4
26147: ARRAY
26148: PUSH
26149: LD_INT 1
26151: ARRAY
26152: PPUSH
26153: LD_VAR 0 2
26157: PUSH
26158: LD_VAR 0 4
26162: ARRAY
26163: PUSH
26164: LD_INT 2
26166: ARRAY
26167: PPUSH
26168: CALL_OW 297
26172: PUSH
26173: LD_VAR 0 1
26177: PPUSH
26178: LD_VAR 0 5
26182: PUSH
26183: LD_INT 1
26185: ARRAY
26186: PPUSH
26187: LD_VAR 0 5
26191: PUSH
26192: LD_INT 2
26194: ARRAY
26195: PPUSH
26196: CALL_OW 297
26200: LESS
26201: IFFALSE 26269
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26203: LD_ADDR_VAR 0 5
26207: PUSH
26208: LD_VAR 0 5
26212: PPUSH
26213: LD_INT 1
26215: PPUSH
26216: LD_VAR 0 2
26220: PUSH
26221: LD_VAR 0 4
26225: ARRAY
26226: PUSH
26227: LD_INT 1
26229: ARRAY
26230: PPUSH
26231: CALL_OW 1
26235: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
26236: LD_ADDR_VAR 0 5
26240: PUSH
26241: LD_VAR 0 5
26245: PPUSH
26246: LD_INT 2
26248: PPUSH
26249: LD_VAR 0 2
26253: PUSH
26254: LD_VAR 0 4
26258: ARRAY
26259: PUSH
26260: LD_INT 2
26262: ARRAY
26263: PPUSH
26264: CALL_OW 1
26268: ST_TO_ADDR
// end ; end ;
26269: GO 26130
26271: POP
26272: POP
// result = nearPosition ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_VAR 0 5
26282: ST_TO_ADDR
// end ;
26283: LD_VAR 0 3
26287: RET
// function ForceResetTaskList ( unit ) ; begin
26288: LD_INT 0
26290: PPUSH
// if GetTaskList ( unit ) then
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 437
26300: IFFALSE 26336
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
26302: LD_VAR 0 1
26306: PPUSH
26307: CALL_OW 437
26311: PUSH
26312: LD_INT 1
26314: ARRAY
26315: PUSH
26316: LD_INT 1
26318: ARRAY
26319: PUSH
26320: LD_STRING e
26322: EQUAL
26323: IFFALSE 26336
// SetTaskList ( unit , [ ] ) ;
26325: LD_VAR 0 1
26329: PPUSH
26330: EMPTY
26331: PPUSH
26332: CALL_OW 446
// end ;
26336: LD_VAR 0 2
26340: RET
// function ExitUnitFromBuilding ( unit ) ; begin
26341: LD_INT 0
26343: PPUSH
// if IsInUnit ( unit ) then
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL_OW 310
26353: IFFALSE 26364
// ComExitBuilding ( unit ) ;
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 122
// end ; end_of_file
26364: LD_VAR 0 2
26368: RET
// every 0 0$1 trigger enableCounter do
26369: LD_EXP 18
26373: IFFALSE 26410
26375: GO 26377
26377: DISABLE
// begin enable ;
26378: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
26379: LD_ADDR_OWVAR 47
26383: PUSH
26384: LD_STRING #Am01-1
26386: PUSH
26387: LD_EXP 19
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
26396: LD_ADDR_EXP 19
26400: PUSH
26401: LD_EXP 19
26405: PUSH
26406: LD_INT 35
26408: PLUS
26409: ST_TO_ADDR
// end ; end_of_file end_of_file
26410: END
// every 0 0$01 do var timer ;
26411: GO 26413
26413: DISABLE
26414: LD_INT 0
26416: PPUSH
// begin timer := 1 1$30 ;
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: LD_INT 3150
26424: ST_TO_ADDR
// repeat wait ( timer ) ;
26425: LD_VAR 0 1
26429: PPUSH
26430: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
26434: LD_EXP 20
26438: PUSH
26439: LD_INT 6
26441: GREATEREQUAL
26442: PUSH
26443: LD_EXP 20
26447: PUSH
26448: LD_INT 12
26450: LESS
26451: AND
26452: IFFALSE 26468
// timer := timer + 0 0$3 ;
26454: LD_ADDR_VAR 0 1
26458: PUSH
26459: LD_VAR 0 1
26463: PUSH
26464: LD_INT 105
26466: PLUS
26467: ST_TO_ADDR
// if cratesSpawned >= 12 then
26468: LD_EXP 20
26472: PUSH
26473: LD_INT 12
26475: GREATEREQUAL
26476: IFFALSE 26492
// timer := timer + 0 0$9 ;
26478: LD_ADDR_VAR 0 1
26482: PUSH
26483: LD_VAR 0 1
26487: PUSH
26488: LD_INT 315
26490: PLUS
26491: ST_TO_ADDR
// if timer > 3 3$00 then
26492: LD_VAR 0 1
26496: PUSH
26497: LD_INT 6300
26499: GREATER
26500: IFFALSE 26510
// timer := 0 0$50 ;
26502: LD_ADDR_VAR 0 1
26506: PUSH
26507: LD_INT 1750
26509: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
26510: LD_INT 3
26512: PPUSH
26513: LD_INT 5
26515: PPUSH
26516: CALL_OW 12
26520: PPUSH
26521: LD_INT 22
26523: PPUSH
26524: LD_INT 1
26526: PPUSH
26527: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26531: LD_ADDR_EXP 20
26535: PUSH
26536: LD_EXP 20
26540: PUSH
26541: LD_INT 1
26543: PLUS
26544: ST_TO_ADDR
// until false ;
26545: LD_INT 0
26547: IFFALSE 26425
// end ; end_of_file
26549: PPOPN 1
26551: END
// export function Nef_PrepareNature ; var i , un ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
26556: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
26557: LD_ADDR_VAR 0 2
26561: PUSH
26562: DOUBLE
26563: LD_INT 1
26565: DEC
26566: ST_TO_ADDR
26567: LD_EXP 21
26571: PUSH
26572: LD_INT 1
26574: ARRAY
26575: PUSH
26576: FOR_TO
26577: IFFALSE 26687
// begin uc_side = 0 ;
26579: LD_ADDR_OWVAR 20
26583: PUSH
26584: LD_INT 0
26586: ST_TO_ADDR
// uc_nation = nation_nature ;
26587: LD_ADDR_OWVAR 21
26591: PUSH
26592: LD_INT 0
26594: ST_TO_ADDR
// hc_class = class_apeman ;
26595: LD_ADDR_OWVAR 28
26599: PUSH
26600: LD_INT 12
26602: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
26603: LD_ADDR_OWVAR 31
26607: PUSH
26608: LD_EXP 22
26612: PUSH
26613: LD_INT 1
26615: ARRAY
26616: PUSH
26617: LD_EXP 22
26621: PUSH
26622: LD_INT 2
26624: ARRAY
26625: PUSH
26626: LD_EXP 22
26630: PUSH
26631: LD_INT 3
26633: ARRAY
26634: PUSH
26635: LD_EXP 22
26639: PUSH
26640: LD_INT 4
26642: ARRAY
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
26650: LD_ADDR_OWVAR 35
26654: PUSH
26655: LD_EXP 23
26659: ST_TO_ADDR
// un = CreateHuman ;
26660: LD_ADDR_VAR 0 3
26664: PUSH
26665: CALL_OW 44
26669: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
26670: LD_VAR 0 3
26674: PPUSH
26675: LD_INT 23
26677: PPUSH
26678: LD_INT 0
26680: PPUSH
26681: CALL_OW 49
// end ;
26685: GO 26576
26687: POP
26688: POP
// for i := 1 to animalsAmount [ 2 ] do
26689: LD_ADDR_VAR 0 2
26693: PUSH
26694: DOUBLE
26695: LD_INT 1
26697: DEC
26698: ST_TO_ADDR
26699: LD_EXP 21
26703: PUSH
26704: LD_INT 2
26706: ARRAY
26707: PUSH
26708: FOR_TO
26709: IFFALSE 26819
// begin uc_side = 0 ;
26711: LD_ADDR_OWVAR 20
26715: PUSH
26716: LD_INT 0
26718: ST_TO_ADDR
// uc_nation = nation_nature ;
26719: LD_ADDR_OWVAR 21
26723: PUSH
26724: LD_INT 0
26726: ST_TO_ADDR
// hc_class = class_phororhacos ;
26727: LD_ADDR_OWVAR 28
26731: PUSH
26732: LD_INT 18
26734: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
26735: LD_ADDR_OWVAR 31
26739: PUSH
26740: LD_EXP 22
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PUSH
26749: LD_EXP 22
26753: PUSH
26754: LD_INT 2
26756: ARRAY
26757: PUSH
26758: LD_EXP 22
26762: PUSH
26763: LD_INT 3
26765: ARRAY
26766: PUSH
26767: LD_EXP 22
26771: PUSH
26772: LD_INT 4
26774: ARRAY
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
26782: LD_ADDR_OWVAR 35
26786: PUSH
26787: LD_EXP 23
26791: ST_TO_ADDR
// un = CreateHuman ;
26792: LD_ADDR_VAR 0 3
26796: PUSH
26797: CALL_OW 44
26801: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
26802: LD_VAR 0 3
26806: PPUSH
26807: LD_INT 23
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 49
// end ;
26817: GO 26708
26819: POP
26820: POP
// for i := 1 to animalsAmount [ 3 ] do
26821: LD_ADDR_VAR 0 2
26825: PUSH
26826: DOUBLE
26827: LD_INT 1
26829: DEC
26830: ST_TO_ADDR
26831: LD_EXP 21
26835: PUSH
26836: LD_INT 3
26838: ARRAY
26839: PUSH
26840: FOR_TO
26841: IFFALSE 26951
// begin uc_side = 0 ;
26843: LD_ADDR_OWVAR 20
26847: PUSH
26848: LD_INT 0
26850: ST_TO_ADDR
// uc_nation = nation_nature ;
26851: LD_ADDR_OWVAR 21
26855: PUSH
26856: LD_INT 0
26858: ST_TO_ADDR
// hc_class = class_tiger ;
26859: LD_ADDR_OWVAR 28
26863: PUSH
26864: LD_INT 14
26866: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
26867: LD_ADDR_OWVAR 31
26871: PUSH
26872: LD_EXP 22
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PUSH
26881: LD_EXP 22
26885: PUSH
26886: LD_INT 2
26888: ARRAY
26889: PUSH
26890: LD_EXP 22
26894: PUSH
26895: LD_INT 3
26897: ARRAY
26898: PUSH
26899: LD_EXP 22
26903: PUSH
26904: LD_INT 4
26906: ARRAY
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
26914: LD_ADDR_OWVAR 35
26918: PUSH
26919: LD_EXP 23
26923: ST_TO_ADDR
// un = CreateHuman ;
26924: LD_ADDR_VAR 0 3
26928: PUSH
26929: CALL_OW 44
26933: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
26934: LD_VAR 0 3
26938: PPUSH
26939: LD_INT 23
26941: PPUSH
26942: LD_INT 0
26944: PPUSH
26945: CALL_OW 49
// end ;
26949: GO 26840
26951: POP
26952: POP
// for i := 1 to animalsAmount [ 4 ] do
26953: LD_ADDR_VAR 0 2
26957: PUSH
26958: DOUBLE
26959: LD_INT 1
26961: DEC
26962: ST_TO_ADDR
26963: LD_EXP 21
26967: PUSH
26968: LD_INT 4
26970: ARRAY
26971: PUSH
26972: FOR_TO
26973: IFFALSE 27083
// begin uc_side = 0 ;
26975: LD_ADDR_OWVAR 20
26979: PUSH
26980: LD_INT 0
26982: ST_TO_ADDR
// uc_nation = nation_nature ;
26983: LD_ADDR_OWVAR 21
26987: PUSH
26988: LD_INT 0
26990: ST_TO_ADDR
// hc_class = 21 ;
26991: LD_ADDR_OWVAR 28
26995: PUSH
26996: LD_INT 21
26998: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
26999: LD_ADDR_OWVAR 31
27003: PUSH
27004: LD_EXP 22
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PUSH
27013: LD_EXP 22
27017: PUSH
27018: LD_INT 2
27020: ARRAY
27021: PUSH
27022: LD_EXP 22
27026: PUSH
27027: LD_INT 3
27029: ARRAY
27030: PUSH
27031: LD_EXP 22
27035: PUSH
27036: LD_INT 4
27038: ARRAY
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27046: LD_ADDR_OWVAR 35
27050: PUSH
27051: LD_EXP 23
27055: ST_TO_ADDR
// un = CreateHuman ;
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: CALL_OW 44
27065: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27066: LD_VAR 0 3
27070: PPUSH
27071: LD_INT 23
27073: PPUSH
27074: LD_INT 0
27076: PPUSH
27077: CALL_OW 49
// end ;
27081: GO 26972
27083: POP
27084: POP
// for i := 1 to animalsAmount [ 5 ] do
27085: LD_ADDR_VAR 0 2
27089: PUSH
27090: DOUBLE
27091: LD_INT 1
27093: DEC
27094: ST_TO_ADDR
27095: LD_EXP 21
27099: PUSH
27100: LD_INT 5
27102: ARRAY
27103: PUSH
27104: FOR_TO
27105: IFFALSE 27166
// begin uc_side = 0 ;
27107: LD_ADDR_OWVAR 20
27111: PUSH
27112: LD_INT 0
27114: ST_TO_ADDR
// uc_nation = nation_nature ;
27115: LD_ADDR_OWVAR 21
27119: PUSH
27120: LD_INT 0
27122: ST_TO_ADDR
// vc_chassis := 31 ;
27123: LD_ADDR_OWVAR 37
27127: PUSH
27128: LD_INT 31
27130: ST_TO_ADDR
// vc_control := control_rider ;
27131: LD_ADDR_OWVAR 38
27135: PUSH
27136: LD_INT 4
27138: ST_TO_ADDR
// un := CreateVehicle ;
27139: LD_ADDR_VAR 0 3
27143: PUSH
27144: CALL_OW 45
27148: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27149: LD_VAR 0 3
27153: PPUSH
27154: LD_INT 23
27156: PPUSH
27157: LD_INT 0
27159: PPUSH
27160: CALL_OW 49
// end ;
27164: GO 27104
27166: POP
27167: POP
// end ; end_of_file
27168: LD_VAR 0 1
27172: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
27173: LD_VAR 0 2
27177: PUSH
27178: LD_INT 100
27180: EQUAL
27181: IFFALSE 28130
// begin if not StreamModeActive then
27183: LD_EXP 63
27187: NOT
27188: IFFALSE 27198
// StreamModeActive := true ;
27190: LD_ADDR_EXP 63
27194: PUSH
27195: LD_INT 1
27197: ST_TO_ADDR
// if p3 = 0 then
27198: LD_VAR 0 3
27202: PUSH
27203: LD_INT 0
27205: EQUAL
27206: IFFALSE 27212
// InitStreamMode ;
27208: CALL 28288 0 0
// if p3 = 1 then
27212: LD_VAR 0 3
27216: PUSH
27217: LD_INT 1
27219: EQUAL
27220: IFFALSE 27230
// sRocket := true ;
27222: LD_ADDR_EXP 68
27226: PUSH
27227: LD_INT 1
27229: ST_TO_ADDR
// if p3 = 2 then
27230: LD_VAR 0 3
27234: PUSH
27235: LD_INT 2
27237: EQUAL
27238: IFFALSE 27248
// sSpeed := true ;
27240: LD_ADDR_EXP 67
27244: PUSH
27245: LD_INT 1
27247: ST_TO_ADDR
// if p3 = 3 then
27248: LD_VAR 0 3
27252: PUSH
27253: LD_INT 3
27255: EQUAL
27256: IFFALSE 27266
// sEngine := true ;
27258: LD_ADDR_EXP 69
27262: PUSH
27263: LD_INT 1
27265: ST_TO_ADDR
// if p3 = 4 then
27266: LD_VAR 0 3
27270: PUSH
27271: LD_INT 4
27273: EQUAL
27274: IFFALSE 27284
// sSpec := true ;
27276: LD_ADDR_EXP 66
27280: PUSH
27281: LD_INT 1
27283: ST_TO_ADDR
// if p3 = 5 then
27284: LD_VAR 0 3
27288: PUSH
27289: LD_INT 5
27291: EQUAL
27292: IFFALSE 27302
// sLevel := true ;
27294: LD_ADDR_EXP 70
27298: PUSH
27299: LD_INT 1
27301: ST_TO_ADDR
// if p3 = 6 then
27302: LD_VAR 0 3
27306: PUSH
27307: LD_INT 6
27309: EQUAL
27310: IFFALSE 27320
// sArmoury := true ;
27312: LD_ADDR_EXP 71
27316: PUSH
27317: LD_INT 1
27319: ST_TO_ADDR
// if p3 = 7 then
27320: LD_VAR 0 3
27324: PUSH
27325: LD_INT 7
27327: EQUAL
27328: IFFALSE 27338
// sRadar := true ;
27330: LD_ADDR_EXP 72
27334: PUSH
27335: LD_INT 1
27337: ST_TO_ADDR
// if p3 = 8 then
27338: LD_VAR 0 3
27342: PUSH
27343: LD_INT 8
27345: EQUAL
27346: IFFALSE 27356
// sBunker := true ;
27348: LD_ADDR_EXP 73
27352: PUSH
27353: LD_INT 1
27355: ST_TO_ADDR
// if p3 = 9 then
27356: LD_VAR 0 3
27360: PUSH
27361: LD_INT 9
27363: EQUAL
27364: IFFALSE 27374
// sHack := true ;
27366: LD_ADDR_EXP 74
27370: PUSH
27371: LD_INT 1
27373: ST_TO_ADDR
// if p3 = 10 then
27374: LD_VAR 0 3
27378: PUSH
27379: LD_INT 10
27381: EQUAL
27382: IFFALSE 27392
// sFire := true ;
27384: LD_ADDR_EXP 75
27388: PUSH
27389: LD_INT 1
27391: ST_TO_ADDR
// if p3 = 11 then
27392: LD_VAR 0 3
27396: PUSH
27397: LD_INT 11
27399: EQUAL
27400: IFFALSE 27410
// sRefresh := true ;
27402: LD_ADDR_EXP 76
27406: PUSH
27407: LD_INT 1
27409: ST_TO_ADDR
// if p3 = 12 then
27410: LD_VAR 0 3
27414: PUSH
27415: LD_INT 12
27417: EQUAL
27418: IFFALSE 27428
// sExp := true ;
27420: LD_ADDR_EXP 77
27424: PUSH
27425: LD_INT 1
27427: ST_TO_ADDR
// if p3 = 13 then
27428: LD_VAR 0 3
27432: PUSH
27433: LD_INT 13
27435: EQUAL
27436: IFFALSE 27446
// sDepot := true ;
27438: LD_ADDR_EXP 78
27442: PUSH
27443: LD_INT 1
27445: ST_TO_ADDR
// if p3 = 14 then
27446: LD_VAR 0 3
27450: PUSH
27451: LD_INT 14
27453: EQUAL
27454: IFFALSE 27464
// sFlag := true ;
27456: LD_ADDR_EXP 79
27460: PUSH
27461: LD_INT 1
27463: ST_TO_ADDR
// if p3 = 15 then
27464: LD_VAR 0 3
27468: PUSH
27469: LD_INT 15
27471: EQUAL
27472: IFFALSE 27482
// sKamikadze := true ;
27474: LD_ADDR_EXP 87
27478: PUSH
27479: LD_INT 1
27481: ST_TO_ADDR
// if p3 = 16 then
27482: LD_VAR 0 3
27486: PUSH
27487: LD_INT 16
27489: EQUAL
27490: IFFALSE 27500
// sTroll := true ;
27492: LD_ADDR_EXP 88
27496: PUSH
27497: LD_INT 1
27499: ST_TO_ADDR
// if p3 = 17 then
27500: LD_VAR 0 3
27504: PUSH
27505: LD_INT 17
27507: EQUAL
27508: IFFALSE 27518
// sSlow := true ;
27510: LD_ADDR_EXP 89
27514: PUSH
27515: LD_INT 1
27517: ST_TO_ADDR
// if p3 = 18 then
27518: LD_VAR 0 3
27522: PUSH
27523: LD_INT 18
27525: EQUAL
27526: IFFALSE 27536
// sLack := true ;
27528: LD_ADDR_EXP 90
27532: PUSH
27533: LD_INT 1
27535: ST_TO_ADDR
// if p3 = 19 then
27536: LD_VAR 0 3
27540: PUSH
27541: LD_INT 19
27543: EQUAL
27544: IFFALSE 27554
// sTank := true ;
27546: LD_ADDR_EXP 92
27550: PUSH
27551: LD_INT 1
27553: ST_TO_ADDR
// if p3 = 20 then
27554: LD_VAR 0 3
27558: PUSH
27559: LD_INT 20
27561: EQUAL
27562: IFFALSE 27572
// sRemote := true ;
27564: LD_ADDR_EXP 93
27568: PUSH
27569: LD_INT 1
27571: ST_TO_ADDR
// if p3 = 21 then
27572: LD_VAR 0 3
27576: PUSH
27577: LD_INT 21
27579: EQUAL
27580: IFFALSE 27590
// sPowell := true ;
27582: LD_ADDR_EXP 94
27586: PUSH
27587: LD_INT 1
27589: ST_TO_ADDR
// if p3 = 22 then
27590: LD_VAR 0 3
27594: PUSH
27595: LD_INT 22
27597: EQUAL
27598: IFFALSE 27608
// sTeleport := true ;
27600: LD_ADDR_EXP 97
27604: PUSH
27605: LD_INT 1
27607: ST_TO_ADDR
// if p3 = 23 then
27608: LD_VAR 0 3
27612: PUSH
27613: LD_INT 23
27615: EQUAL
27616: IFFALSE 27626
// sOilTower := true ;
27618: LD_ADDR_EXP 99
27622: PUSH
27623: LD_INT 1
27625: ST_TO_ADDR
// if p3 = 24 then
27626: LD_VAR 0 3
27630: PUSH
27631: LD_INT 24
27633: EQUAL
27634: IFFALSE 27644
// sShovel := true ;
27636: LD_ADDR_EXP 100
27640: PUSH
27641: LD_INT 1
27643: ST_TO_ADDR
// if p3 = 25 then
27644: LD_VAR 0 3
27648: PUSH
27649: LD_INT 25
27651: EQUAL
27652: IFFALSE 27662
// sSheik := true ;
27654: LD_ADDR_EXP 101
27658: PUSH
27659: LD_INT 1
27661: ST_TO_ADDR
// if p3 = 26 then
27662: LD_VAR 0 3
27666: PUSH
27667: LD_INT 26
27669: EQUAL
27670: IFFALSE 27680
// sEarthquake := true ;
27672: LD_ADDR_EXP 103
27676: PUSH
27677: LD_INT 1
27679: ST_TO_ADDR
// if p3 = 27 then
27680: LD_VAR 0 3
27684: PUSH
27685: LD_INT 27
27687: EQUAL
27688: IFFALSE 27698
// sAI := true ;
27690: LD_ADDR_EXP 104
27694: PUSH
27695: LD_INT 1
27697: ST_TO_ADDR
// if p3 = 28 then
27698: LD_VAR 0 3
27702: PUSH
27703: LD_INT 28
27705: EQUAL
27706: IFFALSE 27716
// sCargo := true ;
27708: LD_ADDR_EXP 107
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// if p3 = 29 then
27716: LD_VAR 0 3
27720: PUSH
27721: LD_INT 29
27723: EQUAL
27724: IFFALSE 27734
// sDLaser := true ;
27726: LD_ADDR_EXP 108
27730: PUSH
27731: LD_INT 1
27733: ST_TO_ADDR
// if p3 = 30 then
27734: LD_VAR 0 3
27738: PUSH
27739: LD_INT 30
27741: EQUAL
27742: IFFALSE 27752
// sExchange := true ;
27744: LD_ADDR_EXP 109
27748: PUSH
27749: LD_INT 1
27751: ST_TO_ADDR
// if p3 = 31 then
27752: LD_VAR 0 3
27756: PUSH
27757: LD_INT 31
27759: EQUAL
27760: IFFALSE 27770
// sFac := true ;
27762: LD_ADDR_EXP 110
27766: PUSH
27767: LD_INT 1
27769: ST_TO_ADDR
// if p3 = 32 then
27770: LD_VAR 0 3
27774: PUSH
27775: LD_INT 32
27777: EQUAL
27778: IFFALSE 27788
// sPower := true ;
27780: LD_ADDR_EXP 111
27784: PUSH
27785: LD_INT 1
27787: ST_TO_ADDR
// if p3 = 33 then
27788: LD_VAR 0 3
27792: PUSH
27793: LD_INT 33
27795: EQUAL
27796: IFFALSE 27806
// sRandom := true ;
27798: LD_ADDR_EXP 112
27802: PUSH
27803: LD_INT 1
27805: ST_TO_ADDR
// if p3 = 34 then
27806: LD_VAR 0 3
27810: PUSH
27811: LD_INT 34
27813: EQUAL
27814: IFFALSE 27824
// sShield := true ;
27816: LD_ADDR_EXP 113
27820: PUSH
27821: LD_INT 1
27823: ST_TO_ADDR
// if p3 = 35 then
27824: LD_VAR 0 3
27828: PUSH
27829: LD_INT 35
27831: EQUAL
27832: IFFALSE 27842
// sTime := true ;
27834: LD_ADDR_EXP 114
27838: PUSH
27839: LD_INT 1
27841: ST_TO_ADDR
// if p3 = 36 then
27842: LD_VAR 0 3
27846: PUSH
27847: LD_INT 36
27849: EQUAL
27850: IFFALSE 27860
// sTools := true ;
27852: LD_ADDR_EXP 115
27856: PUSH
27857: LD_INT 1
27859: ST_TO_ADDR
// if p3 = 101 then
27860: LD_VAR 0 3
27864: PUSH
27865: LD_INT 101
27867: EQUAL
27868: IFFALSE 27878
// sSold := true ;
27870: LD_ADDR_EXP 80
27874: PUSH
27875: LD_INT 1
27877: ST_TO_ADDR
// if p3 = 102 then
27878: LD_VAR 0 3
27882: PUSH
27883: LD_INT 102
27885: EQUAL
27886: IFFALSE 27896
// sDiff := true ;
27888: LD_ADDR_EXP 81
27892: PUSH
27893: LD_INT 1
27895: ST_TO_ADDR
// if p3 = 103 then
27896: LD_VAR 0 3
27900: PUSH
27901: LD_INT 103
27903: EQUAL
27904: IFFALSE 27914
// sFog := true ;
27906: LD_ADDR_EXP 84
27910: PUSH
27911: LD_INT 1
27913: ST_TO_ADDR
// if p3 = 104 then
27914: LD_VAR 0 3
27918: PUSH
27919: LD_INT 104
27921: EQUAL
27922: IFFALSE 27932
// sReset := true ;
27924: LD_ADDR_EXP 85
27928: PUSH
27929: LD_INT 1
27931: ST_TO_ADDR
// if p3 = 105 then
27932: LD_VAR 0 3
27936: PUSH
27937: LD_INT 105
27939: EQUAL
27940: IFFALSE 27950
// sSun := true ;
27942: LD_ADDR_EXP 86
27946: PUSH
27947: LD_INT 1
27949: ST_TO_ADDR
// if p3 = 106 then
27950: LD_VAR 0 3
27954: PUSH
27955: LD_INT 106
27957: EQUAL
27958: IFFALSE 27968
// sTiger := true ;
27960: LD_ADDR_EXP 82
27964: PUSH
27965: LD_INT 1
27967: ST_TO_ADDR
// if p3 = 107 then
27968: LD_VAR 0 3
27972: PUSH
27973: LD_INT 107
27975: EQUAL
27976: IFFALSE 27986
// sBomb := true ;
27978: LD_ADDR_EXP 83
27982: PUSH
27983: LD_INT 1
27985: ST_TO_ADDR
// if p3 = 108 then
27986: LD_VAR 0 3
27990: PUSH
27991: LD_INT 108
27993: EQUAL
27994: IFFALSE 28004
// sWound := true ;
27996: LD_ADDR_EXP 91
28000: PUSH
28001: LD_INT 1
28003: ST_TO_ADDR
// if p3 = 109 then
28004: LD_VAR 0 3
28008: PUSH
28009: LD_INT 109
28011: EQUAL
28012: IFFALSE 28022
// sBetray := true ;
28014: LD_ADDR_EXP 95
28018: PUSH
28019: LD_INT 1
28021: ST_TO_ADDR
// if p3 = 110 then
28022: LD_VAR 0 3
28026: PUSH
28027: LD_INT 110
28029: EQUAL
28030: IFFALSE 28040
// sContamin := true ;
28032: LD_ADDR_EXP 96
28036: PUSH
28037: LD_INT 1
28039: ST_TO_ADDR
// if p3 = 111 then
28040: LD_VAR 0 3
28044: PUSH
28045: LD_INT 111
28047: EQUAL
28048: IFFALSE 28058
// sOil := true ;
28050: LD_ADDR_EXP 98
28054: PUSH
28055: LD_INT 1
28057: ST_TO_ADDR
// if p3 = 112 then
28058: LD_VAR 0 3
28062: PUSH
28063: LD_INT 112
28065: EQUAL
28066: IFFALSE 28076
// sStu := true ;
28068: LD_ADDR_EXP 102
28072: PUSH
28073: LD_INT 1
28075: ST_TO_ADDR
// if p3 = 113 then
28076: LD_VAR 0 3
28080: PUSH
28081: LD_INT 113
28083: EQUAL
28084: IFFALSE 28094
// sBazooka := true ;
28086: LD_ADDR_EXP 105
28090: PUSH
28091: LD_INT 1
28093: ST_TO_ADDR
// if p3 = 114 then
28094: LD_VAR 0 3
28098: PUSH
28099: LD_INT 114
28101: EQUAL
28102: IFFALSE 28112
// sMortar := true ;
28104: LD_ADDR_EXP 106
28108: PUSH
28109: LD_INT 1
28111: ST_TO_ADDR
// if p3 = 115 then
28112: LD_VAR 0 3
28116: PUSH
28117: LD_INT 115
28119: EQUAL
28120: IFFALSE 28130
// sRanger := true ;
28122: LD_ADDR_EXP 116
28126: PUSH
28127: LD_INT 1
28129: ST_TO_ADDR
// end ; if p2 = 101 then
28130: LD_VAR 0 2
28134: PUSH
28135: LD_INT 101
28137: EQUAL
28138: IFFALSE 28266
// begin case p3 of 1 :
28140: LD_VAR 0 3
28144: PUSH
28145: LD_INT 1
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28160
28153: POP
// hHackUnlimitedResources ; 2 :
28154: CALL 39301 0 0
28158: GO 28266
28160: LD_INT 2
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28175
28168: POP
// hHackSetLevel10 ; 3 :
28169: CALL 39434 0 0
28173: GO 28266
28175: LD_INT 3
28177: DOUBLE
28178: EQUAL
28179: IFTRUE 28183
28181: GO 28190
28183: POP
// hHackSetLevel10YourUnits ; 4 :
28184: CALL 39519 0 0
28188: GO 28266
28190: LD_INT 4
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28205
28198: POP
// hHackInvincible ; 5 :
28199: CALL 39967 0 0
28203: GO 28266
28205: LD_INT 5
28207: DOUBLE
28208: EQUAL
28209: IFTRUE 28213
28211: GO 28220
28213: POP
// hHackInvisible ; 6 :
28214: CALL 40078 0 0
28218: GO 28266
28220: LD_INT 6
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28235
28228: POP
// hHackChangeYourSide ; 7 :
28229: CALL 40135 0 0
28233: GO 28266
28235: LD_INT 7
28237: DOUBLE
28238: EQUAL
28239: IFTRUE 28243
28241: GO 28250
28243: POP
// hHackChangeUnitSide ; 8 :
28244: CALL 40177 0 0
28248: GO 28266
28250: LD_INT 8
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28265
28258: POP
// hHackFog ; end ;
28259: CALL 40278 0 0
28263: GO 28266
28265: POP
// end ; end ;
28266: PPOPN 6
28268: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28269: GO 28271
28271: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28272: LD_STRING initStreamRollete();
28274: PPUSH
28275: CALL_OW 559
// InitStreamMode ;
28279: CALL 28288 0 0
// DefineStreamItems ( ) ;
28283: CALL 28728 0 0
// end ;
28287: END
// function InitStreamMode ; begin
28288: LD_INT 0
28290: PPUSH
// streamModeActive := false ;
28291: LD_ADDR_EXP 63
28295: PUSH
28296: LD_INT 0
28298: ST_TO_ADDR
// normalCounter := 36 ;
28299: LD_ADDR_EXP 64
28303: PUSH
28304: LD_INT 36
28306: ST_TO_ADDR
// hardcoreCounter := 16 ;
28307: LD_ADDR_EXP 65
28311: PUSH
28312: LD_INT 16
28314: ST_TO_ADDR
// sRocket := false ;
28315: LD_ADDR_EXP 68
28319: PUSH
28320: LD_INT 0
28322: ST_TO_ADDR
// sSpeed := false ;
28323: LD_ADDR_EXP 67
28327: PUSH
28328: LD_INT 0
28330: ST_TO_ADDR
// sEngine := false ;
28331: LD_ADDR_EXP 69
28335: PUSH
28336: LD_INT 0
28338: ST_TO_ADDR
// sSpec := false ;
28339: LD_ADDR_EXP 66
28343: PUSH
28344: LD_INT 0
28346: ST_TO_ADDR
// sLevel := false ;
28347: LD_ADDR_EXP 70
28351: PUSH
28352: LD_INT 0
28354: ST_TO_ADDR
// sArmoury := false ;
28355: LD_ADDR_EXP 71
28359: PUSH
28360: LD_INT 0
28362: ST_TO_ADDR
// sRadar := false ;
28363: LD_ADDR_EXP 72
28367: PUSH
28368: LD_INT 0
28370: ST_TO_ADDR
// sBunker := false ;
28371: LD_ADDR_EXP 73
28375: PUSH
28376: LD_INT 0
28378: ST_TO_ADDR
// sHack := false ;
28379: LD_ADDR_EXP 74
28383: PUSH
28384: LD_INT 0
28386: ST_TO_ADDR
// sFire := false ;
28387: LD_ADDR_EXP 75
28391: PUSH
28392: LD_INT 0
28394: ST_TO_ADDR
// sRefresh := false ;
28395: LD_ADDR_EXP 76
28399: PUSH
28400: LD_INT 0
28402: ST_TO_ADDR
// sExp := false ;
28403: LD_ADDR_EXP 77
28407: PUSH
28408: LD_INT 0
28410: ST_TO_ADDR
// sDepot := false ;
28411: LD_ADDR_EXP 78
28415: PUSH
28416: LD_INT 0
28418: ST_TO_ADDR
// sFlag := false ;
28419: LD_ADDR_EXP 79
28423: PUSH
28424: LD_INT 0
28426: ST_TO_ADDR
// sKamikadze := false ;
28427: LD_ADDR_EXP 87
28431: PUSH
28432: LD_INT 0
28434: ST_TO_ADDR
// sTroll := false ;
28435: LD_ADDR_EXP 88
28439: PUSH
28440: LD_INT 0
28442: ST_TO_ADDR
// sSlow := false ;
28443: LD_ADDR_EXP 89
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// sLack := false ;
28451: LD_ADDR_EXP 90
28455: PUSH
28456: LD_INT 0
28458: ST_TO_ADDR
// sTank := false ;
28459: LD_ADDR_EXP 92
28463: PUSH
28464: LD_INT 0
28466: ST_TO_ADDR
// sRemote := false ;
28467: LD_ADDR_EXP 93
28471: PUSH
28472: LD_INT 0
28474: ST_TO_ADDR
// sPowell := false ;
28475: LD_ADDR_EXP 94
28479: PUSH
28480: LD_INT 0
28482: ST_TO_ADDR
// sTeleport := false ;
28483: LD_ADDR_EXP 97
28487: PUSH
28488: LD_INT 0
28490: ST_TO_ADDR
// sOilTower := false ;
28491: LD_ADDR_EXP 99
28495: PUSH
28496: LD_INT 0
28498: ST_TO_ADDR
// sShovel := false ;
28499: LD_ADDR_EXP 100
28503: PUSH
28504: LD_INT 0
28506: ST_TO_ADDR
// sSheik := false ;
28507: LD_ADDR_EXP 101
28511: PUSH
28512: LD_INT 0
28514: ST_TO_ADDR
// sEarthquake := false ;
28515: LD_ADDR_EXP 103
28519: PUSH
28520: LD_INT 0
28522: ST_TO_ADDR
// sAI := false ;
28523: LD_ADDR_EXP 104
28527: PUSH
28528: LD_INT 0
28530: ST_TO_ADDR
// sCargo := false ;
28531: LD_ADDR_EXP 107
28535: PUSH
28536: LD_INT 0
28538: ST_TO_ADDR
// sDLaser := false ;
28539: LD_ADDR_EXP 108
28543: PUSH
28544: LD_INT 0
28546: ST_TO_ADDR
// sExchange := false ;
28547: LD_ADDR_EXP 109
28551: PUSH
28552: LD_INT 0
28554: ST_TO_ADDR
// sFac := false ;
28555: LD_ADDR_EXP 110
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// sPower := false ;
28563: LD_ADDR_EXP 111
28567: PUSH
28568: LD_INT 0
28570: ST_TO_ADDR
// sRandom := false ;
28571: LD_ADDR_EXP 112
28575: PUSH
28576: LD_INT 0
28578: ST_TO_ADDR
// sShield := false ;
28579: LD_ADDR_EXP 113
28583: PUSH
28584: LD_INT 0
28586: ST_TO_ADDR
// sTime := false ;
28587: LD_ADDR_EXP 114
28591: PUSH
28592: LD_INT 0
28594: ST_TO_ADDR
// sTools := false ;
28595: LD_ADDR_EXP 115
28599: PUSH
28600: LD_INT 0
28602: ST_TO_ADDR
// sSold := false ;
28603: LD_ADDR_EXP 80
28607: PUSH
28608: LD_INT 0
28610: ST_TO_ADDR
// sDiff := false ;
28611: LD_ADDR_EXP 81
28615: PUSH
28616: LD_INT 0
28618: ST_TO_ADDR
// sFog := false ;
28619: LD_ADDR_EXP 84
28623: PUSH
28624: LD_INT 0
28626: ST_TO_ADDR
// sReset := false ;
28627: LD_ADDR_EXP 85
28631: PUSH
28632: LD_INT 0
28634: ST_TO_ADDR
// sSun := false ;
28635: LD_ADDR_EXP 86
28639: PUSH
28640: LD_INT 0
28642: ST_TO_ADDR
// sTiger := false ;
28643: LD_ADDR_EXP 82
28647: PUSH
28648: LD_INT 0
28650: ST_TO_ADDR
// sBomb := false ;
28651: LD_ADDR_EXP 83
28655: PUSH
28656: LD_INT 0
28658: ST_TO_ADDR
// sWound := false ;
28659: LD_ADDR_EXP 91
28663: PUSH
28664: LD_INT 0
28666: ST_TO_ADDR
// sBetray := false ;
28667: LD_ADDR_EXP 95
28671: PUSH
28672: LD_INT 0
28674: ST_TO_ADDR
// sContamin := false ;
28675: LD_ADDR_EXP 96
28679: PUSH
28680: LD_INT 0
28682: ST_TO_ADDR
// sOil := false ;
28683: LD_ADDR_EXP 98
28687: PUSH
28688: LD_INT 0
28690: ST_TO_ADDR
// sStu := false ;
28691: LD_ADDR_EXP 102
28695: PUSH
28696: LD_INT 0
28698: ST_TO_ADDR
// sBazooka := false ;
28699: LD_ADDR_EXP 105
28703: PUSH
28704: LD_INT 0
28706: ST_TO_ADDR
// sMortar := false ;
28707: LD_ADDR_EXP 106
28711: PUSH
28712: LD_INT 0
28714: ST_TO_ADDR
// sRanger := false ;
28715: LD_ADDR_EXP 116
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// end ;
28723: LD_VAR 0 1
28727: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28728: LD_INT 0
28730: PPUSH
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
// result := [ ] ;
28735: LD_ADDR_VAR 0 1
28739: PUSH
28740: EMPTY
28741: ST_TO_ADDR
// if campaign_id = 1 then
28742: LD_OWVAR 69
28746: PUSH
28747: LD_INT 1
28749: EQUAL
28750: IFFALSE 31688
// begin case mission_number of 1 :
28752: LD_OWVAR 70
28756: PUSH
28757: LD_INT 1
28759: DOUBLE
28760: EQUAL
28761: IFTRUE 28765
28763: GO 28829
28765: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28766: LD_ADDR_VAR 0 1
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 4
28776: PUSH
28777: LD_INT 11
28779: PUSH
28780: LD_INT 12
28782: PUSH
28783: LD_INT 15
28785: PUSH
28786: LD_INT 16
28788: PUSH
28789: LD_INT 22
28791: PUSH
28792: LD_INT 23
28794: PUSH
28795: LD_INT 26
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 101
28811: PUSH
28812: LD_INT 102
28814: PUSH
28815: LD_INT 106
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: ST_TO_ADDR
28827: GO 31686
28829: LD_INT 2
28831: DOUBLE
28832: EQUAL
28833: IFTRUE 28837
28835: GO 28909
28837: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28838: LD_ADDR_VAR 0 1
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: LD_INT 4
28848: PUSH
28849: LD_INT 11
28851: PUSH
28852: LD_INT 12
28854: PUSH
28855: LD_INT 15
28857: PUSH
28858: LD_INT 16
28860: PUSH
28861: LD_INT 22
28863: PUSH
28864: LD_INT 23
28866: PUSH
28867: LD_INT 26
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 101
28883: PUSH
28884: LD_INT 102
28886: PUSH
28887: LD_INT 105
28889: PUSH
28890: LD_INT 106
28892: PUSH
28893: LD_INT 108
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: ST_TO_ADDR
28907: GO 31686
28909: LD_INT 3
28911: DOUBLE
28912: EQUAL
28913: IFTRUE 28917
28915: GO 28993
28917: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28918: LD_ADDR_VAR 0 1
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: LD_INT 4
28928: PUSH
28929: LD_INT 5
28931: PUSH
28932: LD_INT 11
28934: PUSH
28935: LD_INT 12
28937: PUSH
28938: LD_INT 15
28940: PUSH
28941: LD_INT 16
28943: PUSH
28944: LD_INT 22
28946: PUSH
28947: LD_INT 26
28949: PUSH
28950: LD_INT 36
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 101
28967: PUSH
28968: LD_INT 102
28970: PUSH
28971: LD_INT 105
28973: PUSH
28974: LD_INT 106
28976: PUSH
28977: LD_INT 108
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: ST_TO_ADDR
28991: GO 31686
28993: LD_INT 4
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29085
29001: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
29002: LD_ADDR_VAR 0 1
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 4
29012: PUSH
29013: LD_INT 5
29015: PUSH
29016: LD_INT 8
29018: PUSH
29019: LD_INT 11
29021: PUSH
29022: LD_INT 12
29024: PUSH
29025: LD_INT 15
29027: PUSH
29028: LD_INT 16
29030: PUSH
29031: LD_INT 22
29033: PUSH
29034: LD_INT 23
29036: PUSH
29037: LD_INT 26
29039: PUSH
29040: LD_INT 36
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 101
29059: PUSH
29060: LD_INT 102
29062: PUSH
29063: LD_INT 105
29065: PUSH
29066: LD_INT 106
29068: PUSH
29069: LD_INT 108
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: ST_TO_ADDR
29083: GO 31686
29085: LD_INT 5
29087: DOUBLE
29088: EQUAL
29089: IFTRUE 29093
29091: GO 29193
29093: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29094: LD_ADDR_VAR 0 1
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 4
29104: PUSH
29105: LD_INT 5
29107: PUSH
29108: LD_INT 6
29110: PUSH
29111: LD_INT 8
29113: PUSH
29114: LD_INT 11
29116: PUSH
29117: LD_INT 12
29119: PUSH
29120: LD_INT 15
29122: PUSH
29123: LD_INT 16
29125: PUSH
29126: LD_INT 22
29128: PUSH
29129: LD_INT 23
29131: PUSH
29132: LD_INT 25
29134: PUSH
29135: LD_INT 26
29137: PUSH
29138: LD_INT 36
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 101
29159: PUSH
29160: LD_INT 102
29162: PUSH
29163: LD_INT 105
29165: PUSH
29166: LD_INT 106
29168: PUSH
29169: LD_INT 108
29171: PUSH
29172: LD_INT 109
29174: PUSH
29175: LD_INT 112
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: ST_TO_ADDR
29191: GO 31686
29193: LD_INT 6
29195: DOUBLE
29196: EQUAL
29197: IFTRUE 29201
29199: GO 29321
29201: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29202: LD_ADDR_VAR 0 1
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 4
29212: PUSH
29213: LD_INT 5
29215: PUSH
29216: LD_INT 6
29218: PUSH
29219: LD_INT 8
29221: PUSH
29222: LD_INT 11
29224: PUSH
29225: LD_INT 12
29227: PUSH
29228: LD_INT 15
29230: PUSH
29231: LD_INT 16
29233: PUSH
29234: LD_INT 20
29236: PUSH
29237: LD_INT 21
29239: PUSH
29240: LD_INT 22
29242: PUSH
29243: LD_INT 23
29245: PUSH
29246: LD_INT 25
29248: PUSH
29249: LD_INT 26
29251: PUSH
29252: LD_INT 30
29254: PUSH
29255: LD_INT 31
29257: PUSH
29258: LD_INT 32
29260: PUSH
29261: LD_INT 36
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 101
29287: PUSH
29288: LD_INT 102
29290: PUSH
29291: LD_INT 105
29293: PUSH
29294: LD_INT 106
29296: PUSH
29297: LD_INT 108
29299: PUSH
29300: LD_INT 109
29302: PUSH
29303: LD_INT 112
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: ST_TO_ADDR
29319: GO 31686
29321: LD_INT 7
29323: DOUBLE
29324: EQUAL
29325: IFTRUE 29329
29327: GO 29429
29329: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29330: LD_ADDR_VAR 0 1
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 4
29340: PUSH
29341: LD_INT 5
29343: PUSH
29344: LD_INT 7
29346: PUSH
29347: LD_INT 11
29349: PUSH
29350: LD_INT 12
29352: PUSH
29353: LD_INT 15
29355: PUSH
29356: LD_INT 16
29358: PUSH
29359: LD_INT 20
29361: PUSH
29362: LD_INT 21
29364: PUSH
29365: LD_INT 22
29367: PUSH
29368: LD_INT 23
29370: PUSH
29371: LD_INT 25
29373: PUSH
29374: LD_INT 26
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 101
29395: PUSH
29396: LD_INT 102
29398: PUSH
29399: LD_INT 103
29401: PUSH
29402: LD_INT 105
29404: PUSH
29405: LD_INT 106
29407: PUSH
29408: LD_INT 108
29410: PUSH
29411: LD_INT 112
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: ST_TO_ADDR
29427: GO 31686
29429: LD_INT 8
29431: DOUBLE
29432: EQUAL
29433: IFTRUE 29437
29435: GO 29565
29437: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29438: LD_ADDR_VAR 0 1
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 4
29448: PUSH
29449: LD_INT 5
29451: PUSH
29452: LD_INT 6
29454: PUSH
29455: LD_INT 7
29457: PUSH
29458: LD_INT 8
29460: PUSH
29461: LD_INT 11
29463: PUSH
29464: LD_INT 12
29466: PUSH
29467: LD_INT 15
29469: PUSH
29470: LD_INT 16
29472: PUSH
29473: LD_INT 20
29475: PUSH
29476: LD_INT 21
29478: PUSH
29479: LD_INT 22
29481: PUSH
29482: LD_INT 23
29484: PUSH
29485: LD_INT 25
29487: PUSH
29488: LD_INT 26
29490: PUSH
29491: LD_INT 30
29493: PUSH
29494: LD_INT 31
29496: PUSH
29497: LD_INT 32
29499: PUSH
29500: LD_INT 36
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 101
29527: PUSH
29528: LD_INT 102
29530: PUSH
29531: LD_INT 103
29533: PUSH
29534: LD_INT 105
29536: PUSH
29537: LD_INT 106
29539: PUSH
29540: LD_INT 108
29542: PUSH
29543: LD_INT 109
29545: PUSH
29546: LD_INT 112
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: ST_TO_ADDR
29563: GO 31686
29565: LD_INT 9
29567: DOUBLE
29568: EQUAL
29569: IFTRUE 29573
29571: GO 29709
29573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29574: LD_ADDR_VAR 0 1
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 4
29584: PUSH
29585: LD_INT 5
29587: PUSH
29588: LD_INT 6
29590: PUSH
29591: LD_INT 7
29593: PUSH
29594: LD_INT 8
29596: PUSH
29597: LD_INT 11
29599: PUSH
29600: LD_INT 12
29602: PUSH
29603: LD_INT 15
29605: PUSH
29606: LD_INT 16
29608: PUSH
29609: LD_INT 20
29611: PUSH
29612: LD_INT 21
29614: PUSH
29615: LD_INT 22
29617: PUSH
29618: LD_INT 23
29620: PUSH
29621: LD_INT 25
29623: PUSH
29624: LD_INT 26
29626: PUSH
29627: LD_INT 28
29629: PUSH
29630: LD_INT 30
29632: PUSH
29633: LD_INT 31
29635: PUSH
29636: LD_INT 32
29638: PUSH
29639: LD_INT 36
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 101
29667: PUSH
29668: LD_INT 102
29670: PUSH
29671: LD_INT 103
29673: PUSH
29674: LD_INT 105
29676: PUSH
29677: LD_INT 106
29679: PUSH
29680: LD_INT 108
29682: PUSH
29683: LD_INT 109
29685: PUSH
29686: LD_INT 112
29688: PUSH
29689: LD_INT 114
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: ST_TO_ADDR
29707: GO 31686
29709: LD_INT 10
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29901
29717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29718: LD_ADDR_VAR 0 1
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 4
29728: PUSH
29729: LD_INT 5
29731: PUSH
29732: LD_INT 6
29734: PUSH
29735: LD_INT 7
29737: PUSH
29738: LD_INT 8
29740: PUSH
29741: LD_INT 9
29743: PUSH
29744: LD_INT 10
29746: PUSH
29747: LD_INT 11
29749: PUSH
29750: LD_INT 12
29752: PUSH
29753: LD_INT 13
29755: PUSH
29756: LD_INT 14
29758: PUSH
29759: LD_INT 15
29761: PUSH
29762: LD_INT 16
29764: PUSH
29765: LD_INT 17
29767: PUSH
29768: LD_INT 18
29770: PUSH
29771: LD_INT 19
29773: PUSH
29774: LD_INT 20
29776: PUSH
29777: LD_INT 21
29779: PUSH
29780: LD_INT 22
29782: PUSH
29783: LD_INT 23
29785: PUSH
29786: LD_INT 24
29788: PUSH
29789: LD_INT 25
29791: PUSH
29792: LD_INT 26
29794: PUSH
29795: LD_INT 28
29797: PUSH
29798: LD_INT 30
29800: PUSH
29801: LD_INT 31
29803: PUSH
29804: LD_INT 32
29806: PUSH
29807: LD_INT 36
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 101
29843: PUSH
29844: LD_INT 102
29846: PUSH
29847: LD_INT 103
29849: PUSH
29850: LD_INT 104
29852: PUSH
29853: LD_INT 105
29855: PUSH
29856: LD_INT 106
29858: PUSH
29859: LD_INT 107
29861: PUSH
29862: LD_INT 108
29864: PUSH
29865: LD_INT 109
29867: PUSH
29868: LD_INT 110
29870: PUSH
29871: LD_INT 111
29873: PUSH
29874: LD_INT 112
29876: PUSH
29877: LD_INT 114
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: ST_TO_ADDR
29899: GO 31686
29901: LD_INT 11
29903: DOUBLE
29904: EQUAL
29905: IFTRUE 29909
29907: GO 30101
29909: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29910: LD_ADDR_VAR 0 1
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: LD_INT 3
29920: PUSH
29921: LD_INT 4
29923: PUSH
29924: LD_INT 5
29926: PUSH
29927: LD_INT 6
29929: PUSH
29930: LD_INT 7
29932: PUSH
29933: LD_INT 8
29935: PUSH
29936: LD_INT 9
29938: PUSH
29939: LD_INT 10
29941: PUSH
29942: LD_INT 11
29944: PUSH
29945: LD_INT 12
29947: PUSH
29948: LD_INT 13
29950: PUSH
29951: LD_INT 14
29953: PUSH
29954: LD_INT 15
29956: PUSH
29957: LD_INT 16
29959: PUSH
29960: LD_INT 17
29962: PUSH
29963: LD_INT 18
29965: PUSH
29966: LD_INT 19
29968: PUSH
29969: LD_INT 20
29971: PUSH
29972: LD_INT 21
29974: PUSH
29975: LD_INT 22
29977: PUSH
29978: LD_INT 23
29980: PUSH
29981: LD_INT 24
29983: PUSH
29984: LD_INT 25
29986: PUSH
29987: LD_INT 26
29989: PUSH
29990: LD_INT 28
29992: PUSH
29993: LD_INT 30
29995: PUSH
29996: LD_INT 31
29998: PUSH
29999: LD_INT 32
30001: PUSH
30002: LD_INT 34
30004: PUSH
30005: LD_INT 36
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 101
30043: PUSH
30044: LD_INT 102
30046: PUSH
30047: LD_INT 103
30049: PUSH
30050: LD_INT 104
30052: PUSH
30053: LD_INT 105
30055: PUSH
30056: LD_INT 106
30058: PUSH
30059: LD_INT 107
30061: PUSH
30062: LD_INT 108
30064: PUSH
30065: LD_INT 109
30067: PUSH
30068: LD_INT 110
30070: PUSH
30071: LD_INT 111
30073: PUSH
30074: LD_INT 112
30076: PUSH
30077: LD_INT 114
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: ST_TO_ADDR
30099: GO 31686
30101: LD_INT 12
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30317
30109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30110: LD_ADDR_VAR 0 1
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: LD_INT 4
30126: PUSH
30127: LD_INT 5
30129: PUSH
30130: LD_INT 6
30132: PUSH
30133: LD_INT 7
30135: PUSH
30136: LD_INT 8
30138: PUSH
30139: LD_INT 9
30141: PUSH
30142: LD_INT 10
30144: PUSH
30145: LD_INT 11
30147: PUSH
30148: LD_INT 12
30150: PUSH
30151: LD_INT 13
30153: PUSH
30154: LD_INT 14
30156: PUSH
30157: LD_INT 15
30159: PUSH
30160: LD_INT 16
30162: PUSH
30163: LD_INT 17
30165: PUSH
30166: LD_INT 18
30168: PUSH
30169: LD_INT 19
30171: PUSH
30172: LD_INT 20
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 22
30180: PUSH
30181: LD_INT 23
30183: PUSH
30184: LD_INT 24
30186: PUSH
30187: LD_INT 25
30189: PUSH
30190: LD_INT 26
30192: PUSH
30193: LD_INT 27
30195: PUSH
30196: LD_INT 28
30198: PUSH
30199: LD_INT 30
30201: PUSH
30202: LD_INT 31
30204: PUSH
30205: LD_INT 32
30207: PUSH
30208: LD_INT 33
30210: PUSH
30211: LD_INT 34
30213: PUSH
30214: LD_INT 36
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 101
30255: PUSH
30256: LD_INT 102
30258: PUSH
30259: LD_INT 103
30261: PUSH
30262: LD_INT 104
30264: PUSH
30265: LD_INT 105
30267: PUSH
30268: LD_INT 106
30270: PUSH
30271: LD_INT 107
30273: PUSH
30274: LD_INT 108
30276: PUSH
30277: LD_INT 109
30279: PUSH
30280: LD_INT 110
30282: PUSH
30283: LD_INT 111
30285: PUSH
30286: LD_INT 112
30288: PUSH
30289: LD_INT 113
30291: PUSH
30292: LD_INT 114
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: ST_TO_ADDR
30315: GO 31686
30317: LD_INT 13
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30521
30325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30326: LD_ADDR_VAR 0 1
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: LD_INT 8
30348: PUSH
30349: LD_INT 9
30351: PUSH
30352: LD_INT 10
30354: PUSH
30355: LD_INT 11
30357: PUSH
30358: LD_INT 12
30360: PUSH
30361: LD_INT 14
30363: PUSH
30364: LD_INT 15
30366: PUSH
30367: LD_INT 16
30369: PUSH
30370: LD_INT 17
30372: PUSH
30373: LD_INT 18
30375: PUSH
30376: LD_INT 19
30378: PUSH
30379: LD_INT 20
30381: PUSH
30382: LD_INT 21
30384: PUSH
30385: LD_INT 22
30387: PUSH
30388: LD_INT 23
30390: PUSH
30391: LD_INT 24
30393: PUSH
30394: LD_INT 25
30396: PUSH
30397: LD_INT 26
30399: PUSH
30400: LD_INT 27
30402: PUSH
30403: LD_INT 28
30405: PUSH
30406: LD_INT 30
30408: PUSH
30409: LD_INT 31
30411: PUSH
30412: LD_INT 32
30414: PUSH
30415: LD_INT 33
30417: PUSH
30418: LD_INT 34
30420: PUSH
30421: LD_INT 36
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 101
30459: PUSH
30460: LD_INT 102
30462: PUSH
30463: LD_INT 103
30465: PUSH
30466: LD_INT 104
30468: PUSH
30469: LD_INT 105
30471: PUSH
30472: LD_INT 106
30474: PUSH
30475: LD_INT 107
30477: PUSH
30478: LD_INT 108
30480: PUSH
30481: LD_INT 109
30483: PUSH
30484: LD_INT 110
30486: PUSH
30487: LD_INT 111
30489: PUSH
30490: LD_INT 112
30492: PUSH
30493: LD_INT 113
30495: PUSH
30496: LD_INT 114
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: ST_TO_ADDR
30519: GO 31686
30521: LD_INT 14
30523: DOUBLE
30524: EQUAL
30525: IFTRUE 30529
30527: GO 30741
30529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: LD_INT 5
30549: PUSH
30550: LD_INT 6
30552: PUSH
30553: LD_INT 7
30555: PUSH
30556: LD_INT 8
30558: PUSH
30559: LD_INT 9
30561: PUSH
30562: LD_INT 10
30564: PUSH
30565: LD_INT 11
30567: PUSH
30568: LD_INT 12
30570: PUSH
30571: LD_INT 13
30573: PUSH
30574: LD_INT 14
30576: PUSH
30577: LD_INT 15
30579: PUSH
30580: LD_INT 16
30582: PUSH
30583: LD_INT 17
30585: PUSH
30586: LD_INT 18
30588: PUSH
30589: LD_INT 19
30591: PUSH
30592: LD_INT 20
30594: PUSH
30595: LD_INT 21
30597: PUSH
30598: LD_INT 22
30600: PUSH
30601: LD_INT 23
30603: PUSH
30604: LD_INT 24
30606: PUSH
30607: LD_INT 25
30609: PUSH
30610: LD_INT 26
30612: PUSH
30613: LD_INT 27
30615: PUSH
30616: LD_INT 28
30618: PUSH
30619: LD_INT 29
30621: PUSH
30622: LD_INT 30
30624: PUSH
30625: LD_INT 31
30627: PUSH
30628: LD_INT 32
30630: PUSH
30631: LD_INT 33
30633: PUSH
30634: LD_INT 34
30636: PUSH
30637: LD_INT 36
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 101
30679: PUSH
30680: LD_INT 102
30682: PUSH
30683: LD_INT 103
30685: PUSH
30686: LD_INT 104
30688: PUSH
30689: LD_INT 105
30691: PUSH
30692: LD_INT 106
30694: PUSH
30695: LD_INT 107
30697: PUSH
30698: LD_INT 108
30700: PUSH
30701: LD_INT 109
30703: PUSH
30704: LD_INT 110
30706: PUSH
30707: LD_INT 111
30709: PUSH
30710: LD_INT 112
30712: PUSH
30713: LD_INT 113
30715: PUSH
30716: LD_INT 114
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: ST_TO_ADDR
30739: GO 31686
30741: LD_INT 15
30743: DOUBLE
30744: EQUAL
30745: IFTRUE 30749
30747: GO 30961
30749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30750: LD_ADDR_VAR 0 1
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 3
30763: PUSH
30764: LD_INT 4
30766: PUSH
30767: LD_INT 5
30769: PUSH
30770: LD_INT 6
30772: PUSH
30773: LD_INT 7
30775: PUSH
30776: LD_INT 8
30778: PUSH
30779: LD_INT 9
30781: PUSH
30782: LD_INT 10
30784: PUSH
30785: LD_INT 11
30787: PUSH
30788: LD_INT 12
30790: PUSH
30791: LD_INT 13
30793: PUSH
30794: LD_INT 14
30796: PUSH
30797: LD_INT 15
30799: PUSH
30800: LD_INT 16
30802: PUSH
30803: LD_INT 17
30805: PUSH
30806: LD_INT 18
30808: PUSH
30809: LD_INT 19
30811: PUSH
30812: LD_INT 20
30814: PUSH
30815: LD_INT 21
30817: PUSH
30818: LD_INT 22
30820: PUSH
30821: LD_INT 23
30823: PUSH
30824: LD_INT 24
30826: PUSH
30827: LD_INT 25
30829: PUSH
30830: LD_INT 26
30832: PUSH
30833: LD_INT 27
30835: PUSH
30836: LD_INT 28
30838: PUSH
30839: LD_INT 29
30841: PUSH
30842: LD_INT 30
30844: PUSH
30845: LD_INT 31
30847: PUSH
30848: LD_INT 32
30850: PUSH
30851: LD_INT 33
30853: PUSH
30854: LD_INT 34
30856: PUSH
30857: LD_INT 36
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 101
30899: PUSH
30900: LD_INT 102
30902: PUSH
30903: LD_INT 103
30905: PUSH
30906: LD_INT 104
30908: PUSH
30909: LD_INT 105
30911: PUSH
30912: LD_INT 106
30914: PUSH
30915: LD_INT 107
30917: PUSH
30918: LD_INT 108
30920: PUSH
30921: LD_INT 109
30923: PUSH
30924: LD_INT 110
30926: PUSH
30927: LD_INT 111
30929: PUSH
30930: LD_INT 112
30932: PUSH
30933: LD_INT 113
30935: PUSH
30936: LD_INT 114
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: ST_TO_ADDR
30959: GO 31686
30961: LD_INT 16
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 31093
30969: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30970: LD_ADDR_VAR 0 1
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: LD_INT 5
30983: PUSH
30984: LD_INT 7
30986: PUSH
30987: LD_INT 11
30989: PUSH
30990: LD_INT 12
30992: PUSH
30993: LD_INT 15
30995: PUSH
30996: LD_INT 16
30998: PUSH
30999: LD_INT 20
31001: PUSH
31002: LD_INT 21
31004: PUSH
31005: LD_INT 22
31007: PUSH
31008: LD_INT 23
31010: PUSH
31011: LD_INT 25
31013: PUSH
31014: LD_INT 26
31016: PUSH
31017: LD_INT 30
31019: PUSH
31020: LD_INT 31
31022: PUSH
31023: LD_INT 32
31025: PUSH
31026: LD_INT 33
31028: PUSH
31029: LD_INT 34
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 101
31055: PUSH
31056: LD_INT 102
31058: PUSH
31059: LD_INT 103
31061: PUSH
31062: LD_INT 106
31064: PUSH
31065: LD_INT 108
31067: PUSH
31068: LD_INT 112
31070: PUSH
31071: LD_INT 113
31073: PUSH
31074: LD_INT 114
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: ST_TO_ADDR
31091: GO 31686
31093: LD_INT 17
31095: DOUBLE
31096: EQUAL
31097: IFTRUE 31101
31099: GO 31313
31101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31102: LD_ADDR_VAR 0 1
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 4
31118: PUSH
31119: LD_INT 5
31121: PUSH
31122: LD_INT 6
31124: PUSH
31125: LD_INT 7
31127: PUSH
31128: LD_INT 8
31130: PUSH
31131: LD_INT 9
31133: PUSH
31134: LD_INT 10
31136: PUSH
31137: LD_INT 11
31139: PUSH
31140: LD_INT 12
31142: PUSH
31143: LD_INT 13
31145: PUSH
31146: LD_INT 14
31148: PUSH
31149: LD_INT 15
31151: PUSH
31152: LD_INT 16
31154: PUSH
31155: LD_INT 17
31157: PUSH
31158: LD_INT 18
31160: PUSH
31161: LD_INT 19
31163: PUSH
31164: LD_INT 20
31166: PUSH
31167: LD_INT 21
31169: PUSH
31170: LD_INT 22
31172: PUSH
31173: LD_INT 23
31175: PUSH
31176: LD_INT 24
31178: PUSH
31179: LD_INT 25
31181: PUSH
31182: LD_INT 26
31184: PUSH
31185: LD_INT 27
31187: PUSH
31188: LD_INT 28
31190: PUSH
31191: LD_INT 29
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: LD_INT 31
31199: PUSH
31200: LD_INT 32
31202: PUSH
31203: LD_INT 33
31205: PUSH
31206: LD_INT 34
31208: PUSH
31209: LD_INT 36
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 101
31251: PUSH
31252: LD_INT 102
31254: PUSH
31255: LD_INT 103
31257: PUSH
31258: LD_INT 104
31260: PUSH
31261: LD_INT 105
31263: PUSH
31264: LD_INT 106
31266: PUSH
31267: LD_INT 107
31269: PUSH
31270: LD_INT 108
31272: PUSH
31273: LD_INT 109
31275: PUSH
31276: LD_INT 110
31278: PUSH
31279: LD_INT 111
31281: PUSH
31282: LD_INT 112
31284: PUSH
31285: LD_INT 113
31287: PUSH
31288: LD_INT 114
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: ST_TO_ADDR
31311: GO 31686
31313: LD_INT 18
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31457
31321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31322: LD_ADDR_VAR 0 1
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 4
31332: PUSH
31333: LD_INT 5
31335: PUSH
31336: LD_INT 7
31338: PUSH
31339: LD_INT 11
31341: PUSH
31342: LD_INT 12
31344: PUSH
31345: LD_INT 15
31347: PUSH
31348: LD_INT 16
31350: PUSH
31351: LD_INT 20
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 22
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 25
31365: PUSH
31366: LD_INT 26
31368: PUSH
31369: LD_INT 30
31371: PUSH
31372: LD_INT 31
31374: PUSH
31375: LD_INT 32
31377: PUSH
31378: LD_INT 33
31380: PUSH
31381: LD_INT 34
31383: PUSH
31384: LD_INT 35
31386: PUSH
31387: LD_INT 36
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 101
31415: PUSH
31416: LD_INT 102
31418: PUSH
31419: LD_INT 103
31421: PUSH
31422: LD_INT 106
31424: PUSH
31425: LD_INT 108
31427: PUSH
31428: LD_INT 112
31430: PUSH
31431: LD_INT 113
31433: PUSH
31434: LD_INT 114
31436: PUSH
31437: LD_INT 115
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: ST_TO_ADDR
31455: GO 31686
31457: LD_INT 19
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31685
31465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31466: LD_ADDR_VAR 0 1
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: LD_INT 4
31482: PUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 6
31488: PUSH
31489: LD_INT 7
31491: PUSH
31492: LD_INT 8
31494: PUSH
31495: LD_INT 9
31497: PUSH
31498: LD_INT 10
31500: PUSH
31501: LD_INT 11
31503: PUSH
31504: LD_INT 12
31506: PUSH
31507: LD_INT 13
31509: PUSH
31510: LD_INT 14
31512: PUSH
31513: LD_INT 15
31515: PUSH
31516: LD_INT 16
31518: PUSH
31519: LD_INT 17
31521: PUSH
31522: LD_INT 18
31524: PUSH
31525: LD_INT 19
31527: PUSH
31528: LD_INT 20
31530: PUSH
31531: LD_INT 21
31533: PUSH
31534: LD_INT 22
31536: PUSH
31537: LD_INT 23
31539: PUSH
31540: LD_INT 24
31542: PUSH
31543: LD_INT 25
31545: PUSH
31546: LD_INT 26
31548: PUSH
31549: LD_INT 27
31551: PUSH
31552: LD_INT 28
31554: PUSH
31555: LD_INT 29
31557: PUSH
31558: LD_INT 30
31560: PUSH
31561: LD_INT 31
31563: PUSH
31564: LD_INT 32
31566: PUSH
31567: LD_INT 33
31569: PUSH
31570: LD_INT 34
31572: PUSH
31573: LD_INT 35
31575: PUSH
31576: LD_INT 36
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 101
31619: PUSH
31620: LD_INT 102
31622: PUSH
31623: LD_INT 103
31625: PUSH
31626: LD_INT 104
31628: PUSH
31629: LD_INT 105
31631: PUSH
31632: LD_INT 106
31634: PUSH
31635: LD_INT 107
31637: PUSH
31638: LD_INT 108
31640: PUSH
31641: LD_INT 109
31643: PUSH
31644: LD_INT 110
31646: PUSH
31647: LD_INT 111
31649: PUSH
31650: LD_INT 112
31652: PUSH
31653: LD_INT 113
31655: PUSH
31656: LD_INT 114
31658: PUSH
31659: LD_INT 115
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: ST_TO_ADDR
31683: GO 31686
31685: POP
// end else
31686: GO 31905
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31688: LD_ADDR_VAR 0 1
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: LD_INT 4
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: LD_INT 6
31710: PUSH
31711: LD_INT 7
31713: PUSH
31714: LD_INT 8
31716: PUSH
31717: LD_INT 9
31719: PUSH
31720: LD_INT 10
31722: PUSH
31723: LD_INT 11
31725: PUSH
31726: LD_INT 12
31728: PUSH
31729: LD_INT 13
31731: PUSH
31732: LD_INT 14
31734: PUSH
31735: LD_INT 15
31737: PUSH
31738: LD_INT 16
31740: PUSH
31741: LD_INT 17
31743: PUSH
31744: LD_INT 18
31746: PUSH
31747: LD_INT 19
31749: PUSH
31750: LD_INT 20
31752: PUSH
31753: LD_INT 21
31755: PUSH
31756: LD_INT 22
31758: PUSH
31759: LD_INT 23
31761: PUSH
31762: LD_INT 24
31764: PUSH
31765: LD_INT 25
31767: PUSH
31768: LD_INT 26
31770: PUSH
31771: LD_INT 27
31773: PUSH
31774: LD_INT 28
31776: PUSH
31777: LD_INT 29
31779: PUSH
31780: LD_INT 30
31782: PUSH
31783: LD_INT 31
31785: PUSH
31786: LD_INT 32
31788: PUSH
31789: LD_INT 33
31791: PUSH
31792: LD_INT 34
31794: PUSH
31795: LD_INT 35
31797: PUSH
31798: LD_INT 36
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 101
31841: PUSH
31842: LD_INT 102
31844: PUSH
31845: LD_INT 103
31847: PUSH
31848: LD_INT 104
31850: PUSH
31851: LD_INT 105
31853: PUSH
31854: LD_INT 106
31856: PUSH
31857: LD_INT 107
31859: PUSH
31860: LD_INT 108
31862: PUSH
31863: LD_INT 109
31865: PUSH
31866: LD_INT 110
31868: PUSH
31869: LD_INT 111
31871: PUSH
31872: LD_INT 112
31874: PUSH
31875: LD_INT 113
31877: PUSH
31878: LD_INT 114
31880: PUSH
31881: LD_INT 115
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// if result then
31905: LD_VAR 0 1
31909: IFFALSE 32198
// begin normal :=  ;
31911: LD_ADDR_VAR 0 3
31915: PUSH
31916: LD_STRING 
31918: ST_TO_ADDR
// hardcore :=  ;
31919: LD_ADDR_VAR 0 4
31923: PUSH
31924: LD_STRING 
31926: ST_TO_ADDR
// for i = 1 to normalCounter do
31927: LD_ADDR_VAR 0 5
31931: PUSH
31932: DOUBLE
31933: LD_INT 1
31935: DEC
31936: ST_TO_ADDR
31937: LD_EXP 64
31941: PUSH
31942: FOR_TO
31943: IFFALSE 32044
// begin tmp := 0 ;
31945: LD_ADDR_VAR 0 2
31949: PUSH
31950: LD_STRING 0
31952: ST_TO_ADDR
// if result [ 1 ] then
31953: LD_VAR 0 1
31957: PUSH
31958: LD_INT 1
31960: ARRAY
31961: IFFALSE 32026
// if result [ 1 ] [ 1 ] = i then
31963: LD_VAR 0 1
31967: PUSH
31968: LD_INT 1
31970: ARRAY
31971: PUSH
31972: LD_INT 1
31974: ARRAY
31975: PUSH
31976: LD_VAR 0 5
31980: EQUAL
31981: IFFALSE 32026
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31983: LD_ADDR_VAR 0 1
31987: PUSH
31988: LD_VAR 0 1
31992: PPUSH
31993: LD_INT 1
31995: PPUSH
31996: LD_VAR 0 1
32000: PUSH
32001: LD_INT 1
32003: ARRAY
32004: PPUSH
32005: LD_INT 1
32007: PPUSH
32008: CALL_OW 3
32012: PPUSH
32013: CALL_OW 1
32017: ST_TO_ADDR
// tmp := 1 ;
32018: LD_ADDR_VAR 0 2
32022: PUSH
32023: LD_STRING 1
32025: ST_TO_ADDR
// end ; normal := normal & tmp ;
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_VAR 0 3
32035: PUSH
32036: LD_VAR 0 2
32040: STR
32041: ST_TO_ADDR
// end ;
32042: GO 31942
32044: POP
32045: POP
// for i = 1 to hardcoreCounter do
32046: LD_ADDR_VAR 0 5
32050: PUSH
32051: DOUBLE
32052: LD_INT 1
32054: DEC
32055: ST_TO_ADDR
32056: LD_EXP 65
32060: PUSH
32061: FOR_TO
32062: IFFALSE 32167
// begin tmp := 0 ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_STRING 0
32071: ST_TO_ADDR
// if result [ 2 ] then
32072: LD_VAR 0 1
32076: PUSH
32077: LD_INT 2
32079: ARRAY
32080: IFFALSE 32149
// if result [ 2 ] [ 1 ] = 100 + i then
32082: LD_VAR 0 1
32086: PUSH
32087: LD_INT 2
32089: ARRAY
32090: PUSH
32091: LD_INT 1
32093: ARRAY
32094: PUSH
32095: LD_INT 100
32097: PUSH
32098: LD_VAR 0 5
32102: PLUS
32103: EQUAL
32104: IFFALSE 32149
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32106: LD_ADDR_VAR 0 1
32110: PUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: LD_INT 2
32118: PPUSH
32119: LD_VAR 0 1
32123: PUSH
32124: LD_INT 2
32126: ARRAY
32127: PPUSH
32128: LD_INT 1
32130: PPUSH
32131: CALL_OW 3
32135: PPUSH
32136: CALL_OW 1
32140: ST_TO_ADDR
// tmp := 1 ;
32141: LD_ADDR_VAR 0 2
32145: PUSH
32146: LD_STRING 1
32148: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32149: LD_ADDR_VAR 0 4
32153: PUSH
32154: LD_VAR 0 4
32158: PUSH
32159: LD_VAR 0 2
32163: STR
32164: ST_TO_ADDR
// end ;
32165: GO 32061
32167: POP
32168: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32169: LD_STRING getStreamItemsFromMission("
32171: PUSH
32172: LD_VAR 0 3
32176: STR
32177: PUSH
32178: LD_STRING ","
32180: STR
32181: PUSH
32182: LD_VAR 0 4
32186: STR
32187: PUSH
32188: LD_STRING ")
32190: STR
32191: PPUSH
32192: CALL_OW 559
// end else
32196: GO 32205
// ToLua ( getStreamItemsFromMission("","") ) ;
32198: LD_STRING getStreamItemsFromMission("","")
32200: PPUSH
32201: CALL_OW 559
// end ;
32205: LD_VAR 0 1
32209: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32210: LD_EXP 63
32214: PUSH
32215: LD_EXP 68
32219: AND
32220: IFFALSE 32344
32222: GO 32224
32224: DISABLE
32225: LD_INT 0
32227: PPUSH
32228: PPUSH
// begin enable ;
32229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32230: LD_ADDR_VAR 0 2
32234: PUSH
32235: LD_INT 22
32237: PUSH
32238: LD_OWVAR 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 34
32252: PUSH
32253: LD_INT 7
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 34
32262: PUSH
32263: LD_INT 45
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 34
32272: PUSH
32273: LD_INT 28
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 34
32282: PUSH
32283: LD_INT 47
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PPUSH
32301: CALL_OW 69
32305: ST_TO_ADDR
// if not tmp then
32306: LD_VAR 0 2
32310: NOT
32311: IFFALSE 32315
// exit ;
32313: GO 32344
// for i in tmp do
32315: LD_ADDR_VAR 0 1
32319: PUSH
32320: LD_VAR 0 2
32324: PUSH
32325: FOR_IN
32326: IFFALSE 32342
// begin SetLives ( i , 0 ) ;
32328: LD_VAR 0 1
32332: PPUSH
32333: LD_INT 0
32335: PPUSH
32336: CALL_OW 234
// end ;
32340: GO 32325
32342: POP
32343: POP
// end ;
32344: PPOPN 2
32346: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32347: LD_EXP 63
32351: PUSH
32352: LD_EXP 69
32356: AND
32357: IFFALSE 32441
32359: GO 32361
32361: DISABLE
32362: LD_INT 0
32364: PPUSH
32365: PPUSH
// begin enable ;
32366: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32367: LD_ADDR_VAR 0 2
32371: PUSH
32372: LD_INT 22
32374: PUSH
32375: LD_OWVAR 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 32
32386: PUSH
32387: LD_INT 3
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PPUSH
32398: CALL_OW 69
32402: ST_TO_ADDR
// if not tmp then
32403: LD_VAR 0 2
32407: NOT
32408: IFFALSE 32412
// exit ;
32410: GO 32441
// for i in tmp do
32412: LD_ADDR_VAR 0 1
32416: PUSH
32417: LD_VAR 0 2
32421: PUSH
32422: FOR_IN
32423: IFFALSE 32439
// begin SetLives ( i , 0 ) ;
32425: LD_VAR 0 1
32429: PPUSH
32430: LD_INT 0
32432: PPUSH
32433: CALL_OW 234
// end ;
32437: GO 32422
32439: POP
32440: POP
// end ;
32441: PPOPN 2
32443: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32444: LD_EXP 63
32448: PUSH
32449: LD_EXP 66
32453: AND
32454: IFFALSE 32547
32456: GO 32458
32458: DISABLE
32459: LD_INT 0
32461: PPUSH
// begin enable ;
32462: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32463: LD_ADDR_VAR 0 1
32467: PUSH
32468: LD_INT 22
32470: PUSH
32471: LD_OWVAR 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 25
32485: PUSH
32486: LD_INT 5
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 25
32495: PUSH
32496: LD_INT 9
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 25
32505: PUSH
32506: LD_INT 8
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PPUSH
32523: CALL_OW 69
32527: PUSH
32528: FOR_IN
32529: IFFALSE 32545
// begin SetClass ( i , 1 ) ;
32531: LD_VAR 0 1
32535: PPUSH
32536: LD_INT 1
32538: PPUSH
32539: CALL_OW 336
// end ;
32543: GO 32528
32545: POP
32546: POP
// end ;
32547: PPOPN 1
32549: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32550: LD_EXP 63
32554: PUSH
32555: LD_EXP 67
32559: AND
32560: PUSH
32561: LD_OWVAR 65
32565: PUSH
32566: LD_INT 7
32568: LESS
32569: AND
32570: IFFALSE 32584
32572: GO 32574
32574: DISABLE
// begin enable ;
32575: ENABLE
// game_speed := 7 ;
32576: LD_ADDR_OWVAR 65
32580: PUSH
32581: LD_INT 7
32583: ST_TO_ADDR
// end ;
32584: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32585: LD_EXP 63
32589: PUSH
32590: LD_EXP 70
32594: AND
32595: IFFALSE 32797
32597: GO 32599
32599: DISABLE
32600: LD_INT 0
32602: PPUSH
32603: PPUSH
32604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32605: LD_ADDR_VAR 0 3
32609: PUSH
32610: LD_INT 81
32612: PUSH
32613: LD_OWVAR 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 21
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PPUSH
32636: CALL_OW 69
32640: ST_TO_ADDR
// if not tmp then
32641: LD_VAR 0 3
32645: NOT
32646: IFFALSE 32650
// exit ;
32648: GO 32797
// if tmp > 5 then
32650: LD_VAR 0 3
32654: PUSH
32655: LD_INT 5
32657: GREATER
32658: IFFALSE 32670
// k := 5 else
32660: LD_ADDR_VAR 0 2
32664: PUSH
32665: LD_INT 5
32667: ST_TO_ADDR
32668: GO 32680
// k := tmp ;
32670: LD_ADDR_VAR 0 2
32674: PUSH
32675: LD_VAR 0 3
32679: ST_TO_ADDR
// for i := 1 to k do
32680: LD_ADDR_VAR 0 1
32684: PUSH
32685: DOUBLE
32686: LD_INT 1
32688: DEC
32689: ST_TO_ADDR
32690: LD_VAR 0 2
32694: PUSH
32695: FOR_TO
32696: IFFALSE 32795
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32698: LD_VAR 0 3
32702: PUSH
32703: LD_VAR 0 1
32707: ARRAY
32708: PPUSH
32709: LD_VAR 0 1
32713: PUSH
32714: LD_INT 4
32716: MOD
32717: PUSH
32718: LD_INT 1
32720: PLUS
32721: PPUSH
32722: CALL_OW 259
32726: PUSH
32727: LD_INT 10
32729: LESS
32730: IFFALSE 32793
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32732: LD_VAR 0 3
32736: PUSH
32737: LD_VAR 0 1
32741: ARRAY
32742: PPUSH
32743: LD_VAR 0 1
32747: PUSH
32748: LD_INT 4
32750: MOD
32751: PUSH
32752: LD_INT 1
32754: PLUS
32755: PPUSH
32756: LD_VAR 0 3
32760: PUSH
32761: LD_VAR 0 1
32765: ARRAY
32766: PPUSH
32767: LD_VAR 0 1
32771: PUSH
32772: LD_INT 4
32774: MOD
32775: PUSH
32776: LD_INT 1
32778: PLUS
32779: PPUSH
32780: CALL_OW 259
32784: PUSH
32785: LD_INT 1
32787: PLUS
32788: PPUSH
32789: CALL_OW 237
32793: GO 32695
32795: POP
32796: POP
// end ;
32797: PPOPN 3
32799: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32800: LD_EXP 63
32804: PUSH
32805: LD_EXP 71
32809: AND
32810: IFFALSE 32830
32812: GO 32814
32814: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32815: LD_INT 4
32817: PPUSH
32818: LD_OWVAR 2
32822: PPUSH
32823: LD_INT 0
32825: PPUSH
32826: CALL_OW 324
32830: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32831: LD_EXP 63
32835: PUSH
32836: LD_EXP 100
32840: AND
32841: IFFALSE 32861
32843: GO 32845
32845: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32846: LD_INT 19
32848: PPUSH
32849: LD_OWVAR 2
32853: PPUSH
32854: LD_INT 0
32856: PPUSH
32857: CALL_OW 324
32861: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32862: LD_EXP 63
32866: PUSH
32867: LD_EXP 72
32871: AND
32872: IFFALSE 32974
32874: GO 32876
32876: DISABLE
32877: LD_INT 0
32879: PPUSH
32880: PPUSH
// begin enable ;
32881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32882: LD_ADDR_VAR 0 2
32886: PUSH
32887: LD_INT 22
32889: PUSH
32890: LD_OWVAR 2
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 34
32904: PUSH
32905: LD_INT 11
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 34
32914: PUSH
32915: LD_INT 30
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PPUSH
32931: CALL_OW 69
32935: ST_TO_ADDR
// if not tmp then
32936: LD_VAR 0 2
32940: NOT
32941: IFFALSE 32945
// exit ;
32943: GO 32974
// for i in tmp do
32945: LD_ADDR_VAR 0 1
32949: PUSH
32950: LD_VAR 0 2
32954: PUSH
32955: FOR_IN
32956: IFFALSE 32972
// begin SetLives ( i , 0 ) ;
32958: LD_VAR 0 1
32962: PPUSH
32963: LD_INT 0
32965: PPUSH
32966: CALL_OW 234
// end ;
32970: GO 32955
32972: POP
32973: POP
// end ;
32974: PPOPN 2
32976: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32977: LD_EXP 63
32981: PUSH
32982: LD_EXP 73
32986: AND
32987: IFFALSE 33007
32989: GO 32991
32991: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32992: LD_INT 32
32994: PPUSH
32995: LD_OWVAR 2
32999: PPUSH
33000: LD_INT 0
33002: PPUSH
33003: CALL_OW 324
33007: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33008: LD_EXP 63
33012: PUSH
33013: LD_EXP 74
33017: AND
33018: IFFALSE 33199
33020: GO 33022
33022: DISABLE
33023: LD_INT 0
33025: PPUSH
33026: PPUSH
33027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33028: LD_ADDR_VAR 0 2
33032: PUSH
33033: LD_INT 22
33035: PUSH
33036: LD_OWVAR 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 33
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 69
33063: ST_TO_ADDR
// if not tmp then
33064: LD_VAR 0 2
33068: NOT
33069: IFFALSE 33073
// exit ;
33071: GO 33199
// side := 0 ;
33073: LD_ADDR_VAR 0 3
33077: PUSH
33078: LD_INT 0
33080: ST_TO_ADDR
// for i := 1 to 8 do
33081: LD_ADDR_VAR 0 1
33085: PUSH
33086: DOUBLE
33087: LD_INT 1
33089: DEC
33090: ST_TO_ADDR
33091: LD_INT 8
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33143
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33097: LD_OWVAR 2
33101: PUSH
33102: LD_VAR 0 1
33106: NONEQUAL
33107: PUSH
33108: LD_OWVAR 2
33112: PPUSH
33113: LD_VAR 0 1
33117: PPUSH
33118: CALL_OW 81
33122: PUSH
33123: LD_INT 2
33125: EQUAL
33126: AND
33127: IFFALSE 33141
// begin side := i ;
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_VAR 0 1
33138: ST_TO_ADDR
// break ;
33139: GO 33143
// end ;
33141: GO 33094
33143: POP
33144: POP
// if not side then
33145: LD_VAR 0 3
33149: NOT
33150: IFFALSE 33154
// exit ;
33152: GO 33199
// for i := 1 to tmp do
33154: LD_ADDR_VAR 0 1
33158: PUSH
33159: DOUBLE
33160: LD_INT 1
33162: DEC
33163: ST_TO_ADDR
33164: LD_VAR 0 2
33168: PUSH
33169: FOR_TO
33170: IFFALSE 33197
// if Prob ( 60 ) then
33172: LD_INT 60
33174: PPUSH
33175: CALL_OW 13
33179: IFFALSE 33195
// SetSide ( i , side ) ;
33181: LD_VAR 0 1
33185: PPUSH
33186: LD_VAR 0 3
33190: PPUSH
33191: CALL_OW 235
33195: GO 33169
33197: POP
33198: POP
// end ;
33199: PPOPN 3
33201: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33202: LD_EXP 63
33206: PUSH
33207: LD_EXP 76
33211: AND
33212: IFFALSE 33331
33214: GO 33216
33216: DISABLE
33217: LD_INT 0
33219: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33220: LD_ADDR_VAR 0 1
33224: PUSH
33225: LD_INT 22
33227: PUSH
33228: LD_OWVAR 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 21
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: LD_INT 23
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: PPUSH
33269: CALL_OW 69
33273: PUSH
33274: FOR_IN
33275: IFFALSE 33329
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 257
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: LD_INT 3
33295: PUSH
33296: LD_INT 4
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: IN
33305: IFFALSE 33327
// SetClass ( un , rand ( 1 , 4 ) ) ;
33307: LD_VAR 0 1
33311: PPUSH
33312: LD_INT 1
33314: PPUSH
33315: LD_INT 4
33317: PPUSH
33318: CALL_OW 12
33322: PPUSH
33323: CALL_OW 336
33327: GO 33274
33329: POP
33330: POP
// end ;
33331: PPOPN 1
33333: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33334: LD_EXP 63
33338: PUSH
33339: LD_EXP 75
33343: AND
33344: IFFALSE 33423
33346: GO 33348
33348: DISABLE
33349: LD_INT 0
33351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33352: LD_ADDR_VAR 0 1
33356: PUSH
33357: LD_INT 22
33359: PUSH
33360: LD_OWVAR 2
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 21
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PPUSH
33383: CALL_OW 69
33387: ST_TO_ADDR
// if not tmp then
33388: LD_VAR 0 1
33392: NOT
33393: IFFALSE 33397
// exit ;
33395: GO 33423
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33397: LD_VAR 0 1
33401: PUSH
33402: LD_INT 1
33404: PPUSH
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 12
33414: ARRAY
33415: PPUSH
33416: LD_INT 100
33418: PPUSH
33419: CALL_OW 234
// end ;
33423: PPOPN 1
33425: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33426: LD_EXP 63
33430: PUSH
33431: LD_EXP 77
33435: AND
33436: IFFALSE 33534
33438: GO 33440
33440: DISABLE
33441: LD_INT 0
33443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33444: LD_ADDR_VAR 0 1
33448: PUSH
33449: LD_INT 22
33451: PUSH
33452: LD_OWVAR 2
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 21
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 69
33479: ST_TO_ADDR
// if not tmp then
33480: LD_VAR 0 1
33484: NOT
33485: IFFALSE 33489
// exit ;
33487: GO 33534
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33489: LD_VAR 0 1
33493: PUSH
33494: LD_INT 1
33496: PPUSH
33497: LD_VAR 0 1
33501: PPUSH
33502: CALL_OW 12
33506: ARRAY
33507: PPUSH
33508: LD_INT 1
33510: PPUSH
33511: LD_INT 4
33513: PPUSH
33514: CALL_OW 12
33518: PPUSH
33519: LD_INT 3000
33521: PPUSH
33522: LD_INT 9000
33524: PPUSH
33525: CALL_OW 12
33529: PPUSH
33530: CALL_OW 492
// end ;
33534: PPOPN 1
33536: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33537: LD_EXP 63
33541: PUSH
33542: LD_EXP 78
33546: AND
33547: IFFALSE 33567
33549: GO 33551
33551: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33552: LD_INT 1
33554: PPUSH
33555: LD_OWVAR 2
33559: PPUSH
33560: LD_INT 0
33562: PPUSH
33563: CALL_OW 324
33567: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33568: LD_EXP 63
33572: PUSH
33573: LD_EXP 79
33577: AND
33578: IFFALSE 33661
33580: GO 33582
33582: DISABLE
33583: LD_INT 0
33585: PPUSH
33586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33587: LD_ADDR_VAR 0 2
33591: PUSH
33592: LD_INT 22
33594: PUSH
33595: LD_OWVAR 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 21
33606: PUSH
33607: LD_INT 3
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PPUSH
33618: CALL_OW 69
33622: ST_TO_ADDR
// if not tmp then
33623: LD_VAR 0 2
33627: NOT
33628: IFFALSE 33632
// exit ;
33630: GO 33661
// for i in tmp do
33632: LD_ADDR_VAR 0 1
33636: PUSH
33637: LD_VAR 0 2
33641: PUSH
33642: FOR_IN
33643: IFFALSE 33659
// SetBLevel ( i , 10 ) ;
33645: LD_VAR 0 1
33649: PPUSH
33650: LD_INT 10
33652: PPUSH
33653: CALL_OW 241
33657: GO 33642
33659: POP
33660: POP
// end ;
33661: PPOPN 2
33663: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33664: LD_EXP 63
33668: PUSH
33669: LD_EXP 80
33673: AND
33674: IFFALSE 33785
33676: GO 33678
33678: DISABLE
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
33683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_INT 22
33691: PUSH
33692: LD_OWVAR 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 25
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PPUSH
33715: CALL_OW 69
33719: ST_TO_ADDR
// if not tmp then
33720: LD_VAR 0 3
33724: NOT
33725: IFFALSE 33729
// exit ;
33727: GO 33785
// un := tmp [ rand ( 1 , tmp ) ] ;
33729: LD_ADDR_VAR 0 2
33733: PUSH
33734: LD_VAR 0 3
33738: PUSH
33739: LD_INT 1
33741: PPUSH
33742: LD_VAR 0 3
33746: PPUSH
33747: CALL_OW 12
33751: ARRAY
33752: ST_TO_ADDR
// if Crawls ( un ) then
33753: LD_VAR 0 2
33757: PPUSH
33758: CALL_OW 318
33762: IFFALSE 33773
// ComWalk ( un ) ;
33764: LD_VAR 0 2
33768: PPUSH
33769: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33773: LD_VAR 0 2
33777: PPUSH
33778: LD_INT 5
33780: PPUSH
33781: CALL_OW 336
// end ;
33785: PPOPN 3
33787: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33788: LD_EXP 63
33792: PUSH
33793: LD_EXP 81
33797: AND
33798: PUSH
33799: LD_OWVAR 67
33803: PUSH
33804: LD_INT 3
33806: LESS
33807: AND
33808: IFFALSE 33827
33810: GO 33812
33812: DISABLE
// Difficulty := Difficulty + 1 ;
33813: LD_ADDR_OWVAR 67
33817: PUSH
33818: LD_OWVAR 67
33822: PUSH
33823: LD_INT 1
33825: PLUS
33826: ST_TO_ADDR
33827: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33828: LD_EXP 63
33832: PUSH
33833: LD_EXP 82
33837: AND
33838: IFFALSE 33941
33840: GO 33842
33842: DISABLE
33843: LD_INT 0
33845: PPUSH
// begin for i := 1 to 5 do
33846: LD_ADDR_VAR 0 1
33850: PUSH
33851: DOUBLE
33852: LD_INT 1
33854: DEC
33855: ST_TO_ADDR
33856: LD_INT 5
33858: PUSH
33859: FOR_TO
33860: IFFALSE 33939
// begin uc_nation := nation_nature ;
33862: LD_ADDR_OWVAR 21
33866: PUSH
33867: LD_INT 0
33869: ST_TO_ADDR
// uc_side := 0 ;
33870: LD_ADDR_OWVAR 20
33874: PUSH
33875: LD_INT 0
33877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33878: LD_ADDR_OWVAR 29
33882: PUSH
33883: LD_INT 12
33885: PUSH
33886: LD_INT 12
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: ST_TO_ADDR
// hc_agressivity := 20 ;
33893: LD_ADDR_OWVAR 35
33897: PUSH
33898: LD_INT 20
33900: ST_TO_ADDR
// hc_class := class_tiger ;
33901: LD_ADDR_OWVAR 28
33905: PUSH
33906: LD_INT 14
33908: ST_TO_ADDR
// hc_gallery :=  ;
33909: LD_ADDR_OWVAR 33
33913: PUSH
33914: LD_STRING 
33916: ST_TO_ADDR
// hc_name :=  ;
33917: LD_ADDR_OWVAR 26
33921: PUSH
33922: LD_STRING 
33924: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33925: CALL_OW 44
33929: PPUSH
33930: LD_INT 0
33932: PPUSH
33933: CALL_OW 51
// end ;
33937: GO 33859
33939: POP
33940: POP
// end ;
33941: PPOPN 1
33943: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33944: LD_EXP 63
33948: PUSH
33949: LD_EXP 83
33953: AND
33954: IFFALSE 33963
33956: GO 33958
33958: DISABLE
// StreamSibBomb ;
33959: CALL 33964 0 0
33963: END
// export function StreamSibBomb ; var i , x , y ; begin
33964: LD_INT 0
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
// result := false ;
33970: LD_ADDR_VAR 0 1
33974: PUSH
33975: LD_INT 0
33977: ST_TO_ADDR
// for i := 1 to 16 do
33978: LD_ADDR_VAR 0 2
33982: PUSH
33983: DOUBLE
33984: LD_INT 1
33986: DEC
33987: ST_TO_ADDR
33988: LD_INT 16
33990: PUSH
33991: FOR_TO
33992: IFFALSE 34191
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_INT 10
34001: PUSH
34002: LD_INT 20
34004: PUSH
34005: LD_INT 30
34007: PUSH
34008: LD_INT 40
34010: PUSH
34011: LD_INT 50
34013: PUSH
34014: LD_INT 60
34016: PUSH
34017: LD_INT 70
34019: PUSH
34020: LD_INT 80
34022: PUSH
34023: LD_INT 90
34025: PUSH
34026: LD_INT 100
34028: PUSH
34029: LD_INT 110
34031: PUSH
34032: LD_INT 120
34034: PUSH
34035: LD_INT 130
34037: PUSH
34038: LD_INT 140
34040: PUSH
34041: LD_INT 150
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PPUSH
34064: LD_INT 15
34066: PPUSH
34067: CALL_OW 12
34071: ARRAY
34072: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34073: LD_ADDR_VAR 0 4
34077: PUSH
34078: LD_INT 10
34080: PUSH
34081: LD_INT 20
34083: PUSH
34084: LD_INT 30
34086: PUSH
34087: LD_INT 40
34089: PUSH
34090: LD_INT 50
34092: PUSH
34093: LD_INT 60
34095: PUSH
34096: LD_INT 70
34098: PUSH
34099: LD_INT 80
34101: PUSH
34102: LD_INT 90
34104: PUSH
34105: LD_INT 100
34107: PUSH
34108: LD_INT 110
34110: PUSH
34111: LD_INT 120
34113: PUSH
34114: LD_INT 130
34116: PUSH
34117: LD_INT 140
34119: PUSH
34120: LD_INT 150
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PPUSH
34143: LD_INT 15
34145: PPUSH
34146: CALL_OW 12
34150: ARRAY
34151: ST_TO_ADDR
// if ValidHex ( x , y ) then
34152: LD_VAR 0 3
34156: PPUSH
34157: LD_VAR 0 4
34161: PPUSH
34162: CALL_OW 488
34166: IFFALSE 34189
// begin result := [ x , y ] ;
34168: LD_ADDR_VAR 0 1
34172: PUSH
34173: LD_VAR 0 3
34177: PUSH
34178: LD_VAR 0 4
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: ST_TO_ADDR
// break ;
34187: GO 34191
// end ; end ;
34189: GO 33991
34191: POP
34192: POP
// if result then
34193: LD_VAR 0 1
34197: IFFALSE 34257
// begin ToLua ( playSibBomb() ) ;
34199: LD_STRING playSibBomb()
34201: PPUSH
34202: CALL_OW 559
// wait ( 0 0$14 ) ;
34206: LD_INT 490
34208: PPUSH
34209: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34213: LD_VAR 0 1
34217: PUSH
34218: LD_INT 1
34220: ARRAY
34221: PPUSH
34222: LD_VAR 0 1
34226: PUSH
34227: LD_INT 2
34229: ARRAY
34230: PPUSH
34231: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34235: LD_VAR 0 1
34239: PUSH
34240: LD_INT 1
34242: ARRAY
34243: PPUSH
34244: LD_VAR 0 1
34248: PUSH
34249: LD_INT 2
34251: ARRAY
34252: PPUSH
34253: CALL_OW 429
// end ; end ;
34257: LD_VAR 0 1
34261: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34262: LD_EXP 63
34266: PUSH
34267: LD_EXP 85
34271: AND
34272: IFFALSE 34284
34274: GO 34276
34276: DISABLE
// YouLost (  ) ;
34277: LD_STRING 
34279: PPUSH
34280: CALL_OW 104
34284: END
// every 0 0$1 trigger StreamModeActive and sFog do
34285: LD_EXP 63
34289: PUSH
34290: LD_EXP 84
34294: AND
34295: IFFALSE 34309
34297: GO 34299
34299: DISABLE
// FogOff ( your_side ) ;
34300: LD_OWVAR 2
34304: PPUSH
34305: CALL_OW 344
34309: END
// every 0 0$1 trigger StreamModeActive and sSun do
34310: LD_EXP 63
34314: PUSH
34315: LD_EXP 86
34319: AND
34320: IFFALSE 34348
34322: GO 34324
34324: DISABLE
// begin solar_recharge_percent := 0 ;
34325: LD_ADDR_OWVAR 79
34329: PUSH
34330: LD_INT 0
34332: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34333: LD_INT 10500
34335: PPUSH
34336: CALL_OW 67
// solar_recharge_percent := 100 ;
34340: LD_ADDR_OWVAR 79
34344: PUSH
34345: LD_INT 100
34347: ST_TO_ADDR
// end ;
34348: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34349: LD_EXP 63
34353: PUSH
34354: LD_EXP 87
34358: AND
34359: IFFALSE 34598
34361: GO 34363
34363: DISABLE
34364: LD_INT 0
34366: PPUSH
34367: PPUSH
34368: PPUSH
// begin tmp := [ ] ;
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: EMPTY
34375: ST_TO_ADDR
// for i := 1 to 6 do
34376: LD_ADDR_VAR 0 1
34380: PUSH
34381: DOUBLE
34382: LD_INT 1
34384: DEC
34385: ST_TO_ADDR
34386: LD_INT 6
34388: PUSH
34389: FOR_TO
34390: IFFALSE 34495
// begin uc_nation := nation_nature ;
34392: LD_ADDR_OWVAR 21
34396: PUSH
34397: LD_INT 0
34399: ST_TO_ADDR
// uc_side := 0 ;
34400: LD_ADDR_OWVAR 20
34404: PUSH
34405: LD_INT 0
34407: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34408: LD_ADDR_OWVAR 29
34412: PUSH
34413: LD_INT 12
34415: PUSH
34416: LD_INT 12
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// hc_agressivity := 20 ;
34423: LD_ADDR_OWVAR 35
34427: PUSH
34428: LD_INT 20
34430: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34431: LD_ADDR_OWVAR 28
34435: PUSH
34436: LD_INT 17
34438: ST_TO_ADDR
// hc_gallery :=  ;
34439: LD_ADDR_OWVAR 33
34443: PUSH
34444: LD_STRING 
34446: ST_TO_ADDR
// hc_name :=  ;
34447: LD_ADDR_OWVAR 26
34451: PUSH
34452: LD_STRING 
34454: ST_TO_ADDR
// un := CreateHuman ;
34455: LD_ADDR_VAR 0 2
34459: PUSH
34460: CALL_OW 44
34464: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34465: LD_VAR 0 2
34469: PPUSH
34470: LD_INT 1
34472: PPUSH
34473: CALL_OW 51
// tmp := tmp ^ un ;
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_VAR 0 3
34486: PUSH
34487: LD_VAR 0 2
34491: ADD
34492: ST_TO_ADDR
// end ;
34493: GO 34389
34495: POP
34496: POP
// repeat wait ( 0 0$1 ) ;
34497: LD_INT 35
34499: PPUSH
34500: CALL_OW 67
// for un in tmp do
34504: LD_ADDR_VAR 0 2
34508: PUSH
34509: LD_VAR 0 3
34513: PUSH
34514: FOR_IN
34515: IFFALSE 34589
// begin if IsDead ( un ) then
34517: LD_VAR 0 2
34521: PPUSH
34522: CALL_OW 301
34526: IFFALSE 34546
// begin tmp := tmp diff un ;
34528: LD_ADDR_VAR 0 3
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 2
34542: DIFF
34543: ST_TO_ADDR
// continue ;
34544: GO 34514
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34546: LD_VAR 0 2
34550: PPUSH
34551: LD_INT 3
34553: PUSH
34554: LD_INT 22
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PPUSH
34568: CALL_OW 69
34572: PPUSH
34573: LD_VAR 0 2
34577: PPUSH
34578: CALL_OW 74
34582: PPUSH
34583: CALL_OW 115
// end ;
34587: GO 34514
34589: POP
34590: POP
// until not tmp ;
34591: LD_VAR 0 3
34595: NOT
34596: IFFALSE 34497
// end ;
34598: PPOPN 3
34600: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34601: LD_EXP 63
34605: PUSH
34606: LD_EXP 88
34610: AND
34611: IFFALSE 34665
34613: GO 34615
34615: DISABLE
// begin ToLua ( displayTroll(); ) ;
34616: LD_STRING displayTroll();
34618: PPUSH
34619: CALL_OW 559
// wait ( 3 3$00 ) ;
34623: LD_INT 6300
34625: PPUSH
34626: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34630: LD_STRING hideTroll();
34632: PPUSH
34633: CALL_OW 559
// wait ( 1 1$00 ) ;
34637: LD_INT 2100
34639: PPUSH
34640: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34644: LD_STRING displayTroll();
34646: PPUSH
34647: CALL_OW 559
// wait ( 1 1$00 ) ;
34651: LD_INT 2100
34653: PPUSH
34654: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34658: LD_STRING hideTroll();
34660: PPUSH
34661: CALL_OW 559
// end ;
34665: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34666: LD_EXP 63
34670: PUSH
34671: LD_EXP 89
34675: AND
34676: IFFALSE 34739
34678: GO 34680
34680: DISABLE
34681: LD_INT 0
34683: PPUSH
// begin p := 0 ;
34684: LD_ADDR_VAR 0 1
34688: PUSH
34689: LD_INT 0
34691: ST_TO_ADDR
// repeat game_speed := 1 ;
34692: LD_ADDR_OWVAR 65
34696: PUSH
34697: LD_INT 1
34699: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34700: LD_INT 35
34702: PPUSH
34703: CALL_OW 67
// p := p + 1 ;
34707: LD_ADDR_VAR 0 1
34711: PUSH
34712: LD_VAR 0 1
34716: PUSH
34717: LD_INT 1
34719: PLUS
34720: ST_TO_ADDR
// until p >= 60 ;
34721: LD_VAR 0 1
34725: PUSH
34726: LD_INT 60
34728: GREATEREQUAL
34729: IFFALSE 34692
// game_speed := 4 ;
34731: LD_ADDR_OWVAR 65
34735: PUSH
34736: LD_INT 4
34738: ST_TO_ADDR
// end ;
34739: PPOPN 1
34741: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34742: LD_EXP 63
34746: PUSH
34747: LD_EXP 90
34751: AND
34752: IFFALSE 34898
34754: GO 34756
34756: DISABLE
34757: LD_INT 0
34759: PPUSH
34760: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34761: LD_ADDR_VAR 0 1
34765: PUSH
34766: LD_INT 22
34768: PUSH
34769: LD_OWVAR 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: LD_INT 30
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 30
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PPUSH
34810: CALL_OW 69
34814: ST_TO_ADDR
// if not depot then
34815: LD_VAR 0 1
34819: NOT
34820: IFFALSE 34824
// exit ;
34822: GO 34898
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34824: LD_ADDR_VAR 0 2
34828: PUSH
34829: LD_VAR 0 1
34833: PUSH
34834: LD_INT 1
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 12
34846: ARRAY
34847: PPUSH
34848: CALL_OW 274
34852: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34853: LD_VAR 0 2
34857: PPUSH
34858: LD_INT 1
34860: PPUSH
34861: LD_INT 0
34863: PPUSH
34864: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34868: LD_VAR 0 2
34872: PPUSH
34873: LD_INT 2
34875: PPUSH
34876: LD_INT 0
34878: PPUSH
34879: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34883: LD_VAR 0 2
34887: PPUSH
34888: LD_INT 3
34890: PPUSH
34891: LD_INT 0
34893: PPUSH
34894: CALL_OW 277
// end ;
34898: PPOPN 2
34900: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34901: LD_EXP 63
34905: PUSH
34906: LD_EXP 91
34910: AND
34911: IFFALSE 35008
34913: GO 34915
34915: DISABLE
34916: LD_INT 0
34918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34919: LD_ADDR_VAR 0 1
34923: PUSH
34924: LD_INT 22
34926: PUSH
34927: LD_OWVAR 2
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 21
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: LD_INT 23
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: PPUSH
34968: CALL_OW 69
34972: ST_TO_ADDR
// if not tmp then
34973: LD_VAR 0 1
34977: NOT
34978: IFFALSE 34982
// exit ;
34980: GO 35008
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34982: LD_VAR 0 1
34986: PUSH
34987: LD_INT 1
34989: PPUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 12
34999: ARRAY
35000: PPUSH
35001: LD_INT 200
35003: PPUSH
35004: CALL_OW 234
// end ;
35008: PPOPN 1
35010: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35011: LD_EXP 63
35015: PUSH
35016: LD_EXP 92
35020: AND
35021: IFFALSE 35100
35023: GO 35025
35025: DISABLE
35026: LD_INT 0
35028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35029: LD_ADDR_VAR 0 1
35033: PUSH
35034: LD_INT 22
35036: PUSH
35037: LD_OWVAR 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 21
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PPUSH
35060: CALL_OW 69
35064: ST_TO_ADDR
// if not tmp then
35065: LD_VAR 0 1
35069: NOT
35070: IFFALSE 35074
// exit ;
35072: GO 35100
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35074: LD_VAR 0 1
35078: PUSH
35079: LD_INT 1
35081: PPUSH
35082: LD_VAR 0 1
35086: PPUSH
35087: CALL_OW 12
35091: ARRAY
35092: PPUSH
35093: LD_INT 60
35095: PPUSH
35096: CALL_OW 234
// end ;
35100: PPOPN 1
35102: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35103: LD_EXP 63
35107: PUSH
35108: LD_EXP 93
35112: AND
35113: IFFALSE 35212
35115: GO 35117
35117: DISABLE
35118: LD_INT 0
35120: PPUSH
35121: PPUSH
// begin enable ;
35122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35123: LD_ADDR_VAR 0 1
35127: PUSH
35128: LD_INT 22
35130: PUSH
35131: LD_OWVAR 2
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 61
35142: PUSH
35143: EMPTY
35144: LIST
35145: PUSH
35146: LD_INT 33
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: PPUSH
35161: CALL_OW 69
35165: ST_TO_ADDR
// if not tmp then
35166: LD_VAR 0 1
35170: NOT
35171: IFFALSE 35175
// exit ;
35173: GO 35212
// for i in tmp do
35175: LD_ADDR_VAR 0 2
35179: PUSH
35180: LD_VAR 0 1
35184: PUSH
35185: FOR_IN
35186: IFFALSE 35210
// if IsControledBy ( i ) then
35188: LD_VAR 0 2
35192: PPUSH
35193: CALL_OW 312
35197: IFFALSE 35208
// ComUnlink ( i ) ;
35199: LD_VAR 0 2
35203: PPUSH
35204: CALL_OW 136
35208: GO 35185
35210: POP
35211: POP
// end ;
35212: PPOPN 2
35214: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35215: LD_EXP 63
35219: PUSH
35220: LD_EXP 94
35224: AND
35225: IFFALSE 35365
35227: GO 35229
35229: DISABLE
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
// begin ToLua ( displayPowell(); ) ;
35234: LD_STRING displayPowell();
35236: PPUSH
35237: CALL_OW 559
// uc_side := 0 ;
35241: LD_ADDR_OWVAR 20
35245: PUSH
35246: LD_INT 0
35248: ST_TO_ADDR
// uc_nation := 2 ;
35249: LD_ADDR_OWVAR 21
35253: PUSH
35254: LD_INT 2
35256: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35257: LD_ADDR_OWVAR 37
35261: PUSH
35262: LD_INT 14
35264: ST_TO_ADDR
// vc_engine := engine_siberite ;
35265: LD_ADDR_OWVAR 39
35269: PUSH
35270: LD_INT 3
35272: ST_TO_ADDR
// vc_control := control_apeman ;
35273: LD_ADDR_OWVAR 38
35277: PUSH
35278: LD_INT 5
35280: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35281: LD_ADDR_OWVAR 40
35285: PUSH
35286: LD_INT 29
35288: ST_TO_ADDR
// un := CreateVehicle ;
35289: LD_ADDR_VAR 0 2
35293: PUSH
35294: CALL_OW 45
35298: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35299: LD_VAR 0 2
35303: PPUSH
35304: LD_INT 1
35306: PPUSH
35307: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35311: LD_INT 35
35313: PPUSH
35314: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_INT 22
35325: PUSH
35326: LD_OWVAR 2
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PPUSH
35335: CALL_OW 69
35339: PPUSH
35340: LD_VAR 0 2
35344: PPUSH
35345: CALL_OW 74
35349: PPUSH
35350: CALL_OW 115
// until IsDead ( un ) ;
35354: LD_VAR 0 2
35358: PPUSH
35359: CALL_OW 301
35363: IFFALSE 35311
// end ;
35365: PPOPN 2
35367: END
// every 0 0$1 trigger StreamModeActive and sStu do
35368: LD_EXP 63
35372: PUSH
35373: LD_EXP 102
35377: AND
35378: IFFALSE 35394
35380: GO 35382
35382: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35383: LD_STRING displayStucuk();
35385: PPUSH
35386: CALL_OW 559
// ResetFog ;
35390: CALL_OW 335
// end ;
35394: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35395: LD_EXP 63
35399: PUSH
35400: LD_EXP 95
35404: AND
35405: IFFALSE 35546
35407: GO 35409
35409: DISABLE
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35414: LD_ADDR_VAR 0 2
35418: PUSH
35419: LD_INT 22
35421: PUSH
35422: LD_OWVAR 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 21
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PPUSH
35445: CALL_OW 69
35449: ST_TO_ADDR
// if not tmp then
35450: LD_VAR 0 2
35454: NOT
35455: IFFALSE 35459
// exit ;
35457: GO 35546
// un := tmp [ rand ( 1 , tmp ) ] ;
35459: LD_ADDR_VAR 0 1
35463: PUSH
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 1
35471: PPUSH
35472: LD_VAR 0 2
35476: PPUSH
35477: CALL_OW 12
35481: ARRAY
35482: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35483: LD_VAR 0 1
35487: PPUSH
35488: LD_INT 0
35490: PPUSH
35491: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35495: LD_VAR 0 1
35499: PPUSH
35500: LD_OWVAR 3
35504: PUSH
35505: LD_VAR 0 1
35509: DIFF
35510: PPUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 74
35520: PPUSH
35521: CALL_OW 115
// wait ( 0 0$20 ) ;
35525: LD_INT 700
35527: PPUSH
35528: CALL_OW 67
// SetSide ( un , your_side ) ;
35532: LD_VAR 0 1
35536: PPUSH
35537: LD_OWVAR 2
35541: PPUSH
35542: CALL_OW 235
// end ;
35546: PPOPN 2
35548: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35549: LD_EXP 63
35553: PUSH
35554: LD_EXP 96
35558: AND
35559: IFFALSE 35665
35561: GO 35563
35563: DISABLE
35564: LD_INT 0
35566: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35567: LD_ADDR_VAR 0 1
35571: PUSH
35572: LD_INT 22
35574: PUSH
35575: LD_OWVAR 2
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 30
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PPUSH
35616: CALL_OW 69
35620: ST_TO_ADDR
// if not depot then
35621: LD_VAR 0 1
35625: NOT
35626: IFFALSE 35630
// exit ;
35628: GO 35665
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35630: LD_VAR 0 1
35634: PUSH
35635: LD_INT 1
35637: ARRAY
35638: PPUSH
35639: CALL_OW 250
35643: PPUSH
35644: LD_VAR 0 1
35648: PUSH
35649: LD_INT 1
35651: ARRAY
35652: PPUSH
35653: CALL_OW 251
35657: PPUSH
35658: LD_INT 70
35660: PPUSH
35661: CALL_OW 495
// end ;
35665: PPOPN 1
35667: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35668: LD_EXP 63
35672: PUSH
35673: LD_EXP 97
35677: AND
35678: IFFALSE 35889
35680: GO 35682
35682: DISABLE
35683: LD_INT 0
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35690: LD_ADDR_VAR 0 5
35694: PUSH
35695: LD_INT 22
35697: PUSH
35698: LD_OWVAR 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 21
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PPUSH
35721: CALL_OW 69
35725: ST_TO_ADDR
// if not tmp then
35726: LD_VAR 0 5
35730: NOT
35731: IFFALSE 35735
// exit ;
35733: GO 35889
// for i in tmp do
35735: LD_ADDR_VAR 0 1
35739: PUSH
35740: LD_VAR 0 5
35744: PUSH
35745: FOR_IN
35746: IFFALSE 35887
// begin d := rand ( 0 , 5 ) ;
35748: LD_ADDR_VAR 0 4
35752: PUSH
35753: LD_INT 0
35755: PPUSH
35756: LD_INT 5
35758: PPUSH
35759: CALL_OW 12
35763: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35764: LD_ADDR_VAR 0 2
35768: PUSH
35769: LD_VAR 0 1
35773: PPUSH
35774: CALL_OW 250
35778: PPUSH
35779: LD_VAR 0 4
35783: PPUSH
35784: LD_INT 3
35786: PPUSH
35787: LD_INT 12
35789: PPUSH
35790: CALL_OW 12
35794: PPUSH
35795: CALL_OW 272
35799: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35800: LD_ADDR_VAR 0 3
35804: PUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 251
35814: PPUSH
35815: LD_VAR 0 4
35819: PPUSH
35820: LD_INT 3
35822: PPUSH
35823: LD_INT 12
35825: PPUSH
35826: CALL_OW 12
35830: PPUSH
35831: CALL_OW 273
35835: ST_TO_ADDR
// if ValidHex ( x , y ) then
35836: LD_VAR 0 2
35840: PPUSH
35841: LD_VAR 0 3
35845: PPUSH
35846: CALL_OW 488
35850: IFFALSE 35885
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35852: LD_VAR 0 1
35856: PPUSH
35857: LD_VAR 0 2
35861: PPUSH
35862: LD_VAR 0 3
35866: PPUSH
35867: LD_INT 3
35869: PPUSH
35870: LD_INT 6
35872: PPUSH
35873: CALL_OW 12
35877: PPUSH
35878: LD_INT 1
35880: PPUSH
35881: CALL_OW 483
// end ;
35885: GO 35745
35887: POP
35888: POP
// end ;
35889: PPOPN 5
35891: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35892: LD_EXP 63
35896: PUSH
35897: LD_EXP 98
35901: AND
35902: IFFALSE 35996
35904: GO 35906
35906: DISABLE
35907: LD_INT 0
35909: PPUSH
35910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35911: LD_ADDR_VAR 0 2
35915: PUSH
35916: LD_INT 22
35918: PUSH
35919: LD_OWVAR 2
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 32
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 21
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: PPUSH
35953: CALL_OW 69
35957: ST_TO_ADDR
// if not tmp then
35958: LD_VAR 0 2
35962: NOT
35963: IFFALSE 35967
// exit ;
35965: GO 35996
// for i in tmp do
35967: LD_ADDR_VAR 0 1
35971: PUSH
35972: LD_VAR 0 2
35976: PUSH
35977: FOR_IN
35978: IFFALSE 35994
// SetFuel ( i , 0 ) ;
35980: LD_VAR 0 1
35984: PPUSH
35985: LD_INT 0
35987: PPUSH
35988: CALL_OW 240
35992: GO 35977
35994: POP
35995: POP
// end ;
35996: PPOPN 2
35998: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35999: LD_EXP 63
36003: PUSH
36004: LD_EXP 99
36008: AND
36009: IFFALSE 36075
36011: GO 36013
36013: DISABLE
36014: LD_INT 0
36016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36017: LD_ADDR_VAR 0 1
36021: PUSH
36022: LD_INT 22
36024: PUSH
36025: LD_OWVAR 2
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 30
36036: PUSH
36037: LD_INT 29
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PPUSH
36048: CALL_OW 69
36052: ST_TO_ADDR
// if not tmp then
36053: LD_VAR 0 1
36057: NOT
36058: IFFALSE 36062
// exit ;
36060: GO 36075
// DestroyUnit ( tmp [ 1 ] ) ;
36062: LD_VAR 0 1
36066: PUSH
36067: LD_INT 1
36069: ARRAY
36070: PPUSH
36071: CALL_OW 65
// end ;
36075: PPOPN 1
36077: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36078: LD_EXP 63
36082: PUSH
36083: LD_EXP 101
36087: AND
36088: IFFALSE 36217
36090: GO 36092
36092: DISABLE
36093: LD_INT 0
36095: PPUSH
// begin uc_side := 0 ;
36096: LD_ADDR_OWVAR 20
36100: PUSH
36101: LD_INT 0
36103: ST_TO_ADDR
// uc_nation := nation_arabian ;
36104: LD_ADDR_OWVAR 21
36108: PUSH
36109: LD_INT 2
36111: ST_TO_ADDR
// hc_gallery :=  ;
36112: LD_ADDR_OWVAR 33
36116: PUSH
36117: LD_STRING 
36119: ST_TO_ADDR
// hc_name :=  ;
36120: LD_ADDR_OWVAR 26
36124: PUSH
36125: LD_STRING 
36127: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36128: LD_INT 1
36130: PPUSH
36131: LD_INT 11
36133: PPUSH
36134: LD_INT 10
36136: PPUSH
36137: CALL_OW 380
// un := CreateHuman ;
36141: LD_ADDR_VAR 0 1
36145: PUSH
36146: CALL_OW 44
36150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36151: LD_VAR 0 1
36155: PPUSH
36156: LD_INT 1
36158: PPUSH
36159: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36163: LD_INT 35
36165: PPUSH
36166: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36170: LD_VAR 0 1
36174: PPUSH
36175: LD_INT 22
36177: PUSH
36178: LD_OWVAR 2
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PPUSH
36187: CALL_OW 69
36191: PPUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 74
36201: PPUSH
36202: CALL_OW 115
// until IsDead ( un ) ;
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 301
36215: IFFALSE 36163
// end ;
36217: PPOPN 1
36219: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36220: LD_EXP 63
36224: PUSH
36225: LD_EXP 103
36229: AND
36230: IFFALSE 36242
36232: GO 36234
36234: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36235: LD_STRING earthquake(getX(game), 0, 32)
36237: PPUSH
36238: CALL_OW 559
36242: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36243: LD_EXP 63
36247: PUSH
36248: LD_EXP 104
36252: AND
36253: IFFALSE 36344
36255: GO 36257
36257: DISABLE
36258: LD_INT 0
36260: PPUSH
// begin enable ;
36261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36262: LD_ADDR_VAR 0 1
36266: PUSH
36267: LD_INT 22
36269: PUSH
36270: LD_OWVAR 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 21
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 33
36291: PUSH
36292: LD_INT 3
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: PPUSH
36304: CALL_OW 69
36308: ST_TO_ADDR
// if not tmp then
36309: LD_VAR 0 1
36313: NOT
36314: IFFALSE 36318
// exit ;
36316: GO 36344
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36318: LD_VAR 0 1
36322: PUSH
36323: LD_INT 1
36325: PPUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 12
36335: ARRAY
36336: PPUSH
36337: LD_INT 1
36339: PPUSH
36340: CALL_OW 234
// end ;
36344: PPOPN 1
36346: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36347: LD_EXP 63
36351: PUSH
36352: LD_EXP 105
36356: AND
36357: IFFALSE 36498
36359: GO 36361
36361: DISABLE
36362: LD_INT 0
36364: PPUSH
36365: PPUSH
36366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: LD_INT 22
36374: PUSH
36375: LD_OWVAR 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 25
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PPUSH
36398: CALL_OW 69
36402: ST_TO_ADDR
// if not tmp then
36403: LD_VAR 0 3
36407: NOT
36408: IFFALSE 36412
// exit ;
36410: GO 36498
// un := tmp [ rand ( 1 , tmp ) ] ;
36412: LD_ADDR_VAR 0 2
36416: PUSH
36417: LD_VAR 0 3
36421: PUSH
36422: LD_INT 1
36424: PPUSH
36425: LD_VAR 0 3
36429: PPUSH
36430: CALL_OW 12
36434: ARRAY
36435: ST_TO_ADDR
// if Crawls ( un ) then
36436: LD_VAR 0 2
36440: PPUSH
36441: CALL_OW 318
36445: IFFALSE 36456
// ComWalk ( un ) ;
36447: LD_VAR 0 2
36451: PPUSH
36452: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36456: LD_VAR 0 2
36460: PPUSH
36461: LD_INT 9
36463: PPUSH
36464: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36468: LD_INT 28
36470: PPUSH
36471: LD_OWVAR 2
36475: PPUSH
36476: LD_INT 2
36478: PPUSH
36479: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36483: LD_INT 29
36485: PPUSH
36486: LD_OWVAR 2
36490: PPUSH
36491: LD_INT 2
36493: PPUSH
36494: CALL_OW 322
// end ;
36498: PPOPN 3
36500: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36501: LD_EXP 63
36505: PUSH
36506: LD_EXP 106
36510: AND
36511: IFFALSE 36622
36513: GO 36515
36515: DISABLE
36516: LD_INT 0
36518: PPUSH
36519: PPUSH
36520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_INT 22
36528: PUSH
36529: LD_OWVAR 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 25
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PPUSH
36552: CALL_OW 69
36556: ST_TO_ADDR
// if not tmp then
36557: LD_VAR 0 3
36561: NOT
36562: IFFALSE 36566
// exit ;
36564: GO 36622
// un := tmp [ rand ( 1 , tmp ) ] ;
36566: LD_ADDR_VAR 0 2
36570: PUSH
36571: LD_VAR 0 3
36575: PUSH
36576: LD_INT 1
36578: PPUSH
36579: LD_VAR 0 3
36583: PPUSH
36584: CALL_OW 12
36588: ARRAY
36589: ST_TO_ADDR
// if Crawls ( un ) then
36590: LD_VAR 0 2
36594: PPUSH
36595: CALL_OW 318
36599: IFFALSE 36610
// ComWalk ( un ) ;
36601: LD_VAR 0 2
36605: PPUSH
36606: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_INT 8
36617: PPUSH
36618: CALL_OW 336
// end ;
36622: PPOPN 3
36624: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36625: LD_EXP 63
36629: PUSH
36630: LD_EXP 107
36634: AND
36635: IFFALSE 36779
36637: GO 36639
36639: DISABLE
36640: LD_INT 0
36642: PPUSH
36643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36644: LD_ADDR_VAR 0 2
36648: PUSH
36649: LD_INT 22
36651: PUSH
36652: LD_OWVAR 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 21
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: LD_INT 34
36676: PUSH
36677: LD_INT 12
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 34
36686: PUSH
36687: LD_INT 51
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 34
36696: PUSH
36697: LD_INT 32
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: PPUSH
36715: CALL_OW 69
36719: ST_TO_ADDR
// if not tmp then
36720: LD_VAR 0 2
36724: NOT
36725: IFFALSE 36729
// exit ;
36727: GO 36779
// for i in tmp do
36729: LD_ADDR_VAR 0 1
36733: PUSH
36734: LD_VAR 0 2
36738: PUSH
36739: FOR_IN
36740: IFFALSE 36777
// if GetCargo ( i , mat_artifact ) = 0 then
36742: LD_VAR 0 1
36746: PPUSH
36747: LD_INT 4
36749: PPUSH
36750: CALL_OW 289
36754: PUSH
36755: LD_INT 0
36757: EQUAL
36758: IFFALSE 36775
// SetCargo ( i , mat_siberit , 100 ) ;
36760: LD_VAR 0 1
36764: PPUSH
36765: LD_INT 3
36767: PPUSH
36768: LD_INT 100
36770: PPUSH
36771: CALL_OW 290
36775: GO 36739
36777: POP
36778: POP
// end ;
36779: PPOPN 2
36781: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36782: LD_EXP 63
36786: PUSH
36787: LD_EXP 108
36791: AND
36792: IFFALSE 36975
36794: GO 36796
36796: DISABLE
36797: LD_INT 0
36799: PPUSH
36800: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36801: LD_ADDR_VAR 0 2
36805: PUSH
36806: LD_INT 22
36808: PUSH
36809: LD_OWVAR 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PPUSH
36818: CALL_OW 69
36822: ST_TO_ADDR
// if not tmp then
36823: LD_VAR 0 2
36827: NOT
36828: IFFALSE 36832
// exit ;
36830: GO 36975
// for i := 1 to 2 do
36832: LD_ADDR_VAR 0 1
36836: PUSH
36837: DOUBLE
36838: LD_INT 1
36840: DEC
36841: ST_TO_ADDR
36842: LD_INT 2
36844: PUSH
36845: FOR_TO
36846: IFFALSE 36973
// begin uc_side := your_side ;
36848: LD_ADDR_OWVAR 20
36852: PUSH
36853: LD_OWVAR 2
36857: ST_TO_ADDR
// uc_nation := nation_american ;
36858: LD_ADDR_OWVAR 21
36862: PUSH
36863: LD_INT 1
36865: ST_TO_ADDR
// vc_chassis := us_morphling ;
36866: LD_ADDR_OWVAR 37
36870: PUSH
36871: LD_INT 5
36873: ST_TO_ADDR
// vc_engine := engine_siberite ;
36874: LD_ADDR_OWVAR 39
36878: PUSH
36879: LD_INT 3
36881: ST_TO_ADDR
// vc_control := control_computer ;
36882: LD_ADDR_OWVAR 38
36886: PUSH
36887: LD_INT 3
36889: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36890: LD_ADDR_OWVAR 40
36894: PUSH
36895: LD_INT 10
36897: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36898: LD_VAR 0 2
36902: PUSH
36903: LD_INT 1
36905: ARRAY
36906: PPUSH
36907: CALL_OW 310
36911: NOT
36912: IFFALSE 36959
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36914: CALL_OW 45
36918: PPUSH
36919: LD_VAR 0 2
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PPUSH
36928: CALL_OW 250
36932: PPUSH
36933: LD_VAR 0 2
36937: PUSH
36938: LD_INT 1
36940: ARRAY
36941: PPUSH
36942: CALL_OW 251
36946: PPUSH
36947: LD_INT 12
36949: PPUSH
36950: LD_INT 1
36952: PPUSH
36953: CALL_OW 50
36957: GO 36971
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36959: CALL_OW 45
36963: PPUSH
36964: LD_INT 1
36966: PPUSH
36967: CALL_OW 51
// end ;
36971: GO 36845
36973: POP
36974: POP
// end ;
36975: PPOPN 2
36977: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36978: LD_EXP 63
36982: PUSH
36983: LD_EXP 109
36987: AND
36988: IFFALSE 37210
36990: GO 36992
36992: DISABLE
36993: LD_INT 0
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37001: LD_ADDR_VAR 0 6
37005: PUSH
37006: LD_INT 22
37008: PUSH
37009: LD_OWVAR 2
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 21
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 23
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: PPUSH
37050: CALL_OW 69
37054: ST_TO_ADDR
// if not tmp then
37055: LD_VAR 0 6
37059: NOT
37060: IFFALSE 37064
// exit ;
37062: GO 37210
// s1 := rand ( 1 , 4 ) ;
37064: LD_ADDR_VAR 0 2
37068: PUSH
37069: LD_INT 1
37071: PPUSH
37072: LD_INT 4
37074: PPUSH
37075: CALL_OW 12
37079: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_VAR 0 6
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: PPUSH
37094: LD_VAR 0 2
37098: PPUSH
37099: CALL_OW 259
37103: ST_TO_ADDR
// if s1 = 1 then
37104: LD_VAR 0 2
37108: PUSH
37109: LD_INT 1
37111: EQUAL
37112: IFFALSE 37132
// s2 := rand ( 2 , 4 ) else
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_INT 2
37121: PPUSH
37122: LD_INT 4
37124: PPUSH
37125: CALL_OW 12
37129: ST_TO_ADDR
37130: GO 37140
// s2 := 1 ;
37132: LD_ADDR_VAR 0 3
37136: PUSH
37137: LD_INT 1
37139: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37140: LD_ADDR_VAR 0 5
37144: PUSH
37145: LD_VAR 0 6
37149: PUSH
37150: LD_INT 1
37152: ARRAY
37153: PPUSH
37154: LD_VAR 0 3
37158: PPUSH
37159: CALL_OW 259
37163: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37164: LD_VAR 0 6
37168: PUSH
37169: LD_INT 1
37171: ARRAY
37172: PPUSH
37173: LD_VAR 0 2
37177: PPUSH
37178: LD_VAR 0 5
37182: PPUSH
37183: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37187: LD_VAR 0 6
37191: PUSH
37192: LD_INT 1
37194: ARRAY
37195: PPUSH
37196: LD_VAR 0 3
37200: PPUSH
37201: LD_VAR 0 4
37205: PPUSH
37206: CALL_OW 237
// end ;
37210: PPOPN 6
37212: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37213: LD_EXP 63
37217: PUSH
37218: LD_EXP 110
37222: AND
37223: IFFALSE 37302
37225: GO 37227
37227: DISABLE
37228: LD_INT 0
37230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37231: LD_ADDR_VAR 0 1
37235: PUSH
37236: LD_INT 22
37238: PUSH
37239: LD_OWVAR 2
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 30
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PPUSH
37262: CALL_OW 69
37266: ST_TO_ADDR
// if not tmp then
37267: LD_VAR 0 1
37271: NOT
37272: IFFALSE 37276
// exit ;
37274: GO 37302
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37276: LD_VAR 0 1
37280: PUSH
37281: LD_INT 1
37283: PPUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL_OW 12
37293: ARRAY
37294: PPUSH
37295: LD_INT 1
37297: PPUSH
37298: CALL_OW 234
// end ;
37302: PPOPN 1
37304: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37305: LD_EXP 63
37309: PUSH
37310: LD_EXP 111
37314: AND
37315: IFFALSE 37427
37317: GO 37319
37319: DISABLE
37320: LD_INT 0
37322: PPUSH
37323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37324: LD_ADDR_VAR 0 2
37328: PUSH
37329: LD_INT 22
37331: PUSH
37332: LD_OWVAR 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 30
37346: PUSH
37347: LD_INT 27
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 30
37356: PUSH
37357: LD_INT 26
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 30
37366: PUSH
37367: LD_INT 28
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PPUSH
37384: CALL_OW 69
37388: ST_TO_ADDR
// if not tmp then
37389: LD_VAR 0 2
37393: NOT
37394: IFFALSE 37398
// exit ;
37396: GO 37427
// for i in tmp do
37398: LD_ADDR_VAR 0 1
37402: PUSH
37403: LD_VAR 0 2
37407: PUSH
37408: FOR_IN
37409: IFFALSE 37425
// SetLives ( i , 1 ) ;
37411: LD_VAR 0 1
37415: PPUSH
37416: LD_INT 1
37418: PPUSH
37419: CALL_OW 234
37423: GO 37408
37425: POP
37426: POP
// end ;
37427: PPOPN 2
37429: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37430: LD_EXP 63
37434: PUSH
37435: LD_EXP 112
37439: AND
37440: IFFALSE 37714
37442: GO 37444
37444: DISABLE
37445: LD_INT 0
37447: PPUSH
37448: PPUSH
37449: PPUSH
// begin i := rand ( 1 , 7 ) ;
37450: LD_ADDR_VAR 0 1
37454: PUSH
37455: LD_INT 1
37457: PPUSH
37458: LD_INT 7
37460: PPUSH
37461: CALL_OW 12
37465: ST_TO_ADDR
// case i of 1 :
37466: LD_VAR 0 1
37470: PUSH
37471: LD_INT 1
37473: DOUBLE
37474: EQUAL
37475: IFTRUE 37479
37477: GO 37489
37479: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37480: LD_STRING earthquake(getX(game), 0, 32)
37482: PPUSH
37483: CALL_OW 559
37487: GO 37714
37489: LD_INT 2
37491: DOUBLE
37492: EQUAL
37493: IFTRUE 37497
37495: GO 37511
37497: POP
// begin ToLua ( displayStucuk(); ) ;
37498: LD_STRING displayStucuk();
37500: PPUSH
37501: CALL_OW 559
// ResetFog ;
37505: CALL_OW 335
// end ; 3 :
37509: GO 37714
37511: LD_INT 3
37513: DOUBLE
37514: EQUAL
37515: IFTRUE 37519
37517: GO 37623
37519: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37520: LD_ADDR_VAR 0 2
37524: PUSH
37525: LD_INT 22
37527: PUSH
37528: LD_OWVAR 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 25
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PPUSH
37551: CALL_OW 69
37555: ST_TO_ADDR
// if not tmp then
37556: LD_VAR 0 2
37560: NOT
37561: IFFALSE 37565
// exit ;
37563: GO 37714
// un := tmp [ rand ( 1 , tmp ) ] ;
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_VAR 0 2
37574: PUSH
37575: LD_INT 1
37577: PPUSH
37578: LD_VAR 0 2
37582: PPUSH
37583: CALL_OW 12
37587: ARRAY
37588: ST_TO_ADDR
// if Crawls ( un ) then
37589: LD_VAR 0 3
37593: PPUSH
37594: CALL_OW 318
37598: IFFALSE 37609
// ComWalk ( un ) ;
37600: LD_VAR 0 3
37604: PPUSH
37605: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37609: LD_VAR 0 3
37613: PPUSH
37614: LD_INT 8
37616: PPUSH
37617: CALL_OW 336
// end ; 4 :
37621: GO 37714
37623: LD_INT 4
37625: DOUBLE
37626: EQUAL
37627: IFTRUE 37631
37629: GO 37692
37631: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37632: LD_ADDR_VAR 0 2
37636: PUSH
37637: LD_INT 22
37639: PUSH
37640: LD_OWVAR 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 30
37651: PUSH
37652: LD_INT 29
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PPUSH
37663: CALL_OW 69
37667: ST_TO_ADDR
// if not tmp then
37668: LD_VAR 0 2
37672: NOT
37673: IFFALSE 37677
// exit ;
37675: GO 37714
// DestroyUnit ( tmp [ 1 ] ) ;
37677: LD_VAR 0 2
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: PPUSH
37686: CALL_OW 65
// end ; 5 .. 7 :
37690: GO 37714
37692: LD_INT 5
37694: DOUBLE
37695: GREATEREQUAL
37696: IFFALSE 37704
37698: LD_INT 7
37700: DOUBLE
37701: LESSEQUAL
37702: IFTRUE 37706
37704: GO 37713
37706: POP
// StreamSibBomb ; end ;
37707: CALL 33964 0 0
37711: GO 37714
37713: POP
// end ;
37714: PPOPN 3
37716: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37717: LD_EXP 63
37721: PUSH
37722: LD_EXP 113
37726: AND
37727: IFFALSE 37883
37729: GO 37731
37731: DISABLE
37732: LD_INT 0
37734: PPUSH
37735: PPUSH
37736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37737: LD_ADDR_VAR 0 2
37741: PUSH
37742: LD_INT 81
37744: PUSH
37745: LD_OWVAR 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 21
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 21
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PPUSH
37786: CALL_OW 69
37790: ST_TO_ADDR
// if not tmp then
37791: LD_VAR 0 2
37795: NOT
37796: IFFALSE 37800
// exit ;
37798: GO 37883
// p := 0 ;
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 0
37807: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37808: LD_INT 35
37810: PPUSH
37811: CALL_OW 67
// p := p + 1 ;
37815: LD_ADDR_VAR 0 3
37819: PUSH
37820: LD_VAR 0 3
37824: PUSH
37825: LD_INT 1
37827: PLUS
37828: ST_TO_ADDR
// for i in tmp do
37829: LD_ADDR_VAR 0 1
37833: PUSH
37834: LD_VAR 0 2
37838: PUSH
37839: FOR_IN
37840: IFFALSE 37871
// if GetLives ( i ) < 1000 then
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL_OW 256
37851: PUSH
37852: LD_INT 1000
37854: LESS
37855: IFFALSE 37869
// SetLives ( i , 1000 ) ;
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_INT 1000
37864: PPUSH
37865: CALL_OW 234
37869: GO 37839
37871: POP
37872: POP
// until p > 20 ;
37873: LD_VAR 0 3
37877: PUSH
37878: LD_INT 20
37880: GREATER
37881: IFFALSE 37808
// end ;
37883: PPOPN 3
37885: END
// every 0 0$1 trigger StreamModeActive and sTime do
37886: LD_EXP 63
37890: PUSH
37891: LD_EXP 114
37895: AND
37896: IFFALSE 37931
37898: GO 37900
37900: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37901: LD_INT 28
37903: PPUSH
37904: LD_OWVAR 2
37908: PPUSH
37909: LD_INT 2
37911: PPUSH
37912: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37916: LD_INT 30
37918: PPUSH
37919: LD_OWVAR 2
37923: PPUSH
37924: LD_INT 2
37926: PPUSH
37927: CALL_OW 322
// end ;
37931: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37932: LD_EXP 63
37936: PUSH
37937: LD_EXP 115
37941: AND
37942: IFFALSE 38063
37944: GO 37946
37946: DISABLE
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37951: LD_ADDR_VAR 0 2
37955: PUSH
37956: LD_INT 22
37958: PUSH
37959: LD_OWVAR 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 21
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 23
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 69
38004: ST_TO_ADDR
// if not tmp then
38005: LD_VAR 0 2
38009: NOT
38010: IFFALSE 38014
// exit ;
38012: GO 38063
// for i in tmp do
38014: LD_ADDR_VAR 0 1
38018: PUSH
38019: LD_VAR 0 2
38023: PUSH
38024: FOR_IN
38025: IFFALSE 38061
// begin if Crawls ( i ) then
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 318
38036: IFFALSE 38047
// ComWalk ( i ) ;
38038: LD_VAR 0 1
38042: PPUSH
38043: CALL_OW 138
// SetClass ( i , 2 ) ;
38047: LD_VAR 0 1
38051: PPUSH
38052: LD_INT 2
38054: PPUSH
38055: CALL_OW 336
// end ;
38059: GO 38024
38061: POP
38062: POP
// end ;
38063: PPOPN 2
38065: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38066: LD_EXP 63
38070: PUSH
38071: LD_EXP 116
38075: AND
38076: IFFALSE 38357
38078: GO 38080
38080: DISABLE
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
38085: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38086: LD_OWVAR 2
38090: PPUSH
38091: LD_INT 9
38093: PPUSH
38094: LD_INT 1
38096: PPUSH
38097: LD_INT 1
38099: PPUSH
38100: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38104: LD_INT 9
38106: PPUSH
38107: LD_OWVAR 2
38111: PPUSH
38112: CALL_OW 343
// uc_side := 9 ;
38116: LD_ADDR_OWVAR 20
38120: PUSH
38121: LD_INT 9
38123: ST_TO_ADDR
// uc_nation := 2 ;
38124: LD_ADDR_OWVAR 21
38128: PUSH
38129: LD_INT 2
38131: ST_TO_ADDR
// hc_name := Dark Warrior ;
38132: LD_ADDR_OWVAR 26
38136: PUSH
38137: LD_STRING Dark Warrior
38139: ST_TO_ADDR
// hc_gallery :=  ;
38140: LD_ADDR_OWVAR 33
38144: PUSH
38145: LD_STRING 
38147: ST_TO_ADDR
// hc_noskilllimit := true ;
38148: LD_ADDR_OWVAR 76
38152: PUSH
38153: LD_INT 1
38155: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38156: LD_ADDR_OWVAR 31
38160: PUSH
38161: LD_INT 30
38163: PUSH
38164: LD_INT 30
38166: PUSH
38167: LD_INT 30
38169: PUSH
38170: LD_INT 30
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// un := CreateHuman ;
38179: LD_ADDR_VAR 0 3
38183: PUSH
38184: CALL_OW 44
38188: ST_TO_ADDR
// hc_noskilllimit := false ;
38189: LD_ADDR_OWVAR 76
38193: PUSH
38194: LD_INT 0
38196: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38197: LD_VAR 0 3
38201: PPUSH
38202: LD_INT 1
38204: PPUSH
38205: CALL_OW 51
// p := 0 ;
38209: LD_ADDR_VAR 0 2
38213: PUSH
38214: LD_INT 0
38216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38217: LD_INT 35
38219: PPUSH
38220: CALL_OW 67
// p := p + 1 ;
38224: LD_ADDR_VAR 0 2
38228: PUSH
38229: LD_VAR 0 2
38233: PUSH
38234: LD_INT 1
38236: PLUS
38237: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38238: LD_VAR 0 3
38242: PPUSH
38243: CALL_OW 256
38247: PUSH
38248: LD_INT 1000
38250: LESS
38251: IFFALSE 38265
// SetLives ( un , 1000 ) ;
38253: LD_VAR 0 3
38257: PPUSH
38258: LD_INT 1000
38260: PPUSH
38261: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38265: LD_VAR 0 3
38269: PPUSH
38270: LD_INT 81
38272: PUSH
38273: LD_OWVAR 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 91
38284: PUSH
38285: LD_VAR 0 3
38289: PUSH
38290: LD_INT 30
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PPUSH
38302: CALL_OW 69
38306: PPUSH
38307: LD_VAR 0 3
38311: PPUSH
38312: CALL_OW 74
38316: PPUSH
38317: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38321: LD_VAR 0 2
38325: PUSH
38326: LD_INT 60
38328: GREATER
38329: PUSH
38330: LD_VAR 0 3
38334: PPUSH
38335: CALL_OW 301
38339: OR
38340: IFFALSE 38217
// if un then
38342: LD_VAR 0 3
38346: IFFALSE 38357
// RemoveUnit ( un ) ;
38348: LD_VAR 0 3
38352: PPUSH
38353: CALL_OW 64
// end ;
38357: PPOPN 3
38359: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38360: LD_INT 0
38362: PPUSH
// case cmd of 301 :
38363: LD_VAR 0 1
38367: PUSH
38368: LD_INT 301
38370: DOUBLE
38371: EQUAL
38372: IFTRUE 38376
38374: GO 38408
38376: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38377: LD_VAR 0 6
38381: PPUSH
38382: LD_VAR 0 7
38386: PPUSH
38387: LD_VAR 0 8
38391: PPUSH
38392: LD_VAR 0 4
38396: PPUSH
38397: LD_VAR 0 5
38401: PPUSH
38402: CALL 39609 0 5
38406: GO 38529
38408: LD_INT 302
38410: DOUBLE
38411: EQUAL
38412: IFTRUE 38416
38414: GO 38453
38416: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38417: LD_VAR 0 6
38421: PPUSH
38422: LD_VAR 0 7
38426: PPUSH
38427: LD_VAR 0 8
38431: PPUSH
38432: LD_VAR 0 9
38436: PPUSH
38437: LD_VAR 0 4
38441: PPUSH
38442: LD_VAR 0 5
38446: PPUSH
38447: CALL 39700 0 6
38451: GO 38529
38453: LD_INT 303
38455: DOUBLE
38456: EQUAL
38457: IFTRUE 38461
38459: GO 38498
38461: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38462: LD_VAR 0 6
38466: PPUSH
38467: LD_VAR 0 7
38471: PPUSH
38472: LD_VAR 0 8
38476: PPUSH
38477: LD_VAR 0 9
38481: PPUSH
38482: LD_VAR 0 4
38486: PPUSH
38487: LD_VAR 0 5
38491: PPUSH
38492: CALL 38534 0 6
38496: GO 38529
38498: LD_INT 304
38500: DOUBLE
38501: EQUAL
38502: IFTRUE 38506
38504: GO 38528
38506: POP
// hHackTeleport ( unit , x , y ) ; end ;
38507: LD_VAR 0 2
38511: PPUSH
38512: LD_VAR 0 4
38516: PPUSH
38517: LD_VAR 0 5
38521: PPUSH
38522: CALL 40293 0 3
38526: GO 38529
38528: POP
// end ;
38529: LD_VAR 0 12
38533: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38534: LD_INT 0
38536: PPUSH
38537: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38538: LD_VAR 0 1
38542: PUSH
38543: LD_INT 1
38545: LESS
38546: PUSH
38547: LD_VAR 0 1
38551: PUSH
38552: LD_INT 3
38554: GREATER
38555: OR
38556: PUSH
38557: LD_VAR 0 5
38561: PPUSH
38562: LD_VAR 0 6
38566: PPUSH
38567: CALL_OW 428
38571: OR
38572: IFFALSE 38576
// exit ;
38574: GO 39296
// uc_side := your_side ;
38576: LD_ADDR_OWVAR 20
38580: PUSH
38581: LD_OWVAR 2
38585: ST_TO_ADDR
// uc_nation := nation ;
38586: LD_ADDR_OWVAR 21
38590: PUSH
38591: LD_VAR 0 1
38595: ST_TO_ADDR
// bc_level = 1 ;
38596: LD_ADDR_OWVAR 43
38600: PUSH
38601: LD_INT 1
38603: ST_TO_ADDR
// case btype of 1 :
38604: LD_VAR 0 2
38608: PUSH
38609: LD_INT 1
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38617
38615: GO 38628
38617: POP
// bc_type := b_depot ; 2 :
38618: LD_ADDR_OWVAR 42
38622: PUSH
38623: LD_INT 0
38625: ST_TO_ADDR
38626: GO 39240
38628: LD_INT 2
38630: DOUBLE
38631: EQUAL
38632: IFTRUE 38636
38634: GO 38647
38636: POP
// bc_type := b_warehouse ; 3 :
38637: LD_ADDR_OWVAR 42
38641: PUSH
38642: LD_INT 1
38644: ST_TO_ADDR
38645: GO 39240
38647: LD_INT 3
38649: DOUBLE
38650: EQUAL
38651: IFTRUE 38655
38653: GO 38666
38655: POP
// bc_type := b_lab ; 4 .. 9 :
38656: LD_ADDR_OWVAR 42
38660: PUSH
38661: LD_INT 6
38663: ST_TO_ADDR
38664: GO 39240
38666: LD_INT 4
38668: DOUBLE
38669: GREATEREQUAL
38670: IFFALSE 38678
38672: LD_INT 9
38674: DOUBLE
38675: LESSEQUAL
38676: IFTRUE 38680
38678: GO 38732
38680: POP
// begin bc_type := b_lab_half ;
38681: LD_ADDR_OWVAR 42
38685: PUSH
38686: LD_INT 7
38688: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38689: LD_ADDR_OWVAR 44
38693: PUSH
38694: LD_INT 10
38696: PUSH
38697: LD_INT 11
38699: PUSH
38700: LD_INT 12
38702: PUSH
38703: LD_INT 15
38705: PUSH
38706: LD_INT 14
38708: PUSH
38709: LD_INT 13
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: PUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_INT 3
38727: MINUS
38728: ARRAY
38729: ST_TO_ADDR
// end ; 10 .. 13 :
38730: GO 39240
38732: LD_INT 10
38734: DOUBLE
38735: GREATEREQUAL
38736: IFFALSE 38744
38738: LD_INT 13
38740: DOUBLE
38741: LESSEQUAL
38742: IFTRUE 38746
38744: GO 38823
38746: POP
// begin bc_type := b_lab_full ;
38747: LD_ADDR_OWVAR 42
38751: PUSH
38752: LD_INT 8
38754: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38755: LD_ADDR_OWVAR 44
38759: PUSH
38760: LD_INT 10
38762: PUSH
38763: LD_INT 12
38765: PUSH
38766: LD_INT 14
38768: PUSH
38769: LD_INT 13
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: PUSH
38778: LD_VAR 0 2
38782: PUSH
38783: LD_INT 9
38785: MINUS
38786: ARRAY
38787: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38788: LD_ADDR_OWVAR 45
38792: PUSH
38793: LD_INT 11
38795: PUSH
38796: LD_INT 15
38798: PUSH
38799: LD_INT 12
38801: PUSH
38802: LD_INT 15
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: LD_VAR 0 2
38815: PUSH
38816: LD_INT 9
38818: MINUS
38819: ARRAY
38820: ST_TO_ADDR
// end ; 14 :
38821: GO 39240
38823: LD_INT 14
38825: DOUBLE
38826: EQUAL
38827: IFTRUE 38831
38829: GO 38842
38831: POP
// bc_type := b_workshop ; 15 :
38832: LD_ADDR_OWVAR 42
38836: PUSH
38837: LD_INT 2
38839: ST_TO_ADDR
38840: GO 39240
38842: LD_INT 15
38844: DOUBLE
38845: EQUAL
38846: IFTRUE 38850
38848: GO 38861
38850: POP
// bc_type := b_factory ; 16 :
38851: LD_ADDR_OWVAR 42
38855: PUSH
38856: LD_INT 3
38858: ST_TO_ADDR
38859: GO 39240
38861: LD_INT 16
38863: DOUBLE
38864: EQUAL
38865: IFTRUE 38869
38867: GO 38880
38869: POP
// bc_type := b_ext_gun ; 17 :
38870: LD_ADDR_OWVAR 42
38874: PUSH
38875: LD_INT 17
38877: ST_TO_ADDR
38878: GO 39240
38880: LD_INT 17
38882: DOUBLE
38883: EQUAL
38884: IFTRUE 38888
38886: GO 38916
38888: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38889: LD_ADDR_OWVAR 42
38893: PUSH
38894: LD_INT 19
38896: PUSH
38897: LD_INT 23
38899: PUSH
38900: LD_INT 19
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_VAR 0 1
38912: ARRAY
38913: ST_TO_ADDR
38914: GO 39240
38916: LD_INT 18
38918: DOUBLE
38919: EQUAL
38920: IFTRUE 38924
38922: GO 38935
38924: POP
// bc_type := b_ext_radar ; 19 :
38925: LD_ADDR_OWVAR 42
38929: PUSH
38930: LD_INT 20
38932: ST_TO_ADDR
38933: GO 39240
38935: LD_INT 19
38937: DOUBLE
38938: EQUAL
38939: IFTRUE 38943
38941: GO 38954
38943: POP
// bc_type := b_ext_radio ; 20 :
38944: LD_ADDR_OWVAR 42
38948: PUSH
38949: LD_INT 22
38951: ST_TO_ADDR
38952: GO 39240
38954: LD_INT 20
38956: DOUBLE
38957: EQUAL
38958: IFTRUE 38962
38960: GO 38973
38962: POP
// bc_type := b_ext_siberium ; 21 :
38963: LD_ADDR_OWVAR 42
38967: PUSH
38968: LD_INT 21
38970: ST_TO_ADDR
38971: GO 39240
38973: LD_INT 21
38975: DOUBLE
38976: EQUAL
38977: IFTRUE 38981
38979: GO 38992
38981: POP
// bc_type := b_ext_computer ; 22 :
38982: LD_ADDR_OWVAR 42
38986: PUSH
38987: LD_INT 24
38989: ST_TO_ADDR
38990: GO 39240
38992: LD_INT 22
38994: DOUBLE
38995: EQUAL
38996: IFTRUE 39000
38998: GO 39011
39000: POP
// bc_type := b_ext_track ; 23 :
39001: LD_ADDR_OWVAR 42
39005: PUSH
39006: LD_INT 16
39008: ST_TO_ADDR
39009: GO 39240
39011: LD_INT 23
39013: DOUBLE
39014: EQUAL
39015: IFTRUE 39019
39017: GO 39030
39019: POP
// bc_type := b_ext_laser ; 24 :
39020: LD_ADDR_OWVAR 42
39024: PUSH
39025: LD_INT 25
39027: ST_TO_ADDR
39028: GO 39240
39030: LD_INT 24
39032: DOUBLE
39033: EQUAL
39034: IFTRUE 39038
39036: GO 39049
39038: POP
// bc_type := b_control_tower ; 25 :
39039: LD_ADDR_OWVAR 42
39043: PUSH
39044: LD_INT 36
39046: ST_TO_ADDR
39047: GO 39240
39049: LD_INT 25
39051: DOUBLE
39052: EQUAL
39053: IFTRUE 39057
39055: GO 39068
39057: POP
// bc_type := b_breastwork ; 26 :
39058: LD_ADDR_OWVAR 42
39062: PUSH
39063: LD_INT 31
39065: ST_TO_ADDR
39066: GO 39240
39068: LD_INT 26
39070: DOUBLE
39071: EQUAL
39072: IFTRUE 39076
39074: GO 39087
39076: POP
// bc_type := b_bunker ; 27 :
39077: LD_ADDR_OWVAR 42
39081: PUSH
39082: LD_INT 32
39084: ST_TO_ADDR
39085: GO 39240
39087: LD_INT 27
39089: DOUBLE
39090: EQUAL
39091: IFTRUE 39095
39093: GO 39106
39095: POP
// bc_type := b_turret ; 28 :
39096: LD_ADDR_OWVAR 42
39100: PUSH
39101: LD_INT 33
39103: ST_TO_ADDR
39104: GO 39240
39106: LD_INT 28
39108: DOUBLE
39109: EQUAL
39110: IFTRUE 39114
39112: GO 39125
39114: POP
// bc_type := b_armoury ; 29 :
39115: LD_ADDR_OWVAR 42
39119: PUSH
39120: LD_INT 4
39122: ST_TO_ADDR
39123: GO 39240
39125: LD_INT 29
39127: DOUBLE
39128: EQUAL
39129: IFTRUE 39133
39131: GO 39144
39133: POP
// bc_type := b_barracks ; 30 :
39134: LD_ADDR_OWVAR 42
39138: PUSH
39139: LD_INT 5
39141: ST_TO_ADDR
39142: GO 39240
39144: LD_INT 30
39146: DOUBLE
39147: EQUAL
39148: IFTRUE 39152
39150: GO 39163
39152: POP
// bc_type := b_solar_power ; 31 :
39153: LD_ADDR_OWVAR 42
39157: PUSH
39158: LD_INT 27
39160: ST_TO_ADDR
39161: GO 39240
39163: LD_INT 31
39165: DOUBLE
39166: EQUAL
39167: IFTRUE 39171
39169: GO 39182
39171: POP
// bc_type := b_oil_power ; 32 :
39172: LD_ADDR_OWVAR 42
39176: PUSH
39177: LD_INT 26
39179: ST_TO_ADDR
39180: GO 39240
39182: LD_INT 32
39184: DOUBLE
39185: EQUAL
39186: IFTRUE 39190
39188: GO 39201
39190: POP
// bc_type := b_siberite_power ; 33 :
39191: LD_ADDR_OWVAR 42
39195: PUSH
39196: LD_INT 28
39198: ST_TO_ADDR
39199: GO 39240
39201: LD_INT 33
39203: DOUBLE
39204: EQUAL
39205: IFTRUE 39209
39207: GO 39220
39209: POP
// bc_type := b_oil_mine ; 34 :
39210: LD_ADDR_OWVAR 42
39214: PUSH
39215: LD_INT 29
39217: ST_TO_ADDR
39218: GO 39240
39220: LD_INT 34
39222: DOUBLE
39223: EQUAL
39224: IFTRUE 39228
39226: GO 39239
39228: POP
// bc_type := b_siberite_mine ; end ;
39229: LD_ADDR_OWVAR 42
39233: PUSH
39234: LD_INT 30
39236: ST_TO_ADDR
39237: GO 39240
39239: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39240: LD_ADDR_VAR 0 8
39244: PUSH
39245: LD_VAR 0 5
39249: PPUSH
39250: LD_VAR 0 6
39254: PPUSH
39255: LD_VAR 0 3
39259: PPUSH
39260: CALL_OW 47
39264: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39265: LD_OWVAR 42
39269: PUSH
39270: LD_INT 32
39272: PUSH
39273: LD_INT 33
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: IN
39280: IFFALSE 39296
// PlaceWeaponTurret ( b , weapon ) ;
39282: LD_VAR 0 8
39286: PPUSH
39287: LD_VAR 0 4
39291: PPUSH
39292: CALL_OW 431
// end ;
39296: LD_VAR 0 7
39300: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39301: LD_INT 0
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_INT 22
39314: PUSH
39315: LD_OWVAR 2
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 30
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 30
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PPUSH
39356: CALL_OW 69
39360: ST_TO_ADDR
// if not tmp then
39361: LD_VAR 0 4
39365: NOT
39366: IFFALSE 39370
// exit ;
39368: GO 39429
// for i in tmp do
39370: LD_ADDR_VAR 0 2
39374: PUSH
39375: LD_VAR 0 4
39379: PUSH
39380: FOR_IN
39381: IFFALSE 39427
// for j = 1 to 3 do
39383: LD_ADDR_VAR 0 3
39387: PUSH
39388: DOUBLE
39389: LD_INT 1
39391: DEC
39392: ST_TO_ADDR
39393: LD_INT 3
39395: PUSH
39396: FOR_TO
39397: IFFALSE 39423
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39399: LD_VAR 0 2
39403: PPUSH
39404: CALL_OW 274
39408: PPUSH
39409: LD_VAR 0 3
39413: PPUSH
39414: LD_INT 99999
39416: PPUSH
39417: CALL_OW 277
39421: GO 39396
39423: POP
39424: POP
39425: GO 39380
39427: POP
39428: POP
// end ;
39429: LD_VAR 0 1
39433: RET
// export function hHackSetLevel10 ; var i , j ; begin
39434: LD_INT 0
39436: PPUSH
39437: PPUSH
39438: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39439: LD_ADDR_VAR 0 2
39443: PUSH
39444: LD_INT 21
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PPUSH
39454: CALL_OW 69
39458: PUSH
39459: FOR_IN
39460: IFFALSE 39512
// if IsSelected ( i ) then
39462: LD_VAR 0 2
39466: PPUSH
39467: CALL_OW 306
39471: IFFALSE 39510
// begin for j := 1 to 4 do
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: DOUBLE
39479: LD_INT 1
39481: DEC
39482: ST_TO_ADDR
39483: LD_INT 4
39485: PUSH
39486: FOR_TO
39487: IFFALSE 39508
// SetSkill ( i , j , 10 ) ;
39489: LD_VAR 0 2
39493: PPUSH
39494: LD_VAR 0 3
39498: PPUSH
39499: LD_INT 10
39501: PPUSH
39502: CALL_OW 237
39506: GO 39486
39508: POP
39509: POP
// end ;
39510: GO 39459
39512: POP
39513: POP
// end ;
39514: LD_VAR 0 1
39518: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39519: LD_INT 0
39521: PPUSH
39522: PPUSH
39523: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39524: LD_ADDR_VAR 0 2
39528: PUSH
39529: LD_INT 22
39531: PUSH
39532: LD_OWVAR 2
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 21
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PPUSH
39555: CALL_OW 69
39559: PUSH
39560: FOR_IN
39561: IFFALSE 39602
// begin for j := 1 to 4 do
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: DOUBLE
39569: LD_INT 1
39571: DEC
39572: ST_TO_ADDR
39573: LD_INT 4
39575: PUSH
39576: FOR_TO
39577: IFFALSE 39598
// SetSkill ( i , j , 10 ) ;
39579: LD_VAR 0 2
39583: PPUSH
39584: LD_VAR 0 3
39588: PPUSH
39589: LD_INT 10
39591: PPUSH
39592: CALL_OW 237
39596: GO 39576
39598: POP
39599: POP
// end ;
39600: GO 39560
39602: POP
39603: POP
// end ;
39604: LD_VAR 0 1
39608: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39609: LD_INT 0
39611: PPUSH
// uc_side := your_side ;
39612: LD_ADDR_OWVAR 20
39616: PUSH
39617: LD_OWVAR 2
39621: ST_TO_ADDR
// uc_nation := nation ;
39622: LD_ADDR_OWVAR 21
39626: PUSH
39627: LD_VAR 0 1
39631: ST_TO_ADDR
// InitHc ;
39632: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39636: LD_INT 0
39638: PPUSH
39639: LD_VAR 0 2
39643: PPUSH
39644: LD_VAR 0 3
39648: PPUSH
39649: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39653: LD_VAR 0 4
39657: PPUSH
39658: LD_VAR 0 5
39662: PPUSH
39663: CALL_OW 428
39667: PUSH
39668: LD_INT 0
39670: EQUAL
39671: IFFALSE 39695
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39673: CALL_OW 44
39677: PPUSH
39678: LD_VAR 0 4
39682: PPUSH
39683: LD_VAR 0 5
39687: PPUSH
39688: LD_INT 1
39690: PPUSH
39691: CALL_OW 48
// end ;
39695: LD_VAR 0 6
39699: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39700: LD_INT 0
39702: PPUSH
39703: PPUSH
// uc_side := your_side ;
39704: LD_ADDR_OWVAR 20
39708: PUSH
39709: LD_OWVAR 2
39713: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39714: LD_VAR 0 1
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: LD_INT 4
39730: PUSH
39731: LD_INT 5
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: IN
39741: IFFALSE 39753
// uc_nation := nation_american else
39743: LD_ADDR_OWVAR 21
39747: PUSH
39748: LD_INT 1
39750: ST_TO_ADDR
39751: GO 39796
// if chassis in [ 11 , 12 , 13 , 14 ] then
39753: LD_VAR 0 1
39757: PUSH
39758: LD_INT 11
39760: PUSH
39761: LD_INT 12
39763: PUSH
39764: LD_INT 13
39766: PUSH
39767: LD_INT 14
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: IN
39776: IFFALSE 39788
// uc_nation := nation_arabian else
39778: LD_ADDR_OWVAR 21
39782: PUSH
39783: LD_INT 2
39785: ST_TO_ADDR
39786: GO 39796
// uc_nation := nation_russian ;
39788: LD_ADDR_OWVAR 21
39792: PUSH
39793: LD_INT 3
39795: ST_TO_ADDR
// vc_chassis := chassis ;
39796: LD_ADDR_OWVAR 37
39800: PUSH
39801: LD_VAR 0 1
39805: ST_TO_ADDR
// vc_engine := engine ;
39806: LD_ADDR_OWVAR 39
39810: PUSH
39811: LD_VAR 0 2
39815: ST_TO_ADDR
// vc_control := control ;
39816: LD_ADDR_OWVAR 38
39820: PUSH
39821: LD_VAR 0 3
39825: ST_TO_ADDR
// vc_weapon := weapon ;
39826: LD_ADDR_OWVAR 40
39830: PUSH
39831: LD_VAR 0 4
39835: ST_TO_ADDR
// un := CreateVehicle ;
39836: LD_ADDR_VAR 0 8
39840: PUSH
39841: CALL_OW 45
39845: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39846: LD_VAR 0 8
39850: PPUSH
39851: LD_INT 0
39853: PPUSH
39854: LD_INT 5
39856: PPUSH
39857: CALL_OW 12
39861: PPUSH
39862: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39866: LD_VAR 0 8
39870: PPUSH
39871: LD_VAR 0 5
39875: PPUSH
39876: LD_VAR 0 6
39880: PPUSH
39881: LD_INT 1
39883: PPUSH
39884: CALL_OW 48
// end ;
39888: LD_VAR 0 7
39892: RET
// export hInvincible ; every 1 do
39893: GO 39895
39895: DISABLE
// hInvincible := [ ] ;
39896: LD_ADDR_EXP 117
39900: PUSH
39901: EMPTY
39902: ST_TO_ADDR
39903: END
// every 10 do var i ;
39904: GO 39906
39906: DISABLE
39907: LD_INT 0
39909: PPUSH
// begin enable ;
39910: ENABLE
// if not hInvincible then
39911: LD_EXP 117
39915: NOT
39916: IFFALSE 39920
// exit ;
39918: GO 39964
// for i in hInvincible do
39920: LD_ADDR_VAR 0 1
39924: PUSH
39925: LD_EXP 117
39929: PUSH
39930: FOR_IN
39931: IFFALSE 39962
// if GetLives ( i ) < 1000 then
39933: LD_VAR 0 1
39937: PPUSH
39938: CALL_OW 256
39942: PUSH
39943: LD_INT 1000
39945: LESS
39946: IFFALSE 39960
// SetLives ( i , 1000 ) ;
39948: LD_VAR 0 1
39952: PPUSH
39953: LD_INT 1000
39955: PPUSH
39956: CALL_OW 234
39960: GO 39930
39962: POP
39963: POP
// end ;
39964: PPOPN 1
39966: END
// export function hHackInvincible ; var i ; begin
39967: LD_INT 0
39969: PPUSH
39970: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39971: LD_ADDR_VAR 0 2
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 21
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 21
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: PPUSH
40004: CALL_OW 69
40008: PUSH
40009: FOR_IN
40010: IFFALSE 40071
// if IsSelected ( i ) then
40012: LD_VAR 0 2
40016: PPUSH
40017: CALL_OW 306
40021: IFFALSE 40069
// begin if i in hInvincible then
40023: LD_VAR 0 2
40027: PUSH
40028: LD_EXP 117
40032: IN
40033: IFFALSE 40053
// hInvincible := hInvincible diff i else
40035: LD_ADDR_EXP 117
40039: PUSH
40040: LD_EXP 117
40044: PUSH
40045: LD_VAR 0 2
40049: DIFF
40050: ST_TO_ADDR
40051: GO 40069
// hInvincible := hInvincible union i ;
40053: LD_ADDR_EXP 117
40057: PUSH
40058: LD_EXP 117
40062: PUSH
40063: LD_VAR 0 2
40067: UNION
40068: ST_TO_ADDR
// end ;
40069: GO 40009
40071: POP
40072: POP
// end ;
40073: LD_VAR 0 1
40077: RET
// export function hHackInvisible ; var i , j ; begin
40078: LD_INT 0
40080: PPUSH
40081: PPUSH
40082: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40083: LD_ADDR_VAR 0 2
40087: PUSH
40088: LD_INT 21
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PPUSH
40098: CALL_OW 69
40102: PUSH
40103: FOR_IN
40104: IFFALSE 40128
// if IsSelected ( i ) then
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL_OW 306
40115: IFFALSE 40126
// ComForceInvisible ( i ) ;
40117: LD_VAR 0 2
40121: PPUSH
40122: CALL_OW 496
40126: GO 40103
40128: POP
40129: POP
// end ;
40130: LD_VAR 0 1
40134: RET
// export function hHackChangeYourSide ; begin
40135: LD_INT 0
40137: PPUSH
// if your_side = 8 then
40138: LD_OWVAR 2
40142: PUSH
40143: LD_INT 8
40145: EQUAL
40146: IFFALSE 40158
// your_side := 0 else
40148: LD_ADDR_OWVAR 2
40152: PUSH
40153: LD_INT 0
40155: ST_TO_ADDR
40156: GO 40172
// your_side := your_side + 1 ;
40158: LD_ADDR_OWVAR 2
40162: PUSH
40163: LD_OWVAR 2
40167: PUSH
40168: LD_INT 1
40170: PLUS
40171: ST_TO_ADDR
// end ;
40172: LD_VAR 0 1
40176: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
40181: PPUSH
// for i in all_units do
40182: LD_ADDR_VAR 0 2
40186: PUSH
40187: LD_OWVAR 3
40191: PUSH
40192: FOR_IN
40193: IFFALSE 40271
// if IsSelected ( i ) then
40195: LD_VAR 0 2
40199: PPUSH
40200: CALL_OW 306
40204: IFFALSE 40269
// begin j := GetSide ( i ) ;
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_VAR 0 2
40215: PPUSH
40216: CALL_OW 255
40220: ST_TO_ADDR
// if j = 8 then
40221: LD_VAR 0 3
40225: PUSH
40226: LD_INT 8
40228: EQUAL
40229: IFFALSE 40241
// j := 0 else
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 0
40238: ST_TO_ADDR
40239: GO 40255
// j := j + 1 ;
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_VAR 0 3
40250: PUSH
40251: LD_INT 1
40253: PLUS
40254: ST_TO_ADDR
// SetSide ( i , j ) ;
40255: LD_VAR 0 2
40259: PPUSH
40260: LD_VAR 0 3
40264: PPUSH
40265: CALL_OW 235
// end ;
40269: GO 40192
40271: POP
40272: POP
// end ;
40273: LD_VAR 0 1
40277: RET
// export function hHackFog ; begin
40278: LD_INT 0
40280: PPUSH
// FogOff ( true ) ;
40281: LD_INT 1
40283: PPUSH
40284: CALL_OW 344
// end ;
40288: LD_VAR 0 1
40292: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40293: LD_INT 0
40295: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_VAR 0 2
40305: PPUSH
40306: LD_VAR 0 3
40310: PPUSH
40311: LD_INT 1
40313: PPUSH
40314: LD_INT 1
40316: PPUSH
40317: CALL_OW 483
// CenterOnXY ( x , y ) ;
40321: LD_VAR 0 2
40325: PPUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: CALL_OW 84
// end ; end_of_file
40335: LD_VAR 0 4
40339: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40340: LD_INT 0
40342: PPUSH
40343: PPUSH
// if exist_mode then
40344: LD_VAR 0 2
40348: IFFALSE 40373
// unit := CreateCharacter ( prefix & ident ) else
40350: LD_ADDR_VAR 0 5
40354: PUSH
40355: LD_VAR 0 3
40359: PUSH
40360: LD_VAR 0 1
40364: STR
40365: PPUSH
40366: CALL_OW 34
40370: ST_TO_ADDR
40371: GO 40388
// unit := NewCharacter ( ident ) ;
40373: LD_ADDR_VAR 0 5
40377: PUSH
40378: LD_VAR 0 1
40382: PPUSH
40383: CALL_OW 25
40387: ST_TO_ADDR
// result := unit ;
40388: LD_ADDR_VAR 0 4
40392: PUSH
40393: LD_VAR 0 5
40397: ST_TO_ADDR
// end ;
40398: LD_VAR 0 4
40402: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40403: LD_INT 0
40405: PPUSH
40406: PPUSH
// if not side or not nation then
40407: LD_VAR 0 1
40411: NOT
40412: PUSH
40413: LD_VAR 0 2
40417: NOT
40418: OR
40419: IFFALSE 40423
// exit ;
40421: GO 41187
// case nation of nation_american :
40423: LD_VAR 0 2
40427: PUSH
40428: LD_INT 1
40430: DOUBLE
40431: EQUAL
40432: IFTRUE 40436
40434: GO 40650
40436: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40437: LD_ADDR_VAR 0 4
40441: PUSH
40442: LD_INT 35
40444: PUSH
40445: LD_INT 45
40447: PUSH
40448: LD_INT 46
40450: PUSH
40451: LD_INT 47
40453: PUSH
40454: LD_INT 82
40456: PUSH
40457: LD_INT 83
40459: PUSH
40460: LD_INT 84
40462: PUSH
40463: LD_INT 85
40465: PUSH
40466: LD_INT 86
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 6
40477: PUSH
40478: LD_INT 15
40480: PUSH
40481: LD_INT 16
40483: PUSH
40484: LD_INT 7
40486: PUSH
40487: LD_INT 12
40489: PUSH
40490: LD_INT 13
40492: PUSH
40493: LD_INT 10
40495: PUSH
40496: LD_INT 14
40498: PUSH
40499: LD_INT 20
40501: PUSH
40502: LD_INT 21
40504: PUSH
40505: LD_INT 22
40507: PUSH
40508: LD_INT 25
40510: PUSH
40511: LD_INT 32
40513: PUSH
40514: LD_INT 27
40516: PUSH
40517: LD_INT 36
40519: PUSH
40520: LD_INT 69
40522: PUSH
40523: LD_INT 39
40525: PUSH
40526: LD_INT 34
40528: PUSH
40529: LD_INT 40
40531: PUSH
40532: LD_INT 48
40534: PUSH
40535: LD_INT 49
40537: PUSH
40538: LD_INT 50
40540: PUSH
40541: LD_INT 51
40543: PUSH
40544: LD_INT 52
40546: PUSH
40547: LD_INT 53
40549: PUSH
40550: LD_INT 54
40552: PUSH
40553: LD_INT 55
40555: PUSH
40556: LD_INT 56
40558: PUSH
40559: LD_INT 57
40561: PUSH
40562: LD_INT 58
40564: PUSH
40565: LD_INT 59
40567: PUSH
40568: LD_INT 60
40570: PUSH
40571: LD_INT 61
40573: PUSH
40574: LD_INT 62
40576: PUSH
40577: LD_INT 80
40579: PUSH
40580: LD_INT 82
40582: PUSH
40583: LD_INT 83
40585: PUSH
40586: LD_INT 84
40588: PUSH
40589: LD_INT 85
40591: PUSH
40592: LD_INT 86
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: ST_TO_ADDR
40648: GO 41111
40650: LD_INT 2
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40880
40658: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
40659: LD_ADDR_VAR 0 4
40663: PUSH
40664: LD_INT 35
40666: PUSH
40667: LD_INT 45
40669: PUSH
40670: LD_INT 46
40672: PUSH
40673: LD_INT 47
40675: PUSH
40676: LD_INT 82
40678: PUSH
40679: LD_INT 83
40681: PUSH
40682: LD_INT 84
40684: PUSH
40685: LD_INT 85
40687: PUSH
40688: LD_INT 87
40690: PUSH
40691: LD_INT 70
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 11
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 4
40705: PUSH
40706: LD_INT 5
40708: PUSH
40709: LD_INT 6
40711: PUSH
40712: LD_INT 15
40714: PUSH
40715: LD_INT 18
40717: PUSH
40718: LD_INT 7
40720: PUSH
40721: LD_INT 17
40723: PUSH
40724: LD_INT 8
40726: PUSH
40727: LD_INT 20
40729: PUSH
40730: LD_INT 21
40732: PUSH
40733: LD_INT 22
40735: PUSH
40736: LD_INT 72
40738: PUSH
40739: LD_INT 26
40741: PUSH
40742: LD_INT 69
40744: PUSH
40745: LD_INT 39
40747: PUSH
40748: LD_INT 40
40750: PUSH
40751: LD_INT 41
40753: PUSH
40754: LD_INT 42
40756: PUSH
40757: LD_INT 43
40759: PUSH
40760: LD_INT 48
40762: PUSH
40763: LD_INT 49
40765: PUSH
40766: LD_INT 50
40768: PUSH
40769: LD_INT 51
40771: PUSH
40772: LD_INT 52
40774: PUSH
40775: LD_INT 53
40777: PUSH
40778: LD_INT 54
40780: PUSH
40781: LD_INT 55
40783: PUSH
40784: LD_INT 56
40786: PUSH
40787: LD_INT 60
40789: PUSH
40790: LD_INT 61
40792: PUSH
40793: LD_INT 62
40795: PUSH
40796: LD_INT 66
40798: PUSH
40799: LD_INT 67
40801: PUSH
40802: LD_INT 68
40804: PUSH
40805: LD_INT 81
40807: PUSH
40808: LD_INT 82
40810: PUSH
40811: LD_INT 83
40813: PUSH
40814: LD_INT 84
40816: PUSH
40817: LD_INT 85
40819: PUSH
40820: LD_INT 87
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
40878: GO 41111
40880: LD_INT 3
40882: DOUBLE
40883: EQUAL
40884: IFTRUE 40888
40886: GO 41110
40888: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40889: LD_ADDR_VAR 0 4
40893: PUSH
40894: LD_INT 46
40896: PUSH
40897: LD_INT 47
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 82
40908: PUSH
40909: LD_INT 83
40911: PUSH
40912: LD_INT 84
40914: PUSH
40915: LD_INT 85
40917: PUSH
40918: LD_INT 86
40920: PUSH
40921: LD_INT 11
40923: PUSH
40924: LD_INT 9
40926: PUSH
40927: LD_INT 20
40929: PUSH
40930: LD_INT 19
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 24
40938: PUSH
40939: LD_INT 22
40941: PUSH
40942: LD_INT 25
40944: PUSH
40945: LD_INT 28
40947: PUSH
40948: LD_INT 29
40950: PUSH
40951: LD_INT 30
40953: PUSH
40954: LD_INT 31
40956: PUSH
40957: LD_INT 37
40959: PUSH
40960: LD_INT 38
40962: PUSH
40963: LD_INT 32
40965: PUSH
40966: LD_INT 27
40968: PUSH
40969: LD_INT 33
40971: PUSH
40972: LD_INT 69
40974: PUSH
40975: LD_INT 39
40977: PUSH
40978: LD_INT 34
40980: PUSH
40981: LD_INT 40
40983: PUSH
40984: LD_INT 71
40986: PUSH
40987: LD_INT 23
40989: PUSH
40990: LD_INT 44
40992: PUSH
40993: LD_INT 48
40995: PUSH
40996: LD_INT 49
40998: PUSH
40999: LD_INT 50
41001: PUSH
41002: LD_INT 51
41004: PUSH
41005: LD_INT 52
41007: PUSH
41008: LD_INT 53
41010: PUSH
41011: LD_INT 54
41013: PUSH
41014: LD_INT 55
41016: PUSH
41017: LD_INT 56
41019: PUSH
41020: LD_INT 57
41022: PUSH
41023: LD_INT 58
41025: PUSH
41026: LD_INT 59
41028: PUSH
41029: LD_INT 63
41031: PUSH
41032: LD_INT 64
41034: PUSH
41035: LD_INT 65
41037: PUSH
41038: LD_INT 82
41040: PUSH
41041: LD_INT 83
41043: PUSH
41044: LD_INT 84
41046: PUSH
41047: LD_INT 85
41049: PUSH
41050: LD_INT 86
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
41108: GO 41111
41110: POP
// if state > - 1 and state < 3 then
41111: LD_VAR 0 3
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: GREATER
41120: PUSH
41121: LD_VAR 0 3
41125: PUSH
41126: LD_INT 3
41128: LESS
41129: AND
41130: IFFALSE 41187
// for i in result do
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_VAR 0 4
41141: PUSH
41142: FOR_IN
41143: IFFALSE 41185
// if GetTech ( i , side ) <> state then
41145: LD_VAR 0 5
41149: PPUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 321
41159: PUSH
41160: LD_VAR 0 3
41164: NONEQUAL
41165: IFFALSE 41183
// result := result diff i ;
41167: LD_ADDR_VAR 0 4
41171: PUSH
41172: LD_VAR 0 4
41176: PUSH
41177: LD_VAR 0 5
41181: DIFF
41182: ST_TO_ADDR
41183: GO 41142
41185: POP
41186: POP
// end ;
41187: LD_VAR 0 4
41191: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41192: LD_INT 0
41194: PPUSH
41195: PPUSH
41196: PPUSH
// result := true ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_INT 1
41204: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41205: LD_ADDR_VAR 0 5
41209: PUSH
41210: LD_VAR 0 2
41214: PPUSH
41215: CALL_OW 480
41219: ST_TO_ADDR
// if not tmp then
41220: LD_VAR 0 5
41224: NOT
41225: IFFALSE 41229
// exit ;
41227: GO 41278
// for i in tmp do
41229: LD_ADDR_VAR 0 4
41233: PUSH
41234: LD_VAR 0 5
41238: PUSH
41239: FOR_IN
41240: IFFALSE 41276
// if GetTech ( i , side ) <> state_researched then
41242: LD_VAR 0 4
41246: PPUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 321
41256: PUSH
41257: LD_INT 2
41259: NONEQUAL
41260: IFFALSE 41274
// begin result := false ;
41262: LD_ADDR_VAR 0 3
41266: PUSH
41267: LD_INT 0
41269: ST_TO_ADDR
// exit ;
41270: POP
41271: POP
41272: GO 41278
// end ;
41274: GO 41239
41276: POP
41277: POP
// end ;
41278: LD_VAR 0 3
41282: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41298: LD_VAR 0 1
41302: NOT
41303: PUSH
41304: LD_VAR 0 1
41308: PPUSH
41309: CALL_OW 257
41313: PUSH
41314: LD_INT 9
41316: NONEQUAL
41317: OR
41318: IFFALSE 41322
// exit ;
41320: GO 41895
// side := GetSide ( unit ) ;
41322: LD_ADDR_VAR 0 9
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 255
41336: ST_TO_ADDR
// tech_space := tech_spacanom ;
41337: LD_ADDR_VAR 0 12
41341: PUSH
41342: LD_INT 29
41344: ST_TO_ADDR
// tech_time := tech_taurad ;
41345: LD_ADDR_VAR 0 13
41349: PUSH
41350: LD_INT 28
41352: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41353: LD_ADDR_VAR 0 11
41357: PUSH
41358: LD_VAR 0 1
41362: PPUSH
41363: CALL_OW 310
41367: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41368: LD_VAR 0 11
41372: PPUSH
41373: CALL_OW 247
41377: PUSH
41378: LD_INT 2
41380: EQUAL
41381: IFFALSE 41385
// exit ;
41383: GO 41895
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41385: LD_ADDR_VAR 0 8
41389: PUSH
41390: LD_INT 81
41392: PUSH
41393: LD_VAR 0 9
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: LD_INT 21
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PPUSH
41423: CALL_OW 69
41427: ST_TO_ADDR
// if not tmp then
41428: LD_VAR 0 8
41432: NOT
41433: IFFALSE 41437
// exit ;
41435: GO 41895
// if in_unit then
41437: LD_VAR 0 11
41441: IFFALSE 41465
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41443: LD_ADDR_VAR 0 10
41447: PUSH
41448: LD_VAR 0 8
41452: PPUSH
41453: LD_VAR 0 11
41457: PPUSH
41458: CALL_OW 74
41462: ST_TO_ADDR
41463: GO 41485
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41465: LD_ADDR_VAR 0 10
41469: PUSH
41470: LD_VAR 0 8
41474: PPUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 74
41484: ST_TO_ADDR
// if not enemy then
41485: LD_VAR 0 10
41489: NOT
41490: IFFALSE 41494
// exit ;
41492: GO 41895
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41494: LD_VAR 0 11
41498: PUSH
41499: LD_VAR 0 11
41503: PPUSH
41504: LD_VAR 0 10
41508: PPUSH
41509: CALL_OW 296
41513: PUSH
41514: LD_INT 13
41516: GREATER
41517: AND
41518: PUSH
41519: LD_VAR 0 1
41523: PPUSH
41524: LD_VAR 0 10
41528: PPUSH
41529: CALL_OW 296
41533: PUSH
41534: LD_INT 12
41536: GREATER
41537: OR
41538: IFFALSE 41542
// exit ;
41540: GO 41895
// missile := [ 1 ] ;
41542: LD_ADDR_VAR 0 14
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41553: LD_VAR 0 9
41557: PPUSH
41558: LD_VAR 0 12
41562: PPUSH
41563: CALL_OW 325
41567: IFFALSE 41596
// missile := Insert ( missile , missile + 1 , 2 ) ;
41569: LD_ADDR_VAR 0 14
41573: PUSH
41574: LD_VAR 0 14
41578: PPUSH
41579: LD_VAR 0 14
41583: PUSH
41584: LD_INT 1
41586: PLUS
41587: PPUSH
41588: LD_INT 2
41590: PPUSH
41591: CALL_OW 2
41595: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41596: LD_VAR 0 9
41600: PPUSH
41601: LD_VAR 0 13
41605: PPUSH
41606: CALL_OW 325
41610: PUSH
41611: LD_VAR 0 10
41615: PPUSH
41616: CALL_OW 255
41620: PPUSH
41621: LD_VAR 0 13
41625: PPUSH
41626: CALL_OW 325
41630: NOT
41631: AND
41632: IFFALSE 41661
// missile := Insert ( missile , missile + 1 , 3 ) ;
41634: LD_ADDR_VAR 0 14
41638: PUSH
41639: LD_VAR 0 14
41643: PPUSH
41644: LD_VAR 0 14
41648: PUSH
41649: LD_INT 1
41651: PLUS
41652: PPUSH
41653: LD_INT 3
41655: PPUSH
41656: CALL_OW 2
41660: ST_TO_ADDR
// if missile < 2 then
41661: LD_VAR 0 14
41665: PUSH
41666: LD_INT 2
41668: LESS
41669: IFFALSE 41673
// exit ;
41671: GO 41895
// x := GetX ( enemy ) ;
41673: LD_ADDR_VAR 0 4
41677: PUSH
41678: LD_VAR 0 10
41682: PPUSH
41683: CALL_OW 250
41687: ST_TO_ADDR
// y := GetY ( enemy ) ;
41688: LD_ADDR_VAR 0 5
41692: PUSH
41693: LD_VAR 0 10
41697: PPUSH
41698: CALL_OW 251
41702: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41703: LD_ADDR_VAR 0 6
41707: PUSH
41708: LD_VAR 0 4
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PPUSH
41717: LD_INT 1
41719: PPUSH
41720: CALL_OW 12
41724: PLUS
41725: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41726: LD_ADDR_VAR 0 7
41730: PUSH
41731: LD_VAR 0 5
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PPUSH
41740: LD_INT 1
41742: PPUSH
41743: CALL_OW 12
41747: PLUS
41748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41749: LD_VAR 0 6
41753: PPUSH
41754: LD_VAR 0 7
41758: PPUSH
41759: CALL_OW 488
41763: NOT
41764: IFFALSE 41786
// begin _x := x ;
41766: LD_ADDR_VAR 0 6
41770: PUSH
41771: LD_VAR 0 4
41775: ST_TO_ADDR
// _y := y ;
41776: LD_ADDR_VAR 0 7
41780: PUSH
41781: LD_VAR 0 5
41785: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41786: LD_ADDR_VAR 0 3
41790: PUSH
41791: LD_INT 1
41793: PPUSH
41794: LD_VAR 0 14
41798: PPUSH
41799: CALL_OW 12
41803: ST_TO_ADDR
// case i of 1 :
41804: LD_VAR 0 3
41808: PUSH
41809: LD_INT 1
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41817
41815: GO 41834
41817: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41818: LD_VAR 0 1
41822: PPUSH
41823: LD_VAR 0 10
41827: PPUSH
41828: CALL_OW 115
41832: GO 41895
41834: LD_INT 2
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41842
41840: GO 41864
41842: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41843: LD_VAR 0 1
41847: PPUSH
41848: LD_VAR 0 6
41852: PPUSH
41853: LD_VAR 0 7
41857: PPUSH
41858: CALL_OW 153
41862: GO 41895
41864: LD_INT 3
41866: DOUBLE
41867: EQUAL
41868: IFTRUE 41872
41870: GO 41894
41872: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41873: LD_VAR 0 1
41877: PPUSH
41878: LD_VAR 0 6
41882: PPUSH
41883: LD_VAR 0 7
41887: PPUSH
41888: CALL_OW 154
41892: GO 41895
41894: POP
// end ;
41895: LD_VAR 0 2
41899: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41900: LD_INT 0
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
// if not unit or not building then
41908: LD_VAR 0 1
41912: NOT
41913: PUSH
41914: LD_VAR 0 2
41918: NOT
41919: OR
41920: IFFALSE 41924
// exit ;
41922: GO 42082
// x := GetX ( building ) ;
41924: LD_ADDR_VAR 0 5
41928: PUSH
41929: LD_VAR 0 2
41933: PPUSH
41934: CALL_OW 250
41938: ST_TO_ADDR
// y := GetY ( building ) ;
41939: LD_ADDR_VAR 0 6
41943: PUSH
41944: LD_VAR 0 2
41948: PPUSH
41949: CALL_OW 251
41953: ST_TO_ADDR
// for i = 0 to 5 do
41954: LD_ADDR_VAR 0 4
41958: PUSH
41959: DOUBLE
41960: LD_INT 0
41962: DEC
41963: ST_TO_ADDR
41964: LD_INT 5
41966: PUSH
41967: FOR_TO
41968: IFFALSE 42080
// begin _x := ShiftX ( x , i , 3 ) ;
41970: LD_ADDR_VAR 0 7
41974: PUSH
41975: LD_VAR 0 5
41979: PPUSH
41980: LD_VAR 0 4
41984: PPUSH
41985: LD_INT 3
41987: PPUSH
41988: CALL_OW 272
41992: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41993: LD_ADDR_VAR 0 8
41997: PUSH
41998: LD_VAR 0 6
42002: PPUSH
42003: LD_VAR 0 4
42007: PPUSH
42008: LD_INT 3
42010: PPUSH
42011: CALL_OW 273
42015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42016: LD_VAR 0 7
42020: PPUSH
42021: LD_VAR 0 8
42025: PPUSH
42026: CALL_OW 488
42030: NOT
42031: IFFALSE 42035
// continue ;
42033: GO 41967
// if HexInfo ( _x , _y ) = 0 then
42035: LD_VAR 0 7
42039: PPUSH
42040: LD_VAR 0 8
42044: PPUSH
42045: CALL_OW 428
42049: PUSH
42050: LD_INT 0
42052: EQUAL
42053: IFFALSE 42078
// begin ComMoveXY ( unit , _x , _y ) ;
42055: LD_VAR 0 1
42059: PPUSH
42060: LD_VAR 0 7
42064: PPUSH
42065: LD_VAR 0 8
42069: PPUSH
42070: CALL_OW 111
// exit ;
42074: POP
42075: POP
42076: GO 42082
// end ; end ;
42078: GO 41967
42080: POP
42081: POP
// end ;
42082: LD_VAR 0 3
42086: RET
// export function ScanBase ( side , base_area ) ; begin
42087: LD_INT 0
42089: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_VAR 0 2
42099: PPUSH
42100: LD_INT 81
42102: PUSH
42103: LD_VAR 0 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PPUSH
42112: CALL_OW 70
42116: ST_TO_ADDR
// end ;
42117: LD_VAR 0 3
42121: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42122: LD_INT 0
42124: PPUSH
42125: PPUSH
42126: PPUSH
42127: PPUSH
// result := false ;
42128: LD_ADDR_VAR 0 2
42132: PUSH
42133: LD_INT 0
42135: ST_TO_ADDR
// side := GetSide ( unit ) ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_VAR 0 1
42145: PPUSH
42146: CALL_OW 255
42150: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42151: LD_ADDR_VAR 0 4
42155: PUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 248
42165: ST_TO_ADDR
// case nat of 1 :
42166: LD_VAR 0 4
42170: PUSH
42171: LD_INT 1
42173: DOUBLE
42174: EQUAL
42175: IFTRUE 42179
42177: GO 42190
42179: POP
// tech := tech_lassight ; 2 :
42180: LD_ADDR_VAR 0 5
42184: PUSH
42185: LD_INT 12
42187: ST_TO_ADDR
42188: GO 42229
42190: LD_INT 2
42192: DOUBLE
42193: EQUAL
42194: IFTRUE 42198
42196: GO 42209
42198: POP
// tech := tech_mortar ; 3 :
42199: LD_ADDR_VAR 0 5
42203: PUSH
42204: LD_INT 41
42206: ST_TO_ADDR
42207: GO 42229
42209: LD_INT 3
42211: DOUBLE
42212: EQUAL
42213: IFTRUE 42217
42215: GO 42228
42217: POP
// tech := tech_bazooka ; end ;
42218: LD_ADDR_VAR 0 5
42222: PUSH
42223: LD_INT 44
42225: ST_TO_ADDR
42226: GO 42229
42228: POP
// if Researched ( side , tech ) then
42229: LD_VAR 0 3
42233: PPUSH
42234: LD_VAR 0 5
42238: PPUSH
42239: CALL_OW 325
42243: IFFALSE 42270
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42245: LD_ADDR_VAR 0 2
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: LD_INT 8
42255: PUSH
42256: LD_INT 9
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: PUSH
42264: LD_VAR 0 4
42268: ARRAY
42269: ST_TO_ADDR
// end ;
42270: LD_VAR 0 2
42274: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42275: LD_INT 0
42277: PPUSH
42278: PPUSH
42279: PPUSH
// if not mines then
42280: LD_VAR 0 2
42284: NOT
42285: IFFALSE 42289
// exit ;
42287: GO 42433
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42289: LD_ADDR_VAR 0 5
42293: PUSH
42294: LD_INT 81
42296: PUSH
42297: LD_VAR 0 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 3
42308: PUSH
42309: LD_INT 21
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PPUSH
42327: CALL_OW 69
42331: ST_TO_ADDR
// for i in mines do
42332: LD_ADDR_VAR 0 4
42336: PUSH
42337: LD_VAR 0 2
42341: PUSH
42342: FOR_IN
42343: IFFALSE 42431
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42345: LD_VAR 0 4
42349: PUSH
42350: LD_INT 1
42352: ARRAY
42353: PPUSH
42354: LD_VAR 0 4
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: PPUSH
42363: CALL_OW 458
42367: NOT
42368: IFFALSE 42372
// continue ;
42370: GO 42342
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42372: LD_VAR 0 4
42376: PUSH
42377: LD_INT 1
42379: ARRAY
42380: PPUSH
42381: LD_VAR 0 4
42385: PUSH
42386: LD_INT 2
42388: ARRAY
42389: PPUSH
42390: CALL_OW 428
42394: PUSH
42395: LD_VAR 0 5
42399: IN
42400: IFFALSE 42429
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42402: LD_VAR 0 4
42406: PUSH
42407: LD_INT 1
42409: ARRAY
42410: PPUSH
42411: LD_VAR 0 4
42415: PUSH
42416: LD_INT 2
42418: ARRAY
42419: PPUSH
42420: LD_VAR 0 1
42424: PPUSH
42425: CALL_OW 456
// end ;
42429: GO 42342
42431: POP
42432: POP
// end ;
42433: LD_VAR 0 3
42437: RET
// export function Count ( array ) ; var i ; begin
42438: LD_INT 0
42440: PPUSH
42441: PPUSH
// result := 0 ;
42442: LD_ADDR_VAR 0 2
42446: PUSH
42447: LD_INT 0
42449: ST_TO_ADDR
// for i in array do
42450: LD_ADDR_VAR 0 3
42454: PUSH
42455: LD_VAR 0 1
42459: PUSH
42460: FOR_IN
42461: IFFALSE 42485
// if i then
42463: LD_VAR 0 3
42467: IFFALSE 42483
// result := result + 1 ;
42469: LD_ADDR_VAR 0 2
42473: PUSH
42474: LD_VAR 0 2
42478: PUSH
42479: LD_INT 1
42481: PLUS
42482: ST_TO_ADDR
42483: GO 42460
42485: POP
42486: POP
// end ;
42487: LD_VAR 0 2
42491: RET
// export function IsEmpty ( building ) ; begin
42492: LD_INT 0
42494: PPUSH
// if not building then
42495: LD_VAR 0 1
42499: NOT
42500: IFFALSE 42504
// exit ;
42502: GO 42547
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42504: LD_ADDR_VAR 0 2
42508: PUSH
42509: LD_VAR 0 1
42513: PUSH
42514: LD_INT 22
42516: PUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: CALL_OW 255
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 58
42533: PUSH
42534: EMPTY
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PPUSH
42541: CALL_OW 69
42545: IN
42546: ST_TO_ADDR
// end ;
42547: LD_VAR 0 2
42551: RET
// export function IsNotFull ( building ) ; begin
42552: LD_INT 0
42554: PPUSH
// if not building then
42555: LD_VAR 0 1
42559: NOT
42560: IFFALSE 42564
// exit ;
42562: GO 42583
// result := UnitsInside ( building ) < 6 ;
42564: LD_ADDR_VAR 0 2
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 313
42578: PUSH
42579: LD_INT 6
42581: LESS
42582: ST_TO_ADDR
// end ;
42583: LD_VAR 0 2
42587: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42588: LD_INT 0
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
// tmp := [ ] ;
42594: LD_ADDR_VAR 0 3
42598: PUSH
42599: EMPTY
42600: ST_TO_ADDR
// list := [ ] ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: EMPTY
42607: ST_TO_ADDR
// for i = 16 to 25 do
42608: LD_ADDR_VAR 0 4
42612: PUSH
42613: DOUBLE
42614: LD_INT 16
42616: DEC
42617: ST_TO_ADDR
42618: LD_INT 25
42620: PUSH
42621: FOR_TO
42622: IFFALSE 42695
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42624: LD_ADDR_VAR 0 3
42628: PUSH
42629: LD_VAR 0 3
42633: PUSH
42634: LD_INT 22
42636: PUSH
42637: LD_VAR 0 1
42641: PPUSH
42642: CALL_OW 255
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 91
42653: PUSH
42654: LD_VAR 0 1
42658: PUSH
42659: LD_INT 6
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 30
42669: PUSH
42670: LD_VAR 0 4
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: PPUSH
42687: CALL_OW 69
42691: ADD
42692: ST_TO_ADDR
42693: GO 42621
42695: POP
42696: POP
// for i = 1 to tmp do
42697: LD_ADDR_VAR 0 4
42701: PUSH
42702: DOUBLE
42703: LD_INT 1
42705: DEC
42706: ST_TO_ADDR
42707: LD_VAR 0 3
42711: PUSH
42712: FOR_TO
42713: IFFALSE 42801
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42715: LD_ADDR_VAR 0 5
42719: PUSH
42720: LD_VAR 0 5
42724: PUSH
42725: LD_VAR 0 3
42729: PUSH
42730: LD_VAR 0 4
42734: ARRAY
42735: PPUSH
42736: CALL_OW 266
42740: PUSH
42741: LD_VAR 0 3
42745: PUSH
42746: LD_VAR 0 4
42750: ARRAY
42751: PPUSH
42752: CALL_OW 250
42756: PUSH
42757: LD_VAR 0 3
42761: PUSH
42762: LD_VAR 0 4
42766: ARRAY
42767: PPUSH
42768: CALL_OW 251
42772: PUSH
42773: LD_VAR 0 3
42777: PUSH
42778: LD_VAR 0 4
42782: ARRAY
42783: PPUSH
42784: CALL_OW 254
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: PUSH
42795: EMPTY
42796: LIST
42797: ADD
42798: ST_TO_ADDR
42799: GO 42712
42801: POP
42802: POP
// result := list ;
42803: LD_ADDR_VAR 0 2
42807: PUSH
42808: LD_VAR 0 5
42812: ST_TO_ADDR
// end ;
42813: LD_VAR 0 2
42817: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42818: LD_INT 0
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
// if not factory then
42827: LD_VAR 0 1
42831: NOT
42832: IFFALSE 42836
// exit ;
42834: GO 43429
// if control = control_apeman then
42836: LD_VAR 0 4
42840: PUSH
42841: LD_INT 5
42843: EQUAL
42844: IFFALSE 42953
// begin tmp := UnitsInside ( factory ) ;
42846: LD_ADDR_VAR 0 8
42850: PUSH
42851: LD_VAR 0 1
42855: PPUSH
42856: CALL_OW 313
42860: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42861: LD_VAR 0 8
42865: PPUSH
42866: LD_INT 25
42868: PUSH
42869: LD_INT 12
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PPUSH
42876: CALL_OW 72
42880: NOT
42881: IFFALSE 42891
// control := control_manual ;
42883: LD_ADDR_VAR 0 4
42887: PUSH
42888: LD_INT 1
42890: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42891: LD_ADDR_VAR 0 8
42895: PUSH
42896: LD_VAR 0 1
42900: PPUSH
42901: CALL 42588 0 1
42905: ST_TO_ADDR
// if tmp then
42906: LD_VAR 0 8
42910: IFFALSE 42953
// begin for i in tmp do
42912: LD_ADDR_VAR 0 7
42916: PUSH
42917: LD_VAR 0 8
42921: PUSH
42922: FOR_IN
42923: IFFALSE 42951
// if i [ 1 ] = b_ext_radio then
42925: LD_VAR 0 7
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: PUSH
42934: LD_INT 22
42936: EQUAL
42937: IFFALSE 42949
// begin control := control_remote ;
42939: LD_ADDR_VAR 0 4
42943: PUSH
42944: LD_INT 2
42946: ST_TO_ADDR
// break ;
42947: GO 42951
// end ;
42949: GO 42922
42951: POP
42952: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42953: LD_VAR 0 1
42957: PPUSH
42958: LD_VAR 0 2
42962: PPUSH
42963: LD_VAR 0 3
42967: PPUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: LD_VAR 0 5
42977: PPUSH
42978: CALL_OW 448
42982: IFFALSE 43017
// begin result := [ chassis , engine , control , weapon ] ;
42984: LD_ADDR_VAR 0 6
42988: PUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_VAR 0 3
42998: PUSH
42999: LD_VAR 0 4
43003: PUSH
43004: LD_VAR 0 5
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
// exit ;
43015: GO 43429
// end ; _chassis := AvailableChassisList ( factory ) ;
43017: LD_ADDR_VAR 0 9
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 475
43031: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43032: LD_ADDR_VAR 0 11
43036: PUSH
43037: LD_VAR 0 1
43041: PPUSH
43042: CALL_OW 476
43046: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43047: LD_ADDR_VAR 0 12
43051: PUSH
43052: LD_VAR 0 1
43056: PPUSH
43057: CALL_OW 477
43061: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43062: LD_ADDR_VAR 0 10
43066: PUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 478
43076: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43077: LD_VAR 0 9
43081: NOT
43082: PUSH
43083: LD_VAR 0 11
43087: NOT
43088: OR
43089: PUSH
43090: LD_VAR 0 12
43094: NOT
43095: OR
43096: PUSH
43097: LD_VAR 0 10
43101: NOT
43102: OR
43103: IFFALSE 43138
// begin result := [ chassis , engine , control , weapon ] ;
43105: LD_ADDR_VAR 0 6
43109: PUSH
43110: LD_VAR 0 2
43114: PUSH
43115: LD_VAR 0 3
43119: PUSH
43120: LD_VAR 0 4
43124: PUSH
43125: LD_VAR 0 5
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
// exit ;
43136: GO 43429
// end ; if not chassis in _chassis then
43138: LD_VAR 0 2
43142: PUSH
43143: LD_VAR 0 9
43147: IN
43148: NOT
43149: IFFALSE 43175
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43151: LD_ADDR_VAR 0 2
43155: PUSH
43156: LD_VAR 0 9
43160: PUSH
43161: LD_INT 1
43163: PPUSH
43164: LD_VAR 0 9
43168: PPUSH
43169: CALL_OW 12
43173: ARRAY
43174: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43175: LD_VAR 0 2
43179: PPUSH
43180: LD_VAR 0 3
43184: PPUSH
43185: CALL 43434 0 2
43189: NOT
43190: IFFALSE 43249
// repeat engine := _engine [ 1 ] ;
43192: LD_ADDR_VAR 0 3
43196: PUSH
43197: LD_VAR 0 11
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43206: LD_ADDR_VAR 0 11
43210: PUSH
43211: LD_VAR 0 11
43215: PPUSH
43216: LD_INT 1
43218: PPUSH
43219: CALL_OW 3
43223: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43224: LD_VAR 0 2
43228: PPUSH
43229: LD_VAR 0 3
43233: PPUSH
43234: CALL 43434 0 2
43238: PUSH
43239: LD_VAR 0 11
43243: PUSH
43244: EMPTY
43245: EQUAL
43246: OR
43247: IFFALSE 43192
// if not control in _control then
43249: LD_VAR 0 4
43253: PUSH
43254: LD_VAR 0 12
43258: IN
43259: NOT
43260: IFFALSE 43286
// control := _control [ rand ( 1 , _control ) ] ;
43262: LD_ADDR_VAR 0 4
43266: PUSH
43267: LD_VAR 0 12
43271: PUSH
43272: LD_INT 1
43274: PPUSH
43275: LD_VAR 0 12
43279: PPUSH
43280: CALL_OW 12
43284: ARRAY
43285: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43286: LD_VAR 0 2
43290: PPUSH
43291: LD_VAR 0 5
43295: PPUSH
43296: CALL 43654 0 2
43300: NOT
43301: IFFALSE 43360
// repeat weapon := _weapon [ 1 ] ;
43303: LD_ADDR_VAR 0 5
43307: PUSH
43308: LD_VAR 0 10
43312: PUSH
43313: LD_INT 1
43315: ARRAY
43316: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43317: LD_ADDR_VAR 0 10
43321: PUSH
43322: LD_VAR 0 10
43326: PPUSH
43327: LD_INT 1
43329: PPUSH
43330: CALL_OW 3
43334: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43335: LD_VAR 0 2
43339: PPUSH
43340: LD_VAR 0 5
43344: PPUSH
43345: CALL 43654 0 2
43349: PUSH
43350: LD_VAR 0 10
43354: PUSH
43355: EMPTY
43356: EQUAL
43357: OR
43358: IFFALSE 43303
// result := [ ] ;
43360: LD_ADDR_VAR 0 6
43364: PUSH
43365: EMPTY
43366: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43367: LD_VAR 0 1
43371: PPUSH
43372: LD_VAR 0 2
43376: PPUSH
43377: LD_VAR 0 3
43381: PPUSH
43382: LD_VAR 0 4
43386: PPUSH
43387: LD_VAR 0 5
43391: PPUSH
43392: CALL_OW 448
43396: IFFALSE 43429
// result := [ chassis , engine , control , weapon ] ;
43398: LD_ADDR_VAR 0 6
43402: PUSH
43403: LD_VAR 0 2
43407: PUSH
43408: LD_VAR 0 3
43412: PUSH
43413: LD_VAR 0 4
43417: PUSH
43418: LD_VAR 0 5
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// end ;
43429: LD_VAR 0 6
43433: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43434: LD_INT 0
43436: PPUSH
// if not chassis or not engine then
43437: LD_VAR 0 1
43441: NOT
43442: PUSH
43443: LD_VAR 0 2
43447: NOT
43448: OR
43449: IFFALSE 43453
// exit ;
43451: GO 43649
// case engine of engine_solar :
43453: LD_VAR 0 2
43457: PUSH
43458: LD_INT 2
43460: DOUBLE
43461: EQUAL
43462: IFTRUE 43466
43464: GO 43504
43466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43467: LD_ADDR_VAR 0 3
43471: PUSH
43472: LD_INT 11
43474: PUSH
43475: LD_INT 12
43477: PUSH
43478: LD_INT 13
43480: PUSH
43481: LD_INT 14
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
43502: GO 43633
43504: LD_INT 1
43506: DOUBLE
43507: EQUAL
43508: IFTRUE 43512
43510: GO 43574
43512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: LD_INT 11
43520: PUSH
43521: LD_INT 12
43523: PUSH
43524: LD_INT 13
43526: PUSH
43527: LD_INT 14
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 4
43541: PUSH
43542: LD_INT 5
43544: PUSH
43545: LD_INT 21
43547: PUSH
43548: LD_INT 23
43550: PUSH
43551: LD_INT 22
43553: PUSH
43554: LD_INT 24
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
43572: GO 43633
43574: LD_INT 3
43576: DOUBLE
43577: EQUAL
43578: IFTRUE 43582
43580: GO 43632
43582: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_INT 13
43590: PUSH
43591: LD_INT 14
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 4
43602: PUSH
43603: LD_INT 5
43605: PUSH
43606: LD_INT 21
43608: PUSH
43609: LD_INT 22
43611: PUSH
43612: LD_INT 23
43614: PUSH
43615: LD_INT 24
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
43630: GO 43633
43632: POP
// result := ( chassis in result ) ;
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_VAR 0 1
43642: PUSH
43643: LD_VAR 0 3
43647: IN
43648: ST_TO_ADDR
// end ;
43649: LD_VAR 0 3
43653: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43654: LD_INT 0
43656: PPUSH
// if not chassis or not weapon then
43657: LD_VAR 0 1
43661: NOT
43662: PUSH
43663: LD_VAR 0 2
43667: NOT
43668: OR
43669: IFFALSE 43673
// exit ;
43671: GO 44699
// case weapon of us_machine_gun :
43673: LD_VAR 0 2
43677: PUSH
43678: LD_INT 2
43680: DOUBLE
43681: EQUAL
43682: IFTRUE 43686
43684: GO 43716
43686: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43687: LD_ADDR_VAR 0 3
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: LD_INT 5
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
43714: GO 44683
43716: LD_INT 3
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43754
43724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 3
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: LD_INT 5
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
43752: GO 44683
43754: LD_INT 11
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43762
43760: GO 43792
43762: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: LD_INT 4
43779: PUSH
43780: LD_INT 5
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
43790: GO 44683
43792: LD_INT 4
43794: DOUBLE
43795: EQUAL
43796: IFTRUE 43800
43798: GO 43826
43800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43801: LD_ADDR_VAR 0 3
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 4
43814: PUSH
43815: LD_INT 5
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: ST_TO_ADDR
43824: GO 44683
43826: LD_INT 5
43828: DOUBLE
43829: EQUAL
43830: IFTRUE 43834
43832: GO 43860
43834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43835: LD_ADDR_VAR 0 3
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: LD_INT 4
43848: PUSH
43849: LD_INT 5
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
43858: GO 44683
43860: LD_INT 9
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43894
43868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: LD_INT 4
43882: PUSH
43883: LD_INT 5
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
43892: GO 44683
43894: LD_INT 7
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43928
43902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: LD_INT 4
43916: PUSH
43917: LD_INT 5
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: ST_TO_ADDR
43926: GO 44683
43928: LD_INT 12
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43936
43934: GO 43962
43936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
43960: GO 44683
43962: LD_INT 13
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 43996
43970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 4
43984: PUSH
43985: LD_INT 5
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: ST_TO_ADDR
43994: GO 44683
43996: LD_INT 14
43998: DOUBLE
43999: EQUAL
44000: IFTRUE 44004
44002: GO 44022
44004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44005: LD_ADDR_VAR 0 3
44009: PUSH
44010: LD_INT 4
44012: PUSH
44013: LD_INT 5
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: ST_TO_ADDR
44020: GO 44683
44022: LD_INT 6
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44048
44030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_INT 4
44038: PUSH
44039: LD_INT 5
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: ST_TO_ADDR
44046: GO 44683
44048: LD_INT 10
44050: DOUBLE
44051: EQUAL
44052: IFTRUE 44056
44054: GO 44074
44056: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: LD_INT 5
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: ST_TO_ADDR
44072: GO 44683
44074: LD_INT 22
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 44108
44082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 11
44090: PUSH
44091: LD_INT 12
44093: PUSH
44094: LD_INT 13
44096: PUSH
44097: LD_INT 14
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
44106: GO 44683
44108: LD_INT 23
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 44142
44116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44117: LD_ADDR_VAR 0 3
44121: PUSH
44122: LD_INT 11
44124: PUSH
44125: LD_INT 12
44127: PUSH
44128: LD_INT 13
44130: PUSH
44131: LD_INT 14
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
44140: GO 44683
44142: LD_INT 24
44144: DOUBLE
44145: EQUAL
44146: IFTRUE 44150
44148: GO 44176
44150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: LD_INT 11
44158: PUSH
44159: LD_INT 12
44161: PUSH
44162: LD_INT 13
44164: PUSH
44165: LD_INT 14
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
44174: GO 44683
44176: LD_INT 30
44178: DOUBLE
44179: EQUAL
44180: IFTRUE 44184
44182: GO 44210
44184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_INT 11
44192: PUSH
44193: LD_INT 12
44195: PUSH
44196: LD_INT 13
44198: PUSH
44199: LD_INT 14
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
44208: GO 44683
44210: LD_INT 25
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44236
44218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 13
44226: PUSH
44227: LD_INT 14
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: ST_TO_ADDR
44234: GO 44683
44236: LD_INT 27
44238: DOUBLE
44239: EQUAL
44240: IFTRUE 44244
44242: GO 44262
44244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44245: LD_ADDR_VAR 0 3
44249: PUSH
44250: LD_INT 13
44252: PUSH
44253: LD_INT 14
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: ST_TO_ADDR
44260: GO 44683
44262: LD_INT 28
44264: DOUBLE
44265: EQUAL
44266: IFTRUE 44270
44268: GO 44288
44270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: LD_INT 13
44278: PUSH
44279: LD_INT 14
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: ST_TO_ADDR
44286: GO 44683
44288: LD_INT 29
44290: DOUBLE
44291: EQUAL
44292: IFTRUE 44296
44294: GO 44314
44296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_INT 13
44304: PUSH
44305: LD_INT 14
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: ST_TO_ADDR
44312: GO 44683
44314: LD_INT 31
44316: DOUBLE
44317: EQUAL
44318: IFTRUE 44322
44320: GO 44340
44322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44323: LD_ADDR_VAR 0 3
44327: PUSH
44328: LD_INT 13
44330: PUSH
44331: LD_INT 14
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: ST_TO_ADDR
44338: GO 44683
44340: LD_INT 26
44342: DOUBLE
44343: EQUAL
44344: IFTRUE 44348
44346: GO 44366
44348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44349: LD_ADDR_VAR 0 3
44353: PUSH
44354: LD_INT 13
44356: PUSH
44357: LD_INT 14
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: ST_TO_ADDR
44364: GO 44683
44366: LD_INT 42
44368: DOUBLE
44369: EQUAL
44370: IFTRUE 44374
44372: GO 44400
44374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44375: LD_ADDR_VAR 0 3
44379: PUSH
44380: LD_INT 21
44382: PUSH
44383: LD_INT 22
44385: PUSH
44386: LD_INT 23
44388: PUSH
44389: LD_INT 24
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
44398: GO 44683
44400: LD_INT 43
44402: DOUBLE
44403: EQUAL
44404: IFTRUE 44408
44406: GO 44434
44408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44409: LD_ADDR_VAR 0 3
44413: PUSH
44414: LD_INT 21
44416: PUSH
44417: LD_INT 22
44419: PUSH
44420: LD_INT 23
44422: PUSH
44423: LD_INT 24
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
44432: GO 44683
44434: LD_INT 44
44436: DOUBLE
44437: EQUAL
44438: IFTRUE 44442
44440: GO 44468
44442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44443: LD_ADDR_VAR 0 3
44447: PUSH
44448: LD_INT 21
44450: PUSH
44451: LD_INT 22
44453: PUSH
44454: LD_INT 23
44456: PUSH
44457: LD_INT 24
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: ST_TO_ADDR
44466: GO 44683
44468: LD_INT 45
44470: DOUBLE
44471: EQUAL
44472: IFTRUE 44476
44474: GO 44502
44476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44477: LD_ADDR_VAR 0 3
44481: PUSH
44482: LD_INT 21
44484: PUSH
44485: LD_INT 22
44487: PUSH
44488: LD_INT 23
44490: PUSH
44491: LD_INT 24
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: ST_TO_ADDR
44500: GO 44683
44502: LD_INT 49
44504: DOUBLE
44505: EQUAL
44506: IFTRUE 44510
44508: GO 44536
44510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44511: LD_ADDR_VAR 0 3
44515: PUSH
44516: LD_INT 21
44518: PUSH
44519: LD_INT 22
44521: PUSH
44522: LD_INT 23
44524: PUSH
44525: LD_INT 24
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: ST_TO_ADDR
44534: GO 44683
44536: LD_INT 51
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44570
44544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44545: LD_ADDR_VAR 0 3
44549: PUSH
44550: LD_INT 21
44552: PUSH
44553: LD_INT 22
44555: PUSH
44556: LD_INT 23
44558: PUSH
44559: LD_INT 24
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: ST_TO_ADDR
44568: GO 44683
44570: LD_INT 52
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44604
44578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_INT 21
44586: PUSH
44587: LD_INT 22
44589: PUSH
44590: LD_INT 23
44592: PUSH
44593: LD_INT 24
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
44602: GO 44683
44604: LD_INT 53
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44612
44610: GO 44630
44612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44613: LD_ADDR_VAR 0 3
44617: PUSH
44618: LD_INT 23
44620: PUSH
44621: LD_INT 24
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: ST_TO_ADDR
44628: GO 44683
44630: LD_INT 46
44632: DOUBLE
44633: EQUAL
44634: IFTRUE 44638
44636: GO 44656
44638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_INT 23
44646: PUSH
44647: LD_INT 24
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: ST_TO_ADDR
44654: GO 44683
44656: LD_INT 47
44658: DOUBLE
44659: EQUAL
44660: IFTRUE 44664
44662: GO 44682
44664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44665: LD_ADDR_VAR 0 3
44669: PUSH
44670: LD_INT 23
44672: PUSH
44673: LD_INT 24
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: ST_TO_ADDR
44680: GO 44683
44682: POP
// result := ( chassis in result ) ;
44683: LD_ADDR_VAR 0 3
44687: PUSH
44688: LD_VAR 0 1
44692: PUSH
44693: LD_VAR 0 3
44697: IN
44698: ST_TO_ADDR
// end ;
44699: LD_VAR 0 3
44703: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44704: LD_INT 0
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
// result := array ;
44713: LD_ADDR_VAR 0 5
44717: PUSH
44718: LD_VAR 0 1
44722: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44723: LD_VAR 0 1
44727: NOT
44728: PUSH
44729: LD_VAR 0 2
44733: NOT
44734: OR
44735: PUSH
44736: LD_VAR 0 3
44740: NOT
44741: OR
44742: PUSH
44743: LD_VAR 0 2
44747: PUSH
44748: LD_VAR 0 1
44752: GREATER
44753: OR
44754: PUSH
44755: LD_VAR 0 3
44759: PUSH
44760: LD_VAR 0 1
44764: GREATER
44765: OR
44766: IFFALSE 44770
// exit ;
44768: GO 45066
// if direction then
44770: LD_VAR 0 4
44774: IFFALSE 44838
// begin d := 1 ;
44776: LD_ADDR_VAR 0 9
44780: PUSH
44781: LD_INT 1
44783: ST_TO_ADDR
// if i_from > i_to then
44784: LD_VAR 0 2
44788: PUSH
44789: LD_VAR 0 3
44793: GREATER
44794: IFFALSE 44820
// length := ( array - i_from ) + i_to else
44796: LD_ADDR_VAR 0 11
44800: PUSH
44801: LD_VAR 0 1
44805: PUSH
44806: LD_VAR 0 2
44810: MINUS
44811: PUSH
44812: LD_VAR 0 3
44816: PLUS
44817: ST_TO_ADDR
44818: GO 44836
// length := i_to - i_from ;
44820: LD_ADDR_VAR 0 11
44824: PUSH
44825: LD_VAR 0 3
44829: PUSH
44830: LD_VAR 0 2
44834: MINUS
44835: ST_TO_ADDR
// end else
44836: GO 44899
// begin d := - 1 ;
44838: LD_ADDR_VAR 0 9
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: ST_TO_ADDR
// if i_from > i_to then
44847: LD_VAR 0 2
44851: PUSH
44852: LD_VAR 0 3
44856: GREATER
44857: IFFALSE 44877
// length := i_from - i_to else
44859: LD_ADDR_VAR 0 11
44863: PUSH
44864: LD_VAR 0 2
44868: PUSH
44869: LD_VAR 0 3
44873: MINUS
44874: ST_TO_ADDR
44875: GO 44899
// length := ( array - i_to ) + i_from ;
44877: LD_ADDR_VAR 0 11
44881: PUSH
44882: LD_VAR 0 1
44886: PUSH
44887: LD_VAR 0 3
44891: MINUS
44892: PUSH
44893: LD_VAR 0 2
44897: PLUS
44898: ST_TO_ADDR
// end ; if not length then
44899: LD_VAR 0 11
44903: NOT
44904: IFFALSE 44908
// exit ;
44906: GO 45066
// tmp := array ;
44908: LD_ADDR_VAR 0 10
44912: PUSH
44913: LD_VAR 0 1
44917: ST_TO_ADDR
// for i = 1 to length do
44918: LD_ADDR_VAR 0 6
44922: PUSH
44923: DOUBLE
44924: LD_INT 1
44926: DEC
44927: ST_TO_ADDR
44928: LD_VAR 0 11
44932: PUSH
44933: FOR_TO
44934: IFFALSE 45054
// begin for j = 1 to array do
44936: LD_ADDR_VAR 0 7
44940: PUSH
44941: DOUBLE
44942: LD_INT 1
44944: DEC
44945: ST_TO_ADDR
44946: LD_VAR 0 1
44950: PUSH
44951: FOR_TO
44952: IFFALSE 45040
// begin k := j + d ;
44954: LD_ADDR_VAR 0 8
44958: PUSH
44959: LD_VAR 0 7
44963: PUSH
44964: LD_VAR 0 9
44968: PLUS
44969: ST_TO_ADDR
// if k > array then
44970: LD_VAR 0 8
44974: PUSH
44975: LD_VAR 0 1
44979: GREATER
44980: IFFALSE 44990
// k := 1 ;
44982: LD_ADDR_VAR 0 8
44986: PUSH
44987: LD_INT 1
44989: ST_TO_ADDR
// if not k then
44990: LD_VAR 0 8
44994: NOT
44995: IFFALSE 45007
// k := array ;
44997: LD_ADDR_VAR 0 8
45001: PUSH
45002: LD_VAR 0 1
45006: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45007: LD_ADDR_VAR 0 10
45011: PUSH
45012: LD_VAR 0 10
45016: PPUSH
45017: LD_VAR 0 8
45021: PPUSH
45022: LD_VAR 0 1
45026: PUSH
45027: LD_VAR 0 7
45031: ARRAY
45032: PPUSH
45033: CALL_OW 1
45037: ST_TO_ADDR
// end ;
45038: GO 44951
45040: POP
45041: POP
// array := tmp ;
45042: LD_ADDR_VAR 0 1
45046: PUSH
45047: LD_VAR 0 10
45051: ST_TO_ADDR
// end ;
45052: GO 44933
45054: POP
45055: POP
// result := array ;
45056: LD_ADDR_VAR 0 5
45060: PUSH
45061: LD_VAR 0 1
45065: ST_TO_ADDR
// end ;
45066: LD_VAR 0 5
45070: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45071: LD_INT 0
45073: PPUSH
45074: PPUSH
// result := 0 ;
45075: LD_ADDR_VAR 0 3
45079: PUSH
45080: LD_INT 0
45082: ST_TO_ADDR
// if not array or not value in array then
45083: LD_VAR 0 1
45087: NOT
45088: PUSH
45089: LD_VAR 0 2
45093: PUSH
45094: LD_VAR 0 1
45098: IN
45099: NOT
45100: OR
45101: IFFALSE 45105
// exit ;
45103: GO 45159
// for i = 1 to array do
45105: LD_ADDR_VAR 0 4
45109: PUSH
45110: DOUBLE
45111: LD_INT 1
45113: DEC
45114: ST_TO_ADDR
45115: LD_VAR 0 1
45119: PUSH
45120: FOR_TO
45121: IFFALSE 45157
// if value = array [ i ] then
45123: LD_VAR 0 2
45127: PUSH
45128: LD_VAR 0 1
45132: PUSH
45133: LD_VAR 0 4
45137: ARRAY
45138: EQUAL
45139: IFFALSE 45155
// begin result := i ;
45141: LD_ADDR_VAR 0 3
45145: PUSH
45146: LD_VAR 0 4
45150: ST_TO_ADDR
// exit ;
45151: POP
45152: POP
45153: GO 45159
// end ;
45155: GO 45120
45157: POP
45158: POP
// end ;
45159: LD_VAR 0 3
45163: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45164: LD_INT 0
45166: PPUSH
// vc_chassis := chassis ;
45167: LD_ADDR_OWVAR 37
45171: PUSH
45172: LD_VAR 0 1
45176: ST_TO_ADDR
// vc_engine := engine ;
45177: LD_ADDR_OWVAR 39
45181: PUSH
45182: LD_VAR 0 2
45186: ST_TO_ADDR
// vc_control := control ;
45187: LD_ADDR_OWVAR 38
45191: PUSH
45192: LD_VAR 0 3
45196: ST_TO_ADDR
// vc_weapon := weapon ;
45197: LD_ADDR_OWVAR 40
45201: PUSH
45202: LD_VAR 0 4
45206: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45207: LD_ADDR_OWVAR 41
45211: PUSH
45212: LD_VAR 0 5
45216: ST_TO_ADDR
// end ;
45217: LD_VAR 0 6
45221: RET
// export function WantPlant ( unit ) ; var task ; begin
45222: LD_INT 0
45224: PPUSH
45225: PPUSH
// result := false ;
45226: LD_ADDR_VAR 0 2
45230: PUSH
45231: LD_INT 0
45233: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45234: LD_ADDR_VAR 0 3
45238: PUSH
45239: LD_VAR 0 1
45243: PPUSH
45244: CALL_OW 437
45248: ST_TO_ADDR
// if task then
45249: LD_VAR 0 3
45253: IFFALSE 45281
// if task [ 1 ] [ 1 ] = p then
45255: LD_VAR 0 3
45259: PUSH
45260: LD_INT 1
45262: ARRAY
45263: PUSH
45264: LD_INT 1
45266: ARRAY
45267: PUSH
45268: LD_STRING p
45270: EQUAL
45271: IFFALSE 45281
// result := true ;
45273: LD_ADDR_VAR 0 2
45277: PUSH
45278: LD_INT 1
45280: ST_TO_ADDR
// end ;
45281: LD_VAR 0 2
45285: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45286: LD_INT 0
45288: PPUSH
45289: PPUSH
45290: PPUSH
45291: PPUSH
// if pos < 1 then
45292: LD_VAR 0 2
45296: PUSH
45297: LD_INT 1
45299: LESS
45300: IFFALSE 45304
// exit ;
45302: GO 45607
// if pos = 1 then
45304: LD_VAR 0 2
45308: PUSH
45309: LD_INT 1
45311: EQUAL
45312: IFFALSE 45345
// result := Replace ( arr , pos [ 1 ] , value ) else
45314: LD_ADDR_VAR 0 4
45318: PUSH
45319: LD_VAR 0 1
45323: PPUSH
45324: LD_VAR 0 2
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: PPUSH
45333: LD_VAR 0 3
45337: PPUSH
45338: CALL_OW 1
45342: ST_TO_ADDR
45343: GO 45607
// begin tmp := arr ;
45345: LD_ADDR_VAR 0 6
45349: PUSH
45350: LD_VAR 0 1
45354: ST_TO_ADDR
// s_arr := [ tmp ] ;
45355: LD_ADDR_VAR 0 7
45359: PUSH
45360: LD_VAR 0 6
45364: PUSH
45365: EMPTY
45366: LIST
45367: ST_TO_ADDR
// for i = 1 to pos - 1 do
45368: LD_ADDR_VAR 0 5
45372: PUSH
45373: DOUBLE
45374: LD_INT 1
45376: DEC
45377: ST_TO_ADDR
45378: LD_VAR 0 2
45382: PUSH
45383: LD_INT 1
45385: MINUS
45386: PUSH
45387: FOR_TO
45388: IFFALSE 45433
// begin tmp := tmp [ pos [ i ] ] ;
45390: LD_ADDR_VAR 0 6
45394: PUSH
45395: LD_VAR 0 6
45399: PUSH
45400: LD_VAR 0 2
45404: PUSH
45405: LD_VAR 0 5
45409: ARRAY
45410: ARRAY
45411: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45412: LD_ADDR_VAR 0 7
45416: PUSH
45417: LD_VAR 0 7
45421: PUSH
45422: LD_VAR 0 6
45426: PUSH
45427: EMPTY
45428: LIST
45429: ADD
45430: ST_TO_ADDR
// end ;
45431: GO 45387
45433: POP
45434: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45435: LD_ADDR_VAR 0 6
45439: PUSH
45440: LD_VAR 0 6
45444: PPUSH
45445: LD_VAR 0 2
45449: PUSH
45450: LD_VAR 0 2
45454: ARRAY
45455: PPUSH
45456: LD_VAR 0 3
45460: PPUSH
45461: CALL_OW 1
45465: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45466: LD_ADDR_VAR 0 7
45470: PUSH
45471: LD_VAR 0 7
45475: PPUSH
45476: LD_VAR 0 7
45480: PPUSH
45481: LD_VAR 0 6
45485: PPUSH
45486: CALL_OW 1
45490: ST_TO_ADDR
// for i = s_arr downto 2 do
45491: LD_ADDR_VAR 0 5
45495: PUSH
45496: DOUBLE
45497: LD_VAR 0 7
45501: INC
45502: ST_TO_ADDR
45503: LD_INT 2
45505: PUSH
45506: FOR_DOWNTO
45507: IFFALSE 45591
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45509: LD_ADDR_VAR 0 6
45513: PUSH
45514: LD_VAR 0 7
45518: PUSH
45519: LD_VAR 0 5
45523: PUSH
45524: LD_INT 1
45526: MINUS
45527: ARRAY
45528: PPUSH
45529: LD_VAR 0 2
45533: PUSH
45534: LD_VAR 0 5
45538: PUSH
45539: LD_INT 1
45541: MINUS
45542: ARRAY
45543: PPUSH
45544: LD_VAR 0 7
45548: PUSH
45549: LD_VAR 0 5
45553: ARRAY
45554: PPUSH
45555: CALL_OW 1
45559: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45560: LD_ADDR_VAR 0 7
45564: PUSH
45565: LD_VAR 0 7
45569: PPUSH
45570: LD_VAR 0 5
45574: PUSH
45575: LD_INT 1
45577: MINUS
45578: PPUSH
45579: LD_VAR 0 6
45583: PPUSH
45584: CALL_OW 1
45588: ST_TO_ADDR
// end ;
45589: GO 45506
45591: POP
45592: POP
// result := s_arr [ 1 ] ;
45593: LD_ADDR_VAR 0 4
45597: PUSH
45598: LD_VAR 0 7
45602: PUSH
45603: LD_INT 1
45605: ARRAY
45606: ST_TO_ADDR
// end ; end ;
45607: LD_VAR 0 4
45611: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45612: LD_INT 0
45614: PPUSH
45615: PPUSH
// if not list then
45616: LD_VAR 0 1
45620: NOT
45621: IFFALSE 45625
// exit ;
45623: GO 45716
// i := list [ pos1 ] ;
45625: LD_ADDR_VAR 0 5
45629: PUSH
45630: LD_VAR 0 1
45634: PUSH
45635: LD_VAR 0 2
45639: ARRAY
45640: ST_TO_ADDR
// if not i then
45641: LD_VAR 0 5
45645: NOT
45646: IFFALSE 45650
// exit ;
45648: GO 45716
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45650: LD_ADDR_VAR 0 1
45654: PUSH
45655: LD_VAR 0 1
45659: PPUSH
45660: LD_VAR 0 2
45664: PPUSH
45665: LD_VAR 0 1
45669: PUSH
45670: LD_VAR 0 3
45674: ARRAY
45675: PPUSH
45676: CALL_OW 1
45680: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45681: LD_ADDR_VAR 0 1
45685: PUSH
45686: LD_VAR 0 1
45690: PPUSH
45691: LD_VAR 0 3
45695: PPUSH
45696: LD_VAR 0 5
45700: PPUSH
45701: CALL_OW 1
45705: ST_TO_ADDR
// result := list ;
45706: LD_ADDR_VAR 0 4
45710: PUSH
45711: LD_VAR 0 1
45715: ST_TO_ADDR
// end ;
45716: LD_VAR 0 4
45720: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45721: LD_INT 0
45723: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45724: LD_ADDR_VAR 0 5
45728: PUSH
45729: LD_VAR 0 1
45733: PPUSH
45734: CALL_OW 250
45738: PPUSH
45739: LD_VAR 0 1
45743: PPUSH
45744: CALL_OW 251
45748: PPUSH
45749: LD_VAR 0 2
45753: PPUSH
45754: LD_VAR 0 3
45758: PPUSH
45759: LD_VAR 0 4
45763: PPUSH
45764: CALL 45774 0 5
45768: ST_TO_ADDR
// end ;
45769: LD_VAR 0 5
45773: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45774: LD_INT 0
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
// if not list then
45780: LD_VAR 0 3
45784: NOT
45785: IFFALSE 45789
// exit ;
45787: GO 46177
// result := [ ] ;
45789: LD_ADDR_VAR 0 6
45793: PUSH
45794: EMPTY
45795: ST_TO_ADDR
// for i in list do
45796: LD_ADDR_VAR 0 7
45800: PUSH
45801: LD_VAR 0 3
45805: PUSH
45806: FOR_IN
45807: IFFALSE 46009
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45809: LD_ADDR_VAR 0 9
45813: PUSH
45814: LD_VAR 0 7
45818: PPUSH
45819: LD_VAR 0 1
45823: PPUSH
45824: LD_VAR 0 2
45828: PPUSH
45829: CALL_OW 297
45833: ST_TO_ADDR
// if not result then
45834: LD_VAR 0 6
45838: NOT
45839: IFFALSE 45865
// result := [ [ i , tmp ] ] else
45841: LD_ADDR_VAR 0 6
45845: PUSH
45846: LD_VAR 0 7
45850: PUSH
45851: LD_VAR 0 9
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: EMPTY
45861: LIST
45862: ST_TO_ADDR
45863: GO 46007
// begin if result [ result ] [ 2 ] < tmp then
45865: LD_VAR 0 6
45869: PUSH
45870: LD_VAR 0 6
45874: ARRAY
45875: PUSH
45876: LD_INT 2
45878: ARRAY
45879: PUSH
45880: LD_VAR 0 9
45884: LESS
45885: IFFALSE 45927
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45887: LD_ADDR_VAR 0 6
45891: PUSH
45892: LD_VAR 0 6
45896: PPUSH
45897: LD_VAR 0 6
45901: PUSH
45902: LD_INT 1
45904: PLUS
45905: PPUSH
45906: LD_VAR 0 7
45910: PUSH
45911: LD_VAR 0 9
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PPUSH
45920: CALL_OW 2
45924: ST_TO_ADDR
45925: GO 46007
// for j = 1 to result do
45927: LD_ADDR_VAR 0 8
45931: PUSH
45932: DOUBLE
45933: LD_INT 1
45935: DEC
45936: ST_TO_ADDR
45937: LD_VAR 0 6
45941: PUSH
45942: FOR_TO
45943: IFFALSE 46005
// begin if tmp < result [ j ] [ 2 ] then
45945: LD_VAR 0 9
45949: PUSH
45950: LD_VAR 0 6
45954: PUSH
45955: LD_VAR 0 8
45959: ARRAY
45960: PUSH
45961: LD_INT 2
45963: ARRAY
45964: LESS
45965: IFFALSE 46003
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45967: LD_ADDR_VAR 0 6
45971: PUSH
45972: LD_VAR 0 6
45976: PPUSH
45977: LD_VAR 0 8
45981: PPUSH
45982: LD_VAR 0 7
45986: PUSH
45987: LD_VAR 0 9
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PPUSH
45996: CALL_OW 2
46000: ST_TO_ADDR
// break ;
46001: GO 46005
// end ; end ;
46003: GO 45942
46005: POP
46006: POP
// end ; end ;
46007: GO 45806
46009: POP
46010: POP
// if result and not asc then
46011: LD_VAR 0 6
46015: PUSH
46016: LD_VAR 0 4
46020: NOT
46021: AND
46022: IFFALSE 46097
// begin tmp := result ;
46024: LD_ADDR_VAR 0 9
46028: PUSH
46029: LD_VAR 0 6
46033: ST_TO_ADDR
// for i = tmp downto 1 do
46034: LD_ADDR_VAR 0 7
46038: PUSH
46039: DOUBLE
46040: LD_VAR 0 9
46044: INC
46045: ST_TO_ADDR
46046: LD_INT 1
46048: PUSH
46049: FOR_DOWNTO
46050: IFFALSE 46095
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46052: LD_ADDR_VAR 0 6
46056: PUSH
46057: LD_VAR 0 6
46061: PPUSH
46062: LD_VAR 0 9
46066: PUSH
46067: LD_VAR 0 7
46071: MINUS
46072: PUSH
46073: LD_INT 1
46075: PLUS
46076: PPUSH
46077: LD_VAR 0 9
46081: PUSH
46082: LD_VAR 0 7
46086: ARRAY
46087: PPUSH
46088: CALL_OW 1
46092: ST_TO_ADDR
46093: GO 46049
46095: POP
46096: POP
// end ; tmp := [ ] ;
46097: LD_ADDR_VAR 0 9
46101: PUSH
46102: EMPTY
46103: ST_TO_ADDR
// if mode then
46104: LD_VAR 0 5
46108: IFFALSE 46177
// begin for i = 1 to result do
46110: LD_ADDR_VAR 0 7
46114: PUSH
46115: DOUBLE
46116: LD_INT 1
46118: DEC
46119: ST_TO_ADDR
46120: LD_VAR 0 6
46124: PUSH
46125: FOR_TO
46126: IFFALSE 46165
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46128: LD_ADDR_VAR 0 9
46132: PUSH
46133: LD_VAR 0 9
46137: PPUSH
46138: LD_VAR 0 7
46142: PPUSH
46143: LD_VAR 0 6
46147: PUSH
46148: LD_VAR 0 7
46152: ARRAY
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: PPUSH
46158: CALL_OW 1
46162: ST_TO_ADDR
46163: GO 46125
46165: POP
46166: POP
// result := tmp ;
46167: LD_ADDR_VAR 0 6
46171: PUSH
46172: LD_VAR 0 9
46176: ST_TO_ADDR
// end ; end ;
46177: LD_VAR 0 6
46181: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46182: LD_INT 0
46184: PPUSH
46185: PPUSH
46186: PPUSH
46187: PPUSH
46188: PPUSH
46189: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46190: LD_ADDR_VAR 0 5
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// if not x or not y then
46212: LD_VAR 0 2
46216: NOT
46217: PUSH
46218: LD_VAR 0 3
46222: NOT
46223: OR
46224: IFFALSE 46228
// exit ;
46226: GO 47874
// if not range then
46228: LD_VAR 0 4
46232: NOT
46233: IFFALSE 46243
// range := 10 ;
46235: LD_ADDR_VAR 0 4
46239: PUSH
46240: LD_INT 10
46242: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46243: LD_ADDR_VAR 0 8
46247: PUSH
46248: LD_INT 81
46250: PUSH
46251: LD_VAR 0 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 92
46262: PUSH
46263: LD_VAR 0 2
46267: PUSH
46268: LD_VAR 0 3
46272: PUSH
46273: LD_VAR 0 4
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 21
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: PPUSH
46306: CALL_OW 69
46310: ST_TO_ADDR
// if not tmp then
46311: LD_VAR 0 8
46315: NOT
46316: IFFALSE 46320
// exit ;
46318: GO 47874
// for i in tmp do
46320: LD_ADDR_VAR 0 6
46324: PUSH
46325: LD_VAR 0 8
46329: PUSH
46330: FOR_IN
46331: IFFALSE 47849
// begin points := [ 0 , 0 , 0 ] ;
46333: LD_ADDR_VAR 0 9
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// bpoints := 1 ;
46352: LD_ADDR_VAR 0 10
46356: PUSH
46357: LD_INT 1
46359: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46360: LD_VAR 0 6
46364: PPUSH
46365: CALL_OW 247
46369: PUSH
46370: LD_INT 1
46372: DOUBLE
46373: EQUAL
46374: IFTRUE 46378
46376: GO 46956
46378: POP
// begin if GetClass ( i ) = 1 then
46379: LD_VAR 0 6
46383: PPUSH
46384: CALL_OW 257
46388: PUSH
46389: LD_INT 1
46391: EQUAL
46392: IFFALSE 46413
// points := [ 10 , 5 , 3 ] ;
46394: LD_ADDR_VAR 0 9
46398: PUSH
46399: LD_INT 10
46401: PUSH
46402: LD_INT 5
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46413: LD_VAR 0 6
46417: PPUSH
46418: CALL_OW 257
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 3
46428: PUSH
46429: LD_INT 4
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: IN
46437: IFFALSE 46458
// points := [ 3 , 2 , 1 ] ;
46439: LD_ADDR_VAR 0 9
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46458: LD_VAR 0 6
46462: PPUSH
46463: CALL_OW 257
46467: PUSH
46468: LD_INT 5
46470: EQUAL
46471: IFFALSE 46492
// points := [ 130 , 5 , 2 ] ;
46473: LD_ADDR_VAR 0 9
46477: PUSH
46478: LD_INT 130
46480: PUSH
46481: LD_INT 5
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46492: LD_VAR 0 6
46496: PPUSH
46497: CALL_OW 257
46501: PUSH
46502: LD_INT 8
46504: EQUAL
46505: IFFALSE 46526
// points := [ 35 , 35 , 30 ] ;
46507: LD_ADDR_VAR 0 9
46511: PUSH
46512: LD_INT 35
46514: PUSH
46515: LD_INT 35
46517: PUSH
46518: LD_INT 30
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46526: LD_VAR 0 6
46530: PPUSH
46531: CALL_OW 257
46535: PUSH
46536: LD_INT 9
46538: EQUAL
46539: IFFALSE 46560
// points := [ 20 , 55 , 40 ] ;
46541: LD_ADDR_VAR 0 9
46545: PUSH
46546: LD_INT 20
46548: PUSH
46549: LD_INT 55
46551: PUSH
46552: LD_INT 40
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46560: LD_VAR 0 6
46564: PPUSH
46565: CALL_OW 257
46569: PUSH
46570: LD_INT 12
46572: PUSH
46573: LD_INT 16
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: IN
46580: IFFALSE 46601
// points := [ 5 , 3 , 2 ] ;
46582: LD_ADDR_VAR 0 9
46586: PUSH
46587: LD_INT 5
46589: PUSH
46590: LD_INT 3
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46601: LD_VAR 0 6
46605: PPUSH
46606: CALL_OW 257
46610: PUSH
46611: LD_INT 17
46613: EQUAL
46614: IFFALSE 46635
// points := [ 100 , 50 , 75 ] ;
46616: LD_ADDR_VAR 0 9
46620: PUSH
46621: LD_INT 100
46623: PUSH
46624: LD_INT 50
46626: PUSH
46627: LD_INT 75
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46635: LD_VAR 0 6
46639: PPUSH
46640: CALL_OW 257
46644: PUSH
46645: LD_INT 15
46647: EQUAL
46648: IFFALSE 46669
// points := [ 10 , 5 , 3 ] ;
46650: LD_ADDR_VAR 0 9
46654: PUSH
46655: LD_INT 10
46657: PUSH
46658: LD_INT 5
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46669: LD_VAR 0 6
46673: PPUSH
46674: CALL_OW 257
46678: PUSH
46679: LD_INT 14
46681: EQUAL
46682: IFFALSE 46703
// points := [ 10 , 0 , 0 ] ;
46684: LD_ADDR_VAR 0 9
46688: PUSH
46689: LD_INT 10
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46703: LD_VAR 0 6
46707: PPUSH
46708: CALL_OW 257
46712: PUSH
46713: LD_INT 11
46715: EQUAL
46716: IFFALSE 46737
// points := [ 30 , 10 , 5 ] ;
46718: LD_ADDR_VAR 0 9
46722: PUSH
46723: LD_INT 30
46725: PUSH
46726: LD_INT 10
46728: PUSH
46729: LD_INT 5
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46737: LD_VAR 0 1
46741: PPUSH
46742: LD_INT 5
46744: PPUSH
46745: CALL_OW 321
46749: PUSH
46750: LD_INT 2
46752: EQUAL
46753: IFFALSE 46770
// bpoints := bpoints * 1.8 ;
46755: LD_ADDR_VAR 0 10
46759: PUSH
46760: LD_VAR 0 10
46764: PUSH
46765: LD_REAL  1.80000000000000E+0000
46768: MUL
46769: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46770: LD_VAR 0 6
46774: PPUSH
46775: CALL_OW 257
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: IN
46798: PUSH
46799: LD_VAR 0 1
46803: PPUSH
46804: LD_INT 51
46806: PPUSH
46807: CALL_OW 321
46811: PUSH
46812: LD_INT 2
46814: EQUAL
46815: AND
46816: IFFALSE 46833
// bpoints := bpoints * 1.2 ;
46818: LD_ADDR_VAR 0 10
46822: PUSH
46823: LD_VAR 0 10
46827: PUSH
46828: LD_REAL  1.20000000000000E+0000
46831: MUL
46832: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46833: LD_VAR 0 6
46837: PPUSH
46838: CALL_OW 257
46842: PUSH
46843: LD_INT 5
46845: PUSH
46846: LD_INT 7
46848: PUSH
46849: LD_INT 9
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: IN
46857: PUSH
46858: LD_VAR 0 1
46862: PPUSH
46863: LD_INT 52
46865: PPUSH
46866: CALL_OW 321
46870: PUSH
46871: LD_INT 2
46873: EQUAL
46874: AND
46875: IFFALSE 46892
// bpoints := bpoints * 1.5 ;
46877: LD_ADDR_VAR 0 10
46881: PUSH
46882: LD_VAR 0 10
46886: PUSH
46887: LD_REAL  1.50000000000000E+0000
46890: MUL
46891: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46892: LD_VAR 0 1
46896: PPUSH
46897: LD_INT 66
46899: PPUSH
46900: CALL_OW 321
46904: PUSH
46905: LD_INT 2
46907: EQUAL
46908: IFFALSE 46925
// bpoints := bpoints * 1.1 ;
46910: LD_ADDR_VAR 0 10
46914: PUSH
46915: LD_VAR 0 10
46919: PUSH
46920: LD_REAL  1.10000000000000E+0000
46923: MUL
46924: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46925: LD_ADDR_VAR 0 10
46929: PUSH
46930: LD_VAR 0 10
46934: PUSH
46935: LD_VAR 0 6
46939: PPUSH
46940: LD_INT 1
46942: PPUSH
46943: CALL_OW 259
46947: PUSH
46948: LD_REAL  1.15000000000000E+0000
46951: MUL
46952: MUL
46953: ST_TO_ADDR
// end ; unit_vehicle :
46954: GO 47778
46956: LD_INT 2
46958: DOUBLE
46959: EQUAL
46960: IFTRUE 46964
46962: GO 47766
46964: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46965: LD_VAR 0 6
46969: PPUSH
46970: CALL_OW 264
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 42
46980: PUSH
46981: LD_INT 24
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: IN
46989: IFFALSE 47010
// points := [ 25 , 5 , 3 ] ;
46991: LD_ADDR_VAR 0 9
46995: PUSH
46996: LD_INT 25
46998: PUSH
46999: LD_INT 5
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47010: LD_VAR 0 6
47014: PPUSH
47015: CALL_OW 264
47019: PUSH
47020: LD_INT 4
47022: PUSH
47023: LD_INT 43
47025: PUSH
47026: LD_INT 25
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: IN
47034: IFFALSE 47055
// points := [ 40 , 15 , 5 ] ;
47036: LD_ADDR_VAR 0 9
47040: PUSH
47041: LD_INT 40
47043: PUSH
47044: LD_INT 15
47046: PUSH
47047: LD_INT 5
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47055: LD_VAR 0 6
47059: PPUSH
47060: CALL_OW 264
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: LD_INT 23
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: IN
47075: IFFALSE 47096
// points := [ 7 , 25 , 8 ] ;
47077: LD_ADDR_VAR 0 9
47081: PUSH
47082: LD_INT 7
47084: PUSH
47085: LD_INT 25
47087: PUSH
47088: LD_INT 8
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47096: LD_VAR 0 6
47100: PPUSH
47101: CALL_OW 264
47105: PUSH
47106: LD_INT 5
47108: PUSH
47109: LD_INT 27
47111: PUSH
47112: LD_INT 44
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: IN
47120: IFFALSE 47141
// points := [ 14 , 50 , 16 ] ;
47122: LD_ADDR_VAR 0 9
47126: PUSH
47127: LD_INT 14
47129: PUSH
47130: LD_INT 50
47132: PUSH
47133: LD_INT 16
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47141: LD_VAR 0 6
47145: PPUSH
47146: CALL_OW 264
47150: PUSH
47151: LD_INT 6
47153: PUSH
47154: LD_INT 46
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: IN
47161: IFFALSE 47182
// points := [ 32 , 120 , 70 ] ;
47163: LD_ADDR_VAR 0 9
47167: PUSH
47168: LD_INT 32
47170: PUSH
47171: LD_INT 120
47173: PUSH
47174: LD_INT 70
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
47182: LD_VAR 0 6
47186: PPUSH
47187: CALL_OW 264
47191: PUSH
47192: LD_INT 7
47194: PUSH
47195: LD_INT 28
47197: PUSH
47198: LD_INT 45
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: IN
47206: IFFALSE 47227
// points := [ 35 , 20 , 45 ] ;
47208: LD_ADDR_VAR 0 9
47212: PUSH
47213: LD_INT 35
47215: PUSH
47216: LD_INT 20
47218: PUSH
47219: LD_INT 45
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47227: LD_VAR 0 6
47231: PPUSH
47232: CALL_OW 264
47236: PUSH
47237: LD_INT 47
47239: PUSH
47240: EMPTY
47241: LIST
47242: IN
47243: IFFALSE 47264
// points := [ 67 , 45 , 75 ] ;
47245: LD_ADDR_VAR 0 9
47249: PUSH
47250: LD_INT 67
47252: PUSH
47253: LD_INT 45
47255: PUSH
47256: LD_INT 75
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47264: LD_VAR 0 6
47268: PPUSH
47269: CALL_OW 264
47273: PUSH
47274: LD_INT 26
47276: PUSH
47277: EMPTY
47278: LIST
47279: IN
47280: IFFALSE 47301
// points := [ 120 , 30 , 80 ] ;
47282: LD_ADDR_VAR 0 9
47286: PUSH
47287: LD_INT 120
47289: PUSH
47290: LD_INT 30
47292: PUSH
47293: LD_INT 80
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47301: LD_VAR 0 6
47305: PPUSH
47306: CALL_OW 264
47310: PUSH
47311: LD_INT 22
47313: PUSH
47314: EMPTY
47315: LIST
47316: IN
47317: IFFALSE 47338
// points := [ 40 , 1 , 1 ] ;
47319: LD_ADDR_VAR 0 9
47323: PUSH
47324: LD_INT 40
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47338: LD_VAR 0 6
47342: PPUSH
47343: CALL_OW 264
47347: PUSH
47348: LD_INT 29
47350: PUSH
47351: EMPTY
47352: LIST
47353: IN
47354: IFFALSE 47375
// points := [ 70 , 200 , 400 ] ;
47356: LD_ADDR_VAR 0 9
47360: PUSH
47361: LD_INT 70
47363: PUSH
47364: LD_INT 200
47366: PUSH
47367: LD_INT 400
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47375: LD_VAR 0 6
47379: PPUSH
47380: CALL_OW 264
47384: PUSH
47385: LD_INT 14
47387: PUSH
47388: LD_INT 53
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: IN
47395: IFFALSE 47416
// points := [ 40 , 10 , 20 ] ;
47397: LD_ADDR_VAR 0 9
47401: PUSH
47402: LD_INT 40
47404: PUSH
47405: LD_INT 10
47407: PUSH
47408: LD_INT 20
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47416: LD_VAR 0 6
47420: PPUSH
47421: CALL_OW 264
47425: PUSH
47426: LD_INT 9
47428: PUSH
47429: EMPTY
47430: LIST
47431: IN
47432: IFFALSE 47453
// points := [ 5 , 70 , 20 ] ;
47434: LD_ADDR_VAR 0 9
47438: PUSH
47439: LD_INT 5
47441: PUSH
47442: LD_INT 70
47444: PUSH
47445: LD_INT 20
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47453: LD_VAR 0 6
47457: PPUSH
47458: CALL_OW 264
47462: PUSH
47463: LD_INT 10
47465: PUSH
47466: EMPTY
47467: LIST
47468: IN
47469: IFFALSE 47490
// points := [ 35 , 110 , 70 ] ;
47471: LD_ADDR_VAR 0 9
47475: PUSH
47476: LD_INT 35
47478: PUSH
47479: LD_INT 110
47481: PUSH
47482: LD_INT 70
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47490: LD_VAR 0 6
47494: PPUSH
47495: CALL_OW 265
47499: PUSH
47500: LD_INT 25
47502: EQUAL
47503: IFFALSE 47524
// points := [ 80 , 65 , 100 ] ;
47505: LD_ADDR_VAR 0 9
47509: PUSH
47510: LD_INT 80
47512: PUSH
47513: LD_INT 65
47515: PUSH
47516: LD_INT 100
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47524: LD_VAR 0 6
47528: PPUSH
47529: CALL_OW 263
47533: PUSH
47534: LD_INT 1
47536: EQUAL
47537: IFFALSE 47572
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47539: LD_ADDR_VAR 0 10
47543: PUSH
47544: LD_VAR 0 10
47548: PUSH
47549: LD_VAR 0 6
47553: PPUSH
47554: CALL_OW 311
47558: PPUSH
47559: LD_INT 3
47561: PPUSH
47562: CALL_OW 259
47566: PUSH
47567: LD_INT 4
47569: MUL
47570: MUL
47571: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47572: LD_VAR 0 6
47576: PPUSH
47577: CALL_OW 263
47581: PUSH
47582: LD_INT 2
47584: EQUAL
47585: IFFALSE 47636
// begin j := IsControledBy ( i ) ;
47587: LD_ADDR_VAR 0 7
47591: PUSH
47592: LD_VAR 0 6
47596: PPUSH
47597: CALL_OW 312
47601: ST_TO_ADDR
// if j then
47602: LD_VAR 0 7
47606: IFFALSE 47636
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47608: LD_ADDR_VAR 0 10
47612: PUSH
47613: LD_VAR 0 10
47617: PUSH
47618: LD_VAR 0 7
47622: PPUSH
47623: LD_INT 3
47625: PPUSH
47626: CALL_OW 259
47630: PUSH
47631: LD_INT 3
47633: MUL
47634: MUL
47635: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47636: LD_VAR 0 6
47640: PPUSH
47641: CALL_OW 264
47645: PUSH
47646: LD_INT 5
47648: PUSH
47649: LD_INT 6
47651: PUSH
47652: LD_INT 46
47654: PUSH
47655: LD_INT 44
47657: PUSH
47658: LD_INT 47
47660: PUSH
47661: LD_INT 45
47663: PUSH
47664: LD_INT 28
47666: PUSH
47667: LD_INT 7
47669: PUSH
47670: LD_INT 27
47672: PUSH
47673: LD_INT 29
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: IN
47688: PUSH
47689: LD_VAR 0 1
47693: PPUSH
47694: LD_INT 52
47696: PPUSH
47697: CALL_OW 321
47701: PUSH
47702: LD_INT 2
47704: EQUAL
47705: AND
47706: IFFALSE 47723
// bpoints := bpoints * 1.2 ;
47708: LD_ADDR_VAR 0 10
47712: PUSH
47713: LD_VAR 0 10
47717: PUSH
47718: LD_REAL  1.20000000000000E+0000
47721: MUL
47722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47723: LD_VAR 0 6
47727: PPUSH
47728: CALL_OW 264
47732: PUSH
47733: LD_INT 6
47735: PUSH
47736: LD_INT 46
47738: PUSH
47739: LD_INT 47
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: IN
47747: IFFALSE 47764
// bpoints := bpoints * 1.2 ;
47749: LD_ADDR_VAR 0 10
47753: PUSH
47754: LD_VAR 0 10
47758: PUSH
47759: LD_REAL  1.20000000000000E+0000
47762: MUL
47763: ST_TO_ADDR
// end ; unit_building :
47764: GO 47778
47766: LD_INT 3
47768: DOUBLE
47769: EQUAL
47770: IFTRUE 47774
47772: GO 47777
47774: POP
// ; end ;
47775: GO 47778
47777: POP
// for j = 1 to 3 do
47778: LD_ADDR_VAR 0 7
47782: PUSH
47783: DOUBLE
47784: LD_INT 1
47786: DEC
47787: ST_TO_ADDR
47788: LD_INT 3
47790: PUSH
47791: FOR_TO
47792: IFFALSE 47845
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47794: LD_ADDR_VAR 0 5
47798: PUSH
47799: LD_VAR 0 5
47803: PPUSH
47804: LD_VAR 0 7
47808: PPUSH
47809: LD_VAR 0 5
47813: PUSH
47814: LD_VAR 0 7
47818: ARRAY
47819: PUSH
47820: LD_VAR 0 9
47824: PUSH
47825: LD_VAR 0 7
47829: ARRAY
47830: PUSH
47831: LD_VAR 0 10
47835: MUL
47836: PLUS
47837: PPUSH
47838: CALL_OW 1
47842: ST_TO_ADDR
47843: GO 47791
47845: POP
47846: POP
// end ;
47847: GO 46330
47849: POP
47850: POP
// result := Replace ( result , 4 , tmp ) ;
47851: LD_ADDR_VAR 0 5
47855: PUSH
47856: LD_VAR 0 5
47860: PPUSH
47861: LD_INT 4
47863: PPUSH
47864: LD_VAR 0 8
47868: PPUSH
47869: CALL_OW 1
47873: ST_TO_ADDR
// end ;
47874: LD_VAR 0 5
47878: RET
// export function DangerAtRange ( unit , range ) ; begin
47879: LD_INT 0
47881: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47882: LD_ADDR_VAR 0 3
47886: PUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 255
47896: PPUSH
47897: LD_VAR 0 1
47901: PPUSH
47902: CALL_OW 250
47906: PPUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: CALL_OW 251
47916: PPUSH
47917: LD_VAR 0 2
47921: PPUSH
47922: CALL 46182 0 4
47926: ST_TO_ADDR
// end ;
47927: LD_VAR 0 3
47931: RET
// export function DangerInArea ( side , area ) ; begin
47932: LD_INT 0
47934: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47935: LD_ADDR_VAR 0 3
47939: PUSH
47940: LD_VAR 0 2
47944: PPUSH
47945: LD_INT 81
47947: PUSH
47948: LD_VAR 0 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PPUSH
47957: CALL_OW 70
47961: ST_TO_ADDR
// end ;
47962: LD_VAR 0 3
47966: RET
// export function IsExtension ( b ) ; begin
47967: LD_INT 0
47969: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47970: LD_ADDR_VAR 0 2
47974: PUSH
47975: LD_VAR 0 1
47979: PUSH
47980: LD_INT 23
47982: PUSH
47983: LD_INT 20
47985: PUSH
47986: LD_INT 22
47988: PUSH
47989: LD_INT 17
47991: PUSH
47992: LD_INT 24
47994: PUSH
47995: LD_INT 21
47997: PUSH
47998: LD_INT 19
48000: PUSH
48001: LD_INT 16
48003: PUSH
48004: LD_INT 25
48006: PUSH
48007: LD_INT 18
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: IN
48022: ST_TO_ADDR
// end ;
48023: LD_VAR 0 2
48027: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
48028: LD_INT 0
48030: PPUSH
48031: PPUSH
48032: PPUSH
// result := [ ] ;
48033: LD_ADDR_VAR 0 3
48037: PUSH
48038: EMPTY
48039: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: LD_VAR 0 2
48049: PPUSH
48050: LD_INT 21
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PPUSH
48060: CALL_OW 70
48064: ST_TO_ADDR
// if not tmp then
48065: LD_VAR 0 4
48069: NOT
48070: IFFALSE 48074
// exit ;
48072: GO 48132
// for i in tmp do
48074: LD_ADDR_VAR 0 5
48078: PUSH
48079: LD_VAR 0 4
48083: PUSH
48084: FOR_IN
48085: IFFALSE 48120
// if GetBase ( i ) <> base then
48087: LD_VAR 0 5
48091: PPUSH
48092: CALL_OW 274
48096: PUSH
48097: LD_VAR 0 1
48101: NONEQUAL
48102: IFFALSE 48118
// ComLinkToBase ( base , i ) ;
48104: LD_VAR 0 1
48108: PPUSH
48109: LD_VAR 0 5
48113: PPUSH
48114: CALL_OW 169
48118: GO 48084
48120: POP
48121: POP
// result := tmp ;
48122: LD_ADDR_VAR 0 3
48126: PUSH
48127: LD_VAR 0 4
48131: ST_TO_ADDR
// end ;
48132: LD_VAR 0 3
48136: RET
// export function ComComplete ( unit , b ) ; var i ; begin
48137: LD_INT 0
48139: PPUSH
48140: PPUSH
// if BuildingStatus ( b ) = bs_build then
48141: LD_VAR 0 2
48145: PPUSH
48146: CALL_OW 461
48150: PUSH
48151: LD_INT 1
48153: EQUAL
48154: IFFALSE 48214
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48156: LD_VAR 0 1
48160: PPUSH
48161: LD_STRING h
48163: PUSH
48164: LD_VAR 0 2
48168: PPUSH
48169: CALL_OW 250
48173: PUSH
48174: LD_VAR 0 2
48178: PPUSH
48179: CALL_OW 251
48183: PUSH
48184: LD_VAR 0 2
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: PPUSH
48210: CALL_OW 446
// end ;
48214: LD_VAR 0 3
48218: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48219: LD_INT 0
48221: PPUSH
48222: PPUSH
48223: PPUSH
48224: PPUSH
48225: PPUSH
48226: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
48227: LD_VAR 0 1
48231: NOT
48232: PUSH
48233: LD_VAR 0 1
48237: PPUSH
48238: CALL_OW 263
48242: PUSH
48243: LD_INT 2
48245: EQUAL
48246: NOT
48247: OR
48248: IFFALSE 48252
// exit ;
48250: GO 48568
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48252: LD_ADDR_VAR 0 6
48256: PUSH
48257: LD_INT 22
48259: PUSH
48260: LD_VAR 0 1
48264: PPUSH
48265: CALL_OW 255
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 30
48279: PUSH
48280: LD_INT 36
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 34
48289: PUSH
48290: LD_INT 31
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PPUSH
48306: CALL_OW 69
48310: ST_TO_ADDR
// if not tmp then
48311: LD_VAR 0 6
48315: NOT
48316: IFFALSE 48320
// exit ;
48318: GO 48568
// result := [ ] ;
48320: LD_ADDR_VAR 0 2
48324: PUSH
48325: EMPTY
48326: ST_TO_ADDR
// for i in tmp do
48327: LD_ADDR_VAR 0 3
48331: PUSH
48332: LD_VAR 0 6
48336: PUSH
48337: FOR_IN
48338: IFFALSE 48409
// begin t := UnitsInside ( i ) ;
48340: LD_ADDR_VAR 0 4
48344: PUSH
48345: LD_VAR 0 3
48349: PPUSH
48350: CALL_OW 313
48354: ST_TO_ADDR
// if t then
48355: LD_VAR 0 4
48359: IFFALSE 48407
// for j in t do
48361: LD_ADDR_VAR 0 7
48365: PUSH
48366: LD_VAR 0 4
48370: PUSH
48371: FOR_IN
48372: IFFALSE 48405
// result := Insert ( result , result + 1 , j ) ;
48374: LD_ADDR_VAR 0 2
48378: PUSH
48379: LD_VAR 0 2
48383: PPUSH
48384: LD_VAR 0 2
48388: PUSH
48389: LD_INT 1
48391: PLUS
48392: PPUSH
48393: LD_VAR 0 7
48397: PPUSH
48398: CALL_OW 2
48402: ST_TO_ADDR
48403: GO 48371
48405: POP
48406: POP
// end ;
48407: GO 48337
48409: POP
48410: POP
// if not result then
48411: LD_VAR 0 2
48415: NOT
48416: IFFALSE 48420
// exit ;
48418: GO 48568
// mech := result [ 1 ] ;
48420: LD_ADDR_VAR 0 5
48424: PUSH
48425: LD_VAR 0 2
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: ST_TO_ADDR
// if result > 1 then
48434: LD_VAR 0 2
48438: PUSH
48439: LD_INT 1
48441: GREATER
48442: IFFALSE 48554
// for i = 2 to result do
48444: LD_ADDR_VAR 0 3
48448: PUSH
48449: DOUBLE
48450: LD_INT 2
48452: DEC
48453: ST_TO_ADDR
48454: LD_VAR 0 2
48458: PUSH
48459: FOR_TO
48460: IFFALSE 48552
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48462: LD_ADDR_VAR 0 4
48466: PUSH
48467: LD_VAR 0 2
48471: PUSH
48472: LD_VAR 0 3
48476: ARRAY
48477: PPUSH
48478: LD_INT 3
48480: PPUSH
48481: CALL_OW 259
48485: PUSH
48486: LD_VAR 0 2
48490: PUSH
48491: LD_VAR 0 3
48495: ARRAY
48496: PPUSH
48497: CALL_OW 432
48501: MINUS
48502: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48503: LD_VAR 0 4
48507: PUSH
48508: LD_VAR 0 5
48512: PPUSH
48513: LD_INT 3
48515: PPUSH
48516: CALL_OW 259
48520: PUSH
48521: LD_VAR 0 5
48525: PPUSH
48526: CALL_OW 432
48530: MINUS
48531: GREATEREQUAL
48532: IFFALSE 48550
// mech := result [ i ] ;
48534: LD_ADDR_VAR 0 5
48538: PUSH
48539: LD_VAR 0 2
48543: PUSH
48544: LD_VAR 0 3
48548: ARRAY
48549: ST_TO_ADDR
// end ;
48550: GO 48459
48552: POP
48553: POP
// ComLinkTo ( vehicle , mech ) ;
48554: LD_VAR 0 1
48558: PPUSH
48559: LD_VAR 0 5
48563: PPUSH
48564: CALL_OW 135
// end ;
48568: LD_VAR 0 2
48572: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48573: LD_INT 0
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
// result := [ ] ;
48588: LD_ADDR_VAR 0 7
48592: PUSH
48593: EMPTY
48594: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48595: LD_VAR 0 1
48599: PPUSH
48600: CALL_OW 266
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: IN
48615: NOT
48616: IFFALSE 48620
// exit ;
48618: GO 50251
// if name then
48620: LD_VAR 0 3
48624: IFFALSE 48640
// SetBName ( base_dep , name ) ;
48626: LD_VAR 0 1
48630: PPUSH
48631: LD_VAR 0 3
48635: PPUSH
48636: CALL_OW 500
// base := GetBase ( base_dep ) ;
48640: LD_ADDR_VAR 0 15
48644: PUSH
48645: LD_VAR 0 1
48649: PPUSH
48650: CALL_OW 274
48654: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48655: LD_ADDR_VAR 0 16
48659: PUSH
48660: LD_VAR 0 1
48664: PPUSH
48665: CALL_OW 255
48669: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48670: LD_ADDR_VAR 0 17
48674: PUSH
48675: LD_VAR 0 1
48679: PPUSH
48680: CALL_OW 248
48684: ST_TO_ADDR
// if sources then
48685: LD_VAR 0 5
48689: IFFALSE 48736
// for i = 1 to 3 do
48691: LD_ADDR_VAR 0 8
48695: PUSH
48696: DOUBLE
48697: LD_INT 1
48699: DEC
48700: ST_TO_ADDR
48701: LD_INT 3
48703: PUSH
48704: FOR_TO
48705: IFFALSE 48734
// AddResourceType ( base , i , sources [ i ] ) ;
48707: LD_VAR 0 15
48711: PPUSH
48712: LD_VAR 0 8
48716: PPUSH
48717: LD_VAR 0 5
48721: PUSH
48722: LD_VAR 0 8
48726: ARRAY
48727: PPUSH
48728: CALL_OW 276
48732: GO 48704
48734: POP
48735: POP
// buildings := GetBaseBuildings ( base , area ) ;
48736: LD_ADDR_VAR 0 18
48740: PUSH
48741: LD_VAR 0 15
48745: PPUSH
48746: LD_VAR 0 2
48750: PPUSH
48751: CALL 48028 0 2
48755: ST_TO_ADDR
// InitHc ;
48756: CALL_OW 19
// InitUc ;
48760: CALL_OW 18
// uc_side := side ;
48764: LD_ADDR_OWVAR 20
48768: PUSH
48769: LD_VAR 0 16
48773: ST_TO_ADDR
// uc_nation := nation ;
48774: LD_ADDR_OWVAR 21
48778: PUSH
48779: LD_VAR 0 17
48783: ST_TO_ADDR
// if buildings then
48784: LD_VAR 0 18
48788: IFFALSE 50110
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48790: LD_ADDR_VAR 0 19
48794: PUSH
48795: LD_VAR 0 18
48799: PPUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 30
48805: PUSH
48806: LD_INT 29
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 30
48815: PUSH
48816: LD_INT 30
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: PPUSH
48828: CALL_OW 72
48832: ST_TO_ADDR
// if tmp then
48833: LD_VAR 0 19
48837: IFFALSE 48885
// for i in tmp do
48839: LD_ADDR_VAR 0 8
48843: PUSH
48844: LD_VAR 0 19
48848: PUSH
48849: FOR_IN
48850: IFFALSE 48883
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48852: LD_VAR 0 8
48856: PPUSH
48857: CALL_OW 250
48861: PPUSH
48862: LD_VAR 0 8
48866: PPUSH
48867: CALL_OW 251
48871: PPUSH
48872: LD_VAR 0 16
48876: PPUSH
48877: CALL_OW 441
48881: GO 48849
48883: POP
48884: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48885: LD_VAR 0 18
48889: PPUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 30
48895: PUSH
48896: LD_INT 32
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 30
48905: PUSH
48906: LD_INT 33
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: PPUSH
48918: CALL_OW 72
48922: IFFALSE 49010
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48924: LD_ADDR_VAR 0 8
48928: PUSH
48929: LD_VAR 0 18
48933: PPUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 30
48939: PUSH
48940: LD_INT 32
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 30
48949: PUSH
48950: LD_INT 33
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: PPUSH
48962: CALL_OW 72
48966: PUSH
48967: FOR_IN
48968: IFFALSE 49008
// begin if not GetBWeapon ( i ) then
48970: LD_VAR 0 8
48974: PPUSH
48975: CALL_OW 269
48979: NOT
48980: IFFALSE 49006
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48982: LD_VAR 0 8
48986: PPUSH
48987: LD_VAR 0 8
48991: PPUSH
48992: LD_VAR 0 2
48996: PPUSH
48997: CALL 50256 0 2
49001: PPUSH
49002: CALL_OW 431
// end ;
49006: GO 48967
49008: POP
49009: POP
// end ; for i = 1 to personel do
49010: LD_ADDR_VAR 0 8
49014: PUSH
49015: DOUBLE
49016: LD_INT 1
49018: DEC
49019: ST_TO_ADDR
49020: LD_VAR 0 6
49024: PUSH
49025: FOR_TO
49026: IFFALSE 50090
// begin if i > 4 then
49028: LD_VAR 0 8
49032: PUSH
49033: LD_INT 4
49035: GREATER
49036: IFFALSE 49040
// break ;
49038: GO 50090
// case i of 1 :
49040: LD_VAR 0 8
49044: PUSH
49045: LD_INT 1
49047: DOUBLE
49048: EQUAL
49049: IFTRUE 49053
49051: GO 49133
49053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49054: LD_ADDR_VAR 0 12
49058: PUSH
49059: LD_VAR 0 18
49063: PPUSH
49064: LD_INT 22
49066: PUSH
49067: LD_VAR 0 16
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 58
49078: PUSH
49079: EMPTY
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 30
49087: PUSH
49088: LD_INT 32
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 30
49097: PUSH
49098: LD_INT 4
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 30
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: PPUSH
49126: CALL_OW 72
49130: ST_TO_ADDR
49131: GO 49355
49133: LD_INT 2
49135: DOUBLE
49136: EQUAL
49137: IFTRUE 49141
49139: GO 49203
49141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49142: LD_ADDR_VAR 0 12
49146: PUSH
49147: LD_VAR 0 18
49151: PPUSH
49152: LD_INT 22
49154: PUSH
49155: LD_VAR 0 16
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 30
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 30
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PPUSH
49196: CALL_OW 72
49200: ST_TO_ADDR
49201: GO 49355
49203: LD_INT 3
49205: DOUBLE
49206: EQUAL
49207: IFTRUE 49211
49209: GO 49273
49211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49212: LD_ADDR_VAR 0 12
49216: PUSH
49217: LD_VAR 0 18
49221: PPUSH
49222: LD_INT 22
49224: PUSH
49225: LD_VAR 0 16
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 30
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 30
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PPUSH
49266: CALL_OW 72
49270: ST_TO_ADDR
49271: GO 49355
49273: LD_INT 4
49275: DOUBLE
49276: EQUAL
49277: IFTRUE 49281
49279: GO 49354
49281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49282: LD_ADDR_VAR 0 12
49286: PUSH
49287: LD_VAR 0 18
49291: PPUSH
49292: LD_INT 22
49294: PUSH
49295: LD_VAR 0 16
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 30
49309: PUSH
49310: LD_INT 6
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 30
49319: PUSH
49320: LD_INT 7
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 30
49329: PUSH
49330: LD_INT 8
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PPUSH
49347: CALL_OW 72
49351: ST_TO_ADDR
49352: GO 49355
49354: POP
// if i = 1 then
49355: LD_VAR 0 8
49359: PUSH
49360: LD_INT 1
49362: EQUAL
49363: IFFALSE 49474
// begin tmp := [ ] ;
49365: LD_ADDR_VAR 0 19
49369: PUSH
49370: EMPTY
49371: ST_TO_ADDR
// for j in f do
49372: LD_ADDR_VAR 0 9
49376: PUSH
49377: LD_VAR 0 12
49381: PUSH
49382: FOR_IN
49383: IFFALSE 49456
// if GetBType ( j ) = b_bunker then
49385: LD_VAR 0 9
49389: PPUSH
49390: CALL_OW 266
49394: PUSH
49395: LD_INT 32
49397: EQUAL
49398: IFFALSE 49425
// tmp := Insert ( tmp , 1 , j ) else
49400: LD_ADDR_VAR 0 19
49404: PUSH
49405: LD_VAR 0 19
49409: PPUSH
49410: LD_INT 1
49412: PPUSH
49413: LD_VAR 0 9
49417: PPUSH
49418: CALL_OW 2
49422: ST_TO_ADDR
49423: GO 49454
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49425: LD_ADDR_VAR 0 19
49429: PUSH
49430: LD_VAR 0 19
49434: PPUSH
49435: LD_VAR 0 19
49439: PUSH
49440: LD_INT 1
49442: PLUS
49443: PPUSH
49444: LD_VAR 0 9
49448: PPUSH
49449: CALL_OW 2
49453: ST_TO_ADDR
49454: GO 49382
49456: POP
49457: POP
// if tmp then
49458: LD_VAR 0 19
49462: IFFALSE 49474
// f := tmp ;
49464: LD_ADDR_VAR 0 12
49468: PUSH
49469: LD_VAR 0 19
49473: ST_TO_ADDR
// end ; x := personel [ i ] ;
49474: LD_ADDR_VAR 0 13
49478: PUSH
49479: LD_VAR 0 6
49483: PUSH
49484: LD_VAR 0 8
49488: ARRAY
49489: ST_TO_ADDR
// if x = - 1 then
49490: LD_VAR 0 13
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: EQUAL
49499: IFFALSE 49708
// begin for j in f do
49501: LD_ADDR_VAR 0 9
49505: PUSH
49506: LD_VAR 0 12
49510: PUSH
49511: FOR_IN
49512: IFFALSE 49704
// repeat InitHc ;
49514: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49518: LD_VAR 0 9
49522: PPUSH
49523: CALL_OW 266
49527: PUSH
49528: LD_INT 5
49530: EQUAL
49531: IFFALSE 49601
// begin if UnitsInside ( j ) < 3 then
49533: LD_VAR 0 9
49537: PPUSH
49538: CALL_OW 313
49542: PUSH
49543: LD_INT 3
49545: LESS
49546: IFFALSE 49582
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49548: LD_INT 0
49550: PPUSH
49551: LD_INT 5
49553: PUSH
49554: LD_INT 8
49556: PUSH
49557: LD_INT 9
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: PUSH
49565: LD_VAR 0 17
49569: ARRAY
49570: PPUSH
49571: LD_VAR 0 4
49575: PPUSH
49576: CALL_OW 380
49580: GO 49599
// PrepareHuman ( false , i , skill ) ;
49582: LD_INT 0
49584: PPUSH
49585: LD_VAR 0 8
49589: PPUSH
49590: LD_VAR 0 4
49594: PPUSH
49595: CALL_OW 380
// end else
49599: GO 49618
// PrepareHuman ( false , i , skill ) ;
49601: LD_INT 0
49603: PPUSH
49604: LD_VAR 0 8
49608: PPUSH
49609: LD_VAR 0 4
49613: PPUSH
49614: CALL_OW 380
// un := CreateHuman ;
49618: LD_ADDR_VAR 0 14
49622: PUSH
49623: CALL_OW 44
49627: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49628: LD_ADDR_VAR 0 7
49632: PUSH
49633: LD_VAR 0 7
49637: PPUSH
49638: LD_INT 1
49640: PPUSH
49641: LD_VAR 0 14
49645: PPUSH
49646: CALL_OW 2
49650: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49651: LD_VAR 0 14
49655: PPUSH
49656: LD_VAR 0 9
49660: PPUSH
49661: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49665: LD_VAR 0 9
49669: PPUSH
49670: CALL_OW 313
49674: PUSH
49675: LD_INT 6
49677: EQUAL
49678: PUSH
49679: LD_VAR 0 9
49683: PPUSH
49684: CALL_OW 266
49688: PUSH
49689: LD_INT 32
49691: PUSH
49692: LD_INT 31
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: IN
49699: OR
49700: IFFALSE 49514
49702: GO 49511
49704: POP
49705: POP
// end else
49706: GO 50088
// for j = 1 to x do
49708: LD_ADDR_VAR 0 9
49712: PUSH
49713: DOUBLE
49714: LD_INT 1
49716: DEC
49717: ST_TO_ADDR
49718: LD_VAR 0 13
49722: PUSH
49723: FOR_TO
49724: IFFALSE 50086
// begin InitHc ;
49726: CALL_OW 19
// if not f then
49730: LD_VAR 0 12
49734: NOT
49735: IFFALSE 49824
// begin PrepareHuman ( false , i , skill ) ;
49737: LD_INT 0
49739: PPUSH
49740: LD_VAR 0 8
49744: PPUSH
49745: LD_VAR 0 4
49749: PPUSH
49750: CALL_OW 380
// un := CreateHuman ;
49754: LD_ADDR_VAR 0 14
49758: PUSH
49759: CALL_OW 44
49763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49764: LD_ADDR_VAR 0 7
49768: PUSH
49769: LD_VAR 0 7
49773: PPUSH
49774: LD_INT 1
49776: PPUSH
49777: LD_VAR 0 14
49781: PPUSH
49782: CALL_OW 2
49786: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49787: LD_VAR 0 14
49791: PPUSH
49792: LD_VAR 0 1
49796: PPUSH
49797: CALL_OW 250
49801: PPUSH
49802: LD_VAR 0 1
49806: PPUSH
49807: CALL_OW 251
49811: PPUSH
49812: LD_INT 10
49814: PPUSH
49815: LD_INT 0
49817: PPUSH
49818: CALL_OW 50
// continue ;
49822: GO 49723
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49824: LD_VAR 0 12
49828: PUSH
49829: LD_INT 1
49831: ARRAY
49832: PPUSH
49833: CALL_OW 313
49837: PUSH
49838: LD_VAR 0 12
49842: PUSH
49843: LD_INT 1
49845: ARRAY
49846: PPUSH
49847: CALL_OW 266
49851: PUSH
49852: LD_INT 32
49854: PUSH
49855: LD_INT 31
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: IN
49862: AND
49863: PUSH
49864: LD_VAR 0 12
49868: PUSH
49869: LD_INT 1
49871: ARRAY
49872: PPUSH
49873: CALL_OW 313
49877: PUSH
49878: LD_INT 6
49880: EQUAL
49881: OR
49882: IFFALSE 49902
// f := Delete ( f , 1 ) ;
49884: LD_ADDR_VAR 0 12
49888: PUSH
49889: LD_VAR 0 12
49893: PPUSH
49894: LD_INT 1
49896: PPUSH
49897: CALL_OW 3
49901: ST_TO_ADDR
// if not f then
49902: LD_VAR 0 12
49906: NOT
49907: IFFALSE 49925
// begin x := x + 2 ;
49909: LD_ADDR_VAR 0 13
49913: PUSH
49914: LD_VAR 0 13
49918: PUSH
49919: LD_INT 2
49921: PLUS
49922: ST_TO_ADDR
// continue ;
49923: GO 49723
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49925: LD_VAR 0 12
49929: PUSH
49930: LD_INT 1
49932: ARRAY
49933: PPUSH
49934: CALL_OW 266
49938: PUSH
49939: LD_INT 5
49941: EQUAL
49942: IFFALSE 50016
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49944: LD_VAR 0 12
49948: PUSH
49949: LD_INT 1
49951: ARRAY
49952: PPUSH
49953: CALL_OW 313
49957: PUSH
49958: LD_INT 3
49960: LESS
49961: IFFALSE 49997
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49963: LD_INT 0
49965: PPUSH
49966: LD_INT 5
49968: PUSH
49969: LD_INT 8
49971: PUSH
49972: LD_INT 9
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: PUSH
49980: LD_VAR 0 17
49984: ARRAY
49985: PPUSH
49986: LD_VAR 0 4
49990: PPUSH
49991: CALL_OW 380
49995: GO 50014
// PrepareHuman ( false , i , skill ) ;
49997: LD_INT 0
49999: PPUSH
50000: LD_VAR 0 8
50004: PPUSH
50005: LD_VAR 0 4
50009: PPUSH
50010: CALL_OW 380
// end else
50014: GO 50033
// PrepareHuman ( false , i , skill ) ;
50016: LD_INT 0
50018: PPUSH
50019: LD_VAR 0 8
50023: PPUSH
50024: LD_VAR 0 4
50028: PPUSH
50029: CALL_OW 380
// un := CreateHuman ;
50033: LD_ADDR_VAR 0 14
50037: PUSH
50038: CALL_OW 44
50042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50043: LD_ADDR_VAR 0 7
50047: PUSH
50048: LD_VAR 0 7
50052: PPUSH
50053: LD_INT 1
50055: PPUSH
50056: LD_VAR 0 14
50060: PPUSH
50061: CALL_OW 2
50065: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50066: LD_VAR 0 14
50070: PPUSH
50071: LD_VAR 0 12
50075: PUSH
50076: LD_INT 1
50078: ARRAY
50079: PPUSH
50080: CALL_OW 52
// end ;
50084: GO 49723
50086: POP
50087: POP
// end ;
50088: GO 49025
50090: POP
50091: POP
// result := result ^ buildings ;
50092: LD_ADDR_VAR 0 7
50096: PUSH
50097: LD_VAR 0 7
50101: PUSH
50102: LD_VAR 0 18
50106: ADD
50107: ST_TO_ADDR
// end else
50108: GO 50251
// begin for i = 1 to personel do
50110: LD_ADDR_VAR 0 8
50114: PUSH
50115: DOUBLE
50116: LD_INT 1
50118: DEC
50119: ST_TO_ADDR
50120: LD_VAR 0 6
50124: PUSH
50125: FOR_TO
50126: IFFALSE 50249
// begin if i > 4 then
50128: LD_VAR 0 8
50132: PUSH
50133: LD_INT 4
50135: GREATER
50136: IFFALSE 50140
// break ;
50138: GO 50249
// x := personel [ i ] ;
50140: LD_ADDR_VAR 0 13
50144: PUSH
50145: LD_VAR 0 6
50149: PUSH
50150: LD_VAR 0 8
50154: ARRAY
50155: ST_TO_ADDR
// if x = - 1 then
50156: LD_VAR 0 13
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: EQUAL
50165: IFFALSE 50169
// continue ;
50167: GO 50125
// PrepareHuman ( false , i , skill ) ;
50169: LD_INT 0
50171: PPUSH
50172: LD_VAR 0 8
50176: PPUSH
50177: LD_VAR 0 4
50181: PPUSH
50182: CALL_OW 380
// un := CreateHuman ;
50186: LD_ADDR_VAR 0 14
50190: PUSH
50191: CALL_OW 44
50195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50196: LD_VAR 0 14
50200: PPUSH
50201: LD_VAR 0 1
50205: PPUSH
50206: CALL_OW 250
50210: PPUSH
50211: LD_VAR 0 1
50215: PPUSH
50216: CALL_OW 251
50220: PPUSH
50221: LD_INT 10
50223: PPUSH
50224: LD_INT 0
50226: PPUSH
50227: CALL_OW 50
// result := result ^ un ;
50231: LD_ADDR_VAR 0 7
50235: PUSH
50236: LD_VAR 0 7
50240: PUSH
50241: LD_VAR 0 14
50245: ADD
50246: ST_TO_ADDR
// end ;
50247: GO 50125
50249: POP
50250: POP
// end ; end ;
50251: LD_VAR 0 7
50255: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50256: LD_INT 0
50258: PPUSH
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
50269: PPUSH
50270: PPUSH
50271: PPUSH
50272: PPUSH
50273: PPUSH
// result := false ;
50274: LD_ADDR_VAR 0 3
50278: PUSH
50279: LD_INT 0
50281: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50282: LD_VAR 0 1
50286: NOT
50287: PUSH
50288: LD_VAR 0 1
50292: PPUSH
50293: CALL_OW 266
50297: PUSH
50298: LD_INT 32
50300: PUSH
50301: LD_INT 33
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: IN
50308: NOT
50309: OR
50310: IFFALSE 50314
// exit ;
50312: GO 51450
// nat := GetNation ( tower ) ;
50314: LD_ADDR_VAR 0 12
50318: PUSH
50319: LD_VAR 0 1
50323: PPUSH
50324: CALL_OW 248
50328: ST_TO_ADDR
// side := GetSide ( tower ) ;
50329: LD_ADDR_VAR 0 16
50333: PUSH
50334: LD_VAR 0 1
50338: PPUSH
50339: CALL_OW 255
50343: ST_TO_ADDR
// x := GetX ( tower ) ;
50344: LD_ADDR_VAR 0 10
50348: PUSH
50349: LD_VAR 0 1
50353: PPUSH
50354: CALL_OW 250
50358: ST_TO_ADDR
// y := GetY ( tower ) ;
50359: LD_ADDR_VAR 0 11
50363: PUSH
50364: LD_VAR 0 1
50368: PPUSH
50369: CALL_OW 251
50373: ST_TO_ADDR
// if not x or not y then
50374: LD_VAR 0 10
50378: NOT
50379: PUSH
50380: LD_VAR 0 11
50384: NOT
50385: OR
50386: IFFALSE 50390
// exit ;
50388: GO 51450
// weapon := 0 ;
50390: LD_ADDR_VAR 0 18
50394: PUSH
50395: LD_INT 0
50397: ST_TO_ADDR
// fac_list := [ ] ;
50398: LD_ADDR_VAR 0 17
50402: PUSH
50403: EMPTY
50404: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
50405: LD_ADDR_VAR 0 6
50409: PUSH
50410: LD_VAR 0 1
50414: PPUSH
50415: CALL_OW 274
50419: PPUSH
50420: LD_VAR 0 2
50424: PPUSH
50425: CALL 48028 0 2
50429: PPUSH
50430: LD_INT 30
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PPUSH
50440: CALL_OW 72
50444: ST_TO_ADDR
// if not factories then
50445: LD_VAR 0 6
50449: NOT
50450: IFFALSE 50454
// exit ;
50452: GO 51450
// for i in factories do
50454: LD_ADDR_VAR 0 8
50458: PUSH
50459: LD_VAR 0 6
50463: PUSH
50464: FOR_IN
50465: IFFALSE 50490
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50467: LD_ADDR_VAR 0 17
50471: PUSH
50472: LD_VAR 0 17
50476: PUSH
50477: LD_VAR 0 8
50481: PPUSH
50482: CALL_OW 478
50486: UNION
50487: ST_TO_ADDR
50488: GO 50464
50490: POP
50491: POP
// if not fac_list then
50492: LD_VAR 0 17
50496: NOT
50497: IFFALSE 50501
// exit ;
50499: GO 51450
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50501: LD_ADDR_VAR 0 5
50505: PUSH
50506: LD_INT 4
50508: PUSH
50509: LD_INT 5
50511: PUSH
50512: LD_INT 9
50514: PUSH
50515: LD_INT 10
50517: PUSH
50518: LD_INT 6
50520: PUSH
50521: LD_INT 7
50523: PUSH
50524: LD_INT 11
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 27
50538: PUSH
50539: LD_INT 28
50541: PUSH
50542: LD_INT 26
50544: PUSH
50545: LD_INT 30
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 43
50556: PUSH
50557: LD_INT 44
50559: PUSH
50560: LD_INT 46
50562: PUSH
50563: LD_INT 45
50565: PUSH
50566: LD_INT 47
50568: PUSH
50569: LD_INT 49
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: PUSH
50585: LD_VAR 0 12
50589: ARRAY
50590: ST_TO_ADDR
// for i in list do
50591: LD_ADDR_VAR 0 8
50595: PUSH
50596: LD_VAR 0 5
50600: PUSH
50601: FOR_IN
50602: IFFALSE 50635
// if not i in fac_list then
50604: LD_VAR 0 8
50608: PUSH
50609: LD_VAR 0 17
50613: IN
50614: NOT
50615: IFFALSE 50633
// list := list diff i ;
50617: LD_ADDR_VAR 0 5
50621: PUSH
50622: LD_VAR 0 5
50626: PUSH
50627: LD_VAR 0 8
50631: DIFF
50632: ST_TO_ADDR
50633: GO 50601
50635: POP
50636: POP
// if not list then
50637: LD_VAR 0 5
50641: NOT
50642: IFFALSE 50646
// exit ;
50644: GO 51450
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50646: LD_VAR 0 12
50650: PUSH
50651: LD_INT 3
50653: EQUAL
50654: PUSH
50655: LD_INT 49
50657: PUSH
50658: LD_VAR 0 5
50662: IN
50663: AND
50664: PUSH
50665: LD_INT 31
50667: PPUSH
50668: LD_VAR 0 16
50672: PPUSH
50673: CALL_OW 321
50677: PUSH
50678: LD_INT 2
50680: EQUAL
50681: AND
50682: IFFALSE 50742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50684: LD_INT 22
50686: PUSH
50687: LD_VAR 0 16
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 35
50698: PUSH
50699: LD_INT 49
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 91
50708: PUSH
50709: LD_VAR 0 1
50713: PUSH
50714: LD_INT 10
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: PPUSH
50727: CALL_OW 69
50731: NOT
50732: IFFALSE 50742
// weapon := ru_time_lapser ;
50734: LD_ADDR_VAR 0 18
50738: PUSH
50739: LD_INT 49
50741: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50742: LD_VAR 0 12
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: IN
50757: PUSH
50758: LD_INT 11
50760: PUSH
50761: LD_VAR 0 5
50765: IN
50766: PUSH
50767: LD_INT 30
50769: PUSH
50770: LD_VAR 0 5
50774: IN
50775: OR
50776: AND
50777: PUSH
50778: LD_INT 6
50780: PPUSH
50781: LD_VAR 0 16
50785: PPUSH
50786: CALL_OW 321
50790: PUSH
50791: LD_INT 2
50793: EQUAL
50794: AND
50795: IFFALSE 50960
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50797: LD_INT 22
50799: PUSH
50800: LD_VAR 0 16
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 35
50814: PUSH
50815: LD_INT 11
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 35
50824: PUSH
50825: LD_INT 30
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 91
50839: PUSH
50840: LD_VAR 0 1
50844: PUSH
50845: LD_INT 18
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: PPUSH
50858: CALL_OW 69
50862: NOT
50863: PUSH
50864: LD_INT 22
50866: PUSH
50867: LD_VAR 0 16
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 30
50881: PUSH
50882: LD_INT 32
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 30
50891: PUSH
50892: LD_INT 33
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 91
50906: PUSH
50907: LD_VAR 0 1
50911: PUSH
50912: LD_INT 12
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: PPUSH
50928: CALL_OW 69
50932: PUSH
50933: LD_INT 2
50935: GREATER
50936: AND
50937: IFFALSE 50960
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50939: LD_ADDR_VAR 0 18
50943: PUSH
50944: LD_INT 11
50946: PUSH
50947: LD_INT 30
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_VAR 0 12
50958: ARRAY
50959: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50960: LD_VAR 0 18
50964: NOT
50965: PUSH
50966: LD_INT 40
50968: PPUSH
50969: LD_VAR 0 16
50973: PPUSH
50974: CALL_OW 321
50978: PUSH
50979: LD_INT 2
50981: EQUAL
50982: AND
50983: PUSH
50984: LD_INT 7
50986: PUSH
50987: LD_VAR 0 5
50991: IN
50992: PUSH
50993: LD_INT 28
50995: PUSH
50996: LD_VAR 0 5
51000: IN
51001: OR
51002: PUSH
51003: LD_INT 45
51005: PUSH
51006: LD_VAR 0 5
51010: IN
51011: OR
51012: AND
51013: IFFALSE 51267
// begin hex := GetHexInfo ( x , y ) ;
51015: LD_ADDR_VAR 0 4
51019: PUSH
51020: LD_VAR 0 10
51024: PPUSH
51025: LD_VAR 0 11
51029: PPUSH
51030: CALL_OW 546
51034: ST_TO_ADDR
// if hex [ 1 ] then
51035: LD_VAR 0 4
51039: PUSH
51040: LD_INT 1
51042: ARRAY
51043: IFFALSE 51047
// exit ;
51045: GO 51450
// height := hex [ 2 ] ;
51047: LD_ADDR_VAR 0 15
51051: PUSH
51052: LD_VAR 0 4
51056: PUSH
51057: LD_INT 2
51059: ARRAY
51060: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51061: LD_ADDR_VAR 0 14
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: LD_INT 5
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// for i in tmp do
51084: LD_ADDR_VAR 0 8
51088: PUSH
51089: LD_VAR 0 14
51093: PUSH
51094: FOR_IN
51095: IFFALSE 51265
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51097: LD_ADDR_VAR 0 9
51101: PUSH
51102: LD_VAR 0 10
51106: PPUSH
51107: LD_VAR 0 8
51111: PPUSH
51112: LD_INT 5
51114: PPUSH
51115: CALL_OW 272
51119: PUSH
51120: LD_VAR 0 11
51124: PPUSH
51125: LD_VAR 0 8
51129: PPUSH
51130: LD_INT 5
51132: PPUSH
51133: CALL_OW 273
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51142: LD_VAR 0 9
51146: PUSH
51147: LD_INT 1
51149: ARRAY
51150: PPUSH
51151: LD_VAR 0 9
51155: PUSH
51156: LD_INT 2
51158: ARRAY
51159: PPUSH
51160: CALL_OW 488
51164: IFFALSE 51263
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51166: LD_ADDR_VAR 0 4
51170: PUSH
51171: LD_VAR 0 9
51175: PUSH
51176: LD_INT 1
51178: ARRAY
51179: PPUSH
51180: LD_VAR 0 9
51184: PUSH
51185: LD_INT 2
51187: ARRAY
51188: PPUSH
51189: CALL_OW 546
51193: ST_TO_ADDR
// if hex [ 1 ] then
51194: LD_VAR 0 4
51198: PUSH
51199: LD_INT 1
51201: ARRAY
51202: IFFALSE 51206
// continue ;
51204: GO 51094
// h := hex [ 2 ] ;
51206: LD_ADDR_VAR 0 13
51210: PUSH
51211: LD_VAR 0 4
51215: PUSH
51216: LD_INT 2
51218: ARRAY
51219: ST_TO_ADDR
// if h + 7 < height then
51220: LD_VAR 0 13
51224: PUSH
51225: LD_INT 7
51227: PLUS
51228: PUSH
51229: LD_VAR 0 15
51233: LESS
51234: IFFALSE 51263
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51236: LD_ADDR_VAR 0 18
51240: PUSH
51241: LD_INT 7
51243: PUSH
51244: LD_INT 28
51246: PUSH
51247: LD_INT 45
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: PUSH
51255: LD_VAR 0 12
51259: ARRAY
51260: ST_TO_ADDR
// break ;
51261: GO 51265
// end ; end ; end ;
51263: GO 51094
51265: POP
51266: POP
// end ; if not weapon then
51267: LD_VAR 0 18
51271: NOT
51272: IFFALSE 51332
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51274: LD_ADDR_VAR 0 5
51278: PUSH
51279: LD_VAR 0 5
51283: PUSH
51284: LD_INT 11
51286: PUSH
51287: LD_INT 30
51289: PUSH
51290: LD_INT 49
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: DIFF
51298: ST_TO_ADDR
// if not list then
51299: LD_VAR 0 5
51303: NOT
51304: IFFALSE 51308
// exit ;
51306: GO 51450
// weapon := list [ rand ( 1 , list ) ] ;
51308: LD_ADDR_VAR 0 18
51312: PUSH
51313: LD_VAR 0 5
51317: PUSH
51318: LD_INT 1
51320: PPUSH
51321: LD_VAR 0 5
51325: PPUSH
51326: CALL_OW 12
51330: ARRAY
51331: ST_TO_ADDR
// end ; if weapon then
51332: LD_VAR 0 18
51336: IFFALSE 51450
// begin tmp := CostOfWeapon ( weapon ) ;
51338: LD_ADDR_VAR 0 14
51342: PUSH
51343: LD_VAR 0 18
51347: PPUSH
51348: CALL_OW 451
51352: ST_TO_ADDR
// j := GetBase ( tower ) ;
51353: LD_ADDR_VAR 0 9
51357: PUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: CALL_OW 274
51367: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51368: LD_VAR 0 9
51372: PPUSH
51373: LD_INT 1
51375: PPUSH
51376: CALL_OW 275
51380: PUSH
51381: LD_VAR 0 14
51385: PUSH
51386: LD_INT 1
51388: ARRAY
51389: GREATEREQUAL
51390: PUSH
51391: LD_VAR 0 9
51395: PPUSH
51396: LD_INT 2
51398: PPUSH
51399: CALL_OW 275
51403: PUSH
51404: LD_VAR 0 14
51408: PUSH
51409: LD_INT 2
51411: ARRAY
51412: GREATEREQUAL
51413: AND
51414: PUSH
51415: LD_VAR 0 9
51419: PPUSH
51420: LD_INT 3
51422: PPUSH
51423: CALL_OW 275
51427: PUSH
51428: LD_VAR 0 14
51432: PUSH
51433: LD_INT 3
51435: ARRAY
51436: GREATEREQUAL
51437: AND
51438: IFFALSE 51450
// result := weapon ;
51440: LD_ADDR_VAR 0 3
51444: PUSH
51445: LD_VAR 0 18
51449: ST_TO_ADDR
// end ; end ;
51450: LD_VAR 0 3
51454: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51455: LD_INT 0
51457: PPUSH
51458: PPUSH
// result := true ;
51459: LD_ADDR_VAR 0 3
51463: PUSH
51464: LD_INT 1
51466: ST_TO_ADDR
// if array1 = array2 then
51467: LD_VAR 0 1
51471: PUSH
51472: LD_VAR 0 2
51476: EQUAL
51477: IFFALSE 51537
// begin for i = 1 to array1 do
51479: LD_ADDR_VAR 0 4
51483: PUSH
51484: DOUBLE
51485: LD_INT 1
51487: DEC
51488: ST_TO_ADDR
51489: LD_VAR 0 1
51493: PUSH
51494: FOR_TO
51495: IFFALSE 51533
// if array1 [ i ] <> array2 [ i ] then
51497: LD_VAR 0 1
51501: PUSH
51502: LD_VAR 0 4
51506: ARRAY
51507: PUSH
51508: LD_VAR 0 2
51512: PUSH
51513: LD_VAR 0 4
51517: ARRAY
51518: NONEQUAL
51519: IFFALSE 51531
// begin result := false ;
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_INT 0
51528: ST_TO_ADDR
// break ;
51529: GO 51533
// end ;
51531: GO 51494
51533: POP
51534: POP
// end else
51535: GO 51545
// result := false ;
51537: LD_ADDR_VAR 0 3
51541: PUSH
51542: LD_INT 0
51544: ST_TO_ADDR
// end ;
51545: LD_VAR 0 3
51549: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51550: LD_INT 0
51552: PPUSH
51553: PPUSH
51554: PPUSH
// pom := GetBase ( fac ) ;
51555: LD_ADDR_VAR 0 5
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 274
51569: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51570: LD_ADDR_VAR 0 4
51574: PUSH
51575: LD_VAR 0 2
51579: PUSH
51580: LD_INT 1
51582: ARRAY
51583: PPUSH
51584: LD_VAR 0 2
51588: PUSH
51589: LD_INT 2
51591: ARRAY
51592: PPUSH
51593: LD_VAR 0 2
51597: PUSH
51598: LD_INT 3
51600: ARRAY
51601: PPUSH
51602: LD_VAR 0 2
51606: PUSH
51607: LD_INT 4
51609: ARRAY
51610: PPUSH
51611: CALL_OW 449
51615: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51616: LD_ADDR_VAR 0 3
51620: PUSH
51621: LD_VAR 0 5
51625: PPUSH
51626: LD_INT 1
51628: PPUSH
51629: CALL_OW 275
51633: PUSH
51634: LD_VAR 0 4
51638: PUSH
51639: LD_INT 1
51641: ARRAY
51642: GREATEREQUAL
51643: PUSH
51644: LD_VAR 0 5
51648: PPUSH
51649: LD_INT 2
51651: PPUSH
51652: CALL_OW 275
51656: PUSH
51657: LD_VAR 0 4
51661: PUSH
51662: LD_INT 2
51664: ARRAY
51665: GREATEREQUAL
51666: AND
51667: PUSH
51668: LD_VAR 0 5
51672: PPUSH
51673: LD_INT 3
51675: PPUSH
51676: CALL_OW 275
51680: PUSH
51681: LD_VAR 0 4
51685: PUSH
51686: LD_INT 3
51688: ARRAY
51689: GREATEREQUAL
51690: AND
51691: ST_TO_ADDR
// end ;
51692: LD_VAR 0 3
51696: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51697: LD_INT 0
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
// pom := GetBase ( building ) ;
51703: LD_ADDR_VAR 0 3
51707: PUSH
51708: LD_VAR 0 1
51712: PPUSH
51713: CALL_OW 274
51717: ST_TO_ADDR
// if not pom then
51718: LD_VAR 0 3
51722: NOT
51723: IFFALSE 51727
// exit ;
51725: GO 51897
// btype := GetBType ( building ) ;
51727: LD_ADDR_VAR 0 5
51731: PUSH
51732: LD_VAR 0 1
51736: PPUSH
51737: CALL_OW 266
51741: ST_TO_ADDR
// if btype = b_armoury then
51742: LD_VAR 0 5
51746: PUSH
51747: LD_INT 4
51749: EQUAL
51750: IFFALSE 51760
// btype := b_barracks ;
51752: LD_ADDR_VAR 0 5
51756: PUSH
51757: LD_INT 5
51759: ST_TO_ADDR
// if btype = b_depot then
51760: LD_VAR 0 5
51764: PUSH
51765: LD_INT 0
51767: EQUAL
51768: IFFALSE 51778
// btype := b_warehouse ;
51770: LD_ADDR_VAR 0 5
51774: PUSH
51775: LD_INT 1
51777: ST_TO_ADDR
// if btype = b_workshop then
51778: LD_VAR 0 5
51782: PUSH
51783: LD_INT 2
51785: EQUAL
51786: IFFALSE 51796
// btype := b_factory ;
51788: LD_ADDR_VAR 0 5
51792: PUSH
51793: LD_INT 3
51795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51796: LD_ADDR_VAR 0 4
51800: PUSH
51801: LD_VAR 0 5
51805: PPUSH
51806: LD_VAR 0 1
51810: PPUSH
51811: CALL_OW 248
51815: PPUSH
51816: CALL_OW 450
51820: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51821: LD_ADDR_VAR 0 2
51825: PUSH
51826: LD_VAR 0 3
51830: PPUSH
51831: LD_INT 1
51833: PPUSH
51834: CALL_OW 275
51838: PUSH
51839: LD_VAR 0 4
51843: PUSH
51844: LD_INT 1
51846: ARRAY
51847: GREATEREQUAL
51848: PUSH
51849: LD_VAR 0 3
51853: PPUSH
51854: LD_INT 2
51856: PPUSH
51857: CALL_OW 275
51861: PUSH
51862: LD_VAR 0 4
51866: PUSH
51867: LD_INT 2
51869: ARRAY
51870: GREATEREQUAL
51871: AND
51872: PUSH
51873: LD_VAR 0 3
51877: PPUSH
51878: LD_INT 3
51880: PPUSH
51881: CALL_OW 275
51885: PUSH
51886: LD_VAR 0 4
51890: PUSH
51891: LD_INT 3
51893: ARRAY
51894: GREATEREQUAL
51895: AND
51896: ST_TO_ADDR
// end ;
51897: LD_VAR 0 2
51901: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51902: LD_INT 0
51904: PPUSH
51905: PPUSH
51906: PPUSH
// pom := GetBase ( building ) ;
51907: LD_ADDR_VAR 0 4
51911: PUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 274
51921: ST_TO_ADDR
// if not pom then
51922: LD_VAR 0 4
51926: NOT
51927: IFFALSE 51931
// exit ;
51929: GO 52032
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51931: LD_ADDR_VAR 0 5
51935: PUSH
51936: LD_VAR 0 2
51940: PPUSH
51941: LD_VAR 0 1
51945: PPUSH
51946: CALL_OW 248
51950: PPUSH
51951: CALL_OW 450
51955: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51956: LD_ADDR_VAR 0 3
51960: PUSH
51961: LD_VAR 0 4
51965: PPUSH
51966: LD_INT 1
51968: PPUSH
51969: CALL_OW 275
51973: PUSH
51974: LD_VAR 0 5
51978: PUSH
51979: LD_INT 1
51981: ARRAY
51982: GREATEREQUAL
51983: PUSH
51984: LD_VAR 0 4
51988: PPUSH
51989: LD_INT 2
51991: PPUSH
51992: CALL_OW 275
51996: PUSH
51997: LD_VAR 0 5
52001: PUSH
52002: LD_INT 2
52004: ARRAY
52005: GREATEREQUAL
52006: AND
52007: PUSH
52008: LD_VAR 0 4
52012: PPUSH
52013: LD_INT 3
52015: PPUSH
52016: CALL_OW 275
52020: PUSH
52021: LD_VAR 0 5
52025: PUSH
52026: LD_INT 3
52028: ARRAY
52029: GREATEREQUAL
52030: AND
52031: ST_TO_ADDR
// end ;
52032: LD_VAR 0 3
52036: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
52037: LD_INT 0
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
52047: PPUSH
52048: PPUSH
// result := false ;
52049: LD_ADDR_VAR 0 6
52053: PUSH
52054: LD_INT 0
52056: ST_TO_ADDR
// if not base or not btype or not x or not y then
52057: LD_VAR 0 1
52061: NOT
52062: PUSH
52063: LD_VAR 0 2
52067: NOT
52068: OR
52069: PUSH
52070: LD_VAR 0 3
52074: NOT
52075: OR
52076: PUSH
52077: LD_VAR 0 4
52081: NOT
52082: OR
52083: IFFALSE 52087
// exit ;
52085: GO 52696
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
52087: LD_ADDR_VAR 0 12
52091: PUSH
52092: LD_VAR 0 2
52096: PPUSH
52097: LD_VAR 0 3
52101: PPUSH
52102: LD_VAR 0 4
52106: PPUSH
52107: LD_VAR 0 5
52111: PPUSH
52112: LD_VAR 0 1
52116: PUSH
52117: LD_INT 1
52119: ARRAY
52120: PPUSH
52121: CALL_OW 248
52125: PPUSH
52126: LD_INT 0
52128: PPUSH
52129: CALL 53533 0 6
52133: ST_TO_ADDR
// if not hexes then
52134: LD_VAR 0 12
52138: NOT
52139: IFFALSE 52143
// exit ;
52141: GO 52696
// for i = 1 to hexes do
52143: LD_ADDR_VAR 0 7
52147: PUSH
52148: DOUBLE
52149: LD_INT 1
52151: DEC
52152: ST_TO_ADDR
52153: LD_VAR 0 12
52157: PUSH
52158: FOR_TO
52159: IFFALSE 52694
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52161: LD_ADDR_VAR 0 11
52165: PUSH
52166: LD_VAR 0 12
52170: PUSH
52171: LD_VAR 0 7
52175: ARRAY
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: PPUSH
52181: LD_VAR 0 12
52185: PUSH
52186: LD_VAR 0 7
52190: ARRAY
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: PPUSH
52196: CALL_OW 428
52200: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52201: LD_VAR 0 12
52205: PUSH
52206: LD_VAR 0 7
52210: ARRAY
52211: PUSH
52212: LD_INT 1
52214: ARRAY
52215: PPUSH
52216: LD_VAR 0 12
52220: PUSH
52221: LD_VAR 0 7
52225: ARRAY
52226: PUSH
52227: LD_INT 2
52229: ARRAY
52230: PPUSH
52231: CALL_OW 351
52235: PUSH
52236: LD_VAR 0 12
52240: PUSH
52241: LD_VAR 0 7
52245: ARRAY
52246: PUSH
52247: LD_INT 1
52249: ARRAY
52250: PPUSH
52251: LD_VAR 0 12
52255: PUSH
52256: LD_VAR 0 7
52260: ARRAY
52261: PUSH
52262: LD_INT 2
52264: ARRAY
52265: PPUSH
52266: CALL_OW 488
52270: NOT
52271: OR
52272: PUSH
52273: LD_VAR 0 11
52277: PPUSH
52278: CALL_OW 247
52282: PUSH
52283: LD_INT 3
52285: EQUAL
52286: OR
52287: IFFALSE 52293
// exit ;
52289: POP
52290: POP
52291: GO 52696
// if not tmp or not tmp in base then
52293: LD_VAR 0 11
52297: NOT
52298: PUSH
52299: LD_VAR 0 11
52303: PUSH
52304: LD_VAR 0 1
52308: IN
52309: NOT
52310: OR
52311: IFFALSE 52315
// continue ;
52313: GO 52158
// result := true ;
52315: LD_ADDR_VAR 0 6
52319: PUSH
52320: LD_INT 1
52322: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52323: LD_ADDR_VAR 0 15
52327: PUSH
52328: LD_VAR 0 1
52332: PPUSH
52333: LD_INT 22
52335: PUSH
52336: LD_VAR 0 11
52340: PPUSH
52341: CALL_OW 255
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 30
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 30
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PPUSH
52382: CALL_OW 72
52386: ST_TO_ADDR
// if dep then
52387: LD_VAR 0 15
52391: IFFALSE 52527
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52393: LD_ADDR_VAR 0 14
52397: PUSH
52398: LD_VAR 0 15
52402: PUSH
52403: LD_INT 1
52405: ARRAY
52406: PPUSH
52407: CALL_OW 250
52411: PPUSH
52412: LD_VAR 0 15
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: PPUSH
52421: CALL_OW 254
52425: PPUSH
52426: LD_INT 5
52428: PPUSH
52429: CALL_OW 272
52433: PUSH
52434: LD_VAR 0 15
52438: PUSH
52439: LD_INT 1
52441: ARRAY
52442: PPUSH
52443: CALL_OW 251
52447: PPUSH
52448: LD_VAR 0 15
52452: PUSH
52453: LD_INT 1
52455: ARRAY
52456: PPUSH
52457: CALL_OW 254
52461: PPUSH
52462: LD_INT 5
52464: PPUSH
52465: CALL_OW 273
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52474: LD_VAR 0 14
52478: PUSH
52479: LD_INT 1
52481: ARRAY
52482: PPUSH
52483: LD_VAR 0 14
52487: PUSH
52488: LD_INT 2
52490: ARRAY
52491: PPUSH
52492: CALL_OW 488
52496: IFFALSE 52527
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52498: LD_VAR 0 11
52502: PPUSH
52503: LD_VAR 0 14
52507: PUSH
52508: LD_INT 1
52510: ARRAY
52511: PPUSH
52512: LD_VAR 0 14
52516: PUSH
52517: LD_INT 2
52519: ARRAY
52520: PPUSH
52521: CALL_OW 111
// continue ;
52525: GO 52158
// end ; end ; r := GetDir ( tmp ) ;
52527: LD_ADDR_VAR 0 13
52531: PUSH
52532: LD_VAR 0 11
52536: PPUSH
52537: CALL_OW 254
52541: ST_TO_ADDR
// if r = 5 then
52542: LD_VAR 0 13
52546: PUSH
52547: LD_INT 5
52549: EQUAL
52550: IFFALSE 52560
// r := 0 ;
52552: LD_ADDR_VAR 0 13
52556: PUSH
52557: LD_INT 0
52559: ST_TO_ADDR
// for j = r to 5 do
52560: LD_ADDR_VAR 0 8
52564: PUSH
52565: DOUBLE
52566: LD_VAR 0 13
52570: DEC
52571: ST_TO_ADDR
52572: LD_INT 5
52574: PUSH
52575: FOR_TO
52576: IFFALSE 52690
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52578: LD_ADDR_VAR 0 9
52582: PUSH
52583: LD_VAR 0 11
52587: PPUSH
52588: CALL_OW 250
52592: PPUSH
52593: LD_VAR 0 8
52597: PPUSH
52598: LD_INT 2
52600: PPUSH
52601: CALL_OW 272
52605: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52606: LD_ADDR_VAR 0 10
52610: PUSH
52611: LD_VAR 0 11
52615: PPUSH
52616: CALL_OW 251
52620: PPUSH
52621: LD_VAR 0 8
52625: PPUSH
52626: LD_INT 2
52628: PPUSH
52629: CALL_OW 273
52633: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52634: LD_VAR 0 9
52638: PPUSH
52639: LD_VAR 0 10
52643: PPUSH
52644: CALL_OW 488
52648: PUSH
52649: LD_VAR 0 9
52653: PPUSH
52654: LD_VAR 0 10
52658: PPUSH
52659: CALL_OW 428
52663: NOT
52664: AND
52665: IFFALSE 52688
// begin ComMoveXY ( tmp , _x , _y ) ;
52667: LD_VAR 0 11
52671: PPUSH
52672: LD_VAR 0 9
52676: PPUSH
52677: LD_VAR 0 10
52681: PPUSH
52682: CALL_OW 111
// break ;
52686: GO 52690
// end ; end ;
52688: GO 52575
52690: POP
52691: POP
// end ;
52692: GO 52158
52694: POP
52695: POP
// end ;
52696: LD_VAR 0 6
52700: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
52701: LD_INT 0
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
// result := false ;
52713: LD_ADDR_VAR 0 6
52717: PUSH
52718: LD_INT 0
52720: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52721: LD_VAR 0 1
52725: NOT
52726: PUSH
52727: LD_VAR 0 1
52731: PPUSH
52732: CALL_OW 266
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: IN
52747: NOT
52748: OR
52749: PUSH
52750: LD_VAR 0 2
52754: NOT
52755: OR
52756: PUSH
52757: LD_VAR 0 5
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: LD_INT 5
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: IN
52788: NOT
52789: OR
52790: PUSH
52791: LD_VAR 0 3
52795: PPUSH
52796: LD_VAR 0 4
52800: PPUSH
52801: CALL_OW 488
52805: NOT
52806: OR
52807: IFFALSE 52811
// exit ;
52809: GO 53528
// pom := GetBase ( depot ) ;
52811: LD_ADDR_VAR 0 10
52815: PUSH
52816: LD_VAR 0 1
52820: PPUSH
52821: CALL_OW 274
52825: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52826: LD_ADDR_VAR 0 11
52830: PUSH
52831: LD_VAR 0 2
52835: PPUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: CALL_OW 248
52845: PPUSH
52846: CALL_OW 450
52850: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52851: LD_VAR 0 10
52855: PPUSH
52856: LD_INT 1
52858: PPUSH
52859: CALL_OW 275
52863: PUSH
52864: LD_VAR 0 11
52868: PUSH
52869: LD_INT 1
52871: ARRAY
52872: GREATEREQUAL
52873: PUSH
52874: LD_VAR 0 10
52878: PPUSH
52879: LD_INT 2
52881: PPUSH
52882: CALL_OW 275
52886: PUSH
52887: LD_VAR 0 11
52891: PUSH
52892: LD_INT 2
52894: ARRAY
52895: GREATEREQUAL
52896: AND
52897: PUSH
52898: LD_VAR 0 10
52902: PPUSH
52903: LD_INT 3
52905: PPUSH
52906: CALL_OW 275
52910: PUSH
52911: LD_VAR 0 11
52915: PUSH
52916: LD_INT 3
52918: ARRAY
52919: GREATEREQUAL
52920: AND
52921: NOT
52922: IFFALSE 52926
// exit ;
52924: GO 53528
// if GetBType ( depot ) = b_depot then
52926: LD_VAR 0 1
52930: PPUSH
52931: CALL_OW 266
52935: PUSH
52936: LD_INT 0
52938: EQUAL
52939: IFFALSE 52951
// dist := 28 else
52941: LD_ADDR_VAR 0 14
52945: PUSH
52946: LD_INT 28
52948: ST_TO_ADDR
52949: GO 52959
// dist := 36 ;
52951: LD_ADDR_VAR 0 14
52955: PUSH
52956: LD_INT 36
52958: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52959: LD_VAR 0 1
52963: PPUSH
52964: LD_VAR 0 3
52968: PPUSH
52969: LD_VAR 0 4
52973: PPUSH
52974: CALL_OW 297
52978: PUSH
52979: LD_VAR 0 14
52983: GREATER
52984: IFFALSE 52988
// exit ;
52986: GO 53528
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52988: LD_ADDR_VAR 0 12
52992: PUSH
52993: LD_VAR 0 2
52997: PPUSH
52998: LD_VAR 0 3
53002: PPUSH
53003: LD_VAR 0 4
53007: PPUSH
53008: LD_VAR 0 5
53012: PPUSH
53013: LD_VAR 0 1
53017: PPUSH
53018: CALL_OW 248
53022: PPUSH
53023: LD_INT 0
53025: PPUSH
53026: CALL 53533 0 6
53030: ST_TO_ADDR
// if not hexes then
53031: LD_VAR 0 12
53035: NOT
53036: IFFALSE 53040
// exit ;
53038: GO 53528
// hex := GetHexInfo ( x , y ) ;
53040: LD_ADDR_VAR 0 15
53044: PUSH
53045: LD_VAR 0 3
53049: PPUSH
53050: LD_VAR 0 4
53054: PPUSH
53055: CALL_OW 546
53059: ST_TO_ADDR
// if hex [ 1 ] then
53060: LD_VAR 0 15
53064: PUSH
53065: LD_INT 1
53067: ARRAY
53068: IFFALSE 53072
// exit ;
53070: GO 53528
// height := hex [ 2 ] ;
53072: LD_ADDR_VAR 0 13
53076: PUSH
53077: LD_VAR 0 15
53081: PUSH
53082: LD_INT 2
53084: ARRAY
53085: ST_TO_ADDR
// for i = 1 to hexes do
53086: LD_ADDR_VAR 0 7
53090: PUSH
53091: DOUBLE
53092: LD_INT 1
53094: DEC
53095: ST_TO_ADDR
53096: LD_VAR 0 12
53100: PUSH
53101: FOR_TO
53102: IFFALSE 53432
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53104: LD_VAR 0 12
53108: PUSH
53109: LD_VAR 0 7
53113: ARRAY
53114: PUSH
53115: LD_INT 1
53117: ARRAY
53118: PPUSH
53119: LD_VAR 0 12
53123: PUSH
53124: LD_VAR 0 7
53128: ARRAY
53129: PUSH
53130: LD_INT 2
53132: ARRAY
53133: PPUSH
53134: CALL_OW 488
53138: NOT
53139: PUSH
53140: LD_VAR 0 12
53144: PUSH
53145: LD_VAR 0 7
53149: ARRAY
53150: PUSH
53151: LD_INT 1
53153: ARRAY
53154: PPUSH
53155: LD_VAR 0 12
53159: PUSH
53160: LD_VAR 0 7
53164: ARRAY
53165: PUSH
53166: LD_INT 2
53168: ARRAY
53169: PPUSH
53170: CALL_OW 428
53174: PUSH
53175: LD_INT 0
53177: GREATER
53178: OR
53179: PUSH
53180: LD_VAR 0 12
53184: PUSH
53185: LD_VAR 0 7
53189: ARRAY
53190: PUSH
53191: LD_INT 1
53193: ARRAY
53194: PPUSH
53195: LD_VAR 0 12
53199: PUSH
53200: LD_VAR 0 7
53204: ARRAY
53205: PUSH
53206: LD_INT 2
53208: ARRAY
53209: PPUSH
53210: CALL_OW 351
53214: OR
53215: IFFALSE 53221
// exit ;
53217: POP
53218: POP
53219: GO 53528
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53221: LD_ADDR_VAR 0 8
53225: PUSH
53226: LD_VAR 0 12
53230: PUSH
53231: LD_VAR 0 7
53235: ARRAY
53236: PUSH
53237: LD_INT 1
53239: ARRAY
53240: PPUSH
53241: LD_VAR 0 12
53245: PUSH
53246: LD_VAR 0 7
53250: ARRAY
53251: PUSH
53252: LD_INT 2
53254: ARRAY
53255: PPUSH
53256: CALL_OW 546
53260: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53261: LD_VAR 0 8
53265: PUSH
53266: LD_INT 1
53268: ARRAY
53269: PUSH
53270: LD_VAR 0 8
53274: PUSH
53275: LD_INT 2
53277: ARRAY
53278: PUSH
53279: LD_VAR 0 13
53283: PUSH
53284: LD_INT 2
53286: PLUS
53287: GREATER
53288: OR
53289: PUSH
53290: LD_VAR 0 8
53294: PUSH
53295: LD_INT 2
53297: ARRAY
53298: PUSH
53299: LD_VAR 0 13
53303: PUSH
53304: LD_INT 2
53306: MINUS
53307: LESS
53308: OR
53309: PUSH
53310: LD_VAR 0 8
53314: PUSH
53315: LD_INT 3
53317: ARRAY
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 8
53324: PUSH
53325: LD_INT 9
53327: PUSH
53328: LD_INT 10
53330: PUSH
53331: LD_INT 11
53333: PUSH
53334: LD_INT 12
53336: PUSH
53337: LD_INT 13
53339: PUSH
53340: LD_INT 16
53342: PUSH
53343: LD_INT 17
53345: PUSH
53346: LD_INT 18
53348: PUSH
53349: LD_INT 19
53351: PUSH
53352: LD_INT 20
53354: PUSH
53355: LD_INT 21
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: IN
53373: NOT
53374: OR
53375: PUSH
53376: LD_VAR 0 8
53380: PUSH
53381: LD_INT 5
53383: ARRAY
53384: NOT
53385: OR
53386: PUSH
53387: LD_VAR 0 8
53391: PUSH
53392: LD_INT 6
53394: ARRAY
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 7
53404: PUSH
53405: LD_INT 9
53407: PUSH
53408: LD_INT 10
53410: PUSH
53411: LD_INT 11
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: IN
53422: NOT
53423: OR
53424: IFFALSE 53430
// exit ;
53426: POP
53427: POP
53428: GO 53528
// end ;
53430: GO 53101
53432: POP
53433: POP
// side := GetSide ( depot ) ;
53434: LD_ADDR_VAR 0 9
53438: PUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: CALL_OW 255
53448: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53449: LD_VAR 0 9
53453: PPUSH
53454: LD_VAR 0 3
53458: PPUSH
53459: LD_VAR 0 4
53463: PPUSH
53464: LD_INT 20
53466: PPUSH
53467: CALL 46182 0 4
53471: PUSH
53472: LD_INT 4
53474: ARRAY
53475: IFFALSE 53479
// exit ;
53477: GO 53528
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53479: LD_VAR 0 2
53483: PUSH
53484: LD_INT 29
53486: PUSH
53487: LD_INT 30
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: IN
53494: PUSH
53495: LD_VAR 0 3
53499: PPUSH
53500: LD_VAR 0 4
53504: PPUSH
53505: LD_VAR 0 9
53509: PPUSH
53510: CALL_OW 440
53514: NOT
53515: AND
53516: IFFALSE 53520
// exit ;
53518: GO 53528
// result := true ;
53520: LD_ADDR_VAR 0 6
53524: PUSH
53525: LD_INT 1
53527: ST_TO_ADDR
// end ;
53528: LD_VAR 0 6
53532: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53533: LD_INT 0
53535: PPUSH
53536: PPUSH
53537: PPUSH
53538: PPUSH
53539: PPUSH
53540: PPUSH
53541: PPUSH
53542: PPUSH
53543: PPUSH
53544: PPUSH
53545: PPUSH
53546: PPUSH
53547: PPUSH
53548: PPUSH
53549: PPUSH
53550: PPUSH
53551: PPUSH
53552: PPUSH
53553: PPUSH
53554: PPUSH
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
// result = [ ] ;
53593: LD_ADDR_VAR 0 7
53597: PUSH
53598: EMPTY
53599: ST_TO_ADDR
// temp_list = [ ] ;
53600: LD_ADDR_VAR 0 9
53604: PUSH
53605: EMPTY
53606: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53607: LD_VAR 0 4
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: LD_INT 4
53626: PUSH
53627: LD_INT 5
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: IN
53638: NOT
53639: PUSH
53640: LD_VAR 0 1
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: IN
53655: PUSH
53656: LD_VAR 0 5
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: IN
53675: NOT
53676: AND
53677: OR
53678: IFFALSE 53682
// exit ;
53680: GO 72073
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53682: LD_VAR 0 1
53686: PUSH
53687: LD_INT 6
53689: PUSH
53690: LD_INT 7
53692: PUSH
53693: LD_INT 8
53695: PUSH
53696: LD_INT 13
53698: PUSH
53699: LD_INT 12
53701: PUSH
53702: LD_INT 15
53704: PUSH
53705: LD_INT 11
53707: PUSH
53708: LD_INT 14
53710: PUSH
53711: LD_INT 10
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: IN
53725: IFFALSE 53735
// btype = b_lab ;
53727: LD_ADDR_VAR 0 1
53731: PUSH
53732: LD_INT 6
53734: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53735: LD_VAR 0 6
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: IN
53754: NOT
53755: PUSH
53756: LD_VAR 0 1
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 6
53775: PUSH
53776: LD_INT 36
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: LD_INT 5
53784: PUSH
53785: LD_INT 31
53787: PUSH
53788: LD_INT 32
53790: PUSH
53791: LD_INT 33
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: IN
53807: NOT
53808: PUSH
53809: LD_VAR 0 6
53813: PUSH
53814: LD_INT 1
53816: EQUAL
53817: AND
53818: OR
53819: PUSH
53820: LD_VAR 0 1
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: IN
53835: NOT
53836: PUSH
53837: LD_VAR 0 6
53841: PUSH
53842: LD_INT 2
53844: EQUAL
53845: AND
53846: OR
53847: IFFALSE 53857
// mode = 0 ;
53849: LD_ADDR_VAR 0 6
53853: PUSH
53854: LD_INT 0
53856: ST_TO_ADDR
// case mode of 0 :
53857: LD_VAR 0 6
53861: PUSH
53862: LD_INT 0
53864: DOUBLE
53865: EQUAL
53866: IFTRUE 53870
53868: GO 65323
53870: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53871: LD_ADDR_VAR 0 11
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54064: LD_ADDR_VAR 0 12
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54260: LD_ADDR_VAR 0 13
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54459: LD_ADDR_VAR 0 14
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54655: LD_ADDR_VAR 0 15
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54848: LD_ADDR_VAR 0 16
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55041: LD_ADDR_VAR 0 17
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55271: LD_ADDR_VAR 0 18
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55501: LD_ADDR_VAR 0 19
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55731: LD_ADDR_VAR 0 20
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55961: LD_ADDR_VAR 0 21
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56191: LD_ADDR_VAR 0 22
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56421: LD_ADDR_VAR 0 23
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56701: LD_ADDR_VAR 0 24
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56977: LD_ADDR_VAR 0 25
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57251: LD_ADDR_VAR 0 26
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57527: LD_ADDR_VAR 0 27
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57807: LD_ADDR_VAR 0 28
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58089: LD_ADDR_VAR 0 29
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: NEG
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58368: LD_ADDR_VAR 0 30
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58646: LD_ADDR_VAR 0 31
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58924: LD_ADDR_VAR 0 32
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59202: LD_ADDR_VAR 0 33
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59481: LD_ADDR_VAR 0 34
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 3
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59761: LD_ADDR_VAR 0 35
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59873: LD_ADDR_VAR 0 36
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59985: LD_ADDR_VAR 0 37
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60097: LD_ADDR_VAR 0 38
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60209: LD_ADDR_VAR 0 39
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60321: LD_ADDR_VAR 0 40
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60433: LD_ADDR_VAR 0 41
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60783: LD_ADDR_VAR 0 42
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 3
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: LD_INT 3
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61133: LD_ADDR_VAR 0 43
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61481: LD_ADDR_VAR 0 44
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: NEG
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: NEG
61791: PUSH
61792: LD_INT 3
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61831: LD_ADDR_VAR 0 45
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 3
62140: NEG
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62181: LD_ADDR_VAR 0 46
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 2
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 3
62477: NEG
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62529: LD_ADDR_VAR 0 47
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62680: LD_ADDR_VAR 0 48
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62827: LD_ADDR_VAR 0 49
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62971: LD_ADDR_VAR 0 50
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63115: LD_ADDR_VAR 0 51
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 2
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63262: LD_ADDR_VAR 0 52
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63413: LD_ADDR_VAR 0 53
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: LD_INT 2
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63643: LD_ADDR_VAR 0 54
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63873: LD_ADDR_VAR 0 55
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 2
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64103: LD_ADDR_VAR 0 56
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64333: LD_ADDR_VAR 0 57
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64563: LD_ADDR_VAR 0 58
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 2
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 2
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64793: LD_ADDR_VAR 0 59
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64881: LD_ADDR_VAR 0 60
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64969: LD_ADDR_VAR 0 61
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65057: LD_ADDR_VAR 0 62
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65145: LD_ADDR_VAR 0 63
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65233: LD_ADDR_VAR 0 64
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// end ; 1 :
65321: GO 71218
65323: LD_INT 1
65325: DOUBLE
65326: EQUAL
65327: IFTRUE 65331
65329: GO 67954
65331: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65332: LD_ADDR_VAR 0 11
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: LD_INT 3
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65376: LD_ADDR_VAR 0 12
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65417: LD_ADDR_VAR 0 13
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 2
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65457: LD_ADDR_VAR 0 14
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65498: LD_ADDR_VAR 0 15
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 3
65516: NEG
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: NEG
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65542: LD_ADDR_VAR 0 16
65546: PUSH
65547: LD_INT 2
65549: NEG
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: NEG
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 3
65573: NEG
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65588: LD_ADDR_VAR 0 17
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65632: LD_ADDR_VAR 0 18
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: LIST
65672: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65673: LD_ADDR_VAR 0 19
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 3
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65713: LD_ADDR_VAR 0 20
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 3
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 2
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65754: LD_ADDR_VAR 0 21
65758: PUSH
65759: LD_INT 2
65761: NEG
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 3
65772: NEG
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 3
65783: NEG
65784: PUSH
65785: LD_INT 1
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65798: LD_ADDR_VAR 0 22
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: NEG
65818: PUSH
65819: LD_INT 2
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 3
65829: NEG
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65844: LD_ADDR_VAR 0 23
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 3
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 4
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65888: LD_ADDR_VAR 0 24
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 4
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: LIST
65928: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65929: LD_ADDR_VAR 0 25
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65969: LD_ADDR_VAR 0 26
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66010: LD_ADDR_VAR 0 27
66014: PUSH
66015: LD_INT 3
66017: NEG
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 4
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66054: LD_ADDR_VAR 0 28
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 3
66073: NEG
66074: PUSH
66075: LD_INT 4
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 4
66085: NEG
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: LIST
66099: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66100: LD_ADDR_VAR 0 29
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: LD_INT 2
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 4
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: LD_INT 5
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 5
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 4
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: LD_INT 6
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 6
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: LD_INT 5
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66255: LD_ADDR_VAR 0 30
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 4
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 5
66335: PUSH
66336: LD_INT 0
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 5
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 5
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 6
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 6
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66398: LD_ADDR_VAR 0 31
66402: PUSH
66403: LD_INT 3
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 4
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 4
66445: PUSH
66446: LD_INT 4
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 3
66455: PUSH
66456: LD_INT 4
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 5
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 5
66475: PUSH
66476: LD_INT 5
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: LD_INT 5
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 6
66495: PUSH
66496: LD_INT 5
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 6
66505: PUSH
66506: LD_INT 6
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: LD_INT 6
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66537: LD_ADDR_VAR 0 32
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: LD_INT 4
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: LD_INT 4
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: LD_INT 5
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 4
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: LD_INT 6
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: LD_INT 6
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 1
66657: NEG
66658: PUSH
66659: LD_INT 5
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66680: LD_ADDR_VAR 0 33
66684: PUSH
66685: LD_INT 2
66687: NEG
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: LD_INT 1
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: NEG
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: NEG
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 4
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 5
66766: NEG
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 5
66777: NEG
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 5
66789: NEG
66790: PUSH
66791: LD_INT 1
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 6
66800: NEG
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 6
66811: NEG
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66835: LD_ADDR_VAR 0 34
66839: PUSH
66840: LD_INT 2
66842: NEG
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 2
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 4
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 4
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 4
66914: NEG
66915: PUSH
66916: LD_INT 5
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 5
66926: NEG
66927: PUSH
66928: LD_INT 4
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 5
66938: NEG
66939: PUSH
66940: LD_INT 5
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 5
66950: NEG
66951: PUSH
66952: LD_INT 6
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 6
66962: NEG
66963: PUSH
66964: LD_INT 5
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 6
66974: NEG
66975: PUSH
66976: LD_INT 6
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66998: LD_ADDR_VAR 0 41
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: LD_INT 2
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 1
67016: NEG
67017: PUSH
67018: LD_INT 3
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: LD_INT 2
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: LIST
67041: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67042: LD_ADDR_VAR 0 42
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 2
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: LIST
67082: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67083: LD_ADDR_VAR 0 43
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: LD_INT 2
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: LIST
67122: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67123: LD_ADDR_VAR 0 44
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: LIST
67163: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67164: LD_ADDR_VAR 0 45
67168: PUSH
67169: LD_INT 2
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67208: LD_ADDR_VAR 0 46
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 2
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 2
67227: NEG
67228: PUSH
67229: LD_INT 3
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 3
67239: NEG
67240: PUSH
67241: LD_INT 2
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67254: LD_ADDR_VAR 0 47
67258: PUSH
67259: LD_INT 2
67261: NEG
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 3
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67287: LD_ADDR_VAR 0 48
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67318: LD_ADDR_VAR 0 49
67322: PUSH
67323: LD_INT 3
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67347: LD_ADDR_VAR 0 50
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: LD_INT 3
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: LD_INT 3
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67376: LD_ADDR_VAR 0 51
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 2
67394: NEG
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67407: LD_ADDR_VAR 0 52
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67440: LD_ADDR_VAR 0 53
67444: PUSH
67445: LD_INT 1
67447: NEG
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: LD_INT 3
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 1
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67484: LD_ADDR_VAR 0 54
67488: PUSH
67489: LD_INT 2
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67525: LD_ADDR_VAR 0 55
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: LD_INT 2
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 2
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67565: LD_ADDR_VAR 0 56
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: LD_INT 3
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: NEG
67593: PUSH
67594: LD_INT 2
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67606: LD_ADDR_VAR 0 57
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67650: LD_ADDR_VAR 0 58
67654: PUSH
67655: LD_INT 2
67657: NEG
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: LD_INT 2
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67696: LD_ADDR_VAR 0 59
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 2
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 1
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67740: LD_ADDR_VAR 0 60
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: LD_INT 1
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67781: LD_ADDR_VAR 0 61
67785: PUSH
67786: LD_INT 2
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 2
67798: PUSH
67799: LD_INT 2
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67821: LD_ADDR_VAR 0 62
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67862: LD_ADDR_VAR 0 63
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 2
67880: NEG
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: LIST
67905: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67906: LD_ADDR_VAR 0 64
67910: PUSH
67911: LD_INT 1
67913: NEG
67914: PUSH
67915: LD_INT 2
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 2
67925: NEG
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: ST_TO_ADDR
// end ; 2 :
67952: GO 71218
67954: LD_INT 2
67956: DOUBLE
67957: EQUAL
67958: IFTRUE 67962
67960: GO 71217
67962: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67963: LD_ADDR_VAR 0 29
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 5
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 5
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 4
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 3
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: PUSH
68043: LD_INT 2
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 5
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 3
68063: PUSH
68064: LD_INT 3
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: LD_INT 2
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: LD_INT 4
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: LD_INT 4
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 2
68113: PUSH
68114: LD_INT 3
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 4
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 2
68143: PUSH
68144: LD_INT 4
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 3
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 4
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: LD_INT 5
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 5
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: LD_INT 4
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: LD_INT 3
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 5
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: NEG
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 2
68269: NEG
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 2
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 3
68291: NEG
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 4
68302: NEG
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 4
68313: NEG
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 4
68325: NEG
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 2
68337: NEG
68338: PUSH
68339: LD_INT 2
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 4
68348: NEG
68349: PUSH
68350: LD_INT 4
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 4
68360: NEG
68361: PUSH
68362: LD_INT 5
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: LD_INT 4
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: NEG
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 4
68396: NEG
68397: PUSH
68398: LD_INT 3
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 5
68408: NEG
68409: PUSH
68410: LD_INT 4
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 5
68420: NEG
68421: PUSH
68422: LD_INT 5
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 3
68432: NEG
68433: PUSH
68434: LD_INT 5
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 5
68444: NEG
68445: PUSH
68446: LD_INT 3
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68501: LD_ADDR_VAR 0 30
68505: PUSH
68506: LD_INT 4
68508: PUSH
68509: LD_INT 4
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 5
68528: PUSH
68529: LD_INT 4
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 5
68538: PUSH
68539: LD_INT 5
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 4
68548: PUSH
68549: LD_INT 5
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: PUSH
68559: LD_INT 4
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 3
68568: PUSH
68569: LD_INT 3
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 5
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: LD_INT 5
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 3
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 2
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: LD_INT 3
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: LD_INT 4
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: LD_INT 4
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: LD_INT 3
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: LD_INT 4
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: LD_INT 2
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 4
68691: NEG
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 4
68702: NEG
68703: PUSH
68704: LD_INT 1
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: NEG
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 4
68736: NEG
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 5
68747: NEG
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 5
68758: NEG
68759: PUSH
68760: LD_INT 1
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 5
68770: NEG
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: LD_INT 3
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 3
68805: NEG
68806: PUSH
68807: LD_INT 4
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: NEG
68818: PUSH
68819: LD_INT 3
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 2
68829: NEG
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 3
68841: NEG
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 4
68853: NEG
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 4
68865: NEG
68866: PUSH
68867: LD_INT 4
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: NEG
68878: PUSH
68879: LD_INT 4
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 4
68889: NEG
68890: PUSH
68891: LD_INT 2
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 5
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: LD_INT 4
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: PUSH
68935: LD_INT 3
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_INT 3
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: NEG
68957: PUSH
68958: LD_INT 4
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: PUSH
68970: LD_INT 5
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: LD_INT 3
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 2
68991: NEG
68992: PUSH
68993: LD_INT 5
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69048: LD_ADDR_VAR 0 31
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: LD_INT 4
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: LD_INT 4
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: LD_INT 5
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: LD_INT 5
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: LD_INT 4
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 1
69116: NEG
69117: PUSH
69118: LD_INT 3
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 2
69127: PUSH
69128: LD_INT 5
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: NEG
69138: PUSH
69139: LD_INT 3
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: LD_INT 0
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 2
69171: NEG
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 2
69182: NEG
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 3
69193: NEG
69194: PUSH
69195: LD_INT 1
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 4
69204: NEG
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 4
69215: NEG
69216: PUSH
69217: LD_INT 1
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 2
69239: NEG
69240: PUSH
69241: LD_INT 2
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: LD_INT 4
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 4
69262: NEG
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: NEG
69275: PUSH
69276: LD_INT 4
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 3
69286: NEG
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 4
69298: NEG
69299: PUSH
69300: LD_INT 3
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 5
69310: NEG
69311: PUSH
69312: LD_INT 4
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 5
69322: NEG
69323: PUSH
69324: LD_INT 5
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 3
69334: NEG
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 5
69346: NEG
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: LD_INT 3
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 1
69391: PUSH
69392: LD_INT 2
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: LD_INT 2
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: LD_INT 3
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 1
69425: NEG
69426: PUSH
69427: LD_INT 4
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: LD_INT 2
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 2
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 4
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 4
69470: PUSH
69471: LD_INT 1
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 5
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 5
69491: PUSH
69492: LD_INT 1
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 4
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 3
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 3
69521: PUSH
69522: LD_INT 1
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 3
69532: PUSH
69533: LD_INT 2
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 5
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69598: LD_ADDR_VAR 0 32
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: LD_INT 0
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 4
69616: NEG
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 3
69639: NEG
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 4
69650: NEG
69651: PUSH
69652: LD_INT 1
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 5
69661: NEG
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 5
69672: NEG
69673: PUSH
69674: LD_INT 1
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 5
69684: NEG
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 3
69696: NEG
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: LD_INT 3
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 3
69719: NEG
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: NEG
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: NEG
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 3
69755: NEG
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 4
69767: NEG
69768: PUSH
69769: LD_INT 3
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 4
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: LD_INT 4
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 4
69803: NEG
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: LD_INT 4
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: LD_INT 5
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: LD_INT 3
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: LD_INT 3
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: PUSH
69872: LD_INT 4
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 5
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: PUSH
69895: LD_INT 3
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: NEG
69906: PUSH
69907: LD_INT 5
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 4
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 3
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 2
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: LD_INT 2
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: LD_INT 4
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 4
70020: PUSH
70021: LD_INT 3
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: LD_INT 4
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 5
70040: PUSH
70041: LD_INT 5
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: PUSH
70051: LD_INT 5
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 3
70060: PUSH
70061: LD_INT 4
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 3
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 5
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: PUSH
70091: LD_INT 5
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70145: LD_ADDR_VAR 0 33
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: LD_INT 4
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: LD_INT 5
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 3
70176: NEG
70177: PUSH
70178: LD_INT 4
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: NEG
70189: PUSH
70190: LD_INT 3
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 4
70200: NEG
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 5
70212: NEG
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: NEG
70225: PUSH
70226: LD_INT 5
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 3
70236: NEG
70237: PUSH
70238: LD_INT 5
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 5
70248: NEG
70249: PUSH
70250: LD_INT 3
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: LD_INT 3
70263: NEG
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: LD_INT 3
70285: NEG
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: LD_INT 2
70296: NEG
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: LD_INT 2
70307: NEG
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 1
70315: NEG
70316: PUSH
70317: LD_INT 3
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: NEG
70328: PUSH
70329: LD_INT 4
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 2
70339: PUSH
70340: LD_INT 2
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 2
70350: NEG
70351: PUSH
70352: LD_INT 4
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 4
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 5
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 5
70393: PUSH
70394: LD_INT 1
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 4
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 3
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 3
70423: PUSH
70424: LD_INT 1
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: LD_INT 2
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 5
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 3
70455: PUSH
70456: LD_INT 3
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: PUSH
70466: LD_INT 2
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 4
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 4
70485: PUSH
70486: LD_INT 4
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 3
70495: PUSH
70496: LD_INT 4
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 2
70505: PUSH
70506: LD_INT 3
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 2
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 2
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 2
70535: PUSH
70536: LD_INT 4
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: LD_INT 3
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 1
70565: PUSH
70566: LD_INT 4
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: LD_INT 5
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: LD_INT 5
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 1
70595: NEG
70596: PUSH
70597: LD_INT 4
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 1
70606: NEG
70607: PUSH
70608: LD_INT 3
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: LD_INT 5
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 2
70627: NEG
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70683: LD_ADDR_VAR 0 34
70687: PUSH
70688: LD_INT 0
70690: PUSH
70691: LD_INT 4
70693: NEG
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 0
70701: PUSH
70702: LD_INT 5
70704: NEG
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: LD_INT 4
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 1
70723: PUSH
70724: LD_INT 3
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 3
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 1
70745: NEG
70746: PUSH
70747: LD_INT 4
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 1
70757: NEG
70758: PUSH
70759: LD_INT 5
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 2
70769: PUSH
70770: LD_INT 3
70772: NEG
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: LD_INT 5
70784: NEG
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 3
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 3
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 4
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 4
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 2
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 2
70864: PUSH
70865: LD_INT 2
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 4
70875: PUSH
70876: LD_INT 2
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 4
70885: PUSH
70886: LD_INT 4
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 4
70895: PUSH
70896: LD_INT 3
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 5
70905: PUSH
70906: LD_INT 4
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 5
70915: PUSH
70916: LD_INT 5
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: LD_INT 5
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 3
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 3
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 5
70955: PUSH
70956: LD_INT 3
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 3
70965: PUSH
70966: LD_INT 5
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 0
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 1
70995: PUSH
70996: LD_INT 3
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: LD_INT 4
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 4
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: LD_INT 3
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: NEG
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 2
71047: PUSH
71048: LD_INT 4
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 2
71057: NEG
71058: PUSH
71059: LD_INT 2
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 4
71068: NEG
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 4
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 3
71091: NEG
71092: PUSH
71093: LD_INT 0
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 3
71102: NEG
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 4
71113: NEG
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 5
71124: NEG
71125: PUSH
71126: LD_INT 0
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 5
71135: NEG
71136: PUSH
71137: LD_INT 1
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 5
71147: NEG
71148: PUSH
71149: LD_INT 2
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 3
71159: NEG
71160: PUSH
71161: LD_INT 2
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: ST_TO_ADDR
// end ; end ;
71215: GO 71218
71217: POP
// case btype of b_depot , b_warehouse :
71218: LD_VAR 0 1
71222: PUSH
71223: LD_INT 0
71225: DOUBLE
71226: EQUAL
71227: IFTRUE 71237
71229: LD_INT 1
71231: DOUBLE
71232: EQUAL
71233: IFTRUE 71237
71235: GO 71438
71237: POP
// case nation of nation_american :
71238: LD_VAR 0 5
71242: PUSH
71243: LD_INT 1
71245: DOUBLE
71246: EQUAL
71247: IFTRUE 71251
71249: GO 71307
71251: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71252: LD_ADDR_VAR 0 9
71256: PUSH
71257: LD_VAR 0 11
71261: PUSH
71262: LD_VAR 0 12
71266: PUSH
71267: LD_VAR 0 13
71271: PUSH
71272: LD_VAR 0 14
71276: PUSH
71277: LD_VAR 0 15
71281: PUSH
71282: LD_VAR 0 16
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: PUSH
71295: LD_VAR 0 4
71299: PUSH
71300: LD_INT 1
71302: PLUS
71303: ARRAY
71304: ST_TO_ADDR
71305: GO 71436
71307: LD_INT 2
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71315
71313: GO 71371
71315: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71316: LD_ADDR_VAR 0 9
71320: PUSH
71321: LD_VAR 0 17
71325: PUSH
71326: LD_VAR 0 18
71330: PUSH
71331: LD_VAR 0 19
71335: PUSH
71336: LD_VAR 0 20
71340: PUSH
71341: LD_VAR 0 21
71345: PUSH
71346: LD_VAR 0 22
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: LD_VAR 0 4
71363: PUSH
71364: LD_INT 1
71366: PLUS
71367: ARRAY
71368: ST_TO_ADDR
71369: GO 71436
71371: LD_INT 3
71373: DOUBLE
71374: EQUAL
71375: IFTRUE 71379
71377: GO 71435
71379: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71380: LD_ADDR_VAR 0 9
71384: PUSH
71385: LD_VAR 0 23
71389: PUSH
71390: LD_VAR 0 24
71394: PUSH
71395: LD_VAR 0 25
71399: PUSH
71400: LD_VAR 0 26
71404: PUSH
71405: LD_VAR 0 27
71409: PUSH
71410: LD_VAR 0 28
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: PUSH
71423: LD_VAR 0 4
71427: PUSH
71428: LD_INT 1
71430: PLUS
71431: ARRAY
71432: ST_TO_ADDR
71433: GO 71436
71435: POP
71436: GO 71991
71438: LD_INT 2
71440: DOUBLE
71441: EQUAL
71442: IFTRUE 71452
71444: LD_INT 3
71446: DOUBLE
71447: EQUAL
71448: IFTRUE 71452
71450: GO 71508
71452: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71453: LD_ADDR_VAR 0 9
71457: PUSH
71458: LD_VAR 0 29
71462: PUSH
71463: LD_VAR 0 30
71467: PUSH
71468: LD_VAR 0 31
71472: PUSH
71473: LD_VAR 0 32
71477: PUSH
71478: LD_VAR 0 33
71482: PUSH
71483: LD_VAR 0 34
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: PUSH
71496: LD_VAR 0 4
71500: PUSH
71501: LD_INT 1
71503: PLUS
71504: ARRAY
71505: ST_TO_ADDR
71506: GO 71991
71508: LD_INT 16
71510: DOUBLE
71511: EQUAL
71512: IFTRUE 71570
71514: LD_INT 17
71516: DOUBLE
71517: EQUAL
71518: IFTRUE 71570
71520: LD_INT 18
71522: DOUBLE
71523: EQUAL
71524: IFTRUE 71570
71526: LD_INT 19
71528: DOUBLE
71529: EQUAL
71530: IFTRUE 71570
71532: LD_INT 22
71534: DOUBLE
71535: EQUAL
71536: IFTRUE 71570
71538: LD_INT 20
71540: DOUBLE
71541: EQUAL
71542: IFTRUE 71570
71544: LD_INT 21
71546: DOUBLE
71547: EQUAL
71548: IFTRUE 71570
71550: LD_INT 23
71552: DOUBLE
71553: EQUAL
71554: IFTRUE 71570
71556: LD_INT 24
71558: DOUBLE
71559: EQUAL
71560: IFTRUE 71570
71562: LD_INT 25
71564: DOUBLE
71565: EQUAL
71566: IFTRUE 71570
71568: GO 71626
71570: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71571: LD_ADDR_VAR 0 9
71575: PUSH
71576: LD_VAR 0 35
71580: PUSH
71581: LD_VAR 0 36
71585: PUSH
71586: LD_VAR 0 37
71590: PUSH
71591: LD_VAR 0 38
71595: PUSH
71596: LD_VAR 0 39
71600: PUSH
71601: LD_VAR 0 40
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: PUSH
71614: LD_VAR 0 4
71618: PUSH
71619: LD_INT 1
71621: PLUS
71622: ARRAY
71623: ST_TO_ADDR
71624: GO 71991
71626: LD_INT 6
71628: DOUBLE
71629: EQUAL
71630: IFTRUE 71682
71632: LD_INT 7
71634: DOUBLE
71635: EQUAL
71636: IFTRUE 71682
71638: LD_INT 8
71640: DOUBLE
71641: EQUAL
71642: IFTRUE 71682
71644: LD_INT 13
71646: DOUBLE
71647: EQUAL
71648: IFTRUE 71682
71650: LD_INT 12
71652: DOUBLE
71653: EQUAL
71654: IFTRUE 71682
71656: LD_INT 15
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71682
71662: LD_INT 11
71664: DOUBLE
71665: EQUAL
71666: IFTRUE 71682
71668: LD_INT 14
71670: DOUBLE
71671: EQUAL
71672: IFTRUE 71682
71674: LD_INT 10
71676: DOUBLE
71677: EQUAL
71678: IFTRUE 71682
71680: GO 71738
71682: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71683: LD_ADDR_VAR 0 9
71687: PUSH
71688: LD_VAR 0 41
71692: PUSH
71693: LD_VAR 0 42
71697: PUSH
71698: LD_VAR 0 43
71702: PUSH
71703: LD_VAR 0 44
71707: PUSH
71708: LD_VAR 0 45
71712: PUSH
71713: LD_VAR 0 46
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: PUSH
71726: LD_VAR 0 4
71730: PUSH
71731: LD_INT 1
71733: PLUS
71734: ARRAY
71735: ST_TO_ADDR
71736: GO 71991
71738: LD_INT 36
71740: DOUBLE
71741: EQUAL
71742: IFTRUE 71746
71744: GO 71802
71746: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71747: LD_ADDR_VAR 0 9
71751: PUSH
71752: LD_VAR 0 47
71756: PUSH
71757: LD_VAR 0 48
71761: PUSH
71762: LD_VAR 0 49
71766: PUSH
71767: LD_VAR 0 50
71771: PUSH
71772: LD_VAR 0 51
71776: PUSH
71777: LD_VAR 0 52
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: LD_VAR 0 4
71794: PUSH
71795: LD_INT 1
71797: PLUS
71798: ARRAY
71799: ST_TO_ADDR
71800: GO 71991
71802: LD_INT 4
71804: DOUBLE
71805: EQUAL
71806: IFTRUE 71828
71808: LD_INT 5
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71828
71814: LD_INT 34
71816: DOUBLE
71817: EQUAL
71818: IFTRUE 71828
71820: LD_INT 37
71822: DOUBLE
71823: EQUAL
71824: IFTRUE 71828
71826: GO 71884
71828: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71829: LD_ADDR_VAR 0 9
71833: PUSH
71834: LD_VAR 0 53
71838: PUSH
71839: LD_VAR 0 54
71843: PUSH
71844: LD_VAR 0 55
71848: PUSH
71849: LD_VAR 0 56
71853: PUSH
71854: LD_VAR 0 57
71858: PUSH
71859: LD_VAR 0 58
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: PUSH
71872: LD_VAR 0 4
71876: PUSH
71877: LD_INT 1
71879: PLUS
71880: ARRAY
71881: ST_TO_ADDR
71882: GO 71991
71884: LD_INT 31
71886: DOUBLE
71887: EQUAL
71888: IFTRUE 71934
71890: LD_INT 32
71892: DOUBLE
71893: EQUAL
71894: IFTRUE 71934
71896: LD_INT 33
71898: DOUBLE
71899: EQUAL
71900: IFTRUE 71934
71902: LD_INT 27
71904: DOUBLE
71905: EQUAL
71906: IFTRUE 71934
71908: LD_INT 26
71910: DOUBLE
71911: EQUAL
71912: IFTRUE 71934
71914: LD_INT 28
71916: DOUBLE
71917: EQUAL
71918: IFTRUE 71934
71920: LD_INT 29
71922: DOUBLE
71923: EQUAL
71924: IFTRUE 71934
71926: LD_INT 30
71928: DOUBLE
71929: EQUAL
71930: IFTRUE 71934
71932: GO 71990
71934: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71935: LD_ADDR_VAR 0 9
71939: PUSH
71940: LD_VAR 0 59
71944: PUSH
71945: LD_VAR 0 60
71949: PUSH
71950: LD_VAR 0 61
71954: PUSH
71955: LD_VAR 0 62
71959: PUSH
71960: LD_VAR 0 63
71964: PUSH
71965: LD_VAR 0 64
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: PUSH
71978: LD_VAR 0 4
71982: PUSH
71983: LD_INT 1
71985: PLUS
71986: ARRAY
71987: ST_TO_ADDR
71988: GO 71991
71990: POP
// temp_list2 = [ ] ;
71991: LD_ADDR_VAR 0 10
71995: PUSH
71996: EMPTY
71997: ST_TO_ADDR
// for i in temp_list do
71998: LD_ADDR_VAR 0 8
72002: PUSH
72003: LD_VAR 0 9
72007: PUSH
72008: FOR_IN
72009: IFFALSE 72061
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72011: LD_ADDR_VAR 0 10
72015: PUSH
72016: LD_VAR 0 10
72020: PUSH
72021: LD_VAR 0 8
72025: PUSH
72026: LD_INT 1
72028: ARRAY
72029: PUSH
72030: LD_VAR 0 2
72034: PLUS
72035: PUSH
72036: LD_VAR 0 8
72040: PUSH
72041: LD_INT 2
72043: ARRAY
72044: PUSH
72045: LD_VAR 0 3
72049: PLUS
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: EMPTY
72056: LIST
72057: ADD
72058: ST_TO_ADDR
72059: GO 72008
72061: POP
72062: POP
// result = temp_list2 ;
72063: LD_ADDR_VAR 0 7
72067: PUSH
72068: LD_VAR 0 10
72072: ST_TO_ADDR
// end ;
72073: LD_VAR 0 7
72077: RET
// export function EnemyInRange ( unit , dist ) ; begin
72078: LD_INT 0
72080: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72081: LD_ADDR_VAR 0 3
72085: PUSH
72086: LD_VAR 0 1
72090: PPUSH
72091: CALL_OW 255
72095: PPUSH
72096: LD_VAR 0 1
72100: PPUSH
72101: CALL_OW 250
72105: PPUSH
72106: LD_VAR 0 1
72110: PPUSH
72111: CALL_OW 251
72115: PPUSH
72116: LD_VAR 0 2
72120: PPUSH
72121: CALL 46182 0 4
72125: PUSH
72126: LD_INT 4
72128: ARRAY
72129: ST_TO_ADDR
// end ;
72130: LD_VAR 0 3
72134: RET
// export function PlayerSeeMe ( unit ) ; begin
72135: LD_INT 0
72137: PPUSH
// result := See ( your_side , unit ) ;
72138: LD_ADDR_VAR 0 2
72142: PUSH
72143: LD_OWVAR 2
72147: PPUSH
72148: LD_VAR 0 1
72152: PPUSH
72153: CALL_OW 292
72157: ST_TO_ADDR
// end ;
72158: LD_VAR 0 2
72162: RET
// export function ReverseDir ( unit ) ; begin
72163: LD_INT 0
72165: PPUSH
// if not unit then
72166: LD_VAR 0 1
72170: NOT
72171: IFFALSE 72175
// exit ;
72173: GO 72198
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72175: LD_ADDR_VAR 0 2
72179: PUSH
72180: LD_VAR 0 1
72184: PPUSH
72185: CALL_OW 254
72189: PUSH
72190: LD_INT 3
72192: PLUS
72193: PUSH
72194: LD_INT 6
72196: MOD
72197: ST_TO_ADDR
// end ;
72198: LD_VAR 0 2
72202: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72203: LD_INT 0
72205: PPUSH
72206: PPUSH
72207: PPUSH
72208: PPUSH
72209: PPUSH
// if not hexes then
72210: LD_VAR 0 2
72214: NOT
72215: IFFALSE 72219
// exit ;
72217: GO 72367
// dist := 9999 ;
72219: LD_ADDR_VAR 0 5
72223: PUSH
72224: LD_INT 9999
72226: ST_TO_ADDR
// for i = 1 to hexes do
72227: LD_ADDR_VAR 0 4
72231: PUSH
72232: DOUBLE
72233: LD_INT 1
72235: DEC
72236: ST_TO_ADDR
72237: LD_VAR 0 2
72241: PUSH
72242: FOR_TO
72243: IFFALSE 72355
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72245: LD_VAR 0 1
72249: PPUSH
72250: LD_VAR 0 2
72254: PUSH
72255: LD_VAR 0 4
72259: ARRAY
72260: PUSH
72261: LD_INT 1
72263: ARRAY
72264: PPUSH
72265: LD_VAR 0 2
72269: PUSH
72270: LD_VAR 0 4
72274: ARRAY
72275: PUSH
72276: LD_INT 2
72278: ARRAY
72279: PPUSH
72280: CALL_OW 297
72284: PUSH
72285: LD_VAR 0 5
72289: LESS
72290: IFFALSE 72353
// begin hex := hexes [ i ] ;
72292: LD_ADDR_VAR 0 7
72296: PUSH
72297: LD_VAR 0 2
72301: PUSH
72302: LD_VAR 0 4
72306: ARRAY
72307: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72308: LD_ADDR_VAR 0 5
72312: PUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: LD_VAR 0 2
72322: PUSH
72323: LD_VAR 0 4
72327: ARRAY
72328: PUSH
72329: LD_INT 1
72331: ARRAY
72332: PPUSH
72333: LD_VAR 0 2
72337: PUSH
72338: LD_VAR 0 4
72342: ARRAY
72343: PUSH
72344: LD_INT 2
72346: ARRAY
72347: PPUSH
72348: CALL_OW 297
72352: ST_TO_ADDR
// end ; end ;
72353: GO 72242
72355: POP
72356: POP
// result := hex ;
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: LD_VAR 0 7
72366: ST_TO_ADDR
// end ;
72367: LD_VAR 0 3
72371: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72372: LD_INT 0
72374: PPUSH
72375: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72376: LD_VAR 0 1
72380: NOT
72381: PUSH
72382: LD_VAR 0 1
72386: PUSH
72387: LD_INT 21
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 23
72399: PUSH
72400: LD_INT 2
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PPUSH
72411: CALL_OW 69
72415: IN
72416: NOT
72417: OR
72418: IFFALSE 72422
// exit ;
72420: GO 72469
// for i = 1 to 3 do
72422: LD_ADDR_VAR 0 3
72426: PUSH
72427: DOUBLE
72428: LD_INT 1
72430: DEC
72431: ST_TO_ADDR
72432: LD_INT 3
72434: PUSH
72435: FOR_TO
72436: IFFALSE 72467
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72438: LD_VAR 0 1
72442: PPUSH
72443: CALL_OW 250
72447: PPUSH
72448: LD_VAR 0 1
72452: PPUSH
72453: CALL_OW 251
72457: PPUSH
72458: LD_INT 1
72460: PPUSH
72461: CALL_OW 453
72465: GO 72435
72467: POP
72468: POP
// end ;
72469: LD_VAR 0 2
72473: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72474: LD_INT 0
72476: PPUSH
72477: PPUSH
72478: PPUSH
72479: PPUSH
72480: PPUSH
72481: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72482: LD_VAR 0 1
72486: NOT
72487: PUSH
72488: LD_VAR 0 2
72492: NOT
72493: OR
72494: PUSH
72495: LD_VAR 0 1
72499: PPUSH
72500: CALL_OW 314
72504: OR
72505: IFFALSE 72509
// exit ;
72507: GO 72950
// x := GetX ( enemy_unit ) ;
72509: LD_ADDR_VAR 0 7
72513: PUSH
72514: LD_VAR 0 2
72518: PPUSH
72519: CALL_OW 250
72523: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72524: LD_ADDR_VAR 0 8
72528: PUSH
72529: LD_VAR 0 2
72533: PPUSH
72534: CALL_OW 251
72538: ST_TO_ADDR
// if not x or not y then
72539: LD_VAR 0 7
72543: NOT
72544: PUSH
72545: LD_VAR 0 8
72549: NOT
72550: OR
72551: IFFALSE 72555
// exit ;
72553: GO 72950
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72555: LD_ADDR_VAR 0 6
72559: PUSH
72560: LD_VAR 0 7
72564: PPUSH
72565: LD_INT 0
72567: PPUSH
72568: LD_INT 4
72570: PPUSH
72571: CALL_OW 272
72575: PUSH
72576: LD_VAR 0 8
72580: PPUSH
72581: LD_INT 0
72583: PPUSH
72584: LD_INT 4
72586: PPUSH
72587: CALL_OW 273
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_VAR 0 7
72600: PPUSH
72601: LD_INT 1
72603: PPUSH
72604: LD_INT 4
72606: PPUSH
72607: CALL_OW 272
72611: PUSH
72612: LD_VAR 0 8
72616: PPUSH
72617: LD_INT 1
72619: PPUSH
72620: LD_INT 4
72622: PPUSH
72623: CALL_OW 273
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_VAR 0 7
72636: PPUSH
72637: LD_INT 2
72639: PPUSH
72640: LD_INT 4
72642: PPUSH
72643: CALL_OW 272
72647: PUSH
72648: LD_VAR 0 8
72652: PPUSH
72653: LD_INT 2
72655: PPUSH
72656: LD_INT 4
72658: PPUSH
72659: CALL_OW 273
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_VAR 0 7
72672: PPUSH
72673: LD_INT 3
72675: PPUSH
72676: LD_INT 4
72678: PPUSH
72679: CALL_OW 272
72683: PUSH
72684: LD_VAR 0 8
72688: PPUSH
72689: LD_INT 3
72691: PPUSH
72692: LD_INT 4
72694: PPUSH
72695: CALL_OW 273
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_VAR 0 7
72708: PPUSH
72709: LD_INT 4
72711: PPUSH
72712: LD_INT 4
72714: PPUSH
72715: CALL_OW 272
72719: PUSH
72720: LD_VAR 0 8
72724: PPUSH
72725: LD_INT 4
72727: PPUSH
72728: LD_INT 4
72730: PPUSH
72731: CALL_OW 273
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_VAR 0 7
72744: PPUSH
72745: LD_INT 5
72747: PPUSH
72748: LD_INT 4
72750: PPUSH
72751: CALL_OW 272
72755: PUSH
72756: LD_VAR 0 8
72760: PPUSH
72761: LD_INT 5
72763: PPUSH
72764: LD_INT 4
72766: PPUSH
72767: CALL_OW 273
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: ST_TO_ADDR
// for i = tmp downto 1 do
72784: LD_ADDR_VAR 0 4
72788: PUSH
72789: DOUBLE
72790: LD_VAR 0 6
72794: INC
72795: ST_TO_ADDR
72796: LD_INT 1
72798: PUSH
72799: FOR_DOWNTO
72800: IFFALSE 72901
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72802: LD_VAR 0 6
72806: PUSH
72807: LD_VAR 0 4
72811: ARRAY
72812: PUSH
72813: LD_INT 1
72815: ARRAY
72816: PPUSH
72817: LD_VAR 0 6
72821: PUSH
72822: LD_VAR 0 4
72826: ARRAY
72827: PUSH
72828: LD_INT 2
72830: ARRAY
72831: PPUSH
72832: CALL_OW 488
72836: NOT
72837: PUSH
72838: LD_VAR 0 6
72842: PUSH
72843: LD_VAR 0 4
72847: ARRAY
72848: PUSH
72849: LD_INT 1
72851: ARRAY
72852: PPUSH
72853: LD_VAR 0 6
72857: PUSH
72858: LD_VAR 0 4
72862: ARRAY
72863: PUSH
72864: LD_INT 2
72866: ARRAY
72867: PPUSH
72868: CALL_OW 428
72872: PUSH
72873: LD_INT 0
72875: NONEQUAL
72876: OR
72877: IFFALSE 72899
// tmp := Delete ( tmp , i ) ;
72879: LD_ADDR_VAR 0 6
72883: PUSH
72884: LD_VAR 0 6
72888: PPUSH
72889: LD_VAR 0 4
72893: PPUSH
72894: CALL_OW 3
72898: ST_TO_ADDR
72899: GO 72799
72901: POP
72902: POP
// j := GetClosestHex ( unit , tmp ) ;
72903: LD_ADDR_VAR 0 5
72907: PUSH
72908: LD_VAR 0 1
72912: PPUSH
72913: LD_VAR 0 6
72917: PPUSH
72918: CALL 72203 0 2
72922: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72923: LD_VAR 0 1
72927: PPUSH
72928: LD_VAR 0 5
72932: PUSH
72933: LD_INT 1
72935: ARRAY
72936: PPUSH
72937: LD_VAR 0 5
72941: PUSH
72942: LD_INT 2
72944: ARRAY
72945: PPUSH
72946: CALL_OW 111
// end ;
72950: LD_VAR 0 3
72954: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72955: LD_INT 0
72957: PPUSH
72958: PPUSH
72959: PPUSH
// uc_side = 0 ;
72960: LD_ADDR_OWVAR 20
72964: PUSH
72965: LD_INT 0
72967: ST_TO_ADDR
// uc_nation = 0 ;
72968: LD_ADDR_OWVAR 21
72972: PUSH
72973: LD_INT 0
72975: ST_TO_ADDR
// InitHc_All ( ) ;
72976: CALL_OW 584
// InitVc ;
72980: CALL_OW 20
// if mastodonts then
72984: LD_VAR 0 6
72988: IFFALSE 73055
// for i = 1 to mastodonts do
72990: LD_ADDR_VAR 0 11
72994: PUSH
72995: DOUBLE
72996: LD_INT 1
72998: DEC
72999: ST_TO_ADDR
73000: LD_VAR 0 6
73004: PUSH
73005: FOR_TO
73006: IFFALSE 73053
// begin vc_chassis := 31 ;
73008: LD_ADDR_OWVAR 37
73012: PUSH
73013: LD_INT 31
73015: ST_TO_ADDR
// vc_control := control_rider ;
73016: LD_ADDR_OWVAR 38
73020: PUSH
73021: LD_INT 4
73023: ST_TO_ADDR
// animal := CreateVehicle ;
73024: LD_ADDR_VAR 0 12
73028: PUSH
73029: CALL_OW 45
73033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73034: LD_VAR 0 12
73038: PPUSH
73039: LD_VAR 0 8
73043: PPUSH
73044: LD_INT 0
73046: PPUSH
73047: CALL 75243 0 3
// end ;
73051: GO 73005
73053: POP
73054: POP
// if horses then
73055: LD_VAR 0 5
73059: IFFALSE 73126
// for i = 1 to horses do
73061: LD_ADDR_VAR 0 11
73065: PUSH
73066: DOUBLE
73067: LD_INT 1
73069: DEC
73070: ST_TO_ADDR
73071: LD_VAR 0 5
73075: PUSH
73076: FOR_TO
73077: IFFALSE 73124
// begin hc_class := 21 ;
73079: LD_ADDR_OWVAR 28
73083: PUSH
73084: LD_INT 21
73086: ST_TO_ADDR
// hc_gallery :=  ;
73087: LD_ADDR_OWVAR 33
73091: PUSH
73092: LD_STRING 
73094: ST_TO_ADDR
// animal := CreateHuman ;
73095: LD_ADDR_VAR 0 12
73099: PUSH
73100: CALL_OW 44
73104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73105: LD_VAR 0 12
73109: PPUSH
73110: LD_VAR 0 8
73114: PPUSH
73115: LD_INT 0
73117: PPUSH
73118: CALL 75243 0 3
// end ;
73122: GO 73076
73124: POP
73125: POP
// if birds then
73126: LD_VAR 0 1
73130: IFFALSE 73197
// for i = 1 to birds do
73132: LD_ADDR_VAR 0 11
73136: PUSH
73137: DOUBLE
73138: LD_INT 1
73140: DEC
73141: ST_TO_ADDR
73142: LD_VAR 0 1
73146: PUSH
73147: FOR_TO
73148: IFFALSE 73195
// begin hc_class = 18 ;
73150: LD_ADDR_OWVAR 28
73154: PUSH
73155: LD_INT 18
73157: ST_TO_ADDR
// hc_gallery =  ;
73158: LD_ADDR_OWVAR 33
73162: PUSH
73163: LD_STRING 
73165: ST_TO_ADDR
// animal := CreateHuman ;
73166: LD_ADDR_VAR 0 12
73170: PUSH
73171: CALL_OW 44
73175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73176: LD_VAR 0 12
73180: PPUSH
73181: LD_VAR 0 8
73185: PPUSH
73186: LD_INT 0
73188: PPUSH
73189: CALL 75243 0 3
// end ;
73193: GO 73147
73195: POP
73196: POP
// if tigers then
73197: LD_VAR 0 2
73201: IFFALSE 73285
// for i = 1 to tigers do
73203: LD_ADDR_VAR 0 11
73207: PUSH
73208: DOUBLE
73209: LD_INT 1
73211: DEC
73212: ST_TO_ADDR
73213: LD_VAR 0 2
73217: PUSH
73218: FOR_TO
73219: IFFALSE 73283
// begin hc_class = class_tiger ;
73221: LD_ADDR_OWVAR 28
73225: PUSH
73226: LD_INT 14
73228: ST_TO_ADDR
// hc_gallery =  ;
73229: LD_ADDR_OWVAR 33
73233: PUSH
73234: LD_STRING 
73236: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73237: LD_ADDR_OWVAR 35
73241: PUSH
73242: LD_INT 7
73244: NEG
73245: PPUSH
73246: LD_INT 7
73248: PPUSH
73249: CALL_OW 12
73253: ST_TO_ADDR
// animal := CreateHuman ;
73254: LD_ADDR_VAR 0 12
73258: PUSH
73259: CALL_OW 44
73263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73264: LD_VAR 0 12
73268: PPUSH
73269: LD_VAR 0 8
73273: PPUSH
73274: LD_INT 0
73276: PPUSH
73277: CALL 75243 0 3
// end ;
73281: GO 73218
73283: POP
73284: POP
// if apemans then
73285: LD_VAR 0 3
73289: IFFALSE 73412
// for i = 1 to apemans do
73291: LD_ADDR_VAR 0 11
73295: PUSH
73296: DOUBLE
73297: LD_INT 1
73299: DEC
73300: ST_TO_ADDR
73301: LD_VAR 0 3
73305: PUSH
73306: FOR_TO
73307: IFFALSE 73410
// begin hc_class = class_apeman ;
73309: LD_ADDR_OWVAR 28
73313: PUSH
73314: LD_INT 12
73316: ST_TO_ADDR
// hc_gallery =  ;
73317: LD_ADDR_OWVAR 33
73321: PUSH
73322: LD_STRING 
73324: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
73325: LD_ADDR_OWVAR 35
73329: PUSH
73330: LD_INT 5
73332: NEG
73333: PPUSH
73334: LD_INT 5
73336: PPUSH
73337: CALL_OW 12
73341: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73342: LD_ADDR_OWVAR 31
73346: PUSH
73347: LD_INT 1
73349: PPUSH
73350: LD_INT 3
73352: PPUSH
73353: CALL_OW 12
73357: PUSH
73358: LD_INT 1
73360: PPUSH
73361: LD_INT 3
73363: PPUSH
73364: CALL_OW 12
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: ST_TO_ADDR
// animal := CreateHuman ;
73381: LD_ADDR_VAR 0 12
73385: PUSH
73386: CALL_OW 44
73390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73391: LD_VAR 0 12
73395: PPUSH
73396: LD_VAR 0 8
73400: PPUSH
73401: LD_INT 0
73403: PPUSH
73404: CALL 75243 0 3
// end ;
73408: GO 73306
73410: POP
73411: POP
// if enchidnas then
73412: LD_VAR 0 4
73416: IFFALSE 73483
// for i = 1 to enchidnas do
73418: LD_ADDR_VAR 0 11
73422: PUSH
73423: DOUBLE
73424: LD_INT 1
73426: DEC
73427: ST_TO_ADDR
73428: LD_VAR 0 4
73432: PUSH
73433: FOR_TO
73434: IFFALSE 73481
// begin hc_class = 13 ;
73436: LD_ADDR_OWVAR 28
73440: PUSH
73441: LD_INT 13
73443: ST_TO_ADDR
// hc_gallery =  ;
73444: LD_ADDR_OWVAR 33
73448: PUSH
73449: LD_STRING 
73451: ST_TO_ADDR
// animal := CreateHuman ;
73452: LD_ADDR_VAR 0 12
73456: PUSH
73457: CALL_OW 44
73461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73462: LD_VAR 0 12
73466: PPUSH
73467: LD_VAR 0 8
73471: PPUSH
73472: LD_INT 0
73474: PPUSH
73475: CALL 75243 0 3
// end ;
73479: GO 73433
73481: POP
73482: POP
// if fishes then
73483: LD_VAR 0 7
73487: IFFALSE 73554
// for i = 1 to fishes do
73489: LD_ADDR_VAR 0 11
73493: PUSH
73494: DOUBLE
73495: LD_INT 1
73497: DEC
73498: ST_TO_ADDR
73499: LD_VAR 0 7
73503: PUSH
73504: FOR_TO
73505: IFFALSE 73552
// begin hc_class = 20 ;
73507: LD_ADDR_OWVAR 28
73511: PUSH
73512: LD_INT 20
73514: ST_TO_ADDR
// hc_gallery =  ;
73515: LD_ADDR_OWVAR 33
73519: PUSH
73520: LD_STRING 
73522: ST_TO_ADDR
// animal := CreateHuman ;
73523: LD_ADDR_VAR 0 12
73527: PUSH
73528: CALL_OW 44
73532: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73533: LD_VAR 0 12
73537: PPUSH
73538: LD_VAR 0 9
73542: PPUSH
73543: LD_INT 0
73545: PPUSH
73546: CALL 75243 0 3
// end ;
73550: GO 73504
73552: POP
73553: POP
// end ;
73554: LD_VAR 0 10
73558: RET
// export function WantHeal ( sci , unit ) ; begin
73559: LD_INT 0
73561: PPUSH
// if GetTaskList ( sci ) > 0 then
73562: LD_VAR 0 1
73566: PPUSH
73567: CALL_OW 437
73571: PUSH
73572: LD_INT 0
73574: GREATER
73575: IFFALSE 73645
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73577: LD_VAR 0 1
73581: PPUSH
73582: CALL_OW 437
73586: PUSH
73587: LD_INT 1
73589: ARRAY
73590: PUSH
73591: LD_INT 1
73593: ARRAY
73594: PUSH
73595: LD_STRING l
73597: EQUAL
73598: PUSH
73599: LD_VAR 0 1
73603: PPUSH
73604: CALL_OW 437
73608: PUSH
73609: LD_INT 1
73611: ARRAY
73612: PUSH
73613: LD_INT 4
73615: ARRAY
73616: PUSH
73617: LD_VAR 0 2
73621: EQUAL
73622: AND
73623: IFFALSE 73635
// result := true else
73625: LD_ADDR_VAR 0 3
73629: PUSH
73630: LD_INT 1
73632: ST_TO_ADDR
73633: GO 73643
// result := false ;
73635: LD_ADDR_VAR 0 3
73639: PUSH
73640: LD_INT 0
73642: ST_TO_ADDR
// end else
73643: GO 73653
// result := false ;
73645: LD_ADDR_VAR 0 3
73649: PUSH
73650: LD_INT 0
73652: ST_TO_ADDR
// end ;
73653: LD_VAR 0 3
73657: RET
// export function HealTarget ( sci ) ; begin
73658: LD_INT 0
73660: PPUSH
// if not sci then
73661: LD_VAR 0 1
73665: NOT
73666: IFFALSE 73670
// exit ;
73668: GO 73735
// result := 0 ;
73670: LD_ADDR_VAR 0 2
73674: PUSH
73675: LD_INT 0
73677: ST_TO_ADDR
// if GetTaskList ( sci ) then
73678: LD_VAR 0 1
73682: PPUSH
73683: CALL_OW 437
73687: IFFALSE 73735
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73689: LD_VAR 0 1
73693: PPUSH
73694: CALL_OW 437
73698: PUSH
73699: LD_INT 1
73701: ARRAY
73702: PUSH
73703: LD_INT 1
73705: ARRAY
73706: PUSH
73707: LD_STRING l
73709: EQUAL
73710: IFFALSE 73735
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73712: LD_ADDR_VAR 0 2
73716: PUSH
73717: LD_VAR 0 1
73721: PPUSH
73722: CALL_OW 437
73726: PUSH
73727: LD_INT 1
73729: ARRAY
73730: PUSH
73731: LD_INT 4
73733: ARRAY
73734: ST_TO_ADDR
// end ;
73735: LD_VAR 0 2
73739: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73740: LD_INT 0
73742: PPUSH
73743: PPUSH
73744: PPUSH
73745: PPUSH
// if not base_units then
73746: LD_VAR 0 1
73750: NOT
73751: IFFALSE 73755
// exit ;
73753: GO 73842
// result := false ;
73755: LD_ADDR_VAR 0 2
73759: PUSH
73760: LD_INT 0
73762: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73763: LD_ADDR_VAR 0 5
73767: PUSH
73768: LD_VAR 0 1
73772: PPUSH
73773: LD_INT 21
73775: PUSH
73776: LD_INT 3
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PPUSH
73783: CALL_OW 72
73787: ST_TO_ADDR
// if not tmp then
73788: LD_VAR 0 5
73792: NOT
73793: IFFALSE 73797
// exit ;
73795: GO 73842
// for i in tmp do
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_VAR 0 5
73806: PUSH
73807: FOR_IN
73808: IFFALSE 73840
// begin result := EnemyInRange ( i , 22 ) ;
73810: LD_ADDR_VAR 0 2
73814: PUSH
73815: LD_VAR 0 3
73819: PPUSH
73820: LD_INT 22
73822: PPUSH
73823: CALL 72078 0 2
73827: ST_TO_ADDR
// if result then
73828: LD_VAR 0 2
73832: IFFALSE 73838
// exit ;
73834: POP
73835: POP
73836: GO 73842
// end ;
73838: GO 73807
73840: POP
73841: POP
// end ;
73842: LD_VAR 0 2
73846: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73847: LD_INT 0
73849: PPUSH
73850: PPUSH
// if not units then
73851: LD_VAR 0 1
73855: NOT
73856: IFFALSE 73860
// exit ;
73858: GO 73930
// result := [ ] ;
73860: LD_ADDR_VAR 0 3
73864: PUSH
73865: EMPTY
73866: ST_TO_ADDR
// for i in units do
73867: LD_ADDR_VAR 0 4
73871: PUSH
73872: LD_VAR 0 1
73876: PUSH
73877: FOR_IN
73878: IFFALSE 73928
// if GetTag ( i ) = tag then
73880: LD_VAR 0 4
73884: PPUSH
73885: CALL_OW 110
73889: PUSH
73890: LD_VAR 0 2
73894: EQUAL
73895: IFFALSE 73926
// result := Insert ( result , result + 1 , i ) ;
73897: LD_ADDR_VAR 0 3
73901: PUSH
73902: LD_VAR 0 3
73906: PPUSH
73907: LD_VAR 0 3
73911: PUSH
73912: LD_INT 1
73914: PLUS
73915: PPUSH
73916: LD_VAR 0 4
73920: PPUSH
73921: CALL_OW 2
73925: ST_TO_ADDR
73926: GO 73877
73928: POP
73929: POP
// end ;
73930: LD_VAR 0 3
73934: RET
// export function IsDriver ( un ) ; begin
73935: LD_INT 0
73937: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73938: LD_ADDR_VAR 0 2
73942: PUSH
73943: LD_VAR 0 1
73947: PUSH
73948: LD_INT 55
73950: PUSH
73951: EMPTY
73952: LIST
73953: PPUSH
73954: CALL_OW 69
73958: IN
73959: ST_TO_ADDR
// end ;
73960: LD_VAR 0 2
73964: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73965: LD_INT 0
73967: PPUSH
73968: PPUSH
// list := [ ] ;
73969: LD_ADDR_VAR 0 5
73973: PUSH
73974: EMPTY
73975: ST_TO_ADDR
// case d of 0 :
73976: LD_VAR 0 3
73980: PUSH
73981: LD_INT 0
73983: DOUBLE
73984: EQUAL
73985: IFTRUE 73989
73987: GO 74122
73989: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73990: LD_ADDR_VAR 0 5
73994: PUSH
73995: LD_VAR 0 1
73999: PUSH
74000: LD_INT 4
74002: MINUS
74003: PUSH
74004: LD_VAR 0 2
74008: PUSH
74009: LD_INT 4
74011: MINUS
74012: PUSH
74013: LD_INT 2
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: LIST
74020: PUSH
74021: LD_VAR 0 1
74025: PUSH
74026: LD_INT 3
74028: MINUS
74029: PUSH
74030: LD_VAR 0 2
74034: PUSH
74035: LD_INT 1
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: LIST
74042: PUSH
74043: LD_VAR 0 1
74047: PUSH
74048: LD_INT 4
74050: PLUS
74051: PUSH
74052: LD_VAR 0 2
74056: PUSH
74057: LD_INT 4
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: LIST
74064: PUSH
74065: LD_VAR 0 1
74069: PUSH
74070: LD_INT 3
74072: PLUS
74073: PUSH
74074: LD_VAR 0 2
74078: PUSH
74079: LD_INT 3
74081: PLUS
74082: PUSH
74083: LD_INT 5
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: LIST
74090: PUSH
74091: LD_VAR 0 1
74095: PUSH
74096: LD_VAR 0 2
74100: PUSH
74101: LD_INT 4
74103: PLUS
74104: PUSH
74105: LD_INT 0
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: ST_TO_ADDR
// end ; 1 :
74120: GO 74820
74122: LD_INT 1
74124: DOUBLE
74125: EQUAL
74126: IFTRUE 74130
74128: GO 74263
74130: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74131: LD_ADDR_VAR 0 5
74135: PUSH
74136: LD_VAR 0 1
74140: PUSH
74141: LD_VAR 0 2
74145: PUSH
74146: LD_INT 4
74148: MINUS
74149: PUSH
74150: LD_INT 3
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: LIST
74157: PUSH
74158: LD_VAR 0 1
74162: PUSH
74163: LD_INT 3
74165: MINUS
74166: PUSH
74167: LD_VAR 0 2
74171: PUSH
74172: LD_INT 3
74174: MINUS
74175: PUSH
74176: LD_INT 2
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: LIST
74183: PUSH
74184: LD_VAR 0 1
74188: PUSH
74189: LD_INT 4
74191: MINUS
74192: PUSH
74193: LD_VAR 0 2
74197: PUSH
74198: LD_INT 1
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: PUSH
74206: LD_VAR 0 1
74210: PUSH
74211: LD_VAR 0 2
74215: PUSH
74216: LD_INT 3
74218: PLUS
74219: PUSH
74220: LD_INT 0
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: LIST
74227: PUSH
74228: LD_VAR 0 1
74232: PUSH
74233: LD_INT 4
74235: PLUS
74236: PUSH
74237: LD_VAR 0 2
74241: PUSH
74242: LD_INT 4
74244: PLUS
74245: PUSH
74246: LD_INT 5
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: LIST
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: ST_TO_ADDR
// end ; 2 :
74261: GO 74820
74263: LD_INT 2
74265: DOUBLE
74266: EQUAL
74267: IFTRUE 74271
74269: GO 74400
74271: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74272: LD_ADDR_VAR 0 5
74276: PUSH
74277: LD_VAR 0 1
74281: PUSH
74282: LD_VAR 0 2
74286: PUSH
74287: LD_INT 3
74289: MINUS
74290: PUSH
74291: LD_INT 3
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: LIST
74298: PUSH
74299: LD_VAR 0 1
74303: PUSH
74304: LD_INT 4
74306: PLUS
74307: PUSH
74308: LD_VAR 0 2
74312: PUSH
74313: LD_INT 4
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: PUSH
74321: LD_VAR 0 1
74325: PUSH
74326: LD_VAR 0 2
74330: PUSH
74331: LD_INT 4
74333: PLUS
74334: PUSH
74335: LD_INT 0
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: PUSH
74343: LD_VAR 0 1
74347: PUSH
74348: LD_INT 3
74350: MINUS
74351: PUSH
74352: LD_VAR 0 2
74356: PUSH
74357: LD_INT 1
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: LIST
74364: PUSH
74365: LD_VAR 0 1
74369: PUSH
74370: LD_INT 4
74372: MINUS
74373: PUSH
74374: LD_VAR 0 2
74378: PUSH
74379: LD_INT 4
74381: MINUS
74382: PUSH
74383: LD_INT 2
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: ST_TO_ADDR
// end ; 3 :
74398: GO 74820
74400: LD_INT 3
74402: DOUBLE
74403: EQUAL
74404: IFTRUE 74408
74406: GO 74541
74408: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74409: LD_ADDR_VAR 0 5
74413: PUSH
74414: LD_VAR 0 1
74418: PUSH
74419: LD_INT 3
74421: PLUS
74422: PUSH
74423: LD_VAR 0 2
74427: PUSH
74428: LD_INT 4
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 1
74440: PUSH
74441: LD_INT 4
74443: PLUS
74444: PUSH
74445: LD_VAR 0 2
74449: PUSH
74450: LD_INT 4
74452: PLUS
74453: PUSH
74454: LD_INT 5
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: LIST
74461: PUSH
74462: LD_VAR 0 1
74466: PUSH
74467: LD_INT 4
74469: MINUS
74470: PUSH
74471: LD_VAR 0 2
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: LIST
74483: PUSH
74484: LD_VAR 0 1
74488: PUSH
74489: LD_VAR 0 2
74493: PUSH
74494: LD_INT 4
74496: MINUS
74497: PUSH
74498: LD_INT 3
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: LIST
74505: PUSH
74506: LD_VAR 0 1
74510: PUSH
74511: LD_INT 3
74513: MINUS
74514: PUSH
74515: LD_VAR 0 2
74519: PUSH
74520: LD_INT 3
74522: MINUS
74523: PUSH
74524: LD_INT 2
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: LIST
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: ST_TO_ADDR
// end ; 4 :
74539: GO 74820
74541: LD_INT 4
74543: DOUBLE
74544: EQUAL
74545: IFTRUE 74549
74547: GO 74682
74549: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74550: LD_ADDR_VAR 0 5
74554: PUSH
74555: LD_VAR 0 1
74559: PUSH
74560: LD_VAR 0 2
74564: PUSH
74565: LD_INT 4
74567: PLUS
74568: PUSH
74569: LD_INT 0
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: LIST
74576: PUSH
74577: LD_VAR 0 1
74581: PUSH
74582: LD_INT 3
74584: PLUS
74585: PUSH
74586: LD_VAR 0 2
74590: PUSH
74591: LD_INT 3
74593: PLUS
74594: PUSH
74595: LD_INT 5
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: LIST
74602: PUSH
74603: LD_VAR 0 1
74607: PUSH
74608: LD_INT 4
74610: PLUS
74611: PUSH
74612: LD_VAR 0 2
74616: PUSH
74617: LD_INT 4
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: LIST
74624: PUSH
74625: LD_VAR 0 1
74629: PUSH
74630: LD_VAR 0 2
74634: PUSH
74635: LD_INT 3
74637: MINUS
74638: PUSH
74639: LD_INT 3
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: LIST
74646: PUSH
74647: LD_VAR 0 1
74651: PUSH
74652: LD_INT 4
74654: MINUS
74655: PUSH
74656: LD_VAR 0 2
74660: PUSH
74661: LD_INT 4
74663: MINUS
74664: PUSH
74665: LD_INT 2
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: LIST
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: ST_TO_ADDR
// end ; 5 :
74680: GO 74820
74682: LD_INT 5
74684: DOUBLE
74685: EQUAL
74686: IFTRUE 74690
74688: GO 74819
74690: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74691: LD_ADDR_VAR 0 5
74695: PUSH
74696: LD_VAR 0 1
74700: PUSH
74701: LD_INT 4
74703: MINUS
74704: PUSH
74705: LD_VAR 0 2
74709: PUSH
74710: LD_INT 1
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: LIST
74717: PUSH
74718: LD_VAR 0 1
74722: PUSH
74723: LD_VAR 0 2
74727: PUSH
74728: LD_INT 4
74730: MINUS
74731: PUSH
74732: LD_INT 3
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: LIST
74739: PUSH
74740: LD_VAR 0 1
74744: PUSH
74745: LD_INT 4
74747: PLUS
74748: PUSH
74749: LD_VAR 0 2
74753: PUSH
74754: LD_INT 4
74756: PLUS
74757: PUSH
74758: LD_INT 5
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: LIST
74765: PUSH
74766: LD_VAR 0 1
74770: PUSH
74771: LD_INT 3
74773: PLUS
74774: PUSH
74775: LD_VAR 0 2
74779: PUSH
74780: LD_INT 4
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: LIST
74787: PUSH
74788: LD_VAR 0 1
74792: PUSH
74793: LD_VAR 0 2
74797: PUSH
74798: LD_INT 3
74800: PLUS
74801: PUSH
74802: LD_INT 0
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: LIST
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: ST_TO_ADDR
// end ; end ;
74817: GO 74820
74819: POP
// result := list ;
74820: LD_ADDR_VAR 0 4
74824: PUSH
74825: LD_VAR 0 5
74829: ST_TO_ADDR
// end ;
74830: LD_VAR 0 4
74834: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74835: LD_INT 0
74837: PPUSH
74838: PPUSH
74839: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74840: LD_VAR 0 1
74844: NOT
74845: PUSH
74846: LD_VAR 0 2
74850: PUSH
74851: LD_INT 1
74853: PUSH
74854: LD_INT 2
74856: PUSH
74857: LD_INT 3
74859: PUSH
74860: LD_INT 4
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: IN
74869: NOT
74870: OR
74871: IFFALSE 74875
// exit ;
74873: GO 74967
// tmp := [ ] ;
74875: LD_ADDR_VAR 0 5
74879: PUSH
74880: EMPTY
74881: ST_TO_ADDR
// for i in units do
74882: LD_ADDR_VAR 0 4
74886: PUSH
74887: LD_VAR 0 1
74891: PUSH
74892: FOR_IN
74893: IFFALSE 74936
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74895: LD_ADDR_VAR 0 5
74899: PUSH
74900: LD_VAR 0 5
74904: PPUSH
74905: LD_VAR 0 5
74909: PUSH
74910: LD_INT 1
74912: PLUS
74913: PPUSH
74914: LD_VAR 0 4
74918: PPUSH
74919: LD_VAR 0 2
74923: PPUSH
74924: CALL_OW 259
74928: PPUSH
74929: CALL_OW 2
74933: ST_TO_ADDR
74934: GO 74892
74936: POP
74937: POP
// if not tmp then
74938: LD_VAR 0 5
74942: NOT
74943: IFFALSE 74947
// exit ;
74945: GO 74967
// result := SortListByListDesc ( units , tmp ) ;
74947: LD_ADDR_VAR 0 3
74951: PUSH
74952: LD_VAR 0 1
74956: PPUSH
74957: LD_VAR 0 5
74961: PPUSH
74962: CALL_OW 77
74966: ST_TO_ADDR
// end ;
74967: LD_VAR 0 3
74971: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74972: LD_INT 0
74974: PPUSH
74975: PPUSH
74976: PPUSH
// result := false ;
74977: LD_ADDR_VAR 0 3
74981: PUSH
74982: LD_INT 0
74984: ST_TO_ADDR
// x := GetX ( building ) ;
74985: LD_ADDR_VAR 0 4
74989: PUSH
74990: LD_VAR 0 2
74994: PPUSH
74995: CALL_OW 250
74999: ST_TO_ADDR
// y := GetY ( building ) ;
75000: LD_ADDR_VAR 0 5
75004: PUSH
75005: LD_VAR 0 2
75009: PPUSH
75010: CALL_OW 251
75014: ST_TO_ADDR
// if not building or not x or not y then
75015: LD_VAR 0 2
75019: NOT
75020: PUSH
75021: LD_VAR 0 4
75025: NOT
75026: OR
75027: PUSH
75028: LD_VAR 0 5
75032: NOT
75033: OR
75034: IFFALSE 75038
// exit ;
75036: GO 75130
// if GetTaskList ( unit ) then
75038: LD_VAR 0 1
75042: PPUSH
75043: CALL_OW 437
75047: IFFALSE 75130
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75049: LD_STRING e
75051: PUSH
75052: LD_VAR 0 1
75056: PPUSH
75057: CALL_OW 437
75061: PUSH
75062: LD_INT 1
75064: ARRAY
75065: PUSH
75066: LD_INT 1
75068: ARRAY
75069: EQUAL
75070: PUSH
75071: LD_VAR 0 4
75075: PUSH
75076: LD_VAR 0 1
75080: PPUSH
75081: CALL_OW 437
75085: PUSH
75086: LD_INT 1
75088: ARRAY
75089: PUSH
75090: LD_INT 2
75092: ARRAY
75093: EQUAL
75094: AND
75095: PUSH
75096: LD_VAR 0 5
75100: PUSH
75101: LD_VAR 0 1
75105: PPUSH
75106: CALL_OW 437
75110: PUSH
75111: LD_INT 1
75113: ARRAY
75114: PUSH
75115: LD_INT 3
75117: ARRAY
75118: EQUAL
75119: AND
75120: IFFALSE 75130
// result := true end ;
75122: LD_ADDR_VAR 0 3
75126: PUSH
75127: LD_INT 1
75129: ST_TO_ADDR
// end ;
75130: LD_VAR 0 3
75134: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75135: LD_INT 0
75137: PPUSH
// result := false ;
75138: LD_ADDR_VAR 0 4
75142: PUSH
75143: LD_INT 0
75145: ST_TO_ADDR
// if GetTaskList ( unit ) then
75146: LD_VAR 0 1
75150: PPUSH
75151: CALL_OW 437
75155: IFFALSE 75238
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75157: LD_STRING M
75159: PUSH
75160: LD_VAR 0 1
75164: PPUSH
75165: CALL_OW 437
75169: PUSH
75170: LD_INT 1
75172: ARRAY
75173: PUSH
75174: LD_INT 1
75176: ARRAY
75177: EQUAL
75178: PUSH
75179: LD_VAR 0 2
75183: PUSH
75184: LD_VAR 0 1
75188: PPUSH
75189: CALL_OW 437
75193: PUSH
75194: LD_INT 1
75196: ARRAY
75197: PUSH
75198: LD_INT 2
75200: ARRAY
75201: EQUAL
75202: AND
75203: PUSH
75204: LD_VAR 0 3
75208: PUSH
75209: LD_VAR 0 1
75213: PPUSH
75214: CALL_OW 437
75218: PUSH
75219: LD_INT 1
75221: ARRAY
75222: PUSH
75223: LD_INT 3
75225: ARRAY
75226: EQUAL
75227: AND
75228: IFFALSE 75238
// result := true ;
75230: LD_ADDR_VAR 0 4
75234: PUSH
75235: LD_INT 1
75237: ST_TO_ADDR
// end ; end ;
75238: LD_VAR 0 4
75242: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75243: LD_INT 0
75245: PPUSH
75246: PPUSH
75247: PPUSH
75248: PPUSH
// if not unit or not area then
75249: LD_VAR 0 1
75253: NOT
75254: PUSH
75255: LD_VAR 0 2
75259: NOT
75260: OR
75261: IFFALSE 75265
// exit ;
75263: GO 75429
// tmp := AreaToList ( area , i ) ;
75265: LD_ADDR_VAR 0 6
75269: PUSH
75270: LD_VAR 0 2
75274: PPUSH
75275: LD_VAR 0 5
75279: PPUSH
75280: CALL_OW 517
75284: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75285: LD_ADDR_VAR 0 5
75289: PUSH
75290: DOUBLE
75291: LD_INT 1
75293: DEC
75294: ST_TO_ADDR
75295: LD_VAR 0 6
75299: PUSH
75300: LD_INT 1
75302: ARRAY
75303: PUSH
75304: FOR_TO
75305: IFFALSE 75427
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75307: LD_ADDR_VAR 0 7
75311: PUSH
75312: LD_VAR 0 6
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PUSH
75321: LD_VAR 0 5
75325: ARRAY
75326: PUSH
75327: LD_VAR 0 6
75331: PUSH
75332: LD_INT 2
75334: ARRAY
75335: PUSH
75336: LD_VAR 0 5
75340: ARRAY
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75346: LD_VAR 0 7
75350: PUSH
75351: LD_INT 1
75353: ARRAY
75354: PPUSH
75355: LD_VAR 0 7
75359: PUSH
75360: LD_INT 2
75362: ARRAY
75363: PPUSH
75364: CALL_OW 428
75368: PUSH
75369: LD_INT 0
75371: EQUAL
75372: IFFALSE 75425
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75374: LD_VAR 0 1
75378: PPUSH
75379: LD_VAR 0 7
75383: PUSH
75384: LD_INT 1
75386: ARRAY
75387: PPUSH
75388: LD_VAR 0 7
75392: PUSH
75393: LD_INT 2
75395: ARRAY
75396: PPUSH
75397: LD_VAR 0 3
75401: PPUSH
75402: CALL_OW 48
// result := IsPlaced ( unit ) ;
75406: LD_ADDR_VAR 0 4
75410: PUSH
75411: LD_VAR 0 1
75415: PPUSH
75416: CALL_OW 305
75420: ST_TO_ADDR
// exit ;
75421: POP
75422: POP
75423: GO 75429
// end ; end ;
75425: GO 75304
75427: POP
75428: POP
// end ;
75429: LD_VAR 0 4
75433: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75434: LD_INT 0
75436: PPUSH
75437: PPUSH
75438: PPUSH
// if not side or side > 8 then
75439: LD_VAR 0 1
75443: NOT
75444: PUSH
75445: LD_VAR 0 1
75449: PUSH
75450: LD_INT 8
75452: GREATER
75453: OR
75454: IFFALSE 75458
// exit ;
75456: GO 75645
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75458: LD_ADDR_VAR 0 4
75462: PUSH
75463: LD_INT 22
75465: PUSH
75466: LD_VAR 0 1
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 21
75477: PUSH
75478: LD_INT 3
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PPUSH
75489: CALL_OW 69
75493: ST_TO_ADDR
// if not tmp then
75494: LD_VAR 0 4
75498: NOT
75499: IFFALSE 75503
// exit ;
75501: GO 75645
// enable_addtolog := true ;
75503: LD_ADDR_OWVAR 81
75507: PUSH
75508: LD_INT 1
75510: ST_TO_ADDR
// AddToLog ( [ ) ;
75511: LD_STRING [
75513: PPUSH
75514: CALL_OW 561
// for i in tmp do
75518: LD_ADDR_VAR 0 3
75522: PUSH
75523: LD_VAR 0 4
75527: PUSH
75528: FOR_IN
75529: IFFALSE 75636
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75531: LD_STRING [
75533: PUSH
75534: LD_VAR 0 3
75538: PPUSH
75539: CALL_OW 266
75543: STR
75544: PUSH
75545: LD_STRING , 
75547: STR
75548: PUSH
75549: LD_VAR 0 3
75553: PPUSH
75554: CALL_OW 250
75558: STR
75559: PUSH
75560: LD_STRING , 
75562: STR
75563: PUSH
75564: LD_VAR 0 3
75568: PPUSH
75569: CALL_OW 251
75573: STR
75574: PUSH
75575: LD_STRING , 
75577: STR
75578: PUSH
75579: LD_VAR 0 3
75583: PPUSH
75584: CALL_OW 254
75588: STR
75589: PUSH
75590: LD_STRING , 
75592: STR
75593: PUSH
75594: LD_VAR 0 3
75598: PPUSH
75599: LD_INT 1
75601: PPUSH
75602: CALL_OW 268
75606: STR
75607: PUSH
75608: LD_STRING , 
75610: STR
75611: PUSH
75612: LD_VAR 0 3
75616: PPUSH
75617: LD_INT 2
75619: PPUSH
75620: CALL_OW 268
75624: STR
75625: PUSH
75626: LD_STRING ],
75628: STR
75629: PPUSH
75630: CALL_OW 561
// end ;
75634: GO 75528
75636: POP
75637: POP
// AddToLog ( ]; ) ;
75638: LD_STRING ];
75640: PPUSH
75641: CALL_OW 561
// end ;
75645: LD_VAR 0 2
75649: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75650: LD_INT 0
75652: PPUSH
75653: PPUSH
75654: PPUSH
75655: PPUSH
75656: PPUSH
// if not area or not rate or not max then
75657: LD_VAR 0 1
75661: NOT
75662: PUSH
75663: LD_VAR 0 2
75667: NOT
75668: OR
75669: PUSH
75670: LD_VAR 0 4
75674: NOT
75675: OR
75676: IFFALSE 75680
// exit ;
75678: GO 75872
// while 1 do
75680: LD_INT 1
75682: IFFALSE 75872
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75684: LD_ADDR_VAR 0 9
75688: PUSH
75689: LD_VAR 0 1
75693: PPUSH
75694: LD_INT 1
75696: PPUSH
75697: CALL_OW 287
75701: PUSH
75702: LD_INT 10
75704: MUL
75705: ST_TO_ADDR
// r := rate / 10 ;
75706: LD_ADDR_VAR 0 7
75710: PUSH
75711: LD_VAR 0 2
75715: PUSH
75716: LD_INT 10
75718: DIVREAL
75719: ST_TO_ADDR
// time := 1 1$00 ;
75720: LD_ADDR_VAR 0 8
75724: PUSH
75725: LD_INT 2100
75727: ST_TO_ADDR
// if amount < min then
75728: LD_VAR 0 9
75732: PUSH
75733: LD_VAR 0 3
75737: LESS
75738: IFFALSE 75756
// r := r * 2 else
75740: LD_ADDR_VAR 0 7
75744: PUSH
75745: LD_VAR 0 7
75749: PUSH
75750: LD_INT 2
75752: MUL
75753: ST_TO_ADDR
75754: GO 75782
// if amount > max then
75756: LD_VAR 0 9
75760: PUSH
75761: LD_VAR 0 4
75765: GREATER
75766: IFFALSE 75782
// r := r / 2 ;
75768: LD_ADDR_VAR 0 7
75772: PUSH
75773: LD_VAR 0 7
75777: PUSH
75778: LD_INT 2
75780: DIVREAL
75781: ST_TO_ADDR
// time := time / r ;
75782: LD_ADDR_VAR 0 8
75786: PUSH
75787: LD_VAR 0 8
75791: PUSH
75792: LD_VAR 0 7
75796: DIVREAL
75797: ST_TO_ADDR
// if time < 0 then
75798: LD_VAR 0 8
75802: PUSH
75803: LD_INT 0
75805: LESS
75806: IFFALSE 75823
// time := time * - 1 ;
75808: LD_ADDR_VAR 0 8
75812: PUSH
75813: LD_VAR 0 8
75817: PUSH
75818: LD_INT 1
75820: NEG
75821: MUL
75822: ST_TO_ADDR
// wait ( time ) ;
75823: LD_VAR 0 8
75827: PPUSH
75828: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75832: LD_INT 35
75834: PPUSH
75835: LD_INT 875
75837: PPUSH
75838: CALL_OW 12
75842: PPUSH
75843: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75847: LD_INT 1
75849: PPUSH
75850: LD_INT 5
75852: PPUSH
75853: CALL_OW 12
75857: PPUSH
75858: LD_VAR 0 1
75862: PPUSH
75863: LD_INT 1
75865: PPUSH
75866: CALL_OW 55
// end ;
75870: GO 75680
// end ;
75872: LD_VAR 0 5
75876: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75877: LD_INT 0
75879: PPUSH
75880: PPUSH
75881: PPUSH
75882: PPUSH
75883: PPUSH
75884: PPUSH
75885: PPUSH
75886: PPUSH
// if not turrets or not factories then
75887: LD_VAR 0 1
75891: NOT
75892: PUSH
75893: LD_VAR 0 2
75897: NOT
75898: OR
75899: IFFALSE 75903
// exit ;
75901: GO 76210
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75903: LD_ADDR_VAR 0 10
75907: PUSH
75908: LD_INT 5
75910: PUSH
75911: LD_INT 6
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 2
75920: PUSH
75921: LD_INT 4
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 3
75930: PUSH
75931: LD_INT 5
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: PUSH
75943: LD_INT 24
75945: PUSH
75946: LD_INT 25
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: PUSH
75953: LD_INT 23
75955: PUSH
75956: LD_INT 27
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PUSH
75967: LD_INT 42
75969: PUSH
75970: LD_INT 43
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: LD_INT 44
75979: PUSH
75980: LD_INT 46
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 45
75989: PUSH
75990: LD_INT 47
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: LIST
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: LIST
76006: ST_TO_ADDR
// result := [ ] ;
76007: LD_ADDR_VAR 0 3
76011: PUSH
76012: EMPTY
76013: ST_TO_ADDR
// for i in turrets do
76014: LD_ADDR_VAR 0 4
76018: PUSH
76019: LD_VAR 0 1
76023: PUSH
76024: FOR_IN
76025: IFFALSE 76208
// begin nat := GetNation ( i ) ;
76027: LD_ADDR_VAR 0 7
76031: PUSH
76032: LD_VAR 0 4
76036: PPUSH
76037: CALL_OW 248
76041: ST_TO_ADDR
// weapon := 0 ;
76042: LD_ADDR_VAR 0 8
76046: PUSH
76047: LD_INT 0
76049: ST_TO_ADDR
// if not nat then
76050: LD_VAR 0 7
76054: NOT
76055: IFFALSE 76059
// continue ;
76057: GO 76024
// for j in list [ nat ] do
76059: LD_ADDR_VAR 0 5
76063: PUSH
76064: LD_VAR 0 10
76068: PUSH
76069: LD_VAR 0 7
76073: ARRAY
76074: PUSH
76075: FOR_IN
76076: IFFALSE 76117
// if GetBWeapon ( i ) = j [ 1 ] then
76078: LD_VAR 0 4
76082: PPUSH
76083: CALL_OW 269
76087: PUSH
76088: LD_VAR 0 5
76092: PUSH
76093: LD_INT 1
76095: ARRAY
76096: EQUAL
76097: IFFALSE 76115
// begin weapon := j [ 2 ] ;
76099: LD_ADDR_VAR 0 8
76103: PUSH
76104: LD_VAR 0 5
76108: PUSH
76109: LD_INT 2
76111: ARRAY
76112: ST_TO_ADDR
// break ;
76113: GO 76117
// end ;
76115: GO 76075
76117: POP
76118: POP
// if not weapon then
76119: LD_VAR 0 8
76123: NOT
76124: IFFALSE 76128
// continue ;
76126: GO 76024
// for k in factories do
76128: LD_ADDR_VAR 0 6
76132: PUSH
76133: LD_VAR 0 2
76137: PUSH
76138: FOR_IN
76139: IFFALSE 76204
// begin weapons := AvailableWeaponList ( k ) ;
76141: LD_ADDR_VAR 0 9
76145: PUSH
76146: LD_VAR 0 6
76150: PPUSH
76151: CALL_OW 478
76155: ST_TO_ADDR
// if not weapons then
76156: LD_VAR 0 9
76160: NOT
76161: IFFALSE 76165
// continue ;
76163: GO 76138
// if weapon in weapons then
76165: LD_VAR 0 8
76169: PUSH
76170: LD_VAR 0 9
76174: IN
76175: IFFALSE 76202
// begin result := [ i , weapon ] ;
76177: LD_ADDR_VAR 0 3
76181: PUSH
76182: LD_VAR 0 4
76186: PUSH
76187: LD_VAR 0 8
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: ST_TO_ADDR
// exit ;
76196: POP
76197: POP
76198: POP
76199: POP
76200: GO 76210
// end ; end ;
76202: GO 76138
76204: POP
76205: POP
// end ;
76206: GO 76024
76208: POP
76209: POP
// end ;
76210: LD_VAR 0 3
76214: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76215: LD_INT 0
76217: PPUSH
// if not side or side > 8 then
76218: LD_VAR 0 3
76222: NOT
76223: PUSH
76224: LD_VAR 0 3
76228: PUSH
76229: LD_INT 8
76231: GREATER
76232: OR
76233: IFFALSE 76237
// exit ;
76235: GO 76296
// if not range then
76237: LD_VAR 0 4
76241: NOT
76242: IFFALSE 76253
// range := - 12 ;
76244: LD_ADDR_VAR 0 4
76248: PUSH
76249: LD_INT 12
76251: NEG
76252: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76253: LD_VAR 0 1
76257: PPUSH
76258: LD_VAR 0 2
76262: PPUSH
76263: LD_VAR 0 3
76267: PPUSH
76268: LD_VAR 0 4
76272: PPUSH
76273: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76277: LD_VAR 0 1
76281: PPUSH
76282: LD_VAR 0 2
76286: PPUSH
76287: LD_VAR 0 3
76291: PPUSH
76292: CALL_OW 331
// end ;
76296: LD_VAR 0 5
76300: RET
// export function Video ( mode ) ; begin
76301: LD_INT 0
76303: PPUSH
// ingame_video = mode ;
76304: LD_ADDR_OWVAR 52
76308: PUSH
76309: LD_VAR 0 1
76313: ST_TO_ADDR
// interface_hidden = mode ;
76314: LD_ADDR_OWVAR 54
76318: PUSH
76319: LD_VAR 0 1
76323: ST_TO_ADDR
// end ;
76324: LD_VAR 0 2
76328: RET
// export function Join ( array , element ) ; begin
76329: LD_INT 0
76331: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76332: LD_ADDR_VAR 0 3
76336: PUSH
76337: LD_VAR 0 1
76341: PPUSH
76342: LD_VAR 0 1
76346: PUSH
76347: LD_INT 1
76349: PLUS
76350: PPUSH
76351: LD_VAR 0 2
76355: PPUSH
76356: CALL_OW 1
76360: ST_TO_ADDR
// end ;
76361: LD_VAR 0 3
76365: RET
// export function JoinUnion ( array , element ) ; begin
76366: LD_INT 0
76368: PPUSH
// result := array union element ;
76369: LD_ADDR_VAR 0 3
76373: PUSH
76374: LD_VAR 0 1
76378: PUSH
76379: LD_VAR 0 2
76383: UNION
76384: ST_TO_ADDR
// end ;
76385: LD_VAR 0 3
76389: RET
// export function GetBehemoths ( side ) ; begin
76390: LD_INT 0
76392: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76393: LD_ADDR_VAR 0 2
76397: PUSH
76398: LD_INT 22
76400: PUSH
76401: LD_VAR 0 1
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: LD_INT 31
76412: PUSH
76413: LD_INT 25
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PPUSH
76424: CALL_OW 69
76428: ST_TO_ADDR
// end ;
76429: LD_VAR 0 2
76433: RET
// export function Shuffle ( array ) ; var i , index ; begin
76434: LD_INT 0
76436: PPUSH
76437: PPUSH
76438: PPUSH
// result := [ ] ;
76439: LD_ADDR_VAR 0 2
76443: PUSH
76444: EMPTY
76445: ST_TO_ADDR
// if not array then
76446: LD_VAR 0 1
76450: NOT
76451: IFFALSE 76455
// exit ;
76453: GO 76554
// Randomize ;
76455: CALL_OW 10
// for i = array downto 1 do
76459: LD_ADDR_VAR 0 3
76463: PUSH
76464: DOUBLE
76465: LD_VAR 0 1
76469: INC
76470: ST_TO_ADDR
76471: LD_INT 1
76473: PUSH
76474: FOR_DOWNTO
76475: IFFALSE 76552
// begin index := rand ( 1 , array ) ;
76477: LD_ADDR_VAR 0 4
76481: PUSH
76482: LD_INT 1
76484: PPUSH
76485: LD_VAR 0 1
76489: PPUSH
76490: CALL_OW 12
76494: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76495: LD_ADDR_VAR 0 2
76499: PUSH
76500: LD_VAR 0 2
76504: PPUSH
76505: LD_VAR 0 2
76509: PUSH
76510: LD_INT 1
76512: PLUS
76513: PPUSH
76514: LD_VAR 0 1
76518: PUSH
76519: LD_VAR 0 4
76523: ARRAY
76524: PPUSH
76525: CALL_OW 2
76529: ST_TO_ADDR
// array := Delete ( array , index ) ;
76530: LD_ADDR_VAR 0 1
76534: PUSH
76535: LD_VAR 0 1
76539: PPUSH
76540: LD_VAR 0 4
76544: PPUSH
76545: CALL_OW 3
76549: ST_TO_ADDR
// end ;
76550: GO 76474
76552: POP
76553: POP
// end ;
76554: LD_VAR 0 2
76558: RET
// export function GetBaseMaterials ( base ) ; begin
76559: LD_INT 0
76561: PPUSH
// result := [ 0 , 0 , 0 ] ;
76562: LD_ADDR_VAR 0 2
76566: PUSH
76567: LD_INT 0
76569: PUSH
76570: LD_INT 0
76572: PUSH
76573: LD_INT 0
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: LIST
76580: ST_TO_ADDR
// if not base then
76581: LD_VAR 0 1
76585: NOT
76586: IFFALSE 76590
// exit ;
76588: GO 76639
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76590: LD_ADDR_VAR 0 2
76594: PUSH
76595: LD_VAR 0 1
76599: PPUSH
76600: LD_INT 1
76602: PPUSH
76603: CALL_OW 275
76607: PUSH
76608: LD_VAR 0 1
76612: PPUSH
76613: LD_INT 2
76615: PPUSH
76616: CALL_OW 275
76620: PUSH
76621: LD_VAR 0 1
76625: PPUSH
76626: LD_INT 3
76628: PPUSH
76629: CALL_OW 275
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: LIST
76638: ST_TO_ADDR
// end ;
76639: LD_VAR 0 2
76643: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76644: LD_INT 0
76646: PPUSH
76647: PPUSH
// result := array ;
76648: LD_ADDR_VAR 0 3
76652: PUSH
76653: LD_VAR 0 1
76657: ST_TO_ADDR
// if size > 0 then
76658: LD_VAR 0 2
76662: PUSH
76663: LD_INT 0
76665: GREATER
76666: IFFALSE 76712
// for i := array downto size do
76668: LD_ADDR_VAR 0 4
76672: PUSH
76673: DOUBLE
76674: LD_VAR 0 1
76678: INC
76679: ST_TO_ADDR
76680: LD_VAR 0 2
76684: PUSH
76685: FOR_DOWNTO
76686: IFFALSE 76710
// result := Delete ( result , result ) ;
76688: LD_ADDR_VAR 0 3
76692: PUSH
76693: LD_VAR 0 3
76697: PPUSH
76698: LD_VAR 0 3
76702: PPUSH
76703: CALL_OW 3
76707: ST_TO_ADDR
76708: GO 76685
76710: POP
76711: POP
// end ;
76712: LD_VAR 0 3
76716: RET
// export function ComExit ( unit ) ; var tmp ; begin
76717: LD_INT 0
76719: PPUSH
76720: PPUSH
// if not IsInUnit ( unit ) then
76721: LD_VAR 0 1
76725: PPUSH
76726: CALL_OW 310
76730: NOT
76731: IFFALSE 76735
// exit ;
76733: GO 76795
// tmp := IsInUnit ( unit ) ;
76735: LD_ADDR_VAR 0 3
76739: PUSH
76740: LD_VAR 0 1
76744: PPUSH
76745: CALL_OW 310
76749: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76750: LD_VAR 0 3
76754: PPUSH
76755: CALL_OW 247
76759: PUSH
76760: LD_INT 2
76762: EQUAL
76763: IFFALSE 76776
// ComExitVehicle ( unit ) else
76765: LD_VAR 0 1
76769: PPUSH
76770: CALL_OW 121
76774: GO 76785
// ComExitBuilding ( unit ) ;
76776: LD_VAR 0 1
76780: PPUSH
76781: CALL_OW 122
// result := tmp ;
76785: LD_ADDR_VAR 0 2
76789: PUSH
76790: LD_VAR 0 3
76794: ST_TO_ADDR
// end ;
76795: LD_VAR 0 2
76799: RET
// export function ResetHc ; begin
76800: LD_INT 0
76802: PPUSH
// InitHc ;
76803: CALL_OW 19
// hc_importance := 0 ;
76807: LD_ADDR_OWVAR 32
76811: PUSH
76812: LD_INT 0
76814: ST_TO_ADDR
// end ;
76815: LD_VAR 0 1
76819: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76820: LD_INT 0
76822: PPUSH
76823: PPUSH
76824: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76825: LD_ADDR_VAR 0 6
76829: PUSH
76830: LD_VAR 0 1
76834: PUSH
76835: LD_VAR 0 3
76839: PLUS
76840: PUSH
76841: LD_INT 2
76843: DIV
76844: ST_TO_ADDR
// if _x < 0 then
76845: LD_VAR 0 6
76849: PUSH
76850: LD_INT 0
76852: LESS
76853: IFFALSE 76870
// _x := _x * - 1 ;
76855: LD_ADDR_VAR 0 6
76859: PUSH
76860: LD_VAR 0 6
76864: PUSH
76865: LD_INT 1
76867: NEG
76868: MUL
76869: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76870: LD_ADDR_VAR 0 7
76874: PUSH
76875: LD_VAR 0 2
76879: PUSH
76880: LD_VAR 0 4
76884: PLUS
76885: PUSH
76886: LD_INT 2
76888: DIV
76889: ST_TO_ADDR
// if _y < 0 then
76890: LD_VAR 0 7
76894: PUSH
76895: LD_INT 0
76897: LESS
76898: IFFALSE 76915
// _y := _y * - 1 ;
76900: LD_ADDR_VAR 0 7
76904: PUSH
76905: LD_VAR 0 7
76909: PUSH
76910: LD_INT 1
76912: NEG
76913: MUL
76914: ST_TO_ADDR
// result := [ _x , _y ] ;
76915: LD_ADDR_VAR 0 5
76919: PUSH
76920: LD_VAR 0 6
76924: PUSH
76925: LD_VAR 0 7
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: ST_TO_ADDR
// end ;
76934: LD_VAR 0 5
76938: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76939: LD_INT 0
76941: PPUSH
76942: PPUSH
76943: PPUSH
76944: PPUSH
// task := GetTaskList ( unit ) ;
76945: LD_ADDR_VAR 0 7
76949: PUSH
76950: LD_VAR 0 1
76954: PPUSH
76955: CALL_OW 437
76959: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76960: LD_VAR 0 7
76964: NOT
76965: PUSH
76966: LD_VAR 0 1
76970: PPUSH
76971: LD_VAR 0 2
76975: PPUSH
76976: CALL_OW 308
76980: NOT
76981: AND
76982: IFFALSE 76986
// exit ;
76984: GO 77104
// if IsInArea ( unit , area ) then
76986: LD_VAR 0 1
76990: PPUSH
76991: LD_VAR 0 2
76995: PPUSH
76996: CALL_OW 308
77000: IFFALSE 77018
// begin ComMoveToArea ( unit , goAway ) ;
77002: LD_VAR 0 1
77006: PPUSH
77007: LD_VAR 0 3
77011: PPUSH
77012: CALL_OW 113
// exit ;
77016: GO 77104
// end ; if task [ 1 ] [ 1 ] <> M then
77018: LD_VAR 0 7
77022: PUSH
77023: LD_INT 1
77025: ARRAY
77026: PUSH
77027: LD_INT 1
77029: ARRAY
77030: PUSH
77031: LD_STRING M
77033: NONEQUAL
77034: IFFALSE 77038
// exit ;
77036: GO 77104
// x := task [ 1 ] [ 2 ] ;
77038: LD_ADDR_VAR 0 5
77042: PUSH
77043: LD_VAR 0 7
77047: PUSH
77048: LD_INT 1
77050: ARRAY
77051: PUSH
77052: LD_INT 2
77054: ARRAY
77055: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77056: LD_ADDR_VAR 0 6
77060: PUSH
77061: LD_VAR 0 7
77065: PUSH
77066: LD_INT 1
77068: ARRAY
77069: PUSH
77070: LD_INT 3
77072: ARRAY
77073: ST_TO_ADDR
// if InArea ( x , y , area ) then
77074: LD_VAR 0 5
77078: PPUSH
77079: LD_VAR 0 6
77083: PPUSH
77084: LD_VAR 0 2
77088: PPUSH
77089: CALL_OW 309
77093: IFFALSE 77104
// ComStop ( unit ) ;
77095: LD_VAR 0 1
77099: PPUSH
77100: CALL_OW 141
// end ;
77104: LD_VAR 0 4
77108: RET
// export function Abs ( value ) ; begin
77109: LD_INT 0
77111: PPUSH
// result := value ;
77112: LD_ADDR_VAR 0 2
77116: PUSH
77117: LD_VAR 0 1
77121: ST_TO_ADDR
// if value < 0 then
77122: LD_VAR 0 1
77126: PUSH
77127: LD_INT 0
77129: LESS
77130: IFFALSE 77147
// result := value * - 1 ;
77132: LD_ADDR_VAR 0 2
77136: PUSH
77137: LD_VAR 0 1
77141: PUSH
77142: LD_INT 1
77144: NEG
77145: MUL
77146: ST_TO_ADDR
// end ;
77147: LD_VAR 0 2
77151: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77152: LD_INT 0
77154: PPUSH
77155: PPUSH
77156: PPUSH
77157: PPUSH
77158: PPUSH
77159: PPUSH
77160: PPUSH
77161: PPUSH
// if not unit or not building then
77162: LD_VAR 0 1
77166: NOT
77167: PUSH
77168: LD_VAR 0 2
77172: NOT
77173: OR
77174: IFFALSE 77178
// exit ;
77176: GO 77404
// x := GetX ( building ) ;
77178: LD_ADDR_VAR 0 4
77182: PUSH
77183: LD_VAR 0 2
77187: PPUSH
77188: CALL_OW 250
77192: ST_TO_ADDR
// y := GetY ( building ) ;
77193: LD_ADDR_VAR 0 6
77197: PUSH
77198: LD_VAR 0 2
77202: PPUSH
77203: CALL_OW 251
77207: ST_TO_ADDR
// d := GetDir ( building ) ;
77208: LD_ADDR_VAR 0 8
77212: PUSH
77213: LD_VAR 0 2
77217: PPUSH
77218: CALL_OW 254
77222: ST_TO_ADDR
// r := 4 ;
77223: LD_ADDR_VAR 0 9
77227: PUSH
77228: LD_INT 4
77230: ST_TO_ADDR
// for i := 1 to 5 do
77231: LD_ADDR_VAR 0 10
77235: PUSH
77236: DOUBLE
77237: LD_INT 1
77239: DEC
77240: ST_TO_ADDR
77241: LD_INT 5
77243: PUSH
77244: FOR_TO
77245: IFFALSE 77402
// begin _x := ShiftX ( x , d , r + i ) ;
77247: LD_ADDR_VAR 0 5
77251: PUSH
77252: LD_VAR 0 4
77256: PPUSH
77257: LD_VAR 0 8
77261: PPUSH
77262: LD_VAR 0 9
77266: PUSH
77267: LD_VAR 0 10
77271: PLUS
77272: PPUSH
77273: CALL_OW 272
77277: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77278: LD_ADDR_VAR 0 7
77282: PUSH
77283: LD_VAR 0 6
77287: PPUSH
77288: LD_VAR 0 8
77292: PPUSH
77293: LD_VAR 0 9
77297: PUSH
77298: LD_VAR 0 10
77302: PLUS
77303: PPUSH
77304: CALL_OW 273
77308: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77309: LD_VAR 0 5
77313: PPUSH
77314: LD_VAR 0 7
77318: PPUSH
77319: CALL_OW 488
77323: PUSH
77324: LD_VAR 0 5
77328: PPUSH
77329: LD_VAR 0 7
77333: PPUSH
77334: CALL_OW 428
77338: PPUSH
77339: CALL_OW 247
77343: PUSH
77344: LD_INT 3
77346: PUSH
77347: LD_INT 2
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: IN
77354: NOT
77355: AND
77356: IFFALSE 77400
// begin ComMoveXY ( unit , _x , _y ) ;
77358: LD_VAR 0 1
77362: PPUSH
77363: LD_VAR 0 5
77367: PPUSH
77368: LD_VAR 0 7
77372: PPUSH
77373: CALL_OW 111
// result := [ _x , _y ] ;
77377: LD_ADDR_VAR 0 3
77381: PUSH
77382: LD_VAR 0 5
77386: PUSH
77387: LD_VAR 0 7
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: ST_TO_ADDR
// exit ;
77396: POP
77397: POP
77398: GO 77404
// end ; end ;
77400: GO 77244
77402: POP
77403: POP
// end ; end_of_file
77404: LD_VAR 0 3
77408: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
77409: LD_INT 0
77411: PPUSH
// ar_miner := 81 ;
77412: LD_ADDR_EXP 125
77416: PUSH
77417: LD_INT 81
77419: ST_TO_ADDR
// ar_crane := 88 ;
77420: LD_ADDR_EXP 124
77424: PUSH
77425: LD_INT 88
77427: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
77428: LD_ADDR_EXP 119
77432: PUSH
77433: LD_INT 89
77435: ST_TO_ADDR
// us_hack := 99 ;
77436: LD_ADDR_EXP 120
77440: PUSH
77441: LD_INT 99
77443: ST_TO_ADDR
// us_artillery := 97 ;
77444: LD_ADDR_EXP 121
77448: PUSH
77449: LD_INT 97
77451: ST_TO_ADDR
// ar_bio_bomb := 91 ;
77452: LD_ADDR_EXP 122
77456: PUSH
77457: LD_INT 91
77459: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
77460: LD_ADDR_EXP 123
77464: PUSH
77465: LD_INT 92
77467: ST_TO_ADDR
// ru_radar := 98 ;
77468: LD_ADDR_EXP 118
77472: PUSH
77473: LD_INT 98
77475: ST_TO_ADDR
// tech_Artillery := 80 ;
77476: LD_ADDR_EXP 126
77480: PUSH
77481: LD_INT 80
77483: ST_TO_ADDR
// tech_RadMat := 81 ;
77484: LD_ADDR_EXP 127
77488: PUSH
77489: LD_INT 81
77491: ST_TO_ADDR
// tech_BasicTools := 82 ;
77492: LD_ADDR_EXP 128
77496: PUSH
77497: LD_INT 82
77499: ST_TO_ADDR
// tech_Cargo := 83 ;
77500: LD_ADDR_EXP 129
77504: PUSH
77505: LD_INT 83
77507: ST_TO_ADDR
// tech_Track := 84 ;
77508: LD_ADDR_EXP 130
77512: PUSH
77513: LD_INT 84
77515: ST_TO_ADDR
// tech_Crane := 85 ;
77516: LD_ADDR_EXP 131
77520: PUSH
77521: LD_INT 85
77523: ST_TO_ADDR
// tech_Bulldozer := 86 ;
77524: LD_ADDR_EXP 132
77528: PUSH
77529: LD_INT 86
77531: ST_TO_ADDR
// tech_Hovercraft := 87 ;
77532: LD_ADDR_EXP 133
77536: PUSH
77537: LD_INT 87
77539: ST_TO_ADDR
// end ;
77540: LD_VAR 0 1
77544: RET
// every 1 do
77545: GO 77547
77547: DISABLE
// InitGlobalVariables ; end_of_file
77548: CALL 77409 0 0
77552: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77553: LD_INT 0
77555: PPUSH
77556: PPUSH
77557: PPUSH
77558: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77559: LD_VAR 0 1
77563: PPUSH
77564: CALL_OW 264
77568: PUSH
77569: LD_EXP 122
77573: EQUAL
77574: IFFALSE 77646
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77576: LD_INT 68
77578: PPUSH
77579: LD_VAR 0 1
77583: PPUSH
77584: CALL_OW 255
77588: PPUSH
77589: CALL_OW 321
77593: PUSH
77594: LD_INT 2
77596: EQUAL
77597: IFFALSE 77609
// eff := 70 else
77599: LD_ADDR_VAR 0 4
77603: PUSH
77604: LD_INT 70
77606: ST_TO_ADDR
77607: GO 77617
// eff := 30 ;
77609: LD_ADDR_VAR 0 4
77613: PUSH
77614: LD_INT 30
77616: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77617: LD_VAR 0 1
77621: PPUSH
77622: CALL_OW 250
77626: PPUSH
77627: LD_VAR 0 1
77631: PPUSH
77632: CALL_OW 251
77636: PPUSH
77637: LD_VAR 0 4
77641: PPUSH
77642: CALL_OW 495
// end ; end ;
77646: LD_VAR 0 2
77650: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77651: LD_INT 0
77653: PPUSH
// end ;
77654: LD_VAR 0 4
77658: RET
// export function SOS_Command ( cmd ) ; begin
77659: LD_INT 0
77661: PPUSH
// end ;
77662: LD_VAR 0 2
77666: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77667: LD_INT 0
77669: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77670: LD_VAR 0 1
77674: PUSH
77675: LD_INT 250
77677: EQUAL
77678: PUSH
77679: LD_VAR 0 2
77683: PPUSH
77684: CALL_OW 264
77688: PUSH
77689: LD_EXP 125
77693: EQUAL
77694: AND
77695: IFFALSE 77716
// MinerPlaceMine ( unit , x , y ) ;
77697: LD_VAR 0 2
77701: PPUSH
77702: LD_VAR 0 4
77706: PPUSH
77707: LD_VAR 0 5
77711: PPUSH
77712: CALL 80057 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77716: LD_VAR 0 1
77720: PUSH
77721: LD_INT 251
77723: EQUAL
77724: PUSH
77725: LD_VAR 0 2
77729: PPUSH
77730: CALL_OW 264
77734: PUSH
77735: LD_EXP 125
77739: EQUAL
77740: AND
77741: IFFALSE 77762
// MinerDetonateMine ( unit , x , y ) ;
77743: LD_VAR 0 2
77747: PPUSH
77748: LD_VAR 0 4
77752: PPUSH
77753: LD_VAR 0 5
77757: PPUSH
77758: CALL 80334 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77762: LD_VAR 0 1
77766: PUSH
77767: LD_INT 252
77769: EQUAL
77770: PUSH
77771: LD_VAR 0 2
77775: PPUSH
77776: CALL_OW 264
77780: PUSH
77781: LD_EXP 125
77785: EQUAL
77786: AND
77787: IFFALSE 77808
// MinerCreateMinefield ( unit , x , y ) ;
77789: LD_VAR 0 2
77793: PPUSH
77794: LD_VAR 0 4
77798: PPUSH
77799: LD_VAR 0 5
77803: PPUSH
77804: CALL 80751 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77808: LD_VAR 0 1
77812: PUSH
77813: LD_INT 253
77815: EQUAL
77816: PUSH
77817: LD_VAR 0 2
77821: PPUSH
77822: CALL_OW 257
77826: PUSH
77827: LD_INT 5
77829: EQUAL
77830: AND
77831: IFFALSE 77852
// ComBinocular ( unit , x , y ) ;
77833: LD_VAR 0 2
77837: PPUSH
77838: LD_VAR 0 4
77842: PPUSH
77843: LD_VAR 0 5
77847: PPUSH
77848: CALL 81122 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77852: LD_VAR 0 1
77856: PUSH
77857: LD_INT 254
77859: EQUAL
77860: PUSH
77861: LD_VAR 0 2
77865: PPUSH
77866: CALL_OW 264
77870: PUSH
77871: LD_EXP 120
77875: EQUAL
77876: AND
77877: PUSH
77878: LD_VAR 0 3
77882: PPUSH
77883: CALL_OW 263
77887: PUSH
77888: LD_INT 3
77890: EQUAL
77891: AND
77892: IFFALSE 77908
// HackDestroyVehicle ( unit , selectedUnit ) ;
77894: LD_VAR 0 2
77898: PPUSH
77899: LD_VAR 0 3
77903: PPUSH
77904: CALL 79417 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77908: LD_VAR 0 1
77912: PUSH
77913: LD_INT 255
77915: EQUAL
77916: PUSH
77917: LD_VAR 0 2
77921: PPUSH
77922: CALL_OW 264
77926: PUSH
77927: LD_INT 14
77929: PUSH
77930: LD_INT 53
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: IN
77937: AND
77938: PUSH
77939: LD_VAR 0 4
77943: PPUSH
77944: LD_VAR 0 5
77948: PPUSH
77949: CALL_OW 488
77953: AND
77954: IFFALSE 77978
// CutTreeXYR ( unit , x , y , 12 ) ;
77956: LD_VAR 0 2
77960: PPUSH
77961: LD_VAR 0 4
77965: PPUSH
77966: LD_VAR 0 5
77970: PPUSH
77971: LD_INT 12
77973: PPUSH
77974: CALL 77983 0 4
// end ;
77978: LD_VAR 0 6
77982: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77983: LD_INT 0
77985: PPUSH
77986: PPUSH
77987: PPUSH
77988: PPUSH
77989: PPUSH
77990: PPUSH
77991: PPUSH
77992: PPUSH
77993: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
77994: LD_VAR 0 1
77998: NOT
77999: PUSH
78000: LD_VAR 0 2
78004: PPUSH
78005: LD_VAR 0 3
78009: PPUSH
78010: CALL_OW 488
78014: NOT
78015: OR
78016: PUSH
78017: LD_VAR 0 4
78021: NOT
78022: OR
78023: IFFALSE 78027
// exit ;
78025: GO 78367
// list := [ ] ;
78027: LD_ADDR_VAR 0 13
78031: PUSH
78032: EMPTY
78033: ST_TO_ADDR
// if x - r < 0 then
78034: LD_VAR 0 2
78038: PUSH
78039: LD_VAR 0 4
78043: MINUS
78044: PUSH
78045: LD_INT 0
78047: LESS
78048: IFFALSE 78060
// min_x := 0 else
78050: LD_ADDR_VAR 0 7
78054: PUSH
78055: LD_INT 0
78057: ST_TO_ADDR
78058: GO 78076
// min_x := x - r ;
78060: LD_ADDR_VAR 0 7
78064: PUSH
78065: LD_VAR 0 2
78069: PUSH
78070: LD_VAR 0 4
78074: MINUS
78075: ST_TO_ADDR
// if y - r < 0 then
78076: LD_VAR 0 3
78080: PUSH
78081: LD_VAR 0 4
78085: MINUS
78086: PUSH
78087: LD_INT 0
78089: LESS
78090: IFFALSE 78102
// min_y := 0 else
78092: LD_ADDR_VAR 0 8
78096: PUSH
78097: LD_INT 0
78099: ST_TO_ADDR
78100: GO 78118
// min_y := y - r ;
78102: LD_ADDR_VAR 0 8
78106: PUSH
78107: LD_VAR 0 3
78111: PUSH
78112: LD_VAR 0 4
78116: MINUS
78117: ST_TO_ADDR
// max_x := x + r ;
78118: LD_ADDR_VAR 0 9
78122: PUSH
78123: LD_VAR 0 2
78127: PUSH
78128: LD_VAR 0 4
78132: PLUS
78133: ST_TO_ADDR
// max_y := y + r ;
78134: LD_ADDR_VAR 0 10
78138: PUSH
78139: LD_VAR 0 3
78143: PUSH
78144: LD_VAR 0 4
78148: PLUS
78149: ST_TO_ADDR
// for _x = min_x to max_x do
78150: LD_ADDR_VAR 0 11
78154: PUSH
78155: DOUBLE
78156: LD_VAR 0 7
78160: DEC
78161: ST_TO_ADDR
78162: LD_VAR 0 9
78166: PUSH
78167: FOR_TO
78168: IFFALSE 78285
// for _y = min_y to max_y do
78170: LD_ADDR_VAR 0 12
78174: PUSH
78175: DOUBLE
78176: LD_VAR 0 8
78180: DEC
78181: ST_TO_ADDR
78182: LD_VAR 0 10
78186: PUSH
78187: FOR_TO
78188: IFFALSE 78281
// begin if not ValidHex ( _x , _y ) then
78190: LD_VAR 0 11
78194: PPUSH
78195: LD_VAR 0 12
78199: PPUSH
78200: CALL_OW 488
78204: NOT
78205: IFFALSE 78209
// continue ;
78207: GO 78187
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78209: LD_VAR 0 11
78213: PPUSH
78214: LD_VAR 0 12
78218: PPUSH
78219: CALL_OW 351
78223: PUSH
78224: LD_VAR 0 11
78228: PPUSH
78229: LD_VAR 0 12
78233: PPUSH
78234: CALL_OW 554
78238: AND
78239: IFFALSE 78279
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78241: LD_ADDR_VAR 0 13
78245: PUSH
78246: LD_VAR 0 13
78250: PPUSH
78251: LD_VAR 0 13
78255: PUSH
78256: LD_INT 1
78258: PLUS
78259: PPUSH
78260: LD_VAR 0 11
78264: PUSH
78265: LD_VAR 0 12
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PPUSH
78274: CALL_OW 2
78278: ST_TO_ADDR
// end ;
78279: GO 78187
78281: POP
78282: POP
78283: GO 78167
78285: POP
78286: POP
// if not list then
78287: LD_VAR 0 13
78291: NOT
78292: IFFALSE 78296
// exit ;
78294: GO 78367
// for i in list do
78296: LD_ADDR_VAR 0 6
78300: PUSH
78301: LD_VAR 0 13
78305: PUSH
78306: FOR_IN
78307: IFFALSE 78365
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78309: LD_VAR 0 1
78313: PPUSH
78314: LD_STRING M
78316: PUSH
78317: LD_VAR 0 6
78321: PUSH
78322: LD_INT 1
78324: ARRAY
78325: PUSH
78326: LD_VAR 0 6
78330: PUSH
78331: LD_INT 2
78333: ARRAY
78334: PUSH
78335: LD_INT 0
78337: PUSH
78338: LD_INT 0
78340: PUSH
78341: LD_INT 0
78343: PUSH
78344: LD_INT 0
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: PUSH
78356: EMPTY
78357: LIST
78358: PPUSH
78359: CALL_OW 447
78363: GO 78306
78365: POP
78366: POP
// end ;
78367: LD_VAR 0 5
78371: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78372: LD_EXP 134
78376: NOT
78377: IFFALSE 78427
78379: GO 78381
78381: DISABLE
// begin initHack := true ;
78382: LD_ADDR_EXP 134
78386: PUSH
78387: LD_INT 1
78389: ST_TO_ADDR
// hackTanks := [ ] ;
78390: LD_ADDR_EXP 135
78394: PUSH
78395: EMPTY
78396: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78397: LD_ADDR_EXP 136
78401: PUSH
78402: EMPTY
78403: ST_TO_ADDR
// hackLimit := 3 ;
78404: LD_ADDR_EXP 137
78408: PUSH
78409: LD_INT 3
78411: ST_TO_ADDR
// hackDist := 12 ;
78412: LD_ADDR_EXP 138
78416: PUSH
78417: LD_INT 12
78419: ST_TO_ADDR
// hackCounter := [ ] ;
78420: LD_ADDR_EXP 139
78424: PUSH
78425: EMPTY
78426: ST_TO_ADDR
// end ;
78427: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78428: LD_EXP 134
78432: PUSH
78433: LD_INT 34
78435: PUSH
78436: LD_EXP 120
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: PPUSH
78445: CALL_OW 69
78449: AND
78450: IFFALSE 78705
78452: GO 78454
78454: DISABLE
78455: LD_INT 0
78457: PPUSH
78458: PPUSH
// begin enable ;
78459: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78460: LD_ADDR_VAR 0 1
78464: PUSH
78465: LD_INT 34
78467: PUSH
78468: LD_EXP 120
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: PPUSH
78477: CALL_OW 69
78481: PUSH
78482: FOR_IN
78483: IFFALSE 78703
// begin if not i in hackTanks then
78485: LD_VAR 0 1
78489: PUSH
78490: LD_EXP 135
78494: IN
78495: NOT
78496: IFFALSE 78579
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78498: LD_ADDR_EXP 135
78502: PUSH
78503: LD_EXP 135
78507: PPUSH
78508: LD_EXP 135
78512: PUSH
78513: LD_INT 1
78515: PLUS
78516: PPUSH
78517: LD_VAR 0 1
78521: PPUSH
78522: CALL_OW 1
78526: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78527: LD_ADDR_EXP 136
78531: PUSH
78532: LD_EXP 136
78536: PPUSH
78537: LD_EXP 136
78541: PUSH
78542: LD_INT 1
78544: PLUS
78545: PPUSH
78546: EMPTY
78547: PPUSH
78548: CALL_OW 1
78552: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78553: LD_ADDR_EXP 139
78557: PUSH
78558: LD_EXP 139
78562: PPUSH
78563: LD_EXP 139
78567: PUSH
78568: LD_INT 1
78570: PLUS
78571: PPUSH
78572: EMPTY
78573: PPUSH
78574: CALL_OW 1
78578: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78579: LD_VAR 0 1
78583: PPUSH
78584: CALL_OW 302
78588: NOT
78589: IFFALSE 78602
// begin HackUnlinkAll ( i ) ;
78591: LD_VAR 0 1
78595: PPUSH
78596: CALL 78708 0 1
// continue ;
78600: GO 78482
// end ; HackCheckCapturedStatus ( i ) ;
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL 79151 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78611: LD_ADDR_VAR 0 2
78615: PUSH
78616: LD_INT 81
78618: PUSH
78619: LD_VAR 0 1
78623: PPUSH
78624: CALL_OW 255
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: PUSH
78633: LD_INT 33
78635: PUSH
78636: LD_INT 3
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: PUSH
78643: LD_INT 91
78645: PUSH
78646: LD_VAR 0 1
78650: PUSH
78651: LD_EXP 138
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: LIST
78660: PUSH
78661: LD_INT 50
78663: PUSH
78664: EMPTY
78665: LIST
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: LIST
78671: LIST
78672: PPUSH
78673: CALL_OW 69
78677: ST_TO_ADDR
// if not tmp then
78678: LD_VAR 0 2
78682: NOT
78683: IFFALSE 78687
// continue ;
78685: GO 78482
// HackLink ( i , tmp ) ;
78687: LD_VAR 0 1
78691: PPUSH
78692: LD_VAR 0 2
78696: PPUSH
78697: CALL 78844 0 2
// end ;
78701: GO 78482
78703: POP
78704: POP
// end ;
78705: PPOPN 2
78707: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78708: LD_INT 0
78710: PPUSH
78711: PPUSH
78712: PPUSH
// if not hack in hackTanks then
78713: LD_VAR 0 1
78717: PUSH
78718: LD_EXP 135
78722: IN
78723: NOT
78724: IFFALSE 78728
// exit ;
78726: GO 78839
// index := GetElementIndex ( hackTanks , hack ) ;
78728: LD_ADDR_VAR 0 4
78732: PUSH
78733: LD_EXP 135
78737: PPUSH
78738: LD_VAR 0 1
78742: PPUSH
78743: CALL 45071 0 2
78747: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78748: LD_EXP 136
78752: PUSH
78753: LD_VAR 0 4
78757: ARRAY
78758: IFFALSE 78839
// begin for i in hackTanksCaptured [ index ] do
78760: LD_ADDR_VAR 0 3
78764: PUSH
78765: LD_EXP 136
78769: PUSH
78770: LD_VAR 0 4
78774: ARRAY
78775: PUSH
78776: FOR_IN
78777: IFFALSE 78803
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78779: LD_VAR 0 3
78783: PUSH
78784: LD_INT 1
78786: ARRAY
78787: PPUSH
78788: LD_VAR 0 3
78792: PUSH
78793: LD_INT 2
78795: ARRAY
78796: PPUSH
78797: CALL_OW 235
78801: GO 78776
78803: POP
78804: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78805: LD_ADDR_EXP 136
78809: PUSH
78810: LD_EXP 136
78814: PPUSH
78815: LD_VAR 0 4
78819: PPUSH
78820: EMPTY
78821: PPUSH
78822: CALL_OW 1
78826: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78827: LD_VAR 0 1
78831: PPUSH
78832: LD_INT 0
78834: PPUSH
78835: CALL_OW 505
// end ; end ;
78839: LD_VAR 0 2
78843: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78844: LD_INT 0
78846: PPUSH
78847: PPUSH
78848: PPUSH
// if not hack in hackTanks or not vehicles then
78849: LD_VAR 0 1
78853: PUSH
78854: LD_EXP 135
78858: IN
78859: NOT
78860: PUSH
78861: LD_VAR 0 2
78865: NOT
78866: OR
78867: IFFALSE 78871
// exit ;
78869: GO 79146
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78871: LD_ADDR_VAR 0 2
78875: PUSH
78876: LD_VAR 0 1
78880: PPUSH
78881: LD_VAR 0 2
78885: PPUSH
78886: LD_INT 1
78888: PPUSH
78889: LD_INT 1
78891: PPUSH
78892: CALL 45721 0 4
78896: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78897: LD_ADDR_VAR 0 5
78901: PUSH
78902: LD_EXP 135
78906: PPUSH
78907: LD_VAR 0 1
78911: PPUSH
78912: CALL 45071 0 2
78916: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78917: LD_EXP 136
78921: PUSH
78922: LD_VAR 0 5
78926: ARRAY
78927: PUSH
78928: LD_EXP 137
78932: LESS
78933: IFFALSE 79122
// begin for i := 1 to vehicles do
78935: LD_ADDR_VAR 0 4
78939: PUSH
78940: DOUBLE
78941: LD_INT 1
78943: DEC
78944: ST_TO_ADDR
78945: LD_VAR 0 2
78949: PUSH
78950: FOR_TO
78951: IFFALSE 79120
// begin if hackTanksCaptured [ index ] = hackLimit then
78953: LD_EXP 136
78957: PUSH
78958: LD_VAR 0 5
78962: ARRAY
78963: PUSH
78964: LD_EXP 137
78968: EQUAL
78969: IFFALSE 78973
// break ;
78971: GO 79120
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78973: LD_ADDR_EXP 139
78977: PUSH
78978: LD_EXP 139
78982: PPUSH
78983: LD_VAR 0 5
78987: PPUSH
78988: LD_EXP 139
78992: PUSH
78993: LD_VAR 0 5
78997: ARRAY
78998: PUSH
78999: LD_INT 1
79001: PLUS
79002: PPUSH
79003: CALL_OW 1
79007: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79008: LD_ADDR_EXP 136
79012: PUSH
79013: LD_EXP 136
79017: PPUSH
79018: LD_VAR 0 5
79022: PUSH
79023: LD_EXP 136
79027: PUSH
79028: LD_VAR 0 5
79032: ARRAY
79033: PUSH
79034: LD_INT 1
79036: PLUS
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PPUSH
79042: LD_VAR 0 2
79046: PUSH
79047: LD_VAR 0 4
79051: ARRAY
79052: PUSH
79053: LD_VAR 0 2
79057: PUSH
79058: LD_VAR 0 4
79062: ARRAY
79063: PPUSH
79064: CALL_OW 255
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PPUSH
79073: CALL 45286 0 3
79077: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79078: LD_VAR 0 2
79082: PUSH
79083: LD_VAR 0 4
79087: ARRAY
79088: PPUSH
79089: LD_VAR 0 1
79093: PPUSH
79094: CALL_OW 255
79098: PPUSH
79099: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79103: LD_VAR 0 2
79107: PUSH
79108: LD_VAR 0 4
79112: ARRAY
79113: PPUSH
79114: CALL_OW 141
// end ;
79118: GO 78950
79120: POP
79121: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79122: LD_VAR 0 1
79126: PPUSH
79127: LD_EXP 136
79131: PUSH
79132: LD_VAR 0 5
79136: ARRAY
79137: PUSH
79138: LD_INT 0
79140: PLUS
79141: PPUSH
79142: CALL_OW 505
// end ;
79146: LD_VAR 0 3
79150: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79151: LD_INT 0
79153: PPUSH
79154: PPUSH
79155: PPUSH
79156: PPUSH
// if not hack in hackTanks then
79157: LD_VAR 0 1
79161: PUSH
79162: LD_EXP 135
79166: IN
79167: NOT
79168: IFFALSE 79172
// exit ;
79170: GO 79412
// index := GetElementIndex ( hackTanks , hack ) ;
79172: LD_ADDR_VAR 0 4
79176: PUSH
79177: LD_EXP 135
79181: PPUSH
79182: LD_VAR 0 1
79186: PPUSH
79187: CALL 45071 0 2
79191: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79192: LD_ADDR_VAR 0 3
79196: PUSH
79197: DOUBLE
79198: LD_EXP 136
79202: PUSH
79203: LD_VAR 0 4
79207: ARRAY
79208: INC
79209: ST_TO_ADDR
79210: LD_INT 1
79212: PUSH
79213: FOR_DOWNTO
79214: IFFALSE 79386
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79216: LD_ADDR_VAR 0 5
79220: PUSH
79221: LD_EXP 136
79225: PUSH
79226: LD_VAR 0 4
79230: ARRAY
79231: PUSH
79232: LD_VAR 0 3
79236: ARRAY
79237: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79238: LD_VAR 0 5
79242: PUSH
79243: LD_INT 1
79245: ARRAY
79246: PPUSH
79247: CALL_OW 302
79251: NOT
79252: PUSH
79253: LD_VAR 0 5
79257: PUSH
79258: LD_INT 1
79260: ARRAY
79261: PPUSH
79262: CALL_OW 255
79266: PUSH
79267: LD_VAR 0 1
79271: PPUSH
79272: CALL_OW 255
79276: NONEQUAL
79277: OR
79278: IFFALSE 79384
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79280: LD_VAR 0 5
79284: PUSH
79285: LD_INT 1
79287: ARRAY
79288: PPUSH
79289: CALL_OW 305
79293: PUSH
79294: LD_VAR 0 5
79298: PUSH
79299: LD_INT 1
79301: ARRAY
79302: PPUSH
79303: CALL_OW 255
79307: PUSH
79308: LD_VAR 0 1
79312: PPUSH
79313: CALL_OW 255
79317: EQUAL
79318: AND
79319: IFFALSE 79343
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79321: LD_VAR 0 5
79325: PUSH
79326: LD_INT 1
79328: ARRAY
79329: PPUSH
79330: LD_VAR 0 5
79334: PUSH
79335: LD_INT 2
79337: ARRAY
79338: PPUSH
79339: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79343: LD_ADDR_EXP 136
79347: PUSH
79348: LD_EXP 136
79352: PPUSH
79353: LD_VAR 0 4
79357: PPUSH
79358: LD_EXP 136
79362: PUSH
79363: LD_VAR 0 4
79367: ARRAY
79368: PPUSH
79369: LD_VAR 0 3
79373: PPUSH
79374: CALL_OW 3
79378: PPUSH
79379: CALL_OW 1
79383: ST_TO_ADDR
// end ; end ;
79384: GO 79213
79386: POP
79387: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79388: LD_VAR 0 1
79392: PPUSH
79393: LD_EXP 136
79397: PUSH
79398: LD_VAR 0 4
79402: ARRAY
79403: PUSH
79404: LD_INT 0
79406: PLUS
79407: PPUSH
79408: CALL_OW 505
// end ;
79412: LD_VAR 0 2
79416: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79417: LD_INT 0
79419: PPUSH
79420: PPUSH
79421: PPUSH
79422: PPUSH
// if not hack in hackTanks then
79423: LD_VAR 0 1
79427: PUSH
79428: LD_EXP 135
79432: IN
79433: NOT
79434: IFFALSE 79438
// exit ;
79436: GO 79523
// index := GetElementIndex ( hackTanks , hack ) ;
79438: LD_ADDR_VAR 0 5
79442: PUSH
79443: LD_EXP 135
79447: PPUSH
79448: LD_VAR 0 1
79452: PPUSH
79453: CALL 45071 0 2
79457: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79458: LD_ADDR_VAR 0 4
79462: PUSH
79463: DOUBLE
79464: LD_INT 1
79466: DEC
79467: ST_TO_ADDR
79468: LD_EXP 136
79472: PUSH
79473: LD_VAR 0 5
79477: ARRAY
79478: PUSH
79479: FOR_TO
79480: IFFALSE 79521
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79482: LD_EXP 136
79486: PUSH
79487: LD_VAR 0 5
79491: ARRAY
79492: PUSH
79493: LD_VAR 0 4
79497: ARRAY
79498: PUSH
79499: LD_INT 1
79501: ARRAY
79502: PUSH
79503: LD_VAR 0 2
79507: EQUAL
79508: IFFALSE 79519
// KillUnit ( vehicle ) ;
79510: LD_VAR 0 2
79514: PPUSH
79515: CALL_OW 66
79519: GO 79479
79521: POP
79522: POP
// end ;
79523: LD_VAR 0 3
79527: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79528: LD_EXP 140
79532: NOT
79533: IFFALSE 79568
79535: GO 79537
79537: DISABLE
// begin initMiner := true ;
79538: LD_ADDR_EXP 140
79542: PUSH
79543: LD_INT 1
79545: ST_TO_ADDR
// minersList := [ ] ;
79546: LD_ADDR_EXP 141
79550: PUSH
79551: EMPTY
79552: ST_TO_ADDR
// minerMinesList := [ ] ;
79553: LD_ADDR_EXP 142
79557: PUSH
79558: EMPTY
79559: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79560: LD_ADDR_EXP 143
79564: PUSH
79565: LD_INT 5
79567: ST_TO_ADDR
// end ;
79568: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79569: LD_EXP 140
79573: PUSH
79574: LD_INT 34
79576: PUSH
79577: LD_EXP 125
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PPUSH
79586: CALL_OW 69
79590: AND
79591: IFFALSE 80054
79593: GO 79595
79595: DISABLE
79596: LD_INT 0
79598: PPUSH
79599: PPUSH
79600: PPUSH
79601: PPUSH
// begin enable ;
79602: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79603: LD_ADDR_VAR 0 1
79607: PUSH
79608: LD_INT 34
79610: PUSH
79611: LD_EXP 125
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: PPUSH
79620: CALL_OW 69
79624: PUSH
79625: FOR_IN
79626: IFFALSE 79698
// begin if not i in minersList then
79628: LD_VAR 0 1
79632: PUSH
79633: LD_EXP 141
79637: IN
79638: NOT
79639: IFFALSE 79696
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79641: LD_ADDR_EXP 141
79645: PUSH
79646: LD_EXP 141
79650: PPUSH
79651: LD_EXP 141
79655: PUSH
79656: LD_INT 1
79658: PLUS
79659: PPUSH
79660: LD_VAR 0 1
79664: PPUSH
79665: CALL_OW 1
79669: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79670: LD_ADDR_EXP 142
79674: PUSH
79675: LD_EXP 142
79679: PPUSH
79680: LD_EXP 142
79684: PUSH
79685: LD_INT 1
79687: PLUS
79688: PPUSH
79689: EMPTY
79690: PPUSH
79691: CALL_OW 1
79695: ST_TO_ADDR
// end end ;
79696: GO 79625
79698: POP
79699: POP
// for i := minerMinesList downto 1 do
79700: LD_ADDR_VAR 0 1
79704: PUSH
79705: DOUBLE
79706: LD_EXP 142
79710: INC
79711: ST_TO_ADDR
79712: LD_INT 1
79714: PUSH
79715: FOR_DOWNTO
79716: IFFALSE 80052
// begin if IsLive ( minersList [ i ] ) then
79718: LD_EXP 141
79722: PUSH
79723: LD_VAR 0 1
79727: ARRAY
79728: PPUSH
79729: CALL_OW 300
79733: IFFALSE 79761
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79735: LD_EXP 141
79739: PUSH
79740: LD_VAR 0 1
79744: ARRAY
79745: PPUSH
79746: LD_EXP 142
79750: PUSH
79751: LD_VAR 0 1
79755: ARRAY
79756: PPUSH
79757: CALL_OW 505
// if not minerMinesList [ i ] then
79761: LD_EXP 142
79765: PUSH
79766: LD_VAR 0 1
79770: ARRAY
79771: NOT
79772: IFFALSE 79776
// continue ;
79774: GO 79715
// for j := minerMinesList [ i ] downto 1 do
79776: LD_ADDR_VAR 0 2
79780: PUSH
79781: DOUBLE
79782: LD_EXP 142
79786: PUSH
79787: LD_VAR 0 1
79791: ARRAY
79792: INC
79793: ST_TO_ADDR
79794: LD_INT 1
79796: PUSH
79797: FOR_DOWNTO
79798: IFFALSE 80048
// begin side := GetSide ( minersList [ i ] ) ;
79800: LD_ADDR_VAR 0 3
79804: PUSH
79805: LD_EXP 141
79809: PUSH
79810: LD_VAR 0 1
79814: ARRAY
79815: PPUSH
79816: CALL_OW 255
79820: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79821: LD_ADDR_VAR 0 4
79825: PUSH
79826: LD_EXP 142
79830: PUSH
79831: LD_VAR 0 1
79835: ARRAY
79836: PUSH
79837: LD_VAR 0 2
79841: ARRAY
79842: PUSH
79843: LD_INT 1
79845: ARRAY
79846: PPUSH
79847: LD_EXP 142
79851: PUSH
79852: LD_VAR 0 1
79856: ARRAY
79857: PUSH
79858: LD_VAR 0 2
79862: ARRAY
79863: PUSH
79864: LD_INT 2
79866: ARRAY
79867: PPUSH
79868: CALL_OW 428
79872: ST_TO_ADDR
// if not tmp then
79873: LD_VAR 0 4
79877: NOT
79878: IFFALSE 79882
// continue ;
79880: GO 79797
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79882: LD_VAR 0 4
79886: PUSH
79887: LD_INT 81
79889: PUSH
79890: LD_VAR 0 3
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: PPUSH
79899: CALL_OW 69
79903: IN
79904: PUSH
79905: LD_EXP 142
79909: PUSH
79910: LD_VAR 0 1
79914: ARRAY
79915: PUSH
79916: LD_VAR 0 2
79920: ARRAY
79921: PUSH
79922: LD_INT 1
79924: ARRAY
79925: PPUSH
79926: LD_EXP 142
79930: PUSH
79931: LD_VAR 0 1
79935: ARRAY
79936: PUSH
79937: LD_VAR 0 2
79941: ARRAY
79942: PUSH
79943: LD_INT 2
79945: ARRAY
79946: PPUSH
79947: CALL_OW 458
79951: AND
79952: IFFALSE 80046
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79954: LD_EXP 142
79958: PUSH
79959: LD_VAR 0 1
79963: ARRAY
79964: PUSH
79965: LD_VAR 0 2
79969: ARRAY
79970: PUSH
79971: LD_INT 1
79973: ARRAY
79974: PPUSH
79975: LD_EXP 142
79979: PUSH
79980: LD_VAR 0 1
79984: ARRAY
79985: PUSH
79986: LD_VAR 0 2
79990: ARRAY
79991: PUSH
79992: LD_INT 2
79994: ARRAY
79995: PPUSH
79996: LD_VAR 0 3
80000: PPUSH
80001: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80005: LD_ADDR_EXP 142
80009: PUSH
80010: LD_EXP 142
80014: PPUSH
80015: LD_VAR 0 1
80019: PPUSH
80020: LD_EXP 142
80024: PUSH
80025: LD_VAR 0 1
80029: ARRAY
80030: PPUSH
80031: LD_VAR 0 2
80035: PPUSH
80036: CALL_OW 3
80040: PPUSH
80041: CALL_OW 1
80045: ST_TO_ADDR
// end ; end ;
80046: GO 79797
80048: POP
80049: POP
// end ;
80050: GO 79715
80052: POP
80053: POP
// end ;
80054: PPOPN 4
80056: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80057: LD_INT 0
80059: PPUSH
80060: PPUSH
// result := false ;
80061: LD_ADDR_VAR 0 4
80065: PUSH
80066: LD_INT 0
80068: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80069: LD_VAR 0 1
80073: PPUSH
80074: CALL_OW 264
80078: PUSH
80079: LD_EXP 125
80083: EQUAL
80084: NOT
80085: IFFALSE 80089
// exit ;
80087: GO 80329
// index := GetElementIndex ( minersList , unit ) ;
80089: LD_ADDR_VAR 0 5
80093: PUSH
80094: LD_EXP 141
80098: PPUSH
80099: LD_VAR 0 1
80103: PPUSH
80104: CALL 45071 0 2
80108: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80109: LD_EXP 142
80113: PUSH
80114: LD_VAR 0 5
80118: ARRAY
80119: PUSH
80120: LD_EXP 143
80124: GREATEREQUAL
80125: IFFALSE 80129
// exit ;
80127: GO 80329
// ComMoveXY ( unit , x , y ) ;
80129: LD_VAR 0 1
80133: PPUSH
80134: LD_VAR 0 2
80138: PPUSH
80139: LD_VAR 0 3
80143: PPUSH
80144: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80148: LD_INT 35
80150: PPUSH
80151: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80155: LD_VAR 0 1
80159: PPUSH
80160: LD_VAR 0 2
80164: PPUSH
80165: LD_VAR 0 3
80169: PPUSH
80170: CALL 75135 0 3
80174: NOT
80175: PUSH
80176: LD_VAR 0 1
80180: PPUSH
80181: CALL_OW 314
80185: AND
80186: IFFALSE 80190
// exit ;
80188: GO 80329
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80190: LD_VAR 0 2
80194: PPUSH
80195: LD_VAR 0 3
80199: PPUSH
80200: CALL_OW 428
80204: PUSH
80205: LD_VAR 0 1
80209: EQUAL
80210: PUSH
80211: LD_VAR 0 1
80215: PPUSH
80216: CALL_OW 314
80220: NOT
80221: AND
80222: IFFALSE 80148
// PlaySoundXY ( x , y , PlantMine ) ;
80224: LD_VAR 0 2
80228: PPUSH
80229: LD_VAR 0 3
80233: PPUSH
80234: LD_STRING PlantMine
80236: PPUSH
80237: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80241: LD_VAR 0 2
80245: PPUSH
80246: LD_VAR 0 3
80250: PPUSH
80251: LD_VAR 0 1
80255: PPUSH
80256: CALL_OW 255
80260: PPUSH
80261: LD_INT 0
80263: PPUSH
80264: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80268: LD_ADDR_EXP 142
80272: PUSH
80273: LD_EXP 142
80277: PPUSH
80278: LD_VAR 0 5
80282: PUSH
80283: LD_EXP 142
80287: PUSH
80288: LD_VAR 0 5
80292: ARRAY
80293: PUSH
80294: LD_INT 1
80296: PLUS
80297: PUSH
80298: EMPTY
80299: LIST
80300: LIST
80301: PPUSH
80302: LD_VAR 0 2
80306: PUSH
80307: LD_VAR 0 3
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: PPUSH
80316: CALL 45286 0 3
80320: ST_TO_ADDR
// result := true ;
80321: LD_ADDR_VAR 0 4
80325: PUSH
80326: LD_INT 1
80328: ST_TO_ADDR
// end ;
80329: LD_VAR 0 4
80333: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80334: LD_INT 0
80336: PPUSH
80337: PPUSH
80338: PPUSH
// if not unit in minersList then
80339: LD_VAR 0 1
80343: PUSH
80344: LD_EXP 141
80348: IN
80349: NOT
80350: IFFALSE 80354
// exit ;
80352: GO 80746
// index := GetElementIndex ( minersList , unit ) ;
80354: LD_ADDR_VAR 0 6
80358: PUSH
80359: LD_EXP 141
80363: PPUSH
80364: LD_VAR 0 1
80368: PPUSH
80369: CALL 45071 0 2
80373: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80374: LD_ADDR_VAR 0 5
80378: PUSH
80379: DOUBLE
80380: LD_EXP 142
80384: PUSH
80385: LD_VAR 0 6
80389: ARRAY
80390: INC
80391: ST_TO_ADDR
80392: LD_INT 1
80394: PUSH
80395: FOR_DOWNTO
80396: IFFALSE 80557
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80398: LD_EXP 142
80402: PUSH
80403: LD_VAR 0 6
80407: ARRAY
80408: PUSH
80409: LD_VAR 0 5
80413: ARRAY
80414: PUSH
80415: LD_INT 1
80417: ARRAY
80418: PUSH
80419: LD_VAR 0 2
80423: EQUAL
80424: PUSH
80425: LD_EXP 142
80429: PUSH
80430: LD_VAR 0 6
80434: ARRAY
80435: PUSH
80436: LD_VAR 0 5
80440: ARRAY
80441: PUSH
80442: LD_INT 2
80444: ARRAY
80445: PUSH
80446: LD_VAR 0 3
80450: EQUAL
80451: AND
80452: IFFALSE 80555
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80454: LD_EXP 142
80458: PUSH
80459: LD_VAR 0 6
80463: ARRAY
80464: PUSH
80465: LD_VAR 0 5
80469: ARRAY
80470: PUSH
80471: LD_INT 1
80473: ARRAY
80474: PPUSH
80475: LD_EXP 142
80479: PUSH
80480: LD_VAR 0 6
80484: ARRAY
80485: PUSH
80486: LD_VAR 0 5
80490: ARRAY
80491: PUSH
80492: LD_INT 2
80494: ARRAY
80495: PPUSH
80496: LD_VAR 0 1
80500: PPUSH
80501: CALL_OW 255
80505: PPUSH
80506: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80510: LD_ADDR_EXP 142
80514: PUSH
80515: LD_EXP 142
80519: PPUSH
80520: LD_VAR 0 6
80524: PPUSH
80525: LD_EXP 142
80529: PUSH
80530: LD_VAR 0 6
80534: ARRAY
80535: PPUSH
80536: LD_VAR 0 5
80540: PPUSH
80541: CALL_OW 3
80545: PPUSH
80546: CALL_OW 1
80550: ST_TO_ADDR
// exit ;
80551: POP
80552: POP
80553: GO 80746
// end ; end ;
80555: GO 80395
80557: POP
80558: POP
// for i := minerMinesList [ index ] downto 1 do
80559: LD_ADDR_VAR 0 5
80563: PUSH
80564: DOUBLE
80565: LD_EXP 142
80569: PUSH
80570: LD_VAR 0 6
80574: ARRAY
80575: INC
80576: ST_TO_ADDR
80577: LD_INT 1
80579: PUSH
80580: FOR_DOWNTO
80581: IFFALSE 80744
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80583: LD_EXP 142
80587: PUSH
80588: LD_VAR 0 6
80592: ARRAY
80593: PUSH
80594: LD_VAR 0 5
80598: ARRAY
80599: PUSH
80600: LD_INT 1
80602: ARRAY
80603: PPUSH
80604: LD_EXP 142
80608: PUSH
80609: LD_VAR 0 6
80613: ARRAY
80614: PUSH
80615: LD_VAR 0 5
80619: ARRAY
80620: PUSH
80621: LD_INT 2
80623: ARRAY
80624: PPUSH
80625: LD_VAR 0 2
80629: PPUSH
80630: LD_VAR 0 3
80634: PPUSH
80635: CALL_OW 298
80639: PUSH
80640: LD_INT 6
80642: LESS
80643: IFFALSE 80742
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80645: LD_EXP 142
80649: PUSH
80650: LD_VAR 0 6
80654: ARRAY
80655: PUSH
80656: LD_VAR 0 5
80660: ARRAY
80661: PUSH
80662: LD_INT 1
80664: ARRAY
80665: PPUSH
80666: LD_EXP 142
80670: PUSH
80671: LD_VAR 0 6
80675: ARRAY
80676: PUSH
80677: LD_VAR 0 5
80681: ARRAY
80682: PUSH
80683: LD_INT 2
80685: ARRAY
80686: PPUSH
80687: LD_VAR 0 1
80691: PPUSH
80692: CALL_OW 255
80696: PPUSH
80697: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80701: LD_ADDR_EXP 142
80705: PUSH
80706: LD_EXP 142
80710: PPUSH
80711: LD_VAR 0 6
80715: PPUSH
80716: LD_EXP 142
80720: PUSH
80721: LD_VAR 0 6
80725: ARRAY
80726: PPUSH
80727: LD_VAR 0 5
80731: PPUSH
80732: CALL_OW 3
80736: PPUSH
80737: CALL_OW 1
80741: ST_TO_ADDR
// end ; end ;
80742: GO 80580
80744: POP
80745: POP
// end ;
80746: LD_VAR 0 4
80750: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80751: LD_INT 0
80753: PPUSH
80754: PPUSH
80755: PPUSH
80756: PPUSH
80757: PPUSH
80758: PPUSH
80759: PPUSH
80760: PPUSH
80761: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80762: LD_VAR 0 1
80766: PPUSH
80767: CALL_OW 264
80771: PUSH
80772: LD_EXP 125
80776: EQUAL
80777: NOT
80778: PUSH
80779: LD_VAR 0 1
80783: PUSH
80784: LD_EXP 141
80788: IN
80789: NOT
80790: OR
80791: IFFALSE 80795
// exit ;
80793: GO 81117
// index := GetElementIndex ( minersList , unit ) ;
80795: LD_ADDR_VAR 0 6
80799: PUSH
80800: LD_EXP 141
80804: PPUSH
80805: LD_VAR 0 1
80809: PPUSH
80810: CALL 45071 0 2
80814: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80815: LD_ADDR_VAR 0 8
80819: PUSH
80820: LD_EXP 143
80824: PUSH
80825: LD_EXP 142
80829: PUSH
80830: LD_VAR 0 6
80834: ARRAY
80835: MINUS
80836: ST_TO_ADDR
// if not minesFreeAmount then
80837: LD_VAR 0 8
80841: NOT
80842: IFFALSE 80846
// exit ;
80844: GO 81117
// tmp := [ ] ;
80846: LD_ADDR_VAR 0 7
80850: PUSH
80851: EMPTY
80852: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80853: LD_ADDR_VAR 0 5
80857: PUSH
80858: DOUBLE
80859: LD_INT 1
80861: DEC
80862: ST_TO_ADDR
80863: LD_VAR 0 8
80867: PUSH
80868: FOR_TO
80869: IFFALSE 81064
// begin _d := rand ( 0 , 5 ) ;
80871: LD_ADDR_VAR 0 11
80875: PUSH
80876: LD_INT 0
80878: PPUSH
80879: LD_INT 5
80881: PPUSH
80882: CALL_OW 12
80886: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80887: LD_ADDR_VAR 0 12
80891: PUSH
80892: LD_INT 2
80894: PPUSH
80895: LD_INT 6
80897: PPUSH
80898: CALL_OW 12
80902: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80903: LD_ADDR_VAR 0 9
80907: PUSH
80908: LD_VAR 0 2
80912: PPUSH
80913: LD_VAR 0 11
80917: PPUSH
80918: LD_VAR 0 12
80922: PPUSH
80923: CALL_OW 272
80927: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80928: LD_ADDR_VAR 0 10
80932: PUSH
80933: LD_VAR 0 3
80937: PPUSH
80938: LD_VAR 0 11
80942: PPUSH
80943: LD_VAR 0 12
80947: PPUSH
80948: CALL_OW 273
80952: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80953: LD_VAR 0 9
80957: PPUSH
80958: LD_VAR 0 10
80962: PPUSH
80963: CALL_OW 488
80967: PUSH
80968: LD_VAR 0 9
80972: PUSH
80973: LD_VAR 0 10
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: PUSH
80982: LD_VAR 0 7
80986: IN
80987: NOT
80988: AND
80989: PUSH
80990: LD_VAR 0 9
80994: PPUSH
80995: LD_VAR 0 10
80999: PPUSH
81000: CALL_OW 458
81004: NOT
81005: AND
81006: IFFALSE 81048
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81008: LD_ADDR_VAR 0 7
81012: PUSH
81013: LD_VAR 0 7
81017: PPUSH
81018: LD_VAR 0 7
81022: PUSH
81023: LD_INT 1
81025: PLUS
81026: PPUSH
81027: LD_VAR 0 9
81031: PUSH
81032: LD_VAR 0 10
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: PPUSH
81041: CALL_OW 1
81045: ST_TO_ADDR
81046: GO 81062
// i := i - 1 ;
81048: LD_ADDR_VAR 0 5
81052: PUSH
81053: LD_VAR 0 5
81057: PUSH
81058: LD_INT 1
81060: MINUS
81061: ST_TO_ADDR
// end ;
81062: GO 80868
81064: POP
81065: POP
// for i in tmp do
81066: LD_ADDR_VAR 0 5
81070: PUSH
81071: LD_VAR 0 7
81075: PUSH
81076: FOR_IN
81077: IFFALSE 81115
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81079: LD_VAR 0 1
81083: PPUSH
81084: LD_VAR 0 5
81088: PUSH
81089: LD_INT 1
81091: ARRAY
81092: PPUSH
81093: LD_VAR 0 5
81097: PUSH
81098: LD_INT 2
81100: ARRAY
81101: PPUSH
81102: CALL 80057 0 3
81106: NOT
81107: IFFALSE 81113
// exit ;
81109: POP
81110: POP
81111: GO 81117
81113: GO 81076
81115: POP
81116: POP
// end ;
81117: LD_VAR 0 4
81121: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
81122: LD_INT 0
81124: PPUSH
81125: PPUSH
81126: PPUSH
81127: PPUSH
81128: PPUSH
81129: PPUSH
81130: PPUSH
// if not GetClass ( unit ) = class_sniper then
81131: LD_VAR 0 1
81135: PPUSH
81136: CALL_OW 257
81140: PUSH
81141: LD_INT 5
81143: EQUAL
81144: NOT
81145: IFFALSE 81149
// exit ;
81147: GO 81537
// dist := 8 ;
81149: LD_ADDR_VAR 0 5
81153: PUSH
81154: LD_INT 8
81156: ST_TO_ADDR
// viewRange := 12 ;
81157: LD_ADDR_VAR 0 7
81161: PUSH
81162: LD_INT 12
81164: ST_TO_ADDR
// side := GetSide ( unit ) ;
81165: LD_ADDR_VAR 0 6
81169: PUSH
81170: LD_VAR 0 1
81174: PPUSH
81175: CALL_OW 255
81179: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81180: LD_INT 61
81182: PPUSH
81183: LD_VAR 0 6
81187: PPUSH
81188: CALL_OW 321
81192: PUSH
81193: LD_INT 2
81195: EQUAL
81196: IFFALSE 81206
// viewRange := 16 ;
81198: LD_ADDR_VAR 0 7
81202: PUSH
81203: LD_INT 16
81205: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81206: LD_VAR 0 1
81210: PPUSH
81211: LD_VAR 0 2
81215: PPUSH
81216: LD_VAR 0 3
81220: PPUSH
81221: CALL_OW 297
81225: PUSH
81226: LD_VAR 0 5
81230: GREATER
81231: IFFALSE 81310
// begin ComMoveXY ( unit , x , y ) ;
81233: LD_VAR 0 1
81237: PPUSH
81238: LD_VAR 0 2
81242: PPUSH
81243: LD_VAR 0 3
81247: PPUSH
81248: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81252: LD_INT 35
81254: PPUSH
81255: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81259: LD_VAR 0 1
81263: PPUSH
81264: LD_VAR 0 2
81268: PPUSH
81269: LD_VAR 0 3
81273: PPUSH
81274: CALL 75135 0 3
81278: NOT
81279: IFFALSE 81283
// exit ;
81281: GO 81537
// until GetDistUnitXY ( unit , x , y ) < dist ;
81283: LD_VAR 0 1
81287: PPUSH
81288: LD_VAR 0 2
81292: PPUSH
81293: LD_VAR 0 3
81297: PPUSH
81298: CALL_OW 297
81302: PUSH
81303: LD_VAR 0 5
81307: LESS
81308: IFFALSE 81252
// end ; ComTurnXY ( unit , x , y ) ;
81310: LD_VAR 0 1
81314: PPUSH
81315: LD_VAR 0 2
81319: PPUSH
81320: LD_VAR 0 3
81324: PPUSH
81325: CALL_OW 118
// wait ( 5 ) ;
81329: LD_INT 5
81331: PPUSH
81332: CALL_OW 67
// _d := GetDir ( unit ) ;
81336: LD_ADDR_VAR 0 10
81340: PUSH
81341: LD_VAR 0 1
81345: PPUSH
81346: CALL_OW 254
81350: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
81351: LD_ADDR_VAR 0 8
81355: PUSH
81356: LD_VAR 0 1
81360: PPUSH
81361: CALL_OW 250
81365: PPUSH
81366: LD_VAR 0 10
81370: PPUSH
81371: LD_VAR 0 5
81375: PPUSH
81376: CALL_OW 272
81380: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
81381: LD_ADDR_VAR 0 9
81385: PUSH
81386: LD_VAR 0 1
81390: PPUSH
81391: CALL_OW 251
81395: PPUSH
81396: LD_VAR 0 10
81400: PPUSH
81401: LD_VAR 0 5
81405: PPUSH
81406: CALL_OW 273
81410: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81411: LD_VAR 0 8
81415: PPUSH
81416: LD_VAR 0 9
81420: PPUSH
81421: CALL_OW 488
81425: NOT
81426: IFFALSE 81430
// exit ;
81428: GO 81537
// ComAnimCustom ( unit , 1 ) ;
81430: LD_VAR 0 1
81434: PPUSH
81435: LD_INT 1
81437: PPUSH
81438: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81442: LD_VAR 0 8
81446: PPUSH
81447: LD_VAR 0 9
81451: PPUSH
81452: LD_VAR 0 6
81456: PPUSH
81457: LD_VAR 0 7
81461: PPUSH
81462: CALL_OW 330
// repeat wait ( 1 ) ;
81466: LD_INT 1
81468: PPUSH
81469: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
81473: LD_VAR 0 1
81477: PPUSH
81478: CALL_OW 316
81482: PUSH
81483: LD_VAR 0 1
81487: PPUSH
81488: CALL_OW 314
81492: OR
81493: PUSH
81494: LD_VAR 0 1
81498: PPUSH
81499: CALL_OW 302
81503: NOT
81504: OR
81505: PUSH
81506: LD_VAR 0 1
81510: PPUSH
81511: CALL_OW 301
81515: OR
81516: IFFALSE 81466
// RemoveSeeing ( _x , _y , side ) ;
81518: LD_VAR 0 8
81522: PPUSH
81523: LD_VAR 0 9
81527: PPUSH
81528: LD_VAR 0 6
81532: PPUSH
81533: CALL_OW 331
// end ; end_of_file
81537: LD_VAR 0 4
81541: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81542: LD_VAR 0 1
81546: PUSH
81547: LD_INT 200
81549: DOUBLE
81550: GREATEREQUAL
81551: IFFALSE 81559
81553: LD_INT 299
81555: DOUBLE
81556: LESSEQUAL
81557: IFTRUE 81561
81559: GO 81593
81561: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81562: LD_VAR 0 1
81566: PPUSH
81567: LD_VAR 0 2
81571: PPUSH
81572: LD_VAR 0 3
81576: PPUSH
81577: LD_VAR 0 4
81581: PPUSH
81582: LD_VAR 0 5
81586: PPUSH
81587: CALL 77667 0 5
81591: GO 81670
81593: LD_INT 300
81595: DOUBLE
81596: GREATEREQUAL
81597: IFFALSE 81605
81599: LD_INT 399
81601: DOUBLE
81602: LESSEQUAL
81603: IFTRUE 81607
81605: GO 81669
81607: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81608: LD_VAR 0 1
81612: PPUSH
81613: LD_VAR 0 2
81617: PPUSH
81618: LD_VAR 0 3
81622: PPUSH
81623: LD_VAR 0 4
81627: PPUSH
81628: LD_VAR 0 5
81632: PPUSH
81633: LD_VAR 0 6
81637: PPUSH
81638: LD_VAR 0 7
81642: PPUSH
81643: LD_VAR 0 8
81647: PPUSH
81648: LD_VAR 0 9
81652: PPUSH
81653: LD_VAR 0 10
81657: PPUSH
81658: LD_VAR 0 11
81662: PPUSH
81663: CALL 38360 0 11
81667: GO 81670
81669: POP
// end ;
81670: PPOPN 11
81672: END
