// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27326 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 45983 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 45983 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 45983 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 45983 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 45983 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18824 0 1
7815: PPUSH
7816: CALL 18668 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18824 0 1
11310: PPUSH
11311: CALL 18706 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25622 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25622 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16601 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16601 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 48853 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 51115 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17266 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17281 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19372 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19281 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19094 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19372 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16516
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_EXP 124
16305: PUSH
16306: LD_INT 52
16308: PUSH
16309: LD_INT 14
16311: PUSH
16312: LD_INT 53
16314: PUSH
16315: LD_INT 31
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: IN
16329: NOT
16330: IFFALSE 16389
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 13
16339: ARRAY
16340: PUSH
16341: LD_VAR 0 3
16345: PPUSH
16346: CALL 19452 0 1
16350: GREATER
16351: IFFALSE 16372
// AddNewVehicle ( aiData , vehicle , 2 ) else
16353: LD_VAR 0 3
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 2
16365: PPUSH
16366: CALL 18989 0 3
16370: GO 16389
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_INT 4
16384: PPUSH
16385: CALL 18989 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 264
16398: PUSH
16399: LD_INT 12
16401: PUSH
16402: LD_INT 32
16404: PUSH
16405: LD_INT 51
16407: PUSH
16408: LD_INT 13
16410: PUSH
16411: LD_EXP 124
16415: PUSH
16416: LD_INT 52
16418: PUSH
16419: LD_INT 14
16421: PUSH
16422: LD_INT 53
16424: PUSH
16425: LD_INT 31
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: IN
16439: IFFALSE 16458
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL 18989 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16458: LD_EXP 60
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 263
16472: PUSH
16473: LD_INT 2
16475: EQUAL
16476: AND
16477: IFFALSE 16516
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_EXP 60
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 60
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: PPUSH
16503: CALL_OW 313
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: CALL_OW 53
// end ; end ;
16516: PPOPN 3
16518: END
// on BuildingStarted ( building , unit ) do var aiData ;
16519: LD_INT 0
16521: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: LD_VAR 0 2
16531: PPUSH
16532: CALL_OW 255
16536: PPUSH
16537: CALL 19372 0 1
16541: ST_TO_ADDR
// if ( aiData ) then
16542: LD_VAR 0 3
16546: IFFALSE 16571
// begin RemoveDestroyedBuilding ( aiData ) ;
16548: LD_VAR 0 3
16552: PPUSH
16553: CALL 19188 0 1
// AddNewUnit ( aiData , building ) ;
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL 18898 0 2
// end ; end ;
16571: PPOPN 3
16573: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16574: LD_VAR 0 2
16578: PUSH
16579: LD_EXP 51
16583: EQUAL
16584: IFFALSE 16598
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 19
16593: PPUSH
16594: CALL_OW 113
// end ; end_of_file
16598: PPOPN 2
16600: END
// export function FinishMission ; begin
16601: LD_INT 0
16603: PPUSH
// SetRewards ;
16604: CALL 16625 0 0
// SavePlayerCharacters ;
16608: CALL 16804 0 0
// SaveGlobalVariables ;
16612: CALL 17246 0 0
// YouWin ;
16616: CALL_OW 103
// end ;
16620: LD_VAR 0 1
16624: RET
// function SetRewards ; begin
16625: LD_INT 0
16627: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16628: LD_EXP 55
16632: PPUSH
16633: CALL_OW 302
16637: PUSH
16638: LD_EXP 55
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: LD_INT 3
16650: EQUAL
16651: AND
16652: IFFALSE 16666
// AddMedal ( Xavier , 1 ) else
16654: LD_STRING Xavier
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 101
16664: GO 16677
// AddMedal ( Xavier , - 1 ) ;
16666: LD_STRING Xavier
16668: PPUSH
16669: LD_INT 1
16671: NEG
16672: PPUSH
16673: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16677: LD_EXP 19
16681: PUSH
16682: LD_EXP 28
16686: LESSEQUAL
16687: IFFALSE 16701
// AddMedal ( TimeVS , 1 ) else
16689: LD_STRING TimeVS
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 101
16699: GO 16712
// AddMedal ( TimeVS , - 1 ) ;
16701: LD_STRING TimeVS
16703: PPUSH
16704: LD_INT 1
16706: NEG
16707: PPUSH
16708: CALL_OW 101
// if heikeCaptured then
16712: LD_EXP 17
16716: IFFALSE 16730
// AddMedal ( Heike , 1 ) else
16718: LD_STRING Heike
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 101
16728: GO 16741
// AddMedal ( Heike , - 1 ) ;
16730: LD_STRING Heike
16732: PPUSH
16733: LD_INT 1
16735: NEG
16736: PPUSH
16737: CALL_OW 101
// GiveMedals ( Main1 ) ;
16741: LD_STRING Main1
16743: PPUSH
16744: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16748: LD_INT 22
16750: PUSH
16751: LD_INT 3
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 21
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 50
16780: PUSH
16781: EMPTY
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: PPUSH
16795: CALL_OW 43
// end ;
16799: LD_VAR 0 1
16803: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16804: LD_INT 0
16806: PPUSH
16807: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16808: LD_EXP 37
16812: PPUSH
16813: LD_STRING Burlak
16815: PPUSH
16816: LD_INT 3
16818: PPUSH
16819: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16823: LD_EXP 38
16827: PPUSH
16828: LD_STRING Karamazov
16830: PPUSH
16831: LD_INT 3
16833: PPUSH
16834: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16838: LD_EXP 39
16842: PPUSH
16843: LD_STRING Petrovova
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16853: LD_EXP 40
16857: PPUSH
16858: LD_STRING Gleb
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16868: LD_EXP 41
16872: PPUSH
16873: LD_STRING Petrosyan
16875: PPUSH
16876: LD_INT 3
16878: PPUSH
16879: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16883: LD_EXP 43
16887: PPUSH
16888: LD_STRING Dolgov
16890: PPUSH
16891: LD_INT 3
16893: PPUSH
16894: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16898: LD_EXP 44
16902: PPUSH
16903: LD_STRING Lipshchin
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16913: LD_EXP 42
16917: PPUSH
16918: LD_STRING Titov
16920: PPUSH
16921: LD_INT 3
16923: PPUSH
16924: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16928: LD_EXP 45
16932: PPUSH
16933: LD_STRING Kirilenkova
16935: PPUSH
16936: LD_INT 3
16938: PPUSH
16939: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16943: LD_EXP 46
16947: PPUSH
16948: LD_STRING Belkov
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16958: LD_EXP 47
16962: PPUSH
16963: LD_STRING Belkov2
16965: PPUSH
16966: LD_INT 3
16968: PPUSH
16969: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16973: LD_EXP 55
16977: PPUSH
16978: LD_STRING Xavier
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16988: LD_EXP 48
16992: PPUSH
16993: LD_STRING Vsevolod
16995: PPUSH
16996: LD_INT 3
16998: PPUSH
16999: CALL 12290 0 3
// if heikeCaptured then
17003: LD_EXP 17
17007: IFFALSE 17021
// SaveCharacters ( Heike , 07_Heike ) ;
17009: LD_EXP 56
17013: PPUSH
17014: LD_STRING 07_Heike
17016: PPUSH
17017: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17021: LD_INT 22
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 25
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 25
17056: PUSH
17057: LD_INT 16
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 15
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: PPUSH
17090: LD_STRING other_apemans
17092: PPUSH
17093: LD_INT 3
17095: PPUSH
17096: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 23
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PUSH
17145: LD_EXP 37
17149: PUSH
17150: LD_EXP 38
17154: PUSH
17155: LD_EXP 39
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_EXP 41
17169: PUSH
17170: LD_EXP 42
17174: PUSH
17175: LD_EXP 43
17179: PUSH
17180: LD_EXP 44
17184: PUSH
17185: LD_EXP 45
17189: PUSH
17190: LD_EXP 46
17194: PUSH
17195: LD_EXP 47
17199: PUSH
17200: LD_EXP 55
17204: PUSH
17205: LD_EXP 48
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: DIFF
17225: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17226: LD_VAR 0 2
17230: PPUSH
17231: LD_STRING other_survivors
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: CALL 12347 0 3
// end ;
17241: LD_VAR 0 1
17245: RET
// function SaveGlobalVariables ; begin
17246: LD_INT 0
17248: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17249: LD_EXP 17
17253: PPUSH
17254: LD_STRING 07_HeikeCaptured_1
17256: PPUSH
17257: CALL_OW 39
// end ; end_of_file
17261: LD_VAR 0 1
17265: RET
// export function Lose_Burlak ; begin
17266: LD_INT 0
17268: PPUSH
// YouLost ( Burlak ) ;
17269: LD_STRING Burlak
17271: PPUSH
17272: CALL_OW 104
// end ;
17276: LD_VAR 0 1
17280: RET
// export function Lose_Vsevolod ; begin
17281: LD_INT 0
17283: PPUSH
// YouLost ( Sevi ) ;
17284: LD_STRING Sevi
17286: PPUSH
17287: CALL_OW 104
// end ;
17291: LD_VAR 0 1
17295: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17296: LD_EXP 56
17300: PPUSH
17301: LD_INT 9
17303: PPUSH
17304: CALL_OW 308
17308: PUSH
17309: LD_EXP 57
17313: PPUSH
17314: LD_INT 9
17316: PPUSH
17317: CALL_OW 308
17321: OR
17322: IFFALSE 17334
17324: GO 17326
17326: DISABLE
// YouLost ( Heike ) ; end_of_file
17327: LD_STRING Heike
17329: PPUSH
17330: CALL_OW 104
17334: END
// export aiStructDatas ; export function InitAIManager ; begin
17335: LD_INT 0
17337: PPUSH
// aiStructDatas = [ ] ;
17338: LD_ADDR_EXP 62
17342: PUSH
17343: EMPTY
17344: ST_TO_ADDR
// end ;
17345: LD_VAR 0 1
17349: RET
// every 1 do
17350: GO 17352
17352: DISABLE
// begin InitAIManager ;
17353: CALL 17335 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17357: LD_INT 1
17359: PPUSH
17360: LD_INT 0
17362: PPUSH
17363: LD_INT 2
17365: PPUSH
17366: LD_INT 2
17368: PPUSH
17369: LD_EXP 59
17373: PPUSH
17374: LD_INT 10
17376: PPUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PPUSH
17401: CALL_OW 70
17405: PPUSH
17406: EMPTY
17407: PPUSH
17408: LD_INT 10
17410: PPUSH
17411: LD_INT 12
17413: PPUSH
17414: LD_INT 13
17416: PPUSH
17417: LD_INT 11
17419: PPUSH
17420: LD_INT 13
17422: PPUSH
17423: LD_INT 13
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 25
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 26
17443: PUSH
17444: LD_INT 28
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 13
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 27
17474: PUSH
17475: LD_INT 23
17477: PUSH
17478: LD_INT 26
17480: PUSH
17481: LD_INT 28
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: LD_INT 13
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 27
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 26
17521: PUSH
17522: LD_INT 28
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 13
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 25
17549: PUSH
17550: LD_INT 27
17552: PUSH
17553: LD_INT 23
17555: PUSH
17556: LD_INT 26
17558: PUSH
17559: LD_INT 28
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 13
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 25
17586: PUSH
17587: LD_INT 27
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 26
17595: PUSH
17596: LD_INT 28
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PPUSH
17617: LD_INT 1
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PPUSH
17631: LD_INT 5250
17633: PPUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL 18524 0 20
// end ;
17661: END
// every 0 0$1 do
17662: GO 17664
17664: DISABLE
// begin StateManager ( 1 ) ;
17665: LD_INT 1
17667: PPUSH
17668: CALL 19672 0 1
// MechanicsManager ( 1 ) ;
17672: LD_INT 1
17674: PPUSH
17675: CALL 20785 0 1
// VehiclesManager ( 1 ) ;
17679: LD_INT 1
17681: PPUSH
17682: CALL 21049 0 1
// SoldiersManager ( 1 ) ;
17686: LD_INT 1
17688: PPUSH
17689: CALL 20158 0 1
// DefenceManager ( 1 ) ;
17693: LD_INT 1
17695: PPUSH
17696: CALL 21559 0 1
// CollectCrates ( 1 ) ;
17700: LD_INT 1
17702: PPUSH
17703: CALL 22491 0 1
// FleeToHealArea ( 1 ) ;
17707: LD_INT 1
17709: PPUSH
17710: CALL 22681 0 1
// FleeToRepairArea ( 1 ) ;
17714: LD_INT 1
17716: PPUSH
17717: CALL 22812 0 1
// RepairBuildings ( 1 ) ;
17721: LD_INT 1
17723: PPUSH
17724: CALL 22968 0 1
// HealDamageUnits ( 1 ) ;
17728: LD_INT 1
17730: PPUSH
17731: CALL 23713 0 1
// enable ;
17735: ENABLE
// end ;
17736: END
// every 0 0$1 do
17737: GO 17739
17739: DISABLE
// begin ProduceVehicles ( 1 ) ;
17740: LD_INT 1
17742: PPUSH
17743: CALL 24211 0 1
// enable ;
17747: ENABLE
// end ;
17748: END
// every 0 0$1 do
17749: GO 17751
17751: DISABLE
// begin AttackManager ( 1 ) ;
17752: LD_INT 1
17754: PPUSH
17755: CALL 22057 0 1
// enable ;
17759: ENABLE
// end ;
17760: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17761: LD_INT 14
17763: PPUSH
17764: LD_INT 22
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PPUSH
17774: CALL_OW 70
17778: PUSH
17779: LD_INT 15
17781: PPUSH
17782: LD_INT 22
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 70
17796: OR
17797: PUSH
17798: LD_INT 16
17800: PPUSH
17801: LD_INT 22
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 70
17815: OR
17816: PUSH
17817: LD_INT 17
17819: PPUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 70
17834: OR
17835: PUSH
17836: LD_INT 18
17838: PPUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 70
17853: OR
17854: PUSH
17855: LD_EXP 61
17859: AND
17860: IFFALSE 18280
17862: GO 17864
17864: DISABLE
17865: LD_INT 0
17867: PPUSH
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin unitsInArea = [ ] ;
17872: LD_ADDR_VAR 0 2
17876: PUSH
17877: EMPTY
17878: ST_TO_ADDR
// tmp = [ ] ;
17879: LD_ADDR_VAR 0 5
17883: PUSH
17884: EMPTY
17885: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: LD_VAR 0 2
17895: PUSH
17896: LD_INT 14
17898: PPUSH
17899: LD_INT 22
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 70
17913: ADD
17914: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: LD_INT 15
17927: PPUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 70
17942: ADD
17943: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_VAR 0 2
17953: PUSH
17954: LD_INT 16
17956: PPUSH
17957: LD_INT 22
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 70
17971: ADD
17972: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: LD_INT 17
17985: PPUSH
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 70
18000: ADD
18001: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 18
18014: PPUSH
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 70
18029: ADD
18030: ST_TO_ADDR
// for unit in unitsInArea do
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 2
18040: PUSH
18041: FOR_IN
18042: IFFALSE 18277
// begin if GetType ( unit ) = unit_human then
18044: LD_VAR 0 3
18048: PPUSH
18049: CALL_OW 247
18053: PUSH
18054: LD_INT 1
18056: EQUAL
18057: IFFALSE 18069
// minDistance = 3 else
18059: LD_ADDR_VAR 0 4
18063: PUSH
18064: LD_INT 3
18066: ST_TO_ADDR
18067: GO 18077
// minDistance = 4 ;
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: LD_INT 4
18076: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: DOUBLE
18083: LD_INT 1
18085: DEC
18086: ST_TO_ADDR
18087: LD_EXP 61
18091: PUSH
18092: LD_INT 2
18094: DIV
18095: PUSH
18096: FOR_TO
18097: IFFALSE 18256
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18099: LD_EXP 61
18103: PUSH
18104: LD_VAR 0 1
18108: PUSH
18109: LD_INT 2
18111: MUL
18112: PUSH
18113: LD_INT 1
18115: MINUS
18116: ARRAY
18117: PPUSH
18118: LD_EXP 61
18122: PUSH
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 2
18130: MUL
18131: ARRAY
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 250
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: CALL_OW 251
18152: PPUSH
18153: CALL_OW 298
18157: PUSH
18158: LD_VAR 0 4
18162: LESS
18163: IFFALSE 18208
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18165: LD_EXP 61
18169: PUSH
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 2
18177: MUL
18178: PUSH
18179: LD_INT 1
18181: MINUS
18182: ARRAY
18183: PPUSH
18184: LD_EXP 61
18188: PUSH
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 2
18196: MUL
18197: ARRAY
18198: PPUSH
18199: LD_INT 2
18201: PPUSH
18202: CALL_OW 456
18206: GO 18254
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_VAR 0 5
18217: PUSH
18218: LD_EXP 61
18222: PUSH
18223: LD_VAR 0 1
18227: PUSH
18228: LD_INT 2
18230: MUL
18231: PUSH
18232: LD_INT 1
18234: MINUS
18235: ARRAY
18236: ADD
18237: PUSH
18238: LD_EXP 61
18242: PUSH
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 2
18250: MUL
18251: ARRAY
18252: ADD
18253: ST_TO_ADDR
18254: GO 18096
18256: POP
18257: POP
// minesList = tmp ;
18258: LD_ADDR_EXP 61
18262: PUSH
18263: LD_VAR 0 5
18267: ST_TO_ADDR
// tmp := [ ] ;
18268: LD_ADDR_VAR 0 5
18272: PUSH
18273: EMPTY
18274: ST_TO_ADDR
// end ;
18275: GO 18041
18277: POP
18278: POP
// enable ;
18279: ENABLE
// end ;
18280: PPOPN 5
18282: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18283: LD_INT 2
18285: PPUSH
18286: CALL_OW 255
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: PUSH
18295: LD_INT 2
18297: PPUSH
18298: CALL_OW 303
18302: OR
18303: IFFALSE 18432
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 50
18329: PUSH
18330: EMPTY
18331: LIST
18332: PUSH
18333: LD_INT 21
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 30
18345: PUSH
18346: LD_INT 32
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18430
// if UnitsInside ( turret ) then
18367: LD_VAR 0 2
18371: PPUSH
18372: CALL_OW 313
18376: IFFALSE 18428
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 313
18392: PUSH
18393: LD_INT 1
18395: ARRAY
18396: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 122
// wait ( 0 0$01 ) ;
18406: LD_INT 35
18408: PPUSH
18409: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 103
18420: PPUSH
18421: LD_INT 48
18423: PPUSH
18424: CALL_OW 114
// end ;
18428: GO 18364
18430: POP
18431: POP
// end ;
18432: PPOPN 2
18434: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18444: LD_ADDR_VAR 0 4
18448: PUSH
18449: LD_INT 2
18451: PPUSH
18452: LD_INT 2
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL 41182 0 3
18462: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: DOUBLE
18469: LD_INT 1
18471: DEC
18472: ST_TO_ADDR
18473: LD_VAR 0 4
18477: PUSH
18478: FOR_TO
18479: IFFALSE 18519
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18481: LD_INT 13
18483: PPUSH
18484: LD_VAR 0 4
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18499: LD_INT 14
18501: PPUSH
18502: LD_VAR 0 4
18506: PUSH
18507: LD_VAR 0 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 184
// end ;
18517: GO 18478
18519: POP
18520: POP
// end ;
18521: PPOPN 4
18523: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18524: LD_INT 0
18526: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18527: LD_ADDR_EXP 62
18531: PUSH
18532: LD_EXP 62
18536: PUSH
18537: LD_VAR 0 1
18541: PUSH
18542: LD_VAR 0 2
18546: PUSH
18547: LD_VAR 0 3
18551: PUSH
18552: LD_VAR 0 4
18556: PUSH
18557: LD_VAR 0 5
18561: PUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_VAR 0 7
18571: PUSH
18572: LD_VAR 0 8
18576: PUSH
18577: LD_VAR 0 9
18581: PUSH
18582: LD_VAR 0 10
18586: PUSH
18587: LD_VAR 0 11
18591: PUSH
18592: LD_VAR 0 12
18596: PUSH
18597: LD_VAR 0 13
18601: PUSH
18602: LD_VAR 0 14
18606: PUSH
18607: LD_VAR 0 15
18611: PUSH
18612: LD_VAR 0 16
18616: PUSH
18617: LD_VAR 0 17
18621: PUSH
18622: LD_VAR 0 18
18626: PUSH
18627: LD_VAR 0 19
18631: PUSH
18632: LD_VAR 0 20
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: ADD
18662: ST_TO_ADDR
// end ;
18663: LD_VAR 0 21
18667: RET
// export function ActiveAI ( index ) ; begin
18668: LD_INT 0
18670: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18671: LD_ADDR_EXP 62
18675: PUSH
18676: LD_EXP 62
18680: PPUSH
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: LD_INT 1
18695: PPUSH
18696: CALL 46105 0 3
18700: ST_TO_ADDR
// end ;
18701: LD_VAR 0 2
18705: RET
// export function DeactiveAI ( index ) ; begin
18706: LD_INT 0
18708: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18709: LD_ADDR_EXP 62
18713: PUSH
18714: LD_EXP 62
18718: PPUSH
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL 46105 0 3
18738: ST_TO_ADDR
// end ;
18739: LD_VAR 0 2
18743: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// for i := 1 to aiStructDatas do
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 62
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18766: LD_EXP 62
18770: PUSH
18771: LD_VAR 0 3
18775: ARRAY
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PUSH
18781: LD_VAR 0 1
18785: EQUAL
18786: IFFALSE 18808
// begin result = aiStructDatas [ i ] ;
18788: LD_ADDR_VAR 0 2
18792: PUSH
18793: LD_EXP 62
18797: PUSH
18798: LD_VAR 0 3
18802: ARRAY
18803: ST_TO_ADDR
// exit ;
18804: POP
18805: POP
18806: GO 18819
// end ;
18808: GO 18763
18810: POP
18811: POP
// result = [ ] ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: EMPTY
18818: ST_TO_ADDR
// end ;
18819: LD_VAR 0 2
18823: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18824: LD_INT 0
18826: PPUSH
18827: PPUSH
// for i := 1 to aiStructDatas do
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: DOUBLE
18834: LD_INT 1
18836: DEC
18837: ST_TO_ADDR
18838: LD_EXP 62
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18884
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18846: LD_EXP 62
18850: PUSH
18851: LD_VAR 0 3
18855: ARRAY
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PUSH
18861: LD_VAR 0 1
18865: EQUAL
18866: IFFALSE 18882
// begin result = i ;
18868: LD_ADDR_VAR 0 2
18872: PUSH
18873: LD_VAR 0 3
18877: ST_TO_ADDR
// exit ;
18878: POP
18879: POP
18880: GO 18893
// end ;
18882: GO 18843
18884: POP
18885: POP
// result = [ ] ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: EMPTY
18892: ST_TO_ADDR
// end ;
18893: LD_VAR 0 2
18897: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18903: LD_ADDR_VAR 0 4
18907: PUSH
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PPUSH
18917: CALL 18824 0 1
18921: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18922: LD_ADDR_VAR 0 5
18926: PUSH
18927: LD_VAR 0 1
18931: PUSH
18932: LD_INT 5
18934: ARRAY
18935: ST_TO_ADDR
// newArray = newArray ^ unit ;
18936: LD_ADDR_VAR 0 5
18940: PUSH
18941: LD_VAR 0 5
18945: PUSH
18946: LD_VAR 0 2
18950: ADD
18951: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18952: LD_ADDR_EXP 62
18956: PUSH
18957: LD_EXP 62
18961: PPUSH
18962: LD_VAR 0 4
18966: PUSH
18967: LD_INT 5
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: LD_VAR 0 5
18978: PPUSH
18979: CALL 46105 0 3
18983: ST_TO_ADDR
// end ;
18984: LD_VAR 0 3
18988: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
18993: PPUSH
// SetTag ( veh , state ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: PPUSH
19022: CALL 18824 0 1
19026: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19027: LD_ADDR_VAR 0 6
19031: PUSH
19032: LD_VAR 0 1
19036: PUSH
19037: LD_INT 5
19039: ARRAY
19040: ST_TO_ADDR
// newArray = newArray ^ veh ;
19041: LD_ADDR_VAR 0 6
19045: PUSH
19046: LD_VAR 0 6
19050: PUSH
19051: LD_VAR 0 2
19055: ADD
19056: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19057: LD_ADDR_EXP 62
19061: PUSH
19062: LD_EXP 62
19066: PPUSH
19067: LD_VAR 0 5
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: LD_VAR 0 6
19083: PPUSH
19084: CALL 46105 0 3
19088: ST_TO_ADDR
// end ;
19089: LD_VAR 0 4
19093: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19094: LD_INT 0
19096: PPUSH
19097: PPUSH
19098: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: LD_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: CALL 18824 0 1
19117: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19118: LD_ADDR_VAR 0 5
19122: PUSH
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 7
19130: ARRAY
19131: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_VAR 0 5
19141: PUSH
19142: LD_VAR 0 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: ADD
19150: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19151: LD_ADDR_EXP 62
19155: PUSH
19156: LD_EXP 62
19160: PPUSH
19161: LD_VAR 0 4
19165: PUSH
19166: LD_INT 7
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PPUSH
19173: LD_VAR 0 5
19177: PPUSH
19178: CALL 46105 0 3
19182: ST_TO_ADDR
// end ;
19183: LD_VAR 0 3
19187: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
19192: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19193: LD_ADDR_VAR 0 3
19197: PUSH
19198: LD_VAR 0 1
19202: PUSH
19203: LD_INT 1
19205: ARRAY
19206: PPUSH
19207: CALL 18824 0 1
19211: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19212: LD_ADDR_VAR 0 4
19216: PUSH
19217: LD_VAR 0 1
19221: PUSH
19222: LD_INT 7
19224: ARRAY
19225: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19226: LD_ADDR_VAR 0 4
19230: PUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 3
19243: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19244: LD_ADDR_EXP 62
19248: PUSH
19249: LD_EXP 62
19253: PPUSH
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 7
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PPUSH
19266: LD_VAR 0 4
19270: PPUSH
19271: CALL 46105 0 3
19275: ST_TO_ADDR
// end ;
19276: LD_VAR 0 2
19280: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
19285: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: CALL 18824 0 1
19304: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19305: LD_ADDR_VAR 0 5
19309: PUSH
19310: LD_VAR 0 1
19314: PUSH
19315: LD_INT 5
19317: ARRAY
19318: ST_TO_ADDR
// newArray = newArray diff unit ;
19319: LD_ADDR_VAR 0 5
19323: PUSH
19324: LD_VAR 0 5
19328: PUSH
19329: LD_VAR 0 2
19333: DIFF
19334: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19335: LD_ADDR_EXP 62
19339: PUSH
19340: LD_EXP 62
19344: PPUSH
19345: LD_VAR 0 4
19349: PUSH
19350: LD_INT 5
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: LD_VAR 0 5
19361: PPUSH
19362: CALL 46105 0 3
19366: ST_TO_ADDR
// end ;
19367: LD_VAR 0 3
19371: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// for i := 1 to aiStructDatas do
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: DOUBLE
19382: LD_INT 1
19384: DEC
19385: ST_TO_ADDR
19386: LD_EXP 62
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19438
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19394: LD_EXP 62
19398: PUSH
19399: LD_VAR 0 3
19403: ARRAY
19404: PUSH
19405: LD_INT 3
19407: ARRAY
19408: PUSH
19409: LD_VAR 0 1
19413: EQUAL
19414: IFFALSE 19436
// begin result = aiStructDatas [ i ] ;
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_EXP 62
19425: PUSH
19426: LD_VAR 0 3
19430: ARRAY
19431: ST_TO_ADDR
// exit ;
19432: POP
19433: POP
19434: GO 19447
// end ;
19436: GO 19391
19438: POP
19439: POP
// result = [ ] ;
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: EMPTY
19446: ST_TO_ADDR
// end ;
19447: LD_VAR 0 2
19451: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// if not aiData then
19457: LD_VAR 0 1
19461: NOT
19462: IFFALSE 19473
// begin result = [ ] ;
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: EMPTY
19470: ST_TO_ADDR
// exit ;
19471: GO 19557
// end ; defVehs = [ ] ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: EMPTY
19479: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19480: LD_ADDR_VAR 0 4
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: LD_INT 5
19492: ARRAY
19493: PPUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 72
19508: PUSH
19509: FOR_IN
19510: IFFALSE 19545
// if GetTag ( veh ) = 2 then
19512: LD_VAR 0 4
19516: PPUSH
19517: CALL_OW 110
19521: PUSH
19522: LD_INT 2
19524: EQUAL
19525: IFFALSE 19543
// defVehs = defVehs ^ veh ;
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: LD_VAR 0 3
19536: PUSH
19537: LD_VAR 0 4
19541: ADD
19542: ST_TO_ADDR
19543: GO 19509
19545: POP
19546: POP
// result = defVehs ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 3
19556: ST_TO_ADDR
// end ;
19557: LD_VAR 0 2
19561: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
// if not aiData then
19567: LD_VAR 0 1
19571: NOT
19572: IFFALSE 19583
// begin result = [ ] ;
19574: LD_ADDR_VAR 0 2
19578: PUSH
19579: EMPTY
19580: ST_TO_ADDR
// exit ;
19581: GO 19667
// end ; attackVehs = [ ] ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: EMPTY
19589: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19590: LD_ADDR_VAR 0 4
19594: PUSH
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 5
19602: ARRAY
19603: PPUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 72
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19655
// if GetTag ( veh ) = 4 then
19622: LD_VAR 0 4
19626: PPUSH
19627: CALL_OW 110
19631: PUSH
19632: LD_INT 4
19634: EQUAL
19635: IFFALSE 19653
// attackVehs = attackVehs ^ veh ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 3
19646: PUSH
19647: LD_VAR 0 4
19651: ADD
19652: ST_TO_ADDR
19653: GO 19619
19655: POP
19656: POP
// result = attackVehs ;
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: LD_VAR 0 3
19666: ST_TO_ADDR
// end ;
19667: LD_VAR 0 2
19671: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19672: LD_INT 0
19674: PPUSH
19675: PPUSH
19676: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19677: LD_ADDR_VAR 0 3
19681: PUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 18744 0 1
19691: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: PUSH
19701: LD_INT 0
19703: EQUAL
19704: IFFALSE 19708
// exit ;
19706: GO 20153
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19708: LD_ADDR_VAR 0 4
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 5
19720: ARRAY
19721: PPUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 72
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19843
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19740: LD_VAR 0 4
19744: PPUSH
19745: CALL_OW 256
19749: PUSH
19750: LD_INT 1000
19752: EQUAL
19753: PUSH
19754: LD_VAR 0 4
19758: PPUSH
19759: CALL_OW 110
19763: PUSH
19764: LD_INT 0
19766: EQUAL
19767: AND
19768: IFFALSE 19784
// SetTag ( unit , 1 ) else
19770: LD_VAR 0 4
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 109
19782: GO 19841
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19784: LD_VAR 0 4
19788: PPUSH
19789: CALL_OW 256
19793: PUSH
19794: LD_INT 950
19796: LESSEQUAL
19797: PUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: CALL_OW 256
19807: PUSH
19808: LD_INT 250
19810: GREATER
19811: AND
19812: PUSH
19813: LD_VAR 0 4
19817: PPUSH
19818: CALL_OW 110
19822: PUSH
19823: LD_INT 1
19825: EQUAL
19826: AND
19827: IFFALSE 19841
// SetTag ( unit , 0 ) ;
19829: LD_VAR 0 4
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 109
// end ;
19841: GO 19737
19843: POP
19844: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19845: LD_ADDR_VAR 0 4
19849: PUSH
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 5
19857: ARRAY
19858: PPUSH
19859: LD_INT 21
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 72
19873: PUSH
19874: FOR_IN
19875: IFFALSE 20151
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 256
19886: PUSH
19887: LD_INT 1000
19889: EQUAL
19890: PUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 110
19900: PUSH
19901: LD_INT 3
19903: EQUAL
19904: AND
19905: IFFALSE 19919
// SetTag ( unit , 2 ) ;
19907: LD_VAR 0 4
19911: PPUSH
19912: LD_INT 2
19914: PPUSH
19915: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19919: LD_VAR 0 4
19923: PPUSH
19924: CALL_OW 256
19928: PUSH
19929: LD_INT 1000
19931: EQUAL
19932: PUSH
19933: LD_VAR 0 4
19937: PPUSH
19938: CALL_OW 110
19942: PUSH
19943: LD_INT 5
19945: EQUAL
19946: AND
19947: IFFALSE 19961
// SetTag ( unit , 4 ) ;
19949: LD_VAR 0 4
19953: PPUSH
19954: LD_INT 4
19956: PPUSH
19957: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19961: LD_VAR 0 4
19965: PPUSH
19966: CALL_OW 256
19970: PUSH
19971: LD_INT 650
19973: LESSEQUAL
19974: PUSH
19975: LD_VAR 0 4
19979: PPUSH
19980: CALL_OW 110
19984: PUSH
19985: LD_INT 4
19987: EQUAL
19988: AND
19989: PUSH
19990: LD_VAR 0 4
19994: PPUSH
19995: CALL_OW 263
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: AND
20004: IFFALSE 20018
// SetTag ( unit , 5 ) ;
20006: LD_VAR 0 4
20010: PPUSH
20011: LD_INT 5
20013: PPUSH
20014: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20018: LD_VAR 0 4
20022: PPUSH
20023: CALL_OW 256
20027: PUSH
20028: LD_INT 650
20030: LESSEQUAL
20031: PUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: CALL_OW 110
20041: PUSH
20042: LD_INT 2
20044: EQUAL
20045: AND
20046: PUSH
20047: LD_VAR 0 4
20051: PPUSH
20052: CALL_OW 263
20056: PUSH
20057: LD_INT 1
20059: EQUAL
20060: AND
20061: IFFALSE 20075
// SetTag ( unit , 3 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_INT 3
20070: PPUSH
20071: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20075: LD_VAR 0 4
20079: PPUSH
20080: CALL_OW 263
20084: PUSH
20085: LD_INT 1
20087: EQUAL
20088: IFFALSE 20122
// if ( UnitsInside ( unit ) ) then
20090: LD_VAR 0 4
20094: PPUSH
20095: CALL_OW 313
20099: IFFALSE 20122
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20101: LD_VAR 0 4
20105: PPUSH
20106: CALL_OW 313
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PPUSH
20115: LD_INT 7
20117: PPUSH
20118: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20122: LD_VAR 0 4
20126: PPUSH
20127: CALL_OW 261
20131: PUSH
20132: LD_INT 50
20134: LESS
20135: IFFALSE 20149
// SetFuel ( unit , 100 ) ;
20137: LD_VAR 0 4
20141: PPUSH
20142: LD_INT 100
20144: PPUSH
20145: CALL_OW 240
// end ;
20149: GO 19874
20151: POP
20152: POP
// end ;
20153: LD_VAR 0 2
20157: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL 18744 0 1
20184: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: PUSH
20194: LD_INT 0
20196: EQUAL
20197: IFFALSE 20201
// exit ;
20199: GO 20780
// soldiersInsideBarracks = [ ] ;
20201: LD_ADDR_VAR 0 10
20205: PUSH
20206: EMPTY
20207: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20208: LD_ADDR_VAR 0 4
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 5
20220: ARRAY
20221: PPUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 50
20234: PUSH
20235: EMPTY
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 72
20246: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20247: LD_ADDR_VAR 0 6
20251: PUSH
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 6
20259: ARRAY
20260: PPUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 50
20273: PUSH
20274: EMPTY
20275: LIST
20276: PUSH
20277: LD_INT 3
20279: PUSH
20280: LD_INT 59
20282: PUSH
20283: EMPTY
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 30
20295: PUSH
20296: LD_INT 31
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 32
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 72
20328: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 3
20338: PUSH
20339: LD_INT 6
20341: ARRAY
20342: PPUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 3
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 50
20355: PUSH
20356: EMPTY
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 30
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 72
20396: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20397: LD_ADDR_VAR 0 9
20401: PUSH
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 6
20409: ARRAY
20410: PPUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 3
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 50
20423: PUSH
20424: EMPTY
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 30
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 72
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: ST_TO_ADDR
// for barrack in barracks do
20469: LD_ADDR_VAR 0 11
20473: PUSH
20474: LD_VAR 0 7
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20505
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: LD_VAR 0 10
20491: PUSH
20492: LD_VAR 0 11
20496: PPUSH
20497: CALL_OW 313
20501: ADD
20502: ST_TO_ADDR
20503: GO 20479
20505: POP
20506: POP
// index = 1 ;
20507: LD_ADDR_VAR 0 8
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_INT 56
20522: PUSH
20523: EMPTY
20524: LIST
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 60
20531: PUSH
20532: EMPTY
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 72
20547: PUSH
20548: LD_VAR 0 6
20552: AND
20553: PUSH
20554: LD_VAR 0 9
20558: AND
20559: IFFALSE 20659
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20561: LD_ADDR_VAR 0 5
20565: PUSH
20566: LD_VAR 0 4
20570: PPUSH
20571: LD_INT 56
20573: PUSH
20574: EMPTY
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: PPUSH
20580: CALL_OW 72
20584: PUSH
20585: LD_VAR 0 10
20589: ADD
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20657
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20594: LD_VAR 0 5
20598: PPUSH
20599: CALL_OW 110
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: PUSH
20608: LD_VAR 0 8
20612: PUSH
20613: LD_VAR 0 6
20617: LESSEQUAL
20618: AND
20619: IFFALSE 20655
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20621: LD_VAR 0 5
20625: PPUSH
20626: LD_VAR 0 6
20630: PUSH
20631: LD_VAR 0 8
20635: ARRAY
20636: PPUSH
20637: CALL_OW 120
// index = index + 1 ;
20641: LD_ADDR_VAR 0 8
20645: PUSH
20646: LD_VAR 0 8
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: ST_TO_ADDR
// end ;
20655: GO 20591
20657: POP
20658: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_INT 56
20666: PUSH
20667: EMPTY
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 60
20675: PUSH
20676: EMPTY
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PPUSH
20687: CALL_OW 72
20691: PUSH
20692: LD_VAR 0 6
20696: NOT
20697: AND
20698: PUSH
20699: LD_VAR 0 7
20703: AND
20704: IFFALSE 20780
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20706: LD_ADDR_VAR 0 5
20710: PUSH
20711: LD_VAR 0 4
20715: PPUSH
20716: LD_INT 56
20718: PUSH
20719: EMPTY
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: PPUSH
20725: CALL_OW 72
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20778
// if ( GetTag ( sold ) = 1 ) then
20733: LD_VAR 0 5
20737: PPUSH
20738: CALL_OW 110
20742: PUSH
20743: LD_INT 1
20745: EQUAL
20746: IFFALSE 20776
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20748: LD_VAR 0 5
20752: PPUSH
20753: LD_VAR 0 7
20757: PUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 12
20770: ARRAY
20771: PPUSH
20772: CALL_OW 120
20776: GO 20730
20778: POP
20779: POP
// end ;
20780: LD_VAR 0 2
20784: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20785: LD_INT 0
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL 18744 0 1
20806: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 2
20814: ARRAY
20815: PUSH
20816: LD_INT 0
20818: EQUAL
20819: IFFALSE 20823
// exit ;
20821: GO 21044
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 5
20835: ARRAY
20836: PPUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 50
20849: PUSH
20850: EMPTY
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PPUSH
20857: CALL_OW 72
20861: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20862: LD_ADDR_VAR 0 6
20866: PUSH
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 6
20874: ARRAY
20875: PPUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 50
20888: PUSH
20889: EMPTY
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 30
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 72
20929: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20930: LD_VAR 0 4
20934: PPUSH
20935: LD_INT 56
20937: PUSH
20938: EMPTY
20939: LIST
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 60
20946: PUSH
20947: EMPTY
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 72
20962: PUSH
20963: LD_VAR 0 6
20967: AND
20968: IFFALSE 21044
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 4
20979: PPUSH
20980: LD_INT 56
20982: PUSH
20983: EMPTY
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: PPUSH
20989: CALL_OW 72
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21042
// if ( GetTag ( mech ) = 1 ) then
20997: LD_VAR 0 5
21001: PPUSH
21002: CALL_OW 110
21006: PUSH
21007: LD_INT 1
21009: EQUAL
21010: IFFALSE 21040
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21012: LD_VAR 0 5
21016: PPUSH
21017: LD_VAR 0 6
21021: PUSH
21022: LD_INT 1
21024: PPUSH
21025: LD_VAR 0 6
21029: PPUSH
21030: CALL_OW 12
21034: ARRAY
21035: PPUSH
21036: CALL_OW 120
21040: GO 20994
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 2
21048: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21060: LD_ADDR_VAR 0 3
21064: PUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL 18744 0 1
21074: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 2
21082: ARRAY
21083: PUSH
21084: LD_INT 0
21086: EQUAL
21087: IFFALSE 21091
// exit ;
21089: GO 21554
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21091: LD_ADDR_VAR 0 5
21095: PUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 5
21103: ARRAY
21104: PPUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 50
21117: PUSH
21118: EMPTY
21119: LIST
21120: PUSH
21121: LD_INT 59
21123: PUSH
21124: EMPTY
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: LD_INT 30
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 30
21142: PUSH
21143: LD_INT 3
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 72
21165: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21166: LD_ADDR_VAR 0 8
21170: PUSH
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 5
21178: ARRAY
21179: PPUSH
21180: LD_INT 21
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 92
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 10
21210: ARRAY
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 517
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PUSH
21228: LD_VAR 0 3
21232: PUSH
21233: LD_INT 10
21235: ARRAY
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 517
21244: PUSH
21245: LD_INT 2
21247: ARRAY
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PUSH
21253: LD_INT 16
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 24
21267: PUSH
21268: LD_INT 1000
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 72
21289: ST_TO_ADDR
// if not damageVehicles then
21290: LD_VAR 0 8
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21554
// if fabs then
21299: LD_VAR 0 5
21303: IFFALSE 21428
// begin for damageVeh in damageVehicles do
21305: LD_ADDR_VAR 0 9
21309: PUSH
21310: LD_VAR 0 8
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21426
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21318: LD_VAR 0 9
21322: PPUSH
21323: CALL_OW 110
21327: PUSH
21328: LD_INT 3
21330: EQUAL
21331: PUSH
21332: LD_VAR 0 9
21336: PPUSH
21337: CALL_OW 110
21341: PUSH
21342: LD_INT 5
21344: EQUAL
21345: OR
21346: IFFALSE 21424
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21348: LD_ADDR_VAR 0 7
21352: PUSH
21353: LD_VAR 0 5
21357: PPUSH
21358: LD_VAR 0 9
21362: PPUSH
21363: CALL_OW 74
21367: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21368: LD_ADDR_VAR 0 4
21372: PUSH
21373: LD_VAR 0 7
21377: PPUSH
21378: CALL_OW 313
21382: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21383: LD_VAR 0 4
21387: PPUSH
21388: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21392: LD_VAR 0 4
21396: PPUSH
21397: LD_INT 3
21399: PUSH
21400: LD_INT 60
21402: PUSH
21403: EMPTY
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 72
21414: PPUSH
21415: LD_VAR 0 9
21419: PPUSH
21420: CALL_OW 189
// end ;
21424: GO 21315
21426: POP
21427: POP
// end ; for damageVeh in damageVehicles do
21428: LD_ADDR_VAR 0 9
21432: PUSH
21433: LD_VAR 0 8
21437: PUSH
21438: FOR_IN
21439: IFFALSE 21552
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21441: LD_VAR 0 9
21445: PPUSH
21446: CALL_OW 110
21450: PUSH
21451: LD_INT 3
21453: EQUAL
21454: PUSH
21455: LD_VAR 0 9
21459: PPUSH
21460: CALL_OW 110
21464: PUSH
21465: LD_INT 5
21467: EQUAL
21468: OR
21469: IFFALSE 21550
// begin mehInside = UnitsInside ( damageVeh ) ;
21471: LD_ADDR_VAR 0 10
21475: PUSH
21476: LD_VAR 0 9
21480: PPUSH
21481: CALL_OW 313
21485: ST_TO_ADDR
// if mehInside then
21486: LD_VAR 0 10
21490: IFFALSE 21550
// begin mehInside = mehInside [ 1 ] ;
21492: LD_ADDR_VAR 0 10
21496: PUSH
21497: LD_VAR 0 10
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21506: LD_VAR 0 10
21510: PPUSH
21511: CALL_OW 181
// wait ( 0 0$01 ) ;
21515: LD_INT 35
21517: PPUSH
21518: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21522: LD_VAR 0 10
21526: PPUSH
21527: LD_VAR 0 9
21531: PPUSH
21532: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21536: LD_VAR 0 10
21540: PPUSH
21541: LD_VAR 0 9
21545: PPUSH
21546: CALL_OW 180
// end ; end ;
21550: GO 21438
21552: POP
21553: POP
// end ;
21554: LD_VAR 0 2
21558: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 18744 0 1
21581: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21582: LD_VAR 0 3
21586: PUSH
21587: LD_INT 2
21589: ARRAY
21590: PUSH
21591: LD_INT 0
21593: EQUAL
21594: IFFALSE 21598
// exit ;
21596: GO 22052
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21598: LD_ADDR_VAR 0 7
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 6
21610: ARRAY
21611: PPUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 50
21624: PUSH
21625: EMPTY
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 30
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 30
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 72
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21670: LD_VAR 0 3
21674: PPUSH
21675: CALL 19452 0 1
21679: NOT
21680: IFFALSE 21684
// exit ;
21682: GO 22052
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21684: LD_VAR 0 7
21688: PUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL 19452 0 1
21698: AND
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 11
21707: ARRAY
21708: PPUSH
21709: LD_INT 81
21711: PUSH
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 3
21719: ARRAY
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 70
21729: NOT
21730: AND
21731: IFFALSE 21881
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21733: LD_ADDR_VAR 0 5
21737: PUSH
21738: LD_VAR 0 3
21742: PPUSH
21743: CALL 19452 0 1
21747: PPUSH
21748: LD_INT 50
21750: PUSH
21751: EMPTY
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 60
21759: PUSH
21760: EMPTY
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 92
21772: PUSH
21773: LD_VAR 0 7
21777: PPUSH
21778: CALL_OW 250
21782: PUSH
21783: LD_VAR 0 7
21787: PPUSH
21788: CALL_OW 251
21792: PUSH
21793: LD_INT 12
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: PPUSH
21811: CALL_OW 72
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21879
// if GetLives ( veh ) = 1000 then
21819: LD_VAR 0 5
21823: PPUSH
21824: CALL_OW 256
21828: PUSH
21829: LD_INT 1000
21831: EQUAL
21832: IFFALSE 21865
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21834: LD_VAR 0 5
21838: PPUSH
21839: LD_VAR 0 7
21843: PPUSH
21844: CALL_OW 250
21848: PPUSH
21849: LD_VAR 0 7
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: CALL_OW 111
21863: GO 21877
// SetTag ( veh , 3 ) ;
21865: LD_VAR 0 5
21869: PPUSH
21870: LD_INT 3
21872: PPUSH
21873: CALL_OW 109
21877: GO 21816
21879: POP
21880: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 11
21888: ARRAY
21889: PPUSH
21890: LD_INT 81
21892: PUSH
21893: LD_VAR 0 3
21897: PUSH
21898: LD_INT 3
21900: ARRAY
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 70
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 22052
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21915: LD_ADDR_VAR 0 5
21919: PUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL 19452 0 1
21929: PPUSH
21930: LD_INT 50
21932: PUSH
21933: EMPTY
21934: LIST
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 60
21941: PUSH
21942: EMPTY
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 72
21957: PUSH
21958: FOR_IN
21959: IFFALSE 22050
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21961: LD_VAR 0 5
21965: PPUSH
21966: LD_VAR 0 3
21970: PUSH
21971: LD_INT 11
21973: ARRAY
21974: PPUSH
21975: LD_INT 81
21977: PUSH
21978: LD_VAR 0 3
21982: PUSH
21983: LD_INT 3
21985: ARRAY
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 70
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: CALL_OW 250
22004: PPUSH
22005: LD_VAR 0 3
22009: PUSH
22010: LD_INT 11
22012: ARRAY
22013: PPUSH
22014: LD_INT 81
22016: PUSH
22017: LD_VAR 0 3
22021: PUSH
22022: LD_INT 3
22024: ARRAY
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 70
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: PPUSH
22039: CALL_OW 251
22043: PPUSH
22044: CALL_OW 114
22048: GO 21958
22050: POP
22051: POP
// end ;
22052: LD_VAR 0 2
22056: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22057: LD_INT 0
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL 18744 0 1
22079: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22080: LD_VAR 0 3
22084: PUSH
22085: LD_INT 2
22087: ARRAY
22088: PUSH
22089: LD_INT 0
22091: EQUAL
22092: IFFALSE 22096
// exit ;
22094: GO 22486
// if ( aiData [ 18 ] = 0 ) then
22096: LD_VAR 0 3
22100: PUSH
22101: LD_INT 18
22103: ARRAY
22104: PUSH
22105: LD_INT 0
22107: EQUAL
22108: IFFALSE 22112
// exit ;
22110: GO 22486
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL 19562 0 1
22121: PUSH
22122: LD_VAR 0 3
22126: PUSH
22127: LD_INT 14
22129: ARRAY
22130: GREATEREQUAL
22131: IFFALSE 22486
// begin repeat wait ( 0 0$01 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22140: LD_ADDR_VAR 0 6
22144: PUSH
22145: LD_VAR 0 3
22149: PPUSH
22150: CALL 19562 0 1
22154: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22155: LD_ADDR_VAR 0 7
22159: PUSH
22160: LD_VAR 0 6
22164: PUSH
22165: FOR_IN
22166: IFFALSE 22466
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_INT 81
22175: PUSH
22176: LD_VAR 0 3
22180: PUSH
22181: LD_INT 3
22183: ARRAY
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: PPUSH
22194: LD_VAR 0 7
22198: PPUSH
22199: CALL_OW 74
22203: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22204: LD_ADDR_VAR 0 5
22208: PUSH
22209: LD_INT 81
22211: PUSH
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 3
22219: ARRAY
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 59
22230: PUSH
22231: EMPTY
22232: LIST
22233: PUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PPUSH
22272: LD_VAR 0 7
22276: PPUSH
22277: CALL_OW 74
22281: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22282: LD_VAR 0 7
22286: PPUSH
22287: LD_VAR 0 4
22291: PPUSH
22292: CALL_OW 296
22296: PUSH
22297: LD_INT 12
22299: PLUS
22300: PUSH
22301: LD_VAR 0 7
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL_OW 296
22315: LESS
22316: IFFALSE 22392
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22318: LD_VAR 0 7
22322: PPUSH
22323: LD_INT 50
22325: PUSH
22326: EMPTY
22327: LIST
22328: PPUSH
22329: CALL_OW 72
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: CALL_OW 250
22343: PPUSH
22344: LD_VAR 0 4
22348: PPUSH
22349: CALL_OW 251
22353: PPUSH
22354: CALL_OW 114
// wait ( 0 0$01 ) ;
22358: LD_INT 35
22360: PPUSH
22361: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22365: LD_VAR 0 7
22369: PPUSH
22370: LD_INT 50
22372: PUSH
22373: EMPTY
22374: LIST
22375: PPUSH
22376: CALL_OW 72
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: CALL_OW 115
// end else
22390: GO 22464
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22392: LD_VAR 0 7
22396: PPUSH
22397: LD_INT 50
22399: PUSH
22400: EMPTY
22401: LIST
22402: PPUSH
22403: CALL_OW 72
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL_OW 250
22417: PPUSH
22418: LD_VAR 0 5
22422: PPUSH
22423: CALL_OW 251
22427: PPUSH
22428: CALL_OW 114
// wait ( 0 0$01 ) ;
22432: LD_INT 35
22434: PPUSH
22435: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_INT 50
22446: PUSH
22447: EMPTY
22448: LIST
22449: PPUSH
22450: CALL_OW 72
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 115
// end ; end ;
22464: GO 22165
22466: POP
22467: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22468: LD_VAR 0 6
22472: PPUSH
22473: LD_INT 50
22475: PUSH
22476: EMPTY
22477: LIST
22478: PPUSH
22479: CALL_OW 72
22483: NOT
22484: IFFALSE 22133
// end ; end ;
22486: LD_VAR 0 2
22490: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22491: LD_INT 0
22493: PPUSH
22494: PPUSH
22495: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL 18744 0 1
22510: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22511: LD_VAR 0 3
22515: PUSH
22516: LD_INT 2
22518: ARRAY
22519: PUSH
22520: LD_INT 0
22522: EQUAL
22523: IFFALSE 22527
// exit ;
22525: GO 22676
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22527: LD_ADDR_VAR 0 4
22531: PUSH
22532: LD_VAR 0 3
22536: PUSH
22537: LD_INT 5
22539: ARRAY
22540: PPUSH
22541: LD_INT 21
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 50
22553: PUSH
22554: EMPTY
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 34
22562: PUSH
22563: LD_INT 12
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 34
22572: PUSH
22573: LD_INT 32
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 51
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 72
22605: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 8
22613: ARRAY
22614: PPUSH
22615: CALL_OW 435
22619: NOT
22620: PUSH
22621: LD_VAR 0 4
22625: NOT
22626: OR
22627: IFFALSE 22631
// exit ;
22629: GO 22676
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22631: LD_VAR 0 4
22635: PPUSH
22636: LD_VAR 0 3
22640: PUSH
22641: LD_INT 8
22643: ARRAY
22644: PPUSH
22645: CALL_OW 435
22649: PUSH
22650: LD_INT 1
22652: ARRAY
22653: PPUSH
22654: LD_VAR 0 3
22658: PUSH
22659: LD_INT 8
22661: ARRAY
22662: PPUSH
22663: CALL_OW 435
22667: PUSH
22668: LD_INT 2
22670: ARRAY
22671: PPUSH
22672: CALL_OW 117
// end ;
22676: LD_VAR 0 2
22680: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
22685: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22686: LD_ADDR_VAR 0 3
22690: PUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL 18744 0 1
22700: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22701: LD_VAR 0 3
22705: PUSH
22706: LD_INT 2
22708: ARRAY
22709: PUSH
22710: LD_INT 0
22712: EQUAL
22713: IFFALSE 22717
// exit ;
22715: GO 22807
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 3
22726: PUSH
22727: LD_INT 5
22729: ARRAY
22730: PPUSH
22731: LD_INT 21
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 72
22745: PUSH
22746: FOR_IN
22747: IFFALSE 22805
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22749: LD_VAR 0 4
22753: PPUSH
22754: CALL_OW 110
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: PUSH
22763: LD_VAR 0 4
22767: PPUSH
22768: LD_VAR 0 3
22772: PUSH
22773: LD_INT 9
22775: ARRAY
22776: PPUSH
22777: CALL_OW 308
22781: NOT
22782: AND
22783: IFFALSE 22803
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22785: LD_VAR 0 4
22789: PPUSH
22790: LD_VAR 0 3
22794: PUSH
22795: LD_INT 9
22797: ARRAY
22798: PPUSH
22799: CALL_OW 113
22803: GO 22746
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL 18744 0 1
22831: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22832: LD_VAR 0 3
22836: PUSH
22837: LD_INT 2
22839: ARRAY
22840: PUSH
22841: LD_INT 0
22843: EQUAL
22844: IFFALSE 22848
// exit ;
22846: GO 22963
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22848: LD_ADDR_VAR 0 4
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: LD_INT 5
22860: ARRAY
22861: PPUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 50
22874: PUSH
22875: EMPTY
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 72
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22961
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22890: LD_VAR 0 4
22894: PPUSH
22895: CALL_OW 110
22899: PUSH
22900: LD_INT 3
22902: EQUAL
22903: PUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: CALL_OW 110
22913: PUSH
22914: LD_INT 5
22916: EQUAL
22917: OR
22918: PUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_VAR 0 3
22928: PUSH
22929: LD_INT 10
22931: ARRAY
22932: PPUSH
22933: CALL_OW 308
22937: NOT
22938: AND
22939: IFFALSE 22959
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 10
22953: ARRAY
22954: PPUSH
22955: CALL_OW 113
22959: GO 22887
22961: POP
22962: POP
// end ;
22963: LD_VAR 0 2
22967: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL 18744 0 1
22991: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 2
22999: ARRAY
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23008
// exit ;
23006: GO 23708
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 5
23020: ARRAY
23021: PPUSH
23022: LD_INT 25
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 50
23034: PUSH
23035: EMPTY
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 72
23046: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23047: LD_ADDR_VAR 0 5
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_INT 5
23059: ARRAY
23060: PPUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 50
23073: PUSH
23074: EMPTY
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 13
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 34
23092: PUSH
23093: LD_EXP 124
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 34
23104: PUSH
23105: LD_INT 52
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 72
23127: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23128: LD_ADDR_VAR 0 8
23132: PUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_INT 6
23140: ARRAY
23141: PPUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 1000
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 72
23177: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23178: LD_VAR 0 4
23182: PPUSH
23183: LD_INT 56
23185: PUSH
23186: EMPTY
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 60
23194: PUSH
23195: EMPTY
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 72
23210: PUSH
23211: LD_VAR 0 8
23215: NOT
23216: AND
23217: PUSH
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 6
23225: ARRAY
23226: PPUSH
23227: LD_INT 21
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 50
23239: PUSH
23240: EMPTY
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 30
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 72
23280: AND
23281: IFFALSE 23419
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23283: LD_ADDR_VAR 0 7
23287: PUSH
23288: LD_VAR 0 4
23292: PPUSH
23293: LD_INT 56
23295: PUSH
23296: EMPTY
23297: LIST
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: LD_INT 60
23304: PUSH
23305: EMPTY
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 72
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23417
// if ( GetTag ( eng ) = 1 ) then
23324: LD_VAR 0 7
23328: PPUSH
23329: CALL_OW 110
23333: PUSH
23334: LD_INT 1
23336: EQUAL
23337: IFFALSE 23415
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23339: LD_VAR 0 7
23343: PPUSH
23344: LD_VAR 0 3
23348: PUSH
23349: LD_INT 6
23351: ARRAY
23352: PPUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 50
23365: PUSH
23366: EMPTY
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 30
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 30
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: PPUSH
23402: CALL_OW 72
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: CALL_OW 120
23415: GO 23321
23417: POP
23418: POP
// if engineers and damagedBuildings then
23419: LD_VAR 0 4
23423: PUSH
23424: LD_VAR 0 8
23428: AND
23429: IFFALSE 23576
// begin for eng in engineers do
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_VAR 0 4
23440: PUSH
23441: FOR_IN
23442: IFFALSE 23515
// if ( GetTag ( eng ) = 1 ) then
23444: LD_VAR 0 7
23448: PPUSH
23449: CALL_OW 110
23453: PUSH
23454: LD_INT 1
23456: EQUAL
23457: IFFALSE 23513
// begin ForceResetTaskList ( eng ) ;
23459: LD_VAR 0 7
23463: PPUSH
23464: CALL 27062 0 1
// ExitUnitFromBuilding ( eng ) ;
23468: LD_VAR 0 7
23472: PPUSH
23473: CALL 27115 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23477: LD_VAR 0 7
23481: PPUSH
23482: LD_INT 3
23484: PUSH
23485: LD_INT 60
23487: PUSH
23488: EMPTY
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 72
23499: PPUSH
23500: LD_VAR 0 8
23504: PUSH
23505: LD_INT 1
23507: ARRAY
23508: PPUSH
23509: CALL_OW 190
// end ;
23513: GO 23441
23515: POP
23516: POP
// if cranes then
23517: LD_VAR 0 5
23521: IFFALSE 23576
// for crane in cranes do
23523: LD_ADDR_VAR 0 6
23527: PUSH
23528: LD_VAR 0 5
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23574
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23536: LD_VAR 0 6
23540: PPUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 60
23546: PUSH
23547: EMPTY
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 72
23558: PPUSH
23559: LD_VAR 0 8
23563: PUSH
23564: LD_INT 1
23566: ARRAY
23567: PPUSH
23568: CALL_OW 190
23572: GO 23533
23574: POP
23575: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23576: LD_VAR 0 4
23580: PUSH
23581: LD_VAR 0 8
23585: NOT
23586: AND
23587: PUSH
23588: LD_VAR 0 3
23592: PUSH
23593: LD_INT 7
23595: ARRAY
23596: AND
23597: IFFALSE 23708
// begin for eng in engineers do
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_VAR 0 4
23608: PUSH
23609: FOR_IN
23610: IFFALSE 23706
// if ( GetTag ( eng ) = 1 ) then
23612: LD_VAR 0 7
23616: PPUSH
23617: CALL_OW 110
23621: PUSH
23622: LD_INT 1
23624: EQUAL
23625: IFFALSE 23704
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23627: LD_VAR 0 7
23631: PPUSH
23632: LD_VAR 0 3
23636: PUSH
23637: LD_INT 7
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: PUSH
23645: LD_INT 1
23647: ARRAY
23648: PPUSH
23649: LD_VAR 0 3
23653: PUSH
23654: LD_INT 7
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: PUSH
23662: LD_INT 2
23664: ARRAY
23665: PPUSH
23666: LD_VAR 0 3
23670: PUSH
23671: LD_INT 7
23673: ARRAY
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PUSH
23679: LD_INT 3
23681: ARRAY
23682: PPUSH
23683: LD_VAR 0 3
23687: PUSH
23688: LD_INT 7
23690: ARRAY
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: PUSH
23696: LD_INT 4
23698: ARRAY
23699: PPUSH
23700: CALL_OW 145
23704: GO 23609
23706: POP
23707: POP
// end ;
23708: LD_VAR 0 2
23712: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: LD_VAR 0 1
23730: PPUSH
23731: CALL 18744 0 1
23735: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23736: LD_VAR 0 3
23740: PUSH
23741: LD_INT 2
23743: ARRAY
23744: PUSH
23745: LD_INT 0
23747: EQUAL
23748: IFFALSE 23752
// exit ;
23750: GO 24206
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 3
23761: PUSH
23762: LD_INT 5
23764: ARRAY
23765: PPUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 4
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 50
23778: PUSH
23779: EMPTY
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PPUSH
23786: CALL_OW 72
23790: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 3
23800: PUSH
23801: LD_INT 5
23803: ARRAY
23804: PPUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 92
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_INT 9
23825: ARRAY
23826: PPUSH
23827: LD_INT 0
23829: PPUSH
23830: CALL_OW 517
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PUSH
23843: LD_VAR 0 3
23847: PUSH
23848: LD_INT 9
23850: ARRAY
23851: PPUSH
23852: LD_INT 0
23854: PPUSH
23855: CALL_OW 517
23859: PUSH
23860: LD_INT 2
23862: ARRAY
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 24
23882: PUSH
23883: LD_INT 1000
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 72
23903: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23904: LD_ADDR_VAR 0 7
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_INT 5
23916: ARRAY
23917: PPUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 50
23930: PUSH
23931: EMPTY
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 6
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 30
23949: PUSH
23950: LD_INT 7
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 8
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 72
23982: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23983: LD_VAR 0 4
23987: PPUSH
23988: LD_INT 56
23990: PUSH
23991: EMPTY
23992: LIST
23993: PUSH
23994: LD_INT 3
23996: PUSH
23997: LD_INT 60
23999: PUSH
24000: EMPTY
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 72
24015: PUSH
24016: LD_VAR 0 6
24020: NOT
24021: AND
24022: PUSH
24023: LD_VAR 0 7
24027: AND
24028: IFFALSE 24104
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 4
24039: PPUSH
24040: LD_INT 56
24042: PUSH
24043: EMPTY
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: PPUSH
24049: CALL_OW 72
24053: PUSH
24054: FOR_IN
24055: IFFALSE 24102
// if ( GetTag ( sci ) = 1 ) then
24057: LD_VAR 0 5
24061: PPUSH
24062: CALL_OW 110
24066: PUSH
24067: LD_INT 1
24069: EQUAL
24070: IFFALSE 24100
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24072: LD_VAR 0 5
24076: PPUSH
24077: LD_VAR 0 7
24081: PUSH
24082: LD_INT 1
24084: PPUSH
24085: LD_VAR 0 7
24089: PPUSH
24090: CALL_OW 12
24094: ARRAY
24095: PPUSH
24096: CALL_OW 120
24100: GO 24054
24102: POP
24103: POP
// if not scientists or not damageUnits then
24104: LD_VAR 0 4
24108: NOT
24109: PUSH
24110: LD_VAR 0 6
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24206
// for sci in scientists do
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 4
24129: PUSH
24130: FOR_IN
24131: IFFALSE 24204
// if ( GetTag ( sci ) = 1 ) then
24133: LD_VAR 0 5
24137: PPUSH
24138: CALL_OW 110
24142: PUSH
24143: LD_INT 1
24145: EQUAL
24146: IFFALSE 24202
// begin ForceResetTaskList ( sci ) ;
24148: LD_VAR 0 5
24152: PPUSH
24153: CALL 27062 0 1
// ExitUnitFromBuilding ( sci ) ;
24157: LD_VAR 0 5
24161: PPUSH
24162: CALL 27115 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24166: LD_VAR 0 5
24170: PPUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 60
24176: PUSH
24177: EMPTY
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 72
24188: PPUSH
24189: LD_VAR 0 6
24193: PUSH
24194: LD_INT 1
24196: ARRAY
24197: PPUSH
24198: CALL_OW 188
// end ;
24202: GO 24130
24204: POP
24205: POP
// end ;
24206: LD_VAR 0 2
24210: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24219: LD_ADDR_VAR 0 3
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL 18744 0 1
24233: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24234: LD_VAR 0 3
24238: PUSH
24239: LD_INT 2
24241: ARRAY
24242: PUSH
24243: LD_INT 0
24245: EQUAL
24246: IFFALSE 24250
// exit ;
24248: GO 25617
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24250: LD_ADDR_VAR 0 4
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_INT 6
24262: ARRAY
24263: PPUSH
24264: LD_INT 21
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 30
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: PPUSH
24313: CALL_OW 72
24317: ST_TO_ADDR
// if not fabs then
24318: LD_VAR 0 4
24322: NOT
24323: IFFALSE 24327
// exit ;
24325: GO 25617
// wait ( aiData [ 16 ] ) ;
24327: LD_VAR 0 3
24331: PUSH
24332: LD_INT 16
24334: ARRAY
24335: PPUSH
24336: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24340: LD_VAR 0 3
24344: PUSH
24345: LD_INT 17
24347: ARRAY
24348: PUSH
24349: LD_INT 1
24351: ARRAY
24352: IFFALSE 24524
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 13
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: CALL 19452 0 1
24382: MINUS
24383: PUSH
24384: FOR_TO
24385: IFFALSE 24522
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24387: LD_ADDR_VAR 0 6
24391: PUSH
24392: LD_VAR 0 3
24396: PUSH
24397: LD_INT 13
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_INT 4
24409: ARRAY
24410: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24411: LD_ADDR_VAR 0 7
24415: PUSH
24416: LD_VAR 0 6
24420: PUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_VAR 0 6
24428: PPUSH
24429: CALL_OW 12
24433: ARRAY
24434: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24435: LD_VAR 0 4
24439: PUSH
24440: LD_INT 0
24442: PPUSH
24443: LD_VAR 0 4
24447: PPUSH
24448: CALL_OW 12
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 13
24461: ARRAY
24462: PUSH
24463: LD_VAR 0 5
24467: ARRAY
24468: PUSH
24469: LD_INT 1
24471: ARRAY
24472: PPUSH
24473: LD_VAR 0 3
24477: PUSH
24478: LD_INT 13
24480: ARRAY
24481: PUSH
24482: LD_VAR 0 5
24486: ARRAY
24487: PUSH
24488: LD_INT 2
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 13
24499: ARRAY
24500: PUSH
24501: LD_VAR 0 5
24505: ARRAY
24506: PUSH
24507: LD_INT 3
24509: ARRAY
24510: PPUSH
24511: LD_VAR 0 7
24515: PPUSH
24516: CALL_OW 185
// end ;
24520: GO 24384
24522: POP
24523: POP
// end ; if aiData [ 17 ] [ 3 ] then
24524: LD_VAR 0 3
24528: PUSH
24529: LD_INT 17
24531: ARRAY
24532: PUSH
24533: LD_INT 3
24535: ARRAY
24536: IFFALSE 25433
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24538: LD_INT 22
24540: PUSH
24541: LD_VAR 0 3
24545: PUSH
24546: LD_INT 3
24548: ARRAY
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 34
24569: PUSH
24570: LD_INT 12
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 34
24579: PUSH
24580: LD_INT 32
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 34
24589: PUSH
24590: LD_INT 51
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: PPUSH
24608: CALL_OW 69
24612: PUSH
24613: LD_VAR 0 3
24617: PUSH
24618: LD_INT 15
24620: ARRAY
24621: PUSH
24622: LD_INT 1
24624: ARRAY
24625: LESS
24626: IFFALSE 24837
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 15
24645: ARRAY
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PUSH
24651: LD_INT 22
24653: PUSH
24654: LD_VAR 0 3
24658: PUSH
24659: LD_INT 3
24661: ARRAY
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 21
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 34
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 34
24692: PUSH
24693: LD_INT 32
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 34
24702: PUSH
24703: LD_INT 51
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: MINUS
24726: PUSH
24727: FOR_TO
24728: IFFALSE 24835
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24730: LD_VAR 0 4
24734: PUSH
24735: LD_INT 0
24737: PPUSH
24738: LD_VAR 0 4
24742: PPUSH
24743: CALL_OW 12
24747: ARRAY
24748: PPUSH
24749: LD_INT 3
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: LD_INT 22
24763: PUSH
24764: EMPTY
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: PUSH
24772: LD_VAR 0 3
24776: PUSH
24777: LD_INT 4
24779: ARRAY
24780: ARRAY
24781: PUSH
24782: LD_INT 1
24784: ARRAY
24785: PPUSH
24786: LD_INT 1
24788: PPUSH
24789: LD_INT 2
24791: PPUSH
24792: LD_INT 12
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 32
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: LD_INT 51
24806: PUSH
24807: EMPTY
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: PUSH
24815: LD_VAR 0 3
24819: PUSH
24820: LD_INT 4
24822: ARRAY
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: CALL_OW 185
24833: GO 24727
24835: POP
24836: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24837: LD_INT 22
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_INT 3
24847: ARRAY
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 21
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 34
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: LD_EXP 124
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 34
24890: PUSH
24891: LD_INT 52
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: PPUSH
24909: CALL_OW 69
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_INT 15
24921: ARRAY
24922: PUSH
24923: LD_INT 2
24925: ARRAY
24926: LESS
24927: IFFALSE 25142
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24929: LD_ADDR_VAR 0 5
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 15
24946: ARRAY
24947: PUSH
24948: LD_INT 2
24950: ARRAY
24951: PUSH
24952: LD_INT 22
24954: PUSH
24955: LD_VAR 0 3
24959: PUSH
24960: LD_INT 3
24962: ARRAY
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 34
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_EXP 124
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 34
25005: PUSH
25006: LD_INT 52
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: MINUS
25029: PUSH
25030: FOR_TO
25031: IFFALSE 25140
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25033: LD_VAR 0 4
25037: PUSH
25038: LD_INT 0
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: CALL_OW 12
25050: ARRAY
25051: PPUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: EMPTY
25062: LIST
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: EMPTY
25068: LIST
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: LD_VAR 0 3
25079: PUSH
25080: LD_INT 4
25082: ARRAY
25083: ARRAY
25084: PUSH
25085: LD_INT 1
25087: ARRAY
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: LD_INT 2
25094: PPUSH
25095: LD_INT 13
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: LD_EXP 124
25105: PUSH
25106: EMPTY
25107: LIST
25108: PUSH
25109: LD_INT 52
25111: PUSH
25112: EMPTY
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: PUSH
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 4
25127: ARRAY
25128: ARRAY
25129: PUSH
25130: LD_INT 1
25132: ARRAY
25133: PPUSH
25134: CALL_OW 185
25138: GO 25030
25140: POP
25141: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25142: LD_INT 22
25144: PUSH
25145: LD_VAR 0 3
25149: PUSH
25150: LD_INT 3
25152: ARRAY
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 21
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: LD_INT 34
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 14
25183: PUSH
25184: EMPTY
25185: LIST
25186: PUSH
25187: LD_INT 34
25189: PUSH
25190: LD_INT 53
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_INT 15
25220: ARRAY
25221: PUSH
25222: LD_INT 3
25224: ARRAY
25225: LESS
25226: IFFALSE 25433
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: DOUBLE
25234: LD_INT 1
25236: DEC
25237: ST_TO_ADDR
25238: LD_VAR 0 3
25242: PUSH
25243: LD_INT 15
25245: ARRAY
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_VAR 0 3
25258: PUSH
25259: LD_INT 3
25261: ARRAY
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 34
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 14
25292: PUSH
25293: EMPTY
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 53
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: MINUS
25322: PUSH
25323: FOR_TO
25324: IFFALSE 25431
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25326: LD_VAR 0 4
25330: PUSH
25331: LD_INT 0
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: CALL_OW 12
25343: ARRAY
25344: PPUSH
25345: LD_INT 4
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: EMPTY
25355: LIST
25356: PUSH
25357: LD_INT 24
25359: PUSH
25360: EMPTY
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_VAR 0 3
25372: PUSH
25373: LD_INT 4
25375: ARRAY
25376: ARRAY
25377: PUSH
25378: LD_INT 1
25380: ARRAY
25381: PPUSH
25382: LD_INT 1
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_INT 14
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: LD_INT 53
25402: PUSH
25403: EMPTY
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 4
25418: ARRAY
25419: ARRAY
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PPUSH
25425: CALL_OW 185
25429: GO 25323
25431: POP
25432: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25433: LD_VAR 0 3
25437: PUSH
25438: LD_INT 17
25440: ARRAY
25441: PUSH
25442: LD_INT 2
25444: ARRAY
25445: PUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: CALL 19562 0 1
25455: MINUS
25456: IFFALSE 25617
// begin for i := 1 to aiData [ 14 ] do
25458: LD_ADDR_VAR 0 5
25462: PUSH
25463: DOUBLE
25464: LD_INT 1
25466: DEC
25467: ST_TO_ADDR
25468: LD_VAR 0 3
25472: PUSH
25473: LD_INT 14
25475: ARRAY
25476: PUSH
25477: FOR_TO
25478: IFFALSE 25615
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25480: LD_ADDR_VAR 0 6
25484: PUSH
25485: LD_VAR 0 3
25489: PUSH
25490: LD_INT 14
25492: ARRAY
25493: PUSH
25494: LD_VAR 0 5
25498: ARRAY
25499: PUSH
25500: LD_INT 4
25502: ARRAY
25503: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25504: LD_ADDR_VAR 0 7
25508: PUSH
25509: LD_VAR 0 6
25513: PUSH
25514: LD_INT 1
25516: PPUSH
25517: LD_VAR 0 6
25521: PPUSH
25522: CALL_OW 12
25526: ARRAY
25527: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25528: LD_VAR 0 4
25532: PUSH
25533: LD_INT 0
25535: PPUSH
25536: LD_VAR 0 4
25540: PPUSH
25541: CALL_OW 12
25545: ARRAY
25546: PPUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_INT 14
25554: ARRAY
25555: PUSH
25556: LD_VAR 0 5
25560: ARRAY
25561: PUSH
25562: LD_INT 1
25564: ARRAY
25565: PPUSH
25566: LD_VAR 0 3
25570: PUSH
25571: LD_INT 14
25573: ARRAY
25574: PUSH
25575: LD_VAR 0 5
25579: ARRAY
25580: PUSH
25581: LD_INT 2
25583: ARRAY
25584: PPUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_INT 14
25592: ARRAY
25593: PUSH
25594: LD_VAR 0 5
25598: ARRAY
25599: PUSH
25600: LD_INT 3
25602: ARRAY
25603: PPUSH
25604: LD_VAR 0 7
25608: PPUSH
25609: CALL_OW 185
// end ;
25613: GO 25477
25615: POP
25616: POP
// end ; end ;
25617: LD_VAR 0 2
25621: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25622: LD_INT 0
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// for unit in units do
25638: LD_ADDR_VAR 0 6
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: FOR_IN
25649: IFFALSE 25665
// SetTag ( unit , 0 ) ;
25651: LD_VAR 0 6
25655: PPUSH
25656: LD_INT 0
25658: PPUSH
25659: CALL_OW 109
25663: GO 25648
25665: POP
25666: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25667: LD_ADDR_VAR 0 13
25671: PUSH
25672: LD_VAR 0 3
25676: PUSH
25677: LD_VAR 0 3
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PUSH
25687: LD_VAR 0 3
25691: PUSH
25692: LD_VAR 0 3
25696: ARRAY
25697: PUSH
25698: LD_INT 2
25700: ARRAY
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25706: LD_ADDR_VAR 0 7
25710: PUSH
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_INT 50
25718: PUSH
25719: EMPTY
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 59
25727: PUSH
25728: EMPTY
25729: LIST
25730: PUSH
25731: LD_INT 25
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 25
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 21
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PPUSH
25772: CALL_OW 72
25776: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25777: LD_ADDR_VAR 0 9
25781: PUSH
25782: LD_VAR 0 2
25786: PPUSH
25787: LD_INT 50
25789: PUSH
25790: EMPTY
25791: LIST
25792: PUSH
25793: LD_INT 25
25795: PUSH
25796: LD_INT 4
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 72
25811: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25812: LD_ADDR_VAR 0 10
25816: PUSH
25817: LD_VAR 0 2
25821: PPUSH
25822: LD_INT 21
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 24
25837: PUSH
25838: LD_INT 1000
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PPUSH
25853: CALL_OW 72
25857: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25858: LD_ADDR_VAR 0 11
25862: PUSH
25863: LD_INT 21
25865: PPUSH
25866: CALL_OW 435
25870: ST_TO_ADDR
// for unit in attackUnits do
25871: LD_ADDR_VAR 0 6
25875: PUSH
25876: LD_VAR 0 7
25880: PUSH
25881: FOR_IN
25882: IFFALSE 26631
// begin if path then
25884: LD_VAR 0 3
25888: IFFALSE 26620
// begin i = 1 ;
25890: LD_ADDR_VAR 0 5
25894: PUSH
25895: LD_INT 1
25897: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25898: LD_ADDR_VAR 0 11
25902: PUSH
25903: LD_INT 21
25905: PPUSH
25906: CALL_OW 435
25910: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25911: LD_ADDR_VAR 0 14
25915: PUSH
25916: LD_INT 81
25918: PUSH
25919: LD_VAR 0 6
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: PPUSH
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 74
25947: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25948: LD_ADDR_VAR 0 15
25952: PUSH
25953: LD_VAR 0 11
25957: PPUSH
25958: LD_VAR 0 6
25962: PPUSH
25963: CALL_OW 250
25967: PPUSH
25968: LD_VAR 0 6
25972: PPUSH
25973: CALL_OW 251
25977: PPUSH
25978: CALL_OW 439
25982: ST_TO_ADDR
// if damageUnits and medics then
25983: LD_VAR 0 10
25987: PUSH
25988: LD_VAR 0 9
25992: AND
25993: IFFALSE 26015
// ComHeal ( medics , damageUnits [ 1 ] ) else
25995: LD_VAR 0 9
25999: PPUSH
26000: LD_VAR 0 10
26004: PUSH
26005: LD_INT 1
26007: ARRAY
26008: PPUSH
26009: CALL_OW 128
26013: GO 26058
// if medics then
26015: LD_VAR 0 9
26019: IFFALSE 26058
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26021: LD_VAR 0 9
26025: PPUSH
26026: LD_VAR 0 7
26030: PUSH
26031: LD_INT 1
26033: ARRAY
26034: PPUSH
26035: CALL_OW 250
26039: PPUSH
26040: LD_VAR 0 7
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: CALL_OW 251
26053: PPUSH
26054: CALL_OW 111
// if not HasTask ( unit ) then
26058: LD_VAR 0 6
26062: PPUSH
26063: CALL_OW 314
26067: NOT
26068: IFFALSE 26307
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26070: LD_ADDR_VAR 0 15
26074: PUSH
26075: LD_VAR 0 11
26079: PPUSH
26080: LD_VAR 0 6
26084: PPUSH
26085: CALL_OW 250
26089: PPUSH
26090: LD_VAR 0 6
26094: PPUSH
26095: CALL_OW 251
26099: PPUSH
26100: CALL_OW 439
26104: ST_TO_ADDR
// if i > crates then
26105: LD_VAR 0 5
26109: PUSH
26110: LD_VAR 0 11
26114: GREATER
26115: IFFALSE 26125
// i = 1 ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_INT 1
26124: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26125: LD_VAR 0 14
26129: PUSH
26130: LD_VAR 0 15
26134: AND
26135: IFFALSE 26250
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26137: LD_VAR 0 6
26141: PPUSH
26142: LD_VAR 0 14
26146: PPUSH
26147: CALL_OW 250
26151: PPUSH
26152: LD_VAR 0 14
26156: PPUSH
26157: CALL_OW 251
26161: PPUSH
26162: CALL_OW 297
26166: PUSH
26167: LD_VAR 0 6
26171: PPUSH
26172: LD_VAR 0 15
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 15
26185: PUSH
26186: LD_INT 2
26188: ARRAY
26189: PPUSH
26190: CALL_OW 297
26194: LESS
26195: IFFALSE 26213
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26197: LD_VAR 0 7
26201: PPUSH
26202: LD_VAR 0 14
26206: PPUSH
26207: CALL_OW 115
26211: GO 26248
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26213: LD_VAR 0 7
26217: PPUSH
26218: LD_VAR 0 11
26222: PUSH
26223: LD_VAR 0 5
26227: ARRAY
26228: PPUSH
26229: LD_VAR 0 11
26233: PUSH
26234: LD_VAR 0 5
26238: PUSH
26239: LD_INT 1
26241: PLUS
26242: ARRAY
26243: PPUSH
26244: CALL_OW 116
// end else
26248: GO 26307
// if crates then
26250: LD_VAR 0 11
26254: IFFALSE 26293
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26256: LD_VAR 0 7
26260: PPUSH
26261: LD_VAR 0 11
26265: PUSH
26266: LD_VAR 0 5
26270: ARRAY
26271: PPUSH
26272: LD_VAR 0 11
26276: PUSH
26277: LD_VAR 0 5
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: ARRAY
26286: PPUSH
26287: CALL_OW 116
26291: GO 26307
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26293: LD_VAR 0 7
26297: PPUSH
26298: LD_VAR 0 14
26302: PPUSH
26303: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26307: LD_INT 35
26309: PPUSH
26310: CALL_OW 67
// if path then
26314: LD_VAR 0 3
26318: IFFALSE 26394
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26320: LD_ADDR_VAR 0 16
26324: PUSH
26325: LD_VAR 0 6
26329: PPUSH
26330: LD_VAR 0 3
26334: PPUSH
26335: CALL 26849 0 2
26339: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26340: LD_VAR 0 7
26344: PPUSH
26345: LD_VAR 0 16
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 16
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26367: LD_VAR 0 1
26371: PPUSH
26372: LD_VAR 0 16
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 16
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: PPUSH
26390: CALL_OW 114
// end ; i = i + 2 ;
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_VAR 0 5
26403: PUSH
26404: LD_INT 2
26406: PLUS
26407: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_VAR 0 16
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: LD_VAR 0 16
26426: PUSH
26427: LD_INT 2
26429: ARRAY
26430: PPUSH
26431: CALL_OW 297
26435: PUSH
26436: LD_INT 6
26438: LESSEQUAL
26439: IFFALSE 25898
// repeat wait ( 0 0$1 ) ;
26441: LD_INT 35
26443: PPUSH
26444: CALL_OW 67
// nearUnitsCounter = 0 ;
26448: LD_ADDR_VAR 0 12
26452: PUSH
26453: LD_INT 0
26455: ST_TO_ADDR
// for attackUnit in attackUnits do
26456: LD_ADDR_VAR 0 8
26460: PUSH
26461: LD_VAR 0 7
26465: PUSH
26466: FOR_IN
26467: IFFALSE 26505
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26469: LD_VAR 0 6
26473: PPUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 296
26483: PUSH
26484: LD_INT 7
26486: LESSEQUAL
26487: IFFALSE 26503
// nearUnitsCounter = nearUnitsCounter + 1 ;
26489: LD_ADDR_VAR 0 12
26493: PUSH
26494: LD_VAR 0 12
26498: PUSH
26499: LD_INT 1
26501: PLUS
26502: ST_TO_ADDR
26503: GO 26466
26505: POP
26506: POP
// until nearUnitsCounter = attackUnits ;
26507: LD_VAR 0 12
26511: PUSH
26512: LD_VAR 0 7
26516: EQUAL
26517: IFFALSE 26441
// for i := 1 to path do
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: DOUBLE
26525: LD_INT 1
26527: DEC
26528: ST_TO_ADDR
26529: LD_VAR 0 3
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26618
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26537: LD_VAR 0 3
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PUSH
26552: LD_VAR 0 16
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: EQUAL
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_VAR 0 5
26571: ARRAY
26572: PUSH
26573: LD_INT 2
26575: ARRAY
26576: PUSH
26577: LD_VAR 0 16
26581: PUSH
26582: LD_INT 2
26584: ARRAY
26585: EQUAL
26586: AND
26587: IFFALSE 26616
// begin path = path diff [ path [ i ] ] ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_VAR 0 5
26608: ARRAY
26609: PUSH
26610: EMPTY
26611: LIST
26612: DIFF
26613: ST_TO_ADDR
// break ;
26614: GO 26618
// end ;
26616: GO 26534
26618: POP
26619: POP
// end ; if not path then
26620: LD_VAR 0 3
26624: NOT
26625: IFFALSE 26629
// break ;
26627: GO 26631
// end ;
26629: GO 25881
26631: POP
26632: POP
// repeat unitsReachPathEnd = 0 ;
26633: LD_ADDR_VAR 0 17
26637: PUSH
26638: LD_INT 0
26640: ST_TO_ADDR
// for attackUnit in attackUnits do
26641: LD_ADDR_VAR 0 8
26645: PUSH
26646: LD_VAR 0 7
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26790
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_VAR 0 13
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_VAR 0 13
26672: PUSH
26673: LD_INT 2
26675: ARRAY
26676: PPUSH
26677: CALL_OW 297
26681: PUSH
26682: LD_INT 7
26684: LESS
26685: NOT
26686: PUSH
26687: LD_VAR 0 8
26691: PPUSH
26692: CALL_OW 110
26696: PUSH
26697: LD_INT 0
26699: EQUAL
26700: AND
26701: IFFALSE 26732
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26703: LD_VAR 0 8
26707: PPUSH
26708: LD_VAR 0 13
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 13
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: CALL_OW 111
26730: GO 26759
// if GetTag ( attackUnit ) = 0 then
26732: LD_VAR 0 8
26736: PPUSH
26737: CALL_OW 110
26741: PUSH
26742: LD_INT 0
26744: EQUAL
26745: IFFALSE 26759
// SetTag ( attackUnit , 1 ) ;
26747: LD_VAR 0 8
26751: PPUSH
26752: LD_INT 1
26754: PPUSH
26755: CALL_OW 109
// if GetTag ( unit ) = 1 then
26759: LD_VAR 0 6
26763: PPUSH
26764: CALL_OW 110
26768: PUSH
26769: LD_INT 1
26771: EQUAL
26772: IFFALSE 26788
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26774: LD_ADDR_VAR 0 17
26778: PUSH
26779: LD_VAR 0 17
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: ST_TO_ADDR
// end ;
26788: GO 26651
26790: POP
26791: POP
// wait ( 0 0$1 ) ;
26792: LD_INT 35
26794: PPUSH
26795: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26799: LD_VAR 0 17
26803: PUSH
26804: LD_VAR 0 7
26808: PUSH
26809: LD_INT 3
26811: MINUS
26812: GREATER
26813: IFFALSE 26633
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 50
26822: PUSH
26823: EMPTY
26824: LIST
26825: PPUSH
26826: CALL_OW 72
26830: NOT
26831: PUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 303
26841: OR
26842: IFFALSE 25706
// end ;
26844: LD_VAR 0 4
26848: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
26853: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 2
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PUSH
26881: LD_INT 2
26883: ARRAY
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// for i := 2 to path do
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: DOUBLE
26895: LD_INT 2
26897: DEC
26898: ST_TO_ADDR
26899: LD_VAR 0 2
26903: PUSH
26904: FOR_TO
26905: IFFALSE 27045
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26907: LD_VAR 0 1
26911: PPUSH
26912: LD_VAR 0 2
26916: PUSH
26917: LD_VAR 0 4
26921: ARRAY
26922: PUSH
26923: LD_INT 1
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 2
26931: PUSH
26932: LD_VAR 0 4
26936: ARRAY
26937: PUSH
26938: LD_INT 2
26940: ARRAY
26941: PPUSH
26942: CALL_OW 297
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: LD_VAR 0 5
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: PPUSH
26961: LD_VAR 0 5
26965: PUSH
26966: LD_INT 2
26968: ARRAY
26969: PPUSH
26970: CALL_OW 297
26974: LESS
26975: IFFALSE 27043
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 5
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: LD_VAR 0 2
26994: PUSH
26995: LD_VAR 0 4
26999: ARRAY
27000: PUSH
27001: LD_INT 1
27003: ARRAY
27004: PPUSH
27005: CALL_OW 1
27009: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_VAR 0 5
27019: PPUSH
27020: LD_INT 2
27022: PPUSH
27023: LD_VAR 0 2
27027: PUSH
27028: LD_VAR 0 4
27032: ARRAY
27033: PUSH
27034: LD_INT 2
27036: ARRAY
27037: PPUSH
27038: CALL_OW 1
27042: ST_TO_ADDR
// end ; end ;
27043: GO 26904
27045: POP
27046: POP
// result = nearPosition ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 5
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 3
27061: RET
// function ForceResetTaskList ( unit ) ; begin
27062: LD_INT 0
27064: PPUSH
// if GetTaskList ( unit ) then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 437
27074: IFFALSE 27110
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 437
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PUSH
27090: LD_INT 1
27092: ARRAY
27093: PUSH
27094: LD_STRING e
27096: EQUAL
27097: IFFALSE 27110
// SetTaskList ( unit , [ ] ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: EMPTY
27105: PPUSH
27106: CALL_OW 446
// end ;
27110: LD_VAR 0 2
27114: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27115: LD_INT 0
27117: PPUSH
// if IsInUnit ( unit ) then
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 310
27127: IFFALSE 27138
// ComExitBuilding ( unit ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 122
// end ; end_of_file
27138: LD_VAR 0 2
27142: RET
// every 0 0$1 trigger enableCounter do
27143: LD_EXP 18
27147: IFFALSE 27184
27149: GO 27151
27151: DISABLE
// begin enable ;
27152: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27153: LD_ADDR_OWVAR 47
27157: PUSH
27158: LD_STRING #Am01-1
27160: PUSH
27161: LD_EXP 19
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27170: LD_ADDR_EXP 19
27174: PUSH
27175: LD_EXP 19
27179: PUSH
27180: LD_INT 35
27182: PLUS
27183: ST_TO_ADDR
// end ; end_of_file end_of_file
27184: END
// every 0 0$01 do var timer ;
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
// begin timer := 1 1$30 ;
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_INT 3150
27198: ST_TO_ADDR
// repeat wait ( timer ) ;
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27208: LD_EXP 20
27212: PUSH
27213: LD_INT 6
27215: GREATEREQUAL
27216: PUSH
27217: LD_EXP 20
27221: PUSH
27222: LD_INT 12
27224: LESS
27225: AND
27226: IFFALSE 27242
// timer := timer + 0 0$3 ;
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 105
27240: PLUS
27241: ST_TO_ADDR
// if cratesSpawned >= 12 then
27242: LD_EXP 20
27246: PUSH
27247: LD_INT 12
27249: GREATEREQUAL
27250: IFFALSE 27266
// timer := timer + 0 0$9 ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_VAR 0 1
27261: PUSH
27262: LD_INT 315
27264: PLUS
27265: ST_TO_ADDR
// if timer > 3 3$00 then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 6300
27273: GREATER
27274: IFFALSE 27284
// timer := 0 0$50 ;
27276: LD_ADDR_VAR 0 1
27280: PUSH
27281: LD_INT 1750
27283: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27284: LD_INT 3
27286: PPUSH
27287: LD_INT 5
27289: PPUSH
27290: CALL_OW 12
27294: PPUSH
27295: LD_INT 22
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27305: LD_ADDR_EXP 20
27309: PUSH
27310: LD_EXP 20
27314: PUSH
27315: LD_INT 1
27317: PLUS
27318: ST_TO_ADDR
// until false ;
27319: LD_INT 0
27321: IFFALSE 27199
// end ; end_of_file
27323: PPOPN 1
27325: END
// export function Nef_PrepareNature ; var i , un ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
27330: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_EXP 21
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: FOR_TO
27351: IFFALSE 27461
// begin uc_side = 0 ;
27353: LD_ADDR_OWVAR 20
27357: PUSH
27358: LD_INT 0
27360: ST_TO_ADDR
// uc_nation = nation_nature ;
27361: LD_ADDR_OWVAR 21
27365: PUSH
27366: LD_INT 0
27368: ST_TO_ADDR
// hc_class = class_apeman ;
27369: LD_ADDR_OWVAR 28
27373: PUSH
27374: LD_INT 12
27376: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27377: LD_ADDR_OWVAR 31
27381: PUSH
27382: LD_EXP 22
27386: PUSH
27387: LD_INT 1
27389: ARRAY
27390: PUSH
27391: LD_EXP 22
27395: PUSH
27396: LD_INT 2
27398: ARRAY
27399: PUSH
27400: LD_EXP 22
27404: PUSH
27405: LD_INT 3
27407: ARRAY
27408: PUSH
27409: LD_EXP 22
27413: PUSH
27414: LD_INT 4
27416: ARRAY
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27424: LD_ADDR_OWVAR 35
27428: PUSH
27429: LD_EXP 23
27433: ST_TO_ADDR
// un = CreateHuman ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: CALL_OW 44
27443: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27444: LD_VAR 0 3
27448: PPUSH
27449: LD_INT 23
27451: PPUSH
27452: LD_INT 0
27454: PPUSH
27455: CALL_OW 49
// end ;
27459: GO 27350
27461: POP
27462: POP
// for i := 1 to animalsAmount [ 2 ] do
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: DOUBLE
27469: LD_INT 1
27471: DEC
27472: ST_TO_ADDR
27473: LD_EXP 21
27477: PUSH
27478: LD_INT 2
27480: ARRAY
27481: PUSH
27482: FOR_TO
27483: IFFALSE 27593
// begin uc_side = 0 ;
27485: LD_ADDR_OWVAR 20
27489: PUSH
27490: LD_INT 0
27492: ST_TO_ADDR
// uc_nation = nation_nature ;
27493: LD_ADDR_OWVAR 21
27497: PUSH
27498: LD_INT 0
27500: ST_TO_ADDR
// hc_class = class_phororhacos ;
27501: LD_ADDR_OWVAR 28
27505: PUSH
27506: LD_INT 18
27508: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27509: LD_ADDR_OWVAR 31
27513: PUSH
27514: LD_EXP 22
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PUSH
27523: LD_EXP 22
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PUSH
27532: LD_EXP 22
27536: PUSH
27537: LD_INT 3
27539: ARRAY
27540: PUSH
27541: LD_EXP 22
27545: PUSH
27546: LD_INT 4
27548: ARRAY
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27556: LD_ADDR_OWVAR 35
27560: PUSH
27561: LD_EXP 23
27565: ST_TO_ADDR
// un = CreateHuman ;
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: CALL_OW 44
27575: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27576: LD_VAR 0 3
27580: PPUSH
27581: LD_INT 23
27583: PPUSH
27584: LD_INT 0
27586: PPUSH
27587: CALL_OW 49
// end ;
27591: GO 27482
27593: POP
27594: POP
// for i := 1 to animalsAmount [ 3 ] do
27595: LD_ADDR_VAR 0 2
27599: PUSH
27600: DOUBLE
27601: LD_INT 1
27603: DEC
27604: ST_TO_ADDR
27605: LD_EXP 21
27609: PUSH
27610: LD_INT 3
27612: ARRAY
27613: PUSH
27614: FOR_TO
27615: IFFALSE 27725
// begin uc_side = 0 ;
27617: LD_ADDR_OWVAR 20
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
// uc_nation = nation_nature ;
27625: LD_ADDR_OWVAR 21
27629: PUSH
27630: LD_INT 0
27632: ST_TO_ADDR
// hc_class = class_tiger ;
27633: LD_ADDR_OWVAR 28
27637: PUSH
27638: LD_INT 14
27640: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27641: LD_ADDR_OWVAR 31
27645: PUSH
27646: LD_EXP 22
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PUSH
27655: LD_EXP 22
27659: PUSH
27660: LD_INT 2
27662: ARRAY
27663: PUSH
27664: LD_EXP 22
27668: PUSH
27669: LD_INT 3
27671: ARRAY
27672: PUSH
27673: LD_EXP 22
27677: PUSH
27678: LD_INT 4
27680: ARRAY
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27688: LD_ADDR_OWVAR 35
27692: PUSH
27693: LD_EXP 23
27697: ST_TO_ADDR
// un = CreateHuman ;
27698: LD_ADDR_VAR 0 3
27702: PUSH
27703: CALL_OW 44
27707: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27708: LD_VAR 0 3
27712: PPUSH
27713: LD_INT 23
27715: PPUSH
27716: LD_INT 0
27718: PPUSH
27719: CALL_OW 49
// end ;
27723: GO 27614
27725: POP
27726: POP
// for i := 1 to animalsAmount [ 4 ] do
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: DOUBLE
27733: LD_INT 1
27735: DEC
27736: ST_TO_ADDR
27737: LD_EXP 21
27741: PUSH
27742: LD_INT 4
27744: ARRAY
27745: PUSH
27746: FOR_TO
27747: IFFALSE 27857
// begin uc_side = 0 ;
27749: LD_ADDR_OWVAR 20
27753: PUSH
27754: LD_INT 0
27756: ST_TO_ADDR
// uc_nation = nation_nature ;
27757: LD_ADDR_OWVAR 21
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// hc_class = 21 ;
27765: LD_ADDR_OWVAR 28
27769: PUSH
27770: LD_INT 21
27772: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27773: LD_ADDR_OWVAR 31
27777: PUSH
27778: LD_EXP 22
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PUSH
27787: LD_EXP 22
27791: PUSH
27792: LD_INT 2
27794: ARRAY
27795: PUSH
27796: LD_EXP 22
27800: PUSH
27801: LD_INT 3
27803: ARRAY
27804: PUSH
27805: LD_EXP 22
27809: PUSH
27810: LD_INT 4
27812: ARRAY
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27820: LD_ADDR_OWVAR 35
27824: PUSH
27825: LD_EXP 23
27829: ST_TO_ADDR
// un = CreateHuman ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: CALL_OW 44
27839: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 23
27847: PPUSH
27848: LD_INT 0
27850: PPUSH
27851: CALL_OW 49
// end ;
27855: GO 27746
27857: POP
27858: POP
// for i := 1 to animalsAmount [ 5 ] do
27859: LD_ADDR_VAR 0 2
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_EXP 21
27873: PUSH
27874: LD_INT 5
27876: ARRAY
27877: PUSH
27878: FOR_TO
27879: IFFALSE 27940
// begin uc_side = 0 ;
27881: LD_ADDR_OWVAR 20
27885: PUSH
27886: LD_INT 0
27888: ST_TO_ADDR
// uc_nation = nation_nature ;
27889: LD_ADDR_OWVAR 21
27893: PUSH
27894: LD_INT 0
27896: ST_TO_ADDR
// vc_chassis := 31 ;
27897: LD_ADDR_OWVAR 37
27901: PUSH
27902: LD_INT 31
27904: ST_TO_ADDR
// vc_control := control_rider ;
27905: LD_ADDR_OWVAR 38
27909: PUSH
27910: LD_INT 4
27912: ST_TO_ADDR
// un := CreateVehicle ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: CALL_OW 45
27922: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: LD_INT 23
27930: PPUSH
27931: LD_INT 0
27933: PPUSH
27934: CALL_OW 49
// end ;
27938: GO 27878
27940: POP
27941: POP
// end ; end_of_file
27942: LD_VAR 0 1
27946: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27947: LD_INT 0
27949: PPUSH
// if p2 = 100 then
27950: LD_VAR 0 2
27954: PUSH
27955: LD_INT 100
27957: EQUAL
27958: IFFALSE 28907
// begin if not StreamModeActive then
27960: LD_EXP 63
27964: NOT
27965: IFFALSE 27975
// StreamModeActive := true ;
27967: LD_ADDR_EXP 63
27971: PUSH
27972: LD_INT 1
27974: ST_TO_ADDR
// if p3 = 0 then
27975: LD_VAR 0 3
27979: PUSH
27980: LD_INT 0
27982: EQUAL
27983: IFFALSE 27989
// InitStreamMode ;
27985: CALL 29067 0 0
// if p3 = 1 then
27989: LD_VAR 0 3
27993: PUSH
27994: LD_INT 1
27996: EQUAL
27997: IFFALSE 28007
// sRocket := true ;
27999: LD_ADDR_EXP 68
28003: PUSH
28004: LD_INT 1
28006: ST_TO_ADDR
// if p3 = 2 then
28007: LD_VAR 0 3
28011: PUSH
28012: LD_INT 2
28014: EQUAL
28015: IFFALSE 28025
// sSpeed := true ;
28017: LD_ADDR_EXP 67
28021: PUSH
28022: LD_INT 1
28024: ST_TO_ADDR
// if p3 = 3 then
28025: LD_VAR 0 3
28029: PUSH
28030: LD_INT 3
28032: EQUAL
28033: IFFALSE 28043
// sEngine := true ;
28035: LD_ADDR_EXP 69
28039: PUSH
28040: LD_INT 1
28042: ST_TO_ADDR
// if p3 = 4 then
28043: LD_VAR 0 3
28047: PUSH
28048: LD_INT 4
28050: EQUAL
28051: IFFALSE 28061
// sSpec := true ;
28053: LD_ADDR_EXP 66
28057: PUSH
28058: LD_INT 1
28060: ST_TO_ADDR
// if p3 = 5 then
28061: LD_VAR 0 3
28065: PUSH
28066: LD_INT 5
28068: EQUAL
28069: IFFALSE 28079
// sLevel := true ;
28071: LD_ADDR_EXP 70
28075: PUSH
28076: LD_INT 1
28078: ST_TO_ADDR
// if p3 = 6 then
28079: LD_VAR 0 3
28083: PUSH
28084: LD_INT 6
28086: EQUAL
28087: IFFALSE 28097
// sArmoury := true ;
28089: LD_ADDR_EXP 71
28093: PUSH
28094: LD_INT 1
28096: ST_TO_ADDR
// if p3 = 7 then
28097: LD_VAR 0 3
28101: PUSH
28102: LD_INT 7
28104: EQUAL
28105: IFFALSE 28115
// sRadar := true ;
28107: LD_ADDR_EXP 72
28111: PUSH
28112: LD_INT 1
28114: ST_TO_ADDR
// if p3 = 8 then
28115: LD_VAR 0 3
28119: PUSH
28120: LD_INT 8
28122: EQUAL
28123: IFFALSE 28133
// sBunker := true ;
28125: LD_ADDR_EXP 73
28129: PUSH
28130: LD_INT 1
28132: ST_TO_ADDR
// if p3 = 9 then
28133: LD_VAR 0 3
28137: PUSH
28138: LD_INT 9
28140: EQUAL
28141: IFFALSE 28151
// sHack := true ;
28143: LD_ADDR_EXP 74
28147: PUSH
28148: LD_INT 1
28150: ST_TO_ADDR
// if p3 = 10 then
28151: LD_VAR 0 3
28155: PUSH
28156: LD_INT 10
28158: EQUAL
28159: IFFALSE 28169
// sFire := true ;
28161: LD_ADDR_EXP 75
28165: PUSH
28166: LD_INT 1
28168: ST_TO_ADDR
// if p3 = 11 then
28169: LD_VAR 0 3
28173: PUSH
28174: LD_INT 11
28176: EQUAL
28177: IFFALSE 28187
// sRefresh := true ;
28179: LD_ADDR_EXP 76
28183: PUSH
28184: LD_INT 1
28186: ST_TO_ADDR
// if p3 = 12 then
28187: LD_VAR 0 3
28191: PUSH
28192: LD_INT 12
28194: EQUAL
28195: IFFALSE 28205
// sExp := true ;
28197: LD_ADDR_EXP 77
28201: PUSH
28202: LD_INT 1
28204: ST_TO_ADDR
// if p3 = 13 then
28205: LD_VAR 0 3
28209: PUSH
28210: LD_INT 13
28212: EQUAL
28213: IFFALSE 28223
// sDepot := true ;
28215: LD_ADDR_EXP 78
28219: PUSH
28220: LD_INT 1
28222: ST_TO_ADDR
// if p3 = 14 then
28223: LD_VAR 0 3
28227: PUSH
28228: LD_INT 14
28230: EQUAL
28231: IFFALSE 28241
// sFlag := true ;
28233: LD_ADDR_EXP 79
28237: PUSH
28238: LD_INT 1
28240: ST_TO_ADDR
// if p3 = 15 then
28241: LD_VAR 0 3
28245: PUSH
28246: LD_INT 15
28248: EQUAL
28249: IFFALSE 28259
// sKamikadze := true ;
28251: LD_ADDR_EXP 87
28255: PUSH
28256: LD_INT 1
28258: ST_TO_ADDR
// if p3 = 16 then
28259: LD_VAR 0 3
28263: PUSH
28264: LD_INT 16
28266: EQUAL
28267: IFFALSE 28277
// sTroll := true ;
28269: LD_ADDR_EXP 88
28273: PUSH
28274: LD_INT 1
28276: ST_TO_ADDR
// if p3 = 17 then
28277: LD_VAR 0 3
28281: PUSH
28282: LD_INT 17
28284: EQUAL
28285: IFFALSE 28295
// sSlow := true ;
28287: LD_ADDR_EXP 89
28291: PUSH
28292: LD_INT 1
28294: ST_TO_ADDR
// if p3 = 18 then
28295: LD_VAR 0 3
28299: PUSH
28300: LD_INT 18
28302: EQUAL
28303: IFFALSE 28313
// sLack := true ;
28305: LD_ADDR_EXP 90
28309: PUSH
28310: LD_INT 1
28312: ST_TO_ADDR
// if p3 = 19 then
28313: LD_VAR 0 3
28317: PUSH
28318: LD_INT 19
28320: EQUAL
28321: IFFALSE 28331
// sTank := true ;
28323: LD_ADDR_EXP 92
28327: PUSH
28328: LD_INT 1
28330: ST_TO_ADDR
// if p3 = 20 then
28331: LD_VAR 0 3
28335: PUSH
28336: LD_INT 20
28338: EQUAL
28339: IFFALSE 28349
// sRemote := true ;
28341: LD_ADDR_EXP 93
28345: PUSH
28346: LD_INT 1
28348: ST_TO_ADDR
// if p3 = 21 then
28349: LD_VAR 0 3
28353: PUSH
28354: LD_INT 21
28356: EQUAL
28357: IFFALSE 28367
// sPowell := true ;
28359: LD_ADDR_EXP 94
28363: PUSH
28364: LD_INT 1
28366: ST_TO_ADDR
// if p3 = 22 then
28367: LD_VAR 0 3
28371: PUSH
28372: LD_INT 22
28374: EQUAL
28375: IFFALSE 28385
// sTeleport := true ;
28377: LD_ADDR_EXP 97
28381: PUSH
28382: LD_INT 1
28384: ST_TO_ADDR
// if p3 = 23 then
28385: LD_VAR 0 3
28389: PUSH
28390: LD_INT 23
28392: EQUAL
28393: IFFALSE 28403
// sOilTower := true ;
28395: LD_ADDR_EXP 99
28399: PUSH
28400: LD_INT 1
28402: ST_TO_ADDR
// if p3 = 24 then
28403: LD_VAR 0 3
28407: PUSH
28408: LD_INT 24
28410: EQUAL
28411: IFFALSE 28421
// sShovel := true ;
28413: LD_ADDR_EXP 100
28417: PUSH
28418: LD_INT 1
28420: ST_TO_ADDR
// if p3 = 25 then
28421: LD_VAR 0 3
28425: PUSH
28426: LD_INT 25
28428: EQUAL
28429: IFFALSE 28439
// sSheik := true ;
28431: LD_ADDR_EXP 101
28435: PUSH
28436: LD_INT 1
28438: ST_TO_ADDR
// if p3 = 26 then
28439: LD_VAR 0 3
28443: PUSH
28444: LD_INT 26
28446: EQUAL
28447: IFFALSE 28457
// sEarthquake := true ;
28449: LD_ADDR_EXP 103
28453: PUSH
28454: LD_INT 1
28456: ST_TO_ADDR
// if p3 = 27 then
28457: LD_VAR 0 3
28461: PUSH
28462: LD_INT 27
28464: EQUAL
28465: IFFALSE 28475
// sAI := true ;
28467: LD_ADDR_EXP 104
28471: PUSH
28472: LD_INT 1
28474: ST_TO_ADDR
// if p3 = 28 then
28475: LD_VAR 0 3
28479: PUSH
28480: LD_INT 28
28482: EQUAL
28483: IFFALSE 28493
// sCargo := true ;
28485: LD_ADDR_EXP 107
28489: PUSH
28490: LD_INT 1
28492: ST_TO_ADDR
// if p3 = 29 then
28493: LD_VAR 0 3
28497: PUSH
28498: LD_INT 29
28500: EQUAL
28501: IFFALSE 28511
// sDLaser := true ;
28503: LD_ADDR_EXP 108
28507: PUSH
28508: LD_INT 1
28510: ST_TO_ADDR
// if p3 = 30 then
28511: LD_VAR 0 3
28515: PUSH
28516: LD_INT 30
28518: EQUAL
28519: IFFALSE 28529
// sExchange := true ;
28521: LD_ADDR_EXP 109
28525: PUSH
28526: LD_INT 1
28528: ST_TO_ADDR
// if p3 = 31 then
28529: LD_VAR 0 3
28533: PUSH
28534: LD_INT 31
28536: EQUAL
28537: IFFALSE 28547
// sFac := true ;
28539: LD_ADDR_EXP 110
28543: PUSH
28544: LD_INT 1
28546: ST_TO_ADDR
// if p3 = 32 then
28547: LD_VAR 0 3
28551: PUSH
28552: LD_INT 32
28554: EQUAL
28555: IFFALSE 28565
// sPower := true ;
28557: LD_ADDR_EXP 111
28561: PUSH
28562: LD_INT 1
28564: ST_TO_ADDR
// if p3 = 33 then
28565: LD_VAR 0 3
28569: PUSH
28570: LD_INT 33
28572: EQUAL
28573: IFFALSE 28583
// sRandom := true ;
28575: LD_ADDR_EXP 112
28579: PUSH
28580: LD_INT 1
28582: ST_TO_ADDR
// if p3 = 34 then
28583: LD_VAR 0 3
28587: PUSH
28588: LD_INT 34
28590: EQUAL
28591: IFFALSE 28601
// sShield := true ;
28593: LD_ADDR_EXP 113
28597: PUSH
28598: LD_INT 1
28600: ST_TO_ADDR
// if p3 = 35 then
28601: LD_VAR 0 3
28605: PUSH
28606: LD_INT 35
28608: EQUAL
28609: IFFALSE 28619
// sTime := true ;
28611: LD_ADDR_EXP 114
28615: PUSH
28616: LD_INT 1
28618: ST_TO_ADDR
// if p3 = 36 then
28619: LD_VAR 0 3
28623: PUSH
28624: LD_INT 36
28626: EQUAL
28627: IFFALSE 28637
// sTools := true ;
28629: LD_ADDR_EXP 115
28633: PUSH
28634: LD_INT 1
28636: ST_TO_ADDR
// if p3 = 101 then
28637: LD_VAR 0 3
28641: PUSH
28642: LD_INT 101
28644: EQUAL
28645: IFFALSE 28655
// sSold := true ;
28647: LD_ADDR_EXP 80
28651: PUSH
28652: LD_INT 1
28654: ST_TO_ADDR
// if p3 = 102 then
28655: LD_VAR 0 3
28659: PUSH
28660: LD_INT 102
28662: EQUAL
28663: IFFALSE 28673
// sDiff := true ;
28665: LD_ADDR_EXP 81
28669: PUSH
28670: LD_INT 1
28672: ST_TO_ADDR
// if p3 = 103 then
28673: LD_VAR 0 3
28677: PUSH
28678: LD_INT 103
28680: EQUAL
28681: IFFALSE 28691
// sFog := true ;
28683: LD_ADDR_EXP 84
28687: PUSH
28688: LD_INT 1
28690: ST_TO_ADDR
// if p3 = 104 then
28691: LD_VAR 0 3
28695: PUSH
28696: LD_INT 104
28698: EQUAL
28699: IFFALSE 28709
// sReset := true ;
28701: LD_ADDR_EXP 85
28705: PUSH
28706: LD_INT 1
28708: ST_TO_ADDR
// if p3 = 105 then
28709: LD_VAR 0 3
28713: PUSH
28714: LD_INT 105
28716: EQUAL
28717: IFFALSE 28727
// sSun := true ;
28719: LD_ADDR_EXP 86
28723: PUSH
28724: LD_INT 1
28726: ST_TO_ADDR
// if p3 = 106 then
28727: LD_VAR 0 3
28731: PUSH
28732: LD_INT 106
28734: EQUAL
28735: IFFALSE 28745
// sTiger := true ;
28737: LD_ADDR_EXP 82
28741: PUSH
28742: LD_INT 1
28744: ST_TO_ADDR
// if p3 = 107 then
28745: LD_VAR 0 3
28749: PUSH
28750: LD_INT 107
28752: EQUAL
28753: IFFALSE 28763
// sBomb := true ;
28755: LD_ADDR_EXP 83
28759: PUSH
28760: LD_INT 1
28762: ST_TO_ADDR
// if p3 = 108 then
28763: LD_VAR 0 3
28767: PUSH
28768: LD_INT 108
28770: EQUAL
28771: IFFALSE 28781
// sWound := true ;
28773: LD_ADDR_EXP 91
28777: PUSH
28778: LD_INT 1
28780: ST_TO_ADDR
// if p3 = 109 then
28781: LD_VAR 0 3
28785: PUSH
28786: LD_INT 109
28788: EQUAL
28789: IFFALSE 28799
// sBetray := true ;
28791: LD_ADDR_EXP 95
28795: PUSH
28796: LD_INT 1
28798: ST_TO_ADDR
// if p3 = 110 then
28799: LD_VAR 0 3
28803: PUSH
28804: LD_INT 110
28806: EQUAL
28807: IFFALSE 28817
// sContamin := true ;
28809: LD_ADDR_EXP 96
28813: PUSH
28814: LD_INT 1
28816: ST_TO_ADDR
// if p3 = 111 then
28817: LD_VAR 0 3
28821: PUSH
28822: LD_INT 111
28824: EQUAL
28825: IFFALSE 28835
// sOil := true ;
28827: LD_ADDR_EXP 98
28831: PUSH
28832: LD_INT 1
28834: ST_TO_ADDR
// if p3 = 112 then
28835: LD_VAR 0 3
28839: PUSH
28840: LD_INT 112
28842: EQUAL
28843: IFFALSE 28853
// sStu := true ;
28845: LD_ADDR_EXP 102
28849: PUSH
28850: LD_INT 1
28852: ST_TO_ADDR
// if p3 = 113 then
28853: LD_VAR 0 3
28857: PUSH
28858: LD_INT 113
28860: EQUAL
28861: IFFALSE 28871
// sBazooka := true ;
28863: LD_ADDR_EXP 105
28867: PUSH
28868: LD_INT 1
28870: ST_TO_ADDR
// if p3 = 114 then
28871: LD_VAR 0 3
28875: PUSH
28876: LD_INT 114
28878: EQUAL
28879: IFFALSE 28889
// sMortar := true ;
28881: LD_ADDR_EXP 106
28885: PUSH
28886: LD_INT 1
28888: ST_TO_ADDR
// if p3 = 115 then
28889: LD_VAR 0 3
28893: PUSH
28894: LD_INT 115
28896: EQUAL
28897: IFFALSE 28907
// sRanger := true ;
28899: LD_ADDR_EXP 116
28903: PUSH
28904: LD_INT 1
28906: ST_TO_ADDR
// end ; if p2 = 101 then
28907: LD_VAR 0 2
28911: PUSH
28912: LD_INT 101
28914: EQUAL
28915: IFFALSE 29043
// begin case p3 of 1 :
28917: LD_VAR 0 3
28921: PUSH
28922: LD_INT 1
28924: DOUBLE
28925: EQUAL
28926: IFTRUE 28930
28928: GO 28937
28930: POP
// hHackUnlimitedResources ; 2 :
28931: CALL 40080 0 0
28935: GO 29043
28937: LD_INT 2
28939: DOUBLE
28940: EQUAL
28941: IFTRUE 28945
28943: GO 28952
28945: POP
// hHackSetLevel10 ; 3 :
28946: CALL 40213 0 0
28950: GO 29043
28952: LD_INT 3
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28967
28960: POP
// hHackSetLevel10YourUnits ; 4 :
28961: CALL 40298 0 0
28965: GO 29043
28967: LD_INT 4
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 28982
28975: POP
// hHackInvincible ; 5 :
28976: CALL 40746 0 0
28980: GO 29043
28982: LD_INT 5
28984: DOUBLE
28985: EQUAL
28986: IFTRUE 28990
28988: GO 28997
28990: POP
// hHackInvisible ; 6 :
28991: CALL 40857 0 0
28995: GO 29043
28997: LD_INT 6
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29012
29005: POP
// hHackChangeYourSide ; 7 :
29006: CALL 40914 0 0
29010: GO 29043
29012: LD_INT 7
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29027
29020: POP
// hHackChangeUnitSide ; 8 :
29021: CALL 40956 0 0
29025: GO 29043
29027: LD_INT 8
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29042
29035: POP
// hHackFog ; end ;
29036: CALL 41057 0 0
29040: GO 29043
29042: POP
// end ; end ;
29043: LD_VAR 0 7
29047: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
29048: GO 29050
29050: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29051: LD_STRING initStreamRollete();
29053: PPUSH
29054: CALL_OW 559
// InitStreamMode ;
29058: CALL 29067 0 0
// DefineStreamItems ( ) ;
29062: CALL 29507 0 0
// end ;
29066: END
// function InitStreamMode ; begin
29067: LD_INT 0
29069: PPUSH
// streamModeActive := false ;
29070: LD_ADDR_EXP 63
29074: PUSH
29075: LD_INT 0
29077: ST_TO_ADDR
// normalCounter := 36 ;
29078: LD_ADDR_EXP 64
29082: PUSH
29083: LD_INT 36
29085: ST_TO_ADDR
// hardcoreCounter := 16 ;
29086: LD_ADDR_EXP 65
29090: PUSH
29091: LD_INT 16
29093: ST_TO_ADDR
// sRocket := false ;
29094: LD_ADDR_EXP 68
29098: PUSH
29099: LD_INT 0
29101: ST_TO_ADDR
// sSpeed := false ;
29102: LD_ADDR_EXP 67
29106: PUSH
29107: LD_INT 0
29109: ST_TO_ADDR
// sEngine := false ;
29110: LD_ADDR_EXP 69
29114: PUSH
29115: LD_INT 0
29117: ST_TO_ADDR
// sSpec := false ;
29118: LD_ADDR_EXP 66
29122: PUSH
29123: LD_INT 0
29125: ST_TO_ADDR
// sLevel := false ;
29126: LD_ADDR_EXP 70
29130: PUSH
29131: LD_INT 0
29133: ST_TO_ADDR
// sArmoury := false ;
29134: LD_ADDR_EXP 71
29138: PUSH
29139: LD_INT 0
29141: ST_TO_ADDR
// sRadar := false ;
29142: LD_ADDR_EXP 72
29146: PUSH
29147: LD_INT 0
29149: ST_TO_ADDR
// sBunker := false ;
29150: LD_ADDR_EXP 73
29154: PUSH
29155: LD_INT 0
29157: ST_TO_ADDR
// sHack := false ;
29158: LD_ADDR_EXP 74
29162: PUSH
29163: LD_INT 0
29165: ST_TO_ADDR
// sFire := false ;
29166: LD_ADDR_EXP 75
29170: PUSH
29171: LD_INT 0
29173: ST_TO_ADDR
// sRefresh := false ;
29174: LD_ADDR_EXP 76
29178: PUSH
29179: LD_INT 0
29181: ST_TO_ADDR
// sExp := false ;
29182: LD_ADDR_EXP 77
29186: PUSH
29187: LD_INT 0
29189: ST_TO_ADDR
// sDepot := false ;
29190: LD_ADDR_EXP 78
29194: PUSH
29195: LD_INT 0
29197: ST_TO_ADDR
// sFlag := false ;
29198: LD_ADDR_EXP 79
29202: PUSH
29203: LD_INT 0
29205: ST_TO_ADDR
// sKamikadze := false ;
29206: LD_ADDR_EXP 87
29210: PUSH
29211: LD_INT 0
29213: ST_TO_ADDR
// sTroll := false ;
29214: LD_ADDR_EXP 88
29218: PUSH
29219: LD_INT 0
29221: ST_TO_ADDR
// sSlow := false ;
29222: LD_ADDR_EXP 89
29226: PUSH
29227: LD_INT 0
29229: ST_TO_ADDR
// sLack := false ;
29230: LD_ADDR_EXP 90
29234: PUSH
29235: LD_INT 0
29237: ST_TO_ADDR
// sTank := false ;
29238: LD_ADDR_EXP 92
29242: PUSH
29243: LD_INT 0
29245: ST_TO_ADDR
// sRemote := false ;
29246: LD_ADDR_EXP 93
29250: PUSH
29251: LD_INT 0
29253: ST_TO_ADDR
// sPowell := false ;
29254: LD_ADDR_EXP 94
29258: PUSH
29259: LD_INT 0
29261: ST_TO_ADDR
// sTeleport := false ;
29262: LD_ADDR_EXP 97
29266: PUSH
29267: LD_INT 0
29269: ST_TO_ADDR
// sOilTower := false ;
29270: LD_ADDR_EXP 99
29274: PUSH
29275: LD_INT 0
29277: ST_TO_ADDR
// sShovel := false ;
29278: LD_ADDR_EXP 100
29282: PUSH
29283: LD_INT 0
29285: ST_TO_ADDR
// sSheik := false ;
29286: LD_ADDR_EXP 101
29290: PUSH
29291: LD_INT 0
29293: ST_TO_ADDR
// sEarthquake := false ;
29294: LD_ADDR_EXP 103
29298: PUSH
29299: LD_INT 0
29301: ST_TO_ADDR
// sAI := false ;
29302: LD_ADDR_EXP 104
29306: PUSH
29307: LD_INT 0
29309: ST_TO_ADDR
// sCargo := false ;
29310: LD_ADDR_EXP 107
29314: PUSH
29315: LD_INT 0
29317: ST_TO_ADDR
// sDLaser := false ;
29318: LD_ADDR_EXP 108
29322: PUSH
29323: LD_INT 0
29325: ST_TO_ADDR
// sExchange := false ;
29326: LD_ADDR_EXP 109
29330: PUSH
29331: LD_INT 0
29333: ST_TO_ADDR
// sFac := false ;
29334: LD_ADDR_EXP 110
29338: PUSH
29339: LD_INT 0
29341: ST_TO_ADDR
// sPower := false ;
29342: LD_ADDR_EXP 111
29346: PUSH
29347: LD_INT 0
29349: ST_TO_ADDR
// sRandom := false ;
29350: LD_ADDR_EXP 112
29354: PUSH
29355: LD_INT 0
29357: ST_TO_ADDR
// sShield := false ;
29358: LD_ADDR_EXP 113
29362: PUSH
29363: LD_INT 0
29365: ST_TO_ADDR
// sTime := false ;
29366: LD_ADDR_EXP 114
29370: PUSH
29371: LD_INT 0
29373: ST_TO_ADDR
// sTools := false ;
29374: LD_ADDR_EXP 115
29378: PUSH
29379: LD_INT 0
29381: ST_TO_ADDR
// sSold := false ;
29382: LD_ADDR_EXP 80
29386: PUSH
29387: LD_INT 0
29389: ST_TO_ADDR
// sDiff := false ;
29390: LD_ADDR_EXP 81
29394: PUSH
29395: LD_INT 0
29397: ST_TO_ADDR
// sFog := false ;
29398: LD_ADDR_EXP 84
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
// sReset := false ;
29406: LD_ADDR_EXP 85
29410: PUSH
29411: LD_INT 0
29413: ST_TO_ADDR
// sSun := false ;
29414: LD_ADDR_EXP 86
29418: PUSH
29419: LD_INT 0
29421: ST_TO_ADDR
// sTiger := false ;
29422: LD_ADDR_EXP 82
29426: PUSH
29427: LD_INT 0
29429: ST_TO_ADDR
// sBomb := false ;
29430: LD_ADDR_EXP 83
29434: PUSH
29435: LD_INT 0
29437: ST_TO_ADDR
// sWound := false ;
29438: LD_ADDR_EXP 91
29442: PUSH
29443: LD_INT 0
29445: ST_TO_ADDR
// sBetray := false ;
29446: LD_ADDR_EXP 95
29450: PUSH
29451: LD_INT 0
29453: ST_TO_ADDR
// sContamin := false ;
29454: LD_ADDR_EXP 96
29458: PUSH
29459: LD_INT 0
29461: ST_TO_ADDR
// sOil := false ;
29462: LD_ADDR_EXP 98
29466: PUSH
29467: LD_INT 0
29469: ST_TO_ADDR
// sStu := false ;
29470: LD_ADDR_EXP 102
29474: PUSH
29475: LD_INT 0
29477: ST_TO_ADDR
// sBazooka := false ;
29478: LD_ADDR_EXP 105
29482: PUSH
29483: LD_INT 0
29485: ST_TO_ADDR
// sMortar := false ;
29486: LD_ADDR_EXP 106
29490: PUSH
29491: LD_INT 0
29493: ST_TO_ADDR
// sRanger := false ;
29494: LD_ADDR_EXP 116
29498: PUSH
29499: LD_INT 0
29501: ST_TO_ADDR
// end ;
29502: LD_VAR 0 1
29506: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
29507: LD_INT 0
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
// result := [ ] ;
29514: LD_ADDR_VAR 0 1
29518: PUSH
29519: EMPTY
29520: ST_TO_ADDR
// if campaign_id = 1 then
29521: LD_OWVAR 69
29525: PUSH
29526: LD_INT 1
29528: EQUAL
29529: IFFALSE 32467
// begin case mission_number of 1 :
29531: LD_OWVAR 70
29535: PUSH
29536: LD_INT 1
29538: DOUBLE
29539: EQUAL
29540: IFTRUE 29544
29542: GO 29608
29544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
29545: LD_ADDR_VAR 0 1
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: LD_INT 4
29555: PUSH
29556: LD_INT 11
29558: PUSH
29559: LD_INT 12
29561: PUSH
29562: LD_INT 15
29564: PUSH
29565: LD_INT 16
29567: PUSH
29568: LD_INT 22
29570: PUSH
29571: LD_INT 23
29573: PUSH
29574: LD_INT 26
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 101
29590: PUSH
29591: LD_INT 102
29593: PUSH
29594: LD_INT 106
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: ST_TO_ADDR
29606: GO 32465
29608: LD_INT 2
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29688
29616: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
29617: LD_ADDR_VAR 0 1
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: LD_INT 4
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 12
29633: PUSH
29634: LD_INT 15
29636: PUSH
29637: LD_INT 16
29639: PUSH
29640: LD_INT 22
29642: PUSH
29643: LD_INT 23
29645: PUSH
29646: LD_INT 26
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 101
29662: PUSH
29663: LD_INT 102
29665: PUSH
29666: LD_INT 105
29668: PUSH
29669: LD_INT 106
29671: PUSH
29672: LD_INT 108
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: ST_TO_ADDR
29686: GO 32465
29688: LD_INT 3
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29696
29694: GO 29772
29696: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
29697: LD_ADDR_VAR 0 1
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: LD_INT 5
29710: PUSH
29711: LD_INT 11
29713: PUSH
29714: LD_INT 12
29716: PUSH
29717: LD_INT 15
29719: PUSH
29720: LD_INT 16
29722: PUSH
29723: LD_INT 22
29725: PUSH
29726: LD_INT 26
29728: PUSH
29729: LD_INT 36
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 101
29746: PUSH
29747: LD_INT 102
29749: PUSH
29750: LD_INT 105
29752: PUSH
29753: LD_INT 106
29755: PUSH
29756: LD_INT 108
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: ST_TO_ADDR
29770: GO 32465
29772: LD_INT 4
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29864
29780: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
29781: LD_ADDR_VAR 0 1
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: LD_INT 4
29791: PUSH
29792: LD_INT 5
29794: PUSH
29795: LD_INT 8
29797: PUSH
29798: LD_INT 11
29800: PUSH
29801: LD_INT 12
29803: PUSH
29804: LD_INT 15
29806: PUSH
29807: LD_INT 16
29809: PUSH
29810: LD_INT 22
29812: PUSH
29813: LD_INT 23
29815: PUSH
29816: LD_INT 26
29818: PUSH
29819: LD_INT 36
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 101
29838: PUSH
29839: LD_INT 102
29841: PUSH
29842: LD_INT 105
29844: PUSH
29845: LD_INT 106
29847: PUSH
29848: LD_INT 108
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: ST_TO_ADDR
29862: GO 32465
29864: LD_INT 5
29866: DOUBLE
29867: EQUAL
29868: IFTRUE 29872
29870: GO 29972
29872: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29873: LD_ADDR_VAR 0 1
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: LD_INT 4
29883: PUSH
29884: LD_INT 5
29886: PUSH
29887: LD_INT 6
29889: PUSH
29890: LD_INT 8
29892: PUSH
29893: LD_INT 11
29895: PUSH
29896: LD_INT 12
29898: PUSH
29899: LD_INT 15
29901: PUSH
29902: LD_INT 16
29904: PUSH
29905: LD_INT 22
29907: PUSH
29908: LD_INT 23
29910: PUSH
29911: LD_INT 25
29913: PUSH
29914: LD_INT 26
29916: PUSH
29917: LD_INT 36
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 101
29938: PUSH
29939: LD_INT 102
29941: PUSH
29942: LD_INT 105
29944: PUSH
29945: LD_INT 106
29947: PUSH
29948: LD_INT 108
29950: PUSH
29951: LD_INT 109
29953: PUSH
29954: LD_INT 112
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: ST_TO_ADDR
29970: GO 32465
29972: LD_INT 6
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 30100
29980: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29981: LD_ADDR_VAR 0 1
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 4
29991: PUSH
29992: LD_INT 5
29994: PUSH
29995: LD_INT 6
29997: PUSH
29998: LD_INT 8
30000: PUSH
30001: LD_INT 11
30003: PUSH
30004: LD_INT 12
30006: PUSH
30007: LD_INT 15
30009: PUSH
30010: LD_INT 16
30012: PUSH
30013: LD_INT 20
30015: PUSH
30016: LD_INT 21
30018: PUSH
30019: LD_INT 22
30021: PUSH
30022: LD_INT 23
30024: PUSH
30025: LD_INT 25
30027: PUSH
30028: LD_INT 26
30030: PUSH
30031: LD_INT 30
30033: PUSH
30034: LD_INT 31
30036: PUSH
30037: LD_INT 32
30039: PUSH
30040: LD_INT 36
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 101
30066: PUSH
30067: LD_INT 102
30069: PUSH
30070: LD_INT 105
30072: PUSH
30073: LD_INT 106
30075: PUSH
30076: LD_INT 108
30078: PUSH
30079: LD_INT 109
30081: PUSH
30082: LD_INT 112
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 32465
30100: LD_INT 7
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30208
30108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
30109: LD_ADDR_VAR 0 1
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 4
30119: PUSH
30120: LD_INT 5
30122: PUSH
30123: LD_INT 7
30125: PUSH
30126: LD_INT 11
30128: PUSH
30129: LD_INT 12
30131: PUSH
30132: LD_INT 15
30134: PUSH
30135: LD_INT 16
30137: PUSH
30138: LD_INT 20
30140: PUSH
30141: LD_INT 21
30143: PUSH
30144: LD_INT 22
30146: PUSH
30147: LD_INT 23
30149: PUSH
30150: LD_INT 25
30152: PUSH
30153: LD_INT 26
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 101
30174: PUSH
30175: LD_INT 102
30177: PUSH
30178: LD_INT 103
30180: PUSH
30181: LD_INT 105
30183: PUSH
30184: LD_INT 106
30186: PUSH
30187: LD_INT 108
30189: PUSH
30190: LD_INT 112
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: ST_TO_ADDR
30206: GO 32465
30208: LD_INT 8
30210: DOUBLE
30211: EQUAL
30212: IFTRUE 30216
30214: GO 30344
30216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
30217: LD_ADDR_VAR 0 1
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 4
30227: PUSH
30228: LD_INT 5
30230: PUSH
30231: LD_INT 6
30233: PUSH
30234: LD_INT 7
30236: PUSH
30237: LD_INT 8
30239: PUSH
30240: LD_INT 11
30242: PUSH
30243: LD_INT 12
30245: PUSH
30246: LD_INT 15
30248: PUSH
30249: LD_INT 16
30251: PUSH
30252: LD_INT 20
30254: PUSH
30255: LD_INT 21
30257: PUSH
30258: LD_INT 22
30260: PUSH
30261: LD_INT 23
30263: PUSH
30264: LD_INT 25
30266: PUSH
30267: LD_INT 26
30269: PUSH
30270: LD_INT 30
30272: PUSH
30273: LD_INT 31
30275: PUSH
30276: LD_INT 32
30278: PUSH
30279: LD_INT 36
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 101
30306: PUSH
30307: LD_INT 102
30309: PUSH
30310: LD_INT 103
30312: PUSH
30313: LD_INT 105
30315: PUSH
30316: LD_INT 106
30318: PUSH
30319: LD_INT 108
30321: PUSH
30322: LD_INT 109
30324: PUSH
30325: LD_INT 112
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: ST_TO_ADDR
30342: GO 32465
30344: LD_INT 9
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30488
30352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
30353: LD_ADDR_VAR 0 1
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: LD_INT 4
30363: PUSH
30364: LD_INT 5
30366: PUSH
30367: LD_INT 6
30369: PUSH
30370: LD_INT 7
30372: PUSH
30373: LD_INT 8
30375: PUSH
30376: LD_INT 11
30378: PUSH
30379: LD_INT 12
30381: PUSH
30382: LD_INT 15
30384: PUSH
30385: LD_INT 16
30387: PUSH
30388: LD_INT 20
30390: PUSH
30391: LD_INT 21
30393: PUSH
30394: LD_INT 22
30396: PUSH
30397: LD_INT 23
30399: PUSH
30400: LD_INT 25
30402: PUSH
30403: LD_INT 26
30405: PUSH
30406: LD_INT 28
30408: PUSH
30409: LD_INT 30
30411: PUSH
30412: LD_INT 31
30414: PUSH
30415: LD_INT 32
30417: PUSH
30418: LD_INT 36
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 101
30446: PUSH
30447: LD_INT 102
30449: PUSH
30450: LD_INT 103
30452: PUSH
30453: LD_INT 105
30455: PUSH
30456: LD_INT 106
30458: PUSH
30459: LD_INT 108
30461: PUSH
30462: LD_INT 109
30464: PUSH
30465: LD_INT 112
30467: PUSH
30468: LD_INT 114
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 32465
30488: LD_INT 10
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30680
30496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
30497: LD_ADDR_VAR 0 1
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 4
30507: PUSH
30508: LD_INT 5
30510: PUSH
30511: LD_INT 6
30513: PUSH
30514: LD_INT 7
30516: PUSH
30517: LD_INT 8
30519: PUSH
30520: LD_INT 9
30522: PUSH
30523: LD_INT 10
30525: PUSH
30526: LD_INT 11
30528: PUSH
30529: LD_INT 12
30531: PUSH
30532: LD_INT 13
30534: PUSH
30535: LD_INT 14
30537: PUSH
30538: LD_INT 15
30540: PUSH
30541: LD_INT 16
30543: PUSH
30544: LD_INT 17
30546: PUSH
30547: LD_INT 18
30549: PUSH
30550: LD_INT 19
30552: PUSH
30553: LD_INT 20
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 22
30561: PUSH
30562: LD_INT 23
30564: PUSH
30565: LD_INT 24
30567: PUSH
30568: LD_INT 25
30570: PUSH
30571: LD_INT 26
30573: PUSH
30574: LD_INT 28
30576: PUSH
30577: LD_INT 30
30579: PUSH
30580: LD_INT 31
30582: PUSH
30583: LD_INT 32
30585: PUSH
30586: LD_INT 36
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 101
30622: PUSH
30623: LD_INT 102
30625: PUSH
30626: LD_INT 103
30628: PUSH
30629: LD_INT 104
30631: PUSH
30632: LD_INT 105
30634: PUSH
30635: LD_INT 106
30637: PUSH
30638: LD_INT 107
30640: PUSH
30641: LD_INT 108
30643: PUSH
30644: LD_INT 109
30646: PUSH
30647: LD_INT 110
30649: PUSH
30650: LD_INT 111
30652: PUSH
30653: LD_INT 112
30655: PUSH
30656: LD_INT 114
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: ST_TO_ADDR
30678: GO 32465
30680: LD_INT 11
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30880
30688: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
30689: LD_ADDR_VAR 0 1
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: LD_INT 5
30705: PUSH
30706: LD_INT 6
30708: PUSH
30709: LD_INT 7
30711: PUSH
30712: LD_INT 8
30714: PUSH
30715: LD_INT 9
30717: PUSH
30718: LD_INT 10
30720: PUSH
30721: LD_INT 11
30723: PUSH
30724: LD_INT 12
30726: PUSH
30727: LD_INT 13
30729: PUSH
30730: LD_INT 14
30732: PUSH
30733: LD_INT 15
30735: PUSH
30736: LD_INT 16
30738: PUSH
30739: LD_INT 17
30741: PUSH
30742: LD_INT 18
30744: PUSH
30745: LD_INT 19
30747: PUSH
30748: LD_INT 20
30750: PUSH
30751: LD_INT 21
30753: PUSH
30754: LD_INT 22
30756: PUSH
30757: LD_INT 23
30759: PUSH
30760: LD_INT 24
30762: PUSH
30763: LD_INT 25
30765: PUSH
30766: LD_INT 26
30768: PUSH
30769: LD_INT 28
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 31
30777: PUSH
30778: LD_INT 32
30780: PUSH
30781: LD_INT 34
30783: PUSH
30784: LD_INT 36
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 101
30822: PUSH
30823: LD_INT 102
30825: PUSH
30826: LD_INT 103
30828: PUSH
30829: LD_INT 104
30831: PUSH
30832: LD_INT 105
30834: PUSH
30835: LD_INT 106
30837: PUSH
30838: LD_INT 107
30840: PUSH
30841: LD_INT 108
30843: PUSH
30844: LD_INT 109
30846: PUSH
30847: LD_INT 110
30849: PUSH
30850: LD_INT 111
30852: PUSH
30853: LD_INT 112
30855: PUSH
30856: LD_INT 114
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: ST_TO_ADDR
30878: GO 32465
30880: LD_INT 12
30882: DOUBLE
30883: EQUAL
30884: IFTRUE 30888
30886: GO 31096
30888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30889: LD_ADDR_VAR 0 1
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: LD_INT 5
30908: PUSH
30909: LD_INT 6
30911: PUSH
30912: LD_INT 7
30914: PUSH
30915: LD_INT 8
30917: PUSH
30918: LD_INT 9
30920: PUSH
30921: LD_INT 10
30923: PUSH
30924: LD_INT 11
30926: PUSH
30927: LD_INT 12
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: LD_INT 14
30935: PUSH
30936: LD_INT 15
30938: PUSH
30939: LD_INT 16
30941: PUSH
30942: LD_INT 17
30944: PUSH
30945: LD_INT 18
30947: PUSH
30948: LD_INT 19
30950: PUSH
30951: LD_INT 20
30953: PUSH
30954: LD_INT 21
30956: PUSH
30957: LD_INT 22
30959: PUSH
30960: LD_INT 23
30962: PUSH
30963: LD_INT 24
30965: PUSH
30966: LD_INT 25
30968: PUSH
30969: LD_INT 26
30971: PUSH
30972: LD_INT 27
30974: PUSH
30975: LD_INT 28
30977: PUSH
30978: LD_INT 30
30980: PUSH
30981: LD_INT 31
30983: PUSH
30984: LD_INT 32
30986: PUSH
30987: LD_INT 33
30989: PUSH
30990: LD_INT 34
30992: PUSH
30993: LD_INT 36
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 101
31034: PUSH
31035: LD_INT 102
31037: PUSH
31038: LD_INT 103
31040: PUSH
31041: LD_INT 104
31043: PUSH
31044: LD_INT 105
31046: PUSH
31047: LD_INT 106
31049: PUSH
31050: LD_INT 107
31052: PUSH
31053: LD_INT 108
31055: PUSH
31056: LD_INT 109
31058: PUSH
31059: LD_INT 110
31061: PUSH
31062: LD_INT 111
31064: PUSH
31065: LD_INT 112
31067: PUSH
31068: LD_INT 113
31070: PUSH
31071: LD_INT 114
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: ST_TO_ADDR
31094: GO 32465
31096: LD_INT 13
31098: DOUBLE
31099: EQUAL
31100: IFTRUE 31104
31102: GO 31300
31104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
31105: LD_ADDR_VAR 0 1
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: LD_INT 5
31124: PUSH
31125: LD_INT 8
31127: PUSH
31128: LD_INT 9
31130: PUSH
31131: LD_INT 10
31133: PUSH
31134: LD_INT 11
31136: PUSH
31137: LD_INT 12
31139: PUSH
31140: LD_INT 14
31142: PUSH
31143: LD_INT 15
31145: PUSH
31146: LD_INT 16
31148: PUSH
31149: LD_INT 17
31151: PUSH
31152: LD_INT 18
31154: PUSH
31155: LD_INT 19
31157: PUSH
31158: LD_INT 20
31160: PUSH
31161: LD_INT 21
31163: PUSH
31164: LD_INT 22
31166: PUSH
31167: LD_INT 23
31169: PUSH
31170: LD_INT 24
31172: PUSH
31173: LD_INT 25
31175: PUSH
31176: LD_INT 26
31178: PUSH
31179: LD_INT 27
31181: PUSH
31182: LD_INT 28
31184: PUSH
31185: LD_INT 30
31187: PUSH
31188: LD_INT 31
31190: PUSH
31191: LD_INT 32
31193: PUSH
31194: LD_INT 33
31196: PUSH
31197: LD_INT 34
31199: PUSH
31200: LD_INT 36
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 101
31238: PUSH
31239: LD_INT 102
31241: PUSH
31242: LD_INT 103
31244: PUSH
31245: LD_INT 104
31247: PUSH
31248: LD_INT 105
31250: PUSH
31251: LD_INT 106
31253: PUSH
31254: LD_INT 107
31256: PUSH
31257: LD_INT 108
31259: PUSH
31260: LD_INT 109
31262: PUSH
31263: LD_INT 110
31265: PUSH
31266: LD_INT 111
31268: PUSH
31269: LD_INT 112
31271: PUSH
31272: LD_INT 113
31274: PUSH
31275: LD_INT 114
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: ST_TO_ADDR
31298: GO 32465
31300: LD_INT 14
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31308
31306: GO 31520
31308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
31309: LD_ADDR_VAR 0 1
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: LD_INT 3
31322: PUSH
31323: LD_INT 4
31325: PUSH
31326: LD_INT 5
31328: PUSH
31329: LD_INT 6
31331: PUSH
31332: LD_INT 7
31334: PUSH
31335: LD_INT 8
31337: PUSH
31338: LD_INT 9
31340: PUSH
31341: LD_INT 10
31343: PUSH
31344: LD_INT 11
31346: PUSH
31347: LD_INT 12
31349: PUSH
31350: LD_INT 13
31352: PUSH
31353: LD_INT 14
31355: PUSH
31356: LD_INT 15
31358: PUSH
31359: LD_INT 16
31361: PUSH
31362: LD_INT 17
31364: PUSH
31365: LD_INT 18
31367: PUSH
31368: LD_INT 19
31370: PUSH
31371: LD_INT 20
31373: PUSH
31374: LD_INT 21
31376: PUSH
31377: LD_INT 22
31379: PUSH
31380: LD_INT 23
31382: PUSH
31383: LD_INT 24
31385: PUSH
31386: LD_INT 25
31388: PUSH
31389: LD_INT 26
31391: PUSH
31392: LD_INT 27
31394: PUSH
31395: LD_INT 28
31397: PUSH
31398: LD_INT 29
31400: PUSH
31401: LD_INT 30
31403: PUSH
31404: LD_INT 31
31406: PUSH
31407: LD_INT 32
31409: PUSH
31410: LD_INT 33
31412: PUSH
31413: LD_INT 34
31415: PUSH
31416: LD_INT 36
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 101
31458: PUSH
31459: LD_INT 102
31461: PUSH
31462: LD_INT 103
31464: PUSH
31465: LD_INT 104
31467: PUSH
31468: LD_INT 105
31470: PUSH
31471: LD_INT 106
31473: PUSH
31474: LD_INT 107
31476: PUSH
31477: LD_INT 108
31479: PUSH
31480: LD_INT 109
31482: PUSH
31483: LD_INT 110
31485: PUSH
31486: LD_INT 111
31488: PUSH
31489: LD_INT 112
31491: PUSH
31492: LD_INT 113
31494: PUSH
31495: LD_INT 114
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: ST_TO_ADDR
31518: GO 32465
31520: LD_INT 15
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31740
31528: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
31529: LD_ADDR_VAR 0 1
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: LD_INT 3
31542: PUSH
31543: LD_INT 4
31545: PUSH
31546: LD_INT 5
31548: PUSH
31549: LD_INT 6
31551: PUSH
31552: LD_INT 7
31554: PUSH
31555: LD_INT 8
31557: PUSH
31558: LD_INT 9
31560: PUSH
31561: LD_INT 10
31563: PUSH
31564: LD_INT 11
31566: PUSH
31567: LD_INT 12
31569: PUSH
31570: LD_INT 13
31572: PUSH
31573: LD_INT 14
31575: PUSH
31576: LD_INT 15
31578: PUSH
31579: LD_INT 16
31581: PUSH
31582: LD_INT 17
31584: PUSH
31585: LD_INT 18
31587: PUSH
31588: LD_INT 19
31590: PUSH
31591: LD_INT 20
31593: PUSH
31594: LD_INT 21
31596: PUSH
31597: LD_INT 22
31599: PUSH
31600: LD_INT 23
31602: PUSH
31603: LD_INT 24
31605: PUSH
31606: LD_INT 25
31608: PUSH
31609: LD_INT 26
31611: PUSH
31612: LD_INT 27
31614: PUSH
31615: LD_INT 28
31617: PUSH
31618: LD_INT 29
31620: PUSH
31621: LD_INT 30
31623: PUSH
31624: LD_INT 31
31626: PUSH
31627: LD_INT 32
31629: PUSH
31630: LD_INT 33
31632: PUSH
31633: LD_INT 34
31635: PUSH
31636: LD_INT 36
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 101
31678: PUSH
31679: LD_INT 102
31681: PUSH
31682: LD_INT 103
31684: PUSH
31685: LD_INT 104
31687: PUSH
31688: LD_INT 105
31690: PUSH
31691: LD_INT 106
31693: PUSH
31694: LD_INT 107
31696: PUSH
31697: LD_INT 108
31699: PUSH
31700: LD_INT 109
31702: PUSH
31703: LD_INT 110
31705: PUSH
31706: LD_INT 111
31708: PUSH
31709: LD_INT 112
31711: PUSH
31712: LD_INT 113
31714: PUSH
31715: LD_INT 114
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: ST_TO_ADDR
31738: GO 32465
31740: LD_INT 16
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31872
31748: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
31749: LD_ADDR_VAR 0 1
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 4
31759: PUSH
31760: LD_INT 5
31762: PUSH
31763: LD_INT 7
31765: PUSH
31766: LD_INT 11
31768: PUSH
31769: LD_INT 12
31771: PUSH
31772: LD_INT 15
31774: PUSH
31775: LD_INT 16
31777: PUSH
31778: LD_INT 20
31780: PUSH
31781: LD_INT 21
31783: PUSH
31784: LD_INT 22
31786: PUSH
31787: LD_INT 23
31789: PUSH
31790: LD_INT 25
31792: PUSH
31793: LD_INT 26
31795: PUSH
31796: LD_INT 30
31798: PUSH
31799: LD_INT 31
31801: PUSH
31802: LD_INT 32
31804: PUSH
31805: LD_INT 33
31807: PUSH
31808: LD_INT 34
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 101
31834: PUSH
31835: LD_INT 102
31837: PUSH
31838: LD_INT 103
31840: PUSH
31841: LD_INT 106
31843: PUSH
31844: LD_INT 108
31846: PUSH
31847: LD_INT 112
31849: PUSH
31850: LD_INT 113
31852: PUSH
31853: LD_INT 114
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: ST_TO_ADDR
31870: GO 32465
31872: LD_INT 17
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 32092
31880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31881: LD_ADDR_VAR 0 1
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: LD_INT 4
31897: PUSH
31898: LD_INT 5
31900: PUSH
31901: LD_INT 6
31903: PUSH
31904: LD_INT 7
31906: PUSH
31907: LD_INT 8
31909: PUSH
31910: LD_INT 9
31912: PUSH
31913: LD_INT 10
31915: PUSH
31916: LD_INT 11
31918: PUSH
31919: LD_INT 12
31921: PUSH
31922: LD_INT 13
31924: PUSH
31925: LD_INT 14
31927: PUSH
31928: LD_INT 15
31930: PUSH
31931: LD_INT 16
31933: PUSH
31934: LD_INT 17
31936: PUSH
31937: LD_INT 18
31939: PUSH
31940: LD_INT 19
31942: PUSH
31943: LD_INT 20
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 22
31951: PUSH
31952: LD_INT 23
31954: PUSH
31955: LD_INT 24
31957: PUSH
31958: LD_INT 25
31960: PUSH
31961: LD_INT 26
31963: PUSH
31964: LD_INT 27
31966: PUSH
31967: LD_INT 28
31969: PUSH
31970: LD_INT 29
31972: PUSH
31973: LD_INT 30
31975: PUSH
31976: LD_INT 31
31978: PUSH
31979: LD_INT 32
31981: PUSH
31982: LD_INT 33
31984: PUSH
31985: LD_INT 34
31987: PUSH
31988: LD_INT 36
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 101
32030: PUSH
32031: LD_INT 102
32033: PUSH
32034: LD_INT 103
32036: PUSH
32037: LD_INT 104
32039: PUSH
32040: LD_INT 105
32042: PUSH
32043: LD_INT 106
32045: PUSH
32046: LD_INT 107
32048: PUSH
32049: LD_INT 108
32051: PUSH
32052: LD_INT 109
32054: PUSH
32055: LD_INT 110
32057: PUSH
32058: LD_INT 111
32060: PUSH
32061: LD_INT 112
32063: PUSH
32064: LD_INT 113
32066: PUSH
32067: LD_INT 114
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: ST_TO_ADDR
32090: GO 32465
32092: LD_INT 18
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 32236
32100: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
32101: LD_ADDR_VAR 0 1
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 4
32111: PUSH
32112: LD_INT 5
32114: PUSH
32115: LD_INT 7
32117: PUSH
32118: LD_INT 11
32120: PUSH
32121: LD_INT 12
32123: PUSH
32124: LD_INT 15
32126: PUSH
32127: LD_INT 16
32129: PUSH
32130: LD_INT 20
32132: PUSH
32133: LD_INT 21
32135: PUSH
32136: LD_INT 22
32138: PUSH
32139: LD_INT 23
32141: PUSH
32142: LD_INT 25
32144: PUSH
32145: LD_INT 26
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: LD_INT 31
32153: PUSH
32154: LD_INT 32
32156: PUSH
32157: LD_INT 33
32159: PUSH
32160: LD_INT 34
32162: PUSH
32163: LD_INT 35
32165: PUSH
32166: LD_INT 36
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 101
32194: PUSH
32195: LD_INT 102
32197: PUSH
32198: LD_INT 103
32200: PUSH
32201: LD_INT 106
32203: PUSH
32204: LD_INT 108
32206: PUSH
32207: LD_INT 112
32209: PUSH
32210: LD_INT 113
32212: PUSH
32213: LD_INT 114
32215: PUSH
32216: LD_INT 115
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: ST_TO_ADDR
32234: GO 32465
32236: LD_INT 19
32238: DOUBLE
32239: EQUAL
32240: IFTRUE 32244
32242: GO 32464
32244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
32245: LD_ADDR_VAR 0 1
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: LD_INT 6
32267: PUSH
32268: LD_INT 7
32270: PUSH
32271: LD_INT 8
32273: PUSH
32274: LD_INT 9
32276: PUSH
32277: LD_INT 10
32279: PUSH
32280: LD_INT 11
32282: PUSH
32283: LD_INT 12
32285: PUSH
32286: LD_INT 13
32288: PUSH
32289: LD_INT 14
32291: PUSH
32292: LD_INT 15
32294: PUSH
32295: LD_INT 16
32297: PUSH
32298: LD_INT 17
32300: PUSH
32301: LD_INT 18
32303: PUSH
32304: LD_INT 19
32306: PUSH
32307: LD_INT 20
32309: PUSH
32310: LD_INT 21
32312: PUSH
32313: LD_INT 22
32315: PUSH
32316: LD_INT 23
32318: PUSH
32319: LD_INT 24
32321: PUSH
32322: LD_INT 25
32324: PUSH
32325: LD_INT 26
32327: PUSH
32328: LD_INT 27
32330: PUSH
32331: LD_INT 28
32333: PUSH
32334: LD_INT 29
32336: PUSH
32337: LD_INT 30
32339: PUSH
32340: LD_INT 31
32342: PUSH
32343: LD_INT 32
32345: PUSH
32346: LD_INT 33
32348: PUSH
32349: LD_INT 34
32351: PUSH
32352: LD_INT 35
32354: PUSH
32355: LD_INT 36
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 101
32398: PUSH
32399: LD_INT 102
32401: PUSH
32402: LD_INT 103
32404: PUSH
32405: LD_INT 104
32407: PUSH
32408: LD_INT 105
32410: PUSH
32411: LD_INT 106
32413: PUSH
32414: LD_INT 107
32416: PUSH
32417: LD_INT 108
32419: PUSH
32420: LD_INT 109
32422: PUSH
32423: LD_INT 110
32425: PUSH
32426: LD_INT 111
32428: PUSH
32429: LD_INT 112
32431: PUSH
32432: LD_INT 113
32434: PUSH
32435: LD_INT 114
32437: PUSH
32438: LD_INT 115
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: ST_TO_ADDR
32462: GO 32465
32464: POP
// end else
32465: GO 32684
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
32467: LD_ADDR_VAR 0 1
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: LD_INT 5
32486: PUSH
32487: LD_INT 6
32489: PUSH
32490: LD_INT 7
32492: PUSH
32493: LD_INT 8
32495: PUSH
32496: LD_INT 9
32498: PUSH
32499: LD_INT 10
32501: PUSH
32502: LD_INT 11
32504: PUSH
32505: LD_INT 12
32507: PUSH
32508: LD_INT 13
32510: PUSH
32511: LD_INT 14
32513: PUSH
32514: LD_INT 15
32516: PUSH
32517: LD_INT 16
32519: PUSH
32520: LD_INT 17
32522: PUSH
32523: LD_INT 18
32525: PUSH
32526: LD_INT 19
32528: PUSH
32529: LD_INT 20
32531: PUSH
32532: LD_INT 21
32534: PUSH
32535: LD_INT 22
32537: PUSH
32538: LD_INT 23
32540: PUSH
32541: LD_INT 24
32543: PUSH
32544: LD_INT 25
32546: PUSH
32547: LD_INT 26
32549: PUSH
32550: LD_INT 27
32552: PUSH
32553: LD_INT 28
32555: PUSH
32556: LD_INT 29
32558: PUSH
32559: LD_INT 30
32561: PUSH
32562: LD_INT 31
32564: PUSH
32565: LD_INT 32
32567: PUSH
32568: LD_INT 33
32570: PUSH
32571: LD_INT 34
32573: PUSH
32574: LD_INT 35
32576: PUSH
32577: LD_INT 36
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 101
32620: PUSH
32621: LD_INT 102
32623: PUSH
32624: LD_INT 103
32626: PUSH
32627: LD_INT 104
32629: PUSH
32630: LD_INT 105
32632: PUSH
32633: LD_INT 106
32635: PUSH
32636: LD_INT 107
32638: PUSH
32639: LD_INT 108
32641: PUSH
32642: LD_INT 109
32644: PUSH
32645: LD_INT 110
32647: PUSH
32648: LD_INT 111
32650: PUSH
32651: LD_INT 112
32653: PUSH
32654: LD_INT 113
32656: PUSH
32657: LD_INT 114
32659: PUSH
32660: LD_INT 115
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// if result then
32684: LD_VAR 0 1
32688: IFFALSE 32977
// begin normal :=  ;
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_STRING 
32697: ST_TO_ADDR
// hardcore :=  ;
32698: LD_ADDR_VAR 0 4
32702: PUSH
32703: LD_STRING 
32705: ST_TO_ADDR
// for i = 1 to normalCounter do
32706: LD_ADDR_VAR 0 5
32710: PUSH
32711: DOUBLE
32712: LD_INT 1
32714: DEC
32715: ST_TO_ADDR
32716: LD_EXP 64
32720: PUSH
32721: FOR_TO
32722: IFFALSE 32823
// begin tmp := 0 ;
32724: LD_ADDR_VAR 0 2
32728: PUSH
32729: LD_STRING 0
32731: ST_TO_ADDR
// if result [ 1 ] then
32732: LD_VAR 0 1
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: IFFALSE 32805
// if result [ 1 ] [ 1 ] = i then
32742: LD_VAR 0 1
32746: PUSH
32747: LD_INT 1
32749: ARRAY
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: PUSH
32755: LD_VAR 0 5
32759: EQUAL
32760: IFFALSE 32805
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32762: LD_ADDR_VAR 0 1
32766: PUSH
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_INT 1
32774: PPUSH
32775: LD_VAR 0 1
32779: PUSH
32780: LD_INT 1
32782: ARRAY
32783: PPUSH
32784: LD_INT 1
32786: PPUSH
32787: CALL_OW 3
32791: PPUSH
32792: CALL_OW 1
32796: ST_TO_ADDR
// tmp := 1 ;
32797: LD_ADDR_VAR 0 2
32801: PUSH
32802: LD_STRING 1
32804: ST_TO_ADDR
// end ; normal := normal & tmp ;
32805: LD_ADDR_VAR 0 3
32809: PUSH
32810: LD_VAR 0 3
32814: PUSH
32815: LD_VAR 0 2
32819: STR
32820: ST_TO_ADDR
// end ;
32821: GO 32721
32823: POP
32824: POP
// for i = 1 to hardcoreCounter do
32825: LD_ADDR_VAR 0 5
32829: PUSH
32830: DOUBLE
32831: LD_INT 1
32833: DEC
32834: ST_TO_ADDR
32835: LD_EXP 65
32839: PUSH
32840: FOR_TO
32841: IFFALSE 32946
// begin tmp := 0 ;
32843: LD_ADDR_VAR 0 2
32847: PUSH
32848: LD_STRING 0
32850: ST_TO_ADDR
// if result [ 2 ] then
32851: LD_VAR 0 1
32855: PUSH
32856: LD_INT 2
32858: ARRAY
32859: IFFALSE 32928
// if result [ 2 ] [ 1 ] = 100 + i then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 2
32868: ARRAY
32869: PUSH
32870: LD_INT 1
32872: ARRAY
32873: PUSH
32874: LD_INT 100
32876: PUSH
32877: LD_VAR 0 5
32881: PLUS
32882: EQUAL
32883: IFFALSE 32928
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32885: LD_ADDR_VAR 0 1
32889: PUSH
32890: LD_VAR 0 1
32894: PPUSH
32895: LD_INT 2
32897: PPUSH
32898: LD_VAR 0 1
32902: PUSH
32903: LD_INT 2
32905: ARRAY
32906: PPUSH
32907: LD_INT 1
32909: PPUSH
32910: CALL_OW 3
32914: PPUSH
32915: CALL_OW 1
32919: ST_TO_ADDR
// tmp := 1 ;
32920: LD_ADDR_VAR 0 2
32924: PUSH
32925: LD_STRING 1
32927: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32928: LD_ADDR_VAR 0 4
32932: PUSH
32933: LD_VAR 0 4
32937: PUSH
32938: LD_VAR 0 2
32942: STR
32943: ST_TO_ADDR
// end ;
32944: GO 32840
32946: POP
32947: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32948: LD_STRING getStreamItemsFromMission("
32950: PUSH
32951: LD_VAR 0 3
32955: STR
32956: PUSH
32957: LD_STRING ","
32959: STR
32960: PUSH
32961: LD_VAR 0 4
32965: STR
32966: PUSH
32967: LD_STRING ")
32969: STR
32970: PPUSH
32971: CALL_OW 559
// end else
32975: GO 32984
// ToLua ( getStreamItemsFromMission("","") ) ;
32977: LD_STRING getStreamItemsFromMission("","")
32979: PPUSH
32980: CALL_OW 559
// end ;
32984: LD_VAR 0 1
32988: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32989: LD_EXP 63
32993: PUSH
32994: LD_EXP 68
32998: AND
32999: IFFALSE 33123
33001: GO 33003
33003: DISABLE
33004: LD_INT 0
33006: PPUSH
33007: PPUSH
// begin enable ;
33008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33009: LD_ADDR_VAR 0 2
33013: PUSH
33014: LD_INT 22
33016: PUSH
33017: LD_OWVAR 2
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 34
33031: PUSH
33032: LD_INT 7
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 34
33041: PUSH
33042: LD_INT 45
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 34
33051: PUSH
33052: LD_INT 28
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 34
33061: PUSH
33062: LD_INT 47
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PPUSH
33080: CALL_OW 69
33084: ST_TO_ADDR
// if not tmp then
33085: LD_VAR 0 2
33089: NOT
33090: IFFALSE 33094
// exit ;
33092: GO 33123
// for i in tmp do
33094: LD_ADDR_VAR 0 1
33098: PUSH
33099: LD_VAR 0 2
33103: PUSH
33104: FOR_IN
33105: IFFALSE 33121
// begin SetLives ( i , 0 ) ;
33107: LD_VAR 0 1
33111: PPUSH
33112: LD_INT 0
33114: PPUSH
33115: CALL_OW 234
// end ;
33119: GO 33104
33121: POP
33122: POP
// end ;
33123: PPOPN 2
33125: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33126: LD_EXP 63
33130: PUSH
33131: LD_EXP 69
33135: AND
33136: IFFALSE 33220
33138: GO 33140
33140: DISABLE
33141: LD_INT 0
33143: PPUSH
33144: PPUSH
// begin enable ;
33145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33146: LD_ADDR_VAR 0 2
33150: PUSH
33151: LD_INT 22
33153: PUSH
33154: LD_OWVAR 2
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 32
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: ST_TO_ADDR
// if not tmp then
33182: LD_VAR 0 2
33186: NOT
33187: IFFALSE 33191
// exit ;
33189: GO 33220
// for i in tmp do
33191: LD_ADDR_VAR 0 1
33195: PUSH
33196: LD_VAR 0 2
33200: PUSH
33201: FOR_IN
33202: IFFALSE 33218
// begin SetLives ( i , 0 ) ;
33204: LD_VAR 0 1
33208: PPUSH
33209: LD_INT 0
33211: PPUSH
33212: CALL_OW 234
// end ;
33216: GO 33201
33218: POP
33219: POP
// end ;
33220: PPOPN 2
33222: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33223: LD_EXP 63
33227: PUSH
33228: LD_EXP 66
33232: AND
33233: IFFALSE 33326
33235: GO 33237
33237: DISABLE
33238: LD_INT 0
33240: PPUSH
// begin enable ;
33241: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33242: LD_ADDR_VAR 0 1
33246: PUSH
33247: LD_INT 22
33249: PUSH
33250: LD_OWVAR 2
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 25
33264: PUSH
33265: LD_INT 5
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 25
33274: PUSH
33275: LD_INT 9
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 25
33284: PUSH
33285: LD_INT 8
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PPUSH
33302: CALL_OW 69
33306: PUSH
33307: FOR_IN
33308: IFFALSE 33324
// begin SetClass ( i , 1 ) ;
33310: LD_VAR 0 1
33314: PPUSH
33315: LD_INT 1
33317: PPUSH
33318: CALL_OW 336
// end ;
33322: GO 33307
33324: POP
33325: POP
// end ;
33326: PPOPN 1
33328: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33329: LD_EXP 63
33333: PUSH
33334: LD_EXP 67
33338: AND
33339: PUSH
33340: LD_OWVAR 65
33344: PUSH
33345: LD_INT 7
33347: LESS
33348: AND
33349: IFFALSE 33363
33351: GO 33353
33353: DISABLE
// begin enable ;
33354: ENABLE
// game_speed := 7 ;
33355: LD_ADDR_OWVAR 65
33359: PUSH
33360: LD_INT 7
33362: ST_TO_ADDR
// end ;
33363: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33364: LD_EXP 63
33368: PUSH
33369: LD_EXP 70
33373: AND
33374: IFFALSE 33576
33376: GO 33378
33378: DISABLE
33379: LD_INT 0
33381: PPUSH
33382: PPUSH
33383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 81
33391: PUSH
33392: LD_OWVAR 2
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 21
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PPUSH
33415: CALL_OW 69
33419: ST_TO_ADDR
// if not tmp then
33420: LD_VAR 0 3
33424: NOT
33425: IFFALSE 33429
// exit ;
33427: GO 33576
// if tmp > 5 then
33429: LD_VAR 0 3
33433: PUSH
33434: LD_INT 5
33436: GREATER
33437: IFFALSE 33449
// k := 5 else
33439: LD_ADDR_VAR 0 2
33443: PUSH
33444: LD_INT 5
33446: ST_TO_ADDR
33447: GO 33459
// k := tmp ;
33449: LD_ADDR_VAR 0 2
33453: PUSH
33454: LD_VAR 0 3
33458: ST_TO_ADDR
// for i := 1 to k do
33459: LD_ADDR_VAR 0 1
33463: PUSH
33464: DOUBLE
33465: LD_INT 1
33467: DEC
33468: ST_TO_ADDR
33469: LD_VAR 0 2
33473: PUSH
33474: FOR_TO
33475: IFFALSE 33574
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33477: LD_VAR 0 3
33481: PUSH
33482: LD_VAR 0 1
33486: ARRAY
33487: PPUSH
33488: LD_VAR 0 1
33492: PUSH
33493: LD_INT 4
33495: MOD
33496: PUSH
33497: LD_INT 1
33499: PLUS
33500: PPUSH
33501: CALL_OW 259
33505: PUSH
33506: LD_INT 10
33508: LESS
33509: IFFALSE 33572
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33511: LD_VAR 0 3
33515: PUSH
33516: LD_VAR 0 1
33520: ARRAY
33521: PPUSH
33522: LD_VAR 0 1
33526: PUSH
33527: LD_INT 4
33529: MOD
33530: PUSH
33531: LD_INT 1
33533: PLUS
33534: PPUSH
33535: LD_VAR 0 3
33539: PUSH
33540: LD_VAR 0 1
33544: ARRAY
33545: PPUSH
33546: LD_VAR 0 1
33550: PUSH
33551: LD_INT 4
33553: MOD
33554: PUSH
33555: LD_INT 1
33557: PLUS
33558: PPUSH
33559: CALL_OW 259
33563: PUSH
33564: LD_INT 1
33566: PLUS
33567: PPUSH
33568: CALL_OW 237
33572: GO 33474
33574: POP
33575: POP
// end ;
33576: PPOPN 3
33578: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33579: LD_EXP 63
33583: PUSH
33584: LD_EXP 71
33588: AND
33589: IFFALSE 33609
33591: GO 33593
33593: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33594: LD_INT 4
33596: PPUSH
33597: LD_OWVAR 2
33601: PPUSH
33602: LD_INT 0
33604: PPUSH
33605: CALL_OW 324
33609: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33610: LD_EXP 63
33614: PUSH
33615: LD_EXP 100
33619: AND
33620: IFFALSE 33640
33622: GO 33624
33624: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33625: LD_INT 19
33627: PPUSH
33628: LD_OWVAR 2
33632: PPUSH
33633: LD_INT 0
33635: PPUSH
33636: CALL_OW 324
33640: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33641: LD_EXP 63
33645: PUSH
33646: LD_EXP 72
33650: AND
33651: IFFALSE 33753
33653: GO 33655
33655: DISABLE
33656: LD_INT 0
33658: PPUSH
33659: PPUSH
// begin enable ;
33660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33661: LD_ADDR_VAR 0 2
33665: PUSH
33666: LD_INT 22
33668: PUSH
33669: LD_OWVAR 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 34
33683: PUSH
33684: LD_INT 11
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 34
33693: PUSH
33694: LD_INT 30
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PPUSH
33710: CALL_OW 69
33714: ST_TO_ADDR
// if not tmp then
33715: LD_VAR 0 2
33719: NOT
33720: IFFALSE 33724
// exit ;
33722: GO 33753
// for i in tmp do
33724: LD_ADDR_VAR 0 1
33728: PUSH
33729: LD_VAR 0 2
33733: PUSH
33734: FOR_IN
33735: IFFALSE 33751
// begin SetLives ( i , 0 ) ;
33737: LD_VAR 0 1
33741: PPUSH
33742: LD_INT 0
33744: PPUSH
33745: CALL_OW 234
// end ;
33749: GO 33734
33751: POP
33752: POP
// end ;
33753: PPOPN 2
33755: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33756: LD_EXP 63
33760: PUSH
33761: LD_EXP 73
33765: AND
33766: IFFALSE 33786
33768: GO 33770
33770: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33771: LD_INT 32
33773: PPUSH
33774: LD_OWVAR 2
33778: PPUSH
33779: LD_INT 0
33781: PPUSH
33782: CALL_OW 324
33786: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33787: LD_EXP 63
33791: PUSH
33792: LD_EXP 74
33796: AND
33797: IFFALSE 33978
33799: GO 33801
33801: DISABLE
33802: LD_INT 0
33804: PPUSH
33805: PPUSH
33806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33807: LD_ADDR_VAR 0 2
33811: PUSH
33812: LD_INT 22
33814: PUSH
33815: LD_OWVAR 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 33
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PPUSH
33838: CALL_OW 69
33842: ST_TO_ADDR
// if not tmp then
33843: LD_VAR 0 2
33847: NOT
33848: IFFALSE 33852
// exit ;
33850: GO 33978
// side := 0 ;
33852: LD_ADDR_VAR 0 3
33856: PUSH
33857: LD_INT 0
33859: ST_TO_ADDR
// for i := 1 to 8 do
33860: LD_ADDR_VAR 0 1
33864: PUSH
33865: DOUBLE
33866: LD_INT 1
33868: DEC
33869: ST_TO_ADDR
33870: LD_INT 8
33872: PUSH
33873: FOR_TO
33874: IFFALSE 33922
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33876: LD_OWVAR 2
33880: PUSH
33881: LD_VAR 0 1
33885: NONEQUAL
33886: PUSH
33887: LD_OWVAR 2
33891: PPUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 81
33901: PUSH
33902: LD_INT 2
33904: EQUAL
33905: AND
33906: IFFALSE 33920
// begin side := i ;
33908: LD_ADDR_VAR 0 3
33912: PUSH
33913: LD_VAR 0 1
33917: ST_TO_ADDR
// break ;
33918: GO 33922
// end ;
33920: GO 33873
33922: POP
33923: POP
// if not side then
33924: LD_VAR 0 3
33928: NOT
33929: IFFALSE 33933
// exit ;
33931: GO 33978
// for i := 1 to tmp do
33933: LD_ADDR_VAR 0 1
33937: PUSH
33938: DOUBLE
33939: LD_INT 1
33941: DEC
33942: ST_TO_ADDR
33943: LD_VAR 0 2
33947: PUSH
33948: FOR_TO
33949: IFFALSE 33976
// if Prob ( 60 ) then
33951: LD_INT 60
33953: PPUSH
33954: CALL_OW 13
33958: IFFALSE 33974
// SetSide ( i , side ) ;
33960: LD_VAR 0 1
33964: PPUSH
33965: LD_VAR 0 3
33969: PPUSH
33970: CALL_OW 235
33974: GO 33948
33976: POP
33977: POP
// end ;
33978: PPOPN 3
33980: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33981: LD_EXP 63
33985: PUSH
33986: LD_EXP 76
33990: AND
33991: IFFALSE 34110
33993: GO 33995
33995: DISABLE
33996: LD_INT 0
33998: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33999: LD_ADDR_VAR 0 1
34003: PUSH
34004: LD_INT 22
34006: PUSH
34007: LD_OWVAR 2
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: LD_INT 23
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: PPUSH
34048: CALL_OW 69
34052: PUSH
34053: FOR_IN
34054: IFFALSE 34108
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34056: LD_VAR 0 1
34060: PPUSH
34061: CALL_OW 257
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 3
34074: PUSH
34075: LD_INT 4
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: IN
34084: IFFALSE 34106
// SetClass ( un , rand ( 1 , 4 ) ) ;
34086: LD_VAR 0 1
34090: PPUSH
34091: LD_INT 1
34093: PPUSH
34094: LD_INT 4
34096: PPUSH
34097: CALL_OW 12
34101: PPUSH
34102: CALL_OW 336
34106: GO 34053
34108: POP
34109: POP
// end ;
34110: PPOPN 1
34112: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34113: LD_EXP 63
34117: PUSH
34118: LD_EXP 75
34122: AND
34123: IFFALSE 34202
34125: GO 34127
34127: DISABLE
34128: LD_INT 0
34130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34131: LD_ADDR_VAR 0 1
34135: PUSH
34136: LD_INT 22
34138: PUSH
34139: LD_OWVAR 2
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 21
34150: PUSH
34151: LD_INT 3
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PPUSH
34162: CALL_OW 69
34166: ST_TO_ADDR
// if not tmp then
34167: LD_VAR 0 1
34171: NOT
34172: IFFALSE 34176
// exit ;
34174: GO 34202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34176: LD_VAR 0 1
34180: PUSH
34181: LD_INT 1
34183: PPUSH
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL_OW 12
34193: ARRAY
34194: PPUSH
34195: LD_INT 100
34197: PPUSH
34198: CALL_OW 234
// end ;
34202: PPOPN 1
34204: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34205: LD_EXP 63
34209: PUSH
34210: LD_EXP 77
34214: AND
34215: IFFALSE 34313
34217: GO 34219
34219: DISABLE
34220: LD_INT 0
34222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34223: LD_ADDR_VAR 0 1
34227: PUSH
34228: LD_INT 22
34230: PUSH
34231: LD_OWVAR 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 21
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PPUSH
34254: CALL_OW 69
34258: ST_TO_ADDR
// if not tmp then
34259: LD_VAR 0 1
34263: NOT
34264: IFFALSE 34268
// exit ;
34266: GO 34313
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34268: LD_VAR 0 1
34272: PUSH
34273: LD_INT 1
34275: PPUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: CALL_OW 12
34285: ARRAY
34286: PPUSH
34287: LD_INT 1
34289: PPUSH
34290: LD_INT 4
34292: PPUSH
34293: CALL_OW 12
34297: PPUSH
34298: LD_INT 3000
34300: PPUSH
34301: LD_INT 9000
34303: PPUSH
34304: CALL_OW 12
34308: PPUSH
34309: CALL_OW 492
// end ;
34313: PPOPN 1
34315: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34316: LD_EXP 63
34320: PUSH
34321: LD_EXP 78
34325: AND
34326: IFFALSE 34346
34328: GO 34330
34330: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34331: LD_INT 1
34333: PPUSH
34334: LD_OWVAR 2
34338: PPUSH
34339: LD_INT 0
34341: PPUSH
34342: CALL_OW 324
34346: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34347: LD_EXP 63
34351: PUSH
34352: LD_EXP 79
34356: AND
34357: IFFALSE 34440
34359: GO 34361
34361: DISABLE
34362: LD_INT 0
34364: PPUSH
34365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34366: LD_ADDR_VAR 0 2
34370: PUSH
34371: LD_INT 22
34373: PUSH
34374: LD_OWVAR 2
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 21
34385: PUSH
34386: LD_INT 3
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PPUSH
34397: CALL_OW 69
34401: ST_TO_ADDR
// if not tmp then
34402: LD_VAR 0 2
34406: NOT
34407: IFFALSE 34411
// exit ;
34409: GO 34440
// for i in tmp do
34411: LD_ADDR_VAR 0 1
34415: PUSH
34416: LD_VAR 0 2
34420: PUSH
34421: FOR_IN
34422: IFFALSE 34438
// SetBLevel ( i , 10 ) ;
34424: LD_VAR 0 1
34428: PPUSH
34429: LD_INT 10
34431: PPUSH
34432: CALL_OW 241
34436: GO 34421
34438: POP
34439: POP
// end ;
34440: PPOPN 2
34442: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34443: LD_EXP 63
34447: PUSH
34448: LD_EXP 80
34452: AND
34453: IFFALSE 34564
34455: GO 34457
34457: DISABLE
34458: LD_INT 0
34460: PPUSH
34461: PPUSH
34462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 22
34470: PUSH
34471: LD_OWVAR 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 25
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PPUSH
34494: CALL_OW 69
34498: ST_TO_ADDR
// if not tmp then
34499: LD_VAR 0 3
34503: NOT
34504: IFFALSE 34508
// exit ;
34506: GO 34564
// un := tmp [ rand ( 1 , tmp ) ] ;
34508: LD_ADDR_VAR 0 2
34512: PUSH
34513: LD_VAR 0 3
34517: PUSH
34518: LD_INT 1
34520: PPUSH
34521: LD_VAR 0 3
34525: PPUSH
34526: CALL_OW 12
34530: ARRAY
34531: ST_TO_ADDR
// if Crawls ( un ) then
34532: LD_VAR 0 2
34536: PPUSH
34537: CALL_OW 318
34541: IFFALSE 34552
// ComWalk ( un ) ;
34543: LD_VAR 0 2
34547: PPUSH
34548: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34552: LD_VAR 0 2
34556: PPUSH
34557: LD_INT 5
34559: PPUSH
34560: CALL_OW 336
// end ;
34564: PPOPN 3
34566: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
34567: LD_EXP 63
34571: PUSH
34572: LD_EXP 81
34576: AND
34577: PUSH
34578: LD_OWVAR 67
34582: PUSH
34583: LD_INT 3
34585: LESS
34586: AND
34587: IFFALSE 34606
34589: GO 34591
34591: DISABLE
// Difficulty := Difficulty + 1 ;
34592: LD_ADDR_OWVAR 67
34596: PUSH
34597: LD_OWVAR 67
34601: PUSH
34602: LD_INT 1
34604: PLUS
34605: ST_TO_ADDR
34606: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34607: LD_EXP 63
34611: PUSH
34612: LD_EXP 82
34616: AND
34617: IFFALSE 34720
34619: GO 34621
34621: DISABLE
34622: LD_INT 0
34624: PPUSH
// begin for i := 1 to 5 do
34625: LD_ADDR_VAR 0 1
34629: PUSH
34630: DOUBLE
34631: LD_INT 1
34633: DEC
34634: ST_TO_ADDR
34635: LD_INT 5
34637: PUSH
34638: FOR_TO
34639: IFFALSE 34718
// begin uc_nation := nation_nature ;
34641: LD_ADDR_OWVAR 21
34645: PUSH
34646: LD_INT 0
34648: ST_TO_ADDR
// uc_side := 0 ;
34649: LD_ADDR_OWVAR 20
34653: PUSH
34654: LD_INT 0
34656: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34657: LD_ADDR_OWVAR 29
34661: PUSH
34662: LD_INT 12
34664: PUSH
34665: LD_INT 12
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: ST_TO_ADDR
// hc_agressivity := 20 ;
34672: LD_ADDR_OWVAR 35
34676: PUSH
34677: LD_INT 20
34679: ST_TO_ADDR
// hc_class := class_tiger ;
34680: LD_ADDR_OWVAR 28
34684: PUSH
34685: LD_INT 14
34687: ST_TO_ADDR
// hc_gallery :=  ;
34688: LD_ADDR_OWVAR 33
34692: PUSH
34693: LD_STRING 
34695: ST_TO_ADDR
// hc_name :=  ;
34696: LD_ADDR_OWVAR 26
34700: PUSH
34701: LD_STRING 
34703: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34704: CALL_OW 44
34708: PPUSH
34709: LD_INT 0
34711: PPUSH
34712: CALL_OW 51
// end ;
34716: GO 34638
34718: POP
34719: POP
// end ;
34720: PPOPN 1
34722: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34723: LD_EXP 63
34727: PUSH
34728: LD_EXP 83
34732: AND
34733: IFFALSE 34742
34735: GO 34737
34737: DISABLE
// StreamSibBomb ;
34738: CALL 34743 0 0
34742: END
// export function StreamSibBomb ; var i , x , y ; begin
34743: LD_INT 0
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
// result := false ;
34749: LD_ADDR_VAR 0 1
34753: PUSH
34754: LD_INT 0
34756: ST_TO_ADDR
// for i := 1 to 16 do
34757: LD_ADDR_VAR 0 2
34761: PUSH
34762: DOUBLE
34763: LD_INT 1
34765: DEC
34766: ST_TO_ADDR
34767: LD_INT 16
34769: PUSH
34770: FOR_TO
34771: IFFALSE 34970
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_INT 10
34780: PUSH
34781: LD_INT 20
34783: PUSH
34784: LD_INT 30
34786: PUSH
34787: LD_INT 40
34789: PUSH
34790: LD_INT 50
34792: PUSH
34793: LD_INT 60
34795: PUSH
34796: LD_INT 70
34798: PUSH
34799: LD_INT 80
34801: PUSH
34802: LD_INT 90
34804: PUSH
34805: LD_INT 100
34807: PUSH
34808: LD_INT 110
34810: PUSH
34811: LD_INT 120
34813: PUSH
34814: LD_INT 130
34816: PUSH
34817: LD_INT 140
34819: PUSH
34820: LD_INT 150
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PPUSH
34843: LD_INT 15
34845: PPUSH
34846: CALL_OW 12
34850: ARRAY
34851: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34852: LD_ADDR_VAR 0 4
34856: PUSH
34857: LD_INT 10
34859: PUSH
34860: LD_INT 20
34862: PUSH
34863: LD_INT 30
34865: PUSH
34866: LD_INT 40
34868: PUSH
34869: LD_INT 50
34871: PUSH
34872: LD_INT 60
34874: PUSH
34875: LD_INT 70
34877: PUSH
34878: LD_INT 80
34880: PUSH
34881: LD_INT 90
34883: PUSH
34884: LD_INT 100
34886: PUSH
34887: LD_INT 110
34889: PUSH
34890: LD_INT 120
34892: PUSH
34893: LD_INT 130
34895: PUSH
34896: LD_INT 140
34898: PUSH
34899: LD_INT 150
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: PPUSH
34922: LD_INT 15
34924: PPUSH
34925: CALL_OW 12
34929: ARRAY
34930: ST_TO_ADDR
// if ValidHex ( x , y ) then
34931: LD_VAR 0 3
34935: PPUSH
34936: LD_VAR 0 4
34940: PPUSH
34941: CALL_OW 488
34945: IFFALSE 34968
// begin result := [ x , y ] ;
34947: LD_ADDR_VAR 0 1
34951: PUSH
34952: LD_VAR 0 3
34956: PUSH
34957: LD_VAR 0 4
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// break ;
34966: GO 34970
// end ; end ;
34968: GO 34770
34970: POP
34971: POP
// if result then
34972: LD_VAR 0 1
34976: IFFALSE 35036
// begin ToLua ( playSibBomb() ) ;
34978: LD_STRING playSibBomb()
34980: PPUSH
34981: CALL_OW 559
// wait ( 0 0$14 ) ;
34985: LD_INT 490
34987: PPUSH
34988: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34992: LD_VAR 0 1
34996: PUSH
34997: LD_INT 1
34999: ARRAY
35000: PPUSH
35001: LD_VAR 0 1
35005: PUSH
35006: LD_INT 2
35008: ARRAY
35009: PPUSH
35010: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35014: LD_VAR 0 1
35018: PUSH
35019: LD_INT 1
35021: ARRAY
35022: PPUSH
35023: LD_VAR 0 1
35027: PUSH
35028: LD_INT 2
35030: ARRAY
35031: PPUSH
35032: CALL_OW 429
// end ; end ;
35036: LD_VAR 0 1
35040: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35041: LD_EXP 63
35045: PUSH
35046: LD_EXP 85
35050: AND
35051: IFFALSE 35063
35053: GO 35055
35055: DISABLE
// YouLost (  ) ;
35056: LD_STRING 
35058: PPUSH
35059: CALL_OW 104
35063: END
// every 0 0$1 trigger StreamModeActive and sFog do
35064: LD_EXP 63
35068: PUSH
35069: LD_EXP 84
35073: AND
35074: IFFALSE 35088
35076: GO 35078
35078: DISABLE
// FogOff ( your_side ) ;
35079: LD_OWVAR 2
35083: PPUSH
35084: CALL_OW 344
35088: END
// every 0 0$1 trigger StreamModeActive and sSun do
35089: LD_EXP 63
35093: PUSH
35094: LD_EXP 86
35098: AND
35099: IFFALSE 35127
35101: GO 35103
35103: DISABLE
// begin solar_recharge_percent := 0 ;
35104: LD_ADDR_OWVAR 79
35108: PUSH
35109: LD_INT 0
35111: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35112: LD_INT 10500
35114: PPUSH
35115: CALL_OW 67
// solar_recharge_percent := 100 ;
35119: LD_ADDR_OWVAR 79
35123: PUSH
35124: LD_INT 100
35126: ST_TO_ADDR
// end ;
35127: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35128: LD_EXP 63
35132: PUSH
35133: LD_EXP 87
35137: AND
35138: IFFALSE 35377
35140: GO 35142
35142: DISABLE
35143: LD_INT 0
35145: PPUSH
35146: PPUSH
35147: PPUSH
// begin tmp := [ ] ;
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: EMPTY
35154: ST_TO_ADDR
// for i := 1 to 6 do
35155: LD_ADDR_VAR 0 1
35159: PUSH
35160: DOUBLE
35161: LD_INT 1
35163: DEC
35164: ST_TO_ADDR
35165: LD_INT 6
35167: PUSH
35168: FOR_TO
35169: IFFALSE 35274
// begin uc_nation := nation_nature ;
35171: LD_ADDR_OWVAR 21
35175: PUSH
35176: LD_INT 0
35178: ST_TO_ADDR
// uc_side := 0 ;
35179: LD_ADDR_OWVAR 20
35183: PUSH
35184: LD_INT 0
35186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35187: LD_ADDR_OWVAR 29
35191: PUSH
35192: LD_INT 12
35194: PUSH
35195: LD_INT 12
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: ST_TO_ADDR
// hc_agressivity := 20 ;
35202: LD_ADDR_OWVAR 35
35206: PUSH
35207: LD_INT 20
35209: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35210: LD_ADDR_OWVAR 28
35214: PUSH
35215: LD_INT 17
35217: ST_TO_ADDR
// hc_gallery :=  ;
35218: LD_ADDR_OWVAR 33
35222: PUSH
35223: LD_STRING 
35225: ST_TO_ADDR
// hc_name :=  ;
35226: LD_ADDR_OWVAR 26
35230: PUSH
35231: LD_STRING 
35233: ST_TO_ADDR
// un := CreateHuman ;
35234: LD_ADDR_VAR 0 2
35238: PUSH
35239: CALL_OW 44
35243: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_INT 1
35251: PPUSH
35252: CALL_OW 51
// tmp := tmp ^ un ;
35256: LD_ADDR_VAR 0 3
35260: PUSH
35261: LD_VAR 0 3
35265: PUSH
35266: LD_VAR 0 2
35270: ADD
35271: ST_TO_ADDR
// end ;
35272: GO 35168
35274: POP
35275: POP
// repeat wait ( 0 0$1 ) ;
35276: LD_INT 35
35278: PPUSH
35279: CALL_OW 67
// for un in tmp do
35283: LD_ADDR_VAR 0 2
35287: PUSH
35288: LD_VAR 0 3
35292: PUSH
35293: FOR_IN
35294: IFFALSE 35368
// begin if IsDead ( un ) then
35296: LD_VAR 0 2
35300: PPUSH
35301: CALL_OW 301
35305: IFFALSE 35325
// begin tmp := tmp diff un ;
35307: LD_ADDR_VAR 0 3
35311: PUSH
35312: LD_VAR 0 3
35316: PUSH
35317: LD_VAR 0 2
35321: DIFF
35322: ST_TO_ADDR
// continue ;
35323: GO 35293
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35325: LD_VAR 0 2
35329: PPUSH
35330: LD_INT 3
35332: PUSH
35333: LD_INT 22
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PPUSH
35347: CALL_OW 69
35351: PPUSH
35352: LD_VAR 0 2
35356: PPUSH
35357: CALL_OW 74
35361: PPUSH
35362: CALL_OW 115
// end ;
35366: GO 35293
35368: POP
35369: POP
// until not tmp ;
35370: LD_VAR 0 3
35374: NOT
35375: IFFALSE 35276
// end ;
35377: PPOPN 3
35379: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35380: LD_EXP 63
35384: PUSH
35385: LD_EXP 88
35389: AND
35390: IFFALSE 35444
35392: GO 35394
35394: DISABLE
// begin ToLua ( displayTroll(); ) ;
35395: LD_STRING displayTroll();
35397: PPUSH
35398: CALL_OW 559
// wait ( 3 3$00 ) ;
35402: LD_INT 6300
35404: PPUSH
35405: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35409: LD_STRING hideTroll();
35411: PPUSH
35412: CALL_OW 559
// wait ( 1 1$00 ) ;
35416: LD_INT 2100
35418: PPUSH
35419: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35423: LD_STRING displayTroll();
35425: PPUSH
35426: CALL_OW 559
// wait ( 1 1$00 ) ;
35430: LD_INT 2100
35432: PPUSH
35433: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35437: LD_STRING hideTroll();
35439: PPUSH
35440: CALL_OW 559
// end ;
35444: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35445: LD_EXP 63
35449: PUSH
35450: LD_EXP 89
35454: AND
35455: IFFALSE 35518
35457: GO 35459
35459: DISABLE
35460: LD_INT 0
35462: PPUSH
// begin p := 0 ;
35463: LD_ADDR_VAR 0 1
35467: PUSH
35468: LD_INT 0
35470: ST_TO_ADDR
// repeat game_speed := 1 ;
35471: LD_ADDR_OWVAR 65
35475: PUSH
35476: LD_INT 1
35478: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35479: LD_INT 35
35481: PPUSH
35482: CALL_OW 67
// p := p + 1 ;
35486: LD_ADDR_VAR 0 1
35490: PUSH
35491: LD_VAR 0 1
35495: PUSH
35496: LD_INT 1
35498: PLUS
35499: ST_TO_ADDR
// until p >= 60 ;
35500: LD_VAR 0 1
35504: PUSH
35505: LD_INT 60
35507: GREATEREQUAL
35508: IFFALSE 35471
// game_speed := 4 ;
35510: LD_ADDR_OWVAR 65
35514: PUSH
35515: LD_INT 4
35517: ST_TO_ADDR
// end ;
35518: PPOPN 1
35520: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35521: LD_EXP 63
35525: PUSH
35526: LD_EXP 90
35530: AND
35531: IFFALSE 35677
35533: GO 35535
35535: DISABLE
35536: LD_INT 0
35538: PPUSH
35539: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35540: LD_ADDR_VAR 0 1
35544: PUSH
35545: LD_INT 22
35547: PUSH
35548: LD_OWVAR 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 2
35559: PUSH
35560: LD_INT 30
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 30
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PPUSH
35589: CALL_OW 69
35593: ST_TO_ADDR
// if not depot then
35594: LD_VAR 0 1
35598: NOT
35599: IFFALSE 35603
// exit ;
35601: GO 35677
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35603: LD_ADDR_VAR 0 2
35607: PUSH
35608: LD_VAR 0 1
35612: PUSH
35613: LD_INT 1
35615: PPUSH
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 12
35625: ARRAY
35626: PPUSH
35627: CALL_OW 274
35631: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35632: LD_VAR 0 2
35636: PPUSH
35637: LD_INT 1
35639: PPUSH
35640: LD_INT 0
35642: PPUSH
35643: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35647: LD_VAR 0 2
35651: PPUSH
35652: LD_INT 2
35654: PPUSH
35655: LD_INT 0
35657: PPUSH
35658: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35662: LD_VAR 0 2
35666: PPUSH
35667: LD_INT 3
35669: PPUSH
35670: LD_INT 0
35672: PPUSH
35673: CALL_OW 277
// end ;
35677: PPOPN 2
35679: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35680: LD_EXP 63
35684: PUSH
35685: LD_EXP 91
35689: AND
35690: IFFALSE 35787
35692: GO 35694
35694: DISABLE
35695: LD_INT 0
35697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35698: LD_ADDR_VAR 0 1
35702: PUSH
35703: LD_INT 22
35705: PUSH
35706: LD_OWVAR 2
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 21
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 3
35727: PUSH
35728: LD_INT 23
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 69
35751: ST_TO_ADDR
// if not tmp then
35752: LD_VAR 0 1
35756: NOT
35757: IFFALSE 35761
// exit ;
35759: GO 35787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35761: LD_VAR 0 1
35765: PUSH
35766: LD_INT 1
35768: PPUSH
35769: LD_VAR 0 1
35773: PPUSH
35774: CALL_OW 12
35778: ARRAY
35779: PPUSH
35780: LD_INT 200
35782: PPUSH
35783: CALL_OW 234
// end ;
35787: PPOPN 1
35789: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35790: LD_EXP 63
35794: PUSH
35795: LD_EXP 92
35799: AND
35800: IFFALSE 35879
35802: GO 35804
35804: DISABLE
35805: LD_INT 0
35807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35808: LD_ADDR_VAR 0 1
35812: PUSH
35813: LD_INT 22
35815: PUSH
35816: LD_OWVAR 2
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 21
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PPUSH
35839: CALL_OW 69
35843: ST_TO_ADDR
// if not tmp then
35844: LD_VAR 0 1
35848: NOT
35849: IFFALSE 35853
// exit ;
35851: GO 35879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35853: LD_VAR 0 1
35857: PUSH
35858: LD_INT 1
35860: PPUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 12
35870: ARRAY
35871: PPUSH
35872: LD_INT 60
35874: PPUSH
35875: CALL_OW 234
// end ;
35879: PPOPN 1
35881: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35882: LD_EXP 63
35886: PUSH
35887: LD_EXP 93
35891: AND
35892: IFFALSE 35991
35894: GO 35896
35896: DISABLE
35897: LD_INT 0
35899: PPUSH
35900: PPUSH
// begin enable ;
35901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35902: LD_ADDR_VAR 0 1
35906: PUSH
35907: LD_INT 22
35909: PUSH
35910: LD_OWVAR 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 61
35921: PUSH
35922: EMPTY
35923: LIST
35924: PUSH
35925: LD_INT 33
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: PPUSH
35940: CALL_OW 69
35944: ST_TO_ADDR
// if not tmp then
35945: LD_VAR 0 1
35949: NOT
35950: IFFALSE 35954
// exit ;
35952: GO 35991
// for i in tmp do
35954: LD_ADDR_VAR 0 2
35958: PUSH
35959: LD_VAR 0 1
35963: PUSH
35964: FOR_IN
35965: IFFALSE 35989
// if IsControledBy ( i ) then
35967: LD_VAR 0 2
35971: PPUSH
35972: CALL_OW 312
35976: IFFALSE 35987
// ComUnlink ( i ) ;
35978: LD_VAR 0 2
35982: PPUSH
35983: CALL_OW 136
35987: GO 35964
35989: POP
35990: POP
// end ;
35991: PPOPN 2
35993: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35994: LD_EXP 63
35998: PUSH
35999: LD_EXP 94
36003: AND
36004: IFFALSE 36144
36006: GO 36008
36008: DISABLE
36009: LD_INT 0
36011: PPUSH
36012: PPUSH
// begin ToLua ( displayPowell(); ) ;
36013: LD_STRING displayPowell();
36015: PPUSH
36016: CALL_OW 559
// uc_side := 0 ;
36020: LD_ADDR_OWVAR 20
36024: PUSH
36025: LD_INT 0
36027: ST_TO_ADDR
// uc_nation := 2 ;
36028: LD_ADDR_OWVAR 21
36032: PUSH
36033: LD_INT 2
36035: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36036: LD_ADDR_OWVAR 37
36040: PUSH
36041: LD_INT 14
36043: ST_TO_ADDR
// vc_engine := engine_siberite ;
36044: LD_ADDR_OWVAR 39
36048: PUSH
36049: LD_INT 3
36051: ST_TO_ADDR
// vc_control := control_apeman ;
36052: LD_ADDR_OWVAR 38
36056: PUSH
36057: LD_INT 5
36059: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36060: LD_ADDR_OWVAR 40
36064: PUSH
36065: LD_INT 29
36067: ST_TO_ADDR
// un := CreateVehicle ;
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: CALL_OW 45
36077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36078: LD_VAR 0 2
36082: PPUSH
36083: LD_INT 1
36085: PPUSH
36086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36090: LD_INT 35
36092: PPUSH
36093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36097: LD_VAR 0 2
36101: PPUSH
36102: LD_INT 22
36104: PUSH
36105: LD_OWVAR 2
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PPUSH
36114: CALL_OW 69
36118: PPUSH
36119: LD_VAR 0 2
36123: PPUSH
36124: CALL_OW 74
36128: PPUSH
36129: CALL_OW 115
// until IsDead ( un ) ;
36133: LD_VAR 0 2
36137: PPUSH
36138: CALL_OW 301
36142: IFFALSE 36090
// end ;
36144: PPOPN 2
36146: END
// every 0 0$1 trigger StreamModeActive and sStu do
36147: LD_EXP 63
36151: PUSH
36152: LD_EXP 102
36156: AND
36157: IFFALSE 36173
36159: GO 36161
36161: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36162: LD_STRING displayStucuk();
36164: PPUSH
36165: CALL_OW 559
// ResetFog ;
36169: CALL_OW 335
// end ;
36173: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36174: LD_EXP 63
36178: PUSH
36179: LD_EXP 95
36183: AND
36184: IFFALSE 36325
36186: GO 36188
36188: DISABLE
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_INT 22
36200: PUSH
36201: LD_OWVAR 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 21
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL_OW 69
36228: ST_TO_ADDR
// if not tmp then
36229: LD_VAR 0 2
36233: NOT
36234: IFFALSE 36238
// exit ;
36236: GO 36325
// un := tmp [ rand ( 1 , tmp ) ] ;
36238: LD_ADDR_VAR 0 1
36242: PUSH
36243: LD_VAR 0 2
36247: PUSH
36248: LD_INT 1
36250: PPUSH
36251: LD_VAR 0 2
36255: PPUSH
36256: CALL_OW 12
36260: ARRAY
36261: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36262: LD_VAR 0 1
36266: PPUSH
36267: LD_INT 0
36269: PPUSH
36270: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36274: LD_VAR 0 1
36278: PPUSH
36279: LD_OWVAR 3
36283: PUSH
36284: LD_VAR 0 1
36288: DIFF
36289: PPUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 74
36299: PPUSH
36300: CALL_OW 115
// wait ( 0 0$20 ) ;
36304: LD_INT 700
36306: PPUSH
36307: CALL_OW 67
// SetSide ( un , your_side ) ;
36311: LD_VAR 0 1
36315: PPUSH
36316: LD_OWVAR 2
36320: PPUSH
36321: CALL_OW 235
// end ;
36325: PPOPN 2
36327: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36328: LD_EXP 63
36332: PUSH
36333: LD_EXP 96
36337: AND
36338: IFFALSE 36444
36340: GO 36342
36342: DISABLE
36343: LD_INT 0
36345: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36346: LD_ADDR_VAR 0 1
36350: PUSH
36351: LD_INT 22
36353: PUSH
36354: LD_OWVAR 2
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 30
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 30
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PPUSH
36395: CALL_OW 69
36399: ST_TO_ADDR
// if not depot then
36400: LD_VAR 0 1
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 36444
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36409: LD_VAR 0 1
36413: PUSH
36414: LD_INT 1
36416: ARRAY
36417: PPUSH
36418: CALL_OW 250
36422: PPUSH
36423: LD_VAR 0 1
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PPUSH
36432: CALL_OW 251
36436: PPUSH
36437: LD_INT 70
36439: PPUSH
36440: CALL_OW 495
// end ;
36444: PPOPN 1
36446: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36447: LD_EXP 63
36451: PUSH
36452: LD_EXP 97
36456: AND
36457: IFFALSE 36668
36459: GO 36461
36461: DISABLE
36462: LD_INT 0
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36469: LD_ADDR_VAR 0 5
36473: PUSH
36474: LD_INT 22
36476: PUSH
36477: LD_OWVAR 2
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 21
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PPUSH
36500: CALL_OW 69
36504: ST_TO_ADDR
// if not tmp then
36505: LD_VAR 0 5
36509: NOT
36510: IFFALSE 36514
// exit ;
36512: GO 36668
// for i in tmp do
36514: LD_ADDR_VAR 0 1
36518: PUSH
36519: LD_VAR 0 5
36523: PUSH
36524: FOR_IN
36525: IFFALSE 36666
// begin d := rand ( 0 , 5 ) ;
36527: LD_ADDR_VAR 0 4
36531: PUSH
36532: LD_INT 0
36534: PPUSH
36535: LD_INT 5
36537: PPUSH
36538: CALL_OW 12
36542: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36543: LD_ADDR_VAR 0 2
36547: PUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 250
36557: PPUSH
36558: LD_VAR 0 4
36562: PPUSH
36563: LD_INT 3
36565: PPUSH
36566: LD_INT 12
36568: PPUSH
36569: CALL_OW 12
36573: PPUSH
36574: CALL_OW 272
36578: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36579: LD_ADDR_VAR 0 3
36583: PUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 251
36593: PPUSH
36594: LD_VAR 0 4
36598: PPUSH
36599: LD_INT 3
36601: PPUSH
36602: LD_INT 12
36604: PPUSH
36605: CALL_OW 12
36609: PPUSH
36610: CALL_OW 273
36614: ST_TO_ADDR
// if ValidHex ( x , y ) then
36615: LD_VAR 0 2
36619: PPUSH
36620: LD_VAR 0 3
36624: PPUSH
36625: CALL_OW 488
36629: IFFALSE 36664
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36631: LD_VAR 0 1
36635: PPUSH
36636: LD_VAR 0 2
36640: PPUSH
36641: LD_VAR 0 3
36645: PPUSH
36646: LD_INT 3
36648: PPUSH
36649: LD_INT 6
36651: PPUSH
36652: CALL_OW 12
36656: PPUSH
36657: LD_INT 1
36659: PPUSH
36660: CALL_OW 483
// end ;
36664: GO 36524
36666: POP
36667: POP
// end ;
36668: PPOPN 5
36670: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36671: LD_EXP 63
36675: PUSH
36676: LD_EXP 98
36680: AND
36681: IFFALSE 36775
36683: GO 36685
36685: DISABLE
36686: LD_INT 0
36688: PPUSH
36689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36690: LD_ADDR_VAR 0 2
36694: PUSH
36695: LD_INT 22
36697: PUSH
36698: LD_OWVAR 2
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 32
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 21
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: PPUSH
36732: CALL_OW 69
36736: ST_TO_ADDR
// if not tmp then
36737: LD_VAR 0 2
36741: NOT
36742: IFFALSE 36746
// exit ;
36744: GO 36775
// for i in tmp do
36746: LD_ADDR_VAR 0 1
36750: PUSH
36751: LD_VAR 0 2
36755: PUSH
36756: FOR_IN
36757: IFFALSE 36773
// SetFuel ( i , 0 ) ;
36759: LD_VAR 0 1
36763: PPUSH
36764: LD_INT 0
36766: PPUSH
36767: CALL_OW 240
36771: GO 36756
36773: POP
36774: POP
// end ;
36775: PPOPN 2
36777: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36778: LD_EXP 63
36782: PUSH
36783: LD_EXP 99
36787: AND
36788: IFFALSE 36854
36790: GO 36792
36792: DISABLE
36793: LD_INT 0
36795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36796: LD_ADDR_VAR 0 1
36800: PUSH
36801: LD_INT 22
36803: PUSH
36804: LD_OWVAR 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 30
36815: PUSH
36816: LD_INT 29
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PPUSH
36827: CALL_OW 69
36831: ST_TO_ADDR
// if not tmp then
36832: LD_VAR 0 1
36836: NOT
36837: IFFALSE 36841
// exit ;
36839: GO 36854
// DestroyUnit ( tmp [ 1 ] ) ;
36841: LD_VAR 0 1
36845: PUSH
36846: LD_INT 1
36848: ARRAY
36849: PPUSH
36850: CALL_OW 65
// end ;
36854: PPOPN 1
36856: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36857: LD_EXP 63
36861: PUSH
36862: LD_EXP 101
36866: AND
36867: IFFALSE 36996
36869: GO 36871
36871: DISABLE
36872: LD_INT 0
36874: PPUSH
// begin uc_side := 0 ;
36875: LD_ADDR_OWVAR 20
36879: PUSH
36880: LD_INT 0
36882: ST_TO_ADDR
// uc_nation := nation_arabian ;
36883: LD_ADDR_OWVAR 21
36887: PUSH
36888: LD_INT 2
36890: ST_TO_ADDR
// hc_gallery :=  ;
36891: LD_ADDR_OWVAR 33
36895: PUSH
36896: LD_STRING 
36898: ST_TO_ADDR
// hc_name :=  ;
36899: LD_ADDR_OWVAR 26
36903: PUSH
36904: LD_STRING 
36906: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36907: LD_INT 1
36909: PPUSH
36910: LD_INT 11
36912: PPUSH
36913: LD_INT 10
36915: PPUSH
36916: CALL_OW 380
// un := CreateHuman ;
36920: LD_ADDR_VAR 0 1
36924: PUSH
36925: CALL_OW 44
36929: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36930: LD_VAR 0 1
36934: PPUSH
36935: LD_INT 1
36937: PPUSH
36938: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36942: LD_INT 35
36944: PPUSH
36945: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_INT 22
36956: PUSH
36957: LD_OWVAR 2
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PPUSH
36966: CALL_OW 69
36970: PPUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 74
36980: PPUSH
36981: CALL_OW 115
// until IsDead ( un ) ;
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 301
36994: IFFALSE 36942
// end ;
36996: PPOPN 1
36998: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36999: LD_EXP 63
37003: PUSH
37004: LD_EXP 103
37008: AND
37009: IFFALSE 37021
37011: GO 37013
37013: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37014: LD_STRING earthquake(getX(game), 0, 32)
37016: PPUSH
37017: CALL_OW 559
37021: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37022: LD_EXP 63
37026: PUSH
37027: LD_EXP 104
37031: AND
37032: IFFALSE 37123
37034: GO 37036
37036: DISABLE
37037: LD_INT 0
37039: PPUSH
// begin enable ;
37040: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37041: LD_ADDR_VAR 0 1
37045: PUSH
37046: LD_INT 22
37048: PUSH
37049: LD_OWVAR 2
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 21
37060: PUSH
37061: LD_INT 2
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 33
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 69
37087: ST_TO_ADDR
// if not tmp then
37088: LD_VAR 0 1
37092: NOT
37093: IFFALSE 37097
// exit ;
37095: GO 37123
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37097: LD_VAR 0 1
37101: PUSH
37102: LD_INT 1
37104: PPUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: CALL_OW 12
37114: ARRAY
37115: PPUSH
37116: LD_INT 1
37118: PPUSH
37119: CALL_OW 234
// end ;
37123: PPOPN 1
37125: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37126: LD_EXP 63
37130: PUSH
37131: LD_EXP 105
37135: AND
37136: IFFALSE 37277
37138: GO 37140
37140: DISABLE
37141: LD_INT 0
37143: PPUSH
37144: PPUSH
37145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37146: LD_ADDR_VAR 0 3
37150: PUSH
37151: LD_INT 22
37153: PUSH
37154: LD_OWVAR 2
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 25
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PPUSH
37177: CALL_OW 69
37181: ST_TO_ADDR
// if not tmp then
37182: LD_VAR 0 3
37186: NOT
37187: IFFALSE 37191
// exit ;
37189: GO 37277
// un := tmp [ rand ( 1 , tmp ) ] ;
37191: LD_ADDR_VAR 0 2
37195: PUSH
37196: LD_VAR 0 3
37200: PUSH
37201: LD_INT 1
37203: PPUSH
37204: LD_VAR 0 3
37208: PPUSH
37209: CALL_OW 12
37213: ARRAY
37214: ST_TO_ADDR
// if Crawls ( un ) then
37215: LD_VAR 0 2
37219: PPUSH
37220: CALL_OW 318
37224: IFFALSE 37235
// ComWalk ( un ) ;
37226: LD_VAR 0 2
37230: PPUSH
37231: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37235: LD_VAR 0 2
37239: PPUSH
37240: LD_INT 9
37242: PPUSH
37243: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37247: LD_INT 28
37249: PPUSH
37250: LD_OWVAR 2
37254: PPUSH
37255: LD_INT 2
37257: PPUSH
37258: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37262: LD_INT 29
37264: PPUSH
37265: LD_OWVAR 2
37269: PPUSH
37270: LD_INT 2
37272: PPUSH
37273: CALL_OW 322
// end ;
37277: PPOPN 3
37279: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37280: LD_EXP 63
37284: PUSH
37285: LD_EXP 106
37289: AND
37290: IFFALSE 37401
37292: GO 37294
37294: DISABLE
37295: LD_INT 0
37297: PPUSH
37298: PPUSH
37299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37300: LD_ADDR_VAR 0 3
37304: PUSH
37305: LD_INT 22
37307: PUSH
37308: LD_OWVAR 2
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 25
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PPUSH
37331: CALL_OW 69
37335: ST_TO_ADDR
// if not tmp then
37336: LD_VAR 0 3
37340: NOT
37341: IFFALSE 37345
// exit ;
37343: GO 37401
// un := tmp [ rand ( 1 , tmp ) ] ;
37345: LD_ADDR_VAR 0 2
37349: PUSH
37350: LD_VAR 0 3
37354: PUSH
37355: LD_INT 1
37357: PPUSH
37358: LD_VAR 0 3
37362: PPUSH
37363: CALL_OW 12
37367: ARRAY
37368: ST_TO_ADDR
// if Crawls ( un ) then
37369: LD_VAR 0 2
37373: PPUSH
37374: CALL_OW 318
37378: IFFALSE 37389
// ComWalk ( un ) ;
37380: LD_VAR 0 2
37384: PPUSH
37385: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37389: LD_VAR 0 2
37393: PPUSH
37394: LD_INT 8
37396: PPUSH
37397: CALL_OW 336
// end ;
37401: PPOPN 3
37403: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37404: LD_EXP 63
37408: PUSH
37409: LD_EXP 107
37413: AND
37414: IFFALSE 37558
37416: GO 37418
37418: DISABLE
37419: LD_INT 0
37421: PPUSH
37422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37423: LD_ADDR_VAR 0 2
37427: PUSH
37428: LD_INT 22
37430: PUSH
37431: LD_OWVAR 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 21
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 34
37455: PUSH
37456: LD_INT 12
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 34
37465: PUSH
37466: LD_INT 51
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 34
37475: PUSH
37476: LD_INT 32
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: PPUSH
37494: CALL_OW 69
37498: ST_TO_ADDR
// if not tmp then
37499: LD_VAR 0 2
37503: NOT
37504: IFFALSE 37508
// exit ;
37506: GO 37558
// for i in tmp do
37508: LD_ADDR_VAR 0 1
37512: PUSH
37513: LD_VAR 0 2
37517: PUSH
37518: FOR_IN
37519: IFFALSE 37556
// if GetCargo ( i , mat_artifact ) = 0 then
37521: LD_VAR 0 1
37525: PPUSH
37526: LD_INT 4
37528: PPUSH
37529: CALL_OW 289
37533: PUSH
37534: LD_INT 0
37536: EQUAL
37537: IFFALSE 37554
// SetCargo ( i , mat_siberit , 100 ) ;
37539: LD_VAR 0 1
37543: PPUSH
37544: LD_INT 3
37546: PPUSH
37547: LD_INT 100
37549: PPUSH
37550: CALL_OW 290
37554: GO 37518
37556: POP
37557: POP
// end ;
37558: PPOPN 2
37560: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37561: LD_EXP 63
37565: PUSH
37566: LD_EXP 108
37570: AND
37571: IFFALSE 37754
37573: GO 37575
37575: DISABLE
37576: LD_INT 0
37578: PPUSH
37579: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37580: LD_ADDR_VAR 0 2
37584: PUSH
37585: LD_INT 22
37587: PUSH
37588: LD_OWVAR 2
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PPUSH
37597: CALL_OW 69
37601: ST_TO_ADDR
// if not tmp then
37602: LD_VAR 0 2
37606: NOT
37607: IFFALSE 37611
// exit ;
37609: GO 37754
// for i := 1 to 2 do
37611: LD_ADDR_VAR 0 1
37615: PUSH
37616: DOUBLE
37617: LD_INT 1
37619: DEC
37620: ST_TO_ADDR
37621: LD_INT 2
37623: PUSH
37624: FOR_TO
37625: IFFALSE 37752
// begin uc_side := your_side ;
37627: LD_ADDR_OWVAR 20
37631: PUSH
37632: LD_OWVAR 2
37636: ST_TO_ADDR
// uc_nation := nation_american ;
37637: LD_ADDR_OWVAR 21
37641: PUSH
37642: LD_INT 1
37644: ST_TO_ADDR
// vc_chassis := us_morphling ;
37645: LD_ADDR_OWVAR 37
37649: PUSH
37650: LD_INT 5
37652: ST_TO_ADDR
// vc_engine := engine_siberite ;
37653: LD_ADDR_OWVAR 39
37657: PUSH
37658: LD_INT 3
37660: ST_TO_ADDR
// vc_control := control_computer ;
37661: LD_ADDR_OWVAR 38
37665: PUSH
37666: LD_INT 3
37668: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37669: LD_ADDR_OWVAR 40
37673: PUSH
37674: LD_INT 10
37676: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37677: LD_VAR 0 2
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: PPUSH
37686: CALL_OW 310
37690: NOT
37691: IFFALSE 37738
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37693: CALL_OW 45
37697: PPUSH
37698: LD_VAR 0 2
37702: PUSH
37703: LD_INT 1
37705: ARRAY
37706: PPUSH
37707: CALL_OW 250
37711: PPUSH
37712: LD_VAR 0 2
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: CALL_OW 251
37725: PPUSH
37726: LD_INT 12
37728: PPUSH
37729: LD_INT 1
37731: PPUSH
37732: CALL_OW 50
37736: GO 37750
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37738: CALL_OW 45
37742: PPUSH
37743: LD_INT 1
37745: PPUSH
37746: CALL_OW 51
// end ;
37750: GO 37624
37752: POP
37753: POP
// end ;
37754: PPOPN 2
37756: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37757: LD_EXP 63
37761: PUSH
37762: LD_EXP 109
37766: AND
37767: IFFALSE 37989
37769: GO 37771
37771: DISABLE
37772: LD_INT 0
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37780: LD_ADDR_VAR 0 6
37784: PUSH
37785: LD_INT 22
37787: PUSH
37788: LD_OWVAR 2
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 21
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: LD_INT 23
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: PPUSH
37829: CALL_OW 69
37833: ST_TO_ADDR
// if not tmp then
37834: LD_VAR 0 6
37838: NOT
37839: IFFALSE 37843
// exit ;
37841: GO 37989
// s1 := rand ( 1 , 4 ) ;
37843: LD_ADDR_VAR 0 2
37847: PUSH
37848: LD_INT 1
37850: PPUSH
37851: LD_INT 4
37853: PPUSH
37854: CALL_OW 12
37858: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37859: LD_ADDR_VAR 0 4
37863: PUSH
37864: LD_VAR 0 6
37868: PUSH
37869: LD_INT 1
37871: ARRAY
37872: PPUSH
37873: LD_VAR 0 2
37877: PPUSH
37878: CALL_OW 259
37882: ST_TO_ADDR
// if s1 = 1 then
37883: LD_VAR 0 2
37887: PUSH
37888: LD_INT 1
37890: EQUAL
37891: IFFALSE 37911
// s2 := rand ( 2 , 4 ) else
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_INT 2
37900: PPUSH
37901: LD_INT 4
37903: PPUSH
37904: CALL_OW 12
37908: ST_TO_ADDR
37909: GO 37919
// s2 := 1 ;
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_INT 1
37918: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37919: LD_ADDR_VAR 0 5
37923: PUSH
37924: LD_VAR 0 6
37928: PUSH
37929: LD_INT 1
37931: ARRAY
37932: PPUSH
37933: LD_VAR 0 3
37937: PPUSH
37938: CALL_OW 259
37942: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37943: LD_VAR 0 6
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PPUSH
37952: LD_VAR 0 2
37956: PPUSH
37957: LD_VAR 0 5
37961: PPUSH
37962: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37966: LD_VAR 0 6
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: PPUSH
37975: LD_VAR 0 3
37979: PPUSH
37980: LD_VAR 0 4
37984: PPUSH
37985: CALL_OW 237
// end ;
37989: PPOPN 6
37991: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37992: LD_EXP 63
37996: PUSH
37997: LD_EXP 110
38001: AND
38002: IFFALSE 38081
38004: GO 38006
38006: DISABLE
38007: LD_INT 0
38009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38010: LD_ADDR_VAR 0 1
38014: PUSH
38015: LD_INT 22
38017: PUSH
38018: LD_OWVAR 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 30
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PPUSH
38041: CALL_OW 69
38045: ST_TO_ADDR
// if not tmp then
38046: LD_VAR 0 1
38050: NOT
38051: IFFALSE 38055
// exit ;
38053: GO 38081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38055: LD_VAR 0 1
38059: PUSH
38060: LD_INT 1
38062: PPUSH
38063: LD_VAR 0 1
38067: PPUSH
38068: CALL_OW 12
38072: ARRAY
38073: PPUSH
38074: LD_INT 1
38076: PPUSH
38077: CALL_OW 234
// end ;
38081: PPOPN 1
38083: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38084: LD_EXP 63
38088: PUSH
38089: LD_EXP 111
38093: AND
38094: IFFALSE 38206
38096: GO 38098
38098: DISABLE
38099: LD_INT 0
38101: PPUSH
38102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38103: LD_ADDR_VAR 0 2
38107: PUSH
38108: LD_INT 22
38110: PUSH
38111: LD_OWVAR 2
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: LD_INT 30
38125: PUSH
38126: LD_INT 27
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 30
38135: PUSH
38136: LD_INT 26
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 30
38145: PUSH
38146: LD_INT 28
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PPUSH
38163: CALL_OW 69
38167: ST_TO_ADDR
// if not tmp then
38168: LD_VAR 0 2
38172: NOT
38173: IFFALSE 38177
// exit ;
38175: GO 38206
// for i in tmp do
38177: LD_ADDR_VAR 0 1
38181: PUSH
38182: LD_VAR 0 2
38186: PUSH
38187: FOR_IN
38188: IFFALSE 38204
// SetLives ( i , 1 ) ;
38190: LD_VAR 0 1
38194: PPUSH
38195: LD_INT 1
38197: PPUSH
38198: CALL_OW 234
38202: GO 38187
38204: POP
38205: POP
// end ;
38206: PPOPN 2
38208: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38209: LD_EXP 63
38213: PUSH
38214: LD_EXP 112
38218: AND
38219: IFFALSE 38493
38221: GO 38223
38223: DISABLE
38224: LD_INT 0
38226: PPUSH
38227: PPUSH
38228: PPUSH
// begin i := rand ( 1 , 7 ) ;
38229: LD_ADDR_VAR 0 1
38233: PUSH
38234: LD_INT 1
38236: PPUSH
38237: LD_INT 7
38239: PPUSH
38240: CALL_OW 12
38244: ST_TO_ADDR
// case i of 1 :
38245: LD_VAR 0 1
38249: PUSH
38250: LD_INT 1
38252: DOUBLE
38253: EQUAL
38254: IFTRUE 38258
38256: GO 38268
38258: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38259: LD_STRING earthquake(getX(game), 0, 32)
38261: PPUSH
38262: CALL_OW 559
38266: GO 38493
38268: LD_INT 2
38270: DOUBLE
38271: EQUAL
38272: IFTRUE 38276
38274: GO 38290
38276: POP
// begin ToLua ( displayStucuk(); ) ;
38277: LD_STRING displayStucuk();
38279: PPUSH
38280: CALL_OW 559
// ResetFog ;
38284: CALL_OW 335
// end ; 3 :
38288: GO 38493
38290: LD_INT 3
38292: DOUBLE
38293: EQUAL
38294: IFTRUE 38298
38296: GO 38402
38298: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38299: LD_ADDR_VAR 0 2
38303: PUSH
38304: LD_INT 22
38306: PUSH
38307: LD_OWVAR 2
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 25
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PPUSH
38330: CALL_OW 69
38334: ST_TO_ADDR
// if not tmp then
38335: LD_VAR 0 2
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38493
// un := tmp [ rand ( 1 , tmp ) ] ;
38344: LD_ADDR_VAR 0 3
38348: PUSH
38349: LD_VAR 0 2
38353: PUSH
38354: LD_INT 1
38356: PPUSH
38357: LD_VAR 0 2
38361: PPUSH
38362: CALL_OW 12
38366: ARRAY
38367: ST_TO_ADDR
// if Crawls ( un ) then
38368: LD_VAR 0 3
38372: PPUSH
38373: CALL_OW 318
38377: IFFALSE 38388
// ComWalk ( un ) ;
38379: LD_VAR 0 3
38383: PPUSH
38384: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38388: LD_VAR 0 3
38392: PPUSH
38393: LD_INT 8
38395: PPUSH
38396: CALL_OW 336
// end ; 4 :
38400: GO 38493
38402: LD_INT 4
38404: DOUBLE
38405: EQUAL
38406: IFTRUE 38410
38408: GO 38471
38410: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38411: LD_ADDR_VAR 0 2
38415: PUSH
38416: LD_INT 22
38418: PUSH
38419: LD_OWVAR 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 30
38430: PUSH
38431: LD_INT 29
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PPUSH
38442: CALL_OW 69
38446: ST_TO_ADDR
// if not tmp then
38447: LD_VAR 0 2
38451: NOT
38452: IFFALSE 38456
// exit ;
38454: GO 38493
// DestroyUnit ( tmp [ 1 ] ) ;
38456: LD_VAR 0 2
38460: PUSH
38461: LD_INT 1
38463: ARRAY
38464: PPUSH
38465: CALL_OW 65
// end ; 5 .. 7 :
38469: GO 38493
38471: LD_INT 5
38473: DOUBLE
38474: GREATEREQUAL
38475: IFFALSE 38483
38477: LD_INT 7
38479: DOUBLE
38480: LESSEQUAL
38481: IFTRUE 38485
38483: GO 38492
38485: POP
// StreamSibBomb ; end ;
38486: CALL 34743 0 0
38490: GO 38493
38492: POP
// end ;
38493: PPOPN 3
38495: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38496: LD_EXP 63
38500: PUSH
38501: LD_EXP 113
38505: AND
38506: IFFALSE 38662
38508: GO 38510
38510: DISABLE
38511: LD_INT 0
38513: PPUSH
38514: PPUSH
38515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38516: LD_ADDR_VAR 0 2
38520: PUSH
38521: LD_INT 81
38523: PUSH
38524: LD_OWVAR 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 21
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 21
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PPUSH
38565: CALL_OW 69
38569: ST_TO_ADDR
// if not tmp then
38570: LD_VAR 0 2
38574: NOT
38575: IFFALSE 38579
// exit ;
38577: GO 38662
// p := 0 ;
38579: LD_ADDR_VAR 0 3
38583: PUSH
38584: LD_INT 0
38586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38587: LD_INT 35
38589: PPUSH
38590: CALL_OW 67
// p := p + 1 ;
38594: LD_ADDR_VAR 0 3
38598: PUSH
38599: LD_VAR 0 3
38603: PUSH
38604: LD_INT 1
38606: PLUS
38607: ST_TO_ADDR
// for i in tmp do
38608: LD_ADDR_VAR 0 1
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: FOR_IN
38619: IFFALSE 38650
// if GetLives ( i ) < 1000 then
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 256
38630: PUSH
38631: LD_INT 1000
38633: LESS
38634: IFFALSE 38648
// SetLives ( i , 1000 ) ;
38636: LD_VAR 0 1
38640: PPUSH
38641: LD_INT 1000
38643: PPUSH
38644: CALL_OW 234
38648: GO 38618
38650: POP
38651: POP
// until p > 20 ;
38652: LD_VAR 0 3
38656: PUSH
38657: LD_INT 20
38659: GREATER
38660: IFFALSE 38587
// end ;
38662: PPOPN 3
38664: END
// every 0 0$1 trigger StreamModeActive and sTime do
38665: LD_EXP 63
38669: PUSH
38670: LD_EXP 114
38674: AND
38675: IFFALSE 38710
38677: GO 38679
38679: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38680: LD_INT 28
38682: PPUSH
38683: LD_OWVAR 2
38687: PPUSH
38688: LD_INT 2
38690: PPUSH
38691: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38695: LD_INT 30
38697: PPUSH
38698: LD_OWVAR 2
38702: PPUSH
38703: LD_INT 2
38705: PPUSH
38706: CALL_OW 322
// end ;
38710: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38711: LD_EXP 63
38715: PUSH
38716: LD_EXP 115
38720: AND
38721: IFFALSE 38842
38723: GO 38725
38725: DISABLE
38726: LD_INT 0
38728: PPUSH
38729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38730: LD_ADDR_VAR 0 2
38734: PUSH
38735: LD_INT 22
38737: PUSH
38738: LD_OWVAR 2
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 21
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: LD_INT 23
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 69
38783: ST_TO_ADDR
// if not tmp then
38784: LD_VAR 0 2
38788: NOT
38789: IFFALSE 38793
// exit ;
38791: GO 38842
// for i in tmp do
38793: LD_ADDR_VAR 0 1
38797: PUSH
38798: LD_VAR 0 2
38802: PUSH
38803: FOR_IN
38804: IFFALSE 38840
// begin if Crawls ( i ) then
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 318
38815: IFFALSE 38826
// ComWalk ( i ) ;
38817: LD_VAR 0 1
38821: PPUSH
38822: CALL_OW 138
// SetClass ( i , 2 ) ;
38826: LD_VAR 0 1
38830: PPUSH
38831: LD_INT 2
38833: PPUSH
38834: CALL_OW 336
// end ;
38838: GO 38803
38840: POP
38841: POP
// end ;
38842: PPOPN 2
38844: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38845: LD_EXP 63
38849: PUSH
38850: LD_EXP 116
38854: AND
38855: IFFALSE 39136
38857: GO 38859
38859: DISABLE
38860: LD_INT 0
38862: PPUSH
38863: PPUSH
38864: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38865: LD_OWVAR 2
38869: PPUSH
38870: LD_INT 9
38872: PPUSH
38873: LD_INT 1
38875: PPUSH
38876: LD_INT 1
38878: PPUSH
38879: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38883: LD_INT 9
38885: PPUSH
38886: LD_OWVAR 2
38890: PPUSH
38891: CALL_OW 343
// uc_side := 9 ;
38895: LD_ADDR_OWVAR 20
38899: PUSH
38900: LD_INT 9
38902: ST_TO_ADDR
// uc_nation := 2 ;
38903: LD_ADDR_OWVAR 21
38907: PUSH
38908: LD_INT 2
38910: ST_TO_ADDR
// hc_name := Dark Warrior ;
38911: LD_ADDR_OWVAR 26
38915: PUSH
38916: LD_STRING Dark Warrior
38918: ST_TO_ADDR
// hc_gallery :=  ;
38919: LD_ADDR_OWVAR 33
38923: PUSH
38924: LD_STRING 
38926: ST_TO_ADDR
// hc_noskilllimit := true ;
38927: LD_ADDR_OWVAR 76
38931: PUSH
38932: LD_INT 1
38934: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38935: LD_ADDR_OWVAR 31
38939: PUSH
38940: LD_INT 30
38942: PUSH
38943: LD_INT 30
38945: PUSH
38946: LD_INT 30
38948: PUSH
38949: LD_INT 30
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: ST_TO_ADDR
// un := CreateHuman ;
38958: LD_ADDR_VAR 0 3
38962: PUSH
38963: CALL_OW 44
38967: ST_TO_ADDR
// hc_noskilllimit := false ;
38968: LD_ADDR_OWVAR 76
38972: PUSH
38973: LD_INT 0
38975: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38976: LD_VAR 0 3
38980: PPUSH
38981: LD_INT 1
38983: PPUSH
38984: CALL_OW 51
// p := 0 ;
38988: LD_ADDR_VAR 0 2
38992: PUSH
38993: LD_INT 0
38995: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38996: LD_INT 35
38998: PPUSH
38999: CALL_OW 67
// p := p + 1 ;
39003: LD_ADDR_VAR 0 2
39007: PUSH
39008: LD_VAR 0 2
39012: PUSH
39013: LD_INT 1
39015: PLUS
39016: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39017: LD_VAR 0 3
39021: PPUSH
39022: CALL_OW 256
39026: PUSH
39027: LD_INT 1000
39029: LESS
39030: IFFALSE 39044
// SetLives ( un , 1000 ) ;
39032: LD_VAR 0 3
39036: PPUSH
39037: LD_INT 1000
39039: PPUSH
39040: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39044: LD_VAR 0 3
39048: PPUSH
39049: LD_INT 81
39051: PUSH
39052: LD_OWVAR 2
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 91
39063: PUSH
39064: LD_VAR 0 3
39068: PUSH
39069: LD_INT 30
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PPUSH
39081: CALL_OW 69
39085: PPUSH
39086: LD_VAR 0 3
39090: PPUSH
39091: CALL_OW 74
39095: PPUSH
39096: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 60
39107: GREATER
39108: PUSH
39109: LD_VAR 0 3
39113: PPUSH
39114: CALL_OW 301
39118: OR
39119: IFFALSE 38996
// if un then
39121: LD_VAR 0 3
39125: IFFALSE 39136
// RemoveUnit ( un ) ;
39127: LD_VAR 0 3
39131: PPUSH
39132: CALL_OW 64
// end ;
39136: PPOPN 3
39138: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39139: LD_INT 0
39141: PPUSH
// case cmd of 301 :
39142: LD_VAR 0 1
39146: PUSH
39147: LD_INT 301
39149: DOUBLE
39150: EQUAL
39151: IFTRUE 39155
39153: GO 39187
39155: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39156: LD_VAR 0 6
39160: PPUSH
39161: LD_VAR 0 7
39165: PPUSH
39166: LD_VAR 0 8
39170: PPUSH
39171: LD_VAR 0 4
39175: PPUSH
39176: LD_VAR 0 5
39180: PPUSH
39181: CALL 40388 0 5
39185: GO 39308
39187: LD_INT 302
39189: DOUBLE
39190: EQUAL
39191: IFTRUE 39195
39193: GO 39232
39195: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39196: LD_VAR 0 6
39200: PPUSH
39201: LD_VAR 0 7
39205: PPUSH
39206: LD_VAR 0 8
39210: PPUSH
39211: LD_VAR 0 9
39215: PPUSH
39216: LD_VAR 0 4
39220: PPUSH
39221: LD_VAR 0 5
39225: PPUSH
39226: CALL 40479 0 6
39230: GO 39308
39232: LD_INT 303
39234: DOUBLE
39235: EQUAL
39236: IFTRUE 39240
39238: GO 39277
39240: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39241: LD_VAR 0 6
39245: PPUSH
39246: LD_VAR 0 7
39250: PPUSH
39251: LD_VAR 0 8
39255: PPUSH
39256: LD_VAR 0 9
39260: PPUSH
39261: LD_VAR 0 4
39265: PPUSH
39266: LD_VAR 0 5
39270: PPUSH
39271: CALL 39313 0 6
39275: GO 39308
39277: LD_INT 304
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 39307
39285: POP
// hHackTeleport ( unit , x , y ) ; end ;
39286: LD_VAR 0 2
39290: PPUSH
39291: LD_VAR 0 4
39295: PPUSH
39296: LD_VAR 0 5
39300: PPUSH
39301: CALL 41072 0 3
39305: GO 39308
39307: POP
// end ;
39308: LD_VAR 0 12
39312: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39313: LD_INT 0
39315: PPUSH
39316: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39317: LD_VAR 0 1
39321: PUSH
39322: LD_INT 1
39324: LESS
39325: PUSH
39326: LD_VAR 0 1
39330: PUSH
39331: LD_INT 3
39333: GREATER
39334: OR
39335: PUSH
39336: LD_VAR 0 5
39340: PPUSH
39341: LD_VAR 0 6
39345: PPUSH
39346: CALL_OW 428
39350: OR
39351: IFFALSE 39355
// exit ;
39353: GO 40075
// uc_side := your_side ;
39355: LD_ADDR_OWVAR 20
39359: PUSH
39360: LD_OWVAR 2
39364: ST_TO_ADDR
// uc_nation := nation ;
39365: LD_ADDR_OWVAR 21
39369: PUSH
39370: LD_VAR 0 1
39374: ST_TO_ADDR
// bc_level = 1 ;
39375: LD_ADDR_OWVAR 43
39379: PUSH
39380: LD_INT 1
39382: ST_TO_ADDR
// case btype of 1 :
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 1
39390: DOUBLE
39391: EQUAL
39392: IFTRUE 39396
39394: GO 39407
39396: POP
// bc_type := b_depot ; 2 :
39397: LD_ADDR_OWVAR 42
39401: PUSH
39402: LD_INT 0
39404: ST_TO_ADDR
39405: GO 40019
39407: LD_INT 2
39409: DOUBLE
39410: EQUAL
39411: IFTRUE 39415
39413: GO 39426
39415: POP
// bc_type := b_warehouse ; 3 :
39416: LD_ADDR_OWVAR 42
39420: PUSH
39421: LD_INT 1
39423: ST_TO_ADDR
39424: GO 40019
39426: LD_INT 3
39428: DOUBLE
39429: EQUAL
39430: IFTRUE 39434
39432: GO 39445
39434: POP
// bc_type := b_lab ; 4 .. 9 :
39435: LD_ADDR_OWVAR 42
39439: PUSH
39440: LD_INT 6
39442: ST_TO_ADDR
39443: GO 40019
39445: LD_INT 4
39447: DOUBLE
39448: GREATEREQUAL
39449: IFFALSE 39457
39451: LD_INT 9
39453: DOUBLE
39454: LESSEQUAL
39455: IFTRUE 39459
39457: GO 39511
39459: POP
// begin bc_type := b_lab_half ;
39460: LD_ADDR_OWVAR 42
39464: PUSH
39465: LD_INT 7
39467: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39468: LD_ADDR_OWVAR 44
39472: PUSH
39473: LD_INT 10
39475: PUSH
39476: LD_INT 11
39478: PUSH
39479: LD_INT 12
39481: PUSH
39482: LD_INT 15
39484: PUSH
39485: LD_INT 14
39487: PUSH
39488: LD_INT 13
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 3
39506: MINUS
39507: ARRAY
39508: ST_TO_ADDR
// end ; 10 .. 13 :
39509: GO 40019
39511: LD_INT 10
39513: DOUBLE
39514: GREATEREQUAL
39515: IFFALSE 39523
39517: LD_INT 13
39519: DOUBLE
39520: LESSEQUAL
39521: IFTRUE 39525
39523: GO 39602
39525: POP
// begin bc_type := b_lab_full ;
39526: LD_ADDR_OWVAR 42
39530: PUSH
39531: LD_INT 8
39533: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
39534: LD_ADDR_OWVAR 44
39538: PUSH
39539: LD_INT 10
39541: PUSH
39542: LD_INT 12
39544: PUSH
39545: LD_INT 14
39547: PUSH
39548: LD_INT 13
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: PUSH
39557: LD_VAR 0 2
39561: PUSH
39562: LD_INT 9
39564: MINUS
39565: ARRAY
39566: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
39567: LD_ADDR_OWVAR 45
39571: PUSH
39572: LD_INT 11
39574: PUSH
39575: LD_INT 15
39577: PUSH
39578: LD_INT 12
39580: PUSH
39581: LD_INT 15
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: PUSH
39590: LD_VAR 0 2
39594: PUSH
39595: LD_INT 9
39597: MINUS
39598: ARRAY
39599: ST_TO_ADDR
// end ; 14 :
39600: GO 40019
39602: LD_INT 14
39604: DOUBLE
39605: EQUAL
39606: IFTRUE 39610
39608: GO 39621
39610: POP
// bc_type := b_workshop ; 15 :
39611: LD_ADDR_OWVAR 42
39615: PUSH
39616: LD_INT 2
39618: ST_TO_ADDR
39619: GO 40019
39621: LD_INT 15
39623: DOUBLE
39624: EQUAL
39625: IFTRUE 39629
39627: GO 39640
39629: POP
// bc_type := b_factory ; 16 :
39630: LD_ADDR_OWVAR 42
39634: PUSH
39635: LD_INT 3
39637: ST_TO_ADDR
39638: GO 40019
39640: LD_INT 16
39642: DOUBLE
39643: EQUAL
39644: IFTRUE 39648
39646: GO 39659
39648: POP
// bc_type := b_ext_gun ; 17 :
39649: LD_ADDR_OWVAR 42
39653: PUSH
39654: LD_INT 17
39656: ST_TO_ADDR
39657: GO 40019
39659: LD_INT 17
39661: DOUBLE
39662: EQUAL
39663: IFTRUE 39667
39665: GO 39695
39667: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
39668: LD_ADDR_OWVAR 42
39672: PUSH
39673: LD_INT 19
39675: PUSH
39676: LD_INT 23
39678: PUSH
39679: LD_INT 19
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: PUSH
39687: LD_VAR 0 1
39691: ARRAY
39692: ST_TO_ADDR
39693: GO 40019
39695: LD_INT 18
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39714
39703: POP
// bc_type := b_ext_radar ; 19 :
39704: LD_ADDR_OWVAR 42
39708: PUSH
39709: LD_INT 20
39711: ST_TO_ADDR
39712: GO 40019
39714: LD_INT 19
39716: DOUBLE
39717: EQUAL
39718: IFTRUE 39722
39720: GO 39733
39722: POP
// bc_type := b_ext_radio ; 20 :
39723: LD_ADDR_OWVAR 42
39727: PUSH
39728: LD_INT 22
39730: ST_TO_ADDR
39731: GO 40019
39733: LD_INT 20
39735: DOUBLE
39736: EQUAL
39737: IFTRUE 39741
39739: GO 39752
39741: POP
// bc_type := b_ext_siberium ; 21 :
39742: LD_ADDR_OWVAR 42
39746: PUSH
39747: LD_INT 21
39749: ST_TO_ADDR
39750: GO 40019
39752: LD_INT 21
39754: DOUBLE
39755: EQUAL
39756: IFTRUE 39760
39758: GO 39771
39760: POP
// bc_type := b_ext_computer ; 22 :
39761: LD_ADDR_OWVAR 42
39765: PUSH
39766: LD_INT 24
39768: ST_TO_ADDR
39769: GO 40019
39771: LD_INT 22
39773: DOUBLE
39774: EQUAL
39775: IFTRUE 39779
39777: GO 39790
39779: POP
// bc_type := b_ext_track ; 23 :
39780: LD_ADDR_OWVAR 42
39784: PUSH
39785: LD_INT 16
39787: ST_TO_ADDR
39788: GO 40019
39790: LD_INT 23
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39809
39798: POP
// bc_type := b_ext_laser ; 24 :
39799: LD_ADDR_OWVAR 42
39803: PUSH
39804: LD_INT 25
39806: ST_TO_ADDR
39807: GO 40019
39809: LD_INT 24
39811: DOUBLE
39812: EQUAL
39813: IFTRUE 39817
39815: GO 39828
39817: POP
// bc_type := b_control_tower ; 25 :
39818: LD_ADDR_OWVAR 42
39822: PUSH
39823: LD_INT 36
39825: ST_TO_ADDR
39826: GO 40019
39828: LD_INT 25
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39847
39836: POP
// bc_type := b_breastwork ; 26 :
39837: LD_ADDR_OWVAR 42
39841: PUSH
39842: LD_INT 31
39844: ST_TO_ADDR
39845: GO 40019
39847: LD_INT 26
39849: DOUBLE
39850: EQUAL
39851: IFTRUE 39855
39853: GO 39866
39855: POP
// bc_type := b_bunker ; 27 :
39856: LD_ADDR_OWVAR 42
39860: PUSH
39861: LD_INT 32
39863: ST_TO_ADDR
39864: GO 40019
39866: LD_INT 27
39868: DOUBLE
39869: EQUAL
39870: IFTRUE 39874
39872: GO 39885
39874: POP
// bc_type := b_turret ; 28 :
39875: LD_ADDR_OWVAR 42
39879: PUSH
39880: LD_INT 33
39882: ST_TO_ADDR
39883: GO 40019
39885: LD_INT 28
39887: DOUBLE
39888: EQUAL
39889: IFTRUE 39893
39891: GO 39904
39893: POP
// bc_type := b_armoury ; 29 :
39894: LD_ADDR_OWVAR 42
39898: PUSH
39899: LD_INT 4
39901: ST_TO_ADDR
39902: GO 40019
39904: LD_INT 29
39906: DOUBLE
39907: EQUAL
39908: IFTRUE 39912
39910: GO 39923
39912: POP
// bc_type := b_barracks ; 30 :
39913: LD_ADDR_OWVAR 42
39917: PUSH
39918: LD_INT 5
39920: ST_TO_ADDR
39921: GO 40019
39923: LD_INT 30
39925: DOUBLE
39926: EQUAL
39927: IFTRUE 39931
39929: GO 39942
39931: POP
// bc_type := b_solar_power ; 31 :
39932: LD_ADDR_OWVAR 42
39936: PUSH
39937: LD_INT 27
39939: ST_TO_ADDR
39940: GO 40019
39942: LD_INT 31
39944: DOUBLE
39945: EQUAL
39946: IFTRUE 39950
39948: GO 39961
39950: POP
// bc_type := b_oil_power ; 32 :
39951: LD_ADDR_OWVAR 42
39955: PUSH
39956: LD_INT 26
39958: ST_TO_ADDR
39959: GO 40019
39961: LD_INT 32
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39969
39967: GO 39980
39969: POP
// bc_type := b_siberite_power ; 33 :
39970: LD_ADDR_OWVAR 42
39974: PUSH
39975: LD_INT 28
39977: ST_TO_ADDR
39978: GO 40019
39980: LD_INT 33
39982: DOUBLE
39983: EQUAL
39984: IFTRUE 39988
39986: GO 39999
39988: POP
// bc_type := b_oil_mine ; 34 :
39989: LD_ADDR_OWVAR 42
39993: PUSH
39994: LD_INT 29
39996: ST_TO_ADDR
39997: GO 40019
39999: LD_INT 34
40001: DOUBLE
40002: EQUAL
40003: IFTRUE 40007
40005: GO 40018
40007: POP
// bc_type := b_siberite_mine ; end ;
40008: LD_ADDR_OWVAR 42
40012: PUSH
40013: LD_INT 30
40015: ST_TO_ADDR
40016: GO 40019
40018: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40019: LD_ADDR_VAR 0 8
40023: PUSH
40024: LD_VAR 0 5
40028: PPUSH
40029: LD_VAR 0 6
40033: PPUSH
40034: LD_VAR 0 3
40038: PPUSH
40039: CALL_OW 47
40043: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40044: LD_OWVAR 42
40048: PUSH
40049: LD_INT 32
40051: PUSH
40052: LD_INT 33
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: IN
40059: IFFALSE 40075
// PlaceWeaponTurret ( b , weapon ) ;
40061: LD_VAR 0 8
40065: PPUSH
40066: LD_VAR 0 4
40070: PPUSH
40071: CALL_OW 431
// end ;
40075: LD_VAR 0 7
40079: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40080: LD_INT 0
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40086: LD_ADDR_VAR 0 4
40090: PUSH
40091: LD_INT 22
40093: PUSH
40094: LD_OWVAR 2
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 30
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 30
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PPUSH
40135: CALL_OW 69
40139: ST_TO_ADDR
// if not tmp then
40140: LD_VAR 0 4
40144: NOT
40145: IFFALSE 40149
// exit ;
40147: GO 40208
// for i in tmp do
40149: LD_ADDR_VAR 0 2
40153: PUSH
40154: LD_VAR 0 4
40158: PUSH
40159: FOR_IN
40160: IFFALSE 40206
// for j = 1 to 3 do
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: DOUBLE
40168: LD_INT 1
40170: DEC
40171: ST_TO_ADDR
40172: LD_INT 3
40174: PUSH
40175: FOR_TO
40176: IFFALSE 40202
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40178: LD_VAR 0 2
40182: PPUSH
40183: CALL_OW 274
40187: PPUSH
40188: LD_VAR 0 3
40192: PPUSH
40193: LD_INT 99999
40195: PPUSH
40196: CALL_OW 277
40200: GO 40175
40202: POP
40203: POP
40204: GO 40159
40206: POP
40207: POP
// end ;
40208: LD_VAR 0 1
40212: RET
// export function hHackSetLevel10 ; var i , j ; begin
40213: LD_INT 0
40215: PPUSH
40216: PPUSH
40217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40218: LD_ADDR_VAR 0 2
40222: PUSH
40223: LD_INT 21
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PPUSH
40233: CALL_OW 69
40237: PUSH
40238: FOR_IN
40239: IFFALSE 40291
// if IsSelected ( i ) then
40241: LD_VAR 0 2
40245: PPUSH
40246: CALL_OW 306
40250: IFFALSE 40289
// begin for j := 1 to 4 do
40252: LD_ADDR_VAR 0 3
40256: PUSH
40257: DOUBLE
40258: LD_INT 1
40260: DEC
40261: ST_TO_ADDR
40262: LD_INT 4
40264: PUSH
40265: FOR_TO
40266: IFFALSE 40287
// SetSkill ( i , j , 10 ) ;
40268: LD_VAR 0 2
40272: PPUSH
40273: LD_VAR 0 3
40277: PPUSH
40278: LD_INT 10
40280: PPUSH
40281: CALL_OW 237
40285: GO 40265
40287: POP
40288: POP
// end ;
40289: GO 40238
40291: POP
40292: POP
// end ;
40293: LD_VAR 0 1
40297: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40298: LD_INT 0
40300: PPUSH
40301: PPUSH
40302: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40303: LD_ADDR_VAR 0 2
40307: PUSH
40308: LD_INT 22
40310: PUSH
40311: LD_OWVAR 2
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 21
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PPUSH
40334: CALL_OW 69
40338: PUSH
40339: FOR_IN
40340: IFFALSE 40381
// begin for j := 1 to 4 do
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: DOUBLE
40348: LD_INT 1
40350: DEC
40351: ST_TO_ADDR
40352: LD_INT 4
40354: PUSH
40355: FOR_TO
40356: IFFALSE 40377
// SetSkill ( i , j , 10 ) ;
40358: LD_VAR 0 2
40362: PPUSH
40363: LD_VAR 0 3
40367: PPUSH
40368: LD_INT 10
40370: PPUSH
40371: CALL_OW 237
40375: GO 40355
40377: POP
40378: POP
// end ;
40379: GO 40339
40381: POP
40382: POP
// end ;
40383: LD_VAR 0 1
40387: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40388: LD_INT 0
40390: PPUSH
// uc_side := your_side ;
40391: LD_ADDR_OWVAR 20
40395: PUSH
40396: LD_OWVAR 2
40400: ST_TO_ADDR
// uc_nation := nation ;
40401: LD_ADDR_OWVAR 21
40405: PUSH
40406: LD_VAR 0 1
40410: ST_TO_ADDR
// InitHc ;
40411: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40415: LD_INT 0
40417: PPUSH
40418: LD_VAR 0 2
40422: PPUSH
40423: LD_VAR 0 3
40427: PPUSH
40428: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40432: LD_VAR 0 4
40436: PPUSH
40437: LD_VAR 0 5
40441: PPUSH
40442: CALL_OW 428
40446: PUSH
40447: LD_INT 0
40449: EQUAL
40450: IFFALSE 40474
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40452: CALL_OW 44
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: LD_VAR 0 5
40466: PPUSH
40467: LD_INT 1
40469: PPUSH
40470: CALL_OW 48
// end ;
40474: LD_VAR 0 6
40478: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40479: LD_INT 0
40481: PPUSH
40482: PPUSH
// uc_side := your_side ;
40483: LD_ADDR_OWVAR 20
40487: PUSH
40488: LD_OWVAR 2
40492: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40493: LD_VAR 0 1
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 3
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: LD_INT 5
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: IN
40520: IFFALSE 40532
// uc_nation := nation_american else
40522: LD_ADDR_OWVAR 21
40526: PUSH
40527: LD_INT 1
40529: ST_TO_ADDR
40530: GO 40575
// if chassis in [ 11 , 12 , 13 , 14 ] then
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 11
40539: PUSH
40540: LD_INT 12
40542: PUSH
40543: LD_INT 13
40545: PUSH
40546: LD_INT 14
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: IN
40555: IFFALSE 40567
// uc_nation := nation_arabian else
40557: LD_ADDR_OWVAR 21
40561: PUSH
40562: LD_INT 2
40564: ST_TO_ADDR
40565: GO 40575
// uc_nation := nation_russian ;
40567: LD_ADDR_OWVAR 21
40571: PUSH
40572: LD_INT 3
40574: ST_TO_ADDR
// vc_chassis := chassis ;
40575: LD_ADDR_OWVAR 37
40579: PUSH
40580: LD_VAR 0 1
40584: ST_TO_ADDR
// vc_engine := engine ;
40585: LD_ADDR_OWVAR 39
40589: PUSH
40590: LD_VAR 0 2
40594: ST_TO_ADDR
// vc_control := control ;
40595: LD_ADDR_OWVAR 38
40599: PUSH
40600: LD_VAR 0 3
40604: ST_TO_ADDR
// vc_weapon := weapon ;
40605: LD_ADDR_OWVAR 40
40609: PUSH
40610: LD_VAR 0 4
40614: ST_TO_ADDR
// un := CreateVehicle ;
40615: LD_ADDR_VAR 0 8
40619: PUSH
40620: CALL_OW 45
40624: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
40625: LD_VAR 0 8
40629: PPUSH
40630: LD_INT 0
40632: PPUSH
40633: LD_INT 5
40635: PPUSH
40636: CALL_OW 12
40640: PPUSH
40641: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
40645: LD_VAR 0 8
40649: PPUSH
40650: LD_VAR 0 5
40654: PPUSH
40655: LD_VAR 0 6
40659: PPUSH
40660: LD_INT 1
40662: PPUSH
40663: CALL_OW 48
// end ;
40667: LD_VAR 0 7
40671: RET
// export hInvincible ; every 1 do
40672: GO 40674
40674: DISABLE
// hInvincible := [ ] ;
40675: LD_ADDR_EXP 117
40679: PUSH
40680: EMPTY
40681: ST_TO_ADDR
40682: END
// every 10 do var i ;
40683: GO 40685
40685: DISABLE
40686: LD_INT 0
40688: PPUSH
// begin enable ;
40689: ENABLE
// if not hInvincible then
40690: LD_EXP 117
40694: NOT
40695: IFFALSE 40699
// exit ;
40697: GO 40743
// for i in hInvincible do
40699: LD_ADDR_VAR 0 1
40703: PUSH
40704: LD_EXP 117
40708: PUSH
40709: FOR_IN
40710: IFFALSE 40741
// if GetLives ( i ) < 1000 then
40712: LD_VAR 0 1
40716: PPUSH
40717: CALL_OW 256
40721: PUSH
40722: LD_INT 1000
40724: LESS
40725: IFFALSE 40739
// SetLives ( i , 1000 ) ;
40727: LD_VAR 0 1
40731: PPUSH
40732: LD_INT 1000
40734: PPUSH
40735: CALL_OW 234
40739: GO 40709
40741: POP
40742: POP
// end ;
40743: PPOPN 1
40745: END
// export function hHackInvincible ; var i ; begin
40746: LD_INT 0
40748: PPUSH
40749: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
40750: LD_ADDR_VAR 0 2
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 21
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 21
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: PPUSH
40783: CALL_OW 69
40787: PUSH
40788: FOR_IN
40789: IFFALSE 40850
// if IsSelected ( i ) then
40791: LD_VAR 0 2
40795: PPUSH
40796: CALL_OW 306
40800: IFFALSE 40848
// begin if i in hInvincible then
40802: LD_VAR 0 2
40806: PUSH
40807: LD_EXP 117
40811: IN
40812: IFFALSE 40832
// hInvincible := hInvincible diff i else
40814: LD_ADDR_EXP 117
40818: PUSH
40819: LD_EXP 117
40823: PUSH
40824: LD_VAR 0 2
40828: DIFF
40829: ST_TO_ADDR
40830: GO 40848
// hInvincible := hInvincible union i ;
40832: LD_ADDR_EXP 117
40836: PUSH
40837: LD_EXP 117
40841: PUSH
40842: LD_VAR 0 2
40846: UNION
40847: ST_TO_ADDR
// end ;
40848: GO 40788
40850: POP
40851: POP
// end ;
40852: LD_VAR 0 1
40856: RET
// export function hHackInvisible ; var i , j ; begin
40857: LD_INT 0
40859: PPUSH
40860: PPUSH
40861: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40862: LD_ADDR_VAR 0 2
40866: PUSH
40867: LD_INT 21
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PPUSH
40877: CALL_OW 69
40881: PUSH
40882: FOR_IN
40883: IFFALSE 40907
// if IsSelected ( i ) then
40885: LD_VAR 0 2
40889: PPUSH
40890: CALL_OW 306
40894: IFFALSE 40905
// ComForceInvisible ( i ) ;
40896: LD_VAR 0 2
40900: PPUSH
40901: CALL_OW 496
40905: GO 40882
40907: POP
40908: POP
// end ;
40909: LD_VAR 0 1
40913: RET
// export function hHackChangeYourSide ; begin
40914: LD_INT 0
40916: PPUSH
// if your_side = 8 then
40917: LD_OWVAR 2
40921: PUSH
40922: LD_INT 8
40924: EQUAL
40925: IFFALSE 40937
// your_side := 0 else
40927: LD_ADDR_OWVAR 2
40931: PUSH
40932: LD_INT 0
40934: ST_TO_ADDR
40935: GO 40951
// your_side := your_side + 1 ;
40937: LD_ADDR_OWVAR 2
40941: PUSH
40942: LD_OWVAR 2
40946: PUSH
40947: LD_INT 1
40949: PLUS
40950: ST_TO_ADDR
// end ;
40951: LD_VAR 0 1
40955: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40956: LD_INT 0
40958: PPUSH
40959: PPUSH
40960: PPUSH
// for i in all_units do
40961: LD_ADDR_VAR 0 2
40965: PUSH
40966: LD_OWVAR 3
40970: PUSH
40971: FOR_IN
40972: IFFALSE 41050
// if IsSelected ( i ) then
40974: LD_VAR 0 2
40978: PPUSH
40979: CALL_OW 306
40983: IFFALSE 41048
// begin j := GetSide ( i ) ;
40985: LD_ADDR_VAR 0 3
40989: PUSH
40990: LD_VAR 0 2
40994: PPUSH
40995: CALL_OW 255
40999: ST_TO_ADDR
// if j = 8 then
41000: LD_VAR 0 3
41004: PUSH
41005: LD_INT 8
41007: EQUAL
41008: IFFALSE 41020
// j := 0 else
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_INT 0
41017: ST_TO_ADDR
41018: GO 41034
// j := j + 1 ;
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_VAR 0 3
41029: PUSH
41030: LD_INT 1
41032: PLUS
41033: ST_TO_ADDR
// SetSide ( i , j ) ;
41034: LD_VAR 0 2
41038: PPUSH
41039: LD_VAR 0 3
41043: PPUSH
41044: CALL_OW 235
// end ;
41048: GO 40971
41050: POP
41051: POP
// end ;
41052: LD_VAR 0 1
41056: RET
// export function hHackFog ; begin
41057: LD_INT 0
41059: PPUSH
// FogOff ( true ) ;
41060: LD_INT 1
41062: PPUSH
41063: CALL_OW 344
// end ;
41067: LD_VAR 0 1
41071: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41072: LD_INT 0
41074: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41075: LD_VAR 0 1
41079: PPUSH
41080: LD_VAR 0 2
41084: PPUSH
41085: LD_VAR 0 3
41089: PPUSH
41090: LD_INT 1
41092: PPUSH
41093: LD_INT 1
41095: PPUSH
41096: CALL_OW 483
// CenterOnXY ( x , y ) ;
41100: LD_VAR 0 2
41104: PPUSH
41105: LD_VAR 0 3
41109: PPUSH
41110: CALL_OW 84
// end ; end_of_file
41114: LD_VAR 0 4
41118: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41119: LD_INT 0
41121: PPUSH
41122: PPUSH
// if exist_mode then
41123: LD_VAR 0 2
41127: IFFALSE 41152
// unit := CreateCharacter ( prefix & ident ) else
41129: LD_ADDR_VAR 0 5
41133: PUSH
41134: LD_VAR 0 3
41138: PUSH
41139: LD_VAR 0 1
41143: STR
41144: PPUSH
41145: CALL_OW 34
41149: ST_TO_ADDR
41150: GO 41167
// unit := NewCharacter ( ident ) ;
41152: LD_ADDR_VAR 0 5
41156: PUSH
41157: LD_VAR 0 1
41161: PPUSH
41162: CALL_OW 25
41166: ST_TO_ADDR
// result := unit ;
41167: LD_ADDR_VAR 0 4
41171: PUSH
41172: LD_VAR 0 5
41176: ST_TO_ADDR
// end ;
41177: LD_VAR 0 4
41181: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41182: LD_INT 0
41184: PPUSH
41185: PPUSH
// if not side or not nation then
41186: LD_VAR 0 1
41190: NOT
41191: PUSH
41192: LD_VAR 0 2
41196: NOT
41197: OR
41198: IFFALSE 41202
// exit ;
41200: GO 41970
// case nation of nation_american :
41202: LD_VAR 0 2
41206: PUSH
41207: LD_INT 1
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41429
41215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41216: LD_ADDR_VAR 0 4
41220: PUSH
41221: LD_INT 35
41223: PUSH
41224: LD_INT 45
41226: PUSH
41227: LD_INT 46
41229: PUSH
41230: LD_INT 47
41232: PUSH
41233: LD_INT 82
41235: PUSH
41236: LD_INT 83
41238: PUSH
41239: LD_INT 84
41241: PUSH
41242: LD_INT 85
41244: PUSH
41245: LD_INT 86
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: LD_INT 6
41256: PUSH
41257: LD_INT 15
41259: PUSH
41260: LD_INT 16
41262: PUSH
41263: LD_INT 7
41265: PUSH
41266: LD_INT 12
41268: PUSH
41269: LD_INT 13
41271: PUSH
41272: LD_INT 10
41274: PUSH
41275: LD_INT 14
41277: PUSH
41278: LD_INT 20
41280: PUSH
41281: LD_INT 21
41283: PUSH
41284: LD_INT 22
41286: PUSH
41287: LD_INT 25
41289: PUSH
41290: LD_INT 32
41292: PUSH
41293: LD_INT 27
41295: PUSH
41296: LD_INT 36
41298: PUSH
41299: LD_INT 69
41301: PUSH
41302: LD_INT 39
41304: PUSH
41305: LD_INT 34
41307: PUSH
41308: LD_INT 40
41310: PUSH
41311: LD_INT 48
41313: PUSH
41314: LD_INT 49
41316: PUSH
41317: LD_INT 50
41319: PUSH
41320: LD_INT 51
41322: PUSH
41323: LD_INT 52
41325: PUSH
41326: LD_INT 53
41328: PUSH
41329: LD_INT 54
41331: PUSH
41332: LD_INT 55
41334: PUSH
41335: LD_INT 56
41337: PUSH
41338: LD_INT 57
41340: PUSH
41341: LD_INT 58
41343: PUSH
41344: LD_INT 59
41346: PUSH
41347: LD_INT 60
41349: PUSH
41350: LD_INT 61
41352: PUSH
41353: LD_INT 62
41355: PUSH
41356: LD_INT 80
41358: PUSH
41359: LD_INT 82
41361: PUSH
41362: LD_INT 83
41364: PUSH
41365: LD_INT 84
41367: PUSH
41368: LD_INT 85
41370: PUSH
41371: LD_INT 86
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
41427: GO 41894
41429: LD_INT 2
41431: DOUBLE
41432: EQUAL
41433: IFTRUE 41437
41435: GO 41663
41437: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41438: LD_ADDR_VAR 0 4
41442: PUSH
41443: LD_INT 35
41445: PUSH
41446: LD_INT 45
41448: PUSH
41449: LD_INT 46
41451: PUSH
41452: LD_INT 47
41454: PUSH
41455: LD_INT 82
41457: PUSH
41458: LD_INT 83
41460: PUSH
41461: LD_INT 84
41463: PUSH
41464: LD_INT 85
41466: PUSH
41467: LD_INT 87
41469: PUSH
41470: LD_INT 70
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 11
41478: PUSH
41479: LD_INT 3
41481: PUSH
41482: LD_INT 4
41484: PUSH
41485: LD_INT 5
41487: PUSH
41488: LD_INT 6
41490: PUSH
41491: LD_INT 15
41493: PUSH
41494: LD_INT 18
41496: PUSH
41497: LD_INT 7
41499: PUSH
41500: LD_INT 17
41502: PUSH
41503: LD_INT 8
41505: PUSH
41506: LD_INT 20
41508: PUSH
41509: LD_INT 21
41511: PUSH
41512: LD_INT 22
41514: PUSH
41515: LD_INT 72
41517: PUSH
41518: LD_INT 26
41520: PUSH
41521: LD_INT 69
41523: PUSH
41524: LD_INT 39
41526: PUSH
41527: LD_INT 40
41529: PUSH
41530: LD_INT 41
41532: PUSH
41533: LD_INT 42
41535: PUSH
41536: LD_INT 43
41538: PUSH
41539: LD_INT 48
41541: PUSH
41542: LD_INT 49
41544: PUSH
41545: LD_INT 50
41547: PUSH
41548: LD_INT 51
41550: PUSH
41551: LD_INT 52
41553: PUSH
41554: LD_INT 53
41556: PUSH
41557: LD_INT 54
41559: PUSH
41560: LD_INT 55
41562: PUSH
41563: LD_INT 56
41565: PUSH
41566: LD_INT 60
41568: PUSH
41569: LD_INT 61
41571: PUSH
41572: LD_INT 62
41574: PUSH
41575: LD_INT 66
41577: PUSH
41578: LD_INT 67
41580: PUSH
41581: LD_INT 68
41583: PUSH
41584: LD_INT 81
41586: PUSH
41587: LD_INT 82
41589: PUSH
41590: LD_INT 83
41592: PUSH
41593: LD_INT 84
41595: PUSH
41596: LD_INT 85
41598: PUSH
41599: LD_INT 87
41601: PUSH
41602: LD_INT 88
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: ST_TO_ADDR
41661: GO 41894
41663: LD_INT 3
41665: DOUBLE
41666: EQUAL
41667: IFTRUE 41671
41669: GO 41893
41671: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41672: LD_ADDR_VAR 0 4
41676: PUSH
41677: LD_INT 46
41679: PUSH
41680: LD_INT 47
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: LD_INT 82
41691: PUSH
41692: LD_INT 83
41694: PUSH
41695: LD_INT 84
41697: PUSH
41698: LD_INT 85
41700: PUSH
41701: LD_INT 86
41703: PUSH
41704: LD_INT 11
41706: PUSH
41707: LD_INT 9
41709: PUSH
41710: LD_INT 20
41712: PUSH
41713: LD_INT 19
41715: PUSH
41716: LD_INT 21
41718: PUSH
41719: LD_INT 24
41721: PUSH
41722: LD_INT 22
41724: PUSH
41725: LD_INT 25
41727: PUSH
41728: LD_INT 28
41730: PUSH
41731: LD_INT 29
41733: PUSH
41734: LD_INT 30
41736: PUSH
41737: LD_INT 31
41739: PUSH
41740: LD_INT 37
41742: PUSH
41743: LD_INT 38
41745: PUSH
41746: LD_INT 32
41748: PUSH
41749: LD_INT 27
41751: PUSH
41752: LD_INT 33
41754: PUSH
41755: LD_INT 69
41757: PUSH
41758: LD_INT 39
41760: PUSH
41761: LD_INT 34
41763: PUSH
41764: LD_INT 40
41766: PUSH
41767: LD_INT 71
41769: PUSH
41770: LD_INT 23
41772: PUSH
41773: LD_INT 44
41775: PUSH
41776: LD_INT 48
41778: PUSH
41779: LD_INT 49
41781: PUSH
41782: LD_INT 50
41784: PUSH
41785: LD_INT 51
41787: PUSH
41788: LD_INT 52
41790: PUSH
41791: LD_INT 53
41793: PUSH
41794: LD_INT 54
41796: PUSH
41797: LD_INT 55
41799: PUSH
41800: LD_INT 56
41802: PUSH
41803: LD_INT 57
41805: PUSH
41806: LD_INT 58
41808: PUSH
41809: LD_INT 59
41811: PUSH
41812: LD_INT 63
41814: PUSH
41815: LD_INT 64
41817: PUSH
41818: LD_INT 65
41820: PUSH
41821: LD_INT 82
41823: PUSH
41824: LD_INT 83
41826: PUSH
41827: LD_INT 84
41829: PUSH
41830: LD_INT 85
41832: PUSH
41833: LD_INT 86
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: ST_TO_ADDR
41891: GO 41894
41893: POP
// if state > - 1 and state < 3 then
41894: LD_VAR 0 3
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: GREATER
41903: PUSH
41904: LD_VAR 0 3
41908: PUSH
41909: LD_INT 3
41911: LESS
41912: AND
41913: IFFALSE 41970
// for i in result do
41915: LD_ADDR_VAR 0 5
41919: PUSH
41920: LD_VAR 0 4
41924: PUSH
41925: FOR_IN
41926: IFFALSE 41968
// if GetTech ( i , side ) <> state then
41928: LD_VAR 0 5
41932: PPUSH
41933: LD_VAR 0 1
41937: PPUSH
41938: CALL_OW 321
41942: PUSH
41943: LD_VAR 0 3
41947: NONEQUAL
41948: IFFALSE 41966
// result := result diff i ;
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 4
41959: PUSH
41960: LD_VAR 0 5
41964: DIFF
41965: ST_TO_ADDR
41966: GO 41925
41968: POP
41969: POP
// end ;
41970: LD_VAR 0 4
41974: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41975: LD_INT 0
41977: PPUSH
41978: PPUSH
41979: PPUSH
// result := true ;
41980: LD_ADDR_VAR 0 3
41984: PUSH
41985: LD_INT 1
41987: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41988: LD_ADDR_VAR 0 5
41992: PUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: CALL_OW 480
42002: ST_TO_ADDR
// if not tmp then
42003: LD_VAR 0 5
42007: NOT
42008: IFFALSE 42012
// exit ;
42010: GO 42061
// for i in tmp do
42012: LD_ADDR_VAR 0 4
42016: PUSH
42017: LD_VAR 0 5
42021: PUSH
42022: FOR_IN
42023: IFFALSE 42059
// if GetTech ( i , side ) <> state_researched then
42025: LD_VAR 0 4
42029: PPUSH
42030: LD_VAR 0 1
42034: PPUSH
42035: CALL_OW 321
42039: PUSH
42040: LD_INT 2
42042: NONEQUAL
42043: IFFALSE 42057
// begin result := false ;
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_INT 0
42052: ST_TO_ADDR
// exit ;
42053: POP
42054: POP
42055: GO 42061
// end ;
42057: GO 42022
42059: POP
42060: POP
// end ;
42061: LD_VAR 0 3
42065: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42066: LD_INT 0
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42081: LD_VAR 0 1
42085: NOT
42086: PUSH
42087: LD_VAR 0 1
42091: PPUSH
42092: CALL_OW 257
42096: PUSH
42097: LD_INT 9
42099: NONEQUAL
42100: OR
42101: IFFALSE 42105
// exit ;
42103: GO 42678
// side := GetSide ( unit ) ;
42105: LD_ADDR_VAR 0 9
42109: PUSH
42110: LD_VAR 0 1
42114: PPUSH
42115: CALL_OW 255
42119: ST_TO_ADDR
// tech_space := tech_spacanom ;
42120: LD_ADDR_VAR 0 12
42124: PUSH
42125: LD_INT 29
42127: ST_TO_ADDR
// tech_time := tech_taurad ;
42128: LD_ADDR_VAR 0 13
42132: PUSH
42133: LD_INT 28
42135: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42136: LD_ADDR_VAR 0 11
42140: PUSH
42141: LD_VAR 0 1
42145: PPUSH
42146: CALL_OW 310
42150: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42151: LD_VAR 0 11
42155: PPUSH
42156: CALL_OW 247
42160: PUSH
42161: LD_INT 2
42163: EQUAL
42164: IFFALSE 42168
// exit ;
42166: GO 42678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42168: LD_ADDR_VAR 0 8
42172: PUSH
42173: LD_INT 81
42175: PUSH
42176: LD_VAR 0 9
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 21
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PPUSH
42206: CALL_OW 69
42210: ST_TO_ADDR
// if not tmp then
42211: LD_VAR 0 8
42215: NOT
42216: IFFALSE 42220
// exit ;
42218: GO 42678
// if in_unit then
42220: LD_VAR 0 11
42224: IFFALSE 42248
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42226: LD_ADDR_VAR 0 10
42230: PUSH
42231: LD_VAR 0 8
42235: PPUSH
42236: LD_VAR 0 11
42240: PPUSH
42241: CALL_OW 74
42245: ST_TO_ADDR
42246: GO 42268
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42248: LD_ADDR_VAR 0 10
42252: PUSH
42253: LD_VAR 0 8
42257: PPUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 74
42267: ST_TO_ADDR
// if not enemy then
42268: LD_VAR 0 10
42272: NOT
42273: IFFALSE 42277
// exit ;
42275: GO 42678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42277: LD_VAR 0 11
42281: PUSH
42282: LD_VAR 0 11
42286: PPUSH
42287: LD_VAR 0 10
42291: PPUSH
42292: CALL_OW 296
42296: PUSH
42297: LD_INT 13
42299: GREATER
42300: AND
42301: PUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: LD_VAR 0 10
42311: PPUSH
42312: CALL_OW 296
42316: PUSH
42317: LD_INT 12
42319: GREATER
42320: OR
42321: IFFALSE 42325
// exit ;
42323: GO 42678
// missile := [ 1 ] ;
42325: LD_ADDR_VAR 0 14
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42336: LD_VAR 0 9
42340: PPUSH
42341: LD_VAR 0 12
42345: PPUSH
42346: CALL_OW 325
42350: IFFALSE 42379
// missile := Insert ( missile , missile + 1 , 2 ) ;
42352: LD_ADDR_VAR 0 14
42356: PUSH
42357: LD_VAR 0 14
42361: PPUSH
42362: LD_VAR 0 14
42366: PUSH
42367: LD_INT 1
42369: PLUS
42370: PPUSH
42371: LD_INT 2
42373: PPUSH
42374: CALL_OW 2
42378: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42379: LD_VAR 0 9
42383: PPUSH
42384: LD_VAR 0 13
42388: PPUSH
42389: CALL_OW 325
42393: PUSH
42394: LD_VAR 0 10
42398: PPUSH
42399: CALL_OW 255
42403: PPUSH
42404: LD_VAR 0 13
42408: PPUSH
42409: CALL_OW 325
42413: NOT
42414: AND
42415: IFFALSE 42444
// missile := Insert ( missile , missile + 1 , 3 ) ;
42417: LD_ADDR_VAR 0 14
42421: PUSH
42422: LD_VAR 0 14
42426: PPUSH
42427: LD_VAR 0 14
42431: PUSH
42432: LD_INT 1
42434: PLUS
42435: PPUSH
42436: LD_INT 3
42438: PPUSH
42439: CALL_OW 2
42443: ST_TO_ADDR
// if missile < 2 then
42444: LD_VAR 0 14
42448: PUSH
42449: LD_INT 2
42451: LESS
42452: IFFALSE 42456
// exit ;
42454: GO 42678
// x := GetX ( enemy ) ;
42456: LD_ADDR_VAR 0 4
42460: PUSH
42461: LD_VAR 0 10
42465: PPUSH
42466: CALL_OW 250
42470: ST_TO_ADDR
// y := GetY ( enemy ) ;
42471: LD_ADDR_VAR 0 5
42475: PUSH
42476: LD_VAR 0 10
42480: PPUSH
42481: CALL_OW 251
42485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42486: LD_ADDR_VAR 0 6
42490: PUSH
42491: LD_VAR 0 4
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PPUSH
42500: LD_INT 1
42502: PPUSH
42503: CALL_OW 12
42507: PLUS
42508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42509: LD_ADDR_VAR 0 7
42513: PUSH
42514: LD_VAR 0 5
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PPUSH
42523: LD_INT 1
42525: PPUSH
42526: CALL_OW 12
42530: PLUS
42531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42532: LD_VAR 0 6
42536: PPUSH
42537: LD_VAR 0 7
42541: PPUSH
42542: CALL_OW 488
42546: NOT
42547: IFFALSE 42569
// begin _x := x ;
42549: LD_ADDR_VAR 0 6
42553: PUSH
42554: LD_VAR 0 4
42558: ST_TO_ADDR
// _y := y ;
42559: LD_ADDR_VAR 0 7
42563: PUSH
42564: LD_VAR 0 5
42568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: LD_INT 1
42576: PPUSH
42577: LD_VAR 0 14
42581: PPUSH
42582: CALL_OW 12
42586: ST_TO_ADDR
// case i of 1 :
42587: LD_VAR 0 3
42591: PUSH
42592: LD_INT 1
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42617
42600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42601: LD_VAR 0 1
42605: PPUSH
42606: LD_VAR 0 10
42610: PPUSH
42611: CALL_OW 115
42615: GO 42678
42617: LD_INT 2
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42625
42623: GO 42647
42625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42626: LD_VAR 0 1
42630: PPUSH
42631: LD_VAR 0 6
42635: PPUSH
42636: LD_VAR 0 7
42640: PPUSH
42641: CALL_OW 153
42645: GO 42678
42647: LD_INT 3
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42655
42653: GO 42677
42655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42656: LD_VAR 0 1
42660: PPUSH
42661: LD_VAR 0 6
42665: PPUSH
42666: LD_VAR 0 7
42670: PPUSH
42671: CALL_OW 154
42675: GO 42678
42677: POP
// end ;
42678: LD_VAR 0 2
42682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42683: LD_INT 0
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
// if not unit or not building then
42691: LD_VAR 0 1
42695: NOT
42696: PUSH
42697: LD_VAR 0 2
42701: NOT
42702: OR
42703: IFFALSE 42707
// exit ;
42705: GO 42865
// x := GetX ( building ) ;
42707: LD_ADDR_VAR 0 5
42711: PUSH
42712: LD_VAR 0 2
42716: PPUSH
42717: CALL_OW 250
42721: ST_TO_ADDR
// y := GetY ( building ) ;
42722: LD_ADDR_VAR 0 6
42726: PUSH
42727: LD_VAR 0 2
42731: PPUSH
42732: CALL_OW 251
42736: ST_TO_ADDR
// for i = 0 to 5 do
42737: LD_ADDR_VAR 0 4
42741: PUSH
42742: DOUBLE
42743: LD_INT 0
42745: DEC
42746: ST_TO_ADDR
42747: LD_INT 5
42749: PUSH
42750: FOR_TO
42751: IFFALSE 42863
// begin _x := ShiftX ( x , i , 3 ) ;
42753: LD_ADDR_VAR 0 7
42757: PUSH
42758: LD_VAR 0 5
42762: PPUSH
42763: LD_VAR 0 4
42767: PPUSH
42768: LD_INT 3
42770: PPUSH
42771: CALL_OW 272
42775: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42776: LD_ADDR_VAR 0 8
42780: PUSH
42781: LD_VAR 0 6
42785: PPUSH
42786: LD_VAR 0 4
42790: PPUSH
42791: LD_INT 3
42793: PPUSH
42794: CALL_OW 273
42798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42799: LD_VAR 0 7
42803: PPUSH
42804: LD_VAR 0 8
42808: PPUSH
42809: CALL_OW 488
42813: NOT
42814: IFFALSE 42818
// continue ;
42816: GO 42750
// if HexInfo ( _x , _y ) = 0 then
42818: LD_VAR 0 7
42822: PPUSH
42823: LD_VAR 0 8
42827: PPUSH
42828: CALL_OW 428
42832: PUSH
42833: LD_INT 0
42835: EQUAL
42836: IFFALSE 42861
// begin ComMoveXY ( unit , _x , _y ) ;
42838: LD_VAR 0 1
42842: PPUSH
42843: LD_VAR 0 7
42847: PPUSH
42848: LD_VAR 0 8
42852: PPUSH
42853: CALL_OW 111
// exit ;
42857: POP
42858: POP
42859: GO 42865
// end ; end ;
42861: GO 42750
42863: POP
42864: POP
// end ;
42865: LD_VAR 0 3
42869: RET
// export function ScanBase ( side , base_area ) ; begin
42870: LD_INT 0
42872: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42873: LD_ADDR_VAR 0 3
42877: PUSH
42878: LD_VAR 0 2
42882: PPUSH
42883: LD_INT 81
42885: PUSH
42886: LD_VAR 0 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PPUSH
42895: CALL_OW 70
42899: ST_TO_ADDR
// end ;
42900: LD_VAR 0 3
42904: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42905: LD_INT 0
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
// result := false ;
42911: LD_ADDR_VAR 0 2
42915: PUSH
42916: LD_INT 0
42918: ST_TO_ADDR
// side := GetSide ( unit ) ;
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_VAR 0 1
42928: PPUSH
42929: CALL_OW 255
42933: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42934: LD_ADDR_VAR 0 4
42938: PUSH
42939: LD_VAR 0 1
42943: PPUSH
42944: CALL_OW 248
42948: ST_TO_ADDR
// case nat of 1 :
42949: LD_VAR 0 4
42953: PUSH
42954: LD_INT 1
42956: DOUBLE
42957: EQUAL
42958: IFTRUE 42962
42960: GO 42973
42962: POP
// tech := tech_lassight ; 2 :
42963: LD_ADDR_VAR 0 5
42967: PUSH
42968: LD_INT 12
42970: ST_TO_ADDR
42971: GO 43012
42973: LD_INT 2
42975: DOUBLE
42976: EQUAL
42977: IFTRUE 42981
42979: GO 42992
42981: POP
// tech := tech_mortar ; 3 :
42982: LD_ADDR_VAR 0 5
42986: PUSH
42987: LD_INT 41
42989: ST_TO_ADDR
42990: GO 43012
42992: LD_INT 3
42994: DOUBLE
42995: EQUAL
42996: IFTRUE 43000
42998: GO 43011
43000: POP
// tech := tech_bazooka ; end ;
43001: LD_ADDR_VAR 0 5
43005: PUSH
43006: LD_INT 44
43008: ST_TO_ADDR
43009: GO 43012
43011: POP
// if Researched ( side , tech ) then
43012: LD_VAR 0 3
43016: PPUSH
43017: LD_VAR 0 5
43021: PPUSH
43022: CALL_OW 325
43026: IFFALSE 43053
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43028: LD_ADDR_VAR 0 2
43032: PUSH
43033: LD_INT 5
43035: PUSH
43036: LD_INT 8
43038: PUSH
43039: LD_INT 9
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: PUSH
43047: LD_VAR 0 4
43051: ARRAY
43052: ST_TO_ADDR
// end ;
43053: LD_VAR 0 2
43057: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43058: LD_INT 0
43060: PPUSH
43061: PPUSH
43062: PPUSH
// if not mines then
43063: LD_VAR 0 2
43067: NOT
43068: IFFALSE 43072
// exit ;
43070: GO 43216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43072: LD_ADDR_VAR 0 5
43076: PUSH
43077: LD_INT 81
43079: PUSH
43080: LD_VAR 0 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: LD_INT 21
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PPUSH
43110: CALL_OW 69
43114: ST_TO_ADDR
// for i in mines do
43115: LD_ADDR_VAR 0 4
43119: PUSH
43120: LD_VAR 0 2
43124: PUSH
43125: FOR_IN
43126: IFFALSE 43214
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43128: LD_VAR 0 4
43132: PUSH
43133: LD_INT 1
43135: ARRAY
43136: PPUSH
43137: LD_VAR 0 4
43141: PUSH
43142: LD_INT 2
43144: ARRAY
43145: PPUSH
43146: CALL_OW 458
43150: NOT
43151: IFFALSE 43155
// continue ;
43153: GO 43125
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43155: LD_VAR 0 4
43159: PUSH
43160: LD_INT 1
43162: ARRAY
43163: PPUSH
43164: LD_VAR 0 4
43168: PUSH
43169: LD_INT 2
43171: ARRAY
43172: PPUSH
43173: CALL_OW 428
43177: PUSH
43178: LD_VAR 0 5
43182: IN
43183: IFFALSE 43212
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43185: LD_VAR 0 4
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: PPUSH
43194: LD_VAR 0 4
43198: PUSH
43199: LD_INT 2
43201: ARRAY
43202: PPUSH
43203: LD_VAR 0 1
43207: PPUSH
43208: CALL_OW 456
// end ;
43212: GO 43125
43214: POP
43215: POP
// end ;
43216: LD_VAR 0 3
43220: RET
// export function Count ( array ) ; var i ; begin
43221: LD_INT 0
43223: PPUSH
43224: PPUSH
// result := 0 ;
43225: LD_ADDR_VAR 0 2
43229: PUSH
43230: LD_INT 0
43232: ST_TO_ADDR
// for i in array do
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_VAR 0 1
43242: PUSH
43243: FOR_IN
43244: IFFALSE 43268
// if i then
43246: LD_VAR 0 3
43250: IFFALSE 43266
// result := result + 1 ;
43252: LD_ADDR_VAR 0 2
43256: PUSH
43257: LD_VAR 0 2
43261: PUSH
43262: LD_INT 1
43264: PLUS
43265: ST_TO_ADDR
43266: GO 43243
43268: POP
43269: POP
// end ;
43270: LD_VAR 0 2
43274: RET
// export function IsEmpty ( building ) ; begin
43275: LD_INT 0
43277: PPUSH
// if not building then
43278: LD_VAR 0 1
43282: NOT
43283: IFFALSE 43287
// exit ;
43285: GO 43330
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43287: LD_ADDR_VAR 0 2
43291: PUSH
43292: LD_VAR 0 1
43296: PUSH
43297: LD_INT 22
43299: PUSH
43300: LD_VAR 0 1
43304: PPUSH
43305: CALL_OW 255
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 58
43316: PUSH
43317: EMPTY
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PPUSH
43324: CALL_OW 69
43328: IN
43329: ST_TO_ADDR
// end ;
43330: LD_VAR 0 2
43334: RET
// export function IsNotFull ( building ) ; begin
43335: LD_INT 0
43337: PPUSH
// if not building then
43338: LD_VAR 0 1
43342: NOT
43343: IFFALSE 43347
// exit ;
43345: GO 43366
// result := UnitsInside ( building ) < 6 ;
43347: LD_ADDR_VAR 0 2
43351: PUSH
43352: LD_VAR 0 1
43356: PPUSH
43357: CALL_OW 313
43361: PUSH
43362: LD_INT 6
43364: LESS
43365: ST_TO_ADDR
// end ;
43366: LD_VAR 0 2
43370: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43371: LD_INT 0
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
// tmp := [ ] ;
43377: LD_ADDR_VAR 0 3
43381: PUSH
43382: EMPTY
43383: ST_TO_ADDR
// list := [ ] ;
43384: LD_ADDR_VAR 0 5
43388: PUSH
43389: EMPTY
43390: ST_TO_ADDR
// for i = 16 to 25 do
43391: LD_ADDR_VAR 0 4
43395: PUSH
43396: DOUBLE
43397: LD_INT 16
43399: DEC
43400: ST_TO_ADDR
43401: LD_INT 25
43403: PUSH
43404: FOR_TO
43405: IFFALSE 43478
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43407: LD_ADDR_VAR 0 3
43411: PUSH
43412: LD_VAR 0 3
43416: PUSH
43417: LD_INT 22
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: CALL_OW 255
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 91
43436: PUSH
43437: LD_VAR 0 1
43441: PUSH
43442: LD_INT 6
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 30
43452: PUSH
43453: LD_VAR 0 4
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: LIST
43466: PUSH
43467: EMPTY
43468: LIST
43469: PPUSH
43470: CALL_OW 69
43474: ADD
43475: ST_TO_ADDR
43476: GO 43404
43478: POP
43479: POP
// for i = 1 to tmp do
43480: LD_ADDR_VAR 0 4
43484: PUSH
43485: DOUBLE
43486: LD_INT 1
43488: DEC
43489: ST_TO_ADDR
43490: LD_VAR 0 3
43494: PUSH
43495: FOR_TO
43496: IFFALSE 43584
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43498: LD_ADDR_VAR 0 5
43502: PUSH
43503: LD_VAR 0 5
43507: PUSH
43508: LD_VAR 0 3
43512: PUSH
43513: LD_VAR 0 4
43517: ARRAY
43518: PPUSH
43519: CALL_OW 266
43523: PUSH
43524: LD_VAR 0 3
43528: PUSH
43529: LD_VAR 0 4
43533: ARRAY
43534: PPUSH
43535: CALL_OW 250
43539: PUSH
43540: LD_VAR 0 3
43544: PUSH
43545: LD_VAR 0 4
43549: ARRAY
43550: PPUSH
43551: CALL_OW 251
43555: PUSH
43556: LD_VAR 0 3
43560: PUSH
43561: LD_VAR 0 4
43565: ARRAY
43566: PPUSH
43567: CALL_OW 254
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: ADD
43581: ST_TO_ADDR
43582: GO 43495
43584: POP
43585: POP
// result := list ;
43586: LD_ADDR_VAR 0 2
43590: PUSH
43591: LD_VAR 0 5
43595: ST_TO_ADDR
// end ;
43596: LD_VAR 0 2
43600: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43601: LD_INT 0
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
// if not factory then
43610: LD_VAR 0 1
43614: NOT
43615: IFFALSE 43619
// exit ;
43617: GO 44212
// if control = control_apeman then
43619: LD_VAR 0 4
43623: PUSH
43624: LD_INT 5
43626: EQUAL
43627: IFFALSE 43736
// begin tmp := UnitsInside ( factory ) ;
43629: LD_ADDR_VAR 0 8
43633: PUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: CALL_OW 313
43643: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43644: LD_VAR 0 8
43648: PPUSH
43649: LD_INT 25
43651: PUSH
43652: LD_INT 12
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PPUSH
43659: CALL_OW 72
43663: NOT
43664: IFFALSE 43674
// control := control_manual ;
43666: LD_ADDR_VAR 0 4
43670: PUSH
43671: LD_INT 1
43673: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43674: LD_ADDR_VAR 0 8
43678: PUSH
43679: LD_VAR 0 1
43683: PPUSH
43684: CALL 43371 0 1
43688: ST_TO_ADDR
// if tmp then
43689: LD_VAR 0 8
43693: IFFALSE 43736
// begin for i in tmp do
43695: LD_ADDR_VAR 0 7
43699: PUSH
43700: LD_VAR 0 8
43704: PUSH
43705: FOR_IN
43706: IFFALSE 43734
// if i [ 1 ] = b_ext_radio then
43708: LD_VAR 0 7
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PUSH
43717: LD_INT 22
43719: EQUAL
43720: IFFALSE 43732
// begin control := control_remote ;
43722: LD_ADDR_VAR 0 4
43726: PUSH
43727: LD_INT 2
43729: ST_TO_ADDR
// break ;
43730: GO 43734
// end ;
43732: GO 43705
43734: POP
43735: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43736: LD_VAR 0 1
43740: PPUSH
43741: LD_VAR 0 2
43745: PPUSH
43746: LD_VAR 0 3
43750: PPUSH
43751: LD_VAR 0 4
43755: PPUSH
43756: LD_VAR 0 5
43760: PPUSH
43761: CALL_OW 448
43765: IFFALSE 43800
// begin result := [ chassis , engine , control , weapon ] ;
43767: LD_ADDR_VAR 0 6
43771: PUSH
43772: LD_VAR 0 2
43776: PUSH
43777: LD_VAR 0 3
43781: PUSH
43782: LD_VAR 0 4
43786: PUSH
43787: LD_VAR 0 5
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// exit ;
43798: GO 44212
// end ; _chassis := AvailableChassisList ( factory ) ;
43800: LD_ADDR_VAR 0 9
43804: PUSH
43805: LD_VAR 0 1
43809: PPUSH
43810: CALL_OW 475
43814: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43815: LD_ADDR_VAR 0 11
43819: PUSH
43820: LD_VAR 0 1
43824: PPUSH
43825: CALL_OW 476
43829: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43830: LD_ADDR_VAR 0 12
43834: PUSH
43835: LD_VAR 0 1
43839: PPUSH
43840: CALL_OW 477
43844: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43845: LD_ADDR_VAR 0 10
43849: PUSH
43850: LD_VAR 0 1
43854: PPUSH
43855: CALL_OW 478
43859: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43860: LD_VAR 0 9
43864: NOT
43865: PUSH
43866: LD_VAR 0 11
43870: NOT
43871: OR
43872: PUSH
43873: LD_VAR 0 12
43877: NOT
43878: OR
43879: PUSH
43880: LD_VAR 0 10
43884: NOT
43885: OR
43886: IFFALSE 43921
// begin result := [ chassis , engine , control , weapon ] ;
43888: LD_ADDR_VAR 0 6
43892: PUSH
43893: LD_VAR 0 2
43897: PUSH
43898: LD_VAR 0 3
43902: PUSH
43903: LD_VAR 0 4
43907: PUSH
43908: LD_VAR 0 5
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: ST_TO_ADDR
// exit ;
43919: GO 44212
// end ; if not chassis in _chassis then
43921: LD_VAR 0 2
43925: PUSH
43926: LD_VAR 0 9
43930: IN
43931: NOT
43932: IFFALSE 43958
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43934: LD_ADDR_VAR 0 2
43938: PUSH
43939: LD_VAR 0 9
43943: PUSH
43944: LD_INT 1
43946: PPUSH
43947: LD_VAR 0 9
43951: PPUSH
43952: CALL_OW 12
43956: ARRAY
43957: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43958: LD_VAR 0 2
43962: PPUSH
43963: LD_VAR 0 3
43967: PPUSH
43968: CALL 44217 0 2
43972: NOT
43973: IFFALSE 44032
// repeat engine := _engine [ 1 ] ;
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_VAR 0 11
43984: PUSH
43985: LD_INT 1
43987: ARRAY
43988: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43989: LD_ADDR_VAR 0 11
43993: PUSH
43994: LD_VAR 0 11
43998: PPUSH
43999: LD_INT 1
44001: PPUSH
44002: CALL_OW 3
44006: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44007: LD_VAR 0 2
44011: PPUSH
44012: LD_VAR 0 3
44016: PPUSH
44017: CALL 44217 0 2
44021: PUSH
44022: LD_VAR 0 11
44026: PUSH
44027: EMPTY
44028: EQUAL
44029: OR
44030: IFFALSE 43975
// if not control in _control then
44032: LD_VAR 0 4
44036: PUSH
44037: LD_VAR 0 12
44041: IN
44042: NOT
44043: IFFALSE 44069
// control := _control [ rand ( 1 , _control ) ] ;
44045: LD_ADDR_VAR 0 4
44049: PUSH
44050: LD_VAR 0 12
44054: PUSH
44055: LD_INT 1
44057: PPUSH
44058: LD_VAR 0 12
44062: PPUSH
44063: CALL_OW 12
44067: ARRAY
44068: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44069: LD_VAR 0 2
44073: PPUSH
44074: LD_VAR 0 5
44078: PPUSH
44079: CALL 44437 0 2
44083: NOT
44084: IFFALSE 44143
// repeat weapon := _weapon [ 1 ] ;
44086: LD_ADDR_VAR 0 5
44090: PUSH
44091: LD_VAR 0 10
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44100: LD_ADDR_VAR 0 10
44104: PUSH
44105: LD_VAR 0 10
44109: PPUSH
44110: LD_INT 1
44112: PPUSH
44113: CALL_OW 3
44117: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44118: LD_VAR 0 2
44122: PPUSH
44123: LD_VAR 0 5
44127: PPUSH
44128: CALL 44437 0 2
44132: PUSH
44133: LD_VAR 0 10
44137: PUSH
44138: EMPTY
44139: EQUAL
44140: OR
44141: IFFALSE 44086
// result := [ ] ;
44143: LD_ADDR_VAR 0 6
44147: PUSH
44148: EMPTY
44149: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44150: LD_VAR 0 1
44154: PPUSH
44155: LD_VAR 0 2
44159: PPUSH
44160: LD_VAR 0 3
44164: PPUSH
44165: LD_VAR 0 4
44169: PPUSH
44170: LD_VAR 0 5
44174: PPUSH
44175: CALL_OW 448
44179: IFFALSE 44212
// result := [ chassis , engine , control , weapon ] ;
44181: LD_ADDR_VAR 0 6
44185: PUSH
44186: LD_VAR 0 2
44190: PUSH
44191: LD_VAR 0 3
44195: PUSH
44196: LD_VAR 0 4
44200: PUSH
44201: LD_VAR 0 5
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: ST_TO_ADDR
// end ;
44212: LD_VAR 0 6
44216: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44217: LD_INT 0
44219: PPUSH
// if not chassis or not engine then
44220: LD_VAR 0 1
44224: NOT
44225: PUSH
44226: LD_VAR 0 2
44230: NOT
44231: OR
44232: IFFALSE 44236
// exit ;
44234: GO 44432
// case engine of engine_solar :
44236: LD_VAR 0 2
44240: PUSH
44241: LD_INT 2
44243: DOUBLE
44244: EQUAL
44245: IFTRUE 44249
44247: GO 44287
44249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44250: LD_ADDR_VAR 0 3
44254: PUSH
44255: LD_INT 11
44257: PUSH
44258: LD_INT 12
44260: PUSH
44261: LD_INT 13
44263: PUSH
44264: LD_INT 14
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: ST_TO_ADDR
44285: GO 44416
44287: LD_INT 1
44289: DOUBLE
44290: EQUAL
44291: IFTRUE 44295
44293: GO 44357
44295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44296: LD_ADDR_VAR 0 3
44300: PUSH
44301: LD_INT 11
44303: PUSH
44304: LD_INT 12
44306: PUSH
44307: LD_INT 13
44309: PUSH
44310: LD_INT 14
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: LD_INT 4
44324: PUSH
44325: LD_INT 5
44327: PUSH
44328: LD_INT 21
44330: PUSH
44331: LD_INT 23
44333: PUSH
44334: LD_INT 22
44336: PUSH
44337: LD_INT 24
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
44355: GO 44416
44357: LD_INT 3
44359: DOUBLE
44360: EQUAL
44361: IFTRUE 44365
44363: GO 44415
44365: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44366: LD_ADDR_VAR 0 3
44370: PUSH
44371: LD_INT 13
44373: PUSH
44374: LD_INT 14
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 3
44382: PUSH
44383: LD_INT 4
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: LD_INT 21
44391: PUSH
44392: LD_INT 22
44394: PUSH
44395: LD_INT 23
44397: PUSH
44398: LD_INT 24
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
44413: GO 44416
44415: POP
// result := ( chassis in result ) ;
44416: LD_ADDR_VAR 0 3
44420: PUSH
44421: LD_VAR 0 1
44425: PUSH
44426: LD_VAR 0 3
44430: IN
44431: ST_TO_ADDR
// end ;
44432: LD_VAR 0 3
44436: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44437: LD_INT 0
44439: PPUSH
// if not chassis or not weapon then
44440: LD_VAR 0 1
44444: NOT
44445: PUSH
44446: LD_VAR 0 2
44450: NOT
44451: OR
44452: IFFALSE 44456
// exit ;
44454: GO 45518
// case weapon of us_machine_gun :
44456: LD_VAR 0 2
44460: PUSH
44461: LD_INT 2
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44499
44469: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 4
44486: PUSH
44487: LD_INT 5
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
44497: GO 45502
44499: LD_INT 3
44501: DOUBLE
44502: EQUAL
44503: IFTRUE 44507
44505: GO 44537
44507: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44508: LD_ADDR_VAR 0 3
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 4
44524: PUSH
44525: LD_INT 5
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
44535: GO 45502
44537: LD_INT 11
44539: DOUBLE
44540: EQUAL
44541: IFTRUE 44545
44543: GO 44575
44545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44546: LD_ADDR_VAR 0 3
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: LD_INT 4
44562: PUSH
44563: LD_INT 5
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: ST_TO_ADDR
44573: GO 45502
44575: LD_INT 4
44577: DOUBLE
44578: EQUAL
44579: IFTRUE 44583
44581: GO 44609
44583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: LD_INT 4
44597: PUSH
44598: LD_INT 5
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: ST_TO_ADDR
44607: GO 45502
44609: LD_INT 5
44611: DOUBLE
44612: EQUAL
44613: IFTRUE 44617
44615: GO 44643
44617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44618: LD_ADDR_VAR 0 3
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: LD_INT 4
44631: PUSH
44632: LD_INT 5
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
44641: GO 45502
44643: LD_INT 9
44645: DOUBLE
44646: EQUAL
44647: IFTRUE 44651
44649: GO 44677
44651: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44652: LD_ADDR_VAR 0 3
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 3
44662: PUSH
44663: LD_INT 4
44665: PUSH
44666: LD_INT 5
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
44675: GO 45502
44677: LD_INT 7
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44711
44685: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: LD_INT 4
44699: PUSH
44700: LD_INT 5
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: ST_TO_ADDR
44709: GO 45502
44711: LD_INT 12
44713: DOUBLE
44714: EQUAL
44715: IFTRUE 44719
44717: GO 44745
44719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44720: LD_ADDR_VAR 0 3
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: LD_INT 5
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: ST_TO_ADDR
44743: GO 45502
44745: LD_INT 13
44747: DOUBLE
44748: EQUAL
44749: IFTRUE 44753
44751: GO 44779
44753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44754: LD_ADDR_VAR 0 3
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: LD_INT 4
44767: PUSH
44768: LD_INT 5
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
44777: GO 45502
44779: LD_INT 14
44781: DOUBLE
44782: EQUAL
44783: IFTRUE 44787
44785: GO 44805
44787: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44788: LD_ADDR_VAR 0 3
44792: PUSH
44793: LD_INT 4
44795: PUSH
44796: LD_INT 5
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: ST_TO_ADDR
44803: GO 45502
44805: LD_INT 6
44807: DOUBLE
44808: EQUAL
44809: IFTRUE 44813
44811: GO 44831
44813: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44814: LD_ADDR_VAR 0 3
44818: PUSH
44819: LD_INT 4
44821: PUSH
44822: LD_INT 5
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: ST_TO_ADDR
44829: GO 45502
44831: LD_INT 10
44833: DOUBLE
44834: EQUAL
44835: IFTRUE 44839
44837: GO 44857
44839: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44840: LD_ADDR_VAR 0 3
44844: PUSH
44845: LD_INT 4
44847: PUSH
44848: LD_INT 5
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: ST_TO_ADDR
44855: GO 45502
44857: LD_INT 22
44859: DOUBLE
44860: EQUAL
44861: IFTRUE 44865
44863: GO 44891
44865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44866: LD_ADDR_VAR 0 3
44870: PUSH
44871: LD_INT 11
44873: PUSH
44874: LD_INT 12
44876: PUSH
44877: LD_INT 13
44879: PUSH
44880: LD_INT 14
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: ST_TO_ADDR
44889: GO 45502
44891: LD_INT 23
44893: DOUBLE
44894: EQUAL
44895: IFTRUE 44899
44897: GO 44925
44899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44900: LD_ADDR_VAR 0 3
44904: PUSH
44905: LD_INT 11
44907: PUSH
44908: LD_INT 12
44910: PUSH
44911: LD_INT 13
44913: PUSH
44914: LD_INT 14
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: ST_TO_ADDR
44923: GO 45502
44925: LD_INT 24
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44933
44931: GO 44959
44933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44934: LD_ADDR_VAR 0 3
44938: PUSH
44939: LD_INT 11
44941: PUSH
44942: LD_INT 12
44944: PUSH
44945: LD_INT 13
44947: PUSH
44948: LD_INT 14
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
44957: GO 45502
44959: LD_INT 30
44961: DOUBLE
44962: EQUAL
44963: IFTRUE 44967
44965: GO 44993
44967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_INT 11
44975: PUSH
44976: LD_INT 12
44978: PUSH
44979: LD_INT 13
44981: PUSH
44982: LD_INT 14
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: ST_TO_ADDR
44991: GO 45502
44993: LD_INT 25
44995: DOUBLE
44996: EQUAL
44997: IFTRUE 45001
44999: GO 45019
45001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45002: LD_ADDR_VAR 0 3
45006: PUSH
45007: LD_INT 13
45009: PUSH
45010: LD_INT 14
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: ST_TO_ADDR
45017: GO 45502
45019: LD_INT 27
45021: DOUBLE
45022: EQUAL
45023: IFTRUE 45027
45025: GO 45045
45027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45028: LD_ADDR_VAR 0 3
45032: PUSH
45033: LD_INT 13
45035: PUSH
45036: LD_INT 14
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: ST_TO_ADDR
45043: GO 45502
45045: LD_EXP 123
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45081
45055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 11
45063: PUSH
45064: LD_INT 12
45066: PUSH
45067: LD_INT 13
45069: PUSH
45070: LD_INT 14
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
45079: GO 45502
45081: LD_INT 28
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45107
45089: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 13
45097: PUSH
45098: LD_INT 14
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: ST_TO_ADDR
45105: GO 45502
45107: LD_INT 29
45109: DOUBLE
45110: EQUAL
45111: IFTRUE 45115
45113: GO 45133
45115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45116: LD_ADDR_VAR 0 3
45120: PUSH
45121: LD_INT 13
45123: PUSH
45124: LD_INT 14
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: ST_TO_ADDR
45131: GO 45502
45133: LD_INT 31
45135: DOUBLE
45136: EQUAL
45137: IFTRUE 45141
45139: GO 45159
45141: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45142: LD_ADDR_VAR 0 3
45146: PUSH
45147: LD_INT 13
45149: PUSH
45150: LD_INT 14
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: ST_TO_ADDR
45157: GO 45502
45159: LD_INT 26
45161: DOUBLE
45162: EQUAL
45163: IFTRUE 45167
45165: GO 45185
45167: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45168: LD_ADDR_VAR 0 3
45172: PUSH
45173: LD_INT 13
45175: PUSH
45176: LD_INT 14
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: ST_TO_ADDR
45183: GO 45502
45185: LD_INT 42
45187: DOUBLE
45188: EQUAL
45189: IFTRUE 45193
45191: GO 45219
45193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_INT 21
45201: PUSH
45202: LD_INT 22
45204: PUSH
45205: LD_INT 23
45207: PUSH
45208: LD_INT 24
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
45217: GO 45502
45219: LD_INT 43
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45253
45227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 21
45235: PUSH
45236: LD_INT 22
45238: PUSH
45239: LD_INT 23
45241: PUSH
45242: LD_INT 24
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
45251: GO 45502
45253: LD_INT 44
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45287
45261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_INT 21
45269: PUSH
45270: LD_INT 22
45272: PUSH
45273: LD_INT 23
45275: PUSH
45276: LD_INT 24
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
45285: GO 45502
45287: LD_INT 45
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45321
45295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 21
45303: PUSH
45304: LD_INT 22
45306: PUSH
45307: LD_INT 23
45309: PUSH
45310: LD_INT 24
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
45319: GO 45502
45321: LD_INT 49
45323: DOUBLE
45324: EQUAL
45325: IFTRUE 45329
45327: GO 45355
45329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_INT 21
45337: PUSH
45338: LD_INT 22
45340: PUSH
45341: LD_INT 23
45343: PUSH
45344: LD_INT 24
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
45353: GO 45502
45355: LD_INT 51
45357: DOUBLE
45358: EQUAL
45359: IFTRUE 45363
45361: GO 45389
45363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_INT 21
45371: PUSH
45372: LD_INT 22
45374: PUSH
45375: LD_INT 23
45377: PUSH
45378: LD_INT 24
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
45387: GO 45502
45389: LD_INT 52
45391: DOUBLE
45392: EQUAL
45393: IFTRUE 45397
45395: GO 45423
45397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45398: LD_ADDR_VAR 0 3
45402: PUSH
45403: LD_INT 21
45405: PUSH
45406: LD_INT 22
45408: PUSH
45409: LD_INT 23
45411: PUSH
45412: LD_INT 24
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
45421: GO 45502
45423: LD_INT 53
45425: DOUBLE
45426: EQUAL
45427: IFTRUE 45431
45429: GO 45449
45431: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45432: LD_ADDR_VAR 0 3
45436: PUSH
45437: LD_INT 23
45439: PUSH
45440: LD_INT 24
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: ST_TO_ADDR
45447: GO 45502
45449: LD_INT 46
45451: DOUBLE
45452: EQUAL
45453: IFTRUE 45457
45455: GO 45475
45457: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45458: LD_ADDR_VAR 0 3
45462: PUSH
45463: LD_INT 23
45465: PUSH
45466: LD_INT 24
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: ST_TO_ADDR
45473: GO 45502
45475: LD_INT 47
45477: DOUBLE
45478: EQUAL
45479: IFTRUE 45483
45481: GO 45501
45483: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45484: LD_ADDR_VAR 0 3
45488: PUSH
45489: LD_INT 23
45491: PUSH
45492: LD_INT 24
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: ST_TO_ADDR
45499: GO 45502
45501: POP
// result := ( chassis in result ) ;
45502: LD_ADDR_VAR 0 3
45506: PUSH
45507: LD_VAR 0 1
45511: PUSH
45512: LD_VAR 0 3
45516: IN
45517: ST_TO_ADDR
// end ;
45518: LD_VAR 0 3
45522: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45523: LD_INT 0
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
// result := array ;
45532: LD_ADDR_VAR 0 5
45536: PUSH
45537: LD_VAR 0 1
45541: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45542: LD_VAR 0 1
45546: NOT
45547: PUSH
45548: LD_VAR 0 2
45552: NOT
45553: OR
45554: PUSH
45555: LD_VAR 0 3
45559: NOT
45560: OR
45561: PUSH
45562: LD_VAR 0 2
45566: PUSH
45567: LD_VAR 0 1
45571: GREATER
45572: OR
45573: PUSH
45574: LD_VAR 0 3
45578: PUSH
45579: LD_VAR 0 1
45583: GREATER
45584: OR
45585: IFFALSE 45589
// exit ;
45587: GO 45885
// if direction then
45589: LD_VAR 0 4
45593: IFFALSE 45657
// begin d := 1 ;
45595: LD_ADDR_VAR 0 9
45599: PUSH
45600: LD_INT 1
45602: ST_TO_ADDR
// if i_from > i_to then
45603: LD_VAR 0 2
45607: PUSH
45608: LD_VAR 0 3
45612: GREATER
45613: IFFALSE 45639
// length := ( array - i_from ) + i_to else
45615: LD_ADDR_VAR 0 11
45619: PUSH
45620: LD_VAR 0 1
45624: PUSH
45625: LD_VAR 0 2
45629: MINUS
45630: PUSH
45631: LD_VAR 0 3
45635: PLUS
45636: ST_TO_ADDR
45637: GO 45655
// length := i_to - i_from ;
45639: LD_ADDR_VAR 0 11
45643: PUSH
45644: LD_VAR 0 3
45648: PUSH
45649: LD_VAR 0 2
45653: MINUS
45654: ST_TO_ADDR
// end else
45655: GO 45718
// begin d := - 1 ;
45657: LD_ADDR_VAR 0 9
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: ST_TO_ADDR
// if i_from > i_to then
45666: LD_VAR 0 2
45670: PUSH
45671: LD_VAR 0 3
45675: GREATER
45676: IFFALSE 45696
// length := i_from - i_to else
45678: LD_ADDR_VAR 0 11
45682: PUSH
45683: LD_VAR 0 2
45687: PUSH
45688: LD_VAR 0 3
45692: MINUS
45693: ST_TO_ADDR
45694: GO 45718
// length := ( array - i_to ) + i_from ;
45696: LD_ADDR_VAR 0 11
45700: PUSH
45701: LD_VAR 0 1
45705: PUSH
45706: LD_VAR 0 3
45710: MINUS
45711: PUSH
45712: LD_VAR 0 2
45716: PLUS
45717: ST_TO_ADDR
// end ; if not length then
45718: LD_VAR 0 11
45722: NOT
45723: IFFALSE 45727
// exit ;
45725: GO 45885
// tmp := array ;
45727: LD_ADDR_VAR 0 10
45731: PUSH
45732: LD_VAR 0 1
45736: ST_TO_ADDR
// for i = 1 to length do
45737: LD_ADDR_VAR 0 6
45741: PUSH
45742: DOUBLE
45743: LD_INT 1
45745: DEC
45746: ST_TO_ADDR
45747: LD_VAR 0 11
45751: PUSH
45752: FOR_TO
45753: IFFALSE 45873
// begin for j = 1 to array do
45755: LD_ADDR_VAR 0 7
45759: PUSH
45760: DOUBLE
45761: LD_INT 1
45763: DEC
45764: ST_TO_ADDR
45765: LD_VAR 0 1
45769: PUSH
45770: FOR_TO
45771: IFFALSE 45859
// begin k := j + d ;
45773: LD_ADDR_VAR 0 8
45777: PUSH
45778: LD_VAR 0 7
45782: PUSH
45783: LD_VAR 0 9
45787: PLUS
45788: ST_TO_ADDR
// if k > array then
45789: LD_VAR 0 8
45793: PUSH
45794: LD_VAR 0 1
45798: GREATER
45799: IFFALSE 45809
// k := 1 ;
45801: LD_ADDR_VAR 0 8
45805: PUSH
45806: LD_INT 1
45808: ST_TO_ADDR
// if not k then
45809: LD_VAR 0 8
45813: NOT
45814: IFFALSE 45826
// k := array ;
45816: LD_ADDR_VAR 0 8
45820: PUSH
45821: LD_VAR 0 1
45825: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45826: LD_ADDR_VAR 0 10
45830: PUSH
45831: LD_VAR 0 10
45835: PPUSH
45836: LD_VAR 0 8
45840: PPUSH
45841: LD_VAR 0 1
45845: PUSH
45846: LD_VAR 0 7
45850: ARRAY
45851: PPUSH
45852: CALL_OW 1
45856: ST_TO_ADDR
// end ;
45857: GO 45770
45859: POP
45860: POP
// array := tmp ;
45861: LD_ADDR_VAR 0 1
45865: PUSH
45866: LD_VAR 0 10
45870: ST_TO_ADDR
// end ;
45871: GO 45752
45873: POP
45874: POP
// result := array ;
45875: LD_ADDR_VAR 0 5
45879: PUSH
45880: LD_VAR 0 1
45884: ST_TO_ADDR
// end ;
45885: LD_VAR 0 5
45889: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45890: LD_INT 0
45892: PPUSH
45893: PPUSH
// result := 0 ;
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_INT 0
45901: ST_TO_ADDR
// if not array or not value in array then
45902: LD_VAR 0 1
45906: NOT
45907: PUSH
45908: LD_VAR 0 2
45912: PUSH
45913: LD_VAR 0 1
45917: IN
45918: NOT
45919: OR
45920: IFFALSE 45924
// exit ;
45922: GO 45978
// for i = 1 to array do
45924: LD_ADDR_VAR 0 4
45928: PUSH
45929: DOUBLE
45930: LD_INT 1
45932: DEC
45933: ST_TO_ADDR
45934: LD_VAR 0 1
45938: PUSH
45939: FOR_TO
45940: IFFALSE 45976
// if value = array [ i ] then
45942: LD_VAR 0 2
45946: PUSH
45947: LD_VAR 0 1
45951: PUSH
45952: LD_VAR 0 4
45956: ARRAY
45957: EQUAL
45958: IFFALSE 45974
// begin result := i ;
45960: LD_ADDR_VAR 0 3
45964: PUSH
45965: LD_VAR 0 4
45969: ST_TO_ADDR
// exit ;
45970: POP
45971: POP
45972: GO 45978
// end ;
45974: GO 45939
45976: POP
45977: POP
// end ;
45978: LD_VAR 0 3
45982: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45983: LD_INT 0
45985: PPUSH
// vc_chassis := chassis ;
45986: LD_ADDR_OWVAR 37
45990: PUSH
45991: LD_VAR 0 1
45995: ST_TO_ADDR
// vc_engine := engine ;
45996: LD_ADDR_OWVAR 39
46000: PUSH
46001: LD_VAR 0 2
46005: ST_TO_ADDR
// vc_control := control ;
46006: LD_ADDR_OWVAR 38
46010: PUSH
46011: LD_VAR 0 3
46015: ST_TO_ADDR
// vc_weapon := weapon ;
46016: LD_ADDR_OWVAR 40
46020: PUSH
46021: LD_VAR 0 4
46025: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46026: LD_ADDR_OWVAR 41
46030: PUSH
46031: LD_VAR 0 5
46035: ST_TO_ADDR
// end ;
46036: LD_VAR 0 6
46040: RET
// export function WantPlant ( unit ) ; var task ; begin
46041: LD_INT 0
46043: PPUSH
46044: PPUSH
// result := false ;
46045: LD_ADDR_VAR 0 2
46049: PUSH
46050: LD_INT 0
46052: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46053: LD_ADDR_VAR 0 3
46057: PUSH
46058: LD_VAR 0 1
46062: PPUSH
46063: CALL_OW 437
46067: ST_TO_ADDR
// if task then
46068: LD_VAR 0 3
46072: IFFALSE 46100
// if task [ 1 ] [ 1 ] = p then
46074: LD_VAR 0 3
46078: PUSH
46079: LD_INT 1
46081: ARRAY
46082: PUSH
46083: LD_INT 1
46085: ARRAY
46086: PUSH
46087: LD_STRING p
46089: EQUAL
46090: IFFALSE 46100
// result := true ;
46092: LD_ADDR_VAR 0 2
46096: PUSH
46097: LD_INT 1
46099: ST_TO_ADDR
// end ;
46100: LD_VAR 0 2
46104: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46105: LD_INT 0
46107: PPUSH
46108: PPUSH
46109: PPUSH
46110: PPUSH
// if pos < 1 then
46111: LD_VAR 0 2
46115: PUSH
46116: LD_INT 1
46118: LESS
46119: IFFALSE 46123
// exit ;
46121: GO 46426
// if pos = 1 then
46123: LD_VAR 0 2
46127: PUSH
46128: LD_INT 1
46130: EQUAL
46131: IFFALSE 46164
// result := Replace ( arr , pos [ 1 ] , value ) else
46133: LD_ADDR_VAR 0 4
46137: PUSH
46138: LD_VAR 0 1
46142: PPUSH
46143: LD_VAR 0 2
46147: PUSH
46148: LD_INT 1
46150: ARRAY
46151: PPUSH
46152: LD_VAR 0 3
46156: PPUSH
46157: CALL_OW 1
46161: ST_TO_ADDR
46162: GO 46426
// begin tmp := arr ;
46164: LD_ADDR_VAR 0 6
46168: PUSH
46169: LD_VAR 0 1
46173: ST_TO_ADDR
// s_arr := [ tmp ] ;
46174: LD_ADDR_VAR 0 7
46178: PUSH
46179: LD_VAR 0 6
46183: PUSH
46184: EMPTY
46185: LIST
46186: ST_TO_ADDR
// for i = 1 to pos - 1 do
46187: LD_ADDR_VAR 0 5
46191: PUSH
46192: DOUBLE
46193: LD_INT 1
46195: DEC
46196: ST_TO_ADDR
46197: LD_VAR 0 2
46201: PUSH
46202: LD_INT 1
46204: MINUS
46205: PUSH
46206: FOR_TO
46207: IFFALSE 46252
// begin tmp := tmp [ pos [ i ] ] ;
46209: LD_ADDR_VAR 0 6
46213: PUSH
46214: LD_VAR 0 6
46218: PUSH
46219: LD_VAR 0 2
46223: PUSH
46224: LD_VAR 0 5
46228: ARRAY
46229: ARRAY
46230: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46231: LD_ADDR_VAR 0 7
46235: PUSH
46236: LD_VAR 0 7
46240: PUSH
46241: LD_VAR 0 6
46245: PUSH
46246: EMPTY
46247: LIST
46248: ADD
46249: ST_TO_ADDR
// end ;
46250: GO 46206
46252: POP
46253: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46254: LD_ADDR_VAR 0 6
46258: PUSH
46259: LD_VAR 0 6
46263: PPUSH
46264: LD_VAR 0 2
46268: PUSH
46269: LD_VAR 0 2
46273: ARRAY
46274: PPUSH
46275: LD_VAR 0 3
46279: PPUSH
46280: CALL_OW 1
46284: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46285: LD_ADDR_VAR 0 7
46289: PUSH
46290: LD_VAR 0 7
46294: PPUSH
46295: LD_VAR 0 7
46299: PPUSH
46300: LD_VAR 0 6
46304: PPUSH
46305: CALL_OW 1
46309: ST_TO_ADDR
// for i = s_arr downto 2 do
46310: LD_ADDR_VAR 0 5
46314: PUSH
46315: DOUBLE
46316: LD_VAR 0 7
46320: INC
46321: ST_TO_ADDR
46322: LD_INT 2
46324: PUSH
46325: FOR_DOWNTO
46326: IFFALSE 46410
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46328: LD_ADDR_VAR 0 6
46332: PUSH
46333: LD_VAR 0 7
46337: PUSH
46338: LD_VAR 0 5
46342: PUSH
46343: LD_INT 1
46345: MINUS
46346: ARRAY
46347: PPUSH
46348: LD_VAR 0 2
46352: PUSH
46353: LD_VAR 0 5
46357: PUSH
46358: LD_INT 1
46360: MINUS
46361: ARRAY
46362: PPUSH
46363: LD_VAR 0 7
46367: PUSH
46368: LD_VAR 0 5
46372: ARRAY
46373: PPUSH
46374: CALL_OW 1
46378: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46379: LD_ADDR_VAR 0 7
46383: PUSH
46384: LD_VAR 0 7
46388: PPUSH
46389: LD_VAR 0 5
46393: PUSH
46394: LD_INT 1
46396: MINUS
46397: PPUSH
46398: LD_VAR 0 6
46402: PPUSH
46403: CALL_OW 1
46407: ST_TO_ADDR
// end ;
46408: GO 46325
46410: POP
46411: POP
// result := s_arr [ 1 ] ;
46412: LD_ADDR_VAR 0 4
46416: PUSH
46417: LD_VAR 0 7
46421: PUSH
46422: LD_INT 1
46424: ARRAY
46425: ST_TO_ADDR
// end ; end ;
46426: LD_VAR 0 4
46430: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46431: LD_INT 0
46433: PPUSH
46434: PPUSH
// if not list then
46435: LD_VAR 0 1
46439: NOT
46440: IFFALSE 46444
// exit ;
46442: GO 46535
// i := list [ pos1 ] ;
46444: LD_ADDR_VAR 0 5
46448: PUSH
46449: LD_VAR 0 1
46453: PUSH
46454: LD_VAR 0 2
46458: ARRAY
46459: ST_TO_ADDR
// if not i then
46460: LD_VAR 0 5
46464: NOT
46465: IFFALSE 46469
// exit ;
46467: GO 46535
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46469: LD_ADDR_VAR 0 1
46473: PUSH
46474: LD_VAR 0 1
46478: PPUSH
46479: LD_VAR 0 2
46483: PPUSH
46484: LD_VAR 0 1
46488: PUSH
46489: LD_VAR 0 3
46493: ARRAY
46494: PPUSH
46495: CALL_OW 1
46499: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46500: LD_ADDR_VAR 0 1
46504: PUSH
46505: LD_VAR 0 1
46509: PPUSH
46510: LD_VAR 0 3
46514: PPUSH
46515: LD_VAR 0 5
46519: PPUSH
46520: CALL_OW 1
46524: ST_TO_ADDR
// result := list ;
46525: LD_ADDR_VAR 0 4
46529: PUSH
46530: LD_VAR 0 1
46534: ST_TO_ADDR
// end ;
46535: LD_VAR 0 4
46539: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46540: LD_INT 0
46542: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46543: LD_ADDR_VAR 0 5
46547: PUSH
46548: LD_VAR 0 1
46552: PPUSH
46553: CALL_OW 250
46557: PPUSH
46558: LD_VAR 0 1
46562: PPUSH
46563: CALL_OW 251
46567: PPUSH
46568: LD_VAR 0 2
46572: PPUSH
46573: LD_VAR 0 3
46577: PPUSH
46578: LD_VAR 0 4
46582: PPUSH
46583: CALL 46593 0 5
46587: ST_TO_ADDR
// end ;
46588: LD_VAR 0 5
46592: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46593: LD_INT 0
46595: PPUSH
46596: PPUSH
46597: PPUSH
46598: PPUSH
// if not list then
46599: LD_VAR 0 3
46603: NOT
46604: IFFALSE 46608
// exit ;
46606: GO 46996
// result := [ ] ;
46608: LD_ADDR_VAR 0 6
46612: PUSH
46613: EMPTY
46614: ST_TO_ADDR
// for i in list do
46615: LD_ADDR_VAR 0 7
46619: PUSH
46620: LD_VAR 0 3
46624: PUSH
46625: FOR_IN
46626: IFFALSE 46828
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46628: LD_ADDR_VAR 0 9
46632: PUSH
46633: LD_VAR 0 7
46637: PPUSH
46638: LD_VAR 0 1
46642: PPUSH
46643: LD_VAR 0 2
46647: PPUSH
46648: CALL_OW 297
46652: ST_TO_ADDR
// if not result then
46653: LD_VAR 0 6
46657: NOT
46658: IFFALSE 46684
// result := [ [ i , tmp ] ] else
46660: LD_ADDR_VAR 0 6
46664: PUSH
46665: LD_VAR 0 7
46669: PUSH
46670: LD_VAR 0 9
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: ST_TO_ADDR
46682: GO 46826
// begin if result [ result ] [ 2 ] < tmp then
46684: LD_VAR 0 6
46688: PUSH
46689: LD_VAR 0 6
46693: ARRAY
46694: PUSH
46695: LD_INT 2
46697: ARRAY
46698: PUSH
46699: LD_VAR 0 9
46703: LESS
46704: IFFALSE 46746
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46706: LD_ADDR_VAR 0 6
46710: PUSH
46711: LD_VAR 0 6
46715: PPUSH
46716: LD_VAR 0 6
46720: PUSH
46721: LD_INT 1
46723: PLUS
46724: PPUSH
46725: LD_VAR 0 7
46729: PUSH
46730: LD_VAR 0 9
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PPUSH
46739: CALL_OW 2
46743: ST_TO_ADDR
46744: GO 46826
// for j = 1 to result do
46746: LD_ADDR_VAR 0 8
46750: PUSH
46751: DOUBLE
46752: LD_INT 1
46754: DEC
46755: ST_TO_ADDR
46756: LD_VAR 0 6
46760: PUSH
46761: FOR_TO
46762: IFFALSE 46824
// begin if tmp < result [ j ] [ 2 ] then
46764: LD_VAR 0 9
46768: PUSH
46769: LD_VAR 0 6
46773: PUSH
46774: LD_VAR 0 8
46778: ARRAY
46779: PUSH
46780: LD_INT 2
46782: ARRAY
46783: LESS
46784: IFFALSE 46822
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46786: LD_ADDR_VAR 0 6
46790: PUSH
46791: LD_VAR 0 6
46795: PPUSH
46796: LD_VAR 0 8
46800: PPUSH
46801: LD_VAR 0 7
46805: PUSH
46806: LD_VAR 0 9
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PPUSH
46815: CALL_OW 2
46819: ST_TO_ADDR
// break ;
46820: GO 46824
// end ; end ;
46822: GO 46761
46824: POP
46825: POP
// end ; end ;
46826: GO 46625
46828: POP
46829: POP
// if result and not asc then
46830: LD_VAR 0 6
46834: PUSH
46835: LD_VAR 0 4
46839: NOT
46840: AND
46841: IFFALSE 46916
// begin tmp := result ;
46843: LD_ADDR_VAR 0 9
46847: PUSH
46848: LD_VAR 0 6
46852: ST_TO_ADDR
// for i = tmp downto 1 do
46853: LD_ADDR_VAR 0 7
46857: PUSH
46858: DOUBLE
46859: LD_VAR 0 9
46863: INC
46864: ST_TO_ADDR
46865: LD_INT 1
46867: PUSH
46868: FOR_DOWNTO
46869: IFFALSE 46914
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46871: LD_ADDR_VAR 0 6
46875: PUSH
46876: LD_VAR 0 6
46880: PPUSH
46881: LD_VAR 0 9
46885: PUSH
46886: LD_VAR 0 7
46890: MINUS
46891: PUSH
46892: LD_INT 1
46894: PLUS
46895: PPUSH
46896: LD_VAR 0 9
46900: PUSH
46901: LD_VAR 0 7
46905: ARRAY
46906: PPUSH
46907: CALL_OW 1
46911: ST_TO_ADDR
46912: GO 46868
46914: POP
46915: POP
// end ; tmp := [ ] ;
46916: LD_ADDR_VAR 0 9
46920: PUSH
46921: EMPTY
46922: ST_TO_ADDR
// if mode then
46923: LD_VAR 0 5
46927: IFFALSE 46996
// begin for i = 1 to result do
46929: LD_ADDR_VAR 0 7
46933: PUSH
46934: DOUBLE
46935: LD_INT 1
46937: DEC
46938: ST_TO_ADDR
46939: LD_VAR 0 6
46943: PUSH
46944: FOR_TO
46945: IFFALSE 46984
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46947: LD_ADDR_VAR 0 9
46951: PUSH
46952: LD_VAR 0 9
46956: PPUSH
46957: LD_VAR 0 7
46961: PPUSH
46962: LD_VAR 0 6
46966: PUSH
46967: LD_VAR 0 7
46971: ARRAY
46972: PUSH
46973: LD_INT 1
46975: ARRAY
46976: PPUSH
46977: CALL_OW 1
46981: ST_TO_ADDR
46982: GO 46944
46984: POP
46985: POP
// result := tmp ;
46986: LD_ADDR_VAR 0 6
46990: PUSH
46991: LD_VAR 0 9
46995: ST_TO_ADDR
// end ; end ;
46996: LD_VAR 0 6
47000: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47001: LD_INT 0
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47009: LD_ADDR_VAR 0 5
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// if not x or not y then
47031: LD_VAR 0 2
47035: NOT
47036: PUSH
47037: LD_VAR 0 3
47041: NOT
47042: OR
47043: IFFALSE 47047
// exit ;
47045: GO 48699
// if not range then
47047: LD_VAR 0 4
47051: NOT
47052: IFFALSE 47062
// range := 10 ;
47054: LD_ADDR_VAR 0 4
47058: PUSH
47059: LD_INT 10
47061: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47062: LD_ADDR_VAR 0 8
47066: PUSH
47067: LD_INT 81
47069: PUSH
47070: LD_VAR 0 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 92
47081: PUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_VAR 0 3
47091: PUSH
47092: LD_VAR 0 4
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: LD_INT 21
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: LIST
47124: PPUSH
47125: CALL_OW 69
47129: ST_TO_ADDR
// if not tmp then
47130: LD_VAR 0 8
47134: NOT
47135: IFFALSE 47139
// exit ;
47137: GO 48699
// for i in tmp do
47139: LD_ADDR_VAR 0 6
47143: PUSH
47144: LD_VAR 0 8
47148: PUSH
47149: FOR_IN
47150: IFFALSE 48674
// begin points := [ 0 , 0 , 0 ] ;
47152: LD_ADDR_VAR 0 9
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// bpoints := 1 ;
47171: LD_ADDR_VAR 0 10
47175: PUSH
47176: LD_INT 1
47178: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47179: LD_VAR 0 6
47183: PPUSH
47184: CALL_OW 247
47188: PUSH
47189: LD_INT 1
47191: DOUBLE
47192: EQUAL
47193: IFTRUE 47197
47195: GO 47775
47197: POP
// begin if GetClass ( i ) = 1 then
47198: LD_VAR 0 6
47202: PPUSH
47203: CALL_OW 257
47207: PUSH
47208: LD_INT 1
47210: EQUAL
47211: IFFALSE 47232
// points := [ 10 , 5 , 3 ] ;
47213: LD_ADDR_VAR 0 9
47217: PUSH
47218: LD_INT 10
47220: PUSH
47221: LD_INT 5
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47232: LD_VAR 0 6
47236: PPUSH
47237: CALL_OW 257
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: IN
47256: IFFALSE 47277
// points := [ 3 , 2 , 1 ] ;
47258: LD_ADDR_VAR 0 9
47262: PUSH
47263: LD_INT 3
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47277: LD_VAR 0 6
47281: PPUSH
47282: CALL_OW 257
47286: PUSH
47287: LD_INT 5
47289: EQUAL
47290: IFFALSE 47311
// points := [ 130 , 5 , 2 ] ;
47292: LD_ADDR_VAR 0 9
47296: PUSH
47297: LD_INT 130
47299: PUSH
47300: LD_INT 5
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47311: LD_VAR 0 6
47315: PPUSH
47316: CALL_OW 257
47320: PUSH
47321: LD_INT 8
47323: EQUAL
47324: IFFALSE 47345
// points := [ 35 , 35 , 30 ] ;
47326: LD_ADDR_VAR 0 9
47330: PUSH
47331: LD_INT 35
47333: PUSH
47334: LD_INT 35
47336: PUSH
47337: LD_INT 30
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47345: LD_VAR 0 6
47349: PPUSH
47350: CALL_OW 257
47354: PUSH
47355: LD_INT 9
47357: EQUAL
47358: IFFALSE 47379
// points := [ 20 , 55 , 40 ] ;
47360: LD_ADDR_VAR 0 9
47364: PUSH
47365: LD_INT 20
47367: PUSH
47368: LD_INT 55
47370: PUSH
47371: LD_INT 40
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47379: LD_VAR 0 6
47383: PPUSH
47384: CALL_OW 257
47388: PUSH
47389: LD_INT 12
47391: PUSH
47392: LD_INT 16
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: IN
47399: IFFALSE 47420
// points := [ 5 , 3 , 2 ] ;
47401: LD_ADDR_VAR 0 9
47405: PUSH
47406: LD_INT 5
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47420: LD_VAR 0 6
47424: PPUSH
47425: CALL_OW 257
47429: PUSH
47430: LD_INT 17
47432: EQUAL
47433: IFFALSE 47454
// points := [ 100 , 50 , 75 ] ;
47435: LD_ADDR_VAR 0 9
47439: PUSH
47440: LD_INT 100
47442: PUSH
47443: LD_INT 50
47445: PUSH
47446: LD_INT 75
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47454: LD_VAR 0 6
47458: PPUSH
47459: CALL_OW 257
47463: PUSH
47464: LD_INT 15
47466: EQUAL
47467: IFFALSE 47488
// points := [ 10 , 5 , 3 ] ;
47469: LD_ADDR_VAR 0 9
47473: PUSH
47474: LD_INT 10
47476: PUSH
47477: LD_INT 5
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47488: LD_VAR 0 6
47492: PPUSH
47493: CALL_OW 257
47497: PUSH
47498: LD_INT 14
47500: EQUAL
47501: IFFALSE 47522
// points := [ 10 , 0 , 0 ] ;
47503: LD_ADDR_VAR 0 9
47507: PUSH
47508: LD_INT 10
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47522: LD_VAR 0 6
47526: PPUSH
47527: CALL_OW 257
47531: PUSH
47532: LD_INT 11
47534: EQUAL
47535: IFFALSE 47556
// points := [ 30 , 10 , 5 ] ;
47537: LD_ADDR_VAR 0 9
47541: PUSH
47542: LD_INT 30
47544: PUSH
47545: LD_INT 10
47547: PUSH
47548: LD_INT 5
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47556: LD_VAR 0 1
47560: PPUSH
47561: LD_INT 5
47563: PPUSH
47564: CALL_OW 321
47568: PUSH
47569: LD_INT 2
47571: EQUAL
47572: IFFALSE 47589
// bpoints := bpoints * 1.8 ;
47574: LD_ADDR_VAR 0 10
47578: PUSH
47579: LD_VAR 0 10
47583: PUSH
47584: LD_REAL  1.80000000000000E+0000
47587: MUL
47588: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47589: LD_VAR 0 6
47593: PPUSH
47594: CALL_OW 257
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: LD_INT 4
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: IN
47617: PUSH
47618: LD_VAR 0 1
47622: PPUSH
47623: LD_INT 51
47625: PPUSH
47626: CALL_OW 321
47630: PUSH
47631: LD_INT 2
47633: EQUAL
47634: AND
47635: IFFALSE 47652
// bpoints := bpoints * 1.2 ;
47637: LD_ADDR_VAR 0 10
47641: PUSH
47642: LD_VAR 0 10
47646: PUSH
47647: LD_REAL  1.20000000000000E+0000
47650: MUL
47651: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47652: LD_VAR 0 6
47656: PPUSH
47657: CALL_OW 257
47661: PUSH
47662: LD_INT 5
47664: PUSH
47665: LD_INT 7
47667: PUSH
47668: LD_INT 9
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: IN
47676: PUSH
47677: LD_VAR 0 1
47681: PPUSH
47682: LD_INT 52
47684: PPUSH
47685: CALL_OW 321
47689: PUSH
47690: LD_INT 2
47692: EQUAL
47693: AND
47694: IFFALSE 47711
// bpoints := bpoints * 1.5 ;
47696: LD_ADDR_VAR 0 10
47700: PUSH
47701: LD_VAR 0 10
47705: PUSH
47706: LD_REAL  1.50000000000000E+0000
47709: MUL
47710: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47711: LD_VAR 0 1
47715: PPUSH
47716: LD_INT 66
47718: PPUSH
47719: CALL_OW 321
47723: PUSH
47724: LD_INT 2
47726: EQUAL
47727: IFFALSE 47744
// bpoints := bpoints * 1.1 ;
47729: LD_ADDR_VAR 0 10
47733: PUSH
47734: LD_VAR 0 10
47738: PUSH
47739: LD_REAL  1.10000000000000E+0000
47742: MUL
47743: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47744: LD_ADDR_VAR 0 10
47748: PUSH
47749: LD_VAR 0 10
47753: PUSH
47754: LD_VAR 0 6
47758: PPUSH
47759: LD_INT 1
47761: PPUSH
47762: CALL_OW 259
47766: PUSH
47767: LD_REAL  1.15000000000000E+0000
47770: MUL
47771: MUL
47772: ST_TO_ADDR
// end ; unit_vehicle :
47773: GO 48603
47775: LD_INT 2
47777: DOUBLE
47778: EQUAL
47779: IFTRUE 47783
47781: GO 48591
47783: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47784: LD_VAR 0 6
47788: PPUSH
47789: CALL_OW 264
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 42
47799: PUSH
47800: LD_INT 24
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: IN
47808: IFFALSE 47829
// points := [ 25 , 5 , 3 ] ;
47810: LD_ADDR_VAR 0 9
47814: PUSH
47815: LD_INT 25
47817: PUSH
47818: LD_INT 5
47820: PUSH
47821: LD_INT 3
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47829: LD_VAR 0 6
47833: PPUSH
47834: CALL_OW 264
47838: PUSH
47839: LD_INT 4
47841: PUSH
47842: LD_INT 43
47844: PUSH
47845: LD_INT 25
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: IN
47853: IFFALSE 47874
// points := [ 40 , 15 , 5 ] ;
47855: LD_ADDR_VAR 0 9
47859: PUSH
47860: LD_INT 40
47862: PUSH
47863: LD_INT 15
47865: PUSH
47866: LD_INT 5
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47874: LD_VAR 0 6
47878: PPUSH
47879: CALL_OW 264
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 23
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: IN
47894: IFFALSE 47915
// points := [ 7 , 25 , 8 ] ;
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: LD_INT 7
47903: PUSH
47904: LD_INT 25
47906: PUSH
47907: LD_INT 8
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47915: LD_VAR 0 6
47919: PPUSH
47920: CALL_OW 264
47924: PUSH
47925: LD_INT 5
47927: PUSH
47928: LD_INT 27
47930: PUSH
47931: LD_INT 44
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: IN
47939: IFFALSE 47960
// points := [ 14 , 50 , 16 ] ;
47941: LD_ADDR_VAR 0 9
47945: PUSH
47946: LD_INT 14
47948: PUSH
47949: LD_INT 50
47951: PUSH
47952: LD_INT 16
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47960: LD_VAR 0 6
47964: PPUSH
47965: CALL_OW 264
47969: PUSH
47970: LD_INT 6
47972: PUSH
47973: LD_INT 46
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: IN
47980: IFFALSE 48001
// points := [ 32 , 120 , 70 ] ;
47982: LD_ADDR_VAR 0 9
47986: PUSH
47987: LD_INT 32
47989: PUSH
47990: LD_INT 120
47992: PUSH
47993: LD_INT 70
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48001: LD_VAR 0 6
48005: PPUSH
48006: CALL_OW 264
48010: PUSH
48011: LD_INT 7
48013: PUSH
48014: LD_INT 28
48016: PUSH
48017: LD_INT 45
48019: PUSH
48020: LD_EXP 123
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: IN
48031: IFFALSE 48052
// points := [ 35 , 20 , 45 ] ;
48033: LD_ADDR_VAR 0 9
48037: PUSH
48038: LD_INT 35
48040: PUSH
48041: LD_INT 20
48043: PUSH
48044: LD_INT 45
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48052: LD_VAR 0 6
48056: PPUSH
48057: CALL_OW 264
48061: PUSH
48062: LD_INT 47
48064: PUSH
48065: EMPTY
48066: LIST
48067: IN
48068: IFFALSE 48089
// points := [ 67 , 45 , 75 ] ;
48070: LD_ADDR_VAR 0 9
48074: PUSH
48075: LD_INT 67
48077: PUSH
48078: LD_INT 45
48080: PUSH
48081: LD_INT 75
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48089: LD_VAR 0 6
48093: PPUSH
48094: CALL_OW 264
48098: PUSH
48099: LD_INT 26
48101: PUSH
48102: EMPTY
48103: LIST
48104: IN
48105: IFFALSE 48126
// points := [ 120 , 30 , 80 ] ;
48107: LD_ADDR_VAR 0 9
48111: PUSH
48112: LD_INT 120
48114: PUSH
48115: LD_INT 30
48117: PUSH
48118: LD_INT 80
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48126: LD_VAR 0 6
48130: PPUSH
48131: CALL_OW 264
48135: PUSH
48136: LD_INT 22
48138: PUSH
48139: EMPTY
48140: LIST
48141: IN
48142: IFFALSE 48163
// points := [ 40 , 1 , 1 ] ;
48144: LD_ADDR_VAR 0 9
48148: PUSH
48149: LD_INT 40
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48163: LD_VAR 0 6
48167: PPUSH
48168: CALL_OW 264
48172: PUSH
48173: LD_INT 29
48175: PUSH
48176: EMPTY
48177: LIST
48178: IN
48179: IFFALSE 48200
// points := [ 70 , 200 , 400 ] ;
48181: LD_ADDR_VAR 0 9
48185: PUSH
48186: LD_INT 70
48188: PUSH
48189: LD_INT 200
48191: PUSH
48192: LD_INT 400
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48200: LD_VAR 0 6
48204: PPUSH
48205: CALL_OW 264
48209: PUSH
48210: LD_INT 14
48212: PUSH
48213: LD_INT 53
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: IN
48220: IFFALSE 48241
// points := [ 40 , 10 , 20 ] ;
48222: LD_ADDR_VAR 0 9
48226: PUSH
48227: LD_INT 40
48229: PUSH
48230: LD_INT 10
48232: PUSH
48233: LD_INT 20
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48241: LD_VAR 0 6
48245: PPUSH
48246: CALL_OW 264
48250: PUSH
48251: LD_INT 9
48253: PUSH
48254: EMPTY
48255: LIST
48256: IN
48257: IFFALSE 48278
// points := [ 5 , 70 , 20 ] ;
48259: LD_ADDR_VAR 0 9
48263: PUSH
48264: LD_INT 5
48266: PUSH
48267: LD_INT 70
48269: PUSH
48270: LD_INT 20
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48278: LD_VAR 0 6
48282: PPUSH
48283: CALL_OW 264
48287: PUSH
48288: LD_INT 10
48290: PUSH
48291: EMPTY
48292: LIST
48293: IN
48294: IFFALSE 48315
// points := [ 35 , 110 , 70 ] ;
48296: LD_ADDR_VAR 0 9
48300: PUSH
48301: LD_INT 35
48303: PUSH
48304: LD_INT 110
48306: PUSH
48307: LD_INT 70
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48315: LD_VAR 0 6
48319: PPUSH
48320: CALL_OW 265
48324: PUSH
48325: LD_INT 25
48327: EQUAL
48328: IFFALSE 48349
// points := [ 80 , 65 , 100 ] ;
48330: LD_ADDR_VAR 0 9
48334: PUSH
48335: LD_INT 80
48337: PUSH
48338: LD_INT 65
48340: PUSH
48341: LD_INT 100
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48349: LD_VAR 0 6
48353: PPUSH
48354: CALL_OW 263
48358: PUSH
48359: LD_INT 1
48361: EQUAL
48362: IFFALSE 48397
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48364: LD_ADDR_VAR 0 10
48368: PUSH
48369: LD_VAR 0 10
48373: PUSH
48374: LD_VAR 0 6
48378: PPUSH
48379: CALL_OW 311
48383: PPUSH
48384: LD_INT 3
48386: PPUSH
48387: CALL_OW 259
48391: PUSH
48392: LD_INT 4
48394: MUL
48395: MUL
48396: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48397: LD_VAR 0 6
48401: PPUSH
48402: CALL_OW 263
48406: PUSH
48407: LD_INT 2
48409: EQUAL
48410: IFFALSE 48461
// begin j := IsControledBy ( i ) ;
48412: LD_ADDR_VAR 0 7
48416: PUSH
48417: LD_VAR 0 6
48421: PPUSH
48422: CALL_OW 312
48426: ST_TO_ADDR
// if j then
48427: LD_VAR 0 7
48431: IFFALSE 48461
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48433: LD_ADDR_VAR 0 10
48437: PUSH
48438: LD_VAR 0 10
48442: PUSH
48443: LD_VAR 0 7
48447: PPUSH
48448: LD_INT 3
48450: PPUSH
48451: CALL_OW 259
48455: PUSH
48456: LD_INT 3
48458: MUL
48459: MUL
48460: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48461: LD_VAR 0 6
48465: PPUSH
48466: CALL_OW 264
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: LD_INT 6
48476: PUSH
48477: LD_INT 46
48479: PUSH
48480: LD_INT 44
48482: PUSH
48483: LD_INT 47
48485: PUSH
48486: LD_INT 45
48488: PUSH
48489: LD_INT 28
48491: PUSH
48492: LD_INT 7
48494: PUSH
48495: LD_INT 27
48497: PUSH
48498: LD_INT 29
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: IN
48513: PUSH
48514: LD_VAR 0 1
48518: PPUSH
48519: LD_INT 52
48521: PPUSH
48522: CALL_OW 321
48526: PUSH
48527: LD_INT 2
48529: EQUAL
48530: AND
48531: IFFALSE 48548
// bpoints := bpoints * 1.2 ;
48533: LD_ADDR_VAR 0 10
48537: PUSH
48538: LD_VAR 0 10
48542: PUSH
48543: LD_REAL  1.20000000000000E+0000
48546: MUL
48547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48548: LD_VAR 0 6
48552: PPUSH
48553: CALL_OW 264
48557: PUSH
48558: LD_INT 6
48560: PUSH
48561: LD_INT 46
48563: PUSH
48564: LD_INT 47
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: LIST
48571: IN
48572: IFFALSE 48589
// bpoints := bpoints * 1.2 ;
48574: LD_ADDR_VAR 0 10
48578: PUSH
48579: LD_VAR 0 10
48583: PUSH
48584: LD_REAL  1.20000000000000E+0000
48587: MUL
48588: ST_TO_ADDR
// end ; unit_building :
48589: GO 48603
48591: LD_INT 3
48593: DOUBLE
48594: EQUAL
48595: IFTRUE 48599
48597: GO 48602
48599: POP
// ; end ;
48600: GO 48603
48602: POP
// for j = 1 to 3 do
48603: LD_ADDR_VAR 0 7
48607: PUSH
48608: DOUBLE
48609: LD_INT 1
48611: DEC
48612: ST_TO_ADDR
48613: LD_INT 3
48615: PUSH
48616: FOR_TO
48617: IFFALSE 48670
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48619: LD_ADDR_VAR 0 5
48623: PUSH
48624: LD_VAR 0 5
48628: PPUSH
48629: LD_VAR 0 7
48633: PPUSH
48634: LD_VAR 0 5
48638: PUSH
48639: LD_VAR 0 7
48643: ARRAY
48644: PUSH
48645: LD_VAR 0 9
48649: PUSH
48650: LD_VAR 0 7
48654: ARRAY
48655: PUSH
48656: LD_VAR 0 10
48660: MUL
48661: PLUS
48662: PPUSH
48663: CALL_OW 1
48667: ST_TO_ADDR
48668: GO 48616
48670: POP
48671: POP
// end ;
48672: GO 47149
48674: POP
48675: POP
// result := Replace ( result , 4 , tmp ) ;
48676: LD_ADDR_VAR 0 5
48680: PUSH
48681: LD_VAR 0 5
48685: PPUSH
48686: LD_INT 4
48688: PPUSH
48689: LD_VAR 0 8
48693: PPUSH
48694: CALL_OW 1
48698: ST_TO_ADDR
// end ;
48699: LD_VAR 0 5
48703: RET
// export function DangerAtRange ( unit , range ) ; begin
48704: LD_INT 0
48706: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48707: LD_ADDR_VAR 0 3
48711: PUSH
48712: LD_VAR 0 1
48716: PPUSH
48717: CALL_OW 255
48721: PPUSH
48722: LD_VAR 0 1
48726: PPUSH
48727: CALL_OW 250
48731: PPUSH
48732: LD_VAR 0 1
48736: PPUSH
48737: CALL_OW 251
48741: PPUSH
48742: LD_VAR 0 2
48746: PPUSH
48747: CALL 47001 0 4
48751: ST_TO_ADDR
// end ;
48752: LD_VAR 0 3
48756: RET
// export function DangerInArea ( side , area ) ; begin
48757: LD_INT 0
48759: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48760: LD_ADDR_VAR 0 3
48764: PUSH
48765: LD_VAR 0 2
48769: PPUSH
48770: LD_INT 81
48772: PUSH
48773: LD_VAR 0 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PPUSH
48782: CALL_OW 70
48786: ST_TO_ADDR
// end ;
48787: LD_VAR 0 3
48791: RET
// export function IsExtension ( b ) ; begin
48792: LD_INT 0
48794: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48795: LD_ADDR_VAR 0 2
48799: PUSH
48800: LD_VAR 0 1
48804: PUSH
48805: LD_INT 23
48807: PUSH
48808: LD_INT 20
48810: PUSH
48811: LD_INT 22
48813: PUSH
48814: LD_INT 17
48816: PUSH
48817: LD_INT 24
48819: PUSH
48820: LD_INT 21
48822: PUSH
48823: LD_INT 19
48825: PUSH
48826: LD_INT 16
48828: PUSH
48829: LD_INT 25
48831: PUSH
48832: LD_INT 18
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: IN
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 2
48852: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48853: LD_INT 0
48855: PPUSH
48856: PPUSH
48857: PPUSH
// result := [ ] ;
48858: LD_ADDR_VAR 0 4
48862: PUSH
48863: EMPTY
48864: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48865: LD_ADDR_VAR 0 5
48869: PUSH
48870: LD_VAR 0 2
48874: PPUSH
48875: LD_INT 21
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PPUSH
48885: CALL_OW 70
48889: ST_TO_ADDR
// if not tmp then
48890: LD_VAR 0 5
48894: NOT
48895: IFFALSE 48899
// exit ;
48897: GO 48963
// if checkLink then
48899: LD_VAR 0 3
48903: IFFALSE 48953
// begin for i in tmp do
48905: LD_ADDR_VAR 0 6
48909: PUSH
48910: LD_VAR 0 5
48914: PUSH
48915: FOR_IN
48916: IFFALSE 48951
// if GetBase ( i ) <> base then
48918: LD_VAR 0 6
48922: PPUSH
48923: CALL_OW 274
48927: PUSH
48928: LD_VAR 0 1
48932: NONEQUAL
48933: IFFALSE 48949
// ComLinkToBase ( base , i ) ;
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_VAR 0 6
48944: PPUSH
48945: CALL_OW 169
48949: GO 48915
48951: POP
48952: POP
// end ; result := tmp ;
48953: LD_ADDR_VAR 0 4
48957: PUSH
48958: LD_VAR 0 5
48962: ST_TO_ADDR
// end ;
48963: LD_VAR 0 4
48967: RET
// export function ComComplete ( units , b ) ; var i ; begin
48968: LD_INT 0
48970: PPUSH
48971: PPUSH
// if not units then
48972: LD_VAR 0 1
48976: NOT
48977: IFFALSE 48981
// exit ;
48979: GO 49071
// for i in units do
48981: LD_ADDR_VAR 0 4
48985: PUSH
48986: LD_VAR 0 1
48990: PUSH
48991: FOR_IN
48992: IFFALSE 49069
// if BuildingStatus ( b ) = bs_build then
48994: LD_VAR 0 2
48998: PPUSH
48999: CALL_OW 461
49003: PUSH
49004: LD_INT 1
49006: EQUAL
49007: IFFALSE 49067
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49009: LD_VAR 0 4
49013: PPUSH
49014: LD_STRING h
49016: PUSH
49017: LD_VAR 0 2
49021: PPUSH
49022: CALL_OW 250
49026: PUSH
49027: LD_VAR 0 2
49031: PPUSH
49032: CALL_OW 251
49036: PUSH
49037: LD_VAR 0 2
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: PPUSH
49063: CALL_OW 446
49067: GO 48991
49069: POP
49070: POP
// end ;
49071: LD_VAR 0 3
49075: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49076: LD_INT 0
49078: PPUSH
49079: PPUSH
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49084: LD_VAR 0 1
49088: NOT
49089: PUSH
49090: LD_VAR 0 1
49094: PPUSH
49095: CALL_OW 263
49099: PUSH
49100: LD_INT 2
49102: NONEQUAL
49103: OR
49104: IFFALSE 49108
// exit ;
49106: GO 49424
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49108: LD_ADDR_VAR 0 6
49112: PUSH
49113: LD_INT 22
49115: PUSH
49116: LD_VAR 0 1
49120: PPUSH
49121: CALL_OW 255
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 30
49135: PUSH
49136: LD_INT 36
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 34
49145: PUSH
49146: LD_INT 31
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PPUSH
49162: CALL_OW 69
49166: ST_TO_ADDR
// if not tmp then
49167: LD_VAR 0 6
49171: NOT
49172: IFFALSE 49176
// exit ;
49174: GO 49424
// result := [ ] ;
49176: LD_ADDR_VAR 0 2
49180: PUSH
49181: EMPTY
49182: ST_TO_ADDR
// for i in tmp do
49183: LD_ADDR_VAR 0 3
49187: PUSH
49188: LD_VAR 0 6
49192: PUSH
49193: FOR_IN
49194: IFFALSE 49265
// begin t := UnitsInside ( i ) ;
49196: LD_ADDR_VAR 0 4
49200: PUSH
49201: LD_VAR 0 3
49205: PPUSH
49206: CALL_OW 313
49210: ST_TO_ADDR
// if t then
49211: LD_VAR 0 4
49215: IFFALSE 49263
// for j in t do
49217: LD_ADDR_VAR 0 7
49221: PUSH
49222: LD_VAR 0 4
49226: PUSH
49227: FOR_IN
49228: IFFALSE 49261
// result := Replace ( result , result + 1 , j ) ;
49230: LD_ADDR_VAR 0 2
49234: PUSH
49235: LD_VAR 0 2
49239: PPUSH
49240: LD_VAR 0 2
49244: PUSH
49245: LD_INT 1
49247: PLUS
49248: PPUSH
49249: LD_VAR 0 7
49253: PPUSH
49254: CALL_OW 1
49258: ST_TO_ADDR
49259: GO 49227
49261: POP
49262: POP
// end ;
49263: GO 49193
49265: POP
49266: POP
// if not result then
49267: LD_VAR 0 2
49271: NOT
49272: IFFALSE 49276
// exit ;
49274: GO 49424
// mech := result [ 1 ] ;
49276: LD_ADDR_VAR 0 5
49280: PUSH
49281: LD_VAR 0 2
49285: PUSH
49286: LD_INT 1
49288: ARRAY
49289: ST_TO_ADDR
// if result > 1 then
49290: LD_VAR 0 2
49294: PUSH
49295: LD_INT 1
49297: GREATER
49298: IFFALSE 49410
// begin for i = 2 to result do
49300: LD_ADDR_VAR 0 3
49304: PUSH
49305: DOUBLE
49306: LD_INT 2
49308: DEC
49309: ST_TO_ADDR
49310: LD_VAR 0 2
49314: PUSH
49315: FOR_TO
49316: IFFALSE 49408
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49318: LD_ADDR_VAR 0 4
49322: PUSH
49323: LD_VAR 0 2
49327: PUSH
49328: LD_VAR 0 3
49332: ARRAY
49333: PPUSH
49334: LD_INT 3
49336: PPUSH
49337: CALL_OW 259
49341: PUSH
49342: LD_VAR 0 2
49346: PUSH
49347: LD_VAR 0 3
49351: ARRAY
49352: PPUSH
49353: CALL_OW 432
49357: MINUS
49358: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49359: LD_VAR 0 4
49363: PUSH
49364: LD_VAR 0 5
49368: PPUSH
49369: LD_INT 3
49371: PPUSH
49372: CALL_OW 259
49376: PUSH
49377: LD_VAR 0 5
49381: PPUSH
49382: CALL_OW 432
49386: MINUS
49387: GREATEREQUAL
49388: IFFALSE 49406
// mech := result [ i ] ;
49390: LD_ADDR_VAR 0 5
49394: PUSH
49395: LD_VAR 0 2
49399: PUSH
49400: LD_VAR 0 3
49404: ARRAY
49405: ST_TO_ADDR
// end ;
49406: GO 49315
49408: POP
49409: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49410: LD_VAR 0 1
49414: PPUSH
49415: LD_VAR 0 5
49419: PPUSH
49420: CALL_OW 135
// end ;
49424: LD_VAR 0 2
49428: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49429: LD_INT 0
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
// result := [ ] ;
49444: LD_ADDR_VAR 0 7
49448: PUSH
49449: EMPTY
49450: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49451: LD_VAR 0 1
49455: PPUSH
49456: CALL_OW 266
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: IN
49471: NOT
49472: IFFALSE 49476
// exit ;
49474: GO 51110
// if name then
49476: LD_VAR 0 3
49480: IFFALSE 49496
// SetBName ( base_dep , name ) ;
49482: LD_VAR 0 1
49486: PPUSH
49487: LD_VAR 0 3
49491: PPUSH
49492: CALL_OW 500
// base := GetBase ( base_dep ) ;
49496: LD_ADDR_VAR 0 15
49500: PUSH
49501: LD_VAR 0 1
49505: PPUSH
49506: CALL_OW 274
49510: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49511: LD_ADDR_VAR 0 16
49515: PUSH
49516: LD_VAR 0 1
49520: PPUSH
49521: CALL_OW 255
49525: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49526: LD_ADDR_VAR 0 17
49530: PUSH
49531: LD_VAR 0 1
49535: PPUSH
49536: CALL_OW 248
49540: ST_TO_ADDR
// if sources then
49541: LD_VAR 0 5
49545: IFFALSE 49592
// for i = 1 to 3 do
49547: LD_ADDR_VAR 0 8
49551: PUSH
49552: DOUBLE
49553: LD_INT 1
49555: DEC
49556: ST_TO_ADDR
49557: LD_INT 3
49559: PUSH
49560: FOR_TO
49561: IFFALSE 49590
// AddResourceType ( base , i , sources [ i ] ) ;
49563: LD_VAR 0 15
49567: PPUSH
49568: LD_VAR 0 8
49572: PPUSH
49573: LD_VAR 0 5
49577: PUSH
49578: LD_VAR 0 8
49582: ARRAY
49583: PPUSH
49584: CALL_OW 276
49588: GO 49560
49590: POP
49591: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49592: LD_ADDR_VAR 0 18
49596: PUSH
49597: LD_VAR 0 15
49601: PPUSH
49602: LD_VAR 0 2
49606: PPUSH
49607: LD_INT 1
49609: PPUSH
49610: CALL 48853 0 3
49614: ST_TO_ADDR
// InitHc ;
49615: CALL_OW 19
// InitUc ;
49619: CALL_OW 18
// uc_side := side ;
49623: LD_ADDR_OWVAR 20
49627: PUSH
49628: LD_VAR 0 16
49632: ST_TO_ADDR
// uc_nation := nation ;
49633: LD_ADDR_OWVAR 21
49637: PUSH
49638: LD_VAR 0 17
49642: ST_TO_ADDR
// if buildings then
49643: LD_VAR 0 18
49647: IFFALSE 50969
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49649: LD_ADDR_VAR 0 19
49653: PUSH
49654: LD_VAR 0 18
49658: PPUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 30
49664: PUSH
49665: LD_INT 29
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 30
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: PPUSH
49687: CALL_OW 72
49691: ST_TO_ADDR
// if tmp then
49692: LD_VAR 0 19
49696: IFFALSE 49744
// for i in tmp do
49698: LD_ADDR_VAR 0 8
49702: PUSH
49703: LD_VAR 0 19
49707: PUSH
49708: FOR_IN
49709: IFFALSE 49742
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49711: LD_VAR 0 8
49715: PPUSH
49716: CALL_OW 250
49720: PPUSH
49721: LD_VAR 0 8
49725: PPUSH
49726: CALL_OW 251
49730: PPUSH
49731: LD_VAR 0 16
49735: PPUSH
49736: CALL_OW 441
49740: GO 49708
49742: POP
49743: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49744: LD_VAR 0 18
49748: PPUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 30
49754: PUSH
49755: LD_INT 32
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 30
49764: PUSH
49765: LD_INT 33
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: PPUSH
49777: CALL_OW 72
49781: IFFALSE 49869
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49783: LD_ADDR_VAR 0 8
49787: PUSH
49788: LD_VAR 0 18
49792: PPUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 30
49798: PUSH
49799: LD_INT 32
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 30
49808: PUSH
49809: LD_INT 33
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: PPUSH
49821: CALL_OW 72
49825: PUSH
49826: FOR_IN
49827: IFFALSE 49867
// begin if not GetBWeapon ( i ) then
49829: LD_VAR 0 8
49833: PPUSH
49834: CALL_OW 269
49838: NOT
49839: IFFALSE 49865
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49841: LD_VAR 0 8
49845: PPUSH
49846: LD_VAR 0 8
49850: PPUSH
49851: LD_VAR 0 2
49855: PPUSH
49856: CALL 51115 0 2
49860: PPUSH
49861: CALL_OW 431
// end ;
49865: GO 49826
49867: POP
49868: POP
// end ; for i = 1 to personel do
49869: LD_ADDR_VAR 0 8
49873: PUSH
49874: DOUBLE
49875: LD_INT 1
49877: DEC
49878: ST_TO_ADDR
49879: LD_VAR 0 6
49883: PUSH
49884: FOR_TO
49885: IFFALSE 50949
// begin if i > 4 then
49887: LD_VAR 0 8
49891: PUSH
49892: LD_INT 4
49894: GREATER
49895: IFFALSE 49899
// break ;
49897: GO 50949
// case i of 1 :
49899: LD_VAR 0 8
49903: PUSH
49904: LD_INT 1
49906: DOUBLE
49907: EQUAL
49908: IFTRUE 49912
49910: GO 49992
49912: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49913: LD_ADDR_VAR 0 12
49917: PUSH
49918: LD_VAR 0 18
49922: PPUSH
49923: LD_INT 22
49925: PUSH
49926: LD_VAR 0 16
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 58
49937: PUSH
49938: EMPTY
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 30
49946: PUSH
49947: LD_INT 32
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 30
49956: PUSH
49957: LD_INT 4
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 30
49966: PUSH
49967: LD_INT 5
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: PPUSH
49985: CALL_OW 72
49989: ST_TO_ADDR
49990: GO 50214
49992: LD_INT 2
49994: DOUBLE
49995: EQUAL
49996: IFTRUE 50000
49998: GO 50062
50000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50001: LD_ADDR_VAR 0 12
50005: PUSH
50006: LD_VAR 0 18
50010: PPUSH
50011: LD_INT 22
50013: PUSH
50014: LD_VAR 0 16
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 30
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 30
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PPUSH
50055: CALL_OW 72
50059: ST_TO_ADDR
50060: GO 50214
50062: LD_INT 3
50064: DOUBLE
50065: EQUAL
50066: IFTRUE 50070
50068: GO 50132
50070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50071: LD_ADDR_VAR 0 12
50075: PUSH
50076: LD_VAR 0 18
50080: PPUSH
50081: LD_INT 22
50083: PUSH
50084: LD_VAR 0 16
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 30
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 30
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PPUSH
50125: CALL_OW 72
50129: ST_TO_ADDR
50130: GO 50214
50132: LD_INT 4
50134: DOUBLE
50135: EQUAL
50136: IFTRUE 50140
50138: GO 50213
50140: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50141: LD_ADDR_VAR 0 12
50145: PUSH
50146: LD_VAR 0 18
50150: PPUSH
50151: LD_INT 22
50153: PUSH
50154: LD_VAR 0 16
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: LD_INT 30
50168: PUSH
50169: LD_INT 6
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 30
50178: PUSH
50179: LD_INT 7
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 30
50188: PUSH
50189: LD_INT 8
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PPUSH
50206: CALL_OW 72
50210: ST_TO_ADDR
50211: GO 50214
50213: POP
// if i = 1 then
50214: LD_VAR 0 8
50218: PUSH
50219: LD_INT 1
50221: EQUAL
50222: IFFALSE 50333
// begin tmp := [ ] ;
50224: LD_ADDR_VAR 0 19
50228: PUSH
50229: EMPTY
50230: ST_TO_ADDR
// for j in f do
50231: LD_ADDR_VAR 0 9
50235: PUSH
50236: LD_VAR 0 12
50240: PUSH
50241: FOR_IN
50242: IFFALSE 50315
// if GetBType ( j ) = b_bunker then
50244: LD_VAR 0 9
50248: PPUSH
50249: CALL_OW 266
50253: PUSH
50254: LD_INT 32
50256: EQUAL
50257: IFFALSE 50284
// tmp := Insert ( tmp , 1 , j ) else
50259: LD_ADDR_VAR 0 19
50263: PUSH
50264: LD_VAR 0 19
50268: PPUSH
50269: LD_INT 1
50271: PPUSH
50272: LD_VAR 0 9
50276: PPUSH
50277: CALL_OW 2
50281: ST_TO_ADDR
50282: GO 50313
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50284: LD_ADDR_VAR 0 19
50288: PUSH
50289: LD_VAR 0 19
50293: PPUSH
50294: LD_VAR 0 19
50298: PUSH
50299: LD_INT 1
50301: PLUS
50302: PPUSH
50303: LD_VAR 0 9
50307: PPUSH
50308: CALL_OW 2
50312: ST_TO_ADDR
50313: GO 50241
50315: POP
50316: POP
// if tmp then
50317: LD_VAR 0 19
50321: IFFALSE 50333
// f := tmp ;
50323: LD_ADDR_VAR 0 12
50327: PUSH
50328: LD_VAR 0 19
50332: ST_TO_ADDR
// end ; x := personel [ i ] ;
50333: LD_ADDR_VAR 0 13
50337: PUSH
50338: LD_VAR 0 6
50342: PUSH
50343: LD_VAR 0 8
50347: ARRAY
50348: ST_TO_ADDR
// if x = - 1 then
50349: LD_VAR 0 13
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: EQUAL
50358: IFFALSE 50567
// begin for j in f do
50360: LD_ADDR_VAR 0 9
50364: PUSH
50365: LD_VAR 0 12
50369: PUSH
50370: FOR_IN
50371: IFFALSE 50563
// repeat InitHc ;
50373: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50377: LD_VAR 0 9
50381: PPUSH
50382: CALL_OW 266
50386: PUSH
50387: LD_INT 5
50389: EQUAL
50390: IFFALSE 50460
// begin if UnitsInside ( j ) < 3 then
50392: LD_VAR 0 9
50396: PPUSH
50397: CALL_OW 313
50401: PUSH
50402: LD_INT 3
50404: LESS
50405: IFFALSE 50441
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50407: LD_INT 0
50409: PPUSH
50410: LD_INT 5
50412: PUSH
50413: LD_INT 8
50415: PUSH
50416: LD_INT 9
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: PUSH
50424: LD_VAR 0 17
50428: ARRAY
50429: PPUSH
50430: LD_VAR 0 4
50434: PPUSH
50435: CALL_OW 380
50439: GO 50458
// PrepareHuman ( false , i , skill ) ;
50441: LD_INT 0
50443: PPUSH
50444: LD_VAR 0 8
50448: PPUSH
50449: LD_VAR 0 4
50453: PPUSH
50454: CALL_OW 380
// end else
50458: GO 50477
// PrepareHuman ( false , i , skill ) ;
50460: LD_INT 0
50462: PPUSH
50463: LD_VAR 0 8
50467: PPUSH
50468: LD_VAR 0 4
50472: PPUSH
50473: CALL_OW 380
// un := CreateHuman ;
50477: LD_ADDR_VAR 0 14
50481: PUSH
50482: CALL_OW 44
50486: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50487: LD_ADDR_VAR 0 7
50491: PUSH
50492: LD_VAR 0 7
50496: PPUSH
50497: LD_INT 1
50499: PPUSH
50500: LD_VAR 0 14
50504: PPUSH
50505: CALL_OW 2
50509: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50510: LD_VAR 0 14
50514: PPUSH
50515: LD_VAR 0 9
50519: PPUSH
50520: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50524: LD_VAR 0 9
50528: PPUSH
50529: CALL_OW 313
50533: PUSH
50534: LD_INT 6
50536: EQUAL
50537: PUSH
50538: LD_VAR 0 9
50542: PPUSH
50543: CALL_OW 266
50547: PUSH
50548: LD_INT 32
50550: PUSH
50551: LD_INT 31
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: IN
50558: OR
50559: IFFALSE 50373
50561: GO 50370
50563: POP
50564: POP
// end else
50565: GO 50947
// for j = 1 to x do
50567: LD_ADDR_VAR 0 9
50571: PUSH
50572: DOUBLE
50573: LD_INT 1
50575: DEC
50576: ST_TO_ADDR
50577: LD_VAR 0 13
50581: PUSH
50582: FOR_TO
50583: IFFALSE 50945
// begin InitHc ;
50585: CALL_OW 19
// if not f then
50589: LD_VAR 0 12
50593: NOT
50594: IFFALSE 50683
// begin PrepareHuman ( false , i , skill ) ;
50596: LD_INT 0
50598: PPUSH
50599: LD_VAR 0 8
50603: PPUSH
50604: LD_VAR 0 4
50608: PPUSH
50609: CALL_OW 380
// un := CreateHuman ;
50613: LD_ADDR_VAR 0 14
50617: PUSH
50618: CALL_OW 44
50622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50623: LD_ADDR_VAR 0 7
50627: PUSH
50628: LD_VAR 0 7
50632: PPUSH
50633: LD_INT 1
50635: PPUSH
50636: LD_VAR 0 14
50640: PPUSH
50641: CALL_OW 2
50645: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50646: LD_VAR 0 14
50650: PPUSH
50651: LD_VAR 0 1
50655: PPUSH
50656: CALL_OW 250
50660: PPUSH
50661: LD_VAR 0 1
50665: PPUSH
50666: CALL_OW 251
50670: PPUSH
50671: LD_INT 10
50673: PPUSH
50674: LD_INT 0
50676: PPUSH
50677: CALL_OW 50
// continue ;
50681: GO 50582
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50683: LD_VAR 0 12
50687: PUSH
50688: LD_INT 1
50690: ARRAY
50691: PPUSH
50692: CALL_OW 313
50696: PUSH
50697: LD_VAR 0 12
50701: PUSH
50702: LD_INT 1
50704: ARRAY
50705: PPUSH
50706: CALL_OW 266
50710: PUSH
50711: LD_INT 32
50713: PUSH
50714: LD_INT 31
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: IN
50721: AND
50722: PUSH
50723: LD_VAR 0 12
50727: PUSH
50728: LD_INT 1
50730: ARRAY
50731: PPUSH
50732: CALL_OW 313
50736: PUSH
50737: LD_INT 6
50739: EQUAL
50740: OR
50741: IFFALSE 50761
// f := Delete ( f , 1 ) ;
50743: LD_ADDR_VAR 0 12
50747: PUSH
50748: LD_VAR 0 12
50752: PPUSH
50753: LD_INT 1
50755: PPUSH
50756: CALL_OW 3
50760: ST_TO_ADDR
// if not f then
50761: LD_VAR 0 12
50765: NOT
50766: IFFALSE 50784
// begin x := x + 2 ;
50768: LD_ADDR_VAR 0 13
50772: PUSH
50773: LD_VAR 0 13
50777: PUSH
50778: LD_INT 2
50780: PLUS
50781: ST_TO_ADDR
// continue ;
50782: GO 50582
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50784: LD_VAR 0 12
50788: PUSH
50789: LD_INT 1
50791: ARRAY
50792: PPUSH
50793: CALL_OW 266
50797: PUSH
50798: LD_INT 5
50800: EQUAL
50801: IFFALSE 50875
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50803: LD_VAR 0 12
50807: PUSH
50808: LD_INT 1
50810: ARRAY
50811: PPUSH
50812: CALL_OW 313
50816: PUSH
50817: LD_INT 3
50819: LESS
50820: IFFALSE 50856
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50822: LD_INT 0
50824: PPUSH
50825: LD_INT 5
50827: PUSH
50828: LD_INT 8
50830: PUSH
50831: LD_INT 9
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: PUSH
50839: LD_VAR 0 17
50843: ARRAY
50844: PPUSH
50845: LD_VAR 0 4
50849: PPUSH
50850: CALL_OW 380
50854: GO 50873
// PrepareHuman ( false , i , skill ) ;
50856: LD_INT 0
50858: PPUSH
50859: LD_VAR 0 8
50863: PPUSH
50864: LD_VAR 0 4
50868: PPUSH
50869: CALL_OW 380
// end else
50873: GO 50892
// PrepareHuman ( false , i , skill ) ;
50875: LD_INT 0
50877: PPUSH
50878: LD_VAR 0 8
50882: PPUSH
50883: LD_VAR 0 4
50887: PPUSH
50888: CALL_OW 380
// un := CreateHuman ;
50892: LD_ADDR_VAR 0 14
50896: PUSH
50897: CALL_OW 44
50901: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50902: LD_ADDR_VAR 0 7
50906: PUSH
50907: LD_VAR 0 7
50911: PPUSH
50912: LD_INT 1
50914: PPUSH
50915: LD_VAR 0 14
50919: PPUSH
50920: CALL_OW 2
50924: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50925: LD_VAR 0 14
50929: PPUSH
50930: LD_VAR 0 12
50934: PUSH
50935: LD_INT 1
50937: ARRAY
50938: PPUSH
50939: CALL_OW 52
// end ;
50943: GO 50582
50945: POP
50946: POP
// end ;
50947: GO 49884
50949: POP
50950: POP
// result := result ^ buildings ;
50951: LD_ADDR_VAR 0 7
50955: PUSH
50956: LD_VAR 0 7
50960: PUSH
50961: LD_VAR 0 18
50965: ADD
50966: ST_TO_ADDR
// end else
50967: GO 51110
// begin for i = 1 to personel do
50969: LD_ADDR_VAR 0 8
50973: PUSH
50974: DOUBLE
50975: LD_INT 1
50977: DEC
50978: ST_TO_ADDR
50979: LD_VAR 0 6
50983: PUSH
50984: FOR_TO
50985: IFFALSE 51108
// begin if i > 4 then
50987: LD_VAR 0 8
50991: PUSH
50992: LD_INT 4
50994: GREATER
50995: IFFALSE 50999
// break ;
50997: GO 51108
// x := personel [ i ] ;
50999: LD_ADDR_VAR 0 13
51003: PUSH
51004: LD_VAR 0 6
51008: PUSH
51009: LD_VAR 0 8
51013: ARRAY
51014: ST_TO_ADDR
// if x = - 1 then
51015: LD_VAR 0 13
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: EQUAL
51024: IFFALSE 51028
// continue ;
51026: GO 50984
// PrepareHuman ( false , i , skill ) ;
51028: LD_INT 0
51030: PPUSH
51031: LD_VAR 0 8
51035: PPUSH
51036: LD_VAR 0 4
51040: PPUSH
51041: CALL_OW 380
// un := CreateHuman ;
51045: LD_ADDR_VAR 0 14
51049: PUSH
51050: CALL_OW 44
51054: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51055: LD_VAR 0 14
51059: PPUSH
51060: LD_VAR 0 1
51064: PPUSH
51065: CALL_OW 250
51069: PPUSH
51070: LD_VAR 0 1
51074: PPUSH
51075: CALL_OW 251
51079: PPUSH
51080: LD_INT 10
51082: PPUSH
51083: LD_INT 0
51085: PPUSH
51086: CALL_OW 50
// result := result ^ un ;
51090: LD_ADDR_VAR 0 7
51094: PUSH
51095: LD_VAR 0 7
51099: PUSH
51100: LD_VAR 0 14
51104: ADD
51105: ST_TO_ADDR
// end ;
51106: GO 50984
51108: POP
51109: POP
// end ; end ;
51110: LD_VAR 0 7
51114: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51115: LD_INT 0
51117: PPUSH
51118: PPUSH
51119: PPUSH
51120: PPUSH
51121: PPUSH
51122: PPUSH
51123: PPUSH
51124: PPUSH
51125: PPUSH
51126: PPUSH
51127: PPUSH
51128: PPUSH
51129: PPUSH
51130: PPUSH
51131: PPUSH
51132: PPUSH
// result := false ;
51133: LD_ADDR_VAR 0 3
51137: PUSH
51138: LD_INT 0
51140: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51141: LD_VAR 0 1
51145: NOT
51146: PUSH
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 266
51156: PUSH
51157: LD_INT 32
51159: PUSH
51160: LD_INT 33
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: IN
51167: NOT
51168: OR
51169: IFFALSE 51173
// exit ;
51171: GO 52282
// nat := GetNation ( tower ) ;
51173: LD_ADDR_VAR 0 12
51177: PUSH
51178: LD_VAR 0 1
51182: PPUSH
51183: CALL_OW 248
51187: ST_TO_ADDR
// side := GetSide ( tower ) ;
51188: LD_ADDR_VAR 0 16
51192: PUSH
51193: LD_VAR 0 1
51197: PPUSH
51198: CALL_OW 255
51202: ST_TO_ADDR
// x := GetX ( tower ) ;
51203: LD_ADDR_VAR 0 10
51207: PUSH
51208: LD_VAR 0 1
51212: PPUSH
51213: CALL_OW 250
51217: ST_TO_ADDR
// y := GetY ( tower ) ;
51218: LD_ADDR_VAR 0 11
51222: PUSH
51223: LD_VAR 0 1
51227: PPUSH
51228: CALL_OW 251
51232: ST_TO_ADDR
// if not x or not y then
51233: LD_VAR 0 10
51237: NOT
51238: PUSH
51239: LD_VAR 0 11
51243: NOT
51244: OR
51245: IFFALSE 51249
// exit ;
51247: GO 52282
// weapon := 0 ;
51249: LD_ADDR_VAR 0 18
51253: PUSH
51254: LD_INT 0
51256: ST_TO_ADDR
// fac_list := [ ] ;
51257: LD_ADDR_VAR 0 17
51261: PUSH
51262: EMPTY
51263: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51264: LD_ADDR_VAR 0 6
51268: PUSH
51269: LD_VAR 0 1
51273: PPUSH
51274: CALL_OW 274
51278: PPUSH
51279: LD_VAR 0 2
51283: PPUSH
51284: LD_INT 0
51286: PPUSH
51287: CALL 48853 0 3
51291: PPUSH
51292: LD_INT 30
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PPUSH
51302: CALL_OW 72
51306: ST_TO_ADDR
// if not factories then
51307: LD_VAR 0 6
51311: NOT
51312: IFFALSE 51316
// exit ;
51314: GO 52282
// for i in factories do
51316: LD_ADDR_VAR 0 8
51320: PUSH
51321: LD_VAR 0 6
51325: PUSH
51326: FOR_IN
51327: IFFALSE 51352
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51329: LD_ADDR_VAR 0 17
51333: PUSH
51334: LD_VAR 0 17
51338: PUSH
51339: LD_VAR 0 8
51343: PPUSH
51344: CALL_OW 478
51348: UNION
51349: ST_TO_ADDR
51350: GO 51326
51352: POP
51353: POP
// if not fac_list then
51354: LD_VAR 0 17
51358: NOT
51359: IFFALSE 51363
// exit ;
51361: GO 52282
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51363: LD_ADDR_VAR 0 5
51367: PUSH
51368: LD_INT 4
51370: PUSH
51371: LD_INT 5
51373: PUSH
51374: LD_INT 9
51376: PUSH
51377: LD_INT 10
51379: PUSH
51380: LD_INT 6
51382: PUSH
51383: LD_INT 7
51385: PUSH
51386: LD_INT 11
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 27
51400: PUSH
51401: LD_INT 28
51403: PUSH
51404: LD_INT 26
51406: PUSH
51407: LD_INT 30
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 43
51418: PUSH
51419: LD_INT 44
51421: PUSH
51422: LD_INT 46
51424: PUSH
51425: LD_INT 45
51427: PUSH
51428: LD_INT 47
51430: PUSH
51431: LD_INT 49
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: PUSH
51447: LD_VAR 0 12
51451: ARRAY
51452: ST_TO_ADDR
// list := list isect fac_list ;
51453: LD_ADDR_VAR 0 5
51457: PUSH
51458: LD_VAR 0 5
51462: PUSH
51463: LD_VAR 0 17
51467: ISECT
51468: ST_TO_ADDR
// if not list then
51469: LD_VAR 0 5
51473: NOT
51474: IFFALSE 51478
// exit ;
51476: GO 52282
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51478: LD_VAR 0 12
51482: PUSH
51483: LD_INT 3
51485: EQUAL
51486: PUSH
51487: LD_INT 49
51489: PUSH
51490: LD_VAR 0 5
51494: IN
51495: AND
51496: PUSH
51497: LD_INT 31
51499: PPUSH
51500: LD_VAR 0 16
51504: PPUSH
51505: CALL_OW 321
51509: PUSH
51510: LD_INT 2
51512: EQUAL
51513: AND
51514: IFFALSE 51574
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51516: LD_INT 22
51518: PUSH
51519: LD_VAR 0 16
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 35
51530: PUSH
51531: LD_INT 49
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 91
51540: PUSH
51541: LD_VAR 0 1
51545: PUSH
51546: LD_INT 10
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: PPUSH
51559: CALL_OW 69
51563: NOT
51564: IFFALSE 51574
// weapon := ru_time_lapser ;
51566: LD_ADDR_VAR 0 18
51570: PUSH
51571: LD_INT 49
51573: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51574: LD_VAR 0 12
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: IN
51589: PUSH
51590: LD_INT 11
51592: PUSH
51593: LD_VAR 0 5
51597: IN
51598: PUSH
51599: LD_INT 30
51601: PUSH
51602: LD_VAR 0 5
51606: IN
51607: OR
51608: AND
51609: PUSH
51610: LD_INT 6
51612: PPUSH
51613: LD_VAR 0 16
51617: PPUSH
51618: CALL_OW 321
51622: PUSH
51623: LD_INT 2
51625: EQUAL
51626: AND
51627: IFFALSE 51792
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51629: LD_INT 22
51631: PUSH
51632: LD_VAR 0 16
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 35
51646: PUSH
51647: LD_INT 11
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 35
51656: PUSH
51657: LD_INT 30
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 91
51671: PUSH
51672: LD_VAR 0 1
51676: PUSH
51677: LD_INT 18
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: PPUSH
51690: CALL_OW 69
51694: NOT
51695: PUSH
51696: LD_INT 22
51698: PUSH
51699: LD_VAR 0 16
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 30
51713: PUSH
51714: LD_INT 32
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 30
51723: PUSH
51724: LD_INT 33
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 91
51738: PUSH
51739: LD_VAR 0 1
51743: PUSH
51744: LD_INT 12
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: PPUSH
51760: CALL_OW 69
51764: PUSH
51765: LD_INT 2
51767: GREATER
51768: AND
51769: IFFALSE 51792
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51771: LD_ADDR_VAR 0 18
51775: PUSH
51776: LD_INT 11
51778: PUSH
51779: LD_INT 30
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_VAR 0 12
51790: ARRAY
51791: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51792: LD_VAR 0 18
51796: NOT
51797: PUSH
51798: LD_INT 40
51800: PPUSH
51801: LD_VAR 0 16
51805: PPUSH
51806: CALL_OW 321
51810: PUSH
51811: LD_INT 2
51813: EQUAL
51814: AND
51815: PUSH
51816: LD_INT 7
51818: PUSH
51819: LD_VAR 0 5
51823: IN
51824: PUSH
51825: LD_INT 28
51827: PUSH
51828: LD_VAR 0 5
51832: IN
51833: OR
51834: PUSH
51835: LD_INT 45
51837: PUSH
51838: LD_VAR 0 5
51842: IN
51843: OR
51844: AND
51845: IFFALSE 52099
// begin hex := GetHexInfo ( x , y ) ;
51847: LD_ADDR_VAR 0 4
51851: PUSH
51852: LD_VAR 0 10
51856: PPUSH
51857: LD_VAR 0 11
51861: PPUSH
51862: CALL_OW 546
51866: ST_TO_ADDR
// if hex [ 1 ] then
51867: LD_VAR 0 4
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: IFFALSE 51879
// exit ;
51877: GO 52282
// height := hex [ 2 ] ;
51879: LD_ADDR_VAR 0 15
51883: PUSH
51884: LD_VAR 0 4
51888: PUSH
51889: LD_INT 2
51891: ARRAY
51892: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51893: LD_ADDR_VAR 0 14
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 3
51906: PUSH
51907: LD_INT 5
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: ST_TO_ADDR
// for i in tmp do
51916: LD_ADDR_VAR 0 8
51920: PUSH
51921: LD_VAR 0 14
51925: PUSH
51926: FOR_IN
51927: IFFALSE 52097
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51929: LD_ADDR_VAR 0 9
51933: PUSH
51934: LD_VAR 0 10
51938: PPUSH
51939: LD_VAR 0 8
51943: PPUSH
51944: LD_INT 5
51946: PPUSH
51947: CALL_OW 272
51951: PUSH
51952: LD_VAR 0 11
51956: PPUSH
51957: LD_VAR 0 8
51961: PPUSH
51962: LD_INT 5
51964: PPUSH
51965: CALL_OW 273
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51974: LD_VAR 0 9
51978: PUSH
51979: LD_INT 1
51981: ARRAY
51982: PPUSH
51983: LD_VAR 0 9
51987: PUSH
51988: LD_INT 2
51990: ARRAY
51991: PPUSH
51992: CALL_OW 488
51996: IFFALSE 52095
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51998: LD_ADDR_VAR 0 4
52002: PUSH
52003: LD_VAR 0 9
52007: PUSH
52008: LD_INT 1
52010: ARRAY
52011: PPUSH
52012: LD_VAR 0 9
52016: PUSH
52017: LD_INT 2
52019: ARRAY
52020: PPUSH
52021: CALL_OW 546
52025: ST_TO_ADDR
// if hex [ 1 ] then
52026: LD_VAR 0 4
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: IFFALSE 52038
// continue ;
52036: GO 51926
// h := hex [ 2 ] ;
52038: LD_ADDR_VAR 0 13
52042: PUSH
52043: LD_VAR 0 4
52047: PUSH
52048: LD_INT 2
52050: ARRAY
52051: ST_TO_ADDR
// if h + 7 < height then
52052: LD_VAR 0 13
52056: PUSH
52057: LD_INT 7
52059: PLUS
52060: PUSH
52061: LD_VAR 0 15
52065: LESS
52066: IFFALSE 52095
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52068: LD_ADDR_VAR 0 18
52072: PUSH
52073: LD_INT 7
52075: PUSH
52076: LD_INT 28
52078: PUSH
52079: LD_INT 45
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: PUSH
52087: LD_VAR 0 12
52091: ARRAY
52092: ST_TO_ADDR
// break ;
52093: GO 52097
// end ; end ; end ;
52095: GO 51926
52097: POP
52098: POP
// end ; if not weapon then
52099: LD_VAR 0 18
52103: NOT
52104: IFFALSE 52164
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52106: LD_ADDR_VAR 0 5
52110: PUSH
52111: LD_VAR 0 5
52115: PUSH
52116: LD_INT 11
52118: PUSH
52119: LD_INT 30
52121: PUSH
52122: LD_INT 49
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: DIFF
52130: ST_TO_ADDR
// if not list then
52131: LD_VAR 0 5
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52282
// weapon := list [ rand ( 1 , list ) ] ;
52140: LD_ADDR_VAR 0 18
52144: PUSH
52145: LD_VAR 0 5
52149: PUSH
52150: LD_INT 1
52152: PPUSH
52153: LD_VAR 0 5
52157: PPUSH
52158: CALL_OW 12
52162: ARRAY
52163: ST_TO_ADDR
// end ; if weapon then
52164: LD_VAR 0 18
52168: IFFALSE 52282
// begin tmp := CostOfWeapon ( weapon ) ;
52170: LD_ADDR_VAR 0 14
52174: PUSH
52175: LD_VAR 0 18
52179: PPUSH
52180: CALL_OW 451
52184: ST_TO_ADDR
// j := GetBase ( tower ) ;
52185: LD_ADDR_VAR 0 9
52189: PUSH
52190: LD_VAR 0 1
52194: PPUSH
52195: CALL_OW 274
52199: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52200: LD_VAR 0 9
52204: PPUSH
52205: LD_INT 1
52207: PPUSH
52208: CALL_OW 275
52212: PUSH
52213: LD_VAR 0 14
52217: PUSH
52218: LD_INT 1
52220: ARRAY
52221: GREATEREQUAL
52222: PUSH
52223: LD_VAR 0 9
52227: PPUSH
52228: LD_INT 2
52230: PPUSH
52231: CALL_OW 275
52235: PUSH
52236: LD_VAR 0 14
52240: PUSH
52241: LD_INT 2
52243: ARRAY
52244: GREATEREQUAL
52245: AND
52246: PUSH
52247: LD_VAR 0 9
52251: PPUSH
52252: LD_INT 3
52254: PPUSH
52255: CALL_OW 275
52259: PUSH
52260: LD_VAR 0 14
52264: PUSH
52265: LD_INT 3
52267: ARRAY
52268: GREATEREQUAL
52269: AND
52270: IFFALSE 52282
// result := weapon ;
52272: LD_ADDR_VAR 0 3
52276: PUSH
52277: LD_VAR 0 18
52281: ST_TO_ADDR
// end ; end ;
52282: LD_VAR 0 3
52286: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52287: LD_INT 0
52289: PPUSH
52290: PPUSH
// result := true ;
52291: LD_ADDR_VAR 0 3
52295: PUSH
52296: LD_INT 1
52298: ST_TO_ADDR
// if array1 = array2 then
52299: LD_VAR 0 1
52303: PUSH
52304: LD_VAR 0 2
52308: EQUAL
52309: IFFALSE 52369
// begin for i = 1 to array1 do
52311: LD_ADDR_VAR 0 4
52315: PUSH
52316: DOUBLE
52317: LD_INT 1
52319: DEC
52320: ST_TO_ADDR
52321: LD_VAR 0 1
52325: PUSH
52326: FOR_TO
52327: IFFALSE 52365
// if array1 [ i ] <> array2 [ i ] then
52329: LD_VAR 0 1
52333: PUSH
52334: LD_VAR 0 4
52338: ARRAY
52339: PUSH
52340: LD_VAR 0 2
52344: PUSH
52345: LD_VAR 0 4
52349: ARRAY
52350: NONEQUAL
52351: IFFALSE 52363
// begin result := false ;
52353: LD_ADDR_VAR 0 3
52357: PUSH
52358: LD_INT 0
52360: ST_TO_ADDR
// break ;
52361: GO 52365
// end ;
52363: GO 52326
52365: POP
52366: POP
// end else
52367: GO 52377
// result := false ;
52369: LD_ADDR_VAR 0 3
52373: PUSH
52374: LD_INT 0
52376: ST_TO_ADDR
// end ;
52377: LD_VAR 0 3
52381: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52382: LD_INT 0
52384: PPUSH
52385: PPUSH
// if not array1 or not array2 then
52386: LD_VAR 0 1
52390: NOT
52391: PUSH
52392: LD_VAR 0 2
52396: NOT
52397: OR
52398: IFFALSE 52402
// exit ;
52400: GO 52466
// result := true ;
52402: LD_ADDR_VAR 0 3
52406: PUSH
52407: LD_INT 1
52409: ST_TO_ADDR
// for i = 1 to array1 do
52410: LD_ADDR_VAR 0 4
52414: PUSH
52415: DOUBLE
52416: LD_INT 1
52418: DEC
52419: ST_TO_ADDR
52420: LD_VAR 0 1
52424: PUSH
52425: FOR_TO
52426: IFFALSE 52464
// if array1 [ i ] <> array2 [ i ] then
52428: LD_VAR 0 1
52432: PUSH
52433: LD_VAR 0 4
52437: ARRAY
52438: PUSH
52439: LD_VAR 0 2
52443: PUSH
52444: LD_VAR 0 4
52448: ARRAY
52449: NONEQUAL
52450: IFFALSE 52462
// begin result := false ;
52452: LD_ADDR_VAR 0 3
52456: PUSH
52457: LD_INT 0
52459: ST_TO_ADDR
// break ;
52460: GO 52464
// end ;
52462: GO 52425
52464: POP
52465: POP
// end ;
52466: LD_VAR 0 3
52470: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52471: LD_INT 0
52473: PPUSH
52474: PPUSH
52475: PPUSH
// pom := GetBase ( fac ) ;
52476: LD_ADDR_VAR 0 5
52480: PUSH
52481: LD_VAR 0 1
52485: PPUSH
52486: CALL_OW 274
52490: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52491: LD_ADDR_VAR 0 4
52495: PUSH
52496: LD_VAR 0 2
52500: PUSH
52501: LD_INT 1
52503: ARRAY
52504: PPUSH
52505: LD_VAR 0 2
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: PPUSH
52514: LD_VAR 0 2
52518: PUSH
52519: LD_INT 3
52521: ARRAY
52522: PPUSH
52523: LD_VAR 0 2
52527: PUSH
52528: LD_INT 4
52530: ARRAY
52531: PPUSH
52532: CALL_OW 449
52536: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52537: LD_ADDR_VAR 0 3
52541: PUSH
52542: LD_VAR 0 5
52546: PPUSH
52547: LD_INT 1
52549: PPUSH
52550: CALL_OW 275
52554: PUSH
52555: LD_VAR 0 4
52559: PUSH
52560: LD_INT 1
52562: ARRAY
52563: GREATEREQUAL
52564: PUSH
52565: LD_VAR 0 5
52569: PPUSH
52570: LD_INT 2
52572: PPUSH
52573: CALL_OW 275
52577: PUSH
52578: LD_VAR 0 4
52582: PUSH
52583: LD_INT 2
52585: ARRAY
52586: GREATEREQUAL
52587: AND
52588: PUSH
52589: LD_VAR 0 5
52593: PPUSH
52594: LD_INT 3
52596: PPUSH
52597: CALL_OW 275
52601: PUSH
52602: LD_VAR 0 4
52606: PUSH
52607: LD_INT 3
52609: ARRAY
52610: GREATEREQUAL
52611: AND
52612: ST_TO_ADDR
// end ;
52613: LD_VAR 0 3
52617: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52618: LD_INT 0
52620: PPUSH
52621: PPUSH
52622: PPUSH
52623: PPUSH
// pom := GetBase ( building ) ;
52624: LD_ADDR_VAR 0 3
52628: PUSH
52629: LD_VAR 0 1
52633: PPUSH
52634: CALL_OW 274
52638: ST_TO_ADDR
// if not pom then
52639: LD_VAR 0 3
52643: NOT
52644: IFFALSE 52648
// exit ;
52646: GO 52818
// btype := GetBType ( building ) ;
52648: LD_ADDR_VAR 0 5
52652: PUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: CALL_OW 266
52662: ST_TO_ADDR
// if btype = b_armoury then
52663: LD_VAR 0 5
52667: PUSH
52668: LD_INT 4
52670: EQUAL
52671: IFFALSE 52681
// btype := b_barracks ;
52673: LD_ADDR_VAR 0 5
52677: PUSH
52678: LD_INT 5
52680: ST_TO_ADDR
// if btype = b_depot then
52681: LD_VAR 0 5
52685: PUSH
52686: LD_INT 0
52688: EQUAL
52689: IFFALSE 52699
// btype := b_warehouse ;
52691: LD_ADDR_VAR 0 5
52695: PUSH
52696: LD_INT 1
52698: ST_TO_ADDR
// if btype = b_workshop then
52699: LD_VAR 0 5
52703: PUSH
52704: LD_INT 2
52706: EQUAL
52707: IFFALSE 52717
// btype := b_factory ;
52709: LD_ADDR_VAR 0 5
52713: PUSH
52714: LD_INT 3
52716: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52717: LD_ADDR_VAR 0 4
52721: PUSH
52722: LD_VAR 0 5
52726: PPUSH
52727: LD_VAR 0 1
52731: PPUSH
52732: CALL_OW 248
52736: PPUSH
52737: CALL_OW 450
52741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52742: LD_ADDR_VAR 0 2
52746: PUSH
52747: LD_VAR 0 3
52751: PPUSH
52752: LD_INT 1
52754: PPUSH
52755: CALL_OW 275
52759: PUSH
52760: LD_VAR 0 4
52764: PUSH
52765: LD_INT 1
52767: ARRAY
52768: GREATEREQUAL
52769: PUSH
52770: LD_VAR 0 3
52774: PPUSH
52775: LD_INT 2
52777: PPUSH
52778: CALL_OW 275
52782: PUSH
52783: LD_VAR 0 4
52787: PUSH
52788: LD_INT 2
52790: ARRAY
52791: GREATEREQUAL
52792: AND
52793: PUSH
52794: LD_VAR 0 3
52798: PPUSH
52799: LD_INT 3
52801: PPUSH
52802: CALL_OW 275
52806: PUSH
52807: LD_VAR 0 4
52811: PUSH
52812: LD_INT 3
52814: ARRAY
52815: GREATEREQUAL
52816: AND
52817: ST_TO_ADDR
// end ;
52818: LD_VAR 0 2
52822: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52823: LD_INT 0
52825: PPUSH
52826: PPUSH
52827: PPUSH
// pom := GetBase ( building ) ;
52828: LD_ADDR_VAR 0 4
52832: PUSH
52833: LD_VAR 0 1
52837: PPUSH
52838: CALL_OW 274
52842: ST_TO_ADDR
// if not pom then
52843: LD_VAR 0 4
52847: NOT
52848: IFFALSE 52852
// exit ;
52850: GO 52953
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52852: LD_ADDR_VAR 0 5
52856: PUSH
52857: LD_VAR 0 2
52861: PPUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: CALL_OW 248
52871: PPUSH
52872: CALL_OW 450
52876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52877: LD_ADDR_VAR 0 3
52881: PUSH
52882: LD_VAR 0 4
52886: PPUSH
52887: LD_INT 1
52889: PPUSH
52890: CALL_OW 275
52894: PUSH
52895: LD_VAR 0 5
52899: PUSH
52900: LD_INT 1
52902: ARRAY
52903: GREATEREQUAL
52904: PUSH
52905: LD_VAR 0 4
52909: PPUSH
52910: LD_INT 2
52912: PPUSH
52913: CALL_OW 275
52917: PUSH
52918: LD_VAR 0 5
52922: PUSH
52923: LD_INT 2
52925: ARRAY
52926: GREATEREQUAL
52927: AND
52928: PUSH
52929: LD_VAR 0 4
52933: PPUSH
52934: LD_INT 3
52936: PPUSH
52937: CALL_OW 275
52941: PUSH
52942: LD_VAR 0 5
52946: PUSH
52947: LD_INT 3
52949: ARRAY
52950: GREATEREQUAL
52951: AND
52952: ST_TO_ADDR
// end ;
52953: LD_VAR 0 3
52957: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52958: LD_INT 0
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
// result := false ;
52971: LD_ADDR_VAR 0 8
52975: PUSH
52976: LD_INT 0
52978: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52979: LD_VAR 0 5
52983: NOT
52984: PUSH
52985: LD_VAR 0 1
52989: NOT
52990: OR
52991: PUSH
52992: LD_VAR 0 2
52996: NOT
52997: OR
52998: PUSH
52999: LD_VAR 0 3
53003: NOT
53004: OR
53005: IFFALSE 53009
// exit ;
53007: GO 53823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53009: LD_ADDR_VAR 0 14
53013: PUSH
53014: LD_VAR 0 1
53018: PPUSH
53019: LD_VAR 0 2
53023: PPUSH
53024: LD_VAR 0 3
53028: PPUSH
53029: LD_VAR 0 4
53033: PPUSH
53034: LD_VAR 0 5
53038: PUSH
53039: LD_INT 1
53041: ARRAY
53042: PPUSH
53043: CALL_OW 248
53047: PPUSH
53048: LD_INT 0
53050: PPUSH
53051: CALL 55060 0 6
53055: ST_TO_ADDR
// if not hexes then
53056: LD_VAR 0 14
53060: NOT
53061: IFFALSE 53065
// exit ;
53063: GO 53823
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53065: LD_ADDR_VAR 0 17
53069: PUSH
53070: LD_VAR 0 5
53074: PPUSH
53075: LD_INT 22
53077: PUSH
53078: LD_VAR 0 13
53082: PPUSH
53083: CALL_OW 255
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 30
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 30
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PPUSH
53124: CALL_OW 72
53128: ST_TO_ADDR
// for i = 1 to hexes do
53129: LD_ADDR_VAR 0 9
53133: PUSH
53134: DOUBLE
53135: LD_INT 1
53137: DEC
53138: ST_TO_ADDR
53139: LD_VAR 0 14
53143: PUSH
53144: FOR_TO
53145: IFFALSE 53821
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53147: LD_ADDR_VAR 0 13
53151: PUSH
53152: LD_VAR 0 14
53156: PUSH
53157: LD_VAR 0 9
53161: ARRAY
53162: PUSH
53163: LD_INT 1
53165: ARRAY
53166: PPUSH
53167: LD_VAR 0 14
53171: PUSH
53172: LD_VAR 0 9
53176: ARRAY
53177: PUSH
53178: LD_INT 2
53180: ARRAY
53181: PPUSH
53182: CALL_OW 428
53186: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53187: LD_VAR 0 14
53191: PUSH
53192: LD_VAR 0 9
53196: ARRAY
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: PPUSH
53202: LD_VAR 0 14
53206: PUSH
53207: LD_VAR 0 9
53211: ARRAY
53212: PUSH
53213: LD_INT 2
53215: ARRAY
53216: PPUSH
53217: CALL_OW 351
53221: PUSH
53222: LD_VAR 0 14
53226: PUSH
53227: LD_VAR 0 9
53231: ARRAY
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PPUSH
53237: LD_VAR 0 14
53241: PUSH
53242: LD_VAR 0 9
53246: ARRAY
53247: PUSH
53248: LD_INT 2
53250: ARRAY
53251: PPUSH
53252: CALL_OW 488
53256: NOT
53257: OR
53258: PUSH
53259: LD_VAR 0 13
53263: PPUSH
53264: CALL_OW 247
53268: PUSH
53269: LD_INT 3
53271: EQUAL
53272: OR
53273: IFFALSE 53279
// exit ;
53275: POP
53276: POP
53277: GO 53823
// if not tmp then
53279: LD_VAR 0 13
53283: NOT
53284: IFFALSE 53288
// continue ;
53286: GO 53144
// result := true ;
53288: LD_ADDR_VAR 0 8
53292: PUSH
53293: LD_INT 1
53295: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53296: LD_VAR 0 6
53300: PUSH
53301: LD_VAR 0 13
53305: PPUSH
53306: CALL_OW 247
53310: PUSH
53311: LD_INT 2
53313: EQUAL
53314: AND
53315: PUSH
53316: LD_VAR 0 13
53320: PPUSH
53321: CALL_OW 263
53325: PUSH
53326: LD_INT 1
53328: EQUAL
53329: AND
53330: IFFALSE 53494
// begin if IsDrivenBy ( tmp ) then
53332: LD_VAR 0 13
53336: PPUSH
53337: CALL_OW 311
53341: IFFALSE 53345
// continue ;
53343: GO 53144
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53345: LD_VAR 0 6
53349: PPUSH
53350: LD_INT 3
53352: PUSH
53353: LD_INT 60
53355: PUSH
53356: EMPTY
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 55
53368: PUSH
53369: EMPTY
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PPUSH
53380: CALL_OW 72
53384: IFFALSE 53492
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53386: LD_ADDR_VAR 0 18
53390: PUSH
53391: LD_VAR 0 6
53395: PPUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 60
53401: PUSH
53402: EMPTY
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 55
53414: PUSH
53415: EMPTY
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PPUSH
53426: CALL_OW 72
53430: PUSH
53431: LD_INT 1
53433: ARRAY
53434: ST_TO_ADDR
// if IsInUnit ( driver ) then
53435: LD_VAR 0 18
53439: PPUSH
53440: CALL_OW 310
53444: IFFALSE 53455
// ComExit ( driver ) ;
53446: LD_VAR 0 18
53450: PPUSH
53451: CALL 78244 0 1
// AddComEnterUnit ( driver , tmp ) ;
53455: LD_VAR 0 18
53459: PPUSH
53460: LD_VAR 0 13
53464: PPUSH
53465: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53469: LD_VAR 0 18
53473: PPUSH
53474: LD_VAR 0 7
53478: PPUSH
53479: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53483: LD_VAR 0 18
53487: PPUSH
53488: CALL_OW 181
// end ; continue ;
53492: GO 53144
// end ; if not cleaners or not tmp in cleaners then
53494: LD_VAR 0 6
53498: NOT
53499: PUSH
53500: LD_VAR 0 13
53504: PUSH
53505: LD_VAR 0 6
53509: IN
53510: NOT
53511: OR
53512: IFFALSE 53819
// begin if dep then
53514: LD_VAR 0 17
53518: IFFALSE 53654
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53520: LD_ADDR_VAR 0 16
53524: PUSH
53525: LD_VAR 0 17
53529: PUSH
53530: LD_INT 1
53532: ARRAY
53533: PPUSH
53534: CALL_OW 250
53538: PPUSH
53539: LD_VAR 0 17
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PPUSH
53548: CALL_OW 254
53552: PPUSH
53553: LD_INT 5
53555: PPUSH
53556: CALL_OW 272
53560: PUSH
53561: LD_VAR 0 17
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: PPUSH
53570: CALL_OW 251
53574: PPUSH
53575: LD_VAR 0 17
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: PPUSH
53584: CALL_OW 254
53588: PPUSH
53589: LD_INT 5
53591: PPUSH
53592: CALL_OW 273
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53601: LD_VAR 0 16
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PPUSH
53610: LD_VAR 0 16
53614: PUSH
53615: LD_INT 2
53617: ARRAY
53618: PPUSH
53619: CALL_OW 488
53623: IFFALSE 53654
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53625: LD_VAR 0 13
53629: PPUSH
53630: LD_VAR 0 16
53634: PUSH
53635: LD_INT 1
53637: ARRAY
53638: PPUSH
53639: LD_VAR 0 16
53643: PUSH
53644: LD_INT 2
53646: ARRAY
53647: PPUSH
53648: CALL_OW 111
// continue ;
53652: GO 53144
// end ; end ; r := GetDir ( tmp ) ;
53654: LD_ADDR_VAR 0 15
53658: PUSH
53659: LD_VAR 0 13
53663: PPUSH
53664: CALL_OW 254
53668: ST_TO_ADDR
// if r = 5 then
53669: LD_VAR 0 15
53673: PUSH
53674: LD_INT 5
53676: EQUAL
53677: IFFALSE 53687
// r := 0 ;
53679: LD_ADDR_VAR 0 15
53683: PUSH
53684: LD_INT 0
53686: ST_TO_ADDR
// for j = r to 5 do
53687: LD_ADDR_VAR 0 10
53691: PUSH
53692: DOUBLE
53693: LD_VAR 0 15
53697: DEC
53698: ST_TO_ADDR
53699: LD_INT 5
53701: PUSH
53702: FOR_TO
53703: IFFALSE 53817
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53705: LD_ADDR_VAR 0 11
53709: PUSH
53710: LD_VAR 0 13
53714: PPUSH
53715: CALL_OW 250
53719: PPUSH
53720: LD_VAR 0 10
53724: PPUSH
53725: LD_INT 2
53727: PPUSH
53728: CALL_OW 272
53732: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53733: LD_ADDR_VAR 0 12
53737: PUSH
53738: LD_VAR 0 13
53742: PPUSH
53743: CALL_OW 251
53747: PPUSH
53748: LD_VAR 0 10
53752: PPUSH
53753: LD_INT 2
53755: PPUSH
53756: CALL_OW 273
53760: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53761: LD_VAR 0 11
53765: PPUSH
53766: LD_VAR 0 12
53770: PPUSH
53771: CALL_OW 488
53775: PUSH
53776: LD_VAR 0 11
53780: PPUSH
53781: LD_VAR 0 12
53785: PPUSH
53786: CALL_OW 428
53790: NOT
53791: AND
53792: IFFALSE 53815
// begin ComMoveXY ( tmp , _x , _y ) ;
53794: LD_VAR 0 13
53798: PPUSH
53799: LD_VAR 0 11
53803: PPUSH
53804: LD_VAR 0 12
53808: PPUSH
53809: CALL_OW 111
// break ;
53813: GO 53817
// end ; end ;
53815: GO 53702
53817: POP
53818: POP
// end ; end ;
53819: GO 53144
53821: POP
53822: POP
// end ;
53823: LD_VAR 0 8
53827: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53828: LD_INT 0
53830: PPUSH
// result := true ;
53831: LD_ADDR_VAR 0 3
53835: PUSH
53836: LD_INT 1
53838: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53839: LD_VAR 0 2
53843: PUSH
53844: LD_INT 24
53846: DOUBLE
53847: EQUAL
53848: IFTRUE 53858
53850: LD_INT 33
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 53883
53858: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53859: LD_ADDR_VAR 0 3
53863: PUSH
53864: LD_INT 32
53866: PPUSH
53867: LD_VAR 0 1
53871: PPUSH
53872: CALL_OW 321
53876: PUSH
53877: LD_INT 2
53879: EQUAL
53880: ST_TO_ADDR
53881: GO 54203
53883: LD_INT 20
53885: DOUBLE
53886: EQUAL
53887: IFTRUE 53891
53889: GO 53916
53891: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_INT 6
53899: PPUSH
53900: LD_VAR 0 1
53904: PPUSH
53905: CALL_OW 321
53909: PUSH
53910: LD_INT 2
53912: EQUAL
53913: ST_TO_ADDR
53914: GO 54203
53916: LD_INT 22
53918: DOUBLE
53919: EQUAL
53920: IFTRUE 53930
53922: LD_INT 36
53924: DOUBLE
53925: EQUAL
53926: IFTRUE 53930
53928: GO 53955
53930: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53931: LD_ADDR_VAR 0 3
53935: PUSH
53936: LD_INT 15
53938: PPUSH
53939: LD_VAR 0 1
53943: PPUSH
53944: CALL_OW 321
53948: PUSH
53949: LD_INT 2
53951: EQUAL
53952: ST_TO_ADDR
53953: GO 54203
53955: LD_INT 30
53957: DOUBLE
53958: EQUAL
53959: IFTRUE 53963
53961: GO 53988
53963: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53964: LD_ADDR_VAR 0 3
53968: PUSH
53969: LD_INT 20
53971: PPUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 321
53981: PUSH
53982: LD_INT 2
53984: EQUAL
53985: ST_TO_ADDR
53986: GO 54203
53988: LD_INT 28
53990: DOUBLE
53991: EQUAL
53992: IFTRUE 54002
53994: LD_INT 21
53996: DOUBLE
53997: EQUAL
53998: IFTRUE 54002
54000: GO 54027
54002: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54003: LD_ADDR_VAR 0 3
54007: PUSH
54008: LD_INT 21
54010: PPUSH
54011: LD_VAR 0 1
54015: PPUSH
54016: CALL_OW 321
54020: PUSH
54021: LD_INT 2
54023: EQUAL
54024: ST_TO_ADDR
54025: GO 54203
54027: LD_INT 16
54029: DOUBLE
54030: EQUAL
54031: IFTRUE 54035
54033: GO 54062
54035: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54036: LD_ADDR_VAR 0 3
54040: PUSH
54041: LD_EXP 130
54045: PPUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 321
54055: PUSH
54056: LD_INT 2
54058: EQUAL
54059: ST_TO_ADDR
54060: GO 54203
54062: LD_INT 19
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54076
54068: LD_INT 23
54070: DOUBLE
54071: EQUAL
54072: IFTRUE 54076
54074: GO 54103
54076: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54077: LD_ADDR_VAR 0 3
54081: PUSH
54082: LD_EXP 129
54086: PPUSH
54087: LD_VAR 0 1
54091: PPUSH
54092: CALL_OW 321
54096: PUSH
54097: LD_INT 2
54099: EQUAL
54100: ST_TO_ADDR
54101: GO 54203
54103: LD_INT 17
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54111
54109: GO 54136
54111: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: LD_INT 39
54119: PPUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: CALL_OW 321
54129: PUSH
54130: LD_INT 2
54132: EQUAL
54133: ST_TO_ADDR
54134: GO 54203
54136: LD_INT 18
54138: DOUBLE
54139: EQUAL
54140: IFTRUE 54144
54142: GO 54169
54144: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54145: LD_ADDR_VAR 0 3
54149: PUSH
54150: LD_INT 40
54152: PPUSH
54153: LD_VAR 0 1
54157: PPUSH
54158: CALL_OW 321
54162: PUSH
54163: LD_INT 2
54165: EQUAL
54166: ST_TO_ADDR
54167: GO 54203
54169: LD_INT 27
54171: DOUBLE
54172: EQUAL
54173: IFTRUE 54177
54175: GO 54202
54177: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54178: LD_ADDR_VAR 0 3
54182: PUSH
54183: LD_INT 35
54185: PPUSH
54186: LD_VAR 0 1
54190: PPUSH
54191: CALL_OW 321
54195: PUSH
54196: LD_INT 2
54198: EQUAL
54199: ST_TO_ADDR
54200: GO 54203
54202: POP
// end ;
54203: LD_VAR 0 3
54207: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54208: LD_INT 0
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
// result := false ;
54221: LD_ADDR_VAR 0 6
54225: PUSH
54226: LD_INT 0
54228: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54229: LD_VAR 0 1
54233: NOT
54234: PUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 266
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: IN
54255: NOT
54256: OR
54257: PUSH
54258: LD_VAR 0 2
54262: NOT
54263: OR
54264: PUSH
54265: LD_VAR 0 5
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 4
54284: PUSH
54285: LD_INT 5
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: IN
54296: NOT
54297: OR
54298: PUSH
54299: LD_VAR 0 3
54303: PPUSH
54304: LD_VAR 0 4
54308: PPUSH
54309: CALL_OW 488
54313: NOT
54314: OR
54315: IFFALSE 54319
// exit ;
54317: GO 55055
// side := GetSide ( depot ) ;
54319: LD_ADDR_VAR 0 9
54323: PUSH
54324: LD_VAR 0 1
54328: PPUSH
54329: CALL_OW 255
54333: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54334: LD_VAR 0 9
54338: PPUSH
54339: LD_VAR 0 2
54343: PPUSH
54344: CALL 53828 0 2
54348: NOT
54349: IFFALSE 54353
// exit ;
54351: GO 55055
// pom := GetBase ( depot ) ;
54353: LD_ADDR_VAR 0 10
54357: PUSH
54358: LD_VAR 0 1
54362: PPUSH
54363: CALL_OW 274
54367: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54368: LD_ADDR_VAR 0 11
54372: PUSH
54373: LD_VAR 0 2
54377: PPUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL_OW 248
54387: PPUSH
54388: CALL_OW 450
54392: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54393: LD_VAR 0 10
54397: PPUSH
54398: LD_INT 1
54400: PPUSH
54401: CALL_OW 275
54405: PUSH
54406: LD_VAR 0 11
54410: PUSH
54411: LD_INT 1
54413: ARRAY
54414: GREATEREQUAL
54415: PUSH
54416: LD_VAR 0 10
54420: PPUSH
54421: LD_INT 2
54423: PPUSH
54424: CALL_OW 275
54428: PUSH
54429: LD_VAR 0 11
54433: PUSH
54434: LD_INT 2
54436: ARRAY
54437: GREATEREQUAL
54438: AND
54439: PUSH
54440: LD_VAR 0 10
54444: PPUSH
54445: LD_INT 3
54447: PPUSH
54448: CALL_OW 275
54452: PUSH
54453: LD_VAR 0 11
54457: PUSH
54458: LD_INT 3
54460: ARRAY
54461: GREATEREQUAL
54462: AND
54463: NOT
54464: IFFALSE 54468
// exit ;
54466: GO 55055
// if GetBType ( depot ) = b_depot then
54468: LD_VAR 0 1
54472: PPUSH
54473: CALL_OW 266
54477: PUSH
54478: LD_INT 0
54480: EQUAL
54481: IFFALSE 54493
// dist := 28 else
54483: LD_ADDR_VAR 0 14
54487: PUSH
54488: LD_INT 28
54490: ST_TO_ADDR
54491: GO 54501
// dist := 36 ;
54493: LD_ADDR_VAR 0 14
54497: PUSH
54498: LD_INT 36
54500: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54501: LD_VAR 0 1
54505: PPUSH
54506: LD_VAR 0 3
54510: PPUSH
54511: LD_VAR 0 4
54515: PPUSH
54516: CALL_OW 297
54520: PUSH
54521: LD_VAR 0 14
54525: GREATER
54526: IFFALSE 54530
// exit ;
54528: GO 55055
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54530: LD_ADDR_VAR 0 12
54534: PUSH
54535: LD_VAR 0 2
54539: PPUSH
54540: LD_VAR 0 3
54544: PPUSH
54545: LD_VAR 0 4
54549: PPUSH
54550: LD_VAR 0 5
54554: PPUSH
54555: LD_VAR 0 1
54559: PPUSH
54560: CALL_OW 248
54564: PPUSH
54565: LD_INT 0
54567: PPUSH
54568: CALL 55060 0 6
54572: ST_TO_ADDR
// if not hexes then
54573: LD_VAR 0 12
54577: NOT
54578: IFFALSE 54582
// exit ;
54580: GO 55055
// hex := GetHexInfo ( x , y ) ;
54582: LD_ADDR_VAR 0 15
54586: PUSH
54587: LD_VAR 0 3
54591: PPUSH
54592: LD_VAR 0 4
54596: PPUSH
54597: CALL_OW 546
54601: ST_TO_ADDR
// if hex [ 1 ] then
54602: LD_VAR 0 15
54606: PUSH
54607: LD_INT 1
54609: ARRAY
54610: IFFALSE 54614
// exit ;
54612: GO 55055
// height := hex [ 2 ] ;
54614: LD_ADDR_VAR 0 13
54618: PUSH
54619: LD_VAR 0 15
54623: PUSH
54624: LD_INT 2
54626: ARRAY
54627: ST_TO_ADDR
// for i = 1 to hexes do
54628: LD_ADDR_VAR 0 7
54632: PUSH
54633: DOUBLE
54634: LD_INT 1
54636: DEC
54637: ST_TO_ADDR
54638: LD_VAR 0 12
54642: PUSH
54643: FOR_TO
54644: IFFALSE 54974
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54646: LD_VAR 0 12
54650: PUSH
54651: LD_VAR 0 7
54655: ARRAY
54656: PUSH
54657: LD_INT 1
54659: ARRAY
54660: PPUSH
54661: LD_VAR 0 12
54665: PUSH
54666: LD_VAR 0 7
54670: ARRAY
54671: PUSH
54672: LD_INT 2
54674: ARRAY
54675: PPUSH
54676: CALL_OW 488
54680: NOT
54681: PUSH
54682: LD_VAR 0 12
54686: PUSH
54687: LD_VAR 0 7
54691: ARRAY
54692: PUSH
54693: LD_INT 1
54695: ARRAY
54696: PPUSH
54697: LD_VAR 0 12
54701: PUSH
54702: LD_VAR 0 7
54706: ARRAY
54707: PUSH
54708: LD_INT 2
54710: ARRAY
54711: PPUSH
54712: CALL_OW 428
54716: PUSH
54717: LD_INT 0
54719: GREATER
54720: OR
54721: PUSH
54722: LD_VAR 0 12
54726: PUSH
54727: LD_VAR 0 7
54731: ARRAY
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PPUSH
54737: LD_VAR 0 12
54741: PUSH
54742: LD_VAR 0 7
54746: ARRAY
54747: PUSH
54748: LD_INT 2
54750: ARRAY
54751: PPUSH
54752: CALL_OW 351
54756: OR
54757: IFFALSE 54763
// exit ;
54759: POP
54760: POP
54761: GO 55055
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54763: LD_ADDR_VAR 0 8
54767: PUSH
54768: LD_VAR 0 12
54772: PUSH
54773: LD_VAR 0 7
54777: ARRAY
54778: PUSH
54779: LD_INT 1
54781: ARRAY
54782: PPUSH
54783: LD_VAR 0 12
54787: PUSH
54788: LD_VAR 0 7
54792: ARRAY
54793: PUSH
54794: LD_INT 2
54796: ARRAY
54797: PPUSH
54798: CALL_OW 546
54802: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54803: LD_VAR 0 8
54807: PUSH
54808: LD_INT 1
54810: ARRAY
54811: PUSH
54812: LD_VAR 0 8
54816: PUSH
54817: LD_INT 2
54819: ARRAY
54820: PUSH
54821: LD_VAR 0 13
54825: PUSH
54826: LD_INT 2
54828: PLUS
54829: GREATER
54830: OR
54831: PUSH
54832: LD_VAR 0 8
54836: PUSH
54837: LD_INT 2
54839: ARRAY
54840: PUSH
54841: LD_VAR 0 13
54845: PUSH
54846: LD_INT 2
54848: MINUS
54849: LESS
54850: OR
54851: PUSH
54852: LD_VAR 0 8
54856: PUSH
54857: LD_INT 3
54859: ARRAY
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 8
54866: PUSH
54867: LD_INT 9
54869: PUSH
54870: LD_INT 10
54872: PUSH
54873: LD_INT 11
54875: PUSH
54876: LD_INT 12
54878: PUSH
54879: LD_INT 13
54881: PUSH
54882: LD_INT 16
54884: PUSH
54885: LD_INT 17
54887: PUSH
54888: LD_INT 18
54890: PUSH
54891: LD_INT 19
54893: PUSH
54894: LD_INT 20
54896: PUSH
54897: LD_INT 21
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: IN
54915: NOT
54916: OR
54917: PUSH
54918: LD_VAR 0 8
54922: PUSH
54923: LD_INT 5
54925: ARRAY
54926: NOT
54927: OR
54928: PUSH
54929: LD_VAR 0 8
54933: PUSH
54934: LD_INT 6
54936: ARRAY
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 7
54946: PUSH
54947: LD_INT 9
54949: PUSH
54950: LD_INT 10
54952: PUSH
54953: LD_INT 11
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: IN
54964: NOT
54965: OR
54966: IFFALSE 54972
// exit ;
54968: POP
54969: POP
54970: GO 55055
// end ;
54972: GO 54643
54974: POP
54975: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54976: LD_VAR 0 9
54980: PPUSH
54981: LD_VAR 0 3
54985: PPUSH
54986: LD_VAR 0 4
54990: PPUSH
54991: LD_INT 20
54993: PPUSH
54994: CALL 47001 0 4
54998: PUSH
54999: LD_INT 4
55001: ARRAY
55002: IFFALSE 55006
// exit ;
55004: GO 55055
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55006: LD_VAR 0 2
55010: PUSH
55011: LD_INT 29
55013: PUSH
55014: LD_INT 30
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: IN
55021: PUSH
55022: LD_VAR 0 3
55026: PPUSH
55027: LD_VAR 0 4
55031: PPUSH
55032: LD_VAR 0 9
55036: PPUSH
55037: CALL_OW 440
55041: NOT
55042: AND
55043: IFFALSE 55047
// exit ;
55045: GO 55055
// result := true ;
55047: LD_ADDR_VAR 0 6
55051: PUSH
55052: LD_INT 1
55054: ST_TO_ADDR
// end ;
55055: LD_VAR 0 6
55059: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55060: LD_INT 0
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
55084: PPUSH
55085: PPUSH
55086: PPUSH
55087: PPUSH
55088: PPUSH
55089: PPUSH
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
55096: PPUSH
55097: PPUSH
55098: PPUSH
55099: PPUSH
55100: PPUSH
55101: PPUSH
55102: PPUSH
55103: PPUSH
55104: PPUSH
55105: PPUSH
55106: PPUSH
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
// result = [ ] ;
55120: LD_ADDR_VAR 0 7
55124: PUSH
55125: EMPTY
55126: ST_TO_ADDR
// temp_list = [ ] ;
55127: LD_ADDR_VAR 0 9
55131: PUSH
55132: EMPTY
55133: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55134: LD_VAR 0 4
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: LD_INT 4
55153: PUSH
55154: LD_INT 5
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: IN
55165: NOT
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: IN
55182: PUSH
55183: LD_VAR 0 5
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: IN
55202: NOT
55203: AND
55204: OR
55205: IFFALSE 55209
// exit ;
55207: GO 73600
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55209: LD_VAR 0 1
55213: PUSH
55214: LD_INT 6
55216: PUSH
55217: LD_INT 7
55219: PUSH
55220: LD_INT 8
55222: PUSH
55223: LD_INT 13
55225: PUSH
55226: LD_INT 12
55228: PUSH
55229: LD_INT 15
55231: PUSH
55232: LD_INT 11
55234: PUSH
55235: LD_INT 14
55237: PUSH
55238: LD_INT 10
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: IN
55252: IFFALSE 55262
// btype = b_lab ;
55254: LD_ADDR_VAR 0 1
55258: PUSH
55259: LD_INT 6
55261: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55262: LD_VAR 0 6
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: IN
55281: NOT
55282: PUSH
55283: LD_VAR 0 1
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 6
55302: PUSH
55303: LD_INT 36
55305: PUSH
55306: LD_INT 4
55308: PUSH
55309: LD_INT 5
55311: PUSH
55312: LD_INT 31
55314: PUSH
55315: LD_INT 32
55317: PUSH
55318: LD_INT 33
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: IN
55334: NOT
55335: PUSH
55336: LD_VAR 0 6
55340: PUSH
55341: LD_INT 1
55343: EQUAL
55344: AND
55345: OR
55346: PUSH
55347: LD_VAR 0 1
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: IN
55362: NOT
55363: PUSH
55364: LD_VAR 0 6
55368: PUSH
55369: LD_INT 2
55371: EQUAL
55372: AND
55373: OR
55374: IFFALSE 55384
// mode = 0 ;
55376: LD_ADDR_VAR 0 6
55380: PUSH
55381: LD_INT 0
55383: ST_TO_ADDR
// case mode of 0 :
55384: LD_VAR 0 6
55388: PUSH
55389: LD_INT 0
55391: DOUBLE
55392: EQUAL
55393: IFTRUE 55397
55395: GO 66850
55397: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55398: LD_ADDR_VAR 0 11
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55591: LD_ADDR_VAR 0 12
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55787: LD_ADDR_VAR 0 13
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55986: LD_ADDR_VAR 0 14
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56182: LD_ADDR_VAR 0 15
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56375: LD_ADDR_VAR 0 16
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56568: LD_ADDR_VAR 0 17
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56798: LD_ADDR_VAR 0 18
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57028: LD_ADDR_VAR 0 19
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57258: LD_ADDR_VAR 0 20
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57488: LD_ADDR_VAR 0 21
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57718: LD_ADDR_VAR 0 22
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57948: LD_ADDR_VAR 0 23
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58228: LD_ADDR_VAR 0 24
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58504: LD_ADDR_VAR 0 25
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58778: LD_ADDR_VAR 0 26
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59054: LD_ADDR_VAR 0 27
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59334: LD_ADDR_VAR 0 28
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59616: LD_ADDR_VAR 0 29
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 3
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59895: LD_ADDR_VAR 0 30
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60173: LD_ADDR_VAR 0 31
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60451: LD_ADDR_VAR 0 32
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60729: LD_ADDR_VAR 0 33
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 3
60973: NEG
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61008: LD_ADDR_VAR 0 34
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61288: LD_ADDR_VAR 0 35
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61400: LD_ADDR_VAR 0 36
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61512: LD_ADDR_VAR 0 37
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61624: LD_ADDR_VAR 0 38
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61736: LD_ADDR_VAR 0 39
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61848: LD_ADDR_VAR 0 40
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61960: LD_ADDR_VAR 0 41
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 3
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 3
62257: NEG
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: NEG
62270: PUSH
62271: LD_INT 3
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62310: LD_ADDR_VAR 0 42
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: NEG
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 3
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 2
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 3
62619: NEG
62620: PUSH
62621: LD_INT 3
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62660: LD_ADDR_VAR 0 43
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: LD_INT 3
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 3
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 2
62945: NEG
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 3
62956: NEG
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 3
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63008: LD_ADDR_VAR 0 44
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: NEG
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 3
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: NEG
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 3
63305: NEG
63306: PUSH
63307: LD_INT 2
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: LD_INT 3
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63358: LD_ADDR_VAR 0 45
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: LD_INT 2
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: LD_INT 3
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: LD_INT 3
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: NEG
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63708: LD_ADDR_VAR 0 46
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: NEG
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 3
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 3
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: LD_INT 3
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 3
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 3
64004: NEG
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64056: LD_ADDR_VAR 0 47
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: NEG
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: LD_INT 2
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64207: LD_ADDR_VAR 0 48
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64354: LD_ADDR_VAR 0 49
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 2
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 2
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64498: LD_ADDR_VAR 0 50
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64642: LD_ADDR_VAR 0 51
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 2
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64789: LD_ADDR_VAR 0 52
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 2
64904: NEG
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64940: LD_ADDR_VAR 0 53
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: LD_INT 2
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 2
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: LD_INT 2
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65170: LD_ADDR_VAR 0 54
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 2
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 2
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: NEG
65370: PUSH
65371: LD_INT 2
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65400: LD_ADDR_VAR 0 55
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 2
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 2
65576: NEG
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: LD_INT 2
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65630: LD_ADDR_VAR 0 56
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: NEG
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: LD_INT 2
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 2
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 2
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: NEG
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65860: LD_ADDR_VAR 0 57
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: LD_INT 1
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: NEG
65942: PUSH
65943: LD_INT 2
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66090: LD_ADDR_VAR 0 58
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 1
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 1
66148: NEG
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: LD_INT 2
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: LD_INT 2
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 2
66266: NEG
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66320: LD_ADDR_VAR 0 59
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66408: LD_ADDR_VAR 0 60
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66496: LD_ADDR_VAR 0 61
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 1
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66584: LD_ADDR_VAR 0 62
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 1
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 1
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66672: LD_ADDR_VAR 0 63
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66760: LD_ADDR_VAR 0 64
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: NEG
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// end ; 1 :
66848: GO 72745
66850: LD_INT 1
66852: DOUBLE
66853: EQUAL
66854: IFTRUE 66858
66856: GO 69481
66858: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66859: LD_ADDR_VAR 0 11
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: LD_INT 3
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66903: LD_ADDR_VAR 0 12
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: LIST
66943: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66944: LD_ADDR_VAR 0 13
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66984: LD_ADDR_VAR 0 14
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67025: LD_ADDR_VAR 0 15
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67069: LD_ADDR_VAR 0 16
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: LD_INT 3
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: NEG
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: LD_INT 3
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67115: LD_ADDR_VAR 0 17
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: LD_INT 3
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67159: LD_ADDR_VAR 0 18
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67200: LD_ADDR_VAR 0 19
67204: PUSH
67205: LD_INT 3
67207: PUSH
67208: LD_INT 2
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: LD_INT 3
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67240: LD_ADDR_VAR 0 20
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67281: LD_ADDR_VAR 0 21
67285: PUSH
67286: LD_INT 2
67288: NEG
67289: PUSH
67290: LD_INT 1
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 3
67299: NEG
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 3
67310: NEG
67311: PUSH
67312: LD_INT 1
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: LIST
67324: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67325: LD_ADDR_VAR 0 22
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: LD_INT 3
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 3
67344: NEG
67345: PUSH
67346: LD_INT 2
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 3
67356: NEG
67357: PUSH
67358: LD_INT 3
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: LIST
67370: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67371: LD_ADDR_VAR 0 23
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67415: LD_ADDR_VAR 0 24
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 4
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67456: LD_ADDR_VAR 0 25
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 4
67473: PUSH
67474: LD_INT 3
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 4
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67496: LD_ADDR_VAR 0 26
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: LIST
67536: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67537: LD_ADDR_VAR 0 27
67541: PUSH
67542: LD_INT 3
67544: NEG
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 4
67566: NEG
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67581: LD_ADDR_VAR 0 28
67585: PUSH
67586: LD_INT 3
67588: NEG
67589: PUSH
67590: LD_INT 3
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: NEG
67601: PUSH
67602: LD_INT 4
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 4
67612: NEG
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67627: LD_ADDR_VAR 0 29
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: LD_INT 3
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: LD_INT 3
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 1
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 4
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 4
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 3
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: NEG
67703: PUSH
67704: LD_INT 5
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: LD_INT 5
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: LD_INT 4
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 6
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 6
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 5
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67782: LD_ADDR_VAR 0 30
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 3
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 4
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 4
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 4
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 5
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: LD_INT 1
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 6
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 6
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67925: LD_ADDR_VAR 0 31
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 2
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 4
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 5
67992: PUSH
67993: LD_INT 4
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 5
68002: PUSH
68003: LD_INT 5
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: LD_INT 5
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 6
68022: PUSH
68023: LD_INT 5
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 6
68032: PUSH
68033: LD_INT 6
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 5
68042: PUSH
68043: LD_INT 6
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68064: LD_ADDR_VAR 0 32
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 3
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: LD_INT 3
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: LD_INT 2
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 0
68112: PUSH
68113: LD_INT 4
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: LD_INT 5
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 5
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: LD_INT 4
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 6
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: LD_INT 6
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 5
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68207: LD_ADDR_VAR 0 33
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 3
68248: NEG
68249: PUSH
68250: LD_INT 1
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 4
68259: NEG
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 4
68270: NEG
68271: PUSH
68272: LD_INT 1
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 4
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 5
68293: NEG
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 5
68304: NEG
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 5
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 6
68327: NEG
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 6
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68362: LD_ADDR_VAR 0 34
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: LD_INT 3
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 3
68381: NEG
68382: PUSH
68383: LD_INT 2
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 3
68393: NEG
68394: PUSH
68395: LD_INT 3
68397: NEG
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 3
68405: NEG
68406: PUSH
68407: LD_INT 4
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 4
68417: NEG
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 4
68429: NEG
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 4
68441: NEG
68442: PUSH
68443: LD_INT 5
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 5
68453: NEG
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 5
68465: NEG
68466: PUSH
68467: LD_INT 5
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 5
68477: NEG
68478: PUSH
68479: LD_INT 6
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 6
68489: NEG
68490: PUSH
68491: LD_INT 5
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 6
68501: NEG
68502: PUSH
68503: LD_INT 6
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68525: LD_ADDR_VAR 0 41
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 2
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: LD_INT 3
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68569: LD_ADDR_VAR 0 42
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: LIST
68609: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68610: LD_ADDR_VAR 0 43
68614: PUSH
68615: LD_INT 2
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 3
68627: PUSH
68628: LD_INT 2
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 2
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: LIST
68649: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68650: LD_ADDR_VAR 0 44
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: LD_INT 2
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 1
68667: PUSH
68668: LD_INT 3
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: LIST
68690: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68691: LD_ADDR_VAR 0 45
68695: PUSH
68696: LD_INT 2
68698: NEG
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 2
68709: NEG
68710: PUSH
68711: LD_INT 1
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 1
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68735: LD_ADDR_VAR 0 46
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: LD_INT 2
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 2
68754: NEG
68755: PUSH
68756: LD_INT 3
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: NEG
68767: PUSH
68768: LD_INT 2
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: LIST
68780: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68781: LD_ADDR_VAR 0 47
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: LD_INT 3
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68814: LD_ADDR_VAR 0 48
68818: PUSH
68819: LD_INT 1
68821: PUSH
68822: LD_INT 2
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 1
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68845: LD_ADDR_VAR 0 49
68849: PUSH
68850: LD_INT 3
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68874: LD_ADDR_VAR 0 50
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 1
68891: PUSH
68892: LD_INT 3
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68903: LD_ADDR_VAR 0 51
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: LD_INT 2
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 2
68921: NEG
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68934: LD_ADDR_VAR 0 52
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: LD_INT 1
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: LD_INT 2
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68967: LD_ADDR_VAR 0 53
68971: PUSH
68972: LD_INT 1
68974: NEG
68975: PUSH
68976: LD_INT 3
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 3
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: LIST
69010: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69011: LD_ADDR_VAR 0 54
69015: PUSH
69016: LD_INT 2
69018: PUSH
69019: LD_INT 1
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69052: LD_ADDR_VAR 0 55
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: LD_INT 3
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 2
69079: PUSH
69080: LD_INT 3
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: LIST
69091: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69092: LD_ADDR_VAR 0 56
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: LD_INT 2
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69133: LD_ADDR_VAR 0 57
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: LD_INT 1
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: NEG
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 3
69162: NEG
69163: PUSH
69164: LD_INT 1
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: LIST
69176: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69177: LD_ADDR_VAR 0 58
69181: PUSH
69182: LD_INT 2
69184: NEG
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: LD_INT 2
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 3
69208: NEG
69209: PUSH
69210: LD_INT 3
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: LIST
69222: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69223: LD_ADDR_VAR 0 59
69227: PUSH
69228: LD_INT 1
69230: NEG
69231: PUSH
69232: LD_INT 2
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: LD_INT 2
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: PUSH
69254: LD_INT 1
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: LIST
69266: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69267: LD_ADDR_VAR 0 60
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 2
69295: PUSH
69296: LD_INT 1
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69308: LD_ADDR_VAR 0 61
69312: PUSH
69313: LD_INT 2
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 1
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: LIST
69347: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69348: LD_ADDR_VAR 0 62
69352: PUSH
69353: LD_INT 1
69355: PUSH
69356: LD_INT 2
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: LD_INT 2
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 1
69375: NEG
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69389: LD_ADDR_VAR 0 63
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 1
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 2
69407: NEG
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 2
69418: NEG
69419: PUSH
69420: LD_INT 1
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: LIST
69432: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69433: LD_ADDR_VAR 0 64
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 2
69452: NEG
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 2
69464: NEG
69465: PUSH
69466: LD_INT 2
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: LIST
69478: ST_TO_ADDR
// end ; 2 :
69479: GO 72745
69481: LD_INT 2
69483: DOUBLE
69484: EQUAL
69485: IFTRUE 69489
69487: GO 72744
69489: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69490: LD_ADDR_VAR 0 29
69494: PUSH
69495: LD_INT 4
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 4
69507: PUSH
69508: LD_INT 1
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 5
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 5
69528: PUSH
69529: LD_INT 1
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 4
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 5
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 3
69590: PUSH
69591: LD_INT 3
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 4
69620: PUSH
69621: LD_INT 4
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 3
69630: PUSH
69631: LD_INT 4
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 2
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: LD_INT 2
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: LD_INT 4
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 1
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: LD_INT 5
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 5
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: NEG
69731: PUSH
69732: LD_INT 4
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 1
69741: NEG
69742: PUSH
69743: LD_INT 3
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 2
69752: PUSH
69753: LD_INT 5
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: LD_INT 3
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 3
69773: NEG
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: LD_INT 1
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 2
69796: NEG
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 3
69818: NEG
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 4
69829: NEG
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 4
69852: NEG
69853: PUSH
69854: LD_INT 2
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 4
69875: NEG
69876: PUSH
69877: LD_INT 4
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: LD_INT 5
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 3
69899: NEG
69900: PUSH
69901: LD_INT 4
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 3
69911: NEG
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 4
69923: NEG
69924: PUSH
69925: LD_INT 3
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 5
69935: NEG
69936: PUSH
69937: LD_INT 4
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 5
69947: NEG
69948: PUSH
69949: LD_INT 5
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: LD_INT 5
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 5
69971: NEG
69972: PUSH
69973: LD_INT 3
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70028: LD_ADDR_VAR 0 30
70032: PUSH
70033: LD_INT 4
70035: PUSH
70036: LD_INT 4
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: LD_INT 3
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 5
70055: PUSH
70056: LD_INT 4
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 5
70065: PUSH
70066: LD_INT 5
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 4
70075: PUSH
70076: LD_INT 5
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 3
70085: PUSH
70086: LD_INT 4
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 5
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 3
70115: PUSH
70116: LD_INT 5
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: LD_INT 3
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 1
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: LD_INT 4
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: LD_INT 4
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 1
70175: NEG
70176: PUSH
70177: LD_INT 3
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 1
70186: NEG
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: LD_INT 4
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 2
70207: NEG
70208: PUSH
70209: LD_INT 2
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 4
70218: NEG
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 4
70229: NEG
70230: PUSH
70231: LD_INT 1
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: NEG
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 3
70252: NEG
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 4
70263: NEG
70264: PUSH
70265: LD_INT 1
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 5
70274: NEG
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 5
70285: NEG
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 5
70297: NEG
70298: PUSH
70299: LD_INT 2
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 4
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 2
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 2
70356: NEG
70357: PUSH
70358: LD_INT 2
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: LD_INT 2
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 4
70380: NEG
70381: PUSH
70382: LD_INT 3
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 4
70392: NEG
70393: PUSH
70394: LD_INT 4
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 2
70404: NEG
70405: PUSH
70406: LD_INT 4
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 4
70416: NEG
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: LD_INT 4
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: LD_INT 5
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: LD_INT 3
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 3
70475: NEG
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 1
70483: NEG
70484: PUSH
70485: LD_INT 4
70487: NEG
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 1
70495: NEG
70496: PUSH
70497: LD_INT 5
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: LD_INT 3
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 2
70518: NEG
70519: PUSH
70520: LD_INT 5
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70575: LD_ADDR_VAR 0 31
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 4
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: LD_INT 3
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 5
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 5
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: NEG
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: LD_INT 5
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 2
70664: NEG
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 3
70675: NEG
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: LD_INT 1
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 2
70709: NEG
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: NEG
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 4
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 4
70754: NEG
70755: PUSH
70756: LD_INT 2
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 2
70766: NEG
70767: PUSH
70768: LD_INT 2
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: LD_INT 4
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 4
70789: NEG
70790: PUSH
70791: LD_INT 5
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: LD_INT 4
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: NEG
70814: PUSH
70815: LD_INT 3
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 4
70825: NEG
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 5
70837: NEG
70838: PUSH
70839: LD_INT 4
70841: NEG
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 5
70849: NEG
70850: PUSH
70851: LD_INT 5
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: LD_INT 5
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 5
70873: NEG
70874: PUSH
70875: LD_INT 3
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: LD_INT 3
70888: NEG
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 0
70896: PUSH
70897: LD_INT 4
70899: NEG
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: LD_INT 3
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 1
70918: PUSH
70919: LD_INT 2
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 0
70929: PUSH
70930: LD_INT 2
70932: NEG
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 1
70940: NEG
70941: PUSH
70942: LD_INT 3
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 1
70952: NEG
70953: PUSH
70954: LD_INT 4
70956: NEG
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 2
70964: PUSH
70965: LD_INT 2
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: LD_INT 4
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 4
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 4
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 5
71008: PUSH
71009: LD_INT 0
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 5
71018: PUSH
71019: LD_INT 1
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 4
71028: PUSH
71029: LD_INT 1
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 3
71038: PUSH
71039: LD_INT 0
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 3
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 3
71059: PUSH
71060: LD_INT 2
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 5
71070: PUSH
71071: LD_INT 2
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71125: LD_ADDR_VAR 0 32
71129: PUSH
71130: LD_INT 4
71132: NEG
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 4
71143: NEG
71144: PUSH
71145: LD_INT 1
71147: NEG
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 3
71155: NEG
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 3
71166: NEG
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 4
71177: NEG
71178: PUSH
71179: LD_INT 1
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 5
71188: NEG
71189: PUSH
71190: LD_INT 0
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 5
71199: NEG
71200: PUSH
71201: LD_INT 1
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 5
71211: NEG
71212: PUSH
71213: LD_INT 2
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: LD_INT 2
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 3
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 3
71246: NEG
71247: PUSH
71248: LD_INT 4
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: NEG
71259: PUSH
71260: LD_INT 3
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 2
71270: NEG
71271: PUSH
71272: LD_INT 2
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 3
71282: NEG
71283: PUSH
71284: LD_INT 2
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 4
71294: NEG
71295: PUSH
71296: LD_INT 3
71298: NEG
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 4
71306: NEG
71307: PUSH
71308: LD_INT 4
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 2
71318: NEG
71319: PUSH
71320: LD_INT 4
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 4
71330: NEG
71331: PUSH
71332: LD_INT 2
71334: NEG
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: LD_INT 4
71345: NEG
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 0
71353: PUSH
71354: LD_INT 5
71356: NEG
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 1
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 1
71375: PUSH
71376: LD_INT 3
71378: NEG
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: LD_INT 3
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 1
71397: NEG
71398: PUSH
71399: LD_INT 4
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 1
71409: NEG
71410: PUSH
71411: LD_INT 5
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: LD_INT 3
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 2
71432: NEG
71433: PUSH
71434: LD_INT 5
71436: NEG
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 3
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 3
71454: PUSH
71455: LD_INT 1
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 4
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: LD_INT 4
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 3
71485: PUSH
71486: LD_INT 1
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 2
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 2
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 2
71516: PUSH
71517: LD_INT 2
71519: NEG
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 4
71527: PUSH
71528: LD_INT 2
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 4
71537: PUSH
71538: LD_INT 4
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 4
71547: PUSH
71548: LD_INT 3
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 5
71557: PUSH
71558: LD_INT 4
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 5
71567: PUSH
71568: LD_INT 5
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 4
71577: PUSH
71578: LD_INT 5
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 3
71587: PUSH
71588: LD_INT 4
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 3
71597: PUSH
71598: LD_INT 3
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 5
71607: PUSH
71608: LD_INT 3
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 3
71617: PUSH
71618: LD_INT 5
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71672: LD_ADDR_VAR 0 33
71676: PUSH
71677: LD_INT 4
71679: NEG
71680: PUSH
71681: LD_INT 4
71683: NEG
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 4
71691: NEG
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: LD_INT 4
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 3
71715: NEG
71716: PUSH
71717: LD_INT 3
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 4
71727: NEG
71728: PUSH
71729: LD_INT 3
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 5
71739: NEG
71740: PUSH
71741: LD_INT 4
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 5
71751: NEG
71752: PUSH
71753: LD_INT 5
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 3
71763: NEG
71764: PUSH
71765: LD_INT 5
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 5
71775: NEG
71776: PUSH
71777: LD_INT 3
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: LD_INT 4
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: PUSH
71810: LD_INT 3
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: PUSH
71821: LD_INT 2
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 0
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 1
71842: NEG
71843: PUSH
71844: LD_INT 3
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: LD_INT 4
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 2
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 2
71877: NEG
71878: PUSH
71879: LD_INT 4
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 4
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: PUSH
71900: LD_INT 1
71902: NEG
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 5
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 5
71920: PUSH
71921: LD_INT 1
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 4
71930: PUSH
71931: LD_INT 1
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 3
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 3
71950: PUSH
71951: LD_INT 1
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: LD_INT 2
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 3
71982: PUSH
71983: LD_INT 3
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 3
71992: PUSH
71993: LD_INT 2
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 4
72002: PUSH
72003: LD_INT 3
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 4
72012: PUSH
72013: LD_INT 4
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 3
72022: PUSH
72023: LD_INT 4
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 2
72032: PUSH
72033: LD_INT 3
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 2
72042: PUSH
72043: LD_INT 2
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 4
72052: PUSH
72053: LD_INT 2
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 2
72062: PUSH
72063: LD_INT 4
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 4
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: LD_INT 3
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 1
72092: PUSH
72093: LD_INT 4
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 1
72102: PUSH
72103: LD_INT 5
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 0
72112: PUSH
72113: LD_INT 5
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 1
72122: NEG
72123: PUSH
72124: LD_INT 4
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 1
72133: NEG
72134: PUSH
72135: LD_INT 3
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 2
72144: PUSH
72145: LD_INT 5
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: LD_INT 3
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72210: LD_ADDR_VAR 0 34
72214: PUSH
72215: LD_INT 0
72217: PUSH
72218: LD_INT 4
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 5
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: LD_INT 4
72242: NEG
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 1
72250: PUSH
72251: LD_INT 3
72253: NEG
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 0
72261: PUSH
72262: LD_INT 3
72264: NEG
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 1
72272: NEG
72273: PUSH
72274: LD_INT 4
72276: NEG
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 1
72284: NEG
72285: PUSH
72286: LD_INT 5
72288: NEG
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 3
72299: NEG
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 2
72307: NEG
72308: PUSH
72309: LD_INT 5
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: LD_INT 0
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 3
72329: PUSH
72330: LD_INT 1
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: PUSH
72341: LD_INT 0
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 4
72350: PUSH
72351: LD_INT 1
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 3
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: LD_INT 0
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 2
72380: PUSH
72381: LD_INT 1
72383: NEG
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 2
72391: PUSH
72392: LD_INT 2
72394: NEG
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 4
72402: PUSH
72403: LD_INT 2
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 4
72412: PUSH
72413: LD_INT 4
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 4
72422: PUSH
72423: LD_INT 3
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 5
72432: PUSH
72433: LD_INT 4
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 5
72442: PUSH
72443: LD_INT 5
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 4
72452: PUSH
72453: LD_INT 5
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 3
72462: PUSH
72463: LD_INT 4
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 3
72472: PUSH
72473: LD_INT 3
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 5
72482: PUSH
72483: LD_INT 3
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 3
72492: PUSH
72493: LD_INT 5
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: LD_INT 3
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: LD_INT 2
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: LD_INT 3
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: LD_INT 4
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 4
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 1
72552: NEG
72553: PUSH
72554: LD_INT 3
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: LD_INT 2
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 2
72574: PUSH
72575: LD_INT 4
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: LD_INT 2
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 4
72595: NEG
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 4
72606: NEG
72607: PUSH
72608: LD_INT 1
72610: NEG
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 3
72618: NEG
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 3
72629: NEG
72630: PUSH
72631: LD_INT 1
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 4
72640: NEG
72641: PUSH
72642: LD_INT 1
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 5
72651: NEG
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 5
72662: NEG
72663: PUSH
72664: LD_INT 1
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 5
72674: NEG
72675: PUSH
72676: LD_INT 2
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 3
72686: NEG
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: ST_TO_ADDR
// end ; end ;
72742: GO 72745
72744: POP
// case btype of b_depot , b_warehouse :
72745: LD_VAR 0 1
72749: PUSH
72750: LD_INT 0
72752: DOUBLE
72753: EQUAL
72754: IFTRUE 72764
72756: LD_INT 1
72758: DOUBLE
72759: EQUAL
72760: IFTRUE 72764
72762: GO 72965
72764: POP
// case nation of nation_american :
72765: LD_VAR 0 5
72769: PUSH
72770: LD_INT 1
72772: DOUBLE
72773: EQUAL
72774: IFTRUE 72778
72776: GO 72834
72778: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72779: LD_ADDR_VAR 0 9
72783: PUSH
72784: LD_VAR 0 11
72788: PUSH
72789: LD_VAR 0 12
72793: PUSH
72794: LD_VAR 0 13
72798: PUSH
72799: LD_VAR 0 14
72803: PUSH
72804: LD_VAR 0 15
72808: PUSH
72809: LD_VAR 0 16
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: PUSH
72822: LD_VAR 0 4
72826: PUSH
72827: LD_INT 1
72829: PLUS
72830: ARRAY
72831: ST_TO_ADDR
72832: GO 72963
72834: LD_INT 2
72836: DOUBLE
72837: EQUAL
72838: IFTRUE 72842
72840: GO 72898
72842: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72843: LD_ADDR_VAR 0 9
72847: PUSH
72848: LD_VAR 0 17
72852: PUSH
72853: LD_VAR 0 18
72857: PUSH
72858: LD_VAR 0 19
72862: PUSH
72863: LD_VAR 0 20
72867: PUSH
72868: LD_VAR 0 21
72872: PUSH
72873: LD_VAR 0 22
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: PUSH
72886: LD_VAR 0 4
72890: PUSH
72891: LD_INT 1
72893: PLUS
72894: ARRAY
72895: ST_TO_ADDR
72896: GO 72963
72898: LD_INT 3
72900: DOUBLE
72901: EQUAL
72902: IFTRUE 72906
72904: GO 72962
72906: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72907: LD_ADDR_VAR 0 9
72911: PUSH
72912: LD_VAR 0 23
72916: PUSH
72917: LD_VAR 0 24
72921: PUSH
72922: LD_VAR 0 25
72926: PUSH
72927: LD_VAR 0 26
72931: PUSH
72932: LD_VAR 0 27
72936: PUSH
72937: LD_VAR 0 28
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: PUSH
72950: LD_VAR 0 4
72954: PUSH
72955: LD_INT 1
72957: PLUS
72958: ARRAY
72959: ST_TO_ADDR
72960: GO 72963
72962: POP
72963: GO 73518
72965: LD_INT 2
72967: DOUBLE
72968: EQUAL
72969: IFTRUE 72979
72971: LD_INT 3
72973: DOUBLE
72974: EQUAL
72975: IFTRUE 72979
72977: GO 73035
72979: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72980: LD_ADDR_VAR 0 9
72984: PUSH
72985: LD_VAR 0 29
72989: PUSH
72990: LD_VAR 0 30
72994: PUSH
72995: LD_VAR 0 31
72999: PUSH
73000: LD_VAR 0 32
73004: PUSH
73005: LD_VAR 0 33
73009: PUSH
73010: LD_VAR 0 34
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: PUSH
73023: LD_VAR 0 4
73027: PUSH
73028: LD_INT 1
73030: PLUS
73031: ARRAY
73032: ST_TO_ADDR
73033: GO 73518
73035: LD_INT 16
73037: DOUBLE
73038: EQUAL
73039: IFTRUE 73097
73041: LD_INT 17
73043: DOUBLE
73044: EQUAL
73045: IFTRUE 73097
73047: LD_INT 18
73049: DOUBLE
73050: EQUAL
73051: IFTRUE 73097
73053: LD_INT 19
73055: DOUBLE
73056: EQUAL
73057: IFTRUE 73097
73059: LD_INT 22
73061: DOUBLE
73062: EQUAL
73063: IFTRUE 73097
73065: LD_INT 20
73067: DOUBLE
73068: EQUAL
73069: IFTRUE 73097
73071: LD_INT 21
73073: DOUBLE
73074: EQUAL
73075: IFTRUE 73097
73077: LD_INT 23
73079: DOUBLE
73080: EQUAL
73081: IFTRUE 73097
73083: LD_INT 24
73085: DOUBLE
73086: EQUAL
73087: IFTRUE 73097
73089: LD_INT 25
73091: DOUBLE
73092: EQUAL
73093: IFTRUE 73097
73095: GO 73153
73097: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73098: LD_ADDR_VAR 0 9
73102: PUSH
73103: LD_VAR 0 35
73107: PUSH
73108: LD_VAR 0 36
73112: PUSH
73113: LD_VAR 0 37
73117: PUSH
73118: LD_VAR 0 38
73122: PUSH
73123: LD_VAR 0 39
73127: PUSH
73128: LD_VAR 0 40
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: PUSH
73141: LD_VAR 0 4
73145: PUSH
73146: LD_INT 1
73148: PLUS
73149: ARRAY
73150: ST_TO_ADDR
73151: GO 73518
73153: LD_INT 6
73155: DOUBLE
73156: EQUAL
73157: IFTRUE 73209
73159: LD_INT 7
73161: DOUBLE
73162: EQUAL
73163: IFTRUE 73209
73165: LD_INT 8
73167: DOUBLE
73168: EQUAL
73169: IFTRUE 73209
73171: LD_INT 13
73173: DOUBLE
73174: EQUAL
73175: IFTRUE 73209
73177: LD_INT 12
73179: DOUBLE
73180: EQUAL
73181: IFTRUE 73209
73183: LD_INT 15
73185: DOUBLE
73186: EQUAL
73187: IFTRUE 73209
73189: LD_INT 11
73191: DOUBLE
73192: EQUAL
73193: IFTRUE 73209
73195: LD_INT 14
73197: DOUBLE
73198: EQUAL
73199: IFTRUE 73209
73201: LD_INT 10
73203: DOUBLE
73204: EQUAL
73205: IFTRUE 73209
73207: GO 73265
73209: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73210: LD_ADDR_VAR 0 9
73214: PUSH
73215: LD_VAR 0 41
73219: PUSH
73220: LD_VAR 0 42
73224: PUSH
73225: LD_VAR 0 43
73229: PUSH
73230: LD_VAR 0 44
73234: PUSH
73235: LD_VAR 0 45
73239: PUSH
73240: LD_VAR 0 46
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: PUSH
73253: LD_VAR 0 4
73257: PUSH
73258: LD_INT 1
73260: PLUS
73261: ARRAY
73262: ST_TO_ADDR
73263: GO 73518
73265: LD_INT 36
73267: DOUBLE
73268: EQUAL
73269: IFTRUE 73273
73271: GO 73329
73273: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73274: LD_ADDR_VAR 0 9
73278: PUSH
73279: LD_VAR 0 47
73283: PUSH
73284: LD_VAR 0 48
73288: PUSH
73289: LD_VAR 0 49
73293: PUSH
73294: LD_VAR 0 50
73298: PUSH
73299: LD_VAR 0 51
73303: PUSH
73304: LD_VAR 0 52
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: PUSH
73317: LD_VAR 0 4
73321: PUSH
73322: LD_INT 1
73324: PLUS
73325: ARRAY
73326: ST_TO_ADDR
73327: GO 73518
73329: LD_INT 4
73331: DOUBLE
73332: EQUAL
73333: IFTRUE 73355
73335: LD_INT 5
73337: DOUBLE
73338: EQUAL
73339: IFTRUE 73355
73341: LD_INT 34
73343: DOUBLE
73344: EQUAL
73345: IFTRUE 73355
73347: LD_INT 37
73349: DOUBLE
73350: EQUAL
73351: IFTRUE 73355
73353: GO 73411
73355: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73356: LD_ADDR_VAR 0 9
73360: PUSH
73361: LD_VAR 0 53
73365: PUSH
73366: LD_VAR 0 54
73370: PUSH
73371: LD_VAR 0 55
73375: PUSH
73376: LD_VAR 0 56
73380: PUSH
73381: LD_VAR 0 57
73385: PUSH
73386: LD_VAR 0 58
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: LIST
73397: LIST
73398: PUSH
73399: LD_VAR 0 4
73403: PUSH
73404: LD_INT 1
73406: PLUS
73407: ARRAY
73408: ST_TO_ADDR
73409: GO 73518
73411: LD_INT 31
73413: DOUBLE
73414: EQUAL
73415: IFTRUE 73461
73417: LD_INT 32
73419: DOUBLE
73420: EQUAL
73421: IFTRUE 73461
73423: LD_INT 33
73425: DOUBLE
73426: EQUAL
73427: IFTRUE 73461
73429: LD_INT 27
73431: DOUBLE
73432: EQUAL
73433: IFTRUE 73461
73435: LD_INT 26
73437: DOUBLE
73438: EQUAL
73439: IFTRUE 73461
73441: LD_INT 28
73443: DOUBLE
73444: EQUAL
73445: IFTRUE 73461
73447: LD_INT 29
73449: DOUBLE
73450: EQUAL
73451: IFTRUE 73461
73453: LD_INT 30
73455: DOUBLE
73456: EQUAL
73457: IFTRUE 73461
73459: GO 73517
73461: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73462: LD_ADDR_VAR 0 9
73466: PUSH
73467: LD_VAR 0 59
73471: PUSH
73472: LD_VAR 0 60
73476: PUSH
73477: LD_VAR 0 61
73481: PUSH
73482: LD_VAR 0 62
73486: PUSH
73487: LD_VAR 0 63
73491: PUSH
73492: LD_VAR 0 64
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: LD_VAR 0 4
73509: PUSH
73510: LD_INT 1
73512: PLUS
73513: ARRAY
73514: ST_TO_ADDR
73515: GO 73518
73517: POP
// temp_list2 = [ ] ;
73518: LD_ADDR_VAR 0 10
73522: PUSH
73523: EMPTY
73524: ST_TO_ADDR
// for i in temp_list do
73525: LD_ADDR_VAR 0 8
73529: PUSH
73530: LD_VAR 0 9
73534: PUSH
73535: FOR_IN
73536: IFFALSE 73588
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73538: LD_ADDR_VAR 0 10
73542: PUSH
73543: LD_VAR 0 10
73547: PUSH
73548: LD_VAR 0 8
73552: PUSH
73553: LD_INT 1
73555: ARRAY
73556: PUSH
73557: LD_VAR 0 2
73561: PLUS
73562: PUSH
73563: LD_VAR 0 8
73567: PUSH
73568: LD_INT 2
73570: ARRAY
73571: PUSH
73572: LD_VAR 0 3
73576: PLUS
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: EMPTY
73583: LIST
73584: ADD
73585: ST_TO_ADDR
73586: GO 73535
73588: POP
73589: POP
// result = temp_list2 ;
73590: LD_ADDR_VAR 0 7
73594: PUSH
73595: LD_VAR 0 10
73599: ST_TO_ADDR
// end ;
73600: LD_VAR 0 7
73604: RET
// export function EnemyInRange ( unit , dist ) ; begin
73605: LD_INT 0
73607: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73608: LD_ADDR_VAR 0 3
73612: PUSH
73613: LD_VAR 0 1
73617: PPUSH
73618: CALL_OW 255
73622: PPUSH
73623: LD_VAR 0 1
73627: PPUSH
73628: CALL_OW 250
73632: PPUSH
73633: LD_VAR 0 1
73637: PPUSH
73638: CALL_OW 251
73642: PPUSH
73643: LD_VAR 0 2
73647: PPUSH
73648: CALL 47001 0 4
73652: PUSH
73653: LD_INT 4
73655: ARRAY
73656: ST_TO_ADDR
// end ;
73657: LD_VAR 0 3
73661: RET
// export function PlayerSeeMe ( unit ) ; begin
73662: LD_INT 0
73664: PPUSH
// result := See ( your_side , unit ) ;
73665: LD_ADDR_VAR 0 2
73669: PUSH
73670: LD_OWVAR 2
73674: PPUSH
73675: LD_VAR 0 1
73679: PPUSH
73680: CALL_OW 292
73684: ST_TO_ADDR
// end ;
73685: LD_VAR 0 2
73689: RET
// export function ReverseDir ( unit ) ; begin
73690: LD_INT 0
73692: PPUSH
// if not unit then
73693: LD_VAR 0 1
73697: NOT
73698: IFFALSE 73702
// exit ;
73700: GO 73725
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73702: LD_ADDR_VAR 0 2
73706: PUSH
73707: LD_VAR 0 1
73711: PPUSH
73712: CALL_OW 254
73716: PUSH
73717: LD_INT 3
73719: PLUS
73720: PUSH
73721: LD_INT 6
73723: MOD
73724: ST_TO_ADDR
// end ;
73725: LD_VAR 0 2
73729: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73730: LD_INT 0
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
73736: PPUSH
// if not hexes then
73737: LD_VAR 0 2
73741: NOT
73742: IFFALSE 73746
// exit ;
73744: GO 73894
// dist := 9999 ;
73746: LD_ADDR_VAR 0 5
73750: PUSH
73751: LD_INT 9999
73753: ST_TO_ADDR
// for i = 1 to hexes do
73754: LD_ADDR_VAR 0 4
73758: PUSH
73759: DOUBLE
73760: LD_INT 1
73762: DEC
73763: ST_TO_ADDR
73764: LD_VAR 0 2
73768: PUSH
73769: FOR_TO
73770: IFFALSE 73882
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73772: LD_VAR 0 1
73776: PPUSH
73777: LD_VAR 0 2
73781: PUSH
73782: LD_VAR 0 4
73786: ARRAY
73787: PUSH
73788: LD_INT 1
73790: ARRAY
73791: PPUSH
73792: LD_VAR 0 2
73796: PUSH
73797: LD_VAR 0 4
73801: ARRAY
73802: PUSH
73803: LD_INT 2
73805: ARRAY
73806: PPUSH
73807: CALL_OW 297
73811: PUSH
73812: LD_VAR 0 5
73816: LESS
73817: IFFALSE 73880
// begin hex := hexes [ i ] ;
73819: LD_ADDR_VAR 0 7
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_VAR 0 4
73833: ARRAY
73834: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73835: LD_ADDR_VAR 0 5
73839: PUSH
73840: LD_VAR 0 1
73844: PPUSH
73845: LD_VAR 0 2
73849: PUSH
73850: LD_VAR 0 4
73854: ARRAY
73855: PUSH
73856: LD_INT 1
73858: ARRAY
73859: PPUSH
73860: LD_VAR 0 2
73864: PUSH
73865: LD_VAR 0 4
73869: ARRAY
73870: PUSH
73871: LD_INT 2
73873: ARRAY
73874: PPUSH
73875: CALL_OW 297
73879: ST_TO_ADDR
// end ; end ;
73880: GO 73769
73882: POP
73883: POP
// result := hex ;
73884: LD_ADDR_VAR 0 3
73888: PUSH
73889: LD_VAR 0 7
73893: ST_TO_ADDR
// end ;
73894: LD_VAR 0 3
73898: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73899: LD_INT 0
73901: PPUSH
73902: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73903: LD_VAR 0 1
73907: NOT
73908: PUSH
73909: LD_VAR 0 1
73913: PUSH
73914: LD_INT 21
73916: PUSH
73917: LD_INT 2
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_INT 23
73926: PUSH
73927: LD_INT 2
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PPUSH
73938: CALL_OW 69
73942: IN
73943: NOT
73944: OR
73945: IFFALSE 73949
// exit ;
73947: GO 73996
// for i = 1 to 3 do
73949: LD_ADDR_VAR 0 3
73953: PUSH
73954: DOUBLE
73955: LD_INT 1
73957: DEC
73958: ST_TO_ADDR
73959: LD_INT 3
73961: PUSH
73962: FOR_TO
73963: IFFALSE 73994
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73965: LD_VAR 0 1
73969: PPUSH
73970: CALL_OW 250
73974: PPUSH
73975: LD_VAR 0 1
73979: PPUSH
73980: CALL_OW 251
73984: PPUSH
73985: LD_INT 1
73987: PPUSH
73988: CALL_OW 453
73992: GO 73962
73994: POP
73995: POP
// end ;
73996: LD_VAR 0 2
74000: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74001: LD_INT 0
74003: PPUSH
74004: PPUSH
74005: PPUSH
74006: PPUSH
74007: PPUSH
74008: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74009: LD_VAR 0 1
74013: NOT
74014: PUSH
74015: LD_VAR 0 2
74019: NOT
74020: OR
74021: PUSH
74022: LD_VAR 0 1
74026: PPUSH
74027: CALL_OW 314
74031: OR
74032: IFFALSE 74036
// exit ;
74034: GO 74477
// x := GetX ( enemy_unit ) ;
74036: LD_ADDR_VAR 0 7
74040: PUSH
74041: LD_VAR 0 2
74045: PPUSH
74046: CALL_OW 250
74050: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74051: LD_ADDR_VAR 0 8
74055: PUSH
74056: LD_VAR 0 2
74060: PPUSH
74061: CALL_OW 251
74065: ST_TO_ADDR
// if not x or not y then
74066: LD_VAR 0 7
74070: NOT
74071: PUSH
74072: LD_VAR 0 8
74076: NOT
74077: OR
74078: IFFALSE 74082
// exit ;
74080: GO 74477
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74082: LD_ADDR_VAR 0 6
74086: PUSH
74087: LD_VAR 0 7
74091: PPUSH
74092: LD_INT 0
74094: PPUSH
74095: LD_INT 4
74097: PPUSH
74098: CALL_OW 272
74102: PUSH
74103: LD_VAR 0 8
74107: PPUSH
74108: LD_INT 0
74110: PPUSH
74111: LD_INT 4
74113: PPUSH
74114: CALL_OW 273
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_VAR 0 7
74127: PPUSH
74128: LD_INT 1
74130: PPUSH
74131: LD_INT 4
74133: PPUSH
74134: CALL_OW 272
74138: PUSH
74139: LD_VAR 0 8
74143: PPUSH
74144: LD_INT 1
74146: PPUSH
74147: LD_INT 4
74149: PPUSH
74150: CALL_OW 273
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_VAR 0 7
74163: PPUSH
74164: LD_INT 2
74166: PPUSH
74167: LD_INT 4
74169: PPUSH
74170: CALL_OW 272
74174: PUSH
74175: LD_VAR 0 8
74179: PPUSH
74180: LD_INT 2
74182: PPUSH
74183: LD_INT 4
74185: PPUSH
74186: CALL_OW 273
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_VAR 0 7
74199: PPUSH
74200: LD_INT 3
74202: PPUSH
74203: LD_INT 4
74205: PPUSH
74206: CALL_OW 272
74210: PUSH
74211: LD_VAR 0 8
74215: PPUSH
74216: LD_INT 3
74218: PPUSH
74219: LD_INT 4
74221: PPUSH
74222: CALL_OW 273
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_VAR 0 7
74235: PPUSH
74236: LD_INT 4
74238: PPUSH
74239: LD_INT 4
74241: PPUSH
74242: CALL_OW 272
74246: PUSH
74247: LD_VAR 0 8
74251: PPUSH
74252: LD_INT 4
74254: PPUSH
74255: LD_INT 4
74257: PPUSH
74258: CALL_OW 273
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_VAR 0 7
74271: PPUSH
74272: LD_INT 5
74274: PPUSH
74275: LD_INT 4
74277: PPUSH
74278: CALL_OW 272
74282: PUSH
74283: LD_VAR 0 8
74287: PPUSH
74288: LD_INT 5
74290: PPUSH
74291: LD_INT 4
74293: PPUSH
74294: CALL_OW 273
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: ST_TO_ADDR
// for i = tmp downto 1 do
74311: LD_ADDR_VAR 0 4
74315: PUSH
74316: DOUBLE
74317: LD_VAR 0 6
74321: INC
74322: ST_TO_ADDR
74323: LD_INT 1
74325: PUSH
74326: FOR_DOWNTO
74327: IFFALSE 74428
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74329: LD_VAR 0 6
74333: PUSH
74334: LD_VAR 0 4
74338: ARRAY
74339: PUSH
74340: LD_INT 1
74342: ARRAY
74343: PPUSH
74344: LD_VAR 0 6
74348: PUSH
74349: LD_VAR 0 4
74353: ARRAY
74354: PUSH
74355: LD_INT 2
74357: ARRAY
74358: PPUSH
74359: CALL_OW 488
74363: NOT
74364: PUSH
74365: LD_VAR 0 6
74369: PUSH
74370: LD_VAR 0 4
74374: ARRAY
74375: PUSH
74376: LD_INT 1
74378: ARRAY
74379: PPUSH
74380: LD_VAR 0 6
74384: PUSH
74385: LD_VAR 0 4
74389: ARRAY
74390: PUSH
74391: LD_INT 2
74393: ARRAY
74394: PPUSH
74395: CALL_OW 428
74399: PUSH
74400: LD_INT 0
74402: NONEQUAL
74403: OR
74404: IFFALSE 74426
// tmp := Delete ( tmp , i ) ;
74406: LD_ADDR_VAR 0 6
74410: PUSH
74411: LD_VAR 0 6
74415: PPUSH
74416: LD_VAR 0 4
74420: PPUSH
74421: CALL_OW 3
74425: ST_TO_ADDR
74426: GO 74326
74428: POP
74429: POP
// j := GetClosestHex ( unit , tmp ) ;
74430: LD_ADDR_VAR 0 5
74434: PUSH
74435: LD_VAR 0 1
74439: PPUSH
74440: LD_VAR 0 6
74444: PPUSH
74445: CALL 73730 0 2
74449: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74450: LD_VAR 0 1
74454: PPUSH
74455: LD_VAR 0 5
74459: PUSH
74460: LD_INT 1
74462: ARRAY
74463: PPUSH
74464: LD_VAR 0 5
74468: PUSH
74469: LD_INT 2
74471: ARRAY
74472: PPUSH
74473: CALL_OW 111
// end ;
74477: LD_VAR 0 3
74481: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74482: LD_INT 0
74484: PPUSH
74485: PPUSH
74486: PPUSH
// uc_side = 0 ;
74487: LD_ADDR_OWVAR 20
74491: PUSH
74492: LD_INT 0
74494: ST_TO_ADDR
// uc_nation = 0 ;
74495: LD_ADDR_OWVAR 21
74499: PUSH
74500: LD_INT 0
74502: ST_TO_ADDR
// InitHc_All ( ) ;
74503: CALL_OW 584
// InitVc ;
74507: CALL_OW 20
// if mastodonts then
74511: LD_VAR 0 6
74515: IFFALSE 74582
// for i = 1 to mastodonts do
74517: LD_ADDR_VAR 0 11
74521: PUSH
74522: DOUBLE
74523: LD_INT 1
74525: DEC
74526: ST_TO_ADDR
74527: LD_VAR 0 6
74531: PUSH
74532: FOR_TO
74533: IFFALSE 74580
// begin vc_chassis := 31 ;
74535: LD_ADDR_OWVAR 37
74539: PUSH
74540: LD_INT 31
74542: ST_TO_ADDR
// vc_control := control_rider ;
74543: LD_ADDR_OWVAR 38
74547: PUSH
74548: LD_INT 4
74550: ST_TO_ADDR
// animal := CreateVehicle ;
74551: LD_ADDR_VAR 0 12
74555: PUSH
74556: CALL_OW 45
74560: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74561: LD_VAR 0 12
74565: PPUSH
74566: LD_VAR 0 8
74570: PPUSH
74571: LD_INT 0
74573: PPUSH
74574: CALL 76770 0 3
// end ;
74578: GO 74532
74580: POP
74581: POP
// if horses then
74582: LD_VAR 0 5
74586: IFFALSE 74653
// for i = 1 to horses do
74588: LD_ADDR_VAR 0 11
74592: PUSH
74593: DOUBLE
74594: LD_INT 1
74596: DEC
74597: ST_TO_ADDR
74598: LD_VAR 0 5
74602: PUSH
74603: FOR_TO
74604: IFFALSE 74651
// begin hc_class := 21 ;
74606: LD_ADDR_OWVAR 28
74610: PUSH
74611: LD_INT 21
74613: ST_TO_ADDR
// hc_gallery :=  ;
74614: LD_ADDR_OWVAR 33
74618: PUSH
74619: LD_STRING 
74621: ST_TO_ADDR
// animal := CreateHuman ;
74622: LD_ADDR_VAR 0 12
74626: PUSH
74627: CALL_OW 44
74631: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74632: LD_VAR 0 12
74636: PPUSH
74637: LD_VAR 0 8
74641: PPUSH
74642: LD_INT 0
74644: PPUSH
74645: CALL 76770 0 3
// end ;
74649: GO 74603
74651: POP
74652: POP
// if birds then
74653: LD_VAR 0 1
74657: IFFALSE 74724
// for i = 1 to birds do
74659: LD_ADDR_VAR 0 11
74663: PUSH
74664: DOUBLE
74665: LD_INT 1
74667: DEC
74668: ST_TO_ADDR
74669: LD_VAR 0 1
74673: PUSH
74674: FOR_TO
74675: IFFALSE 74722
// begin hc_class = 18 ;
74677: LD_ADDR_OWVAR 28
74681: PUSH
74682: LD_INT 18
74684: ST_TO_ADDR
// hc_gallery =  ;
74685: LD_ADDR_OWVAR 33
74689: PUSH
74690: LD_STRING 
74692: ST_TO_ADDR
// animal := CreateHuman ;
74693: LD_ADDR_VAR 0 12
74697: PUSH
74698: CALL_OW 44
74702: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74703: LD_VAR 0 12
74707: PPUSH
74708: LD_VAR 0 8
74712: PPUSH
74713: LD_INT 0
74715: PPUSH
74716: CALL 76770 0 3
// end ;
74720: GO 74674
74722: POP
74723: POP
// if tigers then
74724: LD_VAR 0 2
74728: IFFALSE 74812
// for i = 1 to tigers do
74730: LD_ADDR_VAR 0 11
74734: PUSH
74735: DOUBLE
74736: LD_INT 1
74738: DEC
74739: ST_TO_ADDR
74740: LD_VAR 0 2
74744: PUSH
74745: FOR_TO
74746: IFFALSE 74810
// begin hc_class = class_tiger ;
74748: LD_ADDR_OWVAR 28
74752: PUSH
74753: LD_INT 14
74755: ST_TO_ADDR
// hc_gallery =  ;
74756: LD_ADDR_OWVAR 33
74760: PUSH
74761: LD_STRING 
74763: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74764: LD_ADDR_OWVAR 35
74768: PUSH
74769: LD_INT 7
74771: NEG
74772: PPUSH
74773: LD_INT 7
74775: PPUSH
74776: CALL_OW 12
74780: ST_TO_ADDR
// animal := CreateHuman ;
74781: LD_ADDR_VAR 0 12
74785: PUSH
74786: CALL_OW 44
74790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74791: LD_VAR 0 12
74795: PPUSH
74796: LD_VAR 0 8
74800: PPUSH
74801: LD_INT 0
74803: PPUSH
74804: CALL 76770 0 3
// end ;
74808: GO 74745
74810: POP
74811: POP
// if apemans then
74812: LD_VAR 0 3
74816: IFFALSE 74939
// for i = 1 to apemans do
74818: LD_ADDR_VAR 0 11
74822: PUSH
74823: DOUBLE
74824: LD_INT 1
74826: DEC
74827: ST_TO_ADDR
74828: LD_VAR 0 3
74832: PUSH
74833: FOR_TO
74834: IFFALSE 74937
// begin hc_class = class_apeman ;
74836: LD_ADDR_OWVAR 28
74840: PUSH
74841: LD_INT 12
74843: ST_TO_ADDR
// hc_gallery =  ;
74844: LD_ADDR_OWVAR 33
74848: PUSH
74849: LD_STRING 
74851: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74852: LD_ADDR_OWVAR 35
74856: PUSH
74857: LD_INT 2
74859: NEG
74860: PPUSH
74861: LD_INT 2
74863: PPUSH
74864: CALL_OW 12
74868: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74869: LD_ADDR_OWVAR 31
74873: PUSH
74874: LD_INT 1
74876: PPUSH
74877: LD_INT 3
74879: PPUSH
74880: CALL_OW 12
74884: PUSH
74885: LD_INT 1
74887: PPUSH
74888: LD_INT 3
74890: PPUSH
74891: CALL_OW 12
74895: PUSH
74896: LD_INT 0
74898: PUSH
74899: LD_INT 0
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: ST_TO_ADDR
// animal := CreateHuman ;
74908: LD_ADDR_VAR 0 12
74912: PUSH
74913: CALL_OW 44
74917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74918: LD_VAR 0 12
74922: PPUSH
74923: LD_VAR 0 8
74927: PPUSH
74928: LD_INT 0
74930: PPUSH
74931: CALL 76770 0 3
// end ;
74935: GO 74833
74937: POP
74938: POP
// if enchidnas then
74939: LD_VAR 0 4
74943: IFFALSE 75010
// for i = 1 to enchidnas do
74945: LD_ADDR_VAR 0 11
74949: PUSH
74950: DOUBLE
74951: LD_INT 1
74953: DEC
74954: ST_TO_ADDR
74955: LD_VAR 0 4
74959: PUSH
74960: FOR_TO
74961: IFFALSE 75008
// begin hc_class = 13 ;
74963: LD_ADDR_OWVAR 28
74967: PUSH
74968: LD_INT 13
74970: ST_TO_ADDR
// hc_gallery =  ;
74971: LD_ADDR_OWVAR 33
74975: PUSH
74976: LD_STRING 
74978: ST_TO_ADDR
// animal := CreateHuman ;
74979: LD_ADDR_VAR 0 12
74983: PUSH
74984: CALL_OW 44
74988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74989: LD_VAR 0 12
74993: PPUSH
74994: LD_VAR 0 8
74998: PPUSH
74999: LD_INT 0
75001: PPUSH
75002: CALL 76770 0 3
// end ;
75006: GO 74960
75008: POP
75009: POP
// if fishes then
75010: LD_VAR 0 7
75014: IFFALSE 75081
// for i = 1 to fishes do
75016: LD_ADDR_VAR 0 11
75020: PUSH
75021: DOUBLE
75022: LD_INT 1
75024: DEC
75025: ST_TO_ADDR
75026: LD_VAR 0 7
75030: PUSH
75031: FOR_TO
75032: IFFALSE 75079
// begin hc_class = 20 ;
75034: LD_ADDR_OWVAR 28
75038: PUSH
75039: LD_INT 20
75041: ST_TO_ADDR
// hc_gallery =  ;
75042: LD_ADDR_OWVAR 33
75046: PUSH
75047: LD_STRING 
75049: ST_TO_ADDR
// animal := CreateHuman ;
75050: LD_ADDR_VAR 0 12
75054: PUSH
75055: CALL_OW 44
75059: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75060: LD_VAR 0 12
75064: PPUSH
75065: LD_VAR 0 9
75069: PPUSH
75070: LD_INT 0
75072: PPUSH
75073: CALL 76770 0 3
// end ;
75077: GO 75031
75079: POP
75080: POP
// end ;
75081: LD_VAR 0 10
75085: RET
// export function WantHeal ( sci , unit ) ; begin
75086: LD_INT 0
75088: PPUSH
// if GetTaskList ( sci ) > 0 then
75089: LD_VAR 0 1
75093: PPUSH
75094: CALL_OW 437
75098: PUSH
75099: LD_INT 0
75101: GREATER
75102: IFFALSE 75172
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75104: LD_VAR 0 1
75108: PPUSH
75109: CALL_OW 437
75113: PUSH
75114: LD_INT 1
75116: ARRAY
75117: PUSH
75118: LD_INT 1
75120: ARRAY
75121: PUSH
75122: LD_STRING l
75124: EQUAL
75125: PUSH
75126: LD_VAR 0 1
75130: PPUSH
75131: CALL_OW 437
75135: PUSH
75136: LD_INT 1
75138: ARRAY
75139: PUSH
75140: LD_INT 4
75142: ARRAY
75143: PUSH
75144: LD_VAR 0 2
75148: EQUAL
75149: AND
75150: IFFALSE 75162
// result := true else
75152: LD_ADDR_VAR 0 3
75156: PUSH
75157: LD_INT 1
75159: ST_TO_ADDR
75160: GO 75170
// result := false ;
75162: LD_ADDR_VAR 0 3
75166: PUSH
75167: LD_INT 0
75169: ST_TO_ADDR
// end else
75170: GO 75180
// result := false ;
75172: LD_ADDR_VAR 0 3
75176: PUSH
75177: LD_INT 0
75179: ST_TO_ADDR
// end ;
75180: LD_VAR 0 3
75184: RET
// export function HealTarget ( sci ) ; begin
75185: LD_INT 0
75187: PPUSH
// if not sci then
75188: LD_VAR 0 1
75192: NOT
75193: IFFALSE 75197
// exit ;
75195: GO 75262
// result := 0 ;
75197: LD_ADDR_VAR 0 2
75201: PUSH
75202: LD_INT 0
75204: ST_TO_ADDR
// if GetTaskList ( sci ) then
75205: LD_VAR 0 1
75209: PPUSH
75210: CALL_OW 437
75214: IFFALSE 75262
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75216: LD_VAR 0 1
75220: PPUSH
75221: CALL_OW 437
75225: PUSH
75226: LD_INT 1
75228: ARRAY
75229: PUSH
75230: LD_INT 1
75232: ARRAY
75233: PUSH
75234: LD_STRING l
75236: EQUAL
75237: IFFALSE 75262
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75239: LD_ADDR_VAR 0 2
75243: PUSH
75244: LD_VAR 0 1
75248: PPUSH
75249: CALL_OW 437
75253: PUSH
75254: LD_INT 1
75256: ARRAY
75257: PUSH
75258: LD_INT 4
75260: ARRAY
75261: ST_TO_ADDR
// end ;
75262: LD_VAR 0 2
75266: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75267: LD_INT 0
75269: PPUSH
75270: PPUSH
75271: PPUSH
75272: PPUSH
// if not base_units then
75273: LD_VAR 0 1
75277: NOT
75278: IFFALSE 75282
// exit ;
75280: GO 75369
// result := false ;
75282: LD_ADDR_VAR 0 2
75286: PUSH
75287: LD_INT 0
75289: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75290: LD_ADDR_VAR 0 5
75294: PUSH
75295: LD_VAR 0 1
75299: PPUSH
75300: LD_INT 21
75302: PUSH
75303: LD_INT 3
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PPUSH
75310: CALL_OW 72
75314: ST_TO_ADDR
// if not tmp then
75315: LD_VAR 0 5
75319: NOT
75320: IFFALSE 75324
// exit ;
75322: GO 75369
// for i in tmp do
75324: LD_ADDR_VAR 0 3
75328: PUSH
75329: LD_VAR 0 5
75333: PUSH
75334: FOR_IN
75335: IFFALSE 75367
// begin result := EnemyInRange ( i , 22 ) ;
75337: LD_ADDR_VAR 0 2
75341: PUSH
75342: LD_VAR 0 3
75346: PPUSH
75347: LD_INT 22
75349: PPUSH
75350: CALL 73605 0 2
75354: ST_TO_ADDR
// if result then
75355: LD_VAR 0 2
75359: IFFALSE 75365
// exit ;
75361: POP
75362: POP
75363: GO 75369
// end ;
75365: GO 75334
75367: POP
75368: POP
// end ;
75369: LD_VAR 0 2
75373: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75374: LD_INT 0
75376: PPUSH
75377: PPUSH
// if not units then
75378: LD_VAR 0 1
75382: NOT
75383: IFFALSE 75387
// exit ;
75385: GO 75457
// result := [ ] ;
75387: LD_ADDR_VAR 0 3
75391: PUSH
75392: EMPTY
75393: ST_TO_ADDR
// for i in units do
75394: LD_ADDR_VAR 0 4
75398: PUSH
75399: LD_VAR 0 1
75403: PUSH
75404: FOR_IN
75405: IFFALSE 75455
// if GetTag ( i ) = tag then
75407: LD_VAR 0 4
75411: PPUSH
75412: CALL_OW 110
75416: PUSH
75417: LD_VAR 0 2
75421: EQUAL
75422: IFFALSE 75453
// result := Replace ( result , result + 1 , i ) ;
75424: LD_ADDR_VAR 0 3
75428: PUSH
75429: LD_VAR 0 3
75433: PPUSH
75434: LD_VAR 0 3
75438: PUSH
75439: LD_INT 1
75441: PLUS
75442: PPUSH
75443: LD_VAR 0 4
75447: PPUSH
75448: CALL_OW 1
75452: ST_TO_ADDR
75453: GO 75404
75455: POP
75456: POP
// end ;
75457: LD_VAR 0 3
75461: RET
// export function IsDriver ( un ) ; begin
75462: LD_INT 0
75464: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75465: LD_ADDR_VAR 0 2
75469: PUSH
75470: LD_VAR 0 1
75474: PUSH
75475: LD_INT 55
75477: PUSH
75478: EMPTY
75479: LIST
75480: PPUSH
75481: CALL_OW 69
75485: IN
75486: ST_TO_ADDR
// end ;
75487: LD_VAR 0 2
75491: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75492: LD_INT 0
75494: PPUSH
75495: PPUSH
// list := [ ] ;
75496: LD_ADDR_VAR 0 5
75500: PUSH
75501: EMPTY
75502: ST_TO_ADDR
// case d of 0 :
75503: LD_VAR 0 3
75507: PUSH
75508: LD_INT 0
75510: DOUBLE
75511: EQUAL
75512: IFTRUE 75516
75514: GO 75649
75516: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75517: LD_ADDR_VAR 0 5
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_INT 4
75529: MINUS
75530: PUSH
75531: LD_VAR 0 2
75535: PUSH
75536: LD_INT 4
75538: MINUS
75539: PUSH
75540: LD_INT 2
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_VAR 0 1
75552: PUSH
75553: LD_INT 3
75555: MINUS
75556: PUSH
75557: LD_VAR 0 2
75561: PUSH
75562: LD_INT 1
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: LD_VAR 0 1
75574: PUSH
75575: LD_INT 4
75577: PLUS
75578: PUSH
75579: LD_VAR 0 2
75583: PUSH
75584: LD_INT 4
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: LIST
75591: PUSH
75592: LD_VAR 0 1
75596: PUSH
75597: LD_INT 3
75599: PLUS
75600: PUSH
75601: LD_VAR 0 2
75605: PUSH
75606: LD_INT 3
75608: PLUS
75609: PUSH
75610: LD_INT 5
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: LIST
75617: PUSH
75618: LD_VAR 0 1
75622: PUSH
75623: LD_VAR 0 2
75627: PUSH
75628: LD_INT 4
75630: PLUS
75631: PUSH
75632: LD_INT 0
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: LIST
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: ST_TO_ADDR
// end ; 1 :
75647: GO 76347
75649: LD_INT 1
75651: DOUBLE
75652: EQUAL
75653: IFTRUE 75657
75655: GO 75790
75657: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75658: LD_ADDR_VAR 0 5
75662: PUSH
75663: LD_VAR 0 1
75667: PUSH
75668: LD_VAR 0 2
75672: PUSH
75673: LD_INT 4
75675: MINUS
75676: PUSH
75677: LD_INT 3
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: LIST
75684: PUSH
75685: LD_VAR 0 1
75689: PUSH
75690: LD_INT 3
75692: MINUS
75693: PUSH
75694: LD_VAR 0 2
75698: PUSH
75699: LD_INT 3
75701: MINUS
75702: PUSH
75703: LD_INT 2
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: LIST
75710: PUSH
75711: LD_VAR 0 1
75715: PUSH
75716: LD_INT 4
75718: MINUS
75719: PUSH
75720: LD_VAR 0 2
75724: PUSH
75725: LD_INT 1
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: LIST
75732: PUSH
75733: LD_VAR 0 1
75737: PUSH
75738: LD_VAR 0 2
75742: PUSH
75743: LD_INT 3
75745: PLUS
75746: PUSH
75747: LD_INT 0
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: LIST
75754: PUSH
75755: LD_VAR 0 1
75759: PUSH
75760: LD_INT 4
75762: PLUS
75763: PUSH
75764: LD_VAR 0 2
75768: PUSH
75769: LD_INT 4
75771: PLUS
75772: PUSH
75773: LD_INT 5
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: LIST
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: ST_TO_ADDR
// end ; 2 :
75788: GO 76347
75790: LD_INT 2
75792: DOUBLE
75793: EQUAL
75794: IFTRUE 75798
75796: GO 75927
75798: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75799: LD_ADDR_VAR 0 5
75803: PUSH
75804: LD_VAR 0 1
75808: PUSH
75809: LD_VAR 0 2
75813: PUSH
75814: LD_INT 3
75816: MINUS
75817: PUSH
75818: LD_INT 3
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: LIST
75825: PUSH
75826: LD_VAR 0 1
75830: PUSH
75831: LD_INT 4
75833: PLUS
75834: PUSH
75835: LD_VAR 0 2
75839: PUSH
75840: LD_INT 4
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: LIST
75847: PUSH
75848: LD_VAR 0 1
75852: PUSH
75853: LD_VAR 0 2
75857: PUSH
75858: LD_INT 4
75860: PLUS
75861: PUSH
75862: LD_INT 0
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: LIST
75869: PUSH
75870: LD_VAR 0 1
75874: PUSH
75875: LD_INT 3
75877: MINUS
75878: PUSH
75879: LD_VAR 0 2
75883: PUSH
75884: LD_INT 1
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: PUSH
75892: LD_VAR 0 1
75896: PUSH
75897: LD_INT 4
75899: MINUS
75900: PUSH
75901: LD_VAR 0 2
75905: PUSH
75906: LD_INT 4
75908: MINUS
75909: PUSH
75910: LD_INT 2
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: LIST
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: ST_TO_ADDR
// end ; 3 :
75925: GO 76347
75927: LD_INT 3
75929: DOUBLE
75930: EQUAL
75931: IFTRUE 75935
75933: GO 76068
75935: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75936: LD_ADDR_VAR 0 5
75940: PUSH
75941: LD_VAR 0 1
75945: PUSH
75946: LD_INT 3
75948: PLUS
75949: PUSH
75950: LD_VAR 0 2
75954: PUSH
75955: LD_INT 4
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: PUSH
75963: LD_VAR 0 1
75967: PUSH
75968: LD_INT 4
75970: PLUS
75971: PUSH
75972: LD_VAR 0 2
75976: PUSH
75977: LD_INT 4
75979: PLUS
75980: PUSH
75981: LD_INT 5
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: LIST
75988: PUSH
75989: LD_VAR 0 1
75993: PUSH
75994: LD_INT 4
75996: MINUS
75997: PUSH
75998: LD_VAR 0 2
76002: PUSH
76003: LD_INT 1
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: LIST
76010: PUSH
76011: LD_VAR 0 1
76015: PUSH
76016: LD_VAR 0 2
76020: PUSH
76021: LD_INT 4
76023: MINUS
76024: PUSH
76025: LD_INT 3
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: LIST
76032: PUSH
76033: LD_VAR 0 1
76037: PUSH
76038: LD_INT 3
76040: MINUS
76041: PUSH
76042: LD_VAR 0 2
76046: PUSH
76047: LD_INT 3
76049: MINUS
76050: PUSH
76051: LD_INT 2
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: LIST
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: ST_TO_ADDR
// end ; 4 :
76066: GO 76347
76068: LD_INT 4
76070: DOUBLE
76071: EQUAL
76072: IFTRUE 76076
76074: GO 76209
76076: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76077: LD_ADDR_VAR 0 5
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: LD_VAR 0 2
76091: PUSH
76092: LD_INT 4
76094: PLUS
76095: PUSH
76096: LD_INT 0
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: LIST
76103: PUSH
76104: LD_VAR 0 1
76108: PUSH
76109: LD_INT 3
76111: PLUS
76112: PUSH
76113: LD_VAR 0 2
76117: PUSH
76118: LD_INT 3
76120: PLUS
76121: PUSH
76122: LD_INT 5
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: LIST
76129: PUSH
76130: LD_VAR 0 1
76134: PUSH
76135: LD_INT 4
76137: PLUS
76138: PUSH
76139: LD_VAR 0 2
76143: PUSH
76144: LD_INT 4
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: LIST
76151: PUSH
76152: LD_VAR 0 1
76156: PUSH
76157: LD_VAR 0 2
76161: PUSH
76162: LD_INT 3
76164: MINUS
76165: PUSH
76166: LD_INT 3
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: LIST
76173: PUSH
76174: LD_VAR 0 1
76178: PUSH
76179: LD_INT 4
76181: MINUS
76182: PUSH
76183: LD_VAR 0 2
76187: PUSH
76188: LD_INT 4
76190: MINUS
76191: PUSH
76192: LD_INT 2
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: LIST
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: ST_TO_ADDR
// end ; 5 :
76207: GO 76347
76209: LD_INT 5
76211: DOUBLE
76212: EQUAL
76213: IFTRUE 76217
76215: GO 76346
76217: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76218: LD_ADDR_VAR 0 5
76222: PUSH
76223: LD_VAR 0 1
76227: PUSH
76228: LD_INT 4
76230: MINUS
76231: PUSH
76232: LD_VAR 0 2
76236: PUSH
76237: LD_INT 1
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: PUSH
76245: LD_VAR 0 1
76249: PUSH
76250: LD_VAR 0 2
76254: PUSH
76255: LD_INT 4
76257: MINUS
76258: PUSH
76259: LD_INT 3
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: LIST
76266: PUSH
76267: LD_VAR 0 1
76271: PUSH
76272: LD_INT 4
76274: PLUS
76275: PUSH
76276: LD_VAR 0 2
76280: PUSH
76281: LD_INT 4
76283: PLUS
76284: PUSH
76285: LD_INT 5
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: PUSH
76293: LD_VAR 0 1
76297: PUSH
76298: LD_INT 3
76300: PLUS
76301: PUSH
76302: LD_VAR 0 2
76306: PUSH
76307: LD_INT 4
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: LIST
76314: PUSH
76315: LD_VAR 0 1
76319: PUSH
76320: LD_VAR 0 2
76324: PUSH
76325: LD_INT 3
76327: PLUS
76328: PUSH
76329: LD_INT 0
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: LIST
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: ST_TO_ADDR
// end ; end ;
76344: GO 76347
76346: POP
// result := list ;
76347: LD_ADDR_VAR 0 4
76351: PUSH
76352: LD_VAR 0 5
76356: ST_TO_ADDR
// end ;
76357: LD_VAR 0 4
76361: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76362: LD_INT 0
76364: PPUSH
76365: PPUSH
76366: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76367: LD_VAR 0 1
76371: NOT
76372: PUSH
76373: LD_VAR 0 2
76377: PUSH
76378: LD_INT 1
76380: PUSH
76381: LD_INT 2
76383: PUSH
76384: LD_INT 3
76386: PUSH
76387: LD_INT 4
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: IN
76396: NOT
76397: OR
76398: IFFALSE 76402
// exit ;
76400: GO 76494
// tmp := [ ] ;
76402: LD_ADDR_VAR 0 5
76406: PUSH
76407: EMPTY
76408: ST_TO_ADDR
// for i in units do
76409: LD_ADDR_VAR 0 4
76413: PUSH
76414: LD_VAR 0 1
76418: PUSH
76419: FOR_IN
76420: IFFALSE 76463
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76422: LD_ADDR_VAR 0 5
76426: PUSH
76427: LD_VAR 0 5
76431: PPUSH
76432: LD_VAR 0 5
76436: PUSH
76437: LD_INT 1
76439: PLUS
76440: PPUSH
76441: LD_VAR 0 4
76445: PPUSH
76446: LD_VAR 0 2
76450: PPUSH
76451: CALL_OW 259
76455: PPUSH
76456: CALL_OW 2
76460: ST_TO_ADDR
76461: GO 76419
76463: POP
76464: POP
// if not tmp then
76465: LD_VAR 0 5
76469: NOT
76470: IFFALSE 76474
// exit ;
76472: GO 76494
// result := SortListByListDesc ( units , tmp ) ;
76474: LD_ADDR_VAR 0 3
76478: PUSH
76479: LD_VAR 0 1
76483: PPUSH
76484: LD_VAR 0 5
76488: PPUSH
76489: CALL_OW 77
76493: ST_TO_ADDR
// end ;
76494: LD_VAR 0 3
76498: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76499: LD_INT 0
76501: PPUSH
76502: PPUSH
76503: PPUSH
// result := false ;
76504: LD_ADDR_VAR 0 3
76508: PUSH
76509: LD_INT 0
76511: ST_TO_ADDR
// x := GetX ( building ) ;
76512: LD_ADDR_VAR 0 4
76516: PUSH
76517: LD_VAR 0 2
76521: PPUSH
76522: CALL_OW 250
76526: ST_TO_ADDR
// y := GetY ( building ) ;
76527: LD_ADDR_VAR 0 5
76531: PUSH
76532: LD_VAR 0 2
76536: PPUSH
76537: CALL_OW 251
76541: ST_TO_ADDR
// if not building or not x or not y then
76542: LD_VAR 0 2
76546: NOT
76547: PUSH
76548: LD_VAR 0 4
76552: NOT
76553: OR
76554: PUSH
76555: LD_VAR 0 5
76559: NOT
76560: OR
76561: IFFALSE 76565
// exit ;
76563: GO 76657
// if GetTaskList ( unit ) then
76565: LD_VAR 0 1
76569: PPUSH
76570: CALL_OW 437
76574: IFFALSE 76657
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76576: LD_STRING e
76578: PUSH
76579: LD_VAR 0 1
76583: PPUSH
76584: CALL_OW 437
76588: PUSH
76589: LD_INT 1
76591: ARRAY
76592: PUSH
76593: LD_INT 1
76595: ARRAY
76596: EQUAL
76597: PUSH
76598: LD_VAR 0 4
76602: PUSH
76603: LD_VAR 0 1
76607: PPUSH
76608: CALL_OW 437
76612: PUSH
76613: LD_INT 1
76615: ARRAY
76616: PUSH
76617: LD_INT 2
76619: ARRAY
76620: EQUAL
76621: AND
76622: PUSH
76623: LD_VAR 0 5
76627: PUSH
76628: LD_VAR 0 1
76632: PPUSH
76633: CALL_OW 437
76637: PUSH
76638: LD_INT 1
76640: ARRAY
76641: PUSH
76642: LD_INT 3
76644: ARRAY
76645: EQUAL
76646: AND
76647: IFFALSE 76657
// result := true end ;
76649: LD_ADDR_VAR 0 3
76653: PUSH
76654: LD_INT 1
76656: ST_TO_ADDR
// end ;
76657: LD_VAR 0 3
76661: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76662: LD_INT 0
76664: PPUSH
// result := false ;
76665: LD_ADDR_VAR 0 4
76669: PUSH
76670: LD_INT 0
76672: ST_TO_ADDR
// if GetTaskList ( unit ) then
76673: LD_VAR 0 1
76677: PPUSH
76678: CALL_OW 437
76682: IFFALSE 76765
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76684: LD_STRING M
76686: PUSH
76687: LD_VAR 0 1
76691: PPUSH
76692: CALL_OW 437
76696: PUSH
76697: LD_INT 1
76699: ARRAY
76700: PUSH
76701: LD_INT 1
76703: ARRAY
76704: EQUAL
76705: PUSH
76706: LD_VAR 0 2
76710: PUSH
76711: LD_VAR 0 1
76715: PPUSH
76716: CALL_OW 437
76720: PUSH
76721: LD_INT 1
76723: ARRAY
76724: PUSH
76725: LD_INT 2
76727: ARRAY
76728: EQUAL
76729: AND
76730: PUSH
76731: LD_VAR 0 3
76735: PUSH
76736: LD_VAR 0 1
76740: PPUSH
76741: CALL_OW 437
76745: PUSH
76746: LD_INT 1
76748: ARRAY
76749: PUSH
76750: LD_INT 3
76752: ARRAY
76753: EQUAL
76754: AND
76755: IFFALSE 76765
// result := true ;
76757: LD_ADDR_VAR 0 4
76761: PUSH
76762: LD_INT 1
76764: ST_TO_ADDR
// end ; end ;
76765: LD_VAR 0 4
76769: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76770: LD_INT 0
76772: PPUSH
76773: PPUSH
76774: PPUSH
76775: PPUSH
// if not unit or not area then
76776: LD_VAR 0 1
76780: NOT
76781: PUSH
76782: LD_VAR 0 2
76786: NOT
76787: OR
76788: IFFALSE 76792
// exit ;
76790: GO 76956
// tmp := AreaToList ( area , i ) ;
76792: LD_ADDR_VAR 0 6
76796: PUSH
76797: LD_VAR 0 2
76801: PPUSH
76802: LD_VAR 0 5
76806: PPUSH
76807: CALL_OW 517
76811: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76812: LD_ADDR_VAR 0 5
76816: PUSH
76817: DOUBLE
76818: LD_INT 1
76820: DEC
76821: ST_TO_ADDR
76822: LD_VAR 0 6
76826: PUSH
76827: LD_INT 1
76829: ARRAY
76830: PUSH
76831: FOR_TO
76832: IFFALSE 76954
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76834: LD_ADDR_VAR 0 7
76838: PUSH
76839: LD_VAR 0 6
76843: PUSH
76844: LD_INT 1
76846: ARRAY
76847: PUSH
76848: LD_VAR 0 5
76852: ARRAY
76853: PUSH
76854: LD_VAR 0 6
76858: PUSH
76859: LD_INT 2
76861: ARRAY
76862: PUSH
76863: LD_VAR 0 5
76867: ARRAY
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76873: LD_VAR 0 7
76877: PUSH
76878: LD_INT 1
76880: ARRAY
76881: PPUSH
76882: LD_VAR 0 7
76886: PUSH
76887: LD_INT 2
76889: ARRAY
76890: PPUSH
76891: CALL_OW 428
76895: PUSH
76896: LD_INT 0
76898: EQUAL
76899: IFFALSE 76952
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76901: LD_VAR 0 1
76905: PPUSH
76906: LD_VAR 0 7
76910: PUSH
76911: LD_INT 1
76913: ARRAY
76914: PPUSH
76915: LD_VAR 0 7
76919: PUSH
76920: LD_INT 2
76922: ARRAY
76923: PPUSH
76924: LD_VAR 0 3
76928: PPUSH
76929: CALL_OW 48
// result := IsPlaced ( unit ) ;
76933: LD_ADDR_VAR 0 4
76937: PUSH
76938: LD_VAR 0 1
76942: PPUSH
76943: CALL_OW 305
76947: ST_TO_ADDR
// exit ;
76948: POP
76949: POP
76950: GO 76956
// end ; end ;
76952: GO 76831
76954: POP
76955: POP
// end ;
76956: LD_VAR 0 4
76960: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76961: LD_INT 0
76963: PPUSH
76964: PPUSH
76965: PPUSH
// if not side or side > 8 then
76966: LD_VAR 0 1
76970: NOT
76971: PUSH
76972: LD_VAR 0 1
76976: PUSH
76977: LD_INT 8
76979: GREATER
76980: OR
76981: IFFALSE 76985
// exit ;
76983: GO 77172
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76985: LD_ADDR_VAR 0 4
76989: PUSH
76990: LD_INT 22
76992: PUSH
76993: LD_VAR 0 1
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 21
77004: PUSH
77005: LD_INT 3
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PPUSH
77016: CALL_OW 69
77020: ST_TO_ADDR
// if not tmp then
77021: LD_VAR 0 4
77025: NOT
77026: IFFALSE 77030
// exit ;
77028: GO 77172
// enable_addtolog := true ;
77030: LD_ADDR_OWVAR 81
77034: PUSH
77035: LD_INT 1
77037: ST_TO_ADDR
// AddToLog ( [ ) ;
77038: LD_STRING [
77040: PPUSH
77041: CALL_OW 561
// for i in tmp do
77045: LD_ADDR_VAR 0 3
77049: PUSH
77050: LD_VAR 0 4
77054: PUSH
77055: FOR_IN
77056: IFFALSE 77163
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77058: LD_STRING [
77060: PUSH
77061: LD_VAR 0 3
77065: PPUSH
77066: CALL_OW 266
77070: STR
77071: PUSH
77072: LD_STRING , 
77074: STR
77075: PUSH
77076: LD_VAR 0 3
77080: PPUSH
77081: CALL_OW 250
77085: STR
77086: PUSH
77087: LD_STRING , 
77089: STR
77090: PUSH
77091: LD_VAR 0 3
77095: PPUSH
77096: CALL_OW 251
77100: STR
77101: PUSH
77102: LD_STRING , 
77104: STR
77105: PUSH
77106: LD_VAR 0 3
77110: PPUSH
77111: CALL_OW 254
77115: STR
77116: PUSH
77117: LD_STRING , 
77119: STR
77120: PUSH
77121: LD_VAR 0 3
77125: PPUSH
77126: LD_INT 1
77128: PPUSH
77129: CALL_OW 268
77133: STR
77134: PUSH
77135: LD_STRING , 
77137: STR
77138: PUSH
77139: LD_VAR 0 3
77143: PPUSH
77144: LD_INT 2
77146: PPUSH
77147: CALL_OW 268
77151: STR
77152: PUSH
77153: LD_STRING ],
77155: STR
77156: PPUSH
77157: CALL_OW 561
// end ;
77161: GO 77055
77163: POP
77164: POP
// AddToLog ( ]; ) ;
77165: LD_STRING ];
77167: PPUSH
77168: CALL_OW 561
// end ;
77172: LD_VAR 0 2
77176: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77177: LD_INT 0
77179: PPUSH
77180: PPUSH
77181: PPUSH
77182: PPUSH
77183: PPUSH
// if not area or not rate or not max then
77184: LD_VAR 0 1
77188: NOT
77189: PUSH
77190: LD_VAR 0 2
77194: NOT
77195: OR
77196: PUSH
77197: LD_VAR 0 4
77201: NOT
77202: OR
77203: IFFALSE 77207
// exit ;
77205: GO 77399
// while 1 do
77207: LD_INT 1
77209: IFFALSE 77399
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77211: LD_ADDR_VAR 0 9
77215: PUSH
77216: LD_VAR 0 1
77220: PPUSH
77221: LD_INT 1
77223: PPUSH
77224: CALL_OW 287
77228: PUSH
77229: LD_INT 10
77231: MUL
77232: ST_TO_ADDR
// r := rate / 10 ;
77233: LD_ADDR_VAR 0 7
77237: PUSH
77238: LD_VAR 0 2
77242: PUSH
77243: LD_INT 10
77245: DIVREAL
77246: ST_TO_ADDR
// time := 1 1$00 ;
77247: LD_ADDR_VAR 0 8
77251: PUSH
77252: LD_INT 2100
77254: ST_TO_ADDR
// if amount < min then
77255: LD_VAR 0 9
77259: PUSH
77260: LD_VAR 0 3
77264: LESS
77265: IFFALSE 77283
// r := r * 2 else
77267: LD_ADDR_VAR 0 7
77271: PUSH
77272: LD_VAR 0 7
77276: PUSH
77277: LD_INT 2
77279: MUL
77280: ST_TO_ADDR
77281: GO 77309
// if amount > max then
77283: LD_VAR 0 9
77287: PUSH
77288: LD_VAR 0 4
77292: GREATER
77293: IFFALSE 77309
// r := r / 2 ;
77295: LD_ADDR_VAR 0 7
77299: PUSH
77300: LD_VAR 0 7
77304: PUSH
77305: LD_INT 2
77307: DIVREAL
77308: ST_TO_ADDR
// time := time / r ;
77309: LD_ADDR_VAR 0 8
77313: PUSH
77314: LD_VAR 0 8
77318: PUSH
77319: LD_VAR 0 7
77323: DIVREAL
77324: ST_TO_ADDR
// if time < 0 then
77325: LD_VAR 0 8
77329: PUSH
77330: LD_INT 0
77332: LESS
77333: IFFALSE 77350
// time := time * - 1 ;
77335: LD_ADDR_VAR 0 8
77339: PUSH
77340: LD_VAR 0 8
77344: PUSH
77345: LD_INT 1
77347: NEG
77348: MUL
77349: ST_TO_ADDR
// wait ( time ) ;
77350: LD_VAR 0 8
77354: PPUSH
77355: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77359: LD_INT 35
77361: PPUSH
77362: LD_INT 875
77364: PPUSH
77365: CALL_OW 12
77369: PPUSH
77370: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77374: LD_INT 1
77376: PPUSH
77377: LD_INT 5
77379: PPUSH
77380: CALL_OW 12
77384: PPUSH
77385: LD_VAR 0 1
77389: PPUSH
77390: LD_INT 1
77392: PPUSH
77393: CALL_OW 55
// end ;
77397: GO 77207
// end ;
77399: LD_VAR 0 5
77403: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77404: LD_INT 0
77406: PPUSH
77407: PPUSH
77408: PPUSH
77409: PPUSH
77410: PPUSH
77411: PPUSH
77412: PPUSH
77413: PPUSH
// if not turrets or not factories then
77414: LD_VAR 0 1
77418: NOT
77419: PUSH
77420: LD_VAR 0 2
77424: NOT
77425: OR
77426: IFFALSE 77430
// exit ;
77428: GO 77737
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77430: LD_ADDR_VAR 0 10
77434: PUSH
77435: LD_INT 5
77437: PUSH
77438: LD_INT 6
77440: PUSH
77441: EMPTY
77442: LIST
77443: LIST
77444: PUSH
77445: LD_INT 2
77447: PUSH
77448: LD_INT 4
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 3
77457: PUSH
77458: LD_INT 5
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: EMPTY
77466: LIST
77467: LIST
77468: LIST
77469: PUSH
77470: LD_INT 24
77472: PUSH
77473: LD_INT 25
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: PUSH
77480: LD_INT 23
77482: PUSH
77483: LD_INT 27
77485: PUSH
77486: EMPTY
77487: LIST
77488: LIST
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 42
77496: PUSH
77497: LD_INT 43
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_INT 44
77506: PUSH
77507: LD_INT 46
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: LD_INT 45
77516: PUSH
77517: LD_INT 47
77519: PUSH
77520: EMPTY
77521: LIST
77522: LIST
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: LIST
77533: ST_TO_ADDR
// result := [ ] ;
77534: LD_ADDR_VAR 0 3
77538: PUSH
77539: EMPTY
77540: ST_TO_ADDR
// for i in turrets do
77541: LD_ADDR_VAR 0 4
77545: PUSH
77546: LD_VAR 0 1
77550: PUSH
77551: FOR_IN
77552: IFFALSE 77735
// begin nat := GetNation ( i ) ;
77554: LD_ADDR_VAR 0 7
77558: PUSH
77559: LD_VAR 0 4
77563: PPUSH
77564: CALL_OW 248
77568: ST_TO_ADDR
// weapon := 0 ;
77569: LD_ADDR_VAR 0 8
77573: PUSH
77574: LD_INT 0
77576: ST_TO_ADDR
// if not nat then
77577: LD_VAR 0 7
77581: NOT
77582: IFFALSE 77586
// continue ;
77584: GO 77551
// for j in list [ nat ] do
77586: LD_ADDR_VAR 0 5
77590: PUSH
77591: LD_VAR 0 10
77595: PUSH
77596: LD_VAR 0 7
77600: ARRAY
77601: PUSH
77602: FOR_IN
77603: IFFALSE 77644
// if GetBWeapon ( i ) = j [ 1 ] then
77605: LD_VAR 0 4
77609: PPUSH
77610: CALL_OW 269
77614: PUSH
77615: LD_VAR 0 5
77619: PUSH
77620: LD_INT 1
77622: ARRAY
77623: EQUAL
77624: IFFALSE 77642
// begin weapon := j [ 2 ] ;
77626: LD_ADDR_VAR 0 8
77630: PUSH
77631: LD_VAR 0 5
77635: PUSH
77636: LD_INT 2
77638: ARRAY
77639: ST_TO_ADDR
// break ;
77640: GO 77644
// end ;
77642: GO 77602
77644: POP
77645: POP
// if not weapon then
77646: LD_VAR 0 8
77650: NOT
77651: IFFALSE 77655
// continue ;
77653: GO 77551
// for k in factories do
77655: LD_ADDR_VAR 0 6
77659: PUSH
77660: LD_VAR 0 2
77664: PUSH
77665: FOR_IN
77666: IFFALSE 77731
// begin weapons := AvailableWeaponList ( k ) ;
77668: LD_ADDR_VAR 0 9
77672: PUSH
77673: LD_VAR 0 6
77677: PPUSH
77678: CALL_OW 478
77682: ST_TO_ADDR
// if not weapons then
77683: LD_VAR 0 9
77687: NOT
77688: IFFALSE 77692
// continue ;
77690: GO 77665
// if weapon in weapons then
77692: LD_VAR 0 8
77696: PUSH
77697: LD_VAR 0 9
77701: IN
77702: IFFALSE 77729
// begin result := [ i , weapon ] ;
77704: LD_ADDR_VAR 0 3
77708: PUSH
77709: LD_VAR 0 4
77713: PUSH
77714: LD_VAR 0 8
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: ST_TO_ADDR
// exit ;
77723: POP
77724: POP
77725: POP
77726: POP
77727: GO 77737
// end ; end ;
77729: GO 77665
77731: POP
77732: POP
// end ;
77733: GO 77551
77735: POP
77736: POP
// end ;
77737: LD_VAR 0 3
77741: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77742: LD_INT 0
77744: PPUSH
// if not side or side > 8 then
77745: LD_VAR 0 3
77749: NOT
77750: PUSH
77751: LD_VAR 0 3
77755: PUSH
77756: LD_INT 8
77758: GREATER
77759: OR
77760: IFFALSE 77764
// exit ;
77762: GO 77823
// if not range then
77764: LD_VAR 0 4
77768: NOT
77769: IFFALSE 77780
// range := - 12 ;
77771: LD_ADDR_VAR 0 4
77775: PUSH
77776: LD_INT 12
77778: NEG
77779: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77780: LD_VAR 0 1
77784: PPUSH
77785: LD_VAR 0 2
77789: PPUSH
77790: LD_VAR 0 3
77794: PPUSH
77795: LD_VAR 0 4
77799: PPUSH
77800: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77804: LD_VAR 0 1
77808: PPUSH
77809: LD_VAR 0 2
77813: PPUSH
77814: LD_VAR 0 3
77818: PPUSH
77819: CALL_OW 331
// end ;
77823: LD_VAR 0 5
77827: RET
// export function Video ( mode ) ; begin
77828: LD_INT 0
77830: PPUSH
// ingame_video = mode ;
77831: LD_ADDR_OWVAR 52
77835: PUSH
77836: LD_VAR 0 1
77840: ST_TO_ADDR
// interface_hidden = mode ;
77841: LD_ADDR_OWVAR 54
77845: PUSH
77846: LD_VAR 0 1
77850: ST_TO_ADDR
// end ;
77851: LD_VAR 0 2
77855: RET
// export function Join ( array , element ) ; begin
77856: LD_INT 0
77858: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77859: LD_ADDR_VAR 0 3
77863: PUSH
77864: LD_VAR 0 1
77868: PPUSH
77869: LD_VAR 0 1
77873: PUSH
77874: LD_INT 1
77876: PLUS
77877: PPUSH
77878: LD_VAR 0 2
77882: PPUSH
77883: CALL_OW 1
77887: ST_TO_ADDR
// end ;
77888: LD_VAR 0 3
77892: RET
// export function JoinUnion ( array , element ) ; begin
77893: LD_INT 0
77895: PPUSH
// result := array union element ;
77896: LD_ADDR_VAR 0 3
77900: PUSH
77901: LD_VAR 0 1
77905: PUSH
77906: LD_VAR 0 2
77910: UNION
77911: ST_TO_ADDR
// end ;
77912: LD_VAR 0 3
77916: RET
// export function GetBehemoths ( side ) ; begin
77917: LD_INT 0
77919: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77920: LD_ADDR_VAR 0 2
77924: PUSH
77925: LD_INT 22
77927: PUSH
77928: LD_VAR 0 1
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 31
77939: PUSH
77940: LD_INT 25
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PPUSH
77951: CALL_OW 69
77955: ST_TO_ADDR
// end ;
77956: LD_VAR 0 2
77960: RET
// export function Shuffle ( array ) ; var i , index ; begin
77961: LD_INT 0
77963: PPUSH
77964: PPUSH
77965: PPUSH
// result := [ ] ;
77966: LD_ADDR_VAR 0 2
77970: PUSH
77971: EMPTY
77972: ST_TO_ADDR
// if not array then
77973: LD_VAR 0 1
77977: NOT
77978: IFFALSE 77982
// exit ;
77980: GO 78081
// Randomize ;
77982: CALL_OW 10
// for i = array downto 1 do
77986: LD_ADDR_VAR 0 3
77990: PUSH
77991: DOUBLE
77992: LD_VAR 0 1
77996: INC
77997: ST_TO_ADDR
77998: LD_INT 1
78000: PUSH
78001: FOR_DOWNTO
78002: IFFALSE 78079
// begin index := rand ( 1 , array ) ;
78004: LD_ADDR_VAR 0 4
78008: PUSH
78009: LD_INT 1
78011: PPUSH
78012: LD_VAR 0 1
78016: PPUSH
78017: CALL_OW 12
78021: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78022: LD_ADDR_VAR 0 2
78026: PUSH
78027: LD_VAR 0 2
78031: PPUSH
78032: LD_VAR 0 2
78036: PUSH
78037: LD_INT 1
78039: PLUS
78040: PPUSH
78041: LD_VAR 0 1
78045: PUSH
78046: LD_VAR 0 4
78050: ARRAY
78051: PPUSH
78052: CALL_OW 2
78056: ST_TO_ADDR
// array := Delete ( array , index ) ;
78057: LD_ADDR_VAR 0 1
78061: PUSH
78062: LD_VAR 0 1
78066: PPUSH
78067: LD_VAR 0 4
78071: PPUSH
78072: CALL_OW 3
78076: ST_TO_ADDR
// end ;
78077: GO 78001
78079: POP
78080: POP
// end ;
78081: LD_VAR 0 2
78085: RET
// export function GetBaseMaterials ( base ) ; begin
78086: LD_INT 0
78088: PPUSH
// result := [ 0 , 0 , 0 ] ;
78089: LD_ADDR_VAR 0 2
78093: PUSH
78094: LD_INT 0
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: LD_INT 0
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: LIST
78107: ST_TO_ADDR
// if not base then
78108: LD_VAR 0 1
78112: NOT
78113: IFFALSE 78117
// exit ;
78115: GO 78166
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78117: LD_ADDR_VAR 0 2
78121: PUSH
78122: LD_VAR 0 1
78126: PPUSH
78127: LD_INT 1
78129: PPUSH
78130: CALL_OW 275
78134: PUSH
78135: LD_VAR 0 1
78139: PPUSH
78140: LD_INT 2
78142: PPUSH
78143: CALL_OW 275
78147: PUSH
78148: LD_VAR 0 1
78152: PPUSH
78153: LD_INT 3
78155: PPUSH
78156: CALL_OW 275
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: LIST
78165: ST_TO_ADDR
// end ;
78166: LD_VAR 0 2
78170: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78171: LD_INT 0
78173: PPUSH
78174: PPUSH
// result := array ;
78175: LD_ADDR_VAR 0 3
78179: PUSH
78180: LD_VAR 0 1
78184: ST_TO_ADDR
// if size > 0 then
78185: LD_VAR 0 2
78189: PUSH
78190: LD_INT 0
78192: GREATER
78193: IFFALSE 78239
// for i := array downto size do
78195: LD_ADDR_VAR 0 4
78199: PUSH
78200: DOUBLE
78201: LD_VAR 0 1
78205: INC
78206: ST_TO_ADDR
78207: LD_VAR 0 2
78211: PUSH
78212: FOR_DOWNTO
78213: IFFALSE 78237
// result := Delete ( result , result ) ;
78215: LD_ADDR_VAR 0 3
78219: PUSH
78220: LD_VAR 0 3
78224: PPUSH
78225: LD_VAR 0 3
78229: PPUSH
78230: CALL_OW 3
78234: ST_TO_ADDR
78235: GO 78212
78237: POP
78238: POP
// end ;
78239: LD_VAR 0 3
78243: RET
// export function ComExit ( unit ) ; var tmp ; begin
78244: LD_INT 0
78246: PPUSH
78247: PPUSH
// if not IsInUnit ( unit ) then
78248: LD_VAR 0 1
78252: PPUSH
78253: CALL_OW 310
78257: NOT
78258: IFFALSE 78262
// exit ;
78260: GO 78322
// tmp := IsInUnit ( unit ) ;
78262: LD_ADDR_VAR 0 3
78266: PUSH
78267: LD_VAR 0 1
78271: PPUSH
78272: CALL_OW 310
78276: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78277: LD_VAR 0 3
78281: PPUSH
78282: CALL_OW 247
78286: PUSH
78287: LD_INT 2
78289: EQUAL
78290: IFFALSE 78303
// ComExitVehicle ( unit ) else
78292: LD_VAR 0 1
78296: PPUSH
78297: CALL_OW 121
78301: GO 78312
// ComExitBuilding ( unit ) ;
78303: LD_VAR 0 1
78307: PPUSH
78308: CALL_OW 122
// result := tmp ;
78312: LD_ADDR_VAR 0 2
78316: PUSH
78317: LD_VAR 0 3
78321: ST_TO_ADDR
// end ;
78322: LD_VAR 0 2
78326: RET
// export function ComExitAll ( units ) ; var i ; begin
78327: LD_INT 0
78329: PPUSH
78330: PPUSH
// if not units then
78331: LD_VAR 0 1
78335: NOT
78336: IFFALSE 78340
// exit ;
78338: GO 78366
// for i in units do
78340: LD_ADDR_VAR 0 3
78344: PUSH
78345: LD_VAR 0 1
78349: PUSH
78350: FOR_IN
78351: IFFALSE 78364
// ComExit ( i ) ;
78353: LD_VAR 0 3
78357: PPUSH
78358: CALL 78244 0 1
78362: GO 78350
78364: POP
78365: POP
// end ;
78366: LD_VAR 0 2
78370: RET
// export function ResetHc ; begin
78371: LD_INT 0
78373: PPUSH
// InitHc ;
78374: CALL_OW 19
// hc_importance := 0 ;
78378: LD_ADDR_OWVAR 32
78382: PUSH
78383: LD_INT 0
78385: ST_TO_ADDR
// end ;
78386: LD_VAR 0 1
78390: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78391: LD_INT 0
78393: PPUSH
78394: PPUSH
78395: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78396: LD_ADDR_VAR 0 6
78400: PUSH
78401: LD_VAR 0 1
78405: PUSH
78406: LD_VAR 0 3
78410: PLUS
78411: PUSH
78412: LD_INT 2
78414: DIV
78415: ST_TO_ADDR
// if _x < 0 then
78416: LD_VAR 0 6
78420: PUSH
78421: LD_INT 0
78423: LESS
78424: IFFALSE 78441
// _x := _x * - 1 ;
78426: LD_ADDR_VAR 0 6
78430: PUSH
78431: LD_VAR 0 6
78435: PUSH
78436: LD_INT 1
78438: NEG
78439: MUL
78440: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78441: LD_ADDR_VAR 0 7
78445: PUSH
78446: LD_VAR 0 2
78450: PUSH
78451: LD_VAR 0 4
78455: PLUS
78456: PUSH
78457: LD_INT 2
78459: DIV
78460: ST_TO_ADDR
// if _y < 0 then
78461: LD_VAR 0 7
78465: PUSH
78466: LD_INT 0
78468: LESS
78469: IFFALSE 78486
// _y := _y * - 1 ;
78471: LD_ADDR_VAR 0 7
78475: PUSH
78476: LD_VAR 0 7
78480: PUSH
78481: LD_INT 1
78483: NEG
78484: MUL
78485: ST_TO_ADDR
// result := [ _x , _y ] ;
78486: LD_ADDR_VAR 0 5
78490: PUSH
78491: LD_VAR 0 6
78495: PUSH
78496: LD_VAR 0 7
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: ST_TO_ADDR
// end ;
78505: LD_VAR 0 5
78509: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78510: LD_INT 0
78512: PPUSH
78513: PPUSH
78514: PPUSH
78515: PPUSH
// task := GetTaskList ( unit ) ;
78516: LD_ADDR_VAR 0 7
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: CALL_OW 437
78530: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78531: LD_VAR 0 7
78535: NOT
78536: PUSH
78537: LD_VAR 0 1
78541: PPUSH
78542: LD_VAR 0 2
78546: PPUSH
78547: CALL_OW 308
78551: NOT
78552: AND
78553: IFFALSE 78557
// exit ;
78555: GO 78675
// if IsInArea ( unit , area ) then
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_VAR 0 2
78566: PPUSH
78567: CALL_OW 308
78571: IFFALSE 78589
// begin ComMoveToArea ( unit , goAway ) ;
78573: LD_VAR 0 1
78577: PPUSH
78578: LD_VAR 0 3
78582: PPUSH
78583: CALL_OW 113
// exit ;
78587: GO 78675
// end ; if task [ 1 ] [ 1 ] <> M then
78589: LD_VAR 0 7
78593: PUSH
78594: LD_INT 1
78596: ARRAY
78597: PUSH
78598: LD_INT 1
78600: ARRAY
78601: PUSH
78602: LD_STRING M
78604: NONEQUAL
78605: IFFALSE 78609
// exit ;
78607: GO 78675
// x := task [ 1 ] [ 2 ] ;
78609: LD_ADDR_VAR 0 5
78613: PUSH
78614: LD_VAR 0 7
78618: PUSH
78619: LD_INT 1
78621: ARRAY
78622: PUSH
78623: LD_INT 2
78625: ARRAY
78626: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78627: LD_ADDR_VAR 0 6
78631: PUSH
78632: LD_VAR 0 7
78636: PUSH
78637: LD_INT 1
78639: ARRAY
78640: PUSH
78641: LD_INT 3
78643: ARRAY
78644: ST_TO_ADDR
// if InArea ( x , y , area ) then
78645: LD_VAR 0 5
78649: PPUSH
78650: LD_VAR 0 6
78654: PPUSH
78655: LD_VAR 0 2
78659: PPUSH
78660: CALL_OW 309
78664: IFFALSE 78675
// ComStop ( unit ) ;
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 141
// end ;
78675: LD_VAR 0 4
78679: RET
// export function Abs ( value ) ; begin
78680: LD_INT 0
78682: PPUSH
// result := value ;
78683: LD_ADDR_VAR 0 2
78687: PUSH
78688: LD_VAR 0 1
78692: ST_TO_ADDR
// if value < 0 then
78693: LD_VAR 0 1
78697: PUSH
78698: LD_INT 0
78700: LESS
78701: IFFALSE 78718
// result := value * - 1 ;
78703: LD_ADDR_VAR 0 2
78707: PUSH
78708: LD_VAR 0 1
78712: PUSH
78713: LD_INT 1
78715: NEG
78716: MUL
78717: ST_TO_ADDR
// end ;
78718: LD_VAR 0 2
78722: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78723: LD_INT 0
78725: PPUSH
78726: PPUSH
78727: PPUSH
78728: PPUSH
78729: PPUSH
78730: PPUSH
78731: PPUSH
78732: PPUSH
// if not unit or not building then
78733: LD_VAR 0 1
78737: NOT
78738: PUSH
78739: LD_VAR 0 2
78743: NOT
78744: OR
78745: IFFALSE 78749
// exit ;
78747: GO 78975
// x := GetX ( building ) ;
78749: LD_ADDR_VAR 0 4
78753: PUSH
78754: LD_VAR 0 2
78758: PPUSH
78759: CALL_OW 250
78763: ST_TO_ADDR
// y := GetY ( building ) ;
78764: LD_ADDR_VAR 0 6
78768: PUSH
78769: LD_VAR 0 2
78773: PPUSH
78774: CALL_OW 251
78778: ST_TO_ADDR
// d := GetDir ( building ) ;
78779: LD_ADDR_VAR 0 8
78783: PUSH
78784: LD_VAR 0 2
78788: PPUSH
78789: CALL_OW 254
78793: ST_TO_ADDR
// r := 4 ;
78794: LD_ADDR_VAR 0 9
78798: PUSH
78799: LD_INT 4
78801: ST_TO_ADDR
// for i := 1 to 5 do
78802: LD_ADDR_VAR 0 10
78806: PUSH
78807: DOUBLE
78808: LD_INT 1
78810: DEC
78811: ST_TO_ADDR
78812: LD_INT 5
78814: PUSH
78815: FOR_TO
78816: IFFALSE 78973
// begin _x := ShiftX ( x , d , r + i ) ;
78818: LD_ADDR_VAR 0 5
78822: PUSH
78823: LD_VAR 0 4
78827: PPUSH
78828: LD_VAR 0 8
78832: PPUSH
78833: LD_VAR 0 9
78837: PUSH
78838: LD_VAR 0 10
78842: PLUS
78843: PPUSH
78844: CALL_OW 272
78848: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78849: LD_ADDR_VAR 0 7
78853: PUSH
78854: LD_VAR 0 6
78858: PPUSH
78859: LD_VAR 0 8
78863: PPUSH
78864: LD_VAR 0 9
78868: PUSH
78869: LD_VAR 0 10
78873: PLUS
78874: PPUSH
78875: CALL_OW 273
78879: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78880: LD_VAR 0 5
78884: PPUSH
78885: LD_VAR 0 7
78889: PPUSH
78890: CALL_OW 488
78894: PUSH
78895: LD_VAR 0 5
78899: PPUSH
78900: LD_VAR 0 7
78904: PPUSH
78905: CALL_OW 428
78909: PPUSH
78910: CALL_OW 247
78914: PUSH
78915: LD_INT 3
78917: PUSH
78918: LD_INT 2
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: IN
78925: NOT
78926: AND
78927: IFFALSE 78971
// begin ComMoveXY ( unit , _x , _y ) ;
78929: LD_VAR 0 1
78933: PPUSH
78934: LD_VAR 0 5
78938: PPUSH
78939: LD_VAR 0 7
78943: PPUSH
78944: CALL_OW 111
// result := [ _x , _y ] ;
78948: LD_ADDR_VAR 0 3
78952: PUSH
78953: LD_VAR 0 5
78957: PUSH
78958: LD_VAR 0 7
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: ST_TO_ADDR
// exit ;
78967: POP
78968: POP
78969: GO 78975
// end ; end ;
78971: GO 78815
78973: POP
78974: POP
// end ;
78975: LD_VAR 0 3
78979: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78980: LD_INT 0
78982: PPUSH
78983: PPUSH
78984: PPUSH
// result := 0 ;
78985: LD_ADDR_VAR 0 3
78989: PUSH
78990: LD_INT 0
78992: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78993: LD_VAR 0 1
78997: PUSH
78998: LD_INT 0
79000: LESS
79001: PUSH
79002: LD_VAR 0 1
79006: PUSH
79007: LD_INT 8
79009: GREATER
79010: OR
79011: PUSH
79012: LD_VAR 0 2
79016: PUSH
79017: LD_INT 0
79019: LESS
79020: OR
79021: PUSH
79022: LD_VAR 0 2
79026: PUSH
79027: LD_INT 8
79029: GREATER
79030: OR
79031: IFFALSE 79035
// exit ;
79033: GO 79110
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79035: LD_ADDR_VAR 0 4
79039: PUSH
79040: LD_INT 22
79042: PUSH
79043: LD_VAR 0 2
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PPUSH
79052: CALL_OW 69
79056: PUSH
79057: FOR_IN
79058: IFFALSE 79108
// begin un := UnitShoot ( i ) ;
79060: LD_ADDR_VAR 0 5
79064: PUSH
79065: LD_VAR 0 4
79069: PPUSH
79070: CALL_OW 504
79074: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79075: LD_VAR 0 5
79079: PPUSH
79080: CALL_OW 255
79084: PUSH
79085: LD_VAR 0 1
79089: EQUAL
79090: IFFALSE 79106
// begin result := un ;
79092: LD_ADDR_VAR 0 3
79096: PUSH
79097: LD_VAR 0 5
79101: ST_TO_ADDR
// exit ;
79102: POP
79103: POP
79104: GO 79110
// end ; end ;
79106: GO 79057
79108: POP
79109: POP
// end ;
79110: LD_VAR 0 3
79114: RET
// export function GetCargoBay ( units ) ; begin
79115: LD_INT 0
79117: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79118: LD_ADDR_VAR 0 2
79122: PUSH
79123: LD_VAR 0 1
79127: PPUSH
79128: LD_INT 2
79130: PUSH
79131: LD_INT 34
79133: PUSH
79134: LD_INT 12
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PUSH
79141: LD_INT 34
79143: PUSH
79144: LD_INT 51
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PUSH
79151: LD_INT 34
79153: PUSH
79154: LD_INT 32
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 34
79163: PUSH
79164: LD_EXP 119
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: LIST
79179: PPUSH
79180: CALL_OW 72
79184: ST_TO_ADDR
// end ;
79185: LD_VAR 0 2
79189: RET
// export function Negate ( value ) ; begin
79190: LD_INT 0
79192: PPUSH
// result := not value ;
79193: LD_ADDR_VAR 0 2
79197: PUSH
79198: LD_VAR 0 1
79202: NOT
79203: ST_TO_ADDR
// end ;
79204: LD_VAR 0 2
79208: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
79209: LD_INT 0
79211: PPUSH
// if x1 = x2 then
79212: LD_VAR 0 1
79216: PUSH
79217: LD_VAR 0 3
79221: EQUAL
79222: IFFALSE 79256
// begin if y1 > y2 then
79224: LD_VAR 0 2
79228: PUSH
79229: LD_VAR 0 4
79233: GREATER
79234: IFFALSE 79246
// result := 0 else
79236: LD_ADDR_VAR 0 5
79240: PUSH
79241: LD_INT 0
79243: ST_TO_ADDR
79244: GO 79254
// result := 3 ;
79246: LD_ADDR_VAR 0 5
79250: PUSH
79251: LD_INT 3
79253: ST_TO_ADDR
// exit ;
79254: GO 79342
// end ; if y1 = y2 then
79256: LD_VAR 0 2
79260: PUSH
79261: LD_VAR 0 4
79265: EQUAL
79266: IFFALSE 79300
// begin if x1 > x2 then
79268: LD_VAR 0 1
79272: PUSH
79273: LD_VAR 0 3
79277: GREATER
79278: IFFALSE 79290
// result := 1 else
79280: LD_ADDR_VAR 0 5
79284: PUSH
79285: LD_INT 1
79287: ST_TO_ADDR
79288: GO 79298
// result := 4 ;
79290: LD_ADDR_VAR 0 5
79294: PUSH
79295: LD_INT 4
79297: ST_TO_ADDR
// exit ;
79298: GO 79342
// end ; if x1 > x2 and y1 > y2 then
79300: LD_VAR 0 1
79304: PUSH
79305: LD_VAR 0 3
79309: GREATER
79310: PUSH
79311: LD_VAR 0 2
79315: PUSH
79316: LD_VAR 0 4
79320: GREATER
79321: AND
79322: IFFALSE 79334
// result := 2 else
79324: LD_ADDR_VAR 0 5
79328: PUSH
79329: LD_INT 2
79331: ST_TO_ADDR
79332: GO 79342
// result := 5 ;
79334: LD_ADDR_VAR 0 5
79338: PUSH
79339: LD_INT 5
79341: ST_TO_ADDR
// end ;
79342: LD_VAR 0 5
79346: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79347: LD_INT 0
79349: PPUSH
79350: PPUSH
// if not driver or not IsInUnit ( driver ) then
79351: LD_VAR 0 1
79355: NOT
79356: PUSH
79357: LD_VAR 0 1
79361: PPUSH
79362: CALL_OW 310
79366: NOT
79367: OR
79368: IFFALSE 79372
// exit ;
79370: GO 79462
// vehicle := IsInUnit ( driver ) ;
79372: LD_ADDR_VAR 0 3
79376: PUSH
79377: LD_VAR 0 1
79381: PPUSH
79382: CALL_OW 310
79386: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79387: LD_VAR 0 1
79391: PPUSH
79392: LD_STRING \
79394: PUSH
79395: LD_INT 0
79397: PUSH
79398: LD_INT 0
79400: PUSH
79401: LD_INT 0
79403: PUSH
79404: LD_INT 0
79406: PUSH
79407: LD_INT 0
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: LIST
79417: LIST
79418: LIST
79419: LIST
79420: LIST
79421: PUSH
79422: LD_STRING E
79424: PUSH
79425: LD_INT 0
79427: PUSH
79428: LD_INT 0
79430: PUSH
79431: LD_VAR 0 3
79435: PUSH
79436: LD_INT 0
79438: PUSH
79439: LD_INT 0
79441: PUSH
79442: LD_INT 0
79444: PUSH
79445: EMPTY
79446: LIST
79447: LIST
79448: LIST
79449: LIST
79450: LIST
79451: LIST
79452: LIST
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: PPUSH
79458: CALL_OW 446
// end ;
79462: LD_VAR 0 2
79466: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79467: LD_INT 0
79469: PPUSH
79470: PPUSH
// if not driver or not IsInUnit ( driver ) then
79471: LD_VAR 0 1
79475: NOT
79476: PUSH
79477: LD_VAR 0 1
79481: PPUSH
79482: CALL_OW 310
79486: NOT
79487: OR
79488: IFFALSE 79492
// exit ;
79490: GO 79582
// vehicle := IsInUnit ( driver ) ;
79492: LD_ADDR_VAR 0 3
79496: PUSH
79497: LD_VAR 0 1
79501: PPUSH
79502: CALL_OW 310
79506: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79507: LD_VAR 0 1
79511: PPUSH
79512: LD_STRING \
79514: PUSH
79515: LD_INT 0
79517: PUSH
79518: LD_INT 0
79520: PUSH
79521: LD_INT 0
79523: PUSH
79524: LD_INT 0
79526: PUSH
79527: LD_INT 0
79529: PUSH
79530: LD_INT 0
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: PUSH
79542: LD_STRING E
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: LD_INT 0
79550: PUSH
79551: LD_VAR 0 3
79555: PUSH
79556: LD_INT 0
79558: PUSH
79559: LD_INT 0
79561: PUSH
79562: LD_INT 0
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: LIST
79569: LIST
79570: LIST
79571: LIST
79572: LIST
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PPUSH
79578: CALL_OW 447
// end ;
79582: LD_VAR 0 2
79586: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79587: LD_INT 0
79589: PPUSH
79590: PPUSH
79591: PPUSH
// tmp := [ ] ;
79592: LD_ADDR_VAR 0 5
79596: PUSH
79597: EMPTY
79598: ST_TO_ADDR
// for i in units do
79599: LD_ADDR_VAR 0 4
79603: PUSH
79604: LD_VAR 0 1
79608: PUSH
79609: FOR_IN
79610: IFFALSE 79648
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79612: LD_ADDR_VAR 0 5
79616: PUSH
79617: LD_VAR 0 5
79621: PPUSH
79622: LD_VAR 0 5
79626: PUSH
79627: LD_INT 1
79629: PLUS
79630: PPUSH
79631: LD_VAR 0 4
79635: PPUSH
79636: CALL_OW 256
79640: PPUSH
79641: CALL_OW 2
79645: ST_TO_ADDR
79646: GO 79609
79648: POP
79649: POP
// if not tmp then
79650: LD_VAR 0 5
79654: NOT
79655: IFFALSE 79659
// exit ;
79657: GO 79707
// if asc then
79659: LD_VAR 0 2
79663: IFFALSE 79687
// result := SortListByListAsc ( units , tmp ) else
79665: LD_ADDR_VAR 0 3
79669: PUSH
79670: LD_VAR 0 1
79674: PPUSH
79675: LD_VAR 0 5
79679: PPUSH
79680: CALL_OW 76
79684: ST_TO_ADDR
79685: GO 79707
// result := SortListByListDesc ( units , tmp ) ;
79687: LD_ADDR_VAR 0 3
79691: PUSH
79692: LD_VAR 0 1
79696: PPUSH
79697: LD_VAR 0 5
79701: PPUSH
79702: CALL_OW 77
79706: ST_TO_ADDR
// end ;
79707: LD_VAR 0 3
79711: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79712: LD_INT 0
79714: PPUSH
79715: PPUSH
// task := GetTaskList ( mech ) ;
79716: LD_ADDR_VAR 0 4
79720: PUSH
79721: LD_VAR 0 1
79725: PPUSH
79726: CALL_OW 437
79730: ST_TO_ADDR
// if not task then
79731: LD_VAR 0 4
79735: NOT
79736: IFFALSE 79740
// exit ;
79738: GO 79782
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79740: LD_ADDR_VAR 0 3
79744: PUSH
79745: LD_VAR 0 4
79749: PUSH
79750: LD_INT 1
79752: ARRAY
79753: PUSH
79754: LD_INT 1
79756: ARRAY
79757: PUSH
79758: LD_STRING r
79760: EQUAL
79761: PUSH
79762: LD_VAR 0 4
79766: PUSH
79767: LD_INT 1
79769: ARRAY
79770: PUSH
79771: LD_INT 4
79773: ARRAY
79774: PUSH
79775: LD_VAR 0 2
79779: EQUAL
79780: AND
79781: ST_TO_ADDR
// end ;
79782: LD_VAR 0 3
79786: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79787: LD_INT 0
79789: PPUSH
// SetDir ( unit , d ) ;
79790: LD_VAR 0 1
79794: PPUSH
79795: LD_VAR 0 4
79799: PPUSH
79800: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79804: LD_VAR 0 1
79808: PPUSH
79809: LD_VAR 0 2
79813: PPUSH
79814: LD_VAR 0 3
79818: PPUSH
79819: LD_VAR 0 5
79823: PPUSH
79824: CALL_OW 48
// end ;
79828: LD_VAR 0 6
79832: RET
// export function ToNaturalNumber ( number ) ; begin
79833: LD_INT 0
79835: PPUSH
// result := number div 1 ;
79836: LD_ADDR_VAR 0 2
79840: PUSH
79841: LD_VAR 0 1
79845: PUSH
79846: LD_INT 1
79848: DIV
79849: ST_TO_ADDR
// if number < 0 then
79850: LD_VAR 0 1
79854: PUSH
79855: LD_INT 0
79857: LESS
79858: IFFALSE 79868
// result := 0 ;
79860: LD_ADDR_VAR 0 2
79864: PUSH
79865: LD_INT 0
79867: ST_TO_ADDR
// end ;
79868: LD_VAR 0 2
79872: RET
// export function SortByClass ( units , class ) ; var un ; begin
79873: LD_INT 0
79875: PPUSH
79876: PPUSH
// if not units or not class then
79877: LD_VAR 0 1
79881: NOT
79882: PUSH
79883: LD_VAR 0 2
79887: NOT
79888: OR
79889: IFFALSE 79893
// exit ;
79891: GO 79988
// result := [ ] ;
79893: LD_ADDR_VAR 0 3
79897: PUSH
79898: EMPTY
79899: ST_TO_ADDR
// for un in units do
79900: LD_ADDR_VAR 0 4
79904: PUSH
79905: LD_VAR 0 1
79909: PUSH
79910: FOR_IN
79911: IFFALSE 79986
// if GetClass ( un ) = class then
79913: LD_VAR 0 4
79917: PPUSH
79918: CALL_OW 257
79922: PUSH
79923: LD_VAR 0 2
79927: EQUAL
79928: IFFALSE 79955
// result := Insert ( result , 1 , un ) else
79930: LD_ADDR_VAR 0 3
79934: PUSH
79935: LD_VAR 0 3
79939: PPUSH
79940: LD_INT 1
79942: PPUSH
79943: LD_VAR 0 4
79947: PPUSH
79948: CALL_OW 2
79952: ST_TO_ADDR
79953: GO 79984
// result := Replace ( result , result + 1 , un ) ;
79955: LD_ADDR_VAR 0 3
79959: PUSH
79960: LD_VAR 0 3
79964: PPUSH
79965: LD_VAR 0 3
79969: PUSH
79970: LD_INT 1
79972: PLUS
79973: PPUSH
79974: LD_VAR 0 4
79978: PPUSH
79979: CALL_OW 1
79983: ST_TO_ADDR
79984: GO 79910
79986: POP
79987: POP
// end ;
79988: LD_VAR 0 3
79992: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79993: LD_INT 0
79995: PPUSH
79996: PPUSH
79997: PPUSH
79998: PPUSH
79999: PPUSH
80000: PPUSH
80001: PPUSH
// result := [ ] ;
80002: LD_ADDR_VAR 0 4
80006: PUSH
80007: EMPTY
80008: ST_TO_ADDR
// if x - r < 0 then
80009: LD_VAR 0 1
80013: PUSH
80014: LD_VAR 0 3
80018: MINUS
80019: PUSH
80020: LD_INT 0
80022: LESS
80023: IFFALSE 80035
// min_x := 0 else
80025: LD_ADDR_VAR 0 8
80029: PUSH
80030: LD_INT 0
80032: ST_TO_ADDR
80033: GO 80051
// min_x := x - r ;
80035: LD_ADDR_VAR 0 8
80039: PUSH
80040: LD_VAR 0 1
80044: PUSH
80045: LD_VAR 0 3
80049: MINUS
80050: ST_TO_ADDR
// if y - r < 0 then
80051: LD_VAR 0 2
80055: PUSH
80056: LD_VAR 0 3
80060: MINUS
80061: PUSH
80062: LD_INT 0
80064: LESS
80065: IFFALSE 80077
// min_y := 0 else
80067: LD_ADDR_VAR 0 7
80071: PUSH
80072: LD_INT 0
80074: ST_TO_ADDR
80075: GO 80093
// min_y := y - r ;
80077: LD_ADDR_VAR 0 7
80081: PUSH
80082: LD_VAR 0 2
80086: PUSH
80087: LD_VAR 0 3
80091: MINUS
80092: ST_TO_ADDR
// max_x := x + r ;
80093: LD_ADDR_VAR 0 9
80097: PUSH
80098: LD_VAR 0 1
80102: PUSH
80103: LD_VAR 0 3
80107: PLUS
80108: ST_TO_ADDR
// max_y := y + r ;
80109: LD_ADDR_VAR 0 10
80113: PUSH
80114: LD_VAR 0 2
80118: PUSH
80119: LD_VAR 0 3
80123: PLUS
80124: ST_TO_ADDR
// for _x = min_x to max_x do
80125: LD_ADDR_VAR 0 5
80129: PUSH
80130: DOUBLE
80131: LD_VAR 0 8
80135: DEC
80136: ST_TO_ADDR
80137: LD_VAR 0 9
80141: PUSH
80142: FOR_TO
80143: IFFALSE 80244
// for _y = min_y to max_y do
80145: LD_ADDR_VAR 0 6
80149: PUSH
80150: DOUBLE
80151: LD_VAR 0 7
80155: DEC
80156: ST_TO_ADDR
80157: LD_VAR 0 10
80161: PUSH
80162: FOR_TO
80163: IFFALSE 80240
// begin if not ValidHex ( _x , _y ) then
80165: LD_VAR 0 5
80169: PPUSH
80170: LD_VAR 0 6
80174: PPUSH
80175: CALL_OW 488
80179: NOT
80180: IFFALSE 80184
// continue ;
80182: GO 80162
// if GetResourceTypeXY ( _x , _y ) then
80184: LD_VAR 0 5
80188: PPUSH
80189: LD_VAR 0 6
80193: PPUSH
80194: CALL_OW 283
80198: IFFALSE 80238
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80200: LD_ADDR_VAR 0 4
80204: PUSH
80205: LD_VAR 0 4
80209: PPUSH
80210: LD_VAR 0 4
80214: PUSH
80215: LD_INT 1
80217: PLUS
80218: PPUSH
80219: LD_VAR 0 5
80223: PUSH
80224: LD_VAR 0 6
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: PPUSH
80233: CALL_OW 1
80237: ST_TO_ADDR
// end ;
80238: GO 80162
80240: POP
80241: POP
80242: GO 80142
80244: POP
80245: POP
// end ;
80246: LD_VAR 0 4
80250: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
80251: LD_INT 0
80253: PPUSH
80254: PPUSH
80255: PPUSH
80256: PPUSH
80257: PPUSH
80258: PPUSH
// if not units then
80259: LD_VAR 0 1
80263: NOT
80264: IFFALSE 80268
// exit ;
80266: GO 80669
// result := UnitFilter ( units , [ f_ok ] ) ;
80268: LD_ADDR_VAR 0 3
80272: PUSH
80273: LD_VAR 0 1
80277: PPUSH
80278: LD_INT 50
80280: PUSH
80281: EMPTY
80282: LIST
80283: PPUSH
80284: CALL_OW 72
80288: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80289: LD_ADDR_VAR 0 7
80293: PUSH
80294: LD_VAR 0 1
80298: PUSH
80299: LD_INT 1
80301: ARRAY
80302: PPUSH
80303: CALL_OW 255
80307: ST_TO_ADDR
// if not result then
80308: LD_VAR 0 3
80312: NOT
80313: IFFALSE 80317
// exit ;
80315: GO 80669
// for i in result do
80317: LD_ADDR_VAR 0 4
80321: PUSH
80322: LD_VAR 0 3
80326: PUSH
80327: FOR_IN
80328: IFFALSE 80667
// begin tag := GetTag ( i ) + 1 ;
80330: LD_ADDR_VAR 0 8
80334: PUSH
80335: LD_VAR 0 4
80339: PPUSH
80340: CALL_OW 110
80344: PUSH
80345: LD_INT 1
80347: PLUS
80348: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80349: LD_ADDR_VAR 0 6
80353: PUSH
80354: LD_VAR 0 4
80358: PPUSH
80359: CALL_OW 250
80363: PPUSH
80364: LD_VAR 0 4
80368: PPUSH
80369: CALL_OW 251
80373: PPUSH
80374: LD_INT 6
80376: PPUSH
80377: CALL 79993 0 3
80381: ST_TO_ADDR
// if cr then
80382: LD_VAR 0 6
80386: IFFALSE 80425
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80388: LD_VAR 0 4
80392: PPUSH
80393: LD_VAR 0 6
80397: PUSH
80398: LD_INT 1
80400: ARRAY
80401: PUSH
80402: LD_INT 1
80404: ARRAY
80405: PPUSH
80406: LD_VAR 0 6
80410: PUSH
80411: LD_INT 1
80413: ARRAY
80414: PUSH
80415: LD_INT 2
80417: ARRAY
80418: PPUSH
80419: CALL_OW 116
80423: GO 80665
// if path > tag then
80425: LD_VAR 0 2
80429: PUSH
80430: LD_VAR 0 8
80434: GREATER
80435: IFFALSE 80613
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
80437: LD_ADDR_VAR 0 5
80441: PUSH
80442: LD_INT 81
80444: PUSH
80445: LD_VAR 0 7
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: PUSH
80454: LD_INT 91
80456: PUSH
80457: LD_VAR 0 4
80461: PUSH
80462: LD_INT 12
80464: PUSH
80465: EMPTY
80466: LIST
80467: LIST
80468: LIST
80469: PUSH
80470: EMPTY
80471: LIST
80472: LIST
80473: PPUSH
80474: CALL_OW 69
80478: ST_TO_ADDR
// if enemy then
80479: LD_VAR 0 5
80483: IFFALSE 80511
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80485: LD_VAR 0 4
80489: PPUSH
80490: LD_VAR 0 5
80494: PPUSH
80495: LD_VAR 0 4
80499: PPUSH
80500: CALL_OW 74
80504: PPUSH
80505: CALL_OW 115
80509: GO 80611
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80511: LD_VAR 0 4
80515: PPUSH
80516: LD_VAR 0 2
80520: PUSH
80521: LD_VAR 0 8
80525: ARRAY
80526: PUSH
80527: LD_INT 1
80529: ARRAY
80530: PPUSH
80531: LD_VAR 0 2
80535: PUSH
80536: LD_VAR 0 8
80540: ARRAY
80541: PUSH
80542: LD_INT 2
80544: ARRAY
80545: PPUSH
80546: CALL_OW 297
80550: PUSH
80551: LD_INT 6
80553: GREATER
80554: IFFALSE 80597
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80556: LD_VAR 0 4
80560: PPUSH
80561: LD_VAR 0 2
80565: PUSH
80566: LD_VAR 0 8
80570: ARRAY
80571: PUSH
80572: LD_INT 1
80574: ARRAY
80575: PPUSH
80576: LD_VAR 0 2
80580: PUSH
80581: LD_VAR 0 8
80585: ARRAY
80586: PUSH
80587: LD_INT 2
80589: ARRAY
80590: PPUSH
80591: CALL_OW 114
80595: GO 80611
// SetTag ( i , tag ) ;
80597: LD_VAR 0 4
80601: PPUSH
80602: LD_VAR 0 8
80606: PPUSH
80607: CALL_OW 109
// end else
80611: GO 80665
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80613: LD_ADDR_VAR 0 5
80617: PUSH
80618: LD_INT 81
80620: PUSH
80621: LD_VAR 0 7
80625: PUSH
80626: EMPTY
80627: LIST
80628: LIST
80629: PPUSH
80630: CALL_OW 69
80634: ST_TO_ADDR
// if enemy then
80635: LD_VAR 0 5
80639: IFFALSE 80665
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80641: LD_VAR 0 4
80645: PPUSH
80646: LD_VAR 0 5
80650: PPUSH
80651: LD_VAR 0 4
80655: PPUSH
80656: CALL_OW 74
80660: PPUSH
80661: CALL_OW 115
// end ; end ;
80665: GO 80327
80667: POP
80668: POP
// end ; end_of_file
80669: LD_VAR 0 3
80673: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
80674: LD_INT 0
80676: PPUSH
// ar_miner := 81 ;
80677: LD_ADDR_EXP 125
80681: PUSH
80682: LD_INT 81
80684: ST_TO_ADDR
// ar_crane := 88 ;
80685: LD_ADDR_EXP 124
80689: PUSH
80690: LD_INT 88
80692: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
80693: LD_ADDR_EXP 119
80697: PUSH
80698: LD_INT 89
80700: ST_TO_ADDR
// us_hack := 99 ;
80701: LD_ADDR_EXP 120
80705: PUSH
80706: LD_INT 99
80708: ST_TO_ADDR
// us_artillery := 97 ;
80709: LD_ADDR_EXP 121
80713: PUSH
80714: LD_INT 97
80716: ST_TO_ADDR
// ar_bio_bomb := 91 ;
80717: LD_ADDR_EXP 122
80721: PUSH
80722: LD_INT 91
80724: ST_TO_ADDR
// ar_mortar := 92 ;
80725: LD_ADDR_EXP 123
80729: PUSH
80730: LD_INT 92
80732: ST_TO_ADDR
// ru_radar := 98 ;
80733: LD_ADDR_EXP 118
80737: PUSH
80738: LD_INT 98
80740: ST_TO_ADDR
// tech_Artillery := 80 ;
80741: LD_ADDR_EXP 126
80745: PUSH
80746: LD_INT 80
80748: ST_TO_ADDR
// tech_RadMat := 81 ;
80749: LD_ADDR_EXP 127
80753: PUSH
80754: LD_INT 81
80756: ST_TO_ADDR
// tech_BasicTools := 82 ;
80757: LD_ADDR_EXP 128
80761: PUSH
80762: LD_INT 82
80764: ST_TO_ADDR
// tech_Cargo := 83 ;
80765: LD_ADDR_EXP 129
80769: PUSH
80770: LD_INT 83
80772: ST_TO_ADDR
// tech_Track := 84 ;
80773: LD_ADDR_EXP 130
80777: PUSH
80778: LD_INT 84
80780: ST_TO_ADDR
// tech_Crane := 85 ;
80781: LD_ADDR_EXP 131
80785: PUSH
80786: LD_INT 85
80788: ST_TO_ADDR
// tech_Bulldozer := 86 ;
80789: LD_ADDR_EXP 132
80793: PUSH
80794: LD_INT 86
80796: ST_TO_ADDR
// tech_Hovercraft := 87 ;
80797: LD_ADDR_EXP 133
80801: PUSH
80802: LD_INT 87
80804: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
80805: LD_ADDR_EXP 134
80809: PUSH
80810: LD_INT 88
80812: ST_TO_ADDR
// class_mastodont := 31 ;
80813: LD_ADDR_EXP 135
80817: PUSH
80818: LD_INT 31
80820: ST_TO_ADDR
// class_horse := 21 ;
80821: LD_ADDR_EXP 136
80825: PUSH
80826: LD_INT 21
80828: ST_TO_ADDR
// end ;
80829: LD_VAR 0 1
80833: RET
// every 1 do
80834: GO 80836
80836: DISABLE
// InitGlobalVariables ; end_of_file
80837: CALL 80674 0 0
80841: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
80842: LD_INT 0
80844: PPUSH
80845: PPUSH
80846: PPUSH
80847: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
80848: LD_VAR 0 1
80852: PPUSH
80853: CALL_OW 264
80857: PUSH
80858: LD_EXP 122
80862: EQUAL
80863: IFFALSE 80935
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
80865: LD_INT 68
80867: PPUSH
80868: LD_VAR 0 1
80872: PPUSH
80873: CALL_OW 255
80877: PPUSH
80878: CALL_OW 321
80882: PUSH
80883: LD_INT 2
80885: EQUAL
80886: IFFALSE 80898
// eff := 70 else
80888: LD_ADDR_VAR 0 4
80892: PUSH
80893: LD_INT 70
80895: ST_TO_ADDR
80896: GO 80906
// eff := 30 ;
80898: LD_ADDR_VAR 0 4
80902: PUSH
80903: LD_INT 30
80905: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
80906: LD_VAR 0 1
80910: PPUSH
80911: CALL_OW 250
80915: PPUSH
80916: LD_VAR 0 1
80920: PPUSH
80921: CALL_OW 251
80925: PPUSH
80926: LD_VAR 0 4
80930: PPUSH
80931: CALL_OW 495
// end ; end ;
80935: LD_VAR 0 2
80939: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
80940: LD_INT 0
80942: PPUSH
// end ;
80943: LD_VAR 0 4
80947: RET
// export function SOS_Command ( cmd ) ; begin
80948: LD_INT 0
80950: PPUSH
// end ;
80951: LD_VAR 0 2
80955: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
80956: LD_INT 0
80958: PPUSH
// if cmd = 121 then
80959: LD_VAR 0 1
80963: PUSH
80964: LD_INT 121
80966: EQUAL
80967: IFFALSE 80969
// end ;
80969: LD_VAR 0 6
80973: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
80974: LD_INT 0
80976: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
80977: LD_VAR 0 1
80981: PUSH
80982: LD_INT 250
80984: EQUAL
80985: PUSH
80986: LD_VAR 0 2
80990: PPUSH
80991: CALL_OW 264
80995: PUSH
80996: LD_EXP 125
81000: EQUAL
81001: AND
81002: IFFALSE 81023
// MinerPlaceMine ( unit , x , y ) ;
81004: LD_VAR 0 2
81008: PPUSH
81009: LD_VAR 0 4
81013: PPUSH
81014: LD_VAR 0 5
81018: PPUSH
81019: CALL 83372 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
81023: LD_VAR 0 1
81027: PUSH
81028: LD_INT 251
81030: EQUAL
81031: PUSH
81032: LD_VAR 0 2
81036: PPUSH
81037: CALL_OW 264
81041: PUSH
81042: LD_EXP 125
81046: EQUAL
81047: AND
81048: IFFALSE 81069
// MinerDetonateMine ( unit , x , y ) ;
81050: LD_VAR 0 2
81054: PPUSH
81055: LD_VAR 0 4
81059: PPUSH
81060: LD_VAR 0 5
81064: PPUSH
81065: CALL 83649 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
81069: LD_VAR 0 1
81073: PUSH
81074: LD_INT 252
81076: EQUAL
81077: PUSH
81078: LD_VAR 0 2
81082: PPUSH
81083: CALL_OW 264
81087: PUSH
81088: LD_EXP 125
81092: EQUAL
81093: AND
81094: IFFALSE 81115
// MinerCreateMinefield ( unit , x , y ) ;
81096: LD_VAR 0 2
81100: PPUSH
81101: LD_VAR 0 4
81105: PPUSH
81106: LD_VAR 0 5
81110: PPUSH
81111: CALL 84066 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
81115: LD_VAR 0 1
81119: PUSH
81120: LD_INT 253
81122: EQUAL
81123: PUSH
81124: LD_VAR 0 2
81128: PPUSH
81129: CALL_OW 257
81133: PUSH
81134: LD_INT 5
81136: EQUAL
81137: AND
81138: IFFALSE 81159
// ComBinocular ( unit , x , y ) ;
81140: LD_VAR 0 2
81144: PPUSH
81145: LD_VAR 0 4
81149: PPUSH
81150: LD_VAR 0 5
81154: PPUSH
81155: CALL 84437 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
81159: LD_VAR 0 1
81163: PUSH
81164: LD_INT 254
81166: EQUAL
81167: PUSH
81168: LD_VAR 0 2
81172: PPUSH
81173: CALL_OW 264
81177: PUSH
81178: LD_EXP 120
81182: EQUAL
81183: AND
81184: PUSH
81185: LD_VAR 0 3
81189: PPUSH
81190: CALL_OW 263
81194: PUSH
81195: LD_INT 3
81197: EQUAL
81198: AND
81199: IFFALSE 81215
// HackDestroyVehicle ( unit , selectedUnit ) ;
81201: LD_VAR 0 2
81205: PPUSH
81206: LD_VAR 0 3
81210: PPUSH
81211: CALL 82732 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
81215: LD_VAR 0 1
81219: PUSH
81220: LD_INT 255
81222: EQUAL
81223: PUSH
81224: LD_VAR 0 2
81228: PPUSH
81229: CALL_OW 264
81233: PUSH
81234: LD_INT 14
81236: PUSH
81237: LD_INT 53
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: IN
81244: AND
81245: PUSH
81246: LD_VAR 0 4
81250: PPUSH
81251: LD_VAR 0 5
81255: PPUSH
81256: CALL_OW 488
81260: AND
81261: IFFALSE 81285
// CutTreeXYR ( unit , x , y , 12 ) ;
81263: LD_VAR 0 2
81267: PPUSH
81268: LD_VAR 0 4
81272: PPUSH
81273: LD_VAR 0 5
81277: PPUSH
81278: LD_INT 12
81280: PPUSH
81281: CALL 81298 0 4
// end ;
81285: LD_VAR 0 6
81289: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
81290: LD_INT 0
81292: PPUSH
// end ;
81293: LD_VAR 0 4
81297: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
81298: LD_INT 0
81300: PPUSH
81301: PPUSH
81302: PPUSH
81303: PPUSH
81304: PPUSH
81305: PPUSH
81306: PPUSH
81307: PPUSH
81308: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
81309: LD_VAR 0 1
81313: NOT
81314: PUSH
81315: LD_VAR 0 2
81319: PPUSH
81320: LD_VAR 0 3
81324: PPUSH
81325: CALL_OW 488
81329: NOT
81330: OR
81331: PUSH
81332: LD_VAR 0 4
81336: NOT
81337: OR
81338: IFFALSE 81342
// exit ;
81340: GO 81682
// list := [ ] ;
81342: LD_ADDR_VAR 0 13
81346: PUSH
81347: EMPTY
81348: ST_TO_ADDR
// if x - r < 0 then
81349: LD_VAR 0 2
81353: PUSH
81354: LD_VAR 0 4
81358: MINUS
81359: PUSH
81360: LD_INT 0
81362: LESS
81363: IFFALSE 81375
// min_x := 0 else
81365: LD_ADDR_VAR 0 7
81369: PUSH
81370: LD_INT 0
81372: ST_TO_ADDR
81373: GO 81391
// min_x := x - r ;
81375: LD_ADDR_VAR 0 7
81379: PUSH
81380: LD_VAR 0 2
81384: PUSH
81385: LD_VAR 0 4
81389: MINUS
81390: ST_TO_ADDR
// if y - r < 0 then
81391: LD_VAR 0 3
81395: PUSH
81396: LD_VAR 0 4
81400: MINUS
81401: PUSH
81402: LD_INT 0
81404: LESS
81405: IFFALSE 81417
// min_y := 0 else
81407: LD_ADDR_VAR 0 8
81411: PUSH
81412: LD_INT 0
81414: ST_TO_ADDR
81415: GO 81433
// min_y := y - r ;
81417: LD_ADDR_VAR 0 8
81421: PUSH
81422: LD_VAR 0 3
81426: PUSH
81427: LD_VAR 0 4
81431: MINUS
81432: ST_TO_ADDR
// max_x := x + r ;
81433: LD_ADDR_VAR 0 9
81437: PUSH
81438: LD_VAR 0 2
81442: PUSH
81443: LD_VAR 0 4
81447: PLUS
81448: ST_TO_ADDR
// max_y := y + r ;
81449: LD_ADDR_VAR 0 10
81453: PUSH
81454: LD_VAR 0 3
81458: PUSH
81459: LD_VAR 0 4
81463: PLUS
81464: ST_TO_ADDR
// for _x = min_x to max_x do
81465: LD_ADDR_VAR 0 11
81469: PUSH
81470: DOUBLE
81471: LD_VAR 0 7
81475: DEC
81476: ST_TO_ADDR
81477: LD_VAR 0 9
81481: PUSH
81482: FOR_TO
81483: IFFALSE 81600
// for _y = min_y to max_y do
81485: LD_ADDR_VAR 0 12
81489: PUSH
81490: DOUBLE
81491: LD_VAR 0 8
81495: DEC
81496: ST_TO_ADDR
81497: LD_VAR 0 10
81501: PUSH
81502: FOR_TO
81503: IFFALSE 81596
// begin if not ValidHex ( _x , _y ) then
81505: LD_VAR 0 11
81509: PPUSH
81510: LD_VAR 0 12
81514: PPUSH
81515: CALL_OW 488
81519: NOT
81520: IFFALSE 81524
// continue ;
81522: GO 81502
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81524: LD_VAR 0 11
81528: PPUSH
81529: LD_VAR 0 12
81533: PPUSH
81534: CALL_OW 351
81538: PUSH
81539: LD_VAR 0 11
81543: PPUSH
81544: LD_VAR 0 12
81548: PPUSH
81549: CALL_OW 554
81553: AND
81554: IFFALSE 81594
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81556: LD_ADDR_VAR 0 13
81560: PUSH
81561: LD_VAR 0 13
81565: PPUSH
81566: LD_VAR 0 13
81570: PUSH
81571: LD_INT 1
81573: PLUS
81574: PPUSH
81575: LD_VAR 0 11
81579: PUSH
81580: LD_VAR 0 12
81584: PUSH
81585: EMPTY
81586: LIST
81587: LIST
81588: PPUSH
81589: CALL_OW 2
81593: ST_TO_ADDR
// end ;
81594: GO 81502
81596: POP
81597: POP
81598: GO 81482
81600: POP
81601: POP
// if not list then
81602: LD_VAR 0 13
81606: NOT
81607: IFFALSE 81611
// exit ;
81609: GO 81682
// for i in list do
81611: LD_ADDR_VAR 0 6
81615: PUSH
81616: LD_VAR 0 13
81620: PUSH
81621: FOR_IN
81622: IFFALSE 81680
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
81624: LD_VAR 0 1
81628: PPUSH
81629: LD_STRING M
81631: PUSH
81632: LD_VAR 0 6
81636: PUSH
81637: LD_INT 1
81639: ARRAY
81640: PUSH
81641: LD_VAR 0 6
81645: PUSH
81646: LD_INT 2
81648: ARRAY
81649: PUSH
81650: LD_INT 0
81652: PUSH
81653: LD_INT 0
81655: PUSH
81656: LD_INT 0
81658: PUSH
81659: LD_INT 0
81661: PUSH
81662: EMPTY
81663: LIST
81664: LIST
81665: LIST
81666: LIST
81667: LIST
81668: LIST
81669: LIST
81670: PUSH
81671: EMPTY
81672: LIST
81673: PPUSH
81674: CALL_OW 447
81678: GO 81621
81680: POP
81681: POP
// end ;
81682: LD_VAR 0 5
81686: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
81687: LD_EXP 139
81691: NOT
81692: IFFALSE 81742
81694: GO 81696
81696: DISABLE
// begin initHack := true ;
81697: LD_ADDR_EXP 139
81701: PUSH
81702: LD_INT 1
81704: ST_TO_ADDR
// hackTanks := [ ] ;
81705: LD_ADDR_EXP 140
81709: PUSH
81710: EMPTY
81711: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
81712: LD_ADDR_EXP 141
81716: PUSH
81717: EMPTY
81718: ST_TO_ADDR
// hackLimit := 3 ;
81719: LD_ADDR_EXP 142
81723: PUSH
81724: LD_INT 3
81726: ST_TO_ADDR
// hackDist := 12 ;
81727: LD_ADDR_EXP 143
81731: PUSH
81732: LD_INT 12
81734: ST_TO_ADDR
// hackCounter := [ ] ;
81735: LD_ADDR_EXP 144
81739: PUSH
81740: EMPTY
81741: ST_TO_ADDR
// end ;
81742: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
81743: LD_EXP 139
81747: PUSH
81748: LD_INT 34
81750: PUSH
81751: LD_EXP 120
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: PPUSH
81760: CALL_OW 69
81764: AND
81765: IFFALSE 82020
81767: GO 81769
81769: DISABLE
81770: LD_INT 0
81772: PPUSH
81773: PPUSH
// begin enable ;
81774: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
81775: LD_ADDR_VAR 0 1
81779: PUSH
81780: LD_INT 34
81782: PUSH
81783: LD_EXP 120
81787: PUSH
81788: EMPTY
81789: LIST
81790: LIST
81791: PPUSH
81792: CALL_OW 69
81796: PUSH
81797: FOR_IN
81798: IFFALSE 82018
// begin if not i in hackTanks then
81800: LD_VAR 0 1
81804: PUSH
81805: LD_EXP 140
81809: IN
81810: NOT
81811: IFFALSE 81894
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
81813: LD_ADDR_EXP 140
81817: PUSH
81818: LD_EXP 140
81822: PPUSH
81823: LD_EXP 140
81827: PUSH
81828: LD_INT 1
81830: PLUS
81831: PPUSH
81832: LD_VAR 0 1
81836: PPUSH
81837: CALL_OW 1
81841: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
81842: LD_ADDR_EXP 141
81846: PUSH
81847: LD_EXP 141
81851: PPUSH
81852: LD_EXP 141
81856: PUSH
81857: LD_INT 1
81859: PLUS
81860: PPUSH
81861: EMPTY
81862: PPUSH
81863: CALL_OW 1
81867: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
81868: LD_ADDR_EXP 144
81872: PUSH
81873: LD_EXP 144
81877: PPUSH
81878: LD_EXP 144
81882: PUSH
81883: LD_INT 1
81885: PLUS
81886: PPUSH
81887: EMPTY
81888: PPUSH
81889: CALL_OW 1
81893: ST_TO_ADDR
// end ; if not IsOk ( i ) then
81894: LD_VAR 0 1
81898: PPUSH
81899: CALL_OW 302
81903: NOT
81904: IFFALSE 81917
// begin HackUnlinkAll ( i ) ;
81906: LD_VAR 0 1
81910: PPUSH
81911: CALL 82023 0 1
// continue ;
81915: GO 81797
// end ; HackCheckCapturedStatus ( i ) ;
81917: LD_VAR 0 1
81921: PPUSH
81922: CALL 82466 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
81926: LD_ADDR_VAR 0 2
81930: PUSH
81931: LD_INT 81
81933: PUSH
81934: LD_VAR 0 1
81938: PPUSH
81939: CALL_OW 255
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: LD_INT 33
81950: PUSH
81951: LD_INT 3
81953: PUSH
81954: EMPTY
81955: LIST
81956: LIST
81957: PUSH
81958: LD_INT 91
81960: PUSH
81961: LD_VAR 0 1
81965: PUSH
81966: LD_EXP 143
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: LIST
81975: PUSH
81976: LD_INT 50
81978: PUSH
81979: EMPTY
81980: LIST
81981: PUSH
81982: EMPTY
81983: LIST
81984: LIST
81985: LIST
81986: LIST
81987: PPUSH
81988: CALL_OW 69
81992: ST_TO_ADDR
// if not tmp then
81993: LD_VAR 0 2
81997: NOT
81998: IFFALSE 82002
// continue ;
82000: GO 81797
// HackLink ( i , tmp ) ;
82002: LD_VAR 0 1
82006: PPUSH
82007: LD_VAR 0 2
82011: PPUSH
82012: CALL 82159 0 2
// end ;
82016: GO 81797
82018: POP
82019: POP
// end ;
82020: PPOPN 2
82022: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82023: LD_INT 0
82025: PPUSH
82026: PPUSH
82027: PPUSH
// if not hack in hackTanks then
82028: LD_VAR 0 1
82032: PUSH
82033: LD_EXP 140
82037: IN
82038: NOT
82039: IFFALSE 82043
// exit ;
82041: GO 82154
// index := GetElementIndex ( hackTanks , hack ) ;
82043: LD_ADDR_VAR 0 4
82047: PUSH
82048: LD_EXP 140
82052: PPUSH
82053: LD_VAR 0 1
82057: PPUSH
82058: CALL 45890 0 2
82062: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82063: LD_EXP 141
82067: PUSH
82068: LD_VAR 0 4
82072: ARRAY
82073: IFFALSE 82154
// begin for i in hackTanksCaptured [ index ] do
82075: LD_ADDR_VAR 0 3
82079: PUSH
82080: LD_EXP 141
82084: PUSH
82085: LD_VAR 0 4
82089: ARRAY
82090: PUSH
82091: FOR_IN
82092: IFFALSE 82118
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82094: LD_VAR 0 3
82098: PUSH
82099: LD_INT 1
82101: ARRAY
82102: PPUSH
82103: LD_VAR 0 3
82107: PUSH
82108: LD_INT 2
82110: ARRAY
82111: PPUSH
82112: CALL_OW 235
82116: GO 82091
82118: POP
82119: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82120: LD_ADDR_EXP 141
82124: PUSH
82125: LD_EXP 141
82129: PPUSH
82130: LD_VAR 0 4
82134: PPUSH
82135: EMPTY
82136: PPUSH
82137: CALL_OW 1
82141: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82142: LD_VAR 0 1
82146: PPUSH
82147: LD_INT 0
82149: PPUSH
82150: CALL_OW 505
// end ; end ;
82154: LD_VAR 0 2
82158: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82159: LD_INT 0
82161: PPUSH
82162: PPUSH
82163: PPUSH
// if not hack in hackTanks or not vehicles then
82164: LD_VAR 0 1
82168: PUSH
82169: LD_EXP 140
82173: IN
82174: NOT
82175: PUSH
82176: LD_VAR 0 2
82180: NOT
82181: OR
82182: IFFALSE 82186
// exit ;
82184: GO 82461
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82186: LD_ADDR_VAR 0 2
82190: PUSH
82191: LD_VAR 0 1
82195: PPUSH
82196: LD_VAR 0 2
82200: PPUSH
82201: LD_INT 1
82203: PPUSH
82204: LD_INT 1
82206: PPUSH
82207: CALL 46540 0 4
82211: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82212: LD_ADDR_VAR 0 5
82216: PUSH
82217: LD_EXP 140
82221: PPUSH
82222: LD_VAR 0 1
82226: PPUSH
82227: CALL 45890 0 2
82231: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82232: LD_EXP 141
82236: PUSH
82237: LD_VAR 0 5
82241: ARRAY
82242: PUSH
82243: LD_EXP 142
82247: LESS
82248: IFFALSE 82437
// begin for i := 1 to vehicles do
82250: LD_ADDR_VAR 0 4
82254: PUSH
82255: DOUBLE
82256: LD_INT 1
82258: DEC
82259: ST_TO_ADDR
82260: LD_VAR 0 2
82264: PUSH
82265: FOR_TO
82266: IFFALSE 82435
// begin if hackTanksCaptured [ index ] = hackLimit then
82268: LD_EXP 141
82272: PUSH
82273: LD_VAR 0 5
82277: ARRAY
82278: PUSH
82279: LD_EXP 142
82283: EQUAL
82284: IFFALSE 82288
// break ;
82286: GO 82435
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82288: LD_ADDR_EXP 144
82292: PUSH
82293: LD_EXP 144
82297: PPUSH
82298: LD_VAR 0 5
82302: PPUSH
82303: LD_EXP 144
82307: PUSH
82308: LD_VAR 0 5
82312: ARRAY
82313: PUSH
82314: LD_INT 1
82316: PLUS
82317: PPUSH
82318: CALL_OW 1
82322: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82323: LD_ADDR_EXP 141
82327: PUSH
82328: LD_EXP 141
82332: PPUSH
82333: LD_VAR 0 5
82337: PUSH
82338: LD_EXP 141
82342: PUSH
82343: LD_VAR 0 5
82347: ARRAY
82348: PUSH
82349: LD_INT 1
82351: PLUS
82352: PUSH
82353: EMPTY
82354: LIST
82355: LIST
82356: PPUSH
82357: LD_VAR 0 2
82361: PUSH
82362: LD_VAR 0 4
82366: ARRAY
82367: PUSH
82368: LD_VAR 0 2
82372: PUSH
82373: LD_VAR 0 4
82377: ARRAY
82378: PPUSH
82379: CALL_OW 255
82383: PUSH
82384: EMPTY
82385: LIST
82386: LIST
82387: PPUSH
82388: CALL 46105 0 3
82392: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82393: LD_VAR 0 2
82397: PUSH
82398: LD_VAR 0 4
82402: ARRAY
82403: PPUSH
82404: LD_VAR 0 1
82408: PPUSH
82409: CALL_OW 255
82413: PPUSH
82414: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
82418: LD_VAR 0 2
82422: PUSH
82423: LD_VAR 0 4
82427: ARRAY
82428: PPUSH
82429: CALL_OW 141
// end ;
82433: GO 82265
82435: POP
82436: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82437: LD_VAR 0 1
82441: PPUSH
82442: LD_EXP 141
82446: PUSH
82447: LD_VAR 0 5
82451: ARRAY
82452: PUSH
82453: LD_INT 0
82455: PLUS
82456: PPUSH
82457: CALL_OW 505
// end ;
82461: LD_VAR 0 3
82465: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
82466: LD_INT 0
82468: PPUSH
82469: PPUSH
82470: PPUSH
82471: PPUSH
// if not hack in hackTanks then
82472: LD_VAR 0 1
82476: PUSH
82477: LD_EXP 140
82481: IN
82482: NOT
82483: IFFALSE 82487
// exit ;
82485: GO 82727
// index := GetElementIndex ( hackTanks , hack ) ;
82487: LD_ADDR_VAR 0 4
82491: PUSH
82492: LD_EXP 140
82496: PPUSH
82497: LD_VAR 0 1
82501: PPUSH
82502: CALL 45890 0 2
82506: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82507: LD_ADDR_VAR 0 3
82511: PUSH
82512: DOUBLE
82513: LD_EXP 141
82517: PUSH
82518: LD_VAR 0 4
82522: ARRAY
82523: INC
82524: ST_TO_ADDR
82525: LD_INT 1
82527: PUSH
82528: FOR_DOWNTO
82529: IFFALSE 82701
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82531: LD_ADDR_VAR 0 5
82535: PUSH
82536: LD_EXP 141
82540: PUSH
82541: LD_VAR 0 4
82545: ARRAY
82546: PUSH
82547: LD_VAR 0 3
82551: ARRAY
82552: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82553: LD_VAR 0 5
82557: PUSH
82558: LD_INT 1
82560: ARRAY
82561: PPUSH
82562: CALL_OW 302
82566: NOT
82567: PUSH
82568: LD_VAR 0 5
82572: PUSH
82573: LD_INT 1
82575: ARRAY
82576: PPUSH
82577: CALL_OW 255
82581: PUSH
82582: LD_VAR 0 1
82586: PPUSH
82587: CALL_OW 255
82591: NONEQUAL
82592: OR
82593: IFFALSE 82699
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82595: LD_VAR 0 5
82599: PUSH
82600: LD_INT 1
82602: ARRAY
82603: PPUSH
82604: CALL_OW 305
82608: PUSH
82609: LD_VAR 0 5
82613: PUSH
82614: LD_INT 1
82616: ARRAY
82617: PPUSH
82618: CALL_OW 255
82622: PUSH
82623: LD_VAR 0 1
82627: PPUSH
82628: CALL_OW 255
82632: EQUAL
82633: AND
82634: IFFALSE 82658
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82636: LD_VAR 0 5
82640: PUSH
82641: LD_INT 1
82643: ARRAY
82644: PPUSH
82645: LD_VAR 0 5
82649: PUSH
82650: LD_INT 2
82652: ARRAY
82653: PPUSH
82654: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
82658: LD_ADDR_EXP 141
82662: PUSH
82663: LD_EXP 141
82667: PPUSH
82668: LD_VAR 0 4
82672: PPUSH
82673: LD_EXP 141
82677: PUSH
82678: LD_VAR 0 4
82682: ARRAY
82683: PPUSH
82684: LD_VAR 0 3
82688: PPUSH
82689: CALL_OW 3
82693: PPUSH
82694: CALL_OW 1
82698: ST_TO_ADDR
// end ; end ;
82699: GO 82528
82701: POP
82702: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82703: LD_VAR 0 1
82707: PPUSH
82708: LD_EXP 141
82712: PUSH
82713: LD_VAR 0 4
82717: ARRAY
82718: PUSH
82719: LD_INT 0
82721: PLUS
82722: PPUSH
82723: CALL_OW 505
// end ;
82727: LD_VAR 0 2
82731: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
82732: LD_INT 0
82734: PPUSH
82735: PPUSH
82736: PPUSH
82737: PPUSH
// if not hack in hackTanks then
82738: LD_VAR 0 1
82742: PUSH
82743: LD_EXP 140
82747: IN
82748: NOT
82749: IFFALSE 82753
// exit ;
82751: GO 82838
// index := GetElementIndex ( hackTanks , hack ) ;
82753: LD_ADDR_VAR 0 5
82757: PUSH
82758: LD_EXP 140
82762: PPUSH
82763: LD_VAR 0 1
82767: PPUSH
82768: CALL 45890 0 2
82772: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
82773: LD_ADDR_VAR 0 4
82777: PUSH
82778: DOUBLE
82779: LD_INT 1
82781: DEC
82782: ST_TO_ADDR
82783: LD_EXP 141
82787: PUSH
82788: LD_VAR 0 5
82792: ARRAY
82793: PUSH
82794: FOR_TO
82795: IFFALSE 82836
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
82797: LD_EXP 141
82801: PUSH
82802: LD_VAR 0 5
82806: ARRAY
82807: PUSH
82808: LD_VAR 0 4
82812: ARRAY
82813: PUSH
82814: LD_INT 1
82816: ARRAY
82817: PUSH
82818: LD_VAR 0 2
82822: EQUAL
82823: IFFALSE 82834
// KillUnit ( vehicle ) ;
82825: LD_VAR 0 2
82829: PPUSH
82830: CALL_OW 66
82834: GO 82794
82836: POP
82837: POP
// end ;
82838: LD_VAR 0 3
82842: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
82843: LD_EXP 145
82847: NOT
82848: IFFALSE 82883
82850: GO 82852
82852: DISABLE
// begin initMiner := true ;
82853: LD_ADDR_EXP 145
82857: PUSH
82858: LD_INT 1
82860: ST_TO_ADDR
// minersList := [ ] ;
82861: LD_ADDR_EXP 146
82865: PUSH
82866: EMPTY
82867: ST_TO_ADDR
// minerMinesList := [ ] ;
82868: LD_ADDR_EXP 147
82872: PUSH
82873: EMPTY
82874: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
82875: LD_ADDR_EXP 148
82879: PUSH
82880: LD_INT 5
82882: ST_TO_ADDR
// end ;
82883: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
82884: LD_EXP 145
82888: PUSH
82889: LD_INT 34
82891: PUSH
82892: LD_EXP 125
82896: PUSH
82897: EMPTY
82898: LIST
82899: LIST
82900: PPUSH
82901: CALL_OW 69
82905: AND
82906: IFFALSE 83369
82908: GO 82910
82910: DISABLE
82911: LD_INT 0
82913: PPUSH
82914: PPUSH
82915: PPUSH
82916: PPUSH
// begin enable ;
82917: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
82918: LD_ADDR_VAR 0 1
82922: PUSH
82923: LD_INT 34
82925: PUSH
82926: LD_EXP 125
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: PPUSH
82935: CALL_OW 69
82939: PUSH
82940: FOR_IN
82941: IFFALSE 83013
// begin if not i in minersList then
82943: LD_VAR 0 1
82947: PUSH
82948: LD_EXP 146
82952: IN
82953: NOT
82954: IFFALSE 83011
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
82956: LD_ADDR_EXP 146
82960: PUSH
82961: LD_EXP 146
82965: PPUSH
82966: LD_EXP 146
82970: PUSH
82971: LD_INT 1
82973: PLUS
82974: PPUSH
82975: LD_VAR 0 1
82979: PPUSH
82980: CALL_OW 1
82984: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
82985: LD_ADDR_EXP 147
82989: PUSH
82990: LD_EXP 147
82994: PPUSH
82995: LD_EXP 147
82999: PUSH
83000: LD_INT 1
83002: PLUS
83003: PPUSH
83004: EMPTY
83005: PPUSH
83006: CALL_OW 1
83010: ST_TO_ADDR
// end end ;
83011: GO 82940
83013: POP
83014: POP
// for i := minerMinesList downto 1 do
83015: LD_ADDR_VAR 0 1
83019: PUSH
83020: DOUBLE
83021: LD_EXP 147
83025: INC
83026: ST_TO_ADDR
83027: LD_INT 1
83029: PUSH
83030: FOR_DOWNTO
83031: IFFALSE 83367
// begin if IsLive ( minersList [ i ] ) then
83033: LD_EXP 146
83037: PUSH
83038: LD_VAR 0 1
83042: ARRAY
83043: PPUSH
83044: CALL_OW 300
83048: IFFALSE 83076
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83050: LD_EXP 146
83054: PUSH
83055: LD_VAR 0 1
83059: ARRAY
83060: PPUSH
83061: LD_EXP 147
83065: PUSH
83066: LD_VAR 0 1
83070: ARRAY
83071: PPUSH
83072: CALL_OW 505
// if not minerMinesList [ i ] then
83076: LD_EXP 147
83080: PUSH
83081: LD_VAR 0 1
83085: ARRAY
83086: NOT
83087: IFFALSE 83091
// continue ;
83089: GO 83030
// for j := minerMinesList [ i ] downto 1 do
83091: LD_ADDR_VAR 0 2
83095: PUSH
83096: DOUBLE
83097: LD_EXP 147
83101: PUSH
83102: LD_VAR 0 1
83106: ARRAY
83107: INC
83108: ST_TO_ADDR
83109: LD_INT 1
83111: PUSH
83112: FOR_DOWNTO
83113: IFFALSE 83363
// begin side := GetSide ( minersList [ i ] ) ;
83115: LD_ADDR_VAR 0 3
83119: PUSH
83120: LD_EXP 146
83124: PUSH
83125: LD_VAR 0 1
83129: ARRAY
83130: PPUSH
83131: CALL_OW 255
83135: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83136: LD_ADDR_VAR 0 4
83140: PUSH
83141: LD_EXP 147
83145: PUSH
83146: LD_VAR 0 1
83150: ARRAY
83151: PUSH
83152: LD_VAR 0 2
83156: ARRAY
83157: PUSH
83158: LD_INT 1
83160: ARRAY
83161: PPUSH
83162: LD_EXP 147
83166: PUSH
83167: LD_VAR 0 1
83171: ARRAY
83172: PUSH
83173: LD_VAR 0 2
83177: ARRAY
83178: PUSH
83179: LD_INT 2
83181: ARRAY
83182: PPUSH
83183: CALL_OW 428
83187: ST_TO_ADDR
// if not tmp then
83188: LD_VAR 0 4
83192: NOT
83193: IFFALSE 83197
// continue ;
83195: GO 83112
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83197: LD_VAR 0 4
83201: PUSH
83202: LD_INT 81
83204: PUSH
83205: LD_VAR 0 3
83209: PUSH
83210: EMPTY
83211: LIST
83212: LIST
83213: PPUSH
83214: CALL_OW 69
83218: IN
83219: PUSH
83220: LD_EXP 147
83224: PUSH
83225: LD_VAR 0 1
83229: ARRAY
83230: PUSH
83231: LD_VAR 0 2
83235: ARRAY
83236: PUSH
83237: LD_INT 1
83239: ARRAY
83240: PPUSH
83241: LD_EXP 147
83245: PUSH
83246: LD_VAR 0 1
83250: ARRAY
83251: PUSH
83252: LD_VAR 0 2
83256: ARRAY
83257: PUSH
83258: LD_INT 2
83260: ARRAY
83261: PPUSH
83262: CALL_OW 458
83266: AND
83267: IFFALSE 83361
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83269: LD_EXP 147
83273: PUSH
83274: LD_VAR 0 1
83278: ARRAY
83279: PUSH
83280: LD_VAR 0 2
83284: ARRAY
83285: PUSH
83286: LD_INT 1
83288: ARRAY
83289: PPUSH
83290: LD_EXP 147
83294: PUSH
83295: LD_VAR 0 1
83299: ARRAY
83300: PUSH
83301: LD_VAR 0 2
83305: ARRAY
83306: PUSH
83307: LD_INT 2
83309: ARRAY
83310: PPUSH
83311: LD_VAR 0 3
83315: PPUSH
83316: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83320: LD_ADDR_EXP 147
83324: PUSH
83325: LD_EXP 147
83329: PPUSH
83330: LD_VAR 0 1
83334: PPUSH
83335: LD_EXP 147
83339: PUSH
83340: LD_VAR 0 1
83344: ARRAY
83345: PPUSH
83346: LD_VAR 0 2
83350: PPUSH
83351: CALL_OW 3
83355: PPUSH
83356: CALL_OW 1
83360: ST_TO_ADDR
// end ; end ;
83361: GO 83112
83363: POP
83364: POP
// end ;
83365: GO 83030
83367: POP
83368: POP
// end ;
83369: PPOPN 4
83371: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83372: LD_INT 0
83374: PPUSH
83375: PPUSH
// result := false ;
83376: LD_ADDR_VAR 0 4
83380: PUSH
83381: LD_INT 0
83383: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83384: LD_VAR 0 1
83388: PPUSH
83389: CALL_OW 264
83393: PUSH
83394: LD_EXP 125
83398: EQUAL
83399: NOT
83400: IFFALSE 83404
// exit ;
83402: GO 83644
// index := GetElementIndex ( minersList , unit ) ;
83404: LD_ADDR_VAR 0 5
83408: PUSH
83409: LD_EXP 146
83413: PPUSH
83414: LD_VAR 0 1
83418: PPUSH
83419: CALL 45890 0 2
83423: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
83424: LD_EXP 147
83428: PUSH
83429: LD_VAR 0 5
83433: ARRAY
83434: PUSH
83435: LD_EXP 148
83439: GREATEREQUAL
83440: IFFALSE 83444
// exit ;
83442: GO 83644
// ComMoveXY ( unit , x , y ) ;
83444: LD_VAR 0 1
83448: PPUSH
83449: LD_VAR 0 2
83453: PPUSH
83454: LD_VAR 0 3
83458: PPUSH
83459: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83463: LD_INT 35
83465: PPUSH
83466: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
83470: LD_VAR 0 1
83474: PPUSH
83475: LD_VAR 0 2
83479: PPUSH
83480: LD_VAR 0 3
83484: PPUSH
83485: CALL 76662 0 3
83489: NOT
83490: PUSH
83491: LD_VAR 0 1
83495: PPUSH
83496: CALL_OW 314
83500: AND
83501: IFFALSE 83505
// exit ;
83503: GO 83644
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83505: LD_VAR 0 2
83509: PPUSH
83510: LD_VAR 0 3
83514: PPUSH
83515: CALL_OW 428
83519: PUSH
83520: LD_VAR 0 1
83524: EQUAL
83525: PUSH
83526: LD_VAR 0 1
83530: PPUSH
83531: CALL_OW 314
83535: NOT
83536: AND
83537: IFFALSE 83463
// PlaySoundXY ( x , y , PlantMine ) ;
83539: LD_VAR 0 2
83543: PPUSH
83544: LD_VAR 0 3
83548: PPUSH
83549: LD_STRING PlantMine
83551: PPUSH
83552: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83556: LD_VAR 0 2
83560: PPUSH
83561: LD_VAR 0 3
83565: PPUSH
83566: LD_VAR 0 1
83570: PPUSH
83571: CALL_OW 255
83575: PPUSH
83576: LD_INT 0
83578: PPUSH
83579: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83583: LD_ADDR_EXP 147
83587: PUSH
83588: LD_EXP 147
83592: PPUSH
83593: LD_VAR 0 5
83597: PUSH
83598: LD_EXP 147
83602: PUSH
83603: LD_VAR 0 5
83607: ARRAY
83608: PUSH
83609: LD_INT 1
83611: PLUS
83612: PUSH
83613: EMPTY
83614: LIST
83615: LIST
83616: PPUSH
83617: LD_VAR 0 2
83621: PUSH
83622: LD_VAR 0 3
83626: PUSH
83627: EMPTY
83628: LIST
83629: LIST
83630: PPUSH
83631: CALL 46105 0 3
83635: ST_TO_ADDR
// result := true ;
83636: LD_ADDR_VAR 0 4
83640: PUSH
83641: LD_INT 1
83643: ST_TO_ADDR
// end ;
83644: LD_VAR 0 4
83648: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
83649: LD_INT 0
83651: PPUSH
83652: PPUSH
83653: PPUSH
// if not unit in minersList then
83654: LD_VAR 0 1
83658: PUSH
83659: LD_EXP 146
83663: IN
83664: NOT
83665: IFFALSE 83669
// exit ;
83667: GO 84061
// index := GetElementIndex ( minersList , unit ) ;
83669: LD_ADDR_VAR 0 6
83673: PUSH
83674: LD_EXP 146
83678: PPUSH
83679: LD_VAR 0 1
83683: PPUSH
83684: CALL 45890 0 2
83688: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
83689: LD_ADDR_VAR 0 5
83693: PUSH
83694: DOUBLE
83695: LD_EXP 147
83699: PUSH
83700: LD_VAR 0 6
83704: ARRAY
83705: INC
83706: ST_TO_ADDR
83707: LD_INT 1
83709: PUSH
83710: FOR_DOWNTO
83711: IFFALSE 83872
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
83713: LD_EXP 147
83717: PUSH
83718: LD_VAR 0 6
83722: ARRAY
83723: PUSH
83724: LD_VAR 0 5
83728: ARRAY
83729: PUSH
83730: LD_INT 1
83732: ARRAY
83733: PUSH
83734: LD_VAR 0 2
83738: EQUAL
83739: PUSH
83740: LD_EXP 147
83744: PUSH
83745: LD_VAR 0 6
83749: ARRAY
83750: PUSH
83751: LD_VAR 0 5
83755: ARRAY
83756: PUSH
83757: LD_INT 2
83759: ARRAY
83760: PUSH
83761: LD_VAR 0 3
83765: EQUAL
83766: AND
83767: IFFALSE 83870
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83769: LD_EXP 147
83773: PUSH
83774: LD_VAR 0 6
83778: ARRAY
83779: PUSH
83780: LD_VAR 0 5
83784: ARRAY
83785: PUSH
83786: LD_INT 1
83788: ARRAY
83789: PPUSH
83790: LD_EXP 147
83794: PUSH
83795: LD_VAR 0 6
83799: ARRAY
83800: PUSH
83801: LD_VAR 0 5
83805: ARRAY
83806: PUSH
83807: LD_INT 2
83809: ARRAY
83810: PPUSH
83811: LD_VAR 0 1
83815: PPUSH
83816: CALL_OW 255
83820: PPUSH
83821: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83825: LD_ADDR_EXP 147
83829: PUSH
83830: LD_EXP 147
83834: PPUSH
83835: LD_VAR 0 6
83839: PPUSH
83840: LD_EXP 147
83844: PUSH
83845: LD_VAR 0 6
83849: ARRAY
83850: PPUSH
83851: LD_VAR 0 5
83855: PPUSH
83856: CALL_OW 3
83860: PPUSH
83861: CALL_OW 1
83865: ST_TO_ADDR
// exit ;
83866: POP
83867: POP
83868: GO 84061
// end ; end ;
83870: GO 83710
83872: POP
83873: POP
// for i := minerMinesList [ index ] downto 1 do
83874: LD_ADDR_VAR 0 5
83878: PUSH
83879: DOUBLE
83880: LD_EXP 147
83884: PUSH
83885: LD_VAR 0 6
83889: ARRAY
83890: INC
83891: ST_TO_ADDR
83892: LD_INT 1
83894: PUSH
83895: FOR_DOWNTO
83896: IFFALSE 84059
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
83898: LD_EXP 147
83902: PUSH
83903: LD_VAR 0 6
83907: ARRAY
83908: PUSH
83909: LD_VAR 0 5
83913: ARRAY
83914: PUSH
83915: LD_INT 1
83917: ARRAY
83918: PPUSH
83919: LD_EXP 147
83923: PUSH
83924: LD_VAR 0 6
83928: ARRAY
83929: PUSH
83930: LD_VAR 0 5
83934: ARRAY
83935: PUSH
83936: LD_INT 2
83938: ARRAY
83939: PPUSH
83940: LD_VAR 0 2
83944: PPUSH
83945: LD_VAR 0 3
83949: PPUSH
83950: CALL_OW 298
83954: PUSH
83955: LD_INT 6
83957: LESS
83958: IFFALSE 84057
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83960: LD_EXP 147
83964: PUSH
83965: LD_VAR 0 6
83969: ARRAY
83970: PUSH
83971: LD_VAR 0 5
83975: ARRAY
83976: PUSH
83977: LD_INT 1
83979: ARRAY
83980: PPUSH
83981: LD_EXP 147
83985: PUSH
83986: LD_VAR 0 6
83990: ARRAY
83991: PUSH
83992: LD_VAR 0 5
83996: ARRAY
83997: PUSH
83998: LD_INT 2
84000: ARRAY
84001: PPUSH
84002: LD_VAR 0 1
84006: PPUSH
84007: CALL_OW 255
84011: PPUSH
84012: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84016: LD_ADDR_EXP 147
84020: PUSH
84021: LD_EXP 147
84025: PPUSH
84026: LD_VAR 0 6
84030: PPUSH
84031: LD_EXP 147
84035: PUSH
84036: LD_VAR 0 6
84040: ARRAY
84041: PPUSH
84042: LD_VAR 0 5
84046: PPUSH
84047: CALL_OW 3
84051: PPUSH
84052: CALL_OW 1
84056: ST_TO_ADDR
// end ; end ;
84057: GO 83895
84059: POP
84060: POP
// end ;
84061: LD_VAR 0 4
84065: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84066: LD_INT 0
84068: PPUSH
84069: PPUSH
84070: PPUSH
84071: PPUSH
84072: PPUSH
84073: PPUSH
84074: PPUSH
84075: PPUSH
84076: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84077: LD_VAR 0 1
84081: PPUSH
84082: CALL_OW 264
84086: PUSH
84087: LD_EXP 125
84091: EQUAL
84092: NOT
84093: PUSH
84094: LD_VAR 0 1
84098: PUSH
84099: LD_EXP 146
84103: IN
84104: NOT
84105: OR
84106: IFFALSE 84110
// exit ;
84108: GO 84432
// index := GetElementIndex ( minersList , unit ) ;
84110: LD_ADDR_VAR 0 6
84114: PUSH
84115: LD_EXP 146
84119: PPUSH
84120: LD_VAR 0 1
84124: PPUSH
84125: CALL 45890 0 2
84129: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84130: LD_ADDR_VAR 0 8
84134: PUSH
84135: LD_EXP 148
84139: PUSH
84140: LD_EXP 147
84144: PUSH
84145: LD_VAR 0 6
84149: ARRAY
84150: MINUS
84151: ST_TO_ADDR
// if not minesFreeAmount then
84152: LD_VAR 0 8
84156: NOT
84157: IFFALSE 84161
// exit ;
84159: GO 84432
// tmp := [ ] ;
84161: LD_ADDR_VAR 0 7
84165: PUSH
84166: EMPTY
84167: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84168: LD_ADDR_VAR 0 5
84172: PUSH
84173: DOUBLE
84174: LD_INT 1
84176: DEC
84177: ST_TO_ADDR
84178: LD_VAR 0 8
84182: PUSH
84183: FOR_TO
84184: IFFALSE 84379
// begin _d := rand ( 0 , 5 ) ;
84186: LD_ADDR_VAR 0 11
84190: PUSH
84191: LD_INT 0
84193: PPUSH
84194: LD_INT 5
84196: PPUSH
84197: CALL_OW 12
84201: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84202: LD_ADDR_VAR 0 12
84206: PUSH
84207: LD_INT 2
84209: PPUSH
84210: LD_INT 6
84212: PPUSH
84213: CALL_OW 12
84217: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84218: LD_ADDR_VAR 0 9
84222: PUSH
84223: LD_VAR 0 2
84227: PPUSH
84228: LD_VAR 0 11
84232: PPUSH
84233: LD_VAR 0 12
84237: PPUSH
84238: CALL_OW 272
84242: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84243: LD_ADDR_VAR 0 10
84247: PUSH
84248: LD_VAR 0 3
84252: PPUSH
84253: LD_VAR 0 11
84257: PPUSH
84258: LD_VAR 0 12
84262: PPUSH
84263: CALL_OW 273
84267: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84268: LD_VAR 0 9
84272: PPUSH
84273: LD_VAR 0 10
84277: PPUSH
84278: CALL_OW 488
84282: PUSH
84283: LD_VAR 0 9
84287: PUSH
84288: LD_VAR 0 10
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: PUSH
84297: LD_VAR 0 7
84301: IN
84302: NOT
84303: AND
84304: PUSH
84305: LD_VAR 0 9
84309: PPUSH
84310: LD_VAR 0 10
84314: PPUSH
84315: CALL_OW 458
84319: NOT
84320: AND
84321: IFFALSE 84363
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84323: LD_ADDR_VAR 0 7
84327: PUSH
84328: LD_VAR 0 7
84332: PPUSH
84333: LD_VAR 0 7
84337: PUSH
84338: LD_INT 1
84340: PLUS
84341: PPUSH
84342: LD_VAR 0 9
84346: PUSH
84347: LD_VAR 0 10
84351: PUSH
84352: EMPTY
84353: LIST
84354: LIST
84355: PPUSH
84356: CALL_OW 1
84360: ST_TO_ADDR
84361: GO 84377
// i := i - 1 ;
84363: LD_ADDR_VAR 0 5
84367: PUSH
84368: LD_VAR 0 5
84372: PUSH
84373: LD_INT 1
84375: MINUS
84376: ST_TO_ADDR
// end ;
84377: GO 84183
84379: POP
84380: POP
// for i in tmp do
84381: LD_ADDR_VAR 0 5
84385: PUSH
84386: LD_VAR 0 7
84390: PUSH
84391: FOR_IN
84392: IFFALSE 84430
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84394: LD_VAR 0 1
84398: PPUSH
84399: LD_VAR 0 5
84403: PUSH
84404: LD_INT 1
84406: ARRAY
84407: PPUSH
84408: LD_VAR 0 5
84412: PUSH
84413: LD_INT 2
84415: ARRAY
84416: PPUSH
84417: CALL 83372 0 3
84421: NOT
84422: IFFALSE 84428
// exit ;
84424: POP
84425: POP
84426: GO 84432
84428: GO 84391
84430: POP
84431: POP
// end ;
84432: LD_VAR 0 4
84436: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
84437: LD_INT 0
84439: PPUSH
84440: PPUSH
84441: PPUSH
84442: PPUSH
84443: PPUSH
84444: PPUSH
84445: PPUSH
// if not GetClass ( unit ) = class_sniper then
84446: LD_VAR 0 1
84450: PPUSH
84451: CALL_OW 257
84455: PUSH
84456: LD_INT 5
84458: EQUAL
84459: NOT
84460: IFFALSE 84464
// exit ;
84462: GO 84852
// dist := 8 ;
84464: LD_ADDR_VAR 0 5
84468: PUSH
84469: LD_INT 8
84471: ST_TO_ADDR
// viewRange := 12 ;
84472: LD_ADDR_VAR 0 7
84476: PUSH
84477: LD_INT 12
84479: ST_TO_ADDR
// side := GetSide ( unit ) ;
84480: LD_ADDR_VAR 0 6
84484: PUSH
84485: LD_VAR 0 1
84489: PPUSH
84490: CALL_OW 255
84494: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84495: LD_INT 61
84497: PPUSH
84498: LD_VAR 0 6
84502: PPUSH
84503: CALL_OW 321
84507: PUSH
84508: LD_INT 2
84510: EQUAL
84511: IFFALSE 84521
// viewRange := 16 ;
84513: LD_ADDR_VAR 0 7
84517: PUSH
84518: LD_INT 16
84520: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84521: LD_VAR 0 1
84525: PPUSH
84526: LD_VAR 0 2
84530: PPUSH
84531: LD_VAR 0 3
84535: PPUSH
84536: CALL_OW 297
84540: PUSH
84541: LD_VAR 0 5
84545: GREATER
84546: IFFALSE 84625
// begin ComMoveXY ( unit , x , y ) ;
84548: LD_VAR 0 1
84552: PPUSH
84553: LD_VAR 0 2
84557: PPUSH
84558: LD_VAR 0 3
84562: PPUSH
84563: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84567: LD_INT 35
84569: PPUSH
84570: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84574: LD_VAR 0 1
84578: PPUSH
84579: LD_VAR 0 2
84583: PPUSH
84584: LD_VAR 0 3
84588: PPUSH
84589: CALL 76662 0 3
84593: NOT
84594: IFFALSE 84598
// exit ;
84596: GO 84852
// until GetDistUnitXY ( unit , x , y ) < dist ;
84598: LD_VAR 0 1
84602: PPUSH
84603: LD_VAR 0 2
84607: PPUSH
84608: LD_VAR 0 3
84612: PPUSH
84613: CALL_OW 297
84617: PUSH
84618: LD_VAR 0 5
84622: LESS
84623: IFFALSE 84567
// end ; ComTurnXY ( unit , x , y ) ;
84625: LD_VAR 0 1
84629: PPUSH
84630: LD_VAR 0 2
84634: PPUSH
84635: LD_VAR 0 3
84639: PPUSH
84640: CALL_OW 118
// wait ( 5 ) ;
84644: LD_INT 5
84646: PPUSH
84647: CALL_OW 67
// _d := GetDir ( unit ) ;
84651: LD_ADDR_VAR 0 10
84655: PUSH
84656: LD_VAR 0 1
84660: PPUSH
84661: CALL_OW 254
84665: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
84666: LD_ADDR_VAR 0 8
84670: PUSH
84671: LD_VAR 0 1
84675: PPUSH
84676: CALL_OW 250
84680: PPUSH
84681: LD_VAR 0 10
84685: PPUSH
84686: LD_VAR 0 5
84690: PPUSH
84691: CALL_OW 272
84695: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
84696: LD_ADDR_VAR 0 9
84700: PUSH
84701: LD_VAR 0 1
84705: PPUSH
84706: CALL_OW 251
84710: PPUSH
84711: LD_VAR 0 10
84715: PPUSH
84716: LD_VAR 0 5
84720: PPUSH
84721: CALL_OW 273
84725: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84726: LD_VAR 0 8
84730: PPUSH
84731: LD_VAR 0 9
84735: PPUSH
84736: CALL_OW 488
84740: NOT
84741: IFFALSE 84745
// exit ;
84743: GO 84852
// ComAnimCustom ( unit , 1 ) ;
84745: LD_VAR 0 1
84749: PPUSH
84750: LD_INT 1
84752: PPUSH
84753: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
84757: LD_VAR 0 8
84761: PPUSH
84762: LD_VAR 0 9
84766: PPUSH
84767: LD_VAR 0 6
84771: PPUSH
84772: LD_VAR 0 7
84776: PPUSH
84777: CALL_OW 330
// repeat wait ( 1 ) ;
84781: LD_INT 1
84783: PPUSH
84784: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
84788: LD_VAR 0 1
84792: PPUSH
84793: CALL_OW 316
84797: PUSH
84798: LD_VAR 0 1
84802: PPUSH
84803: CALL_OW 314
84807: OR
84808: PUSH
84809: LD_VAR 0 1
84813: PPUSH
84814: CALL_OW 302
84818: NOT
84819: OR
84820: PUSH
84821: LD_VAR 0 1
84825: PPUSH
84826: CALL_OW 301
84830: OR
84831: IFFALSE 84781
// RemoveSeeing ( _x , _y , side ) ;
84833: LD_VAR 0 8
84837: PPUSH
84838: LD_VAR 0 9
84842: PPUSH
84843: LD_VAR 0 6
84847: PPUSH
84848: CALL_OW 331
// end ; end_of_file
84852: LD_VAR 0 4
84856: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84857: LD_VAR 0 1
84861: PUSH
84862: LD_INT 200
84864: DOUBLE
84865: GREATEREQUAL
84866: IFFALSE 84874
84868: LD_INT 299
84870: DOUBLE
84871: LESSEQUAL
84872: IFTRUE 84876
84874: GO 84908
84876: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84877: LD_VAR 0 1
84881: PPUSH
84882: LD_VAR 0 2
84886: PPUSH
84887: LD_VAR 0 3
84891: PPUSH
84892: LD_VAR 0 4
84896: PPUSH
84897: LD_VAR 0 5
84901: PPUSH
84902: CALL 80974 0 5
84906: GO 84985
84908: LD_INT 300
84910: DOUBLE
84911: GREATEREQUAL
84912: IFFALSE 84920
84914: LD_INT 399
84916: DOUBLE
84917: LESSEQUAL
84918: IFTRUE 84922
84920: GO 84984
84922: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84923: LD_VAR 0 1
84927: PPUSH
84928: LD_VAR 0 2
84932: PPUSH
84933: LD_VAR 0 3
84937: PPUSH
84938: LD_VAR 0 4
84942: PPUSH
84943: LD_VAR 0 5
84947: PPUSH
84948: LD_VAR 0 6
84952: PPUSH
84953: LD_VAR 0 7
84957: PPUSH
84958: LD_VAR 0 8
84962: PPUSH
84963: LD_VAR 0 9
84967: PPUSH
84968: LD_VAR 0 10
84972: PPUSH
84973: LD_VAR 0 11
84977: PPUSH
84978: CALL 39139 0 11
84982: GO 84985
84984: POP
// end ;
84985: PPOPN 11
84987: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84988: LD_VAR 0 1
84992: PPUSH
84993: LD_VAR 0 2
84997: PPUSH
84998: LD_VAR 0 3
85002: PPUSH
85003: LD_VAR 0 4
85007: PPUSH
85008: LD_VAR 0 5
85012: PPUSH
85013: CALL 80956 0 5
// end ;
85017: PPOPN 5
85019: END
