// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1075 0 0
// PrepareArabians ;
 313: CALL 4734 0 0
// Nef_PrepareNature ;
 317: CALL 27273 0 0
// MissionIntro ;
 321: CALL 6388 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 ] [ Difficulty ] ;
 464: LD_ADDR_EXP 28
 468: PUSH
 469: LD_INT 147000
 471: PUSH
 472: LD_INT 126000
 474: PUSH
 475: LD_INT 94500
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_OWVAR 67
 487: ARRAY
 488: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 ] [ Difficulty ] ;
 489: LD_ADDR_EXP 29
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 2
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: LIST
 507: PUSH
 508: LD_OWVAR 67
 512: ARRAY
 513: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 ] [ Difficulty ] ;
 514: LD_ADDR_EXP 30
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 31
 543: PUSH
 544: LD_INT 1
 546: PUSH
 547: LD_INT 2
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 32
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 2
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 33
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 1
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 ] [ Difficulty ] ;
 614: LD_ADDR_EXP 34
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 2
 624: PUSH
 625: LD_INT 3
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: LD_OWVAR 67
 637: ARRAY
 638: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 639: LD_ADDR_EXP 35
 643: PUSH
 644: LD_INT 106
 646: PUSH
 647: LD_INT 159
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 91
 656: PUSH
 657: LD_INT 130
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 75
 666: PUSH
 667: LD_INT 98
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 54
 676: PUSH
 677: LD_INT 60
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 86
 686: PUSH
 687: LD_INT 54
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 128
 696: PUSH
 697: LD_INT 42
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PUSH
 704: LD_INT 142
 706: PUSH
 707: LD_INT 29
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 ] [ Difficulty ] ;
 723: LD_ADDR_EXP 36
 727: PUSH
 728: LD_INT 200
 730: PUSH
 731: LD_INT 150
 733: PUSH
 734: LD_INT 100
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: LD_OWVAR 67
 746: ARRAY
 747: ST_TO_ADDR
// end ;
 748: LD_VAR 0 1
 752: RET
// every 0 0$1 trigger debugMode do var i ;
 753: LD_EXP 26
 757: IFFALSE 1072
 759: GO 761
 761: DISABLE
 762: LD_INT 0
 764: PPUSH
// begin enable ;
 765: ENABLE
// FogOff ( your_side ) ;
 766: LD_OWVAR 2
 770: PPUSH
 771: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 775: LD_ADDR_VAR 0 1
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_OWVAR 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: LD_INT 21
 797: PUSH
 798: LD_INT 1
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 21
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 846
// SetLives ( i , 1000 ) ;
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 1000
 839: PPUSH
 840: CALL_OW 234
 844: GO 829
 846: POP
 847: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 848: LD_ADDR_VAR 0 1
 852: PUSH
 853: LD_INT 22
 855: PUSH
 856: LD_OWVAR 2
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 21
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: PUSH
 884: FOR_IN
 885: IFFALSE 949
// begin SetSkill ( i , skill_combat , 10 ) ;
 887: LD_VAR 0 1
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 10
 897: PPUSH
 898: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 10
 912: PPUSH
 913: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 917: LD_VAR 0 1
 921: PPUSH
 922: LD_INT 3
 924: PPUSH
 925: LD_INT 10
 927: PPUSH
 928: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 932: LD_VAR 0 1
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 10
 942: PPUSH
 943: CALL_OW 237
// end ;
 947: GO 884
 949: POP
 950: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 951: LD_ADDR_VAR 0 1
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_OWVAR 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 2
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 30
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PUSH
1005: FOR_IN
1006: IFFALSE 1070
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1008: LD_VAR 0 1
1012: PPUSH
1013: CALL_OW 274
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 9999
1023: PPUSH
1024: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1028: LD_VAR 0 1
1032: PPUSH
1033: CALL_OW 274
1037: PPUSH
1038: LD_INT 2
1040: PPUSH
1041: LD_INT 9999
1043: PPUSH
1044: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1048: LD_VAR 0 1
1052: PPUSH
1053: CALL_OW 274
1057: PPUSH
1058: LD_INT 3
1060: PPUSH
1061: LD_INT 9999
1063: PPUSH
1064: CALL_OW 277
// end ;
1068: GO 1005
1070: POP
1071: POP
// end ; end_of_file
1072: PPOPN 1
1074: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1075: LD_INT 0
1077: PPUSH
// vsevolodTeam = [ ] ;
1078: LD_ADDR_EXP 52
1082: PUSH
1083: EMPTY
1084: ST_TO_ADDR
// PrepareYashin ;
1085: CALL 3665 0 0
// if savedVsevolod then
1089: LD_EXP 1
1093: IFFALSE 1115
// begin PrepareVsevolodBase ;
1095: CALL 4128 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1099: LD_INT 1
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL 1293 0 2
// SpawnVsevolodTeamInBase ;
1109: CALL 4411 0 0
// end else
1113: GO 1129
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1115: LD_INT 2
1117: PPUSH
1118: LD_INT 5
1120: PPUSH
1121: CALL 1293 0 2
// SpawnPlatonovReinforces ;
1125: CALL 3708 0 0
// end ; if matPredStatus = state_researched then
1129: LD_EXP 4
1133: PUSH
1134: LD_INT 2
1136: EQUAL
1137: IFFALSE 1152
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1139: LD_INT 9
1141: PPUSH
1142: LD_INT 3
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 322
// end ;
1152: LD_VAR 0 1
1156: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1157: LD_INT 0
1159: PPUSH
// uc_side = 3 ;
1160: LD_ADDR_OWVAR 20
1164: PUSH
1165: LD_INT 3
1167: ST_TO_ADDR
// uc_nation = 3 ;
1168: LD_ADDR_OWVAR 21
1172: PUSH
1173: LD_INT 3
1175: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1176: LD_ADDR_EXP 55
1180: PUSH
1181: LD_STRING Xavier2
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL 12122 0 3
1194: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1195: LD_EXP 55
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1209: LD_EXP 55
1213: PPUSH
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 48
// end ;
1231: LD_VAR 0 4
1235: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1236: LD_INT 0
1238: PPUSH
// uc_side = 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation = 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1255: LD_ADDR_EXP 55
1259: PUSH
1260: LD_STRING Xavier2
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: CALL 12122 0 3
1273: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1274: LD_EXP 55
1278: PPUSH
1279: LD_VAR 0 1
1283: PPUSH
1284: CALL_OW 52
// end ;
1288: LD_VAR 0 2
1292: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1293: LD_INT 0
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
1300: PPUSH
// uc_side = 3 ;
1301: LD_ADDR_OWVAR 20
1305: PUSH
1306: LD_INT 3
1308: ST_TO_ADDR
// uc_nation = 3 ;
1309: LD_ADDR_OWVAR 21
1313: PUSH
1314: LD_INT 3
1316: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1317: LD_ADDR_EXP 37
1321: PUSH
1322: LD_STRING Burlak
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL 12122 0 3
1335: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1336: LD_ADDR_EXP 42
1340: PUSH
1341: LD_STRING Titov
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL 12122 0 3
1354: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1355: LD_EXP 42
1359: NOT
1360: PUSH
1361: LD_STRING 06_VSTitov
1363: PPUSH
1364: CALL_OW 28
1368: AND
1369: IFFALSE 1406
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1371: LD_ADDR_EXP 42
1375: PUSH
1376: LD_STRING VSTitov
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL 12122 0 3
1389: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1390: LD_ADDR_EXP 52
1394: PUSH
1395: LD_EXP 52
1399: PUSH
1400: LD_EXP 42
1404: ADD
1405: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1406: LD_ADDR_EXP 43
1410: PUSH
1411: LD_STRING Dolgov
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL 12122 0 3
1424: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1425: LD_EXP 43
1429: NOT
1430: PUSH
1431: LD_STRING 06_VSDolgov
1433: PPUSH
1434: CALL_OW 28
1438: AND
1439: IFFALSE 1476
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1441: LD_ADDR_EXP 43
1445: PUSH
1446: LD_STRING VSDolgov
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL 12122 0 3
1459: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1460: LD_ADDR_EXP 52
1464: PUSH
1465: LD_EXP 52
1469: PUSH
1470: LD_EXP 43
1474: ADD
1475: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1476: LD_ADDR_EXP 44
1480: PUSH
1481: LD_STRING Lipshchin
1483: PPUSH
1484: LD_INT 1
1486: PPUSH
1487: LD_INT 0
1489: PPUSH
1490: CALL 12122 0 3
1494: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1495: LD_EXP 44
1499: NOT
1500: PUSH
1501: LD_STRING 06_VSLipshchin
1503: PPUSH
1504: CALL_OW 28
1508: AND
1509: IFFALSE 1546
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1511: LD_ADDR_EXP 44
1515: PUSH
1516: LD_STRING VSLipshchin
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL 12122 0 3
1529: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1530: LD_ADDR_EXP 52
1534: PUSH
1535: LD_EXP 52
1539: PUSH
1540: LD_EXP 44
1544: ADD
1545: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1546: LD_ADDR_EXP 38
1550: PUSH
1551: LD_STRING Karamazov
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: LD_INT 0
1559: PPUSH
1560: CALL 12122 0 3
1564: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1565: LD_EXP 38
1569: NOT
1570: PUSH
1571: LD_STRING 06_VSKaramazov
1573: PPUSH
1574: CALL_OW 28
1578: AND
1579: IFFALSE 1616
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1581: LD_ADDR_EXP 38
1585: PUSH
1586: LD_STRING VSKaramazov
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL 12122 0 3
1599: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1600: LD_ADDR_EXP 52
1604: PUSH
1605: LD_EXP 52
1609: PUSH
1610: LD_EXP 38
1614: ADD
1615: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1616: LD_ADDR_EXP 39
1620: PUSH
1621: LD_STRING Petrovova
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: CALL 12122 0 3
1634: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1635: LD_EXP 39
1639: NOT
1640: PUSH
1641: LD_STRING 06_VSPetrovova
1643: PPUSH
1644: CALL_OW 28
1648: AND
1649: IFFALSE 1686
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1651: LD_ADDR_EXP 39
1655: PUSH
1656: LD_STRING VSPetrovova
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 12122 0 3
1669: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1670: LD_ADDR_EXP 52
1674: PUSH
1675: LD_EXP 52
1679: PUSH
1680: LD_EXP 39
1684: ADD
1685: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1686: LD_ADDR_EXP 40
1690: PUSH
1691: LD_STRING Gleb
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 12122 0 3
1704: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1705: LD_EXP 40
1709: NOT
1710: PUSH
1711: LD_STRING 06_VSGleb
1713: PPUSH
1714: CALL_OW 28
1718: AND
1719: IFFALSE 1756
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1721: LD_ADDR_EXP 40
1725: PUSH
1726: LD_STRING VSGleb
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 12122 0 3
1739: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1740: LD_ADDR_EXP 52
1744: PUSH
1745: LD_EXP 52
1749: PUSH
1750: LD_EXP 40
1754: ADD
1755: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1756: LD_ADDR_EXP 41
1760: PUSH
1761: LD_STRING Petrosyan
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 12122 0 3
1774: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1775: LD_EXP 41
1779: NOT
1780: PUSH
1781: LD_STRING 06_VSPetrosyan
1783: PPUSH
1784: CALL_OW 28
1788: AND
1789: IFFALSE 1826
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1791: LD_ADDR_EXP 41
1795: PUSH
1796: LD_STRING VSPetrosyan
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 0
1804: PPUSH
1805: CALL 12122 0 3
1809: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1810: LD_ADDR_EXP 52
1814: PUSH
1815: LD_EXP 52
1819: PUSH
1820: LD_EXP 41
1824: ADD
1825: ST_TO_ADDR
// end ; if savedVsevolod then
1826: LD_EXP 1
1830: IFFALSE 1940
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1832: LD_ADDR_EXP 45
1836: PUSH
1837: LD_STRING Kirilenkova
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 4
1845: PPUSH
1846: CALL 12122 0 3
1850: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1851: LD_ADDR_EXP 46
1855: PUSH
1856: LD_STRING Belkov
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: LD_INT 1
1864: PPUSH
1865: CALL 12122 0 3
1869: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1870: LD_ADDR_EXP 47
1874: PUSH
1875: LD_STRING Belkov2
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_INT 1
1883: PPUSH
1884: CALL 12122 0 3
1888: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1889: LD_ADDR_EXP 48
1893: PUSH
1894: LD_STRING Vsevolod
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: CALL 12122 0 3
1907: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1908: LD_EXP 48
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1923: LD_EXP 48
1927: PPUSH
1928: LD_INT 100
1930: PPUSH
1931: LD_INT 153
1933: PPUSH
1934: CALL_OW 118
// end else
1938: GO 1979
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1940: LD_ADDR_EXP 45
1944: PUSH
1945: LD_STRING 04_Kirilenkova
1947: PPUSH
1948: CALL_OW 34
1952: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING 04_Belkov
1960: PPUSH
1961: CALL_OW 34
1965: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1966: LD_ADDR_EXP 47
1970: PUSH
1971: LD_STRING 04_Belkov2
1973: PPUSH
1974: CALL_OW 34
1978: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1979: LD_ADDR_EXP 49
1983: PUSH
1984: LD_STRING Platonov
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 12122 0 3
1997: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
1998: LD_ADDR_EXP 50
2002: PUSH
2003: LD_STRING Popov
2005: PPUSH
2006: LD_INT 0
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 12122 0 3
2016: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2017: LD_ADDR_EXP 53
2021: PUSH
2022: LD_STRING 06_other_survivors
2024: PPUSH
2025: CALL_OW 31
2029: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2030: LD_ADDR_EXP 54
2034: PUSH
2035: LD_EXP 53
2039: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2040: LD_ADDR_EXP 52
2044: PUSH
2045: LD_EXP 52
2049: PUSH
2050: LD_STRING 06_other_survivors_with_vsevolod
2052: PPUSH
2053: CALL_OW 31
2057: ADD
2058: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2059: LD_ADDR_VAR 0 4
2063: PUSH
2064: DOUBLE
2065: LD_INT 1
2067: DEC
2068: ST_TO_ADDR
2069: LD_EXP 2
2073: PUSH
2074: FOR_TO
2075: IFFALSE 2572
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2077: LD_ADDR_OWVAR 21
2081: PUSH
2082: LD_EXP 2
2086: PUSH
2087: LD_VAR 0 4
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2097: LD_ADDR_OWVAR 37
2101: PUSH
2102: LD_EXP 2
2106: PUSH
2107: LD_VAR 0 4
2111: ARRAY
2112: PUSH
2113: LD_INT 2
2115: ARRAY
2116: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2117: LD_ADDR_OWVAR 39
2121: PUSH
2122: LD_EXP 2
2126: PUSH
2127: LD_VAR 0 4
2131: ARRAY
2132: PUSH
2133: LD_INT 3
2135: ARRAY
2136: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2137: LD_ADDR_OWVAR 38
2141: PUSH
2142: LD_EXP 2
2146: PUSH
2147: LD_VAR 0 4
2151: ARRAY
2152: PUSH
2153: LD_INT 4
2155: ARRAY
2156: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2157: LD_ADDR_OWVAR 40
2161: PUSH
2162: LD_EXP 2
2166: PUSH
2167: LD_VAR 0 4
2171: ARRAY
2172: PUSH
2173: LD_INT 5
2175: ARRAY
2176: ST_TO_ADDR
// uc_direction := dir ;
2177: LD_ADDR_OWVAR 24
2181: PUSH
2182: LD_VAR 0 2
2186: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2187: LD_ADDR_OWVAR 41
2191: PUSH
2192: LD_INT 60
2194: PPUSH
2195: LD_INT 70
2197: PPUSH
2198: CALL_OW 12
2202: ST_TO_ADDR
// car := CreateVehicle ;
2203: LD_ADDR_VAR 0 6
2207: PUSH
2208: CALL_OW 45
2212: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2213: LD_VAR 0 6
2217: PPUSH
2218: LD_VAR 0 1
2222: PPUSH
2223: LD_INT 0
2225: PPUSH
2226: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 4
2239: ARRAY
2240: PUSH
2241: LD_INT 6
2243: ARRAY
2244: PUSH
2245: LD_STRING Bur
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2270
2253: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2254: LD_EXP 37
2258: PPUSH
2259: LD_VAR 0 6
2263: PPUSH
2264: CALL_OW 52
2268: GO 2570
2270: LD_STRING Kar
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2295
2278: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2279: LD_EXP 38
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 52
2293: GO 2570
2295: LD_STRING Ptr
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2320
2303: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2304: LD_EXP 39
2308: PPUSH
2309: LD_VAR 0 6
2313: PPUSH
2314: CALL_OW 52
2318: GO 2570
2320: LD_STRING Glb
2322: DOUBLE
2323: EQUAL
2324: IFTRUE 2328
2326: GO 2345
2328: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2329: LD_EXP 40
2333: PPUSH
2334: LD_VAR 0 6
2338: PPUSH
2339: CALL_OW 52
2343: GO 2570
2345: LD_STRING Pet
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2370
2353: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2354: LD_EXP 41
2358: PPUSH
2359: LD_VAR 0 6
2363: PPUSH
2364: CALL_OW 52
2368: GO 2570
2370: LD_STRING Dol
2372: DOUBLE
2373: EQUAL
2374: IFTRUE 2378
2376: GO 2395
2378: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2379: LD_EXP 43
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
2393: GO 2570
2395: LD_STRING Lip
2397: DOUBLE
2398: EQUAL
2399: IFTRUE 2403
2401: GO 2420
2403: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2404: LD_EXP 44
2408: PPUSH
2409: LD_VAR 0 6
2413: PPUSH
2414: CALL_OW 52
2418: GO 2570
2420: LD_STRING Tit
2422: DOUBLE
2423: EQUAL
2424: IFTRUE 2428
2426: GO 2445
2428: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2429: LD_EXP 42
2433: PPUSH
2434: LD_VAR 0 6
2438: PPUSH
2439: CALL_OW 52
2443: GO 2570
2445: LD_STRING Kir
2447: DOUBLE
2448: EQUAL
2449: IFTRUE 2453
2451: GO 2470
2453: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2454: LD_EXP 45
2458: PPUSH
2459: LD_VAR 0 6
2463: PPUSH
2464: CALL_OW 52
2468: GO 2570
2470: LD_STRING Bel
2472: DOUBLE
2473: EQUAL
2474: IFTRUE 2478
2476: GO 2495
2478: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2479: LD_EXP 46
2483: PPUSH
2484: LD_VAR 0 6
2488: PPUSH
2489: CALL_OW 52
2493: GO 2570
2495: LD_STRING Bel2
2497: DOUBLE
2498: EQUAL
2499: IFTRUE 2503
2501: GO 2520
2503: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2504: LD_EXP 47
2508: PPUSH
2509: LD_VAR 0 6
2513: PPUSH
2514: CALL_OW 52
2518: GO 2570
2520: LD_STRING rand
2522: DOUBLE
2523: EQUAL
2524: IFTRUE 2528
2526: GO 2569
2528: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2529: LD_EXP 54
2533: PUSH
2534: LD_INT 1
2536: ARRAY
2537: PPUSH
2538: LD_VAR 0 6
2542: PPUSH
2543: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2547: LD_ADDR_EXP 54
2551: PUSH
2552: LD_EXP 54
2556: PUSH
2557: LD_EXP 54
2561: PUSH
2562: LD_INT 1
2564: ARRAY
2565: DIFF
2566: ST_TO_ADDR
// end ; end ;
2567: GO 2570
2569: POP
// end ;
2570: GO 2074
2572: POP
2573: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2574: LD_EXP 37
2578: PUSH
2579: LD_EXP 37
2583: PPUSH
2584: CALL_OW 305
2588: NOT
2589: AND
2590: PUSH
2591: LD_EXP 37
2595: PUSH
2596: LD_EXP 52
2600: IN
2601: NOT
2602: AND
2603: IFFALSE 2622
// PlaceUnitArea ( Burlak , area , false ) ;
2605: LD_EXP 37
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2622: LD_EXP 38
2626: PUSH
2627: LD_EXP 38
2631: PPUSH
2632: CALL_OW 305
2636: NOT
2637: AND
2638: PUSH
2639: LD_EXP 38
2643: PUSH
2644: LD_EXP 52
2648: IN
2649: NOT
2650: AND
2651: IFFALSE 2670
// PlaceUnitArea ( Karamazov , area , false ) ;
2653: LD_EXP 38
2657: PPUSH
2658: LD_VAR 0 1
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2670: LD_EXP 39
2674: PUSH
2675: LD_EXP 39
2679: PPUSH
2680: CALL_OW 305
2684: NOT
2685: AND
2686: PUSH
2687: LD_EXP 39
2691: PUSH
2692: LD_EXP 52
2696: IN
2697: NOT
2698: AND
2699: IFFALSE 2718
// PlaceUnitArea ( Petrovova , area , false ) ;
2701: LD_EXP 39
2705: PPUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2718: LD_EXP 40
2722: PUSH
2723: LD_EXP 40
2727: PPUSH
2728: CALL_OW 305
2732: NOT
2733: AND
2734: PUSH
2735: LD_EXP 40
2739: PUSH
2740: LD_EXP 52
2744: IN
2745: NOT
2746: AND
2747: IFFALSE 2766
// PlaceUnitArea ( Gleb , area , false ) ;
2749: LD_EXP 40
2753: PPUSH
2754: LD_VAR 0 1
2758: PPUSH
2759: LD_INT 0
2761: PPUSH
2762: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2766: LD_EXP 41
2770: PUSH
2771: LD_EXP 41
2775: PPUSH
2776: CALL_OW 305
2780: NOT
2781: AND
2782: PUSH
2783: LD_EXP 41
2787: PUSH
2788: LD_EXP 52
2792: IN
2793: NOT
2794: AND
2795: IFFALSE 2814
// PlaceUnitArea ( Petrosyan , area , false ) ;
2797: LD_EXP 41
2801: PPUSH
2802: LD_VAR 0 1
2806: PPUSH
2807: LD_INT 0
2809: PPUSH
2810: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2814: LD_EXP 43
2818: PUSH
2819: LD_EXP 43
2823: PPUSH
2824: CALL_OW 305
2828: NOT
2829: AND
2830: PUSH
2831: LD_EXP 43
2835: PUSH
2836: LD_EXP 52
2840: IN
2841: NOT
2842: AND
2843: IFFALSE 2862
// PlaceUnitArea ( Dolgov , area , false ) ;
2845: LD_EXP 43
2849: PPUSH
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2862: LD_EXP 44
2866: PUSH
2867: LD_EXP 44
2871: PPUSH
2872: CALL_OW 305
2876: NOT
2877: AND
2878: PUSH
2879: LD_EXP 44
2883: PUSH
2884: LD_EXP 52
2888: IN
2889: NOT
2890: AND
2891: IFFALSE 2910
// PlaceUnitArea ( Lipshchin , area , false ) ;
2893: LD_EXP 44
2897: PPUSH
2898: LD_VAR 0 1
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2910: LD_EXP 42
2914: PUSH
2915: LD_EXP 42
2919: PPUSH
2920: CALL_OW 305
2924: NOT
2925: AND
2926: PUSH
2927: LD_EXP 42
2931: PUSH
2932: LD_EXP 52
2936: IN
2937: NOT
2938: AND
2939: IFFALSE 2958
// PlaceUnitArea ( Titov , area , false ) ;
2941: LD_EXP 42
2945: PPUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2958: LD_EXP 45
2962: PUSH
2963: LD_EXP 45
2967: PPUSH
2968: CALL_OW 305
2972: NOT
2973: AND
2974: PUSH
2975: LD_EXP 45
2979: PUSH
2980: LD_EXP 52
2984: IN
2985: NOT
2986: AND
2987: PUSH
2988: LD_EXP 1
2992: AND
2993: IFFALSE 3012
// PlaceUnitArea ( Kirilenkova , area , false ) ;
2995: LD_EXP 45
2999: PPUSH
3000: LD_VAR 0 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3012: LD_EXP 46
3016: PUSH
3017: LD_EXP 46
3021: PPUSH
3022: CALL_OW 305
3026: NOT
3027: AND
3028: PUSH
3029: LD_EXP 46
3033: PUSH
3034: LD_EXP 52
3038: IN
3039: NOT
3040: AND
3041: PUSH
3042: LD_EXP 1
3046: AND
3047: IFFALSE 3066
// PlaceUnitArea ( Belkov , area , false ) ;
3049: LD_EXP 46
3053: PPUSH
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 0
3061: PPUSH
3062: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3066: LD_EXP 47
3070: PUSH
3071: LD_EXP 47
3075: PPUSH
3076: CALL_OW 305
3080: NOT
3081: AND
3082: PUSH
3083: LD_EXP 47
3087: PUSH
3088: LD_EXP 52
3092: IN
3093: NOT
3094: AND
3095: PUSH
3096: LD_EXP 1
3100: AND
3101: IFFALSE 3120
// PlaceUnitArea ( Belkov2 , area , false ) ;
3103: LD_EXP 47
3107: PPUSH
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 49
// for unit in survivorsToPlace do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_EXP 54
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3152
// PlaceUnitArea ( unit , area , false ) ;
3133: LD_VAR 0 5
3137: PPUSH
3138: LD_VAR 0 1
3142: PPUSH
3143: LD_INT 0
3145: PPUSH
3146: CALL_OW 49
3150: GO 3130
3152: POP
3153: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3154: LD_ADDR_VAR 0 7
3158: PUSH
3159: LD_INT 22
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 21
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 2
3181: PUSH
3182: LD_INT 34
3184: PUSH
3185: LD_INT 51
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 34
3194: PUSH
3195: LD_INT 32
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 34
3204: PUSH
3205: LD_INT 12
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: PPUSH
3223: CALL_OW 69
3227: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3228: LD_ADDR_VAR 0 8
3232: PUSH
3233: LD_INT 22
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 21
3245: PUSH
3246: LD_INT 2
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 34
3255: PUSH
3256: LD_INT 89
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: ST_TO_ADDR
// if cargoList then
3273: LD_VAR 0 7
3277: IFFALSE 3467
// for i = 1 to cargoList do
3279: LD_ADDR_VAR 0 4
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_VAR 0 7
3293: PUSH
3294: FOR_TO
3295: IFFALSE 3465
// if resourcesFrom06 then
3297: LD_EXP 3
3301: IFFALSE 3463
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3303: LD_EXP 3
3307: PUSH
3308: LD_VAR 0 4
3312: ARRAY
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: PUSH
3318: LD_INT 100
3320: GREATER
3321: NOT
3322: PUSH
3323: LD_EXP 3
3327: PUSH
3328: LD_VAR 0 4
3332: ARRAY
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PUSH
3338: LD_INT 100
3340: GREATER
3341: OR
3342: PUSH
3343: LD_EXP 3
3347: PUSH
3348: LD_VAR 0 4
3352: ARRAY
3353: PUSH
3354: LD_INT 3
3356: ARRAY
3357: PUSH
3358: LD_INT 100
3360: GREATER
3361: OR
3362: IFFALSE 3463
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3364: LD_VAR 0 7
3368: PUSH
3369: LD_VAR 0 4
3373: ARRAY
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: LD_EXP 3
3382: PUSH
3383: LD_VAR 0 4
3387: ARRAY
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PPUSH
3393: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3397: LD_VAR 0 7
3401: PUSH
3402: LD_VAR 0 4
3406: ARRAY
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_EXP 3
3415: PUSH
3416: LD_VAR 0 4
3420: ARRAY
3421: PUSH
3422: LD_INT 2
3424: ARRAY
3425: PPUSH
3426: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3430: LD_VAR 0 7
3434: PUSH
3435: LD_VAR 0 4
3439: ARRAY
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_EXP 3
3448: PUSH
3449: LD_VAR 0 4
3453: ARRAY
3454: PUSH
3455: LD_INT 3
3457: ARRAY
3458: PPUSH
3459: CALL_OW 291
// end ; end ;
3463: GO 3294
3465: POP
3466: POP
// if bigCargoList then
3467: LD_VAR 0 8
3471: IFFALSE 3660
// for i = 1 to bigCargoList do
3473: LD_ADDR_VAR 0 4
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_VAR 0 8
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3658
// if resourcesFrom06 then
3491: LD_EXP 3
3495: IFFALSE 3656
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3497: LD_EXP 3
3501: PUSH
3502: LD_VAR 0 4
3506: ARRAY
3507: PUSH
3508: LD_INT 1
3510: ARRAY
3511: PUSH
3512: LD_INT 100
3514: GREATER
3515: PUSH
3516: LD_EXP 3
3520: PUSH
3521: LD_VAR 0 4
3525: ARRAY
3526: PUSH
3527: LD_INT 2
3529: ARRAY
3530: PUSH
3531: LD_INT 100
3533: GREATER
3534: OR
3535: PUSH
3536: LD_EXP 3
3540: PUSH
3541: LD_VAR 0 4
3545: ARRAY
3546: PUSH
3547: LD_INT 3
3549: ARRAY
3550: PUSH
3551: LD_INT 100
3553: GREATER
3554: OR
3555: IFFALSE 3656
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3557: LD_VAR 0 8
3561: PUSH
3562: LD_VAR 0 4
3566: ARRAY
3567: PPUSH
3568: LD_INT 1
3570: PPUSH
3571: LD_EXP 3
3575: PUSH
3576: LD_VAR 0 4
3580: ARRAY
3581: PUSH
3582: LD_INT 1
3584: ARRAY
3585: PPUSH
3586: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3590: LD_VAR 0 8
3594: PUSH
3595: LD_VAR 0 4
3599: ARRAY
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: LD_EXP 3
3608: PUSH
3609: LD_VAR 0 4
3613: ARRAY
3614: PUSH
3615: LD_INT 2
3617: ARRAY
3618: PPUSH
3619: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3623: LD_VAR 0 8
3627: PUSH
3628: LD_VAR 0 4
3632: ARRAY
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 3
3641: PUSH
3642: LD_VAR 0 4
3646: ARRAY
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 291
// end ; end ;
3656: GO 3488
3658: POP
3659: POP
// end ;
3660: LD_VAR 0 3
3664: RET
// function PrepareYashin ; begin
3665: LD_INT 0
3667: PPUSH
// uc_side = 6 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 6
3675: ST_TO_ADDR
// uc_nation = 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3684: LD_ADDR_EXP 51
3688: PUSH
3689: LD_STRING Yashin
3691: PPUSH
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL 12122 0 3
3702: ST_TO_ADDR
// end ;
3703: LD_VAR 0 1
3707: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3708: LD_INT 0
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
// uc_side = 3 ;
3714: LD_ADDR_OWVAR 20
3718: PUSH
3719: LD_INT 3
3721: ST_TO_ADDR
// uc_nation = 3 ;
3722: LD_ADDR_OWVAR 21
3726: PUSH
3727: LD_INT 3
3729: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3730: LD_INT 0
3732: PPUSH
3733: LD_INT 4
3735: PPUSH
3736: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3740: LD_INT 22
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 1
3748: PPUSH
3749: LD_INT 43
3751: PUSH
3752: LD_INT 44
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 2
3764: PPUSH
3765: CALL_OW 12
3769: ARRAY
3770: PPUSH
3771: LD_INT 50
3773: PPUSH
3774: LD_INT 60
3776: PPUSH
3777: CALL_OW 12
3781: PPUSH
3782: CALL 45885 0 5
// veh = CreateVehicle ;
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: CALL_OW 45
3795: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3796: LD_VAR 0 4
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3808: LD_VAR 0 4
3812: PPUSH
3813: LD_INT 2
3815: PPUSH
3816: LD_INT 0
3818: PPUSH
3819: CALL_OW 49
// if Belkov then
3823: LD_EXP 46
3827: IFFALSE 3845
// PlaceHumanInUnit ( Belkov , veh ) else
3829: LD_EXP 46
3833: PPUSH
3834: LD_VAR 0 4
3838: PPUSH
3839: CALL_OW 52
3843: GO 3889
// if Difficulty = 1 or Difficulty = 2 then
3845: LD_OWVAR 67
3849: PUSH
3850: LD_INT 1
3852: EQUAL
3853: PUSH
3854: LD_OWVAR 67
3858: PUSH
3859: LD_INT 2
3861: EQUAL
3862: OR
3863: IFFALSE 3889
// begin un = CreateHuman ;
3865: LD_ADDR_VAR 0 3
3869: PUSH
3870: CALL_OW 44
3874: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_VAR 0 4
3884: PPUSH
3885: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3889: LD_INT 22
3891: PPUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: LD_INT 51
3900: PPUSH
3901: LD_INT 50
3903: PPUSH
3904: LD_INT 60
3906: PPUSH
3907: CALL_OW 12
3911: PPUSH
3912: CALL 45885 0 5
// veh = CreateVehicle ;
3916: LD_ADDR_VAR 0 4
3920: PUSH
3921: CALL_OW 45
3925: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 0
3933: PPUSH
3934: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_INT 2
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3953: LD_VAR 0 4
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 100
3963: PPUSH
3964: CALL_OW 290
// if Belkov2 then
3968: LD_EXP 47
3972: IFFALSE 3990
// PlaceHumanInUnit ( Belkov2 , veh ) else
3974: LD_EXP 47
3978: PPUSH
3979: LD_VAR 0 4
3983: PPUSH
3984: CALL_OW 52
3988: GO 4024
// if Difficulty = 1 then
3990: LD_OWVAR 67
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: IFFALSE 4024
// begin un = CreateHuman ;
4000: LD_ADDR_VAR 0 3
4004: PUSH
4005: CALL_OW 44
4009: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
// end ; if Kirilenkova then
4024: LD_EXP 45
4028: IFFALSE 4123
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4030: LD_INT 22
4032: PPUSH
4033: LD_INT 1
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 51
4041: PPUSH
4042: LD_INT 50
4044: PPUSH
4045: LD_INT 60
4047: PPUSH
4048: CALL_OW 12
4052: PPUSH
4053: CALL 45885 0 5
// veh = CreateVehicle ;
4057: LD_ADDR_VAR 0 4
4061: PUSH
4062: CALL_OW 45
4066: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4067: LD_VAR 0 4
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_INT 2
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4094: LD_VAR 0 4
4098: PPUSH
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 100
4104: PPUSH
4105: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4109: LD_EXP 45
4113: PPUSH
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 52
// end ; end ;
4123: LD_VAR 0 1
4127: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4133: LD_INT 67
4135: PPUSH
4136: LD_INT 115
4138: PPUSH
4139: LD_INT 3
4141: PPUSH
4142: CALL_OW 441
// uc_side = 3 ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_INT 3
4153: ST_TO_ADDR
// uc_nation = 3 ;
4154: LD_ADDR_OWVAR 21
4158: PUSH
4159: LD_INT 3
4161: ST_TO_ADDR
// bc_level = 5 ;
4162: LD_ADDR_OWVAR 43
4166: PUSH
4167: LD_INT 5
4169: ST_TO_ADDR
// bc_type = b_depot ;
4170: LD_ADDR_OWVAR 42
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 53
4185: PPUSH
4186: LD_INT 97
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: CALL_OW 47
4196: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4197: LD_VAR 0 3
4201: PPUSH
4202: LD_STRING gorkij
4204: PPUSH
4205: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4209: LD_VAR 0 3
4213: PPUSH
4214: CALL_OW 274
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_EXP 36
4226: PPUSH
4227: CALL_OW 277
// bc_type = b_lab_half ;
4231: LD_ADDR_OWVAR 42
4235: PUSH
4236: LD_INT 7
4238: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4239: LD_ADDR_OWVAR 44
4243: PUSH
4244: LD_INT 14
4246: ST_TO_ADDR
// if matPredStatus = state_researched then
4247: LD_EXP 4
4251: PUSH
4252: LD_INT 2
4254: EQUAL
4255: IFFALSE 4275
// begin bc_type = b_lab_full ;
4257: LD_ADDR_OWVAR 42
4261: PUSH
4262: LD_INT 8
4264: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4265: LD_ADDR_OWVAR 45
4269: PUSH
4270: LD_INT 12
4272: ST_TO_ADDR
4273: GO 4283
// bc_kind2 = b_lab_basic ;
4275: LD_ADDR_OWVAR 45
4279: PUSH
4280: LD_INT 9
4282: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4283: LD_INT 58
4285: PPUSH
4286: LD_INT 105
4288: PPUSH
4289: LD_INT 1
4291: PPUSH
4292: CALL_OW 47
// bc_type = b_armoury ;
4296: LD_ADDR_OWVAR 42
4300: PUSH
4301: LD_INT 4
4303: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4304: LD_INT 65
4306: PPUSH
4307: LD_INT 93
4309: PPUSH
4310: LD_INT 3
4312: PPUSH
4313: CALL_OW 47
// bc_type = b_oil_mine ;
4317: LD_ADDR_OWVAR 42
4321: PUSH
4322: LD_INT 29
4324: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4325: LD_INT 67
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 3
4333: PPUSH
4334: CALL_OW 47
// bc_type = b_oil_power ;
4338: LD_ADDR_OWVAR 42
4342: PUSH
4343: LD_INT 26
4345: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4346: LD_INT 68
4348: PPUSH
4349: LD_INT 104
4351: PPUSH
4352: LD_INT 4
4354: PPUSH
4355: CALL_OW 47
// bc_type = b_breastwork ;
4359: LD_ADDR_OWVAR 42
4363: PUSH
4364: LD_INT 31
4366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4367: LD_INT 60
4369: PPUSH
4370: LD_INT 91
4372: PPUSH
4373: LD_INT 3
4375: PPUSH
4376: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4380: LD_INT 73
4382: PPUSH
4383: LD_INT 112
4385: PPUSH
4386: LD_INT 5
4388: PPUSH
4389: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4393: LD_INT 66
4395: PPUSH
4396: LD_INT 118
4398: PPUSH
4399: LD_INT 5
4401: PPUSH
4402: CALL_OW 47
// end ;
4406: LD_VAR 0 1
4410: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4411: LD_INT 0
4413: PPUSH
4414: PPUSH
4415: PPUSH
4416: PPUSH
4417: PPUSH
// for unit in vsevolodTeam do
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: LD_EXP 52
4427: PUSH
4428: FOR_IN
4429: IFFALSE 4727
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_INT 22
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 21
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 30
4458: PUSH
4459: LD_INT 31
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PUSH
4476: FOR_IN
4477: IFFALSE 4519
// if not UnitsInside ( building ) then
4479: LD_VAR 0 4
4483: PPUSH
4484: CALL_OW 313
4488: NOT
4489: IFFALSE 4517
// begin PlaceHumanInBunker ( unit , building ) ;
4491: LD_VAR 0 2
4495: PPUSH
4496: LD_VAR 0 4
4500: PPUSH
4501: CALL 12724 0 2
// SetClass ( unit , 1 ) ;
4505: LD_VAR 0 2
4509: PPUSH
4510: LD_INT 1
4512: PPUSH
4513: CALL_OW 336
// end ;
4517: GO 4476
4519: POP
4520: POP
// if not IsInUnit ( unit ) then
4521: LD_VAR 0 2
4525: PPUSH
4526: CALL_OW 310
4530: NOT
4531: IFFALSE 4725
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 3
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 2
4560: PUSH
4561: LD_INT 30
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 30
4573: PUSH
4574: LD_INT 4
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 7
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4607: LD_ADDR_VAR 0 5
4611: PUSH
4612: LD_VAR 0 3
4616: PUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: CALL_OW 12
4629: ARRAY
4630: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4631: LD_VAR 0 2
4635: PPUSH
4636: LD_VAR 0 5
4640: PPUSH
4641: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4645: LD_VAR 0 5
4649: PPUSH
4650: CALL_OW 266
4654: PUSH
4655: LD_INT 0
4657: DOUBLE
4658: EQUAL
4659: IFTRUE 4663
4661: GO 4678
4663: POP
// SetClass ( unit , 2 ) ; b_armoury :
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_INT 2
4671: PPUSH
4672: CALL_OW 336
4676: GO 4725
4678: LD_INT 4
4680: DOUBLE
4681: EQUAL
4682: IFTRUE 4686
4684: GO 4701
4686: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4687: LD_VAR 0 2
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 336
4699: GO 4725
4701: LD_INT 7
4703: DOUBLE
4704: EQUAL
4705: IFTRUE 4709
4707: GO 4724
4709: POP
// SetClass ( unit , 4 ) ; end ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 4
4717: PPUSH
4718: CALL_OW 336
4722: GO 4725
4724: POP
// end ; end ;
4725: GO 4428
4727: POP
4728: POP
// end ; end_of_file
4729: LD_VAR 0 1
4733: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4734: LD_INT 0
4736: PPUSH
// remoteVehs = [ ] ;
4737: LD_ADDR_EXP 60
4741: PUSH
4742: EMPTY
4743: ST_TO_ADDR
// minesList = [ ] ;
4744: LD_ADDR_EXP 61
4748: PUSH
4749: EMPTY
4750: ST_TO_ADDR
// heikeGroup = [ ] ;
4751: LD_ADDR_EXP 58
4755: PUSH
4756: EMPTY
4757: ST_TO_ADDR
// PrepareXavierAr ;
4758: CALL 6281 0 0
// PrepareKabulBase ;
4762: CALL 5472 0 0
// end ;
4766: LD_VAR 0 1
4770: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
// solds = [ ] ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: EMPTY
4782: ST_TO_ADDR
// uc_side = 2 ;
4783: LD_ADDR_OWVAR 20
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// uc_nation = 2 ;
4791: LD_ADDR_OWVAR 21
4795: PUSH
4796: LD_INT 2
4798: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4799: LD_INT 0
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 381
// for i := 1 to 2 do
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: DOUBLE
4815: LD_INT 1
4817: DEC
4818: ST_TO_ADDR
4819: LD_INT 2
4821: PUSH
4822: FOR_TO
4823: IFFALSE 4882
// begin solds = solds ^ CreateHuman ;
4825: LD_ADDR_VAR 0 3
4829: PUSH
4830: LD_VAR 0 3
4834: PUSH
4835: CALL_OW 44
4839: ADD
4840: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4841: LD_VAR 0 3
4845: PUSH
4846: LD_VAR 0 2
4850: ARRAY
4851: PPUSH
4852: LD_INT 4
4854: PPUSH
4855: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4859: LD_VAR 0 3
4863: PUSH
4864: LD_VAR 0 2
4868: ARRAY
4869: PPUSH
4870: LD_INT 5
4872: PPUSH
4873: LD_INT 0
4875: PPUSH
4876: CALL_OW 49
// end ;
4880: GO 4822
4882: POP
4883: POP
// result = solds ;
4884: LD_ADDR_VAR 0 1
4888: PUSH
4889: LD_VAR 0 3
4893: ST_TO_ADDR
// end ;
4894: LD_VAR 0 1
4898: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
4903: PPUSH
4904: PPUSH
4905: PPUSH
4906: PPUSH
4907: PPUSH
4908: PPUSH
// uc_side = 8 ;
4909: LD_ADDR_OWVAR 20
4913: PUSH
4914: LD_INT 8
4916: ST_TO_ADDR
// uc_nation = 2 ;
4917: LD_ADDR_OWVAR 21
4921: PUSH
4922: LD_INT 2
4924: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4925: LD_ADDR_EXP 56
4929: PUSH
4930: LD_STRING Heike
4932: PPUSH
4933: LD_INT 0
4935: PPUSH
4936: LD_INT 0
4938: PPUSH
4939: CALL 12122 0 3
4943: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4944: LD_ADDR_VAR 0 5
4948: PUSH
4949: LD_INT 27
4951: PUSH
4952: LD_INT 28
4954: PUSH
4955: LD_INT 26
4957: PUSH
4958: LD_INT 23
4960: PUSH
4961: LD_INT 25
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
4971: LD_INT 14
4973: PPUSH
4974: LD_INT 1
4976: PPUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_VAR 0 5
4984: PUSH
4985: LD_INT 1
4987: PPUSH
4988: LD_VAR 0 5
4992: PPUSH
4993: CALL_OW 12
4997: ARRAY
4998: PPUSH
4999: LD_INT 65
5001: PPUSH
5002: CALL 45885 0 5
// heikeVehicle = CreateVehicle ;
5006: LD_ADDR_EXP 57
5010: PUSH
5011: CALL_OW 45
5015: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5016: LD_EXP 57
5020: PPUSH
5021: LD_INT 20
5023: PPUSH
5024: LD_INT 0
5026: PPUSH
5027: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5031: LD_EXP 57
5035: PPUSH
5036: LD_INT 1
5038: PPUSH
5039: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5043: LD_EXP 56
5047: PPUSH
5048: LD_EXP 57
5052: PPUSH
5053: CALL_OW 52
// uc_side = 2 ;
5057: LD_ADDR_OWVAR 20
5061: PUSH
5062: LD_INT 2
5064: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5065: LD_ADDR_VAR 0 6
5069: PUSH
5070: LD_EXP 29
5074: ST_TO_ADDR
// if not heikeHeavyLosses then
5075: LD_EXP 5
5079: NOT
5080: IFFALSE 5098
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5082: LD_ADDR_VAR 0 6
5086: PUSH
5087: LD_VAR 0 6
5091: PUSH
5092: LD_EXP 32
5096: PLUS
5097: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5098: LD_ADDR_VAR 0 7
5102: PUSH
5103: LD_EXP 30
5107: ST_TO_ADDR
// if not heikeHeavyLosses then
5108: LD_EXP 5
5112: NOT
5113: IFFALSE 5131
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5115: LD_ADDR_VAR 0 7
5119: PUSH
5120: LD_VAR 0 7
5124: PUSH
5125: LD_EXP 33
5129: PLUS
5130: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5131: LD_ADDR_VAR 0 8
5135: PUSH
5136: LD_EXP 31
5140: ST_TO_ADDR
// if not heikeHeavyLosses then
5141: LD_EXP 5
5145: NOT
5146: IFFALSE 5164
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_VAR 0 8
5157: PUSH
5158: LD_EXP 34
5162: PLUS
5163: ST_TO_ADDR
// for i := 1 to soldAmount do
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: DOUBLE
5170: LD_INT 1
5172: DEC
5173: ST_TO_ADDR
5174: LD_VAR 0 6
5178: PUSH
5179: FOR_TO
5180: IFFALSE 5237
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5182: LD_INT 0
5184: PPUSH
5185: LD_EXP 27
5189: PPUSH
5190: CALL_OW 381
// un = CreateHuman ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: CALL_OW 44
5203: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5204: LD_ADDR_EXP 58
5208: PUSH
5209: LD_EXP 58
5213: PUSH
5214: LD_VAR 0 3
5218: ADD
5219: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5220: LD_VAR 0 3
5224: PPUSH
5225: LD_INT 20
5227: PPUSH
5228: LD_INT 0
5230: PPUSH
5231: CALL_OW 49
// end ;
5235: GO 5179
5237: POP
5238: POP
// for i := 1 to mortarAmount do
5239: LD_ADDR_VAR 0 2
5243: PUSH
5244: DOUBLE
5245: LD_INT 1
5247: DEC
5248: ST_TO_ADDR
5249: LD_VAR 0 7
5253: PUSH
5254: FOR_TO
5255: IFFALSE 5315
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5257: LD_INT 0
5259: PPUSH
5260: LD_INT 8
5262: PPUSH
5263: LD_EXP 27
5267: PPUSH
5268: CALL_OW 380
// un = CreateHuman ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: CALL_OW 44
5281: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5282: LD_ADDR_EXP 58
5286: PUSH
5287: LD_EXP 58
5291: PUSH
5292: LD_VAR 0 3
5296: ADD
5297: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5298: LD_VAR 0 3
5302: PPUSH
5303: LD_INT 20
5305: PPUSH
5306: LD_INT 0
5308: PPUSH
5309: CALL_OW 49
// end ;
5313: GO 5254
5315: POP
5316: POP
// for i := 1 to vehicleAmount do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_VAR 0 8
5331: PUSH
5332: FOR_TO
5333: IFFALSE 5465
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_EXP 27
5342: PPUSH
5343: CALL_OW 383
// un = CreateHuman ;
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: CALL_OW 44
5356: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5357: LD_ADDR_EXP 58
5361: PUSH
5362: LD_EXP 58
5366: PUSH
5367: LD_VAR 0 3
5371: ADD
5372: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5373: LD_INT 14
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: PPUSH
5390: LD_VAR 0 5
5394: PPUSH
5395: CALL_OW 12
5399: ARRAY
5400: PPUSH
5401: LD_INT 65
5403: PPUSH
5404: CALL 45885 0 5
// veh = CreateVehicle ;
5408: LD_ADDR_VAR 0 4
5412: PUSH
5413: CALL_OW 45
5417: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5418: LD_ADDR_EXP 58
5422: PUSH
5423: LD_EXP 58
5427: PUSH
5428: LD_VAR 0 4
5432: ADD
5433: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5434: LD_VAR 0 4
5438: PPUSH
5439: LD_INT 20
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5449: LD_VAR 0 3
5453: PPUSH
5454: LD_VAR 0 4
5458: PPUSH
5459: CALL_OW 52
// end ;
5463: GO 5332
5465: POP
5466: POP
// end ;
5467: LD_VAR 0 1
5471: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
5476: PPUSH
5477: PPUSH
5478: PPUSH
// kabulBaseUnits = [ ] ;
5479: LD_ADDR_EXP 59
5483: PUSH
5484: EMPTY
5485: ST_TO_ADDR
// uc_side = 2 ;
5486: LD_ADDR_OWVAR 20
5490: PUSH
5491: LD_INT 2
5493: ST_TO_ADDR
// uc_nation = 2 ;
5494: LD_ADDR_OWVAR 21
5498: PUSH
5499: LD_INT 2
5501: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5502: LD_ADDR_EXP 59
5506: PUSH
5507: LD_INT 2
5509: PPUSH
5510: LD_INT 10
5512: PPUSH
5513: LD_STRING newkabul
5515: PPUSH
5516: LD_EXP 27
5520: PPUSH
5521: LD_INT 5000
5523: PUSH
5524: LD_INT 5000
5526: PUSH
5527: LD_INT 0
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: LD_INT 17
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: LD_INT 4
5546: PUSH
5547: LD_INT 8
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL 13099 0 7
5560: ST_TO_ADDR
// case Difficulty of 2 :
5561: LD_OWVAR 67
5565: PUSH
5566: LD_INT 2
5568: DOUBLE
5569: EQUAL
5570: IFTRUE 5574
5572: GO 5590
5574: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5575: LD_INT 49
5577: PPUSH
5578: LD_INT 2
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: CALL_OW 322
// end ; 3 :
5588: GO 5654
5590: LD_INT 3
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5653
5598: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5599: LD_INT 49
5601: PPUSH
5602: LD_INT 2
5604: PPUSH
5605: LD_INT 2
5607: PPUSH
5608: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5612: LD_INT 50
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5625: LD_INT 52
5627: PPUSH
5628: LD_INT 2
5630: PPUSH
5631: LD_INT 2
5633: PPUSH
5634: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5638: LD_INT 61
5640: PPUSH
5641: LD_INT 2
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: CALL_OW 322
// end ; end ;
5651: GO 5654
5653: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5654: LD_ADDR_VAR 0 2
5658: PUSH
5659: LD_INT 27
5661: PUSH
5662: LD_INT 23
5664: PUSH
5665: LD_INT 25
5667: PUSH
5668: LD_INT 28
5670: PUSH
5671: LD_INT 26
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_INT 22
5688: PUSH
5689: LD_INT 2
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 30
5698: PUSH
5699: LD_INT 32
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 3
5708: PUSH
5709: LD_INT 35
5711: PUSH
5712: LD_INT 30
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: PPUSH
5728: CALL_OW 69
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5766
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_VAR 0 2
5745: PUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: CALL_OW 12
5758: ARRAY
5759: PPUSH
5760: CALL_OW 431
5764: GO 5733
5766: POP
5767: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5768: LD_INT 22
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 21
5780: PUSH
5781: LD_INT 3
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: PPUSH
5797: LD_EXP 27
5801: PPUSH
5802: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5806: LD_ADDR_VAR 0 4
5810: PUSH
5811: LD_INT 22
5813: PUSH
5814: LD_INT 2
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 2
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 50
5833: PUSH
5834: EMPTY
5835: LIST
5836: PUSH
5837: LD_INT 34
5839: PUSH
5840: LD_INT 31
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: PUSH
5858: FOR_IN
5859: IFFALSE 5889
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5861: LD_INT 0
5863: PPUSH
5864: LD_EXP 27
5868: PPUSH
5869: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5873: CALL_OW 44
5877: PPUSH
5878: LD_VAR 0 4
5882: PPUSH
5883: CALL_OW 52
// end ;
5887: GO 5858
5889: POP
5890: POP
// if Difficulty = 1 then
5891: LD_OWVAR 67
5895: PUSH
5896: LD_INT 1
5898: EQUAL
5899: IFFALSE 5949
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5901: LD_INT 0
5903: PPUSH
5904: LD_EXP 27
5908: PPUSH
5909: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5913: CALL_OW 44
5917: PPUSH
5918: LD_INT 63
5920: PPUSH
5921: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5925: CALL_OW 44
5929: PPUSH
5930: LD_INT 66
5932: PPUSH
5933: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5937: CALL_OW 44
5941: PPUSH
5942: LD_INT 68
5944: PPUSH
5945: CALL 12724 0 2
// end ; if Difficulty = 2 then
5949: LD_OWVAR 67
5953: PUSH
5954: LD_INT 2
5956: EQUAL
5957: IFFALSE 6022
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5959: LD_INT 0
5961: PPUSH
5962: LD_EXP 27
5966: PPUSH
5967: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5971: CALL_OW 44
5975: PPUSH
5976: LD_INT 63
5978: PPUSH
5979: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5983: CALL_OW 44
5987: PPUSH
5988: LD_INT 66
5990: PPUSH
5991: CALL 12724 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5995: LD_INT 0
5997: PPUSH
5998: LD_INT 8
6000: PPUSH
6001: LD_EXP 27
6005: PPUSH
6006: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6010: CALL_OW 44
6014: PPUSH
6015: LD_INT 68
6017: PPUSH
6018: CALL 12724 0 2
// end ; if Difficulty = 3 then
6022: LD_OWVAR 67
6026: PUSH
6027: LD_INT 3
6029: EQUAL
6030: IFFALSE 6083
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6032: LD_INT 0
6034: PPUSH
6035: LD_INT 8
6037: PPUSH
6038: LD_EXP 27
6042: PPUSH
6043: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6047: CALL_OW 44
6051: PPUSH
6052: LD_INT 63
6054: PPUSH
6055: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6059: CALL_OW 44
6063: PPUSH
6064: LD_INT 66
6066: PPUSH
6067: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6071: CALL_OW 44
6075: PPUSH
6076: LD_INT 68
6078: PPUSH
6079: CALL 12724 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 7 ] [ Difficulty ] ) ;
6083: LD_INT 14
6085: PPUSH
6086: LD_INT 10
6088: PUSH
6089: LD_INT 2
6091: PUSH
6092: LD_INT 5
6094: PUSH
6095: LD_INT 7
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PUSH
6103: LD_OWVAR 67
6107: ARRAY
6108: PLUS
6109: PPUSH
6110: CALL 6187 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 9 ] [ Difficulty ] ) ;
6114: LD_INT 15
6116: PPUSH
6117: LD_INT 20
6119: PUSH
6120: LD_INT 4
6122: PUSH
6123: LD_INT 6
6125: PUSH
6126: LD_INT 9
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: PUSH
6134: LD_OWVAR 67
6138: ARRAY
6139: PLUS
6140: PPUSH
6141: CALL 6187 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6145: LD_INT 16
6147: PPUSH
6148: LD_INT 10
6150: PPUSH
6151: CALL 6187 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6155: LD_INT 17
6157: PPUSH
6158: LD_INT 5
6160: PPUSH
6161: CALL 6187 0 2
// if not savedVsevolod then
6165: LD_EXP 1
6169: NOT
6170: IFFALSE 6182
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6172: LD_INT 18
6174: PPUSH
6175: LD_INT 1
6177: PPUSH
6178: CALL 6187 0 2
// end ;
6182: LD_VAR 0 1
6186: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
// for i = 1 to amount do
6192: LD_ADDR_VAR 0 4
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_VAR 0 2
6206: PUSH
6207: FOR_TO
6208: IFFALSE 6274
// begin randPos = RandHexArea ( area , false ) ;
6210: LD_ADDR_VAR 0 5
6214: PUSH
6215: LD_VAR 0 1
6219: PPUSH
6220: LD_INT 0
6222: PPUSH
6223: CALL_OW 16
6227: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6228: LD_VAR 0 5
6232: PUSH
6233: LD_INT 1
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 5
6241: PUSH
6242: LD_INT 2
6244: ARRAY
6245: PPUSH
6246: LD_INT 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 454
// minesList = minesList ^ randPos ;
6256: LD_ADDR_EXP 61
6260: PUSH
6261: LD_EXP 61
6265: PUSH
6266: LD_VAR 0 5
6270: ADD
6271: ST_TO_ADDR
// end ;
6272: GO 6207
6274: POP
6275: POP
// end ;
6276: LD_VAR 0 3
6280: RET
// function PrepareXavierAr ; begin
6281: LD_INT 0
6283: PPUSH
// uc_side = 5 ;
6284: LD_ADDR_OWVAR 20
6288: PUSH
6289: LD_INT 5
6291: ST_TO_ADDR
// uc_nation = 2 ;
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_INT 2
6299: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6300: LD_ADDR_EXP 55
6304: PUSH
6305: LD_STRING Xavier
6307: PPUSH
6308: LD_INT 0
6310: PPUSH
6311: LD_INT 0
6313: PPUSH
6314: CALL 12122 0 3
6318: ST_TO_ADDR
// end ;
6319: LD_VAR 0 1
6323: RET
// every 0 0$1 do
6324: GO 6326
6326: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6327: LD_ADDR_EXP 60
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 50
6354: PUSH
6355: EMPTY
6356: LIST
6357: PUSH
6358: LD_INT 59
6360: PUSH
6361: EMPTY
6362: LIST
6363: PUSH
6364: LD_INT 34
6366: PUSH
6367: LD_INT 31
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: ST_TO_ADDR
// enable ;
6386: ENABLE
// end ; end_of_file
6387: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_INT 6
6400: PPUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 50
6413: PUSH
6414: EMPTY
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_EXP 37
6425: PUSH
6426: LD_EXP 48
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: DIFF
6435: PPUSH
6436: CALL_OW 70
6440: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6441: LD_EXP 37
6445: PPUSH
6446: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6450: LD_EXP 49
6454: PPUSH
6455: LD_STRING DStart-Pla-1
6457: PPUSH
6458: CALL_OW 94
// if savedVsevolod then
6462: LD_EXP 1
6466: IFFALSE 7695
// begin arSolds = PrepareIntroArabians ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL 4771 0 0
6477: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING DStartVS-Pla-1
6485: PPUSH
6486: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6490: LD_EXP 49
6494: PPUSH
6495: LD_STRING DStart2-Pla-1
6497: PPUSH
6498: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6502: LD_EXP 37
6506: PPUSH
6507: LD_STRING DStart2-Bur-1
6509: PPUSH
6510: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6514: LD_INT 92
6516: PPUSH
6517: LD_INT 133
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: LD_INT 9
6525: NEG
6526: PPUSH
6527: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6531: LD_INT 103
6533: PPUSH
6534: LD_INT 133
6536: PPUSH
6537: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6541: LD_VAR 0 2
6545: PUSH
6546: LD_INT 1
6548: ARRAY
6549: PPUSH
6550: LD_INT 93
6552: PPUSH
6553: LD_INT 134
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL 12953 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: ARRAY
6571: PPUSH
6572: LD_INT 96
6574: PPUSH
6575: LD_INT 134
6577: PPUSH
6578: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6589: LD_VAR 0 2
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PPUSH
6598: LD_INT 93
6600: PPUSH
6601: LD_INT 134
6603: PPUSH
6604: CALL_OW 297
6608: PUSH
6609: LD_INT 2
6611: LESS
6612: IFFALSE 6582
// wait ( 0 0$5 ) ;
6614: LD_INT 175
6616: PPUSH
6617: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6621: LD_VAR 0 2
6625: PUSH
6626: LD_INT 1
6628: ARRAY
6629: PUSH
6630: LD_VAR 0 2
6634: PUSH
6635: LD_INT 2
6637: ARRAY
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: LD_INT 107
6645: PPUSH
6646: LD_INT 134
6648: PPUSH
6649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6660: LD_VAR 0 2
6664: PUSH
6665: LD_INT 1
6667: ARRAY
6668: PPUSH
6669: LD_INT 107
6671: PPUSH
6672: LD_INT 134
6674: PPUSH
6675: CALL_OW 297
6679: PUSH
6680: LD_INT 5
6682: LESS
6683: IFFALSE 6653
// ComCrawl ( arSolds ) ;
6685: LD_VAR 0 2
6689: PPUSH
6690: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6694: LD_INT 96
6696: PPUSH
6697: LD_INT 161
6699: PPUSH
6700: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6704: LD_EXP 48
6708: PPUSH
6709: LD_INT 97
6711: PPUSH
6712: LD_INT 160
6714: PPUSH
6715: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6719: LD_EXP 48
6723: PPUSH
6724: LD_EXP 37
6728: PPUSH
6729: CALL_OW 179
// if IsInUnit ( Burlak ) then
6733: LD_EXP 37
6737: PPUSH
6738: CALL_OW 310
6742: IFFALSE 6753
// ComExitVehicle ( Burlak ) ;
6744: LD_EXP 37
6748: PPUSH
6749: CALL_OW 121
// wait ( 0 0$01 ) ;
6753: LD_INT 35
6755: PPUSH
6756: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6760: LD_EXP 37
6764: PPUSH
6765: LD_INT 96
6767: PPUSH
6768: LD_INT 162
6770: PPUSH
6771: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6775: LD_EXP 37
6779: PPUSH
6780: LD_EXP 48
6784: PPUSH
6785: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6789: LD_INT 35
6791: PPUSH
6792: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6796: LD_EXP 37
6800: PPUSH
6801: LD_EXP 48
6805: PPUSH
6806: CALL_OW 296
6810: PUSH
6811: LD_INT 5
6813: LESSEQUAL
6814: IFFALSE 6789
// CenterOnXY ( 96 , 160 ) ;
6816: LD_INT 96
6818: PPUSH
6819: LD_INT 160
6821: PPUSH
6822: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6826: LD_EXP 37
6830: PPUSH
6831: LD_STRING DMeetVsevolodVS-Bur-1
6833: PPUSH
6834: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6838: LD_INT 52
6840: PPUSH
6841: LD_INT 59
6843: PPUSH
6844: LD_INT 3
6846: PPUSH
6847: LD_INT 14
6849: NEG
6850: PPUSH
6851: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6855: LD_INT 58
6857: PPUSH
6858: LD_INT 54
6860: PPUSH
6861: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6865: LD_EXP 48
6869: PPUSH
6870: LD_STRING DMeetVsevolodVS-Vse-1
6872: PPUSH
6873: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6877: LD_EXP 37
6881: PUSH
6882: LD_EXP 48
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6895: LD_EXP 37
6899: PPUSH
6900: LD_STRING DMeetVsevolodVS-Bur-2
6902: PPUSH
6903: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6907: LD_INT 61
6909: PPUSH
6910: LD_INT 102
6912: PPUSH
6913: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6917: LD_EXP 48
6921: PPUSH
6922: LD_STRING DMeetVsevolodVS-Vse-2
6924: PPUSH
6925: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6929: LD_EXP 37
6933: PUSH
6934: LD_EXP 48
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6947: LD_INT 52
6949: PPUSH
6950: LD_INT 59
6952: PPUSH
6953: LD_INT 3
6955: PPUSH
6956: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
6960: LD_INT 92
6962: PPUSH
6963: LD_INT 133
6965: PPUSH
6966: LD_INT 3
6968: PPUSH
6969: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6973: LD_INT 3
6975: PPUSH
6976: LD_INT 2
6978: PPUSH
6979: LD_INT 1
6981: PPUSH
6982: LD_INT 1
6984: PPUSH
6985: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
6989: LD_VAR 0 3
6993: PPUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 58
7006: PUSH
7007: EMPTY
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 72
7018: PUSH
7019: LD_VAR 0 3
7023: PPUSH
7024: LD_INT 21
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 72
7038: AND
7039: IFFALSE 7103
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7041: LD_VAR 0 3
7045: PPUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 72
7060: PUSH
7061: LD_INT 1
7063: ARRAY
7064: PPUSH
7065: LD_VAR 0 3
7069: PPUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 58
7082: PUSH
7083: EMPTY
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 72
7094: PUSH
7095: LD_INT 1
7097: ARRAY
7098: PPUSH
7099: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_EXP 37
7112: PPUSH
7113: CALL_OW 250
7117: PPUSH
7118: LD_EXP 37
7122: PPUSH
7123: CALL_OW 251
7127: PPUSH
7128: CALL_OW 171
// wait ( 0 0$6 ) ;
7132: LD_INT 210
7134: PPUSH
7135: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7139: LD_EXP 37
7143: PPUSH
7144: LD_INT 98
7146: PPUSH
7147: LD_INT 143
7149: PPUSH
7150: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7154: LD_EXP 48
7158: PPUSH
7159: LD_INT 98
7161: PPUSH
7162: LD_INT 143
7164: PPUSH
7165: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7169: LD_VAR 0 3
7173: PPUSH
7174: LD_INT 98
7176: PPUSH
7177: LD_INT 143
7179: PPUSH
7180: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7184: LD_INT 35
7186: PPUSH
7187: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7191: LD_EXP 37
7195: PPUSH
7196: LD_INT 98
7198: PPUSH
7199: LD_INT 143
7201: PPUSH
7202: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7206: LD_EXP 48
7210: PPUSH
7211: LD_INT 98
7213: PPUSH
7214: LD_INT 143
7216: PPUSH
7217: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7221: LD_EXP 48
7225: PPUSH
7226: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7230: LD_EXP 37
7234: PPUSH
7235: LD_INT 98
7237: PPUSH
7238: LD_INT 143
7240: PPUSH
7241: CALL_OW 297
7245: PUSH
7246: LD_INT 4
7248: LESSEQUAL
7249: PUSH
7250: LD_EXP 48
7254: PPUSH
7255: LD_INT 98
7257: PPUSH
7258: LD_INT 143
7260: PPUSH
7261: CALL_OW 297
7265: PUSH
7266: LD_INT 4
7268: LESSEQUAL
7269: AND
7270: IFFALSE 7184
// CenterOnXY ( 93 , 134 ) ;
7272: LD_INT 93
7274: PPUSH
7275: LD_INT 134
7277: PPUSH
7278: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7282: LD_EXP 48
7286: PPUSH
7287: LD_INT 82
7289: PPUSH
7290: LD_INT 109
7292: PPUSH
7293: CALL_OW 111
// wait ( 0 0$2 ) ;
7297: LD_INT 70
7299: PPUSH
7300: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7304: LD_EXP 37
7308: PPUSH
7309: LD_INT 82
7311: PPUSH
7312: LD_INT 109
7314: PPUSH
7315: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7319: LD_VAR 0 3
7323: PPUSH
7324: LD_INT 82
7326: PPUSH
7327: LD_INT 109
7329: PPUSH
7330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7334: LD_INT 35
7336: PPUSH
7337: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7341: LD_EXP 48
7345: PPUSH
7346: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7350: LD_EXP 48
7354: PPUSH
7355: LD_INT 93
7357: PPUSH
7358: LD_INT 134
7360: PPUSH
7361: CALL_OW 297
7365: PUSH
7366: LD_INT 2
7368: LESSEQUAL
7369: IFFALSE 7334
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7371: LD_INT 93
7373: PPUSH
7374: LD_INT 134
7376: PPUSH
7377: LD_INT 2
7379: PPUSH
7380: CALL_OW 456
// wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7391: LD_EXP 48
7395: PPUSH
7396: LD_INT 200
7398: PPUSH
7399: CALL_OW 234
// wait ( 0 0$1 ) ;
7403: LD_INT 35
7405: PPUSH
7406: CALL_OW 67
// ComStop ( Burlak ) ;
7410: LD_EXP 37
7414: PPUSH
7415: CALL_OW 141
// ComStop ( Vsevolod ) ;
7419: LD_EXP 48
7423: PPUSH
7424: CALL_OW 141
// ComStop ( burlakUnits ) ;
7428: LD_VAR 0 3
7432: PPUSH
7433: CALL_OW 141
// DialogueOn ;
7437: CALL_OW 6
// if Kirilenkova then
7441: LD_EXP 45
7445: IFFALSE 7459
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7447: LD_EXP 45
7451: PPUSH
7452: LD_STRING DStasisVS-Kir-1
7454: PPUSH
7455: CALL_OW 88
// if Titov then
7459: LD_EXP 42
7463: IFFALSE 7477
// Say ( Titov , DStasisVS-Tit-1 ) ;
7465: LD_EXP 42
7469: PPUSH
7470: LD_STRING DStasisVS-Tit-1
7472: PPUSH
7473: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7477: LD_EXP 37
7481: PPUSH
7482: LD_STRING DStasisVS-Bur-1
7484: PPUSH
7485: CALL_OW 88
// if Titov then
7489: LD_EXP 42
7493: IFFALSE 7509
// Say ( Titov , DStasisVS-Tit-2 ) else
7495: LD_EXP 42
7499: PPUSH
7500: LD_STRING DStasisVS-Tit-2
7502: PPUSH
7503: CALL_OW 88
7507: GO 7527
// if Kirilenkova then
7509: LD_EXP 45
7513: IFFALSE 7527
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7515: LD_EXP 45
7519: PPUSH
7520: LD_STRING DStasisVS-Kir-2
7522: PPUSH
7523: CALL_OW 88
// if Titov or Kirilenkova then
7527: LD_EXP 42
7531: PUSH
7532: LD_EXP 45
7536: OR
7537: IFFALSE 7551
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7539: LD_EXP 37
7543: PPUSH
7544: LD_STRING DStasisVS-Bur-2
7546: PPUSH
7547: CALL_OW 88
// wait ( 0 0$2 ) ;
7551: LD_INT 70
7553: PPUSH
7554: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7558: LD_EXP 50
7562: PPUSH
7563: LD_STRING DStasisVS-Pop-2
7565: PPUSH
7566: CALL_OW 94
// if Gleb then
7570: LD_EXP 40
7574: IFFALSE 7588
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7576: LD_EXP 40
7580: PPUSH
7581: LD_STRING DStasisVS-Glb-2
7583: PPUSH
7584: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7588: LD_INT 3
7590: PPUSH
7591: LD_INT 2
7593: PPUSH
7594: LD_INT 2
7596: PPUSH
7597: LD_INT 1
7599: PPUSH
7600: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7604: LD_INT 2
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: CALL_OW 343
// DialogueOff ;
7614: CALL_OW 7
// InGameOff ;
7618: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7622: LD_EXP 48
7626: PPUSH
7627: LD_INT 250
7629: PPUSH
7630: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7634: LD_STRING MVsevolod
7636: PPUSH
7637: CALL_OW 337
// wait ( 0 0$2 ) ;
7641: LD_INT 70
7643: PPUSH
7644: CALL_OW 67
// ComWalk ( arSolds ) ;
7648: LD_VAR 0 2
7652: PPUSH
7653: CALL_OW 138
// wait ( 0 0$01 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_EXP 48
7673: PPUSH
7674: CALL_OW 250
7678: PPUSH
7679: LD_EXP 48
7683: PPUSH
7684: CALL_OW 251
7688: PPUSH
7689: CALL_OW 174
// end else
7693: GO 7746
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7695: LD_EXP 49
7699: PPUSH
7700: LD_STRING DStartNV-Pla-1
7702: PPUSH
7703: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7707: LD_EXP 49
7711: PPUSH
7712: LD_STRING DStart2-Pla-1
7714: PPUSH
7715: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7719: LD_EXP 37
7723: PPUSH
7724: LD_STRING DStart2-Bur-1
7726: PPUSH
7727: CALL_OW 88
// DialogueOff ;
7731: CALL_OW 7
// InGameOff ;
7735: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7739: LD_STRING MStart
7741: PPUSH
7742: CALL_OW 337
// end ; SaveForQuickRestart ;
7746: CALL_OW 22
// enableCounter = true ;
7750: LD_ADDR_EXP 18
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7758: LD_INT 1
7760: PPUSH
7761: CALL 18771 0 1
7765: PPUSH
7766: CALL 18615 0 1
// end ;
7770: LD_VAR 0 1
7774: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7775: LD_EXP 48
7779: PUSH
7780: LD_EXP 48
7784: PPUSH
7785: CALL_OW 256
7789: PUSH
7790: LD_INT 250
7792: GREATEREQUAL
7793: AND
7794: IFFALSE 7871
7796: GO 7798
7798: DISABLE
// begin DialogueOn ;
7799: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7803: LD_EXP 48
7807: PPUSH
7808: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7812: LD_EXP 37
7816: PPUSH
7817: LD_STRING DSeviSaved-Bur-1
7819: PPUSH
7820: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7824: LD_EXP 48
7828: PPUSH
7829: LD_STRING DSeviSaved-Vse-1
7831: PPUSH
7832: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7836: LD_EXP 37
7840: PPUSH
7841: LD_STRING DSeviSaved-Bur-2
7843: PPUSH
7844: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7848: LD_EXP 48
7852: PPUSH
7853: LD_STRING DSeviSaved-Vse-2
7855: PPUSH
7856: CALL_OW 88
// DialogueOff ;
7860: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7864: LD_STRING MStart
7866: PPUSH
7867: CALL_OW 337
// end ;
7871: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7872: LD_EXP 45
7876: PUSH
7877: LD_EXP 45
7881: PPUSH
7882: CALL_OW 301
7886: NOT
7887: AND
7888: IFFALSE 8712
7890: GO 7892
7892: DISABLE
7893: LD_INT 0
7895: PPUSH
7896: PPUSH
7897: PPUSH
7898: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7899: LD_ADDR_VAR 0 1
7903: PUSH
7904: LD_INT 22
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 50
7916: PUSH
7917: EMPTY
7918: LIST
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: LD_INT 59
7925: PUSH
7926: EMPTY
7927: LIST
7928: PUSH
7929: LD_INT 21
7931: PUSH
7932: LD_INT 1
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 21
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: PPUSH
7960: CALL_OW 69
7964: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7965: LD_INT 35
7967: PPUSH
7968: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
7972: LD_EXP 45
7976: PPUSH
7977: CALL_OW 302
7981: PUSH
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_EXP 45
7991: PPUSH
7992: CALL_OW 74
7996: PPUSH
7997: LD_EXP 45
8001: PPUSH
8002: CALL_OW 296
8006: PUSH
8007: LD_INT 12
8009: GREATER
8010: AND
8011: IFFALSE 7965
// if IsInUnit ( Kirilenkova ) then
8013: LD_EXP 45
8017: PPUSH
8018: CALL_OW 310
8022: IFFALSE 8071
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8024: LD_EXP 55
8028: PPUSH
8029: LD_EXP 45
8033: PPUSH
8034: CALL_OW 310
8038: PPUSH
8039: CALL_OW 250
8043: PPUSH
8044: LD_EXP 45
8048: PPUSH
8049: CALL_OW 310
8053: PPUSH
8054: CALL_OW 251
8058: PPUSH
8059: LD_INT 5
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 50
8069: GO 8106
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8071: LD_EXP 55
8075: PPUSH
8076: LD_EXP 45
8080: PPUSH
8081: CALL_OW 250
8085: PPUSH
8086: LD_EXP 45
8090: PPUSH
8091: CALL_OW 251
8095: PPUSH
8096: LD_INT 5
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 50
// xavierSpawned = true ;
8106: LD_ADDR_EXP 11
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8114: LD_INT 70
8116: PPUSH
8117: CALL_OW 67
// InGameOn ;
8121: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8125: LD_EXP 55
8129: PPUSH
8130: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8134: LD_EXP 55
8138: PPUSH
8139: LD_EXP 45
8143: PPUSH
8144: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8148: LD_EXP 45
8152: PPUSH
8153: LD_EXP 55
8157: PPUSH
8158: CALL_OW 119
// DialogueOn ;
8162: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8166: LD_EXP 55
8170: PPUSH
8171: LD_STRING DMeetXavier-Xav-1
8173: PPUSH
8174: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8178: LD_EXP 45
8182: PPUSH
8183: CALL_OW 310
8187: IFFALSE 8306
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 310
8198: PPUSH
8199: CALL_OW 247
8203: PUSH
8204: LD_INT 2
8206: EQUAL
8207: IFFALSE 8220
// ComExitVehicle ( Kirilenkova ) else
8209: LD_EXP 45
8213: PPUSH
8214: CALL_OW 121
8218: GO 8229
// ComExitBuilding ( Kirilenkova ) ;
8220: LD_EXP 45
8224: PPUSH
8225: CALL_OW 122
// wait ( 0 0$1 ) ;
8229: LD_INT 35
8231: PPUSH
8232: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8236: LD_INT 35
8238: PPUSH
8239: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8243: LD_EXP 45
8247: PPUSH
8248: LD_EXP 55
8252: PPUSH
8253: CALL_OW 250
8257: PPUSH
8258: LD_EXP 55
8262: PPUSH
8263: CALL_OW 251
8267: PPUSH
8268: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8272: LD_EXP 45
8276: PPUSH
8277: LD_EXP 55
8281: PPUSH
8282: CALL_OW 296
8286: PUSH
8287: LD_INT 3
8289: LESSEQUAL
8290: IFFALSE 8236
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8292: LD_EXP 45
8296: PPUSH
8297: LD_EXP 55
8301: PPUSH
8302: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8306: LD_EXP 45
8310: PPUSH
8311: LD_STRING DMeetXavier-Kir-1
8313: PPUSH
8314: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8318: LD_EXP 55
8322: PPUSH
8323: LD_STRING DMeetXavier-Xav-2
8325: PPUSH
8326: CALL_OW 88
// case Query ( QXavier ) of 1 :
8330: LD_STRING QXavier
8332: PPUSH
8333: CALL_OW 97
8337: PUSH
8338: LD_INT 1
8340: DOUBLE
8341: EQUAL
8342: IFTRUE 8346
8344: GO 8541
8346: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8347: LD_EXP 37
8351: PPUSH
8352: LD_STRING DQrXavier#1-Bur-1
8354: PPUSH
8355: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8359: LD_EXP 45
8363: PPUSH
8364: LD_STRING DQrXavier#1-Kir-1
8366: PPUSH
8367: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8371: LD_EXP 55
8375: PPUSH
8376: LD_STRING DQrXavier#1-Xav-1
8378: PPUSH
8379: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8383: LD_EXP 45
8387: PPUSH
8388: LD_STRING DQrXavier#1-Kir-2
8390: PPUSH
8391: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8395: LD_EXP 55
8399: PPUSH
8400: LD_STRING DQrXavier#1-Xav-2
8402: PPUSH
8403: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8407: LD_EXP 45
8411: PPUSH
8412: LD_STRING DQrXavier#1-Kir-3
8414: PPUSH
8415: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8419: LD_EXP 55
8423: PPUSH
8424: LD_STRING DQrXavier#1-Xav-3
8426: PPUSH
8427: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8431: LD_EXP 45
8435: PPUSH
8436: LD_STRING DQrXavier#1-Kir-4
8438: PPUSH
8439: CALL_OW 88
// if IsOK ( Gleb ) then
8443: LD_EXP 40
8447: PPUSH
8448: CALL_OW 302
8452: IFFALSE 8466
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8454: LD_EXP 40
8458: PPUSH
8459: LD_STRING DQrXavier#1-Glb-4
8461: PPUSH
8462: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8466: LD_ADDR_VAR 0 4
8470: PUSH
8471: LD_EXP 55
8475: PPUSH
8476: CALL_OW 254
8480: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8481: LD_ADDR_VAR 0 2
8485: PUSH
8486: LD_EXP 55
8490: PPUSH
8491: CALL_OW 250
8495: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8496: LD_ADDR_VAR 0 3
8500: PUSH
8501: LD_EXP 55
8505: PPUSH
8506: CALL_OW 251
8510: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8511: LD_EXP 55
8515: PPUSH
8516: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8520: LD_VAR 0 2
8524: PPUSH
8525: LD_VAR 0 3
8529: PPUSH
8530: LD_VAR 0 4
8534: PPUSH
8535: CALL 1157 0 3
// end ; 2 :
8539: GO 8704
8541: LD_INT 2
8543: DOUBLE
8544: EQUAL
8545: IFTRUE 8549
8547: GO 8703
8549: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8550: LD_EXP 37
8554: PPUSH
8555: LD_STRING DQrXavier#2-Bur-1
8557: PPUSH
8558: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8562: LD_EXP 45
8566: PPUSH
8567: LD_STRING DQrXavier#2-Kir-1
8569: PPUSH
8570: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8574: LD_EXP 55
8578: PPUSH
8579: LD_STRING DQrXavier#2-Xav-1
8581: PPUSH
8582: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8586: LD_EXP 45
8590: PPUSH
8591: LD_STRING DQrXavier#2-Kir-2
8593: PPUSH
8594: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8598: LD_EXP 55
8602: PPUSH
8603: LD_STRING DQrXavier#2-Xav-2
8605: PPUSH
8606: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8610: LD_EXP 45
8614: PPUSH
8615: LD_STRING DQrXavier#2-Kir-3
8617: PPUSH
8618: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8622: LD_EXP 55
8626: PPUSH
8627: LD_STRING DQrXavier#2-Xav-3
8629: PPUSH
8630: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8634: LD_EXP 45
8638: PPUSH
8639: LD_STRING DQrXavier#2-Kir-4
8641: PPUSH
8642: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8646: LD_EXP 55
8650: PPUSH
8651: LD_STRING DQrXavier#2-Xav-4
8653: PPUSH
8654: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8658: LD_EXP 45
8662: PPUSH
8663: LD_STRING DQrXavier#2-Kir-5
8665: PPUSH
8666: CALL_OW 88
// if IsOK ( Gleb ) then
8670: LD_EXP 40
8674: PPUSH
8675: CALL_OW 302
8679: IFFALSE 8693
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8681: LD_EXP 40
8685: PPUSH
8686: LD_STRING DQrXavier#2-Glb-5
8688: PPUSH
8689: CALL_OW 88
// xavierPatrol = true ;
8693: LD_ADDR_EXP 7
8697: PUSH
8698: LD_INT 1
8700: ST_TO_ADDR
// end ; end ;
8701: GO 8704
8703: POP
// InGameOff ;
8704: CALL_OW 9
// DialogueOff ;
8708: CALL_OW 7
// end ;
8712: PPOPN 4
8714: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8715: LD_EXP 7
8719: PUSH
8720: LD_INT 3
8722: PPUSH
8723: LD_INT 5
8725: PPUSH
8726: CALL_OW 81
8730: PUSH
8731: LD_INT 1
8733: EQUAL
8734: AND
8735: IFFALSE 8805
8737: GO 8739
8739: DISABLE
8740: LD_INT 0
8742: PPUSH
// begin enable ;
8743: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8744: LD_ADDR_VAR 0 1
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_EXP 6
8758: PUSH
8759: FOR_TO
8760: IFFALSE 8803
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8762: LD_EXP 55
8766: PPUSH
8767: LD_EXP 6
8771: PUSH
8772: LD_VAR 0 1
8776: ARRAY
8777: PUSH
8778: LD_INT 1
8780: ARRAY
8781: PPUSH
8782: LD_EXP 6
8786: PUSH
8787: LD_VAR 0 1
8791: ARRAY
8792: PUSH
8793: LD_INT 2
8795: ARRAY
8796: PPUSH
8797: CALL_OW 171
8801: GO 8759
8803: POP
8804: POP
// end ;
8805: PPOPN 1
8807: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8808: LD_EXP 7
8812: PUSH
8813: LD_EXP 8
8817: AND
8818: PUSH
8819: LD_INT 3
8821: PPUSH
8822: LD_INT 5
8824: PPUSH
8825: CALL_OW 81
8829: PUSH
8830: LD_INT 1
8832: EQUAL
8833: AND
8834: IFFALSE 8878
8836: GO 8838
8838: DISABLE
// begin xavierPatrol = false ;
8839: LD_ADDR_EXP 7
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8847: LD_ADDR_EXP 9
8851: PUSH
8852: LD_INT 1
8854: ST_TO_ADDR
// xavierFirstPatrol = false ;
8855: LD_ADDR_EXP 8
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8863: LD_EXP 55
8867: PPUSH
8868: LD_INT 123
8870: PPUSH
8871: LD_INT 92
8873: PPUSH
8874: CALL_OW 111
// end ;
8878: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8879: LD_EXP 9
8883: PUSH
8884: LD_EXP 55
8888: PPUSH
8889: LD_INT 123
8891: PPUSH
8892: LD_INT 92
8894: PPUSH
8895: CALL_OW 297
8899: PUSH
8900: LD_INT 2
8902: LESSEQUAL
8903: AND
8904: PUSH
8905: LD_EXP 45
8909: PPUSH
8910: CALL_OW 302
8914: AND
8915: PUSH
8916: LD_INT 3
8918: PPUSH
8919: LD_INT 5
8921: PPUSH
8922: CALL_OW 81
8926: PUSH
8927: LD_INT 1
8929: EQUAL
8930: AND
8931: IFFALSE 9034
8933: GO 8935
8935: DISABLE
// begin DialogueOn ;
8936: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8940: LD_EXP 55
8944: PPUSH
8945: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8949: LD_EXP 55
8953: PPUSH
8954: LD_STRING DPointXavier-Xav-1
8956: PPUSH
8957: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
8961: LD_EXP 45
8965: PPUSH
8966: LD_STRING DPointXavier-Kir-1
8968: PPUSH
8969: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
8973: LD_EXP 55
8977: PPUSH
8978: LD_STRING DPointXavier-Xav-2
8980: PPUSH
8981: CALL_OW 88
// DialogueOff ;
8985: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
8989: LD_INT 7
8991: PPUSH
8992: LD_INT 1
8994: PPUSH
8995: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
8999: LD_EXP 55
9003: PPUSH
9004: EMPTY
9005: PPUSH
9006: CALL_OW 446
// canLeaveMessage = true ;
9010: LD_ADDR_EXP 12
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9018: LD_ADDR_EXP 9
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// xavierPatrol = true ;
9026: LD_ADDR_EXP 7
9030: PUSH
9031: LD_INT 1
9033: ST_TO_ADDR
// end ;
9034: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9035: LD_EXP 12
9039: PUSH
9040: LD_EXP 45
9044: PPUSH
9045: LD_INT 7
9047: PPUSH
9048: CALL_OW 308
9052: AND
9053: PUSH
9054: LD_INT 3
9056: PPUSH
9057: LD_INT 5
9059: PPUSH
9060: CALL_OW 81
9064: PUSH
9065: LD_INT 1
9067: EQUAL
9068: AND
9069: IFFALSE 9188
9071: GO 9073
9073: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9074: LD_STRING QActivateXavier
9076: PPUSH
9077: CALL_OW 97
9081: PUSH
9082: LD_INT 1
9084: DOUBLE
9085: EQUAL
9086: IFTRUE 9090
9088: GO 9121
9090: POP
// begin messageForXavier = 1 ;
9091: LD_ADDR_EXP 13
9095: PUSH
9096: LD_INT 1
9098: ST_TO_ADDR
// canLeaveMessage = false ;
9099: LD_ADDR_EXP 12
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9107: LD_INT 7
9109: PPUSH
9110: LD_INT 0
9112: PPUSH
9113: CALL_OW 424
// exit ;
9117: GO 9188
// end ; 2 :
9119: GO 9180
9121: LD_INT 2
9123: DOUBLE
9124: EQUAL
9125: IFTRUE 9129
9127: GO 9160
9129: POP
// begin messageForXavier = 2 ;
9130: LD_ADDR_EXP 13
9134: PUSH
9135: LD_INT 2
9137: ST_TO_ADDR
// canLeaveMessage = false ;
9138: LD_ADDR_EXP 12
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9146: LD_INT 7
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 424
// exit ;
9156: GO 9188
// end ; 3 :
9158: GO 9180
9160: LD_INT 3
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9179
9168: POP
// messageForXavier = 3 ; end ;
9169: LD_ADDR_EXP 13
9173: PUSH
9174: LD_INT 3
9176: ST_TO_ADDR
9177: GO 9180
9179: POP
// wait ( 0 0$4 ) ;
9180: LD_INT 140
9182: PPUSH
9183: CALL_OW 67
// enable ;
9187: ENABLE
// end ;
9188: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9189: LD_EXP 13
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: PUSH
9198: LD_EXP 13
9202: PUSH
9203: LD_INT 2
9205: EQUAL
9206: OR
9207: PUSH
9208: LD_INT 3
9210: PPUSH
9211: LD_INT 5
9213: PPUSH
9214: CALL_OW 81
9218: PUSH
9219: LD_INT 1
9221: EQUAL
9222: AND
9223: IFFALSE 9251
9225: GO 9227
9227: DISABLE
// begin xavierPatrol = false ;
9228: LD_ADDR_EXP 7
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9236: LD_EXP 55
9240: PPUSH
9241: LD_INT 123
9243: PPUSH
9244: LD_INT 92
9246: PPUSH
9247: CALL_OW 111
// end ;
9251: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9252: LD_EXP 13
9256: PUSH
9257: LD_INT 1
9259: EQUAL
9260: PUSH
9261: LD_EXP 13
9265: PUSH
9266: LD_INT 2
9268: EQUAL
9269: OR
9270: PUSH
9271: LD_EXP 55
9275: PPUSH
9276: LD_INT 123
9278: PPUSH
9279: LD_INT 92
9281: PPUSH
9282: CALL_OW 297
9286: PUSH
9287: LD_INT 2
9289: LESSEQUAL
9290: AND
9291: PUSH
9292: LD_INT 3
9294: PPUSH
9295: LD_INT 5
9297: PPUSH
9298: CALL_OW 81
9302: PUSH
9303: LD_INT 1
9305: EQUAL
9306: AND
9307: IFFALSE 9376
9309: GO 9311
9311: DISABLE
// begin if messageForXavier = 1 then
9312: LD_EXP 13
9316: PUSH
9317: LD_INT 1
9319: EQUAL
9320: IFFALSE 9342
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9322: LD_EXP 37
9326: PPUSH
9327: LD_STRING DQrActivateXavier#1-Bur-1
9329: PPUSH
9330: CALL_OW 88
// xavierJoinToPlayer = true ;
9334: LD_ADDR_EXP 10
9338: PUSH
9339: LD_INT 1
9341: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9342: LD_EXP 13
9346: PUSH
9347: LD_INT 2
9349: EQUAL
9350: IFFALSE 9376
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9352: LD_EXP 37
9356: PPUSH
9357: LD_STRING DQrActivateXavier#2-Bur-1
9359: PPUSH
9360: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9364: LD_EXP 55
9368: PPUSH
9369: LD_INT 53
9371: PPUSH
9372: CALL_OW 120
// end ; end ;
9376: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9377: LD_EXP 10
9381: PUSH
9382: LD_INT 3
9384: PPUSH
9385: LD_INT 5
9387: PPUSH
9388: CALL_OW 81
9392: PUSH
9393: LD_INT 1
9395: EQUAL
9396: AND
9397: IFFALSE 9777
9399: GO 9401
9401: DISABLE
9402: LD_INT 0
9404: PPUSH
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin if messageForXavier = 1 then
9410: LD_EXP 13
9414: PUSH
9415: LD_INT 1
9417: EQUAL
9418: IFFALSE 9449
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9420: LD_EXP 55
9424: PPUSH
9425: LD_EXP 37
9429: PPUSH
9430: CALL_OW 250
9434: PPUSH
9435: LD_EXP 37
9439: PPUSH
9440: CALL_OW 251
9444: PPUSH
9445: CALL_OW 111
// if messageForXavier = 2 then
9449: LD_EXP 13
9453: PUSH
9454: LD_INT 2
9456: EQUAL
9457: IFFALSE 9493
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9459: LD_EXP 55
9463: PPUSH
9464: CALL_OW 310
9468: PPUSH
9469: LD_EXP 37
9473: PPUSH
9474: CALL_OW 250
9478: PPUSH
9479: LD_EXP 37
9483: PPUSH
9484: CALL_OW 251
9488: PPUSH
9489: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9493: LD_ADDR_VAR 0 2
9497: PUSH
9498: LD_INT 22
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 50
9510: PUSH
9511: EMPTY
9512: LIST
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: LD_INT 21
9519: PUSH
9520: LD_INT 1
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 59
9529: PUSH
9530: EMPTY
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 69
9547: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9548: LD_VAR 0 2
9552: PPUSH
9553: LD_EXP 55
9557: PPUSH
9558: CALL_OW 74
9562: PPUSH
9563: LD_EXP 55
9567: PPUSH
9568: CALL_OW 296
9572: PUSH
9573: LD_INT 6
9575: LESSEQUAL
9576: PUSH
9577: LD_EXP 13
9581: PUSH
9582: LD_INT 1
9584: EQUAL
9585: AND
9586: IFFALSE 9671
// begin xavierJoinToPlayer = false ;
9588: LD_ADDR_EXP 10
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_EXP 55
9605: PPUSH
9606: CALL_OW 250
9610: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_EXP 55
9620: PPUSH
9621: CALL_OW 251
9625: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9626: LD_ADDR_VAR 0 5
9630: PUSH
9631: LD_EXP 55
9635: PPUSH
9636: CALL_OW 254
9640: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9641: LD_EXP 55
9645: PPUSH
9646: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_VAR 0 4
9659: PPUSH
9660: LD_VAR 0 5
9664: PPUSH
9665: CALL 1157 0 3
// exit ;
9669: GO 9777
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9671: LD_VAR 0 2
9675: PPUSH
9676: LD_EXP 55
9680: PPUSH
9681: CALL_OW 310
9685: PPUSH
9686: CALL_OW 74
9690: PPUSH
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 310
9700: PPUSH
9701: CALL_OW 296
9705: PUSH
9706: LD_INT 6
9708: LESSEQUAL
9709: PUSH
9710: LD_EXP 13
9714: PUSH
9715: LD_INT 2
9717: EQUAL
9718: AND
9719: IFFALSE 9776
// begin xavierJoinToPlayer = false ;
9721: LD_ADDR_EXP 10
9725: PUSH
9726: LD_INT 0
9728: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9729: LD_ADDR_VAR 0 6
9733: PUSH
9734: LD_EXP 55
9738: PPUSH
9739: CALL_OW 310
9743: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9744: LD_EXP 55
9748: PPUSH
9749: CALL_OW 64
// SetSide ( veh , 3 ) ;
9753: LD_VAR 0 6
9757: PPUSH
9758: LD_INT 3
9760: PPUSH
9761: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9765: LD_VAR 0 6
9769: PPUSH
9770: CALL 1236 0 1
// exit ;
9774: GO 9777
// end ; enable ;
9776: ENABLE
// end ;
9777: PPOPN 6
9779: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9780: GO 9782
9782: DISABLE
9783: LD_INT 0
9785: PPUSH
9786: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9787: LD_INT 44
9789: PPUSH
9790: LD_INT 3
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9800: LD_EXP 51
9804: PPUSH
9805: LD_INT 8
9807: PPUSH
9808: LD_INT 0
9810: PPUSH
9811: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9815: LD_EXP 51
9819: PPUSH
9820: LD_INT 97
9822: PPUSH
9823: LD_INT 162
9825: PPUSH
9826: CALL_OW 111
// wait ( 0 0$3 ) ;
9830: LD_INT 105
9832: PPUSH
9833: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9837: LD_EXP 51
9841: PPUSH
9842: CALL_OW 87
// DialogueOn ;
9846: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_STRING DYashinArrives-Yas-1
9857: PPUSH
9858: CALL_OW 88
// if savedVsevolod then
9862: LD_EXP 1
9866: IFFALSE 9930
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9868: LD_EXP 48
9872: PPUSH
9873: LD_STRING DYashinArrives-Vse-1
9875: PPUSH
9876: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9880: LD_EXP 51
9884: PPUSH
9885: LD_STRING DYashinArrives-Yas-2
9887: PPUSH
9888: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9892: LD_EXP 48
9896: PPUSH
9897: LD_STRING DYashinArrives-Vse-2
9899: PPUSH
9900: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9904: LD_EXP 51
9908: PPUSH
9909: LD_STRING DYashinArrives-Yas-3
9911: PPUSH
9912: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9916: LD_EXP 48
9920: PPUSH
9921: LD_STRING DYashinArrives-Vse-3
9923: PPUSH
9924: CALL_OW 88
// end else
9928: GO 9978
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9930: LD_EXP 37
9934: PPUSH
9935: LD_STRING DYashinArrives-Bur-3
9937: PPUSH
9938: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9942: LD_EXP 51
9946: PPUSH
9947: LD_STRING DYashinArrives-Yas-4
9949: PPUSH
9950: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
9954: LD_EXP 37
9958: PPUSH
9959: LD_STRING DYashinArrives-Bur-4
9961: PPUSH
9962: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
9966: LD_EXP 51
9970: PPUSH
9971: LD_STRING DYashinArrives-Yas-5
9973: PPUSH
9974: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
9978: LD_EXP 37
9982: PPUSH
9983: LD_STRING DYashinArrives-Bur-5
9985: PPUSH
9986: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
9990: LD_EXP 51
9994: PPUSH
9995: LD_STRING DYashinArrives-Yas-6
9997: PPUSH
9998: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10002: LD_EXP 37
10006: PPUSH
10007: LD_STRING DYashinArrives-Bur-6
10009: PPUSH
10010: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10014: LD_EXP 51
10018: PPUSH
10019: LD_STRING DYashinArrives-Yas-7
10021: PPUSH
10022: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10026: LD_INT 63
10028: PPUSH
10029: CALL_OW 301
10033: PUSH
10034: LD_INT 66
10036: PPUSH
10037: CALL_OW 301
10041: AND
10042: PUSH
10043: LD_INT 68
10045: PPUSH
10046: CALL_OW 301
10050: AND
10051: IFFALSE 10134
// begin case Query ( QYashinHelp2 ) of 1 :
10053: LD_STRING QYashinHelp2
10055: PPUSH
10056: CALL_OW 97
10060: PUSH
10061: LD_INT 1
10063: DOUBLE
10064: EQUAL
10065: IFTRUE 10069
10067: GO 10096
10069: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10070: LD_EXP 37
10074: PPUSH
10075: LD_STRING DQrYashinHelp#2-Bur-1
10077: PPUSH
10078: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10082: LD_EXP 51
10086: PPUSH
10087: LD_STRING DQrYashinHelp#2-Yas-1
10089: PPUSH
10090: CALL_OW 88
// end ; 2 :
10094: GO 10132
10096: LD_INT 2
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10131
10104: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10105: LD_EXP 37
10109: PPUSH
10110: LD_STRING DQrYashinHelp#3-Bur-1
10112: PPUSH
10113: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10117: LD_EXP 51
10121: PPUSH
10122: LD_STRING DQrYashinHelp#3-Yas-1
10124: PPUSH
10125: CALL_OW 88
// end ; end ;
10129: GO 10132
10131: POP
// end else
10132: GO 10280
// begin case Query ( QYashinHelp ) of 1 :
10134: LD_STRING QYashinHelp
10136: PPUSH
10137: CALL_OW 97
10141: PUSH
10142: LD_INT 1
10144: DOUBLE
10145: EQUAL
10146: IFTRUE 10150
10148: GO 10209
10150: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING DQrYashinHelp#1-Bur-1
10158: PPUSH
10159: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING DQrYashinHelp#1-Yas-1
10170: PPUSH
10171: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING DQrYashinHelp#1-Bur-2
10182: PPUSH
10183: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING DQrYashinHelp#1-Yas-2
10194: PPUSH
10195: CALL_OW 88
// bazookDialog = true ;
10199: LD_ADDR_VAR 0 2
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// end ; 2 :
10207: GO 10280
10209: LD_INT 2
10211: DOUBLE
10212: EQUAL
10213: IFTRUE 10217
10215: GO 10244
10217: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10218: LD_EXP 37
10222: PPUSH
10223: LD_STRING DQrYashinHelp#2-Bur-1
10225: PPUSH
10226: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10230: LD_EXP 51
10234: PPUSH
10235: LD_STRING DQrYashinHelp#2-Yas-1
10237: PPUSH
10238: CALL_OW 88
// end ; 3 :
10242: GO 10280
10244: LD_INT 3
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10252
10250: GO 10279
10252: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10253: LD_EXP 37
10257: PPUSH
10258: LD_STRING DQrYashinHelp#3-Bur-1
10260: PPUSH
10261: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10265: LD_EXP 51
10269: PPUSH
10270: LD_STRING DQrYashinHelp#3-Yas-1
10272: PPUSH
10273: CALL_OW 88
// end ; end ;
10277: GO 10280
10279: POP
// end ; if not bazookDialog then
10280: LD_VAR 0 2
10284: NOT
10285: IFFALSE 10323
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING DQrYashinHelp#4-Yas-1
10294: PPUSH
10295: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10299: LD_EXP 37
10303: PPUSH
10304: LD_STRING DQrYashinHelp#1-Bur-2
10306: PPUSH
10307: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10311: LD_EXP 51
10315: PPUSH
10316: LD_STRING DQrYashinHelp#1-Yas-2
10318: PPUSH
10319: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10323: LD_EXP 51
10327: PPUSH
10328: LD_STRING DYashinLeave-Yas-1
10330: PPUSH
10331: CALL_OW 88
// yashinSearchVeh = true ;
10335: LD_ADDR_EXP 15
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// DialogueOff ;
10343: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10347: LD_ADDR_VAR 0 1
10351: PUSH
10352: LD_INT 22
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 2
10364: PUSH
10365: LD_INT 30
10367: PUSH
10368: LD_INT 0
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 1
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: ST_TO_ADDR
// if playerDepot then
10399: LD_VAR 0 1
10403: IFFALSE 10442
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10405: LD_EXP 51
10409: PPUSH
10410: LD_VAR 0 1
10414: PUSH
10415: LD_INT 1
10417: ARRAY
10418: PPUSH
10419: CALL_OW 250
10423: PPUSH
10424: LD_VAR 0 1
10428: PUSH
10429: LD_INT 1
10431: ARRAY
10432: PPUSH
10433: CALL_OW 251
10437: PPUSH
10438: CALL_OW 111
// end ;
10442: PPOPN 2
10444: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10445: LD_EXP 51
10449: PPUSH
10450: CALL_OW 305
10454: IFFALSE 10570
10456: GO 10458
10458: DISABLE
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10463: LD_ADDR_VAR 0 1
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: ST_TO_ADDR
// for unit in yourUnits do
10483: LD_ADDR_VAR 0 2
10487: PUSH
10488: LD_VAR 0 1
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10567
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10496: LD_VAR 0 2
10500: PPUSH
10501: CALL_OW 319
10505: PUSH
10506: LD_EXP 51
10510: EQUAL
10511: PUSH
10512: LD_EXP 14
10516: PUSH
10517: LD_VAR 0 2
10521: PPUSH
10522: CALL_OW 319
10526: PUSH
10527: LD_EXP 14
10531: EQUAL
10532: AND
10533: OR
10534: IFFALSE 10565
// begin ComStop ( unit ) ;
10536: LD_VAR 0 2
10540: PPUSH
10541: CALL_OW 141
// DialogueOn ;
10545: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10549: LD_EXP 37
10553: PPUSH
10554: LD_STRING DYashinAttack-Bur-1
10556: PPUSH
10557: CALL_OW 88
// DialogueOff end ;
10561: CALL_OW 7
10565: GO 10493
10567: POP
10568: POP
// enable ;
10569: ENABLE
// end ;
10570: PPOPN 2
10572: END
// every 1 trigger IsPlaced ( Yashin ) do
10573: LD_EXP 51
10577: PPUSH
10578: CALL_OW 305
10582: IFFALSE 10618
10584: GO 10586
10586: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10587: LD_EXP 51
10591: PPUSH
10592: LD_INT 1000
10594: PPUSH
10595: CALL_OW 234
// if yashinVeh then
10599: LD_EXP 14
10603: IFFALSE 10617
// SetLives ( yashinVeh , 1000 ) ;
10605: LD_EXP 14
10609: PPUSH
10610: LD_INT 1000
10612: PPUSH
10613: CALL_OW 234
// enable ;
10617: ENABLE
// end ;
10618: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10619: LD_EXP 51
10623: PPUSH
10624: CALL_OW 305
10628: PUSH
10629: LD_EXP 15
10633: AND
10634: IFFALSE 11078
10636: GO 10638
10638: DISABLE
10639: LD_INT 0
10641: PPUSH
10642: PPUSH
10643: PPUSH
10644: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 22
10652: PUSH
10653: LD_INT 3
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 2
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 58
10672: PUSH
10673: EMPTY
10674: LIST
10675: PUSH
10676: LD_INT 23
10678: PUSH
10679: LD_INT 3
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 34
10691: PUSH
10692: LD_INT 42
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 34
10701: PUSH
10702: LD_INT 43
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 34
10711: PUSH
10712: LD_INT 44
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 46
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 69
10747: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10748: LD_ADDR_VAR 0 2
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 3
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 23
10775: PUSH
10776: LD_INT 3
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 34
10788: PUSH
10789: LD_INT 42
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 34
10798: PUSH
10799: LD_INT 43
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 34
10808: PUSH
10809: LD_INT 44
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 34
10818: PUSH
10819: LD_INT 46
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: ST_TO_ADDR
// if playerVehsEmpty then
10844: LD_VAR 0 1
10848: IFFALSE 10944
// begin for veh in playerVehsEmpty do
10850: LD_ADDR_VAR 0 3
10854: PUSH
10855: LD_VAR 0 1
10859: PUSH
10860: FOR_IN
10861: IFFALSE 10940
// begin if GetFuel ( veh ) >= 50 then
10863: LD_VAR 0 3
10867: PPUSH
10868: CALL_OW 261
10872: PUSH
10873: LD_INT 50
10875: GREATEREQUAL
10876: IFFALSE 10938
// begin yashinSearchVeh = false ;
10878: LD_ADDR_EXP 15
10882: PUSH
10883: LD_INT 0
10885: ST_TO_ADDR
// yashinVeh = veh ;
10886: LD_ADDR_EXP 14
10890: PUSH
10891: LD_VAR 0 3
10895: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10896: LD_EXP 14
10900: PPUSH
10901: LD_INT 6
10903: PPUSH
10904: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10908: LD_EXP 51
10912: PPUSH
10913: LD_EXP 14
10917: PPUSH
10918: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10922: LD_EXP 14
10926: PPUSH
10927: LD_INT 19
10929: PPUSH
10930: CALL_OW 113
// exit ;
10934: POP
10935: POP
10936: GO 11078
// end ; end ;
10938: GO 10860
10940: POP
10941: POP
// end else
10942: GO 11077
// if playerVehs then
10944: LD_VAR 0 2
10948: IFFALSE 11077
// begin for veh in playerVehs do
10950: LD_ADDR_VAR 0 3
10954: PUSH
10955: LD_VAR 0 2
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11075
// begin if GetFuel ( veh ) >= 50 then
10963: LD_VAR 0 3
10967: PPUSH
10968: CALL_OW 261
10972: PUSH
10973: LD_INT 50
10975: GREATEREQUAL
10976: IFFALSE 11073
// begin yashinSearchVeh = false ;
10978: LD_ADDR_EXP 15
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// yashinVeh = veh ;
10986: LD_ADDR_EXP 14
10990: PUSH
10991: LD_VAR 0 3
10995: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 313
11010: PUSH
11011: LD_INT 1
11013: ARRAY
11014: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11015: LD_VAR 0 4
11019: PPUSH
11020: CALL_OW 121
// wait ( 0 0$1 ) ;
11024: LD_INT 35
11026: PPUSH
11027: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11031: LD_EXP 14
11035: PPUSH
11036: LD_INT 6
11038: PPUSH
11039: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11043: LD_EXP 51
11047: PPUSH
11048: LD_EXP 14
11052: PPUSH
11053: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11057: LD_EXP 14
11061: PPUSH
11062: LD_INT 19
11064: PPUSH
11065: CALL_OW 113
// exit ;
11069: POP
11070: POP
11071: GO 11078
// end ; end ;
11073: GO 10960
11075: POP
11076: POP
// end ; enable ;
11077: ENABLE
// end ;
11078: PPOPN 4
11080: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 19
11088: PPUSH
11089: CALL_OW 308
11093: IFFALSE 11116
11095: GO 11097
11097: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11107: LD_EXP 51
11111: PPUSH
11112: CALL_OW 64
// end ;
11116: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11117: LD_INT 22
11119: PUSH
11120: LD_INT 2
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 3
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 50
11139: PUSH
11140: EMPTY
11141: LIST
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 69
11152: PUSH
11153: LD_INT 7
11155: LESSEQUAL
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 21
11169: PUSH
11170: LD_INT 1
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 50
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: PPUSH
11188: CALL_OW 69
11192: PUSH
11193: LD_INT 6
11195: LESSEQUAL
11196: AND
11197: PUSH
11198: LD_INT 2
11200: PPUSH
11201: CALL_OW 303
11205: PUSH
11206: LD_INT 2
11208: PPUSH
11209: CALL_OW 301
11213: OR
11214: PUSH
11215: LD_INT 2
11217: PPUSH
11218: CALL_OW 255
11222: PUSH
11223: LD_INT 3
11225: EQUAL
11226: OR
11227: AND
11228: IFFALSE 11889
11230: GO 11232
11232: DISABLE
11233: LD_INT 0
11235: PPUSH
11236: PPUSH
11237: PPUSH
// begin enableCounter = false ;
11238: LD_ADDR_EXP 18
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// Display_strings = [ ] ;
11246: LD_ADDR_OWVAR 47
11250: PUSH
11251: EMPTY
11252: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11253: LD_INT 1
11255: PPUSH
11256: CALL 18771 0 1
11260: PPUSH
11261: CALL 18653 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11265: LD_EXP 50
11269: PPUSH
11270: LD_STRING DHeikeObj-Pop-1
11272: PPUSH
11273: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11277: LD_EXP 37
11281: PPUSH
11282: LD_STRING DHeikeObj-Bur-1
11284: PPUSH
11285: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11289: LD_EXP 50
11293: PPUSH
11294: LD_STRING DHeikeObj-Pop-2
11296: PPUSH
11297: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11301: LD_EXP 37
11305: PPUSH
11306: LD_STRING DHeikeObj-Bur-2
11308: PPUSH
11309: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11313: LD_STRING MHeike
11315: PPUSH
11316: CALL_OW 337
// Query ( QHeike ) ;
11320: LD_STRING QHeike
11322: PPUSH
11323: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11327: LD_EXP 11
11331: NOT
11332: PUSH
11333: LD_EXP 45
11337: AND
11338: PUSH
11339: LD_EXP 45
11343: PPUSH
11344: CALL_OW 301
11348: NOT
11349: AND
11350: IFFALSE 11741
// begin if IsInUnit ( Kirilenkova ) then
11352: LD_EXP 45
11356: PPUSH
11357: CALL_OW 310
11361: IFFALSE 11410
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11363: LD_EXP 55
11367: PPUSH
11368: LD_EXP 45
11372: PPUSH
11373: CALL_OW 310
11377: PPUSH
11378: CALL_OW 250
11382: PPUSH
11383: LD_EXP 45
11387: PPUSH
11388: CALL_OW 310
11392: PPUSH
11393: CALL_OW 251
11397: PPUSH
11398: LD_INT 5
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 50
11408: GO 11445
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11410: LD_EXP 55
11414: PPUSH
11415: LD_EXP 45
11419: PPUSH
11420: CALL_OW 250
11424: PPUSH
11425: LD_EXP 45
11429: PPUSH
11430: CALL_OW 251
11434: PPUSH
11435: LD_INT 5
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 50
// xavierSpawned = true ;
11445: LD_ADDR_EXP 11
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11453: LD_INT 70
11455: PPUSH
11456: CALL_OW 67
// InGameOn ;
11460: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11464: LD_EXP 55
11468: PPUSH
11469: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11473: LD_EXP 55
11477: PPUSH
11478: LD_EXP 45
11482: PPUSH
11483: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11487: LD_EXP 45
11491: PPUSH
11492: LD_EXP 55
11496: PPUSH
11497: CALL_OW 119
// DialogueOn ;
11501: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11505: LD_EXP 55
11509: PPUSH
11510: LD_STRING DMeetXavier-Xav-1
11512: PPUSH
11513: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11517: LD_EXP 45
11521: PPUSH
11522: LD_STRING DMeetXavier-Kir-1
11524: PPUSH
11525: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11529: LD_EXP 55
11533: PPUSH
11534: LD_STRING DMeetXavier-Xav-2
11536: PPUSH
11537: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11541: LD_EXP 37
11545: PPUSH
11546: LD_STRING DQrXavier#1-Bur-1
11548: PPUSH
11549: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11553: LD_EXP 45
11557: PPUSH
11558: LD_STRING DQrXavier#1-Kir-1
11560: PPUSH
11561: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11565: LD_EXP 55
11569: PPUSH
11570: LD_STRING DQrXavier#1-Xav-1
11572: PPUSH
11573: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11577: LD_EXP 45
11581: PPUSH
11582: LD_STRING DQrXavier#1-Kir-2
11584: PPUSH
11585: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11589: LD_EXP 55
11593: PPUSH
11594: LD_STRING DQrXavier#1-Xav-2
11596: PPUSH
11597: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11601: LD_EXP 45
11605: PPUSH
11606: LD_STRING DQrXavier#1-Kir-3
11608: PPUSH
11609: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11613: LD_EXP 55
11617: PPUSH
11618: LD_STRING DQrXavier#1-Xav-3
11620: PPUSH
11621: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11625: LD_EXP 45
11629: PPUSH
11630: LD_STRING DQrXavier#1-Kir-4
11632: PPUSH
11633: CALL_OW 88
// if IsOK ( Gleb ) then
11637: LD_EXP 40
11641: PPUSH
11642: CALL_OW 302
11646: IFFALSE 11660
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11648: LD_EXP 40
11652: PPUSH
11653: LD_STRING DQrXavier#1-Glb-4
11655: PPUSH
11656: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11660: LD_ADDR_VAR 0 3
11664: PUSH
11665: LD_EXP 55
11669: PPUSH
11670: CALL_OW 254
11674: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_EXP 55
11684: PPUSH
11685: CALL_OW 250
11689: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: LD_EXP 55
11699: PPUSH
11700: CALL_OW 251
11704: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11705: LD_EXP 55
11709: PPUSH
11710: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_VAR 0 2
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: CALL 1157 0 3
// DialogueOff ;
11733: CALL_OW 7
// IngameOff ;
11737: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11741: LD_EXP 11
11745: PUSH
11746: LD_EXP 55
11750: PPUSH
11751: CALL_OW 255
11755: PUSH
11756: LD_INT 5
11758: EQUAL
11759: AND
11760: PUSH
11761: LD_INT 3
11763: PPUSH
11764: LD_INT 5
11766: PPUSH
11767: CALL_OW 81
11771: PUSH
11772: LD_INT 1
11774: EQUAL
11775: AND
11776: IFFALSE 11859
// begin xavierPatrol = false ;
11778: LD_ADDR_EXP 7
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_EXP 55
11795: PPUSH
11796: CALL_OW 254
11800: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11801: LD_ADDR_VAR 0 1
11805: PUSH
11806: LD_EXP 55
11810: PPUSH
11811: CALL_OW 250
11815: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11816: LD_ADDR_VAR 0 2
11820: PUSH
11821: LD_EXP 55
11825: PPUSH
11826: CALL_OW 251
11830: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11831: LD_EXP 55
11835: PPUSH
11836: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: LD_VAR 0 2
11849: PPUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: CALL 1157 0 3
// end ; wait ( 2 2$30 ) ;
11859: LD_INT 5250
11861: PPUSH
11862: CALL_OW 67
// PrepareHeikeGroup ;
11866: CALL 4899 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11870: LD_EXP 57
11874: PPUSH
11875: LD_EXP 58
11879: PPUSH
11880: LD_EXP 35
11884: PPUSH
11885: CALL 25569 0 3
// end ;
11889: PPOPN 3
11891: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11892: LD_EXP 57
11896: PPUSH
11897: CALL_OW 303
11901: IFFALSE 11925
11903: GO 11905
11905: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11906: LD_EXP 56
11910: PPUSH
11911: LD_EXP 58
11915: PPUSH
11916: LD_EXP 35
11920: PPUSH
11921: CALL 25569 0 3
11925: END
// every 0 0$1 trigger IsDying ( Heike ) do
11926: LD_EXP 56
11930: PPUSH
11931: CALL_OW 303
11935: IFFALSE 11973
11937: GO 11939
11939: DISABLE
// begin canCaptureHeike = true ;
11940: LD_ADDR_EXP 16
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// ComStop ( Heike ) ;
11948: LD_EXP 56
11952: PPUSH
11953: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
11957: LD_INT 8
11959: PPUSH
11960: LD_INT 3
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 80
// end ;
11973: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
11974: LD_EXP 56
11978: PPUSH
11979: CALL_OW 256
11983: PUSH
11984: LD_INT 250
11986: GREATER
11987: PUSH
11988: LD_EXP 16
11992: AND
11993: IFFALSE 12002
11995: GO 11997
11997: DISABLE
// Dial_CaptureHeike ;
11998: CALL 12003 0 0
12002: END
// export function Dial_CaptureHeike ; begin
12003: LD_INT 0
12005: PPUSH
// heikeCaptured = true ;
12006: LD_ADDR_EXP 17
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// enableCounter = false ;
12014: LD_ADDR_EXP 18
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// InGameOn ;
12022: CALL_OW 8
// DialogueOn ;
12026: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12030: LD_EXP 56
12034: PPUSH
12035: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12039: LD_EXP 56
12043: PPUSH
12044: LD_STRING DHeikeCapt-Hke-1
12046: PPUSH
12047: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12051: LD_EXP 37
12055: PPUSH
12056: LD_STRING DHeikeCapt-Bur-1
12058: PPUSH
12059: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12063: LD_EXP 56
12067: PPUSH
12068: LD_STRING DHeikeCapt-Hke-2
12070: PPUSH
12071: CALL_OW 88
// DialogueOff ;
12075: CALL_OW 7
// IngameOff ;
12079: CALL_OW 9
// FinishMission ;
12083: CALL 16548 0 0
// end ;
12087: LD_VAR 0 1
12091: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12092: LD_EXP 56
12096: PPUSH
12097: CALL_OW 301
12101: PUSH
12102: LD_EXP 56
12106: PPUSH
12107: CALL_OW 305
12111: AND
12112: IFFALSE 12121
12114: GO 12116
12116: DISABLE
// FinishMission ; end_of_file
12117: CALL 16548 0 0
12121: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12122: LD_INT 0
12124: PPUSH
12125: PPUSH
// if debugMode then
12126: LD_EXP 26
12130: IFFALSE 12147
// unit := NewCharacter ( ident ) ;
12132: LD_ADDR_VAR 0 5
12136: PUSH
12137: LD_VAR 0 1
12141: PPUSH
12142: CALL_OW 25
12146: ST_TO_ADDR
// if exist_mode and not debugMode then
12147: LD_VAR 0 2
12151: PUSH
12152: LD_EXP 26
12156: NOT
12157: AND
12158: IFFALSE 12183
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12160: LD_ADDR_VAR 0 5
12164: PUSH
12165: LD_EXP 25
12169: PUSH
12170: LD_VAR 0 1
12174: STR
12175: PPUSH
12176: CALL_OW 34
12180: ST_TO_ADDR
12181: GO 12205
// if not debugMode then
12183: LD_EXP 26
12187: NOT
12188: IFFALSE 12205
// unit := NewCharacter ( ident ) ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_VAR 0 1
12199: PPUSH
12200: CALL_OW 25
12204: ST_TO_ADDR
// if class then
12205: LD_VAR 0 3
12209: IFFALSE 12225
// SetClass ( unit , class ) ;
12211: LD_VAR 0 5
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: CALL_OW 336
// result := unit ;
12225: LD_ADDR_VAR 0 4
12229: PUSH
12230: LD_VAR 0 5
12234: ST_TO_ADDR
// end ;
12235: LD_VAR 0 4
12239: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12240: LD_INT 0
12242: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12243: LD_VAR 0 1
12247: PPUSH
12248: CALL_OW 255
12252: PUSH
12253: LD_VAR 0 3
12257: EQUAL
12258: PUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: CALL_OW 301
12268: NOT
12269: AND
12270: IFFALSE 12292
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12272: LD_VAR 0 1
12276: PPUSH
12277: LD_EXP 24
12281: PUSH
12282: LD_VAR 0 2
12286: STR
12287: PPUSH
12288: CALL_OW 38
// end ;
12292: LD_VAR 0 4
12296: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12297: LD_INT 0
12299: PPUSH
12300: PPUSH
12301: PPUSH
// resultCharactersToSave = [ ] ;
12302: LD_ADDR_VAR 0 6
12306: PUSH
12307: EMPTY
12308: ST_TO_ADDR
// for unit in characters do
12309: LD_ADDR_VAR 0 5
12313: PUSH
12314: LD_VAR 0 1
12318: PUSH
12319: FOR_IN
12320: IFFALSE 12369
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12322: LD_VAR 0 5
12326: PPUSH
12327: CALL_OW 255
12331: PUSH
12332: LD_VAR 0 3
12336: EQUAL
12337: PUSH
12338: LD_VAR 0 5
12342: PPUSH
12343: CALL_OW 301
12347: NOT
12348: AND
12349: IFFALSE 12367
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12351: LD_ADDR_VAR 0 6
12355: PUSH
12356: LD_VAR 0 6
12360: PUSH
12361: LD_VAR 0 5
12365: ADD
12366: ST_TO_ADDR
12367: GO 12319
12369: POP
12370: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12371: LD_VAR 0 6
12375: PPUSH
12376: LD_EXP 24
12380: PUSH
12381: LD_VAR 0 2
12385: STR
12386: PPUSH
12387: CALL_OW 38
// end ;
12391: LD_VAR 0 4
12395: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
// for unit in units do
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: LD_VAR 0 1
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12434
// PlaceUnitArea ( unit , area , spawnMode ) ;
12413: LD_VAR 0 5
12417: PPUSH
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_VAR 0 3
12427: PPUSH
12428: CALL_OW 49
12432: GO 12410
12434: POP
12435: POP
// end ;
12436: LD_VAR 0 4
12440: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
12446: PPUSH
// units = characters ;
12447: LD_ADDR_VAR 0 9
12451: PUSH
12452: LD_VAR 0 1
12456: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12457: LD_ADDR_VAR 0 9
12461: PUSH
12462: LD_VAR 0 9
12466: PUSH
12467: LD_EXP 37
12471: PUSH
12472: LD_EXP 38
12476: PUSH
12477: LD_EXP 39
12481: PUSH
12482: LD_EXP 40
12486: PUSH
12487: LD_EXP 41
12491: PUSH
12492: LD_EXP 42
12496: PUSH
12497: LD_EXP 43
12501: PUSH
12502: LD_EXP 44
12506: PUSH
12507: LD_EXP 48
12511: PUSH
12512: LD_EXP 45
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: DIFF
12529: ST_TO_ADDR
// if not units and not canTalkHero then
12530: LD_VAR 0 9
12534: NOT
12535: PUSH
12536: LD_VAR 0 5
12540: NOT
12541: AND
12542: IFFALSE 12546
// exit ;
12544: GO 12719
// if not units then
12546: LD_VAR 0 9
12550: NOT
12551: IFFALSE 12572
// units = characters diff [ Burlak ] ;
12553: LD_ADDR_VAR 0 9
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_EXP 37
12567: PUSH
12568: EMPTY
12569: LIST
12570: DIFF
12571: ST_TO_ADDR
// if not units and canTalkHero then
12572: LD_VAR 0 9
12576: NOT
12577: PUSH
12578: LD_VAR 0 5
12582: AND
12583: IFFALSE 12587
// exit ;
12585: GO 12719
// speaker := units [ rand ( 1 , units ) ] ;
12587: LD_ADDR_VAR 0 8
12591: PUSH
12592: LD_VAR 0 9
12596: PUSH
12597: LD_INT 1
12599: PPUSH
12600: LD_VAR 0 9
12604: PPUSH
12605: CALL_OW 12
12609: ARRAY
12610: ST_TO_ADDR
// if radio then
12611: LD_VAR 0 4
12615: IFFALSE 12664
// begin if GetSex ( speaker ) = sex_male then
12617: LD_VAR 0 8
12621: PPUSH
12622: CALL_OW 258
12626: PUSH
12627: LD_INT 1
12629: EQUAL
12630: IFFALSE 12648
// SayRadio ( speaker , dialogMID ) else
12632: LD_VAR 0 8
12636: PPUSH
12637: LD_VAR 0 2
12641: PPUSH
12642: CALL_OW 94
12646: GO 12662
// SayRadio ( speaker , dialogFID ) ;
12648: LD_VAR 0 8
12652: PPUSH
12653: LD_VAR 0 3
12657: PPUSH
12658: CALL_OW 94
// end else
12662: GO 12709
// begin if GetSex ( speaker ) = sex_male then
12664: LD_VAR 0 8
12668: PPUSH
12669: CALL_OW 258
12673: PUSH
12674: LD_INT 1
12676: EQUAL
12677: IFFALSE 12695
// Say ( speaker , dialogMID ) else
12679: LD_VAR 0 8
12683: PPUSH
12684: LD_VAR 0 2
12688: PPUSH
12689: CALL_OW 88
12693: GO 12709
// Say ( speaker , dialogFID ) ;
12695: LD_VAR 0 8
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: CALL_OW 88
// end ; result := speaker ;
12709: LD_ADDR_VAR 0 6
12713: PUSH
12714: LD_VAR 0 8
12718: ST_TO_ADDR
// end ;
12719: LD_VAR 0 6
12723: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12724: LD_INT 0
12726: PPUSH
12727: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12728: LD_ADDR_VAR 0 4
12732: PUSH
12733: LD_VAR 0 2
12737: PPUSH
12738: CALL_OW 254
12742: PUSH
12743: LD_INT 3
12745: MINUS
12746: ST_TO_ADDR
// if dir < 0 then
12747: LD_VAR 0 4
12751: PUSH
12752: LD_INT 0
12754: LESS
12755: IFFALSE 12771
// dir := 6 + dir ;
12757: LD_ADDR_VAR 0 4
12761: PUSH
12762: LD_INT 6
12764: PUSH
12765: LD_VAR 0 4
12769: PLUS
12770: ST_TO_ADDR
// SetDir ( un , dir ) ;
12771: LD_VAR 0 1
12775: PPUSH
12776: LD_VAR 0 4
12780: PPUSH
12781: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12785: LD_VAR 0 1
12789: PPUSH
12790: LD_VAR 0 2
12794: PPUSH
12795: CALL_OW 52
// result = un ;
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: LD_VAR 0 1
12808: ST_TO_ADDR
// end ;
12809: LD_VAR 0 3
12813: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12814: LD_INT 0
12816: PPUSH
12817: PPUSH
// for eng in engs do
12818: LD_ADDR_VAR 0 4
12822: PUSH
12823: LD_VAR 0 1
12827: PUSH
12828: FOR_IN
12829: IFFALSE 12946
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12831: LD_VAR 0 4
12835: PPUSH
12836: CALL_OW 257
12840: PUSH
12841: LD_INT 2
12843: EQUAL
12844: PUSH
12845: LD_VAR 0 4
12849: PPUSH
12850: CALL_OW 302
12854: AND
12855: PUSH
12856: LD_VAR 0 2
12860: AND
12861: PUSH
12862: LD_VAR 0 2
12866: PPUSH
12867: CALL_OW 255
12871: PUSH
12872: LD_VAR 0 4
12876: PPUSH
12877: CALL_OW 255
12881: EQUAL
12882: NOT
12883: AND
12884: IFFALSE 12944
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12886: LD_VAR 0 4
12890: PPUSH
12891: LD_STRING e
12893: PUSH
12894: LD_VAR 0 2
12898: PPUSH
12899: CALL_OW 250
12903: PUSH
12904: LD_VAR 0 2
12908: PPUSH
12909: CALL_OW 251
12913: PUSH
12914: LD_VAR 0 2
12918: PUSH
12919: LD_INT 0
12921: PUSH
12922: LD_INT 0
12924: PUSH
12925: LD_INT 0
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: PPUSH
12940: CALL_OW 447
12944: GO 12828
12946: POP
12947: POP
12948: LD_VAR 0 3
12952: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
12953: LD_INT 0
12955: PPUSH
// if not GetClass ( unit ) = class_soldier then
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 257
12965: PUSH
12966: LD_INT 1
12968: EQUAL
12969: NOT
12970: IFFALSE 12974
// exit ;
12972: GO 13022
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
12974: LD_VAR 0 1
12978: PPUSH
12979: LD_STRING p
12981: PUSH
12982: LD_VAR 0 2
12986: PUSH
12987: LD_VAR 0 3
12991: PUSH
12992: LD_INT 0
12994: PUSH
12995: LD_VAR 0 4
12999: PUSH
13000: LD_INT 0
13002: PUSH
13003: LD_INT 0
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: PPUSH
13018: CALL_OW 447
13022: LD_VAR 0 5
13026: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13033: LD_ADDR_VAR 0 7
13037: PUSH
13038: LD_VAR 0 1
13042: PUSH
13043: LD_VAR 0 2
13047: ARRAY
13048: PPUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: CALL_OW 3
13058: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13059: LD_ADDR_VAR 0 1
13063: PUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: LD_VAR 0 2
13073: PPUSH
13074: LD_VAR 0 7
13078: PPUSH
13079: CALL_OW 1
13083: ST_TO_ADDR
// result := tab ;
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: LD_VAR 0 1
13093: ST_TO_ADDR
// end ;
13094: LD_VAR 0 4
13098: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13099: LD_INT 0
13101: PPUSH
13102: PPUSH
13103: PPUSH
13104: PPUSH
13105: PPUSH
13106: PPUSH
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
13112: PPUSH
// result := [ ] ;
13113: LD_ADDR_VAR 0 8
13117: PUSH
13118: EMPTY
13119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 266
13129: PUSH
13130: LD_INT 0
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: IN
13140: NOT
13141: IFFALSE 13145
// exit ;
13143: GO 14786
// if name then
13145: LD_VAR 0 3
13149: IFFALSE 13165
// SetBName ( base_dep , name ) ;
13151: LD_VAR 0 1
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: CALL_OW 500
// base := GetBase ( base_dep ) ;
13165: LD_ADDR_VAR 0 16
13169: PUSH
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 274
13179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13180: LD_ADDR_VAR 0 17
13184: PUSH
13185: LD_VAR 0 1
13189: PPUSH
13190: CALL_OW 255
13194: ST_TO_ADDR
// if sources then
13195: LD_VAR 0 5
13199: IFFALSE 13246
// for i = 1 to 3 do
13201: LD_ADDR_VAR 0 9
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_INT 3
13213: PUSH
13214: FOR_TO
13215: IFFALSE 13244
// AddResourceType ( base , i , sources [ i ] ) ;
13217: LD_VAR 0 16
13221: PPUSH
13222: LD_VAR 0 9
13226: PPUSH
13227: LD_VAR 0 5
13231: PUSH
13232: LD_VAR 0 9
13236: ARRAY
13237: PPUSH
13238: CALL_OW 276
13242: GO 13214
13244: POP
13245: POP
// buildings := GetBaseBuildings ( base , area ) ;
13246: LD_ADDR_VAR 0 18
13250: PUSH
13251: NOP4
13255: PPUSH
13256: NOP4
13260: PPUSH
13261: NOP4
13265: ST_TO_ADDR
// InitHc ;
13266: NOP4
// InitUc ;
13270: NOP4
// uc_side := side ;
13274: LD_ADDR_OWVAR 20
13278: PUSH
13279: NOP4
13283: ST_TO_ADDR
// uc_nation := nation ;
13284: LD_ADDR_OWVAR 21
13288: PUSH
13289: NOP4
13293: ST_TO_ADDR
// if buildings then
13294: NOP4
13298: IFFALSE 14645
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13300: NOP4
13304: PUSH
13305: NOP4
13309: PPUSH
13310: LD_INT 2
13312: PUSH
13313: LD_INT 30
13315: PUSH
13316: LD_INT 29
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 30
13325: PUSH
13326: LD_INT 30
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: PPUSH
13338: NOP4
13342: ST_TO_ADDR
// if tmp then
13343: NOP4
13347: IFFALSE 13395
// for i in tmp do
13349: NOP4
13353: PUSH
13354: NOP4
13358: PUSH
13359: FOR_IN
13360: IFFALSE 13393
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13362: NOP4
13366: PPUSH
13367: NOP4
13371: PPUSH
13372: NOP4
13376: PPUSH
13377: NOP4
13381: PPUSH
13382: NOP4
13386: PPUSH
13387: NOP4
13391: GO 13359
13393: POP
13394: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13395: NOP4
13399: PPUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 30
13405: PUSH
13406: LD_INT 31
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 32
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: LD_INT 33
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PPUSH
13439: NOP4
13443: IFFALSE 13542
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13445: NOP4
13449: PUSH
13450: NOP4
13454: PPUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 30
13460: PUSH
13461: LD_INT 31
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 30
13470: PUSH
13471: LD_INT 32
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 30
13480: PUSH
13481: LD_INT 33
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: PPUSH
13494: NOP4
13498: PUSH
13499: FOR_IN
13500: IFFALSE 13540
// begin if not GetBWeapon ( i ) then
13502: NOP4
13506: PPUSH
13507: NOP4
13511: NOT
13512: IFFALSE 13538
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13514: NOP4
13518: PPUSH
13519: NOP4
13523: PPUSH
13524: NOP4
13528: PPUSH
13529: NOP4
13533: PPUSH
13534: NOP4
// end ;
13538: GO 13499
13540: POP
13541: POP
// end ; for i = 1 to personel do
13542: NOP4
13546: PUSH
13547: DOUBLE
13548: LD_INT 1
13550: DEC
13551: ST_TO_ADDR
13552: NOP4
13556: PUSH
13557: FOR_TO
13558: IFFALSE 14625
// begin if i > 4 then
13560: NOP4
13564: PUSH
13565: LD_INT 4
13567: GREATER
13568: IFFALSE 13572
// break ;
13570: GO 14625
// case i of 1 :
13572: NOP4
13576: PUSH
13577: LD_INT 1
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13676
13585: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13586: NOP4
13590: PUSH
13591: NOP4
13595: PPUSH
13596: LD_INT 22
13598: PUSH
13599: NOP4
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 58
13610: PUSH
13611: EMPTY
13612: LIST
13613: PUSH
13614: LD_INT 2
13616: PUSH
13617: LD_INT 30
13619: PUSH
13620: LD_INT 31
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 30
13629: PUSH
13630: LD_INT 32
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 30
13639: PUSH
13640: LD_INT 4
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 30
13649: PUSH
13650: LD_INT 5
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: PPUSH
13669: NOP4
13673: ST_TO_ADDR
13674: GO 13898
13676: LD_INT 2
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13746
13684: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13685: NOP4
13689: PUSH
13690: NOP4
13694: PPUSH
13695: LD_INT 22
13697: PUSH
13698: NOP4
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 30
13712: PUSH
13713: LD_INT 0
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 30
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PPUSH
13739: NOP4
13743: ST_TO_ADDR
13744: GO 13898
13746: LD_INT 3
13748: DOUBLE
13749: EQUAL
13750: IFTRUE 13754
13752: GO 13816
13754: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13755: NOP4
13759: PUSH
13760: NOP4
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: NOP4
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: LD_INT 30
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 30
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: NOP4
13813: ST_TO_ADDR
13814: GO 13898
13816: LD_INT 4
13818: DOUBLE
13819: EQUAL
13820: IFTRUE 13824
13822: GO 13897
13824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13825: NOP4
13829: PUSH
13830: NOP4
13834: PPUSH
13835: LD_INT 22
13837: PUSH
13838: NOP4
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: LD_INT 30
13852: PUSH
13853: LD_INT 6
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 30
13862: PUSH
13863: LD_INT 7
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 30
13872: PUSH
13873: LD_INT 8
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PPUSH
13890: NOP4
13894: ST_TO_ADDR
13895: GO 13898
13897: POP
// if i = 1 then
13898: NOP4
13902: PUSH
13903: LD_INT 1
13905: EQUAL
13906: IFFALSE 14024
// begin tmp := [ ] ;
13908: NOP4
13912: PUSH
13913: EMPTY
13914: ST_TO_ADDR
// for j in f do
13915: NOP4
13919: PUSH
13920: NOP4
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14006
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13928: NOP4
13932: PPUSH
13933: NOP4
13937: PUSH
13938: LD_INT 31
13940: PUSH
13941: LD_INT 32
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: IN
13948: IFFALSE 13975
// tmp := Insert ( tmp , 1 , j ) else
13950: NOP4
13954: PUSH
13955: NOP4
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: NOP4
13967: PPUSH
13968: NOP4
13972: ST_TO_ADDR
13973: GO 14004
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13975: NOP4
13979: PUSH
13980: NOP4
13984: PPUSH
13985: NOP4
13989: PUSH
13990: LD_INT 1
13992: PLUS
13993: PPUSH
13994: NOP4
13998: PPUSH
13999: NOP4
14003: ST_TO_ADDR
14004: GO 13925
14006: POP
14007: POP
// if tmp then
14008: NOP4
14012: IFFALSE 14024
// f := tmp ;
14014: NOP4
14018: PUSH
14019: NOP4
14023: ST_TO_ADDR
// end ; x := personel [ i ] ;
14024: NOP4
14028: PUSH
14029: NOP4
14033: PUSH
14034: NOP4
14038: ARRAY
14039: ST_TO_ADDR
// if x = - 1 then
14040: NOP4
14044: PUSH
14045: LD_INT 1
14047: NEG
14048: EQUAL
14049: IFFALSE 14243
// begin for j in f do
14051: NOP4
14055: PUSH
14056: NOP4
14060: PUSH
14061: FOR_IN
14062: IFFALSE 14239
// repeat InitHc ;
14064: NOP4
// if GetBType ( j ) = b_barracks then
14068: NOP4
14072: PPUSH
14073: NOP4
14077: PUSH
14078: LD_INT 5
14080: EQUAL
14081: IFFALSE 14136
// begin if UnitsInside ( j ) < 3 then
14083: NOP4
14087: PPUSH
14088: NOP4
14092: PUSH
14093: LD_INT 3
14095: LESS
14096: IFFALSE 14117
// PrepareHuman ( false , i , skill ) else
14098: LD_INT 0
14100: PPUSH
14101: NOP4
14105: PPUSH
14106: NOP4
14110: PPUSH
14111: NOP4
14115: GO 14134
// PrepareHuman ( false , i , skill ) ;
14117: LD_INT 0
14119: PPUSH
14120: NOP4
14124: PPUSH
14125: NOP4
14129: PPUSH
14130: NOP4
// end else
14134: GO 14153
// PrepareHuman ( false , i , skill ) ;
14136: LD_INT 0
14138: PPUSH
14139: NOP4
14143: PPUSH
14144: NOP4
14148: PPUSH
14149: NOP4
// un := CreateHuman ;
14153: NOP4
14157: PUSH
14158: NOP4
14162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14163: NOP4
14167: PUSH
14168: NOP4
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: NOP4
14180: PPUSH
14181: NOP4
14185: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14186: NOP4
14190: PPUSH
14191: NOP4
14195: PPUSH
14196: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14200: NOP4
14204: PPUSH
14205: NOP4
14209: PUSH
14210: LD_INT 6
14212: EQUAL
14213: PUSH
14214: NOP4
14218: PPUSH
14219: NOP4
14223: PUSH
14224: LD_INT 32
14226: PUSH
14227: LD_INT 31
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: IN
14234: OR
14235: IFFALSE 14064
14237: GO 14061
14239: POP
14240: POP
// end else
14241: GO 14623
// for j = 1 to x do
14243: NOP4
14247: PUSH
14248: DOUBLE
14249: LD_INT 1
14251: DEC
14252: ST_TO_ADDR
14253: NOP4
14257: PUSH
14258: FOR_TO
14259: IFFALSE 14621
// begin InitHc ;
14261: NOP4
// if not f then
14265: NOP4
14269: NOT
14270: IFFALSE 14359
// begin PrepareHuman ( false , i , skill ) ;
14272: LD_INT 0
14274: PPUSH
14275: NOP4
14279: PPUSH
14280: NOP4
14284: PPUSH
14285: NOP4
// un := CreateHuman ;
14289: NOP4
14293: PUSH
14294: NOP4
14298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14299: NOP4
14303: PUSH
14304: NOP4
14308: PPUSH
14309: LD_INT 1
14311: PPUSH
14312: NOP4
14316: PPUSH
14317: NOP4
14321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14322: NOP4
14326: PPUSH
14327: NOP4
14331: PPUSH
14332: NOP4
14336: PPUSH
14337: NOP4
14341: PPUSH
14342: NOP4
14346: PPUSH
14347: LD_INT 10
14349: PPUSH
14350: LD_INT 0
14352: PPUSH
14353: NOP4
// continue ;
14357: GO 14258
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14359: NOP4
14363: PUSH
14364: LD_INT 1
14366: ARRAY
14367: PPUSH
14368: NOP4
14372: PUSH
14373: NOP4
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: NOP4
14386: PUSH
14387: LD_INT 32
14389: PUSH
14390: LD_INT 31
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: IN
14397: AND
14398: PUSH
14399: NOP4
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PPUSH
14408: NOP4
14412: PUSH
14413: LD_INT 6
14415: EQUAL
14416: OR
14417: IFFALSE 14437
// f := Delete ( f , 1 ) ;
14419: NOP4
14423: PUSH
14424: NOP4
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: NOP4
14436: ST_TO_ADDR
// if not f then
14437: NOP4
14441: NOT
14442: IFFALSE 14460
// begin x := x + 2 ;
14444: NOP4
14448: PUSH
14449: NOP4
14453: PUSH
14454: LD_INT 2
14456: PLUS
14457: ST_TO_ADDR
// continue ;
14458: GO 14258
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14460: NOP4
14464: PUSH
14465: LD_INT 1
14467: ARRAY
14468: PPUSH
14469: NOP4
14473: PUSH
14474: LD_INT 5
14476: EQUAL
14477: IFFALSE 14551
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14479: NOP4
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PPUSH
14488: NOP4
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14532
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14498: LD_INT 0
14500: PPUSH
14501: LD_INT 5
14503: PUSH
14504: LD_INT 8
14506: PUSH
14507: LD_INT 9
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: NOP4
14519: ARRAY
14520: PPUSH
14521: NOP4
14525: PPUSH
14526: NOP4
14530: GO 14549
// PrepareHuman ( false , i , skill ) ;
14532: LD_INT 0
14534: PPUSH
14535: NOP4
14539: PPUSH
14540: NOP4
14544: PPUSH
14545: NOP4
// end else
14549: GO 14568
// PrepareHuman ( false , i , skill ) ;
14551: LD_INT 0
14553: PPUSH
14554: NOP4
14558: PPUSH
14559: NOP4
14563: PPUSH
14564: NOP4
// un := CreateHuman ;
14568: NOP4
14572: PUSH
14573: NOP4
14577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14578: NOP4
14582: PUSH
14583: NOP4
14587: PPUSH
14588: LD_INT 1
14590: PPUSH
14591: NOP4
14595: PPUSH
14596: NOP4
14600: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14601: NOP4
14605: PPUSH
14606: NOP4
14610: PUSH
14611: LD_INT 1
14613: ARRAY
14614: PPUSH
14615: NOP4
// end ;
14619: GO 14258
14621: POP
14622: POP
// end ;
14623: GO 13557
14625: POP
14626: POP
// result := result ^ buildings ;
14627: NOP4
14631: PUSH
14632: NOP4
14636: PUSH
14637: NOP4
14641: ADD
14642: ST_TO_ADDR
// end else
14643: GO 14786
// begin for i = 1 to personel do
14645: NOP4
14649: PUSH
14650: DOUBLE
14651: LD_INT 1
14653: DEC
14654: ST_TO_ADDR
14655: NOP4
14659: PUSH
14660: FOR_TO
14661: IFFALSE 14784
// begin if i > 4 then
14663: NOP4
14667: PUSH
14668: LD_INT 4
14670: GREATER
14671: IFFALSE 14675
// break ;
14673: GO 14784
// x := personel [ i ] ;
14675: NOP4
14679: PUSH
14680: NOP4
14684: PUSH
14685: NOP4
14689: ARRAY
14690: ST_TO_ADDR
// if x = - 1 then
14691: NOP4
14695: PUSH
14696: LD_INT 1
14698: NEG
14699: EQUAL
14700: IFFALSE 14704
// continue ;
14702: GO 14660
// PrepareHuman ( false , i , skill ) ;
14704: LD_INT 0
14706: PPUSH
14707: NOP4
14711: PPUSH
14712: NOP4
14716: PPUSH
14717: NOP4
// un := CreateHuman ;
14721: NOP4
14725: PUSH
14726: NOP4
14730: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14731: NOP4
14735: PPUSH
14736: NOP4
14740: PPUSH
14741: NOP4
14745: PPUSH
14746: NOP4
14750: PPUSH
14751: NOP4
14755: PPUSH
14756: LD_INT 10
14758: PPUSH
14759: LD_INT 0
14761: PPUSH
14762: NOP4
// result := result ^ un ;
14766: NOP4
14770: PUSH
14771: NOP4
14775: PUSH
14776: NOP4
14780: ADD
14781: ST_TO_ADDR
// end ;
14782: GO 14660
14784: POP
14785: POP
// end ; end ;
14786: LD_VAR 0 8
14790: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14797: NOP4
14801: PUSH
14802: LD_INT 34
14804: PUSH
14805: LD_INT 71
14807: PUSH
14808: LD_INT 70
14810: PUSH
14811: LD_INT 69
14813: PUSH
14814: LD_INT 39
14816: PUSH
14817: LD_INT 31
14819: PUSH
14820: LD_INT 14
14822: PUSH
14823: LD_INT 10
14825: PUSH
14826: LD_INT 40
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: ST_TO_ADDR
// resultWeapons = [ ] ;
14840: NOP4
14844: PUSH
14845: EMPTY
14846: ST_TO_ADDR
// for i := 1 to weaponTechs do
14847: NOP4
14851: PUSH
14852: DOUBLE
14853: LD_INT 1
14855: DEC
14856: ST_TO_ADDR
14857: NOP4
14861: PUSH
14862: FOR_TO
14863: IFFALSE 15050
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14865: NOP4
14869: PUSH
14870: NOP4
14874: ARRAY
14875: PPUSH
14876: NOP4
14880: PPUSH
14881: NOP4
14885: PUSH
14886: NOP4
14890: PUSH
14891: NOP4
14895: ARRAY
14896: PPUSH
14897: NOP4
14901: PPUSH
14902: NOP4
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: AND
14911: IFFALSE 15048
// case nation of nation_american :
14913: NOP4
14917: PUSH
14918: LD_INT 1
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 14961
14926: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14927: NOP4
14931: PUSH
14932: NOP4
14936: PUSH
14937: NOP4
14941: PUSH
14942: NOP4
14946: ARRAY
14947: PPUSH
14948: NOP4
14952: PPUSH
14953: NOP4
14957: ADD
14958: ST_TO_ADDR
14959: GO 15048
14961: LD_INT 2
14963: DOUBLE
14964: EQUAL
14965: IFTRUE 14969
14967: GO 15004
14969: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14970: NOP4
14974: PUSH
14975: NOP4
14979: PUSH
14980: NOP4
14984: PUSH
14985: NOP4
14989: ARRAY
14990: PPUSH
14991: NOP4
14995: PPUSH
14996: NOP4
15000: ADD
15001: ST_TO_ADDR
15002: GO 15048
15004: LD_INT 3
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15047
15012: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15013: NOP4
15017: PUSH
15018: NOP4
15022: PUSH
15023: NOP4
15027: PUSH
15028: NOP4
15032: ARRAY
15033: PPUSH
15034: NOP4
15038: PPUSH
15039: NOP4
15043: ADD
15044: ST_TO_ADDR
15045: GO 15048
15047: POP
// end ;
15048: GO 14862
15050: POP
15051: POP
// result = resultWeapons ;
15052: NOP4
15056: PUSH
15057: NOP4
15061: ST_TO_ADDR
// end ;
15062: LD_VAR 0 3
15066: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15067: LD_INT 0
15069: PPUSH
// case tech of tech_AdvMet :
15070: NOP4
15074: PUSH
15075: LD_INT 34
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15111
15083: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15084: NOP4
15088: PUSH
15089: LD_INT 6
15091: PUSH
15092: LD_STRING 
15094: PUSH
15095: LD_INT 46
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: PUSH
15103: NOP4
15107: ARRAY
15108: ST_TO_ADDR
15109: GO 15400
15111: LD_INT 71
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15147
15119: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15120: NOP4
15124: PUSH
15125: LD_STRING 
15127: PUSH
15128: LD_STRING 
15130: PUSH
15131: LD_INT 47
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: PUSH
15139: NOP4
15143: ARRAY
15144: ST_TO_ADDR
15145: GO 15400
15147: LD_INT 70
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15183
15155: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15156: NOP4
15160: PUSH
15161: LD_STRING 
15163: PUSH
15164: LD_INT 26
15166: PUSH
15167: LD_STRING 
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: NOP4
15179: ARRAY
15180: ST_TO_ADDR
15181: GO 15400
15183: LD_INT 69
15185: DOUBLE
15186: EQUAL
15187: IFTRUE 15191
15189: GO 15219
15191: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15192: NOP4
15196: PUSH
15197: LD_INT 4
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 43
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: NOP4
15215: ARRAY
15216: ST_TO_ADDR
15217: GO 15400
15219: LD_INT 39
15221: DOUBLE
15222: EQUAL
15223: IFTRUE 15227
15225: GO 15255
15227: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15228: NOP4
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: LD_INT 27
15238: PUSH
15239: LD_INT 44
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: NOP4
15251: ARRAY
15252: ST_TO_ADDR
15253: GO 15400
15255: LD_INT 31
15257: DOUBLE
15258: EQUAL
15259: IFTRUE 15263
15261: GO 15291
15263: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15264: NOP4
15268: PUSH
15269: LD_STRING 
15271: PUSH
15272: LD_STRING 
15274: PUSH
15275: LD_INT 49
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: PUSH
15283: NOP4
15287: ARRAY
15288: ST_TO_ADDR
15289: GO 15400
15291: LD_INT 14
15293: DOUBLE
15294: EQUAL
15295: IFTRUE 15299
15297: GO 15327
15299: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15300: NOP4
15304: PUSH
15305: LD_INT 10
15307: PUSH
15308: LD_STRING 
15310: PUSH
15311: LD_STRING 
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: PUSH
15319: NOP4
15323: ARRAY
15324: ST_TO_ADDR
15325: GO 15400
15327: LD_INT 10
15329: DOUBLE
15330: EQUAL
15331: IFTRUE 15335
15333: GO 15363
15335: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15336: NOP4
15340: PUSH
15341: LD_INT 9
15343: PUSH
15344: LD_STRING 
15346: PUSH
15347: LD_STRING 
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: NOP4
15359: ARRAY
15360: ST_TO_ADDR
15361: GO 15400
15363: LD_INT 40
15365: DOUBLE
15366: EQUAL
15367: IFTRUE 15371
15369: GO 15399
15371: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15372: NOP4
15376: PUSH
15377: LD_INT 7
15379: PUSH
15380: LD_INT 28
15382: PUSH
15383: LD_INT 45
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: NOP4
15395: ARRAY
15396: ST_TO_ADDR
15397: GO 15400
15399: POP
// end ;
15400: LD_VAR 0 3
15404: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15405: LD_INT 0
15407: PPUSH
15408: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15409: NOP4
15413: PUSH
15414: NOP4
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: NOP4
15426: PUSH
15427: NOP4
15431: PPUSH
15432: LD_INT 2
15434: PPUSH
15435: NOP4
15439: PUSH
15440: NOP4
15444: PPUSH
15445: LD_INT 3
15447: PPUSH
15448: NOP4
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
// end ;
15458: LD_VAR 0 2
15462: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
// area = ListEnvironmentArea ( area ) ;
15467: NOP4
15471: PUSH
15472: NOP4
15476: PPUSH
15477: NOP4
15481: ST_TO_ADDR
// if bulldozer > 0 then
15482: NOP4
15486: PUSH
15487: LD_INT 0
15489: GREATER
15490: IFFALSE 15601
// for i = area downto 1 do
15492: NOP4
15496: PUSH
15497: DOUBLE
15498: NOP4
15502: INC
15503: ST_TO_ADDR
15504: LD_INT 1
15506: PUSH
15507: FOR_DOWNTO
15508: IFFALSE 15599
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15510: NOP4
15514: PUSH
15515: NOP4
15519: ARRAY
15520: PUSH
15521: LD_INT 1
15523: ARRAY
15524: PPUSH
15525: NOP4
15529: PUSH
15530: NOP4
15534: ARRAY
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PPUSH
15540: NOP4
15544: IFFALSE 15597
// if not HasTask ( bulldozer ) then
15546: NOP4
15550: PPUSH
15551: NOP4
15555: NOT
15556: IFFALSE 15597
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15558: NOP4
15562: PPUSH
15563: NOP4
15567: PUSH
15568: NOP4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: NOP4
15582: PUSH
15583: NOP4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: NOP4
15597: GO 15507
15599: POP
15600: POP
// end ;
15601: LD_VAR 0 3
15605: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15606: LD_INT 0
15608: PPUSH
15609: PPUSH
15610: PPUSH
// uc_side := GetSide ( b ) ;
15611: LD_ADDR_OWVAR 20
15615: PUSH
15616: NOP4
15620: PPUSH
15621: NOP4
15625: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15626: LD_ADDR_OWVAR 21
15630: PUSH
15631: NOP4
15635: PPUSH
15636: NOP4
15640: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15641: LD_INT 0
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: NOP4
15651: PPUSH
15652: NOP4
// un = CreateHuman ;
15656: NOP4
15660: PUSH
15661: NOP4
15665: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15666: NOP4
15670: PUSH
15671: NOP4
15675: PPUSH
15676: NOP4
15680: PUSH
15681: LD_INT 3
15683: MINUS
15684: ST_TO_ADDR
// if dir < 0 then
15685: NOP4
15689: PUSH
15690: LD_INT 0
15692: LESS
15693: IFFALSE 15709
// dir := 6 + dir ;
15695: NOP4
15699: PUSH
15700: LD_INT 6
15702: PUSH
15703: NOP4
15707: PLUS
15708: ST_TO_ADDR
// SetDir ( un , dir ) ;
15709: NOP4
15713: PPUSH
15714: NOP4
15718: PPUSH
15719: NOP4
// PlaceHumanInUnit ( un , b ) ;
15723: NOP4
15727: PPUSH
15728: NOP4
15732: PPUSH
15733: NOP4
// result = un ;
15737: NOP4
15741: PUSH
15742: NOP4
15746: ST_TO_ADDR
// end ; end_of_file
15747: LD_VAR 0 3
15751: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15752: NOP4
15756: PUSH
15757: LD_INT 53
15759: EQUAL
15760: PUSH
15761: NOP4
15765: PUSH
15766: NOP4
15770: EQUAL
15771: AND
15772: IFFALSE 15782
// xavierJoinToPlayer = true ;
15774: NOP4
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15782: NOP4
15786: PUSH
15787: LD_INT 6
15789: EQUAL
15790: PUSH
15791: NOP4
15795: PPUSH
15796: NOP4
15800: PUSH
15801: LD_INT 3
15803: EQUAL
15804: AND
15805: IFFALSE 15851
// begin ComExitVehicle ( human ) ;
15807: NOP4
15811: PPUSH
15812: NOP4
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15816: NOP4
15820: PUSH
15821: NOP4
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PPUSH
15830: LD_INT 6
15832: PPUSH
15833: NOP4
// ComEnterUnit ( Yashin , new_vehicle ) ;
15837: NOP4
15841: PPUSH
15842: NOP4
15846: PPUSH
15847: NOP4
// end ; end ;
15851: PPOPN 4
15853: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15854: NOP4
15858: PUSH
15859: LD_INT 3
15861: EQUAL
15862: PUSH
15863: NOP4
15867: PUSH
15868: LD_INT 5
15870: EQUAL
15871: AND
15872: IFFALSE 15922
// begin xavierPatrol = false ;
15874: NOP4
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15882: LD_INT 5
15884: PPUSH
15885: LD_INT 5
15887: PPUSH
15888: NOP4
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15892: LD_INT 3
15894: PPUSH
15895: LD_INT 5
15897: PPUSH
15898: LD_INT 2
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: NOP4
// ComAttackUnit ( Xavier , Burlak ) ;
15908: NOP4
15912: PPUSH
15913: NOP4
15917: PPUSH
15918: NOP4
// end ; end ;
15922: PPOPN 2
15924: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15925: LD_INT 0
15927: PPUSH
15928: PPUSH
// begin if unit = Burlak then
15929: NOP4
15933: PUSH
15934: NOP4
15938: EQUAL
15939: IFFALSE 15945
// Lose_Burlak ;
15941: NOP4
// if unit = Vsevolod then
15945: NOP4
15949: PUSH
15950: NOP4
15954: EQUAL
15955: IFFALSE 15961
// Lose_Vsevolod ;
15957: NOP4
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
15961: NOP4
15965: PUSH
15966: NOP4
15970: PPUSH
15971: NOP4
15975: PPUSH
15976: NOP4
15980: ST_TO_ADDR
// if aiData then
15981: NOP4
15985: IFFALSE 16194
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
15987: NOP4
15991: PPUSH
15992: NOP4
15996: PPUSH
15997: NOP4
16001: PPUSH
16002: NOP4
16006: PPUSH
16007: NOP4
16011: PUSH
16012: LD_INT 8
16014: ARRAY
16015: PPUSH
16016: NOP4
16020: NOT
16021: IFFALSE 16025
// exit ;
16023: GO 16194
// RemoveUnitFromAI ( aiData , unit ) ;
16025: NOP4
16029: PPUSH
16030: NOP4
16034: PPUSH
16035: NOP4
// if GetType ( unit ) = unit_building then
16039: NOP4
16043: PPUSH
16044: NOP4
16048: PUSH
16049: LD_INT 3
16051: EQUAL
16052: IFFALSE 16194
// begin if GetBType ( unit ) = 1 then
16054: NOP4
16058: PPUSH
16059: NOP4
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16079
// buildingType = 0 else
16069: NOP4
16073: PUSH
16074: LD_INT 0
16076: ST_TO_ADDR
16077: GO 16144
// if GetBType ( unit ) = 3 then
16079: NOP4
16083: PPUSH
16084: NOP4
16088: PUSH
16089: LD_INT 3
16091: EQUAL
16092: IFFALSE 16104
// buildingType = 2 else
16094: NOP4
16098: PUSH
16099: LD_INT 2
16101: ST_TO_ADDR
16102: GO 16144
// if GetBType ( unit ) = 5 then
16104: NOP4
16108: PPUSH
16109: NOP4
16113: PUSH
16114: LD_INT 5
16116: EQUAL
16117: IFFALSE 16129
// buildingType = 4 else
16119: NOP4
16123: PUSH
16124: LD_INT 4
16126: ST_TO_ADDR
16127: GO 16144
// buildingType = GetBType ( unit ) ;
16129: NOP4
16133: PUSH
16134: NOP4
16138: PPUSH
16139: NOP4
16143: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16144: NOP4
16148: PPUSH
16149: NOP4
16153: PUSH
16154: NOP4
16158: PPUSH
16159: NOP4
16163: PUSH
16164: NOP4
16168: PPUSH
16169: NOP4
16173: PUSH
16174: NOP4
16178: PPUSH
16179: NOP4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: NOP4
// end ; end ; end ;
16194: PPOPN 3
16196: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16197: LD_INT 0
16199: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16200: NOP4
16204: PUSH
16205: NOP4
16209: PPUSH
16210: NOP4
16214: PPUSH
16215: NOP4
16219: ST_TO_ADDR
// if aiData then
16220: NOP4
16224: IFFALSE 16463
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16226: NOP4
16230: PPUSH
16231: NOP4
16235: PUSH
16236: LD_INT 12
16238: PUSH
16239: LD_INT 32
16241: PUSH
16242: LD_INT 51
16244: PUSH
16245: LD_INT 13
16247: PUSH
16248: NOP4
16252: PUSH
16253: LD_INT 52
16255: PUSH
16256: LD_INT 14
16258: PUSH
16259: LD_INT 53
16261: PUSH
16262: LD_INT 31
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: IN
16276: NOT
16277: IFFALSE 16336
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16279: NOP4
16283: PUSH
16284: LD_INT 13
16286: ARRAY
16287: PUSH
16288: NOP4
16292: PPUSH
16293: NOP4
16297: GREATER
16298: IFFALSE 16319
// AddNewVehicle ( aiData , vehicle , 2 ) else
16300: NOP4
16304: PPUSH
16305: NOP4
16309: PPUSH
16310: LD_INT 2
16312: PPUSH
16313: NOP4
16317: GO 16336
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16319: NOP4
16323: PPUSH
16324: NOP4
16328: PPUSH
16329: LD_INT 4
16331: PPUSH
16332: NOP4
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16336: NOP4
16340: PPUSH
16341: NOP4
16345: PUSH
16346: LD_INT 12
16348: PUSH
16349: LD_INT 32
16351: PUSH
16352: LD_INT 51
16354: PUSH
16355: LD_INT 13
16357: PUSH
16358: NOP4
16362: PUSH
16363: LD_INT 52
16365: PUSH
16366: LD_INT 14
16368: PUSH
16369: LD_INT 53
16371: PUSH
16372: LD_INT 31
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: IN
16386: IFFALSE 16405
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16388: NOP4
16392: PPUSH
16393: NOP4
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: NOP4
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16405: NOP4
16409: PUSH
16410: NOP4
16414: PPUSH
16415: NOP4
16419: PUSH
16420: LD_INT 2
16422: EQUAL
16423: AND
16424: IFFALSE 16463
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16426: NOP4
16430: PPUSH
16431: NOP4
16435: PUSH
16436: LD_INT 1
16438: PPUSH
16439: NOP4
16443: PPUSH
16444: NOP4
16448: ARRAY
16449: PPUSH
16450: NOP4
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: PPUSH
16459: NOP4
// end ; end ;
16463: PPOPN 3
16465: END
// on BuildingStarted ( building , unit ) do var aiData ;
16466: LD_INT 0
16468: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16469: NOP4
16473: PUSH
16474: NOP4
16478: PPUSH
16479: NOP4
16483: PPUSH
16484: NOP4
16488: ST_TO_ADDR
// if ( aiData ) then
16489: NOP4
16493: IFFALSE 16518
// begin RemoveDestroyedBuilding ( aiData ) ;
16495: NOP4
16499: PPUSH
16500: NOP4
// AddNewUnit ( aiData , building ) ;
16504: NOP4
16508: PPUSH
16509: NOP4
16513: PPUSH
16514: NOP4
// end ; end ;
16518: PPOPN 3
16520: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16521: NOP4
16525: PUSH
16526: NOP4
16530: EQUAL
16531: IFFALSE 16545
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16533: NOP4
16537: PPUSH
16538: LD_INT 19
16540: PPUSH
16541: NOP4
// end ; end_of_file
16545: PPOPN 2
16547: END
// export function FinishMission ; begin
16548: LD_INT 0
16550: PPUSH
// SetRewards ;
16551: NOP4
// SavePlayerCharacters ;
16555: NOP4
// SaveGlobalVariables ;
16559: NOP4
// YouWin ;
16563: NOP4
// end ;
16567: LD_VAR 0 1
16571: RET
// function SetRewards ; begin
16572: LD_INT 0
16574: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16575: NOP4
16579: PPUSH
16580: NOP4
16584: PUSH
16585: NOP4
16589: PPUSH
16590: NOP4
16594: PUSH
16595: LD_INT 3
16597: EQUAL
16598: AND
16599: IFFALSE 16613
// AddMedal ( Xavier , 1 ) else
16601: LD_STRING Xavier
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: NOP4
16611: GO 16624
// AddMedal ( Xavier , - 1 ) ;
16613: LD_STRING Xavier
16615: PPUSH
16616: LD_INT 1
16618: NEG
16619: PPUSH
16620: NOP4
// if missionTimer <= destroyKabulBaseTime then
16624: NOP4
16628: PUSH
16629: NOP4
16633: LESSEQUAL
16634: IFFALSE 16648
// AddMedal ( TimeVS , 1 ) else
16636: LD_STRING TimeVS
16638: PPUSH
16639: LD_INT 1
16641: PPUSH
16642: NOP4
16646: GO 16659
// AddMedal ( TimeVS , - 1 ) ;
16648: LD_STRING TimeVS
16650: PPUSH
16651: LD_INT 1
16653: NEG
16654: PPUSH
16655: NOP4
// if heikeCaptured then
16659: NOP4
16663: IFFALSE 16677
// AddMedal ( Heike , 1 ) else
16665: LD_STRING Heike
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: NOP4
16675: GO 16688
// AddMedal ( Heike , - 1 ) ;
16677: LD_STRING Heike
16679: PPUSH
16680: LD_INT 1
16682: NEG
16683: PPUSH
16684: NOP4
// GiveMedals ( Main1 ) ;
16688: LD_STRING Main1
16690: PPUSH
16691: NOP4
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16695: LD_INT 22
16697: PUSH
16698: LD_INT 3
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 21
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 23
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 50
16727: PUSH
16728: EMPTY
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: NOP4
16741: PPUSH
16742: NOP4
// end ;
16746: LD_VAR 0 1
16750: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16755: NOP4
16759: PPUSH
16760: LD_STRING Burlak
16762: PPUSH
16763: LD_INT 3
16765: PPUSH
16766: NOP4
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16770: NOP4
16774: PPUSH
16775: LD_STRING Karamazov
16777: PPUSH
16778: LD_INT 3
16780: PPUSH
16781: NOP4
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16785: NOP4
16789: PPUSH
16790: LD_STRING Petrovova
16792: PPUSH
16793: LD_INT 3
16795: PPUSH
16796: NOP4
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16800: NOP4
16804: PPUSH
16805: LD_STRING Gleb
16807: PPUSH
16808: LD_INT 3
16810: PPUSH
16811: NOP4
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16815: NOP4
16819: PPUSH
16820: LD_STRING Petrosyan
16822: PPUSH
16823: LD_INT 3
16825: PPUSH
16826: NOP4
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16830: NOP4
16834: PPUSH
16835: LD_STRING Dolgov
16837: PPUSH
16838: LD_INT 3
16840: PPUSH
16841: NOP4
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16845: NOP4
16849: PPUSH
16850: LD_STRING Lipshchin
16852: PPUSH
16853: LD_INT 3
16855: PPUSH
16856: NOP4
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16860: NOP4
16864: PPUSH
16865: LD_STRING Titov
16867: PPUSH
16868: LD_INT 3
16870: PPUSH
16871: NOP4
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16875: NOP4
16879: PPUSH
16880: LD_STRING Kirilenkova
16882: PPUSH
16883: LD_INT 3
16885: PPUSH
16886: NOP4
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16890: NOP4
16894: PPUSH
16895: LD_STRING Belkov
16897: PPUSH
16898: LD_INT 3
16900: PPUSH
16901: NOP4
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16905: NOP4
16909: PPUSH
16910: LD_STRING Belkov2
16912: PPUSH
16913: LD_INT 3
16915: PPUSH
16916: NOP4
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16920: NOP4
16924: PPUSH
16925: LD_STRING Xavier
16927: PPUSH
16928: LD_INT 3
16930: PPUSH
16931: NOP4
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16935: NOP4
16939: PPUSH
16940: LD_STRING Vsevolod
16942: PPUSH
16943: LD_INT 3
16945: PPUSH
16946: NOP4
// if heikeCaptured then
16950: NOP4
16954: IFFALSE 16968
// SaveCharacters ( Heike , 07_Heike ) ;
16956: NOP4
16960: PPUSH
16961: LD_STRING 07_Heike
16963: PPUSH
16964: NOP4
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
16968: LD_INT 22
16970: PUSH
16971: LD_INT 3
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 25
16993: PUSH
16994: LD_INT 12
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 25
17003: PUSH
17004: LD_INT 16
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 25
17013: PUSH
17014: LD_INT 15
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PPUSH
17032: NOP4
17036: PPUSH
17037: LD_STRING other_apemans
17039: PPUSH
17040: LD_INT 3
17042: PPUSH
17043: NOP4
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17047: NOP4
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 3
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 23
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PPUSH
17087: NOP4
17091: PUSH
17092: NOP4
17096: PUSH
17097: NOP4
17101: PUSH
17102: NOP4
17106: PUSH
17107: NOP4
17111: PUSH
17112: NOP4
17116: PUSH
17117: NOP4
17121: PUSH
17122: NOP4
17126: PUSH
17127: NOP4
17131: PUSH
17132: NOP4
17136: PUSH
17137: NOP4
17141: PUSH
17142: NOP4
17146: PUSH
17147: NOP4
17151: PUSH
17152: NOP4
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: DIFF
17172: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17173: NOP4
17177: PPUSH
17178: LD_STRING other_survivors
17180: PPUSH
17181: LD_INT 3
17183: PPUSH
17184: NOP4
// end ;
17188: LD_VAR 0 1
17192: RET
// function SaveGlobalVariables ; begin
17193: LD_INT 0
17195: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17196: NOP4
17200: PPUSH
17201: LD_STRING 07_HeikeCaptured_1
17203: PPUSH
17204: NOP4
// end ; end_of_file
17208: LD_VAR 0 1
17212: RET
// export function Lose_Burlak ; begin
17213: LD_INT 0
17215: PPUSH
// YouLost ( Burlak ) ;
17216: LD_STRING Burlak
17218: PPUSH
17219: NOP4
// end ;
17223: LD_VAR 0 1
17227: RET
// export function Lose_Vsevolod ; begin
17228: LD_INT 0
17230: PPUSH
// YouLost ( Sevi ) ;
17231: LD_STRING Sevi
17233: PPUSH
17234: NOP4
// end ;
17238: LD_VAR 0 1
17242: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17243: NOP4
17247: PPUSH
17248: LD_INT 9
17250: PPUSH
17251: NOP4
17255: PUSH
17256: NOP4
17260: PPUSH
17261: LD_INT 9
17263: PPUSH
17264: NOP4
17268: OR
17269: IFFALSE 17281
17271: GO 17273
17273: DISABLE
// YouLost ( Heike ) ; end_of_file
17274: LD_STRING Heike
17276: PPUSH
17277: NOP4
17281: END
// export aiStructDatas ; export function InitAIManager ; begin
17282: LD_INT 0
17284: PPUSH
// aiStructDatas = [ ] ;
17285: NOP4
17289: PUSH
17290: EMPTY
17291: ST_TO_ADDR
// end ;
17292: LD_VAR 0 1
17296: RET
// every 1 do
17297: GO 17299
17299: DISABLE
// begin InitAIManager ;
17300: NOP4
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17304: LD_INT 1
17306: PPUSH
17307: LD_INT 0
17309: PPUSH
17310: LD_INT 2
17312: PPUSH
17313: LD_INT 2
17315: PPUSH
17316: NOP4
17320: PPUSH
17321: LD_INT 10
17323: PPUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 21
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: NOP4
17352: PPUSH
17353: EMPTY
17354: PPUSH
17355: LD_INT 10
17357: PPUSH
17358: LD_INT 12
17360: PPUSH
17361: LD_INT 13
17363: PPUSH
17364: LD_INT 11
17366: PPUSH
17367: LD_INT 13
17369: PPUSH
17370: LD_INT 13
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: LD_INT 25
17381: PUSH
17382: LD_INT 27
17384: PUSH
17385: LD_INT 23
17387: PUSH
17388: LD_INT 26
17390: PUSH
17391: LD_INT 28
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 13
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: LD_INT 25
17418: PUSH
17419: LD_INT 27
17421: PUSH
17422: LD_INT 23
17424: PUSH
17425: LD_INT 26
17427: PUSH
17428: LD_INT 28
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: LD_INT 13
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: LD_INT 25
17459: PUSH
17460: LD_INT 27
17462: PUSH
17463: LD_INT 23
17465: PUSH
17466: LD_INT 26
17468: PUSH
17469: LD_INT 28
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 13
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: LD_INT 25
17496: PUSH
17497: LD_INT 27
17499: PUSH
17500: LD_INT 23
17502: PUSH
17503: LD_INT 26
17505: PUSH
17506: LD_INT 28
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 13
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 27
17536: PUSH
17537: LD_INT 23
17539: PUSH
17540: LD_INT 26
17542: PUSH
17543: LD_INT 28
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: PPUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: LD_INT 5250
17580: PPUSH
17581: LD_INT 1
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: NOP4
// end ;
17608: END
// every 0 0$1 do
17609: GO 17611
17611: DISABLE
// begin StateManager ( 1 ) ;
17612: LD_INT 1
17614: PPUSH
17615: NOP4
// MechanicsManager ( 1 ) ;
17619: LD_INT 1
17621: PPUSH
17622: NOP4
// VehiclesManager ( 1 ) ;
17626: LD_INT 1
17628: PPUSH
17629: NOP4
// SoldiersManager ( 1 ) ;
17633: LD_INT 1
17635: PPUSH
17636: NOP4
// DefenceManager ( 1 ) ;
17640: LD_INT 1
17642: PPUSH
17643: NOP4
// CollectCrates ( 1 ) ;
17647: LD_INT 1
17649: PPUSH
17650: NOP4
// FleeToHealArea ( 1 ) ;
17654: LD_INT 1
17656: PPUSH
17657: NOP4
// FleeToRepairArea ( 1 ) ;
17661: LD_INT 1
17663: PPUSH
17664: NOP4
// RepairBuildings ( 1 ) ;
17668: LD_INT 1
17670: PPUSH
17671: NOP4
// HealDamageUnits ( 1 ) ;
17675: LD_INT 1
17677: PPUSH
17678: NOP4
// enable ;
17682: ENABLE
// end ;
17683: END
// every 0 0$1 do
17684: GO 17686
17686: DISABLE
// begin ProduceVehicles ( 1 ) ;
17687: LD_INT 1
17689: PPUSH
17690: NOP4
// enable ;
17694: ENABLE
// end ;
17695: END
// every 0 0$1 do
17696: GO 17698
17698: DISABLE
// begin AttackManager ( 1 ) ;
17699: LD_INT 1
17701: PPUSH
17702: NOP4
// enable ;
17706: ENABLE
// end ;
17707: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17708: LD_INT 14
17710: PPUSH
17711: LD_INT 22
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: NOP4
17725: PUSH
17726: LD_INT 15
17728: PPUSH
17729: LD_INT 22
17731: PUSH
17732: LD_INT 3
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PPUSH
17739: NOP4
17743: OR
17744: PUSH
17745: LD_INT 16
17747: PPUSH
17748: LD_INT 22
17750: PUSH
17751: LD_INT 3
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: NOP4
17762: OR
17763: PUSH
17764: LD_INT 17
17766: PPUSH
17767: LD_INT 22
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PPUSH
17777: NOP4
17781: OR
17782: PUSH
17783: LD_INT 18
17785: PPUSH
17786: LD_INT 22
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PPUSH
17796: NOP4
17800: OR
17801: PUSH
17802: NOP4
17806: AND
17807: IFFALSE 18227
17809: GO 17811
17811: DISABLE
17812: LD_INT 0
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
// begin unitsInArea = [ ] ;
17819: NOP4
17823: PUSH
17824: EMPTY
17825: ST_TO_ADDR
// tmp = [ ] ;
17826: NOP4
17830: PUSH
17831: EMPTY
17832: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17833: NOP4
17837: PUSH
17838: NOP4
17842: PUSH
17843: LD_INT 14
17845: PPUSH
17846: LD_INT 22
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PPUSH
17856: NOP4
17860: ADD
17861: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17862: NOP4
17866: PUSH
17867: NOP4
17871: PUSH
17872: LD_INT 15
17874: PPUSH
17875: LD_INT 22
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: NOP4
17889: ADD
17890: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17891: NOP4
17895: PUSH
17896: NOP4
17900: PUSH
17901: LD_INT 16
17903: PPUSH
17904: LD_INT 22
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PPUSH
17914: NOP4
17918: ADD
17919: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17920: NOP4
17924: PUSH
17925: NOP4
17929: PUSH
17930: LD_INT 17
17932: PPUSH
17933: LD_INT 22
17935: PUSH
17936: LD_INT 3
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: NOP4
17947: ADD
17948: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
17949: NOP4
17953: PUSH
17954: NOP4
17958: PUSH
17959: LD_INT 18
17961: PPUSH
17962: LD_INT 22
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: NOP4
17976: ADD
17977: ST_TO_ADDR
// for unit in unitsInArea do
17978: NOP4
17982: PUSH
17983: NOP4
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18224
// begin if GetType ( unit ) = unit_human then
17991: NOP4
17995: PPUSH
17996: NOP4
18000: PUSH
18001: LD_INT 1
18003: EQUAL
18004: IFFALSE 18016
// minDistance = 3 else
18006: NOP4
18010: PUSH
18011: LD_INT 3
18013: ST_TO_ADDR
18014: GO 18024
// minDistance = 4 ;
18016: NOP4
18020: PUSH
18021: LD_INT 4
18023: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18024: NOP4
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: NOP4
18038: PUSH
18039: LD_INT 2
18041: DIV
18042: PUSH
18043: FOR_TO
18044: IFFALSE 18203
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18046: NOP4
18050: PUSH
18051: NOP4
18055: PUSH
18056: LD_INT 2
18058: MUL
18059: PUSH
18060: LD_INT 1
18062: MINUS
18063: ARRAY
18064: PPUSH
18065: NOP4
18069: PUSH
18070: NOP4
18074: PUSH
18075: LD_INT 2
18077: MUL
18078: ARRAY
18079: PPUSH
18080: NOP4
18084: PPUSH
18085: NOP4
18089: PPUSH
18090: NOP4
18094: PPUSH
18095: NOP4
18099: PPUSH
18100: NOP4
18104: PUSH
18105: NOP4
18109: LESS
18110: IFFALSE 18155
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18112: NOP4
18116: PUSH
18117: NOP4
18121: PUSH
18122: LD_INT 2
18124: MUL
18125: PUSH
18126: LD_INT 1
18128: MINUS
18129: ARRAY
18130: PPUSH
18131: NOP4
18135: PUSH
18136: NOP4
18140: PUSH
18141: LD_INT 2
18143: MUL
18144: ARRAY
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: NOP4
18153: GO 18201
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18155: NOP4
18159: PUSH
18160: NOP4
18164: PUSH
18165: NOP4
18169: PUSH
18170: NOP4
18174: PUSH
18175: LD_INT 2
18177: MUL
18178: PUSH
18179: LD_INT 1
18181: MINUS
18182: ARRAY
18183: ADD
18184: PUSH
18185: NOP4
18189: PUSH
18190: NOP4
18194: PUSH
18195: LD_INT 2
18197: MUL
18198: ARRAY
18199: ADD
18200: ST_TO_ADDR
18201: GO 18043
18203: POP
18204: POP
// minesList = tmp ;
18205: NOP4
18209: PUSH
18210: NOP4
18214: ST_TO_ADDR
// tmp := [ ] ;
18215: NOP4
18219: PUSH
18220: EMPTY
18221: ST_TO_ADDR
// end ;
18222: GO 17988
18224: POP
18225: POP
// enable ;
18226: ENABLE
// end ;
18227: PPOPN 5
18229: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18230: LD_INT 2
18232: PPUSH
18233: NOP4
18237: PUSH
18238: LD_INT 3
18240: EQUAL
18241: PUSH
18242: LD_INT 2
18244: PPUSH
18245: NOP4
18249: OR
18250: IFFALSE 18379
18252: GO 18254
18254: DISABLE
18255: LD_INT 0
18257: PPUSH
18258: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18259: NOP4
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 50
18276: PUSH
18277: EMPTY
18278: LIST
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 32
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: PPUSH
18306: NOP4
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18377
// if UnitsInside ( turret ) then
18314: NOP4
18318: PPUSH
18319: NOP4
18323: IFFALSE 18375
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18325: NOP4
18329: PUSH
18330: NOP4
18334: PPUSH
18335: NOP4
18339: PUSH
18340: LD_INT 1
18342: ARRAY
18343: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18344: NOP4
18348: PPUSH
18349: NOP4
// wait ( 0 0$01 ) ;
18353: LD_INT 35
18355: PPUSH
18356: NOP4
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18360: NOP4
18364: PPUSH
18365: LD_INT 103
18367: PPUSH
18368: LD_INT 48
18370: PPUSH
18371: NOP4
// end ;
18375: GO 18311
18377: POP
18378: POP
// end ;
18379: PPOPN 2
18381: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18382: GO 18384
18384: DISABLE
18385: LD_INT 0
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18391: NOP4
18395: PUSH
18396: LD_INT 2
18398: PPUSH
18399: LD_INT 2
18401: PPUSH
18402: LD_INT 1
18404: PPUSH
18405: NOP4
18409: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18410: NOP4
18414: PUSH
18415: DOUBLE
18416: LD_INT 1
18418: DEC
18419: ST_TO_ADDR
18420: NOP4
18424: PUSH
18425: FOR_TO
18426: IFFALSE 18466
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18428: LD_INT 13
18430: PPUSH
18431: NOP4
18435: PUSH
18436: NOP4
18440: ARRAY
18441: PPUSH
18442: NOP4
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18446: LD_INT 14
18448: PPUSH
18449: NOP4
18453: PUSH
18454: NOP4
18458: ARRAY
18459: PPUSH
18460: NOP4
// end ;
18464: GO 18425
18466: POP
18467: POP
// end ;
18468: PPOPN 4
18470: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18471: LD_INT 0
18473: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18474: NOP4
18478: PUSH
18479: NOP4
18483: PUSH
18484: NOP4
18488: PUSH
18489: NOP4
18493: PUSH
18494: NOP4
18498: PUSH
18499: NOP4
18503: PUSH
18504: NOP4
18508: PUSH
18509: NOP4
18513: PUSH
18514: NOP4
18518: PUSH
18519: NOP4
18523: PUSH
18524: NOP4
18528: PUSH
18529: NOP4
18533: PUSH
18534: NOP4
18538: PUSH
18539: NOP4
18543: PUSH
18544: NOP4
18548: PUSH
18549: NOP4
18553: PUSH
18554: NOP4
18558: PUSH
18559: NOP4
18563: PUSH
18564: NOP4
18568: PUSH
18569: NOP4
18573: PUSH
18574: NOP4
18578: PUSH
18579: NOP4
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: ADD
18609: ST_TO_ADDR
// end ;
18610: LD_VAR 0 21
18614: RET
// export function ActiveAI ( index ) ; begin
18615: LD_INT 0
18617: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18618: NOP4
18622: PUSH
18623: NOP4
18627: PPUSH
18628: NOP4
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: NOP4
18647: ST_TO_ADDR
// end ;
18648: LD_VAR 0 2
18652: RET
// export function DeactiveAI ( index ) ; begin
18653: LD_INT 0
18655: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18656: NOP4
18660: PUSH
18661: NOP4
18665: PPUSH
18666: NOP4
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: LD_INT 0
18680: PPUSH
18681: NOP4
18685: ST_TO_ADDR
// end ;
18686: LD_VAR 0 2
18690: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18691: LD_INT 0
18693: PPUSH
18694: PPUSH
// for i := 1 to aiStructDatas do
18695: NOP4
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: NOP4
18709: PUSH
18710: FOR_TO
18711: IFFALSE 18757
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18713: NOP4
18717: PUSH
18718: NOP4
18722: ARRAY
18723: PUSH
18724: LD_INT 1
18726: ARRAY
18727: PUSH
18728: NOP4
18732: EQUAL
18733: IFFALSE 18755
// begin result = aiStructDatas [ i ] ;
18735: NOP4
18739: PUSH
18740: NOP4
18744: PUSH
18745: NOP4
18749: ARRAY
18750: ST_TO_ADDR
// exit ;
18751: POP
18752: POP
18753: GO 18766
// end ;
18755: GO 18710
18757: POP
18758: POP
// result = [ ] ;
18759: NOP4
18763: PUSH
18764: EMPTY
18765: ST_TO_ADDR
// end ;
18766: LD_VAR 0 2
18770: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
// for i := 1 to aiStructDatas do
18775: NOP4
18779: PUSH
18780: DOUBLE
18781: LD_INT 1
18783: DEC
18784: ST_TO_ADDR
18785: NOP4
18789: PUSH
18790: FOR_TO
18791: IFFALSE 18831
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18793: NOP4
18797: PUSH
18798: NOP4
18802: ARRAY
18803: PUSH
18804: LD_INT 1
18806: ARRAY
18807: PUSH
18808: NOP4
18812: EQUAL
18813: IFFALSE 18829
// begin result = i ;
18815: NOP4
18819: PUSH
18820: NOP4
18824: ST_TO_ADDR
// exit ;
18825: POP
18826: POP
18827: GO 18840
// end ;
18829: GO 18790
18831: POP
18832: POP
// result = [ ] ;
18833: NOP4
18837: PUSH
18838: EMPTY
18839: ST_TO_ADDR
// end ;
18840: LD_VAR 0 2
18844: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18845: LD_INT 0
18847: PPUSH
18848: PPUSH
18849: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18850: NOP4
18854: PUSH
18855: NOP4
18859: PUSH
18860: LD_INT 1
18862: ARRAY
18863: PPUSH
18864: NOP4
18868: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18869: NOP4
18873: PUSH
18874: NOP4
18878: PUSH
18879: LD_INT 5
18881: ARRAY
18882: ST_TO_ADDR
// newArray = newArray ^ unit ;
18883: NOP4
18887: PUSH
18888: NOP4
18892: PUSH
18893: NOP4
18897: ADD
18898: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18899: NOP4
18903: PUSH
18904: NOP4
18908: PPUSH
18909: NOP4
18913: PUSH
18914: LD_INT 5
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: NOP4
18925: PPUSH
18926: NOP4
18930: ST_TO_ADDR
// end ;
18931: LD_VAR 0 3
18935: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18936: LD_INT 0
18938: PPUSH
18939: PPUSH
18940: PPUSH
// SetTag ( veh , state ) ;
18941: NOP4
18945: PPUSH
18946: NOP4
18950: PPUSH
18951: NOP4
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18955: NOP4
18959: PUSH
18960: NOP4
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: PPUSH
18969: NOP4
18973: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18974: NOP4
18978: PUSH
18979: NOP4
18983: PUSH
18984: LD_INT 5
18986: ARRAY
18987: ST_TO_ADDR
// newArray = newArray ^ veh ;
18988: NOP4
18992: PUSH
18993: NOP4
18997: PUSH
18998: NOP4
19002: ADD
19003: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19004: NOP4
19008: PUSH
19009: NOP4
19013: PPUSH
19014: NOP4
19018: PUSH
19019: LD_INT 5
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: NOP4
19030: PPUSH
19031: NOP4
19035: ST_TO_ADDR
// end ;
19036: LD_VAR 0 4
19040: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19041: LD_INT 0
19043: PPUSH
19044: PPUSH
19045: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19046: NOP4
19050: PUSH
19051: NOP4
19055: PUSH
19056: LD_INT 1
19058: ARRAY
19059: PPUSH
19060: NOP4
19064: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19065: NOP4
19069: PUSH
19070: NOP4
19074: PUSH
19075: LD_INT 7
19077: ARRAY
19078: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19079: NOP4
19083: PUSH
19084: NOP4
19088: PUSH
19089: NOP4
19093: PUSH
19094: EMPTY
19095: LIST
19096: ADD
19097: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19098: NOP4
19102: PUSH
19103: NOP4
19107: PPUSH
19108: NOP4
19112: PUSH
19113: LD_INT 7
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PPUSH
19120: NOP4
19124: PPUSH
19125: NOP4
19129: ST_TO_ADDR
// end ;
19130: LD_VAR 0 3
19134: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19135: LD_INT 0
19137: PPUSH
19138: PPUSH
19139: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19140: NOP4
19144: PUSH
19145: NOP4
19149: PUSH
19150: LD_INT 1
19152: ARRAY
19153: PPUSH
19154: NOP4
19158: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19159: NOP4
19163: PUSH
19164: NOP4
19168: PUSH
19169: LD_INT 7
19171: ARRAY
19172: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19173: NOP4
19177: PUSH
19178: NOP4
19182: PPUSH
19183: LD_INT 1
19185: PPUSH
19186: NOP4
19190: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19191: NOP4
19195: PUSH
19196: NOP4
19200: PPUSH
19201: NOP4
19205: PUSH
19206: LD_INT 7
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: NOP4
19217: PPUSH
19218: NOP4
19222: ST_TO_ADDR
// end ;
19223: LD_VAR 0 2
19227: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19228: LD_INT 0
19230: PPUSH
19231: PPUSH
19232: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19233: NOP4
19237: PUSH
19238: NOP4
19242: PUSH
19243: LD_INT 1
19245: ARRAY
19246: PPUSH
19247: NOP4
19251: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19252: NOP4
19256: PUSH
19257: NOP4
19261: PUSH
19262: LD_INT 5
19264: ARRAY
19265: ST_TO_ADDR
// newArray = newArray diff unit ;
19266: NOP4
19270: PUSH
19271: NOP4
19275: PUSH
19276: NOP4
19280: DIFF
19281: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19282: NOP4
19286: PUSH
19287: NOP4
19291: PPUSH
19292: NOP4
19296: PUSH
19297: LD_INT 5
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: NOP4
19308: PPUSH
19309: NOP4
19313: ST_TO_ADDR
// end ;
19314: LD_VAR 0 3
19318: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19319: LD_INT 0
19321: PPUSH
19322: PPUSH
// for i := 1 to aiStructDatas do
19323: NOP4
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: NOP4
19337: PUSH
19338: FOR_TO
19339: IFFALSE 19385
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19341: NOP4
19345: PUSH
19346: NOP4
19350: ARRAY
19351: PUSH
19352: LD_INT 3
19354: ARRAY
19355: PUSH
19356: NOP4
19360: EQUAL
19361: IFFALSE 19383
// begin result = aiStructDatas [ i ] ;
19363: NOP4
19367: PUSH
19368: NOP4
19372: PUSH
19373: NOP4
19377: ARRAY
19378: ST_TO_ADDR
// exit ;
19379: POP
19380: POP
19381: GO 19394
// end ;
19383: GO 19338
19385: POP
19386: POP
// result = [ ] ;
19387: NOP4
19391: PUSH
19392: EMPTY
19393: ST_TO_ADDR
// end ;
19394: LD_VAR 0 2
19398: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19399: LD_INT 0
19401: PPUSH
19402: PPUSH
19403: PPUSH
// if not aiData then
19404: NOP4
19408: NOT
19409: IFFALSE 19420
// begin result = [ ] ;
19411: NOP4
19415: PUSH
19416: EMPTY
19417: ST_TO_ADDR
// exit ;
19418: GO 19504
// end ; defVehs = [ ] ;
19420: NOP4
19424: PUSH
19425: EMPTY
19426: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19427: NOP4
19431: PUSH
19432: NOP4
19436: PUSH
19437: LD_INT 5
19439: ARRAY
19440: PPUSH
19441: LD_INT 21
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PPUSH
19451: NOP4
19455: PUSH
19456: FOR_IN
19457: IFFALSE 19492
// if GetTag ( veh ) = 2 then
19459: NOP4
19463: PPUSH
19464: NOP4
19468: PUSH
19469: LD_INT 2
19471: EQUAL
19472: IFFALSE 19490
// defVehs = defVehs ^ veh ;
19474: NOP4
19478: PUSH
19479: NOP4
19483: PUSH
19484: NOP4
19488: ADD
19489: ST_TO_ADDR
19490: GO 19456
19492: POP
19493: POP
// result = defVehs ;
19494: NOP4
19498: PUSH
19499: NOP4
19503: ST_TO_ADDR
// end ;
19504: LD_VAR 0 2
19508: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
// if not aiData then
19514: NOP4
19518: NOT
19519: IFFALSE 19530
// begin result = [ ] ;
19521: NOP4
19525: PUSH
19526: EMPTY
19527: ST_TO_ADDR
// exit ;
19528: GO 19614
// end ; attackVehs = [ ] ;
19530: NOP4
19534: PUSH
19535: EMPTY
19536: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19537: NOP4
19541: PUSH
19542: NOP4
19546: PUSH
19547: LD_INT 5
19549: ARRAY
19550: PPUSH
19551: LD_INT 21
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PPUSH
19561: NOP4
19565: PUSH
19566: FOR_IN
19567: IFFALSE 19602
// if GetTag ( veh ) = 4 then
19569: NOP4
19573: PPUSH
19574: NOP4
19578: PUSH
19579: LD_INT 4
19581: EQUAL
19582: IFFALSE 19600
// attackVehs = attackVehs ^ veh ;
19584: NOP4
19588: PUSH
19589: NOP4
19593: PUSH
19594: NOP4
19598: ADD
19599: ST_TO_ADDR
19600: GO 19566
19602: POP
19603: POP
// result = attackVehs ;
19604: NOP4
19608: PUSH
19609: NOP4
19613: ST_TO_ADDR
// end ;
19614: LD_VAR 0 2
19618: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19624: NOP4
19628: PUSH
19629: NOP4
19633: PPUSH
19634: NOP4
19638: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19639: NOP4
19643: PUSH
19644: LD_INT 2
19646: ARRAY
19647: PUSH
19648: LD_INT 0
19650: EQUAL
19651: IFFALSE 19655
// exit ;
19653: GO 20100
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19655: NOP4
19659: PUSH
19660: NOP4
19664: PUSH
19665: LD_INT 5
19667: ARRAY
19668: PPUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PPUSH
19679: NOP4
19683: PUSH
19684: FOR_IN
19685: IFFALSE 19790
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19687: NOP4
19691: PPUSH
19692: NOP4
19696: PUSH
19697: LD_INT 1000
19699: EQUAL
19700: PUSH
19701: NOP4
19705: PPUSH
19706: NOP4
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: AND
19715: IFFALSE 19731
// SetTag ( unit , 1 ) else
19717: NOP4
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: NOP4
19729: GO 19788
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19731: NOP4
19735: PPUSH
19736: NOP4
19740: PUSH
19741: LD_INT 950
19743: LESSEQUAL
19744: PUSH
19745: NOP4
19749: PPUSH
19750: NOP4
19754: PUSH
19755: LD_INT 250
19757: GREATER
19758: AND
19759: PUSH
19760: NOP4
19764: PPUSH
19765: NOP4
19769: PUSH
19770: LD_INT 1
19772: EQUAL
19773: AND
19774: IFFALSE 19788
// SetTag ( unit , 0 ) ;
19776: NOP4
19780: PPUSH
19781: LD_INT 0
19783: PPUSH
19784: NOP4
// end ;
19788: GO 19684
19790: POP
19791: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19792: NOP4
19796: PUSH
19797: NOP4
19801: PUSH
19802: LD_INT 5
19804: ARRAY
19805: PPUSH
19806: LD_INT 21
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PPUSH
19816: NOP4
19820: PUSH
19821: FOR_IN
19822: IFFALSE 20098
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19824: NOP4
19828: PPUSH
19829: NOP4
19833: PUSH
19834: LD_INT 1000
19836: EQUAL
19837: PUSH
19838: NOP4
19842: PPUSH
19843: NOP4
19847: PUSH
19848: LD_INT 3
19850: EQUAL
19851: AND
19852: IFFALSE 19866
// SetTag ( unit , 2 ) ;
19854: NOP4
19858: PPUSH
19859: LD_INT 2
19861: PPUSH
19862: NOP4
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19866: NOP4
19870: PPUSH
19871: NOP4
19875: PUSH
19876: LD_INT 1000
19878: EQUAL
19879: PUSH
19880: NOP4
19884: PPUSH
19885: NOP4
19889: PUSH
19890: LD_INT 5
19892: EQUAL
19893: AND
19894: IFFALSE 19908
// SetTag ( unit , 4 ) ;
19896: NOP4
19900: PPUSH
19901: LD_INT 4
19903: PPUSH
19904: NOP4
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19908: NOP4
19912: PPUSH
19913: NOP4
19917: PUSH
19918: LD_INT 650
19920: LESSEQUAL
19921: PUSH
19922: NOP4
19926: PPUSH
19927: NOP4
19931: PUSH
19932: LD_INT 4
19934: EQUAL
19935: AND
19936: PUSH
19937: NOP4
19941: PPUSH
19942: NOP4
19946: PUSH
19947: LD_INT 1
19949: EQUAL
19950: AND
19951: IFFALSE 19965
// SetTag ( unit , 5 ) ;
19953: NOP4
19957: PPUSH
19958: LD_INT 5
19960: PPUSH
19961: NOP4
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
19965: NOP4
19969: PPUSH
19970: NOP4
19974: PUSH
19975: LD_INT 650
19977: LESSEQUAL
19978: PUSH
19979: NOP4
19983: PPUSH
19984: NOP4
19988: PUSH
19989: LD_INT 2
19991: EQUAL
19992: AND
19993: PUSH
19994: NOP4
19998: PPUSH
19999: NOP4
20003: PUSH
20004: LD_INT 1
20006: EQUAL
20007: AND
20008: IFFALSE 20022
// SetTag ( unit , 3 ) ;
20010: NOP4
20014: PPUSH
20015: LD_INT 3
20017: PPUSH
20018: NOP4
// if GetControl ( unit ) = control_manual then
20022: NOP4
20026: PPUSH
20027: NOP4
20031: PUSH
20032: LD_INT 1
20034: EQUAL
20035: IFFALSE 20069
// if ( UnitsInside ( unit ) ) then
20037: NOP4
20041: PPUSH
20042: NOP4
20046: IFFALSE 20069
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20048: NOP4
20052: PPUSH
20053: NOP4
20057: PUSH
20058: LD_INT 1
20060: ARRAY
20061: PPUSH
20062: LD_INT 7
20064: PPUSH
20065: NOP4
// if GetFuel ( unit ) < 50 then
20069: NOP4
20073: PPUSH
20074: NOP4
20078: PUSH
20079: LD_INT 50
20081: LESS
20082: IFFALSE 20096
// SetFuel ( unit , 100 ) ;
20084: NOP4
20088: PPUSH
20089: LD_INT 100
20091: PPUSH
20092: NOP4
// end ;
20096: GO 19821
20098: POP
20099: POP
// end ;
20100: LD_VAR 0 2
20104: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20105: LD_INT 0
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
20111: PPUSH
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
20116: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20117: NOP4
20121: PUSH
20122: NOP4
20126: PPUSH
20127: NOP4
20131: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20132: NOP4
20136: PUSH
20137: LD_INT 2
20139: ARRAY
20140: PUSH
20141: LD_INT 0
20143: EQUAL
20144: IFFALSE 20148
// exit ;
20146: GO 20727
// soldiersInsideBarracks = [ ] ;
20148: NOP4
20152: PUSH
20153: EMPTY
20154: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20155: NOP4
20159: PUSH
20160: NOP4
20164: PUSH
20165: LD_INT 5
20167: ARRAY
20168: PPUSH
20169: LD_INT 25
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 50
20181: PUSH
20182: EMPTY
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PPUSH
20189: NOP4
20193: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20194: NOP4
20198: PUSH
20199: NOP4
20203: PUSH
20204: LD_INT 6
20206: ARRAY
20207: PPUSH
20208: LD_INT 21
20210: PUSH
20211: LD_INT 3
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 50
20220: PUSH
20221: EMPTY
20222: LIST
20223: PUSH
20224: LD_INT 3
20226: PUSH
20227: LD_INT 59
20229: PUSH
20230: EMPTY
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 30
20242: PUSH
20243: LD_INT 31
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 30
20252: PUSH
20253: LD_INT 32
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PPUSH
20271: NOP4
20275: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20276: NOP4
20280: PUSH
20281: NOP4
20285: PUSH
20286: LD_INT 6
20288: ARRAY
20289: PPUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 3
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 50
20302: PUSH
20303: EMPTY
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 4
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 5
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: PPUSH
20339: NOP4
20343: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20344: NOP4
20348: PUSH
20349: NOP4
20353: PUSH
20354: LD_INT 6
20356: ARRAY
20357: PPUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 50
20370: PUSH
20371: EMPTY
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 30
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 30
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: PPUSH
20407: NOP4
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: ST_TO_ADDR
// for barrack in barracks do
20416: NOP4
20420: PUSH
20421: NOP4
20425: PUSH
20426: FOR_IN
20427: IFFALSE 20452
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20429: NOP4
20433: PUSH
20434: NOP4
20438: PUSH
20439: NOP4
20443: PPUSH
20444: NOP4
20448: ADD
20449: ST_TO_ADDR
20450: GO 20426
20452: POP
20453: POP
// index = 1 ;
20454: NOP4
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20462: NOP4
20466: PPUSH
20467: LD_INT 56
20469: PUSH
20470: EMPTY
20471: LIST
20472: PUSH
20473: LD_INT 3
20475: PUSH
20476: LD_INT 60
20478: PUSH
20479: EMPTY
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PPUSH
20490: NOP4
20494: PUSH
20495: NOP4
20499: AND
20500: PUSH
20501: NOP4
20505: AND
20506: IFFALSE 20606
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20508: NOP4
20512: PUSH
20513: NOP4
20517: PPUSH
20518: LD_INT 56
20520: PUSH
20521: EMPTY
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: PPUSH
20527: NOP4
20531: PUSH
20532: NOP4
20536: ADD
20537: PUSH
20538: FOR_IN
20539: IFFALSE 20604
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20541: NOP4
20545: PPUSH
20546: NOP4
20550: PUSH
20551: LD_INT 1
20553: EQUAL
20554: PUSH
20555: NOP4
20559: PUSH
20560: NOP4
20564: LESSEQUAL
20565: AND
20566: IFFALSE 20602
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20568: NOP4
20572: PPUSH
20573: NOP4
20577: PUSH
20578: NOP4
20582: ARRAY
20583: PPUSH
20584: NOP4
// index = index + 1 ;
20588: NOP4
20592: PUSH
20593: NOP4
20597: PUSH
20598: LD_INT 1
20600: PLUS
20601: ST_TO_ADDR
// end ;
20602: GO 20538
20604: POP
20605: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20606: NOP4
20610: PPUSH
20611: LD_INT 56
20613: PUSH
20614: EMPTY
20615: LIST
20616: PUSH
20617: LD_INT 3
20619: PUSH
20620: LD_INT 60
20622: PUSH
20623: EMPTY
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: NOP4
20638: PUSH
20639: NOP4
20643: NOT
20644: AND
20645: PUSH
20646: NOP4
20650: AND
20651: IFFALSE 20727
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20653: NOP4
20657: PUSH
20658: NOP4
20662: PPUSH
20663: LD_INT 56
20665: PUSH
20666: EMPTY
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: PPUSH
20672: NOP4
20676: PUSH
20677: FOR_IN
20678: IFFALSE 20725
// if ( GetTag ( sold ) = 1 ) then
20680: NOP4
20684: PPUSH
20685: NOP4
20689: PUSH
20690: LD_INT 1
20692: EQUAL
20693: IFFALSE 20723
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20695: NOP4
20699: PPUSH
20700: NOP4
20704: PUSH
20705: LD_INT 1
20707: PPUSH
20708: NOP4
20712: PPUSH
20713: NOP4
20717: ARRAY
20718: PPUSH
20719: NOP4
20723: GO 20677
20725: POP
20726: POP
// end ;
20727: LD_VAR 0 2
20731: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20732: LD_INT 0
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20739: NOP4
20743: PUSH
20744: NOP4
20748: PPUSH
20749: NOP4
20753: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20754: NOP4
20758: PUSH
20759: LD_INT 2
20761: ARRAY
20762: PUSH
20763: LD_INT 0
20765: EQUAL
20766: IFFALSE 20770
// exit ;
20768: GO 20991
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20770: NOP4
20774: PUSH
20775: NOP4
20779: PUSH
20780: LD_INT 5
20782: ARRAY
20783: PPUSH
20784: LD_INT 25
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 50
20796: PUSH
20797: EMPTY
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PPUSH
20804: NOP4
20808: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20809: NOP4
20813: PUSH
20814: NOP4
20818: PUSH
20819: LD_INT 6
20821: ARRAY
20822: PPUSH
20823: LD_INT 21
20825: PUSH
20826: LD_INT 3
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 50
20835: PUSH
20836: EMPTY
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 30
20854: PUSH
20855: LD_INT 3
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: PPUSH
20872: NOP4
20876: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20877: NOP4
20881: PPUSH
20882: LD_INT 56
20884: PUSH
20885: EMPTY
20886: LIST
20887: PUSH
20888: LD_INT 3
20890: PUSH
20891: LD_INT 60
20893: PUSH
20894: EMPTY
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: NOP4
20909: PUSH
20910: NOP4
20914: AND
20915: IFFALSE 20991
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20917: NOP4
20921: PUSH
20922: NOP4
20926: PPUSH
20927: LD_INT 56
20929: PUSH
20930: EMPTY
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: PPUSH
20936: NOP4
20940: PUSH
20941: FOR_IN
20942: IFFALSE 20989
// if ( GetTag ( mech ) = 1 ) then
20944: NOP4
20948: PPUSH
20949: NOP4
20953: PUSH
20954: LD_INT 1
20956: EQUAL
20957: IFFALSE 20987
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
20959: NOP4
20963: PPUSH
20964: NOP4
20968: PUSH
20969: LD_INT 1
20971: PPUSH
20972: NOP4
20976: PPUSH
20977: NOP4
20981: ARRAY
20982: PPUSH
20983: NOP4
20987: GO 20941
20989: POP
20990: POP
// end ;
20991: LD_VAR 0 2
20995: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
20996: LD_INT 0
20998: PPUSH
20999: PPUSH
21000: PPUSH
21001: PPUSH
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21007: NOP4
21011: PUSH
21012: NOP4
21016: PPUSH
21017: NOP4
21021: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21022: NOP4
21026: PUSH
21027: LD_INT 2
21029: ARRAY
21030: PUSH
21031: LD_INT 0
21033: EQUAL
21034: IFFALSE 21038
// exit ;
21036: GO 21501
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21038: NOP4
21042: PUSH
21043: NOP4
21047: PUSH
21048: LD_INT 5
21050: ARRAY
21051: PPUSH
21052: LD_INT 21
21054: PUSH
21055: LD_INT 3
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 50
21064: PUSH
21065: EMPTY
21066: LIST
21067: PUSH
21068: LD_INT 59
21070: PUSH
21071: EMPTY
21072: LIST
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: LD_INT 30
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 30
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: PPUSH
21108: NOP4
21112: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21113: NOP4
21117: PUSH
21118: NOP4
21122: PUSH
21123: LD_INT 5
21125: ARRAY
21126: PPUSH
21127: LD_INT 21
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 33
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 92
21149: PUSH
21150: NOP4
21154: PUSH
21155: LD_INT 10
21157: ARRAY
21158: PPUSH
21159: LD_INT 0
21161: PPUSH
21162: NOP4
21166: PUSH
21167: LD_INT 1
21169: ARRAY
21170: PUSH
21171: LD_INT 1
21173: ARRAY
21174: PUSH
21175: NOP4
21179: PUSH
21180: LD_INT 10
21182: ARRAY
21183: PPUSH
21184: LD_INT 0
21186: PPUSH
21187: NOP4
21191: PUSH
21192: LD_INT 2
21194: ARRAY
21195: PUSH
21196: LD_INT 1
21198: ARRAY
21199: PUSH
21200: LD_INT 16
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 3
21211: PUSH
21212: LD_INT 24
21214: PUSH
21215: LD_INT 1000
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PPUSH
21232: NOP4
21236: ST_TO_ADDR
// if not damageVehicles then
21237: NOP4
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21501
// if fabs then
21246: NOP4
21250: IFFALSE 21375
// begin for damageVeh in damageVehicles do
21252: NOP4
21256: PUSH
21257: NOP4
21261: PUSH
21262: FOR_IN
21263: IFFALSE 21373
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21265: NOP4
21269: PPUSH
21270: NOP4
21274: PUSH
21275: LD_INT 3
21277: EQUAL
21278: PUSH
21279: NOP4
21283: PPUSH
21284: NOP4
21288: PUSH
21289: LD_INT 5
21291: EQUAL
21292: OR
21293: IFFALSE 21371
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21295: NOP4
21299: PUSH
21300: NOP4
21304: PPUSH
21305: NOP4
21309: PPUSH
21310: NOP4
21314: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21315: NOP4
21319: PUSH
21320: NOP4
21324: PPUSH
21325: NOP4
21329: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21330: NOP4
21334: PPUSH
21335: NOP4
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21339: NOP4
21343: PPUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 60
21349: PUSH
21350: EMPTY
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PPUSH
21357: NOP4
21361: PPUSH
21362: NOP4
21366: PPUSH
21367: NOP4
// end ;
21371: GO 21262
21373: POP
21374: POP
// end ; for damageVeh in damageVehicles do
21375: NOP4
21379: PUSH
21380: NOP4
21384: PUSH
21385: FOR_IN
21386: IFFALSE 21499
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21388: NOP4
21392: PPUSH
21393: NOP4
21397: PUSH
21398: LD_INT 3
21400: EQUAL
21401: PUSH
21402: NOP4
21406: PPUSH
21407: NOP4
21411: PUSH
21412: LD_INT 5
21414: EQUAL
21415: OR
21416: IFFALSE 21497
// begin mehInside = UnitsInside ( damageVeh ) ;
21418: NOP4
21422: PUSH
21423: NOP4
21427: PPUSH
21428: NOP4
21432: ST_TO_ADDR
// if mehInside then
21433: NOP4
21437: IFFALSE 21497
// begin mehInside = mehInside [ 1 ] ;
21439: NOP4
21443: PUSH
21444: NOP4
21448: PUSH
21449: LD_INT 1
21451: ARRAY
21452: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21453: NOP4
21457: PPUSH
21458: NOP4
// wait ( 0 0$01 ) ;
21462: LD_INT 35
21464: PPUSH
21465: NOP4
// ComRepairVehicle ( mehInside , damageVeh ) ;
21469: NOP4
21473: PPUSH
21474: NOP4
21478: PPUSH
21479: NOP4
// AddComEnterUnit ( mehInside , damageVeh ) ;
21483: NOP4
21487: PPUSH
21488: NOP4
21492: PPUSH
21493: NOP4
// end ; end ;
21497: GO 21385
21499: POP
21500: POP
// end ;
21501: LD_VAR 0 2
21505: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21506: LD_INT 0
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21514: NOP4
21518: PUSH
21519: NOP4
21523: PPUSH
21524: NOP4
21528: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21529: NOP4
21533: PUSH
21534: LD_INT 2
21536: ARRAY
21537: PUSH
21538: LD_INT 0
21540: EQUAL
21541: IFFALSE 21545
// exit ;
21543: GO 21999
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21545: NOP4
21549: PUSH
21550: NOP4
21554: PUSH
21555: LD_INT 6
21557: ARRAY
21558: PPUSH
21559: LD_INT 21
21561: PUSH
21562: LD_INT 3
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 50
21571: PUSH
21572: EMPTY
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: LD_INT 30
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 30
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: PPUSH
21608: NOP4
21612: PUSH
21613: LD_INT 1
21615: ARRAY
21616: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21617: NOP4
21621: PPUSH
21622: NOP4
21626: NOT
21627: IFFALSE 21631
// exit ;
21629: GO 21999
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21631: NOP4
21635: PUSH
21636: NOP4
21640: PPUSH
21641: NOP4
21645: AND
21646: PUSH
21647: NOP4
21651: PUSH
21652: LD_INT 11
21654: ARRAY
21655: PPUSH
21656: LD_INT 81
21658: PUSH
21659: NOP4
21663: PUSH
21664: LD_INT 3
21666: ARRAY
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PPUSH
21672: NOP4
21676: NOT
21677: AND
21678: IFFALSE 21828
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21680: NOP4
21684: PUSH
21685: NOP4
21689: PPUSH
21690: NOP4
21694: PPUSH
21695: LD_INT 50
21697: PUSH
21698: EMPTY
21699: LIST
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: LD_INT 60
21706: PUSH
21707: EMPTY
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: PUSH
21717: LD_INT 92
21719: PUSH
21720: NOP4
21724: PPUSH
21725: NOP4
21729: PUSH
21730: NOP4
21734: PPUSH
21735: NOP4
21739: PUSH
21740: LD_INT 12
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: PPUSH
21758: NOP4
21762: PUSH
21763: FOR_IN
21764: IFFALSE 21826
// if GetLives ( veh ) = 1000 then
21766: NOP4
21770: PPUSH
21771: NOP4
21775: PUSH
21776: LD_INT 1000
21778: EQUAL
21779: IFFALSE 21812
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21781: NOP4
21785: PPUSH
21786: NOP4
21790: PPUSH
21791: NOP4
21795: PPUSH
21796: NOP4
21800: PPUSH
21801: NOP4
21805: PPUSH
21806: NOP4
21810: GO 21824
// SetTag ( veh , 3 ) ;
21812: NOP4
21816: PPUSH
21817: LD_INT 3
21819: PPUSH
21820: NOP4
21824: GO 21763
21826: POP
21827: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21828: NOP4
21832: PUSH
21833: LD_INT 11
21835: ARRAY
21836: PPUSH
21837: LD_INT 81
21839: PUSH
21840: NOP4
21844: PUSH
21845: LD_INT 3
21847: ARRAY
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PPUSH
21853: NOP4
21857: NOT
21858: IFFALSE 21862
// exit ;
21860: GO 21999
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21862: NOP4
21866: PUSH
21867: NOP4
21871: PPUSH
21872: NOP4
21876: PPUSH
21877: LD_INT 50
21879: PUSH
21880: EMPTY
21881: LIST
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 60
21888: PUSH
21889: EMPTY
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PPUSH
21900: NOP4
21904: PUSH
21905: FOR_IN
21906: IFFALSE 21997
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21908: NOP4
21912: PPUSH
21913: NOP4
21917: PUSH
21918: LD_INT 11
21920: ARRAY
21921: PPUSH
21922: LD_INT 81
21924: PUSH
21925: NOP4
21929: PUSH
21930: LD_INT 3
21932: ARRAY
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PPUSH
21938: NOP4
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: NOP4
21951: PPUSH
21952: NOP4
21956: PUSH
21957: LD_INT 11
21959: ARRAY
21960: PPUSH
21961: LD_INT 81
21963: PUSH
21964: NOP4
21968: PUSH
21969: LD_INT 3
21971: ARRAY
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PPUSH
21977: NOP4
21981: PUSH
21982: LD_INT 1
21984: ARRAY
21985: PPUSH
21986: NOP4
21990: PPUSH
21991: NOP4
21995: GO 21905
21997: POP
21998: POP
// end ;
21999: LD_VAR 0 2
22003: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22012: NOP4
22016: PUSH
22017: NOP4
22021: PPUSH
22022: NOP4
22026: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22027: NOP4
22031: PUSH
22032: LD_INT 2
22034: ARRAY
22035: PUSH
22036: LD_INT 0
22038: EQUAL
22039: IFFALSE 22043
// exit ;
22041: GO 22433
// if ( aiData [ 18 ] = 0 ) then
22043: NOP4
22047: PUSH
22048: LD_INT 18
22050: ARRAY
22051: PUSH
22052: LD_INT 0
22054: EQUAL
22055: IFFALSE 22059
// exit ;
22057: GO 22433
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22059: NOP4
22063: PPUSH
22064: NOP4
22068: PUSH
22069: NOP4
22073: PUSH
22074: LD_INT 14
22076: ARRAY
22077: GREATEREQUAL
22078: IFFALSE 22433
// begin repeat wait ( 0 0$01 ) ;
22080: LD_INT 35
22082: PPUSH
22083: NOP4
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22087: NOP4
22091: PUSH
22092: NOP4
22096: PPUSH
22097: NOP4
22101: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22102: NOP4
22106: PUSH
22107: NOP4
22111: PUSH
22112: FOR_IN
22113: IFFALSE 22413
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22115: NOP4
22119: PUSH
22120: LD_INT 81
22122: PUSH
22123: NOP4
22127: PUSH
22128: LD_INT 3
22130: ARRAY
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: NOP4
22140: PPUSH
22141: NOP4
22145: PPUSH
22146: NOP4
22150: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22151: NOP4
22155: PUSH
22156: LD_INT 81
22158: PUSH
22159: NOP4
22163: PUSH
22164: LD_INT 3
22166: ARRAY
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 59
22177: PUSH
22178: EMPTY
22179: LIST
22180: PUSH
22181: LD_INT 21
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 21
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: PPUSH
22214: NOP4
22218: PPUSH
22219: NOP4
22223: PPUSH
22224: NOP4
22228: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22229: NOP4
22233: PPUSH
22234: NOP4
22238: PPUSH
22239: NOP4
22243: PUSH
22244: LD_INT 12
22246: PLUS
22247: PUSH
22248: NOP4
22252: PPUSH
22253: NOP4
22257: PPUSH
22258: NOP4
22262: LESS
22263: IFFALSE 22339
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22265: NOP4
22269: PPUSH
22270: LD_INT 50
22272: PUSH
22273: EMPTY
22274: LIST
22275: PPUSH
22276: NOP4
22280: PPUSH
22281: NOP4
22285: PPUSH
22286: NOP4
22290: PPUSH
22291: NOP4
22295: PPUSH
22296: NOP4
22300: PPUSH
22301: NOP4
// wait ( 0 0$01 ) ;
22305: LD_INT 35
22307: PPUSH
22308: NOP4
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22312: NOP4
22316: PPUSH
22317: LD_INT 50
22319: PUSH
22320: EMPTY
22321: LIST
22322: PPUSH
22323: NOP4
22327: PPUSH
22328: NOP4
22332: PPUSH
22333: NOP4
// end else
22337: GO 22411
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22339: NOP4
22343: PPUSH
22344: LD_INT 50
22346: PUSH
22347: EMPTY
22348: LIST
22349: PPUSH
22350: NOP4
22354: PPUSH
22355: NOP4
22359: PPUSH
22360: NOP4
22364: PPUSH
22365: NOP4
22369: PPUSH
22370: NOP4
22374: PPUSH
22375: NOP4
// wait ( 0 0$01 ) ;
22379: LD_INT 35
22381: PPUSH
22382: NOP4
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22386: NOP4
22390: PPUSH
22391: LD_INT 50
22393: PUSH
22394: EMPTY
22395: LIST
22396: PPUSH
22397: NOP4
22401: PPUSH
22402: NOP4
22406: PPUSH
22407: NOP4
// end ; end ;
22411: GO 22112
22413: POP
22414: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22415: NOP4
22419: PPUSH
22420: LD_INT 50
22422: PUSH
22423: EMPTY
22424: LIST
22425: PPUSH
22426: NOP4
22430: NOT
22431: IFFALSE 22080
// end ; end ;
22433: LD_VAR 0 2
22437: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
22442: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22443: NOP4
22447: PUSH
22448: NOP4
22452: PPUSH
22453: NOP4
22457: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22458: NOP4
22462: PUSH
22463: LD_INT 2
22465: ARRAY
22466: PUSH
22467: LD_INT 0
22469: EQUAL
22470: IFFALSE 22474
// exit ;
22472: GO 22623
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22474: NOP4
22478: PUSH
22479: NOP4
22483: PUSH
22484: LD_INT 5
22486: ARRAY
22487: PPUSH
22488: LD_INT 21
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 50
22500: PUSH
22501: EMPTY
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: LD_INT 34
22509: PUSH
22510: LD_INT 12
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 34
22519: PUSH
22520: LD_INT 32
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 34
22529: PUSH
22530: LD_INT 51
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: PPUSH
22548: NOP4
22552: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22553: NOP4
22557: PUSH
22558: LD_INT 8
22560: ARRAY
22561: PPUSH
22562: NOP4
22566: NOT
22567: PUSH
22568: NOP4
22572: NOT
22573: OR
22574: IFFALSE 22578
// exit ;
22576: GO 22623
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22578: NOP4
22582: PPUSH
22583: NOP4
22587: PUSH
22588: LD_INT 8
22590: ARRAY
22591: PPUSH
22592: NOP4
22596: PUSH
22597: LD_INT 1
22599: ARRAY
22600: PPUSH
22601: NOP4
22605: PUSH
22606: LD_INT 8
22608: ARRAY
22609: PPUSH
22610: NOP4
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: PPUSH
22619: NOP4
// end ;
22623: LD_VAR 0 2
22627: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
22632: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22633: NOP4
22637: PUSH
22638: NOP4
22642: PPUSH
22643: NOP4
22647: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22648: NOP4
22652: PUSH
22653: LD_INT 2
22655: ARRAY
22656: PUSH
22657: LD_INT 0
22659: EQUAL
22660: IFFALSE 22664
// exit ;
22662: GO 22754
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22664: NOP4
22668: PUSH
22669: NOP4
22673: PUSH
22674: LD_INT 5
22676: ARRAY
22677: PPUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PPUSH
22688: NOP4
22692: PUSH
22693: FOR_IN
22694: IFFALSE 22752
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22696: NOP4
22700: PPUSH
22701: NOP4
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: PUSH
22710: NOP4
22714: PPUSH
22715: NOP4
22719: PUSH
22720: LD_INT 9
22722: ARRAY
22723: PPUSH
22724: NOP4
22728: NOT
22729: AND
22730: IFFALSE 22750
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22732: NOP4
22736: PPUSH
22737: NOP4
22741: PUSH
22742: LD_INT 9
22744: ARRAY
22745: PPUSH
22746: NOP4
22750: GO 22693
22752: POP
22753: POP
// end ;
22754: LD_VAR 0 2
22758: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
22763: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22764: NOP4
22768: PUSH
22769: NOP4
22773: PPUSH
22774: NOP4
22778: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22779: NOP4
22783: PUSH
22784: LD_INT 2
22786: ARRAY
22787: PUSH
22788: LD_INT 0
22790: EQUAL
22791: IFFALSE 22795
// exit ;
22793: GO 22910
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22795: NOP4
22799: PUSH
22800: NOP4
22804: PUSH
22805: LD_INT 5
22807: ARRAY
22808: PPUSH
22809: LD_INT 21
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 50
22821: PUSH
22822: EMPTY
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PPUSH
22829: NOP4
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22908
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22837: NOP4
22841: PPUSH
22842: NOP4
22846: PUSH
22847: LD_INT 3
22849: EQUAL
22850: PUSH
22851: NOP4
22855: PPUSH
22856: NOP4
22860: PUSH
22861: LD_INT 5
22863: EQUAL
22864: OR
22865: PUSH
22866: NOP4
22870: PPUSH
22871: NOP4
22875: PUSH
22876: LD_INT 10
22878: ARRAY
22879: PPUSH
22880: NOP4
22884: NOT
22885: AND
22886: IFFALSE 22906
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22888: NOP4
22892: PPUSH
22893: NOP4
22897: PUSH
22898: LD_INT 10
22900: ARRAY
22901: PPUSH
22902: NOP4
22906: GO 22834
22908: POP
22909: POP
// end ;
22910: LD_VAR 0 2
22914: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22915: LD_INT 0
22917: PPUSH
22918: PPUSH
22919: PPUSH
22920: PPUSH
22921: PPUSH
22922: PPUSH
22923: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22924: NOP4
22928: PUSH
22929: NOP4
22933: PPUSH
22934: NOP4
22938: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22939: NOP4
22943: PUSH
22944: LD_INT 2
22946: ARRAY
22947: PUSH
22948: LD_INT 0
22950: EQUAL
22951: IFFALSE 22955
// exit ;
22953: GO 23655
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
22955: NOP4
22959: PUSH
22960: NOP4
22964: PUSH
22965: LD_INT 5
22967: ARRAY
22968: PPUSH
22969: LD_INT 25
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 50
22981: PUSH
22982: EMPTY
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: NOP4
22993: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
22994: NOP4
22998: PUSH
22999: NOP4
23003: PUSH
23004: LD_INT 5
23006: ARRAY
23007: PPUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 50
23020: PUSH
23021: EMPTY
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 34
23029: PUSH
23030: LD_INT 13
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 34
23039: PUSH
23040: NOP4
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 34
23051: PUSH
23052: LD_INT 52
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: PPUSH
23070: NOP4
23074: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23075: NOP4
23079: PUSH
23080: NOP4
23084: PUSH
23085: LD_INT 6
23087: ARRAY
23088: PPUSH
23089: LD_INT 21
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: LD_INT 24
23104: PUSH
23105: LD_INT 1000
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: NOP4
23124: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23125: NOP4
23129: PPUSH
23130: LD_INT 56
23132: PUSH
23133: EMPTY
23134: LIST
23135: PUSH
23136: LD_INT 3
23138: PUSH
23139: LD_INT 60
23141: PUSH
23142: EMPTY
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: NOP4
23157: PUSH
23158: NOP4
23162: NOT
23163: AND
23164: PUSH
23165: NOP4
23169: PUSH
23170: LD_INT 6
23172: ARRAY
23173: PPUSH
23174: LD_INT 21
23176: PUSH
23177: LD_INT 3
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 50
23186: PUSH
23187: EMPTY
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 30
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 30
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: NOP4
23227: AND
23228: IFFALSE 23366
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23230: NOP4
23234: PUSH
23235: NOP4
23239: PPUSH
23240: LD_INT 56
23242: PUSH
23243: EMPTY
23244: LIST
23245: PUSH
23246: LD_INT 3
23248: PUSH
23249: LD_INT 60
23251: PUSH
23252: EMPTY
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PPUSH
23263: NOP4
23267: PUSH
23268: FOR_IN
23269: IFFALSE 23364
// if ( GetTag ( eng ) = 1 ) then
23271: NOP4
23275: PPUSH
23276: NOP4
23280: PUSH
23281: LD_INT 1
23283: EQUAL
23284: IFFALSE 23362
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23286: NOP4
23290: PPUSH
23291: NOP4
23295: PUSH
23296: LD_INT 6
23298: ARRAY
23299: PPUSH
23300: LD_INT 21
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 50
23312: PUSH
23313: EMPTY
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: PUSH
23319: LD_INT 30
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 30
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: PPUSH
23349: NOP4
23353: PUSH
23354: LD_INT 1
23356: ARRAY
23357: PPUSH
23358: NOP4
23362: GO 23268
23364: POP
23365: POP
// if engineers and damagedBuildings then
23366: NOP4
23370: PUSH
23371: NOP4
23375: AND
23376: IFFALSE 23523
// begin for eng in engineers do
23378: NOP4
23382: PUSH
23383: NOP4
23387: PUSH
23388: FOR_IN
23389: IFFALSE 23462
// if ( GetTag ( eng ) = 1 ) then
23391: NOP4
23395: PPUSH
23396: NOP4
23400: PUSH
23401: LD_INT 1
23403: EQUAL
23404: IFFALSE 23460
// begin ForceResetTaskList ( eng ) ;
23406: NOP4
23410: PPUSH
23411: NOP4
// ExitUnitFromBuilding ( eng ) ;
23415: NOP4
23419: PPUSH
23420: NOP4
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23424: NOP4
23428: PPUSH
23429: LD_INT 3
23431: PUSH
23432: LD_INT 60
23434: PUSH
23435: EMPTY
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PPUSH
23442: NOP4
23446: PPUSH
23447: NOP4
23451: PUSH
23452: LD_INT 1
23454: ARRAY
23455: PPUSH
23456: NOP4
// end ;
23460: GO 23388
23462: POP
23463: POP
// if cranes then
23464: NOP4
23468: IFFALSE 23523
// for crane in cranes do
23470: NOP4
23474: PUSH
23475: NOP4
23479: PUSH
23480: FOR_IN
23481: IFFALSE 23521
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23483: NOP4
23487: PPUSH
23488: LD_INT 3
23490: PUSH
23491: LD_INT 60
23493: PUSH
23494: EMPTY
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PPUSH
23501: NOP4
23505: PPUSH
23506: NOP4
23510: PUSH
23511: LD_INT 1
23513: ARRAY
23514: PPUSH
23515: NOP4
23519: GO 23480
23521: POP
23522: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23523: NOP4
23527: PUSH
23528: NOP4
23532: NOT
23533: AND
23534: PUSH
23535: NOP4
23539: PUSH
23540: LD_INT 7
23542: ARRAY
23543: AND
23544: IFFALSE 23655
// begin for eng in engineers do
23546: NOP4
23550: PUSH
23551: NOP4
23555: PUSH
23556: FOR_IN
23557: IFFALSE 23653
// if ( GetTag ( eng ) = 1 ) then
23559: NOP4
23563: PPUSH
23564: NOP4
23568: PUSH
23569: LD_INT 1
23571: EQUAL
23572: IFFALSE 23651
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23574: NOP4
23578: PPUSH
23579: NOP4
23583: PUSH
23584: LD_INT 7
23586: ARRAY
23587: PUSH
23588: LD_INT 1
23590: ARRAY
23591: PUSH
23592: LD_INT 1
23594: ARRAY
23595: PPUSH
23596: NOP4
23600: PUSH
23601: LD_INT 7
23603: ARRAY
23604: PUSH
23605: LD_INT 1
23607: ARRAY
23608: PUSH
23609: LD_INT 2
23611: ARRAY
23612: PPUSH
23613: NOP4
23617: PUSH
23618: LD_INT 7
23620: ARRAY
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_INT 3
23628: ARRAY
23629: PPUSH
23630: NOP4
23634: PUSH
23635: LD_INT 7
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PUSH
23643: LD_INT 4
23645: ARRAY
23646: PPUSH
23647: NOP4
23651: GO 23556
23653: POP
23654: POP
// end ;
23655: LD_VAR 0 2
23659: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23668: NOP4
23672: PUSH
23673: NOP4
23677: PPUSH
23678: NOP4
23682: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23683: NOP4
23687: PUSH
23688: LD_INT 2
23690: ARRAY
23691: PUSH
23692: LD_INT 0
23694: EQUAL
23695: IFFALSE 23699
// exit ;
23697: GO 24153
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23699: NOP4
23703: PUSH
23704: NOP4
23708: PUSH
23709: LD_INT 5
23711: ARRAY
23712: PPUSH
23713: LD_INT 25
23715: PUSH
23716: LD_INT 4
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 50
23725: PUSH
23726: EMPTY
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: NOP4
23737: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23738: NOP4
23742: PUSH
23743: NOP4
23747: PUSH
23748: LD_INT 5
23750: ARRAY
23751: PPUSH
23752: LD_INT 21
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 92
23764: PUSH
23765: NOP4
23769: PUSH
23770: LD_INT 9
23772: ARRAY
23773: PPUSH
23774: LD_INT 0
23776: PPUSH
23777: NOP4
23781: PUSH
23782: LD_INT 1
23784: ARRAY
23785: PUSH
23786: LD_INT 1
23788: ARRAY
23789: PUSH
23790: NOP4
23794: PUSH
23795: LD_INT 9
23797: ARRAY
23798: PPUSH
23799: LD_INT 0
23801: PPUSH
23802: NOP4
23806: PUSH
23807: LD_INT 2
23809: ARRAY
23810: PUSH
23811: LD_INT 1
23813: ARRAY
23814: PUSH
23815: LD_INT 6
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: LD_INT 24
23829: PUSH
23830: LD_INT 1000
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: PPUSH
23846: NOP4
23850: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23851: NOP4
23855: PUSH
23856: NOP4
23860: PUSH
23861: LD_INT 5
23863: ARRAY
23864: PPUSH
23865: LD_INT 21
23867: PUSH
23868: LD_INT 3
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 50
23877: PUSH
23878: EMPTY
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 30
23886: PUSH
23887: LD_INT 6
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 7
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 30
23906: PUSH
23907: LD_INT 8
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: PPUSH
23925: NOP4
23929: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23930: NOP4
23934: PPUSH
23935: LD_INT 56
23937: PUSH
23938: EMPTY
23939: LIST
23940: PUSH
23941: LD_INT 3
23943: PUSH
23944: LD_INT 60
23946: PUSH
23947: EMPTY
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PPUSH
23958: NOP4
23962: PUSH
23963: NOP4
23967: NOT
23968: AND
23969: PUSH
23970: NOP4
23974: AND
23975: IFFALSE 24051
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
23977: NOP4
23981: PUSH
23982: NOP4
23986: PPUSH
23987: LD_INT 56
23989: PUSH
23990: EMPTY
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: PPUSH
23996: NOP4
24000: PUSH
24001: FOR_IN
24002: IFFALSE 24049
// if ( GetTag ( sci ) = 1 ) then
24004: NOP4
24008: PPUSH
24009: NOP4
24013: PUSH
24014: LD_INT 1
24016: EQUAL
24017: IFFALSE 24047
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24019: NOP4
24023: PPUSH
24024: NOP4
24028: PUSH
24029: LD_INT 1
24031: PPUSH
24032: NOP4
24036: PPUSH
24037: NOP4
24041: ARRAY
24042: PPUSH
24043: NOP4
24047: GO 24001
24049: POP
24050: POP
// if not scientists or not damageUnits then
24051: NOP4
24055: NOT
24056: PUSH
24057: NOP4
24061: NOT
24062: OR
24063: IFFALSE 24067
// exit ;
24065: GO 24153
// for sci in scientists do
24067: NOP4
24071: PUSH
24072: NOP4
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24151
// if ( GetTag ( sci ) = 1 ) then
24080: NOP4
24084: PPUSH
24085: NOP4
24089: PUSH
24090: LD_INT 1
24092: EQUAL
24093: IFFALSE 24149
// begin ForceResetTaskList ( sci ) ;
24095: NOP4
24099: PPUSH
24100: NOP4
// ExitUnitFromBuilding ( sci ) ;
24104: NOP4
24108: PPUSH
24109: NOP4
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24113: NOP4
24117: PPUSH
24118: LD_INT 3
24120: PUSH
24121: LD_INT 60
24123: PUSH
24124: EMPTY
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PPUSH
24131: NOP4
24135: PPUSH
24136: NOP4
24140: PUSH
24141: LD_INT 1
24143: ARRAY
24144: PPUSH
24145: NOP4
// end ;
24149: GO 24077
24151: POP
24152: POP
// end ;
24153: LD_VAR 0 2
24157: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24158: LD_INT 0
24160: PPUSH
24161: PPUSH
24162: PPUSH
24163: PPUSH
24164: PPUSH
24165: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24166: NOP4
24170: PUSH
24171: NOP4
24175: PPUSH
24176: NOP4
24180: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24181: NOP4
24185: PUSH
24186: LD_INT 2
24188: ARRAY
24189: PUSH
24190: LD_INT 0
24192: EQUAL
24193: IFFALSE 24197
// exit ;
24195: GO 25564
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24197: NOP4
24201: PUSH
24202: NOP4
24206: PUSH
24207: LD_INT 6
24209: ARRAY
24210: PPUSH
24211: LD_INT 21
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 50
24223: PUSH
24224: EMPTY
24225: LIST
24226: PUSH
24227: LD_INT 2
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 30
24242: PUSH
24243: LD_INT 3
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: PPUSH
24260: NOP4
24264: ST_TO_ADDR
// if not fabs then
24265: NOP4
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 25564
// wait ( aiData [ 16 ] ) ;
24274: NOP4
24278: PUSH
24279: LD_INT 16
24281: ARRAY
24282: PPUSH
24283: NOP4
// if aiData [ 17 ] [ 1 ] then
24287: NOP4
24291: PUSH
24292: LD_INT 17
24294: ARRAY
24295: PUSH
24296: LD_INT 1
24298: ARRAY
24299: IFFALSE 24471
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24301: NOP4
24305: PUSH
24306: DOUBLE
24307: LD_INT 1
24309: DEC
24310: ST_TO_ADDR
24311: NOP4
24315: PUSH
24316: LD_INT 13
24318: ARRAY
24319: PUSH
24320: NOP4
24324: PPUSH
24325: NOP4
24329: MINUS
24330: PUSH
24331: FOR_TO
24332: IFFALSE 24469
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24334: NOP4
24338: PUSH
24339: NOP4
24343: PUSH
24344: LD_INT 13
24346: ARRAY
24347: PUSH
24348: NOP4
24352: ARRAY
24353: PUSH
24354: LD_INT 4
24356: ARRAY
24357: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24358: NOP4
24362: PUSH
24363: NOP4
24367: PUSH
24368: LD_INT 1
24370: PPUSH
24371: NOP4
24375: PPUSH
24376: NOP4
24380: ARRAY
24381: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24382: NOP4
24386: PUSH
24387: LD_INT 0
24389: PPUSH
24390: NOP4
24394: PPUSH
24395: NOP4
24399: ARRAY
24400: PPUSH
24401: NOP4
24405: PUSH
24406: LD_INT 13
24408: ARRAY
24409: PUSH
24410: NOP4
24414: ARRAY
24415: PUSH
24416: LD_INT 1
24418: ARRAY
24419: PPUSH
24420: NOP4
24424: PUSH
24425: LD_INT 13
24427: ARRAY
24428: PUSH
24429: NOP4
24433: ARRAY
24434: PUSH
24435: LD_INT 2
24437: ARRAY
24438: PPUSH
24439: NOP4
24443: PUSH
24444: LD_INT 13
24446: ARRAY
24447: PUSH
24448: NOP4
24452: ARRAY
24453: PUSH
24454: LD_INT 3
24456: ARRAY
24457: PPUSH
24458: NOP4
24462: PPUSH
24463: NOP4
// end ;
24467: GO 24331
24469: POP
24470: POP
// end ; if aiData [ 17 ] [ 3 ] then
24471: NOP4
24475: PUSH
24476: LD_INT 17
24478: ARRAY
24479: PUSH
24480: LD_INT 3
24482: ARRAY
24483: IFFALSE 25380
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24485: LD_INT 22
24487: PUSH
24488: NOP4
24492: PUSH
24493: LD_INT 3
24495: ARRAY
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 34
24516: PUSH
24517: LD_INT 12
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 34
24526: PUSH
24527: LD_INT 32
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 34
24536: PUSH
24537: LD_INT 51
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: PPUSH
24555: NOP4
24559: PUSH
24560: NOP4
24564: PUSH
24565: LD_INT 15
24567: ARRAY
24568: PUSH
24569: LD_INT 1
24571: ARRAY
24572: LESS
24573: IFFALSE 24784
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24575: NOP4
24579: PUSH
24580: DOUBLE
24581: LD_INT 1
24583: DEC
24584: ST_TO_ADDR
24585: NOP4
24589: PUSH
24590: LD_INT 15
24592: ARRAY
24593: PUSH
24594: LD_INT 1
24596: ARRAY
24597: PUSH
24598: LD_INT 22
24600: PUSH
24601: NOP4
24605: PUSH
24606: LD_INT 3
24608: ARRAY
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 21
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 34
24629: PUSH
24630: LD_INT 12
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 34
24639: PUSH
24640: LD_INT 32
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 34
24649: PUSH
24650: LD_INT 51
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: PPUSH
24668: NOP4
24672: MINUS
24673: PUSH
24674: FOR_TO
24675: IFFALSE 24782
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24677: NOP4
24681: PUSH
24682: LD_INT 0
24684: PPUSH
24685: NOP4
24689: PPUSH
24690: NOP4
24694: ARRAY
24695: PPUSH
24696: LD_INT 3
24698: PUSH
24699: EMPTY
24700: LIST
24701: PUSH
24702: LD_INT 13
24704: PUSH
24705: EMPTY
24706: LIST
24707: PUSH
24708: LD_INT 22
24710: PUSH
24711: EMPTY
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: PUSH
24719: NOP4
24723: PUSH
24724: LD_INT 4
24726: ARRAY
24727: ARRAY
24728: PUSH
24729: LD_INT 1
24731: ARRAY
24732: PPUSH
24733: LD_INT 1
24735: PPUSH
24736: LD_INT 2
24738: PPUSH
24739: LD_INT 12
24741: PUSH
24742: EMPTY
24743: LIST
24744: PUSH
24745: LD_INT 32
24747: PUSH
24748: EMPTY
24749: LIST
24750: PUSH
24751: LD_INT 51
24753: PUSH
24754: EMPTY
24755: LIST
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: PUSH
24762: NOP4
24766: PUSH
24767: LD_INT 4
24769: ARRAY
24770: ARRAY
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: NOP4
24780: GO 24674
24782: POP
24783: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24784: LD_INT 22
24786: PUSH
24787: NOP4
24791: PUSH
24792: LD_INT 3
24794: ARRAY
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 21
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_INT 13
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 34
24825: PUSH
24826: NOP4
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 34
24837: PUSH
24838: LD_INT 52
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: PPUSH
24856: NOP4
24860: PUSH
24861: NOP4
24865: PUSH
24866: LD_INT 15
24868: ARRAY
24869: PUSH
24870: LD_INT 2
24872: ARRAY
24873: LESS
24874: IFFALSE 25089
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24876: NOP4
24880: PUSH
24881: DOUBLE
24882: LD_INT 1
24884: DEC
24885: ST_TO_ADDR
24886: NOP4
24890: PUSH
24891: LD_INT 15
24893: ARRAY
24894: PUSH
24895: LD_INT 2
24897: ARRAY
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: NOP4
24906: PUSH
24907: LD_INT 3
24909: ARRAY
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 21
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 34
24930: PUSH
24931: LD_INT 13
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 34
24940: PUSH
24941: NOP4
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 34
24952: PUSH
24953: LD_INT 52
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: PPUSH
24971: NOP4
24975: MINUS
24976: PUSH
24977: FOR_TO
24978: IFFALSE 25087
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24980: NOP4
24984: PUSH
24985: LD_INT 0
24987: PPUSH
24988: NOP4
24992: PPUSH
24993: NOP4
24997: ARRAY
24998: PPUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: PUSH
25005: LD_INT 13
25007: PUSH
25008: EMPTY
25009: LIST
25010: PUSH
25011: LD_INT 22
25013: PUSH
25014: EMPTY
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: NOP4
25026: PUSH
25027: LD_INT 4
25029: ARRAY
25030: ARRAY
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: LD_INT 2
25041: PPUSH
25042: LD_INT 13
25044: PUSH
25045: EMPTY
25046: LIST
25047: PUSH
25048: NOP4
25052: PUSH
25053: EMPTY
25054: LIST
25055: PUSH
25056: LD_INT 52
25058: PUSH
25059: EMPTY
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: PUSH
25067: NOP4
25071: PUSH
25072: LD_INT 4
25074: ARRAY
25075: ARRAY
25076: PUSH
25077: LD_INT 1
25079: ARRAY
25080: PPUSH
25081: NOP4
25085: GO 24977
25087: POP
25088: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25089: LD_INT 22
25091: PUSH
25092: NOP4
25096: PUSH
25097: LD_INT 3
25099: ARRAY
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 21
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 34
25120: PUSH
25121: LD_INT 14
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 14
25130: PUSH
25131: EMPTY
25132: LIST
25133: PUSH
25134: LD_INT 34
25136: PUSH
25137: LD_INT 53
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: PPUSH
25155: NOP4
25159: PUSH
25160: NOP4
25164: PUSH
25165: LD_INT 15
25167: ARRAY
25168: PUSH
25169: LD_INT 3
25171: ARRAY
25172: LESS
25173: IFFALSE 25380
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25175: NOP4
25179: PUSH
25180: DOUBLE
25181: LD_INT 1
25183: DEC
25184: ST_TO_ADDR
25185: NOP4
25189: PUSH
25190: LD_INT 15
25192: ARRAY
25193: PUSH
25194: LD_INT 3
25196: ARRAY
25197: PUSH
25198: LD_INT 22
25200: PUSH
25201: NOP4
25205: PUSH
25206: LD_INT 3
25208: ARRAY
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 21
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: PUSH
25227: LD_INT 34
25229: PUSH
25230: LD_INT 14
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 14
25239: PUSH
25240: EMPTY
25241: LIST
25242: PUSH
25243: LD_INT 34
25245: PUSH
25246: LD_INT 53
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: PPUSH
25264: NOP4
25268: MINUS
25269: PUSH
25270: FOR_TO
25271: IFFALSE 25378
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25273: NOP4
25277: PUSH
25278: LD_INT 0
25280: PPUSH
25281: NOP4
25285: PPUSH
25286: NOP4
25290: ARRAY
25291: PPUSH
25292: LD_INT 4
25294: PUSH
25295: EMPTY
25296: LIST
25297: PUSH
25298: LD_INT 13
25300: PUSH
25301: EMPTY
25302: LIST
25303: PUSH
25304: LD_INT 24
25306: PUSH
25307: EMPTY
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: NOP4
25319: PUSH
25320: LD_INT 4
25322: ARRAY
25323: ARRAY
25324: PUSH
25325: LD_INT 1
25327: ARRAY
25328: PPUSH
25329: LD_INT 1
25331: PPUSH
25332: LD_INT 1
25334: PPUSH
25335: LD_INT 14
25337: PUSH
25338: EMPTY
25339: LIST
25340: PUSH
25341: LD_INT 14
25343: PUSH
25344: EMPTY
25345: LIST
25346: PUSH
25347: LD_INT 53
25349: PUSH
25350: EMPTY
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: PUSH
25358: NOP4
25362: PUSH
25363: LD_INT 4
25365: ARRAY
25366: ARRAY
25367: PUSH
25368: LD_INT 1
25370: ARRAY
25371: PPUSH
25372: NOP4
25376: GO 25270
25378: POP
25379: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25380: NOP4
25384: PUSH
25385: LD_INT 17
25387: ARRAY
25388: PUSH
25389: LD_INT 2
25391: ARRAY
25392: PUSH
25393: NOP4
25397: PPUSH
25398: NOP4
25402: MINUS
25403: IFFALSE 25564
// begin for i := 1 to aiData [ 14 ] do
25405: NOP4
25409: PUSH
25410: DOUBLE
25411: LD_INT 1
25413: DEC
25414: ST_TO_ADDR
25415: NOP4
25419: PUSH
25420: LD_INT 14
25422: ARRAY
25423: PUSH
25424: FOR_TO
25425: IFFALSE 25562
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25427: NOP4
25431: PUSH
25432: NOP4
25436: PUSH
25437: LD_INT 14
25439: ARRAY
25440: PUSH
25441: NOP4
25445: ARRAY
25446: PUSH
25447: LD_INT 4
25449: ARRAY
25450: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25451: NOP4
25455: PUSH
25456: NOP4
25460: PUSH
25461: LD_INT 1
25463: PPUSH
25464: NOP4
25468: PPUSH
25469: NOP4
25473: ARRAY
25474: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25475: NOP4
25479: PUSH
25480: LD_INT 0
25482: PPUSH
25483: NOP4
25487: PPUSH
25488: NOP4
25492: ARRAY
25493: PPUSH
25494: NOP4
25498: PUSH
25499: LD_INT 14
25501: ARRAY
25502: PUSH
25503: NOP4
25507: ARRAY
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: NOP4
25517: PUSH
25518: LD_INT 14
25520: ARRAY
25521: PUSH
25522: NOP4
25526: ARRAY
25527: PUSH
25528: LD_INT 2
25530: ARRAY
25531: PPUSH
25532: NOP4
25536: PUSH
25537: LD_INT 14
25539: ARRAY
25540: PUSH
25541: NOP4
25545: ARRAY
25546: PUSH
25547: LD_INT 3
25549: ARRAY
25550: PPUSH
25551: NOP4
25555: PPUSH
25556: NOP4
// end ;
25560: GO 25424
25562: POP
25563: POP
// end ; end ;
25564: LD_VAR 0 2
25568: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25569: LD_INT 0
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
25576: PPUSH
25577: PPUSH
25578: PPUSH
25579: PPUSH
25580: PPUSH
25581: PPUSH
25582: PPUSH
25583: PPUSH
25584: PPUSH
// for unit in units do
25585: NOP4
25589: PUSH
25590: NOP4
25594: PUSH
25595: FOR_IN
25596: IFFALSE 25612
// SetTag ( unit , 0 ) ;
25598: NOP4
25602: PPUSH
25603: LD_INT 0
25605: PPUSH
25606: NOP4
25610: GO 25595
25612: POP
25613: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25614: NOP4
25618: PUSH
25619: NOP4
25623: PUSH
25624: NOP4
25628: ARRAY
25629: PUSH
25630: LD_INT 1
25632: ARRAY
25633: PUSH
25634: NOP4
25638: PUSH
25639: NOP4
25643: ARRAY
25644: PUSH
25645: LD_INT 2
25647: ARRAY
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25653: NOP4
25657: PUSH
25658: NOP4
25662: PPUSH
25663: LD_INT 50
25665: PUSH
25666: EMPTY
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 59
25674: PUSH
25675: EMPTY
25676: LIST
25677: PUSH
25678: LD_INT 25
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 25
25690: PUSH
25691: LD_INT 8
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 21
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PPUSH
25719: NOP4
25723: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25724: NOP4
25728: PUSH
25729: NOP4
25733: PPUSH
25734: LD_INT 50
25736: PUSH
25737: EMPTY
25738: LIST
25739: PUSH
25740: LD_INT 25
25742: PUSH
25743: LD_INT 4
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: NOP4
25758: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25759: NOP4
25763: PUSH
25764: NOP4
25768: PPUSH
25769: LD_INT 21
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: LD_INT 24
25784: PUSH
25785: LD_INT 1000
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: NOP4
25804: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25805: NOP4
25809: PUSH
25810: LD_INT 21
25812: PPUSH
25813: NOP4
25817: ST_TO_ADDR
// for unit in attackUnits do
25818: NOP4
25822: PUSH
25823: NOP4
25827: PUSH
25828: FOR_IN
25829: IFFALSE 26578
// begin if path then
25831: NOP4
25835: IFFALSE 26567
// begin i = 1 ;
25837: NOP4
25841: PUSH
25842: LD_INT 1
25844: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25845: NOP4
25849: PUSH
25850: LD_INT 21
25852: PPUSH
25853: NOP4
25857: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25858: NOP4
25862: PUSH
25863: LD_INT 81
25865: PUSH
25866: NOP4
25870: PPUSH
25871: NOP4
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PPUSH
25880: NOP4
25884: PPUSH
25885: NOP4
25889: PPUSH
25890: NOP4
25894: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25895: NOP4
25899: PUSH
25900: NOP4
25904: PPUSH
25905: NOP4
25909: PPUSH
25910: NOP4
25914: PPUSH
25915: NOP4
25919: PPUSH
25920: NOP4
25924: PPUSH
25925: NOP4
25929: ST_TO_ADDR
// if damageUnits and medics then
25930: NOP4
25934: PUSH
25935: NOP4
25939: AND
25940: IFFALSE 25962
// ComHeal ( medics , damageUnits [ 1 ] ) else
25942: NOP4
25946: PPUSH
25947: NOP4
25951: PUSH
25952: LD_INT 1
25954: ARRAY
25955: PPUSH
25956: NOP4
25960: GO 26005
// if medics then
25962: NOP4
25966: IFFALSE 26005
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
25968: NOP4
25972: PPUSH
25973: NOP4
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: PPUSH
25982: NOP4
25986: PPUSH
25987: NOP4
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: PPUSH
25996: NOP4
26000: PPUSH
26001: NOP4
// if not HasTask ( unit ) then
26005: NOP4
26009: PPUSH
26010: NOP4
26014: NOT
26015: IFFALSE 26254
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26017: NOP4
26021: PUSH
26022: NOP4
26026: PPUSH
26027: NOP4
26031: PPUSH
26032: NOP4
26036: PPUSH
26037: NOP4
26041: PPUSH
26042: NOP4
26046: PPUSH
26047: NOP4
26051: ST_TO_ADDR
// if i > crates then
26052: NOP4
26056: PUSH
26057: NOP4
26061: GREATER
26062: IFFALSE 26072
// i = 1 ;
26064: NOP4
26068: PUSH
26069: LD_INT 1
26071: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26072: NOP4
26076: PUSH
26077: NOP4
26081: AND
26082: IFFALSE 26197
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26084: NOP4
26088: PPUSH
26089: NOP4
26093: PPUSH
26094: NOP4
26098: PPUSH
26099: NOP4
26103: PPUSH
26104: NOP4
26108: PPUSH
26109: NOP4
26113: PUSH
26114: NOP4
26118: PPUSH
26119: NOP4
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: PPUSH
26128: NOP4
26132: PUSH
26133: LD_INT 2
26135: ARRAY
26136: PPUSH
26137: NOP4
26141: LESS
26142: IFFALSE 26160
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26144: NOP4
26148: PPUSH
26149: NOP4
26153: PPUSH
26154: NOP4
26158: GO 26195
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26160: NOP4
26164: PPUSH
26165: NOP4
26169: PUSH
26170: NOP4
26174: ARRAY
26175: PPUSH
26176: NOP4
26180: PUSH
26181: NOP4
26185: PUSH
26186: LD_INT 1
26188: PLUS
26189: ARRAY
26190: PPUSH
26191: NOP4
// end else
26195: GO 26254
// if crates then
26197: NOP4
26201: IFFALSE 26240
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26203: NOP4
26207: PPUSH
26208: NOP4
26212: PUSH
26213: NOP4
26217: ARRAY
26218: PPUSH
26219: NOP4
26223: PUSH
26224: NOP4
26228: PUSH
26229: LD_INT 1
26231: PLUS
26232: ARRAY
26233: PPUSH
26234: NOP4
26238: GO 26254
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26240: NOP4
26244: PPUSH
26245: NOP4
26249: PPUSH
26250: NOP4
// end ; wait ( 0 0$1 ) ;
26254: LD_INT 35
26256: PPUSH
26257: NOP4
// if path then
26261: NOP4
26265: IFFALSE 26341
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26267: NOP4
26271: PUSH
26272: NOP4
26276: PPUSH
26277: NOP4
26281: PPUSH
26282: NOP4
26286: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26287: NOP4
26291: PPUSH
26292: NOP4
26296: PUSH
26297: LD_INT 1
26299: ARRAY
26300: PPUSH
26301: NOP4
26305: PUSH
26306: LD_INT 2
26308: ARRAY
26309: PPUSH
26310: NOP4
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26314: NOP4
26318: PPUSH
26319: NOP4
26323: PUSH
26324: LD_INT 1
26326: ARRAY
26327: PPUSH
26328: NOP4
26332: PUSH
26333: LD_INT 2
26335: ARRAY
26336: PPUSH
26337: NOP4
// end ; i = i + 2 ;
26341: NOP4
26345: PUSH
26346: NOP4
26350: PUSH
26351: LD_INT 2
26353: PLUS
26354: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26355: NOP4
26359: PPUSH
26360: NOP4
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: NOP4
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: NOP4
26382: PUSH
26383: LD_INT 6
26385: LESSEQUAL
26386: IFFALSE 25845
// repeat wait ( 0 0$1 ) ;
26388: LD_INT 35
26390: PPUSH
26391: NOP4
// nearUnitsCounter = 0 ;
26395: NOP4
26399: PUSH
26400: LD_INT 0
26402: ST_TO_ADDR
// for attackUnit in attackUnits do
26403: NOP4
26407: PUSH
26408: NOP4
26412: PUSH
26413: FOR_IN
26414: IFFALSE 26452
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26416: NOP4
26420: PPUSH
26421: NOP4
26425: PPUSH
26426: NOP4
26430: PUSH
26431: LD_INT 7
26433: LESSEQUAL
26434: IFFALSE 26450
// nearUnitsCounter = nearUnitsCounter + 1 ;
26436: NOP4
26440: PUSH
26441: NOP4
26445: PUSH
26446: LD_INT 1
26448: PLUS
26449: ST_TO_ADDR
26450: GO 26413
26452: POP
26453: POP
// until nearUnitsCounter = attackUnits ;
26454: NOP4
26458: PUSH
26459: NOP4
26463: EQUAL
26464: IFFALSE 26388
// for i := 1 to path do
26466: NOP4
26470: PUSH
26471: DOUBLE
26472: LD_INT 1
26474: DEC
26475: ST_TO_ADDR
26476: NOP4
26480: PUSH
26481: FOR_TO
26482: IFFALSE 26565
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26484: NOP4
26488: PUSH
26489: NOP4
26493: ARRAY
26494: PUSH
26495: LD_INT 1
26497: ARRAY
26498: PUSH
26499: NOP4
26503: PUSH
26504: LD_INT 1
26506: ARRAY
26507: EQUAL
26508: PUSH
26509: NOP4
26513: PUSH
26514: NOP4
26518: ARRAY
26519: PUSH
26520: LD_INT 2
26522: ARRAY
26523: PUSH
26524: NOP4
26528: PUSH
26529: LD_INT 2
26531: ARRAY
26532: EQUAL
26533: AND
26534: IFFALSE 26563
// begin path = path diff [ path [ i ] ] ;
26536: NOP4
26540: PUSH
26541: NOP4
26545: PUSH
26546: NOP4
26550: PUSH
26551: NOP4
26555: ARRAY
26556: PUSH
26557: EMPTY
26558: LIST
26559: DIFF
26560: ST_TO_ADDR
// break ;
26561: GO 26565
// end ;
26563: GO 26481
26565: POP
26566: POP
// end ; if not path then
26567: NOP4
26571: NOT
26572: IFFALSE 26576
// break ;
26574: GO 26578
// end ;
26576: GO 25828
26578: POP
26579: POP
// repeat unitsReachPathEnd = 0 ;
26580: NOP4
26584: PUSH
26585: LD_INT 0
26587: ST_TO_ADDR
// for attackUnit in attackUnits do
26588: NOP4
26592: PUSH
26593: NOP4
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26737
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26601: NOP4
26605: PPUSH
26606: NOP4
26610: PUSH
26611: LD_INT 1
26613: ARRAY
26614: PPUSH
26615: NOP4
26619: PUSH
26620: LD_INT 2
26622: ARRAY
26623: PPUSH
26624: NOP4
26628: PUSH
26629: LD_INT 7
26631: LESS
26632: NOT
26633: PUSH
26634: NOP4
26638: PPUSH
26639: NOP4
26643: PUSH
26644: LD_INT 0
26646: EQUAL
26647: AND
26648: IFFALSE 26679
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26650: NOP4
26654: PPUSH
26655: NOP4
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: PPUSH
26664: NOP4
26668: PUSH
26669: LD_INT 2
26671: ARRAY
26672: PPUSH
26673: NOP4
26677: GO 26706
// if GetTag ( attackUnit ) = 0 then
26679: NOP4
26683: PPUSH
26684: NOP4
26688: PUSH
26689: LD_INT 0
26691: EQUAL
26692: IFFALSE 26706
// SetTag ( attackUnit , 1 ) ;
26694: NOP4
26698: PPUSH
26699: LD_INT 1
26701: PPUSH
26702: NOP4
// if GetTag ( unit ) = 1 then
26706: NOP4
26710: PPUSH
26711: NOP4
26715: PUSH
26716: LD_INT 1
26718: EQUAL
26719: IFFALSE 26735
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26721: NOP4
26725: PUSH
26726: NOP4
26730: PUSH
26731: LD_INT 1
26733: PLUS
26734: ST_TO_ADDR
// end ;
26735: GO 26598
26737: POP
26738: POP
// wait ( 0 0$1 ) ;
26739: LD_INT 35
26741: PPUSH
26742: NOP4
// until unitsReachPathEnd > attackUnits - 3 ;
26746: NOP4
26750: PUSH
26751: NOP4
26755: PUSH
26756: LD_INT 3
26758: MINUS
26759: GREATER
26760: IFFALSE 26580
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26762: NOP4
26766: PPUSH
26767: LD_INT 50
26769: PUSH
26770: EMPTY
26771: LIST
26772: PPUSH
26773: NOP4
26777: NOT
26778: PUSH
26779: NOP4
26783: PPUSH
26784: NOP4
26788: OR
26789: IFFALSE 25653
// end ;
26791: LD_VAR 0 4
26795: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26796: LD_INT 0
26798: PPUSH
26799: PPUSH
26800: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26801: NOP4
26805: PUSH
26806: NOP4
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PUSH
26819: NOP4
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: PUSH
26828: LD_INT 2
26830: ARRAY
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: ST_TO_ADDR
// for i := 2 to path do
26836: NOP4
26840: PUSH
26841: DOUBLE
26842: LD_INT 2
26844: DEC
26845: ST_TO_ADDR
26846: NOP4
26850: PUSH
26851: FOR_TO
26852: IFFALSE 26992
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26854: NOP4
26858: PPUSH
26859: NOP4
26863: PUSH
26864: NOP4
26868: ARRAY
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: NOP4
26878: PUSH
26879: NOP4
26883: ARRAY
26884: PUSH
26885: LD_INT 2
26887: ARRAY
26888: PPUSH
26889: NOP4
26893: PUSH
26894: NOP4
26898: PPUSH
26899: NOP4
26903: PUSH
26904: LD_INT 1
26906: ARRAY
26907: PPUSH
26908: NOP4
26912: PUSH
26913: LD_INT 2
26915: ARRAY
26916: PPUSH
26917: NOP4
26921: LESS
26922: IFFALSE 26990
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26924: NOP4
26928: PUSH
26929: NOP4
26933: PPUSH
26934: LD_INT 1
26936: PPUSH
26937: NOP4
26941: PUSH
26942: NOP4
26946: ARRAY
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: PPUSH
26952: NOP4
26956: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
26957: NOP4
26961: PUSH
26962: NOP4
26966: PPUSH
26967: LD_INT 2
26969: PPUSH
26970: NOP4
26974: PUSH
26975: NOP4
26979: ARRAY
26980: PUSH
26981: LD_INT 2
26983: ARRAY
26984: PPUSH
26985: NOP4
26989: ST_TO_ADDR
// end ; end ;
26990: GO 26851
26992: POP
26993: POP
// result = nearPosition ;
26994: NOP4
26998: PUSH
26999: NOP4
27003: ST_TO_ADDR
// end ;
27004: LD_VAR 0 3
27008: RET
// function ForceResetTaskList ( unit ) ; begin
27009: LD_INT 0
27011: PPUSH
// if GetTaskList ( unit ) then
27012: NOP4
27016: PPUSH
27017: NOP4
27021: IFFALSE 27057
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27023: NOP4
27027: PPUSH
27028: NOP4
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PUSH
27037: LD_INT 1
27039: ARRAY
27040: PUSH
27041: LD_STRING e
27043: EQUAL
27044: IFFALSE 27057
// SetTaskList ( unit , [ ] ) ;
27046: NOP4
27050: PPUSH
27051: EMPTY
27052: PPUSH
27053: NOP4
// end ;
27057: LD_VAR 0 2
27061: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27062: LD_INT 0
27064: PPUSH
// if IsInUnit ( unit ) then
27065: NOP4
27069: PPUSH
27070: NOP4
27074: IFFALSE 27085
// ComExitBuilding ( unit ) ;
27076: NOP4
27080: PPUSH
27081: NOP4
// end ; end_of_file
27085: LD_VAR 0 2
27089: RET
// every 0 0$1 trigger enableCounter do
27090: NOP4
27094: IFFALSE 27131
27096: GO 27098
27098: DISABLE
// begin enable ;
27099: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27100: LD_ADDR_OWVAR 47
27104: PUSH
27105: LD_STRING #Am01-1
27107: PUSH
27108: NOP4
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27117: NOP4
27121: PUSH
27122: NOP4
27126: PUSH
27127: LD_INT 35
27129: PLUS
27130: ST_TO_ADDR
// end ; end_of_file end_of_file
27131: END
// every 0 0$01 do var timer ;
27132: GO 27134
27134: DISABLE
27135: LD_INT 0
27137: PPUSH
// begin timer := 1 1$30 ;
27138: NOP4
27142: PUSH
27143: LD_INT 3150
27145: ST_TO_ADDR
// repeat wait ( timer ) ;
27146: NOP4
27150: PPUSH
27151: NOP4
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27155: NOP4
27159: PUSH
27160: LD_INT 6
27162: GREATEREQUAL
27163: PUSH
27164: NOP4
27168: PUSH
27169: LD_INT 12
27171: LESS
27172: AND
27173: IFFALSE 27189
// timer := timer + 0 0$3 ;
27175: NOP4
27179: PUSH
27180: NOP4
27184: PUSH
27185: LD_INT 105
27187: PLUS
27188: ST_TO_ADDR
// if cratesSpawned >= 12 then
27189: NOP4
27193: PUSH
27194: LD_INT 12
27196: GREATEREQUAL
27197: IFFALSE 27213
// timer := timer + 0 0$9 ;
27199: NOP4
27203: PUSH
27204: NOP4
27208: PUSH
27209: LD_INT 315
27211: PLUS
27212: ST_TO_ADDR
// if timer > 3 3$00 then
27213: NOP4
27217: PUSH
27218: LD_INT 6300
27220: GREATER
27221: IFFALSE 27231
// timer := 0 0$50 ;
27223: NOP4
27227: PUSH
27228: LD_INT 1750
27230: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27231: LD_INT 3
27233: PPUSH
27234: LD_INT 5
27236: PPUSH
27237: NOP4
27241: PPUSH
27242: LD_INT 22
27244: PPUSH
27245: LD_INT 1
27247: PPUSH
27248: NOP4
// cratesSpawned = cratesSpawned + 1 ;
27252: NOP4
27256: PUSH
27257: NOP4
27261: PUSH
27262: LD_INT 1
27264: PLUS
27265: ST_TO_ADDR
// until false ;
27266: LD_INT 0
27268: IFFALSE 27146
// end ; end_of_file
27270: PPOPN 1
27272: END
// export function Nef_PrepareNature ; var i , un ; begin
27273: LD_INT 0
27275: PPUSH
27276: PPUSH
27277: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27278: NOP4
27282: PUSH
27283: DOUBLE
27284: LD_INT 1
27286: DEC
27287: ST_TO_ADDR
27288: NOP4
27292: PUSH
27293: LD_INT 1
27295: ARRAY
27296: PUSH
27297: FOR_TO
27298: IFFALSE 27408
// begin uc_side = 0 ;
27300: LD_ADDR_OWVAR 20
27304: PUSH
27305: LD_INT 0
27307: ST_TO_ADDR
// uc_nation = nation_nature ;
27308: LD_ADDR_OWVAR 21
27312: PUSH
27313: LD_INT 0
27315: ST_TO_ADDR
// hc_class = class_apeman ;
27316: LD_ADDR_OWVAR 28
27320: PUSH
27321: LD_INT 12
27323: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27324: LD_ADDR_OWVAR 31
27328: PUSH
27329: NOP4
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PUSH
27338: NOP4
27342: PUSH
27343: LD_INT 2
27345: ARRAY
27346: PUSH
27347: NOP4
27351: PUSH
27352: LD_INT 3
27354: ARRAY
27355: PUSH
27356: NOP4
27360: PUSH
27361: LD_INT 4
27363: ARRAY
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27371: LD_ADDR_OWVAR 35
27375: PUSH
27376: NOP4
27380: ST_TO_ADDR
// un = CreateHuman ;
27381: NOP4
27385: PUSH
27386: NOP4
27390: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27391: NOP4
27395: PPUSH
27396: LD_INT 23
27398: PPUSH
27399: LD_INT 0
27401: PPUSH
27402: NOP4
// end ;
27406: GO 27297
27408: POP
27409: POP
// for i := 1 to animalsAmount [ 2 ] do
27410: NOP4
27414: PUSH
27415: DOUBLE
27416: LD_INT 1
27418: DEC
27419: ST_TO_ADDR
27420: NOP4
27424: PUSH
27425: LD_INT 2
27427: ARRAY
27428: PUSH
27429: FOR_TO
27430: IFFALSE 27540
// begin uc_side = 0 ;
27432: LD_ADDR_OWVAR 20
27436: PUSH
27437: LD_INT 0
27439: ST_TO_ADDR
// uc_nation = nation_nature ;
27440: LD_ADDR_OWVAR 21
27444: PUSH
27445: LD_INT 0
27447: ST_TO_ADDR
// hc_class = class_phororhacos ;
27448: LD_ADDR_OWVAR 28
27452: PUSH
27453: LD_INT 18
27455: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27456: LD_ADDR_OWVAR 31
27460: PUSH
27461: NOP4
27465: PUSH
27466: LD_INT 1
27468: ARRAY
27469: PUSH
27470: NOP4
27474: PUSH
27475: LD_INT 2
27477: ARRAY
27478: PUSH
27479: NOP4
27483: PUSH
27484: LD_INT 3
27486: ARRAY
27487: PUSH
27488: NOP4
27492: PUSH
27493: LD_INT 4
27495: ARRAY
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27503: LD_ADDR_OWVAR 35
27507: PUSH
27508: NOP4
27512: ST_TO_ADDR
// un = CreateHuman ;
27513: NOP4
27517: PUSH
27518: NOP4
27522: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27523: NOP4
27527: PPUSH
27528: LD_INT 23
27530: PPUSH
27531: LD_INT 0
27533: PPUSH
27534: NOP4
// end ;
27538: GO 27429
27540: POP
27541: POP
// for i := 1 to animalsAmount [ 3 ] do
27542: NOP4
27546: PUSH
27547: DOUBLE
27548: LD_INT 1
27550: DEC
27551: ST_TO_ADDR
27552: NOP4
27556: PUSH
27557: LD_INT 3
27559: ARRAY
27560: PUSH
27561: FOR_TO
27562: IFFALSE 27672
// begin uc_side = 0 ;
27564: LD_ADDR_OWVAR 20
27568: PUSH
27569: LD_INT 0
27571: ST_TO_ADDR
// uc_nation = nation_nature ;
27572: LD_ADDR_OWVAR 21
27576: PUSH
27577: LD_INT 0
27579: ST_TO_ADDR
// hc_class = class_tiger ;
27580: LD_ADDR_OWVAR 28
27584: PUSH
27585: LD_INT 14
27587: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27588: LD_ADDR_OWVAR 31
27592: PUSH
27593: NOP4
27597: PUSH
27598: LD_INT 1
27600: ARRAY
27601: PUSH
27602: NOP4
27606: PUSH
27607: LD_INT 2
27609: ARRAY
27610: PUSH
27611: NOP4
27615: PUSH
27616: LD_INT 3
27618: ARRAY
27619: PUSH
27620: NOP4
27624: PUSH
27625: LD_INT 4
27627: ARRAY
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27635: LD_ADDR_OWVAR 35
27639: PUSH
27640: NOP4
27644: ST_TO_ADDR
// un = CreateHuman ;
27645: NOP4
27649: PUSH
27650: NOP4
27654: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27655: NOP4
27659: PPUSH
27660: LD_INT 23
27662: PPUSH
27663: LD_INT 0
27665: PPUSH
27666: NOP4
// end ;
27670: GO 27561
27672: POP
27673: POP
// for i := 1 to animalsAmount [ 4 ] do
27674: NOP4
27678: PUSH
27679: DOUBLE
27680: LD_INT 1
27682: DEC
27683: ST_TO_ADDR
27684: NOP4
27688: PUSH
27689: LD_INT 4
27691: ARRAY
27692: PUSH
27693: FOR_TO
27694: IFFALSE 27804
// begin uc_side = 0 ;
27696: LD_ADDR_OWVAR 20
27700: PUSH
27701: LD_INT 0
27703: ST_TO_ADDR
// uc_nation = nation_nature ;
27704: LD_ADDR_OWVAR 21
27708: PUSH
27709: LD_INT 0
27711: ST_TO_ADDR
// hc_class = 21 ;
27712: LD_ADDR_OWVAR 28
27716: PUSH
27717: LD_INT 21
27719: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27720: LD_ADDR_OWVAR 31
27724: PUSH
27725: NOP4
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PUSH
27734: NOP4
27738: PUSH
27739: LD_INT 2
27741: ARRAY
27742: PUSH
27743: NOP4
27747: PUSH
27748: LD_INT 3
27750: ARRAY
27751: PUSH
27752: NOP4
27756: PUSH
27757: LD_INT 4
27759: ARRAY
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27767: LD_ADDR_OWVAR 35
27771: PUSH
27772: NOP4
27776: ST_TO_ADDR
// un = CreateHuman ;
27777: NOP4
27781: PUSH
27782: NOP4
27786: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27787: NOP4
27791: PPUSH
27792: LD_INT 23
27794: PPUSH
27795: LD_INT 0
27797: PPUSH
27798: NOP4
// end ;
27802: GO 27693
27804: POP
27805: POP
// for i := 1 to animalsAmount [ 5 ] do
27806: NOP4
27810: PUSH
27811: DOUBLE
27812: LD_INT 1
27814: DEC
27815: ST_TO_ADDR
27816: NOP4
27820: PUSH
27821: LD_INT 5
27823: ARRAY
27824: PUSH
27825: FOR_TO
27826: IFFALSE 27887
// begin uc_side = 0 ;
27828: LD_ADDR_OWVAR 20
27832: PUSH
27833: LD_INT 0
27835: ST_TO_ADDR
// uc_nation = nation_nature ;
27836: LD_ADDR_OWVAR 21
27840: PUSH
27841: LD_INT 0
27843: ST_TO_ADDR
// vc_chassis := 31 ;
27844: LD_ADDR_OWVAR 37
27848: PUSH
27849: LD_INT 31
27851: ST_TO_ADDR
// vc_control := control_rider ;
27852: LD_ADDR_OWVAR 38
27856: PUSH
27857: LD_INT 4
27859: ST_TO_ADDR
// un := CreateVehicle ;
27860: NOP4
27864: PUSH
27865: NOP4
27869: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27870: NOP4
27874: PPUSH
27875: LD_INT 23
27877: PPUSH
27878: LD_INT 0
27880: PPUSH
27881: NOP4
// end ;
27885: GO 27825
27887: POP
27888: POP
// end ; end_of_file
27889: LD_VAR 0 1
27893: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
27894: NOP4
27898: PUSH
27899: LD_INT 100
27901: EQUAL
27902: IFFALSE 28851
// begin if not StreamModeActive then
27904: NOP4
27908: NOT
27909: IFFALSE 27919
// StreamModeActive := true ;
27911: NOP4
27915: PUSH
27916: LD_INT 1
27918: ST_TO_ADDR
// if p3 = 0 then
27919: NOP4
27923: PUSH
27924: LD_INT 0
27926: EQUAL
27927: IFFALSE 27933
// InitStreamMode ;
27929: NOP4
// if p3 = 1 then
27933: NOP4
27937: PUSH
27938: LD_INT 1
27940: EQUAL
27941: IFFALSE 27951
// sRocket := true ;
27943: NOP4
27947: PUSH
27948: LD_INT 1
27950: ST_TO_ADDR
// if p3 = 2 then
27951: NOP4
27955: PUSH
27956: LD_INT 2
27958: EQUAL
27959: IFFALSE 27969
// sSpeed := true ;
27961: NOP4
27965: PUSH
27966: LD_INT 1
27968: ST_TO_ADDR
// if p3 = 3 then
27969: NOP4
27973: PUSH
27974: LD_INT 3
27976: EQUAL
27977: IFFALSE 27987
// sEngine := true ;
27979: NOP4
27983: PUSH
27984: LD_INT 1
27986: ST_TO_ADDR
// if p3 = 4 then
27987: NOP4
27991: PUSH
27992: LD_INT 4
27994: EQUAL
27995: IFFALSE 28005
// sSpec := true ;
27997: NOP4
28001: PUSH
28002: LD_INT 1
28004: ST_TO_ADDR
// if p3 = 5 then
28005: NOP4
28009: PUSH
28010: LD_INT 5
28012: EQUAL
28013: IFFALSE 28023
// sLevel := true ;
28015: NOP4
28019: PUSH
28020: LD_INT 1
28022: ST_TO_ADDR
// if p3 = 6 then
28023: NOP4
28027: PUSH
28028: LD_INT 6
28030: EQUAL
28031: IFFALSE 28041
// sArmoury := true ;
28033: NOP4
28037: PUSH
28038: LD_INT 1
28040: ST_TO_ADDR
// if p3 = 7 then
28041: NOP4
28045: PUSH
28046: LD_INT 7
28048: EQUAL
28049: IFFALSE 28059
// sRadar := true ;
28051: NOP4
28055: PUSH
28056: LD_INT 1
28058: ST_TO_ADDR
// if p3 = 8 then
28059: NOP4
28063: PUSH
28064: LD_INT 8
28066: EQUAL
28067: IFFALSE 28077
// sBunker := true ;
28069: NOP4
28073: PUSH
28074: LD_INT 1
28076: ST_TO_ADDR
// if p3 = 9 then
28077: NOP4
28081: PUSH
28082: LD_INT 9
28084: EQUAL
28085: IFFALSE 28095
// sHack := true ;
28087: NOP4
28091: PUSH
28092: LD_INT 1
28094: ST_TO_ADDR
// if p3 = 10 then
28095: NOP4
28099: PUSH
28100: LD_INT 10
28102: EQUAL
28103: IFFALSE 28113
// sFire := true ;
28105: NOP4
28109: PUSH
28110: LD_INT 1
28112: ST_TO_ADDR
// if p3 = 11 then
28113: NOP4
28117: PUSH
28118: LD_INT 11
28120: EQUAL
28121: IFFALSE 28131
// sRefresh := true ;
28123: NOP4
28127: PUSH
28128: LD_INT 1
28130: ST_TO_ADDR
// if p3 = 12 then
28131: NOP4
28135: PUSH
28136: LD_INT 12
28138: EQUAL
28139: IFFALSE 28149
// sExp := true ;
28141: NOP4
28145: PUSH
28146: LD_INT 1
28148: ST_TO_ADDR
// if p3 = 13 then
28149: NOP4
28153: PUSH
28154: LD_INT 13
28156: EQUAL
28157: IFFALSE 28167
// sDepot := true ;
28159: NOP4
28163: PUSH
28164: LD_INT 1
28166: ST_TO_ADDR
// if p3 = 14 then
28167: NOP4
28171: PUSH
28172: LD_INT 14
28174: EQUAL
28175: IFFALSE 28185
// sFlag := true ;
28177: NOP4
28181: PUSH
28182: LD_INT 1
28184: ST_TO_ADDR
// if p3 = 15 then
28185: NOP4
28189: PUSH
28190: LD_INT 15
28192: EQUAL
28193: IFFALSE 28203
// sKamikadze := true ;
28195: NOP4
28199: PUSH
28200: LD_INT 1
28202: ST_TO_ADDR
// if p3 = 16 then
28203: NOP4
28207: PUSH
28208: LD_INT 16
28210: EQUAL
28211: IFFALSE 28221
// sTroll := true ;
28213: NOP4
28217: PUSH
28218: LD_INT 1
28220: ST_TO_ADDR
// if p3 = 17 then
28221: NOP4
28225: PUSH
28226: LD_INT 17
28228: EQUAL
28229: IFFALSE 28239
// sSlow := true ;
28231: NOP4
28235: PUSH
28236: LD_INT 1
28238: ST_TO_ADDR
// if p3 = 18 then
28239: NOP4
28243: PUSH
28244: LD_INT 18
28246: EQUAL
28247: IFFALSE 28257
// sLack := true ;
28249: NOP4
28253: PUSH
28254: LD_INT 1
28256: ST_TO_ADDR
// if p3 = 19 then
28257: NOP4
28261: PUSH
28262: LD_INT 19
28264: EQUAL
28265: IFFALSE 28275
// sTank := true ;
28267: NOP4
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// if p3 = 20 then
28275: NOP4
28279: PUSH
28280: LD_INT 20
28282: EQUAL
28283: IFFALSE 28293
// sRemote := true ;
28285: NOP4
28289: PUSH
28290: LD_INT 1
28292: ST_TO_ADDR
// if p3 = 21 then
28293: NOP4
28297: PUSH
28298: LD_INT 21
28300: EQUAL
28301: IFFALSE 28311
// sPowell := true ;
28303: NOP4
28307: PUSH
28308: LD_INT 1
28310: ST_TO_ADDR
// if p3 = 22 then
28311: NOP4
28315: PUSH
28316: LD_INT 22
28318: EQUAL
28319: IFFALSE 28329
// sTeleport := true ;
28321: NOP4
28325: PUSH
28326: LD_INT 1
28328: ST_TO_ADDR
// if p3 = 23 then
28329: NOP4
28333: PUSH
28334: LD_INT 23
28336: EQUAL
28337: IFFALSE 28347
// sOilTower := true ;
28339: NOP4
28343: PUSH
28344: LD_INT 1
28346: ST_TO_ADDR
// if p3 = 24 then
28347: NOP4
28351: PUSH
28352: LD_INT 24
28354: EQUAL
28355: IFFALSE 28365
// sShovel := true ;
28357: NOP4
28361: PUSH
28362: LD_INT 1
28364: ST_TO_ADDR
// if p3 = 25 then
28365: NOP4
28369: PUSH
28370: LD_INT 25
28372: EQUAL
28373: IFFALSE 28383
// sSheik := true ;
28375: NOP4
28379: PUSH
28380: LD_INT 1
28382: ST_TO_ADDR
// if p3 = 26 then
28383: NOP4
28387: PUSH
28388: LD_INT 26
28390: EQUAL
28391: IFFALSE 28401
// sEarthquake := true ;
28393: NOP4
28397: PUSH
28398: LD_INT 1
28400: ST_TO_ADDR
// if p3 = 27 then
28401: NOP4
28405: PUSH
28406: LD_INT 27
28408: EQUAL
28409: IFFALSE 28419
// sAI := true ;
28411: NOP4
28415: PUSH
28416: LD_INT 1
28418: ST_TO_ADDR
// if p3 = 28 then
28419: NOP4
28423: PUSH
28424: LD_INT 28
28426: EQUAL
28427: IFFALSE 28437
// sCargo := true ;
28429: NOP4
28433: PUSH
28434: LD_INT 1
28436: ST_TO_ADDR
// if p3 = 29 then
28437: NOP4
28441: PUSH
28442: LD_INT 29
28444: EQUAL
28445: IFFALSE 28455
// sDLaser := true ;
28447: NOP4
28451: PUSH
28452: LD_INT 1
28454: ST_TO_ADDR
// if p3 = 30 then
28455: NOP4
28459: PUSH
28460: LD_INT 30
28462: EQUAL
28463: IFFALSE 28473
// sExchange := true ;
28465: NOP4
28469: PUSH
28470: LD_INT 1
28472: ST_TO_ADDR
// if p3 = 31 then
28473: NOP4
28477: PUSH
28478: LD_INT 31
28480: EQUAL
28481: IFFALSE 28491
// sFac := true ;
28483: NOP4
28487: PUSH
28488: LD_INT 1
28490: ST_TO_ADDR
// if p3 = 32 then
28491: NOP4
28495: PUSH
28496: LD_INT 32
28498: EQUAL
28499: IFFALSE 28509
// sPower := true ;
28501: NOP4
28505: PUSH
28506: LD_INT 1
28508: ST_TO_ADDR
// if p3 = 33 then
28509: NOP4
28513: PUSH
28514: LD_INT 33
28516: EQUAL
28517: IFFALSE 28527
// sRandom := true ;
28519: NOP4
28523: PUSH
28524: LD_INT 1
28526: ST_TO_ADDR
// if p3 = 34 then
28527: NOP4
28531: PUSH
28532: LD_INT 34
28534: EQUAL
28535: IFFALSE 28545
// sShield := true ;
28537: NOP4
28541: PUSH
28542: LD_INT 1
28544: ST_TO_ADDR
// if p3 = 35 then
28545: NOP4
28549: PUSH
28550: LD_INT 35
28552: EQUAL
28553: IFFALSE 28563
// sTime := true ;
28555: NOP4
28559: PUSH
28560: LD_INT 1
28562: ST_TO_ADDR
// if p3 = 36 then
28563: NOP4
28567: PUSH
28568: LD_INT 36
28570: EQUAL
28571: IFFALSE 28581
// sTools := true ;
28573: NOP4
28577: PUSH
28578: LD_INT 1
28580: ST_TO_ADDR
// if p3 = 101 then
28581: NOP4
28585: PUSH
28586: LD_INT 101
28588: EQUAL
28589: IFFALSE 28599
// sSold := true ;
28591: NOP4
28595: PUSH
28596: LD_INT 1
28598: ST_TO_ADDR
// if p3 = 102 then
28599: NOP4
28603: PUSH
28604: LD_INT 102
28606: EQUAL
28607: IFFALSE 28617
// sDiff := true ;
28609: NOP4
28613: PUSH
28614: LD_INT 1
28616: ST_TO_ADDR
// if p3 = 103 then
28617: NOP4
28621: PUSH
28622: LD_INT 103
28624: EQUAL
28625: IFFALSE 28635
// sFog := true ;
28627: NOP4
28631: PUSH
28632: LD_INT 1
28634: ST_TO_ADDR
// if p3 = 104 then
28635: NOP4
28639: PUSH
28640: LD_INT 104
28642: EQUAL
28643: IFFALSE 28653
// sReset := true ;
28645: NOP4
28649: PUSH
28650: LD_INT 1
28652: ST_TO_ADDR
// if p3 = 105 then
28653: NOP4
28657: PUSH
28658: LD_INT 105
28660: EQUAL
28661: IFFALSE 28671
// sSun := true ;
28663: NOP4
28667: PUSH
28668: LD_INT 1
28670: ST_TO_ADDR
// if p3 = 106 then
28671: NOP4
28675: PUSH
28676: LD_INT 106
28678: EQUAL
28679: IFFALSE 28689
// sTiger := true ;
28681: NOP4
28685: PUSH
28686: LD_INT 1
28688: ST_TO_ADDR
// if p3 = 107 then
28689: NOP4
28693: PUSH
28694: LD_INT 107
28696: EQUAL
28697: IFFALSE 28707
// sBomb := true ;
28699: NOP4
28703: PUSH
28704: LD_INT 1
28706: ST_TO_ADDR
// if p3 = 108 then
28707: NOP4
28711: PUSH
28712: LD_INT 108
28714: EQUAL
28715: IFFALSE 28725
// sWound := true ;
28717: NOP4
28721: PUSH
28722: LD_INT 1
28724: ST_TO_ADDR
// if p3 = 109 then
28725: NOP4
28729: PUSH
28730: LD_INT 109
28732: EQUAL
28733: IFFALSE 28743
// sBetray := true ;
28735: NOP4
28739: PUSH
28740: LD_INT 1
28742: ST_TO_ADDR
// if p3 = 110 then
28743: NOP4
28747: PUSH
28748: LD_INT 110
28750: EQUAL
28751: IFFALSE 28761
// sContamin := true ;
28753: NOP4
28757: PUSH
28758: LD_INT 1
28760: ST_TO_ADDR
// if p3 = 111 then
28761: NOP4
28765: PUSH
28766: LD_INT 111
28768: EQUAL
28769: IFFALSE 28779
// sOil := true ;
28771: NOP4
28775: PUSH
28776: LD_INT 1
28778: ST_TO_ADDR
// if p3 = 112 then
28779: NOP4
28783: PUSH
28784: LD_INT 112
28786: EQUAL
28787: IFFALSE 28797
// sStu := true ;
28789: NOP4
28793: PUSH
28794: LD_INT 1
28796: ST_TO_ADDR
// if p3 = 113 then
28797: NOP4
28801: PUSH
28802: LD_INT 113
28804: EQUAL
28805: IFFALSE 28815
// sBazooka := true ;
28807: NOP4
28811: PUSH
28812: LD_INT 1
28814: ST_TO_ADDR
// if p3 = 114 then
28815: NOP4
28819: PUSH
28820: LD_INT 114
28822: EQUAL
28823: IFFALSE 28833
// sMortar := true ;
28825: NOP4
28829: PUSH
28830: LD_INT 1
28832: ST_TO_ADDR
// if p3 = 115 then
28833: NOP4
28837: PUSH
28838: LD_INT 115
28840: EQUAL
28841: IFFALSE 28851
// sRanger := true ;
28843: NOP4
28847: PUSH
28848: LD_INT 1
28850: ST_TO_ADDR
// end ; if p2 = 101 then
28851: NOP4
28855: PUSH
28856: LD_INT 101
28858: EQUAL
28859: IFFALSE 28987
// begin case p3 of 1 :
28861: NOP4
28865: PUSH
28866: LD_INT 1
28868: DOUBLE
28869: EQUAL
28870: IFTRUE 28874
28872: GO 28881
28874: POP
// hHackUnlimitedResources ; 2 :
28875: NOP4
28879: GO 28987
28881: LD_INT 2
28883: DOUBLE
28884: EQUAL
28885: IFTRUE 28889
28887: GO 28896
28889: POP
// hHackSetLevel10 ; 3 :
28890: NOP4
28894: GO 28987
28896: LD_INT 3
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28911
28904: POP
// hHackSetLevel10YourUnits ; 4 :
28905: NOP4
28909: GO 28987
28911: LD_INT 4
28913: DOUBLE
28914: EQUAL
28915: IFTRUE 28919
28917: GO 28926
28919: POP
// hHackInvincible ; 5 :
28920: NOP4
28924: GO 28987
28926: LD_INT 5
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28941
28934: POP
// hHackInvisible ; 6 :
28935: NOP4
28939: GO 28987
28941: LD_INT 6
28943: DOUBLE
28944: EQUAL
28945: IFTRUE 28949
28947: GO 28956
28949: POP
// hHackChangeYourSide ; 7 :
28950: NOP4
28954: GO 28987
28956: LD_INT 7
28958: DOUBLE
28959: EQUAL
28960: IFTRUE 28964
28962: GO 28971
28964: POP
// hHackChangeUnitSide ; 8 :
28965: NOP4
28969: GO 28987
28971: LD_INT 8
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 28979
28977: GO 28986
28979: POP
// hHackFog ; end ;
28980: NOP4
28984: GO 28987
28986: POP
// end ; end ;
28987: PPOPN 6
28989: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28990: GO 28992
28992: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28993: LD_STRING initStreamRollete();
28995: PPUSH
28996: NOP4
// InitStreamMode ;
29000: NOP4
// DefineStreamItems ( ) ;
29004: NOP4
// end ;
29008: END
// function InitStreamMode ; begin
29009: LD_INT 0
29011: PPUSH
// streamModeActive := false ;
29012: NOP4
29016: PUSH
29017: LD_INT 0
29019: ST_TO_ADDR
// normalCounter := 36 ;
29020: NOP4
29024: PUSH
29025: LD_INT 36
29027: ST_TO_ADDR
// hardcoreCounter := 16 ;
29028: NOP4
29032: PUSH
29033: LD_INT 16
29035: ST_TO_ADDR
// sRocket := false ;
29036: NOP4
29040: PUSH
29041: LD_INT 0
29043: ST_TO_ADDR
// sSpeed := false ;
29044: NOP4
29048: PUSH
29049: LD_INT 0
29051: ST_TO_ADDR
// sEngine := false ;
29052: NOP4
29056: PUSH
29057: LD_INT 0
29059: ST_TO_ADDR
// sSpec := false ;
29060: NOP4
29064: PUSH
29065: LD_INT 0
29067: ST_TO_ADDR
// sLevel := false ;
29068: NOP4
29072: PUSH
29073: LD_INT 0
29075: ST_TO_ADDR
// sArmoury := false ;
29076: NOP4
29080: PUSH
29081: LD_INT 0
29083: ST_TO_ADDR
// sRadar := false ;
29084: NOP4
29088: PUSH
29089: LD_INT 0
29091: ST_TO_ADDR
// sBunker := false ;
29092: NOP4
29096: PUSH
29097: LD_INT 0
29099: ST_TO_ADDR
// sHack := false ;
29100: NOP4
29104: PUSH
29105: LD_INT 0
29107: ST_TO_ADDR
// sFire := false ;
29108: NOP4
29112: PUSH
29113: LD_INT 0
29115: ST_TO_ADDR
// sRefresh := false ;
29116: NOP4
29120: PUSH
29121: LD_INT 0
29123: ST_TO_ADDR
// sExp := false ;
29124: NOP4
29128: PUSH
29129: LD_INT 0
29131: ST_TO_ADDR
// sDepot := false ;
29132: NOP4
29136: PUSH
29137: LD_INT 0
29139: ST_TO_ADDR
// sFlag := false ;
29140: NOP4
29144: PUSH
29145: LD_INT 0
29147: ST_TO_ADDR
// sKamikadze := false ;
29148: NOP4
29152: PUSH
29153: LD_INT 0
29155: ST_TO_ADDR
// sTroll := false ;
29156: NOP4
29160: PUSH
29161: LD_INT 0
29163: ST_TO_ADDR
// sSlow := false ;
29164: NOP4
29168: PUSH
29169: LD_INT 0
29171: ST_TO_ADDR
// sLack := false ;
29172: NOP4
29176: PUSH
29177: LD_INT 0
29179: ST_TO_ADDR
// sTank := false ;
29180: NOP4
29184: PUSH
29185: LD_INT 0
29187: ST_TO_ADDR
// sRemote := false ;
29188: NOP4
29192: PUSH
29193: LD_INT 0
29195: ST_TO_ADDR
// sPowell := false ;
29196: NOP4
29200: PUSH
29201: LD_INT 0
29203: ST_TO_ADDR
// sTeleport := false ;
29204: NOP4
29208: PUSH
29209: LD_INT 0
29211: ST_TO_ADDR
// sOilTower := false ;
29212: NOP4
29216: PUSH
29217: LD_INT 0
29219: ST_TO_ADDR
// sShovel := false ;
29220: NOP4
29224: PUSH
29225: LD_INT 0
29227: ST_TO_ADDR
// sSheik := false ;
29228: NOP4
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// sEarthquake := false ;
29236: NOP4
29240: PUSH
29241: LD_INT 0
29243: ST_TO_ADDR
// sAI := false ;
29244: NOP4
29248: PUSH
29249: LD_INT 0
29251: ST_TO_ADDR
// sCargo := false ;
29252: NOP4
29256: PUSH
29257: LD_INT 0
29259: ST_TO_ADDR
// sDLaser := false ;
29260: NOP4
29264: PUSH
29265: LD_INT 0
29267: ST_TO_ADDR
// sExchange := false ;
29268: NOP4
29272: PUSH
29273: LD_INT 0
29275: ST_TO_ADDR
// sFac := false ;
29276: NOP4
29280: PUSH
29281: LD_INT 0
29283: ST_TO_ADDR
// sPower := false ;
29284: NOP4
29288: PUSH
29289: LD_INT 0
29291: ST_TO_ADDR
// sRandom := false ;
29292: NOP4
29296: PUSH
29297: LD_INT 0
29299: ST_TO_ADDR
// sShield := false ;
29300: NOP4
29304: PUSH
29305: LD_INT 0
29307: ST_TO_ADDR
// sTime := false ;
29308: NOP4
29312: PUSH
29313: LD_INT 0
29315: ST_TO_ADDR
// sTools := false ;
29316: NOP4
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
// sSold := false ;
29324: NOP4
29328: PUSH
29329: LD_INT 0
29331: ST_TO_ADDR
// sDiff := false ;
29332: NOP4
29336: PUSH
29337: LD_INT 0
29339: ST_TO_ADDR
// sFog := false ;
29340: NOP4
29344: PUSH
29345: LD_INT 0
29347: ST_TO_ADDR
// sReset := false ;
29348: NOP4
29352: PUSH
29353: LD_INT 0
29355: ST_TO_ADDR
// sSun := false ;
29356: NOP4
29360: PUSH
29361: LD_INT 0
29363: ST_TO_ADDR
// sTiger := false ;
29364: NOP4
29368: PUSH
29369: LD_INT 0
29371: ST_TO_ADDR
// sBomb := false ;
29372: NOP4
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// sWound := false ;
29380: NOP4
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// sBetray := false ;
29388: NOP4
29392: PUSH
29393: LD_INT 0
29395: ST_TO_ADDR
// sContamin := false ;
29396: NOP4
29400: PUSH
29401: LD_INT 0
29403: ST_TO_ADDR
// sOil := false ;
29404: NOP4
29408: PUSH
29409: LD_INT 0
29411: ST_TO_ADDR
// sStu := false ;
29412: NOP4
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
// sBazooka := false ;
29420: NOP4
29424: PUSH
29425: LD_INT 0
29427: ST_TO_ADDR
// sMortar := false ;
29428: NOP4
29432: PUSH
29433: LD_INT 0
29435: ST_TO_ADDR
// sRanger := false ;
29436: NOP4
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
// end ;
29444: LD_VAR 0 1
29448: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
29449: LD_INT 0
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
// result := [ ] ;
29456: NOP4
29460: PUSH
29461: EMPTY
29462: ST_TO_ADDR
// if campaign_id = 1 then
29463: NOP4
29467: PUSH
29468: LD_INT 1
29470: EQUAL
29471: IFFALSE 32409
// begin case mission_number of 1 :
29473: NOP4
29477: PUSH
29478: LD_INT 1
29480: DOUBLE
29481: EQUAL
29482: IFTRUE 29486
29484: GO 29550
29486: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
29487: NOP4
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: LD_INT 4
29497: PUSH
29498: LD_INT 11
29500: PUSH
29501: LD_INT 12
29503: PUSH
29504: LD_INT 15
29506: PUSH
29507: LD_INT 16
29509: PUSH
29510: LD_INT 22
29512: PUSH
29513: LD_INT 23
29515: PUSH
29516: LD_INT 26
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 101
29532: PUSH
29533: LD_INT 102
29535: PUSH
29536: LD_INT 106
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: ST_TO_ADDR
29548: GO 32407
29550: LD_INT 2
29552: DOUBLE
29553: EQUAL
29554: IFTRUE 29558
29556: GO 29630
29558: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
29559: NOP4
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: LD_INT 4
29569: PUSH
29570: LD_INT 11
29572: PUSH
29573: LD_INT 12
29575: PUSH
29576: LD_INT 15
29578: PUSH
29579: LD_INT 16
29581: PUSH
29582: LD_INT 22
29584: PUSH
29585: LD_INT 23
29587: PUSH
29588: LD_INT 26
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 101
29604: PUSH
29605: LD_INT 102
29607: PUSH
29608: LD_INT 105
29610: PUSH
29611: LD_INT 106
29613: PUSH
29614: LD_INT 108
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: ST_TO_ADDR
29628: GO 32407
29630: LD_INT 3
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 29714
29638: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
29639: NOP4
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 4
29649: PUSH
29650: LD_INT 5
29652: PUSH
29653: LD_INT 11
29655: PUSH
29656: LD_INT 12
29658: PUSH
29659: LD_INT 15
29661: PUSH
29662: LD_INT 16
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_INT 26
29670: PUSH
29671: LD_INT 36
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 101
29688: PUSH
29689: LD_INT 102
29691: PUSH
29692: LD_INT 105
29694: PUSH
29695: LD_INT 106
29697: PUSH
29698: LD_INT 108
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: ST_TO_ADDR
29712: GO 32407
29714: LD_INT 4
29716: DOUBLE
29717: EQUAL
29718: IFTRUE 29722
29720: GO 29806
29722: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
29723: NOP4
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 4
29733: PUSH
29734: LD_INT 5
29736: PUSH
29737: LD_INT 8
29739: PUSH
29740: LD_INT 11
29742: PUSH
29743: LD_INT 12
29745: PUSH
29746: LD_INT 15
29748: PUSH
29749: LD_INT 16
29751: PUSH
29752: LD_INT 22
29754: PUSH
29755: LD_INT 23
29757: PUSH
29758: LD_INT 26
29760: PUSH
29761: LD_INT 36
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 101
29780: PUSH
29781: LD_INT 102
29783: PUSH
29784: LD_INT 105
29786: PUSH
29787: LD_INT 106
29789: PUSH
29790: LD_INT 108
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: ST_TO_ADDR
29804: GO 32407
29806: LD_INT 5
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29914
29814: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29815: NOP4
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 4
29825: PUSH
29826: LD_INT 5
29828: PUSH
29829: LD_INT 6
29831: PUSH
29832: LD_INT 8
29834: PUSH
29835: LD_INT 11
29837: PUSH
29838: LD_INT 12
29840: PUSH
29841: LD_INT 15
29843: PUSH
29844: LD_INT 16
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_INT 23
29852: PUSH
29853: LD_INT 25
29855: PUSH
29856: LD_INT 26
29858: PUSH
29859: LD_INT 36
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 101
29880: PUSH
29881: LD_INT 102
29883: PUSH
29884: LD_INT 105
29886: PUSH
29887: LD_INT 106
29889: PUSH
29890: LD_INT 108
29892: PUSH
29893: LD_INT 109
29895: PUSH
29896: LD_INT 112
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: ST_TO_ADDR
29912: GO 32407
29914: LD_INT 6
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 30042
29922: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29923: NOP4
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 4
29933: PUSH
29934: LD_INT 5
29936: PUSH
29937: LD_INT 6
29939: PUSH
29940: LD_INT 8
29942: PUSH
29943: LD_INT 11
29945: PUSH
29946: LD_INT 12
29948: PUSH
29949: LD_INT 15
29951: PUSH
29952: LD_INT 16
29954: PUSH
29955: LD_INT 20
29957: PUSH
29958: LD_INT 21
29960: PUSH
29961: LD_INT 22
29963: PUSH
29964: LD_INT 23
29966: PUSH
29967: LD_INT 25
29969: PUSH
29970: LD_INT 26
29972: PUSH
29973: LD_INT 30
29975: PUSH
29976: LD_INT 31
29978: PUSH
29979: LD_INT 32
29981: PUSH
29982: LD_INT 36
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 101
30008: PUSH
30009: LD_INT 102
30011: PUSH
30012: LD_INT 105
30014: PUSH
30015: LD_INT 106
30017: PUSH
30018: LD_INT 108
30020: PUSH
30021: LD_INT 109
30023: PUSH
30024: LD_INT 112
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: ST_TO_ADDR
30040: GO 32407
30042: LD_INT 7
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30150
30050: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
30051: NOP4
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 4
30061: PUSH
30062: LD_INT 5
30064: PUSH
30065: LD_INT 7
30067: PUSH
30068: LD_INT 11
30070: PUSH
30071: LD_INT 12
30073: PUSH
30074: LD_INT 15
30076: PUSH
30077: LD_INT 16
30079: PUSH
30080: LD_INT 20
30082: PUSH
30083: LD_INT 21
30085: PUSH
30086: LD_INT 22
30088: PUSH
30089: LD_INT 23
30091: PUSH
30092: LD_INT 25
30094: PUSH
30095: LD_INT 26
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 101
30116: PUSH
30117: LD_INT 102
30119: PUSH
30120: LD_INT 103
30122: PUSH
30123: LD_INT 105
30125: PUSH
30126: LD_INT 106
30128: PUSH
30129: LD_INT 108
30131: PUSH
30132: LD_INT 112
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: ST_TO_ADDR
30148: GO 32407
30150: LD_INT 8
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30286
30158: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
30159: NOP4
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: LD_INT 4
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: LD_INT 7
30178: PUSH
30179: LD_INT 8
30181: PUSH
30182: LD_INT 11
30184: PUSH
30185: LD_INT 12
30187: PUSH
30188: LD_INT 15
30190: PUSH
30191: LD_INT 16
30193: PUSH
30194: LD_INT 20
30196: PUSH
30197: LD_INT 21
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_INT 23
30205: PUSH
30206: LD_INT 25
30208: PUSH
30209: LD_INT 26
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 31
30217: PUSH
30218: LD_INT 32
30220: PUSH
30221: LD_INT 36
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 101
30248: PUSH
30249: LD_INT 102
30251: PUSH
30252: LD_INT 103
30254: PUSH
30255: LD_INT 105
30257: PUSH
30258: LD_INT 106
30260: PUSH
30261: LD_INT 108
30263: PUSH
30264: LD_INT 109
30266: PUSH
30267: LD_INT 112
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: ST_TO_ADDR
30284: GO 32407
30286: LD_INT 9
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30430
30294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
30295: NOP4
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 4
30305: PUSH
30306: LD_INT 5
30308: PUSH
30309: LD_INT 6
30311: PUSH
30312: LD_INT 7
30314: PUSH
30315: LD_INT 8
30317: PUSH
30318: LD_INT 11
30320: PUSH
30321: LD_INT 12
30323: PUSH
30324: LD_INT 15
30326: PUSH
30327: LD_INT 16
30329: PUSH
30330: LD_INT 20
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 23
30341: PUSH
30342: LD_INT 25
30344: PUSH
30345: LD_INT 26
30347: PUSH
30348: LD_INT 28
30350: PUSH
30351: LD_INT 30
30353: PUSH
30354: LD_INT 31
30356: PUSH
30357: LD_INT 32
30359: PUSH
30360: LD_INT 36
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 101
30388: PUSH
30389: LD_INT 102
30391: PUSH
30392: LD_INT 103
30394: PUSH
30395: LD_INT 105
30397: PUSH
30398: LD_INT 106
30400: PUSH
30401: LD_INT 108
30403: PUSH
30404: LD_INT 109
30406: PUSH
30407: LD_INT 112
30409: PUSH
30410: LD_INT 114
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: ST_TO_ADDR
30428: GO 32407
30430: LD_INT 10
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30622
30438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
30439: NOP4
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: LD_INT 6
30455: PUSH
30456: LD_INT 7
30458: PUSH
30459: LD_INT 8
30461: PUSH
30462: LD_INT 9
30464: PUSH
30465: LD_INT 10
30467: PUSH
30468: LD_INT 11
30470: PUSH
30471: LD_INT 12
30473: PUSH
30474: LD_INT 13
30476: PUSH
30477: LD_INT 14
30479: PUSH
30480: LD_INT 15
30482: PUSH
30483: LD_INT 16
30485: PUSH
30486: LD_INT 17
30488: PUSH
30489: LD_INT 18
30491: PUSH
30492: LD_INT 19
30494: PUSH
30495: LD_INT 20
30497: PUSH
30498: LD_INT 21
30500: PUSH
30501: LD_INT 22
30503: PUSH
30504: LD_INT 23
30506: PUSH
30507: LD_INT 24
30509: PUSH
30510: LD_INT 25
30512: PUSH
30513: LD_INT 26
30515: PUSH
30516: LD_INT 28
30518: PUSH
30519: LD_INT 30
30521: PUSH
30522: LD_INT 31
30524: PUSH
30525: LD_INT 32
30527: PUSH
30528: LD_INT 36
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 101
30564: PUSH
30565: LD_INT 102
30567: PUSH
30568: LD_INT 103
30570: PUSH
30571: LD_INT 104
30573: PUSH
30574: LD_INT 105
30576: PUSH
30577: LD_INT 106
30579: PUSH
30580: LD_INT 107
30582: PUSH
30583: LD_INT 108
30585: PUSH
30586: LD_INT 109
30588: PUSH
30589: LD_INT 110
30591: PUSH
30592: LD_INT 111
30594: PUSH
30595: LD_INT 112
30597: PUSH
30598: LD_INT 114
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: ST_TO_ADDR
30620: GO 32407
30622: LD_INT 11
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30822
30630: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
30631: NOP4
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: LD_INT 3
30641: PUSH
30642: LD_INT 4
30644: PUSH
30645: LD_INT 5
30647: PUSH
30648: LD_INT 6
30650: PUSH
30651: LD_INT 7
30653: PUSH
30654: LD_INT 8
30656: PUSH
30657: LD_INT 9
30659: PUSH
30660: LD_INT 10
30662: PUSH
30663: LD_INT 11
30665: PUSH
30666: LD_INT 12
30668: PUSH
30669: LD_INT 13
30671: PUSH
30672: LD_INT 14
30674: PUSH
30675: LD_INT 15
30677: PUSH
30678: LD_INT 16
30680: PUSH
30681: LD_INT 17
30683: PUSH
30684: LD_INT 18
30686: PUSH
30687: LD_INT 19
30689: PUSH
30690: LD_INT 20
30692: PUSH
30693: LD_INT 21
30695: PUSH
30696: LD_INT 22
30698: PUSH
30699: LD_INT 23
30701: PUSH
30702: LD_INT 24
30704: PUSH
30705: LD_INT 25
30707: PUSH
30708: LD_INT 26
30710: PUSH
30711: LD_INT 28
30713: PUSH
30714: LD_INT 30
30716: PUSH
30717: LD_INT 31
30719: PUSH
30720: LD_INT 32
30722: PUSH
30723: LD_INT 34
30725: PUSH
30726: LD_INT 36
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 101
30764: PUSH
30765: LD_INT 102
30767: PUSH
30768: LD_INT 103
30770: PUSH
30771: LD_INT 104
30773: PUSH
30774: LD_INT 105
30776: PUSH
30777: LD_INT 106
30779: PUSH
30780: LD_INT 107
30782: PUSH
30783: LD_INT 108
30785: PUSH
30786: LD_INT 109
30788: PUSH
30789: LD_INT 110
30791: PUSH
30792: LD_INT 111
30794: PUSH
30795: LD_INT 112
30797: PUSH
30798: LD_INT 114
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: ST_TO_ADDR
30820: GO 32407
30822: LD_INT 12
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 31038
30830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30831: NOP4
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 4
30847: PUSH
30848: LD_INT 5
30850: PUSH
30851: LD_INT 6
30853: PUSH
30854: LD_INT 7
30856: PUSH
30857: LD_INT 8
30859: PUSH
30860: LD_INT 9
30862: PUSH
30863: LD_INT 10
30865: PUSH
30866: LD_INT 11
30868: PUSH
30869: LD_INT 12
30871: PUSH
30872: LD_INT 13
30874: PUSH
30875: LD_INT 14
30877: PUSH
30878: LD_INT 15
30880: PUSH
30881: LD_INT 16
30883: PUSH
30884: LD_INT 17
30886: PUSH
30887: LD_INT 18
30889: PUSH
30890: LD_INT 19
30892: PUSH
30893: LD_INT 20
30895: PUSH
30896: LD_INT 21
30898: PUSH
30899: LD_INT 22
30901: PUSH
30902: LD_INT 23
30904: PUSH
30905: LD_INT 24
30907: PUSH
30908: LD_INT 25
30910: PUSH
30911: LD_INT 26
30913: PUSH
30914: LD_INT 27
30916: PUSH
30917: LD_INT 28
30919: PUSH
30920: LD_INT 30
30922: PUSH
30923: LD_INT 31
30925: PUSH
30926: LD_INT 32
30928: PUSH
30929: LD_INT 33
30931: PUSH
30932: LD_INT 34
30934: PUSH
30935: LD_INT 36
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 101
30976: PUSH
30977: LD_INT 102
30979: PUSH
30980: LD_INT 103
30982: PUSH
30983: LD_INT 104
30985: PUSH
30986: LD_INT 105
30988: PUSH
30989: LD_INT 106
30991: PUSH
30992: LD_INT 107
30994: PUSH
30995: LD_INT 108
30997: PUSH
30998: LD_INT 109
31000: PUSH
31001: LD_INT 110
31003: PUSH
31004: LD_INT 111
31006: PUSH
31007: LD_INT 112
31009: PUSH
31010: LD_INT 113
31012: PUSH
31013: LD_INT 114
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: ST_TO_ADDR
31036: GO 32407
31038: LD_INT 13
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31242
31046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
31047: NOP4
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 3
31060: PUSH
31061: LD_INT 4
31063: PUSH
31064: LD_INT 5
31066: PUSH
31067: LD_INT 8
31069: PUSH
31070: LD_INT 9
31072: PUSH
31073: LD_INT 10
31075: PUSH
31076: LD_INT 11
31078: PUSH
31079: LD_INT 12
31081: PUSH
31082: LD_INT 14
31084: PUSH
31085: LD_INT 15
31087: PUSH
31088: LD_INT 16
31090: PUSH
31091: LD_INT 17
31093: PUSH
31094: LD_INT 18
31096: PUSH
31097: LD_INT 19
31099: PUSH
31100: LD_INT 20
31102: PUSH
31103: LD_INT 21
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_INT 23
31111: PUSH
31112: LD_INT 24
31114: PUSH
31115: LD_INT 25
31117: PUSH
31118: LD_INT 26
31120: PUSH
31121: LD_INT 27
31123: PUSH
31124: LD_INT 28
31126: PUSH
31127: LD_INT 30
31129: PUSH
31130: LD_INT 31
31132: PUSH
31133: LD_INT 32
31135: PUSH
31136: LD_INT 33
31138: PUSH
31139: LD_INT 34
31141: PUSH
31142: LD_INT 36
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 101
31180: PUSH
31181: LD_INT 102
31183: PUSH
31184: LD_INT 103
31186: PUSH
31187: LD_INT 104
31189: PUSH
31190: LD_INT 105
31192: PUSH
31193: LD_INT 106
31195: PUSH
31196: LD_INT 107
31198: PUSH
31199: LD_INT 108
31201: PUSH
31202: LD_INT 109
31204: PUSH
31205: LD_INT 110
31207: PUSH
31208: LD_INT 111
31210: PUSH
31211: LD_INT 112
31213: PUSH
31214: LD_INT 113
31216: PUSH
31217: LD_INT 114
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: ST_TO_ADDR
31240: GO 32407
31242: LD_INT 14
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31462
31250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
31251: NOP4
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 4
31267: PUSH
31268: LD_INT 5
31270: PUSH
31271: LD_INT 6
31273: PUSH
31274: LD_INT 7
31276: PUSH
31277: LD_INT 8
31279: PUSH
31280: LD_INT 9
31282: PUSH
31283: LD_INT 10
31285: PUSH
31286: LD_INT 11
31288: PUSH
31289: LD_INT 12
31291: PUSH
31292: LD_INT 13
31294: PUSH
31295: LD_INT 14
31297: PUSH
31298: LD_INT 15
31300: PUSH
31301: LD_INT 16
31303: PUSH
31304: LD_INT 17
31306: PUSH
31307: LD_INT 18
31309: PUSH
31310: LD_INT 19
31312: PUSH
31313: LD_INT 20
31315: PUSH
31316: LD_INT 21
31318: PUSH
31319: LD_INT 22
31321: PUSH
31322: LD_INT 23
31324: PUSH
31325: LD_INT 24
31327: PUSH
31328: LD_INT 25
31330: PUSH
31331: LD_INT 26
31333: PUSH
31334: LD_INT 27
31336: PUSH
31337: LD_INT 28
31339: PUSH
31340: LD_INT 29
31342: PUSH
31343: LD_INT 30
31345: PUSH
31346: LD_INT 31
31348: PUSH
31349: LD_INT 32
31351: PUSH
31352: LD_INT 33
31354: PUSH
31355: LD_INT 34
31357: PUSH
31358: LD_INT 36
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 101
31400: PUSH
31401: LD_INT 102
31403: PUSH
31404: LD_INT 103
31406: PUSH
31407: LD_INT 104
31409: PUSH
31410: LD_INT 105
31412: PUSH
31413: LD_INT 106
31415: PUSH
31416: LD_INT 107
31418: PUSH
31419: LD_INT 108
31421: PUSH
31422: LD_INT 109
31424: PUSH
31425: LD_INT 110
31427: PUSH
31428: LD_INT 111
31430: PUSH
31431: LD_INT 112
31433: PUSH
31434: LD_INT 113
31436: PUSH
31437: LD_INT 114
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: ST_TO_ADDR
31460: GO 32407
31462: LD_INT 15
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31682
31470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
31471: NOP4
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: LD_INT 4
31487: PUSH
31488: LD_INT 5
31490: PUSH
31491: LD_INT 6
31493: PUSH
31494: LD_INT 7
31496: PUSH
31497: LD_INT 8
31499: PUSH
31500: LD_INT 9
31502: PUSH
31503: LD_INT 10
31505: PUSH
31506: LD_INT 11
31508: PUSH
31509: LD_INT 12
31511: PUSH
31512: LD_INT 13
31514: PUSH
31515: LD_INT 14
31517: PUSH
31518: LD_INT 15
31520: PUSH
31521: LD_INT 16
31523: PUSH
31524: LD_INT 17
31526: PUSH
31527: LD_INT 18
31529: PUSH
31530: LD_INT 19
31532: PUSH
31533: LD_INT 20
31535: PUSH
31536: LD_INT 21
31538: PUSH
31539: LD_INT 22
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 24
31547: PUSH
31548: LD_INT 25
31550: PUSH
31551: LD_INT 26
31553: PUSH
31554: LD_INT 27
31556: PUSH
31557: LD_INT 28
31559: PUSH
31560: LD_INT 29
31562: PUSH
31563: LD_INT 30
31565: PUSH
31566: LD_INT 31
31568: PUSH
31569: LD_INT 32
31571: PUSH
31572: LD_INT 33
31574: PUSH
31575: LD_INT 34
31577: PUSH
31578: LD_INT 36
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 101
31620: PUSH
31621: LD_INT 102
31623: PUSH
31624: LD_INT 103
31626: PUSH
31627: LD_INT 104
31629: PUSH
31630: LD_INT 105
31632: PUSH
31633: LD_INT 106
31635: PUSH
31636: LD_INT 107
31638: PUSH
31639: LD_INT 108
31641: PUSH
31642: LD_INT 109
31644: PUSH
31645: LD_INT 110
31647: PUSH
31648: LD_INT 111
31650: PUSH
31651: LD_INT 112
31653: PUSH
31654: LD_INT 113
31656: PUSH
31657: LD_INT 114
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: ST_TO_ADDR
31680: GO 32407
31682: LD_INT 16
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31814
31690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
31691: NOP4
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: LD_INT 5
31704: PUSH
31705: LD_INT 7
31707: PUSH
31708: LD_INT 11
31710: PUSH
31711: LD_INT 12
31713: PUSH
31714: LD_INT 15
31716: PUSH
31717: LD_INT 16
31719: PUSH
31720: LD_INT 20
31722: PUSH
31723: LD_INT 21
31725: PUSH
31726: LD_INT 22
31728: PUSH
31729: LD_INT 23
31731: PUSH
31732: LD_INT 25
31734: PUSH
31735: LD_INT 26
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 31
31743: PUSH
31744: LD_INT 32
31746: PUSH
31747: LD_INT 33
31749: PUSH
31750: LD_INT 34
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 101
31776: PUSH
31777: LD_INT 102
31779: PUSH
31780: LD_INT 103
31782: PUSH
31783: LD_INT 106
31785: PUSH
31786: LD_INT 108
31788: PUSH
31789: LD_INT 112
31791: PUSH
31792: LD_INT 113
31794: PUSH
31795: LD_INT 114
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: ST_TO_ADDR
31812: GO 32407
31814: LD_INT 17
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31822
31820: GO 32034
31822: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31823: NOP4
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 3
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: LD_INT 5
31842: PUSH
31843: LD_INT 6
31845: PUSH
31846: LD_INT 7
31848: PUSH
31849: LD_INT 8
31851: PUSH
31852: LD_INT 9
31854: PUSH
31855: LD_INT 10
31857: PUSH
31858: LD_INT 11
31860: PUSH
31861: LD_INT 12
31863: PUSH
31864: LD_INT 13
31866: PUSH
31867: LD_INT 14
31869: PUSH
31870: LD_INT 15
31872: PUSH
31873: LD_INT 16
31875: PUSH
31876: LD_INT 17
31878: PUSH
31879: LD_INT 18
31881: PUSH
31882: LD_INT 19
31884: PUSH
31885: LD_INT 20
31887: PUSH
31888: LD_INT 21
31890: PUSH
31891: LD_INT 22
31893: PUSH
31894: LD_INT 23
31896: PUSH
31897: LD_INT 24
31899: PUSH
31900: LD_INT 25
31902: PUSH
31903: LD_INT 26
31905: PUSH
31906: LD_INT 27
31908: PUSH
31909: LD_INT 28
31911: PUSH
31912: LD_INT 29
31914: PUSH
31915: LD_INT 30
31917: PUSH
31918: LD_INT 31
31920: PUSH
31921: LD_INT 32
31923: PUSH
31924: LD_INT 33
31926: PUSH
31927: LD_INT 34
31929: PUSH
31930: LD_INT 36
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 101
31972: PUSH
31973: LD_INT 102
31975: PUSH
31976: LD_INT 103
31978: PUSH
31979: LD_INT 104
31981: PUSH
31982: LD_INT 105
31984: PUSH
31985: LD_INT 106
31987: PUSH
31988: LD_INT 107
31990: PUSH
31991: LD_INT 108
31993: PUSH
31994: LD_INT 109
31996: PUSH
31997: LD_INT 110
31999: PUSH
32000: LD_INT 111
32002: PUSH
32003: LD_INT 112
32005: PUSH
32006: LD_INT 113
32008: PUSH
32009: LD_INT 114
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32407
32034: LD_INT 18
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32178
32042: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
32043: NOP4
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: LD_INT 5
32056: PUSH
32057: LD_INT 7
32059: PUSH
32060: LD_INT 11
32062: PUSH
32063: LD_INT 12
32065: PUSH
32066: LD_INT 15
32068: PUSH
32069: LD_INT 16
32071: PUSH
32072: LD_INT 20
32074: PUSH
32075: LD_INT 21
32077: PUSH
32078: LD_INT 22
32080: PUSH
32081: LD_INT 23
32083: PUSH
32084: LD_INT 25
32086: PUSH
32087: LD_INT 26
32089: PUSH
32090: LD_INT 30
32092: PUSH
32093: LD_INT 31
32095: PUSH
32096: LD_INT 32
32098: PUSH
32099: LD_INT 33
32101: PUSH
32102: LD_INT 34
32104: PUSH
32105: LD_INT 35
32107: PUSH
32108: LD_INT 36
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 101
32136: PUSH
32137: LD_INT 102
32139: PUSH
32140: LD_INT 103
32142: PUSH
32143: LD_INT 106
32145: PUSH
32146: LD_INT 108
32148: PUSH
32149: LD_INT 112
32151: PUSH
32152: LD_INT 113
32154: PUSH
32155: LD_INT 114
32157: PUSH
32158: LD_INT 115
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: ST_TO_ADDR
32176: GO 32407
32178: LD_INT 19
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32406
32186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
32187: NOP4
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: LD_INT 6
32209: PUSH
32210: LD_INT 7
32212: PUSH
32213: LD_INT 8
32215: PUSH
32216: LD_INT 9
32218: PUSH
32219: LD_INT 10
32221: PUSH
32222: LD_INT 11
32224: PUSH
32225: LD_INT 12
32227: PUSH
32228: LD_INT 13
32230: PUSH
32231: LD_INT 14
32233: PUSH
32234: LD_INT 15
32236: PUSH
32237: LD_INT 16
32239: PUSH
32240: LD_INT 17
32242: PUSH
32243: LD_INT 18
32245: PUSH
32246: LD_INT 19
32248: PUSH
32249: LD_INT 20
32251: PUSH
32252: LD_INT 21
32254: PUSH
32255: LD_INT 22
32257: PUSH
32258: LD_INT 23
32260: PUSH
32261: LD_INT 24
32263: PUSH
32264: LD_INT 25
32266: PUSH
32267: LD_INT 26
32269: PUSH
32270: LD_INT 27
32272: PUSH
32273: LD_INT 28
32275: PUSH
32276: LD_INT 29
32278: PUSH
32279: LD_INT 30
32281: PUSH
32282: LD_INT 31
32284: PUSH
32285: LD_INT 32
32287: PUSH
32288: LD_INT 33
32290: PUSH
32291: LD_INT 34
32293: PUSH
32294: LD_INT 35
32296: PUSH
32297: LD_INT 36
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 101
32340: PUSH
32341: LD_INT 102
32343: PUSH
32344: LD_INT 103
32346: PUSH
32347: LD_INT 104
32349: PUSH
32350: LD_INT 105
32352: PUSH
32353: LD_INT 106
32355: PUSH
32356: LD_INT 107
32358: PUSH
32359: LD_INT 108
32361: PUSH
32362: LD_INT 109
32364: PUSH
32365: LD_INT 110
32367: PUSH
32368: LD_INT 111
32370: PUSH
32371: LD_INT 112
32373: PUSH
32374: LD_INT 113
32376: PUSH
32377: LD_INT 114
32379: PUSH
32380: LD_INT 115
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: ST_TO_ADDR
32404: GO 32407
32406: POP
// end else
32407: GO 32626
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
32409: NOP4
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: LD_INT 4
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: LD_INT 6
32431: PUSH
32432: LD_INT 7
32434: PUSH
32435: LD_INT 8
32437: PUSH
32438: LD_INT 9
32440: PUSH
32441: LD_INT 10
32443: PUSH
32444: LD_INT 11
32446: PUSH
32447: LD_INT 12
32449: PUSH
32450: LD_INT 13
32452: PUSH
32453: LD_INT 14
32455: PUSH
32456: LD_INT 15
32458: PUSH
32459: LD_INT 16
32461: PUSH
32462: LD_INT 17
32464: PUSH
32465: LD_INT 18
32467: PUSH
32468: LD_INT 19
32470: PUSH
32471: LD_INT 20
32473: PUSH
32474: LD_INT 21
32476: PUSH
32477: LD_INT 22
32479: PUSH
32480: LD_INT 23
32482: PUSH
32483: LD_INT 24
32485: PUSH
32486: LD_INT 25
32488: PUSH
32489: LD_INT 26
32491: PUSH
32492: LD_INT 27
32494: PUSH
32495: LD_INT 28
32497: PUSH
32498: LD_INT 29
32500: PUSH
32501: LD_INT 30
32503: PUSH
32504: LD_INT 31
32506: PUSH
32507: LD_INT 32
32509: PUSH
32510: LD_INT 33
32512: PUSH
32513: LD_INT 34
32515: PUSH
32516: LD_INT 35
32518: PUSH
32519: LD_INT 36
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 101
32562: PUSH
32563: LD_INT 102
32565: PUSH
32566: LD_INT 103
32568: PUSH
32569: LD_INT 104
32571: PUSH
32572: LD_INT 105
32574: PUSH
32575: LD_INT 106
32577: PUSH
32578: LD_INT 107
32580: PUSH
32581: LD_INT 108
32583: PUSH
32584: LD_INT 109
32586: PUSH
32587: LD_INT 110
32589: PUSH
32590: LD_INT 111
32592: PUSH
32593: LD_INT 112
32595: PUSH
32596: LD_INT 113
32598: PUSH
32599: LD_INT 114
32601: PUSH
32602: LD_INT 115
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// if result then
32626: NOP4
32630: IFFALSE 32919
// begin normal :=  ;
32632: NOP4
32636: PUSH
32637: LD_STRING 
32639: ST_TO_ADDR
// hardcore :=  ;
32640: NOP4
32644: PUSH
32645: LD_STRING 
32647: ST_TO_ADDR
// for i = 1 to normalCounter do
32648: NOP4
32652: PUSH
32653: DOUBLE
32654: LD_INT 1
32656: DEC
32657: ST_TO_ADDR
32658: NOP4
32662: PUSH
32663: FOR_TO
32664: IFFALSE 32765
// begin tmp := 0 ;
32666: NOP4
32670: PUSH
32671: LD_STRING 0
32673: ST_TO_ADDR
// if result [ 1 ] then
32674: NOP4
32678: PUSH
32679: LD_INT 1
32681: ARRAY
32682: IFFALSE 32747
// if result [ 1 ] [ 1 ] = i then
32684: NOP4
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PUSH
32697: NOP4
32701: EQUAL
32702: IFFALSE 32747
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32704: NOP4
32708: PUSH
32709: NOP4
32713: PPUSH
32714: LD_INT 1
32716: PPUSH
32717: NOP4
32721: PUSH
32722: LD_INT 1
32724: ARRAY
32725: PPUSH
32726: LD_INT 1
32728: PPUSH
32729: NOP4
32733: PPUSH
32734: NOP4
32738: ST_TO_ADDR
// tmp := 1 ;
32739: NOP4
32743: PUSH
32744: LD_STRING 1
32746: ST_TO_ADDR
// end ; normal := normal & tmp ;
32747: NOP4
32751: PUSH
32752: NOP4
32756: PUSH
32757: NOP4
32761: STR
32762: ST_TO_ADDR
// end ;
32763: GO 32663
32765: POP
32766: POP
// for i = 1 to hardcoreCounter do
32767: NOP4
32771: PUSH
32772: DOUBLE
32773: LD_INT 1
32775: DEC
32776: ST_TO_ADDR
32777: NOP4
32781: PUSH
32782: FOR_TO
32783: IFFALSE 32888
// begin tmp := 0 ;
32785: NOP4
32789: PUSH
32790: LD_STRING 0
32792: ST_TO_ADDR
// if result [ 2 ] then
32793: NOP4
32797: PUSH
32798: LD_INT 2
32800: ARRAY
32801: IFFALSE 32870
// if result [ 2 ] [ 1 ] = 100 + i then
32803: NOP4
32807: PUSH
32808: LD_INT 2
32810: ARRAY
32811: PUSH
32812: LD_INT 1
32814: ARRAY
32815: PUSH
32816: LD_INT 100
32818: PUSH
32819: NOP4
32823: PLUS
32824: EQUAL
32825: IFFALSE 32870
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32827: NOP4
32831: PUSH
32832: NOP4
32836: PPUSH
32837: LD_INT 2
32839: PPUSH
32840: NOP4
32844: PUSH
32845: LD_INT 2
32847: ARRAY
32848: PPUSH
32849: LD_INT 1
32851: PPUSH
32852: NOP4
32856: PPUSH
32857: NOP4
32861: ST_TO_ADDR
// tmp := 1 ;
32862: NOP4
32866: PUSH
32867: LD_STRING 1
32869: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32870: NOP4
32874: PUSH
32875: NOP4
32879: PUSH
32880: NOP4
32884: STR
32885: ST_TO_ADDR
// end ;
32886: GO 32782
32888: POP
32889: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32890: LD_STRING getStreamItemsFromMission("
32892: PUSH
32893: NOP4
32897: STR
32898: PUSH
32899: LD_STRING ","
32901: STR
32902: PUSH
32903: NOP4
32907: STR
32908: PUSH
32909: LD_STRING ")
32911: STR
32912: PPUSH
32913: NOP4
// end else
32917: GO 32926
// ToLua ( getStreamItemsFromMission("","") ) ;
32919: LD_STRING getStreamItemsFromMission("","")
32921: PPUSH
32922: NOP4
// end ;
32926: LD_VAR 0 1
32930: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32931: NOP4
32935: PUSH
32936: NOP4
32940: AND
32941: IFFALSE 33065
32943: GO 32945
32945: DISABLE
32946: LD_INT 0
32948: PPUSH
32949: PPUSH
// begin enable ;
32950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32951: NOP4
32955: PUSH
32956: LD_INT 22
32958: PUSH
32959: NOP4
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: LD_INT 34
32973: PUSH
32974: LD_INT 7
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 34
32983: PUSH
32984: LD_INT 45
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 34
32993: PUSH
32994: LD_INT 28
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 34
33003: PUSH
33004: LD_INT 47
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PPUSH
33022: NOP4
33026: ST_TO_ADDR
// if not tmp then
33027: NOP4
33031: NOT
33032: IFFALSE 33036
// exit ;
33034: GO 33065
// for i in tmp do
33036: NOP4
33040: PUSH
33041: NOP4
33045: PUSH
33046: FOR_IN
33047: IFFALSE 33063
// begin SetLives ( i , 0 ) ;
33049: NOP4
33053: PPUSH
33054: LD_INT 0
33056: PPUSH
33057: NOP4
// end ;
33061: GO 33046
33063: POP
33064: POP
// end ;
33065: PPOPN 2
33067: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33068: NOP4
33072: PUSH
33073: NOP4
33077: AND
33078: IFFALSE 33162
33080: GO 33082
33082: DISABLE
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
// begin enable ;
33087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33088: NOP4
33092: PUSH
33093: LD_INT 22
33095: PUSH
33096: NOP4
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 32
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PPUSH
33119: NOP4
33123: ST_TO_ADDR
// if not tmp then
33124: NOP4
33128: NOT
33129: IFFALSE 33133
// exit ;
33131: GO 33162
// for i in tmp do
33133: NOP4
33137: PUSH
33138: NOP4
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33160
// begin SetLives ( i , 0 ) ;
33146: NOP4
33150: PPUSH
33151: LD_INT 0
33153: PPUSH
33154: NOP4
// end ;
33158: GO 33143
33160: POP
33161: POP
// end ;
33162: PPOPN 2
33164: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33165: NOP4
33169: PUSH
33170: NOP4
33174: AND
33175: IFFALSE 33268
33177: GO 33179
33179: DISABLE
33180: LD_INT 0
33182: PPUSH
// begin enable ;
33183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33184: NOP4
33188: PUSH
33189: LD_INT 22
33191: PUSH
33192: NOP4
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 25
33206: PUSH
33207: LD_INT 5
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 25
33216: PUSH
33217: LD_INT 9
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 25
33226: PUSH
33227: LD_INT 8
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PPUSH
33244: NOP4
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33266
// begin SetClass ( i , 1 ) ;
33252: NOP4
33256: PPUSH
33257: LD_INT 1
33259: PPUSH
33260: NOP4
// end ;
33264: GO 33249
33266: POP
33267: POP
// end ;
33268: PPOPN 1
33270: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33271: NOP4
33275: PUSH
33276: NOP4
33280: AND
33281: PUSH
33282: NOP4
33286: PUSH
33287: LD_INT 7
33289: LESS
33290: AND
33291: IFFALSE 33305
33293: GO 33295
33295: DISABLE
// begin enable ;
33296: ENABLE
// game_speed := 7 ;
33297: LD_ADDR_OWVAR 65
33301: PUSH
33302: LD_INT 7
33304: ST_TO_ADDR
// end ;
33305: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33306: NOP4
33310: PUSH
33311: NOP4
33315: AND
33316: IFFALSE 33518
33318: GO 33320
33320: DISABLE
33321: LD_INT 0
33323: PPUSH
33324: PPUSH
33325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33326: NOP4
33330: PUSH
33331: LD_INT 81
33333: PUSH
33334: NOP4
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 21
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PPUSH
33357: NOP4
33361: ST_TO_ADDR
// if not tmp then
33362: NOP4
33366: NOT
33367: IFFALSE 33371
// exit ;
33369: GO 33518
// if tmp > 5 then
33371: NOP4
33375: PUSH
33376: LD_INT 5
33378: GREATER
33379: IFFALSE 33391
// k := 5 else
33381: NOP4
33385: PUSH
33386: LD_INT 5
33388: ST_TO_ADDR
33389: GO 33401
// k := tmp ;
33391: NOP4
33395: PUSH
33396: NOP4
33400: ST_TO_ADDR
// for i := 1 to k do
33401: NOP4
33405: PUSH
33406: DOUBLE
33407: LD_INT 1
33409: DEC
33410: ST_TO_ADDR
33411: NOP4
33415: PUSH
33416: FOR_TO
33417: IFFALSE 33516
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33419: NOP4
33423: PUSH
33424: NOP4
33428: ARRAY
33429: PPUSH
33430: NOP4
33434: PUSH
33435: LD_INT 4
33437: MOD
33438: PUSH
33439: LD_INT 1
33441: PLUS
33442: PPUSH
33443: NOP4
33447: PUSH
33448: LD_INT 10
33450: LESS
33451: IFFALSE 33514
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33453: NOP4
33457: PUSH
33458: NOP4
33462: ARRAY
33463: PPUSH
33464: NOP4
33468: PUSH
33469: LD_INT 4
33471: MOD
33472: PUSH
33473: LD_INT 1
33475: PLUS
33476: PPUSH
33477: NOP4
33481: PUSH
33482: NOP4
33486: ARRAY
33487: PPUSH
33488: NOP4
33492: PUSH
33493: LD_INT 4
33495: MOD
33496: PUSH
33497: LD_INT 1
33499: PLUS
33500: PPUSH
33501: NOP4
33505: PUSH
33506: LD_INT 1
33508: PLUS
33509: PPUSH
33510: NOP4
33514: GO 33416
33516: POP
33517: POP
// end ;
33518: PPOPN 3
33520: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33521: NOP4
33525: PUSH
33526: NOP4
33530: AND
33531: IFFALSE 33551
33533: GO 33535
33535: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33536: LD_INT 4
33538: PPUSH
33539: NOP4
33543: PPUSH
33544: LD_INT 0
33546: PPUSH
33547: NOP4
33551: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33552: NOP4
33556: PUSH
33557: NOP4
33561: AND
33562: IFFALSE 33582
33564: GO 33566
33566: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33567: LD_INT 19
33569: PPUSH
33570: NOP4
33574: PPUSH
33575: LD_INT 0
33577: PPUSH
33578: NOP4
33582: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33583: NOP4
33587: PUSH
33588: NOP4
33592: AND
33593: IFFALSE 33695
33595: GO 33597
33597: DISABLE
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
// begin enable ;
33602: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33603: NOP4
33607: PUSH
33608: LD_INT 22
33610: PUSH
33611: NOP4
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 34
33625: PUSH
33626: LD_INT 11
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 34
33635: PUSH
33636: LD_INT 30
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PPUSH
33652: NOP4
33656: ST_TO_ADDR
// if not tmp then
33657: NOP4
33661: NOT
33662: IFFALSE 33666
// exit ;
33664: GO 33695
// for i in tmp do
33666: NOP4
33670: PUSH
33671: NOP4
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33693
// begin SetLives ( i , 0 ) ;
33679: NOP4
33683: PPUSH
33684: LD_INT 0
33686: PPUSH
33687: NOP4
// end ;
33691: GO 33676
33693: POP
33694: POP
// end ;
33695: PPOPN 2
33697: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33698: NOP4
33702: PUSH
33703: NOP4
33707: AND
33708: IFFALSE 33728
33710: GO 33712
33712: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33713: LD_INT 32
33715: PPUSH
33716: NOP4
33720: PPUSH
33721: LD_INT 0
33723: PPUSH
33724: NOP4
33728: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33729: NOP4
33733: PUSH
33734: NOP4
33738: AND
33739: IFFALSE 33920
33741: GO 33743
33743: DISABLE
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33749: NOP4
33753: PUSH
33754: LD_INT 22
33756: PUSH
33757: NOP4
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 33
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PPUSH
33780: NOP4
33784: ST_TO_ADDR
// if not tmp then
33785: NOP4
33789: NOT
33790: IFFALSE 33794
// exit ;
33792: GO 33920
// side := 0 ;
33794: NOP4
33798: PUSH
33799: LD_INT 0
33801: ST_TO_ADDR
// for i := 1 to 8 do
33802: NOP4
33806: PUSH
33807: DOUBLE
33808: LD_INT 1
33810: DEC
33811: ST_TO_ADDR
33812: LD_INT 8
33814: PUSH
33815: FOR_TO
33816: IFFALSE 33864
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33818: NOP4
33822: PUSH
33823: NOP4
33827: NONEQUAL
33828: PUSH
33829: NOP4
33833: PPUSH
33834: NOP4
33838: PPUSH
33839: NOP4
33843: PUSH
33844: LD_INT 2
33846: EQUAL
33847: AND
33848: IFFALSE 33862
// begin side := i ;
33850: NOP4
33854: PUSH
33855: NOP4
33859: ST_TO_ADDR
// break ;
33860: GO 33864
// end ;
33862: GO 33815
33864: POP
33865: POP
// if not side then
33866: NOP4
33870: NOT
33871: IFFALSE 33875
// exit ;
33873: GO 33920
// for i := 1 to tmp do
33875: NOP4
33879: PUSH
33880: DOUBLE
33881: LD_INT 1
33883: DEC
33884: ST_TO_ADDR
33885: NOP4
33889: PUSH
33890: FOR_TO
33891: IFFALSE 33918
// if Prob ( 60 ) then
33893: LD_INT 60
33895: PPUSH
33896: NOP4
33900: IFFALSE 33916
// SetSide ( i , side ) ;
33902: NOP4
33906: PPUSH
33907: NOP4
33911: PPUSH
33912: NOP4
33916: GO 33890
33918: POP
33919: POP
// end ;
33920: PPOPN 3
33922: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33923: NOP4
33927: PUSH
33928: NOP4
33932: AND
33933: IFFALSE 34052
33935: GO 33937
33937: DISABLE
33938: LD_INT 0
33940: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33941: NOP4
33945: PUSH
33946: LD_INT 22
33948: PUSH
33949: NOP4
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 21
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: LD_INT 23
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: PPUSH
33990: NOP4
33994: PUSH
33995: FOR_IN
33996: IFFALSE 34050
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33998: NOP4
34002: PPUSH
34003: NOP4
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: IN
34026: IFFALSE 34048
// SetClass ( un , rand ( 1 , 4 ) ) ;
34028: NOP4
34032: PPUSH
34033: LD_INT 1
34035: PPUSH
34036: LD_INT 4
34038: PPUSH
34039: NOP4
34043: PPUSH
34044: NOP4
34048: GO 33995
34050: POP
34051: POP
// end ;
34052: PPOPN 1
34054: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34055: NOP4
34059: PUSH
34060: NOP4
34064: AND
34065: IFFALSE 34144
34067: GO 34069
34069: DISABLE
34070: LD_INT 0
34072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34073: NOP4
34077: PUSH
34078: LD_INT 22
34080: PUSH
34081: NOP4
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 21
34092: PUSH
34093: LD_INT 3
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PPUSH
34104: NOP4
34108: ST_TO_ADDR
// if not tmp then
34109: NOP4
34113: NOT
34114: IFFALSE 34118
// exit ;
34116: GO 34144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34118: NOP4
34122: PUSH
34123: LD_INT 1
34125: PPUSH
34126: NOP4
34130: PPUSH
34131: NOP4
34135: ARRAY
34136: PPUSH
34137: LD_INT 100
34139: PPUSH
34140: NOP4
// end ;
34144: PPOPN 1
34146: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34147: NOP4
34151: PUSH
34152: NOP4
34156: AND
34157: IFFALSE 34255
34159: GO 34161
34161: DISABLE
34162: LD_INT 0
34164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34165: NOP4
34169: PUSH
34170: LD_INT 22
34172: PUSH
34173: NOP4
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 21
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PPUSH
34196: NOP4
34200: ST_TO_ADDR
// if not tmp then
34201: NOP4
34205: NOT
34206: IFFALSE 34210
// exit ;
34208: GO 34255
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34210: NOP4
34214: PUSH
34215: LD_INT 1
34217: PPUSH
34218: NOP4
34222: PPUSH
34223: NOP4
34227: ARRAY
34228: PPUSH
34229: LD_INT 1
34231: PPUSH
34232: LD_INT 4
34234: PPUSH
34235: NOP4
34239: PPUSH
34240: LD_INT 3000
34242: PPUSH
34243: LD_INT 9000
34245: PPUSH
34246: NOP4
34250: PPUSH
34251: NOP4
// end ;
34255: PPOPN 1
34257: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34258: NOP4
34262: PUSH
34263: NOP4
34267: AND
34268: IFFALSE 34288
34270: GO 34272
34272: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34273: LD_INT 1
34275: PPUSH
34276: NOP4
34280: PPUSH
34281: LD_INT 0
34283: PPUSH
34284: NOP4
34288: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34289: NOP4
34293: PUSH
34294: NOP4
34298: AND
34299: IFFALSE 34382
34301: GO 34303
34303: DISABLE
34304: LD_INT 0
34306: PPUSH
34307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34308: NOP4
34312: PUSH
34313: LD_INT 22
34315: PUSH
34316: NOP4
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 21
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PPUSH
34339: NOP4
34343: ST_TO_ADDR
// if not tmp then
34344: NOP4
34348: NOT
34349: IFFALSE 34353
// exit ;
34351: GO 34382
// for i in tmp do
34353: NOP4
34357: PUSH
34358: NOP4
34362: PUSH
34363: FOR_IN
34364: IFFALSE 34380
// SetBLevel ( i , 10 ) ;
34366: NOP4
34370: PPUSH
34371: LD_INT 10
34373: PPUSH
34374: NOP4
34378: GO 34363
34380: POP
34381: POP
// end ;
34382: PPOPN 2
34384: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34385: NOP4
34389: PUSH
34390: NOP4
34394: AND
34395: IFFALSE 34506
34397: GO 34399
34399: DISABLE
34400: LD_INT 0
34402: PPUSH
34403: PPUSH
34404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34405: NOP4
34409: PUSH
34410: LD_INT 22
34412: PUSH
34413: NOP4
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 25
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PPUSH
34436: NOP4
34440: ST_TO_ADDR
// if not tmp then
34441: NOP4
34445: NOT
34446: IFFALSE 34450
// exit ;
34448: GO 34506
// un := tmp [ rand ( 1 , tmp ) ] ;
34450: NOP4
34454: PUSH
34455: NOP4
34459: PUSH
34460: LD_INT 1
34462: PPUSH
34463: NOP4
34467: PPUSH
34468: NOP4
34472: ARRAY
34473: ST_TO_ADDR
// if Crawls ( un ) then
34474: NOP4
34478: PPUSH
34479: NOP4
34483: IFFALSE 34494
// ComWalk ( un ) ;
34485: NOP4
34489: PPUSH
34490: NOP4
// SetClass ( un , class_sniper ) ;
34494: NOP4
34498: PPUSH
34499: LD_INT 5
34501: PPUSH
34502: NOP4
// end ;
34506: PPOPN 3
34508: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
34509: NOP4
34513: PUSH
34514: NOP4
34518: AND
34519: PUSH
34520: NOP4
34524: PUSH
34525: LD_INT 3
34527: LESS
34528: AND
34529: IFFALSE 34548
34531: GO 34533
34533: DISABLE
// Difficulty := Difficulty + 1 ;
34534: LD_ADDR_OWVAR 67
34538: PUSH
34539: NOP4
34543: PUSH
34544: LD_INT 1
34546: PLUS
34547: ST_TO_ADDR
34548: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34549: NOP4
34553: PUSH
34554: NOP4
34558: AND
34559: IFFALSE 34662
34561: GO 34563
34563: DISABLE
34564: LD_INT 0
34566: PPUSH
// begin for i := 1 to 5 do
34567: NOP4
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_INT 5
34579: PUSH
34580: FOR_TO
34581: IFFALSE 34660
// begin uc_nation := nation_nature ;
34583: LD_ADDR_OWVAR 21
34587: PUSH
34588: LD_INT 0
34590: ST_TO_ADDR
// uc_side := 0 ;
34591: LD_ADDR_OWVAR 20
34595: PUSH
34596: LD_INT 0
34598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34599: LD_ADDR_OWVAR 29
34603: PUSH
34604: LD_INT 12
34606: PUSH
34607: LD_INT 12
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: ST_TO_ADDR
// hc_agressivity := 20 ;
34614: LD_ADDR_OWVAR 35
34618: PUSH
34619: LD_INT 20
34621: ST_TO_ADDR
// hc_class := class_tiger ;
34622: LD_ADDR_OWVAR 28
34626: PUSH
34627: LD_INT 14
34629: ST_TO_ADDR
// hc_gallery :=  ;
34630: LD_ADDR_OWVAR 33
34634: PUSH
34635: LD_STRING 
34637: ST_TO_ADDR
// hc_name :=  ;
34638: LD_ADDR_OWVAR 26
34642: PUSH
34643: LD_STRING 
34645: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34646: NOP4
34650: PPUSH
34651: LD_INT 0
34653: PPUSH
34654: NOP4
// end ;
34658: GO 34580
34660: POP
34661: POP
// end ;
34662: PPOPN 1
34664: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34665: NOP4
34669: PUSH
34670: NOP4
34674: AND
34675: IFFALSE 34684
34677: GO 34679
34679: DISABLE
// StreamSibBomb ;
34680: NOP4
34684: END
// export function StreamSibBomb ; var i , x , y ; begin
34685: LD_INT 0
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
// result := false ;
34691: NOP4
34695: PUSH
34696: LD_INT 0
34698: ST_TO_ADDR
// for i := 1 to 16 do
34699: NOP4
34703: PUSH
34704: DOUBLE
34705: LD_INT 1
34707: DEC
34708: ST_TO_ADDR
34709: LD_INT 16
34711: PUSH
34712: FOR_TO
34713: IFFALSE 34912
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34715: NOP4
34719: PUSH
34720: LD_INT 10
34722: PUSH
34723: LD_INT 20
34725: PUSH
34726: LD_INT 30
34728: PUSH
34729: LD_INT 40
34731: PUSH
34732: LD_INT 50
34734: PUSH
34735: LD_INT 60
34737: PUSH
34738: LD_INT 70
34740: PUSH
34741: LD_INT 80
34743: PUSH
34744: LD_INT 90
34746: PUSH
34747: LD_INT 100
34749: PUSH
34750: LD_INT 110
34752: PUSH
34753: LD_INT 120
34755: PUSH
34756: LD_INT 130
34758: PUSH
34759: LD_INT 140
34761: PUSH
34762: LD_INT 150
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PPUSH
34785: LD_INT 15
34787: PPUSH
34788: NOP4
34792: ARRAY
34793: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34794: NOP4
34798: PUSH
34799: LD_INT 10
34801: PUSH
34802: LD_INT 20
34804: PUSH
34805: LD_INT 30
34807: PUSH
34808: LD_INT 40
34810: PUSH
34811: LD_INT 50
34813: PUSH
34814: LD_INT 60
34816: PUSH
34817: LD_INT 70
34819: PUSH
34820: LD_INT 80
34822: PUSH
34823: LD_INT 90
34825: PUSH
34826: LD_INT 100
34828: PUSH
34829: LD_INT 110
34831: PUSH
34832: LD_INT 120
34834: PUSH
34835: LD_INT 130
34837: PUSH
34838: LD_INT 140
34840: PUSH
34841: LD_INT 150
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: PPUSH
34864: LD_INT 15
34866: PPUSH
34867: NOP4
34871: ARRAY
34872: ST_TO_ADDR
// if ValidHex ( x , y ) then
34873: NOP4
34877: PPUSH
34878: NOP4
34882: PPUSH
34883: NOP4
34887: IFFALSE 34910
// begin result := [ x , y ] ;
34889: NOP4
34893: PUSH
34894: NOP4
34898: PUSH
34899: NOP4
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// break ;
34908: GO 34912
// end ; end ;
34910: GO 34712
34912: POP
34913: POP
// if result then
34914: NOP4
34918: IFFALSE 34978
// begin ToLua ( playSibBomb() ) ;
34920: LD_STRING playSibBomb()
34922: PPUSH
34923: NOP4
// wait ( 0 0$14 ) ;
34927: LD_INT 490
34929: PPUSH
34930: NOP4
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34934: NOP4
34938: PUSH
34939: LD_INT 1
34941: ARRAY
34942: PPUSH
34943: NOP4
34947: PUSH
34948: LD_INT 2
34950: ARRAY
34951: PPUSH
34952: NOP4
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34956: NOP4
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: PPUSH
34965: NOP4
34969: PUSH
34970: LD_INT 2
34972: ARRAY
34973: PPUSH
34974: NOP4
// end ; end ;
34978: LD_VAR 0 1
34982: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34983: NOP4
34987: PUSH
34988: NOP4
34992: AND
34993: IFFALSE 35005
34995: GO 34997
34997: DISABLE
// YouLost (  ) ;
34998: LD_STRING 
35000: PPUSH
35001: NOP4
35005: END
// every 0 0$1 trigger StreamModeActive and sFog do
35006: NOP4
35010: PUSH
35011: NOP4
35015: AND
35016: IFFALSE 35030
35018: GO 35020
35020: DISABLE
// FogOff ( your_side ) ;
35021: NOP4
35025: PPUSH
35026: NOP4
35030: END
// every 0 0$1 trigger StreamModeActive and sSun do
35031: NOP4
35035: PUSH
35036: NOP4
35040: AND
35041: IFFALSE 35069
35043: GO 35045
35045: DISABLE
// begin solar_recharge_percent := 0 ;
35046: LD_ADDR_OWVAR 79
35050: PUSH
35051: LD_INT 0
35053: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35054: LD_INT 10500
35056: PPUSH
35057: NOP4
// solar_recharge_percent := 100 ;
35061: LD_ADDR_OWVAR 79
35065: PUSH
35066: LD_INT 100
35068: ST_TO_ADDR
// end ;
35069: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35070: NOP4
35074: PUSH
35075: NOP4
35079: AND
35080: IFFALSE 35319
35082: GO 35084
35084: DISABLE
35085: LD_INT 0
35087: PPUSH
35088: PPUSH
35089: PPUSH
// begin tmp := [ ] ;
35090: NOP4
35094: PUSH
35095: EMPTY
35096: ST_TO_ADDR
// for i := 1 to 6 do
35097: NOP4
35101: PUSH
35102: DOUBLE
35103: LD_INT 1
35105: DEC
35106: ST_TO_ADDR
35107: LD_INT 6
35109: PUSH
35110: FOR_TO
35111: IFFALSE 35216
// begin uc_nation := nation_nature ;
35113: LD_ADDR_OWVAR 21
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
// uc_side := 0 ;
35121: LD_ADDR_OWVAR 20
35125: PUSH
35126: LD_INT 0
35128: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35129: LD_ADDR_OWVAR 29
35133: PUSH
35134: LD_INT 12
35136: PUSH
35137: LD_INT 12
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: ST_TO_ADDR
// hc_agressivity := 20 ;
35144: LD_ADDR_OWVAR 35
35148: PUSH
35149: LD_INT 20
35151: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35152: LD_ADDR_OWVAR 28
35156: PUSH
35157: LD_INT 17
35159: ST_TO_ADDR
// hc_gallery :=  ;
35160: LD_ADDR_OWVAR 33
35164: PUSH
35165: LD_STRING 
35167: ST_TO_ADDR
// hc_name :=  ;
35168: LD_ADDR_OWVAR 26
35172: PUSH
35173: LD_STRING 
35175: ST_TO_ADDR
// un := CreateHuman ;
35176: NOP4
35180: PUSH
35181: NOP4
35185: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35186: NOP4
35190: PPUSH
35191: LD_INT 1
35193: PPUSH
35194: NOP4
// tmp := tmp ^ un ;
35198: NOP4
35202: PUSH
35203: NOP4
35207: PUSH
35208: NOP4
35212: ADD
35213: ST_TO_ADDR
// end ;
35214: GO 35110
35216: POP
35217: POP
// repeat wait ( 0 0$1 ) ;
35218: LD_INT 35
35220: PPUSH
35221: NOP4
// for un in tmp do
35225: NOP4
35229: PUSH
35230: NOP4
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35310
// begin if IsDead ( un ) then
35238: NOP4
35242: PPUSH
35243: NOP4
35247: IFFALSE 35267
// begin tmp := tmp diff un ;
35249: NOP4
35253: PUSH
35254: NOP4
35258: PUSH
35259: NOP4
35263: DIFF
35264: ST_TO_ADDR
// continue ;
35265: GO 35235
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35267: NOP4
35271: PPUSH
35272: LD_INT 3
35274: PUSH
35275: LD_INT 22
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PPUSH
35289: NOP4
35293: PPUSH
35294: NOP4
35298: PPUSH
35299: NOP4
35303: PPUSH
35304: NOP4
// end ;
35308: GO 35235
35310: POP
35311: POP
// until not tmp ;
35312: NOP4
35316: NOT
35317: IFFALSE 35218
// end ;
35319: PPOPN 3
35321: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35322: NOP4
35326: PUSH
35327: NOP4
35331: AND
35332: IFFALSE 35386
35334: GO 35336
35336: DISABLE
// begin ToLua ( displayTroll(); ) ;
35337: LD_STRING displayTroll();
35339: PPUSH
35340: NOP4
// wait ( 3 3$00 ) ;
35344: LD_INT 6300
35346: PPUSH
35347: NOP4
// ToLua ( hideTroll(); ) ;
35351: LD_STRING hideTroll();
35353: PPUSH
35354: NOP4
// wait ( 1 1$00 ) ;
35358: LD_INT 2100
35360: PPUSH
35361: NOP4
// ToLua ( displayTroll(); ) ;
35365: LD_STRING displayTroll();
35367: PPUSH
35368: NOP4
// wait ( 1 1$00 ) ;
35372: LD_INT 2100
35374: PPUSH
35375: NOP4
// ToLua ( hideTroll(); ) ;
35379: LD_STRING hideTroll();
35381: PPUSH
35382: NOP4
// end ;
35386: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35387: NOP4
35391: PUSH
35392: NOP4
35396: AND
35397: IFFALSE 35460
35399: GO 35401
35401: DISABLE
35402: LD_INT 0
35404: PPUSH
// begin p := 0 ;
35405: NOP4
35409: PUSH
35410: LD_INT 0
35412: ST_TO_ADDR
// repeat game_speed := 1 ;
35413: LD_ADDR_OWVAR 65
35417: PUSH
35418: LD_INT 1
35420: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35421: LD_INT 35
35423: PPUSH
35424: NOP4
// p := p + 1 ;
35428: NOP4
35432: PUSH
35433: NOP4
35437: PUSH
35438: LD_INT 1
35440: PLUS
35441: ST_TO_ADDR
// until p >= 60 ;
35442: NOP4
35446: PUSH
35447: LD_INT 60
35449: GREATEREQUAL
35450: IFFALSE 35413
// game_speed := 4 ;
35452: LD_ADDR_OWVAR 65
35456: PUSH
35457: LD_INT 4
35459: ST_TO_ADDR
// end ;
35460: PPOPN 1
35462: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35463: NOP4
35467: PUSH
35468: NOP4
35472: AND
35473: IFFALSE 35619
35475: GO 35477
35477: DISABLE
35478: LD_INT 0
35480: PPUSH
35481: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35482: NOP4
35486: PUSH
35487: LD_INT 22
35489: PUSH
35490: NOP4
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 30
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 30
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PPUSH
35531: NOP4
35535: ST_TO_ADDR
// if not depot then
35536: NOP4
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35619
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35545: NOP4
35549: PUSH
35550: NOP4
35554: PUSH
35555: LD_INT 1
35557: PPUSH
35558: NOP4
35562: PPUSH
35563: NOP4
35567: ARRAY
35568: PPUSH
35569: NOP4
35573: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35574: NOP4
35578: PPUSH
35579: LD_INT 1
35581: PPUSH
35582: LD_INT 0
35584: PPUSH
35585: NOP4
// SetResourceType ( base , mat_oil , 0 ) ;
35589: NOP4
35593: PPUSH
35594: LD_INT 2
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: NOP4
// SetResourceType ( base , mat_siberit , 0 ) ;
35604: NOP4
35608: PPUSH
35609: LD_INT 3
35611: PPUSH
35612: LD_INT 0
35614: PPUSH
35615: NOP4
// end ;
35619: PPOPN 2
35621: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35622: NOP4
35626: PUSH
35627: NOP4
35631: AND
35632: IFFALSE 35729
35634: GO 35636
35636: DISABLE
35637: LD_INT 0
35639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35640: NOP4
35644: PUSH
35645: LD_INT 22
35647: PUSH
35648: NOP4
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 21
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: LD_INT 23
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: PPUSH
35689: NOP4
35693: ST_TO_ADDR
// if not tmp then
35694: NOP4
35698: NOT
35699: IFFALSE 35703
// exit ;
35701: GO 35729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35703: NOP4
35707: PUSH
35708: LD_INT 1
35710: PPUSH
35711: NOP4
35715: PPUSH
35716: NOP4
35720: ARRAY
35721: PPUSH
35722: LD_INT 200
35724: PPUSH
35725: NOP4
// end ;
35729: PPOPN 1
35731: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35732: NOP4
35736: PUSH
35737: NOP4
35741: AND
35742: IFFALSE 35821
35744: GO 35746
35746: DISABLE
35747: LD_INT 0
35749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35750: NOP4
35754: PUSH
35755: LD_INT 22
35757: PUSH
35758: NOP4
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 21
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PPUSH
35781: NOP4
35785: ST_TO_ADDR
// if not tmp then
35786: NOP4
35790: NOT
35791: IFFALSE 35795
// exit ;
35793: GO 35821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35795: NOP4
35799: PUSH
35800: LD_INT 1
35802: PPUSH
35803: NOP4
35807: PPUSH
35808: NOP4
35812: ARRAY
35813: PPUSH
35814: LD_INT 60
35816: PPUSH
35817: NOP4
// end ;
35821: PPOPN 1
35823: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35824: NOP4
35828: PUSH
35829: NOP4
35833: AND
35834: IFFALSE 35933
35836: GO 35838
35838: DISABLE
35839: LD_INT 0
35841: PPUSH
35842: PPUSH
// begin enable ;
35843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35844: NOP4
35848: PUSH
35849: LD_INT 22
35851: PUSH
35852: NOP4
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 61
35863: PUSH
35864: EMPTY
35865: LIST
35866: PUSH
35867: LD_INT 33
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PPUSH
35882: NOP4
35886: ST_TO_ADDR
// if not tmp then
35887: NOP4
35891: NOT
35892: IFFALSE 35896
// exit ;
35894: GO 35933
// for i in tmp do
35896: NOP4
35900: PUSH
35901: NOP4
35905: PUSH
35906: FOR_IN
35907: IFFALSE 35931
// if IsControledBy ( i ) then
35909: NOP4
35913: PPUSH
35914: NOP4
35918: IFFALSE 35929
// ComUnlink ( i ) ;
35920: NOP4
35924: PPUSH
35925: NOP4
35929: GO 35906
35931: POP
35932: POP
// end ;
35933: PPOPN 2
35935: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35936: NOP4
35940: PUSH
35941: NOP4
35945: AND
35946: IFFALSE 36086
35948: GO 35950
35950: DISABLE
35951: LD_INT 0
35953: PPUSH
35954: PPUSH
// begin ToLua ( displayPowell(); ) ;
35955: LD_STRING displayPowell();
35957: PPUSH
35958: NOP4
// uc_side := 0 ;
35962: LD_ADDR_OWVAR 20
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// uc_nation := 2 ;
35970: LD_ADDR_OWVAR 21
35974: PUSH
35975: LD_INT 2
35977: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35978: LD_ADDR_OWVAR 37
35982: PUSH
35983: LD_INT 14
35985: ST_TO_ADDR
// vc_engine := engine_siberite ;
35986: LD_ADDR_OWVAR 39
35990: PUSH
35991: LD_INT 3
35993: ST_TO_ADDR
// vc_control := control_apeman ;
35994: LD_ADDR_OWVAR 38
35998: PUSH
35999: LD_INT 5
36001: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36002: LD_ADDR_OWVAR 40
36006: PUSH
36007: LD_INT 29
36009: ST_TO_ADDR
// un := CreateVehicle ;
36010: NOP4
36014: PUSH
36015: NOP4
36019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36020: NOP4
36024: PPUSH
36025: LD_INT 1
36027: PPUSH
36028: NOP4
// repeat wait ( 0 0$1 ) ;
36032: LD_INT 35
36034: PPUSH
36035: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36039: NOP4
36043: PPUSH
36044: LD_INT 22
36046: PUSH
36047: NOP4
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: NOP4
36060: PPUSH
36061: NOP4
36065: PPUSH
36066: NOP4
36070: PPUSH
36071: NOP4
// until IsDead ( un ) ;
36075: NOP4
36079: PPUSH
36080: NOP4
36084: IFFALSE 36032
// end ;
36086: PPOPN 2
36088: END
// every 0 0$1 trigger StreamModeActive and sStu do
36089: NOP4
36093: PUSH
36094: NOP4
36098: AND
36099: IFFALSE 36115
36101: GO 36103
36103: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36104: LD_STRING displayStucuk();
36106: PPUSH
36107: NOP4
// ResetFog ;
36111: NOP4
// end ;
36115: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36116: NOP4
36120: PUSH
36121: NOP4
36125: AND
36126: IFFALSE 36267
36128: GO 36130
36130: DISABLE
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36135: NOP4
36139: PUSH
36140: LD_INT 22
36142: PUSH
36143: NOP4
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 21
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PPUSH
36166: NOP4
36170: ST_TO_ADDR
// if not tmp then
36171: NOP4
36175: NOT
36176: IFFALSE 36180
// exit ;
36178: GO 36267
// un := tmp [ rand ( 1 , tmp ) ] ;
36180: NOP4
36184: PUSH
36185: NOP4
36189: PUSH
36190: LD_INT 1
36192: PPUSH
36193: NOP4
36197: PPUSH
36198: NOP4
36202: ARRAY
36203: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36204: NOP4
36208: PPUSH
36209: LD_INT 0
36211: PPUSH
36212: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36216: NOP4
36220: PPUSH
36221: NOP4
36225: PUSH
36226: NOP4
36230: DIFF
36231: PPUSH
36232: NOP4
36236: PPUSH
36237: NOP4
36241: PPUSH
36242: NOP4
// wait ( 0 0$20 ) ;
36246: LD_INT 700
36248: PPUSH
36249: NOP4
// SetSide ( un , your_side ) ;
36253: NOP4
36257: PPUSH
36258: NOP4
36262: PPUSH
36263: NOP4
// end ;
36267: PPOPN 2
36269: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36270: NOP4
36274: PUSH
36275: NOP4
36279: AND
36280: IFFALSE 36386
36282: GO 36284
36284: DISABLE
36285: LD_INT 0
36287: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36288: NOP4
36292: PUSH
36293: LD_INT 22
36295: PUSH
36296: NOP4
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 30
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 30
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PPUSH
36337: NOP4
36341: ST_TO_ADDR
// if not depot then
36342: NOP4
36346: NOT
36347: IFFALSE 36351
// exit ;
36349: GO 36386
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36351: NOP4
36355: PUSH
36356: LD_INT 1
36358: ARRAY
36359: PPUSH
36360: NOP4
36364: PPUSH
36365: NOP4
36369: PUSH
36370: LD_INT 1
36372: ARRAY
36373: PPUSH
36374: NOP4
36378: PPUSH
36379: LD_INT 70
36381: PPUSH
36382: NOP4
// end ;
36386: PPOPN 1
36388: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36389: NOP4
36393: PUSH
36394: NOP4
36398: AND
36399: IFFALSE 36610
36401: GO 36403
36403: DISABLE
36404: LD_INT 0
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36411: NOP4
36415: PUSH
36416: LD_INT 22
36418: PUSH
36419: NOP4
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 21
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: NOP4
36446: ST_TO_ADDR
// if not tmp then
36447: NOP4
36451: NOT
36452: IFFALSE 36456
// exit ;
36454: GO 36610
// for i in tmp do
36456: NOP4
36460: PUSH
36461: NOP4
36465: PUSH
36466: FOR_IN
36467: IFFALSE 36608
// begin d := rand ( 0 , 5 ) ;
36469: NOP4
36473: PUSH
36474: LD_INT 0
36476: PPUSH
36477: LD_INT 5
36479: PPUSH
36480: NOP4
36484: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36485: NOP4
36489: PUSH
36490: NOP4
36494: PPUSH
36495: NOP4
36499: PPUSH
36500: NOP4
36504: PPUSH
36505: LD_INT 3
36507: PPUSH
36508: LD_INT 12
36510: PPUSH
36511: NOP4
36515: PPUSH
36516: NOP4
36520: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36521: NOP4
36525: PUSH
36526: NOP4
36530: PPUSH
36531: NOP4
36535: PPUSH
36536: NOP4
36540: PPUSH
36541: LD_INT 3
36543: PPUSH
36544: LD_INT 12
36546: PPUSH
36547: NOP4
36551: PPUSH
36552: NOP4
36556: ST_TO_ADDR
// if ValidHex ( x , y ) then
36557: NOP4
36561: PPUSH
36562: NOP4
36566: PPUSH
36567: NOP4
36571: IFFALSE 36606
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36573: NOP4
36577: PPUSH
36578: NOP4
36582: PPUSH
36583: NOP4
36587: PPUSH
36588: LD_INT 3
36590: PPUSH
36591: LD_INT 6
36593: PPUSH
36594: NOP4
36598: PPUSH
36599: LD_INT 1
36601: PPUSH
36602: NOP4
// end ;
36606: GO 36466
36608: POP
36609: POP
// end ;
36610: PPOPN 5
36612: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36613: NOP4
36617: PUSH
36618: NOP4
36622: AND
36623: IFFALSE 36717
36625: GO 36627
36627: DISABLE
36628: LD_INT 0
36630: PPUSH
36631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36632: NOP4
36636: PUSH
36637: LD_INT 22
36639: PUSH
36640: NOP4
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 32
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 21
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PPUSH
36674: NOP4
36678: ST_TO_ADDR
// if not tmp then
36679: NOP4
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 36717
// for i in tmp do
36688: NOP4
36692: PUSH
36693: NOP4
36697: PUSH
36698: FOR_IN
36699: IFFALSE 36715
// SetFuel ( i , 0 ) ;
36701: NOP4
36705: PPUSH
36706: LD_INT 0
36708: PPUSH
36709: NOP4
36713: GO 36698
36715: POP
36716: POP
// end ;
36717: PPOPN 2
36719: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36720: NOP4
36724: PUSH
36725: NOP4
36729: AND
36730: IFFALSE 36796
36732: GO 36734
36734: DISABLE
36735: LD_INT 0
36737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36738: NOP4
36742: PUSH
36743: LD_INT 22
36745: PUSH
36746: NOP4
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 30
36757: PUSH
36758: LD_INT 29
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PPUSH
36769: NOP4
36773: ST_TO_ADDR
// if not tmp then
36774: NOP4
36778: NOT
36779: IFFALSE 36783
// exit ;
36781: GO 36796
// DestroyUnit ( tmp [ 1 ] ) ;
36783: NOP4
36787: PUSH
36788: LD_INT 1
36790: ARRAY
36791: PPUSH
36792: NOP4
// end ;
36796: PPOPN 1
36798: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36799: NOP4
36803: PUSH
36804: NOP4
36808: AND
36809: IFFALSE 36938
36811: GO 36813
36813: DISABLE
36814: LD_INT 0
36816: PPUSH
// begin uc_side := 0 ;
36817: LD_ADDR_OWVAR 20
36821: PUSH
36822: LD_INT 0
36824: ST_TO_ADDR
// uc_nation := nation_arabian ;
36825: LD_ADDR_OWVAR 21
36829: PUSH
36830: LD_INT 2
36832: ST_TO_ADDR
// hc_gallery :=  ;
36833: LD_ADDR_OWVAR 33
36837: PUSH
36838: LD_STRING 
36840: ST_TO_ADDR
// hc_name :=  ;
36841: LD_ADDR_OWVAR 26
36845: PUSH
36846: LD_STRING 
36848: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36849: LD_INT 1
36851: PPUSH
36852: LD_INT 11
36854: PPUSH
36855: LD_INT 10
36857: PPUSH
36858: NOP4
// un := CreateHuman ;
36862: NOP4
36866: PUSH
36867: NOP4
36871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36872: NOP4
36876: PPUSH
36877: LD_INT 1
36879: PPUSH
36880: NOP4
// repeat wait ( 0 0$1 ) ;
36884: LD_INT 35
36886: PPUSH
36887: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36891: NOP4
36895: PPUSH
36896: LD_INT 22
36898: PUSH
36899: NOP4
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PPUSH
36908: NOP4
36912: PPUSH
36913: NOP4
36917: PPUSH
36918: NOP4
36922: PPUSH
36923: NOP4
// until IsDead ( un ) ;
36927: NOP4
36931: PPUSH
36932: NOP4
36936: IFFALSE 36884
// end ;
36938: PPOPN 1
36940: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36941: NOP4
36945: PUSH
36946: NOP4
36950: AND
36951: IFFALSE 36963
36953: GO 36955
36955: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36956: LD_STRING earthquake(getX(game), 0, 32)
36958: PPUSH
36959: NOP4
36963: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36964: NOP4
36968: PUSH
36969: NOP4
36973: AND
36974: IFFALSE 37065
36976: GO 36978
36978: DISABLE
36979: LD_INT 0
36981: PPUSH
// begin enable ;
36982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36983: NOP4
36987: PUSH
36988: LD_INT 22
36990: PUSH
36991: NOP4
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 21
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 33
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: NOP4
37029: ST_TO_ADDR
// if not tmp then
37030: NOP4
37034: NOT
37035: IFFALSE 37039
// exit ;
37037: GO 37065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37039: NOP4
37043: PUSH
37044: LD_INT 1
37046: PPUSH
37047: NOP4
37051: PPUSH
37052: NOP4
37056: ARRAY
37057: PPUSH
37058: LD_INT 1
37060: PPUSH
37061: NOP4
// end ;
37065: PPOPN 1
37067: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37068: NOP4
37072: PUSH
37073: NOP4
37077: AND
37078: IFFALSE 37219
37080: GO 37082
37082: DISABLE
37083: LD_INT 0
37085: PPUSH
37086: PPUSH
37087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37088: NOP4
37092: PUSH
37093: LD_INT 22
37095: PUSH
37096: NOP4
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 25
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PPUSH
37119: NOP4
37123: ST_TO_ADDR
// if not tmp then
37124: NOP4
37128: NOT
37129: IFFALSE 37133
// exit ;
37131: GO 37219
// un := tmp [ rand ( 1 , tmp ) ] ;
37133: NOP4
37137: PUSH
37138: NOP4
37142: PUSH
37143: LD_INT 1
37145: PPUSH
37146: NOP4
37150: PPUSH
37151: NOP4
37155: ARRAY
37156: ST_TO_ADDR
// if Crawls ( un ) then
37157: NOP4
37161: PPUSH
37162: NOP4
37166: IFFALSE 37177
// ComWalk ( un ) ;
37168: NOP4
37172: PPUSH
37173: NOP4
// SetClass ( un , class_bazooker ) ;
37177: NOP4
37181: PPUSH
37182: LD_INT 9
37184: PPUSH
37185: NOP4
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37189: LD_INT 28
37191: PPUSH
37192: NOP4
37196: PPUSH
37197: LD_INT 2
37199: PPUSH
37200: NOP4
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37204: LD_INT 29
37206: PPUSH
37207: NOP4
37211: PPUSH
37212: LD_INT 2
37214: PPUSH
37215: NOP4
// end ;
37219: PPOPN 3
37221: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37222: NOP4
37226: PUSH
37227: NOP4
37231: AND
37232: IFFALSE 37343
37234: GO 37236
37236: DISABLE
37237: LD_INT 0
37239: PPUSH
37240: PPUSH
37241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37242: NOP4
37246: PUSH
37247: LD_INT 22
37249: PUSH
37250: NOP4
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 25
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PPUSH
37273: NOP4
37277: ST_TO_ADDR
// if not tmp then
37278: NOP4
37282: NOT
37283: IFFALSE 37287
// exit ;
37285: GO 37343
// un := tmp [ rand ( 1 , tmp ) ] ;
37287: NOP4
37291: PUSH
37292: NOP4
37296: PUSH
37297: LD_INT 1
37299: PPUSH
37300: NOP4
37304: PPUSH
37305: NOP4
37309: ARRAY
37310: ST_TO_ADDR
// if Crawls ( un ) then
37311: NOP4
37315: PPUSH
37316: NOP4
37320: IFFALSE 37331
// ComWalk ( un ) ;
37322: NOP4
37326: PPUSH
37327: NOP4
// SetClass ( un , class_mortar ) ;
37331: NOP4
37335: PPUSH
37336: LD_INT 8
37338: PPUSH
37339: NOP4
// end ;
37343: PPOPN 3
37345: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37346: NOP4
37350: PUSH
37351: NOP4
37355: AND
37356: IFFALSE 37500
37358: GO 37360
37360: DISABLE
37361: LD_INT 0
37363: PPUSH
37364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37365: NOP4
37369: PUSH
37370: LD_INT 22
37372: PUSH
37373: NOP4
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 21
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: LD_INT 34
37397: PUSH
37398: LD_INT 12
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 34
37407: PUSH
37408: LD_INT 51
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 34
37417: PUSH
37418: LD_INT 32
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: PPUSH
37436: NOP4
37440: ST_TO_ADDR
// if not tmp then
37441: NOP4
37445: NOT
37446: IFFALSE 37450
// exit ;
37448: GO 37500
// for i in tmp do
37450: NOP4
37454: PUSH
37455: NOP4
37459: PUSH
37460: FOR_IN
37461: IFFALSE 37498
// if GetCargo ( i , mat_artifact ) = 0 then
37463: NOP4
37467: PPUSH
37468: LD_INT 4
37470: PPUSH
37471: NOP4
37475: PUSH
37476: LD_INT 0
37478: EQUAL
37479: IFFALSE 37496
// SetCargo ( i , mat_siberit , 100 ) ;
37481: NOP4
37485: PPUSH
37486: LD_INT 3
37488: PPUSH
37489: LD_INT 100
37491: PPUSH
37492: NOP4
37496: GO 37460
37498: POP
37499: POP
// end ;
37500: PPOPN 2
37502: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37503: NOP4
37507: PUSH
37508: NOP4
37512: AND
37513: IFFALSE 37696
37515: GO 37517
37517: DISABLE
37518: LD_INT 0
37520: PPUSH
37521: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37522: NOP4
37526: PUSH
37527: LD_INT 22
37529: PUSH
37530: NOP4
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PPUSH
37539: NOP4
37543: ST_TO_ADDR
// if not tmp then
37544: NOP4
37548: NOT
37549: IFFALSE 37553
// exit ;
37551: GO 37696
// for i := 1 to 2 do
37553: NOP4
37557: PUSH
37558: DOUBLE
37559: LD_INT 1
37561: DEC
37562: ST_TO_ADDR
37563: LD_INT 2
37565: PUSH
37566: FOR_TO
37567: IFFALSE 37694
// begin uc_side := your_side ;
37569: LD_ADDR_OWVAR 20
37573: PUSH
37574: NOP4
37578: ST_TO_ADDR
// uc_nation := nation_american ;
37579: LD_ADDR_OWVAR 21
37583: PUSH
37584: LD_INT 1
37586: ST_TO_ADDR
// vc_chassis := us_morphling ;
37587: LD_ADDR_OWVAR 37
37591: PUSH
37592: LD_INT 5
37594: ST_TO_ADDR
// vc_engine := engine_siberite ;
37595: LD_ADDR_OWVAR 39
37599: PUSH
37600: LD_INT 3
37602: ST_TO_ADDR
// vc_control := control_computer ;
37603: LD_ADDR_OWVAR 38
37607: PUSH
37608: LD_INT 3
37610: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37611: LD_ADDR_OWVAR 40
37615: PUSH
37616: LD_INT 10
37618: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37619: NOP4
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: PPUSH
37628: NOP4
37632: NOT
37633: IFFALSE 37680
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37635: NOP4
37639: PPUSH
37640: NOP4
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: PPUSH
37649: NOP4
37653: PPUSH
37654: NOP4
37658: PUSH
37659: LD_INT 1
37661: ARRAY
37662: PPUSH
37663: NOP4
37667: PPUSH
37668: LD_INT 12
37670: PPUSH
37671: LD_INT 1
37673: PPUSH
37674: NOP4
37678: GO 37692
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37680: NOP4
37684: PPUSH
37685: LD_INT 1
37687: PPUSH
37688: NOP4
// end ;
37692: GO 37566
37694: POP
37695: POP
// end ;
37696: PPOPN 2
37698: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37699: NOP4
37703: PUSH
37704: NOP4
37708: AND
37709: IFFALSE 37931
37711: GO 37713
37713: DISABLE
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37722: NOP4
37726: PUSH
37727: LD_INT 22
37729: PUSH
37730: NOP4
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 21
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 3
37751: PUSH
37752: LD_INT 23
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: PPUSH
37771: NOP4
37775: ST_TO_ADDR
// if not tmp then
37776: NOP4
37780: NOT
37781: IFFALSE 37785
// exit ;
37783: GO 37931
// s1 := rand ( 1 , 4 ) ;
37785: NOP4
37789: PUSH
37790: LD_INT 1
37792: PPUSH
37793: LD_INT 4
37795: PPUSH
37796: NOP4
37800: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37801: NOP4
37805: PUSH
37806: NOP4
37810: PUSH
37811: LD_INT 1
37813: ARRAY
37814: PPUSH
37815: NOP4
37819: PPUSH
37820: NOP4
37824: ST_TO_ADDR
// if s1 = 1 then
37825: NOP4
37829: PUSH
37830: LD_INT 1
37832: EQUAL
37833: IFFALSE 37853
// s2 := rand ( 2 , 4 ) else
37835: NOP4
37839: PUSH
37840: LD_INT 2
37842: PPUSH
37843: LD_INT 4
37845: PPUSH
37846: NOP4
37850: ST_TO_ADDR
37851: GO 37861
// s2 := 1 ;
37853: NOP4
37857: PUSH
37858: LD_INT 1
37860: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37861: NOP4
37865: PUSH
37866: NOP4
37870: PUSH
37871: LD_INT 1
37873: ARRAY
37874: PPUSH
37875: NOP4
37879: PPUSH
37880: NOP4
37884: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37885: NOP4
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PPUSH
37894: NOP4
37898: PPUSH
37899: NOP4
37903: PPUSH
37904: NOP4
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37908: NOP4
37912: PUSH
37913: LD_INT 1
37915: ARRAY
37916: PPUSH
37917: NOP4
37921: PPUSH
37922: NOP4
37926: PPUSH
37927: NOP4
// end ;
37931: PPOPN 6
37933: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37934: NOP4
37938: PUSH
37939: NOP4
37943: AND
37944: IFFALSE 38023
37946: GO 37948
37948: DISABLE
37949: LD_INT 0
37951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37952: NOP4
37956: PUSH
37957: LD_INT 22
37959: PUSH
37960: NOP4
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 30
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PPUSH
37983: NOP4
37987: ST_TO_ADDR
// if not tmp then
37988: NOP4
37992: NOT
37993: IFFALSE 37997
// exit ;
37995: GO 38023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37997: NOP4
38001: PUSH
38002: LD_INT 1
38004: PPUSH
38005: NOP4
38009: PPUSH
38010: NOP4
38014: ARRAY
38015: PPUSH
38016: LD_INT 1
38018: PPUSH
38019: NOP4
// end ;
38023: PPOPN 1
38025: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38026: NOP4
38030: PUSH
38031: NOP4
38035: AND
38036: IFFALSE 38148
38038: GO 38040
38040: DISABLE
38041: LD_INT 0
38043: PPUSH
38044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38045: NOP4
38049: PUSH
38050: LD_INT 22
38052: PUSH
38053: NOP4
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 30
38067: PUSH
38068: LD_INT 27
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 30
38077: PUSH
38078: LD_INT 26
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 30
38087: PUSH
38088: LD_INT 28
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PPUSH
38105: NOP4
38109: ST_TO_ADDR
// if not tmp then
38110: NOP4
38114: NOT
38115: IFFALSE 38119
// exit ;
38117: GO 38148
// for i in tmp do
38119: NOP4
38123: PUSH
38124: NOP4
38128: PUSH
38129: FOR_IN
38130: IFFALSE 38146
// SetLives ( i , 1 ) ;
38132: NOP4
38136: PPUSH
38137: LD_INT 1
38139: PPUSH
38140: NOP4
38144: GO 38129
38146: POP
38147: POP
// end ;
38148: PPOPN 2
38150: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38151: NOP4
38155: PUSH
38156: NOP4
38160: AND
38161: IFFALSE 38435
38163: GO 38165
38165: DISABLE
38166: LD_INT 0
38168: PPUSH
38169: PPUSH
38170: PPUSH
// begin i := rand ( 1 , 7 ) ;
38171: NOP4
38175: PUSH
38176: LD_INT 1
38178: PPUSH
38179: LD_INT 7
38181: PPUSH
38182: NOP4
38186: ST_TO_ADDR
// case i of 1 :
38187: NOP4
38191: PUSH
38192: LD_INT 1
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38210
38200: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38201: LD_STRING earthquake(getX(game), 0, 32)
38203: PPUSH
38204: NOP4
38208: GO 38435
38210: LD_INT 2
38212: DOUBLE
38213: EQUAL
38214: IFTRUE 38218
38216: GO 38232
38218: POP
// begin ToLua ( displayStucuk(); ) ;
38219: LD_STRING displayStucuk();
38221: PPUSH
38222: NOP4
// ResetFog ;
38226: NOP4
// end ; 3 :
38230: GO 38435
38232: LD_INT 3
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38344
38240: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38241: NOP4
38245: PUSH
38246: LD_INT 22
38248: PUSH
38249: NOP4
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 25
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PPUSH
38272: NOP4
38276: ST_TO_ADDR
// if not tmp then
38277: NOP4
38281: NOT
38282: IFFALSE 38286
// exit ;
38284: GO 38435
// un := tmp [ rand ( 1 , tmp ) ] ;
38286: NOP4
38290: PUSH
38291: NOP4
38295: PUSH
38296: LD_INT 1
38298: PPUSH
38299: NOP4
38303: PPUSH
38304: NOP4
38308: ARRAY
38309: ST_TO_ADDR
// if Crawls ( un ) then
38310: NOP4
38314: PPUSH
38315: NOP4
38319: IFFALSE 38330
// ComWalk ( un ) ;
38321: NOP4
38325: PPUSH
38326: NOP4
// SetClass ( un , class_mortar ) ;
38330: NOP4
38334: PPUSH
38335: LD_INT 8
38337: PPUSH
38338: NOP4
// end ; 4 :
38342: GO 38435
38344: LD_INT 4
38346: DOUBLE
38347: EQUAL
38348: IFTRUE 38352
38350: GO 38413
38352: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38353: NOP4
38357: PUSH
38358: LD_INT 22
38360: PUSH
38361: NOP4
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_INT 29
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PPUSH
38384: NOP4
38388: ST_TO_ADDR
// if not tmp then
38389: NOP4
38393: NOT
38394: IFFALSE 38398
// exit ;
38396: GO 38435
// DestroyUnit ( tmp [ 1 ] ) ;
38398: NOP4
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: NOP4
// end ; 5 .. 7 :
38411: GO 38435
38413: LD_INT 5
38415: DOUBLE
38416: GREATEREQUAL
38417: IFFALSE 38425
38419: LD_INT 7
38421: DOUBLE
38422: LESSEQUAL
38423: IFTRUE 38427
38425: GO 38434
38427: POP
// StreamSibBomb ; end ;
38428: NOP4
38432: GO 38435
38434: POP
// end ;
38435: PPOPN 3
38437: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38438: NOP4
38442: PUSH
38443: NOP4
38447: AND
38448: IFFALSE 38604
38450: GO 38452
38452: DISABLE
38453: LD_INT 0
38455: PPUSH
38456: PPUSH
38457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38458: NOP4
38462: PUSH
38463: LD_INT 81
38465: PUSH
38466: NOP4
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 21
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 21
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PPUSH
38507: NOP4
38511: ST_TO_ADDR
// if not tmp then
38512: NOP4
38516: NOT
38517: IFFALSE 38521
// exit ;
38519: GO 38604
// p := 0 ;
38521: NOP4
38525: PUSH
38526: LD_INT 0
38528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38529: LD_INT 35
38531: PPUSH
38532: NOP4
// p := p + 1 ;
38536: NOP4
38540: PUSH
38541: NOP4
38545: PUSH
38546: LD_INT 1
38548: PLUS
38549: ST_TO_ADDR
// for i in tmp do
38550: NOP4
38554: PUSH
38555: NOP4
38559: PUSH
38560: FOR_IN
38561: IFFALSE 38592
// if GetLives ( i ) < 1000 then
38563: NOP4
38567: PPUSH
38568: NOP4
38572: PUSH
38573: LD_INT 1000
38575: LESS
38576: IFFALSE 38590
// SetLives ( i , 1000 ) ;
38578: NOP4
38582: PPUSH
38583: LD_INT 1000
38585: PPUSH
38586: NOP4
38590: GO 38560
38592: POP
38593: POP
// until p > 20 ;
38594: NOP4
38598: PUSH
38599: LD_INT 20
38601: GREATER
38602: IFFALSE 38529
// end ;
38604: PPOPN 3
38606: END
// every 0 0$1 trigger StreamModeActive and sTime do
38607: NOP4
38611: PUSH
38612: NOP4
38616: AND
38617: IFFALSE 38652
38619: GO 38621
38621: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38622: LD_INT 28
38624: PPUSH
38625: NOP4
38629: PPUSH
38630: LD_INT 2
38632: PPUSH
38633: NOP4
// SetTech ( tech_tauField , your_side , state_researched ) ;
38637: LD_INT 30
38639: PPUSH
38640: NOP4
38644: PPUSH
38645: LD_INT 2
38647: PPUSH
38648: NOP4
// end ;
38652: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38653: NOP4
38657: PUSH
38658: NOP4
38662: AND
38663: IFFALSE 38784
38665: GO 38667
38667: DISABLE
38668: LD_INT 0
38670: PPUSH
38671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38672: NOP4
38676: PUSH
38677: LD_INT 22
38679: PUSH
38680: NOP4
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 21
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: LD_INT 23
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: PPUSH
38721: NOP4
38725: ST_TO_ADDR
// if not tmp then
38726: NOP4
38730: NOT
38731: IFFALSE 38735
// exit ;
38733: GO 38784
// for i in tmp do
38735: NOP4
38739: PUSH
38740: NOP4
38744: PUSH
38745: FOR_IN
38746: IFFALSE 38782
// begin if Crawls ( i ) then
38748: NOP4
38752: PPUSH
38753: NOP4
38757: IFFALSE 38768
// ComWalk ( i ) ;
38759: NOP4
38763: PPUSH
38764: NOP4
// SetClass ( i , 2 ) ;
38768: NOP4
38772: PPUSH
38773: LD_INT 2
38775: PPUSH
38776: NOP4
// end ;
38780: GO 38745
38782: POP
38783: POP
// end ;
38784: PPOPN 2
38786: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38787: NOP4
38791: PUSH
38792: NOP4
38796: AND
38797: IFFALSE 39078
38799: GO 38801
38801: DISABLE
38802: LD_INT 0
38804: PPUSH
38805: PPUSH
38806: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38807: NOP4
38811: PPUSH
38812: LD_INT 9
38814: PPUSH
38815: LD_INT 1
38817: PPUSH
38818: LD_INT 1
38820: PPUSH
38821: NOP4
// ChangeSideFog ( 9 , your_side ) ;
38825: LD_INT 9
38827: PPUSH
38828: NOP4
38832: PPUSH
38833: NOP4
// uc_side := 9 ;
38837: LD_ADDR_OWVAR 20
38841: PUSH
38842: LD_INT 9
38844: ST_TO_ADDR
// uc_nation := 2 ;
38845: LD_ADDR_OWVAR 21
38849: PUSH
38850: LD_INT 2
38852: ST_TO_ADDR
// hc_name := Dark Warrior ;
38853: LD_ADDR_OWVAR 26
38857: PUSH
38858: LD_STRING Dark Warrior
38860: ST_TO_ADDR
// hc_gallery :=  ;
38861: LD_ADDR_OWVAR 33
38865: PUSH
38866: LD_STRING 
38868: ST_TO_ADDR
// hc_noskilllimit := true ;
38869: LD_ADDR_OWVAR 76
38873: PUSH
38874: LD_INT 1
38876: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38877: LD_ADDR_OWVAR 31
38881: PUSH
38882: LD_INT 30
38884: PUSH
38885: LD_INT 30
38887: PUSH
38888: LD_INT 30
38890: PUSH
38891: LD_INT 30
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// un := CreateHuman ;
38900: NOP4
38904: PUSH
38905: NOP4
38909: ST_TO_ADDR
// hc_noskilllimit := false ;
38910: LD_ADDR_OWVAR 76
38914: PUSH
38915: LD_INT 0
38917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38918: NOP4
38922: PPUSH
38923: LD_INT 1
38925: PPUSH
38926: NOP4
// p := 0 ;
38930: NOP4
38934: PUSH
38935: LD_INT 0
38937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38938: LD_INT 35
38940: PPUSH
38941: NOP4
// p := p + 1 ;
38945: NOP4
38949: PUSH
38950: NOP4
38954: PUSH
38955: LD_INT 1
38957: PLUS
38958: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38959: NOP4
38963: PPUSH
38964: NOP4
38968: PUSH
38969: LD_INT 1000
38971: LESS
38972: IFFALSE 38986
// SetLives ( un , 1000 ) ;
38974: NOP4
38978: PPUSH
38979: LD_INT 1000
38981: PPUSH
38982: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38986: NOP4
38990: PPUSH
38991: LD_INT 81
38993: PUSH
38994: NOP4
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 91
39005: PUSH
39006: NOP4
39010: PUSH
39011: LD_INT 30
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PPUSH
39023: NOP4
39027: PPUSH
39028: NOP4
39032: PPUSH
39033: NOP4
39037: PPUSH
39038: NOP4
// until p > 60 or IsDead ( un ) ;
39042: NOP4
39046: PUSH
39047: LD_INT 60
39049: GREATER
39050: PUSH
39051: NOP4
39055: PPUSH
39056: NOP4
39060: OR
39061: IFFALSE 38938
// if un then
39063: NOP4
39067: IFFALSE 39078
// RemoveUnit ( un ) ;
39069: NOP4
39073: PPUSH
39074: NOP4
// end ;
39078: PPOPN 3
39080: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39081: LD_INT 0
39083: PPUSH
// case cmd of 301 :
39084: NOP4
39088: PUSH
39089: LD_INT 301
39091: DOUBLE
39092: EQUAL
39093: IFTRUE 39097
39095: GO 39129
39097: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39098: NOP4
39102: PPUSH
39103: NOP4
39107: PPUSH
39108: NOP4
39112: PPUSH
39113: NOP4
39117: PPUSH
39118: NOP4
39122: PPUSH
39123: NOP4
39127: GO 39250
39129: LD_INT 302
39131: DOUBLE
39132: EQUAL
39133: IFTRUE 39137
39135: GO 39174
39137: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39138: NOP4
39142: PPUSH
39143: NOP4
39147: PPUSH
39148: NOP4
39152: PPUSH
39153: NOP4
39157: PPUSH
39158: NOP4
39162: PPUSH
39163: NOP4
39167: PPUSH
39168: NOP4
39172: GO 39250
39174: LD_INT 303
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39182
39180: GO 39219
39182: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39183: NOP4
39187: PPUSH
39188: NOP4
39192: PPUSH
39193: NOP4
39197: PPUSH
39198: NOP4
39202: PPUSH
39203: NOP4
39207: PPUSH
39208: NOP4
39212: PPUSH
39213: NOP4
39217: GO 39250
39219: LD_INT 304
39221: DOUBLE
39222: EQUAL
39223: IFTRUE 39227
39225: GO 39249
39227: POP
// hHackTeleport ( unit , x , y ) ; end ;
39228: NOP4
39232: PPUSH
39233: NOP4
39237: PPUSH
39238: NOP4
39242: PPUSH
39243: NOP4
39247: GO 39250
39249: POP
// end ;
39250: LD_VAR 0 12
39254: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39255: LD_INT 0
39257: PPUSH
39258: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39259: NOP4
39263: PUSH
39264: LD_INT 1
39266: LESS
39267: PUSH
39268: NOP4
39272: PUSH
39273: LD_INT 3
39275: GREATER
39276: OR
39277: PUSH
39278: NOP4
39282: PPUSH
39283: NOP4
39287: PPUSH
39288: NOP4
39292: OR
39293: IFFALSE 39297
// exit ;
39295: GO 40017
// uc_side := your_side ;
39297: LD_ADDR_OWVAR 20
39301: PUSH
39302: NOP4
39306: ST_TO_ADDR
// uc_nation := nation ;
39307: LD_ADDR_OWVAR 21
39311: PUSH
39312: NOP4
39316: ST_TO_ADDR
// bc_level = 1 ;
39317: LD_ADDR_OWVAR 43
39321: PUSH
39322: LD_INT 1
39324: ST_TO_ADDR
// case btype of 1 :
39325: NOP4
39329: PUSH
39330: LD_INT 1
39332: DOUBLE
39333: EQUAL
39334: IFTRUE 39338
39336: GO 39349
39338: POP
// bc_type := b_depot ; 2 :
39339: LD_ADDR_OWVAR 42
39343: PUSH
39344: LD_INT 0
39346: ST_TO_ADDR
39347: GO 39961
39349: LD_INT 2
39351: DOUBLE
39352: EQUAL
39353: IFTRUE 39357
39355: GO 39368
39357: POP
// bc_type := b_warehouse ; 3 :
39358: LD_ADDR_OWVAR 42
39362: PUSH
39363: LD_INT 1
39365: ST_TO_ADDR
39366: GO 39961
39368: LD_INT 3
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39387
39376: POP
// bc_type := b_lab ; 4 .. 9 :
39377: LD_ADDR_OWVAR 42
39381: PUSH
39382: LD_INT 6
39384: ST_TO_ADDR
39385: GO 39961
39387: LD_INT 4
39389: DOUBLE
39390: GREATEREQUAL
39391: IFFALSE 39399
39393: LD_INT 9
39395: DOUBLE
39396: LESSEQUAL
39397: IFTRUE 39401
39399: GO 39453
39401: POP
// begin bc_type := b_lab_half ;
39402: LD_ADDR_OWVAR 42
39406: PUSH
39407: LD_INT 7
39409: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39410: LD_ADDR_OWVAR 44
39414: PUSH
39415: LD_INT 10
39417: PUSH
39418: LD_INT 11
39420: PUSH
39421: LD_INT 12
39423: PUSH
39424: LD_INT 15
39426: PUSH
39427: LD_INT 14
39429: PUSH
39430: LD_INT 13
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: PUSH
39441: NOP4
39445: PUSH
39446: LD_INT 3
39448: MINUS
39449: ARRAY
39450: ST_TO_ADDR
// end ; 10 .. 13 :
39451: GO 39961
39453: LD_INT 10
39455: DOUBLE
39456: GREATEREQUAL
39457: IFFALSE 39465
39459: LD_INT 13
39461: DOUBLE
39462: LESSEQUAL
39463: IFTRUE 39467
39465: GO 39544
39467: POP
// begin bc_type := b_lab_full ;
39468: LD_ADDR_OWVAR 42
39472: PUSH
39473: LD_INT 8
39475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
39476: LD_ADDR_OWVAR 44
39480: PUSH
39481: LD_INT 10
39483: PUSH
39484: LD_INT 12
39486: PUSH
39487: LD_INT 14
39489: PUSH
39490: LD_INT 13
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: PUSH
39499: NOP4
39503: PUSH
39504: LD_INT 9
39506: MINUS
39507: ARRAY
39508: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
39509: LD_ADDR_OWVAR 45
39513: PUSH
39514: LD_INT 11
39516: PUSH
39517: LD_INT 15
39519: PUSH
39520: LD_INT 12
39522: PUSH
39523: LD_INT 15
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: PUSH
39532: NOP4
39536: PUSH
39537: LD_INT 9
39539: MINUS
39540: ARRAY
39541: ST_TO_ADDR
// end ; 14 :
39542: GO 39961
39544: LD_INT 14
39546: DOUBLE
39547: EQUAL
39548: IFTRUE 39552
39550: GO 39563
39552: POP
// bc_type := b_workshop ; 15 :
39553: LD_ADDR_OWVAR 42
39557: PUSH
39558: LD_INT 2
39560: ST_TO_ADDR
39561: GO 39961
39563: LD_INT 15
39565: DOUBLE
39566: EQUAL
39567: IFTRUE 39571
39569: GO 39582
39571: POP
// bc_type := b_factory ; 16 :
39572: LD_ADDR_OWVAR 42
39576: PUSH
39577: LD_INT 3
39579: ST_TO_ADDR
39580: GO 39961
39582: LD_INT 16
39584: DOUBLE
39585: EQUAL
39586: IFTRUE 39590
39588: GO 39601
39590: POP
// bc_type := b_ext_gun ; 17 :
39591: LD_ADDR_OWVAR 42
39595: PUSH
39596: LD_INT 17
39598: ST_TO_ADDR
39599: GO 39961
39601: LD_INT 17
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39609
39607: GO 39637
39609: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
39610: LD_ADDR_OWVAR 42
39614: PUSH
39615: LD_INT 19
39617: PUSH
39618: LD_INT 23
39620: PUSH
39621: LD_INT 19
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: PUSH
39629: NOP4
39633: ARRAY
39634: ST_TO_ADDR
39635: GO 39961
39637: LD_INT 18
39639: DOUBLE
39640: EQUAL
39641: IFTRUE 39645
39643: GO 39656
39645: POP
// bc_type := b_ext_radar ; 19 :
39646: LD_ADDR_OWVAR 42
39650: PUSH
39651: LD_INT 20
39653: ST_TO_ADDR
39654: GO 39961
39656: LD_INT 19
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39675
39664: POP
// bc_type := b_ext_radio ; 20 :
39665: LD_ADDR_OWVAR 42
39669: PUSH
39670: LD_INT 22
39672: ST_TO_ADDR
39673: GO 39961
39675: LD_INT 20
39677: DOUBLE
39678: EQUAL
39679: IFTRUE 39683
39681: GO 39694
39683: POP
// bc_type := b_ext_siberium ; 21 :
39684: LD_ADDR_OWVAR 42
39688: PUSH
39689: LD_INT 21
39691: ST_TO_ADDR
39692: GO 39961
39694: LD_INT 21
39696: DOUBLE
39697: EQUAL
39698: IFTRUE 39702
39700: GO 39713
39702: POP
// bc_type := b_ext_computer ; 22 :
39703: LD_ADDR_OWVAR 42
39707: PUSH
39708: LD_INT 24
39710: ST_TO_ADDR
39711: GO 39961
39713: LD_INT 22
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 39732
39721: POP
// bc_type := b_ext_track ; 23 :
39722: LD_ADDR_OWVAR 42
39726: PUSH
39727: LD_INT 16
39729: ST_TO_ADDR
39730: GO 39961
39732: LD_INT 23
39734: DOUBLE
39735: EQUAL
39736: IFTRUE 39740
39738: GO 39751
39740: POP
// bc_type := b_ext_laser ; 24 :
39741: LD_ADDR_OWVAR 42
39745: PUSH
39746: LD_INT 25
39748: ST_TO_ADDR
39749: GO 39961
39751: LD_INT 24
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39770
39759: POP
// bc_type := b_control_tower ; 25 :
39760: LD_ADDR_OWVAR 42
39764: PUSH
39765: LD_INT 36
39767: ST_TO_ADDR
39768: GO 39961
39770: LD_INT 25
39772: DOUBLE
39773: EQUAL
39774: IFTRUE 39778
39776: GO 39789
39778: POP
// bc_type := b_breastwork ; 26 :
39779: LD_ADDR_OWVAR 42
39783: PUSH
39784: LD_INT 31
39786: ST_TO_ADDR
39787: GO 39961
39789: LD_INT 26
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39808
39797: POP
// bc_type := b_bunker ; 27 :
39798: LD_ADDR_OWVAR 42
39802: PUSH
39803: LD_INT 32
39805: ST_TO_ADDR
39806: GO 39961
39808: LD_INT 27
39810: DOUBLE
39811: EQUAL
39812: IFTRUE 39816
39814: GO 39827
39816: POP
// bc_type := b_turret ; 28 :
39817: LD_ADDR_OWVAR 42
39821: PUSH
39822: LD_INT 33
39824: ST_TO_ADDR
39825: GO 39961
39827: LD_INT 28
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39835
39833: GO 39846
39835: POP
// bc_type := b_armoury ; 29 :
39836: LD_ADDR_OWVAR 42
39840: PUSH
39841: LD_INT 4
39843: ST_TO_ADDR
39844: GO 39961
39846: LD_INT 29
39848: DOUBLE
39849: EQUAL
39850: IFTRUE 39854
39852: GO 39865
39854: POP
// bc_type := b_barracks ; 30 :
39855: LD_ADDR_OWVAR 42
39859: PUSH
39860: LD_INT 5
39862: ST_TO_ADDR
39863: GO 39961
39865: LD_INT 30
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39884
39873: POP
// bc_type := b_solar_power ; 31 :
39874: LD_ADDR_OWVAR 42
39878: PUSH
39879: LD_INT 27
39881: ST_TO_ADDR
39882: GO 39961
39884: LD_INT 31
39886: DOUBLE
39887: EQUAL
39888: IFTRUE 39892
39890: GO 39903
39892: POP
// bc_type := b_oil_power ; 32 :
39893: LD_ADDR_OWVAR 42
39897: PUSH
39898: LD_INT 26
39900: ST_TO_ADDR
39901: GO 39961
39903: LD_INT 32
39905: DOUBLE
39906: EQUAL
39907: IFTRUE 39911
39909: GO 39922
39911: POP
// bc_type := b_siberite_power ; 33 :
39912: LD_ADDR_OWVAR 42
39916: PUSH
39917: LD_INT 28
39919: ST_TO_ADDR
39920: GO 39961
39922: LD_INT 33
39924: DOUBLE
39925: EQUAL
39926: IFTRUE 39930
39928: GO 39941
39930: POP
// bc_type := b_oil_mine ; 34 :
39931: LD_ADDR_OWVAR 42
39935: PUSH
39936: LD_INT 29
39938: ST_TO_ADDR
39939: GO 39961
39941: LD_INT 34
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39949
39947: GO 39960
39949: POP
// bc_type := b_siberite_mine ; end ;
39950: LD_ADDR_OWVAR 42
39954: PUSH
39955: LD_INT 30
39957: ST_TO_ADDR
39958: GO 39961
39960: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39961: NOP4
39965: PUSH
39966: NOP4
39970: PPUSH
39971: NOP4
39975: PPUSH
39976: NOP4
39980: PPUSH
39981: NOP4
39985: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39986: NOP4
39990: PUSH
39991: LD_INT 32
39993: PUSH
39994: LD_INT 33
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: IN
40001: IFFALSE 40017
// PlaceWeaponTurret ( b , weapon ) ;
40003: NOP4
40007: PPUSH
40008: NOP4
40012: PPUSH
40013: NOP4
// end ;
40017: LD_VAR 0 7
40021: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40022: LD_INT 0
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40028: NOP4
40032: PUSH
40033: LD_INT 22
40035: PUSH
40036: NOP4
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 30
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: NOP4
40081: ST_TO_ADDR
// if not tmp then
40082: NOP4
40086: NOT
40087: IFFALSE 40091
// exit ;
40089: GO 40150
// for i in tmp do
40091: NOP4
40095: PUSH
40096: NOP4
40100: PUSH
40101: FOR_IN
40102: IFFALSE 40148
// for j = 1 to 3 do
40104: NOP4
40108: PUSH
40109: DOUBLE
40110: LD_INT 1
40112: DEC
40113: ST_TO_ADDR
40114: LD_INT 3
40116: PUSH
40117: FOR_TO
40118: IFFALSE 40144
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40120: NOP4
40124: PPUSH
40125: NOP4
40129: PPUSH
40130: NOP4
40134: PPUSH
40135: LD_INT 99999
40137: PPUSH
40138: NOP4
40142: GO 40117
40144: POP
40145: POP
40146: GO 40101
40148: POP
40149: POP
// end ;
40150: LD_VAR 0 1
40154: RET
// export function hHackSetLevel10 ; var i , j ; begin
40155: LD_INT 0
40157: PPUSH
40158: PPUSH
40159: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40160: NOP4
40164: PUSH
40165: LD_INT 21
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PPUSH
40175: NOP4
40179: PUSH
40180: FOR_IN
40181: IFFALSE 40233
// if IsSelected ( i ) then
40183: NOP4
40187: PPUSH
40188: NOP4
40192: IFFALSE 40231
// begin for j := 1 to 4 do
40194: NOP4
40198: PUSH
40199: DOUBLE
40200: LD_INT 1
40202: DEC
40203: ST_TO_ADDR
40204: LD_INT 4
40206: PUSH
40207: FOR_TO
40208: IFFALSE 40229
// SetSkill ( i , j , 10 ) ;
40210: NOP4
40214: PPUSH
40215: NOP4
40219: PPUSH
40220: LD_INT 10
40222: PPUSH
40223: NOP4
40227: GO 40207
40229: POP
40230: POP
// end ;
40231: GO 40180
40233: POP
40234: POP
// end ;
40235: LD_VAR 0 1
40239: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
40244: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40245: NOP4
40249: PUSH
40250: LD_INT 22
40252: PUSH
40253: NOP4
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 21
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PPUSH
40276: NOP4
40280: PUSH
40281: FOR_IN
40282: IFFALSE 40323
// begin for j := 1 to 4 do
40284: NOP4
40288: PUSH
40289: DOUBLE
40290: LD_INT 1
40292: DEC
40293: ST_TO_ADDR
40294: LD_INT 4
40296: PUSH
40297: FOR_TO
40298: IFFALSE 40319
// SetSkill ( i , j , 10 ) ;
40300: NOP4
40304: PPUSH
40305: NOP4
40309: PPUSH
40310: LD_INT 10
40312: PPUSH
40313: NOP4
40317: GO 40297
40319: POP
40320: POP
// end ;
40321: GO 40281
40323: POP
40324: POP
// end ;
40325: LD_VAR 0 1
40329: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40330: LD_INT 0
40332: PPUSH
// uc_side := your_side ;
40333: LD_ADDR_OWVAR 20
40337: PUSH
40338: NOP4
40342: ST_TO_ADDR
// uc_nation := nation ;
40343: LD_ADDR_OWVAR 21
40347: PUSH
40348: NOP4
40352: ST_TO_ADDR
// InitHc ;
40353: NOP4
// PrepareHuman ( false , class , skill ) ;
40357: LD_INT 0
40359: PPUSH
40360: NOP4
40364: PPUSH
40365: NOP4
40369: PPUSH
40370: NOP4
// if HexInfo ( x , y ) = 0 then
40374: NOP4
40378: PPUSH
40379: NOP4
40383: PPUSH
40384: NOP4
40388: PUSH
40389: LD_INT 0
40391: EQUAL
40392: IFFALSE 40416
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40394: NOP4
40398: PPUSH
40399: NOP4
40403: PPUSH
40404: NOP4
40408: PPUSH
40409: LD_INT 1
40411: PPUSH
40412: NOP4
// end ;
40416: LD_VAR 0 6
40420: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40421: LD_INT 0
40423: PPUSH
40424: PPUSH
// uc_side := your_side ;
40425: LD_ADDR_OWVAR 20
40429: PUSH
40430: NOP4
40434: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40435: NOP4
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 4
40451: PUSH
40452: LD_INT 5
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: IN
40462: IFFALSE 40474
// uc_nation := nation_american else
40464: LD_ADDR_OWVAR 21
40468: PUSH
40469: LD_INT 1
40471: ST_TO_ADDR
40472: GO 40517
// if chassis in [ 11 , 12 , 13 , 14 ] then
40474: NOP4
40478: PUSH
40479: LD_INT 11
40481: PUSH
40482: LD_INT 12
40484: PUSH
40485: LD_INT 13
40487: PUSH
40488: LD_INT 14
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: IN
40497: IFFALSE 40509
// uc_nation := nation_arabian else
40499: LD_ADDR_OWVAR 21
40503: PUSH
40504: LD_INT 2
40506: ST_TO_ADDR
40507: GO 40517
// uc_nation := nation_russian ;
40509: LD_ADDR_OWVAR 21
40513: PUSH
40514: LD_INT 3
40516: ST_TO_ADDR
// vc_chassis := chassis ;
40517: LD_ADDR_OWVAR 37
40521: PUSH
40522: NOP4
40526: ST_TO_ADDR
// vc_engine := engine ;
40527: LD_ADDR_OWVAR 39
40531: PUSH
40532: NOP4
40536: ST_TO_ADDR
// vc_control := control ;
40537: LD_ADDR_OWVAR 38
40541: PUSH
40542: NOP4
40546: ST_TO_ADDR
// vc_weapon := weapon ;
40547: LD_ADDR_OWVAR 40
40551: PUSH
40552: NOP4
40556: ST_TO_ADDR
// un := CreateVehicle ;
40557: NOP4
40561: PUSH
40562: NOP4
40566: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
40567: NOP4
40571: PPUSH
40572: LD_INT 0
40574: PPUSH
40575: LD_INT 5
40577: PPUSH
40578: NOP4
40582: PPUSH
40583: NOP4
// PlaceUnitXY ( un , x , y , true ) ;
40587: NOP4
40591: PPUSH
40592: NOP4
40596: PPUSH
40597: NOP4
40601: PPUSH
40602: LD_INT 1
40604: PPUSH
40605: NOP4
// end ;
40609: LD_VAR 0 7
40613: RET
// export hInvincible ; every 1 do
40614: GO 40616
40616: DISABLE
// hInvincible := [ ] ;
40617: NOP4
40621: PUSH
40622: EMPTY
40623: ST_TO_ADDR
40624: END
// every 10 do var i ;
40625: GO 40627
40627: DISABLE
40628: LD_INT 0
40630: PPUSH
// begin enable ;
40631: ENABLE
// if not hInvincible then
40632: NOP4
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 40685
// for i in hInvincible do
40641: NOP4
40645: PUSH
40646: NOP4
40650: PUSH
40651: FOR_IN
40652: IFFALSE 40683
// if GetLives ( i ) < 1000 then
40654: NOP4
40658: PPUSH
40659: NOP4
40663: PUSH
40664: LD_INT 1000
40666: LESS
40667: IFFALSE 40681
// SetLives ( i , 1000 ) ;
40669: NOP4
40673: PPUSH
40674: LD_INT 1000
40676: PPUSH
40677: NOP4
40681: GO 40651
40683: POP
40684: POP
// end ;
40685: PPOPN 1
40687: END
// export function hHackInvincible ; var i ; begin
40688: LD_INT 0
40690: PPUSH
40691: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
40692: NOP4
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 21
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 21
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: LIST
40724: PPUSH
40725: NOP4
40729: PUSH
40730: FOR_IN
40731: IFFALSE 40792
// if IsSelected ( i ) then
40733: NOP4
40737: PPUSH
40738: NOP4
40742: IFFALSE 40790
// begin if i in hInvincible then
40744: NOP4
40748: PUSH
40749: NOP4
40753: IN
40754: IFFALSE 40774
// hInvincible := hInvincible diff i else
40756: NOP4
40760: PUSH
40761: NOP4
40765: PUSH
40766: NOP4
40770: DIFF
40771: ST_TO_ADDR
40772: GO 40790
// hInvincible := hInvincible union i ;
40774: NOP4
40778: PUSH
40779: NOP4
40783: PUSH
40784: NOP4
40788: UNION
40789: ST_TO_ADDR
// end ;
40790: GO 40730
40792: POP
40793: POP
// end ;
40794: LD_VAR 0 1
40798: RET
// export function hHackInvisible ; var i , j ; begin
40799: LD_INT 0
40801: PPUSH
40802: PPUSH
40803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40804: NOP4
40808: PUSH
40809: LD_INT 21
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: NOP4
40823: PUSH
40824: FOR_IN
40825: IFFALSE 40849
// if IsSelected ( i ) then
40827: NOP4
40831: PPUSH
40832: NOP4
40836: IFFALSE 40847
// ComForceInvisible ( i ) ;
40838: NOP4
40842: PPUSH
40843: NOP4
40847: GO 40824
40849: POP
40850: POP
// end ;
40851: LD_VAR 0 1
40855: RET
// export function hHackChangeYourSide ; begin
40856: LD_INT 0
40858: PPUSH
// if your_side = 8 then
40859: NOP4
40863: PUSH
40864: LD_INT 8
40866: EQUAL
40867: IFFALSE 40879
// your_side := 0 else
40869: LD_ADDR_OWVAR 2
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
40877: GO 40893
// your_side := your_side + 1 ;
40879: LD_ADDR_OWVAR 2
40883: PUSH
40884: NOP4
40888: PUSH
40889: LD_INT 1
40891: PLUS
40892: ST_TO_ADDR
// end ;
40893: LD_VAR 0 1
40897: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
40902: PPUSH
// for i in all_units do
40903: NOP4
40907: PUSH
40908: NOP4
40912: PUSH
40913: FOR_IN
40914: IFFALSE 40992
// if IsSelected ( i ) then
40916: NOP4
40920: PPUSH
40921: NOP4
40925: IFFALSE 40990
// begin j := GetSide ( i ) ;
40927: NOP4
40931: PUSH
40932: NOP4
40936: PPUSH
40937: NOP4
40941: ST_TO_ADDR
// if j = 8 then
40942: NOP4
40946: PUSH
40947: LD_INT 8
40949: EQUAL
40950: IFFALSE 40962
// j := 0 else
40952: NOP4
40956: PUSH
40957: LD_INT 0
40959: ST_TO_ADDR
40960: GO 40976
// j := j + 1 ;
40962: NOP4
40966: PUSH
40967: NOP4
40971: PUSH
40972: LD_INT 1
40974: PLUS
40975: ST_TO_ADDR
// SetSide ( i , j ) ;
40976: NOP4
40980: PPUSH
40981: NOP4
40985: PPUSH
40986: NOP4
// end ;
40990: GO 40913
40992: POP
40993: POP
// end ;
40994: LD_VAR 0 1
40998: RET
// export function hHackFog ; begin
40999: LD_INT 0
41001: PPUSH
// FogOff ( true ) ;
41002: LD_INT 1
41004: PPUSH
41005: NOP4
// end ;
41009: LD_VAR 0 1
41013: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41014: LD_INT 0
41016: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41017: NOP4
41021: PPUSH
41022: NOP4
41026: PPUSH
41027: NOP4
41031: PPUSH
41032: LD_INT 1
41034: PPUSH
41035: LD_INT 1
41037: PPUSH
41038: NOP4
// CenterOnXY ( x , y ) ;
41042: NOP4
41046: PPUSH
41047: NOP4
41051: PPUSH
41052: NOP4
// end ; end_of_file
41056: LD_VAR 0 4
41060: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41061: LD_INT 0
41063: PPUSH
41064: PPUSH
// if exist_mode then
41065: NOP4
41069: IFFALSE 41094
// unit := CreateCharacter ( prefix & ident ) else
41071: NOP4
41075: PUSH
41076: NOP4
41080: PUSH
41081: NOP4
41085: STR
41086: PPUSH
41087: NOP4
41091: ST_TO_ADDR
41092: GO 41109
// unit := NewCharacter ( ident ) ;
41094: NOP4
41098: PUSH
41099: NOP4
41103: PPUSH
41104: NOP4
41108: ST_TO_ADDR
// result := unit ;
41109: NOP4
41113: PUSH
41114: NOP4
41118: ST_TO_ADDR
// end ;
41119: LD_VAR 0 4
41123: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41124: LD_INT 0
41126: PPUSH
41127: PPUSH
// if not side or not nation then
41128: NOP4
41132: NOT
41133: PUSH
41134: NOP4
41138: NOT
41139: OR
41140: IFFALSE 41144
// exit ;
41142: GO 41908
// case nation of nation_american :
41144: NOP4
41148: PUSH
41149: LD_INT 1
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41371
41157: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41158: NOP4
41162: PUSH
41163: LD_INT 35
41165: PUSH
41166: LD_INT 45
41168: PUSH
41169: LD_INT 46
41171: PUSH
41172: LD_INT 47
41174: PUSH
41175: LD_INT 82
41177: PUSH
41178: LD_INT 83
41180: PUSH
41181: LD_INT 84
41183: PUSH
41184: LD_INT 85
41186: PUSH
41187: LD_INT 86
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 6
41198: PUSH
41199: LD_INT 15
41201: PUSH
41202: LD_INT 16
41204: PUSH
41205: LD_INT 7
41207: PUSH
41208: LD_INT 12
41210: PUSH
41211: LD_INT 13
41213: PUSH
41214: LD_INT 10
41216: PUSH
41217: LD_INT 14
41219: PUSH
41220: LD_INT 20
41222: PUSH
41223: LD_INT 21
41225: PUSH
41226: LD_INT 22
41228: PUSH
41229: LD_INT 25
41231: PUSH
41232: LD_INT 32
41234: PUSH
41235: LD_INT 27
41237: PUSH
41238: LD_INT 36
41240: PUSH
41241: LD_INT 69
41243: PUSH
41244: LD_INT 39
41246: PUSH
41247: LD_INT 34
41249: PUSH
41250: LD_INT 40
41252: PUSH
41253: LD_INT 48
41255: PUSH
41256: LD_INT 49
41258: PUSH
41259: LD_INT 50
41261: PUSH
41262: LD_INT 51
41264: PUSH
41265: LD_INT 52
41267: PUSH
41268: LD_INT 53
41270: PUSH
41271: LD_INT 54
41273: PUSH
41274: LD_INT 55
41276: PUSH
41277: LD_INT 56
41279: PUSH
41280: LD_INT 57
41282: PUSH
41283: LD_INT 58
41285: PUSH
41286: LD_INT 59
41288: PUSH
41289: LD_INT 60
41291: PUSH
41292: LD_INT 61
41294: PUSH
41295: LD_INT 62
41297: PUSH
41298: LD_INT 80
41300: PUSH
41301: LD_INT 82
41303: PUSH
41304: LD_INT 83
41306: PUSH
41307: LD_INT 84
41309: PUSH
41310: LD_INT 85
41312: PUSH
41313: LD_INT 86
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
41369: GO 41832
41371: LD_INT 2
41373: DOUBLE
41374: EQUAL
41375: IFTRUE 41379
41377: GO 41601
41379: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41380: NOP4
41384: PUSH
41385: LD_INT 35
41387: PUSH
41388: LD_INT 45
41390: PUSH
41391: LD_INT 46
41393: PUSH
41394: LD_INT 47
41396: PUSH
41397: LD_INT 82
41399: PUSH
41400: LD_INT 83
41402: PUSH
41403: LD_INT 84
41405: PUSH
41406: LD_INT 85
41408: PUSH
41409: LD_INT 87
41411: PUSH
41412: LD_INT 70
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 11
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 4
41426: PUSH
41427: LD_INT 5
41429: PUSH
41430: LD_INT 6
41432: PUSH
41433: LD_INT 15
41435: PUSH
41436: LD_INT 18
41438: PUSH
41439: LD_INT 7
41441: PUSH
41442: LD_INT 17
41444: PUSH
41445: LD_INT 8
41447: PUSH
41448: LD_INT 20
41450: PUSH
41451: LD_INT 21
41453: PUSH
41454: LD_INT 22
41456: PUSH
41457: LD_INT 72
41459: PUSH
41460: LD_INT 26
41462: PUSH
41463: LD_INT 69
41465: PUSH
41466: LD_INT 39
41468: PUSH
41469: LD_INT 40
41471: PUSH
41472: LD_INT 41
41474: PUSH
41475: LD_INT 42
41477: PUSH
41478: LD_INT 43
41480: PUSH
41481: LD_INT 48
41483: PUSH
41484: LD_INT 49
41486: PUSH
41487: LD_INT 50
41489: PUSH
41490: LD_INT 51
41492: PUSH
41493: LD_INT 52
41495: PUSH
41496: LD_INT 53
41498: PUSH
41499: LD_INT 54
41501: PUSH
41502: LD_INT 55
41504: PUSH
41505: LD_INT 56
41507: PUSH
41508: LD_INT 60
41510: PUSH
41511: LD_INT 61
41513: PUSH
41514: LD_INT 62
41516: PUSH
41517: LD_INT 66
41519: PUSH
41520: LD_INT 67
41522: PUSH
41523: LD_INT 68
41525: PUSH
41526: LD_INT 81
41528: PUSH
41529: LD_INT 82
41531: PUSH
41532: LD_INT 83
41534: PUSH
41535: LD_INT 84
41537: PUSH
41538: LD_INT 85
41540: PUSH
41541: LD_INT 87
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
41599: GO 41832
41601: LD_INT 3
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41831
41609: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41610: NOP4
41614: PUSH
41615: LD_INT 46
41617: PUSH
41618: LD_INT 47
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 82
41629: PUSH
41630: LD_INT 83
41632: PUSH
41633: LD_INT 84
41635: PUSH
41636: LD_INT 85
41638: PUSH
41639: LD_INT 86
41641: PUSH
41642: LD_INT 11
41644: PUSH
41645: LD_INT 9
41647: PUSH
41648: LD_INT 20
41650: PUSH
41651: LD_INT 19
41653: PUSH
41654: LD_INT 21
41656: PUSH
41657: LD_INT 24
41659: PUSH
41660: LD_INT 22
41662: PUSH
41663: LD_INT 25
41665: PUSH
41666: LD_INT 28
41668: PUSH
41669: LD_INT 29
41671: PUSH
41672: LD_INT 30
41674: PUSH
41675: LD_INT 31
41677: PUSH
41678: LD_INT 37
41680: PUSH
41681: LD_INT 38
41683: PUSH
41684: LD_INT 32
41686: PUSH
41687: LD_INT 27
41689: PUSH
41690: LD_INT 33
41692: PUSH
41693: LD_INT 69
41695: PUSH
41696: LD_INT 39
41698: PUSH
41699: LD_INT 34
41701: PUSH
41702: LD_INT 40
41704: PUSH
41705: LD_INT 71
41707: PUSH
41708: LD_INT 23
41710: PUSH
41711: LD_INT 44
41713: PUSH
41714: LD_INT 48
41716: PUSH
41717: LD_INT 49
41719: PUSH
41720: LD_INT 50
41722: PUSH
41723: LD_INT 51
41725: PUSH
41726: LD_INT 52
41728: PUSH
41729: LD_INT 53
41731: PUSH
41732: LD_INT 54
41734: PUSH
41735: LD_INT 55
41737: PUSH
41738: LD_INT 56
41740: PUSH
41741: LD_INT 57
41743: PUSH
41744: LD_INT 58
41746: PUSH
41747: LD_INT 59
41749: PUSH
41750: LD_INT 63
41752: PUSH
41753: LD_INT 64
41755: PUSH
41756: LD_INT 65
41758: PUSH
41759: LD_INT 82
41761: PUSH
41762: LD_INT 83
41764: PUSH
41765: LD_INT 84
41767: PUSH
41768: LD_INT 85
41770: PUSH
41771: LD_INT 86
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
41829: GO 41832
41831: POP
// if state > - 1 and state < 3 then
41832: NOP4
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: GREATER
41841: PUSH
41842: NOP4
41846: PUSH
41847: LD_INT 3
41849: LESS
41850: AND
41851: IFFALSE 41908
// for i in result do
41853: NOP4
41857: PUSH
41858: NOP4
41862: PUSH
41863: FOR_IN
41864: IFFALSE 41906
// if GetTech ( i , side ) <> state then
41866: NOP4
41870: PPUSH
41871: NOP4
41875: PPUSH
41876: NOP4
41880: PUSH
41881: NOP4
41885: NONEQUAL
41886: IFFALSE 41904
// result := result diff i ;
41888: NOP4
41892: PUSH
41893: NOP4
41897: PUSH
41898: NOP4
41902: DIFF
41903: ST_TO_ADDR
41904: GO 41863
41906: POP
41907: POP
// end ;
41908: LD_VAR 0 4
41912: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41913: LD_INT 0
41915: PPUSH
41916: PPUSH
41917: PPUSH
// result := true ;
41918: NOP4
41922: PUSH
41923: LD_INT 1
41925: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41926: NOP4
41930: PUSH
41931: NOP4
41935: PPUSH
41936: NOP4
41940: ST_TO_ADDR
// if not tmp then
41941: NOP4
41945: NOT
41946: IFFALSE 41950
// exit ;
41948: GO 41999
// for i in tmp do
41950: NOP4
41954: PUSH
41955: NOP4
41959: PUSH
41960: FOR_IN
41961: IFFALSE 41997
// if GetTech ( i , side ) <> state_researched then
41963: NOP4
41967: PPUSH
41968: NOP4
41972: PPUSH
41973: NOP4
41977: PUSH
41978: LD_INT 2
41980: NONEQUAL
41981: IFFALSE 41995
// begin result := false ;
41983: NOP4
41987: PUSH
41988: LD_INT 0
41990: ST_TO_ADDR
// exit ;
41991: POP
41992: POP
41993: GO 41999
// end ;
41995: GO 41960
41997: POP
41998: POP
// end ;
41999: LD_VAR 0 3
42003: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42004: LD_INT 0
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42019: NOP4
42023: NOT
42024: PUSH
42025: NOP4
42029: PPUSH
42030: NOP4
42034: PUSH
42035: LD_INT 9
42037: NONEQUAL
42038: OR
42039: IFFALSE 42043
// exit ;
42041: GO 42616
// side := GetSide ( unit ) ;
42043: NOP4
42047: PUSH
42048: NOP4
42052: PPUSH
42053: NOP4
42057: ST_TO_ADDR
// tech_space := tech_spacanom ;
42058: NOP4
42062: PUSH
42063: LD_INT 29
42065: ST_TO_ADDR
// tech_time := tech_taurad ;
42066: NOP4
42070: PUSH
42071: LD_INT 28
42073: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42074: NOP4
42078: PUSH
42079: NOP4
42083: PPUSH
42084: NOP4
42088: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42089: NOP4
42093: PPUSH
42094: NOP4
42098: PUSH
42099: LD_INT 2
42101: EQUAL
42102: IFFALSE 42106
// exit ;
42104: GO 42616
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42106: NOP4
42110: PUSH
42111: LD_INT 81
42113: PUSH
42114: NOP4
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 21
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PPUSH
42144: NOP4
42148: ST_TO_ADDR
// if not tmp then
42149: NOP4
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42616
// if in_unit then
42158: NOP4
42162: IFFALSE 42186
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42164: NOP4
42168: PUSH
42169: NOP4
42173: PPUSH
42174: NOP4
42178: PPUSH
42179: NOP4
42183: ST_TO_ADDR
42184: GO 42206
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42186: NOP4
42190: PUSH
42191: NOP4
42195: PPUSH
42196: NOP4
42200: PPUSH
42201: NOP4
42205: ST_TO_ADDR
// if not enemy then
42206: NOP4
42210: NOT
42211: IFFALSE 42215
// exit ;
42213: GO 42616
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42215: NOP4
42219: PUSH
42220: NOP4
42224: PPUSH
42225: NOP4
42229: PPUSH
42230: NOP4
42234: PUSH
42235: LD_INT 13
42237: GREATER
42238: AND
42239: PUSH
42240: NOP4
42244: PPUSH
42245: NOP4
42249: PPUSH
42250: NOP4
42254: PUSH
42255: LD_INT 12
42257: GREATER
42258: OR
42259: IFFALSE 42263
// exit ;
42261: GO 42616
// missile := [ 1 ] ;
42263: NOP4
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42274: NOP4
42278: PPUSH
42279: NOP4
42283: PPUSH
42284: NOP4
42288: IFFALSE 42317
// missile := Insert ( missile , missile + 1 , 2 ) ;
42290: NOP4
42294: PUSH
42295: NOP4
42299: PPUSH
42300: NOP4
42304: PUSH
42305: LD_INT 1
42307: PLUS
42308: PPUSH
42309: LD_INT 2
42311: PPUSH
42312: NOP4
42316: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42317: NOP4
42321: PPUSH
42322: NOP4
42326: PPUSH
42327: NOP4
42331: PUSH
42332: NOP4
42336: PPUSH
42337: NOP4
42341: PPUSH
42342: NOP4
42346: PPUSH
42347: NOP4
42351: NOT
42352: AND
42353: IFFALSE 42382
// missile := Insert ( missile , missile + 1 , 3 ) ;
42355: NOP4
42359: PUSH
42360: NOP4
42364: PPUSH
42365: NOP4
42369: PUSH
42370: LD_INT 1
42372: PLUS
42373: PPUSH
42374: LD_INT 3
42376: PPUSH
42377: NOP4
42381: ST_TO_ADDR
// if missile < 2 then
42382: NOP4
42386: PUSH
42387: LD_INT 2
42389: LESS
42390: IFFALSE 42394
// exit ;
42392: GO 42616
// x := GetX ( enemy ) ;
42394: NOP4
42398: PUSH
42399: NOP4
42403: PPUSH
42404: NOP4
42408: ST_TO_ADDR
// y := GetY ( enemy ) ;
42409: NOP4
42413: PUSH
42414: NOP4
42418: PPUSH
42419: NOP4
42423: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42424: NOP4
42428: PUSH
42429: NOP4
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PPUSH
42438: LD_INT 1
42440: PPUSH
42441: NOP4
42445: PLUS
42446: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42447: NOP4
42451: PUSH
42452: NOP4
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PPUSH
42461: LD_INT 1
42463: PPUSH
42464: NOP4
42468: PLUS
42469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42470: NOP4
42474: PPUSH
42475: NOP4
42479: PPUSH
42480: NOP4
42484: NOT
42485: IFFALSE 42507
// begin _x := x ;
42487: NOP4
42491: PUSH
42492: NOP4
42496: ST_TO_ADDR
// _y := y ;
42497: NOP4
42501: PUSH
42502: NOP4
42506: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42507: NOP4
42511: PUSH
42512: LD_INT 1
42514: PPUSH
42515: NOP4
42519: PPUSH
42520: NOP4
42524: ST_TO_ADDR
// case i of 1 :
42525: NOP4
42529: PUSH
42530: LD_INT 1
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42555
42538: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42539: NOP4
42543: PPUSH
42544: NOP4
42548: PPUSH
42549: NOP4
42553: GO 42616
42555: LD_INT 2
42557: DOUBLE
42558: EQUAL
42559: IFTRUE 42563
42561: GO 42585
42563: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42564: NOP4
42568: PPUSH
42569: NOP4
42573: PPUSH
42574: NOP4
42578: PPUSH
42579: NOP4
42583: GO 42616
42585: LD_INT 3
42587: DOUBLE
42588: EQUAL
42589: IFTRUE 42593
42591: GO 42615
42593: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42594: NOP4
42598: PPUSH
42599: NOP4
42603: PPUSH
42604: NOP4
42608: PPUSH
42609: NOP4
42613: GO 42616
42615: POP
// end ;
42616: LD_VAR 0 2
42620: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42621: LD_INT 0
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
// if not unit or not building then
42629: NOP4
42633: NOT
42634: PUSH
42635: NOP4
42639: NOT
42640: OR
42641: IFFALSE 42645
// exit ;
42643: GO 42803
// x := GetX ( building ) ;
42645: NOP4
42649: PUSH
42650: NOP4
42654: PPUSH
42655: NOP4
42659: ST_TO_ADDR
// y := GetY ( building ) ;
42660: NOP4
42664: PUSH
42665: NOP4
42669: PPUSH
42670: NOP4
42674: ST_TO_ADDR
// for i = 0 to 5 do
42675: NOP4
42679: PUSH
42680: DOUBLE
42681: LD_INT 0
42683: DEC
42684: ST_TO_ADDR
42685: LD_INT 5
42687: PUSH
42688: FOR_TO
42689: IFFALSE 42801
// begin _x := ShiftX ( x , i , 3 ) ;
42691: NOP4
42695: PUSH
42696: NOP4
42700: PPUSH
42701: NOP4
42705: PPUSH
42706: LD_INT 3
42708: PPUSH
42709: NOP4
42713: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42714: NOP4
42718: PUSH
42719: NOP4
42723: PPUSH
42724: NOP4
42728: PPUSH
42729: LD_INT 3
42731: PPUSH
42732: NOP4
42736: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42737: NOP4
42741: PPUSH
42742: NOP4
42746: PPUSH
42747: NOP4
42751: NOT
42752: IFFALSE 42756
// continue ;
42754: GO 42688
// if HexInfo ( _x , _y ) = 0 then
42756: NOP4
42760: PPUSH
42761: NOP4
42765: PPUSH
42766: NOP4
42770: PUSH
42771: LD_INT 0
42773: EQUAL
42774: IFFALSE 42799
// begin ComMoveXY ( unit , _x , _y ) ;
42776: NOP4
42780: PPUSH
42781: NOP4
42785: PPUSH
42786: NOP4
42790: PPUSH
42791: NOP4
// exit ;
42795: POP
42796: POP
42797: GO 42803
// end ; end ;
42799: GO 42688
42801: POP
42802: POP
// end ;
42803: LD_VAR 0 3
42807: RET
// export function ScanBase ( side , base_area ) ; begin
42808: LD_INT 0
42810: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42811: NOP4
42815: PUSH
42816: NOP4
42820: PPUSH
42821: LD_INT 81
42823: PUSH
42824: NOP4
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PPUSH
42833: NOP4
42837: ST_TO_ADDR
// end ;
42838: LD_VAR 0 3
42842: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42843: LD_INT 0
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
// result := false ;
42849: NOP4
42853: PUSH
42854: LD_INT 0
42856: ST_TO_ADDR
// side := GetSide ( unit ) ;
42857: NOP4
42861: PUSH
42862: NOP4
42866: PPUSH
42867: NOP4
42871: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42872: NOP4
42876: PUSH
42877: NOP4
42881: PPUSH
42882: NOP4
42886: ST_TO_ADDR
// case nat of 1 :
42887: NOP4
42891: PUSH
42892: LD_INT 1
42894: DOUBLE
42895: EQUAL
42896: IFTRUE 42900
42898: GO 42911
42900: POP
// tech := tech_lassight ; 2 :
42901: NOP4
42905: PUSH
42906: LD_INT 12
42908: ST_TO_ADDR
42909: GO 42950
42911: LD_INT 2
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42930
42919: POP
// tech := tech_mortar ; 3 :
42920: NOP4
42924: PUSH
42925: LD_INT 41
42927: ST_TO_ADDR
42928: GO 42950
42930: LD_INT 3
42932: DOUBLE
42933: EQUAL
42934: IFTRUE 42938
42936: GO 42949
42938: POP
// tech := tech_bazooka ; end ;
42939: NOP4
42943: PUSH
42944: LD_INT 44
42946: ST_TO_ADDR
42947: GO 42950
42949: POP
// if Researched ( side , tech ) then
42950: NOP4
42954: PPUSH
42955: NOP4
42959: PPUSH
42960: NOP4
42964: IFFALSE 42991
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42966: NOP4
42970: PUSH
42971: LD_INT 5
42973: PUSH
42974: LD_INT 8
42976: PUSH
42977: LD_INT 9
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: PUSH
42985: NOP4
42989: ARRAY
42990: ST_TO_ADDR
// end ;
42991: LD_VAR 0 2
42995: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42996: LD_INT 0
42998: PPUSH
42999: PPUSH
43000: PPUSH
// if not mines then
43001: NOP4
43005: NOT
43006: IFFALSE 43010
// exit ;
43008: GO 43154
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43010: NOP4
43014: PUSH
43015: LD_INT 81
43017: PUSH
43018: NOP4
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 21
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PPUSH
43048: NOP4
43052: ST_TO_ADDR
// for i in mines do
43053: NOP4
43057: PUSH
43058: NOP4
43062: PUSH
43063: FOR_IN
43064: IFFALSE 43152
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43066: NOP4
43070: PUSH
43071: LD_INT 1
43073: ARRAY
43074: PPUSH
43075: NOP4
43079: PUSH
43080: LD_INT 2
43082: ARRAY
43083: PPUSH
43084: NOP4
43088: NOT
43089: IFFALSE 43093
// continue ;
43091: GO 43063
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43093: NOP4
43097: PUSH
43098: LD_INT 1
43100: ARRAY
43101: PPUSH
43102: NOP4
43106: PUSH
43107: LD_INT 2
43109: ARRAY
43110: PPUSH
43111: NOP4
43115: PUSH
43116: NOP4
43120: IN
43121: IFFALSE 43150
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43123: NOP4
43127: PUSH
43128: LD_INT 1
43130: ARRAY
43131: PPUSH
43132: NOP4
43136: PUSH
43137: LD_INT 2
43139: ARRAY
43140: PPUSH
43141: NOP4
43145: PPUSH
43146: NOP4
// end ;
43150: GO 43063
43152: POP
43153: POP
// end ;
43154: LD_VAR 0 3
43158: RET
// export function Count ( array ) ; var i ; begin
43159: LD_INT 0
43161: PPUSH
43162: PPUSH
// result := 0 ;
43163: NOP4
43167: PUSH
43168: LD_INT 0
43170: ST_TO_ADDR
// for i in array do
43171: NOP4
43175: PUSH
43176: NOP4
43180: PUSH
43181: FOR_IN
43182: IFFALSE 43206
// if i then
43184: NOP4
43188: IFFALSE 43204
// result := result + 1 ;
43190: NOP4
43194: PUSH
43195: NOP4
43199: PUSH
43200: LD_INT 1
43202: PLUS
43203: ST_TO_ADDR
43204: GO 43181
43206: POP
43207: POP
// end ;
43208: LD_VAR 0 2
43212: RET
// export function IsEmpty ( building ) ; begin
43213: LD_INT 0
43215: PPUSH
// if not building then
43216: NOP4
43220: NOT
43221: IFFALSE 43225
// exit ;
43223: GO 43268
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43225: NOP4
43229: PUSH
43230: NOP4
43234: PUSH
43235: LD_INT 22
43237: PUSH
43238: NOP4
43242: PPUSH
43243: NOP4
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 58
43254: PUSH
43255: EMPTY
43256: LIST
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: NOP4
43266: IN
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function IsNotFull ( building ) ; begin
43273: LD_INT 0
43275: PPUSH
// if not building then
43276: NOP4
43280: NOT
43281: IFFALSE 43285
// exit ;
43283: GO 43304
// result := UnitsInside ( building ) < 6 ;
43285: NOP4
43289: PUSH
43290: NOP4
43294: PPUSH
43295: NOP4
43299: PUSH
43300: LD_INT 6
43302: LESS
43303: ST_TO_ADDR
// end ;
43304: LD_VAR 0 2
43308: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
// tmp := [ ] ;
43315: NOP4
43319: PUSH
43320: EMPTY
43321: ST_TO_ADDR
// list := [ ] ;
43322: NOP4
43326: PUSH
43327: EMPTY
43328: ST_TO_ADDR
// for i = 16 to 25 do
43329: NOP4
43333: PUSH
43334: DOUBLE
43335: LD_INT 16
43337: DEC
43338: ST_TO_ADDR
43339: LD_INT 25
43341: PUSH
43342: FOR_TO
43343: IFFALSE 43416
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43345: NOP4
43349: PUSH
43350: NOP4
43354: PUSH
43355: LD_INT 22
43357: PUSH
43358: NOP4
43362: PPUSH
43363: NOP4
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 91
43374: PUSH
43375: NOP4
43379: PUSH
43380: LD_INT 6
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 30
43390: PUSH
43391: NOP4
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: PPUSH
43408: NOP4
43412: ADD
43413: ST_TO_ADDR
43414: GO 43342
43416: POP
43417: POP
// for i = 1 to tmp do
43418: NOP4
43422: PUSH
43423: DOUBLE
43424: LD_INT 1
43426: DEC
43427: ST_TO_ADDR
43428: NOP4
43432: PUSH
43433: FOR_TO
43434: IFFALSE 43522
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43436: NOP4
43440: PUSH
43441: NOP4
43445: PUSH
43446: NOP4
43450: PUSH
43451: NOP4
43455: ARRAY
43456: PPUSH
43457: NOP4
43461: PUSH
43462: NOP4
43466: PUSH
43467: NOP4
43471: ARRAY
43472: PPUSH
43473: NOP4
43477: PUSH
43478: NOP4
43482: PUSH
43483: NOP4
43487: ARRAY
43488: PPUSH
43489: NOP4
43493: PUSH
43494: NOP4
43498: PUSH
43499: NOP4
43503: ARRAY
43504: PPUSH
43505: NOP4
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: ADD
43519: ST_TO_ADDR
43520: GO 43433
43522: POP
43523: POP
// result := list ;
43524: NOP4
43528: PUSH
43529: NOP4
43533: ST_TO_ADDR
// end ;
43534: LD_VAR 0 2
43538: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43539: LD_INT 0
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
// if not factory then
43548: NOP4
43552: NOT
43553: IFFALSE 43557
// exit ;
43555: GO 44150
// if control = control_apeman then
43557: NOP4
43561: PUSH
43562: LD_INT 5
43564: EQUAL
43565: IFFALSE 43674
// begin tmp := UnitsInside ( factory ) ;
43567: NOP4
43571: PUSH
43572: NOP4
43576: PPUSH
43577: NOP4
43581: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43582: NOP4
43586: PPUSH
43587: LD_INT 25
43589: PUSH
43590: LD_INT 12
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PPUSH
43597: NOP4
43601: NOT
43602: IFFALSE 43612
// control := control_manual ;
43604: NOP4
43608: PUSH
43609: LD_INT 1
43611: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43612: NOP4
43616: PUSH
43617: NOP4
43621: PPUSH
43622: NOP4
43626: ST_TO_ADDR
// if tmp then
43627: NOP4
43631: IFFALSE 43674
// begin for i in tmp do
43633: NOP4
43637: PUSH
43638: NOP4
43642: PUSH
43643: FOR_IN
43644: IFFALSE 43672
// if i [ 1 ] = b_ext_radio then
43646: NOP4
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: PUSH
43655: LD_INT 22
43657: EQUAL
43658: IFFALSE 43670
// begin control := control_remote ;
43660: NOP4
43664: PUSH
43665: LD_INT 2
43667: ST_TO_ADDR
// break ;
43668: GO 43672
// end ;
43670: GO 43643
43672: POP
43673: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43674: NOP4
43678: PPUSH
43679: NOP4
43683: PPUSH
43684: NOP4
43688: PPUSH
43689: NOP4
43693: PPUSH
43694: NOP4
43698: PPUSH
43699: NOP4
43703: IFFALSE 43738
// begin result := [ chassis , engine , control , weapon ] ;
43705: NOP4
43709: PUSH
43710: NOP4
43714: PUSH
43715: NOP4
43719: PUSH
43720: NOP4
43724: PUSH
43725: NOP4
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// exit ;
43736: GO 44150
// end ; _chassis := AvailableChassisList ( factory ) ;
43738: NOP4
43742: PUSH
43743: NOP4
43747: PPUSH
43748: NOP4
43752: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43753: NOP4
43757: PUSH
43758: NOP4
43762: PPUSH
43763: NOP4
43767: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43768: NOP4
43772: PUSH
43773: NOP4
43777: PPUSH
43778: NOP4
43782: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43783: NOP4
43787: PUSH
43788: NOP4
43792: PPUSH
43793: NOP4
43797: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43798: NOP4
43802: NOT
43803: PUSH
43804: NOP4
43808: NOT
43809: OR
43810: PUSH
43811: NOP4
43815: NOT
43816: OR
43817: PUSH
43818: NOP4
43822: NOT
43823: OR
43824: IFFALSE 43859
// begin result := [ chassis , engine , control , weapon ] ;
43826: NOP4
43830: PUSH
43831: NOP4
43835: PUSH
43836: NOP4
43840: PUSH
43841: NOP4
43845: PUSH
43846: NOP4
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// exit ;
43857: GO 44150
// end ; if not chassis in _chassis then
43859: NOP4
43863: PUSH
43864: NOP4
43868: IN
43869: NOT
43870: IFFALSE 43896
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43872: NOP4
43876: PUSH
43877: NOP4
43881: PUSH
43882: LD_INT 1
43884: PPUSH
43885: NOP4
43889: PPUSH
43890: NOP4
43894: ARRAY
43895: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43896: NOP4
43900: PPUSH
43901: NOP4
43905: PPUSH
43906: NOP4
43910: NOT
43911: IFFALSE 43970
// repeat engine := _engine [ 1 ] ;
43913: NOP4
43917: PUSH
43918: NOP4
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43927: NOP4
43931: PUSH
43932: NOP4
43936: PPUSH
43937: LD_INT 1
43939: PPUSH
43940: NOP4
43944: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43945: NOP4
43949: PPUSH
43950: NOP4
43954: PPUSH
43955: NOP4
43959: PUSH
43960: NOP4
43964: PUSH
43965: EMPTY
43966: EQUAL
43967: OR
43968: IFFALSE 43913
// if not control in _control then
43970: NOP4
43974: PUSH
43975: NOP4
43979: IN
43980: NOT
43981: IFFALSE 44007
// control := _control [ rand ( 1 , _control ) ] ;
43983: NOP4
43987: PUSH
43988: NOP4
43992: PUSH
43993: LD_INT 1
43995: PPUSH
43996: NOP4
44000: PPUSH
44001: NOP4
44005: ARRAY
44006: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44007: NOP4
44011: PPUSH
44012: NOP4
44016: PPUSH
44017: NOP4
44021: NOT
44022: IFFALSE 44081
// repeat weapon := _weapon [ 1 ] ;
44024: NOP4
44028: PUSH
44029: NOP4
44033: PUSH
44034: LD_INT 1
44036: ARRAY
44037: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44038: NOP4
44042: PUSH
44043: NOP4
44047: PPUSH
44048: LD_INT 1
44050: PPUSH
44051: NOP4
44055: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44056: NOP4
44060: PPUSH
44061: NOP4
44065: PPUSH
44066: NOP4
44070: PUSH
44071: NOP4
44075: PUSH
44076: EMPTY
44077: EQUAL
44078: OR
44079: IFFALSE 44024
// result := [ ] ;
44081: NOP4
44085: PUSH
44086: EMPTY
44087: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44088: NOP4
44092: PPUSH
44093: NOP4
44097: PPUSH
44098: NOP4
44102: PPUSH
44103: NOP4
44107: PPUSH
44108: NOP4
44112: PPUSH
44113: NOP4
44117: IFFALSE 44150
// result := [ chassis , engine , control , weapon ] ;
44119: NOP4
44123: PUSH
44124: NOP4
44128: PUSH
44129: NOP4
44133: PUSH
44134: NOP4
44138: PUSH
44139: NOP4
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
// end ;
44150: LD_VAR 0 6
44154: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44155: LD_INT 0
44157: PPUSH
// if not chassis or not engine then
44158: NOP4
44162: NOT
44163: PUSH
44164: NOP4
44168: NOT
44169: OR
44170: IFFALSE 44174
// exit ;
44172: GO 44370
// case engine of engine_solar :
44174: NOP4
44178: PUSH
44179: LD_INT 2
44181: DOUBLE
44182: EQUAL
44183: IFTRUE 44187
44185: GO 44225
44187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44188: NOP4
44192: PUSH
44193: LD_INT 11
44195: PUSH
44196: LD_INT 12
44198: PUSH
44199: LD_INT 13
44201: PUSH
44202: LD_INT 14
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
44223: GO 44354
44225: LD_INT 1
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44233
44231: GO 44295
44233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44234: NOP4
44238: PUSH
44239: LD_INT 11
44241: PUSH
44242: LD_INT 12
44244: PUSH
44245: LD_INT 13
44247: PUSH
44248: LD_INT 14
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 3
44259: PUSH
44260: LD_INT 4
44262: PUSH
44263: LD_INT 5
44265: PUSH
44266: LD_INT 21
44268: PUSH
44269: LD_INT 23
44271: PUSH
44272: LD_INT 22
44274: PUSH
44275: LD_INT 24
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
44293: GO 44354
44295: LD_INT 3
44297: DOUBLE
44298: EQUAL
44299: IFTRUE 44303
44301: GO 44353
44303: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44304: NOP4
44308: PUSH
44309: LD_INT 13
44311: PUSH
44312: LD_INT 14
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 4
44323: PUSH
44324: LD_INT 5
44326: PUSH
44327: LD_INT 21
44329: PUSH
44330: LD_INT 22
44332: PUSH
44333: LD_INT 23
44335: PUSH
44336: LD_INT 24
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
44351: GO 44354
44353: POP
// result := ( chassis in result ) ;
44354: NOP4
44358: PUSH
44359: NOP4
44363: PUSH
44364: NOP4
44368: IN
44369: ST_TO_ADDR
// end ;
44370: LD_VAR 0 3
44374: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44375: LD_INT 0
44377: PPUSH
// if not chassis or not weapon then
44378: NOP4
44382: NOT
44383: PUSH
44384: NOP4
44388: NOT
44389: OR
44390: IFFALSE 44394
// exit ;
44392: GO 45420
// case weapon of us_machine_gun :
44394: NOP4
44398: PUSH
44399: LD_INT 2
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 44437
44407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44408: NOP4
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 4
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
44435: GO 45404
44437: LD_INT 3
44439: DOUBLE
44440: EQUAL
44441: IFTRUE 44445
44443: GO 44475
44445: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44446: NOP4
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: LD_INT 4
44462: PUSH
44463: LD_INT 5
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
44473: GO 45404
44475: LD_INT 11
44477: DOUBLE
44478: EQUAL
44479: IFTRUE 44483
44481: GO 44513
44483: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44484: NOP4
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: LD_INT 4
44500: PUSH
44501: LD_INT 5
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: ST_TO_ADDR
44511: GO 45404
44513: LD_INT 4
44515: DOUBLE
44516: EQUAL
44517: IFTRUE 44521
44519: GO 44547
44521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44522: NOP4
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: LD_INT 4
44535: PUSH
44536: LD_INT 5
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
44545: GO 45404
44547: LD_INT 5
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44555
44553: GO 44581
44555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44556: NOP4
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: LD_INT 4
44569: PUSH
44570: LD_INT 5
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
44579: GO 45404
44581: LD_INT 9
44583: DOUBLE
44584: EQUAL
44585: IFTRUE 44589
44587: GO 44615
44589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44590: NOP4
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: LD_INT 4
44603: PUSH
44604: LD_INT 5
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
44613: GO 45404
44615: LD_INT 7
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44649
44623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44624: NOP4
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 4
44637: PUSH
44638: LD_INT 5
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
44647: GO 45404
44649: LD_INT 12
44651: DOUBLE
44652: EQUAL
44653: IFTRUE 44657
44655: GO 44683
44657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44658: NOP4
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 4
44671: PUSH
44672: LD_INT 5
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
44681: GO 45404
44683: LD_INT 13
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44717
44691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44692: NOP4
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 3
44702: PUSH
44703: LD_INT 4
44705: PUSH
44706: LD_INT 5
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
44715: GO 45404
44717: LD_INT 14
44719: DOUBLE
44720: EQUAL
44721: IFTRUE 44725
44723: GO 44743
44725: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44726: NOP4
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: LD_INT 5
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: ST_TO_ADDR
44741: GO 45404
44743: LD_INT 6
44745: DOUBLE
44746: EQUAL
44747: IFTRUE 44751
44749: GO 44769
44751: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44752: NOP4
44756: PUSH
44757: LD_INT 4
44759: PUSH
44760: LD_INT 5
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: ST_TO_ADDR
44767: GO 45404
44769: LD_INT 10
44771: DOUBLE
44772: EQUAL
44773: IFTRUE 44777
44775: GO 44795
44777: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44778: NOP4
44782: PUSH
44783: LD_INT 4
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: ST_TO_ADDR
44793: GO 45404
44795: LD_INT 22
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44803
44801: GO 44829
44803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44804: NOP4
44808: PUSH
44809: LD_INT 11
44811: PUSH
44812: LD_INT 12
44814: PUSH
44815: LD_INT 13
44817: PUSH
44818: LD_INT 14
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
44827: GO 45404
44829: LD_INT 23
44831: DOUBLE
44832: EQUAL
44833: IFTRUE 44837
44835: GO 44863
44837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44838: NOP4
44842: PUSH
44843: LD_INT 11
44845: PUSH
44846: LD_INT 12
44848: PUSH
44849: LD_INT 13
44851: PUSH
44852: LD_INT 14
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
44861: GO 45404
44863: LD_INT 24
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44897
44871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44872: NOP4
44876: PUSH
44877: LD_INT 11
44879: PUSH
44880: LD_INT 12
44882: PUSH
44883: LD_INT 13
44885: PUSH
44886: LD_INT 14
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
44895: GO 45404
44897: LD_INT 30
44899: DOUBLE
44900: EQUAL
44901: IFTRUE 44905
44903: GO 44931
44905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44906: NOP4
44910: PUSH
44911: LD_INT 11
44913: PUSH
44914: LD_INT 12
44916: PUSH
44917: LD_INT 13
44919: PUSH
44920: LD_INT 14
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
44929: GO 45404
44931: LD_INT 25
44933: DOUBLE
44934: EQUAL
44935: IFTRUE 44939
44937: GO 44957
44939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44940: NOP4
44944: PUSH
44945: LD_INT 13
44947: PUSH
44948: LD_INT 14
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: ST_TO_ADDR
44955: GO 45404
44957: LD_INT 27
44959: DOUBLE
44960: EQUAL
44961: IFTRUE 44965
44963: GO 44983
44965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44966: NOP4
44970: PUSH
44971: LD_INT 13
44973: PUSH
44974: LD_INT 14
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: ST_TO_ADDR
44981: GO 45404
44983: LD_INT 28
44985: DOUBLE
44986: EQUAL
44987: IFTRUE 44991
44989: GO 45009
44991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44992: NOP4
44996: PUSH
44997: LD_INT 13
44999: PUSH
45000: LD_INT 14
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: ST_TO_ADDR
45007: GO 45404
45009: LD_INT 29
45011: DOUBLE
45012: EQUAL
45013: IFTRUE 45017
45015: GO 45035
45017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45018: NOP4
45022: PUSH
45023: LD_INT 13
45025: PUSH
45026: LD_INT 14
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: ST_TO_ADDR
45033: GO 45404
45035: LD_INT 31
45037: DOUBLE
45038: EQUAL
45039: IFTRUE 45043
45041: GO 45061
45043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45044: NOP4
45048: PUSH
45049: LD_INT 13
45051: PUSH
45052: LD_INT 14
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: ST_TO_ADDR
45059: GO 45404
45061: LD_INT 26
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45069
45067: GO 45087
45069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45070: NOP4
45074: PUSH
45075: LD_INT 13
45077: PUSH
45078: LD_INT 14
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: ST_TO_ADDR
45085: GO 45404
45087: LD_INT 42
45089: DOUBLE
45090: EQUAL
45091: IFTRUE 45095
45093: GO 45121
45095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45096: NOP4
45100: PUSH
45101: LD_INT 21
45103: PUSH
45104: LD_INT 22
45106: PUSH
45107: LD_INT 23
45109: PUSH
45110: LD_INT 24
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: ST_TO_ADDR
45119: GO 45404
45121: LD_INT 43
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45155
45129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45130: NOP4
45134: PUSH
45135: LD_INT 21
45137: PUSH
45138: LD_INT 22
45140: PUSH
45141: LD_INT 23
45143: PUSH
45144: LD_INT 24
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
45153: GO 45404
45155: LD_INT 44
45157: DOUBLE
45158: EQUAL
45159: IFTRUE 45163
45161: GO 45189
45163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45164: NOP4
45168: PUSH
45169: LD_INT 21
45171: PUSH
45172: LD_INT 22
45174: PUSH
45175: LD_INT 23
45177: PUSH
45178: LD_INT 24
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: ST_TO_ADDR
45187: GO 45404
45189: LD_INT 45
45191: DOUBLE
45192: EQUAL
45193: IFTRUE 45197
45195: GO 45223
45197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45198: NOP4
45202: PUSH
45203: LD_INT 21
45205: PUSH
45206: LD_INT 22
45208: PUSH
45209: LD_INT 23
45211: PUSH
45212: LD_INT 24
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
45221: GO 45404
45223: LD_INT 49
45225: DOUBLE
45226: EQUAL
45227: IFTRUE 45231
45229: GO 45257
45231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45232: NOP4
45236: PUSH
45237: LD_INT 21
45239: PUSH
45240: LD_INT 22
45242: PUSH
45243: LD_INT 23
45245: PUSH
45246: LD_INT 24
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
45255: GO 45404
45257: LD_INT 51
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45291
45265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45266: NOP4
45270: PUSH
45271: LD_INT 21
45273: PUSH
45274: LD_INT 22
45276: PUSH
45277: LD_INT 23
45279: PUSH
45280: LD_INT 24
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
45289: GO 45404
45291: LD_INT 52
45293: DOUBLE
45294: EQUAL
45295: IFTRUE 45299
45297: GO 45325
45299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45300: NOP4
45304: PUSH
45305: LD_INT 21
45307: PUSH
45308: LD_INT 22
45310: PUSH
45311: LD_INT 23
45313: PUSH
45314: LD_INT 24
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
45323: GO 45404
45325: LD_INT 53
45327: DOUBLE
45328: EQUAL
45329: IFTRUE 45333
45331: GO 45351
45333: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45334: NOP4
45338: PUSH
45339: LD_INT 23
45341: PUSH
45342: LD_INT 24
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: ST_TO_ADDR
45349: GO 45404
45351: LD_INT 46
45353: DOUBLE
45354: EQUAL
45355: IFTRUE 45359
45357: GO 45377
45359: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45360: NOP4
45364: PUSH
45365: LD_INT 23
45367: PUSH
45368: LD_INT 24
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: ST_TO_ADDR
45375: GO 45404
45377: LD_INT 47
45379: DOUBLE
45380: EQUAL
45381: IFTRUE 45385
45383: GO 45403
45385: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45386: NOP4
45390: PUSH
45391: LD_INT 23
45393: PUSH
45394: LD_INT 24
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: ST_TO_ADDR
45401: GO 45404
45403: POP
// result := ( chassis in result ) ;
45404: NOP4
45408: PUSH
45409: NOP4
45413: PUSH
45414: NOP4
45418: IN
45419: ST_TO_ADDR
// end ;
45420: LD_VAR 0 3
45424: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45425: LD_INT 0
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
// result := array ;
45434: NOP4
45438: PUSH
45439: NOP4
45443: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45444: NOP4
45448: NOT
45449: PUSH
45450: NOP4
45454: NOT
45455: OR
45456: PUSH
45457: NOP4
45461: NOT
45462: OR
45463: PUSH
45464: NOP4
45468: PUSH
45469: NOP4
45473: GREATER
45474: OR
45475: PUSH
45476: NOP4
45480: PUSH
45481: NOP4
45485: GREATER
45486: OR
45487: IFFALSE 45491
// exit ;
45489: GO 45787
// if direction then
45491: NOP4
45495: IFFALSE 45559
// begin d := 1 ;
45497: NOP4
45501: PUSH
45502: LD_INT 1
45504: ST_TO_ADDR
// if i_from > i_to then
45505: NOP4
45509: PUSH
45510: NOP4
45514: GREATER
45515: IFFALSE 45541
// length := ( array - i_from ) + i_to else
45517: NOP4
45521: PUSH
45522: NOP4
45526: PUSH
45527: NOP4
45531: MINUS
45532: PUSH
45533: NOP4
45537: PLUS
45538: ST_TO_ADDR
45539: GO 45557
// length := i_to - i_from ;
45541: NOP4
45545: PUSH
45546: NOP4
45550: PUSH
45551: NOP4
45555: MINUS
45556: ST_TO_ADDR
// end else
45557: GO 45620
// begin d := - 1 ;
45559: NOP4
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: ST_TO_ADDR
// if i_from > i_to then
45568: NOP4
45572: PUSH
45573: NOP4
45577: GREATER
45578: IFFALSE 45598
// length := i_from - i_to else
45580: NOP4
45584: PUSH
45585: NOP4
45589: PUSH
45590: NOP4
45594: MINUS
45595: ST_TO_ADDR
45596: GO 45620
// length := ( array - i_to ) + i_from ;
45598: NOP4
45602: PUSH
45603: NOP4
45607: PUSH
45608: NOP4
45612: MINUS
45613: PUSH
45614: NOP4
45618: PLUS
45619: ST_TO_ADDR
// end ; if not length then
45620: NOP4
45624: NOT
45625: IFFALSE 45629
// exit ;
45627: GO 45787
// tmp := array ;
45629: NOP4
45633: PUSH
45634: NOP4
45638: ST_TO_ADDR
// for i = 1 to length do
45639: NOP4
45643: PUSH
45644: DOUBLE
45645: LD_INT 1
45647: DEC
45648: ST_TO_ADDR
45649: NOP4
45653: PUSH
45654: FOR_TO
45655: IFFALSE 45775
// begin for j = 1 to array do
45657: NOP4
45661: PUSH
45662: DOUBLE
45663: LD_INT 1
45665: DEC
45666: ST_TO_ADDR
45667: NOP4
45671: PUSH
45672: FOR_TO
45673: IFFALSE 45761
// begin k := j + d ;
45675: NOP4
45679: PUSH
45680: NOP4
45684: PUSH
45685: NOP4
45689: PLUS
45690: ST_TO_ADDR
// if k > array then
45691: NOP4
45695: PUSH
45696: NOP4
45700: GREATER
45701: IFFALSE 45711
// k := 1 ;
45703: NOP4
45707: PUSH
45708: LD_INT 1
45710: ST_TO_ADDR
// if not k then
45711: NOP4
45715: NOT
45716: IFFALSE 45728
// k := array ;
45718: NOP4
45722: PUSH
45723: NOP4
45727: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45728: NOP4
45732: PUSH
45733: NOP4
45737: PPUSH
45738: NOP4
45742: PPUSH
45743: NOP4
45747: PUSH
45748: NOP4
45752: ARRAY
45753: PPUSH
45754: NOP4
45758: ST_TO_ADDR
// end ;
45759: GO 45672
45761: POP
45762: POP
// array := tmp ;
45763: NOP4
45767: PUSH
45768: NOP4
45772: ST_TO_ADDR
// end ;
45773: GO 45654
45775: POP
45776: POP
// result := array ;
45777: NOP4
45781: PUSH
45782: NOP4
45786: ST_TO_ADDR
// end ;
45787: LD_VAR 0 5
45791: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45792: LD_INT 0
45794: PPUSH
45795: PPUSH
// result := 0 ;
45796: NOP4
45800: PUSH
45801: LD_INT 0
45803: ST_TO_ADDR
// if not array or not value in array then
45804: NOP4
45808: NOT
45809: PUSH
45810: NOP4
45814: PUSH
45815: NOP4
45819: IN
45820: NOT
45821: OR
45822: IFFALSE 45826
// exit ;
45824: GO 45880
// for i = 1 to array do
45826: NOP4
45830: PUSH
45831: DOUBLE
45832: LD_INT 1
45834: DEC
45835: ST_TO_ADDR
45836: NOP4
45840: PUSH
45841: FOR_TO
45842: IFFALSE 45878
// if value = array [ i ] then
45844: NOP4
45848: PUSH
45849: NOP4
45853: PUSH
45854: NOP4
45858: ARRAY
45859: EQUAL
45860: IFFALSE 45876
// begin result := i ;
45862: NOP4
45866: PUSH
45867: NOP4
45871: ST_TO_ADDR
// exit ;
45872: POP
45873: POP
45874: GO 45880
// end ;
45876: GO 45841
45878: POP
45879: POP
// end ;
45880: LD_VAR 0 3
45884: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45885: LD_INT 0
45887: PPUSH
// vc_chassis := chassis ;
45888: LD_ADDR_OWVAR 37
45892: PUSH
45893: NOP4
45897: ST_TO_ADDR
// vc_engine := engine ;
45898: LD_ADDR_OWVAR 39
45902: PUSH
45903: NOP4
45907: ST_TO_ADDR
// vc_control := control ;
45908: LD_ADDR_OWVAR 38
45912: PUSH
45913: NOP4
45917: ST_TO_ADDR
// vc_weapon := weapon ;
45918: LD_ADDR_OWVAR 40
45922: PUSH
45923: NOP4
45927: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45928: LD_ADDR_OWVAR 41
45932: PUSH
45933: NOP4
45937: ST_TO_ADDR
// end ;
45938: LD_VAR 0 6
45942: RET
// export function WantPlant ( unit ) ; var task ; begin
45943: LD_INT 0
45945: PPUSH
45946: PPUSH
// result := false ;
45947: NOP4
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45955: NOP4
45959: PUSH
45960: NOP4
45964: PPUSH
45965: NOP4
45969: ST_TO_ADDR
// if task then
45970: NOP4
45974: IFFALSE 46002
// if task [ 1 ] [ 1 ] = p then
45976: NOP4
45980: PUSH
45981: LD_INT 1
45983: ARRAY
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: PUSH
45989: LD_STRING p
45991: EQUAL
45992: IFFALSE 46002
// result := true ;
45994: NOP4
45998: PUSH
45999: LD_INT 1
46001: ST_TO_ADDR
// end ;
46002: LD_VAR 0 2
46006: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46007: LD_INT 0
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
// if pos < 1 then
46013: NOP4
46017: PUSH
46018: LD_INT 1
46020: LESS
46021: IFFALSE 46025
// exit ;
46023: GO 46328
// if pos = 1 then
46025: NOP4
46029: PUSH
46030: LD_INT 1
46032: EQUAL
46033: IFFALSE 46066
// result := Replace ( arr , pos [ 1 ] , value ) else
46035: NOP4
46039: PUSH
46040: NOP4
46044: PPUSH
46045: NOP4
46049: PUSH
46050: LD_INT 1
46052: ARRAY
46053: PPUSH
46054: NOP4
46058: PPUSH
46059: NOP4
46063: ST_TO_ADDR
46064: GO 46328
// begin tmp := arr ;
46066: NOP4
46070: PUSH
46071: NOP4
46075: ST_TO_ADDR
// s_arr := [ tmp ] ;
46076: NOP4
46080: PUSH
46081: NOP4
46085: PUSH
46086: EMPTY
46087: LIST
46088: ST_TO_ADDR
// for i = 1 to pos - 1 do
46089: NOP4
46093: PUSH
46094: DOUBLE
46095: LD_INT 1
46097: DEC
46098: ST_TO_ADDR
46099: NOP4
46103: PUSH
46104: LD_INT 1
46106: MINUS
46107: PUSH
46108: FOR_TO
46109: IFFALSE 46154
// begin tmp := tmp [ pos [ i ] ] ;
46111: NOP4
46115: PUSH
46116: NOP4
46120: PUSH
46121: NOP4
46125: PUSH
46126: NOP4
46130: ARRAY
46131: ARRAY
46132: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46133: NOP4
46137: PUSH
46138: NOP4
46142: PUSH
46143: NOP4
46147: PUSH
46148: EMPTY
46149: LIST
46150: ADD
46151: ST_TO_ADDR
// end ;
46152: GO 46108
46154: POP
46155: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46156: NOP4
46160: PUSH
46161: NOP4
46165: PPUSH
46166: NOP4
46170: PUSH
46171: NOP4
46175: ARRAY
46176: PPUSH
46177: NOP4
46181: PPUSH
46182: NOP4
46186: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46187: NOP4
46191: PUSH
46192: NOP4
46196: PPUSH
46197: NOP4
46201: PPUSH
46202: NOP4
46206: PPUSH
46207: NOP4
46211: ST_TO_ADDR
// for i = s_arr downto 2 do
46212: NOP4
46216: PUSH
46217: DOUBLE
46218: NOP4
46222: INC
46223: ST_TO_ADDR
46224: LD_INT 2
46226: PUSH
46227: FOR_DOWNTO
46228: IFFALSE 46312
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46230: NOP4
46234: PUSH
46235: NOP4
46239: PUSH
46240: NOP4
46244: PUSH
46245: LD_INT 1
46247: MINUS
46248: ARRAY
46249: PPUSH
46250: NOP4
46254: PUSH
46255: NOP4
46259: PUSH
46260: LD_INT 1
46262: MINUS
46263: ARRAY
46264: PPUSH
46265: NOP4
46269: PUSH
46270: NOP4
46274: ARRAY
46275: PPUSH
46276: NOP4
46280: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46281: NOP4
46285: PUSH
46286: NOP4
46290: PPUSH
46291: NOP4
46295: PUSH
46296: LD_INT 1
46298: MINUS
46299: PPUSH
46300: NOP4
46304: PPUSH
46305: NOP4
46309: ST_TO_ADDR
// end ;
46310: GO 46227
46312: POP
46313: POP
// result := s_arr [ 1 ] ;
46314: NOP4
46318: PUSH
46319: NOP4
46323: PUSH
46324: LD_INT 1
46326: ARRAY
46327: ST_TO_ADDR
// end ; end ;
46328: LD_VAR 0 4
46332: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46333: LD_INT 0
46335: PPUSH
46336: PPUSH
// if not list then
46337: NOP4
46341: NOT
46342: IFFALSE 46346
// exit ;
46344: GO 46437
// i := list [ pos1 ] ;
46346: NOP4
46350: PUSH
46351: NOP4
46355: PUSH
46356: NOP4
46360: ARRAY
46361: ST_TO_ADDR
// if not i then
46362: NOP4
46366: NOT
46367: IFFALSE 46371
// exit ;
46369: GO 46437
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46371: NOP4
46375: PUSH
46376: NOP4
46380: PPUSH
46381: NOP4
46385: PPUSH
46386: NOP4
46390: PUSH
46391: NOP4
46395: ARRAY
46396: PPUSH
46397: NOP4
46401: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46402: NOP4
46406: PUSH
46407: NOP4
46411: PPUSH
46412: NOP4
46416: PPUSH
46417: NOP4
46421: PPUSH
46422: NOP4
46426: ST_TO_ADDR
// result := list ;
46427: NOP4
46431: PUSH
46432: NOP4
46436: ST_TO_ADDR
// end ;
46437: LD_VAR 0 4
46441: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46442: LD_INT 0
46444: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46445: NOP4
46449: PUSH
46450: NOP4
46454: PPUSH
46455: NOP4
46459: PPUSH
46460: NOP4
46464: PPUSH
46465: NOP4
46469: PPUSH
46470: NOP4
46474: PPUSH
46475: NOP4
46479: PPUSH
46480: NOP4
46484: PPUSH
46485: NOP4
46489: ST_TO_ADDR
// end ;
46490: LD_VAR 0 5
46494: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46495: LD_INT 0
46497: PPUSH
46498: PPUSH
46499: PPUSH
46500: PPUSH
// if not list then
46501: NOP4
46505: NOT
46506: IFFALSE 46510
// exit ;
46508: GO 46898
// result := [ ] ;
46510: NOP4
46514: PUSH
46515: EMPTY
46516: ST_TO_ADDR
// for i in list do
46517: NOP4
46521: PUSH
46522: NOP4
46526: PUSH
46527: FOR_IN
46528: IFFALSE 46730
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46530: NOP4
46534: PUSH
46535: NOP4
46539: PPUSH
46540: NOP4
46544: PPUSH
46545: NOP4
46549: PPUSH
46550: NOP4
46554: ST_TO_ADDR
// if not result then
46555: NOP4
46559: NOT
46560: IFFALSE 46586
// result := [ [ i , tmp ] ] else
46562: NOP4
46566: PUSH
46567: NOP4
46571: PUSH
46572: NOP4
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: ST_TO_ADDR
46584: GO 46728
// begin if result [ result ] [ 2 ] < tmp then
46586: NOP4
46590: PUSH
46591: NOP4
46595: ARRAY
46596: PUSH
46597: LD_INT 2
46599: ARRAY
46600: PUSH
46601: NOP4
46605: LESS
46606: IFFALSE 46648
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46608: NOP4
46612: PUSH
46613: NOP4
46617: PPUSH
46618: NOP4
46622: PUSH
46623: LD_INT 1
46625: PLUS
46626: PPUSH
46627: NOP4
46631: PUSH
46632: NOP4
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PPUSH
46641: NOP4
46645: ST_TO_ADDR
46646: GO 46728
// for j = 1 to result do
46648: NOP4
46652: PUSH
46653: DOUBLE
46654: LD_INT 1
46656: DEC
46657: ST_TO_ADDR
46658: NOP4
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46726
// begin if tmp < result [ j ] [ 2 ] then
46666: NOP4
46670: PUSH
46671: NOP4
46675: PUSH
46676: NOP4
46680: ARRAY
46681: PUSH
46682: LD_INT 2
46684: ARRAY
46685: LESS
46686: IFFALSE 46724
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46688: NOP4
46692: PUSH
46693: NOP4
46697: PPUSH
46698: NOP4
46702: PPUSH
46703: NOP4
46707: PUSH
46708: NOP4
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PPUSH
46717: NOP4
46721: ST_TO_ADDR
// break ;
46722: GO 46726
// end ; end ;
46724: GO 46663
46726: POP
46727: POP
// end ; end ;
46728: GO 46527
46730: POP
46731: POP
// if result and not asc then
46732: NOP4
46736: PUSH
46737: NOP4
46741: NOT
46742: AND
46743: IFFALSE 46818
// begin tmp := result ;
46745: NOP4
46749: PUSH
46750: NOP4
46754: ST_TO_ADDR
// for i = tmp downto 1 do
46755: NOP4
46759: PUSH
46760: DOUBLE
46761: NOP4
46765: INC
46766: ST_TO_ADDR
46767: LD_INT 1
46769: PUSH
46770: FOR_DOWNTO
46771: IFFALSE 46816
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46773: NOP4
46777: PUSH
46778: NOP4
46782: PPUSH
46783: NOP4
46787: PUSH
46788: NOP4
46792: MINUS
46793: PUSH
46794: LD_INT 1
46796: PLUS
46797: PPUSH
46798: NOP4
46802: PUSH
46803: NOP4
46807: ARRAY
46808: PPUSH
46809: NOP4
46813: ST_TO_ADDR
46814: GO 46770
46816: POP
46817: POP
// end ; tmp := [ ] ;
46818: NOP4
46822: PUSH
46823: EMPTY
46824: ST_TO_ADDR
// if mode then
46825: NOP4
46829: IFFALSE 46898
// begin for i = 1 to result do
46831: NOP4
46835: PUSH
46836: DOUBLE
46837: LD_INT 1
46839: DEC
46840: ST_TO_ADDR
46841: NOP4
46845: PUSH
46846: FOR_TO
46847: IFFALSE 46886
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46849: NOP4
46853: PUSH
46854: NOP4
46858: PPUSH
46859: NOP4
46863: PPUSH
46864: NOP4
46868: PUSH
46869: NOP4
46873: ARRAY
46874: PUSH
46875: LD_INT 1
46877: ARRAY
46878: PPUSH
46879: NOP4
46883: ST_TO_ADDR
46884: GO 46846
46886: POP
46887: POP
// result := tmp ;
46888: NOP4
46892: PUSH
46893: NOP4
46897: ST_TO_ADDR
// end ; end ;
46898: LD_VAR 0 6
46902: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46903: LD_INT 0
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46911: NOP4
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// if not x or not y then
46933: NOP4
46937: NOT
46938: PUSH
46939: NOP4
46943: NOT
46944: OR
46945: IFFALSE 46949
// exit ;
46947: GO 48595
// if not range then
46949: NOP4
46953: NOT
46954: IFFALSE 46964
// range := 10 ;
46956: NOP4
46960: PUSH
46961: LD_INT 10
46963: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46964: NOP4
46968: PUSH
46969: LD_INT 81
46971: PUSH
46972: NOP4
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 92
46983: PUSH
46984: NOP4
46988: PUSH
46989: NOP4
46993: PUSH
46994: NOP4
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 21
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: PPUSH
47027: NOP4
47031: ST_TO_ADDR
// if not tmp then
47032: NOP4
47036: NOT
47037: IFFALSE 47041
// exit ;
47039: GO 48595
// for i in tmp do
47041: NOP4
47045: PUSH
47046: NOP4
47050: PUSH
47051: FOR_IN
47052: IFFALSE 48570
// begin points := [ 0 , 0 , 0 ] ;
47054: NOP4
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// bpoints := 1 ;
47073: NOP4
47077: PUSH
47078: LD_INT 1
47080: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47081: NOP4
47085: PPUSH
47086: NOP4
47090: PUSH
47091: LD_INT 1
47093: DOUBLE
47094: EQUAL
47095: IFTRUE 47099
47097: GO 47677
47099: POP
// begin if GetClass ( i ) = 1 then
47100: NOP4
47104: PPUSH
47105: NOP4
47109: PUSH
47110: LD_INT 1
47112: EQUAL
47113: IFFALSE 47134
// points := [ 10 , 5 , 3 ] ;
47115: NOP4
47119: PUSH
47120: LD_INT 10
47122: PUSH
47123: LD_INT 5
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47134: NOP4
47138: PPUSH
47139: NOP4
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: IN
47158: IFFALSE 47179
// points := [ 3 , 2 , 1 ] ;
47160: NOP4
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47179: NOP4
47183: PPUSH
47184: NOP4
47188: PUSH
47189: LD_INT 5
47191: EQUAL
47192: IFFALSE 47213
// points := [ 130 , 5 , 2 ] ;
47194: NOP4
47198: PUSH
47199: LD_INT 130
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47213: NOP4
47217: PPUSH
47218: NOP4
47222: PUSH
47223: LD_INT 8
47225: EQUAL
47226: IFFALSE 47247
// points := [ 35 , 35 , 30 ] ;
47228: NOP4
47232: PUSH
47233: LD_INT 35
47235: PUSH
47236: LD_INT 35
47238: PUSH
47239: LD_INT 30
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47247: NOP4
47251: PPUSH
47252: NOP4
47256: PUSH
47257: LD_INT 9
47259: EQUAL
47260: IFFALSE 47281
// points := [ 20 , 55 , 40 ] ;
47262: NOP4
47266: PUSH
47267: LD_INT 20
47269: PUSH
47270: LD_INT 55
47272: PUSH
47273: LD_INT 40
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47281: NOP4
47285: PPUSH
47286: NOP4
47290: PUSH
47291: LD_INT 12
47293: PUSH
47294: LD_INT 16
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: IN
47301: IFFALSE 47322
// points := [ 5 , 3 , 2 ] ;
47303: NOP4
47307: PUSH
47308: LD_INT 5
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47322: NOP4
47326: PPUSH
47327: NOP4
47331: PUSH
47332: LD_INT 17
47334: EQUAL
47335: IFFALSE 47356
// points := [ 100 , 50 , 75 ] ;
47337: NOP4
47341: PUSH
47342: LD_INT 100
47344: PUSH
47345: LD_INT 50
47347: PUSH
47348: LD_INT 75
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47356: NOP4
47360: PPUSH
47361: NOP4
47365: PUSH
47366: LD_INT 15
47368: EQUAL
47369: IFFALSE 47390
// points := [ 10 , 5 , 3 ] ;
47371: NOP4
47375: PUSH
47376: LD_INT 10
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47390: NOP4
47394: PPUSH
47395: NOP4
47399: PUSH
47400: LD_INT 14
47402: EQUAL
47403: IFFALSE 47424
// points := [ 10 , 0 , 0 ] ;
47405: NOP4
47409: PUSH
47410: LD_INT 10
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47424: NOP4
47428: PPUSH
47429: NOP4
47433: PUSH
47434: LD_INT 11
47436: EQUAL
47437: IFFALSE 47458
// points := [ 30 , 10 , 5 ] ;
47439: NOP4
47443: PUSH
47444: LD_INT 30
47446: PUSH
47447: LD_INT 10
47449: PUSH
47450: LD_INT 5
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47458: NOP4
47462: PPUSH
47463: LD_INT 5
47465: PPUSH
47466: NOP4
47470: PUSH
47471: LD_INT 2
47473: EQUAL
47474: IFFALSE 47491
// bpoints := bpoints * 1.8 ;
47476: NOP4
47480: PUSH
47481: NOP4
47485: PUSH
47486: LD_REAL  1.80000000000000E+0000
47489: MUL
47490: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47491: NOP4
47495: PPUSH
47496: NOP4
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: IN
47519: PUSH
47520: NOP4
47524: PPUSH
47525: LD_INT 51
47527: PPUSH
47528: NOP4
47532: PUSH
47533: LD_INT 2
47535: EQUAL
47536: AND
47537: IFFALSE 47554
// bpoints := bpoints * 1.2 ;
47539: NOP4
47543: PUSH
47544: NOP4
47548: PUSH
47549: LD_REAL  1.20000000000000E+0000
47552: MUL
47553: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47554: NOP4
47558: PPUSH
47559: NOP4
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: LD_INT 7
47569: PUSH
47570: LD_INT 9
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: IN
47578: PUSH
47579: NOP4
47583: PPUSH
47584: LD_INT 52
47586: PPUSH
47587: NOP4
47591: PUSH
47592: LD_INT 2
47594: EQUAL
47595: AND
47596: IFFALSE 47613
// bpoints := bpoints * 1.5 ;
47598: NOP4
47602: PUSH
47603: NOP4
47607: PUSH
47608: LD_REAL  1.50000000000000E+0000
47611: MUL
47612: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47613: NOP4
47617: PPUSH
47618: LD_INT 66
47620: PPUSH
47621: NOP4
47625: PUSH
47626: LD_INT 2
47628: EQUAL
47629: IFFALSE 47646
// bpoints := bpoints * 1.1 ;
47631: NOP4
47635: PUSH
47636: NOP4
47640: PUSH
47641: LD_REAL  1.10000000000000E+0000
47644: MUL
47645: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47646: NOP4
47650: PUSH
47651: NOP4
47655: PUSH
47656: NOP4
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: NOP4
47668: PUSH
47669: LD_REAL  1.15000000000000E+0000
47672: MUL
47673: MUL
47674: ST_TO_ADDR
// end ; unit_vehicle :
47675: GO 48499
47677: LD_INT 2
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47685
47683: GO 48487
47685: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47686: NOP4
47690: PPUSH
47691: NOP4
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 42
47701: PUSH
47702: LD_INT 24
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: IN
47710: IFFALSE 47731
// points := [ 25 , 5 , 3 ] ;
47712: NOP4
47716: PUSH
47717: LD_INT 25
47719: PUSH
47720: LD_INT 5
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47731: NOP4
47735: PPUSH
47736: NOP4
47740: PUSH
47741: LD_INT 4
47743: PUSH
47744: LD_INT 43
47746: PUSH
47747: LD_INT 25
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: IN
47755: IFFALSE 47776
// points := [ 40 , 15 , 5 ] ;
47757: NOP4
47761: PUSH
47762: LD_INT 40
47764: PUSH
47765: LD_INT 15
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47776: NOP4
47780: PPUSH
47781: NOP4
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 23
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: IN
47796: IFFALSE 47817
// points := [ 7 , 25 , 8 ] ;
47798: NOP4
47802: PUSH
47803: LD_INT 7
47805: PUSH
47806: LD_INT 25
47808: PUSH
47809: LD_INT 8
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47817: NOP4
47821: PPUSH
47822: NOP4
47826: PUSH
47827: LD_INT 5
47829: PUSH
47830: LD_INT 27
47832: PUSH
47833: LD_INT 44
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: IN
47841: IFFALSE 47862
// points := [ 14 , 50 , 16 ] ;
47843: NOP4
47847: PUSH
47848: LD_INT 14
47850: PUSH
47851: LD_INT 50
47853: PUSH
47854: LD_INT 16
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47862: NOP4
47866: PPUSH
47867: NOP4
47871: PUSH
47872: LD_INT 6
47874: PUSH
47875: LD_INT 46
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: IN
47882: IFFALSE 47903
// points := [ 32 , 120 , 70 ] ;
47884: NOP4
47888: PUSH
47889: LD_INT 32
47891: PUSH
47892: LD_INT 120
47894: PUSH
47895: LD_INT 70
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
47903: NOP4
47907: PPUSH
47908: NOP4
47912: PUSH
47913: LD_INT 7
47915: PUSH
47916: LD_INT 28
47918: PUSH
47919: LD_INT 45
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: IN
47927: IFFALSE 47948
// points := [ 35 , 20 , 45 ] ;
47929: NOP4
47933: PUSH
47934: LD_INT 35
47936: PUSH
47937: LD_INT 20
47939: PUSH
47940: LD_INT 45
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47948: NOP4
47952: PPUSH
47953: NOP4
47957: PUSH
47958: LD_INT 47
47960: PUSH
47961: EMPTY
47962: LIST
47963: IN
47964: IFFALSE 47985
// points := [ 67 , 45 , 75 ] ;
47966: NOP4
47970: PUSH
47971: LD_INT 67
47973: PUSH
47974: LD_INT 45
47976: PUSH
47977: LD_INT 75
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47985: NOP4
47989: PPUSH
47990: NOP4
47994: PUSH
47995: LD_INT 26
47997: PUSH
47998: EMPTY
47999: LIST
48000: IN
48001: IFFALSE 48022
// points := [ 120 , 30 , 80 ] ;
48003: NOP4
48007: PUSH
48008: LD_INT 120
48010: PUSH
48011: LD_INT 30
48013: PUSH
48014: LD_INT 80
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48022: NOP4
48026: PPUSH
48027: NOP4
48031: PUSH
48032: LD_INT 22
48034: PUSH
48035: EMPTY
48036: LIST
48037: IN
48038: IFFALSE 48059
// points := [ 40 , 1 , 1 ] ;
48040: NOP4
48044: PUSH
48045: LD_INT 40
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: LIST
48058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48059: NOP4
48063: PPUSH
48064: NOP4
48068: PUSH
48069: LD_INT 29
48071: PUSH
48072: EMPTY
48073: LIST
48074: IN
48075: IFFALSE 48096
// points := [ 70 , 200 , 400 ] ;
48077: NOP4
48081: PUSH
48082: LD_INT 70
48084: PUSH
48085: LD_INT 200
48087: PUSH
48088: LD_INT 400
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48096: NOP4
48100: PPUSH
48101: NOP4
48105: PUSH
48106: LD_INT 14
48108: PUSH
48109: LD_INT 53
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: IN
48116: IFFALSE 48137
// points := [ 40 , 10 , 20 ] ;
48118: NOP4
48122: PUSH
48123: LD_INT 40
48125: PUSH
48126: LD_INT 10
48128: PUSH
48129: LD_INT 20
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48137: NOP4
48141: PPUSH
48142: NOP4
48146: PUSH
48147: LD_INT 9
48149: PUSH
48150: EMPTY
48151: LIST
48152: IN
48153: IFFALSE 48174
// points := [ 5 , 70 , 20 ] ;
48155: NOP4
48159: PUSH
48160: LD_INT 5
48162: PUSH
48163: LD_INT 70
48165: PUSH
48166: LD_INT 20
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48174: NOP4
48178: PPUSH
48179: NOP4
48183: PUSH
48184: LD_INT 10
48186: PUSH
48187: EMPTY
48188: LIST
48189: IN
48190: IFFALSE 48211
// points := [ 35 , 110 , 70 ] ;
48192: NOP4
48196: PUSH
48197: LD_INT 35
48199: PUSH
48200: LD_INT 110
48202: PUSH
48203: LD_INT 70
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48211: NOP4
48215: PPUSH
48216: NOP4
48220: PUSH
48221: LD_INT 25
48223: EQUAL
48224: IFFALSE 48245
// points := [ 80 , 65 , 100 ] ;
48226: NOP4
48230: PUSH
48231: LD_INT 80
48233: PUSH
48234: LD_INT 65
48236: PUSH
48237: LD_INT 100
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48245: NOP4
48249: PPUSH
48250: NOP4
48254: PUSH
48255: LD_INT 1
48257: EQUAL
48258: IFFALSE 48293
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48260: NOP4
48264: PUSH
48265: NOP4
48269: PUSH
48270: NOP4
48274: PPUSH
48275: NOP4
48279: PPUSH
48280: LD_INT 3
48282: PPUSH
48283: NOP4
48287: PUSH
48288: LD_INT 4
48290: MUL
48291: MUL
48292: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48293: NOP4
48297: PPUSH
48298: NOP4
48302: PUSH
48303: LD_INT 2
48305: EQUAL
48306: IFFALSE 48357
// begin j := IsControledBy ( i ) ;
48308: NOP4
48312: PUSH
48313: NOP4
48317: PPUSH
48318: NOP4
48322: ST_TO_ADDR
// if j then
48323: NOP4
48327: IFFALSE 48357
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48329: NOP4
48333: PUSH
48334: NOP4
48338: PUSH
48339: NOP4
48343: PPUSH
48344: LD_INT 3
48346: PPUSH
48347: NOP4
48351: PUSH
48352: LD_INT 3
48354: MUL
48355: MUL
48356: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48357: NOP4
48361: PPUSH
48362: NOP4
48366: PUSH
48367: LD_INT 5
48369: PUSH
48370: LD_INT 6
48372: PUSH
48373: LD_INT 46
48375: PUSH
48376: LD_INT 44
48378: PUSH
48379: LD_INT 47
48381: PUSH
48382: LD_INT 45
48384: PUSH
48385: LD_INT 28
48387: PUSH
48388: LD_INT 7
48390: PUSH
48391: LD_INT 27
48393: PUSH
48394: LD_INT 29
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: IN
48409: PUSH
48410: NOP4
48414: PPUSH
48415: LD_INT 52
48417: PPUSH
48418: NOP4
48422: PUSH
48423: LD_INT 2
48425: EQUAL
48426: AND
48427: IFFALSE 48444
// bpoints := bpoints * 1.2 ;
48429: NOP4
48433: PUSH
48434: NOP4
48438: PUSH
48439: LD_REAL  1.20000000000000E+0000
48442: MUL
48443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48444: NOP4
48448: PPUSH
48449: NOP4
48453: PUSH
48454: LD_INT 6
48456: PUSH
48457: LD_INT 46
48459: PUSH
48460: LD_INT 47
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: IN
48468: IFFALSE 48485
// bpoints := bpoints * 1.2 ;
48470: NOP4
48474: PUSH
48475: NOP4
48479: PUSH
48480: LD_REAL  1.20000000000000E+0000
48483: MUL
48484: ST_TO_ADDR
// end ; unit_building :
48485: GO 48499
48487: LD_INT 3
48489: DOUBLE
48490: EQUAL
48491: IFTRUE 48495
48493: GO 48498
48495: POP
// ; end ;
48496: GO 48499
48498: POP
// for j = 1 to 3 do
48499: NOP4
48503: PUSH
48504: DOUBLE
48505: LD_INT 1
48507: DEC
48508: ST_TO_ADDR
48509: LD_INT 3
48511: PUSH
48512: FOR_TO
48513: IFFALSE 48566
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48515: NOP4
48519: PUSH
48520: NOP4
48524: PPUSH
48525: NOP4
48529: PPUSH
48530: NOP4
48534: PUSH
48535: NOP4
48539: ARRAY
48540: PUSH
48541: NOP4
48545: PUSH
48546: NOP4
48550: ARRAY
48551: PUSH
48552: NOP4
48556: MUL
48557: PLUS
48558: PPUSH
48559: NOP4
48563: ST_TO_ADDR
48564: GO 48512
48566: POP
48567: POP
// end ;
48568: GO 47051
48570: POP
48571: POP
// result := Replace ( result , 4 , tmp ) ;
48572: NOP4
48576: PUSH
48577: NOP4
48581: PPUSH
48582: LD_INT 4
48584: PPUSH
48585: NOP4
48589: PPUSH
48590: NOP4
48594: ST_TO_ADDR
// end ;
48595: LD_VAR 0 5
48599: RET
// export function DangerAtRange ( unit , range ) ; begin
48600: LD_INT 0
48602: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48603: NOP4
48607: PUSH
48608: NOP4
48612: PPUSH
48613: NOP4
48617: PPUSH
48618: NOP4
48622: PPUSH
48623: NOP4
48627: PPUSH
48628: NOP4
48632: PPUSH
48633: NOP4
48637: PPUSH
48638: NOP4
48642: PPUSH
48643: NOP4
48647: ST_TO_ADDR
// end ;
48648: LD_VAR 0 3
48652: RET
// export function DangerInArea ( side , area ) ; begin
48653: LD_INT 0
48655: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48656: NOP4
48660: PUSH
48661: NOP4
48665: PPUSH
48666: LD_INT 81
48668: PUSH
48669: NOP4
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PPUSH
48678: NOP4
48682: ST_TO_ADDR
// end ;
48683: LD_VAR 0 3
48687: RET
// export function IsExtension ( b ) ; begin
48688: LD_INT 0
48690: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48691: NOP4
48695: PUSH
48696: NOP4
48700: PUSH
48701: LD_INT 23
48703: PUSH
48704: LD_INT 20
48706: PUSH
48707: LD_INT 22
48709: PUSH
48710: LD_INT 17
48712: PUSH
48713: LD_INT 24
48715: PUSH
48716: LD_INT 21
48718: PUSH
48719: LD_INT 19
48721: PUSH
48722: LD_INT 16
48724: PUSH
48725: LD_INT 25
48727: PUSH
48728: LD_INT 18
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: IN
48743: ST_TO_ADDR
// end ;
48744: LD_VAR 0 2
48748: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48749: LD_INT 0
48751: PPUSH
48752: PPUSH
48753: PPUSH
// result := [ ] ;
48754: NOP4
48758: PUSH
48759: EMPTY
48760: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48761: NOP4
48765: PUSH
48766: NOP4
48770: PPUSH
48771: LD_INT 21
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PPUSH
48781: NOP4
48785: ST_TO_ADDR
// if not tmp then
48786: NOP4
48790: NOT
48791: IFFALSE 48795
// exit ;
48793: GO 48859
// if checkLink then
48795: NOP4
48799: IFFALSE 48849
// begin for i in tmp do
48801: NOP4
48805: PUSH
48806: NOP4
48810: PUSH
48811: FOR_IN
48812: IFFALSE 48847
// if GetBase ( i ) <> base then
48814: NOP4
48818: PPUSH
48819: NOP4
48823: PUSH
48824: NOP4
48828: NONEQUAL
48829: IFFALSE 48845
// ComLinkToBase ( base , i ) ;
48831: NOP4
48835: PPUSH
48836: NOP4
48840: PPUSH
48841: NOP4
48845: GO 48811
48847: POP
48848: POP
// end ; result := tmp ;
48849: NOP4
48853: PUSH
48854: NOP4
48858: ST_TO_ADDR
// end ;
48859: LD_VAR 0 4
48863: RET
// export function ComComplete ( units , b ) ; var i ; begin
48864: LD_INT 0
48866: PPUSH
48867: PPUSH
// if not units then
48868: NOP4
48872: NOT
48873: IFFALSE 48877
// exit ;
48875: GO 48967
// for i in units do
48877: NOP4
48881: PUSH
48882: NOP4
48886: PUSH
48887: FOR_IN
48888: IFFALSE 48965
// if BuildingStatus ( b ) = bs_build then
48890: NOP4
48894: PPUSH
48895: NOP4
48899: PUSH
48900: LD_INT 1
48902: EQUAL
48903: IFFALSE 48963
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48905: NOP4
48909: PPUSH
48910: LD_STRING h
48912: PUSH
48913: NOP4
48917: PPUSH
48918: NOP4
48922: PUSH
48923: NOP4
48927: PPUSH
48928: NOP4
48932: PUSH
48933: NOP4
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: PPUSH
48959: NOP4
48963: GO 48887
48965: POP
48966: POP
// end ;
48967: LD_VAR 0 3
48971: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48972: LD_INT 0
48974: PPUSH
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
48979: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
48980: NOP4
48984: NOT
48985: PUSH
48986: NOP4
48990: PPUSH
48991: NOP4
48995: PUSH
48996: LD_INT 2
48998: EQUAL
48999: NOT
49000: OR
49001: IFFALSE 49005
// exit ;
49003: GO 49321
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49005: NOP4
49009: PUSH
49010: LD_INT 22
49012: PUSH
49013: NOP4
49017: PPUSH
49018: NOP4
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 30
49032: PUSH
49033: LD_INT 36
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 34
49042: PUSH
49043: LD_INT 31
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PPUSH
49059: NOP4
49063: ST_TO_ADDR
// if not tmp then
49064: NOP4
49068: NOT
49069: IFFALSE 49073
// exit ;
49071: GO 49321
// result := [ ] ;
49073: NOP4
49077: PUSH
49078: EMPTY
49079: ST_TO_ADDR
// for i in tmp do
49080: NOP4
49084: PUSH
49085: NOP4
49089: PUSH
49090: FOR_IN
49091: IFFALSE 49162
// begin t := UnitsInside ( i ) ;
49093: NOP4
49097: PUSH
49098: NOP4
49102: PPUSH
49103: NOP4
49107: ST_TO_ADDR
// if t then
49108: NOP4
49112: IFFALSE 49160
// for j in t do
49114: NOP4
49118: PUSH
49119: NOP4
49123: PUSH
49124: FOR_IN
49125: IFFALSE 49158
// result := Insert ( result , result + 1 , j ) ;
49127: NOP4
49131: PUSH
49132: NOP4
49136: PPUSH
49137: NOP4
49141: PUSH
49142: LD_INT 1
49144: PLUS
49145: PPUSH
49146: NOP4
49150: PPUSH
49151: NOP4
49155: ST_TO_ADDR
49156: GO 49124
49158: POP
49159: POP
// end ;
49160: GO 49090
49162: POP
49163: POP
// if not result then
49164: NOP4
49168: NOT
49169: IFFALSE 49173
// exit ;
49171: GO 49321
// mech := result [ 1 ] ;
49173: NOP4
49177: PUSH
49178: NOP4
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: ST_TO_ADDR
// if result > 1 then
49187: NOP4
49191: PUSH
49192: LD_INT 1
49194: GREATER
49195: IFFALSE 49307
// for i = 2 to result do
49197: NOP4
49201: PUSH
49202: DOUBLE
49203: LD_INT 2
49205: DEC
49206: ST_TO_ADDR
49207: NOP4
49211: PUSH
49212: FOR_TO
49213: IFFALSE 49305
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49215: NOP4
49219: PUSH
49220: NOP4
49224: PUSH
49225: NOP4
49229: ARRAY
49230: PPUSH
49231: LD_INT 3
49233: PPUSH
49234: NOP4
49238: PUSH
49239: NOP4
49243: PUSH
49244: NOP4
49248: ARRAY
49249: PPUSH
49250: NOP4
49254: MINUS
49255: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49256: NOP4
49260: PUSH
49261: NOP4
49265: PPUSH
49266: LD_INT 3
49268: PPUSH
49269: NOP4
49273: PUSH
49274: NOP4
49278: PPUSH
49279: NOP4
49283: MINUS
49284: GREATEREQUAL
49285: IFFALSE 49303
// mech := result [ i ] ;
49287: NOP4
49291: PUSH
49292: NOP4
49296: PUSH
49297: NOP4
49301: ARRAY
49302: ST_TO_ADDR
// end ;
49303: GO 49212
49305: POP
49306: POP
// ComLinkTo ( vehicle , mech ) ;
49307: NOP4
49311: PPUSH
49312: NOP4
49316: PPUSH
49317: NOP4
// end ;
49321: LD_VAR 0 2
49325: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49326: LD_INT 0
49328: PPUSH
49329: PPUSH
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
49335: PPUSH
49336: PPUSH
49337: PPUSH
49338: PPUSH
49339: PPUSH
49340: PPUSH
// result := [ ] ;
49341: NOP4
49345: PUSH
49346: EMPTY
49347: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49348: NOP4
49352: PPUSH
49353: NOP4
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: IN
49368: NOT
49369: IFFALSE 49373
// exit ;
49371: GO 51007
// if name then
49373: NOP4
49377: IFFALSE 49393
// SetBName ( base_dep , name ) ;
49379: NOP4
49383: PPUSH
49384: NOP4
49388: PPUSH
49389: NOP4
// base := GetBase ( base_dep ) ;
49393: NOP4
49397: PUSH
49398: NOP4
49402: PPUSH
49403: NOP4
49407: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49408: NOP4
49412: PUSH
49413: NOP4
49417: PPUSH
49418: NOP4
49422: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49423: NOP4
49427: PUSH
49428: NOP4
49432: PPUSH
49433: NOP4
49437: ST_TO_ADDR
// if sources then
49438: NOP4
49442: IFFALSE 49489
// for i = 1 to 3 do
49444: NOP4
49448: PUSH
49449: DOUBLE
49450: LD_INT 1
49452: DEC
49453: ST_TO_ADDR
49454: LD_INT 3
49456: PUSH
49457: FOR_TO
49458: IFFALSE 49487
// AddResourceType ( base , i , sources [ i ] ) ;
49460: NOP4
49464: PPUSH
49465: NOP4
49469: PPUSH
49470: NOP4
49474: PUSH
49475: NOP4
49479: ARRAY
49480: PPUSH
49481: NOP4
49485: GO 49457
49487: POP
49488: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49489: NOP4
49493: PUSH
49494: NOP4
49498: PPUSH
49499: NOP4
49503: PPUSH
49504: LD_INT 1
49506: PPUSH
49507: NOP4
49511: ST_TO_ADDR
// InitHc ;
49512: NOP4
// InitUc ;
49516: NOP4
// uc_side := side ;
49520: LD_ADDR_OWVAR 20
49524: PUSH
49525: NOP4
49529: ST_TO_ADDR
// uc_nation := nation ;
49530: LD_ADDR_OWVAR 21
49534: PUSH
49535: NOP4
49539: ST_TO_ADDR
// if buildings then
49540: NOP4
49544: IFFALSE 50866
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49546: NOP4
49550: PUSH
49551: NOP4
49555: PPUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 30
49561: PUSH
49562: LD_INT 29
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 30
49571: PUSH
49572: LD_INT 30
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: PPUSH
49584: NOP4
49588: ST_TO_ADDR
// if tmp then
49589: NOP4
49593: IFFALSE 49641
// for i in tmp do
49595: NOP4
49599: PUSH
49600: NOP4
49604: PUSH
49605: FOR_IN
49606: IFFALSE 49639
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49608: NOP4
49612: PPUSH
49613: NOP4
49617: PPUSH
49618: NOP4
49622: PPUSH
49623: NOP4
49627: PPUSH
49628: NOP4
49632: PPUSH
49633: NOP4
49637: GO 49605
49639: POP
49640: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49641: NOP4
49645: PPUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 30
49651: PUSH
49652: LD_INT 32
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 30
49661: PUSH
49662: LD_INT 33
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: PPUSH
49674: NOP4
49678: IFFALSE 49766
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49680: NOP4
49684: PUSH
49685: NOP4
49689: PPUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 30
49695: PUSH
49696: LD_INT 32
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 30
49705: PUSH
49706: LD_INT 33
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: PPUSH
49718: NOP4
49722: PUSH
49723: FOR_IN
49724: IFFALSE 49764
// begin if not GetBWeapon ( i ) then
49726: NOP4
49730: PPUSH
49731: NOP4
49735: NOT
49736: IFFALSE 49762
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49738: NOP4
49742: PPUSH
49743: NOP4
49747: PPUSH
49748: NOP4
49752: PPUSH
49753: NOP4
49757: PPUSH
49758: NOP4
// end ;
49762: GO 49723
49764: POP
49765: POP
// end ; for i = 1 to personel do
49766: NOP4
49770: PUSH
49771: DOUBLE
49772: LD_INT 1
49774: DEC
49775: ST_TO_ADDR
49776: NOP4
49780: PUSH
49781: FOR_TO
49782: IFFALSE 50846
// begin if i > 4 then
49784: NOP4
49788: PUSH
49789: LD_INT 4
49791: GREATER
49792: IFFALSE 49796
// break ;
49794: GO 50846
// case i of 1 :
49796: NOP4
49800: PUSH
49801: LD_INT 1
49803: DOUBLE
49804: EQUAL
49805: IFTRUE 49809
49807: GO 49889
49809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49810: NOP4
49814: PUSH
49815: NOP4
49819: PPUSH
49820: LD_INT 22
49822: PUSH
49823: NOP4
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 58
49834: PUSH
49835: EMPTY
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 30
49843: PUSH
49844: LD_INT 32
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 30
49853: PUSH
49854: LD_INT 4
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 30
49863: PUSH
49864: LD_INT 5
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: PPUSH
49882: NOP4
49886: ST_TO_ADDR
49887: GO 50111
49889: LD_INT 2
49891: DOUBLE
49892: EQUAL
49893: IFTRUE 49897
49895: GO 49959
49897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49898: NOP4
49902: PUSH
49903: NOP4
49907: PPUSH
49908: LD_INT 22
49910: PUSH
49911: NOP4
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 30
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 30
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PPUSH
49952: NOP4
49956: ST_TO_ADDR
49957: GO 50111
49959: LD_INT 3
49961: DOUBLE
49962: EQUAL
49963: IFTRUE 49967
49965: GO 50029
49967: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49968: NOP4
49972: PUSH
49973: NOP4
49977: PPUSH
49978: LD_INT 22
49980: PUSH
49981: NOP4
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 30
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 30
50005: PUSH
50006: LD_INT 3
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PPUSH
50022: NOP4
50026: ST_TO_ADDR
50027: GO 50111
50029: LD_INT 4
50031: DOUBLE
50032: EQUAL
50033: IFTRUE 50037
50035: GO 50110
50037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50038: NOP4
50042: PUSH
50043: NOP4
50047: PPUSH
50048: LD_INT 22
50050: PUSH
50051: NOP4
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 30
50065: PUSH
50066: LD_INT 6
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 30
50075: PUSH
50076: LD_INT 7
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 30
50085: PUSH
50086: LD_INT 8
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PPUSH
50103: NOP4
50107: ST_TO_ADDR
50108: GO 50111
50110: POP
// if i = 1 then
50111: NOP4
50115: PUSH
50116: LD_INT 1
50118: EQUAL
50119: IFFALSE 50230
// begin tmp := [ ] ;
50121: NOP4
50125: PUSH
50126: EMPTY
50127: ST_TO_ADDR
// for j in f do
50128: NOP4
50132: PUSH
50133: NOP4
50137: PUSH
50138: FOR_IN
50139: IFFALSE 50212
// if GetBType ( j ) = b_bunker then
50141: NOP4
50145: PPUSH
50146: NOP4
50150: PUSH
50151: LD_INT 32
50153: EQUAL
50154: IFFALSE 50181
// tmp := Insert ( tmp , 1 , j ) else
50156: NOP4
50160: PUSH
50161: NOP4
50165: PPUSH
50166: LD_INT 1
50168: PPUSH
50169: NOP4
50173: PPUSH
50174: NOP4
50178: ST_TO_ADDR
50179: GO 50210
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50181: NOP4
50185: PUSH
50186: NOP4
50190: PPUSH
50191: NOP4
50195: PUSH
50196: LD_INT 1
50198: PLUS
50199: PPUSH
50200: NOP4
50204: PPUSH
50205: NOP4
50209: ST_TO_ADDR
50210: GO 50138
50212: POP
50213: POP
// if tmp then
50214: NOP4
50218: IFFALSE 50230
// f := tmp ;
50220: NOP4
50224: PUSH
50225: NOP4
50229: ST_TO_ADDR
// end ; x := personel [ i ] ;
50230: NOP4
50234: PUSH
50235: NOP4
50239: PUSH
50240: NOP4
50244: ARRAY
50245: ST_TO_ADDR
// if x = - 1 then
50246: NOP4
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: EQUAL
50255: IFFALSE 50464
// begin for j in f do
50257: NOP4
50261: PUSH
50262: NOP4
50266: PUSH
50267: FOR_IN
50268: IFFALSE 50460
// repeat InitHc ;
50270: NOP4
// if GetBType ( j ) = b_barracks then
50274: NOP4
50278: PPUSH
50279: NOP4
50283: PUSH
50284: LD_INT 5
50286: EQUAL
50287: IFFALSE 50357
// begin if UnitsInside ( j ) < 3 then
50289: NOP4
50293: PPUSH
50294: NOP4
50298: PUSH
50299: LD_INT 3
50301: LESS
50302: IFFALSE 50338
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50304: LD_INT 0
50306: PPUSH
50307: LD_INT 5
50309: PUSH
50310: LD_INT 8
50312: PUSH
50313: LD_INT 9
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: PUSH
50321: NOP4
50325: ARRAY
50326: PPUSH
50327: NOP4
50331: PPUSH
50332: NOP4
50336: GO 50355
// PrepareHuman ( false , i , skill ) ;
50338: LD_INT 0
50340: PPUSH
50341: NOP4
50345: PPUSH
50346: NOP4
50350: PPUSH
50351: NOP4
// end else
50355: GO 50374
// PrepareHuman ( false , i , skill ) ;
50357: LD_INT 0
50359: PPUSH
50360: NOP4
50364: PPUSH
50365: NOP4
50369: PPUSH
50370: NOP4
// un := CreateHuman ;
50374: NOP4
50378: PUSH
50379: NOP4
50383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50384: NOP4
50388: PUSH
50389: NOP4
50393: PPUSH
50394: LD_INT 1
50396: PPUSH
50397: NOP4
50401: PPUSH
50402: NOP4
50406: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50407: NOP4
50411: PPUSH
50412: NOP4
50416: PPUSH
50417: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50421: NOP4
50425: PPUSH
50426: NOP4
50430: PUSH
50431: LD_INT 6
50433: EQUAL
50434: PUSH
50435: NOP4
50439: PPUSH
50440: NOP4
50444: PUSH
50445: LD_INT 32
50447: PUSH
50448: LD_INT 31
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: IN
50455: OR
50456: IFFALSE 50270
50458: GO 50267
50460: POP
50461: POP
// end else
50462: GO 50844
// for j = 1 to x do
50464: NOP4
50468: PUSH
50469: DOUBLE
50470: LD_INT 1
50472: DEC
50473: ST_TO_ADDR
50474: NOP4
50478: PUSH
50479: FOR_TO
50480: IFFALSE 50842
// begin InitHc ;
50482: NOP4
// if not f then
50486: NOP4
50490: NOT
50491: IFFALSE 50580
// begin PrepareHuman ( false , i , skill ) ;
50493: LD_INT 0
50495: PPUSH
50496: NOP4
50500: PPUSH
50501: NOP4
50505: PPUSH
50506: NOP4
// un := CreateHuman ;
50510: NOP4
50514: PUSH
50515: NOP4
50519: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50520: NOP4
50524: PUSH
50525: NOP4
50529: PPUSH
50530: LD_INT 1
50532: PPUSH
50533: NOP4
50537: PPUSH
50538: NOP4
50542: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50543: NOP4
50547: PPUSH
50548: NOP4
50552: PPUSH
50553: NOP4
50557: PPUSH
50558: NOP4
50562: PPUSH
50563: NOP4
50567: PPUSH
50568: LD_INT 10
50570: PPUSH
50571: LD_INT 0
50573: PPUSH
50574: NOP4
// continue ;
50578: GO 50479
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50580: NOP4
50584: PUSH
50585: LD_INT 1
50587: ARRAY
50588: PPUSH
50589: NOP4
50593: PUSH
50594: NOP4
50598: PUSH
50599: LD_INT 1
50601: ARRAY
50602: PPUSH
50603: NOP4
50607: PUSH
50608: LD_INT 32
50610: PUSH
50611: LD_INT 31
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: IN
50618: AND
50619: PUSH
50620: NOP4
50624: PUSH
50625: LD_INT 1
50627: ARRAY
50628: PPUSH
50629: NOP4
50633: PUSH
50634: LD_INT 6
50636: EQUAL
50637: OR
50638: IFFALSE 50658
// f := Delete ( f , 1 ) ;
50640: NOP4
50644: PUSH
50645: NOP4
50649: PPUSH
50650: LD_INT 1
50652: PPUSH
50653: NOP4
50657: ST_TO_ADDR
// if not f then
50658: NOP4
50662: NOT
50663: IFFALSE 50681
// begin x := x + 2 ;
50665: NOP4
50669: PUSH
50670: NOP4
50674: PUSH
50675: LD_INT 2
50677: PLUS
50678: ST_TO_ADDR
// continue ;
50679: GO 50479
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50681: NOP4
50685: PUSH
50686: LD_INT 1
50688: ARRAY
50689: PPUSH
50690: NOP4
50694: PUSH
50695: LD_INT 5
50697: EQUAL
50698: IFFALSE 50772
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50700: NOP4
50704: PUSH
50705: LD_INT 1
50707: ARRAY
50708: PPUSH
50709: NOP4
50713: PUSH
50714: LD_INT 3
50716: LESS
50717: IFFALSE 50753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50719: LD_INT 0
50721: PPUSH
50722: LD_INT 5
50724: PUSH
50725: LD_INT 8
50727: PUSH
50728: LD_INT 9
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: NOP4
50740: ARRAY
50741: PPUSH
50742: NOP4
50746: PPUSH
50747: NOP4
50751: GO 50770
// PrepareHuman ( false , i , skill ) ;
50753: LD_INT 0
50755: PPUSH
50756: NOP4
50760: PPUSH
50761: NOP4
50765: PPUSH
50766: NOP4
// end else
50770: GO 50789
// PrepareHuman ( false , i , skill ) ;
50772: LD_INT 0
50774: PPUSH
50775: NOP4
50779: PPUSH
50780: NOP4
50784: PPUSH
50785: NOP4
// un := CreateHuman ;
50789: NOP4
50793: PUSH
50794: NOP4
50798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50799: NOP4
50803: PUSH
50804: NOP4
50808: PPUSH
50809: LD_INT 1
50811: PPUSH
50812: NOP4
50816: PPUSH
50817: NOP4
50821: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50822: NOP4
50826: PPUSH
50827: NOP4
50831: PUSH
50832: LD_INT 1
50834: ARRAY
50835: PPUSH
50836: NOP4
// end ;
50840: GO 50479
50842: POP
50843: POP
// end ;
50844: GO 49781
50846: POP
50847: POP
// result := result ^ buildings ;
50848: NOP4
50852: PUSH
50853: NOP4
50857: PUSH
50858: NOP4
50862: ADD
50863: ST_TO_ADDR
// end else
50864: GO 51007
// begin for i = 1 to personel do
50866: NOP4
50870: PUSH
50871: DOUBLE
50872: LD_INT 1
50874: DEC
50875: ST_TO_ADDR
50876: NOP4
50880: PUSH
50881: FOR_TO
50882: IFFALSE 51005
// begin if i > 4 then
50884: NOP4
50888: PUSH
50889: LD_INT 4
50891: GREATER
50892: IFFALSE 50896
// break ;
50894: GO 51005
// x := personel [ i ] ;
50896: NOP4
50900: PUSH
50901: NOP4
50905: PUSH
50906: NOP4
50910: ARRAY
50911: ST_TO_ADDR
// if x = - 1 then
50912: NOP4
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: EQUAL
50921: IFFALSE 50925
// continue ;
50923: GO 50881
// PrepareHuman ( false , i , skill ) ;
50925: LD_INT 0
50927: PPUSH
50928: NOP4
50932: PPUSH
50933: NOP4
50937: PPUSH
50938: NOP4
// un := CreateHuman ;
50942: NOP4
50946: PUSH
50947: NOP4
50951: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50952: NOP4
50956: PPUSH
50957: NOP4
50961: PPUSH
50962: NOP4
50966: PPUSH
50967: NOP4
50971: PPUSH
50972: NOP4
50976: PPUSH
50977: LD_INT 10
50979: PPUSH
50980: LD_INT 0
50982: PPUSH
50983: NOP4
// result := result ^ un ;
50987: NOP4
50991: PUSH
50992: NOP4
50996: PUSH
50997: NOP4
51001: ADD
51002: ST_TO_ADDR
// end ;
51003: GO 50881
51005: POP
51006: POP
// end ; end ;
51007: LD_VAR 0 7
51011: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51012: LD_INT 0
51014: PPUSH
51015: PPUSH
51016: PPUSH
51017: PPUSH
51018: PPUSH
51019: PPUSH
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
51025: PPUSH
51026: PPUSH
51027: PPUSH
51028: PPUSH
51029: PPUSH
// result := false ;
51030: NOP4
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51038: NOP4
51042: NOT
51043: PUSH
51044: NOP4
51048: PPUSH
51049: NOP4
51053: PUSH
51054: LD_INT 32
51056: PUSH
51057: LD_INT 33
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: IN
51064: NOT
51065: OR
51066: IFFALSE 51070
// exit ;
51068: GO 52209
// nat := GetNation ( tower ) ;
51070: NOP4
51074: PUSH
51075: NOP4
51079: PPUSH
51080: NOP4
51084: ST_TO_ADDR
// side := GetSide ( tower ) ;
51085: NOP4
51089: PUSH
51090: NOP4
51094: PPUSH
51095: NOP4
51099: ST_TO_ADDR
// x := GetX ( tower ) ;
51100: NOP4
51104: PUSH
51105: NOP4
51109: PPUSH
51110: NOP4
51114: ST_TO_ADDR
// y := GetY ( tower ) ;
51115: NOP4
51119: PUSH
51120: NOP4
51124: PPUSH
51125: NOP4
51129: ST_TO_ADDR
// if not x or not y then
51130: NOP4
51134: NOT
51135: PUSH
51136: NOP4
51140: NOT
51141: OR
51142: IFFALSE 51146
// exit ;
51144: GO 52209
// weapon := 0 ;
51146: NOP4
51150: PUSH
51151: LD_INT 0
51153: ST_TO_ADDR
// fac_list := [ ] ;
51154: NOP4
51158: PUSH
51159: EMPTY
51160: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51161: NOP4
51165: PUSH
51166: NOP4
51170: PPUSH
51171: NOP4
51175: PPUSH
51176: NOP4
51180: PPUSH
51181: LD_INT 0
51183: PPUSH
51184: NOP4
51188: PPUSH
51189: LD_INT 30
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PPUSH
51199: NOP4
51203: ST_TO_ADDR
// if not factories then
51204: NOP4
51208: NOT
51209: IFFALSE 51213
// exit ;
51211: GO 52209
// for i in factories do
51213: NOP4
51217: PUSH
51218: NOP4
51222: PUSH
51223: FOR_IN
51224: IFFALSE 51249
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51226: NOP4
51230: PUSH
51231: NOP4
51235: PUSH
51236: NOP4
51240: PPUSH
51241: NOP4
51245: UNION
51246: ST_TO_ADDR
51247: GO 51223
51249: POP
51250: POP
// if not fac_list then
51251: NOP4
51255: NOT
51256: IFFALSE 51260
// exit ;
51258: GO 52209
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51260: NOP4
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: LD_INT 5
51270: PUSH
51271: LD_INT 9
51273: PUSH
51274: LD_INT 10
51276: PUSH
51277: LD_INT 6
51279: PUSH
51280: LD_INT 7
51282: PUSH
51283: LD_INT 11
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 27
51297: PUSH
51298: LD_INT 28
51300: PUSH
51301: LD_INT 26
51303: PUSH
51304: LD_INT 30
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 43
51315: PUSH
51316: LD_INT 44
51318: PUSH
51319: LD_INT 46
51321: PUSH
51322: LD_INT 45
51324: PUSH
51325: LD_INT 47
51327: PUSH
51328: LD_INT 49
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: PUSH
51344: NOP4
51348: ARRAY
51349: ST_TO_ADDR
// for i in list do
51350: NOP4
51354: PUSH
51355: NOP4
51359: PUSH
51360: FOR_IN
51361: IFFALSE 51394
// if not i in fac_list then
51363: NOP4
51367: PUSH
51368: NOP4
51372: IN
51373: NOT
51374: IFFALSE 51392
// list := list diff i ;
51376: NOP4
51380: PUSH
51381: NOP4
51385: PUSH
51386: NOP4
51390: DIFF
51391: ST_TO_ADDR
51392: GO 51360
51394: POP
51395: POP
// if not list then
51396: NOP4
51400: NOT
51401: IFFALSE 51405
// exit ;
51403: GO 52209
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51405: NOP4
51409: PUSH
51410: LD_INT 3
51412: EQUAL
51413: PUSH
51414: LD_INT 49
51416: PUSH
51417: NOP4
51421: IN
51422: AND
51423: PUSH
51424: LD_INT 31
51426: PPUSH
51427: NOP4
51431: PPUSH
51432: NOP4
51436: PUSH
51437: LD_INT 2
51439: EQUAL
51440: AND
51441: IFFALSE 51501
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51443: LD_INT 22
51445: PUSH
51446: NOP4
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 35
51457: PUSH
51458: LD_INT 49
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 91
51467: PUSH
51468: NOP4
51472: PUSH
51473: LD_INT 10
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: PPUSH
51486: NOP4
51490: NOT
51491: IFFALSE 51501
// weapon := ru_time_lapser ;
51493: NOP4
51497: PUSH
51498: LD_INT 49
51500: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51501: NOP4
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: IN
51516: PUSH
51517: LD_INT 11
51519: PUSH
51520: NOP4
51524: IN
51525: PUSH
51526: LD_INT 30
51528: PUSH
51529: NOP4
51533: IN
51534: OR
51535: AND
51536: PUSH
51537: LD_INT 6
51539: PPUSH
51540: NOP4
51544: PPUSH
51545: NOP4
51549: PUSH
51550: LD_INT 2
51552: EQUAL
51553: AND
51554: IFFALSE 51719
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51556: LD_INT 22
51558: PUSH
51559: NOP4
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 35
51573: PUSH
51574: LD_INT 11
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 35
51583: PUSH
51584: LD_INT 30
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 91
51598: PUSH
51599: NOP4
51603: PUSH
51604: LD_INT 18
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: PPUSH
51617: NOP4
51621: NOT
51622: PUSH
51623: LD_INT 22
51625: PUSH
51626: NOP4
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 30
51640: PUSH
51641: LD_INT 32
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 30
51650: PUSH
51651: LD_INT 33
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 91
51665: PUSH
51666: NOP4
51670: PUSH
51671: LD_INT 12
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: PPUSH
51687: NOP4
51691: PUSH
51692: LD_INT 2
51694: GREATER
51695: AND
51696: IFFALSE 51719
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51698: NOP4
51702: PUSH
51703: LD_INT 11
51705: PUSH
51706: LD_INT 30
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: NOP4
51717: ARRAY
51718: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51719: NOP4
51723: NOT
51724: PUSH
51725: LD_INT 40
51727: PPUSH
51728: NOP4
51732: PPUSH
51733: NOP4
51737: PUSH
51738: LD_INT 2
51740: EQUAL
51741: AND
51742: PUSH
51743: LD_INT 7
51745: PUSH
51746: NOP4
51750: IN
51751: PUSH
51752: LD_INT 28
51754: PUSH
51755: NOP4
51759: IN
51760: OR
51761: PUSH
51762: LD_INT 45
51764: PUSH
51765: NOP4
51769: IN
51770: OR
51771: AND
51772: IFFALSE 52026
// begin hex := GetHexInfo ( x , y ) ;
51774: NOP4
51778: PUSH
51779: NOP4
51783: PPUSH
51784: NOP4
51788: PPUSH
51789: NOP4
51793: ST_TO_ADDR
// if hex [ 1 ] then
51794: NOP4
51798: PUSH
51799: LD_INT 1
51801: ARRAY
51802: IFFALSE 51806
// exit ;
51804: GO 52209
// height := hex [ 2 ] ;
51806: NOP4
51810: PUSH
51811: NOP4
51815: PUSH
51816: LD_INT 2
51818: ARRAY
51819: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51820: NOP4
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 5
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// for i in tmp do
51843: NOP4
51847: PUSH
51848: NOP4
51852: PUSH
51853: FOR_IN
51854: IFFALSE 52024
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51856: NOP4
51860: PUSH
51861: NOP4
51865: PPUSH
51866: NOP4
51870: PPUSH
51871: LD_INT 5
51873: PPUSH
51874: NOP4
51878: PUSH
51879: NOP4
51883: PPUSH
51884: NOP4
51888: PPUSH
51889: LD_INT 5
51891: PPUSH
51892: NOP4
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51901: NOP4
51905: PUSH
51906: LD_INT 1
51908: ARRAY
51909: PPUSH
51910: NOP4
51914: PUSH
51915: LD_INT 2
51917: ARRAY
51918: PPUSH
51919: NOP4
51923: IFFALSE 52022
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51925: NOP4
51929: PUSH
51930: NOP4
51934: PUSH
51935: LD_INT 1
51937: ARRAY
51938: PPUSH
51939: NOP4
51943: PUSH
51944: LD_INT 2
51946: ARRAY
51947: PPUSH
51948: NOP4
51952: ST_TO_ADDR
// if hex [ 1 ] then
51953: NOP4
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: IFFALSE 51965
// continue ;
51963: GO 51853
// h := hex [ 2 ] ;
51965: NOP4
51969: PUSH
51970: NOP4
51974: PUSH
51975: LD_INT 2
51977: ARRAY
51978: ST_TO_ADDR
// if h + 7 < height then
51979: NOP4
51983: PUSH
51984: LD_INT 7
51986: PLUS
51987: PUSH
51988: NOP4
51992: LESS
51993: IFFALSE 52022
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51995: NOP4
51999: PUSH
52000: LD_INT 7
52002: PUSH
52003: LD_INT 28
52005: PUSH
52006: LD_INT 45
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: PUSH
52014: NOP4
52018: ARRAY
52019: ST_TO_ADDR
// break ;
52020: GO 52024
// end ; end ; end ;
52022: GO 51853
52024: POP
52025: POP
// end ; if not weapon then
52026: NOP4
52030: NOT
52031: IFFALSE 52091
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52033: NOP4
52037: PUSH
52038: NOP4
52042: PUSH
52043: LD_INT 11
52045: PUSH
52046: LD_INT 30
52048: PUSH
52049: LD_INT 49
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: DIFF
52057: ST_TO_ADDR
// if not list then
52058: NOP4
52062: NOT
52063: IFFALSE 52067
// exit ;
52065: GO 52209
// weapon := list [ rand ( 1 , list ) ] ;
52067: NOP4
52071: PUSH
52072: NOP4
52076: PUSH
52077: LD_INT 1
52079: PPUSH
52080: NOP4
52084: PPUSH
52085: NOP4
52089: ARRAY
52090: ST_TO_ADDR
// end ; if weapon then
52091: NOP4
52095: IFFALSE 52209
// begin tmp := CostOfWeapon ( weapon ) ;
52097: NOP4
52101: PUSH
52102: NOP4
52106: PPUSH
52107: NOP4
52111: ST_TO_ADDR
// j := GetBase ( tower ) ;
52112: NOP4
52116: PUSH
52117: NOP4
52121: PPUSH
52122: NOP4
52126: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52127: NOP4
52131: PPUSH
52132: LD_INT 1
52134: PPUSH
52135: NOP4
52139: PUSH
52140: NOP4
52144: PUSH
52145: LD_INT 1
52147: ARRAY
52148: GREATEREQUAL
52149: PUSH
52150: NOP4
52154: PPUSH
52155: LD_INT 2
52157: PPUSH
52158: NOP4
52162: PUSH
52163: NOP4
52167: PUSH
52168: LD_INT 2
52170: ARRAY
52171: GREATEREQUAL
52172: AND
52173: PUSH
52174: NOP4
52178: PPUSH
52179: LD_INT 3
52181: PPUSH
52182: NOP4
52186: PUSH
52187: NOP4
52191: PUSH
52192: LD_INT 3
52194: ARRAY
52195: GREATEREQUAL
52196: AND
52197: IFFALSE 52209
// result := weapon ;
52199: NOP4
52203: PUSH
52204: NOP4
52208: ST_TO_ADDR
// end ; end ;
52209: LD_VAR 0 3
52213: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52214: LD_INT 0
52216: PPUSH
52217: PPUSH
// result := true ;
52218: NOP4
52222: PUSH
52223: LD_INT 1
52225: ST_TO_ADDR
// if array1 = array2 then
52226: NOP4
52230: PUSH
52231: NOP4
52235: EQUAL
52236: IFFALSE 52296
// begin for i = 1 to array1 do
52238: NOP4
52242: PUSH
52243: DOUBLE
52244: LD_INT 1
52246: DEC
52247: ST_TO_ADDR
52248: NOP4
52252: PUSH
52253: FOR_TO
52254: IFFALSE 52292
// if array1 [ i ] <> array2 [ i ] then
52256: NOP4
52260: PUSH
52261: NOP4
52265: ARRAY
52266: PUSH
52267: NOP4
52271: PUSH
52272: NOP4
52276: ARRAY
52277: NONEQUAL
52278: IFFALSE 52290
// begin result := false ;
52280: NOP4
52284: PUSH
52285: LD_INT 0
52287: ST_TO_ADDR
// break ;
52288: GO 52292
// end ;
52290: GO 52253
52292: POP
52293: POP
// end else
52294: GO 52304
// result := false ;
52296: NOP4
52300: PUSH
52301: LD_INT 0
52303: ST_TO_ADDR
// end ;
52304: LD_VAR 0 3
52308: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52309: LD_INT 0
52311: PPUSH
52312: PPUSH
// if not array1 or not array2 then
52313: NOP4
52317: NOT
52318: PUSH
52319: NOP4
52323: NOT
52324: OR
52325: IFFALSE 52329
// exit ;
52327: GO 52393
// result := true ;
52329: NOP4
52333: PUSH
52334: LD_INT 1
52336: ST_TO_ADDR
// for i = 1 to array1 do
52337: NOP4
52341: PUSH
52342: DOUBLE
52343: LD_INT 1
52345: DEC
52346: ST_TO_ADDR
52347: NOP4
52351: PUSH
52352: FOR_TO
52353: IFFALSE 52391
// if array1 [ i ] <> array2 [ i ] then
52355: NOP4
52359: PUSH
52360: NOP4
52364: ARRAY
52365: PUSH
52366: NOP4
52370: PUSH
52371: NOP4
52375: ARRAY
52376: NONEQUAL
52377: IFFALSE 52389
// begin result := false ;
52379: NOP4
52383: PUSH
52384: LD_INT 0
52386: ST_TO_ADDR
// break ;
52387: GO 52391
// end ;
52389: GO 52352
52391: POP
52392: POP
// end ;
52393: LD_VAR 0 3
52397: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52398: LD_INT 0
52400: PPUSH
52401: PPUSH
52402: PPUSH
// pom := GetBase ( fac ) ;
52403: NOP4
52407: PUSH
52408: NOP4
52412: PPUSH
52413: NOP4
52417: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52418: NOP4
52422: PUSH
52423: NOP4
52427: PUSH
52428: LD_INT 1
52430: ARRAY
52431: PPUSH
52432: NOP4
52436: PUSH
52437: LD_INT 2
52439: ARRAY
52440: PPUSH
52441: NOP4
52445: PUSH
52446: LD_INT 3
52448: ARRAY
52449: PPUSH
52450: NOP4
52454: PUSH
52455: LD_INT 4
52457: ARRAY
52458: PPUSH
52459: NOP4
52463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52464: NOP4
52468: PUSH
52469: NOP4
52473: PPUSH
52474: LD_INT 1
52476: PPUSH
52477: NOP4
52481: PUSH
52482: NOP4
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: GREATEREQUAL
52491: PUSH
52492: NOP4
52496: PPUSH
52497: LD_INT 2
52499: PPUSH
52500: NOP4
52504: PUSH
52505: NOP4
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: GREATEREQUAL
52514: AND
52515: PUSH
52516: NOP4
52520: PPUSH
52521: LD_INT 3
52523: PPUSH
52524: NOP4
52528: PUSH
52529: NOP4
52533: PUSH
52534: LD_INT 3
52536: ARRAY
52537: GREATEREQUAL
52538: AND
52539: ST_TO_ADDR
// end ;
52540: LD_VAR 0 3
52544: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52545: LD_INT 0
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
// pom := GetBase ( building ) ;
52551: NOP4
52555: PUSH
52556: NOP4
52560: PPUSH
52561: NOP4
52565: ST_TO_ADDR
// if not pom then
52566: NOP4
52570: NOT
52571: IFFALSE 52575
// exit ;
52573: GO 52745
// btype := GetBType ( building ) ;
52575: NOP4
52579: PUSH
52580: NOP4
52584: PPUSH
52585: NOP4
52589: ST_TO_ADDR
// if btype = b_armoury then
52590: NOP4
52594: PUSH
52595: LD_INT 4
52597: EQUAL
52598: IFFALSE 52608
// btype := b_barracks ;
52600: NOP4
52604: PUSH
52605: LD_INT 5
52607: ST_TO_ADDR
// if btype = b_depot then
52608: NOP4
52612: PUSH
52613: LD_INT 0
52615: EQUAL
52616: IFFALSE 52626
// btype := b_warehouse ;
52618: NOP4
52622: PUSH
52623: LD_INT 1
52625: ST_TO_ADDR
// if btype = b_workshop then
52626: NOP4
52630: PUSH
52631: LD_INT 2
52633: EQUAL
52634: IFFALSE 52644
// btype := b_factory ;
52636: NOP4
52640: PUSH
52641: LD_INT 3
52643: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52644: NOP4
52648: PUSH
52649: NOP4
52653: PPUSH
52654: NOP4
52658: PPUSH
52659: NOP4
52663: PPUSH
52664: NOP4
52668: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52669: NOP4
52673: PUSH
52674: NOP4
52678: PPUSH
52679: LD_INT 1
52681: PPUSH
52682: NOP4
52686: PUSH
52687: NOP4
52691: PUSH
52692: LD_INT 1
52694: ARRAY
52695: GREATEREQUAL
52696: PUSH
52697: NOP4
52701: PPUSH
52702: LD_INT 2
52704: PPUSH
52705: NOP4
52709: PUSH
52710: NOP4
52714: PUSH
52715: LD_INT 2
52717: ARRAY
52718: GREATEREQUAL
52719: AND
52720: PUSH
52721: NOP4
52725: PPUSH
52726: LD_INT 3
52728: PPUSH
52729: NOP4
52733: PUSH
52734: NOP4
52738: PUSH
52739: LD_INT 3
52741: ARRAY
52742: GREATEREQUAL
52743: AND
52744: ST_TO_ADDR
// end ;
52745: LD_VAR 0 2
52749: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52750: LD_INT 0
52752: PPUSH
52753: PPUSH
52754: PPUSH
// pom := GetBase ( building ) ;
52755: NOP4
52759: PUSH
52760: NOP4
52764: PPUSH
52765: NOP4
52769: ST_TO_ADDR
// if not pom then
52770: NOP4
52774: NOT
52775: IFFALSE 52779
// exit ;
52777: GO 52880
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52779: NOP4
52783: PUSH
52784: NOP4
52788: PPUSH
52789: NOP4
52793: PPUSH
52794: NOP4
52798: PPUSH
52799: NOP4
52803: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52804: NOP4
52808: PUSH
52809: NOP4
52813: PPUSH
52814: LD_INT 1
52816: PPUSH
52817: NOP4
52821: PUSH
52822: NOP4
52826: PUSH
52827: LD_INT 1
52829: ARRAY
52830: GREATEREQUAL
52831: PUSH
52832: NOP4
52836: PPUSH
52837: LD_INT 2
52839: PPUSH
52840: NOP4
52844: PUSH
52845: NOP4
52849: PUSH
52850: LD_INT 2
52852: ARRAY
52853: GREATEREQUAL
52854: AND
52855: PUSH
52856: NOP4
52860: PPUSH
52861: LD_INT 3
52863: PPUSH
52864: NOP4
52868: PUSH
52869: NOP4
52873: PUSH
52874: LD_INT 3
52876: ARRAY
52877: GREATEREQUAL
52878: AND
52879: ST_TO_ADDR
// end ;
52880: LD_VAR 0 3
52884: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52885: LD_INT 0
52887: PPUSH
52888: PPUSH
52889: PPUSH
52890: PPUSH
52891: PPUSH
52892: PPUSH
52893: PPUSH
52894: PPUSH
52895: PPUSH
52896: PPUSH
52897: PPUSH
// result := false ;
52898: NOP4
52902: PUSH
52903: LD_INT 0
52905: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52906: NOP4
52910: NOT
52911: PUSH
52912: NOP4
52916: NOT
52917: OR
52918: PUSH
52919: NOP4
52923: NOT
52924: OR
52925: PUSH
52926: NOP4
52930: NOT
52931: OR
52932: IFFALSE 52936
// exit ;
52934: GO 53750
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52936: NOP4
52940: PUSH
52941: NOP4
52945: PPUSH
52946: NOP4
52950: PPUSH
52951: NOP4
52955: PPUSH
52956: NOP4
52960: PPUSH
52961: NOP4
52965: PUSH
52966: LD_INT 1
52968: ARRAY
52969: PPUSH
52970: NOP4
52974: PPUSH
52975: LD_INT 0
52977: PPUSH
52978: NOP4
52982: ST_TO_ADDR
// if not hexes then
52983: NOP4
52987: NOT
52988: IFFALSE 52992
// exit ;
52990: GO 53750
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52992: NOP4
52996: PUSH
52997: NOP4
53001: PPUSH
53002: LD_INT 22
53004: PUSH
53005: NOP4
53009: PPUSH
53010: NOP4
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 30
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 30
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PPUSH
53051: NOP4
53055: ST_TO_ADDR
// for i = 1 to hexes do
53056: NOP4
53060: PUSH
53061: DOUBLE
53062: LD_INT 1
53064: DEC
53065: ST_TO_ADDR
53066: NOP4
53070: PUSH
53071: FOR_TO
53072: IFFALSE 53748
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53074: NOP4
53078: PUSH
53079: NOP4
53083: PUSH
53084: NOP4
53088: ARRAY
53089: PUSH
53090: LD_INT 1
53092: ARRAY
53093: PPUSH
53094: NOP4
53098: PUSH
53099: NOP4
53103: ARRAY
53104: PUSH
53105: LD_INT 2
53107: ARRAY
53108: PPUSH
53109: NOP4
53113: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53114: NOP4
53118: PUSH
53119: NOP4
53123: ARRAY
53124: PUSH
53125: LD_INT 1
53127: ARRAY
53128: PPUSH
53129: NOP4
53133: PUSH
53134: NOP4
53138: ARRAY
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: PPUSH
53144: NOP4
53148: PUSH
53149: NOP4
53153: PUSH
53154: NOP4
53158: ARRAY
53159: PUSH
53160: LD_INT 1
53162: ARRAY
53163: PPUSH
53164: NOP4
53168: PUSH
53169: NOP4
53173: ARRAY
53174: PUSH
53175: LD_INT 2
53177: ARRAY
53178: PPUSH
53179: NOP4
53183: NOT
53184: OR
53185: PUSH
53186: NOP4
53190: PPUSH
53191: NOP4
53195: PUSH
53196: LD_INT 3
53198: EQUAL
53199: OR
53200: IFFALSE 53206
// exit ;
53202: POP
53203: POP
53204: GO 53750
// if not tmp then
53206: NOP4
53210: NOT
53211: IFFALSE 53215
// continue ;
53213: GO 53071
// result := true ;
53215: NOP4
53219: PUSH
53220: LD_INT 1
53222: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53223: NOP4
53227: PUSH
53228: NOP4
53232: PPUSH
53233: NOP4
53237: PUSH
53238: LD_INT 2
53240: EQUAL
53241: AND
53242: PUSH
53243: NOP4
53247: PPUSH
53248: NOP4
53252: PUSH
53253: LD_INT 1
53255: EQUAL
53256: AND
53257: IFFALSE 53421
// begin if IsDrivenBy ( tmp ) then
53259: NOP4
53263: PPUSH
53264: NOP4
53268: IFFALSE 53272
// continue ;
53270: GO 53071
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53272: NOP4
53276: PPUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 60
53282: PUSH
53283: EMPTY
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 55
53295: PUSH
53296: EMPTY
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PPUSH
53307: NOP4
53311: IFFALSE 53419
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53313: NOP4
53317: PUSH
53318: NOP4
53322: PPUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 60
53328: PUSH
53329: EMPTY
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: LD_INT 55
53341: PUSH
53342: EMPTY
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PPUSH
53353: NOP4
53357: PUSH
53358: LD_INT 1
53360: ARRAY
53361: ST_TO_ADDR
// if IsInUnit ( driver ) then
53362: NOP4
53366: PPUSH
53367: NOP4
53371: IFFALSE 53382
// ComExit ( driver ) ;
53373: NOP4
53377: PPUSH
53378: NOP4
// AddComEnterUnit ( driver , tmp ) ;
53382: NOP4
53386: PPUSH
53387: NOP4
53391: PPUSH
53392: NOP4
// AddComMoveToArea ( driver , parking ) ;
53396: NOP4
53400: PPUSH
53401: NOP4
53405: PPUSH
53406: NOP4
// AddComExitVehicle ( driver ) ;
53410: NOP4
53414: PPUSH
53415: NOP4
// end ; continue ;
53419: GO 53071
// end ; if not cleaners or not tmp in cleaners then
53421: NOP4
53425: NOT
53426: PUSH
53427: NOP4
53431: PUSH
53432: NOP4
53436: IN
53437: NOT
53438: OR
53439: IFFALSE 53746
// begin if dep then
53441: NOP4
53445: IFFALSE 53581
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53447: NOP4
53451: PUSH
53452: NOP4
53456: PUSH
53457: LD_INT 1
53459: ARRAY
53460: PPUSH
53461: NOP4
53465: PPUSH
53466: NOP4
53470: PUSH
53471: LD_INT 1
53473: ARRAY
53474: PPUSH
53475: NOP4
53479: PPUSH
53480: LD_INT 5
53482: PPUSH
53483: NOP4
53487: PUSH
53488: NOP4
53492: PUSH
53493: LD_INT 1
53495: ARRAY
53496: PPUSH
53497: NOP4
53501: PPUSH
53502: NOP4
53506: PUSH
53507: LD_INT 1
53509: ARRAY
53510: PPUSH
53511: NOP4
53515: PPUSH
53516: LD_INT 5
53518: PPUSH
53519: NOP4
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53528: NOP4
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: PPUSH
53537: NOP4
53541: PUSH
53542: LD_INT 2
53544: ARRAY
53545: PPUSH
53546: NOP4
53550: IFFALSE 53581
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53552: NOP4
53556: PPUSH
53557: NOP4
53561: PUSH
53562: LD_INT 1
53564: ARRAY
53565: PPUSH
53566: NOP4
53570: PUSH
53571: LD_INT 2
53573: ARRAY
53574: PPUSH
53575: NOP4
// continue ;
53579: GO 53071
// end ; end ; r := GetDir ( tmp ) ;
53581: NOP4
53585: PUSH
53586: NOP4
53590: PPUSH
53591: NOP4
53595: ST_TO_ADDR
// if r = 5 then
53596: NOP4
53600: PUSH
53601: LD_INT 5
53603: EQUAL
53604: IFFALSE 53614
// r := 0 ;
53606: NOP4
53610: PUSH
53611: LD_INT 0
53613: ST_TO_ADDR
// for j = r to 5 do
53614: NOP4
53618: PUSH
53619: DOUBLE
53620: NOP4
53624: DEC
53625: ST_TO_ADDR
53626: LD_INT 5
53628: PUSH
53629: FOR_TO
53630: IFFALSE 53744
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53632: NOP4
53636: PUSH
53637: NOP4
53641: PPUSH
53642: NOP4
53646: PPUSH
53647: NOP4
53651: PPUSH
53652: LD_INT 2
53654: PPUSH
53655: NOP4
53659: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53660: NOP4
53664: PUSH
53665: NOP4
53669: PPUSH
53670: NOP4
53674: PPUSH
53675: NOP4
53679: PPUSH
53680: LD_INT 2
53682: PPUSH
53683: NOP4
53687: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53688: NOP4
53692: PPUSH
53693: NOP4
53697: PPUSH
53698: NOP4
53702: PUSH
53703: NOP4
53707: PPUSH
53708: NOP4
53712: PPUSH
53713: NOP4
53717: NOT
53718: AND
53719: IFFALSE 53742
// begin ComMoveXY ( tmp , _x , _y ) ;
53721: NOP4
53725: PPUSH
53726: NOP4
53730: PPUSH
53731: NOP4
53735: PPUSH
53736: NOP4
// break ;
53740: GO 53744
// end ; end ;
53742: GO 53629
53744: POP
53745: POP
// end ; end ;
53746: GO 53071
53748: POP
53749: POP
// end ;
53750: LD_VAR 0 8
53754: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
53755: LD_INT 0
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
53766: PPUSH
// result := false ;
53767: NOP4
53771: PUSH
53772: LD_INT 0
53774: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53775: NOP4
53779: NOT
53780: PUSH
53781: NOP4
53785: PPUSH
53786: NOP4
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: IN
53801: NOT
53802: OR
53803: PUSH
53804: NOP4
53808: NOT
53809: OR
53810: PUSH
53811: NOP4
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: LD_INT 4
53830: PUSH
53831: LD_INT 5
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: IN
53842: NOT
53843: OR
53844: PUSH
53845: NOP4
53849: PPUSH
53850: NOP4
53854: PPUSH
53855: NOP4
53859: NOT
53860: OR
53861: IFFALSE 53865
// exit ;
53863: GO 54582
// pom := GetBase ( depot ) ;
53865: NOP4
53869: PUSH
53870: NOP4
53874: PPUSH
53875: NOP4
53879: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53880: NOP4
53884: PUSH
53885: NOP4
53889: PPUSH
53890: NOP4
53894: PPUSH
53895: NOP4
53899: PPUSH
53900: NOP4
53904: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53905: NOP4
53909: PPUSH
53910: LD_INT 1
53912: PPUSH
53913: NOP4
53917: PUSH
53918: NOP4
53922: PUSH
53923: LD_INT 1
53925: ARRAY
53926: GREATEREQUAL
53927: PUSH
53928: NOP4
53932: PPUSH
53933: LD_INT 2
53935: PPUSH
53936: NOP4
53940: PUSH
53941: NOP4
53945: PUSH
53946: LD_INT 2
53948: ARRAY
53949: GREATEREQUAL
53950: AND
53951: PUSH
53952: NOP4
53956: PPUSH
53957: LD_INT 3
53959: PPUSH
53960: NOP4
53964: PUSH
53965: NOP4
53969: PUSH
53970: LD_INT 3
53972: ARRAY
53973: GREATEREQUAL
53974: AND
53975: NOT
53976: IFFALSE 53980
// exit ;
53978: GO 54582
// if GetBType ( depot ) = b_depot then
53980: NOP4
53984: PPUSH
53985: NOP4
53989: PUSH
53990: LD_INT 0
53992: EQUAL
53993: IFFALSE 54005
// dist := 28 else
53995: NOP4
53999: PUSH
54000: LD_INT 28
54002: ST_TO_ADDR
54003: GO 54013
// dist := 36 ;
54005: NOP4
54009: PUSH
54010: LD_INT 36
54012: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54013: NOP4
54017: PPUSH
54018: NOP4
54022: PPUSH
54023: NOP4
54027: PPUSH
54028: NOP4
54032: PUSH
54033: NOP4
54037: GREATER
54038: IFFALSE 54042
// exit ;
54040: GO 54582
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54042: NOP4
54046: PUSH
54047: NOP4
54051: PPUSH
54052: NOP4
54056: PPUSH
54057: NOP4
54061: PPUSH
54062: NOP4
54066: PPUSH
54067: NOP4
54071: PPUSH
54072: NOP4
54076: PPUSH
54077: LD_INT 0
54079: PPUSH
54080: NOP4
54084: ST_TO_ADDR
// if not hexes then
54085: NOP4
54089: NOT
54090: IFFALSE 54094
// exit ;
54092: GO 54582
// hex := GetHexInfo ( x , y ) ;
54094: NOP4
54098: PUSH
54099: NOP4
54103: PPUSH
54104: NOP4
54108: PPUSH
54109: NOP4
54113: ST_TO_ADDR
// if hex [ 1 ] then
54114: NOP4
54118: PUSH
54119: LD_INT 1
54121: ARRAY
54122: IFFALSE 54126
// exit ;
54124: GO 54582
// height := hex [ 2 ] ;
54126: NOP4
54130: PUSH
54131: NOP4
54135: PUSH
54136: LD_INT 2
54138: ARRAY
54139: ST_TO_ADDR
// for i = 1 to hexes do
54140: NOP4
54144: PUSH
54145: DOUBLE
54146: LD_INT 1
54148: DEC
54149: ST_TO_ADDR
54150: NOP4
54154: PUSH
54155: FOR_TO
54156: IFFALSE 54486
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54158: NOP4
54162: PUSH
54163: NOP4
54167: ARRAY
54168: PUSH
54169: LD_INT 1
54171: ARRAY
54172: PPUSH
54173: NOP4
54177: PUSH
54178: NOP4
54182: ARRAY
54183: PUSH
54184: LD_INT 2
54186: ARRAY
54187: PPUSH
54188: NOP4
54192: NOT
54193: PUSH
54194: NOP4
54198: PUSH
54199: NOP4
54203: ARRAY
54204: PUSH
54205: LD_INT 1
54207: ARRAY
54208: PPUSH
54209: NOP4
54213: PUSH
54214: NOP4
54218: ARRAY
54219: PUSH
54220: LD_INT 2
54222: ARRAY
54223: PPUSH
54224: NOP4
54228: PUSH
54229: LD_INT 0
54231: GREATER
54232: OR
54233: PUSH
54234: NOP4
54238: PUSH
54239: NOP4
54243: ARRAY
54244: PUSH
54245: LD_INT 1
54247: ARRAY
54248: PPUSH
54249: NOP4
54253: PUSH
54254: NOP4
54258: ARRAY
54259: PUSH
54260: LD_INT 2
54262: ARRAY
54263: PPUSH
54264: NOP4
54268: OR
54269: IFFALSE 54275
// exit ;
54271: POP
54272: POP
54273: GO 54582
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54275: NOP4
54279: PUSH
54280: NOP4
54284: PUSH
54285: NOP4
54289: ARRAY
54290: PUSH
54291: LD_INT 1
54293: ARRAY
54294: PPUSH
54295: NOP4
54299: PUSH
54300: NOP4
54304: ARRAY
54305: PUSH
54306: LD_INT 2
54308: ARRAY
54309: PPUSH
54310: NOP4
54314: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54315: NOP4
54319: PUSH
54320: LD_INT 1
54322: ARRAY
54323: PUSH
54324: NOP4
54328: PUSH
54329: LD_INT 2
54331: ARRAY
54332: PUSH
54333: NOP4
54337: PUSH
54338: LD_INT 2
54340: PLUS
54341: GREATER
54342: OR
54343: PUSH
54344: NOP4
54348: PUSH
54349: LD_INT 2
54351: ARRAY
54352: PUSH
54353: NOP4
54357: PUSH
54358: LD_INT 2
54360: MINUS
54361: LESS
54362: OR
54363: PUSH
54364: NOP4
54368: PUSH
54369: LD_INT 3
54371: ARRAY
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 8
54378: PUSH
54379: LD_INT 9
54381: PUSH
54382: LD_INT 10
54384: PUSH
54385: LD_INT 11
54387: PUSH
54388: LD_INT 12
54390: PUSH
54391: LD_INT 13
54393: PUSH
54394: LD_INT 16
54396: PUSH
54397: LD_INT 17
54399: PUSH
54400: LD_INT 18
54402: PUSH
54403: LD_INT 19
54405: PUSH
54406: LD_INT 20
54408: PUSH
54409: LD_INT 21
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: IN
54427: NOT
54428: OR
54429: PUSH
54430: NOP4
54434: PUSH
54435: LD_INT 5
54437: ARRAY
54438: NOT
54439: OR
54440: PUSH
54441: NOP4
54445: PUSH
54446: LD_INT 6
54448: ARRAY
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 7
54458: PUSH
54459: LD_INT 9
54461: PUSH
54462: LD_INT 10
54464: PUSH
54465: LD_INT 11
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: IN
54476: NOT
54477: OR
54478: IFFALSE 54484
// exit ;
54480: POP
54481: POP
54482: GO 54582
// end ;
54484: GO 54155
54486: POP
54487: POP
// side := GetSide ( depot ) ;
54488: NOP4
54492: PUSH
54493: NOP4
54497: PPUSH
54498: NOP4
54502: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54503: NOP4
54507: PPUSH
54508: NOP4
54512: PPUSH
54513: NOP4
54517: PPUSH
54518: LD_INT 20
54520: PPUSH
54521: NOP4
54525: PUSH
54526: LD_INT 4
54528: ARRAY
54529: IFFALSE 54533
// exit ;
54531: GO 54582
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54533: NOP4
54537: PUSH
54538: LD_INT 29
54540: PUSH
54541: LD_INT 30
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: IN
54548: PUSH
54549: NOP4
54553: PPUSH
54554: NOP4
54558: PPUSH
54559: NOP4
54563: PPUSH
54564: NOP4
54568: NOT
54569: AND
54570: IFFALSE 54574
// exit ;
54572: GO 54582
// result := true ;
54574: NOP4
54578: PUSH
54579: LD_INT 1
54581: ST_TO_ADDR
// end ;
54582: LD_VAR 0 6
54586: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54587: LD_INT 0
54589: PPUSH
54590: PPUSH
54591: PPUSH
54592: PPUSH
54593: PPUSH
54594: PPUSH
54595: PPUSH
54596: PPUSH
54597: PPUSH
54598: PPUSH
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
54603: PPUSH
54604: PPUSH
54605: PPUSH
54606: PPUSH
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
54611: PPUSH
54612: PPUSH
54613: PPUSH
54614: PPUSH
54615: PPUSH
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
54620: PPUSH
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
54625: PPUSH
54626: PPUSH
54627: PPUSH
54628: PPUSH
54629: PPUSH
54630: PPUSH
54631: PPUSH
54632: PPUSH
54633: PPUSH
54634: PPUSH
54635: PPUSH
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
54644: PPUSH
54645: PPUSH
54646: PPUSH
// result = [ ] ;
54647: NOP4
54651: PUSH
54652: EMPTY
54653: ST_TO_ADDR
// temp_list = [ ] ;
54654: NOP4
54658: PUSH
54659: EMPTY
54660: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54661: NOP4
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: LD_INT 4
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: IN
54692: NOT
54693: PUSH
54694: NOP4
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: IN
54709: PUSH
54710: NOP4
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: IN
54729: NOT
54730: AND
54731: OR
54732: IFFALSE 54736
// exit ;
54734: GO 73127
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54736: NOP4
54740: PUSH
54741: LD_INT 6
54743: PUSH
54744: LD_INT 7
54746: PUSH
54747: LD_INT 8
54749: PUSH
54750: LD_INT 13
54752: PUSH
54753: LD_INT 12
54755: PUSH
54756: LD_INT 15
54758: PUSH
54759: LD_INT 11
54761: PUSH
54762: LD_INT 14
54764: PUSH
54765: LD_INT 10
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: IN
54779: IFFALSE 54789
// btype = b_lab ;
54781: NOP4
54785: PUSH
54786: LD_INT 6
54788: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54789: NOP4
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: IN
54808: NOT
54809: PUSH
54810: NOP4
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 6
54829: PUSH
54830: LD_INT 36
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: LD_INT 5
54838: PUSH
54839: LD_INT 31
54841: PUSH
54842: LD_INT 32
54844: PUSH
54845: LD_INT 33
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: IN
54861: NOT
54862: PUSH
54863: NOP4
54867: PUSH
54868: LD_INT 1
54870: EQUAL
54871: AND
54872: OR
54873: PUSH
54874: NOP4
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: IN
54889: NOT
54890: PUSH
54891: NOP4
54895: PUSH
54896: LD_INT 2
54898: EQUAL
54899: AND
54900: OR
54901: IFFALSE 54911
// mode = 0 ;
54903: NOP4
54907: PUSH
54908: LD_INT 0
54910: ST_TO_ADDR
// case mode of 0 :
54911: NOP4
54915: PUSH
54916: LD_INT 0
54918: DOUBLE
54919: EQUAL
54920: IFTRUE 54924
54922: GO 66377
54924: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54925: NOP4
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55118: NOP4
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55314: NOP4
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55513: NOP4
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55709: NOP4
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55902: NOP4
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56095: NOP4
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56325: NOP4
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56555: NOP4
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56785: NOP4
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57015: NOP4
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57245: NOP4
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57475: NOP4
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57755: NOP4
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: NEG
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58031: NOP4
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58305: NOP4
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58581: NOP4
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58861: NOP4
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59143: NOP4
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 3
59387: NEG
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59422: NOP4
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59700: NOP4
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 3
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59978: NOP4
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60256: NOP4
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60535: NOP4
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: NEG
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60815: NOP4
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60927: NOP4
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61039: NOP4
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61151: NOP4
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61263: NOP4
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61375: NOP4
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61487: NOP4
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: NEG
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: LD_INT 3
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61837: NOP4
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: LD_INT 3
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: LD_INT 3
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 3
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: NEG
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62187: NOP4
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62535: NOP4
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: NEG
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: NEG
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62885: NOP4
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: NEG
63076: PUSH
63077: LD_INT 3
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: LD_INT 3
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 3
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63235: NOP4
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: NEG
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 3
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 3
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 3
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63583: NOP4
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63734: NOP4
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63881: NOP4
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 2
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64025: NOP4
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64169: NOP4
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64316: NOP4
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64467: NOP4
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 2
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: LD_INT 2
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 2
64643: NEG
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64697: NOP4
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: NEG
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: LD_INT 2
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64927: NOP4
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: NEG
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65157: NOP4
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: LD_INT 2
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65387: NOP4
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: NEG
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 2
65574: NEG
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65617: NOP4
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: LD_INT 2
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: LD_INT 2
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65847: NOP4
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65935: NOP4
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 1
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 1
65993: NEG
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66023: NOP4
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 1
66081: NEG
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66111: NOP4
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66199: NOP4
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: NEG
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: LD_INT 1
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66287: NOP4
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// end ; 1 :
66375: GO 72272
66377: LD_INT 1
66379: DOUBLE
66380: EQUAL
66381: IFTRUE 66385
66383: GO 69008
66385: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66386: NOP4
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: LD_INT 3
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: LD_INT 3
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: LIST
66429: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66430: NOP4
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: LD_INT 1
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66471: NOP4
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: LD_INT 3
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66511: NOP4
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: LD_INT 3
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: LD_INT 3
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66552: NOP4
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: LD_INT 1
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66596: NOP4
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: LD_INT 3
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 3
66615: NEG
66616: PUSH
66617: LD_INT 2
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 3
66627: NEG
66628: PUSH
66629: LD_INT 3
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: LIST
66641: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66642: NOP4
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: LD_INT 3
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 3
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66686: NOP4
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66727: NOP4
66731: PUSH
66732: LD_INT 3
66734: PUSH
66735: LD_INT 2
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 3
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 2
66754: PUSH
66755: LD_INT 3
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66767: NOP4
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66808: NOP4
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 3
66826: NEG
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 3
66837: NEG
66838: PUSH
66839: LD_INT 1
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: LIST
66851: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66852: NOP4
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: LD_INT 3
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: LD_INT 2
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66898: NOP4
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 3
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 4
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66942: NOP4
66946: PUSH
66947: LD_INT 3
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 3
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66983: NOP4
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: PUSH
67011: LD_INT 4
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: LIST
67022: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67023: NOP4
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: LD_INT 4
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67064: NOP4
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 3
67082: NEG
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 4
67093: NEG
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: LIST
67107: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67108: NOP4
67112: PUSH
67113: LD_INT 3
67115: NEG
67116: PUSH
67117: LD_INT 3
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 3
67127: NEG
67128: PUSH
67129: LD_INT 4
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: LD_INT 3
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67154: NOP4
67158: PUSH
67159: LD_INT 1
67161: NEG
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: LD_INT 3
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: LD_INT 2
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: LD_INT 4
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: LD_INT 4
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 3
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: LD_INT 5
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: LD_INT 5
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: LD_INT 4
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: LD_INT 6
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 6
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 5
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67309: NOP4
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 3
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 5
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 5
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 5
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 6
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 6
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67452: NOP4
67456: PUSH
67457: LD_INT 3
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 4
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 4
67499: PUSH
67500: LD_INT 4
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 3
67509: PUSH
67510: LD_INT 4
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 5
67519: PUSH
67520: LD_INT 4
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 5
67529: PUSH
67530: LD_INT 5
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 4
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 6
67549: PUSH
67550: LD_INT 5
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 6
67559: PUSH
67560: LD_INT 6
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 5
67569: PUSH
67570: LD_INT 6
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67591: NOP4
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 1
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: LD_INT 4
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: LD_INT 5
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 5
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 6
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 6
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: LD_INT 5
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67734: NOP4
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: LD_INT 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 4
67786: NEG
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 4
67797: NEG
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 4
67809: NEG
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 5
67820: NEG
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 5
67831: NEG
67832: PUSH
67833: LD_INT 1
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 5
67843: NEG
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 6
67854: NEG
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 6
67865: NEG
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67889: NOP4
67893: PUSH
67894: LD_INT 2
67896: NEG
67897: PUSH
67898: LD_INT 3
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: NEG
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 3
67920: NEG
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 3
67932: NEG
67933: PUSH
67934: LD_INT 4
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 4
67944: NEG
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 4
67956: NEG
67957: PUSH
67958: LD_INT 4
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: LD_INT 5
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 5
67980: NEG
67981: PUSH
67982: LD_INT 4
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 5
67992: NEG
67993: PUSH
67994: LD_INT 5
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 5
68004: NEG
68005: PUSH
68006: LD_INT 6
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 6
68016: NEG
68017: PUSH
68018: LD_INT 5
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 6
68028: NEG
68029: PUSH
68030: LD_INT 6
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68052: NOP4
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 2
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: NEG
68071: PUSH
68072: LD_INT 3
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68096: NOP4
68100: PUSH
68101: LD_INT 2
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 2
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 1
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: LIST
68136: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68137: NOP4
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 3
68154: PUSH
68155: LD_INT 2
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: LD_INT 3
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: LIST
68176: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68177: NOP4
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: LD_INT 3
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: LD_INT 2
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68218: NOP4
68222: PUSH
68223: LD_INT 2
68225: NEG
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 2
68236: NEG
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 3
68247: NEG
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68262: NOP4
68266: PUSH
68267: LD_INT 2
68269: NEG
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 2
68281: NEG
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 3
68293: NEG
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68308: NOP4
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: NEG
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68341: NOP4
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68372: NOP4
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 3
68389: PUSH
68390: LD_INT 2
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68401: NOP4
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68430: NOP4
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 2
68448: NEG
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68461: NOP4
68465: PUSH
68466: LD_INT 3
68468: NEG
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: LD_INT 2
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68494: NOP4
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 3
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: LD_INT 3
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: LD_INT 2
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: LIST
68537: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68538: NOP4
68542: PUSH
68543: LD_INT 2
68545: PUSH
68546: LD_INT 1
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: LD_INT 1
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: LIST
68578: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68579: NOP4
68583: PUSH
68584: LD_INT 3
68586: PUSH
68587: LD_INT 2
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 3
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: LIST
68618: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68619: NOP4
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: LD_INT 3
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 3
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: LD_INT 2
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68660: NOP4
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 3
68678: NEG
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 3
68689: NEG
68690: PUSH
68691: LD_INT 1
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68704: NOP4
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: LD_INT 2
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: LD_INT 3
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: LIST
68749: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68750: NOP4
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: LD_INT 2
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: LD_INT 2
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: PUSH
68781: LD_INT 1
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68794: NOP4
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: LD_INT 1
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68835: NOP4
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: LD_INT 1
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 2
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68875: NOP4
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: LD_INT 2
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 1
68902: NEG
68903: PUSH
68904: LD_INT 1
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68916: NOP4
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 2
68934: NEG
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68960: NOP4
68964: PUSH
68965: LD_INT 1
68967: NEG
68968: PUSH
68969: LD_INT 2
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 2
68979: NEG
68980: PUSH
68981: LD_INT 1
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 2
68991: NEG
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: ST_TO_ADDR
// end ; 2 :
69006: GO 72272
69008: LD_INT 2
69010: DOUBLE
69011: EQUAL
69012: IFTRUE 69016
69014: GO 72271
69016: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69017: NOP4
69021: PUSH
69022: LD_INT 4
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: PUSH
69035: LD_INT 1
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 5
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 5
69055: PUSH
69056: LD_INT 1
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 4
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 3
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 3
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 2
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 5
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: LD_INT 3
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: LD_INT 4
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: LD_INT 4
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 2
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 4
69187: PUSH
69188: LD_INT 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 2
69197: PUSH
69198: LD_INT 4
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: LD_INT 4
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: LD_INT 3
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 1
69227: PUSH
69228: LD_INT 4
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: LD_INT 5
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: LD_INT 5
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 1
69257: NEG
69258: PUSH
69259: LD_INT 4
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: LD_INT 3
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: PUSH
69280: LD_INT 5
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 2
69289: NEG
69290: PUSH
69291: LD_INT 3
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 3
69300: NEG
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 3
69311: NEG
69312: PUSH
69313: LD_INT 1
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 2
69323: NEG
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 2
69334: NEG
69335: PUSH
69336: LD_INT 1
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 3
69345: NEG
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 4
69356: NEG
69357: PUSH
69358: LD_INT 0
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 4
69367: NEG
69368: PUSH
69369: LD_INT 1
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 4
69379: NEG
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 2
69391: NEG
69392: PUSH
69393: LD_INT 2
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 4
69402: NEG
69403: PUSH
69404: LD_INT 4
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 4
69414: NEG
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: NEG
69427: PUSH
69428: LD_INT 4
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 3
69438: NEG
69439: PUSH
69440: LD_INT 3
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 4
69450: NEG
69451: PUSH
69452: LD_INT 3
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 5
69462: NEG
69463: PUSH
69464: LD_INT 4
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 5
69474: NEG
69475: PUSH
69476: LD_INT 5
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 3
69486: NEG
69487: PUSH
69488: LD_INT 5
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 5
69498: NEG
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69555: NOP4
69559: PUSH
69560: LD_INT 4
69562: PUSH
69563: LD_INT 4
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 4
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 5
69582: PUSH
69583: LD_INT 4
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 5
69592: PUSH
69593: LD_INT 5
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 4
69602: PUSH
69603: LD_INT 5
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: LD_INT 4
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: LD_INT 3
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 5
69632: PUSH
69633: LD_INT 3
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: LD_INT 5
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: LD_INT 4
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 4
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: NEG
69714: PUSH
69715: LD_INT 2
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 2
69724: PUSH
69725: LD_INT 4
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 2
69734: NEG
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 4
69745: NEG
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 4
69756: NEG
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 3
69768: NEG
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: LD_INT 1
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 5
69801: NEG
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 5
69812: NEG
69813: PUSH
69814: LD_INT 1
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 5
69824: NEG
69825: PUSH
69826: LD_INT 2
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 3
69836: NEG
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: NEG
69848: PUSH
69849: LD_INT 3
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 3
69859: NEG
69860: PUSH
69861: LD_INT 4
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 2
69871: NEG
69872: PUSH
69873: LD_INT 3
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 2
69883: NEG
69884: PUSH
69885: LD_INT 2
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 3
69895: NEG
69896: PUSH
69897: LD_INT 2
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 4
69907: NEG
69908: PUSH
69909: LD_INT 3
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 4
69919: NEG
69920: PUSH
69921: LD_INT 4
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 2
69931: NEG
69932: PUSH
69933: LD_INT 4
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 4
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 5
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: LD_INT 4
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: LD_INT 3
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: LD_INT 3
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: LD_INT 4
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: NEG
70023: PUSH
70024: LD_INT 5
70026: NEG
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 2
70034: PUSH
70035: LD_INT 3
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 2
70045: NEG
70046: PUSH
70047: LD_INT 5
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70102: NOP4
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: LD_INT 4
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 0
70119: PUSH
70120: LD_INT 3
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: LD_INT 4
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 1
70139: PUSH
70140: LD_INT 5
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 5
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 1
70170: NEG
70171: PUSH
70172: LD_INT 3
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 2
70181: PUSH
70182: LD_INT 5
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 2
70191: NEG
70192: PUSH
70193: LD_INT 3
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: NEG
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: NEG
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 2
70225: NEG
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 2
70236: NEG
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 3
70247: NEG
70248: PUSH
70249: LD_INT 1
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 4
70258: NEG
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 4
70269: NEG
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 4
70281: NEG
70282: PUSH
70283: LD_INT 2
70285: NEG
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 2
70293: NEG
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 4
70304: NEG
70305: PUSH
70306: LD_INT 4
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 4
70316: NEG
70317: PUSH
70318: LD_INT 5
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 3
70328: NEG
70329: PUSH
70330: LD_INT 4
70332: NEG
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 3
70340: NEG
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 4
70352: NEG
70353: PUSH
70354: LD_INT 3
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 5
70364: NEG
70365: PUSH
70366: LD_INT 4
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 5
70376: NEG
70377: PUSH
70378: LD_INT 5
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: LD_INT 5
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 5
70400: NEG
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 3
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: LD_INT 4
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 1
70434: PUSH
70435: LD_INT 3
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: LD_INT 2
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: LD_INT 2
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: NEG
70468: PUSH
70469: LD_INT 3
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 1
70479: NEG
70480: PUSH
70481: LD_INT 4
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 2
70491: PUSH
70492: LD_INT 2
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: LD_INT 4
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 4
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: PUSH
70525: LD_INT 1
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 5
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: PUSH
70546: LD_INT 1
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 4
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 3
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 1
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: LD_INT 2
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 5
70597: PUSH
70598: LD_INT 2
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70652: NOP4
70656: PUSH
70657: LD_INT 4
70659: NEG
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 4
70670: NEG
70671: PUSH
70672: LD_INT 1
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 3
70682: NEG
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 3
70693: NEG
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 4
70704: NEG
70705: PUSH
70706: LD_INT 1
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 5
70715: NEG
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 5
70726: NEG
70727: PUSH
70728: LD_INT 1
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 5
70738: NEG
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 3
70750: NEG
70751: PUSH
70752: LD_INT 2
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 3
70761: NEG
70762: PUSH
70763: LD_INT 3
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 3
70773: NEG
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 2
70785: NEG
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 2
70797: NEG
70798: PUSH
70799: LD_INT 2
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 3
70809: NEG
70810: PUSH
70811: LD_INT 2
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 4
70821: NEG
70822: PUSH
70823: LD_INT 3
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: LD_INT 4
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 2
70845: NEG
70846: PUSH
70847: LD_INT 4
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 4
70857: NEG
70858: PUSH
70859: LD_INT 2
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 4
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: LD_INT 5
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 1
70891: PUSH
70892: LD_INT 4
70894: NEG
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 1
70902: PUSH
70903: LD_INT 3
70905: NEG
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 0
70913: PUSH
70914: LD_INT 3
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: NEG
70925: PUSH
70926: LD_INT 4
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 1
70936: NEG
70937: PUSH
70938: LD_INT 5
70940: NEG
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 2
70948: PUSH
70949: LD_INT 3
70951: NEG
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: LD_INT 5
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 3
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: PUSH
70982: LD_INT 1
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 4
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 4
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 3
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 2
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 2
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: LD_INT 2
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 4
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 4
71064: PUSH
71065: LD_INT 4
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 4
71074: PUSH
71075: LD_INT 3
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 5
71084: PUSH
71085: LD_INT 4
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 5
71094: PUSH
71095: LD_INT 5
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 4
71104: PUSH
71105: LD_INT 5
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 3
71114: PUSH
71115: LD_INT 4
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 3
71124: PUSH
71125: LD_INT 3
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 5
71134: PUSH
71135: LD_INT 3
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 3
71144: PUSH
71145: LD_INT 5
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71199: NOP4
71203: PUSH
71204: LD_INT 4
71206: NEG
71207: PUSH
71208: LD_INT 4
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 4
71218: NEG
71219: PUSH
71220: LD_INT 5
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 3
71230: NEG
71231: PUSH
71232: LD_INT 4
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 3
71242: NEG
71243: PUSH
71244: LD_INT 3
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 4
71254: NEG
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 5
71266: NEG
71267: PUSH
71268: LD_INT 4
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 5
71278: NEG
71279: PUSH
71280: LD_INT 5
71282: NEG
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 3
71290: NEG
71291: PUSH
71292: LD_INT 5
71294: NEG
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 5
71302: NEG
71303: PUSH
71304: LD_INT 3
71306: NEG
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: LD_INT 3
71317: NEG
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: LD_INT 4
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 1
71336: PUSH
71337: LD_INT 3
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 1
71347: PUSH
71348: LD_INT 2
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 0
71358: PUSH
71359: LD_INT 2
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 1
71369: NEG
71370: PUSH
71371: LD_INT 3
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 1
71381: NEG
71382: PUSH
71383: LD_INT 4
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 2
71393: PUSH
71394: LD_INT 2
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 2
71404: NEG
71405: PUSH
71406: LD_INT 4
71408: NEG
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 4
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 4
71426: PUSH
71427: LD_INT 1
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 5
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 5
71447: PUSH
71448: LD_INT 1
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 4
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 3
71467: PUSH
71468: LD_INT 0
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: PUSH
71478: LD_INT 1
71480: NEG
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 3
71488: PUSH
71489: LD_INT 2
71491: NEG
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 5
71499: PUSH
71500: LD_INT 2
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 3
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 3
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 4
71529: PUSH
71530: LD_INT 3
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 4
71539: PUSH
71540: LD_INT 4
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 3
71549: PUSH
71550: LD_INT 4
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 2
71559: PUSH
71560: LD_INT 3
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 2
71569: PUSH
71570: LD_INT 2
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 4
71579: PUSH
71580: LD_INT 2
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 2
71589: PUSH
71590: LD_INT 4
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: LD_INT 4
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 0
71609: PUSH
71610: LD_INT 3
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 1
71619: PUSH
71620: LD_INT 4
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: LD_INT 5
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: LD_INT 5
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: PUSH
71651: LD_INT 4
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 1
71660: NEG
71661: PUSH
71662: LD_INT 3
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 2
71671: PUSH
71672: LD_INT 5
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: NEG
71682: PUSH
71683: LD_INT 3
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71737: NOP4
71741: PUSH
71742: LD_INT 0
71744: PUSH
71745: LD_INT 4
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 0
71755: PUSH
71756: LD_INT 5
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 1
71766: PUSH
71767: LD_INT 4
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: LD_INT 3
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 0
71788: PUSH
71789: LD_INT 3
71791: NEG
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 1
71799: NEG
71800: PUSH
71801: LD_INT 4
71803: NEG
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 1
71811: NEG
71812: PUSH
71813: LD_INT 5
71815: NEG
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 2
71823: PUSH
71824: LD_INT 3
71826: NEG
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: LD_INT 5
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 3
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 3
71856: PUSH
71857: LD_INT 1
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 4
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 4
71877: PUSH
71878: LD_INT 1
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 3
71887: PUSH
71888: LD_INT 1
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 2
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 2
71907: PUSH
71908: LD_INT 1
71910: NEG
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 2
71918: PUSH
71919: LD_INT 2
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 4
71929: PUSH
71930: LD_INT 2
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 4
71939: PUSH
71940: LD_INT 4
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 4
71949: PUSH
71950: LD_INT 3
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 5
71959: PUSH
71960: LD_INT 4
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 5
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 4
71979: PUSH
71980: LD_INT 5
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 3
71989: PUSH
71990: LD_INT 4
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 3
71999: PUSH
72000: LD_INT 3
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 5
72009: PUSH
72010: LD_INT 3
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: LD_INT 5
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: LD_INT 3
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: LD_INT 2
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: LD_INT 3
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: LD_INT 4
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: LD_INT 4
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 1
72079: NEG
72080: PUSH
72081: LD_INT 3
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 1
72090: NEG
72091: PUSH
72092: LD_INT 2
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 2
72101: PUSH
72102: LD_INT 4
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: LD_INT 2
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 4
72122: NEG
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 4
72133: NEG
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 3
72145: NEG
72146: PUSH
72147: LD_INT 0
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 3
72156: NEG
72157: PUSH
72158: LD_INT 1
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 4
72167: NEG
72168: PUSH
72169: LD_INT 1
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 5
72178: NEG
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 5
72189: NEG
72190: PUSH
72191: LD_INT 1
72193: NEG
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 5
72201: NEG
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 3
72213: NEG
72214: PUSH
72215: LD_INT 2
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: ST_TO_ADDR
// end ; end ;
72269: GO 72272
72271: POP
// case btype of b_depot , b_warehouse :
72272: NOP4
72276: PUSH
72277: LD_INT 0
72279: DOUBLE
72280: EQUAL
72281: IFTRUE 72291
72283: LD_INT 1
72285: DOUBLE
72286: EQUAL
72287: IFTRUE 72291
72289: GO 72492
72291: POP
// case nation of nation_american :
72292: NOP4
72296: PUSH
72297: LD_INT 1
72299: DOUBLE
72300: EQUAL
72301: IFTRUE 72305
72303: GO 72361
72305: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72306: NOP4
72310: PUSH
72311: NOP4
72315: PUSH
72316: NOP4
72320: PUSH
72321: NOP4
72325: PUSH
72326: NOP4
72330: PUSH
72331: NOP4
72335: PUSH
72336: NOP4
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: PUSH
72349: NOP4
72353: PUSH
72354: LD_INT 1
72356: PLUS
72357: ARRAY
72358: ST_TO_ADDR
72359: GO 72490
72361: LD_INT 2
72363: DOUBLE
72364: EQUAL
72365: IFTRUE 72369
72367: GO 72425
72369: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72370: NOP4
72374: PUSH
72375: NOP4
72379: PUSH
72380: NOP4
72384: PUSH
72385: NOP4
72389: PUSH
72390: NOP4
72394: PUSH
72395: NOP4
72399: PUSH
72400: NOP4
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: PUSH
72413: NOP4
72417: PUSH
72418: LD_INT 1
72420: PLUS
72421: ARRAY
72422: ST_TO_ADDR
72423: GO 72490
72425: LD_INT 3
72427: DOUBLE
72428: EQUAL
72429: IFTRUE 72433
72431: GO 72489
72433: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72434: NOP4
72438: PUSH
72439: NOP4
72443: PUSH
72444: NOP4
72448: PUSH
72449: NOP4
72453: PUSH
72454: NOP4
72458: PUSH
72459: NOP4
72463: PUSH
72464: NOP4
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: PUSH
72477: NOP4
72481: PUSH
72482: LD_INT 1
72484: PLUS
72485: ARRAY
72486: ST_TO_ADDR
72487: GO 72490
72489: POP
72490: GO 73045
72492: LD_INT 2
72494: DOUBLE
72495: EQUAL
72496: IFTRUE 72506
72498: LD_INT 3
72500: DOUBLE
72501: EQUAL
72502: IFTRUE 72506
72504: GO 72562
72506: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72507: NOP4
72511: PUSH
72512: NOP4
72516: PUSH
72517: NOP4
72521: PUSH
72522: NOP4
72526: PUSH
72527: NOP4
72531: PUSH
72532: NOP4
72536: PUSH
72537: NOP4
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: PUSH
72550: NOP4
72554: PUSH
72555: LD_INT 1
72557: PLUS
72558: ARRAY
72559: ST_TO_ADDR
72560: GO 73045
72562: LD_INT 16
72564: DOUBLE
72565: EQUAL
72566: IFTRUE 72624
72568: LD_INT 17
72570: DOUBLE
72571: EQUAL
72572: IFTRUE 72624
72574: LD_INT 18
72576: DOUBLE
72577: EQUAL
72578: IFTRUE 72624
72580: LD_INT 19
72582: DOUBLE
72583: EQUAL
72584: IFTRUE 72624
72586: LD_INT 22
72588: DOUBLE
72589: EQUAL
72590: IFTRUE 72624
72592: LD_INT 20
72594: DOUBLE
72595: EQUAL
72596: IFTRUE 72624
72598: LD_INT 21
72600: DOUBLE
72601: EQUAL
72602: IFTRUE 72624
72604: LD_INT 23
72606: DOUBLE
72607: EQUAL
72608: IFTRUE 72624
72610: LD_INT 24
72612: DOUBLE
72613: EQUAL
72614: IFTRUE 72624
72616: LD_INT 25
72618: DOUBLE
72619: EQUAL
72620: IFTRUE 72624
72622: GO 72680
72624: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72625: NOP4
72629: PUSH
72630: NOP4
72634: PUSH
72635: NOP4
72639: PUSH
72640: NOP4
72644: PUSH
72645: NOP4
72649: PUSH
72650: NOP4
72654: PUSH
72655: NOP4
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: PUSH
72668: NOP4
72672: PUSH
72673: LD_INT 1
72675: PLUS
72676: ARRAY
72677: ST_TO_ADDR
72678: GO 73045
72680: LD_INT 6
72682: DOUBLE
72683: EQUAL
72684: IFTRUE 72736
72686: LD_INT 7
72688: DOUBLE
72689: EQUAL
72690: IFTRUE 72736
72692: LD_INT 8
72694: DOUBLE
72695: EQUAL
72696: IFTRUE 72736
72698: LD_INT 13
72700: DOUBLE
72701: EQUAL
72702: IFTRUE 72736
72704: LD_INT 12
72706: DOUBLE
72707: EQUAL
72708: IFTRUE 72736
72710: LD_INT 15
72712: DOUBLE
72713: EQUAL
72714: IFTRUE 72736
72716: LD_INT 11
72718: DOUBLE
72719: EQUAL
72720: IFTRUE 72736
72722: LD_INT 14
72724: DOUBLE
72725: EQUAL
72726: IFTRUE 72736
72728: LD_INT 10
72730: DOUBLE
72731: EQUAL
72732: IFTRUE 72736
72734: GO 72792
72736: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72737: NOP4
72741: PUSH
72742: NOP4
72746: PUSH
72747: NOP4
72751: PUSH
72752: NOP4
72756: PUSH
72757: NOP4
72761: PUSH
72762: NOP4
72766: PUSH
72767: NOP4
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: PUSH
72780: NOP4
72784: PUSH
72785: LD_INT 1
72787: PLUS
72788: ARRAY
72789: ST_TO_ADDR
72790: GO 73045
72792: LD_INT 36
72794: DOUBLE
72795: EQUAL
72796: IFTRUE 72800
72798: GO 72856
72800: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72801: NOP4
72805: PUSH
72806: NOP4
72810: PUSH
72811: NOP4
72815: PUSH
72816: NOP4
72820: PUSH
72821: NOP4
72825: PUSH
72826: NOP4
72830: PUSH
72831: NOP4
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: PUSH
72844: NOP4
72848: PUSH
72849: LD_INT 1
72851: PLUS
72852: ARRAY
72853: ST_TO_ADDR
72854: GO 73045
72856: LD_INT 4
72858: DOUBLE
72859: EQUAL
72860: IFTRUE 72882
72862: LD_INT 5
72864: DOUBLE
72865: EQUAL
72866: IFTRUE 72882
72868: LD_INT 34
72870: DOUBLE
72871: EQUAL
72872: IFTRUE 72882
72874: LD_INT 37
72876: DOUBLE
72877: EQUAL
72878: IFTRUE 72882
72880: GO 72938
72882: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72883: NOP4
72887: PUSH
72888: NOP4
72892: PUSH
72893: NOP4
72897: PUSH
72898: NOP4
72902: PUSH
72903: NOP4
72907: PUSH
72908: NOP4
72912: PUSH
72913: NOP4
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: PUSH
72926: NOP4
72930: PUSH
72931: LD_INT 1
72933: PLUS
72934: ARRAY
72935: ST_TO_ADDR
72936: GO 73045
72938: LD_INT 31
72940: DOUBLE
72941: EQUAL
72942: IFTRUE 72988
72944: LD_INT 32
72946: DOUBLE
72947: EQUAL
72948: IFTRUE 72988
72950: LD_INT 33
72952: DOUBLE
72953: EQUAL
72954: IFTRUE 72988
72956: LD_INT 27
72958: DOUBLE
72959: EQUAL
72960: IFTRUE 72988
72962: LD_INT 26
72964: DOUBLE
72965: EQUAL
72966: IFTRUE 72988
72968: LD_INT 28
72970: DOUBLE
72971: EQUAL
72972: IFTRUE 72988
72974: LD_INT 29
72976: DOUBLE
72977: EQUAL
72978: IFTRUE 72988
72980: LD_INT 30
72982: DOUBLE
72983: EQUAL
72984: IFTRUE 72988
72986: GO 73044
72988: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72989: NOP4
72993: PUSH
72994: NOP4
72998: PUSH
72999: NOP4
73003: PUSH
73004: NOP4
73008: PUSH
73009: NOP4
73013: PUSH
73014: NOP4
73018: PUSH
73019: NOP4
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: PUSH
73032: NOP4
73036: PUSH
73037: LD_INT 1
73039: PLUS
73040: ARRAY
73041: ST_TO_ADDR
73042: GO 73045
73044: POP
// temp_list2 = [ ] ;
73045: NOP4
73049: PUSH
73050: EMPTY
73051: ST_TO_ADDR
// for i in temp_list do
73052: NOP4
73056: PUSH
73057: NOP4
73061: PUSH
73062: FOR_IN
73063: IFFALSE 73115
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73065: NOP4
73069: PUSH
73070: NOP4
73074: PUSH
73075: NOP4
73079: PUSH
73080: LD_INT 1
73082: ARRAY
73083: PUSH
73084: NOP4
73088: PLUS
73089: PUSH
73090: NOP4
73094: PUSH
73095: LD_INT 2
73097: ARRAY
73098: PUSH
73099: NOP4
73103: PLUS
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: EMPTY
73110: LIST
73111: ADD
73112: ST_TO_ADDR
73113: GO 73062
73115: POP
73116: POP
// result = temp_list2 ;
73117: NOP4
73121: PUSH
73122: NOP4
73126: ST_TO_ADDR
// end ;
73127: LD_VAR 0 7
73131: RET
// export function EnemyInRange ( unit , dist ) ; begin
73132: LD_INT 0
73134: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73135: NOP4
73139: PUSH
73140: NOP4
73144: PPUSH
73145: NOP4
73149: PPUSH
73150: NOP4
73154: PPUSH
73155: NOP4
73159: PPUSH
73160: NOP4
73164: PPUSH
73165: NOP4
73169: PPUSH
73170: NOP4
73174: PPUSH
73175: NOP4
73179: PUSH
73180: LD_INT 4
73182: ARRAY
73183: ST_TO_ADDR
// end ;
73184: LD_VAR 0 3
73188: RET
// export function PlayerSeeMe ( unit ) ; begin
73189: LD_INT 0
73191: PPUSH
// result := See ( your_side , unit ) ;
73192: NOP4
73196: PUSH
73197: NOP4
73201: PPUSH
73202: NOP4
73206: PPUSH
73207: NOP4
73211: ST_TO_ADDR
// end ;
73212: LD_VAR 0 2
73216: RET
// export function ReverseDir ( unit ) ; begin
73217: LD_INT 0
73219: PPUSH
// if not unit then
73220: NOP4
73224: NOT
73225: IFFALSE 73229
// exit ;
73227: GO 73252
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73229: NOP4
73233: PUSH
73234: NOP4
73238: PPUSH
73239: NOP4
73243: PUSH
73244: LD_INT 3
73246: PLUS
73247: PUSH
73248: LD_INT 6
73250: MOD
73251: ST_TO_ADDR
// end ;
73252: LD_VAR 0 2
73256: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73257: LD_INT 0
73259: PPUSH
73260: PPUSH
73261: PPUSH
73262: PPUSH
73263: PPUSH
// if not hexes then
73264: NOP4
73268: NOT
73269: IFFALSE 73273
// exit ;
73271: GO 73421
// dist := 9999 ;
73273: NOP4
73277: PUSH
73278: LD_INT 9999
73280: ST_TO_ADDR
// for i = 1 to hexes do
73281: NOP4
73285: PUSH
73286: DOUBLE
73287: LD_INT 1
73289: DEC
73290: ST_TO_ADDR
73291: NOP4
73295: PUSH
73296: FOR_TO
73297: IFFALSE 73409
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73299: NOP4
73303: PPUSH
73304: NOP4
73308: PUSH
73309: NOP4
73313: ARRAY
73314: PUSH
73315: LD_INT 1
73317: ARRAY
73318: PPUSH
73319: NOP4
73323: PUSH
73324: NOP4
73328: ARRAY
73329: PUSH
73330: LD_INT 2
73332: ARRAY
73333: PPUSH
73334: NOP4
73338: PUSH
73339: NOP4
73343: LESS
73344: IFFALSE 73407
// begin hex := hexes [ i ] ;
73346: NOP4
73350: PUSH
73351: NOP4
73355: PUSH
73356: NOP4
73360: ARRAY
73361: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73362: NOP4
73366: PUSH
73367: NOP4
73371: PPUSH
73372: NOP4
73376: PUSH
73377: NOP4
73381: ARRAY
73382: PUSH
73383: LD_INT 1
73385: ARRAY
73386: PPUSH
73387: NOP4
73391: PUSH
73392: NOP4
73396: ARRAY
73397: PUSH
73398: LD_INT 2
73400: ARRAY
73401: PPUSH
73402: NOP4
73406: ST_TO_ADDR
// end ; end ;
73407: GO 73296
73409: POP
73410: POP
// result := hex ;
73411: NOP4
73415: PUSH
73416: NOP4
73420: ST_TO_ADDR
// end ;
73421: LD_VAR 0 3
73425: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73426: LD_INT 0
73428: PPUSH
73429: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73430: NOP4
73434: NOT
73435: PUSH
73436: NOP4
73440: PUSH
73441: LD_INT 21
73443: PUSH
73444: LD_INT 2
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 23
73453: PUSH
73454: LD_INT 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: PPUSH
73465: NOP4
73469: IN
73470: NOT
73471: OR
73472: IFFALSE 73476
// exit ;
73474: GO 73523
// for i = 1 to 3 do
73476: NOP4
73480: PUSH
73481: DOUBLE
73482: LD_INT 1
73484: DEC
73485: ST_TO_ADDR
73486: LD_INT 3
73488: PUSH
73489: FOR_TO
73490: IFFALSE 73521
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73492: NOP4
73496: PPUSH
73497: NOP4
73501: PPUSH
73502: NOP4
73506: PPUSH
73507: NOP4
73511: PPUSH
73512: LD_INT 1
73514: PPUSH
73515: NOP4
73519: GO 73489
73521: POP
73522: POP
// end ;
73523: LD_VAR 0 2
73527: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73528: LD_INT 0
73530: PPUSH
73531: PPUSH
73532: PPUSH
73533: PPUSH
73534: PPUSH
73535: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73536: NOP4
73540: NOT
73541: PUSH
73542: NOP4
73546: NOT
73547: OR
73548: PUSH
73549: NOP4
73553: PPUSH
73554: NOP4
73558: OR
73559: IFFALSE 73563
// exit ;
73561: GO 74004
// x := GetX ( enemy_unit ) ;
73563: NOP4
73567: PUSH
73568: NOP4
73572: PPUSH
73573: NOP4
73577: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73578: NOP4
73582: PUSH
73583: NOP4
73587: PPUSH
73588: NOP4
73592: ST_TO_ADDR
// if not x or not y then
73593: NOP4
73597: NOT
73598: PUSH
73599: NOP4
73603: NOT
73604: OR
73605: IFFALSE 73609
// exit ;
73607: GO 74004
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73609: NOP4
73613: PUSH
73614: NOP4
73618: PPUSH
73619: LD_INT 0
73621: PPUSH
73622: LD_INT 4
73624: PPUSH
73625: NOP4
73629: PUSH
73630: NOP4
73634: PPUSH
73635: LD_INT 0
73637: PPUSH
73638: LD_INT 4
73640: PPUSH
73641: NOP4
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: NOP4
73654: PPUSH
73655: LD_INT 1
73657: PPUSH
73658: LD_INT 4
73660: PPUSH
73661: NOP4
73665: PUSH
73666: NOP4
73670: PPUSH
73671: LD_INT 1
73673: PPUSH
73674: LD_INT 4
73676: PPUSH
73677: NOP4
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: NOP4
73690: PPUSH
73691: LD_INT 2
73693: PPUSH
73694: LD_INT 4
73696: PPUSH
73697: NOP4
73701: PUSH
73702: NOP4
73706: PPUSH
73707: LD_INT 2
73709: PPUSH
73710: LD_INT 4
73712: PPUSH
73713: NOP4
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: NOP4
73726: PPUSH
73727: LD_INT 3
73729: PPUSH
73730: LD_INT 4
73732: PPUSH
73733: NOP4
73737: PUSH
73738: NOP4
73742: PPUSH
73743: LD_INT 3
73745: PPUSH
73746: LD_INT 4
73748: PPUSH
73749: NOP4
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: NOP4
73762: PPUSH
73763: LD_INT 4
73765: PPUSH
73766: LD_INT 4
73768: PPUSH
73769: NOP4
73773: PUSH
73774: NOP4
73778: PPUSH
73779: LD_INT 4
73781: PPUSH
73782: LD_INT 4
73784: PPUSH
73785: NOP4
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: NOP4
73798: PPUSH
73799: LD_INT 5
73801: PPUSH
73802: LD_INT 4
73804: PPUSH
73805: NOP4
73809: PUSH
73810: NOP4
73814: PPUSH
73815: LD_INT 5
73817: PPUSH
73818: LD_INT 4
73820: PPUSH
73821: NOP4
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: ST_TO_ADDR
// for i = tmp downto 1 do
73838: NOP4
73842: PUSH
73843: DOUBLE
73844: NOP4
73848: INC
73849: ST_TO_ADDR
73850: LD_INT 1
73852: PUSH
73853: FOR_DOWNTO
73854: IFFALSE 73955
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73856: NOP4
73860: PUSH
73861: NOP4
73865: ARRAY
73866: PUSH
73867: LD_INT 1
73869: ARRAY
73870: PPUSH
73871: NOP4
73875: PUSH
73876: NOP4
73880: ARRAY
73881: PUSH
73882: LD_INT 2
73884: ARRAY
73885: PPUSH
73886: NOP4
73890: NOT
73891: PUSH
73892: NOP4
73896: PUSH
73897: NOP4
73901: ARRAY
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: PPUSH
73907: NOP4
73911: PUSH
73912: NOP4
73916: ARRAY
73917: PUSH
73918: LD_INT 2
73920: ARRAY
73921: PPUSH
73922: NOP4
73926: PUSH
73927: LD_INT 0
73929: NONEQUAL
73930: OR
73931: IFFALSE 73953
// tmp := Delete ( tmp , i ) ;
73933: NOP4
73937: PUSH
73938: NOP4
73942: PPUSH
73943: NOP4
73947: PPUSH
73948: NOP4
73952: ST_TO_ADDR
73953: GO 73853
73955: POP
73956: POP
// j := GetClosestHex ( unit , tmp ) ;
73957: NOP4
73961: PUSH
73962: NOP4
73966: PPUSH
73967: NOP4
73971: PPUSH
73972: NOP4
73976: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73977: NOP4
73981: PPUSH
73982: NOP4
73986: PUSH
73987: LD_INT 1
73989: ARRAY
73990: PPUSH
73991: NOP4
73995: PUSH
73996: LD_INT 2
73998: ARRAY
73999: PPUSH
74000: NOP4
// end ;
74004: LD_VAR 0 3
74008: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74009: LD_INT 0
74011: PPUSH
74012: PPUSH
74013: PPUSH
// uc_side = 0 ;
74014: LD_ADDR_OWVAR 20
74018: PUSH
74019: LD_INT 0
74021: ST_TO_ADDR
// uc_nation = 0 ;
74022: LD_ADDR_OWVAR 21
74026: PUSH
74027: LD_INT 0
74029: ST_TO_ADDR
// InitHc_All ( ) ;
74030: NOP4
// InitVc ;
74034: NOP4
// if mastodonts then
74038: NOP4
74042: IFFALSE 74109
// for i = 1 to mastodonts do
74044: NOP4
74048: PUSH
74049: DOUBLE
74050: LD_INT 1
74052: DEC
74053: ST_TO_ADDR
74054: NOP4
74058: PUSH
74059: FOR_TO
74060: IFFALSE 74107
// begin vc_chassis := 31 ;
74062: LD_ADDR_OWVAR 37
74066: PUSH
74067: LD_INT 31
74069: ST_TO_ADDR
// vc_control := control_rider ;
74070: LD_ADDR_OWVAR 38
74074: PUSH
74075: LD_INT 4
74077: ST_TO_ADDR
// animal := CreateVehicle ;
74078: NOP4
74082: PUSH
74083: NOP4
74087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74088: NOP4
74092: PPUSH
74093: NOP4
74097: PPUSH
74098: LD_INT 0
74100: PPUSH
74101: NOP4
// end ;
74105: GO 74059
74107: POP
74108: POP
// if horses then
74109: NOP4
74113: IFFALSE 74180
// for i = 1 to horses do
74115: NOP4
74119: PUSH
74120: DOUBLE
74121: LD_INT 1
74123: DEC
74124: ST_TO_ADDR
74125: NOP4
74129: PUSH
74130: FOR_TO
74131: IFFALSE 74178
// begin hc_class := 21 ;
74133: LD_ADDR_OWVAR 28
74137: PUSH
74138: LD_INT 21
74140: ST_TO_ADDR
// hc_gallery :=  ;
74141: LD_ADDR_OWVAR 33
74145: PUSH
74146: LD_STRING 
74148: ST_TO_ADDR
// animal := CreateHuman ;
74149: NOP4
74153: PUSH
74154: NOP4
74158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74159: NOP4
74163: PPUSH
74164: NOP4
74168: PPUSH
74169: LD_INT 0
74171: PPUSH
74172: NOP4
// end ;
74176: GO 74130
74178: POP
74179: POP
// if birds then
74180: NOP4
74184: IFFALSE 74251
// for i = 1 to birds do
74186: NOP4
74190: PUSH
74191: DOUBLE
74192: LD_INT 1
74194: DEC
74195: ST_TO_ADDR
74196: NOP4
74200: PUSH
74201: FOR_TO
74202: IFFALSE 74249
// begin hc_class = 18 ;
74204: LD_ADDR_OWVAR 28
74208: PUSH
74209: LD_INT 18
74211: ST_TO_ADDR
// hc_gallery =  ;
74212: LD_ADDR_OWVAR 33
74216: PUSH
74217: LD_STRING 
74219: ST_TO_ADDR
// animal := CreateHuman ;
74220: NOP4
74224: PUSH
74225: NOP4
74229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74230: NOP4
74234: PPUSH
74235: NOP4
74239: PPUSH
74240: LD_INT 0
74242: PPUSH
74243: NOP4
// end ;
74247: GO 74201
74249: POP
74250: POP
// if tigers then
74251: NOP4
74255: IFFALSE 74339
// for i = 1 to tigers do
74257: NOP4
74261: PUSH
74262: DOUBLE
74263: LD_INT 1
74265: DEC
74266: ST_TO_ADDR
74267: NOP4
74271: PUSH
74272: FOR_TO
74273: IFFALSE 74337
// begin hc_class = class_tiger ;
74275: LD_ADDR_OWVAR 28
74279: PUSH
74280: LD_INT 14
74282: ST_TO_ADDR
// hc_gallery =  ;
74283: LD_ADDR_OWVAR 33
74287: PUSH
74288: LD_STRING 
74290: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74291: LD_ADDR_OWVAR 35
74295: PUSH
74296: LD_INT 7
74298: NEG
74299: PPUSH
74300: LD_INT 7
74302: PPUSH
74303: NOP4
74307: ST_TO_ADDR
// animal := CreateHuman ;
74308: NOP4
74312: PUSH
74313: NOP4
74317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74318: NOP4
74322: PPUSH
74323: NOP4
74327: PPUSH
74328: LD_INT 0
74330: PPUSH
74331: NOP4
// end ;
74335: GO 74272
74337: POP
74338: POP
// if apemans then
74339: NOP4
74343: IFFALSE 74466
// for i = 1 to apemans do
74345: NOP4
74349: PUSH
74350: DOUBLE
74351: LD_INT 1
74353: DEC
74354: ST_TO_ADDR
74355: NOP4
74359: PUSH
74360: FOR_TO
74361: IFFALSE 74464
// begin hc_class = class_apeman ;
74363: LD_ADDR_OWVAR 28
74367: PUSH
74368: LD_INT 12
74370: ST_TO_ADDR
// hc_gallery =  ;
74371: LD_ADDR_OWVAR 33
74375: PUSH
74376: LD_STRING 
74378: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
74379: LD_ADDR_OWVAR 35
74383: PUSH
74384: LD_INT 5
74386: NEG
74387: PPUSH
74388: LD_INT 5
74390: PPUSH
74391: NOP4
74395: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74396: LD_ADDR_OWVAR 31
74400: PUSH
74401: LD_INT 1
74403: PPUSH
74404: LD_INT 3
74406: PPUSH
74407: NOP4
74411: PUSH
74412: LD_INT 1
74414: PPUSH
74415: LD_INT 3
74417: PPUSH
74418: NOP4
74422: PUSH
74423: LD_INT 0
74425: PUSH
74426: LD_INT 0
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: ST_TO_ADDR
// animal := CreateHuman ;
74435: NOP4
74439: PUSH
74440: NOP4
74444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74445: NOP4
74449: PPUSH
74450: NOP4
74454: PPUSH
74455: LD_INT 0
74457: PPUSH
74458: NOP4
// end ;
74462: GO 74360
74464: POP
74465: POP
// if enchidnas then
74466: NOP4
74470: IFFALSE 74537
// for i = 1 to enchidnas do
74472: NOP4
74476: PUSH
74477: DOUBLE
74478: LD_INT 1
74480: DEC
74481: ST_TO_ADDR
74482: NOP4
74486: PUSH
74487: FOR_TO
74488: IFFALSE 74535
// begin hc_class = 13 ;
74490: LD_ADDR_OWVAR 28
74494: PUSH
74495: LD_INT 13
74497: ST_TO_ADDR
// hc_gallery =  ;
74498: LD_ADDR_OWVAR 33
74502: PUSH
74503: LD_STRING 
74505: ST_TO_ADDR
// animal := CreateHuman ;
74506: NOP4
74510: PUSH
74511: NOP4
74515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74516: NOP4
74520: PPUSH
74521: NOP4
74525: PPUSH
74526: LD_INT 0
74528: PPUSH
74529: NOP4
// end ;
74533: GO 74487
74535: POP
74536: POP
// if fishes then
74537: NOP4
74541: IFFALSE 74608
// for i = 1 to fishes do
74543: NOP4
74547: PUSH
74548: DOUBLE
74549: LD_INT 1
74551: DEC
74552: ST_TO_ADDR
74553: NOP4
74557: PUSH
74558: FOR_TO
74559: IFFALSE 74606
// begin hc_class = 20 ;
74561: LD_ADDR_OWVAR 28
74565: PUSH
74566: LD_INT 20
74568: ST_TO_ADDR
// hc_gallery =  ;
74569: LD_ADDR_OWVAR 33
74573: PUSH
74574: LD_STRING 
74576: ST_TO_ADDR
// animal := CreateHuman ;
74577: NOP4
74581: PUSH
74582: NOP4
74586: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74587: NOP4
74591: PPUSH
74592: NOP4
74596: PPUSH
74597: LD_INT 0
74599: PPUSH
74600: NOP4
// end ;
74604: GO 74558
74606: POP
74607: POP
// end ;
74608: LD_VAR 0 10
74612: RET
// export function WantHeal ( sci , unit ) ; begin
74613: LD_INT 0
74615: PPUSH
// if GetTaskList ( sci ) > 0 then
74616: NOP4
74620: PPUSH
74621: NOP4
74625: PUSH
74626: LD_INT 0
74628: GREATER
74629: IFFALSE 74699
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74631: NOP4
74635: PPUSH
74636: NOP4
74640: PUSH
74641: LD_INT 1
74643: ARRAY
74644: PUSH
74645: LD_INT 1
74647: ARRAY
74648: PUSH
74649: LD_STRING l
74651: EQUAL
74652: PUSH
74653: NOP4
74657: PPUSH
74658: NOP4
74662: PUSH
74663: LD_INT 1
74665: ARRAY
74666: PUSH
74667: LD_INT 4
74669: ARRAY
74670: PUSH
74671: NOP4
74675: EQUAL
74676: AND
74677: IFFALSE 74689
// result := true else
74679: NOP4
74683: PUSH
74684: LD_INT 1
74686: ST_TO_ADDR
74687: GO 74697
// result := false ;
74689: NOP4
74693: PUSH
74694: LD_INT 0
74696: ST_TO_ADDR
// end else
74697: GO 74707
// result := false ;
74699: NOP4
74703: PUSH
74704: LD_INT 0
74706: ST_TO_ADDR
// end ;
74707: LD_VAR 0 3
74711: RET
// export function HealTarget ( sci ) ; begin
74712: LD_INT 0
74714: PPUSH
// if not sci then
74715: NOP4
74719: NOT
74720: IFFALSE 74724
// exit ;
74722: GO 74789
// result := 0 ;
74724: NOP4
74728: PUSH
74729: LD_INT 0
74731: ST_TO_ADDR
// if GetTaskList ( sci ) then
74732: NOP4
74736: PPUSH
74737: NOP4
74741: IFFALSE 74789
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74743: NOP4
74747: PPUSH
74748: NOP4
74752: PUSH
74753: LD_INT 1
74755: ARRAY
74756: PUSH
74757: LD_INT 1
74759: ARRAY
74760: PUSH
74761: LD_STRING l
74763: EQUAL
74764: IFFALSE 74789
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74766: NOP4
74770: PUSH
74771: NOP4
74775: PPUSH
74776: NOP4
74780: PUSH
74781: LD_INT 1
74783: ARRAY
74784: PUSH
74785: LD_INT 4
74787: ARRAY
74788: ST_TO_ADDR
// end ;
74789: LD_VAR 0 2
74793: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74794: LD_INT 0
74796: PPUSH
74797: PPUSH
74798: PPUSH
74799: PPUSH
// if not base_units then
74800: NOP4
74804: NOT
74805: IFFALSE 74809
// exit ;
74807: GO 74896
// result := false ;
74809: NOP4
74813: PUSH
74814: LD_INT 0
74816: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74817: NOP4
74821: PUSH
74822: NOP4
74826: PPUSH
74827: LD_INT 21
74829: PUSH
74830: LD_INT 3
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PPUSH
74837: NOP4
74841: ST_TO_ADDR
// if not tmp then
74842: NOP4
74846: NOT
74847: IFFALSE 74851
// exit ;
74849: GO 74896
// for i in tmp do
74851: NOP4
74855: PUSH
74856: NOP4
74860: PUSH
74861: FOR_IN
74862: IFFALSE 74894
// begin result := EnemyInRange ( i , 22 ) ;
74864: NOP4
74868: PUSH
74869: NOP4
74873: PPUSH
74874: LD_INT 22
74876: PPUSH
74877: NOP4
74881: ST_TO_ADDR
// if result then
74882: NOP4
74886: IFFALSE 74892
// exit ;
74888: POP
74889: POP
74890: GO 74896
// end ;
74892: GO 74861
74894: POP
74895: POP
// end ;
74896: LD_VAR 0 2
74900: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74901: LD_INT 0
74903: PPUSH
74904: PPUSH
// if not units then
74905: NOP4
74909: NOT
74910: IFFALSE 74914
// exit ;
74912: GO 74984
// result := [ ] ;
74914: NOP4
74918: PUSH
74919: EMPTY
74920: ST_TO_ADDR
// for i in units do
74921: NOP4
74925: PUSH
74926: NOP4
74930: PUSH
74931: FOR_IN
74932: IFFALSE 74982
// if GetTag ( i ) = tag then
74934: NOP4
74938: PPUSH
74939: NOP4
74943: PUSH
74944: NOP4
74948: EQUAL
74949: IFFALSE 74980
// result := Insert ( result , result + 1 , i ) ;
74951: NOP4
74955: PUSH
74956: NOP4
74960: PPUSH
74961: NOP4
74965: PUSH
74966: LD_INT 1
74968: PLUS
74969: PPUSH
74970: NOP4
74974: PPUSH
74975: NOP4
74979: ST_TO_ADDR
74980: GO 74931
74982: POP
74983: POP
// end ;
74984: LD_VAR 0 3
74988: RET
// export function IsDriver ( un ) ; begin
74989: LD_INT 0
74991: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74992: NOP4
74996: PUSH
74997: NOP4
75001: PUSH
75002: LD_INT 55
75004: PUSH
75005: EMPTY
75006: LIST
75007: PPUSH
75008: NOP4
75012: IN
75013: ST_TO_ADDR
// end ;
75014: LD_VAR 0 2
75018: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75019: LD_INT 0
75021: PPUSH
75022: PPUSH
// list := [ ] ;
75023: NOP4
75027: PUSH
75028: EMPTY
75029: ST_TO_ADDR
// case d of 0 :
75030: NOP4
75034: PUSH
75035: LD_INT 0
75037: DOUBLE
75038: EQUAL
75039: IFTRUE 75043
75041: GO 75176
75043: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75044: NOP4
75048: PUSH
75049: NOP4
75053: PUSH
75054: LD_INT 4
75056: MINUS
75057: PUSH
75058: NOP4
75062: PUSH
75063: LD_INT 4
75065: MINUS
75066: PUSH
75067: LD_INT 2
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: LIST
75074: PUSH
75075: NOP4
75079: PUSH
75080: LD_INT 3
75082: MINUS
75083: PUSH
75084: NOP4
75088: PUSH
75089: LD_INT 1
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: LIST
75096: PUSH
75097: NOP4
75101: PUSH
75102: LD_INT 4
75104: PLUS
75105: PUSH
75106: NOP4
75110: PUSH
75111: LD_INT 4
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: LIST
75118: PUSH
75119: NOP4
75123: PUSH
75124: LD_INT 3
75126: PLUS
75127: PUSH
75128: NOP4
75132: PUSH
75133: LD_INT 3
75135: PLUS
75136: PUSH
75137: LD_INT 5
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: NOP4
75149: PUSH
75150: NOP4
75154: PUSH
75155: LD_INT 4
75157: PLUS
75158: PUSH
75159: LD_INT 0
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: LIST
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: ST_TO_ADDR
// end ; 1 :
75174: GO 75874
75176: LD_INT 1
75178: DOUBLE
75179: EQUAL
75180: IFTRUE 75184
75182: GO 75317
75184: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75185: NOP4
75189: PUSH
75190: NOP4
75194: PUSH
75195: NOP4
75199: PUSH
75200: LD_INT 4
75202: MINUS
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: LIST
75211: PUSH
75212: NOP4
75216: PUSH
75217: LD_INT 3
75219: MINUS
75220: PUSH
75221: NOP4
75225: PUSH
75226: LD_INT 3
75228: MINUS
75229: PUSH
75230: LD_INT 2
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: PUSH
75238: NOP4
75242: PUSH
75243: LD_INT 4
75245: MINUS
75246: PUSH
75247: NOP4
75251: PUSH
75252: LD_INT 1
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: PUSH
75260: NOP4
75264: PUSH
75265: NOP4
75269: PUSH
75270: LD_INT 3
75272: PLUS
75273: PUSH
75274: LD_INT 0
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: LIST
75281: PUSH
75282: NOP4
75286: PUSH
75287: LD_INT 4
75289: PLUS
75290: PUSH
75291: NOP4
75295: PUSH
75296: LD_INT 4
75298: PLUS
75299: PUSH
75300: LD_INT 5
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: LIST
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: ST_TO_ADDR
// end ; 2 :
75315: GO 75874
75317: LD_INT 2
75319: DOUBLE
75320: EQUAL
75321: IFTRUE 75325
75323: GO 75454
75325: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75326: NOP4
75330: PUSH
75331: NOP4
75335: PUSH
75336: NOP4
75340: PUSH
75341: LD_INT 3
75343: MINUS
75344: PUSH
75345: LD_INT 3
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: LIST
75352: PUSH
75353: NOP4
75357: PUSH
75358: LD_INT 4
75360: PLUS
75361: PUSH
75362: NOP4
75366: PUSH
75367: LD_INT 4
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: LIST
75374: PUSH
75375: NOP4
75379: PUSH
75380: NOP4
75384: PUSH
75385: LD_INT 4
75387: PLUS
75388: PUSH
75389: LD_INT 0
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: LIST
75396: PUSH
75397: NOP4
75401: PUSH
75402: LD_INT 3
75404: MINUS
75405: PUSH
75406: NOP4
75410: PUSH
75411: LD_INT 1
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: LIST
75418: PUSH
75419: NOP4
75423: PUSH
75424: LD_INT 4
75426: MINUS
75427: PUSH
75428: NOP4
75432: PUSH
75433: LD_INT 4
75435: MINUS
75436: PUSH
75437: LD_INT 2
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: LIST
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: ST_TO_ADDR
// end ; 3 :
75452: GO 75874
75454: LD_INT 3
75456: DOUBLE
75457: EQUAL
75458: IFTRUE 75462
75460: GO 75595
75462: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75463: NOP4
75467: PUSH
75468: NOP4
75472: PUSH
75473: LD_INT 3
75475: PLUS
75476: PUSH
75477: NOP4
75481: PUSH
75482: LD_INT 4
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: PUSH
75490: NOP4
75494: PUSH
75495: LD_INT 4
75497: PLUS
75498: PUSH
75499: NOP4
75503: PUSH
75504: LD_INT 4
75506: PLUS
75507: PUSH
75508: LD_INT 5
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: LIST
75515: PUSH
75516: NOP4
75520: PUSH
75521: LD_INT 4
75523: MINUS
75524: PUSH
75525: NOP4
75529: PUSH
75530: LD_INT 1
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: LIST
75537: PUSH
75538: NOP4
75542: PUSH
75543: NOP4
75547: PUSH
75548: LD_INT 4
75550: MINUS
75551: PUSH
75552: LD_INT 3
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: LIST
75559: PUSH
75560: NOP4
75564: PUSH
75565: LD_INT 3
75567: MINUS
75568: PUSH
75569: NOP4
75573: PUSH
75574: LD_INT 3
75576: MINUS
75577: PUSH
75578: LD_INT 2
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: LIST
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: ST_TO_ADDR
// end ; 4 :
75593: GO 75874
75595: LD_INT 4
75597: DOUBLE
75598: EQUAL
75599: IFTRUE 75603
75601: GO 75736
75603: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75604: NOP4
75608: PUSH
75609: NOP4
75613: PUSH
75614: NOP4
75618: PUSH
75619: LD_INT 4
75621: PLUS
75622: PUSH
75623: LD_INT 0
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: LIST
75630: PUSH
75631: NOP4
75635: PUSH
75636: LD_INT 3
75638: PLUS
75639: PUSH
75640: NOP4
75644: PUSH
75645: LD_INT 3
75647: PLUS
75648: PUSH
75649: LD_INT 5
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: PUSH
75657: NOP4
75661: PUSH
75662: LD_INT 4
75664: PLUS
75665: PUSH
75666: NOP4
75670: PUSH
75671: LD_INT 4
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: PUSH
75679: NOP4
75683: PUSH
75684: NOP4
75688: PUSH
75689: LD_INT 3
75691: MINUS
75692: PUSH
75693: LD_INT 3
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: LIST
75700: PUSH
75701: NOP4
75705: PUSH
75706: LD_INT 4
75708: MINUS
75709: PUSH
75710: NOP4
75714: PUSH
75715: LD_INT 4
75717: MINUS
75718: PUSH
75719: LD_INT 2
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: ST_TO_ADDR
// end ; 5 :
75734: GO 75874
75736: LD_INT 5
75738: DOUBLE
75739: EQUAL
75740: IFTRUE 75744
75742: GO 75873
75744: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75745: NOP4
75749: PUSH
75750: NOP4
75754: PUSH
75755: LD_INT 4
75757: MINUS
75758: PUSH
75759: NOP4
75763: PUSH
75764: LD_INT 1
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: LIST
75771: PUSH
75772: NOP4
75776: PUSH
75777: NOP4
75781: PUSH
75782: LD_INT 4
75784: MINUS
75785: PUSH
75786: LD_INT 3
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: LIST
75793: PUSH
75794: NOP4
75798: PUSH
75799: LD_INT 4
75801: PLUS
75802: PUSH
75803: NOP4
75807: PUSH
75808: LD_INT 4
75810: PLUS
75811: PUSH
75812: LD_INT 5
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: PUSH
75820: NOP4
75824: PUSH
75825: LD_INT 3
75827: PLUS
75828: PUSH
75829: NOP4
75833: PUSH
75834: LD_INT 4
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: LIST
75841: PUSH
75842: NOP4
75846: PUSH
75847: NOP4
75851: PUSH
75852: LD_INT 3
75854: PLUS
75855: PUSH
75856: LD_INT 0
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: LIST
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: ST_TO_ADDR
// end ; end ;
75871: GO 75874
75873: POP
// result := list ;
75874: NOP4
75878: PUSH
75879: NOP4
75883: ST_TO_ADDR
// end ;
75884: LD_VAR 0 4
75888: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75889: LD_INT 0
75891: PPUSH
75892: PPUSH
75893: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75894: NOP4
75898: NOT
75899: PUSH
75900: NOP4
75904: PUSH
75905: LD_INT 1
75907: PUSH
75908: LD_INT 2
75910: PUSH
75911: LD_INT 3
75913: PUSH
75914: LD_INT 4
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: IN
75923: NOT
75924: OR
75925: IFFALSE 75929
// exit ;
75927: GO 76021
// tmp := [ ] ;
75929: NOP4
75933: PUSH
75934: EMPTY
75935: ST_TO_ADDR
// for i in units do
75936: NOP4
75940: PUSH
75941: NOP4
75945: PUSH
75946: FOR_IN
75947: IFFALSE 75990
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75949: NOP4
75953: PUSH
75954: NOP4
75958: PPUSH
75959: NOP4
75963: PUSH
75964: LD_INT 1
75966: PLUS
75967: PPUSH
75968: NOP4
75972: PPUSH
75973: NOP4
75977: PPUSH
75978: NOP4
75982: PPUSH
75983: NOP4
75987: ST_TO_ADDR
75988: GO 75946
75990: POP
75991: POP
// if not tmp then
75992: NOP4
75996: NOT
75997: IFFALSE 76001
// exit ;
75999: GO 76021
// result := SortListByListDesc ( units , tmp ) ;
76001: NOP4
76005: PUSH
76006: NOP4
76010: PPUSH
76011: NOP4
76015: PPUSH
76016: NOP4
76020: ST_TO_ADDR
// end ;
76021: LD_VAR 0 3
76025: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76026: LD_INT 0
76028: PPUSH
76029: PPUSH
76030: PPUSH
// result := false ;
76031: NOP4
76035: PUSH
76036: LD_INT 0
76038: ST_TO_ADDR
// x := GetX ( building ) ;
76039: NOP4
76043: PUSH
76044: NOP4
76048: PPUSH
76049: NOP4
76053: ST_TO_ADDR
// y := GetY ( building ) ;
76054: NOP4
76058: PUSH
76059: NOP4
76063: PPUSH
76064: NOP4
76068: ST_TO_ADDR
// if not building or not x or not y then
76069: NOP4
76073: NOT
76074: PUSH
76075: NOP4
76079: NOT
76080: OR
76081: PUSH
76082: NOP4
76086: NOT
76087: OR
76088: IFFALSE 76092
// exit ;
76090: GO 76184
// if GetTaskList ( unit ) then
76092: NOP4
76096: PPUSH
76097: NOP4
76101: IFFALSE 76184
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76103: LD_STRING e
76105: PUSH
76106: NOP4
76110: PPUSH
76111: NOP4
76115: PUSH
76116: LD_INT 1
76118: ARRAY
76119: PUSH
76120: LD_INT 1
76122: ARRAY
76123: EQUAL
76124: PUSH
76125: NOP4
76129: PUSH
76130: NOP4
76134: PPUSH
76135: NOP4
76139: PUSH
76140: LD_INT 1
76142: ARRAY
76143: PUSH
76144: LD_INT 2
76146: ARRAY
76147: EQUAL
76148: AND
76149: PUSH
76150: NOP4
76154: PUSH
76155: NOP4
76159: PPUSH
76160: NOP4
76164: PUSH
76165: LD_INT 1
76167: ARRAY
76168: PUSH
76169: LD_INT 3
76171: ARRAY
76172: EQUAL
76173: AND
76174: IFFALSE 76184
// result := true end ;
76176: NOP4
76180: PUSH
76181: LD_INT 1
76183: ST_TO_ADDR
// end ;
76184: LD_VAR 0 3
76188: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76189: LD_INT 0
76191: PPUSH
// result := false ;
76192: NOP4
76196: PUSH
76197: LD_INT 0
76199: ST_TO_ADDR
// if GetTaskList ( unit ) then
76200: NOP4
76204: PPUSH
76205: NOP4
76209: IFFALSE 76292
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76211: LD_STRING M
76213: PUSH
76214: NOP4
76218: PPUSH
76219: NOP4
76223: PUSH
76224: LD_INT 1
76226: ARRAY
76227: PUSH
76228: LD_INT 1
76230: ARRAY
76231: EQUAL
76232: PUSH
76233: NOP4
76237: PUSH
76238: NOP4
76242: PPUSH
76243: NOP4
76247: PUSH
76248: LD_INT 1
76250: ARRAY
76251: PUSH
76252: LD_INT 2
76254: ARRAY
76255: EQUAL
76256: AND
76257: PUSH
76258: NOP4
76262: PUSH
76263: NOP4
76267: PPUSH
76268: NOP4
76272: PUSH
76273: LD_INT 1
76275: ARRAY
76276: PUSH
76277: LD_INT 3
76279: ARRAY
76280: EQUAL
76281: AND
76282: IFFALSE 76292
// result := true ;
76284: NOP4
76288: PUSH
76289: LD_INT 1
76291: ST_TO_ADDR
// end ; end ;
76292: LD_VAR 0 4
76296: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76297: LD_INT 0
76299: PPUSH
76300: PPUSH
76301: PPUSH
76302: PPUSH
// if not unit or not area then
76303: NOP4
76307: NOT
76308: PUSH
76309: NOP4
76313: NOT
76314: OR
76315: IFFALSE 76319
// exit ;
76317: GO 76483
// tmp := AreaToList ( area , i ) ;
76319: NOP4
76323: PUSH
76324: NOP4
76328: PPUSH
76329: NOP4
76333: PPUSH
76334: NOP4
76338: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76339: NOP4
76343: PUSH
76344: DOUBLE
76345: LD_INT 1
76347: DEC
76348: ST_TO_ADDR
76349: NOP4
76353: PUSH
76354: LD_INT 1
76356: ARRAY
76357: PUSH
76358: FOR_TO
76359: IFFALSE 76481
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76361: NOP4
76365: PUSH
76366: NOP4
76370: PUSH
76371: LD_INT 1
76373: ARRAY
76374: PUSH
76375: NOP4
76379: ARRAY
76380: PUSH
76381: NOP4
76385: PUSH
76386: LD_INT 2
76388: ARRAY
76389: PUSH
76390: NOP4
76394: ARRAY
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76400: NOP4
76404: PUSH
76405: LD_INT 1
76407: ARRAY
76408: PPUSH
76409: NOP4
76413: PUSH
76414: LD_INT 2
76416: ARRAY
76417: PPUSH
76418: NOP4
76422: PUSH
76423: LD_INT 0
76425: EQUAL
76426: IFFALSE 76479
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76428: NOP4
76432: PPUSH
76433: NOP4
76437: PUSH
76438: LD_INT 1
76440: ARRAY
76441: PPUSH
76442: NOP4
76446: PUSH
76447: LD_INT 2
76449: ARRAY
76450: PPUSH
76451: NOP4
76455: PPUSH
76456: NOP4
// result := IsPlaced ( unit ) ;
76460: NOP4
76464: PUSH
76465: NOP4
76469: PPUSH
76470: NOP4
76474: ST_TO_ADDR
// exit ;
76475: POP
76476: POP
76477: GO 76483
// end ; end ;
76479: GO 76358
76481: POP
76482: POP
// end ;
76483: LD_VAR 0 4
76487: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76488: LD_INT 0
76490: PPUSH
76491: PPUSH
76492: PPUSH
// if not side or side > 8 then
76493: NOP4
76497: NOT
76498: PUSH
76499: NOP4
76503: PUSH
76504: LD_INT 8
76506: GREATER
76507: OR
76508: IFFALSE 76512
// exit ;
76510: GO 76699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76512: NOP4
76516: PUSH
76517: LD_INT 22
76519: PUSH
76520: NOP4
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 21
76531: PUSH
76532: LD_INT 3
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PPUSH
76543: NOP4
76547: ST_TO_ADDR
// if not tmp then
76548: NOP4
76552: NOT
76553: IFFALSE 76557
// exit ;
76555: GO 76699
// enable_addtolog := true ;
76557: LD_ADDR_OWVAR 81
76561: PUSH
76562: LD_INT 1
76564: ST_TO_ADDR
// AddToLog ( [ ) ;
76565: LD_STRING [
76567: PPUSH
76568: NOP4
// for i in tmp do
76572: NOP4
76576: PUSH
76577: NOP4
76581: PUSH
76582: FOR_IN
76583: IFFALSE 76690
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76585: LD_STRING [
76587: PUSH
76588: NOP4
76592: PPUSH
76593: NOP4
76597: STR
76598: PUSH
76599: LD_STRING , 
76601: STR
76602: PUSH
76603: NOP4
76607: PPUSH
76608: NOP4
76612: STR
76613: PUSH
76614: LD_STRING , 
76616: STR
76617: PUSH
76618: NOP4
76622: PPUSH
76623: NOP4
76627: STR
76628: PUSH
76629: LD_STRING , 
76631: STR
76632: PUSH
76633: NOP4
76637: PPUSH
76638: NOP4
76642: STR
76643: PUSH
76644: LD_STRING , 
76646: STR
76647: PUSH
76648: NOP4
76652: PPUSH
76653: LD_INT 1
76655: PPUSH
76656: NOP4
76660: STR
76661: PUSH
76662: LD_STRING , 
76664: STR
76665: PUSH
76666: NOP4
76670: PPUSH
76671: LD_INT 2
76673: PPUSH
76674: NOP4
76678: STR
76679: PUSH
76680: LD_STRING ],
76682: STR
76683: PPUSH
76684: NOP4
// end ;
76688: GO 76582
76690: POP
76691: POP
// AddToLog ( ]; ) ;
76692: LD_STRING ];
76694: PPUSH
76695: NOP4
// end ;
76699: LD_VAR 0 2
76703: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76704: LD_INT 0
76706: PPUSH
76707: PPUSH
76708: PPUSH
76709: PPUSH
76710: PPUSH
// if not area or not rate or not max then
76711: NOP4
76715: NOT
76716: PUSH
76717: NOP4
76721: NOT
76722: OR
76723: PUSH
76724: NOP4
76728: NOT
76729: OR
76730: IFFALSE 76734
// exit ;
76732: GO 76926
// while 1 do
76734: LD_INT 1
76736: IFFALSE 76926
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76738: NOP4
76742: PUSH
76743: NOP4
76747: PPUSH
76748: LD_INT 1
76750: PPUSH
76751: NOP4
76755: PUSH
76756: LD_INT 10
76758: MUL
76759: ST_TO_ADDR
// r := rate / 10 ;
76760: NOP4
76764: PUSH
76765: NOP4
76769: PUSH
76770: LD_INT 10
76772: DIVREAL
76773: ST_TO_ADDR
// time := 1 1$00 ;
76774: NOP4
76778: PUSH
76779: LD_INT 2100
76781: ST_TO_ADDR
// if amount < min then
76782: NOP4
76786: PUSH
76787: NOP4
76791: LESS
76792: IFFALSE 76810
// r := r * 2 else
76794: NOP4
76798: PUSH
76799: NOP4
76803: PUSH
76804: LD_INT 2
76806: MUL
76807: ST_TO_ADDR
76808: GO 76836
// if amount > max then
76810: NOP4
76814: PUSH
76815: NOP4
76819: GREATER
76820: IFFALSE 76836
// r := r / 2 ;
76822: NOP4
76826: PUSH
76827: NOP4
76831: PUSH
76832: LD_INT 2
76834: DIVREAL
76835: ST_TO_ADDR
// time := time / r ;
76836: NOP4
76840: PUSH
76841: NOP4
76845: PUSH
76846: NOP4
76850: DIVREAL
76851: ST_TO_ADDR
// if time < 0 then
76852: NOP4
76856: PUSH
76857: LD_INT 0
76859: LESS
76860: IFFALSE 76877
// time := time * - 1 ;
76862: NOP4
76866: PUSH
76867: NOP4
76871: PUSH
76872: LD_INT 1
76874: NEG
76875: MUL
76876: ST_TO_ADDR
// wait ( time ) ;
76877: NOP4
76881: PPUSH
76882: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76886: LD_INT 35
76888: PPUSH
76889: LD_INT 875
76891: PPUSH
76892: NOP4
76896: PPUSH
76897: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76901: LD_INT 1
76903: PPUSH
76904: LD_INT 5
76906: PPUSH
76907: NOP4
76911: PPUSH
76912: NOP4
76916: PPUSH
76917: LD_INT 1
76919: PPUSH
76920: NOP4
// end ;
76924: GO 76734
// end ;
76926: LD_VAR 0 5
76930: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76931: LD_INT 0
76933: PPUSH
76934: PPUSH
76935: PPUSH
76936: PPUSH
76937: PPUSH
76938: PPUSH
76939: PPUSH
76940: PPUSH
// if not turrets or not factories then
76941: NOP4
76945: NOT
76946: PUSH
76947: NOP4
76951: NOT
76952: OR
76953: IFFALSE 76957
// exit ;
76955: GO 77264
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76957: NOP4
76961: PUSH
76962: LD_INT 5
76964: PUSH
76965: LD_INT 6
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: LD_INT 2
76974: PUSH
76975: LD_INT 4
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 3
76984: PUSH
76985: LD_INT 5
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: LIST
76996: PUSH
76997: LD_INT 24
76999: PUSH
77000: LD_INT 25
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: PUSH
77007: LD_INT 23
77009: PUSH
77010: LD_INT 27
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 42
77023: PUSH
77024: LD_INT 43
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 44
77033: PUSH
77034: LD_INT 46
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: PUSH
77041: LD_INT 45
77043: PUSH
77044: LD_INT 47
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: LIST
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: LIST
77060: ST_TO_ADDR
// result := [ ] ;
77061: NOP4
77065: PUSH
77066: EMPTY
77067: ST_TO_ADDR
// for i in turrets do
77068: NOP4
77072: PUSH
77073: NOP4
77077: PUSH
77078: FOR_IN
77079: IFFALSE 77262
// begin nat := GetNation ( i ) ;
77081: NOP4
77085: PUSH
77086: NOP4
77090: PPUSH
77091: NOP4
77095: ST_TO_ADDR
// weapon := 0 ;
77096: NOP4
77100: PUSH
77101: LD_INT 0
77103: ST_TO_ADDR
// if not nat then
77104: NOP4
77108: NOT
77109: IFFALSE 77113
// continue ;
77111: GO 77078
// for j in list [ nat ] do
77113: NOP4
77117: PUSH
77118: NOP4
77122: PUSH
77123: NOP4
77127: ARRAY
77128: PUSH
77129: FOR_IN
77130: IFFALSE 77171
// if GetBWeapon ( i ) = j [ 1 ] then
77132: NOP4
77136: PPUSH
77137: NOP4
77141: PUSH
77142: NOP4
77146: PUSH
77147: LD_INT 1
77149: ARRAY
77150: EQUAL
77151: IFFALSE 77169
// begin weapon := j [ 2 ] ;
77153: NOP4
77157: PUSH
77158: NOP4
77162: PUSH
77163: LD_INT 2
77165: ARRAY
77166: ST_TO_ADDR
// break ;
77167: GO 77171
// end ;
77169: GO 77129
77171: POP
77172: POP
// if not weapon then
77173: NOP4
77177: NOT
77178: IFFALSE 77182
// continue ;
77180: GO 77078
// for k in factories do
77182: NOP4
77186: PUSH
77187: NOP4
77191: PUSH
77192: FOR_IN
77193: IFFALSE 77258
// begin weapons := AvailableWeaponList ( k ) ;
77195: NOP4
77199: PUSH
77200: NOP4
77204: PPUSH
77205: NOP4
77209: ST_TO_ADDR
// if not weapons then
77210: NOP4
77214: NOT
77215: IFFALSE 77219
// continue ;
77217: GO 77192
// if weapon in weapons then
77219: NOP4
77223: PUSH
77224: NOP4
77228: IN
77229: IFFALSE 77256
// begin result := [ i , weapon ] ;
77231: NOP4
77235: PUSH
77236: NOP4
77240: PUSH
77241: NOP4
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: ST_TO_ADDR
// exit ;
77250: POP
77251: POP
77252: POP
77253: POP
77254: GO 77264
// end ; end ;
77256: GO 77192
77258: POP
77259: POP
// end ;
77260: GO 77078
77262: POP
77263: POP
// end ;
77264: LD_VAR 0 3
77268: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77269: LD_INT 0
77271: PPUSH
// if not side or side > 8 then
77272: NOP4
77276: NOT
77277: PUSH
77278: NOP4
77282: PUSH
77283: LD_INT 8
77285: GREATER
77286: OR
77287: IFFALSE 77291
// exit ;
77289: GO 77350
// if not range then
77291: NOP4
77295: NOT
77296: IFFALSE 77307
// range := - 12 ;
77298: NOP4
77302: PUSH
77303: LD_INT 12
77305: NEG
77306: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77307: NOP4
77311: PPUSH
77312: NOP4
77316: PPUSH
77317: NOP4
77321: PPUSH
77322: NOP4
77326: PPUSH
77327: NOP4
// RemoveSeeing ( x , y , side ) ;
77331: NOP4
77335: PPUSH
77336: NOP4
77340: PPUSH
77341: NOP4
77345: PPUSH
77346: NOP4
// end ;
77350: LD_VAR 0 5
77354: RET
// export function Video ( mode ) ; begin
77355: LD_INT 0
77357: PPUSH
// ingame_video = mode ;
77358: LD_ADDR_OWVAR 52
77362: PUSH
77363: NOP4
77367: ST_TO_ADDR
// interface_hidden = mode ;
77368: LD_ADDR_OWVAR 54
77372: PUSH
77373: NOP4
77377: ST_TO_ADDR
// end ;
77378: LD_VAR 0 2
77382: RET
// export function Join ( array , element ) ; begin
77383: LD_INT 0
77385: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77386: NOP4
77390: PUSH
77391: NOP4
77395: PPUSH
77396: NOP4
77400: PUSH
77401: LD_INT 1
77403: PLUS
77404: PPUSH
77405: NOP4
77409: PPUSH
77410: NOP4
77414: ST_TO_ADDR
// end ;
77415: LD_VAR 0 3
77419: RET
// export function JoinUnion ( array , element ) ; begin
77420: LD_INT 0
77422: PPUSH
// result := array union element ;
77423: NOP4
77427: PUSH
77428: NOP4
77432: PUSH
77433: NOP4
77437: UNION
77438: ST_TO_ADDR
// end ;
77439: LD_VAR 0 3
77443: RET
// export function GetBehemoths ( side ) ; begin
77444: LD_INT 0
77446: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77447: NOP4
77451: PUSH
77452: LD_INT 22
77454: PUSH
77455: NOP4
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: LD_INT 31
77466: PUSH
77467: LD_INT 25
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PPUSH
77478: NOP4
77482: ST_TO_ADDR
// end ;
77483: LD_VAR 0 2
77487: RET
// export function Shuffle ( array ) ; var i , index ; begin
77488: LD_INT 0
77490: PPUSH
77491: PPUSH
77492: PPUSH
// result := [ ] ;
77493: NOP4
77497: PUSH
77498: EMPTY
77499: ST_TO_ADDR
// if not array then
77500: NOP4
77504: NOT
77505: IFFALSE 77509
// exit ;
77507: GO 77608
// Randomize ;
77509: NOP4
// for i = array downto 1 do
77513: NOP4
77517: PUSH
77518: DOUBLE
77519: NOP4
77523: INC
77524: ST_TO_ADDR
77525: LD_INT 1
77527: PUSH
77528: FOR_DOWNTO
77529: IFFALSE 77606
// begin index := rand ( 1 , array ) ;
77531: NOP4
77535: PUSH
77536: LD_INT 1
77538: PPUSH
77539: NOP4
77543: PPUSH
77544: NOP4
77548: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77549: NOP4
77553: PUSH
77554: NOP4
77558: PPUSH
77559: NOP4
77563: PUSH
77564: LD_INT 1
77566: PLUS
77567: PPUSH
77568: NOP4
77572: PUSH
77573: NOP4
77577: ARRAY
77578: PPUSH
77579: NOP4
77583: ST_TO_ADDR
// array := Delete ( array , index ) ;
77584: NOP4
77588: PUSH
77589: NOP4
77593: PPUSH
77594: NOP4
77598: PPUSH
77599: NOP4
77603: ST_TO_ADDR
// end ;
77604: GO 77528
77606: POP
77607: POP
// end ;
77608: LD_VAR 0 2
77612: RET
// export function GetBaseMaterials ( base ) ; begin
77613: LD_INT 0
77615: PPUSH
// result := [ 0 , 0 , 0 ] ;
77616: NOP4
77620: PUSH
77621: LD_INT 0
77623: PUSH
77624: LD_INT 0
77626: PUSH
77627: LD_INT 0
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: LIST
77634: ST_TO_ADDR
// if not base then
77635: NOP4
77639: NOT
77640: IFFALSE 77644
// exit ;
77642: GO 77693
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77644: NOP4
77648: PUSH
77649: NOP4
77653: PPUSH
77654: LD_INT 1
77656: PPUSH
77657: NOP4
77661: PUSH
77662: NOP4
77666: PPUSH
77667: LD_INT 2
77669: PPUSH
77670: NOP4
77674: PUSH
77675: NOP4
77679: PPUSH
77680: LD_INT 3
77682: PPUSH
77683: NOP4
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: LIST
77692: ST_TO_ADDR
// end ;
77693: LD_VAR 0 2
77697: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77698: LD_INT 0
77700: PPUSH
77701: PPUSH
// result := array ;
77702: NOP4
77706: PUSH
77707: NOP4
77711: ST_TO_ADDR
// if size > 0 then
77712: NOP4
77716: PUSH
77717: LD_INT 0
77719: GREATER
77720: IFFALSE 77766
// for i := array downto size do
77722: NOP4
77726: PUSH
77727: DOUBLE
77728: NOP4
77732: INC
77733: ST_TO_ADDR
77734: NOP4
77738: PUSH
77739: FOR_DOWNTO
77740: IFFALSE 77764
// result := Delete ( result , result ) ;
77742: NOP4
77746: PUSH
77747: NOP4
77751: PPUSH
77752: NOP4
77756: PPUSH
77757: NOP4
77761: ST_TO_ADDR
77762: GO 77739
77764: POP
77765: POP
// end ;
77766: LD_VAR 0 3
77770: RET
// export function ComExit ( unit ) ; var tmp ; begin
77771: LD_INT 0
77773: PPUSH
77774: PPUSH
// if not IsInUnit ( unit ) then
77775: NOP4
77779: PPUSH
77780: NOP4
77784: NOT
77785: IFFALSE 77789
// exit ;
77787: GO 77849
// tmp := IsInUnit ( unit ) ;
77789: NOP4
77793: PUSH
77794: NOP4
77798: PPUSH
77799: NOP4
77803: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77804: NOP4
77808: PPUSH
77809: NOP4
77813: PUSH
77814: LD_INT 2
77816: EQUAL
77817: IFFALSE 77830
// ComExitVehicle ( unit ) else
77819: NOP4
77823: PPUSH
77824: NOP4
77828: GO 77839
// ComExitBuilding ( unit ) ;
77830: NOP4
77834: PPUSH
77835: NOP4
// result := tmp ;
77839: NOP4
77843: PUSH
77844: NOP4
77848: ST_TO_ADDR
// end ;
77849: LD_VAR 0 2
77853: RET
// export function ComExitAll ( units ) ; var i ; begin
77854: LD_INT 0
77856: PPUSH
77857: PPUSH
// if not units then
77858: NOP4
77862: NOT
77863: IFFALSE 77867
// exit ;
77865: GO 77893
// for i in units do
77867: NOP4
77871: PUSH
77872: NOP4
77876: PUSH
77877: FOR_IN
77878: IFFALSE 77891
// ComExit ( i ) ;
77880: NOP4
77884: PPUSH
77885: NOP4
77889: GO 77877
77891: POP
77892: POP
// end ;
77893: LD_VAR 0 2
77897: RET
// export function ResetHc ; begin
77898: LD_INT 0
77900: PPUSH
// InitHc ;
77901: NOP4
// hc_importance := 0 ;
77905: LD_ADDR_OWVAR 32
77909: PUSH
77910: LD_INT 0
77912: ST_TO_ADDR
// end ;
77913: LD_VAR 0 1
77917: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77918: LD_INT 0
77920: PPUSH
77921: PPUSH
77922: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77923: NOP4
77927: PUSH
77928: NOP4
77932: PUSH
77933: NOP4
77937: PLUS
77938: PUSH
77939: LD_INT 2
77941: DIV
77942: ST_TO_ADDR
// if _x < 0 then
77943: NOP4
77947: PUSH
77948: LD_INT 0
77950: LESS
77951: IFFALSE 77968
// _x := _x * - 1 ;
77953: NOP4
77957: PUSH
77958: NOP4
77962: PUSH
77963: LD_INT 1
77965: NEG
77966: MUL
77967: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77968: NOP4
77972: PUSH
77973: NOP4
77977: PUSH
77978: NOP4
77982: PLUS
77983: PUSH
77984: LD_INT 2
77986: DIV
77987: ST_TO_ADDR
// if _y < 0 then
77988: NOP4
77992: PUSH
77993: LD_INT 0
77995: LESS
77996: IFFALSE 78013
// _y := _y * - 1 ;
77998: NOP4
78002: PUSH
78003: NOP4
78007: PUSH
78008: LD_INT 1
78010: NEG
78011: MUL
78012: ST_TO_ADDR
// result := [ _x , _y ] ;
78013: NOP4
78017: PUSH
78018: NOP4
78022: PUSH
78023: NOP4
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: ST_TO_ADDR
// end ;
78032: LD_VAR 0 5
78036: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78037: LD_INT 0
78039: PPUSH
78040: PPUSH
78041: PPUSH
78042: PPUSH
// task := GetTaskList ( unit ) ;
78043: NOP4
78047: PUSH
78048: NOP4
78052: PPUSH
78053: NOP4
78057: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78058: NOP4
78062: NOT
78063: PUSH
78064: NOP4
78068: PPUSH
78069: NOP4
78073: PPUSH
78074: NOP4
78078: NOT
78079: AND
78080: IFFALSE 78084
// exit ;
78082: GO 78202
// if IsInArea ( unit , area ) then
78084: NOP4
78088: PPUSH
78089: NOP4
78093: PPUSH
78094: NOP4
78098: IFFALSE 78116
// begin ComMoveToArea ( unit , goAway ) ;
78100: NOP4
78104: PPUSH
78105: NOP4
78109: PPUSH
78110: NOP4
// exit ;
78114: GO 78202
// end ; if task [ 1 ] [ 1 ] <> M then
78116: NOP4
78120: PUSH
78121: LD_INT 1
78123: ARRAY
78124: PUSH
78125: LD_INT 1
78127: ARRAY
78128: PUSH
78129: LD_STRING M
78131: NONEQUAL
78132: IFFALSE 78136
// exit ;
78134: GO 78202
// x := task [ 1 ] [ 2 ] ;
78136: NOP4
78140: PUSH
78141: NOP4
78145: PUSH
78146: LD_INT 1
78148: ARRAY
78149: PUSH
78150: LD_INT 2
78152: ARRAY
78153: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78154: NOP4
78158: PUSH
78159: NOP4
78163: PUSH
78164: LD_INT 1
78166: ARRAY
78167: PUSH
78168: LD_INT 3
78170: ARRAY
78171: ST_TO_ADDR
// if InArea ( x , y , area ) then
78172: NOP4
78176: PPUSH
78177: NOP4
78181: PPUSH
78182: NOP4
78186: PPUSH
78187: NOP4
78191: IFFALSE 78202
// ComStop ( unit ) ;
78193: NOP4
78197: PPUSH
78198: NOP4
// end ;
78202: LD_VAR 0 4
78206: RET
// export function Abs ( value ) ; begin
78207: LD_INT 0
78209: PPUSH
// result := value ;
78210: NOP4
78214: PUSH
78215: NOP4
78219: ST_TO_ADDR
// if value < 0 then
78220: NOP4
78224: PUSH
78225: LD_INT 0
78227: LESS
78228: IFFALSE 78245
// result := value * - 1 ;
78230: NOP4
78234: PUSH
78235: NOP4
78239: PUSH
78240: LD_INT 1
78242: NEG
78243: MUL
78244: ST_TO_ADDR
// end ;
78245: LD_VAR 0 2
78249: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78250: LD_INT 0
78252: PPUSH
78253: PPUSH
78254: PPUSH
78255: PPUSH
78256: PPUSH
78257: PPUSH
78258: PPUSH
78259: PPUSH
// if not unit or not building then
78260: NOP4
78264: NOT
78265: PUSH
78266: NOP4
78270: NOT
78271: OR
78272: IFFALSE 78276
// exit ;
78274: GO 78502
// x := GetX ( building ) ;
78276: NOP4
78280: PUSH
78281: NOP4
78285: PPUSH
78286: NOP4
78290: ST_TO_ADDR
// y := GetY ( building ) ;
78291: NOP4
78295: PUSH
78296: NOP4
78300: PPUSH
78301: NOP4
78305: ST_TO_ADDR
// d := GetDir ( building ) ;
78306: NOP4
78310: PUSH
78311: NOP4
78315: PPUSH
78316: NOP4
78320: ST_TO_ADDR
// r := 4 ;
78321: NOP4
78325: PUSH
78326: LD_INT 4
78328: ST_TO_ADDR
// for i := 1 to 5 do
78329: NOP4
78333: PUSH
78334: DOUBLE
78335: LD_INT 1
78337: DEC
78338: ST_TO_ADDR
78339: LD_INT 5
78341: PUSH
78342: FOR_TO
78343: IFFALSE 78500
// begin _x := ShiftX ( x , d , r + i ) ;
78345: NOP4
78349: PUSH
78350: NOP4
78354: PPUSH
78355: NOP4
78359: PPUSH
78360: NOP4
78364: PUSH
78365: NOP4
78369: PLUS
78370: PPUSH
78371: NOP4
78375: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78376: NOP4
78380: PUSH
78381: NOP4
78385: PPUSH
78386: NOP4
78390: PPUSH
78391: NOP4
78395: PUSH
78396: NOP4
78400: PLUS
78401: PPUSH
78402: NOP4
78406: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78407: NOP4
78411: PPUSH
78412: NOP4
78416: PPUSH
78417: NOP4
78421: PUSH
78422: NOP4
78426: PPUSH
78427: NOP4
78431: PPUSH
78432: NOP4
78436: PPUSH
78437: NOP4
78441: PUSH
78442: LD_INT 3
78444: PUSH
78445: LD_INT 2
78447: PUSH
78448: EMPTY
78449: LIST
78450: LIST
78451: IN
78452: NOT
78453: AND
78454: IFFALSE 78498
// begin ComMoveXY ( unit , _x , _y ) ;
78456: NOP4
78460: PPUSH
78461: NOP4
78465: PPUSH
78466: NOP4
78470: PPUSH
78471: NOP4
// result := [ _x , _y ] ;
78475: NOP4
78479: PUSH
78480: NOP4
78484: PUSH
78485: NOP4
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: ST_TO_ADDR
// exit ;
78494: POP
78495: POP
78496: GO 78502
// end ; end ;
78498: GO 78342
78500: POP
78501: POP
// end ;
78502: LD_VAR 0 3
78506: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78507: LD_INT 0
78509: PPUSH
78510: PPUSH
78511: PPUSH
// result := 0 ;
78512: NOP4
78516: PUSH
78517: LD_INT 0
78519: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78520: NOP4
78524: PUSH
78525: LD_INT 0
78527: LESS
78528: PUSH
78529: NOP4
78533: PUSH
78534: LD_INT 8
78536: GREATER
78537: OR
78538: PUSH
78539: NOP4
78543: PUSH
78544: LD_INT 0
78546: LESS
78547: OR
78548: PUSH
78549: NOP4
78553: PUSH
78554: LD_INT 8
78556: GREATER
78557: OR
78558: IFFALSE 78562
// exit ;
78560: GO 78637
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78562: NOP4
78566: PUSH
78567: LD_INT 22
78569: PUSH
78570: NOP4
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PPUSH
78579: NOP4
78583: PUSH
78584: FOR_IN
78585: IFFALSE 78635
// begin un := UnitShoot ( i ) ;
78587: NOP4
78591: PUSH
78592: NOP4
78596: PPUSH
78597: NOP4
78601: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78602: NOP4
78606: PPUSH
78607: NOP4
78611: PUSH
78612: NOP4
78616: EQUAL
78617: IFFALSE 78633
// begin result := un ;
78619: NOP4
78623: PUSH
78624: NOP4
78628: ST_TO_ADDR
// exit ;
78629: POP
78630: POP
78631: GO 78637
// end ; end ;
78633: GO 78584
78635: POP
78636: POP
// end ;
78637: LD_VAR 0 3
78641: RET
// export function GetCargoBay ( units ) ; begin
78642: LD_INT 0
78644: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78645: NOP4
78649: PUSH
78650: NOP4
78654: PPUSH
78655: LD_INT 2
78657: PUSH
78658: LD_INT 34
78660: PUSH
78661: LD_INT 12
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 34
78670: PUSH
78671: LD_INT 51
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: LD_INT 34
78680: PUSH
78681: LD_INT 32
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PUSH
78688: LD_INT 34
78690: PUSH
78691: NOP4
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: LIST
78704: LIST
78705: LIST
78706: PPUSH
78707: NOP4
78711: ST_TO_ADDR
// end ; end_of_file
78712: LD_VAR 0 2
78716: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
78717: LD_INT 0
78719: PPUSH
// ar_miner := 81 ;
78720: NOP4
78724: PUSH
78725: LD_INT 81
78727: ST_TO_ADDR
// ar_crane := 88 ;
78728: NOP4
78732: PUSH
78733: LD_INT 88
78735: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
78736: NOP4
78740: PUSH
78741: LD_INT 89
78743: ST_TO_ADDR
// us_hack := 99 ;
78744: NOP4
78748: PUSH
78749: LD_INT 99
78751: ST_TO_ADDR
// us_artillery := 97 ;
78752: NOP4
78756: PUSH
78757: LD_INT 97
78759: ST_TO_ADDR
// ar_bio_bomb := 91 ;
78760: NOP4
78764: PUSH
78765: LD_INT 91
78767: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
78768: NOP4
78772: PUSH
78773: LD_INT 92
78775: ST_TO_ADDR
// ru_radar := 98 ;
78776: NOP4
78780: PUSH
78781: LD_INT 98
78783: ST_TO_ADDR
// tech_Artillery := 80 ;
78784: NOP4
78788: PUSH
78789: LD_INT 80
78791: ST_TO_ADDR
// tech_RadMat := 81 ;
78792: NOP4
78796: PUSH
78797: LD_INT 81
78799: ST_TO_ADDR
// tech_BasicTools := 82 ;
78800: NOP4
78804: PUSH
78805: LD_INT 82
78807: ST_TO_ADDR
// tech_Cargo := 83 ;
78808: NOP4
78812: PUSH
78813: LD_INT 83
78815: ST_TO_ADDR
// tech_Track := 84 ;
78816: NOP4
78820: PUSH
78821: LD_INT 84
78823: ST_TO_ADDR
// tech_Crane := 85 ;
78824: NOP4
78828: PUSH
78829: LD_INT 85
78831: ST_TO_ADDR
// tech_Bulldozer := 86 ;
78832: NOP4
78836: PUSH
78837: LD_INT 86
78839: ST_TO_ADDR
// tech_Hovercraft := 87 ;
78840: NOP4
78844: PUSH
78845: LD_INT 87
78847: ST_TO_ADDR
// end ;
78848: LD_VAR 0 1
78852: RET
// every 1 do
78853: GO 78855
78855: DISABLE
// InitGlobalVariables ; end_of_file
78856: NOP4
78860: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78861: LD_INT 0
78863: PPUSH
78864: PPUSH
78865: PPUSH
78866: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78867: NOP4
78871: PPUSH
78872: NOP4
78876: PUSH
78877: NOP4
78881: EQUAL
78882: IFFALSE 78954
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78884: LD_INT 68
78886: PPUSH
78887: NOP4
78891: PPUSH
78892: NOP4
78896: PPUSH
78897: NOP4
78901: PUSH
78902: LD_INT 2
78904: EQUAL
78905: IFFALSE 78917
// eff := 70 else
78907: NOP4
78911: PUSH
78912: LD_INT 70
78914: ST_TO_ADDR
78915: GO 78925
// eff := 30 ;
78917: NOP4
78921: PUSH
78922: LD_INT 30
78924: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78925: NOP4
78929: PPUSH
78930: NOP4
78934: PPUSH
78935: NOP4
78939: PPUSH
78940: NOP4
78944: PPUSH
78945: NOP4
78949: PPUSH
78950: NOP4
// end ; end ;
78954: LD_VAR 0 2
78958: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78959: LD_INT 0
78961: PPUSH
// end ;
78962: LD_VAR 0 4
78966: RET
// export function SOS_Command ( cmd ) ; begin
78967: LD_INT 0
78969: PPUSH
// end ;
78970: LD_VAR 0 2
78974: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78975: LD_INT 0
78977: PPUSH
// if cmd = 121 then
78978: NOP4
78982: PUSH
78983: LD_INT 121
78985: EQUAL
78986: IFFALSE 78988
// end ;
78988: LD_VAR 0 6
78992: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78993: LD_INT 0
78995: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78996: NOP4
79000: PUSH
79001: LD_INT 250
79003: EQUAL
79004: PUSH
79005: NOP4
79009: PPUSH
79010: NOP4
79014: PUSH
79015: NOP4
79019: EQUAL
79020: AND
79021: IFFALSE 79042
// MinerPlaceMine ( unit , x , y ) ;
79023: NOP4
79027: PPUSH
79028: NOP4
79032: PPUSH
79033: NOP4
79037: PPUSH
79038: NOP4
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
79042: NOP4
79046: PUSH
79047: LD_INT 251
79049: EQUAL
79050: PUSH
79051: NOP4
79055: PPUSH
79056: NOP4
79060: PUSH
79061: NOP4
79065: EQUAL
79066: AND
79067: IFFALSE 79088
// MinerDetonateMine ( unit , x , y ) ;
79069: NOP4
79073: PPUSH
79074: NOP4
79078: PPUSH
79079: NOP4
79083: PPUSH
79084: NOP4
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
79088: NOP4
79092: PUSH
79093: LD_INT 252
79095: EQUAL
79096: PUSH
79097: NOP4
79101: PPUSH
79102: NOP4
79106: PUSH
79107: NOP4
79111: EQUAL
79112: AND
79113: IFFALSE 79134
// MinerCreateMinefield ( unit , x , y ) ;
79115: NOP4
79119: PPUSH
79120: NOP4
79124: PPUSH
79125: NOP4
79129: PPUSH
79130: NOP4
// if cmd = 253 and GetClass ( unit ) = class_sniper then
79134: NOP4
79138: PUSH
79139: LD_INT 253
79141: EQUAL
79142: PUSH
79143: NOP4
79147: PPUSH
79148: NOP4
79152: PUSH
79153: LD_INT 5
79155: EQUAL
79156: AND
79157: IFFALSE 79178
// ComBinocular ( unit , x , y ) ;
79159: NOP4
79163: PPUSH
79164: NOP4
79168: PPUSH
79169: NOP4
79173: PPUSH
79174: NOP4
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
79178: NOP4
79182: PUSH
79183: LD_INT 254
79185: EQUAL
79186: PUSH
79187: NOP4
79191: PPUSH
79192: NOP4
79196: PUSH
79197: NOP4
79201: EQUAL
79202: AND
79203: PUSH
79204: NOP4
79208: PPUSH
79209: NOP4
79213: PUSH
79214: LD_INT 3
79216: EQUAL
79217: AND
79218: IFFALSE 79234
// HackDestroyVehicle ( unit , selectedUnit ) ;
79220: NOP4
79224: PPUSH
79225: NOP4
79229: PPUSH
79230: NOP4
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
79234: NOP4
79238: PUSH
79239: LD_INT 255
79241: EQUAL
79242: PUSH
79243: NOP4
79247: PPUSH
79248: NOP4
79252: PUSH
79253: LD_INT 14
79255: PUSH
79256: LD_INT 53
79258: PUSH
79259: EMPTY
79260: LIST
79261: LIST
79262: IN
79263: AND
79264: PUSH
79265: NOP4
79269: PPUSH
79270: NOP4
79274: PPUSH
79275: NOP4
79279: AND
79280: IFFALSE 79304
// CutTreeXYR ( unit , x , y , 12 ) ;
79282: NOP4
79286: PPUSH
79287: NOP4
79291: PPUSH
79292: NOP4
79296: PPUSH
79297: LD_INT 12
79299: PPUSH
79300: NOP4
// end ;
79304: LD_VAR 0 6
79308: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
79309: LD_INT 0
79311: PPUSH
// end ;
79312: LD_VAR 0 4
79316: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79317: LD_INT 0
79319: PPUSH
79320: PPUSH
79321: PPUSH
79322: PPUSH
79323: PPUSH
79324: PPUSH
79325: PPUSH
79326: PPUSH
79327: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
79328: NOP4
79332: NOT
79333: PUSH
79334: NOP4
79338: PPUSH
79339: NOP4
79343: PPUSH
79344: NOP4
79348: NOT
79349: OR
79350: PUSH
79351: NOP4
79355: NOT
79356: OR
79357: IFFALSE 79361
// exit ;
79359: GO 79701
// list := [ ] ;
79361: NOP4
79365: PUSH
79366: EMPTY
79367: ST_TO_ADDR
// if x - r < 0 then
79368: NOP4
79372: PUSH
79373: NOP4
79377: MINUS
79378: PUSH
79379: LD_INT 0
79381: LESS
79382: IFFALSE 79394
// min_x := 0 else
79384: NOP4
79388: PUSH
79389: LD_INT 0
79391: ST_TO_ADDR
79392: GO 79410
// min_x := x - r ;
79394: NOP4
79398: PUSH
79399: NOP4
79403: PUSH
79404: NOP4
79408: MINUS
79409: ST_TO_ADDR
// if y - r < 0 then
79410: NOP4
79414: PUSH
79415: NOP4
79419: MINUS
79420: PUSH
79421: LD_INT 0
79423: LESS
79424: IFFALSE 79436
// min_y := 0 else
79426: NOP4
79430: PUSH
79431: LD_INT 0
79433: ST_TO_ADDR
79434: GO 79452
// min_y := y - r ;
79436: NOP4
79440: PUSH
79441: NOP4
79445: PUSH
79446: NOP4
79450: MINUS
79451: ST_TO_ADDR
// max_x := x + r ;
79452: NOP4
79456: PUSH
79457: NOP4
79461: PUSH
79462: NOP4
79466: PLUS
79467: ST_TO_ADDR
// max_y := y + r ;
79468: NOP4
79472: PUSH
79473: NOP4
79477: PUSH
79478: NOP4
79482: PLUS
79483: ST_TO_ADDR
// for _x = min_x to max_x do
79484: NOP4
79488: PUSH
79489: DOUBLE
79490: NOP4
79494: DEC
79495: ST_TO_ADDR
79496: NOP4
79500: PUSH
79501: FOR_TO
79502: IFFALSE 79619
// for _y = min_y to max_y do
79504: NOP4
79508: PUSH
79509: DOUBLE
79510: NOP4
79514: DEC
79515: ST_TO_ADDR
79516: NOP4
79520: PUSH
79521: FOR_TO
79522: IFFALSE 79615
// begin if not ValidHex ( _x , _y ) then
79524: NOP4
79528: PPUSH
79529: NOP4
79533: PPUSH
79534: NOP4
79538: NOT
79539: IFFALSE 79543
// continue ;
79541: GO 79521
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79543: NOP4
79547: PPUSH
79548: NOP4
79552: PPUSH
79553: NOP4
79557: PUSH
79558: NOP4
79562: PPUSH
79563: NOP4
79567: PPUSH
79568: NOP4
79572: AND
79573: IFFALSE 79613
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79575: NOP4
79579: PUSH
79580: NOP4
79584: PPUSH
79585: NOP4
79589: PUSH
79590: LD_INT 1
79592: PLUS
79593: PPUSH
79594: NOP4
79598: PUSH
79599: NOP4
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: PPUSH
79608: NOP4
79612: ST_TO_ADDR
// end ;
79613: GO 79521
79615: POP
79616: POP
79617: GO 79501
79619: POP
79620: POP
// if not list then
79621: NOP4
79625: NOT
79626: IFFALSE 79630
// exit ;
79628: GO 79701
// for i in list do
79630: NOP4
79634: PUSH
79635: NOP4
79639: PUSH
79640: FOR_IN
79641: IFFALSE 79699
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79643: NOP4
79647: PPUSH
79648: LD_STRING M
79650: PUSH
79651: NOP4
79655: PUSH
79656: LD_INT 1
79658: ARRAY
79659: PUSH
79660: NOP4
79664: PUSH
79665: LD_INT 2
79667: ARRAY
79668: PUSH
79669: LD_INT 0
79671: PUSH
79672: LD_INT 0
79674: PUSH
79675: LD_INT 0
79677: PUSH
79678: LD_INT 0
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: PUSH
79690: EMPTY
79691: LIST
79692: PPUSH
79693: NOP4
79697: GO 79640
79699: POP
79700: POP
// end ;
79701: LD_VAR 0 5
79705: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79706: NOP4
79710: NOT
79711: IFFALSE 79761
79713: GO 79715
79715: DISABLE
// begin initHack := true ;
79716: NOP4
79720: PUSH
79721: LD_INT 1
79723: ST_TO_ADDR
// hackTanks := [ ] ;
79724: NOP4
79728: PUSH
79729: EMPTY
79730: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79731: NOP4
79735: PUSH
79736: EMPTY
79737: ST_TO_ADDR
// hackLimit := 3 ;
79738: NOP4
79742: PUSH
79743: LD_INT 3
79745: ST_TO_ADDR
// hackDist := 12 ;
79746: NOP4
79750: PUSH
79751: LD_INT 12
79753: ST_TO_ADDR
// hackCounter := [ ] ;
79754: NOP4
79758: PUSH
79759: EMPTY
79760: ST_TO_ADDR
// end ;
79761: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79762: NOP4
79766: PUSH
79767: LD_INT 34
79769: PUSH
79770: NOP4
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: PPUSH
79779: NOP4
79783: AND
79784: IFFALSE 80039
79786: GO 79788
79788: DISABLE
79789: LD_INT 0
79791: PPUSH
79792: PPUSH
// begin enable ;
79793: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79794: NOP4
79798: PUSH
79799: LD_INT 34
79801: PUSH
79802: NOP4
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PPUSH
79811: NOP4
79815: PUSH
79816: FOR_IN
79817: IFFALSE 80037
// begin if not i in hackTanks then
79819: NOP4
79823: PUSH
79824: NOP4
79828: IN
79829: NOT
79830: IFFALSE 79913
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79832: NOP4
79836: PUSH
79837: NOP4
79841: PPUSH
79842: NOP4
79846: PUSH
79847: LD_INT 1
79849: PLUS
79850: PPUSH
79851: NOP4
79855: PPUSH
79856: NOP4
79860: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79861: NOP4
79865: PUSH
79866: NOP4
79870: PPUSH
79871: NOP4
79875: PUSH
79876: LD_INT 1
79878: PLUS
79879: PPUSH
79880: EMPTY
79881: PPUSH
79882: NOP4
79886: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79887: NOP4
79891: PUSH
79892: NOP4
79896: PPUSH
79897: NOP4
79901: PUSH
79902: LD_INT 1
79904: PLUS
79905: PPUSH
79906: EMPTY
79907: PPUSH
79908: NOP4
79912: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79913: NOP4
79917: PPUSH
79918: NOP4
79922: NOT
79923: IFFALSE 79936
// begin HackUnlinkAll ( i ) ;
79925: NOP4
79929: PPUSH
79930: NOP4
// continue ;
79934: GO 79816
// end ; HackCheckCapturedStatus ( i ) ;
79936: NOP4
79940: PPUSH
79941: NOP4
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79945: NOP4
79949: PUSH
79950: LD_INT 81
79952: PUSH
79953: NOP4
79957: PPUSH
79958: NOP4
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 33
79969: PUSH
79970: LD_INT 3
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: LD_INT 91
79979: PUSH
79980: NOP4
79984: PUSH
79985: NOP4
79989: PUSH
79990: EMPTY
79991: LIST
79992: LIST
79993: LIST
79994: PUSH
79995: LD_INT 50
79997: PUSH
79998: EMPTY
79999: LIST
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: PPUSH
80007: NOP4
80011: ST_TO_ADDR
// if not tmp then
80012: NOP4
80016: NOT
80017: IFFALSE 80021
// continue ;
80019: GO 79816
// HackLink ( i , tmp ) ;
80021: NOP4
80025: PPUSH
80026: NOP4
80030: PPUSH
80031: NOP4
// end ;
80035: GO 79816
80037: POP
80038: POP
// end ;
80039: PPOPN 2
80041: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80042: LD_INT 0
80044: PPUSH
80045: PPUSH
80046: PPUSH
// if not hack in hackTanks then
80047: NOP4
80051: PUSH
80052: NOP4
80056: IN
80057: NOT
80058: IFFALSE 80062
// exit ;
80060: GO 80173
// index := GetElementIndex ( hackTanks , hack ) ;
80062: NOP4
80066: PUSH
80067: NOP4
80071: PPUSH
80072: NOP4
80076: PPUSH
80077: NOP4
80081: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80082: NOP4
80086: PUSH
80087: NOP4
80091: ARRAY
80092: IFFALSE 80173
// begin for i in hackTanksCaptured [ index ] do
80094: NOP4
80098: PUSH
80099: NOP4
80103: PUSH
80104: NOP4
80108: ARRAY
80109: PUSH
80110: FOR_IN
80111: IFFALSE 80137
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80113: NOP4
80117: PUSH
80118: LD_INT 1
80120: ARRAY
80121: PPUSH
80122: NOP4
80126: PUSH
80127: LD_INT 2
80129: ARRAY
80130: PPUSH
80131: NOP4
80135: GO 80110
80137: POP
80138: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80139: NOP4
80143: PUSH
80144: NOP4
80148: PPUSH
80149: NOP4
80153: PPUSH
80154: EMPTY
80155: PPUSH
80156: NOP4
80160: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80161: NOP4
80165: PPUSH
80166: LD_INT 0
80168: PPUSH
80169: NOP4
// end ; end ;
80173: LD_VAR 0 2
80177: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80178: LD_INT 0
80180: PPUSH
80181: PPUSH
80182: PPUSH
// if not hack in hackTanks or not vehicles then
80183: NOP4
80187: PUSH
80188: NOP4
80192: IN
80193: NOT
80194: PUSH
80195: NOP4
80199: NOT
80200: OR
80201: IFFALSE 80205
// exit ;
80203: GO 80480
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80205: NOP4
80209: PUSH
80210: NOP4
80214: PPUSH
80215: NOP4
80219: PPUSH
80220: LD_INT 1
80222: PPUSH
80223: LD_INT 1
80225: PPUSH
80226: NOP4
80230: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80231: NOP4
80235: PUSH
80236: NOP4
80240: PPUSH
80241: NOP4
80245: PPUSH
80246: NOP4
80250: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80251: NOP4
80255: PUSH
80256: NOP4
80260: ARRAY
80261: PUSH
80262: NOP4
80266: LESS
80267: IFFALSE 80456
// begin for i := 1 to vehicles do
80269: NOP4
80273: PUSH
80274: DOUBLE
80275: LD_INT 1
80277: DEC
80278: ST_TO_ADDR
80279: NOP4
80283: PUSH
80284: FOR_TO
80285: IFFALSE 80454
// begin if hackTanksCaptured [ index ] = hackLimit then
80287: NOP4
80291: PUSH
80292: NOP4
80296: ARRAY
80297: PUSH
80298: NOP4
80302: EQUAL
80303: IFFALSE 80307
// break ;
80305: GO 80454
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80307: NOP4
80311: PUSH
80312: NOP4
80316: PPUSH
80317: NOP4
80321: PPUSH
80322: NOP4
80326: PUSH
80327: NOP4
80331: ARRAY
80332: PUSH
80333: LD_INT 1
80335: PLUS
80336: PPUSH
80337: NOP4
80341: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80342: NOP4
80346: PUSH
80347: NOP4
80351: PPUSH
80352: NOP4
80356: PUSH
80357: NOP4
80361: PUSH
80362: NOP4
80366: ARRAY
80367: PUSH
80368: LD_INT 1
80370: PLUS
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PPUSH
80376: NOP4
80380: PUSH
80381: NOP4
80385: ARRAY
80386: PUSH
80387: NOP4
80391: PUSH
80392: NOP4
80396: ARRAY
80397: PPUSH
80398: NOP4
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PPUSH
80407: NOP4
80411: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80412: NOP4
80416: PUSH
80417: NOP4
80421: ARRAY
80422: PPUSH
80423: NOP4
80427: PPUSH
80428: NOP4
80432: PPUSH
80433: NOP4
// ComStop ( vehicles [ i ] ) ;
80437: NOP4
80441: PUSH
80442: NOP4
80446: ARRAY
80447: PPUSH
80448: NOP4
// end ;
80452: GO 80284
80454: POP
80455: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80456: NOP4
80460: PPUSH
80461: NOP4
80465: PUSH
80466: NOP4
80470: ARRAY
80471: PUSH
80472: LD_INT 0
80474: PLUS
80475: PPUSH
80476: NOP4
// end ;
80480: LD_VAR 0 3
80484: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80485: LD_INT 0
80487: PPUSH
80488: PPUSH
80489: PPUSH
80490: PPUSH
// if not hack in hackTanks then
80491: NOP4
80495: PUSH
80496: NOP4
80500: IN
80501: NOT
80502: IFFALSE 80506
// exit ;
80504: GO 80746
// index := GetElementIndex ( hackTanks , hack ) ;
80506: NOP4
80510: PUSH
80511: NOP4
80515: PPUSH
80516: NOP4
80520: PPUSH
80521: NOP4
80525: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80526: NOP4
80530: PUSH
80531: DOUBLE
80532: NOP4
80536: PUSH
80537: NOP4
80541: ARRAY
80542: INC
80543: ST_TO_ADDR
80544: LD_INT 1
80546: PUSH
80547: FOR_DOWNTO
80548: IFFALSE 80720
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80550: NOP4
80554: PUSH
80555: NOP4
80559: PUSH
80560: NOP4
80564: ARRAY
80565: PUSH
80566: NOP4
80570: ARRAY
80571: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80572: NOP4
80576: PUSH
80577: LD_INT 1
80579: ARRAY
80580: PPUSH
80581: NOP4
80585: NOT
80586: PUSH
80587: NOP4
80591: PUSH
80592: LD_INT 1
80594: ARRAY
80595: PPUSH
80596: NOP4
80600: PUSH
80601: NOP4
80605: PPUSH
80606: NOP4
80610: NONEQUAL
80611: OR
80612: IFFALSE 80718
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80614: NOP4
80618: PUSH
80619: LD_INT 1
80621: ARRAY
80622: PPUSH
80623: NOP4
80627: PUSH
80628: NOP4
80632: PUSH
80633: LD_INT 1
80635: ARRAY
80636: PPUSH
80637: NOP4
80641: PUSH
80642: NOP4
80646: PPUSH
80647: NOP4
80651: EQUAL
80652: AND
80653: IFFALSE 80677
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80655: NOP4
80659: PUSH
80660: LD_INT 1
80662: ARRAY
80663: PPUSH
80664: NOP4
80668: PUSH
80669: LD_INT 2
80671: ARRAY
80672: PPUSH
80673: NOP4
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80677: NOP4
80681: PUSH
80682: NOP4
80686: PPUSH
80687: NOP4
80691: PPUSH
80692: NOP4
80696: PUSH
80697: NOP4
80701: ARRAY
80702: PPUSH
80703: NOP4
80707: PPUSH
80708: NOP4
80712: PPUSH
80713: NOP4
80717: ST_TO_ADDR
// end ; end ;
80718: GO 80547
80720: POP
80721: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80722: NOP4
80726: PPUSH
80727: NOP4
80731: PUSH
80732: NOP4
80736: ARRAY
80737: PUSH
80738: LD_INT 0
80740: PLUS
80741: PPUSH
80742: NOP4
// end ;
80746: LD_VAR 0 2
80750: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80751: LD_INT 0
80753: PPUSH
80754: PPUSH
80755: PPUSH
80756: PPUSH
// if not hack in hackTanks then
80757: NOP4
80761: PUSH
80762: NOP4
80766: IN
80767: NOT
80768: IFFALSE 80772
// exit ;
80770: GO 80857
// index := GetElementIndex ( hackTanks , hack ) ;
80772: NOP4
80776: PUSH
80777: NOP4
80781: PPUSH
80782: NOP4
80786: PPUSH
80787: NOP4
80791: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80792: NOP4
80796: PUSH
80797: DOUBLE
80798: LD_INT 1
80800: DEC
80801: ST_TO_ADDR
80802: NOP4
80806: PUSH
80807: NOP4
80811: ARRAY
80812: PUSH
80813: FOR_TO
80814: IFFALSE 80855
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80816: NOP4
80820: PUSH
80821: NOP4
80825: ARRAY
80826: PUSH
80827: NOP4
80831: ARRAY
80832: PUSH
80833: LD_INT 1
80835: ARRAY
80836: PUSH
80837: NOP4
80841: EQUAL
80842: IFFALSE 80853
// KillUnit ( vehicle ) ;
80844: NOP4
80848: PPUSH
80849: NOP4
80853: GO 80813
80855: POP
80856: POP
// end ;
80857: LD_VAR 0 3
80861: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80862: NOP4
80866: NOT
80867: IFFALSE 80902
80869: GO 80871
80871: DISABLE
// begin initMiner := true ;
80872: NOP4
80876: PUSH
80877: LD_INT 1
80879: ST_TO_ADDR
// minersList := [ ] ;
80880: NOP4
80884: PUSH
80885: EMPTY
80886: ST_TO_ADDR
// minerMinesList := [ ] ;
80887: NOP4
80891: PUSH
80892: EMPTY
80893: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80894: NOP4
80898: PUSH
80899: LD_INT 5
80901: ST_TO_ADDR
// end ;
80902: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80903: NOP4
80907: PUSH
80908: LD_INT 34
80910: PUSH
80911: NOP4
80915: PUSH
80916: EMPTY
80917: LIST
80918: LIST
80919: PPUSH
80920: NOP4
80924: AND
80925: IFFALSE 81388
80927: GO 80929
80929: DISABLE
80930: LD_INT 0
80932: PPUSH
80933: PPUSH
80934: PPUSH
80935: PPUSH
// begin enable ;
80936: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80937: NOP4
80941: PUSH
80942: LD_INT 34
80944: PUSH
80945: NOP4
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: PPUSH
80954: NOP4
80958: PUSH
80959: FOR_IN
80960: IFFALSE 81032
// begin if not i in minersList then
80962: NOP4
80966: PUSH
80967: NOP4
80971: IN
80972: NOT
80973: IFFALSE 81030
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80975: NOP4
80979: PUSH
80980: NOP4
80984: PPUSH
80985: NOP4
80989: PUSH
80990: LD_INT 1
80992: PLUS
80993: PPUSH
80994: NOP4
80998: PPUSH
80999: NOP4
81003: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81004: NOP4
81008: PUSH
81009: NOP4
81013: PPUSH
81014: NOP4
81018: PUSH
81019: LD_INT 1
81021: PLUS
81022: PPUSH
81023: EMPTY
81024: PPUSH
81025: NOP4
81029: ST_TO_ADDR
// end end ;
81030: GO 80959
81032: POP
81033: POP
// for i := minerMinesList downto 1 do
81034: NOP4
81038: PUSH
81039: DOUBLE
81040: NOP4
81044: INC
81045: ST_TO_ADDR
81046: LD_INT 1
81048: PUSH
81049: FOR_DOWNTO
81050: IFFALSE 81386
// begin if IsLive ( minersList [ i ] ) then
81052: NOP4
81056: PUSH
81057: NOP4
81061: ARRAY
81062: PPUSH
81063: NOP4
81067: IFFALSE 81095
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
81069: NOP4
81073: PUSH
81074: NOP4
81078: ARRAY
81079: PPUSH
81080: NOP4
81084: PUSH
81085: NOP4
81089: ARRAY
81090: PPUSH
81091: NOP4
// if not minerMinesList [ i ] then
81095: NOP4
81099: PUSH
81100: NOP4
81104: ARRAY
81105: NOT
81106: IFFALSE 81110
// continue ;
81108: GO 81049
// for j := minerMinesList [ i ] downto 1 do
81110: NOP4
81114: PUSH
81115: DOUBLE
81116: NOP4
81120: PUSH
81121: NOP4
81125: ARRAY
81126: INC
81127: ST_TO_ADDR
81128: LD_INT 1
81130: PUSH
81131: FOR_DOWNTO
81132: IFFALSE 81382
// begin side := GetSide ( minersList [ i ] ) ;
81134: NOP4
81138: PUSH
81139: NOP4
81143: PUSH
81144: NOP4
81148: ARRAY
81149: PPUSH
81150: NOP4
81154: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81155: NOP4
81159: PUSH
81160: NOP4
81164: PUSH
81165: NOP4
81169: ARRAY
81170: PUSH
81171: NOP4
81175: ARRAY
81176: PUSH
81177: LD_INT 1
81179: ARRAY
81180: PPUSH
81181: NOP4
81185: PUSH
81186: NOP4
81190: ARRAY
81191: PUSH
81192: NOP4
81196: ARRAY
81197: PUSH
81198: LD_INT 2
81200: ARRAY
81201: PPUSH
81202: NOP4
81206: ST_TO_ADDR
// if not tmp then
81207: NOP4
81211: NOT
81212: IFFALSE 81216
// continue ;
81214: GO 81131
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81216: NOP4
81220: PUSH
81221: LD_INT 81
81223: PUSH
81224: NOP4
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: PPUSH
81233: NOP4
81237: IN
81238: PUSH
81239: NOP4
81243: PUSH
81244: NOP4
81248: ARRAY
81249: PUSH
81250: NOP4
81254: ARRAY
81255: PUSH
81256: LD_INT 1
81258: ARRAY
81259: PPUSH
81260: NOP4
81264: PUSH
81265: NOP4
81269: ARRAY
81270: PUSH
81271: NOP4
81275: ARRAY
81276: PUSH
81277: LD_INT 2
81279: ARRAY
81280: PPUSH
81281: NOP4
81285: AND
81286: IFFALSE 81380
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81288: NOP4
81292: PUSH
81293: NOP4
81297: ARRAY
81298: PUSH
81299: NOP4
81303: ARRAY
81304: PUSH
81305: LD_INT 1
81307: ARRAY
81308: PPUSH
81309: NOP4
81313: PUSH
81314: NOP4
81318: ARRAY
81319: PUSH
81320: NOP4
81324: ARRAY
81325: PUSH
81326: LD_INT 2
81328: ARRAY
81329: PPUSH
81330: NOP4
81334: PPUSH
81335: NOP4
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81339: NOP4
81343: PUSH
81344: NOP4
81348: PPUSH
81349: NOP4
81353: PPUSH
81354: NOP4
81358: PUSH
81359: NOP4
81363: ARRAY
81364: PPUSH
81365: NOP4
81369: PPUSH
81370: NOP4
81374: PPUSH
81375: NOP4
81379: ST_TO_ADDR
// end ; end ;
81380: GO 81131
81382: POP
81383: POP
// end ;
81384: GO 81049
81386: POP
81387: POP
// end ;
81388: PPOPN 4
81390: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81391: LD_INT 0
81393: PPUSH
81394: PPUSH
// result := false ;
81395: NOP4
81399: PUSH
81400: LD_INT 0
81402: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81403: NOP4
81407: PPUSH
81408: NOP4
81412: PUSH
81413: NOP4
81417: EQUAL
81418: NOT
81419: IFFALSE 81423
// exit ;
81421: GO 81663
// index := GetElementIndex ( minersList , unit ) ;
81423: NOP4
81427: PUSH
81428: NOP4
81432: PPUSH
81433: NOP4
81437: PPUSH
81438: NOP4
81442: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81443: NOP4
81447: PUSH
81448: NOP4
81452: ARRAY
81453: PUSH
81454: NOP4
81458: GREATEREQUAL
81459: IFFALSE 81463
// exit ;
81461: GO 81663
// ComMoveXY ( unit , x , y ) ;
81463: NOP4
81467: PPUSH
81468: NOP4
81472: PPUSH
81473: NOP4
81477: PPUSH
81478: NOP4
// repeat wait ( 0 0$1 ) ;
81482: LD_INT 35
81484: PPUSH
81485: NOP4
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81489: NOP4
81493: PPUSH
81494: NOP4
81498: PPUSH
81499: NOP4
81503: PPUSH
81504: NOP4
81508: NOT
81509: PUSH
81510: NOP4
81514: PPUSH
81515: NOP4
81519: AND
81520: IFFALSE 81524
// exit ;
81522: GO 81663
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81524: NOP4
81528: PPUSH
81529: NOP4
81533: PPUSH
81534: NOP4
81538: PUSH
81539: NOP4
81543: EQUAL
81544: PUSH
81545: NOP4
81549: PPUSH
81550: NOP4
81554: NOT
81555: AND
81556: IFFALSE 81482
// PlaySoundXY ( x , y , PlantMine ) ;
81558: NOP4
81562: PPUSH
81563: NOP4
81567: PPUSH
81568: LD_STRING PlantMine
81570: PPUSH
81571: NOP4
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81575: NOP4
81579: PPUSH
81580: NOP4
81584: PPUSH
81585: NOP4
81589: PPUSH
81590: NOP4
81594: PPUSH
81595: LD_INT 0
81597: PPUSH
81598: NOP4
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81602: NOP4
81606: PUSH
81607: NOP4
81611: PPUSH
81612: NOP4
81616: PUSH
81617: NOP4
81621: PUSH
81622: NOP4
81626: ARRAY
81627: PUSH
81628: LD_INT 1
81630: PLUS
81631: PUSH
81632: EMPTY
81633: LIST
81634: LIST
81635: PPUSH
81636: NOP4
81640: PUSH
81641: NOP4
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: PPUSH
81650: NOP4
81654: ST_TO_ADDR
// result := true ;
81655: NOP4
81659: PUSH
81660: LD_INT 1
81662: ST_TO_ADDR
// end ;
81663: LD_VAR 0 4
81667: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81668: LD_INT 0
81670: PPUSH
81671: PPUSH
81672: PPUSH
// if not unit in minersList then
81673: NOP4
81677: PUSH
81678: NOP4
81682: IN
81683: NOT
81684: IFFALSE 81688
// exit ;
81686: GO 82080
// index := GetElementIndex ( minersList , unit ) ;
81688: NOP4
81692: PUSH
81693: NOP4
81697: PPUSH
81698: NOP4
81702: PPUSH
81703: NOP4
81707: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81708: NOP4
81712: PUSH
81713: DOUBLE
81714: NOP4
81718: PUSH
81719: NOP4
81723: ARRAY
81724: INC
81725: ST_TO_ADDR
81726: LD_INT 1
81728: PUSH
81729: FOR_DOWNTO
81730: IFFALSE 81891
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81732: NOP4
81736: PUSH
81737: NOP4
81741: ARRAY
81742: PUSH
81743: NOP4
81747: ARRAY
81748: PUSH
81749: LD_INT 1
81751: ARRAY
81752: PUSH
81753: NOP4
81757: EQUAL
81758: PUSH
81759: NOP4
81763: PUSH
81764: NOP4
81768: ARRAY
81769: PUSH
81770: NOP4
81774: ARRAY
81775: PUSH
81776: LD_INT 2
81778: ARRAY
81779: PUSH
81780: NOP4
81784: EQUAL
81785: AND
81786: IFFALSE 81889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81788: NOP4
81792: PUSH
81793: NOP4
81797: ARRAY
81798: PUSH
81799: NOP4
81803: ARRAY
81804: PUSH
81805: LD_INT 1
81807: ARRAY
81808: PPUSH
81809: NOP4
81813: PUSH
81814: NOP4
81818: ARRAY
81819: PUSH
81820: NOP4
81824: ARRAY
81825: PUSH
81826: LD_INT 2
81828: ARRAY
81829: PPUSH
81830: NOP4
81834: PPUSH
81835: NOP4
81839: PPUSH
81840: NOP4
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81844: NOP4
81848: PUSH
81849: NOP4
81853: PPUSH
81854: NOP4
81858: PPUSH
81859: NOP4
81863: PUSH
81864: NOP4
81868: ARRAY
81869: PPUSH
81870: NOP4
81874: PPUSH
81875: NOP4
81879: PPUSH
81880: NOP4
81884: ST_TO_ADDR
// exit ;
81885: POP
81886: POP
81887: GO 82080
// end ; end ;
81889: GO 81729
81891: POP
81892: POP
// for i := minerMinesList [ index ] downto 1 do
81893: NOP4
81897: PUSH
81898: DOUBLE
81899: NOP4
81903: PUSH
81904: NOP4
81908: ARRAY
81909: INC
81910: ST_TO_ADDR
81911: LD_INT 1
81913: PUSH
81914: FOR_DOWNTO
81915: IFFALSE 82078
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81917: NOP4
81921: PUSH
81922: NOP4
81926: ARRAY
81927: PUSH
81928: NOP4
81932: ARRAY
81933: PUSH
81934: LD_INT 1
81936: ARRAY
81937: PPUSH
81938: NOP4
81942: PUSH
81943: NOP4
81947: ARRAY
81948: PUSH
81949: NOP4
81953: ARRAY
81954: PUSH
81955: LD_INT 2
81957: ARRAY
81958: PPUSH
81959: NOP4
81963: PPUSH
81964: NOP4
81968: PPUSH
81969: NOP4
81973: PUSH
81974: LD_INT 6
81976: LESS
81977: IFFALSE 82076
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81979: NOP4
81983: PUSH
81984: NOP4
81988: ARRAY
81989: PUSH
81990: NOP4
81994: ARRAY
81995: PUSH
81996: LD_INT 1
81998: ARRAY
81999: PPUSH
82000: NOP4
82004: PUSH
82005: NOP4
82009: ARRAY
82010: PUSH
82011: NOP4
82015: ARRAY
82016: PUSH
82017: LD_INT 2
82019: ARRAY
82020: PPUSH
82021: NOP4
82025: PPUSH
82026: NOP4
82030: PPUSH
82031: NOP4
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82035: NOP4
82039: PUSH
82040: NOP4
82044: PPUSH
82045: NOP4
82049: PPUSH
82050: NOP4
82054: PUSH
82055: NOP4
82059: ARRAY
82060: PPUSH
82061: NOP4
82065: PPUSH
82066: NOP4
82070: PPUSH
82071: NOP4
82075: ST_TO_ADDR
// end ; end ;
82076: GO 81914
82078: POP
82079: POP
// end ;
82080: LD_VAR 0 4
82084: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82085: LD_INT 0
82087: PPUSH
82088: PPUSH
82089: PPUSH
82090: PPUSH
82091: PPUSH
82092: PPUSH
82093: PPUSH
82094: PPUSH
82095: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82096: NOP4
82100: PPUSH
82101: NOP4
82105: PUSH
82106: NOP4
82110: EQUAL
82111: NOT
82112: PUSH
82113: NOP4
82117: PUSH
82118: NOP4
82122: IN
82123: NOT
82124: OR
82125: IFFALSE 82129
// exit ;
82127: GO 82451
// index := GetElementIndex ( minersList , unit ) ;
82129: NOP4
82133: PUSH
82134: NOP4
82138: PPUSH
82139: NOP4
82143: PPUSH
82144: NOP4
82148: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82149: NOP4
82153: PUSH
82154: NOP4
82158: PUSH
82159: NOP4
82163: PUSH
82164: NOP4
82168: ARRAY
82169: MINUS
82170: ST_TO_ADDR
// if not minesFreeAmount then
82171: NOP4
82175: NOT
82176: IFFALSE 82180
// exit ;
82178: GO 82451
// tmp := [ ] ;
82180: NOP4
82184: PUSH
82185: EMPTY
82186: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82187: NOP4
82191: PUSH
82192: DOUBLE
82193: LD_INT 1
82195: DEC
82196: ST_TO_ADDR
82197: NOP4
82201: PUSH
82202: FOR_TO
82203: IFFALSE 82398
// begin _d := rand ( 0 , 5 ) ;
82205: NOP4
82209: PUSH
82210: LD_INT 0
82212: PPUSH
82213: LD_INT 5
82215: PPUSH
82216: NOP4
82220: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82221: NOP4
82225: PUSH
82226: LD_INT 2
82228: PPUSH
82229: LD_INT 6
82231: PPUSH
82232: NOP4
82236: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82237: NOP4
82241: PUSH
82242: NOP4
82246: PPUSH
82247: NOP4
82251: PPUSH
82252: NOP4
82256: PPUSH
82257: NOP4
82261: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82262: NOP4
82266: PUSH
82267: NOP4
82271: PPUSH
82272: NOP4
82276: PPUSH
82277: NOP4
82281: PPUSH
82282: NOP4
82286: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82287: NOP4
82291: PPUSH
82292: NOP4
82296: PPUSH
82297: NOP4
82301: PUSH
82302: NOP4
82306: PUSH
82307: NOP4
82311: PUSH
82312: EMPTY
82313: LIST
82314: LIST
82315: PUSH
82316: NOP4
82320: IN
82321: NOT
82322: AND
82323: PUSH
82324: NOP4
82328: PPUSH
82329: NOP4
82333: PPUSH
82334: NOP4
82338: NOT
82339: AND
82340: IFFALSE 82382
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82342: NOP4
82346: PUSH
82347: NOP4
82351: PPUSH
82352: NOP4
82356: PUSH
82357: LD_INT 1
82359: PLUS
82360: PPUSH
82361: NOP4
82365: PUSH
82366: NOP4
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: PPUSH
82375: NOP4
82379: ST_TO_ADDR
82380: GO 82396
// i := i - 1 ;
82382: NOP4
82386: PUSH
82387: NOP4
82391: PUSH
82392: LD_INT 1
82394: MINUS
82395: ST_TO_ADDR
// end ;
82396: GO 82202
82398: POP
82399: POP
// for i in tmp do
82400: NOP4
82404: PUSH
82405: NOP4
82409: PUSH
82410: FOR_IN
82411: IFFALSE 82449
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82413: NOP4
82417: PPUSH
82418: NOP4
82422: PUSH
82423: LD_INT 1
82425: ARRAY
82426: PPUSH
82427: NOP4
82431: PUSH
82432: LD_INT 2
82434: ARRAY
82435: PPUSH
82436: NOP4
82440: NOT
82441: IFFALSE 82447
// exit ;
82443: POP
82444: POP
82445: GO 82451
82447: GO 82410
82449: POP
82450: POP
// end ;
82451: LD_VAR 0 4
82455: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
82456: LD_INT 0
82458: PPUSH
82459: PPUSH
82460: PPUSH
82461: PPUSH
82462: PPUSH
82463: PPUSH
82464: PPUSH
// if not GetClass ( unit ) = class_sniper then
82465: NOP4
82469: PPUSH
82470: NOP4
82474: PUSH
82475: LD_INT 5
82477: EQUAL
82478: NOT
82479: IFFALSE 82483
// exit ;
82481: GO 82871
// dist := 8 ;
82483: NOP4
82487: PUSH
82488: LD_INT 8
82490: ST_TO_ADDR
// viewRange := 12 ;
82491: NOP4
82495: PUSH
82496: LD_INT 12
82498: ST_TO_ADDR
// side := GetSide ( unit ) ;
82499: NOP4
82503: PUSH
82504: NOP4
82508: PPUSH
82509: NOP4
82513: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82514: LD_INT 61
82516: PPUSH
82517: NOP4
82521: PPUSH
82522: NOP4
82526: PUSH
82527: LD_INT 2
82529: EQUAL
82530: IFFALSE 82540
// viewRange := 16 ;
82532: NOP4
82536: PUSH
82537: LD_INT 16
82539: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82540: NOP4
82544: PPUSH
82545: NOP4
82549: PPUSH
82550: NOP4
82554: PPUSH
82555: NOP4
82559: PUSH
82560: NOP4
82564: GREATER
82565: IFFALSE 82644
// begin ComMoveXY ( unit , x , y ) ;
82567: NOP4
82571: PPUSH
82572: NOP4
82576: PPUSH
82577: NOP4
82581: PPUSH
82582: NOP4
// repeat wait ( 0 0$1 ) ;
82586: LD_INT 35
82588: PPUSH
82589: NOP4
// if not UnitGoingToXY ( unit , x , y ) then
82593: NOP4
82597: PPUSH
82598: NOP4
82602: PPUSH
82603: NOP4
82607: PPUSH
82608: NOP4
82612: NOT
82613: IFFALSE 82617
// exit ;
82615: GO 82871
// until GetDistUnitXY ( unit , x , y ) < dist ;
82617: NOP4
82621: PPUSH
82622: NOP4
82626: PPUSH
82627: NOP4
82631: PPUSH
82632: NOP4
82636: PUSH
82637: NOP4
82641: LESS
82642: IFFALSE 82586
// end ; ComTurnXY ( unit , x , y ) ;
82644: NOP4
82648: PPUSH
82649: NOP4
82653: PPUSH
82654: NOP4
82658: PPUSH
82659: NOP4
// wait ( 5 ) ;
82663: LD_INT 5
82665: PPUSH
82666: NOP4
// _d := GetDir ( unit ) ;
82670: NOP4
82674: PUSH
82675: NOP4
82679: PPUSH
82680: NOP4
82684: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82685: NOP4
82689: PUSH
82690: NOP4
82694: PPUSH
82695: NOP4
82699: PPUSH
82700: NOP4
82704: PPUSH
82705: NOP4
82709: PPUSH
82710: NOP4
82714: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82715: NOP4
82719: PUSH
82720: NOP4
82724: PPUSH
82725: NOP4
82729: PPUSH
82730: NOP4
82734: PPUSH
82735: NOP4
82739: PPUSH
82740: NOP4
82744: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82745: NOP4
82749: PPUSH
82750: NOP4
82754: PPUSH
82755: NOP4
82759: NOT
82760: IFFALSE 82764
// exit ;
82762: GO 82871
// ComAnimCustom ( unit , 1 ) ;
82764: NOP4
82768: PPUSH
82769: LD_INT 1
82771: PPUSH
82772: NOP4
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82776: NOP4
82780: PPUSH
82781: NOP4
82785: PPUSH
82786: NOP4
82790: PPUSH
82791: NOP4
82795: PPUSH
82796: NOP4
// repeat wait ( 1 ) ;
82800: LD_INT 1
82802: PPUSH
82803: NOP4
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82807: NOP4
82811: PPUSH
82812: NOP4
82816: PUSH
82817: NOP4
82821: PPUSH
82822: NOP4
82826: OR
82827: PUSH
82828: NOP4
82832: PPUSH
82833: NOP4
82837: NOT
82838: OR
82839: PUSH
82840: NOP4
82844: PPUSH
82845: NOP4
82849: OR
82850: IFFALSE 82800
// RemoveSeeing ( _x , _y , side ) ;
82852: NOP4
82856: PPUSH
82857: NOP4
82861: PPUSH
82862: NOP4
82866: PPUSH
82867: NOP4
// end ; end_of_file
82871: LD_VAR 0 4
82875: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82876: NOP4
82880: PUSH
82881: LD_INT 200
82883: DOUBLE
82884: GREATEREQUAL
82885: IFFALSE 82893
82887: LD_INT 299
82889: DOUBLE
82890: LESSEQUAL
82891: IFTRUE 82895
82893: GO 82927
82895: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82896: NOP4
82900: PPUSH
82901: NOP4
82905: PPUSH
82906: NOP4
82910: PPUSH
82911: NOP4
82915: PPUSH
82916: NOP4
82920: PPUSH
82921: NOP4
82925: GO 83004
82927: LD_INT 300
82929: DOUBLE
82930: GREATEREQUAL
82931: IFFALSE 82939
82933: LD_INT 399
82935: DOUBLE
82936: LESSEQUAL
82937: IFTRUE 82941
82939: GO 83003
82941: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82942: NOP4
82946: PPUSH
82947: NOP4
82951: PPUSH
82952: NOP4
82956: PPUSH
82957: NOP4
82961: PPUSH
82962: NOP4
82966: PPUSH
82967: NOP4
82971: PPUSH
82972: NOP4
82976: PPUSH
82977: NOP4
82981: PPUSH
82982: NOP4
82986: PPUSH
82987: NOP4
82991: PPUSH
82992: NOP4
82996: PPUSH
82997: NOP4
83001: GO 83004
83003: POP
// end ;
83004: PPOPN 11
83006: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83007: NOP4
83011: PPUSH
83012: NOP4
83016: PPUSH
83017: NOP4
83021: PPUSH
83022: NOP4
83026: PPUSH
83027: NOP4
83031: PPUSH
83032: NOP4
// end ;
83036: PPOPN 5
83038: END
