// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27314 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 48749 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 48749 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 48749 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 48749 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 48749 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18820 0 1
7815: PPUSH
7816: CALL 18664 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18820 0 1
11310: PPUSH
11311: CALL 18702 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25610 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25610 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16597 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16597 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 51617 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 53879 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17262 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17277 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19368 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19277 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19090 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19368 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16512
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_INT 88
16303: PUSH
16304: LD_INT 52
16306: PUSH
16307: LD_INT 14
16309: PUSH
16310: LD_INT 53
16312: PUSH
16313: LD_INT 31
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: IN
16327: NOT
16328: IFFALSE 16387
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16330: LD_VAR 0 3
16334: PUSH
16335: LD_INT 13
16337: ARRAY
16338: PUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: CALL 19448 0 1
16348: GREATER
16349: IFFALSE 16370
// AddNewVehicle ( aiData , vehicle , 2 ) else
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_INT 2
16363: PPUSH
16364: CALL 18985 0 3
16368: GO 16387
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: LD_INT 4
16382: PPUSH
16383: CALL 18985 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 264
16396: PUSH
16397: LD_INT 12
16399: PUSH
16400: LD_INT 32
16402: PUSH
16403: LD_INT 51
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 88
16411: PUSH
16412: LD_INT 52
16414: PUSH
16415: LD_INT 14
16417: PUSH
16418: LD_INT 53
16420: PUSH
16421: LD_INT 31
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: IN
16435: IFFALSE 16454
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL 18985 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16454: LD_EXP 60
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 263
16468: PUSH
16469: LD_INT 2
16471: EQUAL
16472: AND
16473: IFFALSE 16512
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_EXP 60
16484: PUSH
16485: LD_INT 1
16487: PPUSH
16488: LD_EXP 60
16492: PPUSH
16493: CALL_OW 12
16497: ARRAY
16498: PPUSH
16499: CALL_OW 313
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: CALL_OW 53
// end ; end ;
16512: PPOPN 3
16514: END
// on BuildingStarted ( building , unit ) do var aiData ;
16515: LD_INT 0
16517: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16518: LD_ADDR_VAR 0 3
16522: PUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: CALL_OW 255
16532: PPUSH
16533: CALL 19368 0 1
16537: ST_TO_ADDR
// if ( aiData ) then
16538: LD_VAR 0 3
16542: IFFALSE 16567
// begin RemoveDestroyedBuilding ( aiData ) ;
16544: LD_VAR 0 3
16548: PPUSH
16549: CALL 19184 0 1
// AddNewUnit ( aiData , building ) ;
16553: LD_VAR 0 3
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL 18894 0 2
// end ; end ;
16567: PPOPN 3
16569: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16570: LD_VAR 0 2
16574: PUSH
16575: LD_EXP 51
16579: EQUAL
16580: IFFALSE 16594
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 19
16589: PPUSH
16590: CALL_OW 113
// end ; end_of_file
16594: PPOPN 2
16596: END
// export function FinishMission ; begin
16597: LD_INT 0
16599: PPUSH
// SetRewards ;
16600: CALL 16621 0 0
// SavePlayerCharacters ;
16604: CALL 16800 0 0
// SaveGlobalVariables ;
16608: CALL 17242 0 0
// YouWin ;
16612: CALL_OW 103
// end ;
16616: LD_VAR 0 1
16620: RET
// function SetRewards ; begin
16621: LD_INT 0
16623: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16624: LD_EXP 55
16628: PPUSH
16629: CALL_OW 302
16633: PUSH
16634: LD_EXP 55
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 3
16646: EQUAL
16647: AND
16648: IFFALSE 16662
// AddMedal ( Xavier , 1 ) else
16650: LD_STRING Xavier
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 101
16660: GO 16673
// AddMedal ( Xavier , - 1 ) ;
16662: LD_STRING Xavier
16664: PPUSH
16665: LD_INT 1
16667: NEG
16668: PPUSH
16669: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16673: LD_EXP 19
16677: PUSH
16678: LD_EXP 28
16682: LESSEQUAL
16683: IFFALSE 16697
// AddMedal ( TimeVS , 1 ) else
16685: LD_STRING TimeVS
16687: PPUSH
16688: LD_INT 1
16690: PPUSH
16691: CALL_OW 101
16695: GO 16708
// AddMedal ( TimeVS , - 1 ) ;
16697: LD_STRING TimeVS
16699: PPUSH
16700: LD_INT 1
16702: NEG
16703: PPUSH
16704: CALL_OW 101
// if heikeCaptured then
16708: LD_EXP 17
16712: IFFALSE 16726
// AddMedal ( Heike , 1 ) else
16714: LD_STRING Heike
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 101
16724: GO 16737
// AddMedal ( Heike , - 1 ) ;
16726: LD_STRING Heike
16728: PPUSH
16729: LD_INT 1
16731: NEG
16732: PPUSH
16733: CALL_OW 101
// GiveMedals ( Main1 ) ;
16737: LD_STRING Main1
16739: PPUSH
16740: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16744: LD_INT 22
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 21
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 23
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 50
16776: PUSH
16777: EMPTY
16778: LIST
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 69
16790: PPUSH
16791: CALL_OW 43
// end ;
16795: LD_VAR 0 1
16799: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16804: LD_EXP 37
16808: PPUSH
16809: LD_STRING Burlak
16811: PPUSH
16812: LD_INT 3
16814: PPUSH
16815: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16819: LD_EXP 38
16823: PPUSH
16824: LD_STRING Karamazov
16826: PPUSH
16827: LD_INT 3
16829: PPUSH
16830: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16834: LD_EXP 39
16838: PPUSH
16839: LD_STRING Petrovova
16841: PPUSH
16842: LD_INT 3
16844: PPUSH
16845: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16849: LD_EXP 40
16853: PPUSH
16854: LD_STRING Gleb
16856: PPUSH
16857: LD_INT 3
16859: PPUSH
16860: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16864: LD_EXP 41
16868: PPUSH
16869: LD_STRING Petrosyan
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16879: LD_EXP 43
16883: PPUSH
16884: LD_STRING Dolgov
16886: PPUSH
16887: LD_INT 3
16889: PPUSH
16890: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16894: LD_EXP 44
16898: PPUSH
16899: LD_STRING Lipshchin
16901: PPUSH
16902: LD_INT 3
16904: PPUSH
16905: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16909: LD_EXP 42
16913: PPUSH
16914: LD_STRING Titov
16916: PPUSH
16917: LD_INT 3
16919: PPUSH
16920: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16924: LD_EXP 45
16928: PPUSH
16929: LD_STRING Kirilenkova
16931: PPUSH
16932: LD_INT 3
16934: PPUSH
16935: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16939: LD_EXP 46
16943: PPUSH
16944: LD_STRING Belkov
16946: PPUSH
16947: LD_INT 3
16949: PPUSH
16950: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16954: LD_EXP 47
16958: PPUSH
16959: LD_STRING Belkov2
16961: PPUSH
16962: LD_INT 3
16964: PPUSH
16965: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16969: LD_EXP 55
16973: PPUSH
16974: LD_STRING Xavier
16976: PPUSH
16977: LD_INT 3
16979: PPUSH
16980: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16984: LD_EXP 48
16988: PPUSH
16989: LD_STRING Vsevolod
16991: PPUSH
16992: LD_INT 3
16994: PPUSH
16995: CALL 12290 0 3
// if heikeCaptured then
16999: LD_EXP 17
17003: IFFALSE 17017
// SaveCharacters ( Heike , 07_Heike ) ;
17005: LD_EXP 56
17009: PPUSH
17010: LD_STRING 07_Heike
17012: PPUSH
17013: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17017: LD_INT 22
17019: PUSH
17020: LD_INT 3
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 2
17039: PUSH
17040: LD_INT 25
17042: PUSH
17043: LD_INT 12
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 25
17052: PUSH
17053: LD_INT 16
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 15
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: PPUSH
17086: LD_STRING other_apemans
17088: PPUSH
17089: LD_INT 3
17091: PPUSH
17092: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_INT 22
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 23
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: PUSH
17141: LD_EXP 37
17145: PUSH
17146: LD_EXP 38
17150: PUSH
17151: LD_EXP 39
17155: PUSH
17156: LD_EXP 40
17160: PUSH
17161: LD_EXP 41
17165: PUSH
17166: LD_EXP 42
17170: PUSH
17171: LD_EXP 43
17175: PUSH
17176: LD_EXP 44
17180: PUSH
17181: LD_EXP 45
17185: PUSH
17186: LD_EXP 46
17190: PUSH
17191: LD_EXP 47
17195: PUSH
17196: LD_EXP 55
17200: PUSH
17201: LD_EXP 48
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: DIFF
17221: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_STRING other_survivors
17229: PPUSH
17230: LD_INT 3
17232: PPUSH
17233: CALL 12347 0 3
// end ;
17237: LD_VAR 0 1
17241: RET
// function SaveGlobalVariables ; begin
17242: LD_INT 0
17244: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17245: LD_EXP 17
17249: PPUSH
17250: LD_STRING 07_HeikeCaptured_1
17252: PPUSH
17253: CALL_OW 39
// end ; end_of_file
17257: LD_VAR 0 1
17261: RET
// export function Lose_Burlak ; begin
17262: LD_INT 0
17264: PPUSH
// YouLost ( Burlak ) ;
17265: LD_STRING Burlak
17267: PPUSH
17268: CALL_OW 104
// end ;
17272: LD_VAR 0 1
17276: RET
// export function Lose_Vsevolod ; begin
17277: LD_INT 0
17279: PPUSH
// YouLost ( Sevi ) ;
17280: LD_STRING Sevi
17282: PPUSH
17283: CALL_OW 104
// end ;
17287: LD_VAR 0 1
17291: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17292: LD_EXP 56
17296: PPUSH
17297: LD_INT 9
17299: PPUSH
17300: CALL_OW 308
17304: PUSH
17305: LD_EXP 57
17309: PPUSH
17310: LD_INT 9
17312: PPUSH
17313: CALL_OW 308
17317: OR
17318: IFFALSE 17330
17320: GO 17322
17322: DISABLE
// YouLost ( Heike ) ; end_of_file
17323: LD_STRING Heike
17325: PPUSH
17326: CALL_OW 104
17330: END
// export aiStructDatas ; export function InitAIManager ; begin
17331: LD_INT 0
17333: PPUSH
// aiStructDatas = [ ] ;
17334: LD_ADDR_EXP 62
17338: PUSH
17339: EMPTY
17340: ST_TO_ADDR
// end ;
17341: LD_VAR 0 1
17345: RET
// every 1 do
17346: GO 17348
17348: DISABLE
// begin InitAIManager ;
17349: CALL 17331 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17353: LD_INT 1
17355: PPUSH
17356: LD_INT 0
17358: PPUSH
17359: LD_INT 2
17361: PPUSH
17362: LD_INT 2
17364: PPUSH
17365: LD_EXP 59
17369: PPUSH
17370: LD_INT 10
17372: PPUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PPUSH
17397: CALL_OW 70
17401: PPUSH
17402: EMPTY
17403: PPUSH
17404: LD_INT 10
17406: PPUSH
17407: LD_INT 12
17409: PPUSH
17410: LD_INT 13
17412: PPUSH
17413: LD_INT 11
17415: PPUSH
17416: LD_INT 13
17418: PPUSH
17419: LD_INT 13
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 25
17430: PUSH
17431: LD_INT 27
17433: PUSH
17434: LD_INT 23
17436: PUSH
17437: LD_INT 26
17439: PUSH
17440: LD_INT 28
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 13
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 25
17467: PUSH
17468: LD_INT 27
17470: PUSH
17471: LD_INT 23
17473: PUSH
17474: LD_INT 26
17476: PUSH
17477: LD_INT 28
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: LD_INT 13
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 25
17508: PUSH
17509: LD_INT 27
17511: PUSH
17512: LD_INT 23
17514: PUSH
17515: LD_INT 26
17517: PUSH
17518: LD_INT 28
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 13
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 25
17545: PUSH
17546: LD_INT 27
17548: PUSH
17549: LD_INT 23
17551: PUSH
17552: LD_INT 26
17554: PUSH
17555: LD_INT 28
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 13
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 25
17582: PUSH
17583: LD_INT 27
17585: PUSH
17586: LD_INT 23
17588: PUSH
17589: LD_INT 26
17591: PUSH
17592: LD_INT 28
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: PPUSH
17613: LD_INT 1
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: PPUSH
17627: LD_INT 5250
17629: PPUSH
17630: LD_INT 1
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL 18520 0 20
// end ;
17657: END
// every 0 0$1 do
17658: GO 17660
17660: DISABLE
// begin StateManager ( 1 ) ;
17661: LD_INT 1
17663: PPUSH
17664: CALL 19668 0 1
// MechanicsManager ( 1 ) ;
17668: LD_INT 1
17670: PPUSH
17671: CALL 20781 0 1
// VehiclesManager ( 1 ) ;
17675: LD_INT 1
17677: PPUSH
17678: CALL 21045 0 1
// SoldiersManager ( 1 ) ;
17682: LD_INT 1
17684: PPUSH
17685: CALL 20154 0 1
// DefenceManager ( 1 ) ;
17689: LD_INT 1
17691: PPUSH
17692: CALL 21555 0 1
// CollectCrates ( 1 ) ;
17696: LD_INT 1
17698: PPUSH
17699: CALL 22487 0 1
// FleeToHealArea ( 1 ) ;
17703: LD_INT 1
17705: PPUSH
17706: CALL 22677 0 1
// FleeToRepairArea ( 1 ) ;
17710: LD_INT 1
17712: PPUSH
17713: CALL 22808 0 1
// RepairBuildings ( 1 ) ;
17717: LD_INT 1
17719: PPUSH
17720: CALL 22964 0 1
// HealDamageUnits ( 1 ) ;
17724: LD_INT 1
17726: PPUSH
17727: CALL 23707 0 1
// enable ;
17731: ENABLE
// end ;
17732: END
// every 0 0$1 do
17733: GO 17735
17735: DISABLE
// begin ProduceVehicles ( 1 ) ;
17736: LD_INT 1
17738: PPUSH
17739: CALL 24205 0 1
// enable ;
17743: ENABLE
// end ;
17744: END
// every 0 0$1 do
17745: GO 17747
17747: DISABLE
// begin AttackManager ( 1 ) ;
17748: LD_INT 1
17750: PPUSH
17751: CALL 22053 0 1
// enable ;
17755: ENABLE
// end ;
17756: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17757: LD_INT 14
17759: PPUSH
17760: LD_INT 22
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PPUSH
17770: CALL_OW 70
17774: PUSH
17775: LD_INT 15
17777: PPUSH
17778: LD_INT 22
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 70
17792: OR
17793: PUSH
17794: LD_INT 16
17796: PPUSH
17797: LD_INT 22
17799: PUSH
17800: LD_INT 3
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 70
17811: OR
17812: PUSH
17813: LD_INT 17
17815: PPUSH
17816: LD_INT 22
17818: PUSH
17819: LD_INT 3
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PPUSH
17826: CALL_OW 70
17830: OR
17831: PUSH
17832: LD_INT 18
17834: PPUSH
17835: LD_INT 22
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 70
17849: OR
17850: PUSH
17851: LD_EXP 61
17855: AND
17856: IFFALSE 18276
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
// begin unitsInArea = [ ] ;
17868: LD_ADDR_VAR 0 2
17872: PUSH
17873: EMPTY
17874: ST_TO_ADDR
// tmp = [ ] ;
17875: LD_ADDR_VAR 0 5
17879: PUSH
17880: EMPTY
17881: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: LD_VAR 0 2
17891: PUSH
17892: LD_INT 14
17894: PPUSH
17895: LD_INT 22
17897: PUSH
17898: LD_INT 3
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 70
17909: ADD
17910: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_VAR 0 2
17920: PUSH
17921: LD_INT 15
17923: PPUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 70
17938: ADD
17939: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_VAR 0 2
17949: PUSH
17950: LD_INT 16
17952: PPUSH
17953: LD_INT 22
17955: PUSH
17956: LD_INT 3
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 70
17967: ADD
17968: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_VAR 0 2
17978: PUSH
17979: LD_INT 17
17981: PPUSH
17982: LD_INT 22
17984: PUSH
17985: LD_INT 3
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 70
17996: ADD
17997: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
17998: LD_ADDR_VAR 0 2
18002: PUSH
18003: LD_VAR 0 2
18007: PUSH
18008: LD_INT 18
18010: PPUSH
18011: LD_INT 22
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 70
18025: ADD
18026: ST_TO_ADDR
// for unit in unitsInArea do
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_VAR 0 2
18036: PUSH
18037: FOR_IN
18038: IFFALSE 18273
// begin if GetType ( unit ) = unit_human then
18040: LD_VAR 0 3
18044: PPUSH
18045: CALL_OW 247
18049: PUSH
18050: LD_INT 1
18052: EQUAL
18053: IFFALSE 18065
// minDistance = 3 else
18055: LD_ADDR_VAR 0 4
18059: PUSH
18060: LD_INT 3
18062: ST_TO_ADDR
18063: GO 18073
// minDistance = 4 ;
18065: LD_ADDR_VAR 0 4
18069: PUSH
18070: LD_INT 4
18072: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18073: LD_ADDR_VAR 0 1
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_EXP 61
18087: PUSH
18088: LD_INT 2
18090: DIV
18091: PUSH
18092: FOR_TO
18093: IFFALSE 18252
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18095: LD_EXP 61
18099: PUSH
18100: LD_VAR 0 1
18104: PUSH
18105: LD_INT 2
18107: MUL
18108: PUSH
18109: LD_INT 1
18111: MINUS
18112: ARRAY
18113: PPUSH
18114: LD_EXP 61
18118: PUSH
18119: LD_VAR 0 1
18123: PUSH
18124: LD_INT 2
18126: MUL
18127: ARRAY
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: CALL_OW 250
18138: PPUSH
18139: LD_VAR 0 3
18143: PPUSH
18144: CALL_OW 251
18148: PPUSH
18149: CALL_OW 298
18153: PUSH
18154: LD_VAR 0 4
18158: LESS
18159: IFFALSE 18204
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18161: LD_EXP 61
18165: PUSH
18166: LD_VAR 0 1
18170: PUSH
18171: LD_INT 2
18173: MUL
18174: PUSH
18175: LD_INT 1
18177: MINUS
18178: ARRAY
18179: PPUSH
18180: LD_EXP 61
18184: PUSH
18185: LD_VAR 0 1
18189: PUSH
18190: LD_INT 2
18192: MUL
18193: ARRAY
18194: PPUSH
18195: LD_INT 2
18197: PPUSH
18198: CALL_OW 456
18202: GO 18250
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18204: LD_ADDR_VAR 0 5
18208: PUSH
18209: LD_VAR 0 5
18213: PUSH
18214: LD_EXP 61
18218: PUSH
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 2
18226: MUL
18227: PUSH
18228: LD_INT 1
18230: MINUS
18231: ARRAY
18232: ADD
18233: PUSH
18234: LD_EXP 61
18238: PUSH
18239: LD_VAR 0 1
18243: PUSH
18244: LD_INT 2
18246: MUL
18247: ARRAY
18248: ADD
18249: ST_TO_ADDR
18250: GO 18092
18252: POP
18253: POP
// minesList = tmp ;
18254: LD_ADDR_EXP 61
18258: PUSH
18259: LD_VAR 0 5
18263: ST_TO_ADDR
// tmp := [ ] ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: EMPTY
18270: ST_TO_ADDR
// end ;
18271: GO 18037
18273: POP
18274: POP
// enable ;
18275: ENABLE
// end ;
18276: PPOPN 5
18278: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18279: LD_INT 2
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 3
18289: EQUAL
18290: PUSH
18291: LD_INT 2
18293: PPUSH
18294: CALL_OW 303
18298: OR
18299: IFFALSE 18428
18301: GO 18303
18303: DISABLE
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 50
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: LD_INT 21
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 32
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: PUSH
18360: FOR_IN
18361: IFFALSE 18426
// if UnitsInside ( turret ) then
18363: LD_VAR 0 2
18367: PPUSH
18368: CALL_OW 313
18372: IFFALSE 18424
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_VAR 0 2
18383: PPUSH
18384: CALL_OW 313
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 122
// wait ( 0 0$01 ) ;
18402: LD_INT 35
18404: PPUSH
18405: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_INT 103
18416: PPUSH
18417: LD_INT 48
18419: PPUSH
18420: CALL_OW 114
// end ;
18424: GO 18360
18426: POP
18427: POP
// end ;
18428: PPOPN 2
18430: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18431: GO 18433
18433: DISABLE
18434: LD_INT 0
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_INT 2
18447: PPUSH
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL 43797 0 3
18458: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18459: LD_ADDR_VAR 0 1
18463: PUSH
18464: DOUBLE
18465: LD_INT 1
18467: DEC
18468: ST_TO_ADDR
18469: LD_VAR 0 4
18473: PUSH
18474: FOR_TO
18475: IFFALSE 18515
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18477: LD_INT 13
18479: PPUSH
18480: LD_VAR 0 4
18484: PUSH
18485: LD_VAR 0 1
18489: ARRAY
18490: PPUSH
18491: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18495: LD_INT 14
18497: PPUSH
18498: LD_VAR 0 4
18502: PUSH
18503: LD_VAR 0 1
18507: ARRAY
18508: PPUSH
18509: CALL_OW 184
// end ;
18513: GO 18474
18515: POP
18516: POP
// end ;
18517: PPOPN 4
18519: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18520: LD_INT 0
18522: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18523: LD_ADDR_EXP 62
18527: PUSH
18528: LD_EXP 62
18532: PUSH
18533: LD_VAR 0 1
18537: PUSH
18538: LD_VAR 0 2
18542: PUSH
18543: LD_VAR 0 3
18547: PUSH
18548: LD_VAR 0 4
18552: PUSH
18553: LD_VAR 0 5
18557: PUSH
18558: LD_VAR 0 6
18562: PUSH
18563: LD_VAR 0 7
18567: PUSH
18568: LD_VAR 0 8
18572: PUSH
18573: LD_VAR 0 9
18577: PUSH
18578: LD_VAR 0 10
18582: PUSH
18583: LD_VAR 0 11
18587: PUSH
18588: LD_VAR 0 12
18592: PUSH
18593: LD_VAR 0 13
18597: PUSH
18598: LD_VAR 0 14
18602: PUSH
18603: LD_VAR 0 15
18607: PUSH
18608: LD_VAR 0 16
18612: PUSH
18613: LD_VAR 0 17
18617: PUSH
18618: LD_VAR 0 18
18622: PUSH
18623: LD_VAR 0 19
18627: PUSH
18628: LD_VAR 0 20
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: ADD
18658: ST_TO_ADDR
// end ;
18659: LD_VAR 0 21
18663: RET
// export function ActiveAI ( index ) ; begin
18664: LD_INT 0
18666: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18667: LD_ADDR_EXP 62
18671: PUSH
18672: LD_EXP 62
18676: PPUSH
18677: LD_VAR 0 1
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL 48871 0 3
18696: ST_TO_ADDR
// end ;
18697: LD_VAR 0 2
18701: RET
// export function DeactiveAI ( index ) ; begin
18702: LD_INT 0
18704: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18705: LD_ADDR_EXP 62
18709: PUSH
18710: LD_EXP 62
18714: PPUSH
18715: LD_VAR 0 1
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PPUSH
18727: LD_INT 0
18729: PPUSH
18730: CALL 48871 0 3
18734: ST_TO_ADDR
// end ;
18735: LD_VAR 0 2
18739: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18740: LD_INT 0
18742: PPUSH
18743: PPUSH
// for i := 1 to aiStructDatas do
18744: LD_ADDR_VAR 0 3
18748: PUSH
18749: DOUBLE
18750: LD_INT 1
18752: DEC
18753: ST_TO_ADDR
18754: LD_EXP 62
18758: PUSH
18759: FOR_TO
18760: IFFALSE 18806
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18762: LD_EXP 62
18766: PUSH
18767: LD_VAR 0 3
18771: ARRAY
18772: PUSH
18773: LD_INT 1
18775: ARRAY
18776: PUSH
18777: LD_VAR 0 1
18781: EQUAL
18782: IFFALSE 18804
// begin result = aiStructDatas [ i ] ;
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: LD_EXP 62
18793: PUSH
18794: LD_VAR 0 3
18798: ARRAY
18799: ST_TO_ADDR
// exit ;
18800: POP
18801: POP
18802: GO 18815
// end ;
18804: GO 18759
18806: POP
18807: POP
// result = [ ] ;
18808: LD_ADDR_VAR 0 2
18812: PUSH
18813: EMPTY
18814: ST_TO_ADDR
// end ;
18815: LD_VAR 0 2
18819: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
// for i := 1 to aiStructDatas do
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: DOUBLE
18830: LD_INT 1
18832: DEC
18833: ST_TO_ADDR
18834: LD_EXP 62
18838: PUSH
18839: FOR_TO
18840: IFFALSE 18880
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18842: LD_EXP 62
18846: PUSH
18847: LD_VAR 0 3
18851: ARRAY
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PUSH
18857: LD_VAR 0 1
18861: EQUAL
18862: IFFALSE 18878
// begin result = i ;
18864: LD_ADDR_VAR 0 2
18868: PUSH
18869: LD_VAR 0 3
18873: ST_TO_ADDR
// exit ;
18874: POP
18875: POP
18876: GO 18889
// end ;
18878: GO 18839
18880: POP
18881: POP
// result = [ ] ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: EMPTY
18888: ST_TO_ADDR
// end ;
18889: LD_VAR 0 2
18893: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
18898: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18899: LD_ADDR_VAR 0 4
18903: PUSH
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 1
18911: ARRAY
18912: PPUSH
18913: CALL 18820 0 1
18917: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18918: LD_ADDR_VAR 0 5
18922: PUSH
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 5
18930: ARRAY
18931: ST_TO_ADDR
// newArray = newArray ^ unit ;
18932: LD_ADDR_VAR 0 5
18936: PUSH
18937: LD_VAR 0 5
18941: PUSH
18942: LD_VAR 0 2
18946: ADD
18947: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18948: LD_ADDR_EXP 62
18952: PUSH
18953: LD_EXP 62
18957: PPUSH
18958: LD_VAR 0 4
18962: PUSH
18963: LD_INT 5
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: LD_VAR 0 5
18974: PPUSH
18975: CALL 48871 0 3
18979: ST_TO_ADDR
// end ;
18980: LD_VAR 0 3
18984: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18985: LD_INT 0
18987: PPUSH
18988: PPUSH
18989: PPUSH
// SetTag ( veh , state ) ;
18990: LD_VAR 0 2
18994: PPUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19004: LD_ADDR_VAR 0 5
19008: PUSH
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 1
19016: ARRAY
19017: PPUSH
19018: CALL 18820 0 1
19022: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19023: LD_ADDR_VAR 0 6
19027: PUSH
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 5
19035: ARRAY
19036: ST_TO_ADDR
// newArray = newArray ^ veh ;
19037: LD_ADDR_VAR 0 6
19041: PUSH
19042: LD_VAR 0 6
19046: PUSH
19047: LD_VAR 0 2
19051: ADD
19052: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19053: LD_ADDR_EXP 62
19057: PUSH
19058: LD_EXP 62
19062: PPUSH
19063: LD_VAR 0 5
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: LD_VAR 0 6
19079: PPUSH
19080: CALL 48871 0 3
19084: ST_TO_ADDR
// end ;
19085: LD_VAR 0 4
19089: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19090: LD_INT 0
19092: PPUSH
19093: PPUSH
19094: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19095: LD_ADDR_VAR 0 4
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: PPUSH
19109: CALL 18820 0 1
19113: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19114: LD_ADDR_VAR 0 5
19118: PUSH
19119: LD_VAR 0 1
19123: PUSH
19124: LD_INT 7
19126: ARRAY
19127: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19128: LD_ADDR_VAR 0 5
19132: PUSH
19133: LD_VAR 0 5
19137: PUSH
19138: LD_VAR 0 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: ADD
19146: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19147: LD_ADDR_EXP 62
19151: PUSH
19152: LD_EXP 62
19156: PPUSH
19157: LD_VAR 0 4
19161: PUSH
19162: LD_INT 7
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 48871 0 3
19178: ST_TO_ADDR
// end ;
19179: LD_VAR 0 3
19183: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19184: LD_INT 0
19186: PPUSH
19187: PPUSH
19188: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_VAR 0 1
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: PPUSH
19203: CALL 18820 0 1
19207: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19208: LD_ADDR_VAR 0 4
19212: PUSH
19213: LD_VAR 0 1
19217: PUSH
19218: LD_INT 7
19220: ARRAY
19221: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19222: LD_ADDR_VAR 0 4
19226: PUSH
19227: LD_VAR 0 4
19231: PPUSH
19232: LD_INT 1
19234: PPUSH
19235: CALL_OW 3
19239: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19240: LD_ADDR_EXP 62
19244: PUSH
19245: LD_EXP 62
19249: PPUSH
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 7
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: LD_VAR 0 4
19266: PPUSH
19267: CALL 48871 0 3
19271: ST_TO_ADDR
// end ;
19272: LD_VAR 0 2
19276: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
19281: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19282: LD_ADDR_VAR 0 4
19286: PUSH
19287: LD_VAR 0 1
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: CALL 18820 0 1
19300: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_VAR 0 1
19310: PUSH
19311: LD_INT 5
19313: ARRAY
19314: ST_TO_ADDR
// newArray = newArray diff unit ;
19315: LD_ADDR_VAR 0 5
19319: PUSH
19320: LD_VAR 0 5
19324: PUSH
19325: LD_VAR 0 2
19329: DIFF
19330: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19331: LD_ADDR_EXP 62
19335: PUSH
19336: LD_EXP 62
19340: PPUSH
19341: LD_VAR 0 4
19345: PUSH
19346: LD_INT 5
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: LD_VAR 0 5
19357: PPUSH
19358: CALL 48871 0 3
19362: ST_TO_ADDR
// end ;
19363: LD_VAR 0 3
19367: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19368: LD_INT 0
19370: PPUSH
19371: PPUSH
// for i := 1 to aiStructDatas do
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_EXP 62
19386: PUSH
19387: FOR_TO
19388: IFFALSE 19434
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19390: LD_EXP 62
19394: PUSH
19395: LD_VAR 0 3
19399: ARRAY
19400: PUSH
19401: LD_INT 3
19403: ARRAY
19404: PUSH
19405: LD_VAR 0 1
19409: EQUAL
19410: IFFALSE 19432
// begin result = aiStructDatas [ i ] ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_EXP 62
19421: PUSH
19422: LD_VAR 0 3
19426: ARRAY
19427: ST_TO_ADDR
// exit ;
19428: POP
19429: POP
19430: GO 19443
// end ;
19432: GO 19387
19434: POP
19435: POP
// result = [ ] ;
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: EMPTY
19442: ST_TO_ADDR
// end ;
19443: LD_VAR 0 2
19447: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
// if not aiData then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19469
// begin result = [ ] ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: EMPTY
19466: ST_TO_ADDR
// exit ;
19467: GO 19553
// end ; defVehs = [ ] ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: EMPTY
19475: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19476: LD_ADDR_VAR 0 4
19480: PUSH
19481: LD_VAR 0 1
19485: PUSH
19486: LD_INT 5
19488: ARRAY
19489: PPUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 72
19504: PUSH
19505: FOR_IN
19506: IFFALSE 19541
// if GetTag ( veh ) = 2 then
19508: LD_VAR 0 4
19512: PPUSH
19513: CALL_OW 110
19517: PUSH
19518: LD_INT 2
19520: EQUAL
19521: IFFALSE 19539
// defVehs = defVehs ^ veh ;
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_VAR 0 3
19532: PUSH
19533: LD_VAR 0 4
19537: ADD
19538: ST_TO_ADDR
19539: GO 19505
19541: POP
19542: POP
// result = defVehs ;
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: LD_VAR 0 3
19552: ST_TO_ADDR
// end ;
19553: LD_VAR 0 2
19557: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
19562: PPUSH
// if not aiData then
19563: LD_VAR 0 1
19567: NOT
19568: IFFALSE 19579
// begin result = [ ] ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: EMPTY
19576: ST_TO_ADDR
// exit ;
19577: GO 19663
// end ; attackVehs = [ ] ;
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: EMPTY
19585: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19586: LD_ADDR_VAR 0 4
19590: PUSH
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 5
19598: ARRAY
19599: PPUSH
19600: LD_INT 21
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL_OW 72
19614: PUSH
19615: FOR_IN
19616: IFFALSE 19651
// if GetTag ( veh ) = 4 then
19618: LD_VAR 0 4
19622: PPUSH
19623: CALL_OW 110
19627: PUSH
19628: LD_INT 4
19630: EQUAL
19631: IFFALSE 19649
// attackVehs = attackVehs ^ veh ;
19633: LD_ADDR_VAR 0 3
19637: PUSH
19638: LD_VAR 0 3
19642: PUSH
19643: LD_VAR 0 4
19647: ADD
19648: ST_TO_ADDR
19649: GO 19615
19651: POP
19652: POP
// result = attackVehs ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_VAR 0 3
19662: ST_TO_ADDR
// end ;
19663: LD_VAR 0 2
19667: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
19672: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19673: LD_ADDR_VAR 0 3
19677: PUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL 18740 0 1
19687: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19688: LD_VAR 0 3
19692: PUSH
19693: LD_INT 2
19695: ARRAY
19696: PUSH
19697: LD_INT 0
19699: EQUAL
19700: IFFALSE 19704
// exit ;
19702: GO 20149
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19704: LD_ADDR_VAR 0 4
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_INT 5
19716: ARRAY
19717: PPUSH
19718: LD_INT 21
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 72
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19839
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19736: LD_VAR 0 4
19740: PPUSH
19741: CALL_OW 256
19745: PUSH
19746: LD_INT 1000
19748: EQUAL
19749: PUSH
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 110
19759: PUSH
19760: LD_INT 0
19762: EQUAL
19763: AND
19764: IFFALSE 19780
// SetTag ( unit , 1 ) else
19766: LD_VAR 0 4
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: CALL_OW 109
19778: GO 19837
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19780: LD_VAR 0 4
19784: PPUSH
19785: CALL_OW 256
19789: PUSH
19790: LD_INT 950
19792: LESSEQUAL
19793: PUSH
19794: LD_VAR 0 4
19798: PPUSH
19799: CALL_OW 256
19803: PUSH
19804: LD_INT 250
19806: GREATER
19807: AND
19808: PUSH
19809: LD_VAR 0 4
19813: PPUSH
19814: CALL_OW 110
19818: PUSH
19819: LD_INT 1
19821: EQUAL
19822: AND
19823: IFFALSE 19837
// SetTag ( unit , 0 ) ;
19825: LD_VAR 0 4
19829: PPUSH
19830: LD_INT 0
19832: PPUSH
19833: CALL_OW 109
// end ;
19837: GO 19733
19839: POP
19840: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19841: LD_ADDR_VAR 0 4
19845: PUSH
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 5
19853: ARRAY
19854: PPUSH
19855: LD_INT 21
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 72
19869: PUSH
19870: FOR_IN
19871: IFFALSE 20147
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19873: LD_VAR 0 4
19877: PPUSH
19878: CALL_OW 256
19882: PUSH
19883: LD_INT 1000
19885: EQUAL
19886: PUSH
19887: LD_VAR 0 4
19891: PPUSH
19892: CALL_OW 110
19896: PUSH
19897: LD_INT 3
19899: EQUAL
19900: AND
19901: IFFALSE 19915
// SetTag ( unit , 2 ) ;
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_INT 2
19910: PPUSH
19911: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19915: LD_VAR 0 4
19919: PPUSH
19920: CALL_OW 256
19924: PUSH
19925: LD_INT 1000
19927: EQUAL
19928: PUSH
19929: LD_VAR 0 4
19933: PPUSH
19934: CALL_OW 110
19938: PUSH
19939: LD_INT 5
19941: EQUAL
19942: AND
19943: IFFALSE 19957
// SetTag ( unit , 4 ) ;
19945: LD_VAR 0 4
19949: PPUSH
19950: LD_INT 4
19952: PPUSH
19953: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19957: LD_VAR 0 4
19961: PPUSH
19962: CALL_OW 256
19966: PUSH
19967: LD_INT 650
19969: LESSEQUAL
19970: PUSH
19971: LD_VAR 0 4
19975: PPUSH
19976: CALL_OW 110
19980: PUSH
19981: LD_INT 4
19983: EQUAL
19984: AND
19985: PUSH
19986: LD_VAR 0 4
19990: PPUSH
19991: CALL_OW 263
19995: PUSH
19996: LD_INT 1
19998: EQUAL
19999: AND
20000: IFFALSE 20014
// SetTag ( unit , 5 ) ;
20002: LD_VAR 0 4
20006: PPUSH
20007: LD_INT 5
20009: PPUSH
20010: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20014: LD_VAR 0 4
20018: PPUSH
20019: CALL_OW 256
20023: PUSH
20024: LD_INT 650
20026: LESSEQUAL
20027: PUSH
20028: LD_VAR 0 4
20032: PPUSH
20033: CALL_OW 110
20037: PUSH
20038: LD_INT 2
20040: EQUAL
20041: AND
20042: PUSH
20043: LD_VAR 0 4
20047: PPUSH
20048: CALL_OW 263
20052: PUSH
20053: LD_INT 1
20055: EQUAL
20056: AND
20057: IFFALSE 20071
// SetTag ( unit , 3 ) ;
20059: LD_VAR 0 4
20063: PPUSH
20064: LD_INT 3
20066: PPUSH
20067: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20071: LD_VAR 0 4
20075: PPUSH
20076: CALL_OW 263
20080: PUSH
20081: LD_INT 1
20083: EQUAL
20084: IFFALSE 20118
// if ( UnitsInside ( unit ) ) then
20086: LD_VAR 0 4
20090: PPUSH
20091: CALL_OW 313
20095: IFFALSE 20118
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20097: LD_VAR 0 4
20101: PPUSH
20102: CALL_OW 313
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PPUSH
20111: LD_INT 7
20113: PPUSH
20114: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20118: LD_VAR 0 4
20122: PPUSH
20123: CALL_OW 261
20127: PUSH
20128: LD_INT 50
20130: LESS
20131: IFFALSE 20145
// SetFuel ( unit , 100 ) ;
20133: LD_VAR 0 4
20137: PPUSH
20138: LD_INT 100
20140: PPUSH
20141: CALL_OW 240
// end ;
20145: GO 19870
20147: POP
20148: POP
// end ;
20149: LD_VAR 0 2
20153: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20154: LD_INT 0
20156: PPUSH
20157: PPUSH
20158: PPUSH
20159: PPUSH
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL 18740 0 1
20180: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 2
20188: ARRAY
20189: PUSH
20190: LD_INT 0
20192: EQUAL
20193: IFFALSE 20197
// exit ;
20195: GO 20776
// soldiersInsideBarracks = [ ] ;
20197: LD_ADDR_VAR 0 10
20201: PUSH
20202: EMPTY
20203: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 5
20216: ARRAY
20217: PPUSH
20218: LD_INT 25
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 50
20230: PUSH
20231: EMPTY
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PPUSH
20238: CALL_OW 72
20242: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20243: LD_ADDR_VAR 0 6
20247: PUSH
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 6
20255: ARRAY
20256: PPUSH
20257: LD_INT 21
20259: PUSH
20260: LD_INT 3
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 50
20269: PUSH
20270: EMPTY
20271: LIST
20272: PUSH
20273: LD_INT 3
20275: PUSH
20276: LD_INT 59
20278: PUSH
20279: EMPTY
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 31
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 30
20301: PUSH
20302: LD_INT 32
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 72
20324: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20325: LD_ADDR_VAR 0 7
20329: PUSH
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 6
20337: ARRAY
20338: PPUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 3
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 50
20351: PUSH
20352: EMPTY
20353: LIST
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 4
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 30
20370: PUSH
20371: LD_INT 5
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 72
20392: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20393: LD_ADDR_VAR 0 9
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 6
20405: ARRAY
20406: PPUSH
20407: LD_INT 21
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 50
20419: PUSH
20420: EMPTY
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 30
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 72
20460: PUSH
20461: LD_INT 1
20463: ARRAY
20464: ST_TO_ADDR
// for barrack in barracks do
20465: LD_ADDR_VAR 0 11
20469: PUSH
20470: LD_VAR 0 7
20474: PUSH
20475: FOR_IN
20476: IFFALSE 20501
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20478: LD_ADDR_VAR 0 10
20482: PUSH
20483: LD_VAR 0 10
20487: PUSH
20488: LD_VAR 0 11
20492: PPUSH
20493: CALL_OW 313
20497: ADD
20498: ST_TO_ADDR
20499: GO 20475
20501: POP
20502: POP
// index = 1 ;
20503: LD_ADDR_VAR 0 8
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20511: LD_VAR 0 4
20515: PPUSH
20516: LD_INT 56
20518: PUSH
20519: EMPTY
20520: LIST
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: LD_INT 60
20527: PUSH
20528: EMPTY
20529: LIST
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 72
20543: PUSH
20544: LD_VAR 0 6
20548: AND
20549: PUSH
20550: LD_VAR 0 9
20554: AND
20555: IFFALSE 20655
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20557: LD_ADDR_VAR 0 5
20561: PUSH
20562: LD_VAR 0 4
20566: PPUSH
20567: LD_INT 56
20569: PUSH
20570: EMPTY
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: PPUSH
20576: CALL_OW 72
20580: PUSH
20581: LD_VAR 0 10
20585: ADD
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20653
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20590: LD_VAR 0 5
20594: PPUSH
20595: CALL_OW 110
20599: PUSH
20600: LD_INT 1
20602: EQUAL
20603: PUSH
20604: LD_VAR 0 8
20608: PUSH
20609: LD_VAR 0 6
20613: LESSEQUAL
20614: AND
20615: IFFALSE 20651
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20617: LD_VAR 0 5
20621: PPUSH
20622: LD_VAR 0 6
20626: PUSH
20627: LD_VAR 0 8
20631: ARRAY
20632: PPUSH
20633: CALL_OW 120
// index = index + 1 ;
20637: LD_ADDR_VAR 0 8
20641: PUSH
20642: LD_VAR 0 8
20646: PUSH
20647: LD_INT 1
20649: PLUS
20650: ST_TO_ADDR
// end ;
20651: GO 20587
20653: POP
20654: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20655: LD_VAR 0 4
20659: PPUSH
20660: LD_INT 56
20662: PUSH
20663: EMPTY
20664: LIST
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: LD_INT 60
20671: PUSH
20672: EMPTY
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 72
20687: PUSH
20688: LD_VAR 0 6
20692: NOT
20693: AND
20694: PUSH
20695: LD_VAR 0 7
20699: AND
20700: IFFALSE 20776
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20702: LD_ADDR_VAR 0 5
20706: PUSH
20707: LD_VAR 0 4
20711: PPUSH
20712: LD_INT 56
20714: PUSH
20715: EMPTY
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: PPUSH
20721: CALL_OW 72
20725: PUSH
20726: FOR_IN
20727: IFFALSE 20774
// if ( GetTag ( sold ) = 1 ) then
20729: LD_VAR 0 5
20733: PPUSH
20734: CALL_OW 110
20738: PUSH
20739: LD_INT 1
20741: EQUAL
20742: IFFALSE 20772
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20744: LD_VAR 0 5
20748: PPUSH
20749: LD_VAR 0 7
20753: PUSH
20754: LD_INT 1
20756: PPUSH
20757: LD_VAR 0 7
20761: PPUSH
20762: CALL_OW 12
20766: ARRAY
20767: PPUSH
20768: CALL_OW 120
20772: GO 20726
20774: POP
20775: POP
// end ;
20776: LD_VAR 0 2
20780: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL 18740 0 1
20802: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 2
20810: ARRAY
20811: PUSH
20812: LD_INT 0
20814: EQUAL
20815: IFFALSE 20819
// exit ;
20817: GO 21040
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 5
20831: ARRAY
20832: PPUSH
20833: LD_INT 25
20835: PUSH
20836: LD_INT 3
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 50
20845: PUSH
20846: EMPTY
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PPUSH
20853: CALL_OW 72
20857: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20858: LD_ADDR_VAR 0 6
20862: PUSH
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 6
20870: ARRAY
20871: PPUSH
20872: LD_INT 21
20874: PUSH
20875: LD_INT 3
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 50
20884: PUSH
20885: EMPTY
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 30
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 3
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: PPUSH
20921: CALL_OW 72
20925: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20926: LD_VAR 0 4
20930: PPUSH
20931: LD_INT 56
20933: PUSH
20934: EMPTY
20935: LIST
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: LD_INT 60
20942: PUSH
20943: EMPTY
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PPUSH
20954: CALL_OW 72
20958: PUSH
20959: LD_VAR 0 6
20963: AND
20964: IFFALSE 21040
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20966: LD_ADDR_VAR 0 5
20970: PUSH
20971: LD_VAR 0 4
20975: PPUSH
20976: LD_INT 56
20978: PUSH
20979: EMPTY
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: PPUSH
20985: CALL_OW 72
20989: PUSH
20990: FOR_IN
20991: IFFALSE 21038
// if ( GetTag ( mech ) = 1 ) then
20993: LD_VAR 0 5
20997: PPUSH
20998: CALL_OW 110
21002: PUSH
21003: LD_INT 1
21005: EQUAL
21006: IFFALSE 21036
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21008: LD_VAR 0 5
21012: PPUSH
21013: LD_VAR 0 6
21017: PUSH
21018: LD_INT 1
21020: PPUSH
21021: LD_VAR 0 6
21025: PPUSH
21026: CALL_OW 12
21030: ARRAY
21031: PPUSH
21032: CALL_OW 120
21036: GO 20990
21038: POP
21039: POP
// end ;
21040: LD_VAR 0 2
21044: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21045: LD_INT 0
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL 18740 0 1
21070: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 2
21078: ARRAY
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: IFFALSE 21087
// exit ;
21085: GO 21550
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21087: LD_ADDR_VAR 0 5
21091: PUSH
21092: LD_VAR 0 3
21096: PUSH
21097: LD_INT 5
21099: ARRAY
21100: PPUSH
21101: LD_INT 21
21103: PUSH
21104: LD_INT 3
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 50
21113: PUSH
21114: EMPTY
21115: LIST
21116: PUSH
21117: LD_INT 59
21119: PUSH
21120: EMPTY
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 30
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 30
21138: PUSH
21139: LD_INT 3
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PPUSH
21157: CALL_OW 72
21161: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21162: LD_ADDR_VAR 0 8
21166: PUSH
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 5
21174: ARRAY
21175: PPUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 33
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 92
21198: PUSH
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 10
21206: ARRAY
21207: PPUSH
21208: LD_INT 0
21210: PPUSH
21211: CALL_OW 517
21215: PUSH
21216: LD_INT 1
21218: ARRAY
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_VAR 0 3
21228: PUSH
21229: LD_INT 10
21231: ARRAY
21232: PPUSH
21233: LD_INT 0
21235: PPUSH
21236: CALL_OW 517
21240: PUSH
21241: LD_INT 2
21243: ARRAY
21244: PUSH
21245: LD_INT 1
21247: ARRAY
21248: PUSH
21249: LD_INT 16
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 24
21263: PUSH
21264: LD_INT 1000
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: PPUSH
21281: CALL_OW 72
21285: ST_TO_ADDR
// if not damageVehicles then
21286: LD_VAR 0 8
21290: NOT
21291: IFFALSE 21295
// exit ;
21293: GO 21550
// if fabs then
21295: LD_VAR 0 5
21299: IFFALSE 21424
// begin for damageVeh in damageVehicles do
21301: LD_ADDR_VAR 0 9
21305: PUSH
21306: LD_VAR 0 8
21310: PUSH
21311: FOR_IN
21312: IFFALSE 21422
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21314: LD_VAR 0 9
21318: PPUSH
21319: CALL_OW 110
21323: PUSH
21324: LD_INT 3
21326: EQUAL
21327: PUSH
21328: LD_VAR 0 9
21332: PPUSH
21333: CALL_OW 110
21337: PUSH
21338: LD_INT 5
21340: EQUAL
21341: OR
21342: IFFALSE 21420
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21344: LD_ADDR_VAR 0 7
21348: PUSH
21349: LD_VAR 0 5
21353: PPUSH
21354: LD_VAR 0 9
21358: PPUSH
21359: CALL_OW 74
21363: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21364: LD_ADDR_VAR 0 4
21368: PUSH
21369: LD_VAR 0 7
21373: PPUSH
21374: CALL_OW 313
21378: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21379: LD_VAR 0 4
21383: PPUSH
21384: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21388: LD_VAR 0 4
21392: PPUSH
21393: LD_INT 3
21395: PUSH
21396: LD_INT 60
21398: PUSH
21399: EMPTY
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 72
21410: PPUSH
21411: LD_VAR 0 9
21415: PPUSH
21416: CALL_OW 189
// end ;
21420: GO 21311
21422: POP
21423: POP
// end ; for damageVeh in damageVehicles do
21424: LD_ADDR_VAR 0 9
21428: PUSH
21429: LD_VAR 0 8
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21548
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21437: LD_VAR 0 9
21441: PPUSH
21442: CALL_OW 110
21446: PUSH
21447: LD_INT 3
21449: EQUAL
21450: PUSH
21451: LD_VAR 0 9
21455: PPUSH
21456: CALL_OW 110
21460: PUSH
21461: LD_INT 5
21463: EQUAL
21464: OR
21465: IFFALSE 21546
// begin mehInside = UnitsInside ( damageVeh ) ;
21467: LD_ADDR_VAR 0 10
21471: PUSH
21472: LD_VAR 0 9
21476: PPUSH
21477: CALL_OW 313
21481: ST_TO_ADDR
// if mehInside then
21482: LD_VAR 0 10
21486: IFFALSE 21546
// begin mehInside = mehInside [ 1 ] ;
21488: LD_ADDR_VAR 0 10
21492: PUSH
21493: LD_VAR 0 10
21497: PUSH
21498: LD_INT 1
21500: ARRAY
21501: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21502: LD_VAR 0 10
21506: PPUSH
21507: CALL_OW 181
// wait ( 0 0$01 ) ;
21511: LD_INT 35
21513: PPUSH
21514: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21518: LD_VAR 0 10
21522: PPUSH
21523: LD_VAR 0 9
21527: PPUSH
21528: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21532: LD_VAR 0 10
21536: PPUSH
21537: LD_VAR 0 9
21541: PPUSH
21542: CALL_OW 180
// end ; end ;
21546: GO 21434
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 2
21554: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21563: LD_ADDR_VAR 0 3
21567: PUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL 18740 0 1
21577: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21578: LD_VAR 0 3
21582: PUSH
21583: LD_INT 2
21585: ARRAY
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: IFFALSE 21594
// exit ;
21592: GO 22048
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21594: LD_ADDR_VAR 0 7
21598: PUSH
21599: LD_VAR 0 3
21603: PUSH
21604: LD_INT 6
21606: ARRAY
21607: PPUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 50
21620: PUSH
21621: EMPTY
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: PPUSH
21657: CALL_OW 72
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21666: LD_VAR 0 3
21670: PPUSH
21671: CALL 19448 0 1
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 22048
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21680: LD_VAR 0 7
21684: PUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL 19448 0 1
21694: AND
21695: PUSH
21696: LD_VAR 0 3
21700: PUSH
21701: LD_INT 11
21703: ARRAY
21704: PPUSH
21705: LD_INT 81
21707: PUSH
21708: LD_VAR 0 3
21712: PUSH
21713: LD_INT 3
21715: ARRAY
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PPUSH
21721: CALL_OW 70
21725: NOT
21726: AND
21727: IFFALSE 21877
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21729: LD_ADDR_VAR 0 5
21733: PUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: CALL 19448 0 1
21743: PPUSH
21744: LD_INT 50
21746: PUSH
21747: EMPTY
21748: LIST
21749: PUSH
21750: LD_INT 3
21752: PUSH
21753: LD_INT 60
21755: PUSH
21756: EMPTY
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: LD_INT 92
21768: PUSH
21769: LD_VAR 0 7
21773: PPUSH
21774: CALL_OW 250
21778: PUSH
21779: LD_VAR 0 7
21783: PPUSH
21784: CALL_OW 251
21788: PUSH
21789: LD_INT 12
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PPUSH
21807: CALL_OW 72
21811: PUSH
21812: FOR_IN
21813: IFFALSE 21875
// if GetLives ( veh ) = 1000 then
21815: LD_VAR 0 5
21819: PPUSH
21820: CALL_OW 256
21824: PUSH
21825: LD_INT 1000
21827: EQUAL
21828: IFFALSE 21861
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21830: LD_VAR 0 5
21834: PPUSH
21835: LD_VAR 0 7
21839: PPUSH
21840: CALL_OW 250
21844: PPUSH
21845: LD_VAR 0 7
21849: PPUSH
21850: CALL_OW 251
21854: PPUSH
21855: CALL_OW 111
21859: GO 21873
// SetTag ( veh , 3 ) ;
21861: LD_VAR 0 5
21865: PPUSH
21866: LD_INT 3
21868: PPUSH
21869: CALL_OW 109
21873: GO 21812
21875: POP
21876: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21877: LD_VAR 0 3
21881: PUSH
21882: LD_INT 11
21884: ARRAY
21885: PPUSH
21886: LD_INT 81
21888: PUSH
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 3
21896: ARRAY
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 70
21906: NOT
21907: IFFALSE 21911
// exit ;
21909: GO 22048
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21911: LD_ADDR_VAR 0 5
21915: PUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL 19448 0 1
21925: PPUSH
21926: LD_INT 50
21928: PUSH
21929: EMPTY
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 60
21937: PUSH
21938: EMPTY
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 72
21953: PUSH
21954: FOR_IN
21955: IFFALSE 22046
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21957: LD_VAR 0 5
21961: PPUSH
21962: LD_VAR 0 3
21966: PUSH
21967: LD_INT 11
21969: ARRAY
21970: PPUSH
21971: LD_INT 81
21973: PUSH
21974: LD_VAR 0 3
21978: PUSH
21979: LD_INT 3
21981: ARRAY
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PPUSH
21987: CALL_OW 70
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: CALL_OW 250
22000: PPUSH
22001: LD_VAR 0 3
22005: PUSH
22006: LD_INT 11
22008: ARRAY
22009: PPUSH
22010: LD_INT 81
22012: PUSH
22013: LD_VAR 0 3
22017: PUSH
22018: LD_INT 3
22020: ARRAY
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PPUSH
22026: CALL_OW 70
22030: PUSH
22031: LD_INT 1
22033: ARRAY
22034: PPUSH
22035: CALL_OW 251
22039: PPUSH
22040: CALL_OW 114
22044: GO 21954
22046: POP
22047: POP
// end ;
22048: LD_VAR 0 2
22052: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL 18740 0 1
22075: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 2
22083: ARRAY
22084: PUSH
22085: LD_INT 0
22087: EQUAL
22088: IFFALSE 22092
// exit ;
22090: GO 22482
// if ( aiData [ 18 ] = 0 ) then
22092: LD_VAR 0 3
22096: PUSH
22097: LD_INT 18
22099: ARRAY
22100: PUSH
22101: LD_INT 0
22103: EQUAL
22104: IFFALSE 22108
// exit ;
22106: GO 22482
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22108: LD_VAR 0 3
22112: PPUSH
22113: CALL 19558 0 1
22117: PUSH
22118: LD_VAR 0 3
22122: PUSH
22123: LD_INT 14
22125: ARRAY
22126: GREATEREQUAL
22127: IFFALSE 22482
// begin repeat wait ( 0 0$01 ) ;
22129: LD_INT 35
22131: PPUSH
22132: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22136: LD_ADDR_VAR 0 6
22140: PUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: CALL 19558 0 1
22150: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22151: LD_ADDR_VAR 0 7
22155: PUSH
22156: LD_VAR 0 6
22160: PUSH
22161: FOR_IN
22162: IFFALSE 22462
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22164: LD_ADDR_VAR 0 4
22168: PUSH
22169: LD_INT 81
22171: PUSH
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 3
22179: ARRAY
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: PPUSH
22190: LD_VAR 0 7
22194: PPUSH
22195: CALL_OW 74
22199: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22200: LD_ADDR_VAR 0 5
22204: PUSH
22205: LD_INT 81
22207: PUSH
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 3
22215: ARRAY
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 59
22226: PUSH
22227: EMPTY
22228: LIST
22229: PUSH
22230: LD_INT 21
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 21
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: PPUSH
22263: CALL_OW 69
22267: PPUSH
22268: LD_VAR 0 7
22272: PPUSH
22273: CALL_OW 74
22277: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22278: LD_VAR 0 7
22282: PPUSH
22283: LD_VAR 0 4
22287: PPUSH
22288: CALL_OW 296
22292: PUSH
22293: LD_INT 12
22295: PLUS
22296: PUSH
22297: LD_VAR 0 7
22301: PPUSH
22302: LD_VAR 0 5
22306: PPUSH
22307: CALL_OW 296
22311: LESS
22312: IFFALSE 22388
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22314: LD_VAR 0 7
22318: PPUSH
22319: LD_INT 50
22321: PUSH
22322: EMPTY
22323: LIST
22324: PPUSH
22325: CALL_OW 72
22329: PPUSH
22330: LD_VAR 0 4
22334: PPUSH
22335: CALL_OW 250
22339: PPUSH
22340: LD_VAR 0 4
22344: PPUSH
22345: CALL_OW 251
22349: PPUSH
22350: CALL_OW 114
// wait ( 0 0$01 ) ;
22354: LD_INT 35
22356: PPUSH
22357: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22361: LD_VAR 0 7
22365: PPUSH
22366: LD_INT 50
22368: PUSH
22369: EMPTY
22370: LIST
22371: PPUSH
22372: CALL_OW 72
22376: PPUSH
22377: LD_VAR 0 4
22381: PPUSH
22382: CALL_OW 115
// end else
22386: GO 22460
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22388: LD_VAR 0 7
22392: PPUSH
22393: LD_INT 50
22395: PUSH
22396: EMPTY
22397: LIST
22398: PPUSH
22399: CALL_OW 72
22403: PPUSH
22404: LD_VAR 0 5
22408: PPUSH
22409: CALL_OW 250
22413: PPUSH
22414: LD_VAR 0 5
22418: PPUSH
22419: CALL_OW 251
22423: PPUSH
22424: CALL_OW 114
// wait ( 0 0$01 ) ;
22428: LD_INT 35
22430: PPUSH
22431: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22435: LD_VAR 0 7
22439: PPUSH
22440: LD_INT 50
22442: PUSH
22443: EMPTY
22444: LIST
22445: PPUSH
22446: CALL_OW 72
22450: PPUSH
22451: LD_VAR 0 5
22455: PPUSH
22456: CALL_OW 115
// end ; end ;
22460: GO 22161
22462: POP
22463: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22464: LD_VAR 0 6
22468: PPUSH
22469: LD_INT 50
22471: PUSH
22472: EMPTY
22473: LIST
22474: PPUSH
22475: CALL_OW 72
22479: NOT
22480: IFFALSE 22129
// end ; end ;
22482: LD_VAR 0 2
22486: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22487: LD_INT 0
22489: PPUSH
22490: PPUSH
22491: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22492: LD_ADDR_VAR 0 3
22496: PUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL 18740 0 1
22506: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22507: LD_VAR 0 3
22511: PUSH
22512: LD_INT 2
22514: ARRAY
22515: PUSH
22516: LD_INT 0
22518: EQUAL
22519: IFFALSE 22523
// exit ;
22521: GO 22672
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22523: LD_ADDR_VAR 0 4
22527: PUSH
22528: LD_VAR 0 3
22532: PUSH
22533: LD_INT 5
22535: ARRAY
22536: PPUSH
22537: LD_INT 21
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 50
22549: PUSH
22550: EMPTY
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 34
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 34
22568: PUSH
22569: LD_INT 32
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 34
22578: PUSH
22579: LD_INT 51
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: LIST
22596: PPUSH
22597: CALL_OW 72
22601: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22602: LD_VAR 0 3
22606: PUSH
22607: LD_INT 8
22609: ARRAY
22610: PPUSH
22611: CALL_OW 435
22615: NOT
22616: PUSH
22617: LD_VAR 0 4
22621: NOT
22622: OR
22623: IFFALSE 22627
// exit ;
22625: GO 22672
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22627: LD_VAR 0 4
22631: PPUSH
22632: LD_VAR 0 3
22636: PUSH
22637: LD_INT 8
22639: ARRAY
22640: PPUSH
22641: CALL_OW 435
22645: PUSH
22646: LD_INT 1
22648: ARRAY
22649: PPUSH
22650: LD_VAR 0 3
22654: PUSH
22655: LD_INT 8
22657: ARRAY
22658: PPUSH
22659: CALL_OW 435
22663: PUSH
22664: LD_INT 2
22666: ARRAY
22667: PPUSH
22668: CALL_OW 117
// end ;
22672: LD_VAR 0 2
22676: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL 18740 0 1
22696: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22697: LD_VAR 0 3
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: IFFALSE 22713
// exit ;
22711: GO 22803
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: LD_VAR 0 3
22722: PUSH
22723: LD_INT 5
22725: ARRAY
22726: PPUSH
22727: LD_INT 21
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PPUSH
22737: CALL_OW 72
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22801
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22745: LD_VAR 0 4
22749: PPUSH
22750: CALL_OW 110
22754: PUSH
22755: LD_INT 0
22757: EQUAL
22758: PUSH
22759: LD_VAR 0 4
22763: PPUSH
22764: LD_VAR 0 3
22768: PUSH
22769: LD_INT 9
22771: ARRAY
22772: PPUSH
22773: CALL_OW 308
22777: NOT
22778: AND
22779: IFFALSE 22799
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22781: LD_VAR 0 4
22785: PPUSH
22786: LD_VAR 0 3
22790: PUSH
22791: LD_INT 9
22793: ARRAY
22794: PPUSH
22795: CALL_OW 113
22799: GO 22742
22801: POP
22802: POP
// end ;
22803: LD_VAR 0 2
22807: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22813: LD_ADDR_VAR 0 3
22817: PUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL 18740 0 1
22827: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22828: LD_VAR 0 3
22832: PUSH
22833: LD_INT 2
22835: ARRAY
22836: PUSH
22837: LD_INT 0
22839: EQUAL
22840: IFFALSE 22844
// exit ;
22842: GO 22959
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22844: LD_ADDR_VAR 0 4
22848: PUSH
22849: LD_VAR 0 3
22853: PUSH
22854: LD_INT 5
22856: ARRAY
22857: PPUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 50
22870: PUSH
22871: EMPTY
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 72
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22957
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22886: LD_VAR 0 4
22890: PPUSH
22891: CALL_OW 110
22895: PUSH
22896: LD_INT 3
22898: EQUAL
22899: PUSH
22900: LD_VAR 0 4
22904: PPUSH
22905: CALL_OW 110
22909: PUSH
22910: LD_INT 5
22912: EQUAL
22913: OR
22914: PUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 10
22927: ARRAY
22928: PPUSH
22929: CALL_OW 308
22933: NOT
22934: AND
22935: IFFALSE 22955
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22937: LD_VAR 0 4
22941: PPUSH
22942: LD_VAR 0 3
22946: PUSH
22947: LD_INT 10
22949: ARRAY
22950: PPUSH
22951: CALL_OW 113
22955: GO 22883
22957: POP
22958: POP
// end ;
22959: LD_VAR 0 2
22963: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22964: LD_INT 0
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22973: LD_ADDR_VAR 0 3
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL 18740 0 1
22987: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22988: LD_VAR 0 3
22992: PUSH
22993: LD_INT 2
22995: ARRAY
22996: PUSH
22997: LD_INT 0
22999: EQUAL
23000: IFFALSE 23004
// exit ;
23002: GO 23702
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23004: LD_ADDR_VAR 0 4
23008: PUSH
23009: LD_VAR 0 3
23013: PUSH
23014: LD_INT 5
23016: ARRAY
23017: PPUSH
23018: LD_INT 25
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 50
23030: PUSH
23031: EMPTY
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PPUSH
23038: CALL_OW 72
23042: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23043: LD_ADDR_VAR 0 5
23047: PUSH
23048: LD_VAR 0 3
23052: PUSH
23053: LD_INT 5
23055: ARRAY
23056: PPUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 50
23069: PUSH
23070: EMPTY
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: PUSH
23076: LD_INT 34
23078: PUSH
23079: LD_INT 13
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 34
23088: PUSH
23089: LD_INT 88
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 34
23098: PUSH
23099: LD_INT 52
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 72
23121: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23122: LD_ADDR_VAR 0 8
23126: PUSH
23127: LD_VAR 0 3
23131: PUSH
23132: LD_INT 6
23134: ARRAY
23135: PPUSH
23136: LD_INT 21
23138: PUSH
23139: LD_INT 3
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: LD_INT 24
23151: PUSH
23152: LD_INT 1000
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 72
23171: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23172: LD_VAR 0 4
23176: PPUSH
23177: LD_INT 56
23179: PUSH
23180: EMPTY
23181: LIST
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: LD_INT 60
23188: PUSH
23189: EMPTY
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 72
23204: PUSH
23205: LD_VAR 0 8
23209: NOT
23210: AND
23211: PUSH
23212: LD_VAR 0 3
23216: PUSH
23217: LD_INT 6
23219: ARRAY
23220: PPUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 50
23233: PUSH
23234: EMPTY
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 72
23274: AND
23275: IFFALSE 23413
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_VAR 0 4
23286: PPUSH
23287: LD_INT 56
23289: PUSH
23290: EMPTY
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 60
23298: PUSH
23299: EMPTY
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PPUSH
23310: CALL_OW 72
23314: PUSH
23315: FOR_IN
23316: IFFALSE 23411
// if ( GetTag ( eng ) = 1 ) then
23318: LD_VAR 0 7
23322: PPUSH
23323: CALL_OW 110
23327: PUSH
23328: LD_INT 1
23330: EQUAL
23331: IFFALSE 23409
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23333: LD_VAR 0 7
23337: PPUSH
23338: LD_VAR 0 3
23342: PUSH
23343: LD_INT 6
23345: ARRAY
23346: PPUSH
23347: LD_INT 21
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 50
23359: PUSH
23360: EMPTY
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 30
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: PPUSH
23396: CALL_OW 72
23400: PUSH
23401: LD_INT 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 120
23409: GO 23315
23411: POP
23412: POP
// if engineers and damagedBuildings then
23413: LD_VAR 0 4
23417: PUSH
23418: LD_VAR 0 8
23422: AND
23423: IFFALSE 23570
// begin for eng in engineers do
23425: LD_ADDR_VAR 0 7
23429: PUSH
23430: LD_VAR 0 4
23434: PUSH
23435: FOR_IN
23436: IFFALSE 23509
// if ( GetTag ( eng ) = 1 ) then
23438: LD_VAR 0 7
23442: PPUSH
23443: CALL_OW 110
23447: PUSH
23448: LD_INT 1
23450: EQUAL
23451: IFFALSE 23507
// begin ForceResetTaskList ( eng ) ;
23453: LD_VAR 0 7
23457: PPUSH
23458: CALL 27050 0 1
// ExitUnitFromBuilding ( eng ) ;
23462: LD_VAR 0 7
23466: PPUSH
23467: CALL 27103 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23471: LD_VAR 0 7
23475: PPUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 60
23481: PUSH
23482: EMPTY
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PPUSH
23489: CALL_OW 72
23493: PPUSH
23494: LD_VAR 0 8
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PPUSH
23503: CALL_OW 190
// end ;
23507: GO 23435
23509: POP
23510: POP
// if cranes then
23511: LD_VAR 0 5
23515: IFFALSE 23570
// for crane in cranes do
23517: LD_ADDR_VAR 0 6
23521: PUSH
23522: LD_VAR 0 5
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23568
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23530: LD_VAR 0 6
23534: PPUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 60
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 72
23552: PPUSH
23553: LD_VAR 0 8
23557: PUSH
23558: LD_INT 1
23560: ARRAY
23561: PPUSH
23562: CALL_OW 190
23566: GO 23527
23568: POP
23569: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23570: LD_VAR 0 4
23574: PUSH
23575: LD_VAR 0 8
23579: NOT
23580: AND
23581: PUSH
23582: LD_VAR 0 3
23586: PUSH
23587: LD_INT 7
23589: ARRAY
23590: AND
23591: IFFALSE 23702
// begin for eng in engineers do
23593: LD_ADDR_VAR 0 7
23597: PUSH
23598: LD_VAR 0 4
23602: PUSH
23603: FOR_IN
23604: IFFALSE 23700
// if ( GetTag ( eng ) = 1 ) then
23606: LD_VAR 0 7
23610: PPUSH
23611: CALL_OW 110
23615: PUSH
23616: LD_INT 1
23618: EQUAL
23619: IFFALSE 23698
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23621: LD_VAR 0 7
23625: PPUSH
23626: LD_VAR 0 3
23630: PUSH
23631: LD_INT 7
23633: ARRAY
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PPUSH
23643: LD_VAR 0 3
23647: PUSH
23648: LD_INT 7
23650: ARRAY
23651: PUSH
23652: LD_INT 1
23654: ARRAY
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: LD_VAR 0 3
23664: PUSH
23665: LD_INT 7
23667: ARRAY
23668: PUSH
23669: LD_INT 1
23671: ARRAY
23672: PUSH
23673: LD_INT 3
23675: ARRAY
23676: PPUSH
23677: LD_VAR 0 3
23681: PUSH
23682: LD_INT 7
23684: ARRAY
23685: PUSH
23686: LD_INT 1
23688: ARRAY
23689: PUSH
23690: LD_INT 4
23692: ARRAY
23693: PPUSH
23694: CALL_OW 145
23698: GO 23603
23700: POP
23701: POP
// end ;
23702: LD_VAR 0 2
23706: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23707: LD_INT 0
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL 18740 0 1
23729: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23730: LD_VAR 0 3
23734: PUSH
23735: LD_INT 2
23737: ARRAY
23738: PUSH
23739: LD_INT 0
23741: EQUAL
23742: IFFALSE 23746
// exit ;
23744: GO 24200
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23746: LD_ADDR_VAR 0 4
23750: PUSH
23751: LD_VAR 0 3
23755: PUSH
23756: LD_INT 5
23758: ARRAY
23759: PPUSH
23760: LD_INT 25
23762: PUSH
23763: LD_INT 4
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 50
23772: PUSH
23773: EMPTY
23774: LIST
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PPUSH
23780: CALL_OW 72
23784: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23785: LD_ADDR_VAR 0 6
23789: PUSH
23790: LD_VAR 0 3
23794: PUSH
23795: LD_INT 5
23797: ARRAY
23798: PPUSH
23799: LD_INT 21
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 92
23811: PUSH
23812: LD_VAR 0 3
23816: PUSH
23817: LD_INT 9
23819: ARRAY
23820: PPUSH
23821: LD_INT 0
23823: PPUSH
23824: CALL_OW 517
23828: PUSH
23829: LD_INT 1
23831: ARRAY
23832: PUSH
23833: LD_INT 1
23835: ARRAY
23836: PUSH
23837: LD_VAR 0 3
23841: PUSH
23842: LD_INT 9
23844: ARRAY
23845: PPUSH
23846: LD_INT 0
23848: PPUSH
23849: CALL_OW 517
23853: PUSH
23854: LD_INT 2
23856: ARRAY
23857: PUSH
23858: LD_INT 1
23860: ARRAY
23861: PUSH
23862: LD_INT 6
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: LD_INT 24
23876: PUSH
23877: LD_INT 1000
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 72
23897: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23898: LD_ADDR_VAR 0 7
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_INT 5
23910: ARRAY
23911: PPUSH
23912: LD_INT 21
23914: PUSH
23915: LD_INT 3
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 50
23924: PUSH
23925: EMPTY
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 30
23933: PUSH
23934: LD_INT 6
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 30
23943: PUSH
23944: LD_INT 7
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: LD_INT 8
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: PPUSH
23972: CALL_OW 72
23976: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23977: LD_VAR 0 4
23981: PPUSH
23982: LD_INT 56
23984: PUSH
23985: EMPTY
23986: LIST
23987: PUSH
23988: LD_INT 3
23990: PUSH
23991: LD_INT 60
23993: PUSH
23994: EMPTY
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PPUSH
24005: CALL_OW 72
24009: PUSH
24010: LD_VAR 0 6
24014: NOT
24015: AND
24016: PUSH
24017: LD_VAR 0 7
24021: AND
24022: IFFALSE 24098
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24024: LD_ADDR_VAR 0 5
24028: PUSH
24029: LD_VAR 0 4
24033: PPUSH
24034: LD_INT 56
24036: PUSH
24037: EMPTY
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: PPUSH
24043: CALL_OW 72
24047: PUSH
24048: FOR_IN
24049: IFFALSE 24096
// if ( GetTag ( sci ) = 1 ) then
24051: LD_VAR 0 5
24055: PPUSH
24056: CALL_OW 110
24060: PUSH
24061: LD_INT 1
24063: EQUAL
24064: IFFALSE 24094
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24066: LD_VAR 0 5
24070: PPUSH
24071: LD_VAR 0 7
24075: PUSH
24076: LD_INT 1
24078: PPUSH
24079: LD_VAR 0 7
24083: PPUSH
24084: CALL_OW 12
24088: ARRAY
24089: PPUSH
24090: CALL_OW 120
24094: GO 24048
24096: POP
24097: POP
// if not scientists or not damageUnits then
24098: LD_VAR 0 4
24102: NOT
24103: PUSH
24104: LD_VAR 0 6
24108: NOT
24109: OR
24110: IFFALSE 24114
// exit ;
24112: GO 24200
// for sci in scientists do
24114: LD_ADDR_VAR 0 5
24118: PUSH
24119: LD_VAR 0 4
24123: PUSH
24124: FOR_IN
24125: IFFALSE 24198
// if ( GetTag ( sci ) = 1 ) then
24127: LD_VAR 0 5
24131: PPUSH
24132: CALL_OW 110
24136: PUSH
24137: LD_INT 1
24139: EQUAL
24140: IFFALSE 24196
// begin ForceResetTaskList ( sci ) ;
24142: LD_VAR 0 5
24146: PPUSH
24147: CALL 27050 0 1
// ExitUnitFromBuilding ( sci ) ;
24151: LD_VAR 0 5
24155: PPUSH
24156: CALL 27103 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24160: LD_VAR 0 5
24164: PPUSH
24165: LD_INT 3
24167: PUSH
24168: LD_INT 60
24170: PUSH
24171: EMPTY
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PPUSH
24178: CALL_OW 72
24182: PPUSH
24183: LD_VAR 0 6
24187: PUSH
24188: LD_INT 1
24190: ARRAY
24191: PPUSH
24192: CALL_OW 188
// end ;
24196: GO 24124
24198: POP
24199: POP
// end ;
24200: LD_VAR 0 2
24204: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24213: LD_ADDR_VAR 0 3
24217: PUSH
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL 18740 0 1
24227: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24228: LD_VAR 0 3
24232: PUSH
24233: LD_INT 2
24235: ARRAY
24236: PUSH
24237: LD_INT 0
24239: EQUAL
24240: IFFALSE 24244
// exit ;
24242: GO 25605
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_INT 6
24256: ARRAY
24257: PPUSH
24258: LD_INT 21
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 50
24270: PUSH
24271: EMPTY
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 3
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 72
24311: ST_TO_ADDR
// if not fabs then
24312: LD_VAR 0 4
24316: NOT
24317: IFFALSE 24321
// exit ;
24319: GO 25605
// wait ( aiData [ 16 ] ) ;
24321: LD_VAR 0 3
24325: PUSH
24326: LD_INT 16
24328: ARRAY
24329: PPUSH
24330: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24334: LD_VAR 0 3
24338: PUSH
24339: LD_INT 17
24341: ARRAY
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: IFFALSE 24518
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24348: LD_ADDR_VAR 0 5
24352: PUSH
24353: DOUBLE
24354: LD_INT 1
24356: DEC
24357: ST_TO_ADDR
24358: LD_VAR 0 3
24362: PUSH
24363: LD_INT 13
24365: ARRAY
24366: PUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL 19448 0 1
24376: MINUS
24377: PUSH
24378: FOR_TO
24379: IFFALSE 24516
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24381: LD_ADDR_VAR 0 6
24385: PUSH
24386: LD_VAR 0 3
24390: PUSH
24391: LD_INT 13
24393: ARRAY
24394: PUSH
24395: LD_VAR 0 5
24399: ARRAY
24400: PUSH
24401: LD_INT 4
24403: ARRAY
24404: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24405: LD_ADDR_VAR 0 7
24409: PUSH
24410: LD_VAR 0 6
24414: PUSH
24415: LD_INT 1
24417: PPUSH
24418: LD_VAR 0 6
24422: PPUSH
24423: CALL_OW 12
24427: ARRAY
24428: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24429: LD_VAR 0 4
24433: PUSH
24434: LD_INT 0
24436: PPUSH
24437: LD_VAR 0 4
24441: PPUSH
24442: CALL_OW 12
24446: ARRAY
24447: PPUSH
24448: LD_VAR 0 3
24452: PUSH
24453: LD_INT 13
24455: ARRAY
24456: PUSH
24457: LD_VAR 0 5
24461: ARRAY
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: PPUSH
24467: LD_VAR 0 3
24471: PUSH
24472: LD_INT 13
24474: ARRAY
24475: PUSH
24476: LD_VAR 0 5
24480: ARRAY
24481: PUSH
24482: LD_INT 2
24484: ARRAY
24485: PPUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_INT 13
24493: ARRAY
24494: PUSH
24495: LD_VAR 0 5
24499: ARRAY
24500: PUSH
24501: LD_INT 3
24503: ARRAY
24504: PPUSH
24505: LD_VAR 0 7
24509: PPUSH
24510: CALL_OW 185
// end ;
24514: GO 24378
24516: POP
24517: POP
// end ; if aiData [ 17 ] [ 3 ] then
24518: LD_VAR 0 3
24522: PUSH
24523: LD_INT 17
24525: ARRAY
24526: PUSH
24527: LD_INT 3
24529: ARRAY
24530: IFFALSE 25421
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24532: LD_INT 22
24534: PUSH
24535: LD_VAR 0 3
24539: PUSH
24540: LD_INT 3
24542: ARRAY
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 34
24563: PUSH
24564: LD_INT 12
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 34
24583: PUSH
24584: LD_INT 51
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 69
24606: PUSH
24607: LD_VAR 0 3
24611: PUSH
24612: LD_INT 15
24614: ARRAY
24615: PUSH
24616: LD_INT 1
24618: ARRAY
24619: LESS
24620: IFFALSE 24831
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24622: LD_ADDR_VAR 0 5
24626: PUSH
24627: DOUBLE
24628: LD_INT 1
24630: DEC
24631: ST_TO_ADDR
24632: LD_VAR 0 3
24636: PUSH
24637: LD_INT 15
24639: ARRAY
24640: PUSH
24641: LD_INT 1
24643: ARRAY
24644: PUSH
24645: LD_INT 22
24647: PUSH
24648: LD_VAR 0 3
24652: PUSH
24653: LD_INT 3
24655: ARRAY
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 34
24676: PUSH
24677: LD_INT 12
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 34
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 34
24696: PUSH
24697: LD_INT 51
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 69
24719: MINUS
24720: PUSH
24721: FOR_TO
24722: IFFALSE 24829
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24724: LD_VAR 0 4
24728: PUSH
24729: LD_INT 0
24731: PPUSH
24732: LD_VAR 0 4
24736: PPUSH
24737: CALL_OW 12
24741: ARRAY
24742: PPUSH
24743: LD_INT 3
24745: PUSH
24746: EMPTY
24747: LIST
24748: PUSH
24749: LD_INT 13
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 22
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_VAR 0 3
24770: PUSH
24771: LD_INT 4
24773: ARRAY
24774: ARRAY
24775: PUSH
24776: LD_INT 1
24778: ARRAY
24779: PPUSH
24780: LD_INT 1
24782: PPUSH
24783: LD_INT 2
24785: PPUSH
24786: LD_INT 12
24788: PUSH
24789: EMPTY
24790: LIST
24791: PUSH
24792: LD_INT 32
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 51
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: LD_INT 4
24816: ARRAY
24817: ARRAY
24818: PUSH
24819: LD_INT 1
24821: ARRAY
24822: PPUSH
24823: CALL_OW 185
24827: GO 24721
24829: POP
24830: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24831: LD_INT 22
24833: PUSH
24834: LD_VAR 0 3
24838: PUSH
24839: LD_INT 3
24841: ARRAY
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 21
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 13
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 34
24872: PUSH
24873: LD_INT 88
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 34
24882: PUSH
24883: LD_INT 52
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 69
24905: PUSH
24906: LD_VAR 0 3
24910: PUSH
24911: LD_INT 15
24913: ARRAY
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: LESS
24919: IFFALSE 25130
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24921: LD_ADDR_VAR 0 5
24925: PUSH
24926: DOUBLE
24927: LD_INT 1
24929: DEC
24930: ST_TO_ADDR
24931: LD_VAR 0 3
24935: PUSH
24936: LD_INT 15
24938: ARRAY
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_VAR 0 3
24951: PUSH
24952: LD_INT 3
24954: ARRAY
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 34
24975: PUSH
24976: LD_INT 13
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 34
24985: PUSH
24986: LD_INT 88
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 34
24995: PUSH
24996: LD_INT 52
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: MINUS
25019: PUSH
25020: FOR_TO
25021: IFFALSE 25128
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25023: LD_VAR 0 4
25027: PUSH
25028: LD_INT 0
25030: PPUSH
25031: LD_VAR 0 4
25035: PPUSH
25036: CALL_OW 12
25040: ARRAY
25041: PPUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: PUSH
25048: LD_INT 13
25050: PUSH
25051: EMPTY
25052: LIST
25053: PUSH
25054: LD_INT 22
25056: PUSH
25057: EMPTY
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_INT 4
25072: ARRAY
25073: ARRAY
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: LD_INT 2
25084: PPUSH
25085: LD_INT 13
25087: PUSH
25088: EMPTY
25089: LIST
25090: PUSH
25091: LD_INT 88
25093: PUSH
25094: EMPTY
25095: LIST
25096: PUSH
25097: LD_INT 52
25099: PUSH
25100: EMPTY
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: PUSH
25108: LD_VAR 0 3
25112: PUSH
25113: LD_INT 4
25115: ARRAY
25116: ARRAY
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PPUSH
25122: CALL_OW 185
25126: GO 25020
25128: POP
25129: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25130: LD_INT 22
25132: PUSH
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 3
25140: ARRAY
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 34
25161: PUSH
25162: LD_INT 14
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 14
25171: PUSH
25172: EMPTY
25173: LIST
25174: PUSH
25175: LD_INT 34
25177: PUSH
25178: LD_INT 53
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_VAR 0 3
25205: PUSH
25206: LD_INT 15
25208: ARRAY
25209: PUSH
25210: LD_INT 3
25212: ARRAY
25213: LESS
25214: IFFALSE 25421
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: DOUBLE
25222: LD_INT 1
25224: DEC
25225: ST_TO_ADDR
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 15
25233: ARRAY
25234: PUSH
25235: LD_INT 3
25237: ARRAY
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_VAR 0 3
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 21
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 34
25270: PUSH
25271: LD_INT 14
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 14
25280: PUSH
25281: EMPTY
25282: LIST
25283: PUSH
25284: LD_INT 34
25286: PUSH
25287: LD_INT 53
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: MINUS
25310: PUSH
25311: FOR_TO
25312: IFFALSE 25419
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25314: LD_VAR 0 4
25318: PUSH
25319: LD_INT 0
25321: PPUSH
25322: LD_VAR 0 4
25326: PPUSH
25327: CALL_OW 12
25331: ARRAY
25332: PPUSH
25333: LD_INT 4
25335: PUSH
25336: EMPTY
25337: LIST
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: EMPTY
25343: LIST
25344: PUSH
25345: LD_INT 24
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 4
25363: ARRAY
25364: ARRAY
25365: PUSH
25366: LD_INT 1
25368: ARRAY
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: LD_INT 14
25378: PUSH
25379: EMPTY
25380: LIST
25381: PUSH
25382: LD_INT 14
25384: PUSH
25385: EMPTY
25386: LIST
25387: PUSH
25388: LD_INT 53
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: LD_VAR 0 3
25403: PUSH
25404: LD_INT 4
25406: ARRAY
25407: ARRAY
25408: PUSH
25409: LD_INT 1
25411: ARRAY
25412: PPUSH
25413: CALL_OW 185
25417: GO 25311
25419: POP
25420: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25421: LD_VAR 0 3
25425: PUSH
25426: LD_INT 17
25428: ARRAY
25429: PUSH
25430: LD_INT 2
25432: ARRAY
25433: PUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL 19558 0 1
25443: MINUS
25444: IFFALSE 25605
// begin for i := 1 to aiData [ 14 ] do
25446: LD_ADDR_VAR 0 5
25450: PUSH
25451: DOUBLE
25452: LD_INT 1
25454: DEC
25455: ST_TO_ADDR
25456: LD_VAR 0 3
25460: PUSH
25461: LD_INT 14
25463: ARRAY
25464: PUSH
25465: FOR_TO
25466: IFFALSE 25603
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25468: LD_ADDR_VAR 0 6
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_INT 14
25480: ARRAY
25481: PUSH
25482: LD_VAR 0 5
25486: ARRAY
25487: PUSH
25488: LD_INT 4
25490: ARRAY
25491: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25492: LD_ADDR_VAR 0 7
25496: PUSH
25497: LD_VAR 0 6
25501: PUSH
25502: LD_INT 1
25504: PPUSH
25505: LD_VAR 0 6
25509: PPUSH
25510: CALL_OW 12
25514: ARRAY
25515: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25516: LD_VAR 0 4
25520: PUSH
25521: LD_INT 0
25523: PPUSH
25524: LD_VAR 0 4
25528: PPUSH
25529: CALL_OW 12
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 3
25539: PUSH
25540: LD_INT 14
25542: ARRAY
25543: PUSH
25544: LD_VAR 0 5
25548: ARRAY
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: LD_VAR 0 3
25558: PUSH
25559: LD_INT 14
25561: ARRAY
25562: PUSH
25563: LD_VAR 0 5
25567: ARRAY
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PPUSH
25573: LD_VAR 0 3
25577: PUSH
25578: LD_INT 14
25580: ARRAY
25581: PUSH
25582: LD_VAR 0 5
25586: ARRAY
25587: PUSH
25588: LD_INT 3
25590: ARRAY
25591: PPUSH
25592: LD_VAR 0 7
25596: PPUSH
25597: CALL_OW 185
// end ;
25601: GO 25465
25603: POP
25604: POP
// end ; end ;
25605: LD_VAR 0 2
25609: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
// for unit in units do
25626: LD_ADDR_VAR 0 6
25630: PUSH
25631: LD_VAR 0 2
25635: PUSH
25636: FOR_IN
25637: IFFALSE 25653
// SetTag ( unit , 0 ) ;
25639: LD_VAR 0 6
25643: PPUSH
25644: LD_INT 0
25646: PPUSH
25647: CALL_OW 109
25651: GO 25636
25653: POP
25654: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25655: LD_ADDR_VAR 0 13
25659: PUSH
25660: LD_VAR 0 3
25664: PUSH
25665: LD_VAR 0 3
25669: ARRAY
25670: PUSH
25671: LD_INT 1
25673: ARRAY
25674: PUSH
25675: LD_VAR 0 3
25679: PUSH
25680: LD_VAR 0 3
25684: ARRAY
25685: PUSH
25686: LD_INT 2
25688: ARRAY
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25694: LD_ADDR_VAR 0 7
25698: PUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_INT 50
25706: PUSH
25707: EMPTY
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 59
25715: PUSH
25716: EMPTY
25717: LIST
25718: PUSH
25719: LD_INT 25
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 25
25731: PUSH
25732: LD_INT 8
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 21
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PPUSH
25760: CALL_OW 72
25764: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25765: LD_ADDR_VAR 0 9
25769: PUSH
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_INT 50
25777: PUSH
25778: EMPTY
25779: LIST
25780: PUSH
25781: LD_INT 25
25783: PUSH
25784: LD_INT 4
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PPUSH
25795: CALL_OW 72
25799: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25800: LD_ADDR_VAR 0 10
25804: PUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: LD_INT 21
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: LD_INT 24
25825: PUSH
25826: LD_INT 1000
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 72
25845: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25846: LD_ADDR_VAR 0 11
25850: PUSH
25851: LD_INT 21
25853: PPUSH
25854: CALL_OW 435
25858: ST_TO_ADDR
// for unit in attackUnits do
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: LD_VAR 0 7
25868: PUSH
25869: FOR_IN
25870: IFFALSE 26619
// begin if path then
25872: LD_VAR 0 3
25876: IFFALSE 26608
// begin i = 1 ;
25878: LD_ADDR_VAR 0 5
25882: PUSH
25883: LD_INT 1
25885: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25886: LD_ADDR_VAR 0 11
25890: PUSH
25891: LD_INT 21
25893: PPUSH
25894: CALL_OW 435
25898: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25899: LD_ADDR_VAR 0 14
25903: PUSH
25904: LD_INT 81
25906: PUSH
25907: LD_VAR 0 6
25911: PPUSH
25912: CALL_OW 255
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 69
25925: PPUSH
25926: LD_VAR 0 6
25930: PPUSH
25931: CALL_OW 74
25935: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25936: LD_ADDR_VAR 0 15
25940: PUSH
25941: LD_VAR 0 11
25945: PPUSH
25946: LD_VAR 0 6
25950: PPUSH
25951: CALL_OW 250
25955: PPUSH
25956: LD_VAR 0 6
25960: PPUSH
25961: CALL_OW 251
25965: PPUSH
25966: CALL_OW 439
25970: ST_TO_ADDR
// if damageUnits and medics then
25971: LD_VAR 0 10
25975: PUSH
25976: LD_VAR 0 9
25980: AND
25981: IFFALSE 26003
// ComHeal ( medics , damageUnits [ 1 ] ) else
25983: LD_VAR 0 9
25987: PPUSH
25988: LD_VAR 0 10
25992: PUSH
25993: LD_INT 1
25995: ARRAY
25996: PPUSH
25997: CALL_OW 128
26001: GO 26046
// if medics then
26003: LD_VAR 0 9
26007: IFFALSE 26046
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26009: LD_VAR 0 9
26013: PPUSH
26014: LD_VAR 0 7
26018: PUSH
26019: LD_INT 1
26021: ARRAY
26022: PPUSH
26023: CALL_OW 250
26027: PPUSH
26028: LD_VAR 0 7
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: CALL_OW 251
26041: PPUSH
26042: CALL_OW 111
// if not HasTask ( unit ) then
26046: LD_VAR 0 6
26050: PPUSH
26051: CALL_OW 314
26055: NOT
26056: IFFALSE 26295
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26058: LD_ADDR_VAR 0 15
26062: PUSH
26063: LD_VAR 0 11
26067: PPUSH
26068: LD_VAR 0 6
26072: PPUSH
26073: CALL_OW 250
26077: PPUSH
26078: LD_VAR 0 6
26082: PPUSH
26083: CALL_OW 251
26087: PPUSH
26088: CALL_OW 439
26092: ST_TO_ADDR
// if i > crates then
26093: LD_VAR 0 5
26097: PUSH
26098: LD_VAR 0 11
26102: GREATER
26103: IFFALSE 26113
// i = 1 ;
26105: LD_ADDR_VAR 0 5
26109: PUSH
26110: LD_INT 1
26112: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26113: LD_VAR 0 14
26117: PUSH
26118: LD_VAR 0 15
26122: AND
26123: IFFALSE 26238
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26125: LD_VAR 0 6
26129: PPUSH
26130: LD_VAR 0 14
26134: PPUSH
26135: CALL_OW 250
26139: PPUSH
26140: LD_VAR 0 14
26144: PPUSH
26145: CALL_OW 251
26149: PPUSH
26150: CALL_OW 297
26154: PUSH
26155: LD_VAR 0 6
26159: PPUSH
26160: LD_VAR 0 15
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PPUSH
26169: LD_VAR 0 15
26173: PUSH
26174: LD_INT 2
26176: ARRAY
26177: PPUSH
26178: CALL_OW 297
26182: LESS
26183: IFFALSE 26201
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26185: LD_VAR 0 7
26189: PPUSH
26190: LD_VAR 0 14
26194: PPUSH
26195: CALL_OW 115
26199: GO 26236
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26201: LD_VAR 0 7
26205: PPUSH
26206: LD_VAR 0 11
26210: PUSH
26211: LD_VAR 0 5
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 11
26221: PUSH
26222: LD_VAR 0 5
26226: PUSH
26227: LD_INT 1
26229: PLUS
26230: ARRAY
26231: PPUSH
26232: CALL_OW 116
// end else
26236: GO 26295
// if crates then
26238: LD_VAR 0 11
26242: IFFALSE 26281
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26244: LD_VAR 0 7
26248: PPUSH
26249: LD_VAR 0 11
26253: PUSH
26254: LD_VAR 0 5
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 11
26264: PUSH
26265: LD_VAR 0 5
26269: PUSH
26270: LD_INT 1
26272: PLUS
26273: ARRAY
26274: PPUSH
26275: CALL_OW 116
26279: GO 26295
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26281: LD_VAR 0 7
26285: PPUSH
26286: LD_VAR 0 14
26290: PPUSH
26291: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26295: LD_INT 35
26297: PPUSH
26298: CALL_OW 67
// if path then
26302: LD_VAR 0 3
26306: IFFALSE 26382
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26308: LD_ADDR_VAR 0 16
26312: PUSH
26313: LD_VAR 0 6
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL 26837 0 2
26327: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26328: LD_VAR 0 7
26332: PPUSH
26333: LD_VAR 0 16
26337: PUSH
26338: LD_INT 1
26340: ARRAY
26341: PPUSH
26342: LD_VAR 0 16
26346: PUSH
26347: LD_INT 2
26349: ARRAY
26350: PPUSH
26351: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 16
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: LD_VAR 0 16
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: CALL_OW 114
// end ; i = i + 2 ;
26382: LD_ADDR_VAR 0 5
26386: PUSH
26387: LD_VAR 0 5
26391: PUSH
26392: LD_INT 2
26394: PLUS
26395: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_VAR 0 16
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PPUSH
26410: LD_VAR 0 16
26414: PUSH
26415: LD_INT 2
26417: ARRAY
26418: PPUSH
26419: CALL_OW 297
26423: PUSH
26424: LD_INT 6
26426: LESSEQUAL
26427: IFFALSE 25886
// repeat wait ( 0 0$1 ) ;
26429: LD_INT 35
26431: PPUSH
26432: CALL_OW 67
// nearUnitsCounter = 0 ;
26436: LD_ADDR_VAR 0 12
26440: PUSH
26441: LD_INT 0
26443: ST_TO_ADDR
// for attackUnit in attackUnits do
26444: LD_ADDR_VAR 0 8
26448: PUSH
26449: LD_VAR 0 7
26453: PUSH
26454: FOR_IN
26455: IFFALSE 26493
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26457: LD_VAR 0 6
26461: PPUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 296
26471: PUSH
26472: LD_INT 7
26474: LESSEQUAL
26475: IFFALSE 26491
// nearUnitsCounter = nearUnitsCounter + 1 ;
26477: LD_ADDR_VAR 0 12
26481: PUSH
26482: LD_VAR 0 12
26486: PUSH
26487: LD_INT 1
26489: PLUS
26490: ST_TO_ADDR
26491: GO 26454
26493: POP
26494: POP
// until nearUnitsCounter = attackUnits ;
26495: LD_VAR 0 12
26499: PUSH
26500: LD_VAR 0 7
26504: EQUAL
26505: IFFALSE 26429
// for i := 1 to path do
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: DOUBLE
26513: LD_INT 1
26515: DEC
26516: ST_TO_ADDR
26517: LD_VAR 0 3
26521: PUSH
26522: FOR_TO
26523: IFFALSE 26606
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26525: LD_VAR 0 3
26529: PUSH
26530: LD_VAR 0 5
26534: ARRAY
26535: PUSH
26536: LD_INT 1
26538: ARRAY
26539: PUSH
26540: LD_VAR 0 16
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: EQUAL
26549: PUSH
26550: LD_VAR 0 3
26554: PUSH
26555: LD_VAR 0 5
26559: ARRAY
26560: PUSH
26561: LD_INT 2
26563: ARRAY
26564: PUSH
26565: LD_VAR 0 16
26569: PUSH
26570: LD_INT 2
26572: ARRAY
26573: EQUAL
26574: AND
26575: IFFALSE 26604
// begin path = path diff [ path [ i ] ] ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_VAR 0 3
26591: PUSH
26592: LD_VAR 0 5
26596: ARRAY
26597: PUSH
26598: EMPTY
26599: LIST
26600: DIFF
26601: ST_TO_ADDR
// break ;
26602: GO 26606
// end ;
26604: GO 26522
26606: POP
26607: POP
// end ; if not path then
26608: LD_VAR 0 3
26612: NOT
26613: IFFALSE 26617
// break ;
26615: GO 26619
// end ;
26617: GO 25869
26619: POP
26620: POP
// repeat unitsReachPathEnd = 0 ;
26621: LD_ADDR_VAR 0 17
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// for attackUnit in attackUnits do
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: LD_VAR 0 7
26638: PUSH
26639: FOR_IN
26640: IFFALSE 26778
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26642: LD_VAR 0 8
26646: PPUSH
26647: LD_VAR 0 13
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PPUSH
26656: LD_VAR 0 13
26660: PUSH
26661: LD_INT 2
26663: ARRAY
26664: PPUSH
26665: CALL_OW 297
26669: PUSH
26670: LD_INT 7
26672: LESS
26673: NOT
26674: PUSH
26675: LD_VAR 0 8
26679: PPUSH
26680: CALL_OW 110
26684: PUSH
26685: LD_INT 0
26687: EQUAL
26688: AND
26689: IFFALSE 26720
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26691: LD_VAR 0 8
26695: PPUSH
26696: LD_VAR 0 13
26700: PUSH
26701: LD_INT 1
26703: ARRAY
26704: PPUSH
26705: LD_VAR 0 13
26709: PUSH
26710: LD_INT 2
26712: ARRAY
26713: PPUSH
26714: CALL_OW 111
26718: GO 26747
// if GetTag ( attackUnit ) = 0 then
26720: LD_VAR 0 8
26724: PPUSH
26725: CALL_OW 110
26729: PUSH
26730: LD_INT 0
26732: EQUAL
26733: IFFALSE 26747
// SetTag ( attackUnit , 1 ) ;
26735: LD_VAR 0 8
26739: PPUSH
26740: LD_INT 1
26742: PPUSH
26743: CALL_OW 109
// if GetTag ( unit ) = 1 then
26747: LD_VAR 0 6
26751: PPUSH
26752: CALL_OW 110
26756: PUSH
26757: LD_INT 1
26759: EQUAL
26760: IFFALSE 26776
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26762: LD_ADDR_VAR 0 17
26766: PUSH
26767: LD_VAR 0 17
26771: PUSH
26772: LD_INT 1
26774: PLUS
26775: ST_TO_ADDR
// end ;
26776: GO 26639
26778: POP
26779: POP
// wait ( 0 0$1 ) ;
26780: LD_INT 35
26782: PPUSH
26783: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26787: LD_VAR 0 17
26791: PUSH
26792: LD_VAR 0 7
26796: PUSH
26797: LD_INT 3
26799: MINUS
26800: GREATER
26801: IFFALSE 26621
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26803: LD_VAR 0 2
26807: PPUSH
26808: LD_INT 50
26810: PUSH
26811: EMPTY
26812: LIST
26813: PPUSH
26814: CALL_OW 72
26818: NOT
26819: PUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL_OW 303
26829: OR
26830: IFFALSE 25694
// end ;
26832: LD_VAR 0 4
26836: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26837: LD_INT 0
26839: PPUSH
26840: PPUSH
26841: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26842: LD_ADDR_VAR 0 5
26846: PUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_INT 1
26854: ARRAY
26855: PUSH
26856: LD_INT 1
26858: ARRAY
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: PUSH
26869: LD_INT 2
26871: ARRAY
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// for i := 2 to path do
26877: LD_ADDR_VAR 0 4
26881: PUSH
26882: DOUBLE
26883: LD_INT 2
26885: DEC
26886: ST_TO_ADDR
26887: LD_VAR 0 2
26891: PUSH
26892: FOR_TO
26893: IFFALSE 27033
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26895: LD_VAR 0 1
26899: PPUSH
26900: LD_VAR 0 2
26904: PUSH
26905: LD_VAR 0 4
26909: ARRAY
26910: PUSH
26911: LD_INT 1
26913: ARRAY
26914: PPUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_VAR 0 4
26924: ARRAY
26925: PUSH
26926: LD_INT 2
26928: ARRAY
26929: PPUSH
26930: CALL_OW 297
26934: PUSH
26935: LD_VAR 0 1
26939: PPUSH
26940: LD_VAR 0 5
26944: PUSH
26945: LD_INT 1
26947: ARRAY
26948: PPUSH
26949: LD_VAR 0 5
26953: PUSH
26954: LD_INT 2
26956: ARRAY
26957: PPUSH
26958: CALL_OW 297
26962: LESS
26963: IFFALSE 27031
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26965: LD_ADDR_VAR 0 5
26969: PUSH
26970: LD_VAR 0 5
26974: PPUSH
26975: LD_INT 1
26977: PPUSH
26978: LD_VAR 0 2
26982: PUSH
26983: LD_VAR 0 4
26987: ARRAY
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: PPUSH
26993: CALL_OW 1
26997: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
26998: LD_ADDR_VAR 0 5
27002: PUSH
27003: LD_VAR 0 5
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 4
27020: ARRAY
27021: PUSH
27022: LD_INT 2
27024: ARRAY
27025: PPUSH
27026: CALL_OW 1
27030: ST_TO_ADDR
// end ; end ;
27031: GO 26892
27033: POP
27034: POP
// result = nearPosition ;
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_VAR 0 5
27044: ST_TO_ADDR
// end ;
27045: LD_VAR 0 3
27049: RET
// function ForceResetTaskList ( unit ) ; begin
27050: LD_INT 0
27052: PPUSH
// if GetTaskList ( unit ) then
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 437
27062: IFFALSE 27098
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 437
27073: PUSH
27074: LD_INT 1
27076: ARRAY
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PUSH
27082: LD_STRING e
27084: EQUAL
27085: IFFALSE 27098
// SetTaskList ( unit , [ ] ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: EMPTY
27093: PPUSH
27094: CALL_OW 446
// end ;
27098: LD_VAR 0 2
27102: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27103: LD_INT 0
27105: PPUSH
// if IsInUnit ( unit ) then
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 310
27115: IFFALSE 27126
// ComExitBuilding ( unit ) ;
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 122
// end ; end_of_file
27126: LD_VAR 0 2
27130: RET
// every 0 0$1 trigger enableCounter do
27131: LD_EXP 18
27135: IFFALSE 27172
27137: GO 27139
27139: DISABLE
// begin enable ;
27140: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27141: LD_ADDR_OWVAR 47
27145: PUSH
27146: LD_STRING #Am01-1
27148: PUSH
27149: LD_EXP 19
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27158: LD_ADDR_EXP 19
27162: PUSH
27163: LD_EXP 19
27167: PUSH
27168: LD_INT 35
27170: PLUS
27171: ST_TO_ADDR
// end ; end_of_file end_of_file
27172: END
// every 0 0$01 do var timer ;
27173: GO 27175
27175: DISABLE
27176: LD_INT 0
27178: PPUSH
// begin timer := 1 1$30 ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 3150
27186: ST_TO_ADDR
// repeat wait ( timer ) ;
27187: LD_VAR 0 1
27191: PPUSH
27192: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27196: LD_EXP 20
27200: PUSH
27201: LD_INT 6
27203: GREATEREQUAL
27204: PUSH
27205: LD_EXP 20
27209: PUSH
27210: LD_INT 12
27212: LESS
27213: AND
27214: IFFALSE 27230
// timer := timer + 0 0$3 ;
27216: LD_ADDR_VAR 0 1
27220: PUSH
27221: LD_VAR 0 1
27225: PUSH
27226: LD_INT 105
27228: PLUS
27229: ST_TO_ADDR
// if cratesSpawned >= 12 then
27230: LD_EXP 20
27234: PUSH
27235: LD_INT 12
27237: GREATEREQUAL
27238: IFFALSE 27254
// timer := timer + 0 0$9 ;
27240: LD_ADDR_VAR 0 1
27244: PUSH
27245: LD_VAR 0 1
27249: PUSH
27250: LD_INT 315
27252: PLUS
27253: ST_TO_ADDR
// if timer > 3 3$00 then
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 6300
27261: GREATER
27262: IFFALSE 27272
// timer := 0 0$50 ;
27264: LD_ADDR_VAR 0 1
27268: PUSH
27269: LD_INT 1750
27271: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27272: LD_INT 3
27274: PPUSH
27275: LD_INT 5
27277: PPUSH
27278: CALL_OW 12
27282: PPUSH
27283: LD_INT 22
27285: PPUSH
27286: LD_INT 1
27288: PPUSH
27289: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27293: LD_ADDR_EXP 20
27297: PUSH
27298: LD_EXP 20
27302: PUSH
27303: LD_INT 1
27305: PLUS
27306: ST_TO_ADDR
// until false ;
27307: LD_INT 0
27309: IFFALSE 27187
// end ; end_of_file
27311: PPOPN 1
27313: END
// export function Nef_PrepareNature ; var i , un ; begin
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
27318: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: DOUBLE
27325: LD_INT 1
27327: DEC
27328: ST_TO_ADDR
27329: LD_EXP 21
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PUSH
27338: FOR_TO
27339: IFFALSE 27449
// begin uc_side = 0 ;
27341: LD_ADDR_OWVAR 20
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// uc_nation = nation_nature ;
27349: LD_ADDR_OWVAR 21
27353: PUSH
27354: LD_INT 0
27356: ST_TO_ADDR
// hc_class = class_apeman ;
27357: LD_ADDR_OWVAR 28
27361: PUSH
27362: LD_INT 12
27364: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27365: LD_ADDR_OWVAR 31
27369: PUSH
27370: LD_EXP 22
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PUSH
27379: LD_EXP 22
27383: PUSH
27384: LD_INT 2
27386: ARRAY
27387: PUSH
27388: LD_EXP 22
27392: PUSH
27393: LD_INT 3
27395: ARRAY
27396: PUSH
27397: LD_EXP 22
27401: PUSH
27402: LD_INT 4
27404: ARRAY
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27412: LD_ADDR_OWVAR 35
27416: PUSH
27417: LD_EXP 23
27421: ST_TO_ADDR
// un = CreateHuman ;
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: CALL_OW 44
27431: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27432: LD_VAR 0 3
27436: PPUSH
27437: LD_INT 23
27439: PPUSH
27440: LD_INT 0
27442: PPUSH
27443: CALL_OW 49
// end ;
27447: GO 27338
27449: POP
27450: POP
// for i := 1 to animalsAmount [ 2 ] do
27451: LD_ADDR_VAR 0 2
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_EXP 21
27465: PUSH
27466: LD_INT 2
27468: ARRAY
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27581
// begin uc_side = 0 ;
27473: LD_ADDR_OWVAR 20
27477: PUSH
27478: LD_INT 0
27480: ST_TO_ADDR
// uc_nation = nation_nature ;
27481: LD_ADDR_OWVAR 21
27485: PUSH
27486: LD_INT 0
27488: ST_TO_ADDR
// hc_class = class_phororhacos ;
27489: LD_ADDR_OWVAR 28
27493: PUSH
27494: LD_INT 18
27496: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27497: LD_ADDR_OWVAR 31
27501: PUSH
27502: LD_EXP 22
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PUSH
27511: LD_EXP 22
27515: PUSH
27516: LD_INT 2
27518: ARRAY
27519: PUSH
27520: LD_EXP 22
27524: PUSH
27525: LD_INT 3
27527: ARRAY
27528: PUSH
27529: LD_EXP 22
27533: PUSH
27534: LD_INT 4
27536: ARRAY
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27544: LD_ADDR_OWVAR 35
27548: PUSH
27549: LD_EXP 23
27553: ST_TO_ADDR
// un = CreateHuman ;
27554: LD_ADDR_VAR 0 3
27558: PUSH
27559: CALL_OW 44
27563: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27564: LD_VAR 0 3
27568: PPUSH
27569: LD_INT 23
27571: PPUSH
27572: LD_INT 0
27574: PPUSH
27575: CALL_OW 49
// end ;
27579: GO 27470
27581: POP
27582: POP
// for i := 1 to animalsAmount [ 3 ] do
27583: LD_ADDR_VAR 0 2
27587: PUSH
27588: DOUBLE
27589: LD_INT 1
27591: DEC
27592: ST_TO_ADDR
27593: LD_EXP 21
27597: PUSH
27598: LD_INT 3
27600: ARRAY
27601: PUSH
27602: FOR_TO
27603: IFFALSE 27713
// begin uc_side = 0 ;
27605: LD_ADDR_OWVAR 20
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// uc_nation = nation_nature ;
27613: LD_ADDR_OWVAR 21
27617: PUSH
27618: LD_INT 0
27620: ST_TO_ADDR
// hc_class = class_tiger ;
27621: LD_ADDR_OWVAR 28
27625: PUSH
27626: LD_INT 14
27628: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27629: LD_ADDR_OWVAR 31
27633: PUSH
27634: LD_EXP 22
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PUSH
27643: LD_EXP 22
27647: PUSH
27648: LD_INT 2
27650: ARRAY
27651: PUSH
27652: LD_EXP 22
27656: PUSH
27657: LD_INT 3
27659: ARRAY
27660: PUSH
27661: LD_EXP 22
27665: PUSH
27666: LD_INT 4
27668: ARRAY
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27676: LD_ADDR_OWVAR 35
27680: PUSH
27681: LD_EXP 23
27685: ST_TO_ADDR
// un = CreateHuman ;
27686: LD_ADDR_VAR 0 3
27690: PUSH
27691: CALL_OW 44
27695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27696: LD_VAR 0 3
27700: PPUSH
27701: LD_INT 23
27703: PPUSH
27704: LD_INT 0
27706: PPUSH
27707: CALL_OW 49
// end ;
27711: GO 27602
27713: POP
27714: POP
// for i := 1 to animalsAmount [ 4 ] do
27715: LD_ADDR_VAR 0 2
27719: PUSH
27720: DOUBLE
27721: LD_INT 1
27723: DEC
27724: ST_TO_ADDR
27725: LD_EXP 21
27729: PUSH
27730: LD_INT 4
27732: ARRAY
27733: PUSH
27734: FOR_TO
27735: IFFALSE 27845
// begin uc_side = 0 ;
27737: LD_ADDR_OWVAR 20
27741: PUSH
27742: LD_INT 0
27744: ST_TO_ADDR
// uc_nation = nation_nature ;
27745: LD_ADDR_OWVAR 21
27749: PUSH
27750: LD_INT 0
27752: ST_TO_ADDR
// hc_class = 21 ;
27753: LD_ADDR_OWVAR 28
27757: PUSH
27758: LD_INT 21
27760: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27761: LD_ADDR_OWVAR 31
27765: PUSH
27766: LD_EXP 22
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PUSH
27775: LD_EXP 22
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PUSH
27784: LD_EXP 22
27788: PUSH
27789: LD_INT 3
27791: ARRAY
27792: PUSH
27793: LD_EXP 22
27797: PUSH
27798: LD_INT 4
27800: ARRAY
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27808: LD_ADDR_OWVAR 35
27812: PUSH
27813: LD_EXP 23
27817: ST_TO_ADDR
// un = CreateHuman ;
27818: LD_ADDR_VAR 0 3
27822: PUSH
27823: CALL_OW 44
27827: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_INT 23
27835: PPUSH
27836: LD_INT 0
27838: PPUSH
27839: CALL_OW 49
// end ;
27843: GO 27734
27845: POP
27846: POP
// for i := 1 to animalsAmount [ 5 ] do
27847: LD_ADDR_VAR 0 2
27851: PUSH
27852: DOUBLE
27853: LD_INT 1
27855: DEC
27856: ST_TO_ADDR
27857: LD_EXP 21
27861: PUSH
27862: LD_INT 5
27864: ARRAY
27865: PUSH
27866: FOR_TO
27867: IFFALSE 27928
// begin uc_side = 0 ;
27869: LD_ADDR_OWVAR 20
27873: PUSH
27874: LD_INT 0
27876: ST_TO_ADDR
// uc_nation = nation_nature ;
27877: LD_ADDR_OWVAR 21
27881: PUSH
27882: LD_INT 0
27884: ST_TO_ADDR
// vc_chassis := 31 ;
27885: LD_ADDR_OWVAR 37
27889: PUSH
27890: LD_INT 31
27892: ST_TO_ADDR
// vc_control := control_rider ;
27893: LD_ADDR_OWVAR 38
27897: PUSH
27898: LD_INT 4
27900: ST_TO_ADDR
// un := CreateVehicle ;
27901: LD_ADDR_VAR 0 3
27905: PUSH
27906: CALL_OW 45
27910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27911: LD_VAR 0 3
27915: PPUSH
27916: LD_INT 23
27918: PPUSH
27919: LD_INT 0
27921: PPUSH
27922: CALL_OW 49
// end ;
27926: GO 27866
27928: POP
27929: POP
// end ; end_of_file
27930: LD_VAR 0 1
27934: RET
// every 0 0$1 do
27935: GO 27937
27937: DISABLE
// begin enable ;
27938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27939: LD_STRING updateTimer(
27941: PUSH
27942: LD_OWVAR 1
27946: STR
27947: PUSH
27948: LD_STRING );
27950: STR
27951: PPUSH
27952: CALL_OW 559
// end ;
27956: END
// export function SOS_MapStart ( ) ; begin
27957: LD_INT 0
27959: PPUSH
// if streamModeActive then
27960: LD_EXP 64
27964: IFFALSE 27973
// DefineStreamItems ( true ) ;
27966: LD_INT 1
27968: PPUSH
27969: CALL 29777 0 1
// UpdateLuaVariables ( ) ;
27973: CALL 27990 0 0
// UpdateFactoryWaypoints ( ) ;
27977: CALL 42638 0 0
// UpdateWarehouseGatheringPoints ( ) ;
27981: CALL 42895 0 0
// end ;
27985: LD_VAR 0 1
27989: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
27990: LD_INT 0
27992: PPUSH
// if not globalGameSaveCounter then
27993: LD_EXP 63
27997: NOT
27998: IFFALSE 28009
// ToLua ( setGameSaveCounter(0) ) else
28000: LD_STRING setGameSaveCounter(0)
28002: PPUSH
28003: CALL_OW 559
28007: GO 28041
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
28009: LD_ADDR_EXP 63
28013: PUSH
28014: LD_EXP 63
28018: PPUSH
28019: CALL 82563 0 1
28023: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
28024: LD_STRING setGameSaveCounter(
28026: PUSH
28027: LD_EXP 63
28031: STR
28032: PUSH
28033: LD_STRING )
28035: STR
28036: PPUSH
28037: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
28041: LD_STRING setGameDifficulty(
28043: PUSH
28044: LD_OWVAR 67
28048: STR
28049: PUSH
28050: LD_STRING )
28052: STR
28053: PPUSH
28054: CALL_OW 559
// end ;
28058: LD_VAR 0 1
28062: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28063: LD_INT 0
28065: PPUSH
// if p2 = stream_mode then
28066: LD_VAR 0 2
28070: PUSH
28071: LD_INT 100
28073: EQUAL
28074: IFFALSE 29077
// begin if not StreamModeActive then
28076: LD_EXP 64
28080: NOT
28081: IFFALSE 28091
// StreamModeActive := true ;
28083: LD_ADDR_EXP 64
28087: PUSH
28088: LD_INT 1
28090: ST_TO_ADDR
// if p3 = 0 then
28091: LD_VAR 0 3
28095: PUSH
28096: LD_INT 0
28098: EQUAL
28099: IFFALSE 28105
// InitStreamMode ;
28101: CALL 29313 0 0
// if p3 = 1 then
28105: LD_VAR 0 3
28109: PUSH
28110: LD_INT 1
28112: EQUAL
28113: IFFALSE 28123
// sRocket := true ;
28115: LD_ADDR_EXP 69
28119: PUSH
28120: LD_INT 1
28122: ST_TO_ADDR
// if p3 = 2 then
28123: LD_VAR 0 3
28127: PUSH
28128: LD_INT 2
28130: EQUAL
28131: IFFALSE 28141
// sSpeed := true ;
28133: LD_ADDR_EXP 68
28137: PUSH
28138: LD_INT 1
28140: ST_TO_ADDR
// if p3 = 3 then
28141: LD_VAR 0 3
28145: PUSH
28146: LD_INT 3
28148: EQUAL
28149: IFFALSE 28159
// sEngine := true ;
28151: LD_ADDR_EXP 70
28155: PUSH
28156: LD_INT 1
28158: ST_TO_ADDR
// if p3 = 4 then
28159: LD_VAR 0 3
28163: PUSH
28164: LD_INT 4
28166: EQUAL
28167: IFFALSE 28177
// sSpec := true ;
28169: LD_ADDR_EXP 67
28173: PUSH
28174: LD_INT 1
28176: ST_TO_ADDR
// if p3 = 5 then
28177: LD_VAR 0 3
28181: PUSH
28182: LD_INT 5
28184: EQUAL
28185: IFFALSE 28195
// sLevel := true ;
28187: LD_ADDR_EXP 71
28191: PUSH
28192: LD_INT 1
28194: ST_TO_ADDR
// if p3 = 6 then
28195: LD_VAR 0 3
28199: PUSH
28200: LD_INT 6
28202: EQUAL
28203: IFFALSE 28213
// sArmoury := true ;
28205: LD_ADDR_EXP 72
28209: PUSH
28210: LD_INT 1
28212: ST_TO_ADDR
// if p3 = 7 then
28213: LD_VAR 0 3
28217: PUSH
28218: LD_INT 7
28220: EQUAL
28221: IFFALSE 28231
// sRadar := true ;
28223: LD_ADDR_EXP 73
28227: PUSH
28228: LD_INT 1
28230: ST_TO_ADDR
// if p3 = 8 then
28231: LD_VAR 0 3
28235: PUSH
28236: LD_INT 8
28238: EQUAL
28239: IFFALSE 28249
// sBunker := true ;
28241: LD_ADDR_EXP 74
28245: PUSH
28246: LD_INT 1
28248: ST_TO_ADDR
// if p3 = 9 then
28249: LD_VAR 0 3
28253: PUSH
28254: LD_INT 9
28256: EQUAL
28257: IFFALSE 28267
// sHack := true ;
28259: LD_ADDR_EXP 75
28263: PUSH
28264: LD_INT 1
28266: ST_TO_ADDR
// if p3 = 10 then
28267: LD_VAR 0 3
28271: PUSH
28272: LD_INT 10
28274: EQUAL
28275: IFFALSE 28285
// sFire := true ;
28277: LD_ADDR_EXP 76
28281: PUSH
28282: LD_INT 1
28284: ST_TO_ADDR
// if p3 = 11 then
28285: LD_VAR 0 3
28289: PUSH
28290: LD_INT 11
28292: EQUAL
28293: IFFALSE 28303
// sRefresh := true ;
28295: LD_ADDR_EXP 77
28299: PUSH
28300: LD_INT 1
28302: ST_TO_ADDR
// if p3 = 12 then
28303: LD_VAR 0 3
28307: PUSH
28308: LD_INT 12
28310: EQUAL
28311: IFFALSE 28321
// sExp := true ;
28313: LD_ADDR_EXP 78
28317: PUSH
28318: LD_INT 1
28320: ST_TO_ADDR
// if p3 = 13 then
28321: LD_VAR 0 3
28325: PUSH
28326: LD_INT 13
28328: EQUAL
28329: IFFALSE 28339
// sDepot := true ;
28331: LD_ADDR_EXP 79
28335: PUSH
28336: LD_INT 1
28338: ST_TO_ADDR
// if p3 = 14 then
28339: LD_VAR 0 3
28343: PUSH
28344: LD_INT 14
28346: EQUAL
28347: IFFALSE 28357
// sFlag := true ;
28349: LD_ADDR_EXP 80
28353: PUSH
28354: LD_INT 1
28356: ST_TO_ADDR
// if p3 = 15 then
28357: LD_VAR 0 3
28361: PUSH
28362: LD_INT 15
28364: EQUAL
28365: IFFALSE 28375
// sKamikadze := true ;
28367: LD_ADDR_EXP 88
28371: PUSH
28372: LD_INT 1
28374: ST_TO_ADDR
// if p3 = 16 then
28375: LD_VAR 0 3
28379: PUSH
28380: LD_INT 16
28382: EQUAL
28383: IFFALSE 28393
// sTroll := true ;
28385: LD_ADDR_EXP 89
28389: PUSH
28390: LD_INT 1
28392: ST_TO_ADDR
// if p3 = 17 then
28393: LD_VAR 0 3
28397: PUSH
28398: LD_INT 17
28400: EQUAL
28401: IFFALSE 28411
// sSlow := true ;
28403: LD_ADDR_EXP 90
28407: PUSH
28408: LD_INT 1
28410: ST_TO_ADDR
// if p3 = 18 then
28411: LD_VAR 0 3
28415: PUSH
28416: LD_INT 18
28418: EQUAL
28419: IFFALSE 28429
// sLack := true ;
28421: LD_ADDR_EXP 91
28425: PUSH
28426: LD_INT 1
28428: ST_TO_ADDR
// if p3 = 19 then
28429: LD_VAR 0 3
28433: PUSH
28434: LD_INT 19
28436: EQUAL
28437: IFFALSE 28447
// sTank := true ;
28439: LD_ADDR_EXP 93
28443: PUSH
28444: LD_INT 1
28446: ST_TO_ADDR
// if p3 = 20 then
28447: LD_VAR 0 3
28451: PUSH
28452: LD_INT 20
28454: EQUAL
28455: IFFALSE 28465
// sRemote := true ;
28457: LD_ADDR_EXP 94
28461: PUSH
28462: LD_INT 1
28464: ST_TO_ADDR
// if p3 = 21 then
28465: LD_VAR 0 3
28469: PUSH
28470: LD_INT 21
28472: EQUAL
28473: IFFALSE 28483
// sPowell := true ;
28475: LD_ADDR_EXP 95
28479: PUSH
28480: LD_INT 1
28482: ST_TO_ADDR
// if p3 = 22 then
28483: LD_VAR 0 3
28487: PUSH
28488: LD_INT 22
28490: EQUAL
28491: IFFALSE 28501
// sTeleport := true ;
28493: LD_ADDR_EXP 98
28497: PUSH
28498: LD_INT 1
28500: ST_TO_ADDR
// if p3 = 23 then
28501: LD_VAR 0 3
28505: PUSH
28506: LD_INT 23
28508: EQUAL
28509: IFFALSE 28519
// sOilTower := true ;
28511: LD_ADDR_EXP 100
28515: PUSH
28516: LD_INT 1
28518: ST_TO_ADDR
// if p3 = 24 then
28519: LD_VAR 0 3
28523: PUSH
28524: LD_INT 24
28526: EQUAL
28527: IFFALSE 28537
// sShovel := true ;
28529: LD_ADDR_EXP 101
28533: PUSH
28534: LD_INT 1
28536: ST_TO_ADDR
// if p3 = 25 then
28537: LD_VAR 0 3
28541: PUSH
28542: LD_INT 25
28544: EQUAL
28545: IFFALSE 28555
// sSheik := true ;
28547: LD_ADDR_EXP 102
28551: PUSH
28552: LD_INT 1
28554: ST_TO_ADDR
// if p3 = 26 then
28555: LD_VAR 0 3
28559: PUSH
28560: LD_INT 26
28562: EQUAL
28563: IFFALSE 28573
// sEarthquake := true ;
28565: LD_ADDR_EXP 104
28569: PUSH
28570: LD_INT 1
28572: ST_TO_ADDR
// if p3 = 27 then
28573: LD_VAR 0 3
28577: PUSH
28578: LD_INT 27
28580: EQUAL
28581: IFFALSE 28591
// sAI := true ;
28583: LD_ADDR_EXP 105
28587: PUSH
28588: LD_INT 1
28590: ST_TO_ADDR
// if p3 = 28 then
28591: LD_VAR 0 3
28595: PUSH
28596: LD_INT 28
28598: EQUAL
28599: IFFALSE 28609
// sCargo := true ;
28601: LD_ADDR_EXP 108
28605: PUSH
28606: LD_INT 1
28608: ST_TO_ADDR
// if p3 = 29 then
28609: LD_VAR 0 3
28613: PUSH
28614: LD_INT 29
28616: EQUAL
28617: IFFALSE 28627
// sDLaser := true ;
28619: LD_ADDR_EXP 109
28623: PUSH
28624: LD_INT 1
28626: ST_TO_ADDR
// if p3 = 30 then
28627: LD_VAR 0 3
28631: PUSH
28632: LD_INT 30
28634: EQUAL
28635: IFFALSE 28645
// sExchange := true ;
28637: LD_ADDR_EXP 110
28641: PUSH
28642: LD_INT 1
28644: ST_TO_ADDR
// if p3 = 31 then
28645: LD_VAR 0 3
28649: PUSH
28650: LD_INT 31
28652: EQUAL
28653: IFFALSE 28663
// sFac := true ;
28655: LD_ADDR_EXP 111
28659: PUSH
28660: LD_INT 1
28662: ST_TO_ADDR
// if p3 = 32 then
28663: LD_VAR 0 3
28667: PUSH
28668: LD_INT 32
28670: EQUAL
28671: IFFALSE 28681
// sPower := true ;
28673: LD_ADDR_EXP 112
28677: PUSH
28678: LD_INT 1
28680: ST_TO_ADDR
// if p3 = 33 then
28681: LD_VAR 0 3
28685: PUSH
28686: LD_INT 33
28688: EQUAL
28689: IFFALSE 28699
// sRandom := true ;
28691: LD_ADDR_EXP 113
28695: PUSH
28696: LD_INT 1
28698: ST_TO_ADDR
// if p3 = 34 then
28699: LD_VAR 0 3
28703: PUSH
28704: LD_INT 34
28706: EQUAL
28707: IFFALSE 28717
// sShield := true ;
28709: LD_ADDR_EXP 114
28713: PUSH
28714: LD_INT 1
28716: ST_TO_ADDR
// if p3 = 35 then
28717: LD_VAR 0 3
28721: PUSH
28722: LD_INT 35
28724: EQUAL
28725: IFFALSE 28735
// sTime := true ;
28727: LD_ADDR_EXP 115
28731: PUSH
28732: LD_INT 1
28734: ST_TO_ADDR
// if p3 = 36 then
28735: LD_VAR 0 3
28739: PUSH
28740: LD_INT 36
28742: EQUAL
28743: IFFALSE 28753
// sTools := true ;
28745: LD_ADDR_EXP 116
28749: PUSH
28750: LD_INT 1
28752: ST_TO_ADDR
// if p3 = 101 then
28753: LD_VAR 0 3
28757: PUSH
28758: LD_INT 101
28760: EQUAL
28761: IFFALSE 28771
// sSold := true ;
28763: LD_ADDR_EXP 81
28767: PUSH
28768: LD_INT 1
28770: ST_TO_ADDR
// if p3 = 102 then
28771: LD_VAR 0 3
28775: PUSH
28776: LD_INT 102
28778: EQUAL
28779: IFFALSE 28789
// sDiff := true ;
28781: LD_ADDR_EXP 82
28785: PUSH
28786: LD_INT 1
28788: ST_TO_ADDR
// if p3 = 103 then
28789: LD_VAR 0 3
28793: PUSH
28794: LD_INT 103
28796: EQUAL
28797: IFFALSE 28807
// sFog := true ;
28799: LD_ADDR_EXP 85
28803: PUSH
28804: LD_INT 1
28806: ST_TO_ADDR
// if p3 = 104 then
28807: LD_VAR 0 3
28811: PUSH
28812: LD_INT 104
28814: EQUAL
28815: IFFALSE 28825
// sReset := true ;
28817: LD_ADDR_EXP 86
28821: PUSH
28822: LD_INT 1
28824: ST_TO_ADDR
// if p3 = 105 then
28825: LD_VAR 0 3
28829: PUSH
28830: LD_INT 105
28832: EQUAL
28833: IFFALSE 28843
// sSun := true ;
28835: LD_ADDR_EXP 87
28839: PUSH
28840: LD_INT 1
28842: ST_TO_ADDR
// if p3 = 106 then
28843: LD_VAR 0 3
28847: PUSH
28848: LD_INT 106
28850: EQUAL
28851: IFFALSE 28861
// sTiger := true ;
28853: LD_ADDR_EXP 83
28857: PUSH
28858: LD_INT 1
28860: ST_TO_ADDR
// if p3 = 107 then
28861: LD_VAR 0 3
28865: PUSH
28866: LD_INT 107
28868: EQUAL
28869: IFFALSE 28879
// sBomb := true ;
28871: LD_ADDR_EXP 84
28875: PUSH
28876: LD_INT 1
28878: ST_TO_ADDR
// if p3 = 108 then
28879: LD_VAR 0 3
28883: PUSH
28884: LD_INT 108
28886: EQUAL
28887: IFFALSE 28897
// sWound := true ;
28889: LD_ADDR_EXP 92
28893: PUSH
28894: LD_INT 1
28896: ST_TO_ADDR
// if p3 = 109 then
28897: LD_VAR 0 3
28901: PUSH
28902: LD_INT 109
28904: EQUAL
28905: IFFALSE 28915
// sBetray := true ;
28907: LD_ADDR_EXP 96
28911: PUSH
28912: LD_INT 1
28914: ST_TO_ADDR
// if p3 = 110 then
28915: LD_VAR 0 3
28919: PUSH
28920: LD_INT 110
28922: EQUAL
28923: IFFALSE 28933
// sContamin := true ;
28925: LD_ADDR_EXP 97
28929: PUSH
28930: LD_INT 1
28932: ST_TO_ADDR
// if p3 = 111 then
28933: LD_VAR 0 3
28937: PUSH
28938: LD_INT 111
28940: EQUAL
28941: IFFALSE 28951
// sOil := true ;
28943: LD_ADDR_EXP 99
28947: PUSH
28948: LD_INT 1
28950: ST_TO_ADDR
// if p3 = 112 then
28951: LD_VAR 0 3
28955: PUSH
28956: LD_INT 112
28958: EQUAL
28959: IFFALSE 28969
// sStu := true ;
28961: LD_ADDR_EXP 103
28965: PUSH
28966: LD_INT 1
28968: ST_TO_ADDR
// if p3 = 113 then
28969: LD_VAR 0 3
28973: PUSH
28974: LD_INT 113
28976: EQUAL
28977: IFFALSE 28987
// sBazooka := true ;
28979: LD_ADDR_EXP 106
28983: PUSH
28984: LD_INT 1
28986: ST_TO_ADDR
// if p3 = 114 then
28987: LD_VAR 0 3
28991: PUSH
28992: LD_INT 114
28994: EQUAL
28995: IFFALSE 29005
// sMortar := true ;
28997: LD_ADDR_EXP 107
29001: PUSH
29002: LD_INT 1
29004: ST_TO_ADDR
// if p3 = 115 then
29005: LD_VAR 0 3
29009: PUSH
29010: LD_INT 115
29012: EQUAL
29013: IFFALSE 29023
// sRanger := true ;
29015: LD_ADDR_EXP 117
29019: PUSH
29020: LD_INT 1
29022: ST_TO_ADDR
// if p3 = 116 then
29023: LD_VAR 0 3
29027: PUSH
29028: LD_INT 116
29030: EQUAL
29031: IFFALSE 29041
// sComputer := true ;
29033: LD_ADDR_EXP 118
29037: PUSH
29038: LD_INT 1
29040: ST_TO_ADDR
// if p3 = 117 then
29041: LD_VAR 0 3
29045: PUSH
29046: LD_INT 117
29048: EQUAL
29049: IFFALSE 29059
// s30 := true ;
29051: LD_ADDR_EXP 119
29055: PUSH
29056: LD_INT 1
29058: ST_TO_ADDR
// if p3 = 118 then
29059: LD_VAR 0 3
29063: PUSH
29064: LD_INT 118
29066: EQUAL
29067: IFFALSE 29077
// s60 := true ;
29069: LD_ADDR_EXP 120
29073: PUSH
29074: LD_INT 1
29076: ST_TO_ADDR
// end ; if p2 = hack_mode then
29077: LD_VAR 0 2
29081: PUSH
29082: LD_INT 101
29084: EQUAL
29085: IFFALSE 29213
// begin case p3 of 1 :
29087: LD_VAR 0 3
29091: PUSH
29092: LD_INT 1
29094: DOUBLE
29095: EQUAL
29096: IFTRUE 29100
29098: GO 29107
29100: POP
// hHackUnlimitedResources ; 2 :
29101: CALL 41384 0 0
29105: GO 29213
29107: LD_INT 2
29109: DOUBLE
29110: EQUAL
29111: IFTRUE 29115
29113: GO 29122
29115: POP
// hHackSetLevel10 ; 3 :
29116: CALL 41517 0 0
29120: GO 29213
29122: LD_INT 3
29124: DOUBLE
29125: EQUAL
29126: IFTRUE 29130
29128: GO 29137
29130: POP
// hHackSetLevel10YourUnits ; 4 :
29131: CALL 41602 0 0
29135: GO 29213
29137: LD_INT 4
29139: DOUBLE
29140: EQUAL
29141: IFTRUE 29145
29143: GO 29152
29145: POP
// hHackInvincible ; 5 :
29146: CALL 42050 0 0
29150: GO 29213
29152: LD_INT 5
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29167
29160: POP
// hHackInvisible ; 6 :
29161: CALL 42161 0 0
29165: GO 29213
29167: LD_INT 6
29169: DOUBLE
29170: EQUAL
29171: IFTRUE 29175
29173: GO 29182
29175: POP
// hHackChangeYourSide ; 7 :
29176: CALL 42218 0 0
29180: GO 29213
29182: LD_INT 7
29184: DOUBLE
29185: EQUAL
29186: IFTRUE 29190
29188: GO 29197
29190: POP
// hHackChangeUnitSide ; 8 :
29191: CALL 42260 0 0
29195: GO 29213
29197: LD_INT 8
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29212
29205: POP
// hHackFog ; end ;
29206: CALL 42361 0 0
29210: GO 29213
29212: POP
// end ; if p2 = game_save_mode then
29213: LD_VAR 0 2
29217: PUSH
29218: LD_INT 102
29220: EQUAL
29221: IFFALSE 29286
// begin if p3 = 1 then
29223: LD_VAR 0 3
29227: PUSH
29228: LD_INT 1
29230: EQUAL
29231: IFFALSE 29243
// globalGameSaveCounter := p4 ;
29233: LD_ADDR_EXP 63
29237: PUSH
29238: LD_VAR 0 4
29242: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
29243: LD_VAR 0 3
29247: PUSH
29248: LD_INT 2
29250: EQUAL
29251: PUSH
29252: LD_EXP 63
29256: AND
29257: IFFALSE 29276
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
29259: LD_STRING setGameSaveCounter(
29261: PUSH
29262: LD_EXP 63
29266: STR
29267: PUSH
29268: LD_STRING )
29270: STR
29271: PPUSH
29272: CALL_OW 559
// display_strings := globalGameSaveCounter ;
29276: LD_ADDR_OWVAR 47
29280: PUSH
29281: LD_EXP 63
29285: ST_TO_ADDR
// end ; end ;
29286: LD_VAR 0 7
29290: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
29291: GO 29293
29293: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29294: LD_STRING initStreamRollete();
29296: PPUSH
29297: CALL_OW 559
// InitStreamMode ;
29301: CALL 29313 0 0
// DefineStreamItems ( false ) ;
29305: LD_INT 0
29307: PPUSH
29308: CALL 29777 0 1
// end ;
29312: END
// function InitStreamMode ; begin
29313: LD_INT 0
29315: PPUSH
// streamModeActive := false ;
29316: LD_ADDR_EXP 64
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
// normalCounter := 36 ;
29324: LD_ADDR_EXP 65
29328: PUSH
29329: LD_INT 36
29331: ST_TO_ADDR
// hardcoreCounter := 18 ;
29332: LD_ADDR_EXP 66
29336: PUSH
29337: LD_INT 18
29339: ST_TO_ADDR
// sRocket := false ;
29340: LD_ADDR_EXP 69
29344: PUSH
29345: LD_INT 0
29347: ST_TO_ADDR
// sSpeed := false ;
29348: LD_ADDR_EXP 68
29352: PUSH
29353: LD_INT 0
29355: ST_TO_ADDR
// sEngine := false ;
29356: LD_ADDR_EXP 70
29360: PUSH
29361: LD_INT 0
29363: ST_TO_ADDR
// sSpec := false ;
29364: LD_ADDR_EXP 67
29368: PUSH
29369: LD_INT 0
29371: ST_TO_ADDR
// sLevel := false ;
29372: LD_ADDR_EXP 71
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// sArmoury := false ;
29380: LD_ADDR_EXP 72
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// sRadar := false ;
29388: LD_ADDR_EXP 73
29392: PUSH
29393: LD_INT 0
29395: ST_TO_ADDR
// sBunker := false ;
29396: LD_ADDR_EXP 74
29400: PUSH
29401: LD_INT 0
29403: ST_TO_ADDR
// sHack := false ;
29404: LD_ADDR_EXP 75
29408: PUSH
29409: LD_INT 0
29411: ST_TO_ADDR
// sFire := false ;
29412: LD_ADDR_EXP 76
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
// sRefresh := false ;
29420: LD_ADDR_EXP 77
29424: PUSH
29425: LD_INT 0
29427: ST_TO_ADDR
// sExp := false ;
29428: LD_ADDR_EXP 78
29432: PUSH
29433: LD_INT 0
29435: ST_TO_ADDR
// sDepot := false ;
29436: LD_ADDR_EXP 79
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
// sFlag := false ;
29444: LD_ADDR_EXP 80
29448: PUSH
29449: LD_INT 0
29451: ST_TO_ADDR
// sKamikadze := false ;
29452: LD_ADDR_EXP 88
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// sTroll := false ;
29460: LD_ADDR_EXP 89
29464: PUSH
29465: LD_INT 0
29467: ST_TO_ADDR
// sSlow := false ;
29468: LD_ADDR_EXP 90
29472: PUSH
29473: LD_INT 0
29475: ST_TO_ADDR
// sLack := false ;
29476: LD_ADDR_EXP 91
29480: PUSH
29481: LD_INT 0
29483: ST_TO_ADDR
// sTank := false ;
29484: LD_ADDR_EXP 93
29488: PUSH
29489: LD_INT 0
29491: ST_TO_ADDR
// sRemote := false ;
29492: LD_ADDR_EXP 94
29496: PUSH
29497: LD_INT 0
29499: ST_TO_ADDR
// sPowell := false ;
29500: LD_ADDR_EXP 95
29504: PUSH
29505: LD_INT 0
29507: ST_TO_ADDR
// sTeleport := false ;
29508: LD_ADDR_EXP 98
29512: PUSH
29513: LD_INT 0
29515: ST_TO_ADDR
// sOilTower := false ;
29516: LD_ADDR_EXP 100
29520: PUSH
29521: LD_INT 0
29523: ST_TO_ADDR
// sShovel := false ;
29524: LD_ADDR_EXP 101
29528: PUSH
29529: LD_INT 0
29531: ST_TO_ADDR
// sSheik := false ;
29532: LD_ADDR_EXP 102
29536: PUSH
29537: LD_INT 0
29539: ST_TO_ADDR
// sEarthquake := false ;
29540: LD_ADDR_EXP 104
29544: PUSH
29545: LD_INT 0
29547: ST_TO_ADDR
// sAI := false ;
29548: LD_ADDR_EXP 105
29552: PUSH
29553: LD_INT 0
29555: ST_TO_ADDR
// sCargo := false ;
29556: LD_ADDR_EXP 108
29560: PUSH
29561: LD_INT 0
29563: ST_TO_ADDR
// sDLaser := false ;
29564: LD_ADDR_EXP 109
29568: PUSH
29569: LD_INT 0
29571: ST_TO_ADDR
// sExchange := false ;
29572: LD_ADDR_EXP 110
29576: PUSH
29577: LD_INT 0
29579: ST_TO_ADDR
// sFac := false ;
29580: LD_ADDR_EXP 111
29584: PUSH
29585: LD_INT 0
29587: ST_TO_ADDR
// sPower := false ;
29588: LD_ADDR_EXP 112
29592: PUSH
29593: LD_INT 0
29595: ST_TO_ADDR
// sRandom := false ;
29596: LD_ADDR_EXP 113
29600: PUSH
29601: LD_INT 0
29603: ST_TO_ADDR
// sShield := false ;
29604: LD_ADDR_EXP 114
29608: PUSH
29609: LD_INT 0
29611: ST_TO_ADDR
// sTime := false ;
29612: LD_ADDR_EXP 115
29616: PUSH
29617: LD_INT 0
29619: ST_TO_ADDR
// sTools := false ;
29620: LD_ADDR_EXP 116
29624: PUSH
29625: LD_INT 0
29627: ST_TO_ADDR
// sSold := false ;
29628: LD_ADDR_EXP 81
29632: PUSH
29633: LD_INT 0
29635: ST_TO_ADDR
// sDiff := false ;
29636: LD_ADDR_EXP 82
29640: PUSH
29641: LD_INT 0
29643: ST_TO_ADDR
// sFog := false ;
29644: LD_ADDR_EXP 85
29648: PUSH
29649: LD_INT 0
29651: ST_TO_ADDR
// sReset := false ;
29652: LD_ADDR_EXP 86
29656: PUSH
29657: LD_INT 0
29659: ST_TO_ADDR
// sSun := false ;
29660: LD_ADDR_EXP 87
29664: PUSH
29665: LD_INT 0
29667: ST_TO_ADDR
// sTiger := false ;
29668: LD_ADDR_EXP 83
29672: PUSH
29673: LD_INT 0
29675: ST_TO_ADDR
// sBomb := false ;
29676: LD_ADDR_EXP 84
29680: PUSH
29681: LD_INT 0
29683: ST_TO_ADDR
// sWound := false ;
29684: LD_ADDR_EXP 92
29688: PUSH
29689: LD_INT 0
29691: ST_TO_ADDR
// sBetray := false ;
29692: LD_ADDR_EXP 96
29696: PUSH
29697: LD_INT 0
29699: ST_TO_ADDR
// sContamin := false ;
29700: LD_ADDR_EXP 97
29704: PUSH
29705: LD_INT 0
29707: ST_TO_ADDR
// sOil := false ;
29708: LD_ADDR_EXP 99
29712: PUSH
29713: LD_INT 0
29715: ST_TO_ADDR
// sStu := false ;
29716: LD_ADDR_EXP 103
29720: PUSH
29721: LD_INT 0
29723: ST_TO_ADDR
// sBazooka := false ;
29724: LD_ADDR_EXP 106
29728: PUSH
29729: LD_INT 0
29731: ST_TO_ADDR
// sMortar := false ;
29732: LD_ADDR_EXP 107
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
// sRanger := false ;
29740: LD_ADDR_EXP 117
29744: PUSH
29745: LD_INT 0
29747: ST_TO_ADDR
// sComputer := false ;
29748: LD_ADDR_EXP 118
29752: PUSH
29753: LD_INT 0
29755: ST_TO_ADDR
// s30 := false ;
29756: LD_ADDR_EXP 119
29760: PUSH
29761: LD_INT 0
29763: ST_TO_ADDR
// s60 := false ;
29764: LD_ADDR_EXP 120
29768: PUSH
29769: LD_INT 0
29771: ST_TO_ADDR
// end ;
29772: LD_VAR 0 1
29776: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
29777: LD_INT 0
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
// result := [ ] ;
29786: LD_ADDR_VAR 0 2
29790: PUSH
29791: EMPTY
29792: ST_TO_ADDR
// if campaign_id = 1 then
29793: LD_OWVAR 69
29797: PUSH
29798: LD_INT 1
29800: EQUAL
29801: IFFALSE 32967
// begin case mission_number of 1 :
29803: LD_OWVAR 70
29807: PUSH
29808: LD_INT 1
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29892
29816: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29817: LD_ADDR_VAR 0 2
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: LD_INT 4
29827: PUSH
29828: LD_INT 11
29830: PUSH
29831: LD_INT 12
29833: PUSH
29834: LD_INT 15
29836: PUSH
29837: LD_INT 16
29839: PUSH
29840: LD_INT 22
29842: PUSH
29843: LD_INT 23
29845: PUSH
29846: LD_INT 26
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 101
29862: PUSH
29863: LD_INT 102
29865: PUSH
29866: LD_INT 106
29868: PUSH
29869: LD_INT 116
29871: PUSH
29872: LD_INT 117
29874: PUSH
29875: LD_INT 118
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: ST_TO_ADDR
29890: GO 32965
29892: LD_INT 2
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29984
29900: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29901: LD_ADDR_VAR 0 2
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 4
29911: PUSH
29912: LD_INT 11
29914: PUSH
29915: LD_INT 12
29917: PUSH
29918: LD_INT 15
29920: PUSH
29921: LD_INT 16
29923: PUSH
29924: LD_INT 22
29926: PUSH
29927: LD_INT 23
29929: PUSH
29930: LD_INT 26
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 101
29946: PUSH
29947: LD_INT 102
29949: PUSH
29950: LD_INT 105
29952: PUSH
29953: LD_INT 106
29955: PUSH
29956: LD_INT 108
29958: PUSH
29959: LD_INT 116
29961: PUSH
29962: LD_INT 117
29964: PUSH
29965: LD_INT 118
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: ST_TO_ADDR
29982: GO 32965
29984: LD_INT 3
29986: DOUBLE
29987: EQUAL
29988: IFTRUE 29992
29990: GO 30080
29992: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29993: LD_ADDR_VAR 0 2
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: LD_INT 5
30006: PUSH
30007: LD_INT 11
30009: PUSH
30010: LD_INT 12
30012: PUSH
30013: LD_INT 15
30015: PUSH
30016: LD_INT 16
30018: PUSH
30019: LD_INT 22
30021: PUSH
30022: LD_INT 26
30024: PUSH
30025: LD_INT 36
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 101
30042: PUSH
30043: LD_INT 102
30045: PUSH
30046: LD_INT 105
30048: PUSH
30049: LD_INT 106
30051: PUSH
30052: LD_INT 108
30054: PUSH
30055: LD_INT 116
30057: PUSH
30058: LD_INT 117
30060: PUSH
30061: LD_INT 118
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: ST_TO_ADDR
30078: GO 32965
30080: LD_INT 4
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30088
30086: GO 30184
30088: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
30089: LD_ADDR_VAR 0 2
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: LD_INT 5
30102: PUSH
30103: LD_INT 8
30105: PUSH
30106: LD_INT 11
30108: PUSH
30109: LD_INT 12
30111: PUSH
30112: LD_INT 15
30114: PUSH
30115: LD_INT 16
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_INT 23
30123: PUSH
30124: LD_INT 26
30126: PUSH
30127: LD_INT 36
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 101
30146: PUSH
30147: LD_INT 102
30149: PUSH
30150: LD_INT 105
30152: PUSH
30153: LD_INT 106
30155: PUSH
30156: LD_INT 108
30158: PUSH
30159: LD_INT 116
30161: PUSH
30162: LD_INT 117
30164: PUSH
30165: LD_INT 118
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: ST_TO_ADDR
30182: GO 32965
30184: LD_INT 5
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30304
30192: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
30193: LD_ADDR_VAR 0 2
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: LD_INT 4
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: LD_INT 6
30209: PUSH
30210: LD_INT 8
30212: PUSH
30213: LD_INT 11
30215: PUSH
30216: LD_INT 12
30218: PUSH
30219: LD_INT 15
30221: PUSH
30222: LD_INT 16
30224: PUSH
30225: LD_INT 22
30227: PUSH
30228: LD_INT 23
30230: PUSH
30231: LD_INT 25
30233: PUSH
30234: LD_INT 26
30236: PUSH
30237: LD_INT 36
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 101
30258: PUSH
30259: LD_INT 102
30261: PUSH
30262: LD_INT 105
30264: PUSH
30265: LD_INT 106
30267: PUSH
30268: LD_INT 108
30270: PUSH
30271: LD_INT 109
30273: PUSH
30274: LD_INT 112
30276: PUSH
30277: LD_INT 116
30279: PUSH
30280: LD_INT 117
30282: PUSH
30283: LD_INT 118
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: ST_TO_ADDR
30302: GO 32965
30304: LD_INT 6
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30444
30312: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
30313: LD_ADDR_VAR 0 2
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 4
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: LD_INT 6
30329: PUSH
30330: LD_INT 8
30332: PUSH
30333: LD_INT 11
30335: PUSH
30336: LD_INT 12
30338: PUSH
30339: LD_INT 15
30341: PUSH
30342: LD_INT 16
30344: PUSH
30345: LD_INT 20
30347: PUSH
30348: LD_INT 21
30350: PUSH
30351: LD_INT 22
30353: PUSH
30354: LD_INT 23
30356: PUSH
30357: LD_INT 25
30359: PUSH
30360: LD_INT 26
30362: PUSH
30363: LD_INT 30
30365: PUSH
30366: LD_INT 31
30368: PUSH
30369: LD_INT 32
30371: PUSH
30372: LD_INT 36
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 101
30398: PUSH
30399: LD_INT 102
30401: PUSH
30402: LD_INT 105
30404: PUSH
30405: LD_INT 106
30407: PUSH
30408: LD_INT 108
30410: PUSH
30411: LD_INT 109
30413: PUSH
30414: LD_INT 112
30416: PUSH
30417: LD_INT 116
30419: PUSH
30420: LD_INT 117
30422: PUSH
30423: LD_INT 118
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: ST_TO_ADDR
30442: GO 32965
30444: LD_INT 7
30446: DOUBLE
30447: EQUAL
30448: IFTRUE 30452
30450: GO 30564
30452: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
30453: LD_ADDR_VAR 0 2
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 4
30463: PUSH
30464: LD_INT 5
30466: PUSH
30467: LD_INT 7
30469: PUSH
30470: LD_INT 11
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: LD_INT 15
30478: PUSH
30479: LD_INT 16
30481: PUSH
30482: LD_INT 20
30484: PUSH
30485: LD_INT 21
30487: PUSH
30488: LD_INT 22
30490: PUSH
30491: LD_INT 23
30493: PUSH
30494: LD_INT 25
30496: PUSH
30497: LD_INT 26
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 101
30518: PUSH
30519: LD_INT 102
30521: PUSH
30522: LD_INT 103
30524: PUSH
30525: LD_INT 105
30527: PUSH
30528: LD_INT 106
30530: PUSH
30531: LD_INT 108
30533: PUSH
30534: LD_INT 112
30536: PUSH
30537: LD_INT 116
30539: PUSH
30540: LD_INT 117
30542: PUSH
30543: LD_INT 118
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: ST_TO_ADDR
30562: GO 32965
30564: LD_INT 8
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30712
30572: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
30573: LD_ADDR_VAR 0 2
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: LD_INT 4
30583: PUSH
30584: LD_INT 5
30586: PUSH
30587: LD_INT 6
30589: PUSH
30590: LD_INT 7
30592: PUSH
30593: LD_INT 8
30595: PUSH
30596: LD_INT 11
30598: PUSH
30599: LD_INT 12
30601: PUSH
30602: LD_INT 15
30604: PUSH
30605: LD_INT 16
30607: PUSH
30608: LD_INT 20
30610: PUSH
30611: LD_INT 21
30613: PUSH
30614: LD_INT 22
30616: PUSH
30617: LD_INT 23
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 26
30625: PUSH
30626: LD_INT 30
30628: PUSH
30629: LD_INT 31
30631: PUSH
30632: LD_INT 32
30634: PUSH
30635: LD_INT 36
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 101
30662: PUSH
30663: LD_INT 102
30665: PUSH
30666: LD_INT 103
30668: PUSH
30669: LD_INT 105
30671: PUSH
30672: LD_INT 106
30674: PUSH
30675: LD_INT 108
30677: PUSH
30678: LD_INT 109
30680: PUSH
30681: LD_INT 112
30683: PUSH
30684: LD_INT 116
30686: PUSH
30687: LD_INT 117
30689: PUSH
30690: LD_INT 118
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: ST_TO_ADDR
30710: GO 32965
30712: LD_INT 9
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30868
30720: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
30721: LD_ADDR_VAR 0 2
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: LD_INT 6
30737: PUSH
30738: LD_INT 7
30740: PUSH
30741: LD_INT 8
30743: PUSH
30744: LD_INT 11
30746: PUSH
30747: LD_INT 12
30749: PUSH
30750: LD_INT 15
30752: PUSH
30753: LD_INT 16
30755: PUSH
30756: LD_INT 20
30758: PUSH
30759: LD_INT 21
30761: PUSH
30762: LD_INT 22
30764: PUSH
30765: LD_INT 23
30767: PUSH
30768: LD_INT 25
30770: PUSH
30771: LD_INT 26
30773: PUSH
30774: LD_INT 28
30776: PUSH
30777: LD_INT 30
30779: PUSH
30780: LD_INT 31
30782: PUSH
30783: LD_INT 32
30785: PUSH
30786: LD_INT 36
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 101
30814: PUSH
30815: LD_INT 102
30817: PUSH
30818: LD_INT 103
30820: PUSH
30821: LD_INT 105
30823: PUSH
30824: LD_INT 106
30826: PUSH
30827: LD_INT 108
30829: PUSH
30830: LD_INT 109
30832: PUSH
30833: LD_INT 112
30835: PUSH
30836: LD_INT 114
30838: PUSH
30839: LD_INT 116
30841: PUSH
30842: LD_INT 117
30844: PUSH
30845: LD_INT 118
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: ST_TO_ADDR
30866: GO 32965
30868: LD_INT 10
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 31072
30876: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: LD_INT 4
30887: PUSH
30888: LD_INT 5
30890: PUSH
30891: LD_INT 6
30893: PUSH
30894: LD_INT 7
30896: PUSH
30897: LD_INT 8
30899: PUSH
30900: LD_INT 9
30902: PUSH
30903: LD_INT 10
30905: PUSH
30906: LD_INT 11
30908: PUSH
30909: LD_INT 12
30911: PUSH
30912: LD_INT 13
30914: PUSH
30915: LD_INT 14
30917: PUSH
30918: LD_INT 15
30920: PUSH
30921: LD_INT 16
30923: PUSH
30924: LD_INT 17
30926: PUSH
30927: LD_INT 18
30929: PUSH
30930: LD_INT 19
30932: PUSH
30933: LD_INT 20
30935: PUSH
30936: LD_INT 21
30938: PUSH
30939: LD_INT 22
30941: PUSH
30942: LD_INT 23
30944: PUSH
30945: LD_INT 24
30947: PUSH
30948: LD_INT 25
30950: PUSH
30951: LD_INT 26
30953: PUSH
30954: LD_INT 28
30956: PUSH
30957: LD_INT 30
30959: PUSH
30960: LD_INT 31
30962: PUSH
30963: LD_INT 32
30965: PUSH
30966: LD_INT 36
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 101
31002: PUSH
31003: LD_INT 102
31005: PUSH
31006: LD_INT 103
31008: PUSH
31009: LD_INT 104
31011: PUSH
31012: LD_INT 105
31014: PUSH
31015: LD_INT 106
31017: PUSH
31018: LD_INT 107
31020: PUSH
31021: LD_INT 108
31023: PUSH
31024: LD_INT 109
31026: PUSH
31027: LD_INT 110
31029: PUSH
31030: LD_INT 111
31032: PUSH
31033: LD_INT 112
31035: PUSH
31036: LD_INT 114
31038: PUSH
31039: LD_INT 116
31041: PUSH
31042: LD_INT 117
31044: PUSH
31045: LD_INT 118
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 32965
31072: LD_INT 11
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31284
31080: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: LD_INT 4
31094: PUSH
31095: LD_INT 5
31097: PUSH
31098: LD_INT 6
31100: PUSH
31101: LD_INT 7
31103: PUSH
31104: LD_INT 8
31106: PUSH
31107: LD_INT 9
31109: PUSH
31110: LD_INT 10
31112: PUSH
31113: LD_INT 11
31115: PUSH
31116: LD_INT 12
31118: PUSH
31119: LD_INT 13
31121: PUSH
31122: LD_INT 14
31124: PUSH
31125: LD_INT 15
31127: PUSH
31128: LD_INT 16
31130: PUSH
31131: LD_INT 17
31133: PUSH
31134: LD_INT 18
31136: PUSH
31137: LD_INT 19
31139: PUSH
31140: LD_INT 20
31142: PUSH
31143: LD_INT 21
31145: PUSH
31146: LD_INT 22
31148: PUSH
31149: LD_INT 23
31151: PUSH
31152: LD_INT 24
31154: PUSH
31155: LD_INT 25
31157: PUSH
31158: LD_INT 26
31160: PUSH
31161: LD_INT 28
31163: PUSH
31164: LD_INT 30
31166: PUSH
31167: LD_INT 31
31169: PUSH
31170: LD_INT 32
31172: PUSH
31173: LD_INT 34
31175: PUSH
31176: LD_INT 36
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 101
31214: PUSH
31215: LD_INT 102
31217: PUSH
31218: LD_INT 103
31220: PUSH
31221: LD_INT 104
31223: PUSH
31224: LD_INT 105
31226: PUSH
31227: LD_INT 106
31229: PUSH
31230: LD_INT 107
31232: PUSH
31233: LD_INT 108
31235: PUSH
31236: LD_INT 109
31238: PUSH
31239: LD_INT 110
31241: PUSH
31242: LD_INT 111
31244: PUSH
31245: LD_INT 112
31247: PUSH
31248: LD_INT 114
31250: PUSH
31251: LD_INT 116
31253: PUSH
31254: LD_INT 117
31256: PUSH
31257: LD_INT 118
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: ST_TO_ADDR
31282: GO 32965
31284: LD_INT 12
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31512
31292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
31293: LD_ADDR_VAR 0 2
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 3
31306: PUSH
31307: LD_INT 4
31309: PUSH
31310: LD_INT 5
31312: PUSH
31313: LD_INT 6
31315: PUSH
31316: LD_INT 7
31318: PUSH
31319: LD_INT 8
31321: PUSH
31322: LD_INT 9
31324: PUSH
31325: LD_INT 10
31327: PUSH
31328: LD_INT 11
31330: PUSH
31331: LD_INT 12
31333: PUSH
31334: LD_INT 13
31336: PUSH
31337: LD_INT 14
31339: PUSH
31340: LD_INT 15
31342: PUSH
31343: LD_INT 16
31345: PUSH
31346: LD_INT 17
31348: PUSH
31349: LD_INT 18
31351: PUSH
31352: LD_INT 19
31354: PUSH
31355: LD_INT 20
31357: PUSH
31358: LD_INT 21
31360: PUSH
31361: LD_INT 22
31363: PUSH
31364: LD_INT 23
31366: PUSH
31367: LD_INT 24
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 26
31375: PUSH
31376: LD_INT 27
31378: PUSH
31379: LD_INT 28
31381: PUSH
31382: LD_INT 30
31384: PUSH
31385: LD_INT 31
31387: PUSH
31388: LD_INT 32
31390: PUSH
31391: LD_INT 33
31393: PUSH
31394: LD_INT 34
31396: PUSH
31397: LD_INT 36
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 101
31438: PUSH
31439: LD_INT 102
31441: PUSH
31442: LD_INT 103
31444: PUSH
31445: LD_INT 104
31447: PUSH
31448: LD_INT 105
31450: PUSH
31451: LD_INT 106
31453: PUSH
31454: LD_INT 107
31456: PUSH
31457: LD_INT 108
31459: PUSH
31460: LD_INT 109
31462: PUSH
31463: LD_INT 110
31465: PUSH
31466: LD_INT 111
31468: PUSH
31469: LD_INT 112
31471: PUSH
31472: LD_INT 113
31474: PUSH
31475: LD_INT 114
31477: PUSH
31478: LD_INT 116
31480: PUSH
31481: LD_INT 117
31483: PUSH
31484: LD_INT 118
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: ST_TO_ADDR
31510: GO 32965
31512: LD_INT 13
31514: DOUBLE
31515: EQUAL
31516: IFTRUE 31520
31518: GO 31728
31520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
31521: LD_ADDR_VAR 0 2
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: LD_INT 4
31537: PUSH
31538: LD_INT 5
31540: PUSH
31541: LD_INT 8
31543: PUSH
31544: LD_INT 9
31546: PUSH
31547: LD_INT 10
31549: PUSH
31550: LD_INT 11
31552: PUSH
31553: LD_INT 12
31555: PUSH
31556: LD_INT 14
31558: PUSH
31559: LD_INT 15
31561: PUSH
31562: LD_INT 16
31564: PUSH
31565: LD_INT 17
31567: PUSH
31568: LD_INT 18
31570: PUSH
31571: LD_INT 19
31573: PUSH
31574: LD_INT 20
31576: PUSH
31577: LD_INT 21
31579: PUSH
31580: LD_INT 22
31582: PUSH
31583: LD_INT 23
31585: PUSH
31586: LD_INT 24
31588: PUSH
31589: LD_INT 25
31591: PUSH
31592: LD_INT 26
31594: PUSH
31595: LD_INT 27
31597: PUSH
31598: LD_INT 28
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: LD_INT 31
31606: PUSH
31607: LD_INT 32
31609: PUSH
31610: LD_INT 33
31612: PUSH
31613: LD_INT 34
31615: PUSH
31616: LD_INT 36
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 101
31654: PUSH
31655: LD_INT 102
31657: PUSH
31658: LD_INT 103
31660: PUSH
31661: LD_INT 104
31663: PUSH
31664: LD_INT 105
31666: PUSH
31667: LD_INT 106
31669: PUSH
31670: LD_INT 107
31672: PUSH
31673: LD_INT 108
31675: PUSH
31676: LD_INT 109
31678: PUSH
31679: LD_INT 110
31681: PUSH
31682: LD_INT 111
31684: PUSH
31685: LD_INT 112
31687: PUSH
31688: LD_INT 113
31690: PUSH
31691: LD_INT 114
31693: PUSH
31694: LD_INT 116
31696: PUSH
31697: LD_INT 117
31699: PUSH
31700: LD_INT 118
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: ST_TO_ADDR
31726: GO 32965
31728: LD_INT 14
31730: DOUBLE
31731: EQUAL
31732: IFTRUE 31736
31734: GO 31960
31736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
31737: LD_ADDR_VAR 0 2
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 2
31747: PUSH
31748: LD_INT 3
31750: PUSH
31751: LD_INT 4
31753: PUSH
31754: LD_INT 5
31756: PUSH
31757: LD_INT 6
31759: PUSH
31760: LD_INT 7
31762: PUSH
31763: LD_INT 8
31765: PUSH
31766: LD_INT 9
31768: PUSH
31769: LD_INT 10
31771: PUSH
31772: LD_INT 11
31774: PUSH
31775: LD_INT 12
31777: PUSH
31778: LD_INT 13
31780: PUSH
31781: LD_INT 14
31783: PUSH
31784: LD_INT 15
31786: PUSH
31787: LD_INT 16
31789: PUSH
31790: LD_INT 17
31792: PUSH
31793: LD_INT 18
31795: PUSH
31796: LD_INT 19
31798: PUSH
31799: LD_INT 20
31801: PUSH
31802: LD_INT 21
31804: PUSH
31805: LD_INT 22
31807: PUSH
31808: LD_INT 23
31810: PUSH
31811: LD_INT 24
31813: PUSH
31814: LD_INT 25
31816: PUSH
31817: LD_INT 26
31819: PUSH
31820: LD_INT 27
31822: PUSH
31823: LD_INT 28
31825: PUSH
31826: LD_INT 29
31828: PUSH
31829: LD_INT 30
31831: PUSH
31832: LD_INT 31
31834: PUSH
31835: LD_INT 32
31837: PUSH
31838: LD_INT 33
31840: PUSH
31841: LD_INT 34
31843: PUSH
31844: LD_INT 36
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 101
31886: PUSH
31887: LD_INT 102
31889: PUSH
31890: LD_INT 103
31892: PUSH
31893: LD_INT 104
31895: PUSH
31896: LD_INT 105
31898: PUSH
31899: LD_INT 106
31901: PUSH
31902: LD_INT 107
31904: PUSH
31905: LD_INT 108
31907: PUSH
31908: LD_INT 109
31910: PUSH
31911: LD_INT 110
31913: PUSH
31914: LD_INT 111
31916: PUSH
31917: LD_INT 112
31919: PUSH
31920: LD_INT 113
31922: PUSH
31923: LD_INT 114
31925: PUSH
31926: LD_INT 116
31928: PUSH
31929: LD_INT 117
31931: PUSH
31932: LD_INT 118
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: ST_TO_ADDR
31958: GO 32965
31960: LD_INT 15
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 31968
31966: GO 32192
31968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31969: LD_ADDR_VAR 0 2
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 4
31985: PUSH
31986: LD_INT 5
31988: PUSH
31989: LD_INT 6
31991: PUSH
31992: LD_INT 7
31994: PUSH
31995: LD_INT 8
31997: PUSH
31998: LD_INT 9
32000: PUSH
32001: LD_INT 10
32003: PUSH
32004: LD_INT 11
32006: PUSH
32007: LD_INT 12
32009: PUSH
32010: LD_INT 13
32012: PUSH
32013: LD_INT 14
32015: PUSH
32016: LD_INT 15
32018: PUSH
32019: LD_INT 16
32021: PUSH
32022: LD_INT 17
32024: PUSH
32025: LD_INT 18
32027: PUSH
32028: LD_INT 19
32030: PUSH
32031: LD_INT 20
32033: PUSH
32034: LD_INT 21
32036: PUSH
32037: LD_INT 22
32039: PUSH
32040: LD_INT 23
32042: PUSH
32043: LD_INT 24
32045: PUSH
32046: LD_INT 25
32048: PUSH
32049: LD_INT 26
32051: PUSH
32052: LD_INT 27
32054: PUSH
32055: LD_INT 28
32057: PUSH
32058: LD_INT 29
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: LD_INT 31
32066: PUSH
32067: LD_INT 32
32069: PUSH
32070: LD_INT 33
32072: PUSH
32073: LD_INT 34
32075: PUSH
32076: LD_INT 36
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 101
32118: PUSH
32119: LD_INT 102
32121: PUSH
32122: LD_INT 103
32124: PUSH
32125: LD_INT 104
32127: PUSH
32128: LD_INT 105
32130: PUSH
32131: LD_INT 106
32133: PUSH
32134: LD_INT 107
32136: PUSH
32137: LD_INT 108
32139: PUSH
32140: LD_INT 109
32142: PUSH
32143: LD_INT 110
32145: PUSH
32146: LD_INT 111
32148: PUSH
32149: LD_INT 112
32151: PUSH
32152: LD_INT 113
32154: PUSH
32155: LD_INT 114
32157: PUSH
32158: LD_INT 116
32160: PUSH
32161: LD_INT 117
32163: PUSH
32164: LD_INT 118
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 32965
32192: LD_INT 16
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32336
32200: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
32201: LD_ADDR_VAR 0 2
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: LD_INT 5
32214: PUSH
32215: LD_INT 7
32217: PUSH
32218: LD_INT 11
32220: PUSH
32221: LD_INT 12
32223: PUSH
32224: LD_INT 15
32226: PUSH
32227: LD_INT 16
32229: PUSH
32230: LD_INT 20
32232: PUSH
32233: LD_INT 21
32235: PUSH
32236: LD_INT 22
32238: PUSH
32239: LD_INT 23
32241: PUSH
32242: LD_INT 25
32244: PUSH
32245: LD_INT 26
32247: PUSH
32248: LD_INT 30
32250: PUSH
32251: LD_INT 31
32253: PUSH
32254: LD_INT 32
32256: PUSH
32257: LD_INT 33
32259: PUSH
32260: LD_INT 34
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 101
32286: PUSH
32287: LD_INT 102
32289: PUSH
32290: LD_INT 103
32292: PUSH
32293: LD_INT 106
32295: PUSH
32296: LD_INT 108
32298: PUSH
32299: LD_INT 112
32301: PUSH
32302: LD_INT 113
32304: PUSH
32305: LD_INT 114
32307: PUSH
32308: LD_INT 116
32310: PUSH
32311: LD_INT 117
32313: PUSH
32314: LD_INT 118
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: ST_TO_ADDR
32334: GO 32965
32336: LD_INT 17
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32568
32344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
32345: LD_ADDR_VAR 0 2
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: LD_INT 3
32358: PUSH
32359: LD_INT 4
32361: PUSH
32362: LD_INT 5
32364: PUSH
32365: LD_INT 6
32367: PUSH
32368: LD_INT 7
32370: PUSH
32371: LD_INT 8
32373: PUSH
32374: LD_INT 9
32376: PUSH
32377: LD_INT 10
32379: PUSH
32380: LD_INT 11
32382: PUSH
32383: LD_INT 12
32385: PUSH
32386: LD_INT 13
32388: PUSH
32389: LD_INT 14
32391: PUSH
32392: LD_INT 15
32394: PUSH
32395: LD_INT 16
32397: PUSH
32398: LD_INT 17
32400: PUSH
32401: LD_INT 18
32403: PUSH
32404: LD_INT 19
32406: PUSH
32407: LD_INT 20
32409: PUSH
32410: LD_INT 21
32412: PUSH
32413: LD_INT 22
32415: PUSH
32416: LD_INT 23
32418: PUSH
32419: LD_INT 24
32421: PUSH
32422: LD_INT 25
32424: PUSH
32425: LD_INT 26
32427: PUSH
32428: LD_INT 27
32430: PUSH
32431: LD_INT 28
32433: PUSH
32434: LD_INT 29
32436: PUSH
32437: LD_INT 30
32439: PUSH
32440: LD_INT 31
32442: PUSH
32443: LD_INT 32
32445: PUSH
32446: LD_INT 33
32448: PUSH
32449: LD_INT 34
32451: PUSH
32452: LD_INT 36
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 101
32494: PUSH
32495: LD_INT 102
32497: PUSH
32498: LD_INT 103
32500: PUSH
32501: LD_INT 104
32503: PUSH
32504: LD_INT 105
32506: PUSH
32507: LD_INT 106
32509: PUSH
32510: LD_INT 107
32512: PUSH
32513: LD_INT 108
32515: PUSH
32516: LD_INT 109
32518: PUSH
32519: LD_INT 110
32521: PUSH
32522: LD_INT 111
32524: PUSH
32525: LD_INT 112
32527: PUSH
32528: LD_INT 113
32530: PUSH
32531: LD_INT 114
32533: PUSH
32534: LD_INT 116
32536: PUSH
32537: LD_INT 117
32539: PUSH
32540: LD_INT 118
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: ST_TO_ADDR
32566: GO 32965
32568: LD_INT 18
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32724
32576: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
32577: LD_ADDR_VAR 0 2
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: LD_INT 5
32590: PUSH
32591: LD_INT 7
32593: PUSH
32594: LD_INT 11
32596: PUSH
32597: LD_INT 12
32599: PUSH
32600: LD_INT 15
32602: PUSH
32603: LD_INT 16
32605: PUSH
32606: LD_INT 20
32608: PUSH
32609: LD_INT 21
32611: PUSH
32612: LD_INT 22
32614: PUSH
32615: LD_INT 23
32617: PUSH
32618: LD_INT 25
32620: PUSH
32621: LD_INT 26
32623: PUSH
32624: LD_INT 30
32626: PUSH
32627: LD_INT 31
32629: PUSH
32630: LD_INT 32
32632: PUSH
32633: LD_INT 33
32635: PUSH
32636: LD_INT 34
32638: PUSH
32639: LD_INT 35
32641: PUSH
32642: LD_INT 36
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 101
32670: PUSH
32671: LD_INT 102
32673: PUSH
32674: LD_INT 103
32676: PUSH
32677: LD_INT 106
32679: PUSH
32680: LD_INT 108
32682: PUSH
32683: LD_INT 112
32685: PUSH
32686: LD_INT 113
32688: PUSH
32689: LD_INT 114
32691: PUSH
32692: LD_INT 115
32694: PUSH
32695: LD_INT 116
32697: PUSH
32698: LD_INT 117
32700: PUSH
32701: LD_INT 118
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: ST_TO_ADDR
32722: GO 32965
32724: LD_INT 19
32726: DOUBLE
32727: EQUAL
32728: IFTRUE 32732
32730: GO 32964
32732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
32733: LD_ADDR_VAR 0 2
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: LD_INT 4
32749: PUSH
32750: LD_INT 5
32752: PUSH
32753: LD_INT 6
32755: PUSH
32756: LD_INT 7
32758: PUSH
32759: LD_INT 8
32761: PUSH
32762: LD_INT 9
32764: PUSH
32765: LD_INT 10
32767: PUSH
32768: LD_INT 11
32770: PUSH
32771: LD_INT 12
32773: PUSH
32774: LD_INT 13
32776: PUSH
32777: LD_INT 14
32779: PUSH
32780: LD_INT 15
32782: PUSH
32783: LD_INT 16
32785: PUSH
32786: LD_INT 17
32788: PUSH
32789: LD_INT 18
32791: PUSH
32792: LD_INT 19
32794: PUSH
32795: LD_INT 20
32797: PUSH
32798: LD_INT 21
32800: PUSH
32801: LD_INT 22
32803: PUSH
32804: LD_INT 23
32806: PUSH
32807: LD_INT 24
32809: PUSH
32810: LD_INT 25
32812: PUSH
32813: LD_INT 26
32815: PUSH
32816: LD_INT 27
32818: PUSH
32819: LD_INT 28
32821: PUSH
32822: LD_INT 29
32824: PUSH
32825: LD_INT 30
32827: PUSH
32828: LD_INT 31
32830: PUSH
32831: LD_INT 32
32833: PUSH
32834: LD_INT 33
32836: PUSH
32837: LD_INT 34
32839: PUSH
32840: LD_INT 35
32842: PUSH
32843: LD_INT 36
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 101
32886: PUSH
32887: LD_INT 102
32889: PUSH
32890: LD_INT 103
32892: PUSH
32893: LD_INT 104
32895: PUSH
32896: LD_INT 105
32898: PUSH
32899: LD_INT 106
32901: PUSH
32902: LD_INT 107
32904: PUSH
32905: LD_INT 108
32907: PUSH
32908: LD_INT 109
32910: PUSH
32911: LD_INT 110
32913: PUSH
32914: LD_INT 111
32916: PUSH
32917: LD_INT 112
32919: PUSH
32920: LD_INT 113
32922: PUSH
32923: LD_INT 114
32925: PUSH
32926: LD_INT 115
32928: PUSH
32929: LD_INT 116
32931: PUSH
32932: LD_INT 117
32934: PUSH
32935: LD_INT 118
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: ST_TO_ADDR
32962: GO 32965
32964: POP
// end else
32965: GO 33196
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32967: LD_ADDR_VAR 0 2
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 4
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: LD_INT 6
32989: PUSH
32990: LD_INT 7
32992: PUSH
32993: LD_INT 8
32995: PUSH
32996: LD_INT 9
32998: PUSH
32999: LD_INT 10
33001: PUSH
33002: LD_INT 11
33004: PUSH
33005: LD_INT 12
33007: PUSH
33008: LD_INT 13
33010: PUSH
33011: LD_INT 14
33013: PUSH
33014: LD_INT 15
33016: PUSH
33017: LD_INT 16
33019: PUSH
33020: LD_INT 17
33022: PUSH
33023: LD_INT 18
33025: PUSH
33026: LD_INT 19
33028: PUSH
33029: LD_INT 20
33031: PUSH
33032: LD_INT 21
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_INT 23
33040: PUSH
33041: LD_INT 24
33043: PUSH
33044: LD_INT 25
33046: PUSH
33047: LD_INT 26
33049: PUSH
33050: LD_INT 27
33052: PUSH
33053: LD_INT 28
33055: PUSH
33056: LD_INT 29
33058: PUSH
33059: LD_INT 30
33061: PUSH
33062: LD_INT 31
33064: PUSH
33065: LD_INT 32
33067: PUSH
33068: LD_INT 33
33070: PUSH
33071: LD_INT 34
33073: PUSH
33074: LD_INT 35
33076: PUSH
33077: LD_INT 36
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 101
33120: PUSH
33121: LD_INT 102
33123: PUSH
33124: LD_INT 103
33126: PUSH
33127: LD_INT 104
33129: PUSH
33130: LD_INT 105
33132: PUSH
33133: LD_INT 106
33135: PUSH
33136: LD_INT 107
33138: PUSH
33139: LD_INT 108
33141: PUSH
33142: LD_INT 109
33144: PUSH
33145: LD_INT 110
33147: PUSH
33148: LD_INT 111
33150: PUSH
33151: LD_INT 112
33153: PUSH
33154: LD_INT 113
33156: PUSH
33157: LD_INT 114
33159: PUSH
33160: LD_INT 115
33162: PUSH
33163: LD_INT 116
33165: PUSH
33166: LD_INT 117
33168: PUSH
33169: LD_INT 118
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// if result then
33196: LD_VAR 0 2
33200: IFFALSE 33986
// begin normal :=  ;
33202: LD_ADDR_VAR 0 5
33206: PUSH
33207: LD_STRING 
33209: ST_TO_ADDR
// hardcore :=  ;
33210: LD_ADDR_VAR 0 6
33214: PUSH
33215: LD_STRING 
33217: ST_TO_ADDR
// active :=  ;
33218: LD_ADDR_VAR 0 7
33222: PUSH
33223: LD_STRING 
33225: ST_TO_ADDR
// for i = 1 to normalCounter do
33226: LD_ADDR_VAR 0 8
33230: PUSH
33231: DOUBLE
33232: LD_INT 1
33234: DEC
33235: ST_TO_ADDR
33236: LD_EXP 65
33240: PUSH
33241: FOR_TO
33242: IFFALSE 33343
// begin tmp := 0 ;
33244: LD_ADDR_VAR 0 3
33248: PUSH
33249: LD_STRING 0
33251: ST_TO_ADDR
// if result [ 1 ] then
33252: LD_VAR 0 2
33256: PUSH
33257: LD_INT 1
33259: ARRAY
33260: IFFALSE 33325
// if result [ 1 ] [ 1 ] = i then
33262: LD_VAR 0 2
33266: PUSH
33267: LD_INT 1
33269: ARRAY
33270: PUSH
33271: LD_INT 1
33273: ARRAY
33274: PUSH
33275: LD_VAR 0 8
33279: EQUAL
33280: IFFALSE 33325
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33282: LD_ADDR_VAR 0 2
33286: PUSH
33287: LD_VAR 0 2
33291: PPUSH
33292: LD_INT 1
33294: PPUSH
33295: LD_VAR 0 2
33299: PUSH
33300: LD_INT 1
33302: ARRAY
33303: PPUSH
33304: LD_INT 1
33306: PPUSH
33307: CALL_OW 3
33311: PPUSH
33312: CALL_OW 1
33316: ST_TO_ADDR
// tmp := 1 ;
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: LD_STRING 1
33324: ST_TO_ADDR
// end ; normal := normal & tmp ;
33325: LD_ADDR_VAR 0 5
33329: PUSH
33330: LD_VAR 0 5
33334: PUSH
33335: LD_VAR 0 3
33339: STR
33340: ST_TO_ADDR
// end ;
33341: GO 33241
33343: POP
33344: POP
// for i = 1 to hardcoreCounter do
33345: LD_ADDR_VAR 0 8
33349: PUSH
33350: DOUBLE
33351: LD_INT 1
33353: DEC
33354: ST_TO_ADDR
33355: LD_EXP 66
33359: PUSH
33360: FOR_TO
33361: IFFALSE 33466
// begin tmp := 0 ;
33363: LD_ADDR_VAR 0 3
33367: PUSH
33368: LD_STRING 0
33370: ST_TO_ADDR
// if result [ 2 ] then
33371: LD_VAR 0 2
33375: PUSH
33376: LD_INT 2
33378: ARRAY
33379: IFFALSE 33448
// if result [ 2 ] [ 1 ] = 100 + i then
33381: LD_VAR 0 2
33385: PUSH
33386: LD_INT 2
33388: ARRAY
33389: PUSH
33390: LD_INT 1
33392: ARRAY
33393: PUSH
33394: LD_INT 100
33396: PUSH
33397: LD_VAR 0 8
33401: PLUS
33402: EQUAL
33403: IFFALSE 33448
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33405: LD_ADDR_VAR 0 2
33409: PUSH
33410: LD_VAR 0 2
33414: PPUSH
33415: LD_INT 2
33417: PPUSH
33418: LD_VAR 0 2
33422: PUSH
33423: LD_INT 2
33425: ARRAY
33426: PPUSH
33427: LD_INT 1
33429: PPUSH
33430: CALL_OW 3
33434: PPUSH
33435: CALL_OW 1
33439: ST_TO_ADDR
// tmp := 1 ;
33440: LD_ADDR_VAR 0 3
33444: PUSH
33445: LD_STRING 1
33447: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33448: LD_ADDR_VAR 0 6
33452: PUSH
33453: LD_VAR 0 6
33457: PUSH
33458: LD_VAR 0 3
33462: STR
33463: ST_TO_ADDR
// end ;
33464: GO 33360
33466: POP
33467: POP
// if isGameLoad then
33468: LD_VAR 0 1
33472: IFFALSE 33947
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
33474: LD_ADDR_VAR 0 4
33478: PUSH
33479: LD_EXP 69
33483: PUSH
33484: LD_EXP 68
33488: PUSH
33489: LD_EXP 70
33493: PUSH
33494: LD_EXP 67
33498: PUSH
33499: LD_EXP 71
33503: PUSH
33504: LD_EXP 72
33508: PUSH
33509: LD_EXP 73
33513: PUSH
33514: LD_EXP 74
33518: PUSH
33519: LD_EXP 75
33523: PUSH
33524: LD_EXP 76
33528: PUSH
33529: LD_EXP 77
33533: PUSH
33534: LD_EXP 78
33538: PUSH
33539: LD_EXP 79
33543: PUSH
33544: LD_EXP 80
33548: PUSH
33549: LD_EXP 88
33553: PUSH
33554: LD_EXP 89
33558: PUSH
33559: LD_EXP 90
33563: PUSH
33564: LD_EXP 91
33568: PUSH
33569: LD_EXP 93
33573: PUSH
33574: LD_EXP 94
33578: PUSH
33579: LD_EXP 95
33583: PUSH
33584: LD_EXP 98
33588: PUSH
33589: LD_EXP 100
33593: PUSH
33594: LD_EXP 101
33598: PUSH
33599: LD_EXP 102
33603: PUSH
33604: LD_EXP 104
33608: PUSH
33609: LD_EXP 105
33613: PUSH
33614: LD_EXP 108
33618: PUSH
33619: LD_EXP 109
33623: PUSH
33624: LD_EXP 110
33628: PUSH
33629: LD_EXP 111
33633: PUSH
33634: LD_EXP 112
33638: PUSH
33639: LD_EXP 113
33643: PUSH
33644: LD_EXP 114
33648: PUSH
33649: LD_EXP 115
33653: PUSH
33654: LD_EXP 116
33658: PUSH
33659: LD_EXP 81
33663: PUSH
33664: LD_EXP 82
33668: PUSH
33669: LD_EXP 85
33673: PUSH
33674: LD_EXP 86
33678: PUSH
33679: LD_EXP 87
33683: PUSH
33684: LD_EXP 83
33688: PUSH
33689: LD_EXP 84
33693: PUSH
33694: LD_EXP 92
33698: PUSH
33699: LD_EXP 96
33703: PUSH
33704: LD_EXP 97
33708: PUSH
33709: LD_EXP 99
33713: PUSH
33714: LD_EXP 103
33718: PUSH
33719: LD_EXP 106
33723: PUSH
33724: LD_EXP 107
33728: PUSH
33729: LD_EXP 117
33733: PUSH
33734: LD_EXP 118
33738: PUSH
33739: LD_EXP 119
33743: PUSH
33744: LD_EXP 120
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
// tmp :=  ;
33805: LD_ADDR_VAR 0 3
33809: PUSH
33810: LD_STRING 
33812: ST_TO_ADDR
// for i = 1 to normalCounter do
33813: LD_ADDR_VAR 0 8
33817: PUSH
33818: DOUBLE
33819: LD_INT 1
33821: DEC
33822: ST_TO_ADDR
33823: LD_EXP 65
33827: PUSH
33828: FOR_TO
33829: IFFALSE 33865
// begin if flags [ i ] then
33831: LD_VAR 0 4
33835: PUSH
33836: LD_VAR 0 8
33840: ARRAY
33841: IFFALSE 33863
// tmp := tmp & i & ; ;
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_VAR 0 3
33852: PUSH
33853: LD_VAR 0 8
33857: STR
33858: PUSH
33859: LD_STRING ;
33861: STR
33862: ST_TO_ADDR
// end ;
33863: GO 33828
33865: POP
33866: POP
// for i = 1 to hardcoreCounter do
33867: LD_ADDR_VAR 0 8
33871: PUSH
33872: DOUBLE
33873: LD_INT 1
33875: DEC
33876: ST_TO_ADDR
33877: LD_EXP 66
33881: PUSH
33882: FOR_TO
33883: IFFALSE 33929
// begin if flags [ normalCounter + i ] then
33885: LD_VAR 0 4
33889: PUSH
33890: LD_EXP 65
33894: PUSH
33895: LD_VAR 0 8
33899: PLUS
33900: ARRAY
33901: IFFALSE 33927
// tmp := tmp & ( 100 + i ) & ; ;
33903: LD_ADDR_VAR 0 3
33907: PUSH
33908: LD_VAR 0 3
33912: PUSH
33913: LD_INT 100
33915: PUSH
33916: LD_VAR 0 8
33920: PLUS
33921: STR
33922: PUSH
33923: LD_STRING ;
33925: STR
33926: ST_TO_ADDR
// end ;
33927: GO 33882
33929: POP
33930: POP
// if tmp then
33931: LD_VAR 0 3
33935: IFFALSE 33947
// active := tmp ;
33937: LD_ADDR_VAR 0 7
33941: PUSH
33942: LD_VAR 0 3
33946: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33947: LD_STRING getStreamItemsFromMission("
33949: PUSH
33950: LD_VAR 0 5
33954: STR
33955: PUSH
33956: LD_STRING ","
33958: STR
33959: PUSH
33960: LD_VAR 0 6
33964: STR
33965: PUSH
33966: LD_STRING ","
33968: STR
33969: PUSH
33970: LD_VAR 0 7
33974: STR
33975: PUSH
33976: LD_STRING ")
33978: STR
33979: PPUSH
33980: CALL_OW 559
// end else
33984: GO 33993
// ToLua ( getStreamItemsFromMission("","","") ) ;
33986: LD_STRING getStreamItemsFromMission("","","")
33988: PPUSH
33989: CALL_OW 559
// end ;
33993: LD_VAR 0 2
33997: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33998: LD_EXP 64
34002: PUSH
34003: LD_EXP 69
34007: AND
34008: IFFALSE 34132
34010: GO 34012
34012: DISABLE
34013: LD_INT 0
34015: PPUSH
34016: PPUSH
// begin enable ;
34017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34018: LD_ADDR_VAR 0 2
34022: PUSH
34023: LD_INT 22
34025: PUSH
34026: LD_OWVAR 2
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: LD_INT 34
34040: PUSH
34041: LD_INT 7
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 34
34050: PUSH
34051: LD_INT 45
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 34
34060: PUSH
34061: LD_INT 28
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 34
34070: PUSH
34071: LD_INT 47
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 69
34093: ST_TO_ADDR
// if not tmp then
34094: LD_VAR 0 2
34098: NOT
34099: IFFALSE 34103
// exit ;
34101: GO 34132
// for i in tmp do
34103: LD_ADDR_VAR 0 1
34107: PUSH
34108: LD_VAR 0 2
34112: PUSH
34113: FOR_IN
34114: IFFALSE 34130
// begin SetLives ( i , 0 ) ;
34116: LD_VAR 0 1
34120: PPUSH
34121: LD_INT 0
34123: PPUSH
34124: CALL_OW 234
// end ;
34128: GO 34113
34130: POP
34131: POP
// end ;
34132: PPOPN 2
34134: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34135: LD_EXP 64
34139: PUSH
34140: LD_EXP 70
34144: AND
34145: IFFALSE 34229
34147: GO 34149
34149: DISABLE
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
// begin enable ;
34154: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34155: LD_ADDR_VAR 0 2
34159: PUSH
34160: LD_INT 22
34162: PUSH
34163: LD_OWVAR 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 32
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PPUSH
34186: CALL_OW 69
34190: ST_TO_ADDR
// if not tmp then
34191: LD_VAR 0 2
34195: NOT
34196: IFFALSE 34200
// exit ;
34198: GO 34229
// for i in tmp do
34200: LD_ADDR_VAR 0 1
34204: PUSH
34205: LD_VAR 0 2
34209: PUSH
34210: FOR_IN
34211: IFFALSE 34227
// begin SetLives ( i , 0 ) ;
34213: LD_VAR 0 1
34217: PPUSH
34218: LD_INT 0
34220: PPUSH
34221: CALL_OW 234
// end ;
34225: GO 34210
34227: POP
34228: POP
// end ;
34229: PPOPN 2
34231: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34232: LD_EXP 64
34236: PUSH
34237: LD_EXP 67
34241: AND
34242: IFFALSE 34335
34244: GO 34246
34246: DISABLE
34247: LD_INT 0
34249: PPUSH
// begin enable ;
34250: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34251: LD_ADDR_VAR 0 1
34255: PUSH
34256: LD_INT 22
34258: PUSH
34259: LD_OWVAR 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 25
34273: PUSH
34274: LD_INT 5
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 25
34283: PUSH
34284: LD_INT 9
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 25
34293: PUSH
34294: LD_INT 8
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PPUSH
34311: CALL_OW 69
34315: PUSH
34316: FOR_IN
34317: IFFALSE 34333
// begin SetClass ( i , 1 ) ;
34319: LD_VAR 0 1
34323: PPUSH
34324: LD_INT 1
34326: PPUSH
34327: CALL_OW 336
// end ;
34331: GO 34316
34333: POP
34334: POP
// end ;
34335: PPOPN 1
34337: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34338: LD_EXP 64
34342: PUSH
34343: LD_EXP 68
34347: AND
34348: PUSH
34349: LD_OWVAR 65
34353: PUSH
34354: LD_INT 7
34356: LESS
34357: AND
34358: IFFALSE 34372
34360: GO 34362
34362: DISABLE
// begin enable ;
34363: ENABLE
// game_speed := 7 ;
34364: LD_ADDR_OWVAR 65
34368: PUSH
34369: LD_INT 7
34371: ST_TO_ADDR
// end ;
34372: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34373: LD_EXP 64
34377: PUSH
34378: LD_EXP 71
34382: AND
34383: IFFALSE 34585
34385: GO 34387
34387: DISABLE
34388: LD_INT 0
34390: PPUSH
34391: PPUSH
34392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 81
34400: PUSH
34401: LD_OWVAR 2
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 21
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PPUSH
34424: CALL_OW 69
34428: ST_TO_ADDR
// if not tmp then
34429: LD_VAR 0 3
34433: NOT
34434: IFFALSE 34438
// exit ;
34436: GO 34585
// if tmp > 5 then
34438: LD_VAR 0 3
34442: PUSH
34443: LD_INT 5
34445: GREATER
34446: IFFALSE 34458
// k := 5 else
34448: LD_ADDR_VAR 0 2
34452: PUSH
34453: LD_INT 5
34455: ST_TO_ADDR
34456: GO 34468
// k := tmp ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_VAR 0 3
34467: ST_TO_ADDR
// for i := 1 to k do
34468: LD_ADDR_VAR 0 1
34472: PUSH
34473: DOUBLE
34474: LD_INT 1
34476: DEC
34477: ST_TO_ADDR
34478: LD_VAR 0 2
34482: PUSH
34483: FOR_TO
34484: IFFALSE 34583
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
34486: LD_VAR 0 3
34490: PUSH
34491: LD_VAR 0 1
34495: ARRAY
34496: PPUSH
34497: LD_VAR 0 1
34501: PUSH
34502: LD_INT 4
34504: MOD
34505: PUSH
34506: LD_INT 1
34508: PLUS
34509: PPUSH
34510: CALL_OW 259
34514: PUSH
34515: LD_INT 10
34517: LESS
34518: IFFALSE 34581
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
34520: LD_VAR 0 3
34524: PUSH
34525: LD_VAR 0 1
34529: ARRAY
34530: PPUSH
34531: LD_VAR 0 1
34535: PUSH
34536: LD_INT 4
34538: MOD
34539: PUSH
34540: LD_INT 1
34542: PLUS
34543: PPUSH
34544: LD_VAR 0 3
34548: PUSH
34549: LD_VAR 0 1
34553: ARRAY
34554: PPUSH
34555: LD_VAR 0 1
34559: PUSH
34560: LD_INT 4
34562: MOD
34563: PUSH
34564: LD_INT 1
34566: PLUS
34567: PPUSH
34568: CALL_OW 259
34572: PUSH
34573: LD_INT 1
34575: PLUS
34576: PPUSH
34577: CALL_OW 237
34581: GO 34483
34583: POP
34584: POP
// end ;
34585: PPOPN 3
34587: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
34588: LD_EXP 64
34592: PUSH
34593: LD_EXP 72
34597: AND
34598: IFFALSE 34618
34600: GO 34602
34602: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
34603: LD_INT 4
34605: PPUSH
34606: LD_OWVAR 2
34610: PPUSH
34611: LD_INT 0
34613: PPUSH
34614: CALL_OW 324
34618: END
// every 0 0$1 trigger StreamModeActive and sShovel do
34619: LD_EXP 64
34623: PUSH
34624: LD_EXP 101
34628: AND
34629: IFFALSE 34649
34631: GO 34633
34633: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
34634: LD_INT 19
34636: PPUSH
34637: LD_OWVAR 2
34641: PPUSH
34642: LD_INT 0
34644: PPUSH
34645: CALL_OW 324
34649: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
34650: LD_EXP 64
34654: PUSH
34655: LD_EXP 73
34659: AND
34660: IFFALSE 34762
34662: GO 34664
34664: DISABLE
34665: LD_INT 0
34667: PPUSH
34668: PPUSH
// begin enable ;
34669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
34670: LD_ADDR_VAR 0 2
34674: PUSH
34675: LD_INT 22
34677: PUSH
34678: LD_OWVAR 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: LD_INT 34
34692: PUSH
34693: LD_INT 11
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 34
34702: PUSH
34703: LD_INT 30
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PPUSH
34719: CALL_OW 69
34723: ST_TO_ADDR
// if not tmp then
34724: LD_VAR 0 2
34728: NOT
34729: IFFALSE 34733
// exit ;
34731: GO 34762
// for i in tmp do
34733: LD_ADDR_VAR 0 1
34737: PUSH
34738: LD_VAR 0 2
34742: PUSH
34743: FOR_IN
34744: IFFALSE 34760
// begin SetLives ( i , 0 ) ;
34746: LD_VAR 0 1
34750: PPUSH
34751: LD_INT 0
34753: PPUSH
34754: CALL_OW 234
// end ;
34758: GO 34743
34760: POP
34761: POP
// end ;
34762: PPOPN 2
34764: END
// every 0 0$1 trigger StreamModeActive and sBunker do
34765: LD_EXP 64
34769: PUSH
34770: LD_EXP 74
34774: AND
34775: IFFALSE 34795
34777: GO 34779
34779: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
34780: LD_INT 32
34782: PPUSH
34783: LD_OWVAR 2
34787: PPUSH
34788: LD_INT 0
34790: PPUSH
34791: CALL_OW 324
34795: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34796: LD_EXP 64
34800: PUSH
34801: LD_EXP 75
34805: AND
34806: IFFALSE 34987
34808: GO 34810
34810: DISABLE
34811: LD_INT 0
34813: PPUSH
34814: PPUSH
34815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34816: LD_ADDR_VAR 0 2
34820: PUSH
34821: LD_INT 22
34823: PUSH
34824: LD_OWVAR 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 33
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PPUSH
34847: CALL_OW 69
34851: ST_TO_ADDR
// if not tmp then
34852: LD_VAR 0 2
34856: NOT
34857: IFFALSE 34861
// exit ;
34859: GO 34987
// side := 0 ;
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 0
34868: ST_TO_ADDR
// for i := 1 to 8 do
34869: LD_ADDR_VAR 0 1
34873: PUSH
34874: DOUBLE
34875: LD_INT 1
34877: DEC
34878: ST_TO_ADDR
34879: LD_INT 8
34881: PUSH
34882: FOR_TO
34883: IFFALSE 34931
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34885: LD_OWVAR 2
34889: PUSH
34890: LD_VAR 0 1
34894: NONEQUAL
34895: PUSH
34896: LD_OWVAR 2
34900: PPUSH
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 81
34910: PUSH
34911: LD_INT 2
34913: EQUAL
34914: AND
34915: IFFALSE 34929
// begin side := i ;
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_VAR 0 1
34926: ST_TO_ADDR
// break ;
34927: GO 34931
// end ;
34929: GO 34882
34931: POP
34932: POP
// if not side then
34933: LD_VAR 0 3
34937: NOT
34938: IFFALSE 34942
// exit ;
34940: GO 34987
// for i := 1 to tmp do
34942: LD_ADDR_VAR 0 1
34946: PUSH
34947: DOUBLE
34948: LD_INT 1
34950: DEC
34951: ST_TO_ADDR
34952: LD_VAR 0 2
34956: PUSH
34957: FOR_TO
34958: IFFALSE 34985
// if Prob ( 60 ) then
34960: LD_INT 60
34962: PPUSH
34963: CALL_OW 13
34967: IFFALSE 34983
// SetSide ( i , side ) ;
34969: LD_VAR 0 1
34973: PPUSH
34974: LD_VAR 0 3
34978: PPUSH
34979: CALL_OW 235
34983: GO 34957
34985: POP
34986: POP
// end ;
34987: PPOPN 3
34989: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34990: LD_EXP 64
34994: PUSH
34995: LD_EXP 77
34999: AND
35000: IFFALSE 35119
35002: GO 35004
35004: DISABLE
35005: LD_INT 0
35007: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35008: LD_ADDR_VAR 0 1
35012: PUSH
35013: LD_INT 22
35015: PUSH
35016: LD_OWVAR 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 21
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: LD_INT 23
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: PPUSH
35057: CALL_OW 69
35061: PUSH
35062: FOR_IN
35063: IFFALSE 35117
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 257
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: LD_INT 4
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: IN
35093: IFFALSE 35115
// SetClass ( un , rand ( 1 , 4 ) ) ;
35095: LD_VAR 0 1
35099: PPUSH
35100: LD_INT 1
35102: PPUSH
35103: LD_INT 4
35105: PPUSH
35106: CALL_OW 12
35110: PPUSH
35111: CALL_OW 336
35115: GO 35062
35117: POP
35118: POP
// end ;
35119: PPOPN 1
35121: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35122: LD_EXP 64
35126: PUSH
35127: LD_EXP 76
35131: AND
35132: IFFALSE 35211
35134: GO 35136
35136: DISABLE
35137: LD_INT 0
35139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35140: LD_ADDR_VAR 0 1
35144: PUSH
35145: LD_INT 22
35147: PUSH
35148: LD_OWVAR 2
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 21
35159: PUSH
35160: LD_INT 3
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PPUSH
35171: CALL_OW 69
35175: ST_TO_ADDR
// if not tmp then
35176: LD_VAR 0 1
35180: NOT
35181: IFFALSE 35185
// exit ;
35183: GO 35211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35185: LD_VAR 0 1
35189: PUSH
35190: LD_INT 1
35192: PPUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 12
35202: ARRAY
35203: PPUSH
35204: LD_INT 100
35206: PPUSH
35207: CALL_OW 234
// end ;
35211: PPOPN 1
35213: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35214: LD_EXP 64
35218: PUSH
35219: LD_EXP 78
35223: AND
35224: IFFALSE 35322
35226: GO 35228
35228: DISABLE
35229: LD_INT 0
35231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35232: LD_ADDR_VAR 0 1
35236: PUSH
35237: LD_INT 22
35239: PUSH
35240: LD_OWVAR 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 21
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PPUSH
35263: CALL_OW 69
35267: ST_TO_ADDR
// if not tmp then
35268: LD_VAR 0 1
35272: NOT
35273: IFFALSE 35277
// exit ;
35275: GO 35322
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35277: LD_VAR 0 1
35281: PUSH
35282: LD_INT 1
35284: PPUSH
35285: LD_VAR 0 1
35289: PPUSH
35290: CALL_OW 12
35294: ARRAY
35295: PPUSH
35296: LD_INT 1
35298: PPUSH
35299: LD_INT 4
35301: PPUSH
35302: CALL_OW 12
35306: PPUSH
35307: LD_INT 3000
35309: PPUSH
35310: LD_INT 9000
35312: PPUSH
35313: CALL_OW 12
35317: PPUSH
35318: CALL_OW 492
// end ;
35322: PPOPN 1
35324: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35325: LD_EXP 64
35329: PUSH
35330: LD_EXP 79
35334: AND
35335: IFFALSE 35355
35337: GO 35339
35339: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35340: LD_INT 1
35342: PPUSH
35343: LD_OWVAR 2
35347: PPUSH
35348: LD_INT 0
35350: PPUSH
35351: CALL_OW 324
35355: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35356: LD_EXP 64
35360: PUSH
35361: LD_EXP 80
35365: AND
35366: IFFALSE 35449
35368: GO 35370
35370: DISABLE
35371: LD_INT 0
35373: PPUSH
35374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35375: LD_ADDR_VAR 0 2
35379: PUSH
35380: LD_INT 22
35382: PUSH
35383: LD_OWVAR 2
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 21
35394: PUSH
35395: LD_INT 3
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PPUSH
35406: CALL_OW 69
35410: ST_TO_ADDR
// if not tmp then
35411: LD_VAR 0 2
35415: NOT
35416: IFFALSE 35420
// exit ;
35418: GO 35449
// for i in tmp do
35420: LD_ADDR_VAR 0 1
35424: PUSH
35425: LD_VAR 0 2
35429: PUSH
35430: FOR_IN
35431: IFFALSE 35447
// SetBLevel ( i , 10 ) ;
35433: LD_VAR 0 1
35437: PPUSH
35438: LD_INT 10
35440: PPUSH
35441: CALL_OW 241
35445: GO 35430
35447: POP
35448: POP
// end ;
35449: PPOPN 2
35451: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
35452: LD_EXP 64
35456: PUSH
35457: LD_EXP 81
35461: AND
35462: IFFALSE 35573
35464: GO 35466
35466: DISABLE
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
35471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35472: LD_ADDR_VAR 0 3
35476: PUSH
35477: LD_INT 22
35479: PUSH
35480: LD_OWVAR 2
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 25
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PPUSH
35503: CALL_OW 69
35507: ST_TO_ADDR
// if not tmp then
35508: LD_VAR 0 3
35512: NOT
35513: IFFALSE 35517
// exit ;
35515: GO 35573
// un := tmp [ rand ( 1 , tmp ) ] ;
35517: LD_ADDR_VAR 0 2
35521: PUSH
35522: LD_VAR 0 3
35526: PUSH
35527: LD_INT 1
35529: PPUSH
35530: LD_VAR 0 3
35534: PPUSH
35535: CALL_OW 12
35539: ARRAY
35540: ST_TO_ADDR
// if Crawls ( un ) then
35541: LD_VAR 0 2
35545: PPUSH
35546: CALL_OW 318
35550: IFFALSE 35561
// ComWalk ( un ) ;
35552: LD_VAR 0 2
35556: PPUSH
35557: CALL_OW 138
// SetClass ( un , class_sniper ) ;
35561: LD_VAR 0 2
35565: PPUSH
35566: LD_INT 5
35568: PPUSH
35569: CALL_OW 336
// end ;
35573: PPOPN 3
35575: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
35576: LD_EXP 64
35580: PUSH
35581: LD_EXP 82
35585: AND
35586: PUSH
35587: LD_OWVAR 67
35591: PUSH
35592: LD_INT 4
35594: LESS
35595: AND
35596: IFFALSE 35615
35598: GO 35600
35600: DISABLE
// begin Difficulty := Difficulty + 1 ;
35601: LD_ADDR_OWVAR 67
35605: PUSH
35606: LD_OWVAR 67
35610: PUSH
35611: LD_INT 1
35613: PLUS
35614: ST_TO_ADDR
// end ;
35615: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
35616: LD_EXP 64
35620: PUSH
35621: LD_EXP 83
35625: AND
35626: IFFALSE 35729
35628: GO 35630
35630: DISABLE
35631: LD_INT 0
35633: PPUSH
// begin for i := 1 to 5 do
35634: LD_ADDR_VAR 0 1
35638: PUSH
35639: DOUBLE
35640: LD_INT 1
35642: DEC
35643: ST_TO_ADDR
35644: LD_INT 5
35646: PUSH
35647: FOR_TO
35648: IFFALSE 35727
// begin uc_nation := nation_nature ;
35650: LD_ADDR_OWVAR 21
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// uc_side := 0 ;
35658: LD_ADDR_OWVAR 20
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35666: LD_ADDR_OWVAR 29
35670: PUSH
35671: LD_INT 12
35673: PUSH
35674: LD_INT 12
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: ST_TO_ADDR
// hc_agressivity := 20 ;
35681: LD_ADDR_OWVAR 35
35685: PUSH
35686: LD_INT 20
35688: ST_TO_ADDR
// hc_class := class_tiger ;
35689: LD_ADDR_OWVAR 28
35693: PUSH
35694: LD_INT 14
35696: ST_TO_ADDR
// hc_gallery :=  ;
35697: LD_ADDR_OWVAR 33
35701: PUSH
35702: LD_STRING 
35704: ST_TO_ADDR
// hc_name :=  ;
35705: LD_ADDR_OWVAR 26
35709: PUSH
35710: LD_STRING 
35712: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
35713: CALL_OW 44
35717: PPUSH
35718: LD_INT 0
35720: PPUSH
35721: CALL_OW 51
// end ;
35725: GO 35647
35727: POP
35728: POP
// end ;
35729: PPOPN 1
35731: END
// every 0 0$1 trigger StreamModeActive and sBomb do
35732: LD_EXP 64
35736: PUSH
35737: LD_EXP 84
35741: AND
35742: IFFALSE 35751
35744: GO 35746
35746: DISABLE
// StreamSibBomb ;
35747: CALL 35752 0 0
35751: END
// export function StreamSibBomb ; var i , x , y ; begin
35752: LD_INT 0
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
// result := false ;
35758: LD_ADDR_VAR 0 1
35762: PUSH
35763: LD_INT 0
35765: ST_TO_ADDR
// for i := 1 to 16 do
35766: LD_ADDR_VAR 0 2
35770: PUSH
35771: DOUBLE
35772: LD_INT 1
35774: DEC
35775: ST_TO_ADDR
35776: LD_INT 16
35778: PUSH
35779: FOR_TO
35780: IFFALSE 35979
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_INT 10
35789: PUSH
35790: LD_INT 20
35792: PUSH
35793: LD_INT 30
35795: PUSH
35796: LD_INT 40
35798: PUSH
35799: LD_INT 50
35801: PUSH
35802: LD_INT 60
35804: PUSH
35805: LD_INT 70
35807: PUSH
35808: LD_INT 80
35810: PUSH
35811: LD_INT 90
35813: PUSH
35814: LD_INT 100
35816: PUSH
35817: LD_INT 110
35819: PUSH
35820: LD_INT 120
35822: PUSH
35823: LD_INT 130
35825: PUSH
35826: LD_INT 140
35828: PUSH
35829: LD_INT 150
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PPUSH
35852: LD_INT 15
35854: PPUSH
35855: CALL_OW 12
35859: ARRAY
35860: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: LD_INT 10
35868: PUSH
35869: LD_INT 20
35871: PUSH
35872: LD_INT 30
35874: PUSH
35875: LD_INT 40
35877: PUSH
35878: LD_INT 50
35880: PUSH
35881: LD_INT 60
35883: PUSH
35884: LD_INT 70
35886: PUSH
35887: LD_INT 80
35889: PUSH
35890: LD_INT 90
35892: PUSH
35893: LD_INT 100
35895: PUSH
35896: LD_INT 110
35898: PUSH
35899: LD_INT 120
35901: PUSH
35902: LD_INT 130
35904: PUSH
35905: LD_INT 140
35907: PUSH
35908: LD_INT 150
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PPUSH
35931: LD_INT 15
35933: PPUSH
35934: CALL_OW 12
35938: ARRAY
35939: ST_TO_ADDR
// if ValidHex ( x , y ) then
35940: LD_VAR 0 3
35944: PPUSH
35945: LD_VAR 0 4
35949: PPUSH
35950: CALL_OW 488
35954: IFFALSE 35977
// begin result := [ x , y ] ;
35956: LD_ADDR_VAR 0 1
35960: PUSH
35961: LD_VAR 0 3
35965: PUSH
35966: LD_VAR 0 4
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: ST_TO_ADDR
// break ;
35975: GO 35979
// end ; end ;
35977: GO 35779
35979: POP
35980: POP
// if result then
35981: LD_VAR 0 1
35985: IFFALSE 36045
// begin ToLua ( playSibBomb() ) ;
35987: LD_STRING playSibBomb()
35989: PPUSH
35990: CALL_OW 559
// wait ( 0 0$14 ) ;
35994: LD_INT 490
35996: PPUSH
35997: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36001: LD_VAR 0 1
36005: PUSH
36006: LD_INT 1
36008: ARRAY
36009: PPUSH
36010: LD_VAR 0 1
36014: PUSH
36015: LD_INT 2
36017: ARRAY
36018: PPUSH
36019: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36023: LD_VAR 0 1
36027: PUSH
36028: LD_INT 1
36030: ARRAY
36031: PPUSH
36032: LD_VAR 0 1
36036: PUSH
36037: LD_INT 2
36039: ARRAY
36040: PPUSH
36041: CALL_OW 429
// end ; end ;
36045: LD_VAR 0 1
36049: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36050: LD_EXP 64
36054: PUSH
36055: LD_EXP 86
36059: AND
36060: IFFALSE 36072
36062: GO 36064
36064: DISABLE
// YouLost (  ) ;
36065: LD_STRING 
36067: PPUSH
36068: CALL_OW 104
36072: END
// every 0 0$1 trigger StreamModeActive and sFog do
36073: LD_EXP 64
36077: PUSH
36078: LD_EXP 85
36082: AND
36083: IFFALSE 36097
36085: GO 36087
36087: DISABLE
// FogOff ( your_side ) ;
36088: LD_OWVAR 2
36092: PPUSH
36093: CALL_OW 344
36097: END
// every 0 0$1 trigger StreamModeActive and sSun do
36098: LD_EXP 64
36102: PUSH
36103: LD_EXP 87
36107: AND
36108: IFFALSE 36136
36110: GO 36112
36112: DISABLE
// begin solar_recharge_percent := 0 ;
36113: LD_ADDR_OWVAR 79
36117: PUSH
36118: LD_INT 0
36120: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36121: LD_INT 10500
36123: PPUSH
36124: CALL_OW 67
// solar_recharge_percent := 100 ;
36128: LD_ADDR_OWVAR 79
36132: PUSH
36133: LD_INT 100
36135: ST_TO_ADDR
// end ;
36136: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36137: LD_EXP 64
36141: PUSH
36142: LD_EXP 88
36146: AND
36147: IFFALSE 36386
36149: GO 36151
36151: DISABLE
36152: LD_INT 0
36154: PPUSH
36155: PPUSH
36156: PPUSH
// begin tmp := [ ] ;
36157: LD_ADDR_VAR 0 3
36161: PUSH
36162: EMPTY
36163: ST_TO_ADDR
// for i := 1 to 6 do
36164: LD_ADDR_VAR 0 1
36168: PUSH
36169: DOUBLE
36170: LD_INT 1
36172: DEC
36173: ST_TO_ADDR
36174: LD_INT 6
36176: PUSH
36177: FOR_TO
36178: IFFALSE 36283
// begin uc_nation := nation_nature ;
36180: LD_ADDR_OWVAR 21
36184: PUSH
36185: LD_INT 0
36187: ST_TO_ADDR
// uc_side := 0 ;
36188: LD_ADDR_OWVAR 20
36192: PUSH
36193: LD_INT 0
36195: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36196: LD_ADDR_OWVAR 29
36200: PUSH
36201: LD_INT 12
36203: PUSH
36204: LD_INT 12
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: ST_TO_ADDR
// hc_agressivity := 20 ;
36211: LD_ADDR_OWVAR 35
36215: PUSH
36216: LD_INT 20
36218: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36219: LD_ADDR_OWVAR 28
36223: PUSH
36224: LD_INT 17
36226: ST_TO_ADDR
// hc_gallery :=  ;
36227: LD_ADDR_OWVAR 33
36231: PUSH
36232: LD_STRING 
36234: ST_TO_ADDR
// hc_name :=  ;
36235: LD_ADDR_OWVAR 26
36239: PUSH
36240: LD_STRING 
36242: ST_TO_ADDR
// un := CreateHuman ;
36243: LD_ADDR_VAR 0 2
36247: PUSH
36248: CALL_OW 44
36252: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36253: LD_VAR 0 2
36257: PPUSH
36258: LD_INT 1
36260: PPUSH
36261: CALL_OW 51
// tmp := tmp ^ un ;
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_VAR 0 3
36274: PUSH
36275: LD_VAR 0 2
36279: ADD
36280: ST_TO_ADDR
// end ;
36281: GO 36177
36283: POP
36284: POP
// repeat wait ( 0 0$1 ) ;
36285: LD_INT 35
36287: PPUSH
36288: CALL_OW 67
// for un in tmp do
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_VAR 0 3
36301: PUSH
36302: FOR_IN
36303: IFFALSE 36377
// begin if IsDead ( un ) then
36305: LD_VAR 0 2
36309: PPUSH
36310: CALL_OW 301
36314: IFFALSE 36334
// begin tmp := tmp diff un ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_VAR 0 3
36325: PUSH
36326: LD_VAR 0 2
36330: DIFF
36331: ST_TO_ADDR
// continue ;
36332: GO 36302
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36334: LD_VAR 0 2
36338: PPUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 22
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PPUSH
36356: CALL_OW 69
36360: PPUSH
36361: LD_VAR 0 2
36365: PPUSH
36366: CALL_OW 74
36370: PPUSH
36371: CALL_OW 115
// end ;
36375: GO 36302
36377: POP
36378: POP
// until not tmp ;
36379: LD_VAR 0 3
36383: NOT
36384: IFFALSE 36285
// end ;
36386: PPOPN 3
36388: END
// every 0 0$1 trigger StreamModeActive and sTroll do
36389: LD_EXP 64
36393: PUSH
36394: LD_EXP 89
36398: AND
36399: IFFALSE 36453
36401: GO 36403
36403: DISABLE
// begin ToLua ( displayTroll(); ) ;
36404: LD_STRING displayTroll();
36406: PPUSH
36407: CALL_OW 559
// wait ( 3 3$00 ) ;
36411: LD_INT 6300
36413: PPUSH
36414: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36418: LD_STRING hideTroll();
36420: PPUSH
36421: CALL_OW 559
// wait ( 1 1$00 ) ;
36425: LD_INT 2100
36427: PPUSH
36428: CALL_OW 67
// ToLua ( displayTroll(); ) ;
36432: LD_STRING displayTroll();
36434: PPUSH
36435: CALL_OW 559
// wait ( 1 1$00 ) ;
36439: LD_INT 2100
36441: PPUSH
36442: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36446: LD_STRING hideTroll();
36448: PPUSH
36449: CALL_OW 559
// end ;
36453: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
36454: LD_EXP 64
36458: PUSH
36459: LD_EXP 90
36463: AND
36464: IFFALSE 36527
36466: GO 36468
36468: DISABLE
36469: LD_INT 0
36471: PPUSH
// begin p := 0 ;
36472: LD_ADDR_VAR 0 1
36476: PUSH
36477: LD_INT 0
36479: ST_TO_ADDR
// repeat game_speed := 1 ;
36480: LD_ADDR_OWVAR 65
36484: PUSH
36485: LD_INT 1
36487: ST_TO_ADDR
// wait ( 0 0$1 ) ;
36488: LD_INT 35
36490: PPUSH
36491: CALL_OW 67
// p := p + 1 ;
36495: LD_ADDR_VAR 0 1
36499: PUSH
36500: LD_VAR 0 1
36504: PUSH
36505: LD_INT 1
36507: PLUS
36508: ST_TO_ADDR
// until p >= 60 ;
36509: LD_VAR 0 1
36513: PUSH
36514: LD_INT 60
36516: GREATEREQUAL
36517: IFFALSE 36480
// game_speed := 4 ;
36519: LD_ADDR_OWVAR 65
36523: PUSH
36524: LD_INT 4
36526: ST_TO_ADDR
// end ;
36527: PPOPN 1
36529: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
36530: LD_EXP 64
36534: PUSH
36535: LD_EXP 91
36539: AND
36540: IFFALSE 36686
36542: GO 36544
36544: DISABLE
36545: LD_INT 0
36547: PPUSH
36548: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36549: LD_ADDR_VAR 0 1
36553: PUSH
36554: LD_INT 22
36556: PUSH
36557: LD_OWVAR 2
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: LD_INT 30
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 30
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PPUSH
36598: CALL_OW 69
36602: ST_TO_ADDR
// if not depot then
36603: LD_VAR 0 1
36607: NOT
36608: IFFALSE 36612
// exit ;
36610: GO 36686
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
36612: LD_ADDR_VAR 0 2
36616: PUSH
36617: LD_VAR 0 1
36621: PUSH
36622: LD_INT 1
36624: PPUSH
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL_OW 12
36634: ARRAY
36635: PPUSH
36636: CALL_OW 274
36640: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
36641: LD_VAR 0 2
36645: PPUSH
36646: LD_INT 1
36648: PPUSH
36649: LD_INT 0
36651: PPUSH
36652: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
36656: LD_VAR 0 2
36660: PPUSH
36661: LD_INT 2
36663: PPUSH
36664: LD_INT 0
36666: PPUSH
36667: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
36671: LD_VAR 0 2
36675: PPUSH
36676: LD_INT 3
36678: PPUSH
36679: LD_INT 0
36681: PPUSH
36682: CALL_OW 277
// end ;
36686: PPOPN 2
36688: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
36689: LD_EXP 64
36693: PUSH
36694: LD_EXP 92
36698: AND
36699: IFFALSE 36796
36701: GO 36703
36703: DISABLE
36704: LD_INT 0
36706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36707: LD_ADDR_VAR 0 1
36711: PUSH
36712: LD_INT 22
36714: PUSH
36715: LD_OWVAR 2
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 21
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 3
36736: PUSH
36737: LD_INT 23
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: PPUSH
36756: CALL_OW 69
36760: ST_TO_ADDR
// if not tmp then
36761: LD_VAR 0 1
36765: NOT
36766: IFFALSE 36770
// exit ;
36768: GO 36796
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
36770: LD_VAR 0 1
36774: PUSH
36775: LD_INT 1
36777: PPUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 12
36787: ARRAY
36788: PPUSH
36789: LD_INT 200
36791: PPUSH
36792: CALL_OW 234
// end ;
36796: PPOPN 1
36798: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36799: LD_EXP 64
36803: PUSH
36804: LD_EXP 93
36808: AND
36809: IFFALSE 36888
36811: GO 36813
36813: DISABLE
36814: LD_INT 0
36816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36817: LD_ADDR_VAR 0 1
36821: PUSH
36822: LD_INT 22
36824: PUSH
36825: LD_OWVAR 2
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 21
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PPUSH
36848: CALL_OW 69
36852: ST_TO_ADDR
// if not tmp then
36853: LD_VAR 0 1
36857: NOT
36858: IFFALSE 36862
// exit ;
36860: GO 36888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36862: LD_VAR 0 1
36866: PUSH
36867: LD_INT 1
36869: PPUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 12
36879: ARRAY
36880: PPUSH
36881: LD_INT 60
36883: PPUSH
36884: CALL_OW 234
// end ;
36888: PPOPN 1
36890: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36891: LD_EXP 64
36895: PUSH
36896: LD_EXP 94
36900: AND
36901: IFFALSE 37000
36903: GO 36905
36905: DISABLE
36906: LD_INT 0
36908: PPUSH
36909: PPUSH
// begin enable ;
36910: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36911: LD_ADDR_VAR 0 1
36915: PUSH
36916: LD_INT 22
36918: PUSH
36919: LD_OWVAR 2
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 61
36930: PUSH
36931: EMPTY
36932: LIST
36933: PUSH
36934: LD_INT 33
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: PPUSH
36949: CALL_OW 69
36953: ST_TO_ADDR
// if not tmp then
36954: LD_VAR 0 1
36958: NOT
36959: IFFALSE 36963
// exit ;
36961: GO 37000
// for i in tmp do
36963: LD_ADDR_VAR 0 2
36967: PUSH
36968: LD_VAR 0 1
36972: PUSH
36973: FOR_IN
36974: IFFALSE 36998
// if IsControledBy ( i ) then
36976: LD_VAR 0 2
36980: PPUSH
36981: CALL_OW 312
36985: IFFALSE 36996
// ComUnlink ( i ) ;
36987: LD_VAR 0 2
36991: PPUSH
36992: CALL_OW 136
36996: GO 36973
36998: POP
36999: POP
// end ;
37000: PPOPN 2
37002: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37003: LD_EXP 64
37007: PUSH
37008: LD_EXP 95
37012: AND
37013: IFFALSE 37153
37015: GO 37017
37017: DISABLE
37018: LD_INT 0
37020: PPUSH
37021: PPUSH
// begin ToLua ( displayPowell(); ) ;
37022: LD_STRING displayPowell();
37024: PPUSH
37025: CALL_OW 559
// uc_side := 0 ;
37029: LD_ADDR_OWVAR 20
37033: PUSH
37034: LD_INT 0
37036: ST_TO_ADDR
// uc_nation := 2 ;
37037: LD_ADDR_OWVAR 21
37041: PUSH
37042: LD_INT 2
37044: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37045: LD_ADDR_OWVAR 37
37049: PUSH
37050: LD_INT 14
37052: ST_TO_ADDR
// vc_engine := engine_siberite ;
37053: LD_ADDR_OWVAR 39
37057: PUSH
37058: LD_INT 3
37060: ST_TO_ADDR
// vc_control := control_apeman ;
37061: LD_ADDR_OWVAR 38
37065: PUSH
37066: LD_INT 5
37068: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37069: LD_ADDR_OWVAR 40
37073: PUSH
37074: LD_INT 29
37076: ST_TO_ADDR
// un := CreateVehicle ;
37077: LD_ADDR_VAR 0 2
37081: PUSH
37082: CALL_OW 45
37086: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37087: LD_VAR 0 2
37091: PPUSH
37092: LD_INT 1
37094: PPUSH
37095: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37099: LD_INT 35
37101: PPUSH
37102: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37106: LD_VAR 0 2
37110: PPUSH
37111: LD_INT 22
37113: PUSH
37114: LD_OWVAR 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PPUSH
37123: CALL_OW 69
37127: PPUSH
37128: LD_VAR 0 2
37132: PPUSH
37133: CALL_OW 74
37137: PPUSH
37138: CALL_OW 115
// until IsDead ( un ) ;
37142: LD_VAR 0 2
37146: PPUSH
37147: CALL_OW 301
37151: IFFALSE 37099
// end ;
37153: PPOPN 2
37155: END
// every 0 0$1 trigger StreamModeActive and sStu do
37156: LD_EXP 64
37160: PUSH
37161: LD_EXP 103
37165: AND
37166: IFFALSE 37182
37168: GO 37170
37170: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37171: LD_STRING displayStucuk();
37173: PPUSH
37174: CALL_OW 559
// ResetFog ;
37178: CALL_OW 335
// end ;
37182: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37183: LD_EXP 64
37187: PUSH
37188: LD_EXP 96
37192: AND
37193: IFFALSE 37334
37195: GO 37197
37197: DISABLE
37198: LD_INT 0
37200: PPUSH
37201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37202: LD_ADDR_VAR 0 2
37206: PUSH
37207: LD_INT 22
37209: PUSH
37210: LD_OWVAR 2
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 21
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PPUSH
37233: CALL_OW 69
37237: ST_TO_ADDR
// if not tmp then
37238: LD_VAR 0 2
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 37334
// un := tmp [ rand ( 1 , tmp ) ] ;
37247: LD_ADDR_VAR 0 1
37251: PUSH
37252: LD_VAR 0 2
37256: PUSH
37257: LD_INT 1
37259: PPUSH
37260: LD_VAR 0 2
37264: PPUSH
37265: CALL_OW 12
37269: ARRAY
37270: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37271: LD_VAR 0 1
37275: PPUSH
37276: LD_INT 0
37278: PPUSH
37279: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37283: LD_VAR 0 1
37287: PPUSH
37288: LD_OWVAR 3
37292: PUSH
37293: LD_VAR 0 1
37297: DIFF
37298: PPUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 74
37308: PPUSH
37309: CALL_OW 115
// wait ( 0 0$20 ) ;
37313: LD_INT 700
37315: PPUSH
37316: CALL_OW 67
// SetSide ( un , your_side ) ;
37320: LD_VAR 0 1
37324: PPUSH
37325: LD_OWVAR 2
37329: PPUSH
37330: CALL_OW 235
// end ;
37334: PPOPN 2
37336: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37337: LD_EXP 64
37341: PUSH
37342: LD_EXP 97
37346: AND
37347: IFFALSE 37453
37349: GO 37351
37351: DISABLE
37352: LD_INT 0
37354: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37355: LD_ADDR_VAR 0 1
37359: PUSH
37360: LD_INT 22
37362: PUSH
37363: LD_OWVAR 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 30
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 30
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PPUSH
37404: CALL_OW 69
37408: ST_TO_ADDR
// if not depot then
37409: LD_VAR 0 1
37413: NOT
37414: IFFALSE 37418
// exit ;
37416: GO 37453
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
37418: LD_VAR 0 1
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PPUSH
37427: CALL_OW 250
37431: PPUSH
37432: LD_VAR 0 1
37436: PUSH
37437: LD_INT 1
37439: ARRAY
37440: PPUSH
37441: CALL_OW 251
37445: PPUSH
37446: LD_INT 70
37448: PPUSH
37449: CALL_OW 495
// end ;
37453: PPOPN 1
37455: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
37456: LD_EXP 64
37460: PUSH
37461: LD_EXP 98
37465: AND
37466: IFFALSE 37677
37468: GO 37470
37470: DISABLE
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37478: LD_ADDR_VAR 0 5
37482: PUSH
37483: LD_INT 22
37485: PUSH
37486: LD_OWVAR 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 21
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PPUSH
37509: CALL_OW 69
37513: ST_TO_ADDR
// if not tmp then
37514: LD_VAR 0 5
37518: NOT
37519: IFFALSE 37523
// exit ;
37521: GO 37677
// for i in tmp do
37523: LD_ADDR_VAR 0 1
37527: PUSH
37528: LD_VAR 0 5
37532: PUSH
37533: FOR_IN
37534: IFFALSE 37675
// begin d := rand ( 0 , 5 ) ;
37536: LD_ADDR_VAR 0 4
37540: PUSH
37541: LD_INT 0
37543: PPUSH
37544: LD_INT 5
37546: PPUSH
37547: CALL_OW 12
37551: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
37552: LD_ADDR_VAR 0 2
37556: PUSH
37557: LD_VAR 0 1
37561: PPUSH
37562: CALL_OW 250
37566: PPUSH
37567: LD_VAR 0 4
37571: PPUSH
37572: LD_INT 3
37574: PPUSH
37575: LD_INT 12
37577: PPUSH
37578: CALL_OW 12
37582: PPUSH
37583: CALL_OW 272
37587: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
37588: LD_ADDR_VAR 0 3
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 251
37602: PPUSH
37603: LD_VAR 0 4
37607: PPUSH
37608: LD_INT 3
37610: PPUSH
37611: LD_INT 12
37613: PPUSH
37614: CALL_OW 12
37618: PPUSH
37619: CALL_OW 273
37623: ST_TO_ADDR
// if ValidHex ( x , y ) then
37624: LD_VAR 0 2
37628: PPUSH
37629: LD_VAR 0 3
37633: PPUSH
37634: CALL_OW 488
37638: IFFALSE 37673
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
37640: LD_VAR 0 1
37644: PPUSH
37645: LD_VAR 0 2
37649: PPUSH
37650: LD_VAR 0 3
37654: PPUSH
37655: LD_INT 3
37657: PPUSH
37658: LD_INT 6
37660: PPUSH
37661: CALL_OW 12
37665: PPUSH
37666: LD_INT 1
37668: PPUSH
37669: CALL_OW 483
// end ;
37673: GO 37533
37675: POP
37676: POP
// end ;
37677: PPOPN 5
37679: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
37680: LD_EXP 64
37684: PUSH
37685: LD_EXP 99
37689: AND
37690: IFFALSE 37784
37692: GO 37694
37694: DISABLE
37695: LD_INT 0
37697: PPUSH
37698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
37699: LD_ADDR_VAR 0 2
37703: PUSH
37704: LD_INT 22
37706: PUSH
37707: LD_OWVAR 2
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 32
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 21
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: PPUSH
37741: CALL_OW 69
37745: ST_TO_ADDR
// if not tmp then
37746: LD_VAR 0 2
37750: NOT
37751: IFFALSE 37755
// exit ;
37753: GO 37784
// for i in tmp do
37755: LD_ADDR_VAR 0 1
37759: PUSH
37760: LD_VAR 0 2
37764: PUSH
37765: FOR_IN
37766: IFFALSE 37782
// SetFuel ( i , 0 ) ;
37768: LD_VAR 0 1
37772: PPUSH
37773: LD_INT 0
37775: PPUSH
37776: CALL_OW 240
37780: GO 37765
37782: POP
37783: POP
// end ;
37784: PPOPN 2
37786: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
37787: LD_EXP 64
37791: PUSH
37792: LD_EXP 100
37796: AND
37797: IFFALSE 37863
37799: GO 37801
37801: DISABLE
37802: LD_INT 0
37804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37805: LD_ADDR_VAR 0 1
37809: PUSH
37810: LD_INT 22
37812: PUSH
37813: LD_OWVAR 2
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 30
37824: PUSH
37825: LD_INT 29
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PPUSH
37836: CALL_OW 69
37840: ST_TO_ADDR
// if not tmp then
37841: LD_VAR 0 1
37845: NOT
37846: IFFALSE 37850
// exit ;
37848: GO 37863
// DestroyUnit ( tmp [ 1 ] ) ;
37850: LD_VAR 0 1
37854: PUSH
37855: LD_INT 1
37857: ARRAY
37858: PPUSH
37859: CALL_OW 65
// end ;
37863: PPOPN 1
37865: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37866: LD_EXP 64
37870: PUSH
37871: LD_EXP 102
37875: AND
37876: IFFALSE 38005
37878: GO 37880
37880: DISABLE
37881: LD_INT 0
37883: PPUSH
// begin uc_side := 0 ;
37884: LD_ADDR_OWVAR 20
37888: PUSH
37889: LD_INT 0
37891: ST_TO_ADDR
// uc_nation := nation_arabian ;
37892: LD_ADDR_OWVAR 21
37896: PUSH
37897: LD_INT 2
37899: ST_TO_ADDR
// hc_gallery :=  ;
37900: LD_ADDR_OWVAR 33
37904: PUSH
37905: LD_STRING 
37907: ST_TO_ADDR
// hc_name :=  ;
37908: LD_ADDR_OWVAR 26
37912: PUSH
37913: LD_STRING 
37915: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37916: LD_INT 1
37918: PPUSH
37919: LD_INT 11
37921: PPUSH
37922: LD_INT 10
37924: PPUSH
37925: CALL_OW 380
// un := CreateHuman ;
37929: LD_ADDR_VAR 0 1
37933: PUSH
37934: CALL_OW 44
37938: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37939: LD_VAR 0 1
37943: PPUSH
37944: LD_INT 1
37946: PPUSH
37947: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37951: LD_INT 35
37953: PPUSH
37954: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37958: LD_VAR 0 1
37962: PPUSH
37963: LD_INT 22
37965: PUSH
37966: LD_OWVAR 2
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PPUSH
37975: CALL_OW 69
37979: PPUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 74
37989: PPUSH
37990: CALL_OW 115
// until IsDead ( un ) ;
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 301
38003: IFFALSE 37951
// end ;
38005: PPOPN 1
38007: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38008: LD_EXP 64
38012: PUSH
38013: LD_EXP 104
38017: AND
38018: IFFALSE 38030
38020: GO 38022
38022: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38023: LD_STRING earthquake(getX(game), 0, 32)
38025: PPUSH
38026: CALL_OW 559
38030: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38031: LD_EXP 64
38035: PUSH
38036: LD_EXP 105
38040: AND
38041: IFFALSE 38132
38043: GO 38045
38045: DISABLE
38046: LD_INT 0
38048: PPUSH
// begin enable ;
38049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38050: LD_ADDR_VAR 0 1
38054: PUSH
38055: LD_INT 22
38057: PUSH
38058: LD_OWVAR 2
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 21
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 33
38079: PUSH
38080: LD_INT 3
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: PPUSH
38092: CALL_OW 69
38096: ST_TO_ADDR
// if not tmp then
38097: LD_VAR 0 1
38101: NOT
38102: IFFALSE 38106
// exit ;
38104: GO 38132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38106: LD_VAR 0 1
38110: PUSH
38111: LD_INT 1
38113: PPUSH
38114: LD_VAR 0 1
38118: PPUSH
38119: CALL_OW 12
38123: ARRAY
38124: PPUSH
38125: LD_INT 1
38127: PPUSH
38128: CALL_OW 234
// end ;
38132: PPOPN 1
38134: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38135: LD_EXP 64
38139: PUSH
38140: LD_EXP 106
38144: AND
38145: IFFALSE 38286
38147: GO 38149
38149: DISABLE
38150: LD_INT 0
38152: PPUSH
38153: PPUSH
38154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38155: LD_ADDR_VAR 0 3
38159: PUSH
38160: LD_INT 22
38162: PUSH
38163: LD_OWVAR 2
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 25
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PPUSH
38186: CALL_OW 69
38190: ST_TO_ADDR
// if not tmp then
38191: LD_VAR 0 3
38195: NOT
38196: IFFALSE 38200
// exit ;
38198: GO 38286
// un := tmp [ rand ( 1 , tmp ) ] ;
38200: LD_ADDR_VAR 0 2
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: LD_INT 1
38212: PPUSH
38213: LD_VAR 0 3
38217: PPUSH
38218: CALL_OW 12
38222: ARRAY
38223: ST_TO_ADDR
// if Crawls ( un ) then
38224: LD_VAR 0 2
38228: PPUSH
38229: CALL_OW 318
38233: IFFALSE 38244
// ComWalk ( un ) ;
38235: LD_VAR 0 2
38239: PPUSH
38240: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38244: LD_VAR 0 2
38248: PPUSH
38249: LD_INT 9
38251: PPUSH
38252: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38256: LD_INT 28
38258: PPUSH
38259: LD_OWVAR 2
38263: PPUSH
38264: LD_INT 2
38266: PPUSH
38267: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38271: LD_INT 29
38273: PPUSH
38274: LD_OWVAR 2
38278: PPUSH
38279: LD_INT 2
38281: PPUSH
38282: CALL_OW 322
// end ;
38286: PPOPN 3
38288: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38289: LD_EXP 64
38293: PUSH
38294: LD_EXP 107
38298: AND
38299: IFFALSE 38410
38301: GO 38303
38303: DISABLE
38304: LD_INT 0
38306: PPUSH
38307: PPUSH
38308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_INT 22
38316: PUSH
38317: LD_OWVAR 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 25
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PPUSH
38340: CALL_OW 69
38344: ST_TO_ADDR
// if not tmp then
38345: LD_VAR 0 3
38349: NOT
38350: IFFALSE 38354
// exit ;
38352: GO 38410
// un := tmp [ rand ( 1 , tmp ) ] ;
38354: LD_ADDR_VAR 0 2
38358: PUSH
38359: LD_VAR 0 3
38363: PUSH
38364: LD_INT 1
38366: PPUSH
38367: LD_VAR 0 3
38371: PPUSH
38372: CALL_OW 12
38376: ARRAY
38377: ST_TO_ADDR
// if Crawls ( un ) then
38378: LD_VAR 0 2
38382: PPUSH
38383: CALL_OW 318
38387: IFFALSE 38398
// ComWalk ( un ) ;
38389: LD_VAR 0 2
38393: PPUSH
38394: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38398: LD_VAR 0 2
38402: PPUSH
38403: LD_INT 8
38405: PPUSH
38406: CALL_OW 336
// end ;
38410: PPOPN 3
38412: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
38413: LD_EXP 64
38417: PUSH
38418: LD_EXP 108
38422: AND
38423: IFFALSE 38567
38425: GO 38427
38427: DISABLE
38428: LD_INT 0
38430: PPUSH
38431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
38432: LD_ADDR_VAR 0 2
38436: PUSH
38437: LD_INT 22
38439: PUSH
38440: LD_OWVAR 2
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 21
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: LD_INT 34
38464: PUSH
38465: LD_INT 12
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 34
38474: PUSH
38475: LD_INT 51
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 34
38484: PUSH
38485: LD_INT 32
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PPUSH
38503: CALL_OW 69
38507: ST_TO_ADDR
// if not tmp then
38508: LD_VAR 0 2
38512: NOT
38513: IFFALSE 38517
// exit ;
38515: GO 38567
// for i in tmp do
38517: LD_ADDR_VAR 0 1
38521: PUSH
38522: LD_VAR 0 2
38526: PUSH
38527: FOR_IN
38528: IFFALSE 38565
// if GetCargo ( i , mat_artifact ) = 0 then
38530: LD_VAR 0 1
38534: PPUSH
38535: LD_INT 4
38537: PPUSH
38538: CALL_OW 289
38542: PUSH
38543: LD_INT 0
38545: EQUAL
38546: IFFALSE 38563
// SetCargo ( i , mat_siberit , 100 ) ;
38548: LD_VAR 0 1
38552: PPUSH
38553: LD_INT 3
38555: PPUSH
38556: LD_INT 100
38558: PPUSH
38559: CALL_OW 290
38563: GO 38527
38565: POP
38566: POP
// end ;
38567: PPOPN 2
38569: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
38570: LD_EXP 64
38574: PUSH
38575: LD_EXP 109
38579: AND
38580: IFFALSE 38763
38582: GO 38584
38584: DISABLE
38585: LD_INT 0
38587: PPUSH
38588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38589: LD_ADDR_VAR 0 2
38593: PUSH
38594: LD_INT 22
38596: PUSH
38597: LD_OWVAR 2
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PPUSH
38606: CALL_OW 69
38610: ST_TO_ADDR
// if not tmp then
38611: LD_VAR 0 2
38615: NOT
38616: IFFALSE 38620
// exit ;
38618: GO 38763
// for i := 1 to 2 do
38620: LD_ADDR_VAR 0 1
38624: PUSH
38625: DOUBLE
38626: LD_INT 1
38628: DEC
38629: ST_TO_ADDR
38630: LD_INT 2
38632: PUSH
38633: FOR_TO
38634: IFFALSE 38761
// begin uc_side := your_side ;
38636: LD_ADDR_OWVAR 20
38640: PUSH
38641: LD_OWVAR 2
38645: ST_TO_ADDR
// uc_nation := nation_american ;
38646: LD_ADDR_OWVAR 21
38650: PUSH
38651: LD_INT 1
38653: ST_TO_ADDR
// vc_chassis := us_morphling ;
38654: LD_ADDR_OWVAR 37
38658: PUSH
38659: LD_INT 5
38661: ST_TO_ADDR
// vc_engine := engine_siberite ;
38662: LD_ADDR_OWVAR 39
38666: PUSH
38667: LD_INT 3
38669: ST_TO_ADDR
// vc_control := control_computer ;
38670: LD_ADDR_OWVAR 38
38674: PUSH
38675: LD_INT 3
38677: ST_TO_ADDR
// vc_weapon := us_double_laser ;
38678: LD_ADDR_OWVAR 40
38682: PUSH
38683: LD_INT 10
38685: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
38686: LD_VAR 0 2
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: PPUSH
38695: CALL_OW 310
38699: NOT
38700: IFFALSE 38747
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
38702: CALL_OW 45
38706: PPUSH
38707: LD_VAR 0 2
38711: PUSH
38712: LD_INT 1
38714: ARRAY
38715: PPUSH
38716: CALL_OW 250
38720: PPUSH
38721: LD_VAR 0 2
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PPUSH
38730: CALL_OW 251
38734: PPUSH
38735: LD_INT 12
38737: PPUSH
38738: LD_INT 1
38740: PPUSH
38741: CALL_OW 50
38745: GO 38759
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
38747: CALL_OW 45
38751: PPUSH
38752: LD_INT 1
38754: PPUSH
38755: CALL_OW 51
// end ;
38759: GO 38633
38761: POP
38762: POP
// end ;
38763: PPOPN 2
38765: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
38766: LD_EXP 64
38770: PUSH
38771: LD_EXP 110
38775: AND
38776: IFFALSE 38998
38778: GO 38780
38780: DISABLE
38781: LD_INT 0
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38789: LD_ADDR_VAR 0 6
38793: PUSH
38794: LD_INT 22
38796: PUSH
38797: LD_OWVAR 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 21
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 23
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PPUSH
38838: CALL_OW 69
38842: ST_TO_ADDR
// if not tmp then
38843: LD_VAR 0 6
38847: NOT
38848: IFFALSE 38852
// exit ;
38850: GO 38998
// s1 := rand ( 1 , 4 ) ;
38852: LD_ADDR_VAR 0 2
38856: PUSH
38857: LD_INT 1
38859: PPUSH
38860: LD_INT 4
38862: PPUSH
38863: CALL_OW 12
38867: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38868: LD_ADDR_VAR 0 4
38872: PUSH
38873: LD_VAR 0 6
38877: PUSH
38878: LD_INT 1
38880: ARRAY
38881: PPUSH
38882: LD_VAR 0 2
38886: PPUSH
38887: CALL_OW 259
38891: ST_TO_ADDR
// if s1 = 1 then
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 1
38899: EQUAL
38900: IFFALSE 38920
// s2 := rand ( 2 , 4 ) else
38902: LD_ADDR_VAR 0 3
38906: PUSH
38907: LD_INT 2
38909: PPUSH
38910: LD_INT 4
38912: PPUSH
38913: CALL_OW 12
38917: ST_TO_ADDR
38918: GO 38928
// s2 := 1 ;
38920: LD_ADDR_VAR 0 3
38924: PUSH
38925: LD_INT 1
38927: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38928: LD_ADDR_VAR 0 5
38932: PUSH
38933: LD_VAR 0 6
38937: PUSH
38938: LD_INT 1
38940: ARRAY
38941: PPUSH
38942: LD_VAR 0 3
38946: PPUSH
38947: CALL_OW 259
38951: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38952: LD_VAR 0 6
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: LD_VAR 0 2
38965: PPUSH
38966: LD_VAR 0 5
38970: PPUSH
38971: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38975: LD_VAR 0 6
38979: PUSH
38980: LD_INT 1
38982: ARRAY
38983: PPUSH
38984: LD_VAR 0 3
38988: PPUSH
38989: LD_VAR 0 4
38993: PPUSH
38994: CALL_OW 237
// end ;
38998: PPOPN 6
39000: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39001: LD_EXP 64
39005: PUSH
39006: LD_EXP 111
39010: AND
39011: IFFALSE 39090
39013: GO 39015
39015: DISABLE
39016: LD_INT 0
39018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39019: LD_ADDR_VAR 0 1
39023: PUSH
39024: LD_INT 22
39026: PUSH
39027: LD_OWVAR 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 30
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PPUSH
39050: CALL_OW 69
39054: ST_TO_ADDR
// if not tmp then
39055: LD_VAR 0 1
39059: NOT
39060: IFFALSE 39064
// exit ;
39062: GO 39090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39064: LD_VAR 0 1
39068: PUSH
39069: LD_INT 1
39071: PPUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 12
39081: ARRAY
39082: PPUSH
39083: LD_INT 1
39085: PPUSH
39086: CALL_OW 234
// end ;
39090: PPOPN 1
39092: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39093: LD_EXP 64
39097: PUSH
39098: LD_EXP 112
39102: AND
39103: IFFALSE 39215
39105: GO 39107
39107: DISABLE
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39112: LD_ADDR_VAR 0 2
39116: PUSH
39117: LD_INT 22
39119: PUSH
39120: LD_OWVAR 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 30
39134: PUSH
39135: LD_INT 27
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: LD_INT 26
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 30
39154: PUSH
39155: LD_INT 28
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PPUSH
39172: CALL_OW 69
39176: ST_TO_ADDR
// if not tmp then
39177: LD_VAR 0 2
39181: NOT
39182: IFFALSE 39186
// exit ;
39184: GO 39215
// for i in tmp do
39186: LD_ADDR_VAR 0 1
39190: PUSH
39191: LD_VAR 0 2
39195: PUSH
39196: FOR_IN
39197: IFFALSE 39213
// SetLives ( i , 1 ) ;
39199: LD_VAR 0 1
39203: PPUSH
39204: LD_INT 1
39206: PPUSH
39207: CALL_OW 234
39211: GO 39196
39213: POP
39214: POP
// end ;
39215: PPOPN 2
39217: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39218: LD_EXP 64
39222: PUSH
39223: LD_EXP 113
39227: AND
39228: IFFALSE 39515
39230: GO 39232
39232: DISABLE
39233: LD_INT 0
39235: PPUSH
39236: PPUSH
39237: PPUSH
// begin i := rand ( 1 , 7 ) ;
39238: LD_ADDR_VAR 0 1
39242: PUSH
39243: LD_INT 1
39245: PPUSH
39246: LD_INT 7
39248: PPUSH
39249: CALL_OW 12
39253: ST_TO_ADDR
// case i of 1 :
39254: LD_VAR 0 1
39258: PUSH
39259: LD_INT 1
39261: DOUBLE
39262: EQUAL
39263: IFTRUE 39267
39265: GO 39277
39267: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39268: LD_STRING earthquake(getX(game), 0, 32)
39270: PPUSH
39271: CALL_OW 559
39275: GO 39515
39277: LD_INT 2
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 39299
39285: POP
// begin ToLua ( displayStucuk(); ) ;
39286: LD_STRING displayStucuk();
39288: PPUSH
39289: CALL_OW 559
// ResetFog ;
39293: CALL_OW 335
// end ; 3 :
39297: GO 39515
39299: LD_INT 3
39301: DOUBLE
39302: EQUAL
39303: IFTRUE 39307
39305: GO 39411
39307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39308: LD_ADDR_VAR 0 2
39312: PUSH
39313: LD_INT 22
39315: PUSH
39316: LD_OWVAR 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 25
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PPUSH
39339: CALL_OW 69
39343: ST_TO_ADDR
// if not tmp then
39344: LD_VAR 0 2
39348: NOT
39349: IFFALSE 39353
// exit ;
39351: GO 39515
// un := tmp [ rand ( 1 , tmp ) ] ;
39353: LD_ADDR_VAR 0 3
39357: PUSH
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 1
39365: PPUSH
39366: LD_VAR 0 2
39370: PPUSH
39371: CALL_OW 12
39375: ARRAY
39376: ST_TO_ADDR
// if Crawls ( un ) then
39377: LD_VAR 0 3
39381: PPUSH
39382: CALL_OW 318
39386: IFFALSE 39397
// ComWalk ( un ) ;
39388: LD_VAR 0 3
39392: PPUSH
39393: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39397: LD_VAR 0 3
39401: PPUSH
39402: LD_INT 8
39404: PPUSH
39405: CALL_OW 336
// end ; 4 :
39409: GO 39515
39411: LD_INT 4
39413: DOUBLE
39414: EQUAL
39415: IFTRUE 39419
39417: GO 39493
39419: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39420: LD_ADDR_VAR 0 2
39424: PUSH
39425: LD_INT 22
39427: PUSH
39428: LD_OWVAR 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 30
39439: PUSH
39440: LD_INT 29
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PPUSH
39451: CALL_OW 69
39455: ST_TO_ADDR
// if not tmp then
39456: LD_VAR 0 2
39460: NOT
39461: IFFALSE 39465
// exit ;
39463: GO 39515
// CenterNowOnUnits ( tmp [ 1 ] ) ;
39465: LD_VAR 0 2
39469: PUSH
39470: LD_INT 1
39472: ARRAY
39473: PPUSH
39474: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
39478: LD_VAR 0 2
39482: PUSH
39483: LD_INT 1
39485: ARRAY
39486: PPUSH
39487: CALL_OW 65
// end ; 5 .. 7 :
39491: GO 39515
39493: LD_INT 5
39495: DOUBLE
39496: GREATEREQUAL
39497: IFFALSE 39505
39499: LD_INT 7
39501: DOUBLE
39502: LESSEQUAL
39503: IFTRUE 39507
39505: GO 39514
39507: POP
// StreamSibBomb ; end ;
39508: CALL 35752 0 0
39512: GO 39515
39514: POP
// end ;
39515: PPOPN 3
39517: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
39518: LD_EXP 64
39522: PUSH
39523: LD_EXP 114
39527: AND
39528: IFFALSE 39684
39530: GO 39532
39532: DISABLE
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
39537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
39538: LD_ADDR_VAR 0 2
39542: PUSH
39543: LD_INT 81
39545: PUSH
39546: LD_OWVAR 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: LD_INT 21
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 21
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PPUSH
39587: CALL_OW 69
39591: ST_TO_ADDR
// if not tmp then
39592: LD_VAR 0 2
39596: NOT
39597: IFFALSE 39601
// exit ;
39599: GO 39684
// p := 0 ;
39601: LD_ADDR_VAR 0 3
39605: PUSH
39606: LD_INT 0
39608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39609: LD_INT 35
39611: PPUSH
39612: CALL_OW 67
// p := p + 1 ;
39616: LD_ADDR_VAR 0 3
39620: PUSH
39621: LD_VAR 0 3
39625: PUSH
39626: LD_INT 1
39628: PLUS
39629: ST_TO_ADDR
// for i in tmp do
39630: LD_ADDR_VAR 0 1
39634: PUSH
39635: LD_VAR 0 2
39639: PUSH
39640: FOR_IN
39641: IFFALSE 39672
// if GetLives ( i ) < 1000 then
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 256
39652: PUSH
39653: LD_INT 1000
39655: LESS
39656: IFFALSE 39670
// SetLives ( i , 1000 ) ;
39658: LD_VAR 0 1
39662: PPUSH
39663: LD_INT 1000
39665: PPUSH
39666: CALL_OW 234
39670: GO 39640
39672: POP
39673: POP
// until p > 20 ;
39674: LD_VAR 0 3
39678: PUSH
39679: LD_INT 20
39681: GREATER
39682: IFFALSE 39609
// end ;
39684: PPOPN 3
39686: END
// every 0 0$1 trigger StreamModeActive and sTime do
39687: LD_EXP 64
39691: PUSH
39692: LD_EXP 115
39696: AND
39697: IFFALSE 39732
39699: GO 39701
39701: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
39702: LD_INT 28
39704: PPUSH
39705: LD_OWVAR 2
39709: PPUSH
39710: LD_INT 2
39712: PPUSH
39713: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
39717: LD_INT 30
39719: PPUSH
39720: LD_OWVAR 2
39724: PPUSH
39725: LD_INT 2
39727: PPUSH
39728: CALL_OW 322
// end ;
39732: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
39733: LD_EXP 64
39737: PUSH
39738: LD_EXP 116
39742: AND
39743: IFFALSE 39864
39745: GO 39747
39747: DISABLE
39748: LD_INT 0
39750: PPUSH
39751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39752: LD_ADDR_VAR 0 2
39756: PUSH
39757: LD_INT 22
39759: PUSH
39760: LD_OWVAR 2
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 21
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: LD_INT 23
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: PPUSH
39801: CALL_OW 69
39805: ST_TO_ADDR
// if not tmp then
39806: LD_VAR 0 2
39810: NOT
39811: IFFALSE 39815
// exit ;
39813: GO 39864
// for i in tmp do
39815: LD_ADDR_VAR 0 1
39819: PUSH
39820: LD_VAR 0 2
39824: PUSH
39825: FOR_IN
39826: IFFALSE 39862
// begin if Crawls ( i ) then
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 318
39837: IFFALSE 39848
// ComWalk ( i ) ;
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 138
// SetClass ( i , 2 ) ;
39848: LD_VAR 0 1
39852: PPUSH
39853: LD_INT 2
39855: PPUSH
39856: CALL_OW 336
// end ;
39860: GO 39825
39862: POP
39863: POP
// end ;
39864: PPOPN 2
39866: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39867: LD_EXP 64
39871: PUSH
39872: LD_EXP 117
39876: AND
39877: IFFALSE 40165
39879: GO 39881
39881: DISABLE
39882: LD_INT 0
39884: PPUSH
39885: PPUSH
39886: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39887: LD_OWVAR 2
39891: PPUSH
39892: LD_INT 9
39894: PPUSH
39895: LD_INT 1
39897: PPUSH
39898: LD_INT 1
39900: PPUSH
39901: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39905: LD_INT 9
39907: PPUSH
39908: LD_OWVAR 2
39912: PPUSH
39913: CALL_OW 343
// uc_side := 9 ;
39917: LD_ADDR_OWVAR 20
39921: PUSH
39922: LD_INT 9
39924: ST_TO_ADDR
// uc_nation := 2 ;
39925: LD_ADDR_OWVAR 21
39929: PUSH
39930: LD_INT 2
39932: ST_TO_ADDR
// hc_name := Dark Warrior ;
39933: LD_ADDR_OWVAR 26
39937: PUSH
39938: LD_STRING Dark Warrior
39940: ST_TO_ADDR
// hc_gallery :=  ;
39941: LD_ADDR_OWVAR 33
39945: PUSH
39946: LD_STRING 
39948: ST_TO_ADDR
// hc_noskilllimit := true ;
39949: LD_ADDR_OWVAR 76
39953: PUSH
39954: LD_INT 1
39956: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39957: LD_ADDR_OWVAR 31
39961: PUSH
39962: LD_INT 30
39964: PUSH
39965: LD_INT 30
39967: PUSH
39968: LD_INT 30
39970: PUSH
39971: LD_INT 30
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
// un := CreateHuman ;
39980: LD_ADDR_VAR 0 3
39984: PUSH
39985: CALL_OW 44
39989: ST_TO_ADDR
// hc_noskilllimit := false ;
39990: LD_ADDR_OWVAR 76
39994: PUSH
39995: LD_INT 0
39997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39998: LD_VAR 0 3
40002: PPUSH
40003: LD_INT 1
40005: PPUSH
40006: CALL_OW 51
// ToLua ( playRanger() ) ;
40010: LD_STRING playRanger()
40012: PPUSH
40013: CALL_OW 559
// p := 0 ;
40017: LD_ADDR_VAR 0 2
40021: PUSH
40022: LD_INT 0
40024: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40025: LD_INT 35
40027: PPUSH
40028: CALL_OW 67
// p := p + 1 ;
40032: LD_ADDR_VAR 0 2
40036: PUSH
40037: LD_VAR 0 2
40041: PUSH
40042: LD_INT 1
40044: PLUS
40045: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40046: LD_VAR 0 3
40050: PPUSH
40051: CALL_OW 256
40055: PUSH
40056: LD_INT 1000
40058: LESS
40059: IFFALSE 40073
// SetLives ( un , 1000 ) ;
40061: LD_VAR 0 3
40065: PPUSH
40066: LD_INT 1000
40068: PPUSH
40069: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40073: LD_VAR 0 3
40077: PPUSH
40078: LD_INT 81
40080: PUSH
40081: LD_OWVAR 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 91
40092: PUSH
40093: LD_VAR 0 3
40097: PUSH
40098: LD_INT 30
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PPUSH
40110: CALL_OW 69
40114: PPUSH
40115: LD_VAR 0 3
40119: PPUSH
40120: CALL_OW 74
40124: PPUSH
40125: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
40129: LD_VAR 0 2
40133: PUSH
40134: LD_INT 80
40136: GREATER
40137: PUSH
40138: LD_VAR 0 3
40142: PPUSH
40143: CALL_OW 301
40147: OR
40148: IFFALSE 40025
// if un then
40150: LD_VAR 0 3
40154: IFFALSE 40165
// RemoveUnit ( un ) ;
40156: LD_VAR 0 3
40160: PPUSH
40161: CALL_OW 64
// end ;
40165: PPOPN 3
40167: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
40168: LD_EXP 118
40172: IFFALSE 40288
40174: GO 40176
40176: DISABLE
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
40181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40182: LD_ADDR_VAR 0 2
40186: PUSH
40187: LD_INT 81
40189: PUSH
40190: LD_OWVAR 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 21
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PPUSH
40213: CALL_OW 69
40217: ST_TO_ADDR
// ToLua ( playComputer() ) ;
40218: LD_STRING playComputer()
40220: PPUSH
40221: CALL_OW 559
// if not tmp then
40225: LD_VAR 0 2
40229: NOT
40230: IFFALSE 40234
// exit ;
40232: GO 40288
// for i in tmp do
40234: LD_ADDR_VAR 0 1
40238: PUSH
40239: LD_VAR 0 2
40243: PUSH
40244: FOR_IN
40245: IFFALSE 40286
// for j := 1 to 4 do
40247: LD_ADDR_VAR 0 3
40251: PUSH
40252: DOUBLE
40253: LD_INT 1
40255: DEC
40256: ST_TO_ADDR
40257: LD_INT 4
40259: PUSH
40260: FOR_TO
40261: IFFALSE 40282
// SetSkill ( i , j , 10 ) ;
40263: LD_VAR 0 1
40267: PPUSH
40268: LD_VAR 0 3
40272: PPUSH
40273: LD_INT 10
40275: PPUSH
40276: CALL_OW 237
40280: GO 40260
40282: POP
40283: POP
40284: GO 40244
40286: POP
40287: POP
// end ;
40288: PPOPN 3
40290: END
// every 0 0$1 trigger s30 do var i , tmp ;
40291: LD_EXP 119
40295: IFFALSE 40364
40297: GO 40299
40299: DISABLE
40300: LD_INT 0
40302: PPUSH
40303: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40304: LD_ADDR_VAR 0 2
40308: PUSH
40309: LD_INT 22
40311: PUSH
40312: LD_OWVAR 2
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PPUSH
40321: CALL_OW 69
40325: ST_TO_ADDR
// if not tmp then
40326: LD_VAR 0 2
40330: NOT
40331: IFFALSE 40335
// exit ;
40333: GO 40364
// for i in tmp do
40335: LD_ADDR_VAR 0 1
40339: PUSH
40340: LD_VAR 0 2
40344: PUSH
40345: FOR_IN
40346: IFFALSE 40362
// SetLives ( i , 300 ) ;
40348: LD_VAR 0 1
40352: PPUSH
40353: LD_INT 300
40355: PPUSH
40356: CALL_OW 234
40360: GO 40345
40362: POP
40363: POP
// end ;
40364: PPOPN 2
40366: END
// every 0 0$1 trigger s60 do var i , tmp ;
40367: LD_EXP 120
40371: IFFALSE 40440
40373: GO 40375
40375: DISABLE
40376: LD_INT 0
40378: PPUSH
40379: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40380: LD_ADDR_VAR 0 2
40384: PUSH
40385: LD_INT 22
40387: PUSH
40388: LD_OWVAR 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PPUSH
40397: CALL_OW 69
40401: ST_TO_ADDR
// if not tmp then
40402: LD_VAR 0 2
40406: NOT
40407: IFFALSE 40411
// exit ;
40409: GO 40440
// for i in tmp do
40411: LD_ADDR_VAR 0 1
40415: PUSH
40416: LD_VAR 0 2
40420: PUSH
40421: FOR_IN
40422: IFFALSE 40438
// SetLives ( i , 600 ) ;
40424: LD_VAR 0 1
40428: PPUSH
40429: LD_INT 600
40431: PPUSH
40432: CALL_OW 234
40436: GO 40421
40438: POP
40439: POP
// end ;
40440: PPOPN 2
40442: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40443: LD_INT 0
40445: PPUSH
// case cmd of 301 :
40446: LD_VAR 0 1
40450: PUSH
40451: LD_INT 301
40453: DOUBLE
40454: EQUAL
40455: IFTRUE 40459
40457: GO 40491
40459: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40460: LD_VAR 0 6
40464: PPUSH
40465: LD_VAR 0 7
40469: PPUSH
40470: LD_VAR 0 8
40474: PPUSH
40475: LD_VAR 0 4
40479: PPUSH
40480: LD_VAR 0 5
40484: PPUSH
40485: CALL 41692 0 5
40489: GO 40612
40491: LD_INT 302
40493: DOUBLE
40494: EQUAL
40495: IFTRUE 40499
40497: GO 40536
40499: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
40500: LD_VAR 0 6
40504: PPUSH
40505: LD_VAR 0 7
40509: PPUSH
40510: LD_VAR 0 8
40514: PPUSH
40515: LD_VAR 0 9
40519: PPUSH
40520: LD_VAR 0 4
40524: PPUSH
40525: LD_VAR 0 5
40529: PPUSH
40530: CALL 41783 0 6
40534: GO 40612
40536: LD_INT 303
40538: DOUBLE
40539: EQUAL
40540: IFTRUE 40544
40542: GO 40581
40544: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
40545: LD_VAR 0 6
40549: PPUSH
40550: LD_VAR 0 7
40554: PPUSH
40555: LD_VAR 0 8
40559: PPUSH
40560: LD_VAR 0 9
40564: PPUSH
40565: LD_VAR 0 4
40569: PPUSH
40570: LD_VAR 0 5
40574: PPUSH
40575: CALL 40617 0 6
40579: GO 40612
40581: LD_INT 304
40583: DOUBLE
40584: EQUAL
40585: IFTRUE 40589
40587: GO 40611
40589: POP
// hHackTeleport ( unit , x , y ) ; end ;
40590: LD_VAR 0 2
40594: PPUSH
40595: LD_VAR 0 4
40599: PPUSH
40600: LD_VAR 0 5
40604: PPUSH
40605: CALL 42376 0 3
40609: GO 40612
40611: POP
// end ;
40612: LD_VAR 0 12
40616: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
40617: LD_INT 0
40619: PPUSH
40620: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
40621: LD_VAR 0 1
40625: PUSH
40626: LD_INT 1
40628: LESS
40629: PUSH
40630: LD_VAR 0 1
40634: PUSH
40635: LD_INT 3
40637: GREATER
40638: OR
40639: PUSH
40640: LD_VAR 0 5
40644: PPUSH
40645: LD_VAR 0 6
40649: PPUSH
40650: CALL_OW 428
40654: OR
40655: IFFALSE 40659
// exit ;
40657: GO 41379
// uc_side := your_side ;
40659: LD_ADDR_OWVAR 20
40663: PUSH
40664: LD_OWVAR 2
40668: ST_TO_ADDR
// uc_nation := nation ;
40669: LD_ADDR_OWVAR 21
40673: PUSH
40674: LD_VAR 0 1
40678: ST_TO_ADDR
// bc_level = 1 ;
40679: LD_ADDR_OWVAR 43
40683: PUSH
40684: LD_INT 1
40686: ST_TO_ADDR
// case btype of 1 :
40687: LD_VAR 0 2
40691: PUSH
40692: LD_INT 1
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40711
40700: POP
// bc_type := b_depot ; 2 :
40701: LD_ADDR_OWVAR 42
40705: PUSH
40706: LD_INT 0
40708: ST_TO_ADDR
40709: GO 41323
40711: LD_INT 2
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40730
40719: POP
// bc_type := b_warehouse ; 3 :
40720: LD_ADDR_OWVAR 42
40724: PUSH
40725: LD_INT 1
40727: ST_TO_ADDR
40728: GO 41323
40730: LD_INT 3
40732: DOUBLE
40733: EQUAL
40734: IFTRUE 40738
40736: GO 40749
40738: POP
// bc_type := b_lab ; 4 .. 9 :
40739: LD_ADDR_OWVAR 42
40743: PUSH
40744: LD_INT 6
40746: ST_TO_ADDR
40747: GO 41323
40749: LD_INT 4
40751: DOUBLE
40752: GREATEREQUAL
40753: IFFALSE 40761
40755: LD_INT 9
40757: DOUBLE
40758: LESSEQUAL
40759: IFTRUE 40763
40761: GO 40815
40763: POP
// begin bc_type := b_lab_half ;
40764: LD_ADDR_OWVAR 42
40768: PUSH
40769: LD_INT 7
40771: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
40772: LD_ADDR_OWVAR 44
40776: PUSH
40777: LD_INT 10
40779: PUSH
40780: LD_INT 11
40782: PUSH
40783: LD_INT 12
40785: PUSH
40786: LD_INT 15
40788: PUSH
40789: LD_INT 14
40791: PUSH
40792: LD_INT 13
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: PUSH
40803: LD_VAR 0 2
40807: PUSH
40808: LD_INT 3
40810: MINUS
40811: ARRAY
40812: ST_TO_ADDR
// end ; 10 .. 13 :
40813: GO 41323
40815: LD_INT 10
40817: DOUBLE
40818: GREATEREQUAL
40819: IFFALSE 40827
40821: LD_INT 13
40823: DOUBLE
40824: LESSEQUAL
40825: IFTRUE 40829
40827: GO 40906
40829: POP
// begin bc_type := b_lab_full ;
40830: LD_ADDR_OWVAR 42
40834: PUSH
40835: LD_INT 8
40837: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40838: LD_ADDR_OWVAR 44
40842: PUSH
40843: LD_INT 10
40845: PUSH
40846: LD_INT 12
40848: PUSH
40849: LD_INT 14
40851: PUSH
40852: LD_INT 13
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: PUSH
40861: LD_VAR 0 2
40865: PUSH
40866: LD_INT 9
40868: MINUS
40869: ARRAY
40870: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40871: LD_ADDR_OWVAR 45
40875: PUSH
40876: LD_INT 11
40878: PUSH
40879: LD_INT 15
40881: PUSH
40882: LD_INT 12
40884: PUSH
40885: LD_INT 15
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: PUSH
40894: LD_VAR 0 2
40898: PUSH
40899: LD_INT 9
40901: MINUS
40902: ARRAY
40903: ST_TO_ADDR
// end ; 14 :
40904: GO 41323
40906: LD_INT 14
40908: DOUBLE
40909: EQUAL
40910: IFTRUE 40914
40912: GO 40925
40914: POP
// bc_type := b_workshop ; 15 :
40915: LD_ADDR_OWVAR 42
40919: PUSH
40920: LD_INT 2
40922: ST_TO_ADDR
40923: GO 41323
40925: LD_INT 15
40927: DOUBLE
40928: EQUAL
40929: IFTRUE 40933
40931: GO 40944
40933: POP
// bc_type := b_factory ; 16 :
40934: LD_ADDR_OWVAR 42
40938: PUSH
40939: LD_INT 3
40941: ST_TO_ADDR
40942: GO 41323
40944: LD_INT 16
40946: DOUBLE
40947: EQUAL
40948: IFTRUE 40952
40950: GO 40963
40952: POP
// bc_type := b_ext_gun ; 17 :
40953: LD_ADDR_OWVAR 42
40957: PUSH
40958: LD_INT 17
40960: ST_TO_ADDR
40961: GO 41323
40963: LD_INT 17
40965: DOUBLE
40966: EQUAL
40967: IFTRUE 40971
40969: GO 40999
40971: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40972: LD_ADDR_OWVAR 42
40976: PUSH
40977: LD_INT 19
40979: PUSH
40980: LD_INT 23
40982: PUSH
40983: LD_INT 19
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: PUSH
40991: LD_VAR 0 1
40995: ARRAY
40996: ST_TO_ADDR
40997: GO 41323
40999: LD_INT 18
41001: DOUBLE
41002: EQUAL
41003: IFTRUE 41007
41005: GO 41018
41007: POP
// bc_type := b_ext_radar ; 19 :
41008: LD_ADDR_OWVAR 42
41012: PUSH
41013: LD_INT 20
41015: ST_TO_ADDR
41016: GO 41323
41018: LD_INT 19
41020: DOUBLE
41021: EQUAL
41022: IFTRUE 41026
41024: GO 41037
41026: POP
// bc_type := b_ext_radio ; 20 :
41027: LD_ADDR_OWVAR 42
41031: PUSH
41032: LD_INT 22
41034: ST_TO_ADDR
41035: GO 41323
41037: LD_INT 20
41039: DOUBLE
41040: EQUAL
41041: IFTRUE 41045
41043: GO 41056
41045: POP
// bc_type := b_ext_siberium ; 21 :
41046: LD_ADDR_OWVAR 42
41050: PUSH
41051: LD_INT 21
41053: ST_TO_ADDR
41054: GO 41323
41056: LD_INT 21
41058: DOUBLE
41059: EQUAL
41060: IFTRUE 41064
41062: GO 41075
41064: POP
// bc_type := b_ext_computer ; 22 :
41065: LD_ADDR_OWVAR 42
41069: PUSH
41070: LD_INT 24
41072: ST_TO_ADDR
41073: GO 41323
41075: LD_INT 22
41077: DOUBLE
41078: EQUAL
41079: IFTRUE 41083
41081: GO 41094
41083: POP
// bc_type := b_ext_track ; 23 :
41084: LD_ADDR_OWVAR 42
41088: PUSH
41089: LD_INT 16
41091: ST_TO_ADDR
41092: GO 41323
41094: LD_INT 23
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41102
41100: GO 41113
41102: POP
// bc_type := b_ext_laser ; 24 :
41103: LD_ADDR_OWVAR 42
41107: PUSH
41108: LD_INT 25
41110: ST_TO_ADDR
41111: GO 41323
41113: LD_INT 24
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41132
41121: POP
// bc_type := b_control_tower ; 25 :
41122: LD_ADDR_OWVAR 42
41126: PUSH
41127: LD_INT 36
41129: ST_TO_ADDR
41130: GO 41323
41132: LD_INT 25
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41151
41140: POP
// bc_type := b_breastwork ; 26 :
41141: LD_ADDR_OWVAR 42
41145: PUSH
41146: LD_INT 31
41148: ST_TO_ADDR
41149: GO 41323
41151: LD_INT 26
41153: DOUBLE
41154: EQUAL
41155: IFTRUE 41159
41157: GO 41170
41159: POP
// bc_type := b_bunker ; 27 :
41160: LD_ADDR_OWVAR 42
41164: PUSH
41165: LD_INT 32
41167: ST_TO_ADDR
41168: GO 41323
41170: LD_INT 27
41172: DOUBLE
41173: EQUAL
41174: IFTRUE 41178
41176: GO 41189
41178: POP
// bc_type := b_turret ; 28 :
41179: LD_ADDR_OWVAR 42
41183: PUSH
41184: LD_INT 33
41186: ST_TO_ADDR
41187: GO 41323
41189: LD_INT 28
41191: DOUBLE
41192: EQUAL
41193: IFTRUE 41197
41195: GO 41208
41197: POP
// bc_type := b_armoury ; 29 :
41198: LD_ADDR_OWVAR 42
41202: PUSH
41203: LD_INT 4
41205: ST_TO_ADDR
41206: GO 41323
41208: LD_INT 29
41210: DOUBLE
41211: EQUAL
41212: IFTRUE 41216
41214: GO 41227
41216: POP
// bc_type := b_barracks ; 30 :
41217: LD_ADDR_OWVAR 42
41221: PUSH
41222: LD_INT 5
41224: ST_TO_ADDR
41225: GO 41323
41227: LD_INT 30
41229: DOUBLE
41230: EQUAL
41231: IFTRUE 41235
41233: GO 41246
41235: POP
// bc_type := b_solar_power ; 31 :
41236: LD_ADDR_OWVAR 42
41240: PUSH
41241: LD_INT 27
41243: ST_TO_ADDR
41244: GO 41323
41246: LD_INT 31
41248: DOUBLE
41249: EQUAL
41250: IFTRUE 41254
41252: GO 41265
41254: POP
// bc_type := b_oil_power ; 32 :
41255: LD_ADDR_OWVAR 42
41259: PUSH
41260: LD_INT 26
41262: ST_TO_ADDR
41263: GO 41323
41265: LD_INT 32
41267: DOUBLE
41268: EQUAL
41269: IFTRUE 41273
41271: GO 41284
41273: POP
// bc_type := b_siberite_power ; 33 :
41274: LD_ADDR_OWVAR 42
41278: PUSH
41279: LD_INT 28
41281: ST_TO_ADDR
41282: GO 41323
41284: LD_INT 33
41286: DOUBLE
41287: EQUAL
41288: IFTRUE 41292
41290: GO 41303
41292: POP
// bc_type := b_oil_mine ; 34 :
41293: LD_ADDR_OWVAR 42
41297: PUSH
41298: LD_INT 29
41300: ST_TO_ADDR
41301: GO 41323
41303: LD_INT 34
41305: DOUBLE
41306: EQUAL
41307: IFTRUE 41311
41309: GO 41322
41311: POP
// bc_type := b_siberite_mine ; end ;
41312: LD_ADDR_OWVAR 42
41316: PUSH
41317: LD_INT 30
41319: ST_TO_ADDR
41320: GO 41323
41322: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41323: LD_ADDR_VAR 0 8
41327: PUSH
41328: LD_VAR 0 5
41332: PPUSH
41333: LD_VAR 0 6
41337: PPUSH
41338: LD_VAR 0 3
41342: PPUSH
41343: CALL_OW 47
41347: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41348: LD_OWVAR 42
41352: PUSH
41353: LD_INT 32
41355: PUSH
41356: LD_INT 33
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: IN
41363: IFFALSE 41379
// PlaceWeaponTurret ( b , weapon ) ;
41365: LD_VAR 0 8
41369: PPUSH
41370: LD_VAR 0 4
41374: PPUSH
41375: CALL_OW 431
// end ;
41379: LD_VAR 0 7
41383: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41390: LD_ADDR_VAR 0 4
41394: PUSH
41395: LD_INT 22
41397: PUSH
41398: LD_OWVAR 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 30
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 30
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PPUSH
41439: CALL_OW 69
41443: ST_TO_ADDR
// if not tmp then
41444: LD_VAR 0 4
41448: NOT
41449: IFFALSE 41453
// exit ;
41451: GO 41512
// for i in tmp do
41453: LD_ADDR_VAR 0 2
41457: PUSH
41458: LD_VAR 0 4
41462: PUSH
41463: FOR_IN
41464: IFFALSE 41510
// for j = 1 to 3 do
41466: LD_ADDR_VAR 0 3
41470: PUSH
41471: DOUBLE
41472: LD_INT 1
41474: DEC
41475: ST_TO_ADDR
41476: LD_INT 3
41478: PUSH
41479: FOR_TO
41480: IFFALSE 41506
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
41482: LD_VAR 0 2
41486: PPUSH
41487: CALL_OW 274
41491: PPUSH
41492: LD_VAR 0 3
41496: PPUSH
41497: LD_INT 99999
41499: PPUSH
41500: CALL_OW 277
41504: GO 41479
41506: POP
41507: POP
41508: GO 41463
41510: POP
41511: POP
// end ;
41512: LD_VAR 0 1
41516: RET
// export function hHackSetLevel10 ; var i , j ; begin
41517: LD_INT 0
41519: PPUSH
41520: PPUSH
41521: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41522: LD_ADDR_VAR 0 2
41526: PUSH
41527: LD_INT 21
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PPUSH
41537: CALL_OW 69
41541: PUSH
41542: FOR_IN
41543: IFFALSE 41595
// if IsSelected ( i ) then
41545: LD_VAR 0 2
41549: PPUSH
41550: CALL_OW 306
41554: IFFALSE 41593
// begin for j := 1 to 4 do
41556: LD_ADDR_VAR 0 3
41560: PUSH
41561: DOUBLE
41562: LD_INT 1
41564: DEC
41565: ST_TO_ADDR
41566: LD_INT 4
41568: PUSH
41569: FOR_TO
41570: IFFALSE 41591
// SetSkill ( i , j , 10 ) ;
41572: LD_VAR 0 2
41576: PPUSH
41577: LD_VAR 0 3
41581: PPUSH
41582: LD_INT 10
41584: PPUSH
41585: CALL_OW 237
41589: GO 41569
41591: POP
41592: POP
// end ;
41593: GO 41542
41595: POP
41596: POP
// end ;
41597: LD_VAR 0 1
41601: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
41602: LD_INT 0
41604: PPUSH
41605: PPUSH
41606: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
41607: LD_ADDR_VAR 0 2
41611: PUSH
41612: LD_INT 22
41614: PUSH
41615: LD_OWVAR 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 21
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PPUSH
41638: CALL_OW 69
41642: PUSH
41643: FOR_IN
41644: IFFALSE 41685
// begin for j := 1 to 4 do
41646: LD_ADDR_VAR 0 3
41650: PUSH
41651: DOUBLE
41652: LD_INT 1
41654: DEC
41655: ST_TO_ADDR
41656: LD_INT 4
41658: PUSH
41659: FOR_TO
41660: IFFALSE 41681
// SetSkill ( i , j , 10 ) ;
41662: LD_VAR 0 2
41666: PPUSH
41667: LD_VAR 0 3
41671: PPUSH
41672: LD_INT 10
41674: PPUSH
41675: CALL_OW 237
41679: GO 41659
41681: POP
41682: POP
// end ;
41683: GO 41643
41685: POP
41686: POP
// end ;
41687: LD_VAR 0 1
41691: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
41692: LD_INT 0
41694: PPUSH
// uc_side := your_side ;
41695: LD_ADDR_OWVAR 20
41699: PUSH
41700: LD_OWVAR 2
41704: ST_TO_ADDR
// uc_nation := nation ;
41705: LD_ADDR_OWVAR 21
41709: PUSH
41710: LD_VAR 0 1
41714: ST_TO_ADDR
// InitHc ;
41715: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41719: LD_INT 0
41721: PPUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: LD_VAR 0 3
41731: PPUSH
41732: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
41736: LD_VAR 0 4
41740: PPUSH
41741: LD_VAR 0 5
41745: PPUSH
41746: CALL_OW 428
41750: PUSH
41751: LD_INT 0
41753: EQUAL
41754: IFFALSE 41778
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
41756: CALL_OW 44
41760: PPUSH
41761: LD_VAR 0 4
41765: PPUSH
41766: LD_VAR 0 5
41770: PPUSH
41771: LD_INT 1
41773: PPUSH
41774: CALL_OW 48
// end ;
41778: LD_VAR 0 6
41782: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
41783: LD_INT 0
41785: PPUSH
41786: PPUSH
// uc_side := your_side ;
41787: LD_ADDR_OWVAR 20
41791: PUSH
41792: LD_OWVAR 2
41796: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41797: LD_VAR 0 1
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: LD_INT 4
41813: PUSH
41814: LD_INT 5
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: IN
41824: IFFALSE 41836
// uc_nation := nation_american else
41826: LD_ADDR_OWVAR 21
41830: PUSH
41831: LD_INT 1
41833: ST_TO_ADDR
41834: GO 41879
// if chassis in [ 11 , 12 , 13 , 14 ] then
41836: LD_VAR 0 1
41840: PUSH
41841: LD_INT 11
41843: PUSH
41844: LD_INT 12
41846: PUSH
41847: LD_INT 13
41849: PUSH
41850: LD_INT 14
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: IN
41859: IFFALSE 41871
// uc_nation := nation_arabian else
41861: LD_ADDR_OWVAR 21
41865: PUSH
41866: LD_INT 2
41868: ST_TO_ADDR
41869: GO 41879
// uc_nation := nation_russian ;
41871: LD_ADDR_OWVAR 21
41875: PUSH
41876: LD_INT 3
41878: ST_TO_ADDR
// vc_chassis := chassis ;
41879: LD_ADDR_OWVAR 37
41883: PUSH
41884: LD_VAR 0 1
41888: ST_TO_ADDR
// vc_engine := engine ;
41889: LD_ADDR_OWVAR 39
41893: PUSH
41894: LD_VAR 0 2
41898: ST_TO_ADDR
// vc_control := control ;
41899: LD_ADDR_OWVAR 38
41903: PUSH
41904: LD_VAR 0 3
41908: ST_TO_ADDR
// vc_weapon := weapon ;
41909: LD_ADDR_OWVAR 40
41913: PUSH
41914: LD_VAR 0 4
41918: ST_TO_ADDR
// un := CreateVehicle ;
41919: LD_ADDR_VAR 0 8
41923: PUSH
41924: CALL_OW 45
41928: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41929: LD_VAR 0 8
41933: PPUSH
41934: LD_INT 0
41936: PPUSH
41937: LD_INT 5
41939: PPUSH
41940: CALL_OW 12
41944: PPUSH
41945: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41949: LD_VAR 0 8
41953: PPUSH
41954: LD_VAR 0 5
41958: PPUSH
41959: LD_VAR 0 6
41963: PPUSH
41964: LD_INT 1
41966: PPUSH
41967: CALL_OW 48
// end ;
41971: LD_VAR 0 7
41975: RET
// export hInvincible ; every 1 do
41976: GO 41978
41978: DISABLE
// hInvincible := [ ] ;
41979: LD_ADDR_EXP 121
41983: PUSH
41984: EMPTY
41985: ST_TO_ADDR
41986: END
// every 10 do var i ;
41987: GO 41989
41989: DISABLE
41990: LD_INT 0
41992: PPUSH
// begin enable ;
41993: ENABLE
// if not hInvincible then
41994: LD_EXP 121
41998: NOT
41999: IFFALSE 42003
// exit ;
42001: GO 42047
// for i in hInvincible do
42003: LD_ADDR_VAR 0 1
42007: PUSH
42008: LD_EXP 121
42012: PUSH
42013: FOR_IN
42014: IFFALSE 42045
// if GetLives ( i ) < 1000 then
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 256
42025: PUSH
42026: LD_INT 1000
42028: LESS
42029: IFFALSE 42043
// SetLives ( i , 1000 ) ;
42031: LD_VAR 0 1
42035: PPUSH
42036: LD_INT 1000
42038: PPUSH
42039: CALL_OW 234
42043: GO 42013
42045: POP
42046: POP
// end ;
42047: PPOPN 1
42049: END
// export function hHackInvincible ; var i ; begin
42050: LD_INT 0
42052: PPUSH
42053: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42054: LD_ADDR_VAR 0 2
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 21
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 21
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: PPUSH
42087: CALL_OW 69
42091: PUSH
42092: FOR_IN
42093: IFFALSE 42154
// if IsSelected ( i ) then
42095: LD_VAR 0 2
42099: PPUSH
42100: CALL_OW 306
42104: IFFALSE 42152
// begin if i in hInvincible then
42106: LD_VAR 0 2
42110: PUSH
42111: LD_EXP 121
42115: IN
42116: IFFALSE 42136
// hInvincible := hInvincible diff i else
42118: LD_ADDR_EXP 121
42122: PUSH
42123: LD_EXP 121
42127: PUSH
42128: LD_VAR 0 2
42132: DIFF
42133: ST_TO_ADDR
42134: GO 42152
// hInvincible := hInvincible union i ;
42136: LD_ADDR_EXP 121
42140: PUSH
42141: LD_EXP 121
42145: PUSH
42146: LD_VAR 0 2
42150: UNION
42151: ST_TO_ADDR
// end ;
42152: GO 42092
42154: POP
42155: POP
// end ;
42156: LD_VAR 0 1
42160: RET
// export function hHackInvisible ; var i , j ; begin
42161: LD_INT 0
42163: PPUSH
42164: PPUSH
42165: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42166: LD_ADDR_VAR 0 2
42170: PUSH
42171: LD_INT 21
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PPUSH
42181: CALL_OW 69
42185: PUSH
42186: FOR_IN
42187: IFFALSE 42211
// if IsSelected ( i ) then
42189: LD_VAR 0 2
42193: PPUSH
42194: CALL_OW 306
42198: IFFALSE 42209
// ComForceInvisible ( i ) ;
42200: LD_VAR 0 2
42204: PPUSH
42205: CALL_OW 496
42209: GO 42186
42211: POP
42212: POP
// end ;
42213: LD_VAR 0 1
42217: RET
// export function hHackChangeYourSide ; begin
42218: LD_INT 0
42220: PPUSH
// if your_side = 8 then
42221: LD_OWVAR 2
42225: PUSH
42226: LD_INT 8
42228: EQUAL
42229: IFFALSE 42241
// your_side := 0 else
42231: LD_ADDR_OWVAR 2
42235: PUSH
42236: LD_INT 0
42238: ST_TO_ADDR
42239: GO 42255
// your_side := your_side + 1 ;
42241: LD_ADDR_OWVAR 2
42245: PUSH
42246: LD_OWVAR 2
42250: PUSH
42251: LD_INT 1
42253: PLUS
42254: ST_TO_ADDR
// end ;
42255: LD_VAR 0 1
42259: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42260: LD_INT 0
42262: PPUSH
42263: PPUSH
42264: PPUSH
// for i in all_units do
42265: LD_ADDR_VAR 0 2
42269: PUSH
42270: LD_OWVAR 3
42274: PUSH
42275: FOR_IN
42276: IFFALSE 42354
// if IsSelected ( i ) then
42278: LD_VAR 0 2
42282: PPUSH
42283: CALL_OW 306
42287: IFFALSE 42352
// begin j := GetSide ( i ) ;
42289: LD_ADDR_VAR 0 3
42293: PUSH
42294: LD_VAR 0 2
42298: PPUSH
42299: CALL_OW 255
42303: ST_TO_ADDR
// if j = 8 then
42304: LD_VAR 0 3
42308: PUSH
42309: LD_INT 8
42311: EQUAL
42312: IFFALSE 42324
// j := 0 else
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 0
42321: ST_TO_ADDR
42322: GO 42338
// j := j + 1 ;
42324: LD_ADDR_VAR 0 3
42328: PUSH
42329: LD_VAR 0 3
42333: PUSH
42334: LD_INT 1
42336: PLUS
42337: ST_TO_ADDR
// SetSide ( i , j ) ;
42338: LD_VAR 0 2
42342: PPUSH
42343: LD_VAR 0 3
42347: PPUSH
42348: CALL_OW 235
// end ;
42352: GO 42275
42354: POP
42355: POP
// end ;
42356: LD_VAR 0 1
42360: RET
// export function hHackFog ; begin
42361: LD_INT 0
42363: PPUSH
// FogOff ( true ) ;
42364: LD_INT 1
42366: PPUSH
42367: CALL_OW 344
// end ;
42371: LD_VAR 0 1
42375: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42376: LD_INT 0
42378: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42379: LD_VAR 0 1
42383: PPUSH
42384: LD_VAR 0 2
42388: PPUSH
42389: LD_VAR 0 3
42393: PPUSH
42394: LD_INT 1
42396: PPUSH
42397: LD_INT 1
42399: PPUSH
42400: CALL_OW 483
// CenterOnXY ( x , y ) ;
42404: LD_VAR 0 2
42408: PPUSH
42409: LD_VAR 0 3
42413: PPUSH
42414: CALL_OW 84
// end ;
42418: LD_VAR 0 4
42422: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42427: LD_VAR 0 1
42431: NOT
42432: PUSH
42433: LD_VAR 0 2
42437: PPUSH
42438: LD_VAR 0 3
42442: PPUSH
42443: CALL_OW 488
42447: NOT
42448: OR
42449: PUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: CALL_OW 266
42459: PUSH
42460: LD_INT 3
42462: NONEQUAL
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 247
42473: PUSH
42474: LD_INT 1
42476: EQUAL
42477: NOT
42478: AND
42479: OR
42480: IFFALSE 42484
// exit ;
42482: GO 42633
// if GetType ( factory ) = unit_human then
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL_OW 247
42493: PUSH
42494: LD_INT 1
42496: EQUAL
42497: IFFALSE 42514
// factory := IsInUnit ( factory ) ;
42499: LD_ADDR_VAR 0 1
42503: PUSH
42504: LD_VAR 0 1
42508: PPUSH
42509: CALL_OW 310
42513: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 266
42523: PUSH
42524: LD_INT 3
42526: NONEQUAL
42527: IFFALSE 42531
// exit ;
42529: GO 42633
// if HexInfo ( x , y ) = factory then
42531: LD_VAR 0 2
42535: PPUSH
42536: LD_VAR 0 3
42540: PPUSH
42541: CALL_OW 428
42545: PUSH
42546: LD_VAR 0 1
42550: EQUAL
42551: IFFALSE 42578
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42553: LD_ADDR_EXP 122
42557: PUSH
42558: LD_EXP 122
42562: PPUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: LD_INT 0
42570: PPUSH
42571: CALL_OW 1
42575: ST_TO_ADDR
42576: GO 42629
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42578: LD_ADDR_EXP 122
42582: PUSH
42583: LD_EXP 122
42587: PPUSH
42588: LD_VAR 0 1
42592: PPUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: CALL_OW 255
42602: PUSH
42603: LD_VAR 0 1
42607: PUSH
42608: LD_VAR 0 2
42612: PUSH
42613: LD_VAR 0 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: PPUSH
42624: CALL_OW 1
42628: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42629: CALL 42638 0 0
// end ;
42633: LD_VAR 0 4
42637: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
42638: LD_INT 0
42640: PPUSH
42641: PPUSH
42642: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42643: LD_STRING resetFactoryWaypoint();
42645: PPUSH
42646: CALL_OW 559
// if factoryWaypoints then
42650: LD_EXP 122
42654: IFFALSE 42780
// begin list := PrepareArray ( factoryWaypoints ) ;
42656: LD_ADDR_VAR 0 3
42660: PUSH
42661: LD_EXP 122
42665: PPUSH
42666: NOP4
42670: ST_TO_ADDR
// for i := 1 to list do
42671: LD_ADDR_VAR 0 2
42675: PUSH
42676: DOUBLE
42677: LD_INT 1
42679: DEC
42680: ST_TO_ADDR
42681: LD_VAR 0 3
42685: PUSH
42686: FOR_TO
42687: IFFALSE 42778
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
42689: LD_STRING setFactoryWaypointXY(
42691: PUSH
42692: LD_VAR 0 3
42696: PUSH
42697: LD_VAR 0 2
42701: ARRAY
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: STR
42707: PUSH
42708: LD_STRING ,
42710: STR
42711: PUSH
42712: LD_VAR 0 3
42716: PUSH
42717: LD_VAR 0 2
42721: ARRAY
42722: PUSH
42723: LD_INT 2
42725: ARRAY
42726: STR
42727: PUSH
42728: LD_STRING ,
42730: STR
42731: PUSH
42732: LD_VAR 0 3
42736: PUSH
42737: LD_VAR 0 2
42741: ARRAY
42742: PUSH
42743: LD_INT 3
42745: ARRAY
42746: STR
42747: PUSH
42748: LD_STRING ,
42750: STR
42751: PUSH
42752: LD_VAR 0 3
42756: PUSH
42757: LD_VAR 0 2
42761: ARRAY
42762: PUSH
42763: LD_INT 4
42765: ARRAY
42766: STR
42767: PUSH
42768: LD_STRING )
42770: STR
42771: PPUSH
42772: CALL_OW 559
42776: GO 42686
42778: POP
42779: POP
// end ; end ;
42780: LD_VAR 0 1
42784: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
42785: LD_INT 0
42787: PPUSH
// if HexInfo ( x , y ) = warehouse then
42788: LD_VAR 0 2
42792: PPUSH
42793: LD_VAR 0 3
42797: PPUSH
42798: CALL_OW 428
42802: PUSH
42803: LD_VAR 0 1
42807: EQUAL
42808: IFFALSE 42835
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
42810: LD_ADDR_EXP 123
42814: PUSH
42815: LD_EXP 123
42819: PPUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: LD_INT 0
42827: PPUSH
42828: CALL_OW 1
42832: ST_TO_ADDR
42833: GO 42886
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
42835: LD_ADDR_EXP 123
42839: PUSH
42840: LD_EXP 123
42844: PPUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: CALL_OW 255
42859: PUSH
42860: LD_VAR 0 1
42864: PUSH
42865: LD_VAR 0 2
42869: PUSH
42870: LD_VAR 0 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: PPUSH
42881: CALL_OW 1
42885: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
42886: CALL 42895 0 0
// end ;
42890: LD_VAR 0 4
42894: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
42895: LD_INT 0
42897: PPUSH
42898: PPUSH
42899: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
42900: LD_STRING resetWarehouseGatheringPoints();
42902: PPUSH
42903: CALL_OW 559
// if warehouseGatheringPoints then
42907: LD_EXP 123
42911: IFFALSE 43037
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: LD_EXP 123
42922: PPUSH
42923: NOP4
42927: ST_TO_ADDR
// for i := 1 to list do
42928: LD_ADDR_VAR 0 2
42932: PUSH
42933: DOUBLE
42934: LD_INT 1
42936: DEC
42937: ST_TO_ADDR
42938: LD_VAR 0 3
42942: PUSH
42943: FOR_TO
42944: IFFALSE 43035
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
42946: LD_STRING setWarehouseGatheringPointXY(
42948: PUSH
42949: LD_VAR 0 3
42953: PUSH
42954: LD_VAR 0 2
42958: ARRAY
42959: PUSH
42960: LD_INT 1
42962: ARRAY
42963: STR
42964: PUSH
42965: LD_STRING ,
42967: STR
42968: PUSH
42969: LD_VAR 0 3
42973: PUSH
42974: LD_VAR 0 2
42978: ARRAY
42979: PUSH
42980: LD_INT 2
42982: ARRAY
42983: STR
42984: PUSH
42985: LD_STRING ,
42987: STR
42988: PUSH
42989: LD_VAR 0 3
42993: PUSH
42994: LD_VAR 0 2
42998: ARRAY
42999: PUSH
43000: LD_INT 3
43002: ARRAY
43003: STR
43004: PUSH
43005: LD_STRING ,
43007: STR
43008: PUSH
43009: LD_VAR 0 3
43013: PUSH
43014: LD_VAR 0 2
43018: ARRAY
43019: PUSH
43020: LD_INT 4
43022: ARRAY
43023: STR
43024: PUSH
43025: LD_STRING )
43027: STR
43028: PPUSH
43029: CALL_OW 559
43033: GO 42943
43035: POP
43036: POP
// end ; end ;
43037: LD_VAR 0 1
43041: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
43042: LD_EXP 123
43046: IFFALSE 43731
43048: GO 43050
43050: DISABLE
43051: LD_INT 0
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
43061: PPUSH
// begin enable ;
43062: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
43063: LD_ADDR_VAR 0 3
43067: PUSH
43068: LD_EXP 123
43072: PPUSH
43073: NOP4
43077: ST_TO_ADDR
// if not list then
43078: LD_VAR 0 3
43082: NOT
43083: IFFALSE 43087
// exit ;
43085: GO 43731
// for i := 1 to list do
43087: LD_ADDR_VAR 0 1
43091: PUSH
43092: DOUBLE
43093: LD_INT 1
43095: DEC
43096: ST_TO_ADDR
43097: LD_VAR 0 3
43101: PUSH
43102: FOR_TO
43103: IFFALSE 43729
// begin depot := list [ i ] [ 2 ] ;
43105: LD_ADDR_VAR 0 8
43109: PUSH
43110: LD_VAR 0 3
43114: PUSH
43115: LD_VAR 0 1
43119: ARRAY
43120: PUSH
43121: LD_INT 2
43123: ARRAY
43124: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
43125: LD_ADDR_VAR 0 5
43129: PUSH
43130: LD_VAR 0 3
43134: PUSH
43135: LD_VAR 0 1
43139: ARRAY
43140: PUSH
43141: LD_INT 1
43143: ARRAY
43144: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
43145: LD_VAR 0 8
43149: PPUSH
43150: CALL_OW 301
43154: PUSH
43155: LD_VAR 0 5
43159: PUSH
43160: LD_VAR 0 8
43164: PPUSH
43165: CALL_OW 255
43169: NONEQUAL
43170: OR
43171: IFFALSE 43200
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
43173: LD_ADDR_EXP 123
43177: PUSH
43178: LD_EXP 123
43182: PPUSH
43183: LD_VAR 0 8
43187: PPUSH
43188: LD_INT 0
43190: PPUSH
43191: CALL_OW 1
43195: ST_TO_ADDR
// exit ;
43196: POP
43197: POP
43198: GO 43731
// end ; x := list [ i ] [ 3 ] ;
43200: LD_ADDR_VAR 0 6
43204: PUSH
43205: LD_VAR 0 3
43209: PUSH
43210: LD_VAR 0 1
43214: ARRAY
43215: PUSH
43216: LD_INT 3
43218: ARRAY
43219: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
43220: LD_ADDR_VAR 0 7
43224: PUSH
43225: LD_VAR 0 3
43229: PUSH
43230: LD_VAR 0 1
43234: ARRAY
43235: PUSH
43236: LD_INT 4
43238: ARRAY
43239: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
43240: LD_ADDR_VAR 0 9
43244: PUSH
43245: LD_VAR 0 6
43249: PPUSH
43250: LD_VAR 0 7
43254: PPUSH
43255: LD_INT 16
43257: PPUSH
43258: CALL 83548 0 3
43262: ST_TO_ADDR
// if not cratesNearbyPoint then
43263: LD_VAR 0 9
43267: NOT
43268: IFFALSE 43274
// exit ;
43270: POP
43271: POP
43272: GO 43731
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
43274: LD_ADDR_VAR 0 4
43278: PUSH
43279: LD_INT 22
43281: PUSH
43282: LD_VAR 0 5
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: LD_INT 60
43296: PUSH
43297: EMPTY
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 91
43306: PUSH
43307: LD_VAR 0 8
43311: PUSH
43312: LD_INT 6
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 25
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 25
43335: PUSH
43336: LD_INT 16
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: PPUSH
43354: CALL_OW 69
43358: PUSH
43359: LD_VAR 0 8
43363: PPUSH
43364: CALL_OW 313
43368: PPUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 60
43374: PUSH
43375: EMPTY
43376: LIST
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 25
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 25
43397: PUSH
43398: LD_INT 16
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PPUSH
43414: CALL_OW 72
43418: UNION
43419: ST_TO_ADDR
// if tmp then
43420: LD_VAR 0 4
43424: IFFALSE 43504
// begin tmp := ShrinkArray ( tmp , 3 ) ;
43426: LD_ADDR_VAR 0 4
43430: PUSH
43431: LD_VAR 0 4
43435: PPUSH
43436: LD_INT 3
43438: PPUSH
43439: CALL 81517 0 2
43443: ST_TO_ADDR
// for j in tmp do
43444: LD_ADDR_VAR 0 2
43448: PUSH
43449: LD_VAR 0 4
43453: PUSH
43454: FOR_IN
43455: IFFALSE 43498
// begin if IsInUnit ( j ) then
43457: LD_VAR 0 2
43461: PPUSH
43462: CALL_OW 310
43466: IFFALSE 43477
// ComExit ( j ) ;
43468: LD_VAR 0 2
43472: PPUSH
43473: CALL 81600 0 1
// AddComCollect ( j , x , y ) ;
43477: LD_VAR 0 2
43481: PPUSH
43482: LD_VAR 0 6
43486: PPUSH
43487: LD_VAR 0 7
43491: PPUSH
43492: CALL_OW 177
// end ;
43496: GO 43454
43498: POP
43499: POP
// exit ;
43500: POP
43501: POP
43502: GO 43731
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
43504: LD_ADDR_VAR 0 4
43508: PUSH
43509: LD_INT 22
43511: PUSH
43512: LD_VAR 0 5
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 91
43523: PUSH
43524: LD_VAR 0 8
43528: PUSH
43529: LD_INT 8
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 34
43542: PUSH
43543: LD_INT 12
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 34
43552: PUSH
43553: LD_INT 51
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 34
43562: PUSH
43563: LD_INT 32
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 34
43572: PUSH
43573: LD_INT 89
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: PPUSH
43592: CALL_OW 69
43596: ST_TO_ADDR
// if tmp then
43597: LD_VAR 0 4
43601: IFFALSE 43727
// begin for j in tmp do
43603: LD_ADDR_VAR 0 2
43607: PUSH
43608: LD_VAR 0 4
43612: PUSH
43613: FOR_IN
43614: IFFALSE 43725
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
43616: LD_VAR 0 2
43620: PPUSH
43621: CALL_OW 262
43625: PUSH
43626: LD_INT 3
43628: EQUAL
43629: PUSH
43630: LD_VAR 0 2
43634: PPUSH
43635: CALL_OW 261
43639: PUSH
43640: LD_INT 20
43642: GREATER
43643: OR
43644: PUSH
43645: LD_VAR 0 2
43649: PPUSH
43650: CALL_OW 314
43654: NOT
43655: AND
43656: PUSH
43657: LD_VAR 0 2
43661: PPUSH
43662: CALL_OW 263
43666: PUSH
43667: LD_INT 1
43669: NONEQUAL
43670: PUSH
43671: LD_VAR 0 2
43675: PPUSH
43676: CALL_OW 311
43680: OR
43681: AND
43682: IFFALSE 43723
// begin ComCollect ( j , x , y ) ;
43684: LD_VAR 0 2
43688: PPUSH
43689: LD_VAR 0 6
43693: PPUSH
43694: LD_VAR 0 7
43698: PPUSH
43699: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
43703: LD_VAR 0 2
43707: PPUSH
43708: LD_VAR 0 8
43712: PPUSH
43713: CALL_OW 172
// exit ;
43717: POP
43718: POP
43719: POP
43720: POP
43721: GO 43731
// end ;
43723: GO 43613
43725: POP
43726: POP
// end ; end ;
43727: GO 43102
43729: POP
43730: POP
// end ; end_of_file
43731: PPOPN 9
43733: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43734: LD_INT 0
43736: PPUSH
43737: PPUSH
// if exist_mode then
43738: LD_VAR 0 2
43742: IFFALSE 43767
// unit := CreateCharacter ( prefix & ident ) else
43744: LD_ADDR_VAR 0 5
43748: PUSH
43749: LD_VAR 0 3
43753: PUSH
43754: LD_VAR 0 1
43758: STR
43759: PPUSH
43760: CALL_OW 34
43764: ST_TO_ADDR
43765: GO 43782
// unit := NewCharacter ( ident ) ;
43767: LD_ADDR_VAR 0 5
43771: PUSH
43772: LD_VAR 0 1
43776: PPUSH
43777: CALL_OW 25
43781: ST_TO_ADDR
// result := unit ;
43782: LD_ADDR_VAR 0 4
43786: PUSH
43787: LD_VAR 0 5
43791: ST_TO_ADDR
// end ;
43792: LD_VAR 0 4
43796: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43797: LD_INT 0
43799: PPUSH
43800: PPUSH
// if not side or not nation then
43801: LD_VAR 0 1
43805: NOT
43806: PUSH
43807: LD_VAR 0 2
43811: NOT
43812: OR
43813: IFFALSE 43817
// exit ;
43815: GO 44585
// case nation of nation_american :
43817: LD_VAR 0 2
43821: PUSH
43822: LD_INT 1
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 44044
43830: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43831: LD_ADDR_VAR 0 4
43835: PUSH
43836: LD_INT 35
43838: PUSH
43839: LD_INT 45
43841: PUSH
43842: LD_INT 46
43844: PUSH
43845: LD_INT 47
43847: PUSH
43848: LD_INT 82
43850: PUSH
43851: LD_INT 83
43853: PUSH
43854: LD_INT 84
43856: PUSH
43857: LD_INT 85
43859: PUSH
43860: LD_INT 86
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 6
43871: PUSH
43872: LD_INT 15
43874: PUSH
43875: LD_INT 16
43877: PUSH
43878: LD_INT 7
43880: PUSH
43881: LD_INT 12
43883: PUSH
43884: LD_INT 13
43886: PUSH
43887: LD_INT 10
43889: PUSH
43890: LD_INT 14
43892: PUSH
43893: LD_INT 20
43895: PUSH
43896: LD_INT 21
43898: PUSH
43899: LD_INT 22
43901: PUSH
43902: LD_INT 25
43904: PUSH
43905: LD_INT 32
43907: PUSH
43908: LD_INT 27
43910: PUSH
43911: LD_INT 36
43913: PUSH
43914: LD_INT 69
43916: PUSH
43917: LD_INT 39
43919: PUSH
43920: LD_INT 34
43922: PUSH
43923: LD_INT 40
43925: PUSH
43926: LD_INT 48
43928: PUSH
43929: LD_INT 49
43931: PUSH
43932: LD_INT 50
43934: PUSH
43935: LD_INT 51
43937: PUSH
43938: LD_INT 52
43940: PUSH
43941: LD_INT 53
43943: PUSH
43944: LD_INT 54
43946: PUSH
43947: LD_INT 55
43949: PUSH
43950: LD_INT 56
43952: PUSH
43953: LD_INT 57
43955: PUSH
43956: LD_INT 58
43958: PUSH
43959: LD_INT 59
43961: PUSH
43962: LD_INT 60
43964: PUSH
43965: LD_INT 61
43967: PUSH
43968: LD_INT 62
43970: PUSH
43971: LD_INT 80
43973: PUSH
43974: LD_INT 82
43976: PUSH
43977: LD_INT 83
43979: PUSH
43980: LD_INT 84
43982: PUSH
43983: LD_INT 85
43985: PUSH
43986: LD_INT 86
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: ST_TO_ADDR
44042: GO 44509
44044: LD_INT 2
44046: DOUBLE
44047: EQUAL
44048: IFTRUE 44052
44050: GO 44278
44052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44053: LD_ADDR_VAR 0 4
44057: PUSH
44058: LD_INT 35
44060: PUSH
44061: LD_INT 45
44063: PUSH
44064: LD_INT 46
44066: PUSH
44067: LD_INT 47
44069: PUSH
44070: LD_INT 82
44072: PUSH
44073: LD_INT 83
44075: PUSH
44076: LD_INT 84
44078: PUSH
44079: LD_INT 85
44081: PUSH
44082: LD_INT 87
44084: PUSH
44085: LD_INT 70
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 11
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 5
44102: PUSH
44103: LD_INT 6
44105: PUSH
44106: LD_INT 15
44108: PUSH
44109: LD_INT 18
44111: PUSH
44112: LD_INT 7
44114: PUSH
44115: LD_INT 17
44117: PUSH
44118: LD_INT 8
44120: PUSH
44121: LD_INT 20
44123: PUSH
44124: LD_INT 21
44126: PUSH
44127: LD_INT 22
44129: PUSH
44130: LD_INT 72
44132: PUSH
44133: LD_INT 26
44135: PUSH
44136: LD_INT 69
44138: PUSH
44139: LD_INT 39
44141: PUSH
44142: LD_INT 40
44144: PUSH
44145: LD_INT 41
44147: PUSH
44148: LD_INT 42
44150: PUSH
44151: LD_INT 43
44153: PUSH
44154: LD_INT 48
44156: PUSH
44157: LD_INT 49
44159: PUSH
44160: LD_INT 50
44162: PUSH
44163: LD_INT 51
44165: PUSH
44166: LD_INT 52
44168: PUSH
44169: LD_INT 53
44171: PUSH
44172: LD_INT 54
44174: PUSH
44175: LD_INT 55
44177: PUSH
44178: LD_INT 56
44180: PUSH
44181: LD_INT 60
44183: PUSH
44184: LD_INT 61
44186: PUSH
44187: LD_INT 62
44189: PUSH
44190: LD_INT 66
44192: PUSH
44193: LD_INT 67
44195: PUSH
44196: LD_INT 68
44198: PUSH
44199: LD_INT 81
44201: PUSH
44202: LD_INT 82
44204: PUSH
44205: LD_INT 83
44207: PUSH
44208: LD_INT 84
44210: PUSH
44211: LD_INT 85
44213: PUSH
44214: LD_INT 87
44216: PUSH
44217: LD_INT 88
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
44276: GO 44509
44278: LD_INT 3
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44508
44286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44287: LD_ADDR_VAR 0 4
44291: PUSH
44292: LD_INT 46
44294: PUSH
44295: LD_INT 47
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 82
44306: PUSH
44307: LD_INT 83
44309: PUSH
44310: LD_INT 84
44312: PUSH
44313: LD_INT 85
44315: PUSH
44316: LD_INT 86
44318: PUSH
44319: LD_INT 11
44321: PUSH
44322: LD_INT 9
44324: PUSH
44325: LD_INT 20
44327: PUSH
44328: LD_INT 19
44330: PUSH
44331: LD_INT 21
44333: PUSH
44334: LD_INT 24
44336: PUSH
44337: LD_INT 22
44339: PUSH
44340: LD_INT 25
44342: PUSH
44343: LD_INT 28
44345: PUSH
44346: LD_INT 29
44348: PUSH
44349: LD_INT 30
44351: PUSH
44352: LD_INT 31
44354: PUSH
44355: LD_INT 37
44357: PUSH
44358: LD_INT 38
44360: PUSH
44361: LD_INT 32
44363: PUSH
44364: LD_INT 27
44366: PUSH
44367: LD_INT 33
44369: PUSH
44370: LD_INT 69
44372: PUSH
44373: LD_INT 39
44375: PUSH
44376: LD_INT 34
44378: PUSH
44379: LD_INT 40
44381: PUSH
44382: LD_INT 71
44384: PUSH
44385: LD_INT 23
44387: PUSH
44388: LD_INT 44
44390: PUSH
44391: LD_INT 48
44393: PUSH
44394: LD_INT 49
44396: PUSH
44397: LD_INT 50
44399: PUSH
44400: LD_INT 51
44402: PUSH
44403: LD_INT 52
44405: PUSH
44406: LD_INT 53
44408: PUSH
44409: LD_INT 54
44411: PUSH
44412: LD_INT 55
44414: PUSH
44415: LD_INT 56
44417: PUSH
44418: LD_INT 57
44420: PUSH
44421: LD_INT 58
44423: PUSH
44424: LD_INT 59
44426: PUSH
44427: LD_INT 63
44429: PUSH
44430: LD_INT 64
44432: PUSH
44433: LD_INT 65
44435: PUSH
44436: LD_INT 82
44438: PUSH
44439: LD_INT 83
44441: PUSH
44442: LD_INT 84
44444: PUSH
44445: LD_INT 85
44447: PUSH
44448: LD_INT 86
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
44506: GO 44509
44508: POP
// if state > - 1 and state < 3 then
44509: LD_VAR 0 3
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: GREATER
44518: PUSH
44519: LD_VAR 0 3
44523: PUSH
44524: LD_INT 3
44526: LESS
44527: AND
44528: IFFALSE 44585
// for i in result do
44530: LD_ADDR_VAR 0 5
44534: PUSH
44535: LD_VAR 0 4
44539: PUSH
44540: FOR_IN
44541: IFFALSE 44583
// if GetTech ( i , side ) <> state then
44543: LD_VAR 0 5
44547: PPUSH
44548: LD_VAR 0 1
44552: PPUSH
44553: CALL_OW 321
44557: PUSH
44558: LD_VAR 0 3
44562: NONEQUAL
44563: IFFALSE 44581
// result := result diff i ;
44565: LD_ADDR_VAR 0 4
44569: PUSH
44570: LD_VAR 0 4
44574: PUSH
44575: LD_VAR 0 5
44579: DIFF
44580: ST_TO_ADDR
44581: GO 44540
44583: POP
44584: POP
// end ;
44585: LD_VAR 0 4
44589: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44590: LD_INT 0
44592: PPUSH
44593: PPUSH
44594: PPUSH
// result := true ;
44595: LD_ADDR_VAR 0 3
44599: PUSH
44600: LD_INT 1
44602: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44603: LD_ADDR_VAR 0 5
44607: PUSH
44608: LD_VAR 0 2
44612: PPUSH
44613: CALL_OW 480
44617: ST_TO_ADDR
// if not tmp then
44618: LD_VAR 0 5
44622: NOT
44623: IFFALSE 44627
// exit ;
44625: GO 44676
// for i in tmp do
44627: LD_ADDR_VAR 0 4
44631: PUSH
44632: LD_VAR 0 5
44636: PUSH
44637: FOR_IN
44638: IFFALSE 44674
// if GetTech ( i , side ) <> state_researched then
44640: LD_VAR 0 4
44644: PPUSH
44645: LD_VAR 0 1
44649: PPUSH
44650: CALL_OW 321
44654: PUSH
44655: LD_INT 2
44657: NONEQUAL
44658: IFFALSE 44672
// begin result := false ;
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 0
44667: ST_TO_ADDR
// exit ;
44668: POP
44669: POP
44670: GO 44676
// end ;
44672: GO 44637
44674: POP
44675: POP
// end ;
44676: LD_VAR 0 3
44680: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44681: LD_INT 0
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44696: LD_VAR 0 1
44700: NOT
44701: PUSH
44702: LD_VAR 0 1
44706: PPUSH
44707: CALL_OW 257
44711: PUSH
44712: LD_INT 9
44714: NONEQUAL
44715: OR
44716: IFFALSE 44720
// exit ;
44718: GO 45293
// side := GetSide ( unit ) ;
44720: LD_ADDR_VAR 0 9
44724: PUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 255
44734: ST_TO_ADDR
// tech_space := tech_spacanom ;
44735: LD_ADDR_VAR 0 12
44739: PUSH
44740: LD_INT 29
44742: ST_TO_ADDR
// tech_time := tech_taurad ;
44743: LD_ADDR_VAR 0 13
44747: PUSH
44748: LD_INT 28
44750: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44751: LD_ADDR_VAR 0 11
44755: PUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: CALL_OW 310
44765: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44766: LD_VAR 0 11
44770: PPUSH
44771: CALL_OW 247
44775: PUSH
44776: LD_INT 2
44778: EQUAL
44779: IFFALSE 44783
// exit ;
44781: GO 45293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44783: LD_ADDR_VAR 0 8
44787: PUSH
44788: LD_INT 81
44790: PUSH
44791: LD_VAR 0 9
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 21
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PPUSH
44821: CALL_OW 69
44825: ST_TO_ADDR
// if not tmp then
44826: LD_VAR 0 8
44830: NOT
44831: IFFALSE 44835
// exit ;
44833: GO 45293
// if in_unit then
44835: LD_VAR 0 11
44839: IFFALSE 44863
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44841: LD_ADDR_VAR 0 10
44845: PUSH
44846: LD_VAR 0 8
44850: PPUSH
44851: LD_VAR 0 11
44855: PPUSH
44856: CALL_OW 74
44860: ST_TO_ADDR
44861: GO 44883
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44863: LD_ADDR_VAR 0 10
44867: PUSH
44868: LD_VAR 0 8
44872: PPUSH
44873: LD_VAR 0 1
44877: PPUSH
44878: CALL_OW 74
44882: ST_TO_ADDR
// if not enemy then
44883: LD_VAR 0 10
44887: NOT
44888: IFFALSE 44892
// exit ;
44890: GO 45293
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44892: LD_VAR 0 11
44896: PUSH
44897: LD_VAR 0 11
44901: PPUSH
44902: LD_VAR 0 10
44906: PPUSH
44907: CALL_OW 296
44911: PUSH
44912: LD_INT 13
44914: GREATER
44915: AND
44916: PUSH
44917: LD_VAR 0 1
44921: PPUSH
44922: LD_VAR 0 10
44926: PPUSH
44927: CALL_OW 296
44931: PUSH
44932: LD_INT 12
44934: GREATER
44935: OR
44936: IFFALSE 44940
// exit ;
44938: GO 45293
// missile := [ 1 ] ;
44940: LD_ADDR_VAR 0 14
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44951: LD_VAR 0 9
44955: PPUSH
44956: LD_VAR 0 12
44960: PPUSH
44961: CALL_OW 325
44965: IFFALSE 44994
// missile := Replace ( missile , missile + 1 , 2 ) ;
44967: LD_ADDR_VAR 0 14
44971: PUSH
44972: LD_VAR 0 14
44976: PPUSH
44977: LD_VAR 0 14
44981: PUSH
44982: LD_INT 1
44984: PLUS
44985: PPUSH
44986: LD_INT 2
44988: PPUSH
44989: CALL_OW 1
44993: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44994: LD_VAR 0 9
44998: PPUSH
44999: LD_VAR 0 13
45003: PPUSH
45004: CALL_OW 325
45008: PUSH
45009: LD_VAR 0 10
45013: PPUSH
45014: CALL_OW 255
45018: PPUSH
45019: LD_VAR 0 13
45023: PPUSH
45024: CALL_OW 325
45028: NOT
45029: AND
45030: IFFALSE 45059
// missile := Replace ( missile , missile + 1 , 3 ) ;
45032: LD_ADDR_VAR 0 14
45036: PUSH
45037: LD_VAR 0 14
45041: PPUSH
45042: LD_VAR 0 14
45046: PUSH
45047: LD_INT 1
45049: PLUS
45050: PPUSH
45051: LD_INT 3
45053: PPUSH
45054: CALL_OW 1
45058: ST_TO_ADDR
// if missile < 2 then
45059: LD_VAR 0 14
45063: PUSH
45064: LD_INT 2
45066: LESS
45067: IFFALSE 45071
// exit ;
45069: GO 45293
// x := GetX ( enemy ) ;
45071: LD_ADDR_VAR 0 4
45075: PUSH
45076: LD_VAR 0 10
45080: PPUSH
45081: CALL_OW 250
45085: ST_TO_ADDR
// y := GetY ( enemy ) ;
45086: LD_ADDR_VAR 0 5
45090: PUSH
45091: LD_VAR 0 10
45095: PPUSH
45096: CALL_OW 251
45100: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45101: LD_ADDR_VAR 0 6
45105: PUSH
45106: LD_VAR 0 4
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PPUSH
45115: LD_INT 1
45117: PPUSH
45118: CALL_OW 12
45122: PLUS
45123: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45124: LD_ADDR_VAR 0 7
45128: PUSH
45129: LD_VAR 0 5
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PPUSH
45138: LD_INT 1
45140: PPUSH
45141: CALL_OW 12
45145: PLUS
45146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45147: LD_VAR 0 6
45151: PPUSH
45152: LD_VAR 0 7
45156: PPUSH
45157: CALL_OW 488
45161: NOT
45162: IFFALSE 45184
// begin _x := x ;
45164: LD_ADDR_VAR 0 6
45168: PUSH
45169: LD_VAR 0 4
45173: ST_TO_ADDR
// _y := y ;
45174: LD_ADDR_VAR 0 7
45178: PUSH
45179: LD_VAR 0 5
45183: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_INT 1
45191: PPUSH
45192: LD_VAR 0 14
45196: PPUSH
45197: CALL_OW 12
45201: ST_TO_ADDR
// case i of 1 :
45202: LD_VAR 0 3
45206: PUSH
45207: LD_INT 1
45209: DOUBLE
45210: EQUAL
45211: IFTRUE 45215
45213: GO 45232
45215: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45216: LD_VAR 0 1
45220: PPUSH
45221: LD_VAR 0 10
45225: PPUSH
45226: CALL_OW 115
45230: GO 45293
45232: LD_INT 2
45234: DOUBLE
45235: EQUAL
45236: IFTRUE 45240
45238: GO 45262
45240: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45241: LD_VAR 0 1
45245: PPUSH
45246: LD_VAR 0 6
45250: PPUSH
45251: LD_VAR 0 7
45255: PPUSH
45256: CALL_OW 153
45260: GO 45293
45262: LD_INT 3
45264: DOUBLE
45265: EQUAL
45266: IFTRUE 45270
45268: GO 45292
45270: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45271: LD_VAR 0 1
45275: PPUSH
45276: LD_VAR 0 6
45280: PPUSH
45281: LD_VAR 0 7
45285: PPUSH
45286: CALL_OW 154
45290: GO 45293
45292: POP
// end ;
45293: LD_VAR 0 2
45297: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45298: LD_INT 0
45300: PPUSH
45301: PPUSH
45302: PPUSH
45303: PPUSH
45304: PPUSH
45305: PPUSH
// if not unit or not building then
45306: LD_VAR 0 1
45310: NOT
45311: PUSH
45312: LD_VAR 0 2
45316: NOT
45317: OR
45318: IFFALSE 45322
// exit ;
45320: GO 45480
// x := GetX ( building ) ;
45322: LD_ADDR_VAR 0 5
45326: PUSH
45327: LD_VAR 0 2
45331: PPUSH
45332: CALL_OW 250
45336: ST_TO_ADDR
// y := GetY ( building ) ;
45337: LD_ADDR_VAR 0 6
45341: PUSH
45342: LD_VAR 0 2
45346: PPUSH
45347: CALL_OW 251
45351: ST_TO_ADDR
// for i = 0 to 5 do
45352: LD_ADDR_VAR 0 4
45356: PUSH
45357: DOUBLE
45358: LD_INT 0
45360: DEC
45361: ST_TO_ADDR
45362: LD_INT 5
45364: PUSH
45365: FOR_TO
45366: IFFALSE 45478
// begin _x := ShiftX ( x , i , 3 ) ;
45368: LD_ADDR_VAR 0 7
45372: PUSH
45373: LD_VAR 0 5
45377: PPUSH
45378: LD_VAR 0 4
45382: PPUSH
45383: LD_INT 3
45385: PPUSH
45386: CALL_OW 272
45390: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45391: LD_ADDR_VAR 0 8
45395: PUSH
45396: LD_VAR 0 6
45400: PPUSH
45401: LD_VAR 0 4
45405: PPUSH
45406: LD_INT 3
45408: PPUSH
45409: CALL_OW 273
45413: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45414: LD_VAR 0 7
45418: PPUSH
45419: LD_VAR 0 8
45423: PPUSH
45424: CALL_OW 488
45428: NOT
45429: IFFALSE 45433
// continue ;
45431: GO 45365
// if HexInfo ( _x , _y ) = 0 then
45433: LD_VAR 0 7
45437: PPUSH
45438: LD_VAR 0 8
45442: PPUSH
45443: CALL_OW 428
45447: PUSH
45448: LD_INT 0
45450: EQUAL
45451: IFFALSE 45476
// begin ComMoveXY ( unit , _x , _y ) ;
45453: LD_VAR 0 1
45457: PPUSH
45458: LD_VAR 0 7
45462: PPUSH
45463: LD_VAR 0 8
45467: PPUSH
45468: CALL_OW 111
// exit ;
45472: POP
45473: POP
45474: GO 45480
// end ; end ;
45476: GO 45365
45478: POP
45479: POP
// end ;
45480: LD_VAR 0 3
45484: RET
// export function ScanBase ( side , base_area ) ; begin
45485: LD_INT 0
45487: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45488: LD_ADDR_VAR 0 3
45492: PUSH
45493: LD_VAR 0 2
45497: PPUSH
45498: LD_INT 81
45500: PUSH
45501: LD_VAR 0 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PPUSH
45510: CALL_OW 70
45514: ST_TO_ADDR
// end ;
45515: LD_VAR 0 3
45519: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45520: LD_INT 0
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
// result := false ;
45526: LD_ADDR_VAR 0 2
45530: PUSH
45531: LD_INT 0
45533: ST_TO_ADDR
// side := GetSide ( unit ) ;
45534: LD_ADDR_VAR 0 3
45538: PUSH
45539: LD_VAR 0 1
45543: PPUSH
45544: CALL_OW 255
45548: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45549: LD_ADDR_VAR 0 4
45553: PUSH
45554: LD_VAR 0 1
45558: PPUSH
45559: CALL_OW 248
45563: ST_TO_ADDR
// case nat of 1 :
45564: LD_VAR 0 4
45568: PUSH
45569: LD_INT 1
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45577
45575: GO 45588
45577: POP
// tech := tech_lassight ; 2 :
45578: LD_ADDR_VAR 0 5
45582: PUSH
45583: LD_INT 12
45585: ST_TO_ADDR
45586: GO 45627
45588: LD_INT 2
45590: DOUBLE
45591: EQUAL
45592: IFTRUE 45596
45594: GO 45607
45596: POP
// tech := tech_mortar ; 3 :
45597: LD_ADDR_VAR 0 5
45601: PUSH
45602: LD_INT 41
45604: ST_TO_ADDR
45605: GO 45627
45607: LD_INT 3
45609: DOUBLE
45610: EQUAL
45611: IFTRUE 45615
45613: GO 45626
45615: POP
// tech := tech_bazooka ; end ;
45616: LD_ADDR_VAR 0 5
45620: PUSH
45621: LD_INT 44
45623: ST_TO_ADDR
45624: GO 45627
45626: POP
// if Researched ( side , tech ) then
45627: LD_VAR 0 3
45631: PPUSH
45632: LD_VAR 0 5
45636: PPUSH
45637: CALL_OW 325
45641: IFFALSE 45668
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45643: LD_ADDR_VAR 0 2
45647: PUSH
45648: LD_INT 5
45650: PUSH
45651: LD_INT 8
45653: PUSH
45654: LD_INT 9
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: PUSH
45662: LD_VAR 0 4
45666: ARRAY
45667: ST_TO_ADDR
// end ;
45668: LD_VAR 0 2
45672: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45673: LD_INT 0
45675: PPUSH
45676: PPUSH
45677: PPUSH
// if not mines then
45678: LD_VAR 0 2
45682: NOT
45683: IFFALSE 45687
// exit ;
45685: GO 45831
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45687: LD_ADDR_VAR 0 5
45691: PUSH
45692: LD_INT 81
45694: PUSH
45695: LD_VAR 0 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 21
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 69
45729: ST_TO_ADDR
// for i in mines do
45730: LD_ADDR_VAR 0 4
45734: PUSH
45735: LD_VAR 0 2
45739: PUSH
45740: FOR_IN
45741: IFFALSE 45829
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45743: LD_VAR 0 4
45747: PUSH
45748: LD_INT 1
45750: ARRAY
45751: PPUSH
45752: LD_VAR 0 4
45756: PUSH
45757: LD_INT 2
45759: ARRAY
45760: PPUSH
45761: CALL_OW 458
45765: NOT
45766: IFFALSE 45770
// continue ;
45768: GO 45740
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45770: LD_VAR 0 4
45774: PUSH
45775: LD_INT 1
45777: ARRAY
45778: PPUSH
45779: LD_VAR 0 4
45783: PUSH
45784: LD_INT 2
45786: ARRAY
45787: PPUSH
45788: CALL_OW 428
45792: PUSH
45793: LD_VAR 0 5
45797: IN
45798: IFFALSE 45827
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45800: LD_VAR 0 4
45804: PUSH
45805: LD_INT 1
45807: ARRAY
45808: PPUSH
45809: LD_VAR 0 4
45813: PUSH
45814: LD_INT 2
45816: ARRAY
45817: PPUSH
45818: LD_VAR 0 1
45822: PPUSH
45823: CALL_OW 456
// end ;
45827: GO 45740
45829: POP
45830: POP
// end ;
45831: LD_VAR 0 3
45835: RET
// export function Count ( array ) ; var i ; begin
45836: LD_INT 0
45838: PPUSH
45839: PPUSH
// result := 0 ;
45840: LD_ADDR_VAR 0 2
45844: PUSH
45845: LD_INT 0
45847: ST_TO_ADDR
// for i in array do
45848: LD_ADDR_VAR 0 3
45852: PUSH
45853: LD_VAR 0 1
45857: PUSH
45858: FOR_IN
45859: IFFALSE 45883
// if i then
45861: LD_VAR 0 3
45865: IFFALSE 45881
// result := result + 1 ;
45867: LD_ADDR_VAR 0 2
45871: PUSH
45872: LD_VAR 0 2
45876: PUSH
45877: LD_INT 1
45879: PLUS
45880: ST_TO_ADDR
45881: GO 45858
45883: POP
45884: POP
// end ;
45885: LD_VAR 0 2
45889: RET
// export function IsEmpty ( building ) ; begin
45890: LD_INT 0
45892: PPUSH
// if not building then
45893: LD_VAR 0 1
45897: NOT
45898: IFFALSE 45902
// exit ;
45900: GO 45945
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45902: LD_ADDR_VAR 0 2
45906: PUSH
45907: LD_VAR 0 1
45911: PUSH
45912: LD_INT 22
45914: PUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: CALL_OW 255
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 58
45931: PUSH
45932: EMPTY
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PPUSH
45939: CALL_OW 69
45943: IN
45944: ST_TO_ADDR
// end ;
45945: LD_VAR 0 2
45949: RET
// export function IsNotFull ( building ) ; var places ; begin
45950: LD_INT 0
45952: PPUSH
45953: PPUSH
// if not building then
45954: LD_VAR 0 1
45958: NOT
45959: IFFALSE 45963
// exit ;
45961: GO 46134
// result := false ;
45963: LD_ADDR_VAR 0 2
45967: PUSH
45968: LD_INT 0
45970: ST_TO_ADDR
// places := 0 ;
45971: LD_ADDR_VAR 0 3
45975: PUSH
45976: LD_INT 0
45978: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
45979: LD_VAR 0 1
45983: PPUSH
45984: CALL_OW 266
45988: PUSH
45989: LD_INT 0
45991: DOUBLE
45992: EQUAL
45993: IFTRUE 46051
45995: LD_INT 1
45997: DOUBLE
45998: EQUAL
45999: IFTRUE 46051
46001: LD_INT 6
46003: DOUBLE
46004: EQUAL
46005: IFTRUE 46051
46007: LD_INT 7
46009: DOUBLE
46010: EQUAL
46011: IFTRUE 46051
46013: LD_INT 8
46015: DOUBLE
46016: EQUAL
46017: IFTRUE 46051
46019: LD_INT 4
46021: DOUBLE
46022: EQUAL
46023: IFTRUE 46051
46025: LD_INT 5
46027: DOUBLE
46028: EQUAL
46029: IFTRUE 46051
46031: LD_INT 2
46033: DOUBLE
46034: EQUAL
46035: IFTRUE 46051
46037: LD_INT 3
46039: DOUBLE
46040: EQUAL
46041: IFTRUE 46051
46043: LD_INT 35
46045: DOUBLE
46046: EQUAL
46047: IFTRUE 46051
46049: GO 46062
46051: POP
// places := 6 ; b_bunker , b_breastwork :
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_INT 6
46059: ST_TO_ADDR
46060: GO 46107
46062: LD_INT 32
46064: DOUBLE
46065: EQUAL
46066: IFTRUE 46076
46068: LD_INT 31
46070: DOUBLE
46071: EQUAL
46072: IFTRUE 46076
46074: GO 46087
46076: POP
// places := 1 ; b_control_tower :
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: LD_INT 1
46084: ST_TO_ADDR
46085: GO 46107
46087: LD_INT 36
46089: DOUBLE
46090: EQUAL
46091: IFTRUE 46095
46093: GO 46106
46095: POP
// places := 3 ; end ;
46096: LD_ADDR_VAR 0 3
46100: PUSH
46101: LD_INT 3
46103: ST_TO_ADDR
46104: GO 46107
46106: POP
// if places then
46107: LD_VAR 0 3
46111: IFFALSE 46134
// result := UnitsInside ( building ) < places ;
46113: LD_ADDR_VAR 0 2
46117: PUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: CALL_OW 313
46127: PUSH
46128: LD_VAR 0 3
46132: LESS
46133: ST_TO_ADDR
// end ;
46134: LD_VAR 0 2
46138: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46139: LD_INT 0
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
// tmp := [ ] ;
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: EMPTY
46151: ST_TO_ADDR
// list := [ ] ;
46152: LD_ADDR_VAR 0 5
46156: PUSH
46157: EMPTY
46158: ST_TO_ADDR
// for i = 16 to 25 do
46159: LD_ADDR_VAR 0 4
46163: PUSH
46164: DOUBLE
46165: LD_INT 16
46167: DEC
46168: ST_TO_ADDR
46169: LD_INT 25
46171: PUSH
46172: FOR_TO
46173: IFFALSE 46246
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46175: LD_ADDR_VAR 0 3
46179: PUSH
46180: LD_VAR 0 3
46184: PUSH
46185: LD_INT 22
46187: PUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: CALL_OW 255
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 91
46204: PUSH
46205: LD_VAR 0 1
46209: PUSH
46210: LD_INT 6
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 30
46220: PUSH
46221: LD_VAR 0 4
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: PPUSH
46238: CALL_OW 69
46242: ADD
46243: ST_TO_ADDR
46244: GO 46172
46246: POP
46247: POP
// for i = 1 to tmp do
46248: LD_ADDR_VAR 0 4
46252: PUSH
46253: DOUBLE
46254: LD_INT 1
46256: DEC
46257: ST_TO_ADDR
46258: LD_VAR 0 3
46262: PUSH
46263: FOR_TO
46264: IFFALSE 46352
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46266: LD_ADDR_VAR 0 5
46270: PUSH
46271: LD_VAR 0 5
46275: PUSH
46276: LD_VAR 0 3
46280: PUSH
46281: LD_VAR 0 4
46285: ARRAY
46286: PPUSH
46287: CALL_OW 266
46291: PUSH
46292: LD_VAR 0 3
46296: PUSH
46297: LD_VAR 0 4
46301: ARRAY
46302: PPUSH
46303: CALL_OW 250
46307: PUSH
46308: LD_VAR 0 3
46312: PUSH
46313: LD_VAR 0 4
46317: ARRAY
46318: PPUSH
46319: CALL_OW 251
46323: PUSH
46324: LD_VAR 0 3
46328: PUSH
46329: LD_VAR 0 4
46333: ARRAY
46334: PPUSH
46335: CALL_OW 254
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: ADD
46349: ST_TO_ADDR
46350: GO 46263
46352: POP
46353: POP
// result := list ;
46354: LD_ADDR_VAR 0 2
46358: PUSH
46359: LD_VAR 0 5
46363: ST_TO_ADDR
// end ;
46364: LD_VAR 0 2
46368: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46369: LD_INT 0
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
// if not factory then
46378: LD_VAR 0 1
46382: NOT
46383: IFFALSE 46387
// exit ;
46385: GO 46980
// if control = control_apeman then
46387: LD_VAR 0 4
46391: PUSH
46392: LD_INT 5
46394: EQUAL
46395: IFFALSE 46504
// begin tmp := UnitsInside ( factory ) ;
46397: LD_ADDR_VAR 0 8
46401: PUSH
46402: LD_VAR 0 1
46406: PPUSH
46407: CALL_OW 313
46411: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46412: LD_VAR 0 8
46416: PPUSH
46417: LD_INT 25
46419: PUSH
46420: LD_INT 12
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PPUSH
46427: CALL_OW 72
46431: NOT
46432: IFFALSE 46442
// control := control_manual ;
46434: LD_ADDR_VAR 0 4
46438: PUSH
46439: LD_INT 1
46441: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46442: LD_ADDR_VAR 0 8
46446: PUSH
46447: LD_VAR 0 1
46451: PPUSH
46452: CALL 46139 0 1
46456: ST_TO_ADDR
// if tmp then
46457: LD_VAR 0 8
46461: IFFALSE 46504
// begin for i in tmp do
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 8
46472: PUSH
46473: FOR_IN
46474: IFFALSE 46502
// if i [ 1 ] = b_ext_radio then
46476: LD_VAR 0 7
46480: PUSH
46481: LD_INT 1
46483: ARRAY
46484: PUSH
46485: LD_INT 22
46487: EQUAL
46488: IFFALSE 46500
// begin control := control_remote ;
46490: LD_ADDR_VAR 0 4
46494: PUSH
46495: LD_INT 2
46497: ST_TO_ADDR
// break ;
46498: GO 46502
// end ;
46500: GO 46473
46502: POP
46503: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46504: LD_VAR 0 1
46508: PPUSH
46509: LD_VAR 0 2
46513: PPUSH
46514: LD_VAR 0 3
46518: PPUSH
46519: LD_VAR 0 4
46523: PPUSH
46524: LD_VAR 0 5
46528: PPUSH
46529: CALL_OW 448
46533: IFFALSE 46568
// begin result := [ chassis , engine , control , weapon ] ;
46535: LD_ADDR_VAR 0 6
46539: PUSH
46540: LD_VAR 0 2
46544: PUSH
46545: LD_VAR 0 3
46549: PUSH
46550: LD_VAR 0 4
46554: PUSH
46555: LD_VAR 0 5
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// exit ;
46566: GO 46980
// end ; _chassis := AvailableChassisList ( factory ) ;
46568: LD_ADDR_VAR 0 9
46572: PUSH
46573: LD_VAR 0 1
46577: PPUSH
46578: CALL_OW 475
46582: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46583: LD_ADDR_VAR 0 11
46587: PUSH
46588: LD_VAR 0 1
46592: PPUSH
46593: CALL_OW 476
46597: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46598: LD_ADDR_VAR 0 12
46602: PUSH
46603: LD_VAR 0 1
46607: PPUSH
46608: CALL_OW 477
46612: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46613: LD_ADDR_VAR 0 10
46617: PUSH
46618: LD_VAR 0 1
46622: PPUSH
46623: CALL_OW 478
46627: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46628: LD_VAR 0 9
46632: NOT
46633: PUSH
46634: LD_VAR 0 11
46638: NOT
46639: OR
46640: PUSH
46641: LD_VAR 0 12
46645: NOT
46646: OR
46647: PUSH
46648: LD_VAR 0 10
46652: NOT
46653: OR
46654: IFFALSE 46689
// begin result := [ chassis , engine , control , weapon ] ;
46656: LD_ADDR_VAR 0 6
46660: PUSH
46661: LD_VAR 0 2
46665: PUSH
46666: LD_VAR 0 3
46670: PUSH
46671: LD_VAR 0 4
46675: PUSH
46676: LD_VAR 0 5
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// exit ;
46687: GO 46980
// end ; if not chassis in _chassis then
46689: LD_VAR 0 2
46693: PUSH
46694: LD_VAR 0 9
46698: IN
46699: NOT
46700: IFFALSE 46726
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46702: LD_ADDR_VAR 0 2
46706: PUSH
46707: LD_VAR 0 9
46711: PUSH
46712: LD_INT 1
46714: PPUSH
46715: LD_VAR 0 9
46719: PPUSH
46720: CALL_OW 12
46724: ARRAY
46725: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46726: LD_VAR 0 2
46730: PPUSH
46731: LD_VAR 0 3
46735: PPUSH
46736: CALL 46985 0 2
46740: NOT
46741: IFFALSE 46800
// repeat engine := _engine [ 1 ] ;
46743: LD_ADDR_VAR 0 3
46747: PUSH
46748: LD_VAR 0 11
46752: PUSH
46753: LD_INT 1
46755: ARRAY
46756: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46757: LD_ADDR_VAR 0 11
46761: PUSH
46762: LD_VAR 0 11
46766: PPUSH
46767: LD_INT 1
46769: PPUSH
46770: CALL_OW 3
46774: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46775: LD_VAR 0 2
46779: PPUSH
46780: LD_VAR 0 3
46784: PPUSH
46785: CALL 46985 0 2
46789: PUSH
46790: LD_VAR 0 11
46794: PUSH
46795: EMPTY
46796: EQUAL
46797: OR
46798: IFFALSE 46743
// if not control in _control then
46800: LD_VAR 0 4
46804: PUSH
46805: LD_VAR 0 12
46809: IN
46810: NOT
46811: IFFALSE 46837
// control := _control [ rand ( 1 , _control ) ] ;
46813: LD_ADDR_VAR 0 4
46817: PUSH
46818: LD_VAR 0 12
46822: PUSH
46823: LD_INT 1
46825: PPUSH
46826: LD_VAR 0 12
46830: PPUSH
46831: CALL_OW 12
46835: ARRAY
46836: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46837: LD_VAR 0 2
46841: PPUSH
46842: LD_VAR 0 5
46846: PPUSH
46847: CALL 47205 0 2
46851: NOT
46852: IFFALSE 46911
// repeat weapon := _weapon [ 1 ] ;
46854: LD_ADDR_VAR 0 5
46858: PUSH
46859: LD_VAR 0 10
46863: PUSH
46864: LD_INT 1
46866: ARRAY
46867: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46868: LD_ADDR_VAR 0 10
46872: PUSH
46873: LD_VAR 0 10
46877: PPUSH
46878: LD_INT 1
46880: PPUSH
46881: CALL_OW 3
46885: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46886: LD_VAR 0 2
46890: PPUSH
46891: LD_VAR 0 5
46895: PPUSH
46896: CALL 47205 0 2
46900: PUSH
46901: LD_VAR 0 10
46905: PUSH
46906: EMPTY
46907: EQUAL
46908: OR
46909: IFFALSE 46854
// result := [ ] ;
46911: LD_ADDR_VAR 0 6
46915: PUSH
46916: EMPTY
46917: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46918: LD_VAR 0 1
46922: PPUSH
46923: LD_VAR 0 2
46927: PPUSH
46928: LD_VAR 0 3
46932: PPUSH
46933: LD_VAR 0 4
46937: PPUSH
46938: LD_VAR 0 5
46942: PPUSH
46943: CALL_OW 448
46947: IFFALSE 46980
// result := [ chassis , engine , control , weapon ] ;
46949: LD_ADDR_VAR 0 6
46953: PUSH
46954: LD_VAR 0 2
46958: PUSH
46959: LD_VAR 0 3
46963: PUSH
46964: LD_VAR 0 4
46968: PUSH
46969: LD_VAR 0 5
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// end ;
46980: LD_VAR 0 6
46984: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46985: LD_INT 0
46987: PPUSH
// if not chassis or not engine then
46988: LD_VAR 0 1
46992: NOT
46993: PUSH
46994: LD_VAR 0 2
46998: NOT
46999: OR
47000: IFFALSE 47004
// exit ;
47002: GO 47200
// case engine of engine_solar :
47004: LD_VAR 0 2
47008: PUSH
47009: LD_INT 2
47011: DOUBLE
47012: EQUAL
47013: IFTRUE 47017
47015: GO 47055
47017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47018: LD_ADDR_VAR 0 3
47022: PUSH
47023: LD_INT 11
47025: PUSH
47026: LD_INT 12
47028: PUSH
47029: LD_INT 13
47031: PUSH
47032: LD_INT 14
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: ST_TO_ADDR
47053: GO 47184
47055: LD_INT 1
47057: DOUBLE
47058: EQUAL
47059: IFTRUE 47063
47061: GO 47125
47063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47064: LD_ADDR_VAR 0 3
47068: PUSH
47069: LD_INT 11
47071: PUSH
47072: LD_INT 12
47074: PUSH
47075: LD_INT 13
47077: PUSH
47078: LD_INT 14
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: LD_INT 4
47092: PUSH
47093: LD_INT 5
47095: PUSH
47096: LD_INT 21
47098: PUSH
47099: LD_INT 23
47101: PUSH
47102: LD_INT 22
47104: PUSH
47105: LD_INT 24
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
47123: GO 47184
47125: LD_INT 3
47127: DOUBLE
47128: EQUAL
47129: IFTRUE 47133
47131: GO 47183
47133: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47134: LD_ADDR_VAR 0 3
47138: PUSH
47139: LD_INT 13
47141: PUSH
47142: LD_INT 14
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 4
47153: PUSH
47154: LD_INT 5
47156: PUSH
47157: LD_INT 21
47159: PUSH
47160: LD_INT 22
47162: PUSH
47163: LD_INT 23
47165: PUSH
47166: LD_INT 24
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: ST_TO_ADDR
47181: GO 47184
47183: POP
// result := ( chassis in result ) ;
47184: LD_ADDR_VAR 0 3
47188: PUSH
47189: LD_VAR 0 1
47193: PUSH
47194: LD_VAR 0 3
47198: IN
47199: ST_TO_ADDR
// end ;
47200: LD_VAR 0 3
47204: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47205: LD_INT 0
47207: PPUSH
// if not chassis or not weapon then
47208: LD_VAR 0 1
47212: NOT
47213: PUSH
47214: LD_VAR 0 2
47218: NOT
47219: OR
47220: IFFALSE 47224
// exit ;
47222: GO 48284
// case weapon of us_machine_gun :
47224: LD_VAR 0 2
47228: PUSH
47229: LD_INT 2
47231: DOUBLE
47232: EQUAL
47233: IFTRUE 47237
47235: GO 47267
47237: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47238: LD_ADDR_VAR 0 3
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: LD_INT 4
47254: PUSH
47255: LD_INT 5
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
47265: GO 48268
47267: LD_INT 3
47269: DOUBLE
47270: EQUAL
47271: IFTRUE 47275
47273: GO 47305
47275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47276: LD_ADDR_VAR 0 3
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 4
47292: PUSH
47293: LD_INT 5
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
47303: GO 48268
47305: LD_INT 11
47307: DOUBLE
47308: EQUAL
47309: IFTRUE 47313
47311: GO 47343
47313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47314: LD_ADDR_VAR 0 3
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: LD_INT 5
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: ST_TO_ADDR
47341: GO 48268
47343: LD_INT 4
47345: DOUBLE
47346: EQUAL
47347: IFTRUE 47351
47349: GO 47377
47351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47352: LD_ADDR_VAR 0 3
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: LD_INT 4
47365: PUSH
47366: LD_INT 5
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
47375: GO 48268
47377: LD_INT 5
47379: DOUBLE
47380: EQUAL
47381: IFTRUE 47385
47383: GO 47411
47385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47386: LD_ADDR_VAR 0 3
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
47409: GO 48268
47411: LD_INT 9
47413: DOUBLE
47414: EQUAL
47415: IFTRUE 47419
47417: GO 47445
47419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47420: LD_ADDR_VAR 0 3
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 4
47433: PUSH
47434: LD_INT 5
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
47443: GO 48268
47445: LD_INT 7
47447: DOUBLE
47448: EQUAL
47449: IFTRUE 47453
47451: GO 47479
47453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47454: LD_ADDR_VAR 0 3
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 4
47467: PUSH
47468: LD_INT 5
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: ST_TO_ADDR
47477: GO 48268
47479: LD_INT 12
47481: DOUBLE
47482: EQUAL
47483: IFTRUE 47487
47485: GO 47513
47487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47488: LD_ADDR_VAR 0 3
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 4
47501: PUSH
47502: LD_INT 5
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
47511: GO 48268
47513: LD_INT 13
47515: DOUBLE
47516: EQUAL
47517: IFTRUE 47521
47519: GO 47547
47521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47522: LD_ADDR_VAR 0 3
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 4
47535: PUSH
47536: LD_INT 5
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
47545: GO 48268
47547: LD_INT 14
47549: DOUBLE
47550: EQUAL
47551: IFTRUE 47555
47553: GO 47573
47555: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47556: LD_ADDR_VAR 0 3
47560: PUSH
47561: LD_INT 4
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: ST_TO_ADDR
47571: GO 48268
47573: LD_INT 6
47575: DOUBLE
47576: EQUAL
47577: IFTRUE 47581
47579: GO 47599
47581: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47582: LD_ADDR_VAR 0 3
47586: PUSH
47587: LD_INT 4
47589: PUSH
47590: LD_INT 5
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: ST_TO_ADDR
47597: GO 48268
47599: LD_INT 10
47601: DOUBLE
47602: EQUAL
47603: IFTRUE 47607
47605: GO 47625
47607: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47608: LD_ADDR_VAR 0 3
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: ST_TO_ADDR
47623: GO 48268
47625: LD_INT 22
47627: DOUBLE
47628: EQUAL
47629: IFTRUE 47633
47631: GO 47659
47633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47634: LD_ADDR_VAR 0 3
47638: PUSH
47639: LD_INT 11
47641: PUSH
47642: LD_INT 12
47644: PUSH
47645: LD_INT 13
47647: PUSH
47648: LD_INT 14
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
47657: GO 48268
47659: LD_INT 23
47661: DOUBLE
47662: EQUAL
47663: IFTRUE 47667
47665: GO 47693
47667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47668: LD_ADDR_VAR 0 3
47672: PUSH
47673: LD_INT 11
47675: PUSH
47676: LD_INT 12
47678: PUSH
47679: LD_INT 13
47681: PUSH
47682: LD_INT 14
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
47691: GO 48268
47693: LD_INT 24
47695: DOUBLE
47696: EQUAL
47697: IFTRUE 47701
47699: GO 47727
47701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47702: LD_ADDR_VAR 0 3
47706: PUSH
47707: LD_INT 11
47709: PUSH
47710: LD_INT 12
47712: PUSH
47713: LD_INT 13
47715: PUSH
47716: LD_INT 14
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: ST_TO_ADDR
47725: GO 48268
47727: LD_INT 30
47729: DOUBLE
47730: EQUAL
47731: IFTRUE 47735
47733: GO 47761
47735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47736: LD_ADDR_VAR 0 3
47740: PUSH
47741: LD_INT 11
47743: PUSH
47744: LD_INT 12
47746: PUSH
47747: LD_INT 13
47749: PUSH
47750: LD_INT 14
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: ST_TO_ADDR
47759: GO 48268
47761: LD_INT 25
47763: DOUBLE
47764: EQUAL
47765: IFTRUE 47769
47767: GO 47787
47769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47770: LD_ADDR_VAR 0 3
47774: PUSH
47775: LD_INT 13
47777: PUSH
47778: LD_INT 14
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: ST_TO_ADDR
47785: GO 48268
47787: LD_INT 27
47789: DOUBLE
47790: EQUAL
47791: IFTRUE 47795
47793: GO 47813
47795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47796: LD_ADDR_VAR 0 3
47800: PUSH
47801: LD_INT 13
47803: PUSH
47804: LD_INT 14
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: ST_TO_ADDR
47811: GO 48268
47813: LD_INT 92
47815: DOUBLE
47816: EQUAL
47817: IFTRUE 47821
47819: GO 47847
47821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_INT 11
47829: PUSH
47830: LD_INT 12
47832: PUSH
47833: LD_INT 13
47835: PUSH
47836: LD_INT 14
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
47845: GO 48268
47847: LD_INT 28
47849: DOUBLE
47850: EQUAL
47851: IFTRUE 47855
47853: GO 47873
47855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47856: LD_ADDR_VAR 0 3
47860: PUSH
47861: LD_INT 13
47863: PUSH
47864: LD_INT 14
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: ST_TO_ADDR
47871: GO 48268
47873: LD_INT 29
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47881
47879: GO 47899
47881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47882: LD_ADDR_VAR 0 3
47886: PUSH
47887: LD_INT 13
47889: PUSH
47890: LD_INT 14
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: ST_TO_ADDR
47897: GO 48268
47899: LD_INT 31
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47907
47905: GO 47925
47907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_INT 13
47915: PUSH
47916: LD_INT 14
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: ST_TO_ADDR
47923: GO 48268
47925: LD_INT 26
47927: DOUBLE
47928: EQUAL
47929: IFTRUE 47933
47931: GO 47951
47933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47934: LD_ADDR_VAR 0 3
47938: PUSH
47939: LD_INT 13
47941: PUSH
47942: LD_INT 14
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: ST_TO_ADDR
47949: GO 48268
47951: LD_INT 42
47953: DOUBLE
47954: EQUAL
47955: IFTRUE 47959
47957: GO 47985
47959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47960: LD_ADDR_VAR 0 3
47964: PUSH
47965: LD_INT 21
47967: PUSH
47968: LD_INT 22
47970: PUSH
47971: LD_INT 23
47973: PUSH
47974: LD_INT 24
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
47983: GO 48268
47985: LD_INT 43
47987: DOUBLE
47988: EQUAL
47989: IFTRUE 47993
47991: GO 48019
47993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47994: LD_ADDR_VAR 0 3
47998: PUSH
47999: LD_INT 21
48001: PUSH
48002: LD_INT 22
48004: PUSH
48005: LD_INT 23
48007: PUSH
48008: LD_INT 24
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
48017: GO 48268
48019: LD_INT 44
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48027
48025: GO 48053
48027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: LD_INT 21
48035: PUSH
48036: LD_INT 22
48038: PUSH
48039: LD_INT 23
48041: PUSH
48042: LD_INT 24
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
48051: GO 48268
48053: LD_INT 45
48055: DOUBLE
48056: EQUAL
48057: IFTRUE 48061
48059: GO 48087
48061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48062: LD_ADDR_VAR 0 3
48066: PUSH
48067: LD_INT 21
48069: PUSH
48070: LD_INT 22
48072: PUSH
48073: LD_INT 23
48075: PUSH
48076: LD_INT 24
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
48085: GO 48268
48087: LD_INT 49
48089: DOUBLE
48090: EQUAL
48091: IFTRUE 48095
48093: GO 48121
48095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_INT 21
48103: PUSH
48104: LD_INT 22
48106: PUSH
48107: LD_INT 23
48109: PUSH
48110: LD_INT 24
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
48119: GO 48268
48121: LD_INT 51
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48129
48127: GO 48155
48129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48130: LD_ADDR_VAR 0 3
48134: PUSH
48135: LD_INT 21
48137: PUSH
48138: LD_INT 22
48140: PUSH
48141: LD_INT 23
48143: PUSH
48144: LD_INT 24
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: ST_TO_ADDR
48153: GO 48268
48155: LD_INT 52
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48163
48161: GO 48189
48163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48164: LD_ADDR_VAR 0 3
48168: PUSH
48169: LD_INT 21
48171: PUSH
48172: LD_INT 22
48174: PUSH
48175: LD_INT 23
48177: PUSH
48178: LD_INT 24
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
48187: GO 48268
48189: LD_INT 53
48191: DOUBLE
48192: EQUAL
48193: IFTRUE 48197
48195: GO 48215
48197: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48198: LD_ADDR_VAR 0 3
48202: PUSH
48203: LD_INT 23
48205: PUSH
48206: LD_INT 24
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: ST_TO_ADDR
48213: GO 48268
48215: LD_INT 46
48217: DOUBLE
48218: EQUAL
48219: IFTRUE 48223
48221: GO 48241
48223: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48224: LD_ADDR_VAR 0 3
48228: PUSH
48229: LD_INT 23
48231: PUSH
48232: LD_INT 24
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: ST_TO_ADDR
48239: GO 48268
48241: LD_INT 47
48243: DOUBLE
48244: EQUAL
48245: IFTRUE 48249
48247: GO 48267
48249: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48250: LD_ADDR_VAR 0 3
48254: PUSH
48255: LD_INT 23
48257: PUSH
48258: LD_INT 24
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: ST_TO_ADDR
48265: GO 48268
48267: POP
// result := ( chassis in result ) ;
48268: LD_ADDR_VAR 0 3
48272: PUSH
48273: LD_VAR 0 1
48277: PUSH
48278: LD_VAR 0 3
48282: IN
48283: ST_TO_ADDR
// end ;
48284: LD_VAR 0 3
48288: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48289: LD_INT 0
48291: PPUSH
48292: PPUSH
48293: PPUSH
48294: PPUSH
48295: PPUSH
48296: PPUSH
48297: PPUSH
// result := array ;
48298: LD_ADDR_VAR 0 5
48302: PUSH
48303: LD_VAR 0 1
48307: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48308: LD_VAR 0 1
48312: NOT
48313: PUSH
48314: LD_VAR 0 2
48318: NOT
48319: OR
48320: PUSH
48321: LD_VAR 0 3
48325: NOT
48326: OR
48327: PUSH
48328: LD_VAR 0 2
48332: PUSH
48333: LD_VAR 0 1
48337: GREATER
48338: OR
48339: PUSH
48340: LD_VAR 0 3
48344: PUSH
48345: LD_VAR 0 1
48349: GREATER
48350: OR
48351: IFFALSE 48355
// exit ;
48353: GO 48651
// if direction then
48355: LD_VAR 0 4
48359: IFFALSE 48423
// begin d := 1 ;
48361: LD_ADDR_VAR 0 9
48365: PUSH
48366: LD_INT 1
48368: ST_TO_ADDR
// if i_from > i_to then
48369: LD_VAR 0 2
48373: PUSH
48374: LD_VAR 0 3
48378: GREATER
48379: IFFALSE 48405
// length := ( array - i_from ) + i_to else
48381: LD_ADDR_VAR 0 11
48385: PUSH
48386: LD_VAR 0 1
48390: PUSH
48391: LD_VAR 0 2
48395: MINUS
48396: PUSH
48397: LD_VAR 0 3
48401: PLUS
48402: ST_TO_ADDR
48403: GO 48421
// length := i_to - i_from ;
48405: LD_ADDR_VAR 0 11
48409: PUSH
48410: LD_VAR 0 3
48414: PUSH
48415: LD_VAR 0 2
48419: MINUS
48420: ST_TO_ADDR
// end else
48421: GO 48484
// begin d := - 1 ;
48423: LD_ADDR_VAR 0 9
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: ST_TO_ADDR
// if i_from > i_to then
48432: LD_VAR 0 2
48436: PUSH
48437: LD_VAR 0 3
48441: GREATER
48442: IFFALSE 48462
// length := i_from - i_to else
48444: LD_ADDR_VAR 0 11
48448: PUSH
48449: LD_VAR 0 2
48453: PUSH
48454: LD_VAR 0 3
48458: MINUS
48459: ST_TO_ADDR
48460: GO 48484
// length := ( array - i_to ) + i_from ;
48462: LD_ADDR_VAR 0 11
48466: PUSH
48467: LD_VAR 0 1
48471: PUSH
48472: LD_VAR 0 3
48476: MINUS
48477: PUSH
48478: LD_VAR 0 2
48482: PLUS
48483: ST_TO_ADDR
// end ; if not length then
48484: LD_VAR 0 11
48488: NOT
48489: IFFALSE 48493
// exit ;
48491: GO 48651
// tmp := array ;
48493: LD_ADDR_VAR 0 10
48497: PUSH
48498: LD_VAR 0 1
48502: ST_TO_ADDR
// for i = 1 to length do
48503: LD_ADDR_VAR 0 6
48507: PUSH
48508: DOUBLE
48509: LD_INT 1
48511: DEC
48512: ST_TO_ADDR
48513: LD_VAR 0 11
48517: PUSH
48518: FOR_TO
48519: IFFALSE 48639
// begin for j = 1 to array do
48521: LD_ADDR_VAR 0 7
48525: PUSH
48526: DOUBLE
48527: LD_INT 1
48529: DEC
48530: ST_TO_ADDR
48531: LD_VAR 0 1
48535: PUSH
48536: FOR_TO
48537: IFFALSE 48625
// begin k := j + d ;
48539: LD_ADDR_VAR 0 8
48543: PUSH
48544: LD_VAR 0 7
48548: PUSH
48549: LD_VAR 0 9
48553: PLUS
48554: ST_TO_ADDR
// if k > array then
48555: LD_VAR 0 8
48559: PUSH
48560: LD_VAR 0 1
48564: GREATER
48565: IFFALSE 48575
// k := 1 ;
48567: LD_ADDR_VAR 0 8
48571: PUSH
48572: LD_INT 1
48574: ST_TO_ADDR
// if not k then
48575: LD_VAR 0 8
48579: NOT
48580: IFFALSE 48592
// k := array ;
48582: LD_ADDR_VAR 0 8
48586: PUSH
48587: LD_VAR 0 1
48591: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48592: LD_ADDR_VAR 0 10
48596: PUSH
48597: LD_VAR 0 10
48601: PPUSH
48602: LD_VAR 0 8
48606: PPUSH
48607: LD_VAR 0 1
48611: PUSH
48612: LD_VAR 0 7
48616: ARRAY
48617: PPUSH
48618: CALL_OW 1
48622: ST_TO_ADDR
// end ;
48623: GO 48536
48625: POP
48626: POP
// array := tmp ;
48627: LD_ADDR_VAR 0 1
48631: PUSH
48632: LD_VAR 0 10
48636: ST_TO_ADDR
// end ;
48637: GO 48518
48639: POP
48640: POP
// result := array ;
48641: LD_ADDR_VAR 0 5
48645: PUSH
48646: LD_VAR 0 1
48650: ST_TO_ADDR
// end ;
48651: LD_VAR 0 5
48655: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
// result := 0 ;
48660: LD_ADDR_VAR 0 3
48664: PUSH
48665: LD_INT 0
48667: ST_TO_ADDR
// if not array or not value in array then
48668: LD_VAR 0 1
48672: NOT
48673: PUSH
48674: LD_VAR 0 2
48678: PUSH
48679: LD_VAR 0 1
48683: IN
48684: NOT
48685: OR
48686: IFFALSE 48690
// exit ;
48688: GO 48744
// for i = 1 to array do
48690: LD_ADDR_VAR 0 4
48694: PUSH
48695: DOUBLE
48696: LD_INT 1
48698: DEC
48699: ST_TO_ADDR
48700: LD_VAR 0 1
48704: PUSH
48705: FOR_TO
48706: IFFALSE 48742
// if value = array [ i ] then
48708: LD_VAR 0 2
48712: PUSH
48713: LD_VAR 0 1
48717: PUSH
48718: LD_VAR 0 4
48722: ARRAY
48723: EQUAL
48724: IFFALSE 48740
// begin result := i ;
48726: LD_ADDR_VAR 0 3
48730: PUSH
48731: LD_VAR 0 4
48735: ST_TO_ADDR
// exit ;
48736: POP
48737: POP
48738: GO 48744
// end ;
48740: GO 48705
48742: POP
48743: POP
// end ;
48744: LD_VAR 0 3
48748: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48749: LD_INT 0
48751: PPUSH
// vc_chassis := chassis ;
48752: LD_ADDR_OWVAR 37
48756: PUSH
48757: LD_VAR 0 1
48761: ST_TO_ADDR
// vc_engine := engine ;
48762: LD_ADDR_OWVAR 39
48766: PUSH
48767: LD_VAR 0 2
48771: ST_TO_ADDR
// vc_control := control ;
48772: LD_ADDR_OWVAR 38
48776: PUSH
48777: LD_VAR 0 3
48781: ST_TO_ADDR
// vc_weapon := weapon ;
48782: LD_ADDR_OWVAR 40
48786: PUSH
48787: LD_VAR 0 4
48791: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48792: LD_ADDR_OWVAR 41
48796: PUSH
48797: LD_VAR 0 5
48801: ST_TO_ADDR
// end ;
48802: LD_VAR 0 6
48806: RET
// export function WantPlant ( unit ) ; var task ; begin
48807: LD_INT 0
48809: PPUSH
48810: PPUSH
// result := false ;
48811: LD_ADDR_VAR 0 2
48815: PUSH
48816: LD_INT 0
48818: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48819: LD_ADDR_VAR 0 3
48823: PUSH
48824: LD_VAR 0 1
48828: PPUSH
48829: CALL_OW 437
48833: ST_TO_ADDR
// if task then
48834: LD_VAR 0 3
48838: IFFALSE 48866
// if task [ 1 ] [ 1 ] = p then
48840: LD_VAR 0 3
48844: PUSH
48845: LD_INT 1
48847: ARRAY
48848: PUSH
48849: LD_INT 1
48851: ARRAY
48852: PUSH
48853: LD_STRING p
48855: EQUAL
48856: IFFALSE 48866
// result := true ;
48858: LD_ADDR_VAR 0 2
48862: PUSH
48863: LD_INT 1
48865: ST_TO_ADDR
// end ;
48866: LD_VAR 0 2
48870: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48871: LD_INT 0
48873: PPUSH
48874: PPUSH
48875: PPUSH
48876: PPUSH
// if pos < 1 then
48877: LD_VAR 0 2
48881: PUSH
48882: LD_INT 1
48884: LESS
48885: IFFALSE 48889
// exit ;
48887: GO 49192
// if pos = 1 then
48889: LD_VAR 0 2
48893: PUSH
48894: LD_INT 1
48896: EQUAL
48897: IFFALSE 48930
// result := Replace ( arr , pos [ 1 ] , value ) else
48899: LD_ADDR_VAR 0 4
48903: PUSH
48904: LD_VAR 0 1
48908: PPUSH
48909: LD_VAR 0 2
48913: PUSH
48914: LD_INT 1
48916: ARRAY
48917: PPUSH
48918: LD_VAR 0 3
48922: PPUSH
48923: CALL_OW 1
48927: ST_TO_ADDR
48928: GO 49192
// begin tmp := arr ;
48930: LD_ADDR_VAR 0 6
48934: PUSH
48935: LD_VAR 0 1
48939: ST_TO_ADDR
// s_arr := [ tmp ] ;
48940: LD_ADDR_VAR 0 7
48944: PUSH
48945: LD_VAR 0 6
48949: PUSH
48950: EMPTY
48951: LIST
48952: ST_TO_ADDR
// for i = 1 to pos - 1 do
48953: LD_ADDR_VAR 0 5
48957: PUSH
48958: DOUBLE
48959: LD_INT 1
48961: DEC
48962: ST_TO_ADDR
48963: LD_VAR 0 2
48967: PUSH
48968: LD_INT 1
48970: MINUS
48971: PUSH
48972: FOR_TO
48973: IFFALSE 49018
// begin tmp := tmp [ pos [ i ] ] ;
48975: LD_ADDR_VAR 0 6
48979: PUSH
48980: LD_VAR 0 6
48984: PUSH
48985: LD_VAR 0 2
48989: PUSH
48990: LD_VAR 0 5
48994: ARRAY
48995: ARRAY
48996: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48997: LD_ADDR_VAR 0 7
49001: PUSH
49002: LD_VAR 0 7
49006: PUSH
49007: LD_VAR 0 6
49011: PUSH
49012: EMPTY
49013: LIST
49014: ADD
49015: ST_TO_ADDR
// end ;
49016: GO 48972
49018: POP
49019: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49020: LD_ADDR_VAR 0 6
49024: PUSH
49025: LD_VAR 0 6
49029: PPUSH
49030: LD_VAR 0 2
49034: PUSH
49035: LD_VAR 0 2
49039: ARRAY
49040: PPUSH
49041: LD_VAR 0 3
49045: PPUSH
49046: CALL_OW 1
49050: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49051: LD_ADDR_VAR 0 7
49055: PUSH
49056: LD_VAR 0 7
49060: PPUSH
49061: LD_VAR 0 7
49065: PPUSH
49066: LD_VAR 0 6
49070: PPUSH
49071: CALL_OW 1
49075: ST_TO_ADDR
// for i = s_arr downto 2 do
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: DOUBLE
49082: LD_VAR 0 7
49086: INC
49087: ST_TO_ADDR
49088: LD_INT 2
49090: PUSH
49091: FOR_DOWNTO
49092: IFFALSE 49176
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49094: LD_ADDR_VAR 0 6
49098: PUSH
49099: LD_VAR 0 7
49103: PUSH
49104: LD_VAR 0 5
49108: PUSH
49109: LD_INT 1
49111: MINUS
49112: ARRAY
49113: PPUSH
49114: LD_VAR 0 2
49118: PUSH
49119: LD_VAR 0 5
49123: PUSH
49124: LD_INT 1
49126: MINUS
49127: ARRAY
49128: PPUSH
49129: LD_VAR 0 7
49133: PUSH
49134: LD_VAR 0 5
49138: ARRAY
49139: PPUSH
49140: CALL_OW 1
49144: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49145: LD_ADDR_VAR 0 7
49149: PUSH
49150: LD_VAR 0 7
49154: PPUSH
49155: LD_VAR 0 5
49159: PUSH
49160: LD_INT 1
49162: MINUS
49163: PPUSH
49164: LD_VAR 0 6
49168: PPUSH
49169: CALL_OW 1
49173: ST_TO_ADDR
// end ;
49174: GO 49091
49176: POP
49177: POP
// result := s_arr [ 1 ] ;
49178: LD_ADDR_VAR 0 4
49182: PUSH
49183: LD_VAR 0 7
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: ST_TO_ADDR
// end ; end ;
49192: LD_VAR 0 4
49196: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49197: LD_INT 0
49199: PPUSH
49200: PPUSH
// if not list then
49201: LD_VAR 0 1
49205: NOT
49206: IFFALSE 49210
// exit ;
49208: GO 49301
// i := list [ pos1 ] ;
49210: LD_ADDR_VAR 0 5
49214: PUSH
49215: LD_VAR 0 1
49219: PUSH
49220: LD_VAR 0 2
49224: ARRAY
49225: ST_TO_ADDR
// if not i then
49226: LD_VAR 0 5
49230: NOT
49231: IFFALSE 49235
// exit ;
49233: GO 49301
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49235: LD_ADDR_VAR 0 1
49239: PUSH
49240: LD_VAR 0 1
49244: PPUSH
49245: LD_VAR 0 2
49249: PPUSH
49250: LD_VAR 0 1
49254: PUSH
49255: LD_VAR 0 3
49259: ARRAY
49260: PPUSH
49261: CALL_OW 1
49265: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49266: LD_ADDR_VAR 0 1
49270: PUSH
49271: LD_VAR 0 1
49275: PPUSH
49276: LD_VAR 0 3
49280: PPUSH
49281: LD_VAR 0 5
49285: PPUSH
49286: CALL_OW 1
49290: ST_TO_ADDR
// result := list ;
49291: LD_ADDR_VAR 0 4
49295: PUSH
49296: LD_VAR 0 1
49300: ST_TO_ADDR
// end ;
49301: LD_VAR 0 4
49305: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49306: LD_INT 0
49308: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49309: LD_ADDR_VAR 0 5
49313: PUSH
49314: LD_VAR 0 1
49318: PPUSH
49319: CALL_OW 250
49323: PPUSH
49324: LD_VAR 0 1
49328: PPUSH
49329: CALL_OW 251
49333: PPUSH
49334: LD_VAR 0 2
49338: PPUSH
49339: LD_VAR 0 3
49343: PPUSH
49344: LD_VAR 0 4
49348: PPUSH
49349: CALL 49359 0 5
49353: ST_TO_ADDR
// end ;
49354: LD_VAR 0 5
49358: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49359: LD_INT 0
49361: PPUSH
49362: PPUSH
49363: PPUSH
49364: PPUSH
// if not list then
49365: LD_VAR 0 3
49369: NOT
49370: IFFALSE 49374
// exit ;
49372: GO 49762
// result := [ ] ;
49374: LD_ADDR_VAR 0 6
49378: PUSH
49379: EMPTY
49380: ST_TO_ADDR
// for i in list do
49381: LD_ADDR_VAR 0 7
49385: PUSH
49386: LD_VAR 0 3
49390: PUSH
49391: FOR_IN
49392: IFFALSE 49594
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49394: LD_ADDR_VAR 0 9
49398: PUSH
49399: LD_VAR 0 7
49403: PPUSH
49404: LD_VAR 0 1
49408: PPUSH
49409: LD_VAR 0 2
49413: PPUSH
49414: CALL_OW 297
49418: ST_TO_ADDR
// if not result then
49419: LD_VAR 0 6
49423: NOT
49424: IFFALSE 49450
// result := [ [ i , tmp ] ] else
49426: LD_ADDR_VAR 0 6
49430: PUSH
49431: LD_VAR 0 7
49435: PUSH
49436: LD_VAR 0 9
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: EMPTY
49446: LIST
49447: ST_TO_ADDR
49448: GO 49592
// begin if result [ result ] [ 2 ] < tmp then
49450: LD_VAR 0 6
49454: PUSH
49455: LD_VAR 0 6
49459: ARRAY
49460: PUSH
49461: LD_INT 2
49463: ARRAY
49464: PUSH
49465: LD_VAR 0 9
49469: LESS
49470: IFFALSE 49512
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49472: LD_ADDR_VAR 0 6
49476: PUSH
49477: LD_VAR 0 6
49481: PPUSH
49482: LD_VAR 0 6
49486: PUSH
49487: LD_INT 1
49489: PLUS
49490: PPUSH
49491: LD_VAR 0 7
49495: PUSH
49496: LD_VAR 0 9
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PPUSH
49505: CALL_OW 2
49509: ST_TO_ADDR
49510: GO 49592
// for j = 1 to result do
49512: LD_ADDR_VAR 0 8
49516: PUSH
49517: DOUBLE
49518: LD_INT 1
49520: DEC
49521: ST_TO_ADDR
49522: LD_VAR 0 6
49526: PUSH
49527: FOR_TO
49528: IFFALSE 49590
// begin if tmp < result [ j ] [ 2 ] then
49530: LD_VAR 0 9
49534: PUSH
49535: LD_VAR 0 6
49539: PUSH
49540: LD_VAR 0 8
49544: ARRAY
49545: PUSH
49546: LD_INT 2
49548: ARRAY
49549: LESS
49550: IFFALSE 49588
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49552: LD_ADDR_VAR 0 6
49556: PUSH
49557: LD_VAR 0 6
49561: PPUSH
49562: LD_VAR 0 8
49566: PPUSH
49567: LD_VAR 0 7
49571: PUSH
49572: LD_VAR 0 9
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PPUSH
49581: CALL_OW 2
49585: ST_TO_ADDR
// break ;
49586: GO 49590
// end ; end ;
49588: GO 49527
49590: POP
49591: POP
// end ; end ;
49592: GO 49391
49594: POP
49595: POP
// if result and not asc then
49596: LD_VAR 0 6
49600: PUSH
49601: LD_VAR 0 4
49605: NOT
49606: AND
49607: IFFALSE 49682
// begin tmp := result ;
49609: LD_ADDR_VAR 0 9
49613: PUSH
49614: LD_VAR 0 6
49618: ST_TO_ADDR
// for i = tmp downto 1 do
49619: LD_ADDR_VAR 0 7
49623: PUSH
49624: DOUBLE
49625: LD_VAR 0 9
49629: INC
49630: ST_TO_ADDR
49631: LD_INT 1
49633: PUSH
49634: FOR_DOWNTO
49635: IFFALSE 49680
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49637: LD_ADDR_VAR 0 6
49641: PUSH
49642: LD_VAR 0 6
49646: PPUSH
49647: LD_VAR 0 9
49651: PUSH
49652: LD_VAR 0 7
49656: MINUS
49657: PUSH
49658: LD_INT 1
49660: PLUS
49661: PPUSH
49662: LD_VAR 0 9
49666: PUSH
49667: LD_VAR 0 7
49671: ARRAY
49672: PPUSH
49673: CALL_OW 1
49677: ST_TO_ADDR
49678: GO 49634
49680: POP
49681: POP
// end ; tmp := [ ] ;
49682: LD_ADDR_VAR 0 9
49686: PUSH
49687: EMPTY
49688: ST_TO_ADDR
// if mode then
49689: LD_VAR 0 5
49693: IFFALSE 49762
// begin for i = 1 to result do
49695: LD_ADDR_VAR 0 7
49699: PUSH
49700: DOUBLE
49701: LD_INT 1
49703: DEC
49704: ST_TO_ADDR
49705: LD_VAR 0 6
49709: PUSH
49710: FOR_TO
49711: IFFALSE 49750
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49713: LD_ADDR_VAR 0 9
49717: PUSH
49718: LD_VAR 0 9
49722: PPUSH
49723: LD_VAR 0 7
49727: PPUSH
49728: LD_VAR 0 6
49732: PUSH
49733: LD_VAR 0 7
49737: ARRAY
49738: PUSH
49739: LD_INT 1
49741: ARRAY
49742: PPUSH
49743: CALL_OW 1
49747: ST_TO_ADDR
49748: GO 49710
49750: POP
49751: POP
// result := tmp ;
49752: LD_ADDR_VAR 0 6
49756: PUSH
49757: LD_VAR 0 9
49761: ST_TO_ADDR
// end ; end ;
49762: LD_VAR 0 6
49766: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49767: LD_INT 0
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49775: LD_ADDR_VAR 0 5
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// if not x or not y then
49797: LD_VAR 0 2
49801: NOT
49802: PUSH
49803: LD_VAR 0 3
49807: NOT
49808: OR
49809: IFFALSE 49813
// exit ;
49811: GO 51463
// if not range then
49813: LD_VAR 0 4
49817: NOT
49818: IFFALSE 49828
// range := 10 ;
49820: LD_ADDR_VAR 0 4
49824: PUSH
49825: LD_INT 10
49827: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49828: LD_ADDR_VAR 0 8
49832: PUSH
49833: LD_INT 81
49835: PUSH
49836: LD_VAR 0 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 92
49847: PUSH
49848: LD_VAR 0 2
49852: PUSH
49853: LD_VAR 0 3
49857: PUSH
49858: LD_VAR 0 4
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: LD_INT 21
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: PPUSH
49891: CALL_OW 69
49895: ST_TO_ADDR
// if not tmp then
49896: LD_VAR 0 8
49900: NOT
49901: IFFALSE 49905
// exit ;
49903: GO 51463
// for i in tmp do
49905: LD_ADDR_VAR 0 6
49909: PUSH
49910: LD_VAR 0 8
49914: PUSH
49915: FOR_IN
49916: IFFALSE 51438
// begin points := [ 0 , 0 , 0 ] ;
49918: LD_ADDR_VAR 0 9
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// bpoints := 1 ;
49937: LD_ADDR_VAR 0 10
49941: PUSH
49942: LD_INT 1
49944: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49945: LD_VAR 0 6
49949: PPUSH
49950: CALL_OW 247
49954: PUSH
49955: LD_INT 1
49957: DOUBLE
49958: EQUAL
49959: IFTRUE 49963
49961: GO 50541
49963: POP
// begin if GetClass ( i ) = 1 then
49964: LD_VAR 0 6
49968: PPUSH
49969: CALL_OW 257
49973: PUSH
49974: LD_INT 1
49976: EQUAL
49977: IFFALSE 49998
// points := [ 10 , 5 , 3 ] ;
49979: LD_ADDR_VAR 0 9
49983: PUSH
49984: LD_INT 10
49986: PUSH
49987: LD_INT 5
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49998: LD_VAR 0 6
50002: PPUSH
50003: CALL_OW 257
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: IN
50022: IFFALSE 50043
// points := [ 3 , 2 , 1 ] ;
50024: LD_ADDR_VAR 0 9
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50043: LD_VAR 0 6
50047: PPUSH
50048: CALL_OW 257
50052: PUSH
50053: LD_INT 5
50055: EQUAL
50056: IFFALSE 50077
// points := [ 130 , 5 , 2 ] ;
50058: LD_ADDR_VAR 0 9
50062: PUSH
50063: LD_INT 130
50065: PUSH
50066: LD_INT 5
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50077: LD_VAR 0 6
50081: PPUSH
50082: CALL_OW 257
50086: PUSH
50087: LD_INT 8
50089: EQUAL
50090: IFFALSE 50111
// points := [ 35 , 35 , 30 ] ;
50092: LD_ADDR_VAR 0 9
50096: PUSH
50097: LD_INT 35
50099: PUSH
50100: LD_INT 35
50102: PUSH
50103: LD_INT 30
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50111: LD_VAR 0 6
50115: PPUSH
50116: CALL_OW 257
50120: PUSH
50121: LD_INT 9
50123: EQUAL
50124: IFFALSE 50145
// points := [ 20 , 55 , 40 ] ;
50126: LD_ADDR_VAR 0 9
50130: PUSH
50131: LD_INT 20
50133: PUSH
50134: LD_INT 55
50136: PUSH
50137: LD_INT 40
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50145: LD_VAR 0 6
50149: PPUSH
50150: CALL_OW 257
50154: PUSH
50155: LD_INT 12
50157: PUSH
50158: LD_INT 16
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: IN
50165: IFFALSE 50186
// points := [ 5 , 3 , 2 ] ;
50167: LD_ADDR_VAR 0 9
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50186: LD_VAR 0 6
50190: PPUSH
50191: CALL_OW 257
50195: PUSH
50196: LD_INT 17
50198: EQUAL
50199: IFFALSE 50220
// points := [ 100 , 50 , 75 ] ;
50201: LD_ADDR_VAR 0 9
50205: PUSH
50206: LD_INT 100
50208: PUSH
50209: LD_INT 50
50211: PUSH
50212: LD_INT 75
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50220: LD_VAR 0 6
50224: PPUSH
50225: CALL_OW 257
50229: PUSH
50230: LD_INT 15
50232: EQUAL
50233: IFFALSE 50254
// points := [ 10 , 5 , 3 ] ;
50235: LD_ADDR_VAR 0 9
50239: PUSH
50240: LD_INT 10
50242: PUSH
50243: LD_INT 5
50245: PUSH
50246: LD_INT 3
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: LIST
50253: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50254: LD_VAR 0 6
50258: PPUSH
50259: CALL_OW 257
50263: PUSH
50264: LD_INT 14
50266: EQUAL
50267: IFFALSE 50288
// points := [ 10 , 0 , 0 ] ;
50269: LD_ADDR_VAR 0 9
50273: PUSH
50274: LD_INT 10
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50288: LD_VAR 0 6
50292: PPUSH
50293: CALL_OW 257
50297: PUSH
50298: LD_INT 11
50300: EQUAL
50301: IFFALSE 50322
// points := [ 30 , 10 , 5 ] ;
50303: LD_ADDR_VAR 0 9
50307: PUSH
50308: LD_INT 30
50310: PUSH
50311: LD_INT 10
50313: PUSH
50314: LD_INT 5
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50322: LD_VAR 0 1
50326: PPUSH
50327: LD_INT 5
50329: PPUSH
50330: CALL_OW 321
50334: PUSH
50335: LD_INT 2
50337: EQUAL
50338: IFFALSE 50355
// bpoints := bpoints * 1.8 ;
50340: LD_ADDR_VAR 0 10
50344: PUSH
50345: LD_VAR 0 10
50349: PUSH
50350: LD_REAL  1.80000000000000E+0000
50353: MUL
50354: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50355: LD_VAR 0 6
50359: PPUSH
50360: CALL_OW 257
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 3
50373: PUSH
50374: LD_INT 4
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: IN
50383: PUSH
50384: LD_VAR 0 1
50388: PPUSH
50389: LD_INT 51
50391: PPUSH
50392: CALL_OW 321
50396: PUSH
50397: LD_INT 2
50399: EQUAL
50400: AND
50401: IFFALSE 50418
// bpoints := bpoints * 1.2 ;
50403: LD_ADDR_VAR 0 10
50407: PUSH
50408: LD_VAR 0 10
50412: PUSH
50413: LD_REAL  1.20000000000000E+0000
50416: MUL
50417: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50418: LD_VAR 0 6
50422: PPUSH
50423: CALL_OW 257
50427: PUSH
50428: LD_INT 5
50430: PUSH
50431: LD_INT 7
50433: PUSH
50434: LD_INT 9
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: IN
50442: PUSH
50443: LD_VAR 0 1
50447: PPUSH
50448: LD_INT 52
50450: PPUSH
50451: CALL_OW 321
50455: PUSH
50456: LD_INT 2
50458: EQUAL
50459: AND
50460: IFFALSE 50477
// bpoints := bpoints * 1.5 ;
50462: LD_ADDR_VAR 0 10
50466: PUSH
50467: LD_VAR 0 10
50471: PUSH
50472: LD_REAL  1.50000000000000E+0000
50475: MUL
50476: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50477: LD_VAR 0 1
50481: PPUSH
50482: LD_INT 66
50484: PPUSH
50485: CALL_OW 321
50489: PUSH
50490: LD_INT 2
50492: EQUAL
50493: IFFALSE 50510
// bpoints := bpoints * 1.1 ;
50495: LD_ADDR_VAR 0 10
50499: PUSH
50500: LD_VAR 0 10
50504: PUSH
50505: LD_REAL  1.10000000000000E+0000
50508: MUL
50509: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50510: LD_ADDR_VAR 0 10
50514: PUSH
50515: LD_VAR 0 10
50519: PUSH
50520: LD_VAR 0 6
50524: PPUSH
50525: LD_INT 1
50527: PPUSH
50528: CALL_OW 259
50532: PUSH
50533: LD_REAL  1.15000000000000E+0000
50536: MUL
50537: MUL
50538: ST_TO_ADDR
// end ; unit_vehicle :
50539: GO 51367
50541: LD_INT 2
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50549
50547: GO 51355
50549: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50550: LD_VAR 0 6
50554: PPUSH
50555: CALL_OW 264
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 42
50565: PUSH
50566: LD_INT 24
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: IN
50574: IFFALSE 50595
// points := [ 25 , 5 , 3 ] ;
50576: LD_ADDR_VAR 0 9
50580: PUSH
50581: LD_INT 25
50583: PUSH
50584: LD_INT 5
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50595: LD_VAR 0 6
50599: PPUSH
50600: CALL_OW 264
50604: PUSH
50605: LD_INT 4
50607: PUSH
50608: LD_INT 43
50610: PUSH
50611: LD_INT 25
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: IN
50619: IFFALSE 50640
// points := [ 40 , 15 , 5 ] ;
50621: LD_ADDR_VAR 0 9
50625: PUSH
50626: LD_INT 40
50628: PUSH
50629: LD_INT 15
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50640: LD_VAR 0 6
50644: PPUSH
50645: CALL_OW 264
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 23
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: IN
50660: IFFALSE 50681
// points := [ 7 , 25 , 8 ] ;
50662: LD_ADDR_VAR 0 9
50666: PUSH
50667: LD_INT 7
50669: PUSH
50670: LD_INT 25
50672: PUSH
50673: LD_INT 8
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50681: LD_VAR 0 6
50685: PPUSH
50686: CALL_OW 264
50690: PUSH
50691: LD_INT 5
50693: PUSH
50694: LD_INT 27
50696: PUSH
50697: LD_INT 44
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: IN
50705: IFFALSE 50726
// points := [ 14 , 50 , 16 ] ;
50707: LD_ADDR_VAR 0 9
50711: PUSH
50712: LD_INT 14
50714: PUSH
50715: LD_INT 50
50717: PUSH
50718: LD_INT 16
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50726: LD_VAR 0 6
50730: PPUSH
50731: CALL_OW 264
50735: PUSH
50736: LD_INT 6
50738: PUSH
50739: LD_INT 46
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: IN
50746: IFFALSE 50767
// points := [ 32 , 120 , 70 ] ;
50748: LD_ADDR_VAR 0 9
50752: PUSH
50753: LD_INT 32
50755: PUSH
50756: LD_INT 120
50758: PUSH
50759: LD_INT 70
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50767: LD_VAR 0 6
50771: PPUSH
50772: CALL_OW 264
50776: PUSH
50777: LD_INT 7
50779: PUSH
50780: LD_INT 28
50782: PUSH
50783: LD_INT 45
50785: PUSH
50786: LD_INT 92
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: IN
50795: IFFALSE 50816
// points := [ 35 , 20 , 45 ] ;
50797: LD_ADDR_VAR 0 9
50801: PUSH
50802: LD_INT 35
50804: PUSH
50805: LD_INT 20
50807: PUSH
50808: LD_INT 45
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50816: LD_VAR 0 6
50820: PPUSH
50821: CALL_OW 264
50825: PUSH
50826: LD_INT 47
50828: PUSH
50829: EMPTY
50830: LIST
50831: IN
50832: IFFALSE 50853
// points := [ 67 , 45 , 75 ] ;
50834: LD_ADDR_VAR 0 9
50838: PUSH
50839: LD_INT 67
50841: PUSH
50842: LD_INT 45
50844: PUSH
50845: LD_INT 75
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50853: LD_VAR 0 6
50857: PPUSH
50858: CALL_OW 264
50862: PUSH
50863: LD_INT 26
50865: PUSH
50866: EMPTY
50867: LIST
50868: IN
50869: IFFALSE 50890
// points := [ 120 , 30 , 80 ] ;
50871: LD_ADDR_VAR 0 9
50875: PUSH
50876: LD_INT 120
50878: PUSH
50879: LD_INT 30
50881: PUSH
50882: LD_INT 80
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50890: LD_VAR 0 6
50894: PPUSH
50895: CALL_OW 264
50899: PUSH
50900: LD_INT 22
50902: PUSH
50903: EMPTY
50904: LIST
50905: IN
50906: IFFALSE 50927
// points := [ 40 , 1 , 1 ] ;
50908: LD_ADDR_VAR 0 9
50912: PUSH
50913: LD_INT 40
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50927: LD_VAR 0 6
50931: PPUSH
50932: CALL_OW 264
50936: PUSH
50937: LD_INT 29
50939: PUSH
50940: EMPTY
50941: LIST
50942: IN
50943: IFFALSE 50964
// points := [ 70 , 200 , 400 ] ;
50945: LD_ADDR_VAR 0 9
50949: PUSH
50950: LD_INT 70
50952: PUSH
50953: LD_INT 200
50955: PUSH
50956: LD_INT 400
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50964: LD_VAR 0 6
50968: PPUSH
50969: CALL_OW 264
50973: PUSH
50974: LD_INT 14
50976: PUSH
50977: LD_INT 53
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: IN
50984: IFFALSE 51005
// points := [ 40 , 10 , 20 ] ;
50986: LD_ADDR_VAR 0 9
50990: PUSH
50991: LD_INT 40
50993: PUSH
50994: LD_INT 10
50996: PUSH
50997: LD_INT 20
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51005: LD_VAR 0 6
51009: PPUSH
51010: CALL_OW 264
51014: PUSH
51015: LD_INT 9
51017: PUSH
51018: EMPTY
51019: LIST
51020: IN
51021: IFFALSE 51042
// points := [ 5 , 70 , 20 ] ;
51023: LD_ADDR_VAR 0 9
51027: PUSH
51028: LD_INT 5
51030: PUSH
51031: LD_INT 70
51033: PUSH
51034: LD_INT 20
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51042: LD_VAR 0 6
51046: PPUSH
51047: CALL_OW 264
51051: PUSH
51052: LD_INT 10
51054: PUSH
51055: EMPTY
51056: LIST
51057: IN
51058: IFFALSE 51079
// points := [ 35 , 110 , 70 ] ;
51060: LD_ADDR_VAR 0 9
51064: PUSH
51065: LD_INT 35
51067: PUSH
51068: LD_INT 110
51070: PUSH
51071: LD_INT 70
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51079: LD_VAR 0 6
51083: PPUSH
51084: CALL_OW 265
51088: PUSH
51089: LD_INT 25
51091: EQUAL
51092: IFFALSE 51113
// points := [ 80 , 65 , 100 ] ;
51094: LD_ADDR_VAR 0 9
51098: PUSH
51099: LD_INT 80
51101: PUSH
51102: LD_INT 65
51104: PUSH
51105: LD_INT 100
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51113: LD_VAR 0 6
51117: PPUSH
51118: CALL_OW 263
51122: PUSH
51123: LD_INT 1
51125: EQUAL
51126: IFFALSE 51161
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51128: LD_ADDR_VAR 0 10
51132: PUSH
51133: LD_VAR 0 10
51137: PUSH
51138: LD_VAR 0 6
51142: PPUSH
51143: CALL_OW 311
51147: PPUSH
51148: LD_INT 3
51150: PPUSH
51151: CALL_OW 259
51155: PUSH
51156: LD_INT 4
51158: MUL
51159: MUL
51160: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51161: LD_VAR 0 6
51165: PPUSH
51166: CALL_OW 263
51170: PUSH
51171: LD_INT 2
51173: EQUAL
51174: IFFALSE 51225
// begin j := IsControledBy ( i ) ;
51176: LD_ADDR_VAR 0 7
51180: PUSH
51181: LD_VAR 0 6
51185: PPUSH
51186: CALL_OW 312
51190: ST_TO_ADDR
// if j then
51191: LD_VAR 0 7
51195: IFFALSE 51225
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51197: LD_ADDR_VAR 0 10
51201: PUSH
51202: LD_VAR 0 10
51206: PUSH
51207: LD_VAR 0 7
51211: PPUSH
51212: LD_INT 3
51214: PPUSH
51215: CALL_OW 259
51219: PUSH
51220: LD_INT 3
51222: MUL
51223: MUL
51224: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51225: LD_VAR 0 6
51229: PPUSH
51230: CALL_OW 264
51234: PUSH
51235: LD_INT 5
51237: PUSH
51238: LD_INT 6
51240: PUSH
51241: LD_INT 46
51243: PUSH
51244: LD_INT 44
51246: PUSH
51247: LD_INT 47
51249: PUSH
51250: LD_INT 45
51252: PUSH
51253: LD_INT 28
51255: PUSH
51256: LD_INT 7
51258: PUSH
51259: LD_INT 27
51261: PUSH
51262: LD_INT 29
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: IN
51277: PUSH
51278: LD_VAR 0 1
51282: PPUSH
51283: LD_INT 52
51285: PPUSH
51286: CALL_OW 321
51290: PUSH
51291: LD_INT 2
51293: EQUAL
51294: AND
51295: IFFALSE 51312
// bpoints := bpoints * 1.2 ;
51297: LD_ADDR_VAR 0 10
51301: PUSH
51302: LD_VAR 0 10
51306: PUSH
51307: LD_REAL  1.20000000000000E+0000
51310: MUL
51311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51312: LD_VAR 0 6
51316: PPUSH
51317: CALL_OW 264
51321: PUSH
51322: LD_INT 6
51324: PUSH
51325: LD_INT 46
51327: PUSH
51328: LD_INT 47
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: IN
51336: IFFALSE 51353
// bpoints := bpoints * 1.2 ;
51338: LD_ADDR_VAR 0 10
51342: PUSH
51343: LD_VAR 0 10
51347: PUSH
51348: LD_REAL  1.20000000000000E+0000
51351: MUL
51352: ST_TO_ADDR
// end ; unit_building :
51353: GO 51367
51355: LD_INT 3
51357: DOUBLE
51358: EQUAL
51359: IFTRUE 51363
51361: GO 51366
51363: POP
// ; end ;
51364: GO 51367
51366: POP
// for j = 1 to 3 do
51367: LD_ADDR_VAR 0 7
51371: PUSH
51372: DOUBLE
51373: LD_INT 1
51375: DEC
51376: ST_TO_ADDR
51377: LD_INT 3
51379: PUSH
51380: FOR_TO
51381: IFFALSE 51434
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51383: LD_ADDR_VAR 0 5
51387: PUSH
51388: LD_VAR 0 5
51392: PPUSH
51393: LD_VAR 0 7
51397: PPUSH
51398: LD_VAR 0 5
51402: PUSH
51403: LD_VAR 0 7
51407: ARRAY
51408: PUSH
51409: LD_VAR 0 9
51413: PUSH
51414: LD_VAR 0 7
51418: ARRAY
51419: PUSH
51420: LD_VAR 0 10
51424: MUL
51425: PLUS
51426: PPUSH
51427: CALL_OW 1
51431: ST_TO_ADDR
51432: GO 51380
51434: POP
51435: POP
// end ;
51436: GO 49915
51438: POP
51439: POP
// result := Replace ( result , 4 , tmp ) ;
51440: LD_ADDR_VAR 0 5
51444: PUSH
51445: LD_VAR 0 5
51449: PPUSH
51450: LD_INT 4
51452: PPUSH
51453: LD_VAR 0 8
51457: PPUSH
51458: CALL_OW 1
51462: ST_TO_ADDR
// end ;
51463: LD_VAR 0 5
51467: RET
// export function DangerAtRange ( unit , range ) ; begin
51468: LD_INT 0
51470: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51471: LD_ADDR_VAR 0 3
51475: PUSH
51476: LD_VAR 0 1
51480: PPUSH
51481: CALL_OW 255
51485: PPUSH
51486: LD_VAR 0 1
51490: PPUSH
51491: CALL_OW 250
51495: PPUSH
51496: LD_VAR 0 1
51500: PPUSH
51501: CALL_OW 251
51505: PPUSH
51506: LD_VAR 0 2
51510: PPUSH
51511: CALL 49767 0 4
51515: ST_TO_ADDR
// end ;
51516: LD_VAR 0 3
51520: RET
// export function DangerInArea ( side , area ) ; begin
51521: LD_INT 0
51523: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51524: LD_ADDR_VAR 0 3
51528: PUSH
51529: LD_VAR 0 2
51533: PPUSH
51534: LD_INT 81
51536: PUSH
51537: LD_VAR 0 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PPUSH
51546: CALL_OW 70
51550: ST_TO_ADDR
// end ;
51551: LD_VAR 0 3
51555: RET
// export function IsExtension ( b ) ; begin
51556: LD_INT 0
51558: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51559: LD_ADDR_VAR 0 2
51563: PUSH
51564: LD_VAR 0 1
51568: PUSH
51569: LD_INT 23
51571: PUSH
51572: LD_INT 20
51574: PUSH
51575: LD_INT 22
51577: PUSH
51578: LD_INT 17
51580: PUSH
51581: LD_INT 24
51583: PUSH
51584: LD_INT 21
51586: PUSH
51587: LD_INT 19
51589: PUSH
51590: LD_INT 16
51592: PUSH
51593: LD_INT 25
51595: PUSH
51596: LD_INT 18
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: IN
51611: ST_TO_ADDR
// end ;
51612: LD_VAR 0 2
51616: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51617: LD_INT 0
51619: PPUSH
51620: PPUSH
51621: PPUSH
// result := [ ] ;
51622: LD_ADDR_VAR 0 4
51626: PUSH
51627: EMPTY
51628: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51629: LD_ADDR_VAR 0 5
51633: PUSH
51634: LD_VAR 0 2
51638: PPUSH
51639: LD_INT 21
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PPUSH
51649: CALL_OW 70
51653: ST_TO_ADDR
// if not tmp then
51654: LD_VAR 0 5
51658: NOT
51659: IFFALSE 51663
// exit ;
51661: GO 51727
// if checkLink then
51663: LD_VAR 0 3
51667: IFFALSE 51717
// begin for i in tmp do
51669: LD_ADDR_VAR 0 6
51673: PUSH
51674: LD_VAR 0 5
51678: PUSH
51679: FOR_IN
51680: IFFALSE 51715
// if GetBase ( i ) <> base then
51682: LD_VAR 0 6
51686: PPUSH
51687: CALL_OW 274
51691: PUSH
51692: LD_VAR 0 1
51696: NONEQUAL
51697: IFFALSE 51713
// ComLinkToBase ( base , i ) ;
51699: LD_VAR 0 1
51703: PPUSH
51704: LD_VAR 0 6
51708: PPUSH
51709: CALL_OW 169
51713: GO 51679
51715: POP
51716: POP
// end ; result := tmp ;
51717: LD_ADDR_VAR 0 4
51721: PUSH
51722: LD_VAR 0 5
51726: ST_TO_ADDR
// end ;
51727: LD_VAR 0 4
51731: RET
// export function ComComplete ( units , b ) ; var i ; begin
51732: LD_INT 0
51734: PPUSH
51735: PPUSH
// if not units then
51736: LD_VAR 0 1
51740: NOT
51741: IFFALSE 51745
// exit ;
51743: GO 51835
// for i in units do
51745: LD_ADDR_VAR 0 4
51749: PUSH
51750: LD_VAR 0 1
51754: PUSH
51755: FOR_IN
51756: IFFALSE 51833
// if BuildingStatus ( b ) = bs_build then
51758: LD_VAR 0 2
51762: PPUSH
51763: CALL_OW 461
51767: PUSH
51768: LD_INT 1
51770: EQUAL
51771: IFFALSE 51831
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51773: LD_VAR 0 4
51777: PPUSH
51778: LD_STRING h
51780: PUSH
51781: LD_VAR 0 2
51785: PPUSH
51786: CALL_OW 250
51790: PUSH
51791: LD_VAR 0 2
51795: PPUSH
51796: CALL_OW 251
51800: PUSH
51801: LD_VAR 0 2
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: PUSH
51824: EMPTY
51825: LIST
51826: PPUSH
51827: CALL_OW 446
51831: GO 51755
51833: POP
51834: POP
// end ;
51835: LD_VAR 0 3
51839: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51840: LD_INT 0
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51848: LD_VAR 0 1
51852: NOT
51853: PUSH
51854: LD_VAR 0 1
51858: PPUSH
51859: CALL_OW 263
51863: PUSH
51864: LD_INT 2
51866: NONEQUAL
51867: OR
51868: IFFALSE 51872
// exit ;
51870: GO 52188
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51872: LD_ADDR_VAR 0 6
51876: PUSH
51877: LD_INT 22
51879: PUSH
51880: LD_VAR 0 1
51884: PPUSH
51885: CALL_OW 255
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 30
51899: PUSH
51900: LD_INT 36
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 34
51909: PUSH
51910: LD_INT 31
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PPUSH
51926: CALL_OW 69
51930: ST_TO_ADDR
// if not tmp then
51931: LD_VAR 0 6
51935: NOT
51936: IFFALSE 51940
// exit ;
51938: GO 52188
// result := [ ] ;
51940: LD_ADDR_VAR 0 2
51944: PUSH
51945: EMPTY
51946: ST_TO_ADDR
// for i in tmp do
51947: LD_ADDR_VAR 0 3
51951: PUSH
51952: LD_VAR 0 6
51956: PUSH
51957: FOR_IN
51958: IFFALSE 52029
// begin t := UnitsInside ( i ) ;
51960: LD_ADDR_VAR 0 4
51964: PUSH
51965: LD_VAR 0 3
51969: PPUSH
51970: CALL_OW 313
51974: ST_TO_ADDR
// if t then
51975: LD_VAR 0 4
51979: IFFALSE 52027
// for j in t do
51981: LD_ADDR_VAR 0 7
51985: PUSH
51986: LD_VAR 0 4
51990: PUSH
51991: FOR_IN
51992: IFFALSE 52025
// result := Replace ( result , result + 1 , j ) ;
51994: LD_ADDR_VAR 0 2
51998: PUSH
51999: LD_VAR 0 2
52003: PPUSH
52004: LD_VAR 0 2
52008: PUSH
52009: LD_INT 1
52011: PLUS
52012: PPUSH
52013: LD_VAR 0 7
52017: PPUSH
52018: CALL_OW 1
52022: ST_TO_ADDR
52023: GO 51991
52025: POP
52026: POP
// end ;
52027: GO 51957
52029: POP
52030: POP
// if not result then
52031: LD_VAR 0 2
52035: NOT
52036: IFFALSE 52040
// exit ;
52038: GO 52188
// mech := result [ 1 ] ;
52040: LD_ADDR_VAR 0 5
52044: PUSH
52045: LD_VAR 0 2
52049: PUSH
52050: LD_INT 1
52052: ARRAY
52053: ST_TO_ADDR
// if result > 1 then
52054: LD_VAR 0 2
52058: PUSH
52059: LD_INT 1
52061: GREATER
52062: IFFALSE 52174
// begin for i = 2 to result do
52064: LD_ADDR_VAR 0 3
52068: PUSH
52069: DOUBLE
52070: LD_INT 2
52072: DEC
52073: ST_TO_ADDR
52074: LD_VAR 0 2
52078: PUSH
52079: FOR_TO
52080: IFFALSE 52172
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52082: LD_ADDR_VAR 0 4
52086: PUSH
52087: LD_VAR 0 2
52091: PUSH
52092: LD_VAR 0 3
52096: ARRAY
52097: PPUSH
52098: LD_INT 3
52100: PPUSH
52101: CALL_OW 259
52105: PUSH
52106: LD_VAR 0 2
52110: PUSH
52111: LD_VAR 0 3
52115: ARRAY
52116: PPUSH
52117: CALL_OW 432
52121: MINUS
52122: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52123: LD_VAR 0 4
52127: PUSH
52128: LD_VAR 0 5
52132: PPUSH
52133: LD_INT 3
52135: PPUSH
52136: CALL_OW 259
52140: PUSH
52141: LD_VAR 0 5
52145: PPUSH
52146: CALL_OW 432
52150: MINUS
52151: GREATEREQUAL
52152: IFFALSE 52170
// mech := result [ i ] ;
52154: LD_ADDR_VAR 0 5
52158: PUSH
52159: LD_VAR 0 2
52163: PUSH
52164: LD_VAR 0 3
52168: ARRAY
52169: ST_TO_ADDR
// end ;
52170: GO 52079
52172: POP
52173: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52174: LD_VAR 0 1
52178: PPUSH
52179: LD_VAR 0 5
52183: PPUSH
52184: CALL_OW 135
// end ;
52188: LD_VAR 0 2
52192: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52193: LD_INT 0
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
// result := [ ] ;
52208: LD_ADDR_VAR 0 7
52212: PUSH
52213: EMPTY
52214: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 266
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: IN
52235: NOT
52236: IFFALSE 52240
// exit ;
52238: GO 53874
// if name then
52240: LD_VAR 0 3
52244: IFFALSE 52260
// SetBName ( base_dep , name ) ;
52246: LD_VAR 0 1
52250: PPUSH
52251: LD_VAR 0 3
52255: PPUSH
52256: CALL_OW 500
// base := GetBase ( base_dep ) ;
52260: LD_ADDR_VAR 0 15
52264: PUSH
52265: LD_VAR 0 1
52269: PPUSH
52270: CALL_OW 274
52274: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52275: LD_ADDR_VAR 0 16
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 255
52289: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52290: LD_ADDR_VAR 0 17
52294: PUSH
52295: LD_VAR 0 1
52299: PPUSH
52300: CALL_OW 248
52304: ST_TO_ADDR
// if sources then
52305: LD_VAR 0 5
52309: IFFALSE 52356
// for i = 1 to 3 do
52311: LD_ADDR_VAR 0 8
52315: PUSH
52316: DOUBLE
52317: LD_INT 1
52319: DEC
52320: ST_TO_ADDR
52321: LD_INT 3
52323: PUSH
52324: FOR_TO
52325: IFFALSE 52354
// AddResourceType ( base , i , sources [ i ] ) ;
52327: LD_VAR 0 15
52331: PPUSH
52332: LD_VAR 0 8
52336: PPUSH
52337: LD_VAR 0 5
52341: PUSH
52342: LD_VAR 0 8
52346: ARRAY
52347: PPUSH
52348: CALL_OW 276
52352: GO 52324
52354: POP
52355: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52356: LD_ADDR_VAR 0 18
52360: PUSH
52361: LD_VAR 0 15
52365: PPUSH
52366: LD_VAR 0 2
52370: PPUSH
52371: LD_INT 1
52373: PPUSH
52374: CALL 51617 0 3
52378: ST_TO_ADDR
// InitHc ;
52379: CALL_OW 19
// InitUc ;
52383: CALL_OW 18
// uc_side := side ;
52387: LD_ADDR_OWVAR 20
52391: PUSH
52392: LD_VAR 0 16
52396: ST_TO_ADDR
// uc_nation := nation ;
52397: LD_ADDR_OWVAR 21
52401: PUSH
52402: LD_VAR 0 17
52406: ST_TO_ADDR
// if buildings then
52407: LD_VAR 0 18
52411: IFFALSE 53733
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52413: LD_ADDR_VAR 0 19
52417: PUSH
52418: LD_VAR 0 18
52422: PPUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 30
52428: PUSH
52429: LD_INT 29
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 30
52438: PUSH
52439: LD_INT 30
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: PPUSH
52451: CALL_OW 72
52455: ST_TO_ADDR
// if tmp then
52456: LD_VAR 0 19
52460: IFFALSE 52508
// for i in tmp do
52462: LD_ADDR_VAR 0 8
52466: PUSH
52467: LD_VAR 0 19
52471: PUSH
52472: FOR_IN
52473: IFFALSE 52506
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52475: LD_VAR 0 8
52479: PPUSH
52480: CALL_OW 250
52484: PPUSH
52485: LD_VAR 0 8
52489: PPUSH
52490: CALL_OW 251
52494: PPUSH
52495: LD_VAR 0 16
52499: PPUSH
52500: CALL_OW 441
52504: GO 52472
52506: POP
52507: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52508: LD_VAR 0 18
52512: PPUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 30
52518: PUSH
52519: LD_INT 32
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 30
52528: PUSH
52529: LD_INT 33
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: PPUSH
52541: CALL_OW 72
52545: IFFALSE 52633
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52547: LD_ADDR_VAR 0 8
52551: PUSH
52552: LD_VAR 0 18
52556: PPUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 30
52562: PUSH
52563: LD_INT 32
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 30
52572: PUSH
52573: LD_INT 33
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: PPUSH
52585: CALL_OW 72
52589: PUSH
52590: FOR_IN
52591: IFFALSE 52631
// begin if not GetBWeapon ( i ) then
52593: LD_VAR 0 8
52597: PPUSH
52598: CALL_OW 269
52602: NOT
52603: IFFALSE 52629
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52605: LD_VAR 0 8
52609: PPUSH
52610: LD_VAR 0 8
52614: PPUSH
52615: LD_VAR 0 2
52619: PPUSH
52620: CALL 53879 0 2
52624: PPUSH
52625: CALL_OW 431
// end ;
52629: GO 52590
52631: POP
52632: POP
// end ; for i = 1 to personel do
52633: LD_ADDR_VAR 0 8
52637: PUSH
52638: DOUBLE
52639: LD_INT 1
52641: DEC
52642: ST_TO_ADDR
52643: LD_VAR 0 6
52647: PUSH
52648: FOR_TO
52649: IFFALSE 53713
// begin if i > 4 then
52651: LD_VAR 0 8
52655: PUSH
52656: LD_INT 4
52658: GREATER
52659: IFFALSE 52663
// break ;
52661: GO 53713
// case i of 1 :
52663: LD_VAR 0 8
52667: PUSH
52668: LD_INT 1
52670: DOUBLE
52671: EQUAL
52672: IFTRUE 52676
52674: GO 52756
52676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52677: LD_ADDR_VAR 0 12
52681: PUSH
52682: LD_VAR 0 18
52686: PPUSH
52687: LD_INT 22
52689: PUSH
52690: LD_VAR 0 16
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 58
52701: PUSH
52702: EMPTY
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 30
52710: PUSH
52711: LD_INT 32
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 30
52720: PUSH
52721: LD_INT 4
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 30
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: PPUSH
52749: CALL_OW 72
52753: ST_TO_ADDR
52754: GO 52978
52756: LD_INT 2
52758: DOUBLE
52759: EQUAL
52760: IFTRUE 52764
52762: GO 52826
52764: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52765: LD_ADDR_VAR 0 12
52769: PUSH
52770: LD_VAR 0 18
52774: PPUSH
52775: LD_INT 22
52777: PUSH
52778: LD_VAR 0 16
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: LD_INT 30
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 30
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PPUSH
52819: CALL_OW 72
52823: ST_TO_ADDR
52824: GO 52978
52826: LD_INT 3
52828: DOUBLE
52829: EQUAL
52830: IFTRUE 52834
52832: GO 52896
52834: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52835: LD_ADDR_VAR 0 12
52839: PUSH
52840: LD_VAR 0 18
52844: PPUSH
52845: LD_INT 22
52847: PUSH
52848: LD_VAR 0 16
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 30
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 30
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PPUSH
52889: CALL_OW 72
52893: ST_TO_ADDR
52894: GO 52978
52896: LD_INT 4
52898: DOUBLE
52899: EQUAL
52900: IFTRUE 52904
52902: GO 52977
52904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52905: LD_ADDR_VAR 0 12
52909: PUSH
52910: LD_VAR 0 18
52914: PPUSH
52915: LD_INT 22
52917: PUSH
52918: LD_VAR 0 16
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 30
52932: PUSH
52933: LD_INT 6
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 30
52942: PUSH
52943: LD_INT 7
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 30
52952: PUSH
52953: LD_INT 8
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PPUSH
52970: CALL_OW 72
52974: ST_TO_ADDR
52975: GO 52978
52977: POP
// if i = 1 then
52978: LD_VAR 0 8
52982: PUSH
52983: LD_INT 1
52985: EQUAL
52986: IFFALSE 53097
// begin tmp := [ ] ;
52988: LD_ADDR_VAR 0 19
52992: PUSH
52993: EMPTY
52994: ST_TO_ADDR
// for j in f do
52995: LD_ADDR_VAR 0 9
52999: PUSH
53000: LD_VAR 0 12
53004: PUSH
53005: FOR_IN
53006: IFFALSE 53079
// if GetBType ( j ) = b_bunker then
53008: LD_VAR 0 9
53012: PPUSH
53013: CALL_OW 266
53017: PUSH
53018: LD_INT 32
53020: EQUAL
53021: IFFALSE 53048
// tmp := Insert ( tmp , 1 , j ) else
53023: LD_ADDR_VAR 0 19
53027: PUSH
53028: LD_VAR 0 19
53032: PPUSH
53033: LD_INT 1
53035: PPUSH
53036: LD_VAR 0 9
53040: PPUSH
53041: CALL_OW 2
53045: ST_TO_ADDR
53046: GO 53077
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53048: LD_ADDR_VAR 0 19
53052: PUSH
53053: LD_VAR 0 19
53057: PPUSH
53058: LD_VAR 0 19
53062: PUSH
53063: LD_INT 1
53065: PLUS
53066: PPUSH
53067: LD_VAR 0 9
53071: PPUSH
53072: CALL_OW 2
53076: ST_TO_ADDR
53077: GO 53005
53079: POP
53080: POP
// if tmp then
53081: LD_VAR 0 19
53085: IFFALSE 53097
// f := tmp ;
53087: LD_ADDR_VAR 0 12
53091: PUSH
53092: LD_VAR 0 19
53096: ST_TO_ADDR
// end ; x := personel [ i ] ;
53097: LD_ADDR_VAR 0 13
53101: PUSH
53102: LD_VAR 0 6
53106: PUSH
53107: LD_VAR 0 8
53111: ARRAY
53112: ST_TO_ADDR
// if x = - 1 then
53113: LD_VAR 0 13
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: EQUAL
53122: IFFALSE 53331
// begin for j in f do
53124: LD_ADDR_VAR 0 9
53128: PUSH
53129: LD_VAR 0 12
53133: PUSH
53134: FOR_IN
53135: IFFALSE 53327
// repeat InitHc ;
53137: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53141: LD_VAR 0 9
53145: PPUSH
53146: CALL_OW 266
53150: PUSH
53151: LD_INT 5
53153: EQUAL
53154: IFFALSE 53224
// begin if UnitsInside ( j ) < 3 then
53156: LD_VAR 0 9
53160: PPUSH
53161: CALL_OW 313
53165: PUSH
53166: LD_INT 3
53168: LESS
53169: IFFALSE 53205
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53171: LD_INT 0
53173: PPUSH
53174: LD_INT 5
53176: PUSH
53177: LD_INT 8
53179: PUSH
53180: LD_INT 9
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: PUSH
53188: LD_VAR 0 17
53192: ARRAY
53193: PPUSH
53194: LD_VAR 0 4
53198: PPUSH
53199: CALL_OW 380
53203: GO 53222
// PrepareHuman ( false , i , skill ) ;
53205: LD_INT 0
53207: PPUSH
53208: LD_VAR 0 8
53212: PPUSH
53213: LD_VAR 0 4
53217: PPUSH
53218: CALL_OW 380
// end else
53222: GO 53241
// PrepareHuman ( false , i , skill ) ;
53224: LD_INT 0
53226: PPUSH
53227: LD_VAR 0 8
53231: PPUSH
53232: LD_VAR 0 4
53236: PPUSH
53237: CALL_OW 380
// un := CreateHuman ;
53241: LD_ADDR_VAR 0 14
53245: PUSH
53246: CALL_OW 44
53250: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53251: LD_ADDR_VAR 0 7
53255: PUSH
53256: LD_VAR 0 7
53260: PPUSH
53261: LD_INT 1
53263: PPUSH
53264: LD_VAR 0 14
53268: PPUSH
53269: CALL_OW 2
53273: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53274: LD_VAR 0 14
53278: PPUSH
53279: LD_VAR 0 9
53283: PPUSH
53284: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53288: LD_VAR 0 9
53292: PPUSH
53293: CALL_OW 313
53297: PUSH
53298: LD_INT 6
53300: EQUAL
53301: PUSH
53302: LD_VAR 0 9
53306: PPUSH
53307: CALL_OW 266
53311: PUSH
53312: LD_INT 32
53314: PUSH
53315: LD_INT 31
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: IN
53322: OR
53323: IFFALSE 53137
53325: GO 53134
53327: POP
53328: POP
// end else
53329: GO 53711
// for j = 1 to x do
53331: LD_ADDR_VAR 0 9
53335: PUSH
53336: DOUBLE
53337: LD_INT 1
53339: DEC
53340: ST_TO_ADDR
53341: LD_VAR 0 13
53345: PUSH
53346: FOR_TO
53347: IFFALSE 53709
// begin InitHc ;
53349: CALL_OW 19
// if not f then
53353: LD_VAR 0 12
53357: NOT
53358: IFFALSE 53447
// begin PrepareHuman ( false , i , skill ) ;
53360: LD_INT 0
53362: PPUSH
53363: LD_VAR 0 8
53367: PPUSH
53368: LD_VAR 0 4
53372: PPUSH
53373: CALL_OW 380
// un := CreateHuman ;
53377: LD_ADDR_VAR 0 14
53381: PUSH
53382: CALL_OW 44
53386: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53387: LD_ADDR_VAR 0 7
53391: PUSH
53392: LD_VAR 0 7
53396: PPUSH
53397: LD_INT 1
53399: PPUSH
53400: LD_VAR 0 14
53404: PPUSH
53405: CALL_OW 2
53409: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53410: LD_VAR 0 14
53414: PPUSH
53415: LD_VAR 0 1
53419: PPUSH
53420: CALL_OW 250
53424: PPUSH
53425: LD_VAR 0 1
53429: PPUSH
53430: CALL_OW 251
53434: PPUSH
53435: LD_INT 10
53437: PPUSH
53438: LD_INT 0
53440: PPUSH
53441: CALL_OW 50
// continue ;
53445: GO 53346
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53447: LD_VAR 0 12
53451: PUSH
53452: LD_INT 1
53454: ARRAY
53455: PPUSH
53456: CALL_OW 313
53460: PUSH
53461: LD_VAR 0 12
53465: PUSH
53466: LD_INT 1
53468: ARRAY
53469: PPUSH
53470: CALL_OW 266
53474: PUSH
53475: LD_INT 32
53477: PUSH
53478: LD_INT 31
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: IN
53485: AND
53486: PUSH
53487: LD_VAR 0 12
53491: PUSH
53492: LD_INT 1
53494: ARRAY
53495: PPUSH
53496: CALL_OW 313
53500: PUSH
53501: LD_INT 6
53503: EQUAL
53504: OR
53505: IFFALSE 53525
// f := Delete ( f , 1 ) ;
53507: LD_ADDR_VAR 0 12
53511: PUSH
53512: LD_VAR 0 12
53516: PPUSH
53517: LD_INT 1
53519: PPUSH
53520: CALL_OW 3
53524: ST_TO_ADDR
// if not f then
53525: LD_VAR 0 12
53529: NOT
53530: IFFALSE 53548
// begin x := x + 2 ;
53532: LD_ADDR_VAR 0 13
53536: PUSH
53537: LD_VAR 0 13
53541: PUSH
53542: LD_INT 2
53544: PLUS
53545: ST_TO_ADDR
// continue ;
53546: GO 53346
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53548: LD_VAR 0 12
53552: PUSH
53553: LD_INT 1
53555: ARRAY
53556: PPUSH
53557: CALL_OW 266
53561: PUSH
53562: LD_INT 5
53564: EQUAL
53565: IFFALSE 53639
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53567: LD_VAR 0 12
53571: PUSH
53572: LD_INT 1
53574: ARRAY
53575: PPUSH
53576: CALL_OW 313
53580: PUSH
53581: LD_INT 3
53583: LESS
53584: IFFALSE 53620
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53586: LD_INT 0
53588: PPUSH
53589: LD_INT 5
53591: PUSH
53592: LD_INT 8
53594: PUSH
53595: LD_INT 9
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: PUSH
53603: LD_VAR 0 17
53607: ARRAY
53608: PPUSH
53609: LD_VAR 0 4
53613: PPUSH
53614: CALL_OW 380
53618: GO 53637
// PrepareHuman ( false , i , skill ) ;
53620: LD_INT 0
53622: PPUSH
53623: LD_VAR 0 8
53627: PPUSH
53628: LD_VAR 0 4
53632: PPUSH
53633: CALL_OW 380
// end else
53637: GO 53656
// PrepareHuman ( false , i , skill ) ;
53639: LD_INT 0
53641: PPUSH
53642: LD_VAR 0 8
53646: PPUSH
53647: LD_VAR 0 4
53651: PPUSH
53652: CALL_OW 380
// un := CreateHuman ;
53656: LD_ADDR_VAR 0 14
53660: PUSH
53661: CALL_OW 44
53665: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53666: LD_ADDR_VAR 0 7
53670: PUSH
53671: LD_VAR 0 7
53675: PPUSH
53676: LD_INT 1
53678: PPUSH
53679: LD_VAR 0 14
53683: PPUSH
53684: CALL_OW 2
53688: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53689: LD_VAR 0 14
53693: PPUSH
53694: LD_VAR 0 12
53698: PUSH
53699: LD_INT 1
53701: ARRAY
53702: PPUSH
53703: CALL_OW 52
// end ;
53707: GO 53346
53709: POP
53710: POP
// end ;
53711: GO 52648
53713: POP
53714: POP
// result := result ^ buildings ;
53715: LD_ADDR_VAR 0 7
53719: PUSH
53720: LD_VAR 0 7
53724: PUSH
53725: LD_VAR 0 18
53729: ADD
53730: ST_TO_ADDR
// end else
53731: GO 53874
// begin for i = 1 to personel do
53733: LD_ADDR_VAR 0 8
53737: PUSH
53738: DOUBLE
53739: LD_INT 1
53741: DEC
53742: ST_TO_ADDR
53743: LD_VAR 0 6
53747: PUSH
53748: FOR_TO
53749: IFFALSE 53872
// begin if i > 4 then
53751: LD_VAR 0 8
53755: PUSH
53756: LD_INT 4
53758: GREATER
53759: IFFALSE 53763
// break ;
53761: GO 53872
// x := personel [ i ] ;
53763: LD_ADDR_VAR 0 13
53767: PUSH
53768: LD_VAR 0 6
53772: PUSH
53773: LD_VAR 0 8
53777: ARRAY
53778: ST_TO_ADDR
// if x = - 1 then
53779: LD_VAR 0 13
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: EQUAL
53788: IFFALSE 53792
// continue ;
53790: GO 53748
// PrepareHuman ( false , i , skill ) ;
53792: LD_INT 0
53794: PPUSH
53795: LD_VAR 0 8
53799: PPUSH
53800: LD_VAR 0 4
53804: PPUSH
53805: CALL_OW 380
// un := CreateHuman ;
53809: LD_ADDR_VAR 0 14
53813: PUSH
53814: CALL_OW 44
53818: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53819: LD_VAR 0 14
53823: PPUSH
53824: LD_VAR 0 1
53828: PPUSH
53829: CALL_OW 250
53833: PPUSH
53834: LD_VAR 0 1
53838: PPUSH
53839: CALL_OW 251
53843: PPUSH
53844: LD_INT 10
53846: PPUSH
53847: LD_INT 0
53849: PPUSH
53850: CALL_OW 50
// result := result ^ un ;
53854: LD_ADDR_VAR 0 7
53858: PUSH
53859: LD_VAR 0 7
53863: PUSH
53864: LD_VAR 0 14
53868: ADD
53869: ST_TO_ADDR
// end ;
53870: GO 53748
53872: POP
53873: POP
// end ; end ;
53874: LD_VAR 0 7
53878: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53879: LD_INT 0
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
// result := false ;
53897: LD_ADDR_VAR 0 3
53901: PUSH
53902: LD_INT 0
53904: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53905: LD_VAR 0 1
53909: NOT
53910: PUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: CALL_OW 266
53920: PUSH
53921: LD_INT 32
53923: PUSH
53924: LD_INT 33
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: IN
53931: NOT
53932: OR
53933: IFFALSE 53937
// exit ;
53935: GO 55046
// nat := GetNation ( tower ) ;
53937: LD_ADDR_VAR 0 12
53941: PUSH
53942: LD_VAR 0 1
53946: PPUSH
53947: CALL_OW 248
53951: ST_TO_ADDR
// side := GetSide ( tower ) ;
53952: LD_ADDR_VAR 0 16
53956: PUSH
53957: LD_VAR 0 1
53961: PPUSH
53962: CALL_OW 255
53966: ST_TO_ADDR
// x := GetX ( tower ) ;
53967: LD_ADDR_VAR 0 10
53971: PUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 250
53981: ST_TO_ADDR
// y := GetY ( tower ) ;
53982: LD_ADDR_VAR 0 11
53986: PUSH
53987: LD_VAR 0 1
53991: PPUSH
53992: CALL_OW 251
53996: ST_TO_ADDR
// if not x or not y then
53997: LD_VAR 0 10
54001: NOT
54002: PUSH
54003: LD_VAR 0 11
54007: NOT
54008: OR
54009: IFFALSE 54013
// exit ;
54011: GO 55046
// weapon := 0 ;
54013: LD_ADDR_VAR 0 18
54017: PUSH
54018: LD_INT 0
54020: ST_TO_ADDR
// fac_list := [ ] ;
54021: LD_ADDR_VAR 0 17
54025: PUSH
54026: EMPTY
54027: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54028: LD_ADDR_VAR 0 6
54032: PUSH
54033: LD_VAR 0 1
54037: PPUSH
54038: CALL_OW 274
54042: PPUSH
54043: LD_VAR 0 2
54047: PPUSH
54048: LD_INT 0
54050: PPUSH
54051: CALL 51617 0 3
54055: PPUSH
54056: LD_INT 30
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PPUSH
54066: CALL_OW 72
54070: ST_TO_ADDR
// if not factories then
54071: LD_VAR 0 6
54075: NOT
54076: IFFALSE 54080
// exit ;
54078: GO 55046
// for i in factories do
54080: LD_ADDR_VAR 0 8
54084: PUSH
54085: LD_VAR 0 6
54089: PUSH
54090: FOR_IN
54091: IFFALSE 54116
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54093: LD_ADDR_VAR 0 17
54097: PUSH
54098: LD_VAR 0 17
54102: PUSH
54103: LD_VAR 0 8
54107: PPUSH
54108: CALL_OW 478
54112: UNION
54113: ST_TO_ADDR
54114: GO 54090
54116: POP
54117: POP
// if not fac_list then
54118: LD_VAR 0 17
54122: NOT
54123: IFFALSE 54127
// exit ;
54125: GO 55046
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54127: LD_ADDR_VAR 0 5
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: LD_INT 5
54137: PUSH
54138: LD_INT 9
54140: PUSH
54141: LD_INT 10
54143: PUSH
54144: LD_INT 6
54146: PUSH
54147: LD_INT 7
54149: PUSH
54150: LD_INT 11
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 27
54164: PUSH
54165: LD_INT 28
54167: PUSH
54168: LD_INT 26
54170: PUSH
54171: LD_INT 30
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 43
54182: PUSH
54183: LD_INT 44
54185: PUSH
54186: LD_INT 46
54188: PUSH
54189: LD_INT 45
54191: PUSH
54192: LD_INT 47
54194: PUSH
54195: LD_INT 49
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: PUSH
54211: LD_VAR 0 12
54215: ARRAY
54216: ST_TO_ADDR
// list := list isect fac_list ;
54217: LD_ADDR_VAR 0 5
54221: PUSH
54222: LD_VAR 0 5
54226: PUSH
54227: LD_VAR 0 17
54231: ISECT
54232: ST_TO_ADDR
// if not list then
54233: LD_VAR 0 5
54237: NOT
54238: IFFALSE 54242
// exit ;
54240: GO 55046
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54242: LD_VAR 0 12
54246: PUSH
54247: LD_INT 3
54249: EQUAL
54250: PUSH
54251: LD_INT 49
54253: PUSH
54254: LD_VAR 0 5
54258: IN
54259: AND
54260: PUSH
54261: LD_INT 31
54263: PPUSH
54264: LD_VAR 0 16
54268: PPUSH
54269: CALL_OW 321
54273: PUSH
54274: LD_INT 2
54276: EQUAL
54277: AND
54278: IFFALSE 54338
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54280: LD_INT 22
54282: PUSH
54283: LD_VAR 0 16
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 35
54294: PUSH
54295: LD_INT 49
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 91
54304: PUSH
54305: LD_VAR 0 1
54309: PUSH
54310: LD_INT 10
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: PPUSH
54323: CALL_OW 69
54327: NOT
54328: IFFALSE 54338
// weapon := ru_time_lapser ;
54330: LD_ADDR_VAR 0 18
54334: PUSH
54335: LD_INT 49
54337: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54338: LD_VAR 0 12
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: IN
54353: PUSH
54354: LD_INT 11
54356: PUSH
54357: LD_VAR 0 5
54361: IN
54362: PUSH
54363: LD_INT 30
54365: PUSH
54366: LD_VAR 0 5
54370: IN
54371: OR
54372: AND
54373: PUSH
54374: LD_INT 6
54376: PPUSH
54377: LD_VAR 0 16
54381: PPUSH
54382: CALL_OW 321
54386: PUSH
54387: LD_INT 2
54389: EQUAL
54390: AND
54391: IFFALSE 54556
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54393: LD_INT 22
54395: PUSH
54396: LD_VAR 0 16
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 35
54410: PUSH
54411: LD_INT 11
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 35
54420: PUSH
54421: LD_INT 30
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 91
54435: PUSH
54436: LD_VAR 0 1
54440: PUSH
54441: LD_INT 18
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: LIST
54453: PPUSH
54454: CALL_OW 69
54458: NOT
54459: PUSH
54460: LD_INT 22
54462: PUSH
54463: LD_VAR 0 16
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 30
54477: PUSH
54478: LD_INT 32
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 30
54487: PUSH
54488: LD_INT 33
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 91
54502: PUSH
54503: LD_VAR 0 1
54507: PUSH
54508: LD_INT 12
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: PPUSH
54524: CALL_OW 69
54528: PUSH
54529: LD_INT 2
54531: GREATER
54532: AND
54533: IFFALSE 54556
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54535: LD_ADDR_VAR 0 18
54539: PUSH
54540: LD_INT 11
54542: PUSH
54543: LD_INT 30
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_VAR 0 12
54554: ARRAY
54555: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54556: LD_VAR 0 18
54560: NOT
54561: PUSH
54562: LD_INT 40
54564: PPUSH
54565: LD_VAR 0 16
54569: PPUSH
54570: CALL_OW 321
54574: PUSH
54575: LD_INT 2
54577: EQUAL
54578: AND
54579: PUSH
54580: LD_INT 7
54582: PUSH
54583: LD_VAR 0 5
54587: IN
54588: PUSH
54589: LD_INT 28
54591: PUSH
54592: LD_VAR 0 5
54596: IN
54597: OR
54598: PUSH
54599: LD_INT 45
54601: PUSH
54602: LD_VAR 0 5
54606: IN
54607: OR
54608: AND
54609: IFFALSE 54863
// begin hex := GetHexInfo ( x , y ) ;
54611: LD_ADDR_VAR 0 4
54615: PUSH
54616: LD_VAR 0 10
54620: PPUSH
54621: LD_VAR 0 11
54625: PPUSH
54626: CALL_OW 546
54630: ST_TO_ADDR
// if hex [ 1 ] then
54631: LD_VAR 0 4
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: IFFALSE 54643
// exit ;
54641: GO 55046
// height := hex [ 2 ] ;
54643: LD_ADDR_VAR 0 15
54647: PUSH
54648: LD_VAR 0 4
54652: PUSH
54653: LD_INT 2
54655: ARRAY
54656: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54657: LD_ADDR_VAR 0 14
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: LD_INT 5
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: ST_TO_ADDR
// for i in tmp do
54680: LD_ADDR_VAR 0 8
54684: PUSH
54685: LD_VAR 0 14
54689: PUSH
54690: FOR_IN
54691: IFFALSE 54861
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54693: LD_ADDR_VAR 0 9
54697: PUSH
54698: LD_VAR 0 10
54702: PPUSH
54703: LD_VAR 0 8
54707: PPUSH
54708: LD_INT 5
54710: PPUSH
54711: CALL_OW 272
54715: PUSH
54716: LD_VAR 0 11
54720: PPUSH
54721: LD_VAR 0 8
54725: PPUSH
54726: LD_INT 5
54728: PPUSH
54729: CALL_OW 273
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54738: LD_VAR 0 9
54742: PUSH
54743: LD_INT 1
54745: ARRAY
54746: PPUSH
54747: LD_VAR 0 9
54751: PUSH
54752: LD_INT 2
54754: ARRAY
54755: PPUSH
54756: CALL_OW 488
54760: IFFALSE 54859
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54762: LD_ADDR_VAR 0 4
54766: PUSH
54767: LD_VAR 0 9
54771: PUSH
54772: LD_INT 1
54774: ARRAY
54775: PPUSH
54776: LD_VAR 0 9
54780: PUSH
54781: LD_INT 2
54783: ARRAY
54784: PPUSH
54785: CALL_OW 546
54789: ST_TO_ADDR
// if hex [ 1 ] then
54790: LD_VAR 0 4
54794: PUSH
54795: LD_INT 1
54797: ARRAY
54798: IFFALSE 54802
// continue ;
54800: GO 54690
// h := hex [ 2 ] ;
54802: LD_ADDR_VAR 0 13
54806: PUSH
54807: LD_VAR 0 4
54811: PUSH
54812: LD_INT 2
54814: ARRAY
54815: ST_TO_ADDR
// if h + 7 < height then
54816: LD_VAR 0 13
54820: PUSH
54821: LD_INT 7
54823: PLUS
54824: PUSH
54825: LD_VAR 0 15
54829: LESS
54830: IFFALSE 54859
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54832: LD_ADDR_VAR 0 18
54836: PUSH
54837: LD_INT 7
54839: PUSH
54840: LD_INT 28
54842: PUSH
54843: LD_INT 45
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: PUSH
54851: LD_VAR 0 12
54855: ARRAY
54856: ST_TO_ADDR
// break ;
54857: GO 54861
// end ; end ; end ;
54859: GO 54690
54861: POP
54862: POP
// end ; if not weapon then
54863: LD_VAR 0 18
54867: NOT
54868: IFFALSE 54928
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54870: LD_ADDR_VAR 0 5
54874: PUSH
54875: LD_VAR 0 5
54879: PUSH
54880: LD_INT 11
54882: PUSH
54883: LD_INT 30
54885: PUSH
54886: LD_INT 49
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: LIST
54893: DIFF
54894: ST_TO_ADDR
// if not list then
54895: LD_VAR 0 5
54899: NOT
54900: IFFALSE 54904
// exit ;
54902: GO 55046
// weapon := list [ rand ( 1 , list ) ] ;
54904: LD_ADDR_VAR 0 18
54908: PUSH
54909: LD_VAR 0 5
54913: PUSH
54914: LD_INT 1
54916: PPUSH
54917: LD_VAR 0 5
54921: PPUSH
54922: CALL_OW 12
54926: ARRAY
54927: ST_TO_ADDR
// end ; if weapon then
54928: LD_VAR 0 18
54932: IFFALSE 55046
// begin tmp := CostOfWeapon ( weapon ) ;
54934: LD_ADDR_VAR 0 14
54938: PUSH
54939: LD_VAR 0 18
54943: PPUSH
54944: CALL_OW 451
54948: ST_TO_ADDR
// j := GetBase ( tower ) ;
54949: LD_ADDR_VAR 0 9
54953: PUSH
54954: LD_VAR 0 1
54958: PPUSH
54959: CALL_OW 274
54963: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54964: LD_VAR 0 9
54968: PPUSH
54969: LD_INT 1
54971: PPUSH
54972: CALL_OW 275
54976: PUSH
54977: LD_VAR 0 14
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: GREATEREQUAL
54986: PUSH
54987: LD_VAR 0 9
54991: PPUSH
54992: LD_INT 2
54994: PPUSH
54995: CALL_OW 275
54999: PUSH
55000: LD_VAR 0 14
55004: PUSH
55005: LD_INT 2
55007: ARRAY
55008: GREATEREQUAL
55009: AND
55010: PUSH
55011: LD_VAR 0 9
55015: PPUSH
55016: LD_INT 3
55018: PPUSH
55019: CALL_OW 275
55023: PUSH
55024: LD_VAR 0 14
55028: PUSH
55029: LD_INT 3
55031: ARRAY
55032: GREATEREQUAL
55033: AND
55034: IFFALSE 55046
// result := weapon ;
55036: LD_ADDR_VAR 0 3
55040: PUSH
55041: LD_VAR 0 18
55045: ST_TO_ADDR
// end ; end ;
55046: LD_VAR 0 3
55050: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55051: LD_INT 0
55053: PPUSH
55054: PPUSH
// result := true ;
55055: LD_ADDR_VAR 0 3
55059: PUSH
55060: LD_INT 1
55062: ST_TO_ADDR
// if array1 = array2 then
55063: LD_VAR 0 1
55067: PUSH
55068: LD_VAR 0 2
55072: EQUAL
55073: IFFALSE 55133
// begin for i = 1 to array1 do
55075: LD_ADDR_VAR 0 4
55079: PUSH
55080: DOUBLE
55081: LD_INT 1
55083: DEC
55084: ST_TO_ADDR
55085: LD_VAR 0 1
55089: PUSH
55090: FOR_TO
55091: IFFALSE 55129
// if array1 [ i ] <> array2 [ i ] then
55093: LD_VAR 0 1
55097: PUSH
55098: LD_VAR 0 4
55102: ARRAY
55103: PUSH
55104: LD_VAR 0 2
55108: PUSH
55109: LD_VAR 0 4
55113: ARRAY
55114: NONEQUAL
55115: IFFALSE 55127
// begin result := false ;
55117: LD_ADDR_VAR 0 3
55121: PUSH
55122: LD_INT 0
55124: ST_TO_ADDR
// break ;
55125: GO 55129
// end ;
55127: GO 55090
55129: POP
55130: POP
// end else
55131: GO 55141
// result := false ;
55133: LD_ADDR_VAR 0 3
55137: PUSH
55138: LD_INT 0
55140: ST_TO_ADDR
// end ;
55141: LD_VAR 0 3
55145: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55146: LD_INT 0
55148: PPUSH
55149: PPUSH
// if not array1 or not array2 then
55150: LD_VAR 0 1
55154: NOT
55155: PUSH
55156: LD_VAR 0 2
55160: NOT
55161: OR
55162: IFFALSE 55166
// exit ;
55164: GO 55230
// result := true ;
55166: LD_ADDR_VAR 0 3
55170: PUSH
55171: LD_INT 1
55173: ST_TO_ADDR
// for i = 1 to array1 do
55174: LD_ADDR_VAR 0 4
55178: PUSH
55179: DOUBLE
55180: LD_INT 1
55182: DEC
55183: ST_TO_ADDR
55184: LD_VAR 0 1
55188: PUSH
55189: FOR_TO
55190: IFFALSE 55228
// if array1 [ i ] <> array2 [ i ] then
55192: LD_VAR 0 1
55196: PUSH
55197: LD_VAR 0 4
55201: ARRAY
55202: PUSH
55203: LD_VAR 0 2
55207: PUSH
55208: LD_VAR 0 4
55212: ARRAY
55213: NONEQUAL
55214: IFFALSE 55226
// begin result := false ;
55216: LD_ADDR_VAR 0 3
55220: PUSH
55221: LD_INT 0
55223: ST_TO_ADDR
// break ;
55224: GO 55228
// end ;
55226: GO 55189
55228: POP
55229: POP
// end ;
55230: LD_VAR 0 3
55234: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
// pom := GetBase ( fac ) ;
55240: LD_ADDR_VAR 0 5
55244: PUSH
55245: LD_VAR 0 1
55249: PPUSH
55250: CALL_OW 274
55254: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55255: LD_ADDR_VAR 0 4
55259: PUSH
55260: LD_VAR 0 2
55264: PUSH
55265: LD_INT 1
55267: ARRAY
55268: PPUSH
55269: LD_VAR 0 2
55273: PUSH
55274: LD_INT 2
55276: ARRAY
55277: PPUSH
55278: LD_VAR 0 2
55282: PUSH
55283: LD_INT 3
55285: ARRAY
55286: PPUSH
55287: LD_VAR 0 2
55291: PUSH
55292: LD_INT 4
55294: ARRAY
55295: PPUSH
55296: CALL_OW 449
55300: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55301: LD_ADDR_VAR 0 3
55305: PUSH
55306: LD_VAR 0 5
55310: PPUSH
55311: LD_INT 1
55313: PPUSH
55314: CALL_OW 275
55318: PUSH
55319: LD_VAR 0 4
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: GREATEREQUAL
55328: PUSH
55329: LD_VAR 0 5
55333: PPUSH
55334: LD_INT 2
55336: PPUSH
55337: CALL_OW 275
55341: PUSH
55342: LD_VAR 0 4
55346: PUSH
55347: LD_INT 2
55349: ARRAY
55350: GREATEREQUAL
55351: AND
55352: PUSH
55353: LD_VAR 0 5
55357: PPUSH
55358: LD_INT 3
55360: PPUSH
55361: CALL_OW 275
55365: PUSH
55366: LD_VAR 0 4
55370: PUSH
55371: LD_INT 3
55373: ARRAY
55374: GREATEREQUAL
55375: AND
55376: ST_TO_ADDR
// end ;
55377: LD_VAR 0 3
55381: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55382: LD_INT 0
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
// pom := GetBase ( building ) ;
55388: LD_ADDR_VAR 0 3
55392: PUSH
55393: LD_VAR 0 1
55397: PPUSH
55398: CALL_OW 274
55402: ST_TO_ADDR
// if not pom then
55403: LD_VAR 0 3
55407: NOT
55408: IFFALSE 55412
// exit ;
55410: GO 55582
// btype := GetBType ( building ) ;
55412: LD_ADDR_VAR 0 5
55416: PUSH
55417: LD_VAR 0 1
55421: PPUSH
55422: CALL_OW 266
55426: ST_TO_ADDR
// if btype = b_armoury then
55427: LD_VAR 0 5
55431: PUSH
55432: LD_INT 4
55434: EQUAL
55435: IFFALSE 55445
// btype := b_barracks ;
55437: LD_ADDR_VAR 0 5
55441: PUSH
55442: LD_INT 5
55444: ST_TO_ADDR
// if btype = b_depot then
55445: LD_VAR 0 5
55449: PUSH
55450: LD_INT 0
55452: EQUAL
55453: IFFALSE 55463
// btype := b_warehouse ;
55455: LD_ADDR_VAR 0 5
55459: PUSH
55460: LD_INT 1
55462: ST_TO_ADDR
// if btype = b_workshop then
55463: LD_VAR 0 5
55467: PUSH
55468: LD_INT 2
55470: EQUAL
55471: IFFALSE 55481
// btype := b_factory ;
55473: LD_ADDR_VAR 0 5
55477: PUSH
55478: LD_INT 3
55480: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55481: LD_ADDR_VAR 0 4
55485: PUSH
55486: LD_VAR 0 5
55490: PPUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: CALL_OW 248
55500: PPUSH
55501: CALL_OW 450
55505: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55506: LD_ADDR_VAR 0 2
55510: PUSH
55511: LD_VAR 0 3
55515: PPUSH
55516: LD_INT 1
55518: PPUSH
55519: CALL_OW 275
55523: PUSH
55524: LD_VAR 0 4
55528: PUSH
55529: LD_INT 1
55531: ARRAY
55532: GREATEREQUAL
55533: PUSH
55534: LD_VAR 0 3
55538: PPUSH
55539: LD_INT 2
55541: PPUSH
55542: CALL_OW 275
55546: PUSH
55547: LD_VAR 0 4
55551: PUSH
55552: LD_INT 2
55554: ARRAY
55555: GREATEREQUAL
55556: AND
55557: PUSH
55558: LD_VAR 0 3
55562: PPUSH
55563: LD_INT 3
55565: PPUSH
55566: CALL_OW 275
55570: PUSH
55571: LD_VAR 0 4
55575: PUSH
55576: LD_INT 3
55578: ARRAY
55579: GREATEREQUAL
55580: AND
55581: ST_TO_ADDR
// end ;
55582: LD_VAR 0 2
55586: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55587: LD_INT 0
55589: PPUSH
55590: PPUSH
55591: PPUSH
// pom := GetBase ( building ) ;
55592: LD_ADDR_VAR 0 4
55596: PUSH
55597: LD_VAR 0 1
55601: PPUSH
55602: CALL_OW 274
55606: ST_TO_ADDR
// if not pom then
55607: LD_VAR 0 4
55611: NOT
55612: IFFALSE 55616
// exit ;
55614: GO 55717
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55616: LD_ADDR_VAR 0 5
55620: PUSH
55621: LD_VAR 0 2
55625: PPUSH
55626: LD_VAR 0 1
55630: PPUSH
55631: CALL_OW 248
55635: PPUSH
55636: CALL_OW 450
55640: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55641: LD_ADDR_VAR 0 3
55645: PUSH
55646: LD_VAR 0 4
55650: PPUSH
55651: LD_INT 1
55653: PPUSH
55654: CALL_OW 275
55658: PUSH
55659: LD_VAR 0 5
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: GREATEREQUAL
55668: PUSH
55669: LD_VAR 0 4
55673: PPUSH
55674: LD_INT 2
55676: PPUSH
55677: CALL_OW 275
55681: PUSH
55682: LD_VAR 0 5
55686: PUSH
55687: LD_INT 2
55689: ARRAY
55690: GREATEREQUAL
55691: AND
55692: PUSH
55693: LD_VAR 0 4
55697: PPUSH
55698: LD_INT 3
55700: PPUSH
55701: CALL_OW 275
55705: PUSH
55706: LD_VAR 0 5
55710: PUSH
55711: LD_INT 3
55713: ARRAY
55714: GREATEREQUAL
55715: AND
55716: ST_TO_ADDR
// end ;
55717: LD_VAR 0 3
55721: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55722: LD_INT 0
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
55733: PPUSH
55734: PPUSH
// result := false ;
55735: LD_ADDR_VAR 0 8
55739: PUSH
55740: LD_INT 0
55742: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55743: LD_VAR 0 5
55747: NOT
55748: PUSH
55749: LD_VAR 0 1
55753: NOT
55754: OR
55755: PUSH
55756: LD_VAR 0 2
55760: NOT
55761: OR
55762: PUSH
55763: LD_VAR 0 3
55767: NOT
55768: OR
55769: IFFALSE 55773
// exit ;
55771: GO 56587
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55773: LD_ADDR_VAR 0 14
55777: PUSH
55778: LD_VAR 0 1
55782: PPUSH
55783: LD_VAR 0 2
55787: PPUSH
55788: LD_VAR 0 3
55792: PPUSH
55793: LD_VAR 0 4
55797: PPUSH
55798: LD_VAR 0 5
55802: PUSH
55803: LD_INT 1
55805: ARRAY
55806: PPUSH
55807: CALL_OW 248
55811: PPUSH
55812: LD_INT 0
55814: PPUSH
55815: CALL 57820 0 6
55819: ST_TO_ADDR
// if not hexes then
55820: LD_VAR 0 14
55824: NOT
55825: IFFALSE 55829
// exit ;
55827: GO 56587
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55829: LD_ADDR_VAR 0 17
55833: PUSH
55834: LD_VAR 0 5
55838: PPUSH
55839: LD_INT 22
55841: PUSH
55842: LD_VAR 0 13
55846: PPUSH
55847: CALL_OW 255
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: LD_INT 30
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 30
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PPUSH
55888: CALL_OW 72
55892: ST_TO_ADDR
// for i = 1 to hexes do
55893: LD_ADDR_VAR 0 9
55897: PUSH
55898: DOUBLE
55899: LD_INT 1
55901: DEC
55902: ST_TO_ADDR
55903: LD_VAR 0 14
55907: PUSH
55908: FOR_TO
55909: IFFALSE 56585
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55911: LD_ADDR_VAR 0 13
55915: PUSH
55916: LD_VAR 0 14
55920: PUSH
55921: LD_VAR 0 9
55925: ARRAY
55926: PUSH
55927: LD_INT 1
55929: ARRAY
55930: PPUSH
55931: LD_VAR 0 14
55935: PUSH
55936: LD_VAR 0 9
55940: ARRAY
55941: PUSH
55942: LD_INT 2
55944: ARRAY
55945: PPUSH
55946: CALL_OW 428
55950: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55951: LD_VAR 0 14
55955: PUSH
55956: LD_VAR 0 9
55960: ARRAY
55961: PUSH
55962: LD_INT 1
55964: ARRAY
55965: PPUSH
55966: LD_VAR 0 14
55970: PUSH
55971: LD_VAR 0 9
55975: ARRAY
55976: PUSH
55977: LD_INT 2
55979: ARRAY
55980: PPUSH
55981: CALL_OW 351
55985: PUSH
55986: LD_VAR 0 14
55990: PUSH
55991: LD_VAR 0 9
55995: ARRAY
55996: PUSH
55997: LD_INT 1
55999: ARRAY
56000: PPUSH
56001: LD_VAR 0 14
56005: PUSH
56006: LD_VAR 0 9
56010: ARRAY
56011: PUSH
56012: LD_INT 2
56014: ARRAY
56015: PPUSH
56016: CALL_OW 488
56020: NOT
56021: OR
56022: PUSH
56023: LD_VAR 0 13
56027: PPUSH
56028: CALL_OW 247
56032: PUSH
56033: LD_INT 3
56035: EQUAL
56036: OR
56037: IFFALSE 56043
// exit ;
56039: POP
56040: POP
56041: GO 56587
// if not tmp then
56043: LD_VAR 0 13
56047: NOT
56048: IFFALSE 56052
// continue ;
56050: GO 55908
// result := true ;
56052: LD_ADDR_VAR 0 8
56056: PUSH
56057: LD_INT 1
56059: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56060: LD_VAR 0 6
56064: PUSH
56065: LD_VAR 0 13
56069: PPUSH
56070: CALL_OW 247
56074: PUSH
56075: LD_INT 2
56077: EQUAL
56078: AND
56079: PUSH
56080: LD_VAR 0 13
56084: PPUSH
56085: CALL_OW 263
56089: PUSH
56090: LD_INT 1
56092: EQUAL
56093: AND
56094: IFFALSE 56258
// begin if IsDrivenBy ( tmp ) then
56096: LD_VAR 0 13
56100: PPUSH
56101: CALL_OW 311
56105: IFFALSE 56109
// continue ;
56107: GO 55908
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56109: LD_VAR 0 6
56113: PPUSH
56114: LD_INT 3
56116: PUSH
56117: LD_INT 60
56119: PUSH
56120: EMPTY
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: LD_INT 55
56132: PUSH
56133: EMPTY
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PPUSH
56144: CALL_OW 72
56148: IFFALSE 56256
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56150: LD_ADDR_VAR 0 18
56154: PUSH
56155: LD_VAR 0 6
56159: PPUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 60
56165: PUSH
56166: EMPTY
56167: LIST
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 55
56178: PUSH
56179: EMPTY
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PPUSH
56190: CALL_OW 72
56194: PUSH
56195: LD_INT 1
56197: ARRAY
56198: ST_TO_ADDR
// if IsInUnit ( driver ) then
56199: LD_VAR 0 18
56203: PPUSH
56204: CALL_OW 310
56208: IFFALSE 56219
// ComExit ( driver ) ;
56210: LD_VAR 0 18
56214: PPUSH
56215: CALL 81600 0 1
// AddComEnterUnit ( driver , tmp ) ;
56219: LD_VAR 0 18
56223: PPUSH
56224: LD_VAR 0 13
56228: PPUSH
56229: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56233: LD_VAR 0 18
56237: PPUSH
56238: LD_VAR 0 7
56242: PPUSH
56243: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56247: LD_VAR 0 18
56251: PPUSH
56252: CALL_OW 181
// end ; continue ;
56256: GO 55908
// end ; if not cleaners or not tmp in cleaners then
56258: LD_VAR 0 6
56262: NOT
56263: PUSH
56264: LD_VAR 0 13
56268: PUSH
56269: LD_VAR 0 6
56273: IN
56274: NOT
56275: OR
56276: IFFALSE 56583
// begin if dep then
56278: LD_VAR 0 17
56282: IFFALSE 56418
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56284: LD_ADDR_VAR 0 16
56288: PUSH
56289: LD_VAR 0 17
56293: PUSH
56294: LD_INT 1
56296: ARRAY
56297: PPUSH
56298: CALL_OW 250
56302: PPUSH
56303: LD_VAR 0 17
56307: PUSH
56308: LD_INT 1
56310: ARRAY
56311: PPUSH
56312: CALL_OW 254
56316: PPUSH
56317: LD_INT 5
56319: PPUSH
56320: CALL_OW 272
56324: PUSH
56325: LD_VAR 0 17
56329: PUSH
56330: LD_INT 1
56332: ARRAY
56333: PPUSH
56334: CALL_OW 251
56338: PPUSH
56339: LD_VAR 0 17
56343: PUSH
56344: LD_INT 1
56346: ARRAY
56347: PPUSH
56348: CALL_OW 254
56352: PPUSH
56353: LD_INT 5
56355: PPUSH
56356: CALL_OW 273
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56365: LD_VAR 0 16
56369: PUSH
56370: LD_INT 1
56372: ARRAY
56373: PPUSH
56374: LD_VAR 0 16
56378: PUSH
56379: LD_INT 2
56381: ARRAY
56382: PPUSH
56383: CALL_OW 488
56387: IFFALSE 56418
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56389: LD_VAR 0 13
56393: PPUSH
56394: LD_VAR 0 16
56398: PUSH
56399: LD_INT 1
56401: ARRAY
56402: PPUSH
56403: LD_VAR 0 16
56407: PUSH
56408: LD_INT 2
56410: ARRAY
56411: PPUSH
56412: CALL_OW 111
// continue ;
56416: GO 55908
// end ; end ; r := GetDir ( tmp ) ;
56418: LD_ADDR_VAR 0 15
56422: PUSH
56423: LD_VAR 0 13
56427: PPUSH
56428: CALL_OW 254
56432: ST_TO_ADDR
// if r = 5 then
56433: LD_VAR 0 15
56437: PUSH
56438: LD_INT 5
56440: EQUAL
56441: IFFALSE 56451
// r := 0 ;
56443: LD_ADDR_VAR 0 15
56447: PUSH
56448: LD_INT 0
56450: ST_TO_ADDR
// for j = r to 5 do
56451: LD_ADDR_VAR 0 10
56455: PUSH
56456: DOUBLE
56457: LD_VAR 0 15
56461: DEC
56462: ST_TO_ADDR
56463: LD_INT 5
56465: PUSH
56466: FOR_TO
56467: IFFALSE 56581
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56469: LD_ADDR_VAR 0 11
56473: PUSH
56474: LD_VAR 0 13
56478: PPUSH
56479: CALL_OW 250
56483: PPUSH
56484: LD_VAR 0 10
56488: PPUSH
56489: LD_INT 2
56491: PPUSH
56492: CALL_OW 272
56496: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56497: LD_ADDR_VAR 0 12
56501: PUSH
56502: LD_VAR 0 13
56506: PPUSH
56507: CALL_OW 251
56511: PPUSH
56512: LD_VAR 0 10
56516: PPUSH
56517: LD_INT 2
56519: PPUSH
56520: CALL_OW 273
56524: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56525: LD_VAR 0 11
56529: PPUSH
56530: LD_VAR 0 12
56534: PPUSH
56535: CALL_OW 488
56539: PUSH
56540: LD_VAR 0 11
56544: PPUSH
56545: LD_VAR 0 12
56549: PPUSH
56550: CALL_OW 428
56554: NOT
56555: AND
56556: IFFALSE 56579
// begin ComMoveXY ( tmp , _x , _y ) ;
56558: LD_VAR 0 13
56562: PPUSH
56563: LD_VAR 0 11
56567: PPUSH
56568: LD_VAR 0 12
56572: PPUSH
56573: CALL_OW 111
// break ;
56577: GO 56581
// end ; end ;
56579: GO 56466
56581: POP
56582: POP
// end ; end ;
56583: GO 55908
56585: POP
56586: POP
// end ;
56587: LD_VAR 0 8
56591: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56592: LD_INT 0
56594: PPUSH
// result := true ;
56595: LD_ADDR_VAR 0 3
56599: PUSH
56600: LD_INT 1
56602: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56603: LD_VAR 0 2
56607: PUSH
56608: LD_INT 24
56610: DOUBLE
56611: EQUAL
56612: IFTRUE 56622
56614: LD_INT 33
56616: DOUBLE
56617: EQUAL
56618: IFTRUE 56622
56620: GO 56647
56622: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56623: LD_ADDR_VAR 0 3
56627: PUSH
56628: LD_INT 32
56630: PPUSH
56631: LD_VAR 0 1
56635: PPUSH
56636: CALL_OW 321
56640: PUSH
56641: LD_INT 2
56643: EQUAL
56644: ST_TO_ADDR
56645: GO 56963
56647: LD_INT 20
56649: DOUBLE
56650: EQUAL
56651: IFTRUE 56655
56653: GO 56680
56655: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56656: LD_ADDR_VAR 0 3
56660: PUSH
56661: LD_INT 6
56663: PPUSH
56664: LD_VAR 0 1
56668: PPUSH
56669: CALL_OW 321
56673: PUSH
56674: LD_INT 2
56676: EQUAL
56677: ST_TO_ADDR
56678: GO 56963
56680: LD_INT 22
56682: DOUBLE
56683: EQUAL
56684: IFTRUE 56694
56686: LD_INT 36
56688: DOUBLE
56689: EQUAL
56690: IFTRUE 56694
56692: GO 56719
56694: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56695: LD_ADDR_VAR 0 3
56699: PUSH
56700: LD_INT 15
56702: PPUSH
56703: LD_VAR 0 1
56707: PPUSH
56708: CALL_OW 321
56712: PUSH
56713: LD_INT 2
56715: EQUAL
56716: ST_TO_ADDR
56717: GO 56963
56719: LD_INT 30
56721: DOUBLE
56722: EQUAL
56723: IFTRUE 56727
56725: GO 56752
56727: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56728: LD_ADDR_VAR 0 3
56732: PUSH
56733: LD_INT 20
56735: PPUSH
56736: LD_VAR 0 1
56740: PPUSH
56741: CALL_OW 321
56745: PUSH
56746: LD_INT 2
56748: EQUAL
56749: ST_TO_ADDR
56750: GO 56963
56752: LD_INT 28
56754: DOUBLE
56755: EQUAL
56756: IFTRUE 56766
56758: LD_INT 21
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56766
56764: GO 56791
56766: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56767: LD_ADDR_VAR 0 3
56771: PUSH
56772: LD_INT 21
56774: PPUSH
56775: LD_VAR 0 1
56779: PPUSH
56780: CALL_OW 321
56784: PUSH
56785: LD_INT 2
56787: EQUAL
56788: ST_TO_ADDR
56789: GO 56963
56791: LD_INT 16
56793: DOUBLE
56794: EQUAL
56795: IFTRUE 56799
56797: GO 56824
56799: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56800: LD_ADDR_VAR 0 3
56804: PUSH
56805: LD_INT 84
56807: PPUSH
56808: LD_VAR 0 1
56812: PPUSH
56813: CALL_OW 321
56817: PUSH
56818: LD_INT 2
56820: EQUAL
56821: ST_TO_ADDR
56822: GO 56963
56824: LD_INT 19
56826: DOUBLE
56827: EQUAL
56828: IFTRUE 56838
56830: LD_INT 23
56832: DOUBLE
56833: EQUAL
56834: IFTRUE 56838
56836: GO 56863
56838: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56839: LD_ADDR_VAR 0 3
56843: PUSH
56844: LD_INT 83
56846: PPUSH
56847: LD_VAR 0 1
56851: PPUSH
56852: CALL_OW 321
56856: PUSH
56857: LD_INT 2
56859: EQUAL
56860: ST_TO_ADDR
56861: GO 56963
56863: LD_INT 17
56865: DOUBLE
56866: EQUAL
56867: IFTRUE 56871
56869: GO 56896
56871: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56872: LD_ADDR_VAR 0 3
56876: PUSH
56877: LD_INT 39
56879: PPUSH
56880: LD_VAR 0 1
56884: PPUSH
56885: CALL_OW 321
56889: PUSH
56890: LD_INT 2
56892: EQUAL
56893: ST_TO_ADDR
56894: GO 56963
56896: LD_INT 18
56898: DOUBLE
56899: EQUAL
56900: IFTRUE 56904
56902: GO 56929
56904: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56905: LD_ADDR_VAR 0 3
56909: PUSH
56910: LD_INT 40
56912: PPUSH
56913: LD_VAR 0 1
56917: PPUSH
56918: CALL_OW 321
56922: PUSH
56923: LD_INT 2
56925: EQUAL
56926: ST_TO_ADDR
56927: GO 56963
56929: LD_INT 27
56931: DOUBLE
56932: EQUAL
56933: IFTRUE 56937
56935: GO 56962
56937: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56938: LD_ADDR_VAR 0 3
56942: PUSH
56943: LD_INT 35
56945: PPUSH
56946: LD_VAR 0 1
56950: PPUSH
56951: CALL_OW 321
56955: PUSH
56956: LD_INT 2
56958: EQUAL
56959: ST_TO_ADDR
56960: GO 56963
56962: POP
// end ;
56963: LD_VAR 0 3
56967: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56968: LD_INT 0
56970: PPUSH
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
56979: PPUSH
56980: PPUSH
// result := false ;
56981: LD_ADDR_VAR 0 6
56985: PUSH
56986: LD_INT 0
56988: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56989: LD_VAR 0 1
56993: NOT
56994: PUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: CALL_OW 266
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: IN
57015: NOT
57016: OR
57017: PUSH
57018: LD_VAR 0 2
57022: NOT
57023: OR
57024: PUSH
57025: LD_VAR 0 5
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 4
57044: PUSH
57045: LD_INT 5
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: IN
57056: NOT
57057: OR
57058: PUSH
57059: LD_VAR 0 3
57063: PPUSH
57064: LD_VAR 0 4
57068: PPUSH
57069: CALL_OW 488
57073: NOT
57074: OR
57075: IFFALSE 57079
// exit ;
57077: GO 57815
// side := GetSide ( depot ) ;
57079: LD_ADDR_VAR 0 9
57083: PUSH
57084: LD_VAR 0 1
57088: PPUSH
57089: CALL_OW 255
57093: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57094: LD_VAR 0 9
57098: PPUSH
57099: LD_VAR 0 2
57103: PPUSH
57104: CALL 56592 0 2
57108: NOT
57109: IFFALSE 57113
// exit ;
57111: GO 57815
// pom := GetBase ( depot ) ;
57113: LD_ADDR_VAR 0 10
57117: PUSH
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 274
57127: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57128: LD_ADDR_VAR 0 11
57132: PUSH
57133: LD_VAR 0 2
57137: PPUSH
57138: LD_VAR 0 1
57142: PPUSH
57143: CALL_OW 248
57147: PPUSH
57148: CALL_OW 450
57152: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57153: LD_VAR 0 10
57157: PPUSH
57158: LD_INT 1
57160: PPUSH
57161: CALL_OW 275
57165: PUSH
57166: LD_VAR 0 11
57170: PUSH
57171: LD_INT 1
57173: ARRAY
57174: GREATEREQUAL
57175: PUSH
57176: LD_VAR 0 10
57180: PPUSH
57181: LD_INT 2
57183: PPUSH
57184: CALL_OW 275
57188: PUSH
57189: LD_VAR 0 11
57193: PUSH
57194: LD_INT 2
57196: ARRAY
57197: GREATEREQUAL
57198: AND
57199: PUSH
57200: LD_VAR 0 10
57204: PPUSH
57205: LD_INT 3
57207: PPUSH
57208: CALL_OW 275
57212: PUSH
57213: LD_VAR 0 11
57217: PUSH
57218: LD_INT 3
57220: ARRAY
57221: GREATEREQUAL
57222: AND
57223: NOT
57224: IFFALSE 57228
// exit ;
57226: GO 57815
// if GetBType ( depot ) = b_depot then
57228: LD_VAR 0 1
57232: PPUSH
57233: CALL_OW 266
57237: PUSH
57238: LD_INT 0
57240: EQUAL
57241: IFFALSE 57253
// dist := 28 else
57243: LD_ADDR_VAR 0 14
57247: PUSH
57248: LD_INT 28
57250: ST_TO_ADDR
57251: GO 57261
// dist := 36 ;
57253: LD_ADDR_VAR 0 14
57257: PUSH
57258: LD_INT 36
57260: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57261: LD_VAR 0 1
57265: PPUSH
57266: LD_VAR 0 3
57270: PPUSH
57271: LD_VAR 0 4
57275: PPUSH
57276: CALL_OW 297
57280: PUSH
57281: LD_VAR 0 14
57285: GREATER
57286: IFFALSE 57290
// exit ;
57288: GO 57815
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57290: LD_ADDR_VAR 0 12
57294: PUSH
57295: LD_VAR 0 2
57299: PPUSH
57300: LD_VAR 0 3
57304: PPUSH
57305: LD_VAR 0 4
57309: PPUSH
57310: LD_VAR 0 5
57314: PPUSH
57315: LD_VAR 0 1
57319: PPUSH
57320: CALL_OW 248
57324: PPUSH
57325: LD_INT 0
57327: PPUSH
57328: CALL 57820 0 6
57332: ST_TO_ADDR
// if not hexes then
57333: LD_VAR 0 12
57337: NOT
57338: IFFALSE 57342
// exit ;
57340: GO 57815
// hex := GetHexInfo ( x , y ) ;
57342: LD_ADDR_VAR 0 15
57346: PUSH
57347: LD_VAR 0 3
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: CALL_OW 546
57361: ST_TO_ADDR
// if hex [ 1 ] then
57362: LD_VAR 0 15
57366: PUSH
57367: LD_INT 1
57369: ARRAY
57370: IFFALSE 57374
// exit ;
57372: GO 57815
// height := hex [ 2 ] ;
57374: LD_ADDR_VAR 0 13
57378: PUSH
57379: LD_VAR 0 15
57383: PUSH
57384: LD_INT 2
57386: ARRAY
57387: ST_TO_ADDR
// for i = 1 to hexes do
57388: LD_ADDR_VAR 0 7
57392: PUSH
57393: DOUBLE
57394: LD_INT 1
57396: DEC
57397: ST_TO_ADDR
57398: LD_VAR 0 12
57402: PUSH
57403: FOR_TO
57404: IFFALSE 57734
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57406: LD_VAR 0 12
57410: PUSH
57411: LD_VAR 0 7
57415: ARRAY
57416: PUSH
57417: LD_INT 1
57419: ARRAY
57420: PPUSH
57421: LD_VAR 0 12
57425: PUSH
57426: LD_VAR 0 7
57430: ARRAY
57431: PUSH
57432: LD_INT 2
57434: ARRAY
57435: PPUSH
57436: CALL_OW 488
57440: NOT
57441: PUSH
57442: LD_VAR 0 12
57446: PUSH
57447: LD_VAR 0 7
57451: ARRAY
57452: PUSH
57453: LD_INT 1
57455: ARRAY
57456: PPUSH
57457: LD_VAR 0 12
57461: PUSH
57462: LD_VAR 0 7
57466: ARRAY
57467: PUSH
57468: LD_INT 2
57470: ARRAY
57471: PPUSH
57472: CALL_OW 428
57476: PUSH
57477: LD_INT 0
57479: GREATER
57480: OR
57481: PUSH
57482: LD_VAR 0 12
57486: PUSH
57487: LD_VAR 0 7
57491: ARRAY
57492: PUSH
57493: LD_INT 1
57495: ARRAY
57496: PPUSH
57497: LD_VAR 0 12
57501: PUSH
57502: LD_VAR 0 7
57506: ARRAY
57507: PUSH
57508: LD_INT 2
57510: ARRAY
57511: PPUSH
57512: CALL_OW 351
57516: OR
57517: IFFALSE 57523
// exit ;
57519: POP
57520: POP
57521: GO 57815
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57523: LD_ADDR_VAR 0 8
57527: PUSH
57528: LD_VAR 0 12
57532: PUSH
57533: LD_VAR 0 7
57537: ARRAY
57538: PUSH
57539: LD_INT 1
57541: ARRAY
57542: PPUSH
57543: LD_VAR 0 12
57547: PUSH
57548: LD_VAR 0 7
57552: ARRAY
57553: PUSH
57554: LD_INT 2
57556: ARRAY
57557: PPUSH
57558: CALL_OW 546
57562: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57563: LD_VAR 0 8
57567: PUSH
57568: LD_INT 1
57570: ARRAY
57571: PUSH
57572: LD_VAR 0 8
57576: PUSH
57577: LD_INT 2
57579: ARRAY
57580: PUSH
57581: LD_VAR 0 13
57585: PUSH
57586: LD_INT 2
57588: PLUS
57589: GREATER
57590: OR
57591: PUSH
57592: LD_VAR 0 8
57596: PUSH
57597: LD_INT 2
57599: ARRAY
57600: PUSH
57601: LD_VAR 0 13
57605: PUSH
57606: LD_INT 2
57608: MINUS
57609: LESS
57610: OR
57611: PUSH
57612: LD_VAR 0 8
57616: PUSH
57617: LD_INT 3
57619: ARRAY
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 8
57626: PUSH
57627: LD_INT 9
57629: PUSH
57630: LD_INT 10
57632: PUSH
57633: LD_INT 11
57635: PUSH
57636: LD_INT 12
57638: PUSH
57639: LD_INT 13
57641: PUSH
57642: LD_INT 16
57644: PUSH
57645: LD_INT 17
57647: PUSH
57648: LD_INT 18
57650: PUSH
57651: LD_INT 19
57653: PUSH
57654: LD_INT 20
57656: PUSH
57657: LD_INT 21
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: IN
57675: NOT
57676: OR
57677: PUSH
57678: LD_VAR 0 8
57682: PUSH
57683: LD_INT 5
57685: ARRAY
57686: NOT
57687: OR
57688: PUSH
57689: LD_VAR 0 8
57693: PUSH
57694: LD_INT 6
57696: ARRAY
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 7
57706: PUSH
57707: LD_INT 9
57709: PUSH
57710: LD_INT 10
57712: PUSH
57713: LD_INT 11
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: IN
57724: NOT
57725: OR
57726: IFFALSE 57732
// exit ;
57728: POP
57729: POP
57730: GO 57815
// end ;
57732: GO 57403
57734: POP
57735: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57736: LD_VAR 0 9
57740: PPUSH
57741: LD_VAR 0 3
57745: PPUSH
57746: LD_VAR 0 4
57750: PPUSH
57751: LD_INT 20
57753: PPUSH
57754: CALL 49767 0 4
57758: PUSH
57759: LD_INT 4
57761: ARRAY
57762: IFFALSE 57766
// exit ;
57764: GO 57815
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57766: LD_VAR 0 2
57770: PUSH
57771: LD_INT 29
57773: PUSH
57774: LD_INT 30
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: IN
57781: PUSH
57782: LD_VAR 0 3
57786: PPUSH
57787: LD_VAR 0 4
57791: PPUSH
57792: LD_VAR 0 9
57796: PPUSH
57797: CALL_OW 440
57801: NOT
57802: AND
57803: IFFALSE 57807
// exit ;
57805: GO 57815
// result := true ;
57807: LD_ADDR_VAR 0 6
57811: PUSH
57812: LD_INT 1
57814: ST_TO_ADDR
// end ;
57815: LD_VAR 0 6
57819: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57820: LD_INT 0
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
57828: PPUSH
57829: PPUSH
57830: PPUSH
57831: PPUSH
57832: PPUSH
57833: PPUSH
57834: PPUSH
57835: PPUSH
57836: PPUSH
57837: PPUSH
57838: PPUSH
57839: PPUSH
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
57844: PPUSH
57845: PPUSH
57846: PPUSH
57847: PPUSH
57848: PPUSH
57849: PPUSH
57850: PPUSH
57851: PPUSH
57852: PPUSH
57853: PPUSH
57854: PPUSH
57855: PPUSH
57856: PPUSH
57857: PPUSH
57858: PPUSH
57859: PPUSH
57860: PPUSH
57861: PPUSH
57862: PPUSH
57863: PPUSH
57864: PPUSH
57865: PPUSH
57866: PPUSH
57867: PPUSH
57868: PPUSH
57869: PPUSH
57870: PPUSH
57871: PPUSH
57872: PPUSH
57873: PPUSH
57874: PPUSH
57875: PPUSH
57876: PPUSH
57877: PPUSH
57878: PPUSH
57879: PPUSH
// result = [ ] ;
57880: LD_ADDR_VAR 0 7
57884: PUSH
57885: EMPTY
57886: ST_TO_ADDR
// temp_list = [ ] ;
57887: LD_ADDR_VAR 0 9
57891: PUSH
57892: EMPTY
57893: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57894: LD_VAR 0 4
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 4
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: IN
57925: NOT
57926: PUSH
57927: LD_VAR 0 1
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: IN
57942: PUSH
57943: LD_VAR 0 5
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: IN
57962: NOT
57963: AND
57964: OR
57965: IFFALSE 57969
// exit ;
57967: GO 76360
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57969: LD_VAR 0 1
57973: PUSH
57974: LD_INT 6
57976: PUSH
57977: LD_INT 7
57979: PUSH
57980: LD_INT 8
57982: PUSH
57983: LD_INT 13
57985: PUSH
57986: LD_INT 12
57988: PUSH
57989: LD_INT 15
57991: PUSH
57992: LD_INT 11
57994: PUSH
57995: LD_INT 14
57997: PUSH
57998: LD_INT 10
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: IN
58012: IFFALSE 58022
// btype = b_lab ;
58014: LD_ADDR_VAR 0 1
58018: PUSH
58019: LD_INT 6
58021: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58022: LD_VAR 0 6
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: IN
58041: NOT
58042: PUSH
58043: LD_VAR 0 1
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 6
58062: PUSH
58063: LD_INT 36
58065: PUSH
58066: LD_INT 4
58068: PUSH
58069: LD_INT 5
58071: PUSH
58072: LD_INT 31
58074: PUSH
58075: LD_INT 32
58077: PUSH
58078: LD_INT 33
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: IN
58094: NOT
58095: PUSH
58096: LD_VAR 0 6
58100: PUSH
58101: LD_INT 1
58103: EQUAL
58104: AND
58105: OR
58106: PUSH
58107: LD_VAR 0 1
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: IN
58122: NOT
58123: PUSH
58124: LD_VAR 0 6
58128: PUSH
58129: LD_INT 2
58131: EQUAL
58132: AND
58133: OR
58134: IFFALSE 58144
// mode = 0 ;
58136: LD_ADDR_VAR 0 6
58140: PUSH
58141: LD_INT 0
58143: ST_TO_ADDR
// case mode of 0 :
58144: LD_VAR 0 6
58148: PUSH
58149: LD_INT 0
58151: DOUBLE
58152: EQUAL
58153: IFTRUE 58157
58155: GO 69610
58157: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58158: LD_ADDR_VAR 0 11
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58351: LD_ADDR_VAR 0 12
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58547: LD_ADDR_VAR 0 13
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58746: LD_ADDR_VAR 0 14
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58942: LD_ADDR_VAR 0 15
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59135: LD_ADDR_VAR 0 16
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59328: LD_ADDR_VAR 0 17
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59558: LD_ADDR_VAR 0 18
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59788: LD_ADDR_VAR 0 19
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60018: LD_ADDR_VAR 0 20
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60248: LD_ADDR_VAR 0 21
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60478: LD_ADDR_VAR 0 22
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60708: LD_ADDR_VAR 0 23
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 2
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60988: LD_ADDR_VAR 0 24
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 3
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61264: LD_ADDR_VAR 0 25
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61538: LD_ADDR_VAR 0 26
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61814: LD_ADDR_VAR 0 27
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62094: LD_ADDR_VAR 0 28
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 3
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62376: LD_ADDR_VAR 0 29
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: LD_INT 3
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 3
62620: NEG
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62655: LD_ADDR_VAR 0 30
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 2
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62933: LD_ADDR_VAR 0 31
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 3
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 3
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63211: LD_ADDR_VAR 0 32
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 3
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 3
63454: NEG
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63489: LD_ADDR_VAR 0 33
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: LD_INT 3
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 3
63733: NEG
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63768: LD_ADDR_VAR 0 34
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 2
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 3
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 2
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: LD_INT 3
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64048: LD_ADDR_VAR 0 35
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64160: LD_ADDR_VAR 0 36
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: LD_INT 2
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64272: LD_ADDR_VAR 0 37
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64384: LD_ADDR_VAR 0 38
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64496: LD_ADDR_VAR 0 39
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: LD_INT 2
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64608: LD_ADDR_VAR 0 40
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64720: LD_ADDR_VAR 0 41
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: NEG
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 2
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: LD_INT 3
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 3
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 3
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: NEG
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: LD_INT 2
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: LD_INT 3
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65070: LD_ADDR_VAR 0 42
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 2
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 2
65260: NEG
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 3
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 2
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: LD_INT 2
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 2
65326: PUSH
65327: LD_INT 3
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 3
65367: NEG
65368: PUSH
65369: LD_INT 2
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 3
65379: NEG
65380: PUSH
65381: LD_INT 3
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65420: LD_ADDR_VAR 0 43
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: NEG
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 2
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 2
65597: NEG
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 3
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 2
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 2
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65768: LD_ADDR_VAR 0 44
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 2
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 2
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 2
65958: NEG
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 3
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 3
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66118: LD_ADDR_VAR 0 45
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 2
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: LD_INT 3
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 3
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 2
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: LD_INT 3
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 3
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: NEG
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: NEG
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66468: LD_ADDR_VAR 0 46
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 1
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: NEG
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: LD_INT 2
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 2
66645: NEG
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 1
66657: NEG
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 3
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: LD_INT 2
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 3
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: LD_INT 3
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: LD_INT 2
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 2
66753: NEG
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 3
66764: NEG
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66816: LD_ADDR_VAR 0 47
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 2
66931: NEG
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66967: LD_ADDR_VAR 0 48
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 1
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67114: LD_ADDR_VAR 0 49
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: PUSH
67196: LD_INT 1
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 2
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67258: LD_ADDR_VAR 0 50
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 1
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 1
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67402: LD_ADDR_VAR 0 51
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: NEG
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 2
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 1
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: NEG
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67549: LD_ADDR_VAR 0 52
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: LD_INT 1
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: LD_INT 2
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: NEG
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 2
67664: NEG
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: LD_INT 2
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67700: LD_ADDR_VAR 0 53
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 1
67781: NEG
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: LD_INT 1
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 2
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 2
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: PUSH
67836: LD_INT 2
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: LD_INT 2
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 1
67865: NEG
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: NEG
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 2
67887: NEG
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 2
67899: NEG
67900: PUSH
67901: LD_INT 2
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67930: LD_ADDR_VAR 0 54
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 1
68011: NEG
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 2
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 2
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: PUSH
68076: LD_INT 2
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 1
68095: NEG
68096: PUSH
68097: LD_INT 1
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 2
68129: NEG
68130: PUSH
68131: LD_INT 2
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68160: LD_ADDR_VAR 0 55
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 1
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: LD_INT 1
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 2
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 1
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 0
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: LD_INT 1
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 2
68336: NEG
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 2
68359: NEG
68360: PUSH
68361: LD_INT 2
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68390: LD_ADDR_VAR 0 56
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: LD_INT 1
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: NEG
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: NEG
68472: PUSH
68473: LD_INT 2
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: LD_INT 2
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 2
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: LD_INT 2
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 1
68535: PUSH
68536: LD_INT 2
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: LD_INT 2
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: LD_INT 1
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 2
68566: NEG
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 2
68577: NEG
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68620: LD_ADDR_VAR 0 57
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 1
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: LD_INT 1
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: LD_INT 1
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: LD_INT 2
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: LD_INT 2
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 2
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 2
68755: PUSH
68756: LD_INT 2
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 1
68785: NEG
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: NEG
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 2
68807: NEG
68808: PUSH
68809: LD_INT 1
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 2
68819: NEG
68820: PUSH
68821: LD_INT 2
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68850: LD_ADDR_VAR 0 58
68854: PUSH
68855: LD_INT 0
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: PUSH
68889: LD_INT 1
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 2
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: LD_INT 2
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 1
69015: NEG
69016: PUSH
69017: LD_INT 1
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 2
69026: NEG
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: LD_INT 1
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: LD_INT 2
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69080: LD_ADDR_VAR 0 59
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 0
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: PUSH
69119: LD_INT 1
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 0
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: NEG
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69168: LD_ADDR_VAR 0 60
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 1
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: LD_INT 1
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69256: LD_ADDR_VAR 0 61
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: LD_INT 1
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 1
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: LD_INT 1
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: LD_INT 1
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69344: LD_ADDR_VAR 0 62
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: LD_INT 1
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 1
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 1
69402: NEG
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: LD_INT 1
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69432: LD_ADDR_VAR 0 63
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: LD_INT 1
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 1
69501: NEG
69502: PUSH
69503: LD_INT 1
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69520: LD_ADDR_VAR 0 64
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: LD_INT 1
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 1
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: LD_INT 1
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: ST_TO_ADDR
// end ; 1 :
69608: GO 75505
69610: LD_INT 1
69612: DOUBLE
69613: EQUAL
69614: IFTRUE 69618
69616: GO 72241
69618: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69619: LD_ADDR_VAR 0 11
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: LD_INT 3
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 1
69649: PUSH
69650: LD_INT 2
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: LIST
69662: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69663: LD_ADDR_VAR 0 12
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: LD_INT 1
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: LD_INT 0
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 3
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: LIST
69703: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69704: LD_ADDR_VAR 0 13
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 2
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: LD_INT 3
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: LIST
69743: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69744: LD_ADDR_VAR 0 14
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: LD_INT 2
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69785: LD_ADDR_VAR 0 15
69789: PUSH
69790: LD_INT 2
69792: NEG
69793: PUSH
69794: LD_INT 1
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 3
69803: NEG
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 3
69814: NEG
69815: PUSH
69816: LD_INT 1
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: LIST
69828: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69829: LD_ADDR_VAR 0 16
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: LD_INT 3
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 3
69848: NEG
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: NEG
69861: PUSH
69862: LD_INT 3
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69875: LD_ADDR_VAR 0 17
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 3
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: LD_INT 3
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: PUSH
69906: LD_INT 2
69908: NEG
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: LIST
69918: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69919: LD_ADDR_VAR 0 18
69923: PUSH
69924: LD_INT 2
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 3
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: LD_INT 1
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69960: LD_ADDR_VAR 0 19
69964: PUSH
69965: LD_INT 3
69967: PUSH
69968: LD_INT 2
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: LD_INT 3
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: LIST
69999: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70000: LD_ADDR_VAR 0 20
70004: PUSH
70005: LD_INT 1
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 1
70027: NEG
70028: PUSH
70029: LD_INT 2
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70041: LD_ADDR_VAR 0 21
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: LD_INT 1
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 3
70059: NEG
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 3
70070: NEG
70071: PUSH
70072: LD_INT 1
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70085: LD_ADDR_VAR 0 22
70089: PUSH
70090: LD_INT 2
70092: NEG
70093: PUSH
70094: LD_INT 3
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 3
70104: NEG
70105: PUSH
70106: LD_INT 2
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 3
70116: NEG
70117: PUSH
70118: LD_INT 3
70120: NEG
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: LIST
70130: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70131: LD_ADDR_VAR 0 23
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 3
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: LD_INT 4
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 3
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70175: LD_ADDR_VAR 0 24
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 3
70192: PUSH
70193: LD_INT 1
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 4
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: LIST
70215: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70216: LD_ADDR_VAR 0 25
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: LD_INT 3
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 3
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: PUSH
70244: LD_INT 4
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: LIST
70255: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70256: LD_ADDR_VAR 0 26
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 3
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: LD_INT 4
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: NEG
70284: PUSH
70285: LD_INT 3
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70297: LD_ADDR_VAR 0 27
70301: PUSH
70302: LD_INT 3
70304: NEG
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 3
70315: NEG
70316: PUSH
70317: LD_INT 1
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: LD_INT 1
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: LIST
70340: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70341: LD_ADDR_VAR 0 28
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: LD_INT 3
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: LD_INT 4
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 4
70372: NEG
70373: PUSH
70374: LD_INT 3
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70387: LD_ADDR_VAR 0 29
70391: PUSH
70392: LD_INT 1
70394: NEG
70395: PUSH
70396: LD_INT 3
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: LD_INT 3
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 1
70428: NEG
70429: PUSH
70430: LD_INT 4
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 4
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: LD_INT 3
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 1
70462: NEG
70463: PUSH
70464: LD_INT 5
70466: NEG
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: LD_INT 5
70477: NEG
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: PUSH
70486: LD_INT 4
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: LD_INT 6
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 0
70508: PUSH
70509: LD_INT 6
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 1
70519: PUSH
70520: LD_INT 5
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70542: LD_ADDR_VAR 0 30
70546: PUSH
70547: LD_INT 2
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 3
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 3
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 3
70580: PUSH
70581: LD_INT 1
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 4
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 4
70611: PUSH
70612: LD_INT 1
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 5
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 5
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 5
70642: PUSH
70643: LD_INT 1
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 6
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 6
70663: PUSH
70664: LD_INT 1
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70685: LD_ADDR_VAR 0 31
70689: PUSH
70690: LD_INT 3
70692: PUSH
70693: LD_INT 2
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 3
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 2
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 4
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 4
70732: PUSH
70733: LD_INT 4
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 3
70742: PUSH
70743: LD_INT 4
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 5
70752: PUSH
70753: LD_INT 4
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 5
70762: PUSH
70763: LD_INT 5
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 4
70772: PUSH
70773: LD_INT 5
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 6
70782: PUSH
70783: LD_INT 5
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 6
70792: PUSH
70793: LD_INT 6
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 5
70802: PUSH
70803: LD_INT 6
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70824: LD_ADDR_VAR 0 32
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: LD_INT 3
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 0
70841: PUSH
70842: LD_INT 3
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: LD_INT 2
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 1
70862: PUSH
70863: LD_INT 4
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 0
70872: PUSH
70873: LD_INT 4
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: LD_INT 3
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 1
70893: PUSH
70894: LD_INT 5
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: LD_INT 5
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: LD_INT 4
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: PUSH
70925: LD_INT 6
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 6
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: LD_INT 5
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70967: LD_ADDR_VAR 0 33
70971: PUSH
70972: LD_INT 2
70974: NEG
70975: PUSH
70976: LD_INT 1
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 3
70985: NEG
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 3
70996: NEG
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 3
71008: NEG
71009: PUSH
71010: LD_INT 1
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 4
71019: NEG
71020: PUSH
71021: LD_INT 0
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 4
71030: NEG
71031: PUSH
71032: LD_INT 1
71034: NEG
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 4
71042: NEG
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 5
71053: NEG
71054: PUSH
71055: LD_INT 0
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 5
71064: NEG
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 5
71076: NEG
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 6
71087: NEG
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 6
71098: NEG
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71122: LD_ADDR_VAR 0 34
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PUSH
71131: LD_INT 3
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 3
71141: NEG
71142: PUSH
71143: LD_INT 2
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 3
71153: NEG
71154: PUSH
71155: LD_INT 3
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 3
71165: NEG
71166: PUSH
71167: LD_INT 4
71169: NEG
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 4
71177: NEG
71178: PUSH
71179: LD_INT 3
71181: NEG
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 4
71189: NEG
71190: PUSH
71191: LD_INT 4
71193: NEG
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 4
71201: NEG
71202: PUSH
71203: LD_INT 5
71205: NEG
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 5
71213: NEG
71214: PUSH
71215: LD_INT 4
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 5
71225: NEG
71226: PUSH
71227: LD_INT 5
71229: NEG
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 5
71237: NEG
71238: PUSH
71239: LD_INT 6
71241: NEG
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 6
71249: NEG
71250: PUSH
71251: LD_INT 5
71253: NEG
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 6
71261: NEG
71262: PUSH
71263: LD_INT 6
71265: NEG
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71285: LD_ADDR_VAR 0 41
71289: PUSH
71290: LD_INT 0
71292: PUSH
71293: LD_INT 2
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 1
71303: NEG
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 1
71315: PUSH
71316: LD_INT 2
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: LIST
71328: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71329: LD_ADDR_VAR 0 42
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: PUSH
71347: LD_INT 1
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 3
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: LIST
71369: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71370: LD_ADDR_VAR 0 43
71374: PUSH
71375: LD_INT 2
71377: PUSH
71378: LD_INT 2
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 3
71387: PUSH
71388: LD_INT 2
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: LD_INT 3
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71410: LD_ADDR_VAR 0 44
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: LD_INT 2
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 1
71427: PUSH
71428: LD_INT 3
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 1
71437: NEG
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: LIST
71450: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71451: LD_ADDR_VAR 0 45
71455: PUSH
71456: LD_INT 2
71458: NEG
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 2
71469: NEG
71470: PUSH
71471: LD_INT 1
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 3
71480: NEG
71481: PUSH
71482: LD_INT 1
71484: NEG
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: LIST
71494: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71495: LD_ADDR_VAR 0 46
71499: PUSH
71500: LD_INT 2
71502: NEG
71503: PUSH
71504: LD_INT 2
71506: NEG
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 2
71514: NEG
71515: PUSH
71516: LD_INT 3
71518: NEG
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 3
71526: NEG
71527: PUSH
71528: LD_INT 2
71530: NEG
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: LIST
71540: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71541: LD_ADDR_VAR 0 47
71545: PUSH
71546: LD_INT 2
71548: NEG
71549: PUSH
71550: LD_INT 3
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 1
71560: NEG
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71574: LD_ADDR_VAR 0 48
71578: PUSH
71579: LD_INT 1
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 2
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71605: LD_ADDR_VAR 0 49
71609: PUSH
71610: LD_INT 3
71612: PUSH
71613: LD_INT 1
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71634: LD_ADDR_VAR 0 50
71638: PUSH
71639: LD_INT 2
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: LD_INT 3
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71663: LD_ADDR_VAR 0 51
71667: PUSH
71668: LD_INT 1
71670: NEG
71671: PUSH
71672: LD_INT 2
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: NEG
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71694: LD_ADDR_VAR 0 52
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: LD_INT 1
71705: NEG
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 3
71713: NEG
71714: PUSH
71715: LD_INT 2
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71727: LD_ADDR_VAR 0 53
71731: PUSH
71732: LD_INT 1
71734: NEG
71735: PUSH
71736: LD_INT 3
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 0
71746: PUSH
71747: LD_INT 3
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 1
71757: PUSH
71758: LD_INT 2
71760: NEG
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: LIST
71770: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71771: LD_ADDR_VAR 0 54
71775: PUSH
71776: LD_INT 2
71778: PUSH
71779: LD_INT 1
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 3
71799: PUSH
71800: LD_INT 1
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: LIST
71811: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71812: LD_ADDR_VAR 0 55
71816: PUSH
71817: LD_INT 3
71819: PUSH
71820: LD_INT 2
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 3
71829: PUSH
71830: LD_INT 3
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 2
71839: PUSH
71840: LD_INT 3
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: LIST
71851: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71852: LD_ADDR_VAR 0 56
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: LD_INT 3
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 0
71869: PUSH
71870: LD_INT 3
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 1
71879: NEG
71880: PUSH
71881: LD_INT 2
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71893: LD_ADDR_VAR 0 57
71897: PUSH
71898: LD_INT 2
71900: NEG
71901: PUSH
71902: LD_INT 1
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 3
71911: NEG
71912: PUSH
71913: LD_INT 0
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 3
71922: NEG
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71937: LD_ADDR_VAR 0 58
71941: PUSH
71942: LD_INT 2
71944: NEG
71945: PUSH
71946: LD_INT 3
71948: NEG
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 3
71956: NEG
71957: PUSH
71958: LD_INT 2
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 3
71968: NEG
71969: PUSH
71970: LD_INT 3
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71983: LD_ADDR_VAR 0 59
71987: PUSH
71988: LD_INT 1
71990: NEG
71991: PUSH
71992: LD_INT 2
71994: NEG
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: LD_INT 2
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 1
72016: NEG
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72027: LD_ADDR_VAR 0 60
72031: PUSH
72032: LD_INT 1
72034: PUSH
72035: LD_INT 1
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 2
72045: PUSH
72046: LD_INT 0
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 2
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: LIST
72067: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72068: LD_ADDR_VAR 0 61
72072: PUSH
72073: LD_INT 2
72075: PUSH
72076: LD_INT 1
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 2
72085: PUSH
72086: LD_INT 2
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 1
72095: PUSH
72096: LD_INT 2
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: LIST
72107: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72108: LD_ADDR_VAR 0 62
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: LD_INT 2
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: LD_INT 2
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 1
72135: NEG
72136: PUSH
72137: LD_INT 1
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72149: LD_ADDR_VAR 0 63
72153: PUSH
72154: LD_INT 1
72156: NEG
72157: PUSH
72158: LD_INT 1
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 2
72167: NEG
72168: PUSH
72169: LD_INT 0
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 2
72178: NEG
72179: PUSH
72180: LD_INT 1
72182: NEG
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72193: LD_ADDR_VAR 0 64
72197: PUSH
72198: LD_INT 1
72200: NEG
72201: PUSH
72202: LD_INT 2
72204: NEG
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 2
72212: NEG
72213: PUSH
72214: LD_INT 1
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 2
72224: NEG
72225: PUSH
72226: LD_INT 2
72228: NEG
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: ST_TO_ADDR
// end ; 2 :
72239: GO 75505
72241: LD_INT 2
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72249
72247: GO 75504
72249: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72250: LD_ADDR_VAR 0 29
72254: PUSH
72255: LD_INT 4
72257: PUSH
72258: LD_INT 0
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 4
72267: PUSH
72268: LD_INT 1
72270: NEG
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 5
72278: PUSH
72279: LD_INT 0
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 5
72288: PUSH
72289: LD_INT 1
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 4
72298: PUSH
72299: LD_INT 1
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 3
72308: PUSH
72309: LD_INT 0
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 3
72318: PUSH
72319: LD_INT 1
72321: NEG
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 3
72329: PUSH
72330: LD_INT 2
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 5
72340: PUSH
72341: LD_INT 2
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 3
72360: PUSH
72361: LD_INT 2
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 4
72370: PUSH
72371: LD_INT 3
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 4
72380: PUSH
72381: LD_INT 4
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 3
72390: PUSH
72391: LD_INT 4
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 2
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 2
72410: PUSH
72411: LD_INT 2
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 4
72420: PUSH
72421: LD_INT 2
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 2
72430: PUSH
72431: LD_INT 4
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 0
72440: PUSH
72441: LD_INT 4
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 0
72450: PUSH
72451: LD_INT 3
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 1
72460: PUSH
72461: LD_INT 4
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 1
72470: PUSH
72471: LD_INT 5
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 0
72480: PUSH
72481: LD_INT 5
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 1
72490: NEG
72491: PUSH
72492: LD_INT 4
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 1
72501: NEG
72502: PUSH
72503: LD_INT 3
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 2
72512: PUSH
72513: LD_INT 5
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 2
72522: NEG
72523: PUSH
72524: LD_INT 3
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 3
72533: NEG
72534: PUSH
72535: LD_INT 0
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 3
72544: NEG
72545: PUSH
72546: LD_INT 1
72548: NEG
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 2
72556: NEG
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 2
72567: NEG
72568: PUSH
72569: LD_INT 1
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 3
72578: NEG
72579: PUSH
72580: LD_INT 1
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 4
72589: NEG
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 4
72600: NEG
72601: PUSH
72602: LD_INT 1
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 4
72612: NEG
72613: PUSH
72614: LD_INT 2
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 2
72624: NEG
72625: PUSH
72626: LD_INT 2
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 4
72635: NEG
72636: PUSH
72637: LD_INT 4
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 4
72647: NEG
72648: PUSH
72649: LD_INT 5
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 3
72659: NEG
72660: PUSH
72661: LD_INT 4
72663: NEG
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 3
72671: NEG
72672: PUSH
72673: LD_INT 3
72675: NEG
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 4
72683: NEG
72684: PUSH
72685: LD_INT 3
72687: NEG
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 5
72695: NEG
72696: PUSH
72697: LD_INT 4
72699: NEG
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 5
72707: NEG
72708: PUSH
72709: LD_INT 5
72711: NEG
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: LD_INT 5
72723: NEG
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 5
72731: NEG
72732: PUSH
72733: LD_INT 3
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72788: LD_ADDR_VAR 0 30
72792: PUSH
72793: LD_INT 4
72795: PUSH
72796: LD_INT 4
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 4
72805: PUSH
72806: LD_INT 3
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 5
72815: PUSH
72816: LD_INT 4
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 5
72825: PUSH
72826: LD_INT 5
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 4
72835: PUSH
72836: LD_INT 5
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 3
72845: PUSH
72846: LD_INT 4
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 3
72855: PUSH
72856: LD_INT 3
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 5
72865: PUSH
72866: LD_INT 3
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 3
72875: PUSH
72876: LD_INT 5
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: LD_INT 3
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 1
72905: PUSH
72906: LD_INT 3
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 1
72915: PUSH
72916: LD_INT 4
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 0
72925: PUSH
72926: LD_INT 4
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 1
72935: NEG
72936: PUSH
72937: LD_INT 3
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 1
72946: NEG
72947: PUSH
72948: LD_INT 2
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 2
72957: PUSH
72958: LD_INT 4
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 2
72967: NEG
72968: PUSH
72969: LD_INT 2
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 4
72978: NEG
72979: PUSH
72980: LD_INT 0
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 4
72989: NEG
72990: PUSH
72991: LD_INT 1
72993: NEG
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 3
73001: NEG
73002: PUSH
73003: LD_INT 0
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: LD_INT 3
73012: NEG
73013: PUSH
73014: LD_INT 1
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 4
73023: NEG
73024: PUSH
73025: LD_INT 1
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 5
73034: NEG
73035: PUSH
73036: LD_INT 0
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 5
73045: NEG
73046: PUSH
73047: LD_INT 1
73049: NEG
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 5
73057: NEG
73058: PUSH
73059: LD_INT 2
73061: NEG
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 3
73069: NEG
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 3
73080: NEG
73081: PUSH
73082: LD_INT 3
73084: NEG
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 3
73092: NEG
73093: PUSH
73094: LD_INT 4
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: NEG
73105: PUSH
73106: LD_INT 3
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 2
73116: NEG
73117: PUSH
73118: LD_INT 2
73120: NEG
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: LD_INT 3
73128: NEG
73129: PUSH
73130: LD_INT 2
73132: NEG
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 4
73140: NEG
73141: PUSH
73142: LD_INT 3
73144: NEG
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 4
73152: NEG
73153: PUSH
73154: LD_INT 4
73156: NEG
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 2
73164: NEG
73165: PUSH
73166: LD_INT 4
73168: NEG
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 4
73176: NEG
73177: PUSH
73178: LD_INT 2
73180: NEG
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: LD_INT 4
73191: NEG
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: LD_INT 5
73202: NEG
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 1
73210: PUSH
73211: LD_INT 4
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 1
73221: PUSH
73222: LD_INT 3
73224: NEG
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 0
73232: PUSH
73233: LD_INT 3
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 4
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 1
73255: NEG
73256: PUSH
73257: LD_INT 5
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 2
73267: PUSH
73268: LD_INT 3
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 2
73278: NEG
73279: PUSH
73280: LD_INT 5
73282: NEG
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73335: LD_ADDR_VAR 0 31
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: LD_INT 4
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 0
73352: PUSH
73353: LD_INT 3
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 1
73362: PUSH
73363: LD_INT 4
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 1
73372: PUSH
73373: LD_INT 5
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 5
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 1
73392: NEG
73393: PUSH
73394: LD_INT 4
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 1
73403: NEG
73404: PUSH
73405: LD_INT 3
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 2
73414: PUSH
73415: LD_INT 5
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 2
73424: NEG
73425: PUSH
73426: LD_INT 3
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 3
73435: NEG
73436: PUSH
73437: LD_INT 0
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 3
73446: NEG
73447: PUSH
73448: LD_INT 1
73450: NEG
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 2
73458: NEG
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 2
73469: NEG
73470: PUSH
73471: LD_INT 1
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 3
73480: NEG
73481: PUSH
73482: LD_INT 1
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 4
73491: NEG
73492: PUSH
73493: LD_INT 0
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 4
73502: NEG
73503: PUSH
73504: LD_INT 1
73506: NEG
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 4
73514: NEG
73515: PUSH
73516: LD_INT 2
73518: NEG
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 2
73526: NEG
73527: PUSH
73528: LD_INT 2
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 4
73537: NEG
73538: PUSH
73539: LD_INT 4
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 4
73549: NEG
73550: PUSH
73551: LD_INT 5
73553: NEG
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 3
73561: NEG
73562: PUSH
73563: LD_INT 4
73565: NEG
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 3
73573: NEG
73574: PUSH
73575: LD_INT 3
73577: NEG
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 4
73585: NEG
73586: PUSH
73587: LD_INT 3
73589: NEG
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 5
73597: NEG
73598: PUSH
73599: LD_INT 4
73601: NEG
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 5
73609: NEG
73610: PUSH
73611: LD_INT 5
73613: NEG
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 3
73621: NEG
73622: PUSH
73623: LD_INT 5
73625: NEG
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 5
73633: NEG
73634: PUSH
73635: LD_INT 3
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 0
73645: PUSH
73646: LD_INT 3
73648: NEG
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 0
73656: PUSH
73657: LD_INT 4
73659: NEG
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 1
73667: PUSH
73668: LD_INT 3
73670: NEG
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 1
73678: PUSH
73679: LD_INT 2
73681: NEG
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 0
73689: PUSH
73690: LD_INT 2
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 1
73700: NEG
73701: PUSH
73702: LD_INT 3
73704: NEG
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 1
73712: NEG
73713: PUSH
73714: LD_INT 4
73716: NEG
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 2
73724: PUSH
73725: LD_INT 2
73727: NEG
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 2
73735: NEG
73736: PUSH
73737: LD_INT 4
73739: NEG
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 4
73747: PUSH
73748: LD_INT 0
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 4
73757: PUSH
73758: LD_INT 1
73760: NEG
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 5
73768: PUSH
73769: LD_INT 0
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 5
73778: PUSH
73779: LD_INT 1
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 4
73788: PUSH
73789: LD_INT 1
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 3
73798: PUSH
73799: LD_INT 0
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 3
73808: PUSH
73809: LD_INT 1
73811: NEG
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 3
73819: PUSH
73820: LD_INT 2
73822: NEG
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 5
73830: PUSH
73831: LD_INT 2
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73885: LD_ADDR_VAR 0 32
73889: PUSH
73890: LD_INT 4
73892: NEG
73893: PUSH
73894: LD_INT 0
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 4
73903: NEG
73904: PUSH
73905: LD_INT 1
73907: NEG
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: PUSH
73913: LD_INT 3
73915: NEG
73916: PUSH
73917: LD_INT 0
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_INT 3
73926: NEG
73927: PUSH
73928: LD_INT 1
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 4
73937: NEG
73938: PUSH
73939: LD_INT 1
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 5
73948: NEG
73949: PUSH
73950: LD_INT 0
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 5
73959: NEG
73960: PUSH
73961: LD_INT 1
73963: NEG
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 5
73971: NEG
73972: PUSH
73973: LD_INT 2
73975: NEG
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 3
73983: NEG
73984: PUSH
73985: LD_INT 2
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 3
73994: NEG
73995: PUSH
73996: LD_INT 3
73998: NEG
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 3
74006: NEG
74007: PUSH
74008: LD_INT 4
74010: NEG
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 2
74018: NEG
74019: PUSH
74020: LD_INT 3
74022: NEG
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 2
74030: NEG
74031: PUSH
74032: LD_INT 2
74034: NEG
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 3
74042: NEG
74043: PUSH
74044: LD_INT 2
74046: NEG
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: LD_INT 4
74054: NEG
74055: PUSH
74056: LD_INT 3
74058: NEG
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 4
74066: NEG
74067: PUSH
74068: LD_INT 4
74070: NEG
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 2
74078: NEG
74079: PUSH
74080: LD_INT 4
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 4
74090: NEG
74091: PUSH
74092: LD_INT 2
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 0
74102: PUSH
74103: LD_INT 4
74105: NEG
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: LD_INT 0
74113: PUSH
74114: LD_INT 5
74116: NEG
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 1
74124: PUSH
74125: LD_INT 4
74127: NEG
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 1
74135: PUSH
74136: LD_INT 3
74138: NEG
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: LD_INT 3
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 1
74157: NEG
74158: PUSH
74159: LD_INT 4
74161: NEG
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 1
74169: NEG
74170: PUSH
74171: LD_INT 5
74173: NEG
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 2
74181: PUSH
74182: LD_INT 3
74184: NEG
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 2
74192: NEG
74193: PUSH
74194: LD_INT 5
74196: NEG
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 3
74204: PUSH
74205: LD_INT 0
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 3
74214: PUSH
74215: LD_INT 1
74217: NEG
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 4
74225: PUSH
74226: LD_INT 0
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 4
74235: PUSH
74236: LD_INT 1
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PUSH
74243: LD_INT 3
74245: PUSH
74246: LD_INT 1
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 2
74255: PUSH
74256: LD_INT 0
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 2
74265: PUSH
74266: LD_INT 1
74268: NEG
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_INT 2
74276: PUSH
74277: LD_INT 2
74279: NEG
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 4
74287: PUSH
74288: LD_INT 2
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 4
74297: PUSH
74298: LD_INT 4
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 4
74307: PUSH
74308: LD_INT 3
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 5
74317: PUSH
74318: LD_INT 4
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 5
74327: PUSH
74328: LD_INT 5
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 4
74337: PUSH
74338: LD_INT 5
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 3
74347: PUSH
74348: LD_INT 4
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 3
74357: PUSH
74358: LD_INT 3
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 5
74367: PUSH
74368: LD_INT 3
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 3
74377: PUSH
74378: LD_INT 5
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74432: LD_ADDR_VAR 0 33
74436: PUSH
74437: LD_INT 4
74439: NEG
74440: PUSH
74441: LD_INT 4
74443: NEG
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 4
74451: NEG
74452: PUSH
74453: LD_INT 5
74455: NEG
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 3
74463: NEG
74464: PUSH
74465: LD_INT 4
74467: NEG
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 3
74475: NEG
74476: PUSH
74477: LD_INT 3
74479: NEG
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 4
74487: NEG
74488: PUSH
74489: LD_INT 3
74491: NEG
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: LD_INT 5
74499: NEG
74500: PUSH
74501: LD_INT 4
74503: NEG
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PUSH
74509: LD_INT 5
74511: NEG
74512: PUSH
74513: LD_INT 5
74515: NEG
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 3
74523: NEG
74524: PUSH
74525: LD_INT 5
74527: NEG
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: LD_INT 5
74535: NEG
74536: PUSH
74537: LD_INT 3
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: LD_INT 3
74550: NEG
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 0
74558: PUSH
74559: LD_INT 4
74561: NEG
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 1
74569: PUSH
74570: LD_INT 3
74572: NEG
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 1
74580: PUSH
74581: LD_INT 2
74583: NEG
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 0
74591: PUSH
74592: LD_INT 2
74594: NEG
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 1
74602: NEG
74603: PUSH
74604: LD_INT 3
74606: NEG
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: PUSH
74612: LD_INT 1
74614: NEG
74615: PUSH
74616: LD_INT 4
74618: NEG
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 2
74626: PUSH
74627: LD_INT 2
74629: NEG
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_INT 2
74637: NEG
74638: PUSH
74639: LD_INT 4
74641: NEG
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 4
74649: PUSH
74650: LD_INT 0
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 4
74659: PUSH
74660: LD_INT 1
74662: NEG
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 5
74670: PUSH
74671: LD_INT 0
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 5
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: LD_INT 4
74690: PUSH
74691: LD_INT 1
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: LD_INT 3
74700: PUSH
74701: LD_INT 0
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: LD_INT 3
74710: PUSH
74711: LD_INT 1
74713: NEG
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 3
74721: PUSH
74722: LD_INT 2
74724: NEG
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 5
74732: PUSH
74733: LD_INT 2
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 3
74742: PUSH
74743: LD_INT 3
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 3
74752: PUSH
74753: LD_INT 2
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 4
74762: PUSH
74763: LD_INT 3
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 4
74772: PUSH
74773: LD_INT 4
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 3
74782: PUSH
74783: LD_INT 4
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: PUSH
74790: LD_INT 2
74792: PUSH
74793: LD_INT 3
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: PUSH
74800: LD_INT 2
74802: PUSH
74803: LD_INT 2
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: LD_INT 4
74812: PUSH
74813: LD_INT 2
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: LD_INT 2
74822: PUSH
74823: LD_INT 4
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 0
74832: PUSH
74833: LD_INT 4
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 0
74842: PUSH
74843: LD_INT 3
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 1
74852: PUSH
74853: LD_INT 4
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 1
74862: PUSH
74863: LD_INT 5
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 0
74872: PUSH
74873: LD_INT 5
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 1
74882: NEG
74883: PUSH
74884: LD_INT 4
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 1
74893: NEG
74894: PUSH
74895: LD_INT 3
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 2
74904: PUSH
74905: LD_INT 5
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 2
74914: NEG
74915: PUSH
74916: LD_INT 3
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74970: LD_ADDR_VAR 0 34
74974: PUSH
74975: LD_INT 0
74977: PUSH
74978: LD_INT 4
74980: NEG
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 0
74988: PUSH
74989: LD_INT 5
74991: NEG
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 1
74999: PUSH
75000: LD_INT 4
75002: NEG
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 1
75010: PUSH
75011: LD_INT 3
75013: NEG
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 0
75021: PUSH
75022: LD_INT 3
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 1
75032: NEG
75033: PUSH
75034: LD_INT 4
75036: NEG
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 1
75044: NEG
75045: PUSH
75046: LD_INT 5
75048: NEG
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: LD_INT 2
75056: PUSH
75057: LD_INT 3
75059: NEG
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 2
75067: NEG
75068: PUSH
75069: LD_INT 5
75071: NEG
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: LD_INT 0
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: PUSH
75087: LD_INT 3
75089: PUSH
75090: LD_INT 1
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 4
75100: PUSH
75101: LD_INT 0
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 4
75110: PUSH
75111: LD_INT 1
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: PUSH
75118: LD_INT 3
75120: PUSH
75121: LD_INT 1
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: LD_INT 2
75130: PUSH
75131: LD_INT 0
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 2
75140: PUSH
75141: LD_INT 1
75143: NEG
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 2
75151: PUSH
75152: LD_INT 2
75154: NEG
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 4
75162: PUSH
75163: LD_INT 2
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 4
75172: PUSH
75173: LD_INT 4
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 4
75182: PUSH
75183: LD_INT 3
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 5
75192: PUSH
75193: LD_INT 4
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: LD_INT 5
75202: PUSH
75203: LD_INT 5
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 4
75212: PUSH
75213: LD_INT 5
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 3
75222: PUSH
75223: LD_INT 4
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 3
75232: PUSH
75233: LD_INT 3
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 5
75242: PUSH
75243: LD_INT 3
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 3
75252: PUSH
75253: LD_INT 5
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: LD_INT 3
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: LD_INT 2
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: PUSH
75280: LD_INT 1
75282: PUSH
75283: LD_INT 3
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: PUSH
75290: LD_INT 1
75292: PUSH
75293: LD_INT 4
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 0
75302: PUSH
75303: LD_INT 4
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 1
75312: NEG
75313: PUSH
75314: LD_INT 3
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: PUSH
75321: LD_INT 1
75323: NEG
75324: PUSH
75325: LD_INT 2
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 2
75334: PUSH
75335: LD_INT 4
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 2
75344: NEG
75345: PUSH
75346: LD_INT 2
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 4
75355: NEG
75356: PUSH
75357: LD_INT 0
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 4
75366: NEG
75367: PUSH
75368: LD_INT 1
75370: NEG
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 3
75378: NEG
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 3
75389: NEG
75390: PUSH
75391: LD_INT 1
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 4
75400: NEG
75401: PUSH
75402: LD_INT 1
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 5
75411: NEG
75412: PUSH
75413: LD_INT 0
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 5
75422: NEG
75423: PUSH
75424: LD_INT 1
75426: NEG
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 5
75434: NEG
75435: PUSH
75436: LD_INT 2
75438: NEG
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 3
75446: NEG
75447: PUSH
75448: LD_INT 2
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: ST_TO_ADDR
// end ; end ;
75502: GO 75505
75504: POP
// case btype of b_depot , b_warehouse :
75505: LD_VAR 0 1
75509: PUSH
75510: LD_INT 0
75512: DOUBLE
75513: EQUAL
75514: IFTRUE 75524
75516: LD_INT 1
75518: DOUBLE
75519: EQUAL
75520: IFTRUE 75524
75522: GO 75725
75524: POP
// case nation of nation_american :
75525: LD_VAR 0 5
75529: PUSH
75530: LD_INT 1
75532: DOUBLE
75533: EQUAL
75534: IFTRUE 75538
75536: GO 75594
75538: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75539: LD_ADDR_VAR 0 9
75543: PUSH
75544: LD_VAR 0 11
75548: PUSH
75549: LD_VAR 0 12
75553: PUSH
75554: LD_VAR 0 13
75558: PUSH
75559: LD_VAR 0 14
75563: PUSH
75564: LD_VAR 0 15
75568: PUSH
75569: LD_VAR 0 16
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: PUSH
75582: LD_VAR 0 4
75586: PUSH
75587: LD_INT 1
75589: PLUS
75590: ARRAY
75591: ST_TO_ADDR
75592: GO 75723
75594: LD_INT 2
75596: DOUBLE
75597: EQUAL
75598: IFTRUE 75602
75600: GO 75658
75602: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75603: LD_ADDR_VAR 0 9
75607: PUSH
75608: LD_VAR 0 17
75612: PUSH
75613: LD_VAR 0 18
75617: PUSH
75618: LD_VAR 0 19
75622: PUSH
75623: LD_VAR 0 20
75627: PUSH
75628: LD_VAR 0 21
75632: PUSH
75633: LD_VAR 0 22
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: PUSH
75646: LD_VAR 0 4
75650: PUSH
75651: LD_INT 1
75653: PLUS
75654: ARRAY
75655: ST_TO_ADDR
75656: GO 75723
75658: LD_INT 3
75660: DOUBLE
75661: EQUAL
75662: IFTRUE 75666
75664: GO 75722
75666: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75667: LD_ADDR_VAR 0 9
75671: PUSH
75672: LD_VAR 0 23
75676: PUSH
75677: LD_VAR 0 24
75681: PUSH
75682: LD_VAR 0 25
75686: PUSH
75687: LD_VAR 0 26
75691: PUSH
75692: LD_VAR 0 27
75696: PUSH
75697: LD_VAR 0 28
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: PUSH
75710: LD_VAR 0 4
75714: PUSH
75715: LD_INT 1
75717: PLUS
75718: ARRAY
75719: ST_TO_ADDR
75720: GO 75723
75722: POP
75723: GO 76278
75725: LD_INT 2
75727: DOUBLE
75728: EQUAL
75729: IFTRUE 75739
75731: LD_INT 3
75733: DOUBLE
75734: EQUAL
75735: IFTRUE 75739
75737: GO 75795
75739: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75740: LD_ADDR_VAR 0 9
75744: PUSH
75745: LD_VAR 0 29
75749: PUSH
75750: LD_VAR 0 30
75754: PUSH
75755: LD_VAR 0 31
75759: PUSH
75760: LD_VAR 0 32
75764: PUSH
75765: LD_VAR 0 33
75769: PUSH
75770: LD_VAR 0 34
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: PUSH
75783: LD_VAR 0 4
75787: PUSH
75788: LD_INT 1
75790: PLUS
75791: ARRAY
75792: ST_TO_ADDR
75793: GO 76278
75795: LD_INT 16
75797: DOUBLE
75798: EQUAL
75799: IFTRUE 75857
75801: LD_INT 17
75803: DOUBLE
75804: EQUAL
75805: IFTRUE 75857
75807: LD_INT 18
75809: DOUBLE
75810: EQUAL
75811: IFTRUE 75857
75813: LD_INT 19
75815: DOUBLE
75816: EQUAL
75817: IFTRUE 75857
75819: LD_INT 22
75821: DOUBLE
75822: EQUAL
75823: IFTRUE 75857
75825: LD_INT 20
75827: DOUBLE
75828: EQUAL
75829: IFTRUE 75857
75831: LD_INT 21
75833: DOUBLE
75834: EQUAL
75835: IFTRUE 75857
75837: LD_INT 23
75839: DOUBLE
75840: EQUAL
75841: IFTRUE 75857
75843: LD_INT 24
75845: DOUBLE
75846: EQUAL
75847: IFTRUE 75857
75849: LD_INT 25
75851: DOUBLE
75852: EQUAL
75853: IFTRUE 75857
75855: GO 75913
75857: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75858: LD_ADDR_VAR 0 9
75862: PUSH
75863: LD_VAR 0 35
75867: PUSH
75868: LD_VAR 0 36
75872: PUSH
75873: LD_VAR 0 37
75877: PUSH
75878: LD_VAR 0 38
75882: PUSH
75883: LD_VAR 0 39
75887: PUSH
75888: LD_VAR 0 40
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: PUSH
75901: LD_VAR 0 4
75905: PUSH
75906: LD_INT 1
75908: PLUS
75909: ARRAY
75910: ST_TO_ADDR
75911: GO 76278
75913: LD_INT 6
75915: DOUBLE
75916: EQUAL
75917: IFTRUE 75969
75919: LD_INT 7
75921: DOUBLE
75922: EQUAL
75923: IFTRUE 75969
75925: LD_INT 8
75927: DOUBLE
75928: EQUAL
75929: IFTRUE 75969
75931: LD_INT 13
75933: DOUBLE
75934: EQUAL
75935: IFTRUE 75969
75937: LD_INT 12
75939: DOUBLE
75940: EQUAL
75941: IFTRUE 75969
75943: LD_INT 15
75945: DOUBLE
75946: EQUAL
75947: IFTRUE 75969
75949: LD_INT 11
75951: DOUBLE
75952: EQUAL
75953: IFTRUE 75969
75955: LD_INT 14
75957: DOUBLE
75958: EQUAL
75959: IFTRUE 75969
75961: LD_INT 10
75963: DOUBLE
75964: EQUAL
75965: IFTRUE 75969
75967: GO 76025
75969: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75970: LD_ADDR_VAR 0 9
75974: PUSH
75975: LD_VAR 0 41
75979: PUSH
75980: LD_VAR 0 42
75984: PUSH
75985: LD_VAR 0 43
75989: PUSH
75990: LD_VAR 0 44
75994: PUSH
75995: LD_VAR 0 45
75999: PUSH
76000: LD_VAR 0 46
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: PUSH
76013: LD_VAR 0 4
76017: PUSH
76018: LD_INT 1
76020: PLUS
76021: ARRAY
76022: ST_TO_ADDR
76023: GO 76278
76025: LD_INT 36
76027: DOUBLE
76028: EQUAL
76029: IFTRUE 76033
76031: GO 76089
76033: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76034: LD_ADDR_VAR 0 9
76038: PUSH
76039: LD_VAR 0 47
76043: PUSH
76044: LD_VAR 0 48
76048: PUSH
76049: LD_VAR 0 49
76053: PUSH
76054: LD_VAR 0 50
76058: PUSH
76059: LD_VAR 0 51
76063: PUSH
76064: LD_VAR 0 52
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: PUSH
76077: LD_VAR 0 4
76081: PUSH
76082: LD_INT 1
76084: PLUS
76085: ARRAY
76086: ST_TO_ADDR
76087: GO 76278
76089: LD_INT 4
76091: DOUBLE
76092: EQUAL
76093: IFTRUE 76115
76095: LD_INT 5
76097: DOUBLE
76098: EQUAL
76099: IFTRUE 76115
76101: LD_INT 34
76103: DOUBLE
76104: EQUAL
76105: IFTRUE 76115
76107: LD_INT 37
76109: DOUBLE
76110: EQUAL
76111: IFTRUE 76115
76113: GO 76171
76115: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76116: LD_ADDR_VAR 0 9
76120: PUSH
76121: LD_VAR 0 53
76125: PUSH
76126: LD_VAR 0 54
76130: PUSH
76131: LD_VAR 0 55
76135: PUSH
76136: LD_VAR 0 56
76140: PUSH
76141: LD_VAR 0 57
76145: PUSH
76146: LD_VAR 0 58
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: PUSH
76159: LD_VAR 0 4
76163: PUSH
76164: LD_INT 1
76166: PLUS
76167: ARRAY
76168: ST_TO_ADDR
76169: GO 76278
76171: LD_INT 31
76173: DOUBLE
76174: EQUAL
76175: IFTRUE 76221
76177: LD_INT 32
76179: DOUBLE
76180: EQUAL
76181: IFTRUE 76221
76183: LD_INT 33
76185: DOUBLE
76186: EQUAL
76187: IFTRUE 76221
76189: LD_INT 27
76191: DOUBLE
76192: EQUAL
76193: IFTRUE 76221
76195: LD_INT 26
76197: DOUBLE
76198: EQUAL
76199: IFTRUE 76221
76201: LD_INT 28
76203: DOUBLE
76204: EQUAL
76205: IFTRUE 76221
76207: LD_INT 29
76209: DOUBLE
76210: EQUAL
76211: IFTRUE 76221
76213: LD_INT 30
76215: DOUBLE
76216: EQUAL
76217: IFTRUE 76221
76219: GO 76277
76221: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76222: LD_ADDR_VAR 0 9
76226: PUSH
76227: LD_VAR 0 59
76231: PUSH
76232: LD_VAR 0 60
76236: PUSH
76237: LD_VAR 0 61
76241: PUSH
76242: LD_VAR 0 62
76246: PUSH
76247: LD_VAR 0 63
76251: PUSH
76252: LD_VAR 0 64
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: PUSH
76265: LD_VAR 0 4
76269: PUSH
76270: LD_INT 1
76272: PLUS
76273: ARRAY
76274: ST_TO_ADDR
76275: GO 76278
76277: POP
// temp_list2 = [ ] ;
76278: LD_ADDR_VAR 0 10
76282: PUSH
76283: EMPTY
76284: ST_TO_ADDR
// for i in temp_list do
76285: LD_ADDR_VAR 0 8
76289: PUSH
76290: LD_VAR 0 9
76294: PUSH
76295: FOR_IN
76296: IFFALSE 76348
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76298: LD_ADDR_VAR 0 10
76302: PUSH
76303: LD_VAR 0 10
76307: PUSH
76308: LD_VAR 0 8
76312: PUSH
76313: LD_INT 1
76315: ARRAY
76316: PUSH
76317: LD_VAR 0 2
76321: PLUS
76322: PUSH
76323: LD_VAR 0 8
76327: PUSH
76328: LD_INT 2
76330: ARRAY
76331: PUSH
76332: LD_VAR 0 3
76336: PLUS
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: EMPTY
76343: LIST
76344: ADD
76345: ST_TO_ADDR
76346: GO 76295
76348: POP
76349: POP
// result = temp_list2 ;
76350: LD_ADDR_VAR 0 7
76354: PUSH
76355: LD_VAR 0 10
76359: ST_TO_ADDR
// end ;
76360: LD_VAR 0 7
76364: RET
// export function EnemyInRange ( unit , dist ) ; begin
76365: LD_INT 0
76367: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76368: LD_ADDR_VAR 0 3
76372: PUSH
76373: LD_VAR 0 1
76377: PPUSH
76378: CALL_OW 255
76382: PPUSH
76383: LD_VAR 0 1
76387: PPUSH
76388: CALL_OW 250
76392: PPUSH
76393: LD_VAR 0 1
76397: PPUSH
76398: CALL_OW 251
76402: PPUSH
76403: LD_VAR 0 2
76407: PPUSH
76408: CALL 49767 0 4
76412: PUSH
76413: LD_INT 4
76415: ARRAY
76416: ST_TO_ADDR
// end ;
76417: LD_VAR 0 3
76421: RET
// export function PlayerSeeMe ( unit ) ; begin
76422: LD_INT 0
76424: PPUSH
// result := See ( your_side , unit ) ;
76425: LD_ADDR_VAR 0 2
76429: PUSH
76430: LD_OWVAR 2
76434: PPUSH
76435: LD_VAR 0 1
76439: PPUSH
76440: CALL_OW 292
76444: ST_TO_ADDR
// end ;
76445: LD_VAR 0 2
76449: RET
// export function ReverseDir ( unit ) ; begin
76450: LD_INT 0
76452: PPUSH
// if not unit then
76453: LD_VAR 0 1
76457: NOT
76458: IFFALSE 76462
// exit ;
76460: GO 76485
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76462: LD_ADDR_VAR 0 2
76466: PUSH
76467: LD_VAR 0 1
76471: PPUSH
76472: CALL_OW 254
76476: PUSH
76477: LD_INT 3
76479: PLUS
76480: PUSH
76481: LD_INT 6
76483: MOD
76484: ST_TO_ADDR
// end ;
76485: LD_VAR 0 2
76489: RET
// export function ReverseArray ( array ) ; var i ; begin
76490: LD_INT 0
76492: PPUSH
76493: PPUSH
// if not array then
76494: LD_VAR 0 1
76498: NOT
76499: IFFALSE 76503
// exit ;
76501: GO 76558
// result := [ ] ;
76503: LD_ADDR_VAR 0 2
76507: PUSH
76508: EMPTY
76509: ST_TO_ADDR
// for i := array downto 1 do
76510: LD_ADDR_VAR 0 3
76514: PUSH
76515: DOUBLE
76516: LD_VAR 0 1
76520: INC
76521: ST_TO_ADDR
76522: LD_INT 1
76524: PUSH
76525: FOR_DOWNTO
76526: IFFALSE 76556
// result := Join ( result , array [ i ] ) ;
76528: LD_ADDR_VAR 0 2
76532: PUSH
76533: LD_VAR 0 2
76537: PPUSH
76538: LD_VAR 0 1
76542: PUSH
76543: LD_VAR 0 3
76547: ARRAY
76548: PPUSH
76549: CALL 81202 0 2
76553: ST_TO_ADDR
76554: GO 76525
76556: POP
76557: POP
// end ;
76558: LD_VAR 0 2
76562: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76563: LD_INT 0
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
76569: PPUSH
76570: PPUSH
// if not unit or not hexes then
76571: LD_VAR 0 1
76575: NOT
76576: PUSH
76577: LD_VAR 0 2
76581: NOT
76582: OR
76583: IFFALSE 76587
// exit ;
76585: GO 76710
// dist := 9999 ;
76587: LD_ADDR_VAR 0 5
76591: PUSH
76592: LD_INT 9999
76594: ST_TO_ADDR
// for i = 1 to hexes do
76595: LD_ADDR_VAR 0 4
76599: PUSH
76600: DOUBLE
76601: LD_INT 1
76603: DEC
76604: ST_TO_ADDR
76605: LD_VAR 0 2
76609: PUSH
76610: FOR_TO
76611: IFFALSE 76698
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76613: LD_ADDR_VAR 0 6
76617: PUSH
76618: LD_VAR 0 1
76622: PPUSH
76623: LD_VAR 0 2
76627: PUSH
76628: LD_VAR 0 4
76632: ARRAY
76633: PUSH
76634: LD_INT 1
76636: ARRAY
76637: PPUSH
76638: LD_VAR 0 2
76642: PUSH
76643: LD_VAR 0 4
76647: ARRAY
76648: PUSH
76649: LD_INT 2
76651: ARRAY
76652: PPUSH
76653: CALL_OW 297
76657: ST_TO_ADDR
// if tdist < dist then
76658: LD_VAR 0 6
76662: PUSH
76663: LD_VAR 0 5
76667: LESS
76668: IFFALSE 76696
// begin hex := hexes [ i ] ;
76670: LD_ADDR_VAR 0 8
76674: PUSH
76675: LD_VAR 0 2
76679: PUSH
76680: LD_VAR 0 4
76684: ARRAY
76685: ST_TO_ADDR
// dist := tdist ;
76686: LD_ADDR_VAR 0 5
76690: PUSH
76691: LD_VAR 0 6
76695: ST_TO_ADDR
// end ; end ;
76696: GO 76610
76698: POP
76699: POP
// result := hex ;
76700: LD_ADDR_VAR 0 3
76704: PUSH
76705: LD_VAR 0 8
76709: ST_TO_ADDR
// end ;
76710: LD_VAR 0 3
76714: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76715: LD_INT 0
76717: PPUSH
76718: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76719: LD_VAR 0 1
76723: NOT
76724: PUSH
76725: LD_VAR 0 1
76729: PUSH
76730: LD_INT 21
76732: PUSH
76733: LD_INT 2
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PUSH
76740: LD_INT 23
76742: PUSH
76743: LD_INT 2
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PPUSH
76754: CALL_OW 69
76758: IN
76759: NOT
76760: OR
76761: IFFALSE 76765
// exit ;
76763: GO 76812
// for i = 1 to 3 do
76765: LD_ADDR_VAR 0 3
76769: PUSH
76770: DOUBLE
76771: LD_INT 1
76773: DEC
76774: ST_TO_ADDR
76775: LD_INT 3
76777: PUSH
76778: FOR_TO
76779: IFFALSE 76810
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76781: LD_VAR 0 1
76785: PPUSH
76786: CALL_OW 250
76790: PPUSH
76791: LD_VAR 0 1
76795: PPUSH
76796: CALL_OW 251
76800: PPUSH
76801: LD_INT 1
76803: PPUSH
76804: CALL_OW 453
76808: GO 76778
76810: POP
76811: POP
// end ;
76812: LD_VAR 0 2
76816: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76817: LD_INT 0
76819: PPUSH
76820: PPUSH
76821: PPUSH
76822: PPUSH
76823: PPUSH
76824: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76825: LD_VAR 0 1
76829: NOT
76830: PUSH
76831: LD_VAR 0 2
76835: NOT
76836: OR
76837: PUSH
76838: LD_VAR 0 1
76842: PPUSH
76843: CALL_OW 314
76847: OR
76848: IFFALSE 76852
// exit ;
76850: GO 77319
// if GetLives ( i ) < 250 then
76852: LD_VAR 0 4
76856: PPUSH
76857: CALL_OW 256
76861: PUSH
76862: LD_INT 250
76864: LESS
76865: IFFALSE 76878
// begin ComAutodestruct ( i ) ;
76867: LD_VAR 0 4
76871: PPUSH
76872: CALL 76715 0 1
// exit ;
76876: GO 77319
// end ; x := GetX ( enemy_unit ) ;
76878: LD_ADDR_VAR 0 7
76882: PUSH
76883: LD_VAR 0 2
76887: PPUSH
76888: CALL_OW 250
76892: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76893: LD_ADDR_VAR 0 8
76897: PUSH
76898: LD_VAR 0 2
76902: PPUSH
76903: CALL_OW 251
76907: ST_TO_ADDR
// if not x or not y then
76908: LD_VAR 0 7
76912: NOT
76913: PUSH
76914: LD_VAR 0 8
76918: NOT
76919: OR
76920: IFFALSE 76924
// exit ;
76922: GO 77319
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76924: LD_ADDR_VAR 0 6
76928: PUSH
76929: LD_VAR 0 7
76933: PPUSH
76934: LD_INT 0
76936: PPUSH
76937: LD_INT 4
76939: PPUSH
76940: CALL_OW 272
76944: PUSH
76945: LD_VAR 0 8
76949: PPUSH
76950: LD_INT 0
76952: PPUSH
76953: LD_INT 4
76955: PPUSH
76956: CALL_OW 273
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_VAR 0 7
76969: PPUSH
76970: LD_INT 1
76972: PPUSH
76973: LD_INT 4
76975: PPUSH
76976: CALL_OW 272
76980: PUSH
76981: LD_VAR 0 8
76985: PPUSH
76986: LD_INT 1
76988: PPUSH
76989: LD_INT 4
76991: PPUSH
76992: CALL_OW 273
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_VAR 0 7
77005: PPUSH
77006: LD_INT 2
77008: PPUSH
77009: LD_INT 4
77011: PPUSH
77012: CALL_OW 272
77016: PUSH
77017: LD_VAR 0 8
77021: PPUSH
77022: LD_INT 2
77024: PPUSH
77025: LD_INT 4
77027: PPUSH
77028: CALL_OW 273
77032: PUSH
77033: EMPTY
77034: LIST
77035: LIST
77036: PUSH
77037: LD_VAR 0 7
77041: PPUSH
77042: LD_INT 3
77044: PPUSH
77045: LD_INT 4
77047: PPUSH
77048: CALL_OW 272
77052: PUSH
77053: LD_VAR 0 8
77057: PPUSH
77058: LD_INT 3
77060: PPUSH
77061: LD_INT 4
77063: PPUSH
77064: CALL_OW 273
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_VAR 0 7
77077: PPUSH
77078: LD_INT 4
77080: PPUSH
77081: LD_INT 4
77083: PPUSH
77084: CALL_OW 272
77088: PUSH
77089: LD_VAR 0 8
77093: PPUSH
77094: LD_INT 4
77096: PPUSH
77097: LD_INT 4
77099: PPUSH
77100: CALL_OW 273
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: LD_VAR 0 7
77113: PPUSH
77114: LD_INT 5
77116: PPUSH
77117: LD_INT 4
77119: PPUSH
77120: CALL_OW 272
77124: PUSH
77125: LD_VAR 0 8
77129: PPUSH
77130: LD_INT 5
77132: PPUSH
77133: LD_INT 4
77135: PPUSH
77136: CALL_OW 273
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: ST_TO_ADDR
// for i = tmp downto 1 do
77153: LD_ADDR_VAR 0 4
77157: PUSH
77158: DOUBLE
77159: LD_VAR 0 6
77163: INC
77164: ST_TO_ADDR
77165: LD_INT 1
77167: PUSH
77168: FOR_DOWNTO
77169: IFFALSE 77270
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77171: LD_VAR 0 6
77175: PUSH
77176: LD_VAR 0 4
77180: ARRAY
77181: PUSH
77182: LD_INT 1
77184: ARRAY
77185: PPUSH
77186: LD_VAR 0 6
77190: PUSH
77191: LD_VAR 0 4
77195: ARRAY
77196: PUSH
77197: LD_INT 2
77199: ARRAY
77200: PPUSH
77201: CALL_OW 488
77205: NOT
77206: PUSH
77207: LD_VAR 0 6
77211: PUSH
77212: LD_VAR 0 4
77216: ARRAY
77217: PUSH
77218: LD_INT 1
77220: ARRAY
77221: PPUSH
77222: LD_VAR 0 6
77226: PUSH
77227: LD_VAR 0 4
77231: ARRAY
77232: PUSH
77233: LD_INT 2
77235: ARRAY
77236: PPUSH
77237: CALL_OW 428
77241: PUSH
77242: LD_INT 0
77244: NONEQUAL
77245: OR
77246: IFFALSE 77268
// tmp := Delete ( tmp , i ) ;
77248: LD_ADDR_VAR 0 6
77252: PUSH
77253: LD_VAR 0 6
77257: PPUSH
77258: LD_VAR 0 4
77262: PPUSH
77263: CALL_OW 3
77267: ST_TO_ADDR
77268: GO 77168
77270: POP
77271: POP
// j := GetClosestHex ( unit , tmp ) ;
77272: LD_ADDR_VAR 0 5
77276: PUSH
77277: LD_VAR 0 1
77281: PPUSH
77282: LD_VAR 0 6
77286: PPUSH
77287: CALL 76563 0 2
77291: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77292: LD_VAR 0 1
77296: PPUSH
77297: LD_VAR 0 5
77301: PUSH
77302: LD_INT 1
77304: ARRAY
77305: PPUSH
77306: LD_VAR 0 5
77310: PUSH
77311: LD_INT 2
77313: ARRAY
77314: PPUSH
77315: CALL_OW 111
// end ;
77319: LD_VAR 0 3
77323: RET
// export function PrepareApemanSoldier ( ) ; begin
77324: LD_INT 0
77326: PPUSH
// uc_nation := 0 ;
77327: LD_ADDR_OWVAR 21
77331: PUSH
77332: LD_INT 0
77334: ST_TO_ADDR
// hc_sex := sex_male ;
77335: LD_ADDR_OWVAR 27
77339: PUSH
77340: LD_INT 1
77342: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77343: LD_ADDR_OWVAR 28
77347: PUSH
77348: LD_INT 15
77350: ST_TO_ADDR
// hc_gallery :=  ;
77351: LD_ADDR_OWVAR 33
77355: PUSH
77356: LD_STRING 
77358: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77359: LD_ADDR_OWVAR 31
77363: PUSH
77364: LD_INT 0
77366: PPUSH
77367: LD_INT 3
77369: PPUSH
77370: CALL_OW 12
77374: PUSH
77375: LD_INT 0
77377: PPUSH
77378: LD_INT 3
77380: PPUSH
77381: CALL_OW 12
77385: PUSH
77386: LD_INT 0
77388: PUSH
77389: LD_INT 0
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: ST_TO_ADDR
// end ;
77398: LD_VAR 0 1
77402: RET
// export function PrepareApemanEngineer ( ) ; begin
77403: LD_INT 0
77405: PPUSH
// uc_nation := 0 ;
77406: LD_ADDR_OWVAR 21
77410: PUSH
77411: LD_INT 0
77413: ST_TO_ADDR
// hc_sex := sex_male ;
77414: LD_ADDR_OWVAR 27
77418: PUSH
77419: LD_INT 1
77421: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77422: LD_ADDR_OWVAR 28
77426: PUSH
77427: LD_INT 16
77429: ST_TO_ADDR
// hc_gallery :=  ;
77430: LD_ADDR_OWVAR 33
77434: PUSH
77435: LD_STRING 
77437: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77438: LD_ADDR_OWVAR 31
77442: PUSH
77443: LD_INT 0
77445: PPUSH
77446: LD_INT 3
77448: PPUSH
77449: CALL_OW 12
77453: PUSH
77454: LD_INT 0
77456: PPUSH
77457: LD_INT 3
77459: PPUSH
77460: CALL_OW 12
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: ST_TO_ADDR
// end ;
77477: LD_VAR 0 1
77481: RET
// export function PrepareApeman ( agressivity ) ; begin
77482: LD_INT 0
77484: PPUSH
// uc_side := 0 ;
77485: LD_ADDR_OWVAR 20
77489: PUSH
77490: LD_INT 0
77492: ST_TO_ADDR
// uc_nation := 0 ;
77493: LD_ADDR_OWVAR 21
77497: PUSH
77498: LD_INT 0
77500: ST_TO_ADDR
// hc_sex := sex_male ;
77501: LD_ADDR_OWVAR 27
77505: PUSH
77506: LD_INT 1
77508: ST_TO_ADDR
// hc_class := class_apeman ;
77509: LD_ADDR_OWVAR 28
77513: PUSH
77514: LD_INT 12
77516: ST_TO_ADDR
// hc_gallery :=  ;
77517: LD_ADDR_OWVAR 33
77521: PUSH
77522: LD_STRING 
77524: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77525: LD_ADDR_OWVAR 35
77529: PUSH
77530: LD_VAR 0 1
77534: NEG
77535: PPUSH
77536: LD_VAR 0 1
77540: PPUSH
77541: CALL_OW 12
77545: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77546: LD_ADDR_OWVAR 31
77550: PUSH
77551: LD_INT 0
77553: PPUSH
77554: LD_INT 3
77556: PPUSH
77557: CALL_OW 12
77561: PUSH
77562: LD_INT 0
77564: PPUSH
77565: LD_INT 3
77567: PPUSH
77568: CALL_OW 12
77572: PUSH
77573: LD_INT 0
77575: PUSH
77576: LD_INT 0
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: LIST
77583: LIST
77584: ST_TO_ADDR
// end ;
77585: LD_VAR 0 2
77589: RET
// export function PrepareTiger ( agressivity ) ; begin
77590: LD_INT 0
77592: PPUSH
// uc_side := 0 ;
77593: LD_ADDR_OWVAR 20
77597: PUSH
77598: LD_INT 0
77600: ST_TO_ADDR
// uc_nation := 0 ;
77601: LD_ADDR_OWVAR 21
77605: PUSH
77606: LD_INT 0
77608: ST_TO_ADDR
// hc_class := class_tiger ;
77609: LD_ADDR_OWVAR 28
77613: PUSH
77614: LD_INT 14
77616: ST_TO_ADDR
// hc_gallery :=  ;
77617: LD_ADDR_OWVAR 33
77621: PUSH
77622: LD_STRING 
77624: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77625: LD_ADDR_OWVAR 35
77629: PUSH
77630: LD_VAR 0 1
77634: NEG
77635: PPUSH
77636: LD_VAR 0 1
77640: PPUSH
77641: CALL_OW 12
77645: ST_TO_ADDR
// end ;
77646: LD_VAR 0 2
77650: RET
// export function PrepareEnchidna ( ) ; begin
77651: LD_INT 0
77653: PPUSH
// uc_side := 0 ;
77654: LD_ADDR_OWVAR 20
77658: PUSH
77659: LD_INT 0
77661: ST_TO_ADDR
// uc_nation := 0 ;
77662: LD_ADDR_OWVAR 21
77666: PUSH
77667: LD_INT 0
77669: ST_TO_ADDR
// hc_class := class_baggie ;
77670: LD_ADDR_OWVAR 28
77674: PUSH
77675: LD_INT 13
77677: ST_TO_ADDR
// hc_gallery :=  ;
77678: LD_ADDR_OWVAR 33
77682: PUSH
77683: LD_STRING 
77685: ST_TO_ADDR
// end ;
77686: LD_VAR 0 1
77690: RET
// export function PrepareFrog ( ) ; begin
77691: LD_INT 0
77693: PPUSH
// uc_side := 0 ;
77694: LD_ADDR_OWVAR 20
77698: PUSH
77699: LD_INT 0
77701: ST_TO_ADDR
// uc_nation := 0 ;
77702: LD_ADDR_OWVAR 21
77706: PUSH
77707: LD_INT 0
77709: ST_TO_ADDR
// hc_class := class_frog ;
77710: LD_ADDR_OWVAR 28
77714: PUSH
77715: LD_INT 19
77717: ST_TO_ADDR
// hc_gallery :=  ;
77718: LD_ADDR_OWVAR 33
77722: PUSH
77723: LD_STRING 
77725: ST_TO_ADDR
// end ;
77726: LD_VAR 0 1
77730: RET
// export function PrepareFish ( ) ; begin
77731: LD_INT 0
77733: PPUSH
// uc_side := 0 ;
77734: LD_ADDR_OWVAR 20
77738: PUSH
77739: LD_INT 0
77741: ST_TO_ADDR
// uc_nation := 0 ;
77742: LD_ADDR_OWVAR 21
77746: PUSH
77747: LD_INT 0
77749: ST_TO_ADDR
// hc_class := class_fish ;
77750: LD_ADDR_OWVAR 28
77754: PUSH
77755: LD_INT 20
77757: ST_TO_ADDR
// hc_gallery :=  ;
77758: LD_ADDR_OWVAR 33
77762: PUSH
77763: LD_STRING 
77765: ST_TO_ADDR
// end ;
77766: LD_VAR 0 1
77770: RET
// export function PrepareBird ( ) ; begin
77771: LD_INT 0
77773: PPUSH
// uc_side := 0 ;
77774: LD_ADDR_OWVAR 20
77778: PUSH
77779: LD_INT 0
77781: ST_TO_ADDR
// uc_nation := 0 ;
77782: LD_ADDR_OWVAR 21
77786: PUSH
77787: LD_INT 0
77789: ST_TO_ADDR
// hc_class := class_phororhacos ;
77790: LD_ADDR_OWVAR 28
77794: PUSH
77795: LD_INT 18
77797: ST_TO_ADDR
// hc_gallery :=  ;
77798: LD_ADDR_OWVAR 33
77802: PUSH
77803: LD_STRING 
77805: ST_TO_ADDR
// end ;
77806: LD_VAR 0 1
77810: RET
// export function PrepareHorse ( ) ; begin
77811: LD_INT 0
77813: PPUSH
// uc_side := 0 ;
77814: LD_ADDR_OWVAR 20
77818: PUSH
77819: LD_INT 0
77821: ST_TO_ADDR
// uc_nation := 0 ;
77822: LD_ADDR_OWVAR 21
77826: PUSH
77827: LD_INT 0
77829: ST_TO_ADDR
// hc_class := class_horse ;
77830: LD_ADDR_OWVAR 28
77834: PUSH
77835: LD_INT 21
77837: ST_TO_ADDR
// hc_gallery :=  ;
77838: LD_ADDR_OWVAR 33
77842: PUSH
77843: LD_STRING 
77845: ST_TO_ADDR
// end ;
77846: LD_VAR 0 1
77850: RET
// export function PrepareMastodont ( ) ; begin
77851: LD_INT 0
77853: PPUSH
// uc_side := 0 ;
77854: LD_ADDR_OWVAR 20
77858: PUSH
77859: LD_INT 0
77861: ST_TO_ADDR
// uc_nation := 0 ;
77862: LD_ADDR_OWVAR 21
77866: PUSH
77867: LD_INT 0
77869: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77870: LD_ADDR_OWVAR 37
77874: PUSH
77875: LD_INT 31
77877: ST_TO_ADDR
// vc_control := control_rider ;
77878: LD_ADDR_OWVAR 38
77882: PUSH
77883: LD_INT 4
77885: ST_TO_ADDR
// end ;
77886: LD_VAR 0 1
77890: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77891: LD_INT 0
77893: PPUSH
77894: PPUSH
77895: PPUSH
// uc_side = 0 ;
77896: LD_ADDR_OWVAR 20
77900: PUSH
77901: LD_INT 0
77903: ST_TO_ADDR
// uc_nation = 0 ;
77904: LD_ADDR_OWVAR 21
77908: PUSH
77909: LD_INT 0
77911: ST_TO_ADDR
// InitHc_All ( ) ;
77912: CALL_OW 584
// InitVc ;
77916: CALL_OW 20
// if mastodonts then
77920: LD_VAR 0 6
77924: IFFALSE 77991
// for i = 1 to mastodonts do
77926: LD_ADDR_VAR 0 11
77930: PUSH
77931: DOUBLE
77932: LD_INT 1
77934: DEC
77935: ST_TO_ADDR
77936: LD_VAR 0 6
77940: PUSH
77941: FOR_TO
77942: IFFALSE 77989
// begin vc_chassis := 31 ;
77944: LD_ADDR_OWVAR 37
77948: PUSH
77949: LD_INT 31
77951: ST_TO_ADDR
// vc_control := control_rider ;
77952: LD_ADDR_OWVAR 38
77956: PUSH
77957: LD_INT 4
77959: ST_TO_ADDR
// animal := CreateVehicle ;
77960: LD_ADDR_VAR 0 12
77964: PUSH
77965: CALL_OW 45
77969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77970: LD_VAR 0 12
77974: PPUSH
77975: LD_VAR 0 8
77979: PPUSH
77980: LD_INT 0
77982: PPUSH
77983: CALL 80119 0 3
// end ;
77987: GO 77941
77989: POP
77990: POP
// if horses then
77991: LD_VAR 0 5
77995: IFFALSE 78062
// for i = 1 to horses do
77997: LD_ADDR_VAR 0 11
78001: PUSH
78002: DOUBLE
78003: LD_INT 1
78005: DEC
78006: ST_TO_ADDR
78007: LD_VAR 0 5
78011: PUSH
78012: FOR_TO
78013: IFFALSE 78060
// begin hc_class := 21 ;
78015: LD_ADDR_OWVAR 28
78019: PUSH
78020: LD_INT 21
78022: ST_TO_ADDR
// hc_gallery :=  ;
78023: LD_ADDR_OWVAR 33
78027: PUSH
78028: LD_STRING 
78030: ST_TO_ADDR
// animal := CreateHuman ;
78031: LD_ADDR_VAR 0 12
78035: PUSH
78036: CALL_OW 44
78040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78041: LD_VAR 0 12
78045: PPUSH
78046: LD_VAR 0 8
78050: PPUSH
78051: LD_INT 0
78053: PPUSH
78054: CALL 80119 0 3
// end ;
78058: GO 78012
78060: POP
78061: POP
// if birds then
78062: LD_VAR 0 1
78066: IFFALSE 78133
// for i = 1 to birds do
78068: LD_ADDR_VAR 0 11
78072: PUSH
78073: DOUBLE
78074: LD_INT 1
78076: DEC
78077: ST_TO_ADDR
78078: LD_VAR 0 1
78082: PUSH
78083: FOR_TO
78084: IFFALSE 78131
// begin hc_class = 18 ;
78086: LD_ADDR_OWVAR 28
78090: PUSH
78091: LD_INT 18
78093: ST_TO_ADDR
// hc_gallery =  ;
78094: LD_ADDR_OWVAR 33
78098: PUSH
78099: LD_STRING 
78101: ST_TO_ADDR
// animal := CreateHuman ;
78102: LD_ADDR_VAR 0 12
78106: PUSH
78107: CALL_OW 44
78111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78112: LD_VAR 0 12
78116: PPUSH
78117: LD_VAR 0 8
78121: PPUSH
78122: LD_INT 0
78124: PPUSH
78125: CALL 80119 0 3
// end ;
78129: GO 78083
78131: POP
78132: POP
// if tigers then
78133: LD_VAR 0 2
78137: IFFALSE 78221
// for i = 1 to tigers do
78139: LD_ADDR_VAR 0 11
78143: PUSH
78144: DOUBLE
78145: LD_INT 1
78147: DEC
78148: ST_TO_ADDR
78149: LD_VAR 0 2
78153: PUSH
78154: FOR_TO
78155: IFFALSE 78219
// begin hc_class = class_tiger ;
78157: LD_ADDR_OWVAR 28
78161: PUSH
78162: LD_INT 14
78164: ST_TO_ADDR
// hc_gallery =  ;
78165: LD_ADDR_OWVAR 33
78169: PUSH
78170: LD_STRING 
78172: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78173: LD_ADDR_OWVAR 35
78177: PUSH
78178: LD_INT 7
78180: NEG
78181: PPUSH
78182: LD_INT 7
78184: PPUSH
78185: CALL_OW 12
78189: ST_TO_ADDR
// animal := CreateHuman ;
78190: LD_ADDR_VAR 0 12
78194: PUSH
78195: CALL_OW 44
78199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78200: LD_VAR 0 12
78204: PPUSH
78205: LD_VAR 0 8
78209: PPUSH
78210: LD_INT 0
78212: PPUSH
78213: CALL 80119 0 3
// end ;
78217: GO 78154
78219: POP
78220: POP
// if apemans then
78221: LD_VAR 0 3
78225: IFFALSE 78348
// for i = 1 to apemans do
78227: LD_ADDR_VAR 0 11
78231: PUSH
78232: DOUBLE
78233: LD_INT 1
78235: DEC
78236: ST_TO_ADDR
78237: LD_VAR 0 3
78241: PUSH
78242: FOR_TO
78243: IFFALSE 78346
// begin hc_class = class_apeman ;
78245: LD_ADDR_OWVAR 28
78249: PUSH
78250: LD_INT 12
78252: ST_TO_ADDR
// hc_gallery =  ;
78253: LD_ADDR_OWVAR 33
78257: PUSH
78258: LD_STRING 
78260: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78261: LD_ADDR_OWVAR 35
78265: PUSH
78266: LD_INT 2
78268: NEG
78269: PPUSH
78270: LD_INT 2
78272: PPUSH
78273: CALL_OW 12
78277: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78278: LD_ADDR_OWVAR 31
78282: PUSH
78283: LD_INT 1
78285: PPUSH
78286: LD_INT 3
78288: PPUSH
78289: CALL_OW 12
78293: PUSH
78294: LD_INT 1
78296: PPUSH
78297: LD_INT 3
78299: PPUSH
78300: CALL_OW 12
78304: PUSH
78305: LD_INT 0
78307: PUSH
78308: LD_INT 0
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: ST_TO_ADDR
// animal := CreateHuman ;
78317: LD_ADDR_VAR 0 12
78321: PUSH
78322: CALL_OW 44
78326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78327: LD_VAR 0 12
78331: PPUSH
78332: LD_VAR 0 8
78336: PPUSH
78337: LD_INT 0
78339: PPUSH
78340: CALL 80119 0 3
// end ;
78344: GO 78242
78346: POP
78347: POP
// if enchidnas then
78348: LD_VAR 0 4
78352: IFFALSE 78419
// for i = 1 to enchidnas do
78354: LD_ADDR_VAR 0 11
78358: PUSH
78359: DOUBLE
78360: LD_INT 1
78362: DEC
78363: ST_TO_ADDR
78364: LD_VAR 0 4
78368: PUSH
78369: FOR_TO
78370: IFFALSE 78417
// begin hc_class = 13 ;
78372: LD_ADDR_OWVAR 28
78376: PUSH
78377: LD_INT 13
78379: ST_TO_ADDR
// hc_gallery =  ;
78380: LD_ADDR_OWVAR 33
78384: PUSH
78385: LD_STRING 
78387: ST_TO_ADDR
// animal := CreateHuman ;
78388: LD_ADDR_VAR 0 12
78392: PUSH
78393: CALL_OW 44
78397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78398: LD_VAR 0 12
78402: PPUSH
78403: LD_VAR 0 8
78407: PPUSH
78408: LD_INT 0
78410: PPUSH
78411: CALL 80119 0 3
// end ;
78415: GO 78369
78417: POP
78418: POP
// if fishes then
78419: LD_VAR 0 7
78423: IFFALSE 78490
// for i = 1 to fishes do
78425: LD_ADDR_VAR 0 11
78429: PUSH
78430: DOUBLE
78431: LD_INT 1
78433: DEC
78434: ST_TO_ADDR
78435: LD_VAR 0 7
78439: PUSH
78440: FOR_TO
78441: IFFALSE 78488
// begin hc_class = 20 ;
78443: LD_ADDR_OWVAR 28
78447: PUSH
78448: LD_INT 20
78450: ST_TO_ADDR
// hc_gallery =  ;
78451: LD_ADDR_OWVAR 33
78455: PUSH
78456: LD_STRING 
78458: ST_TO_ADDR
// animal := CreateHuman ;
78459: LD_ADDR_VAR 0 12
78463: PUSH
78464: CALL_OW 44
78468: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78469: LD_VAR 0 12
78473: PPUSH
78474: LD_VAR 0 9
78478: PPUSH
78479: LD_INT 0
78481: PPUSH
78482: CALL 80119 0 3
// end ;
78486: GO 78440
78488: POP
78489: POP
// end ;
78490: LD_VAR 0 10
78494: RET
// export function WantHeal ( sci , unit ) ; begin
78495: LD_INT 0
78497: PPUSH
// if GetTaskList ( sci ) > 0 then
78498: LD_VAR 0 1
78502: PPUSH
78503: CALL_OW 437
78507: PUSH
78508: LD_INT 0
78510: GREATER
78511: IFFALSE 78581
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78513: LD_VAR 0 1
78517: PPUSH
78518: CALL_OW 437
78522: PUSH
78523: LD_INT 1
78525: ARRAY
78526: PUSH
78527: LD_INT 1
78529: ARRAY
78530: PUSH
78531: LD_STRING l
78533: EQUAL
78534: PUSH
78535: LD_VAR 0 1
78539: PPUSH
78540: CALL_OW 437
78544: PUSH
78545: LD_INT 1
78547: ARRAY
78548: PUSH
78549: LD_INT 4
78551: ARRAY
78552: PUSH
78553: LD_VAR 0 2
78557: EQUAL
78558: AND
78559: IFFALSE 78571
// result := true else
78561: LD_ADDR_VAR 0 3
78565: PUSH
78566: LD_INT 1
78568: ST_TO_ADDR
78569: GO 78579
// result := false ;
78571: LD_ADDR_VAR 0 3
78575: PUSH
78576: LD_INT 0
78578: ST_TO_ADDR
// end else
78579: GO 78589
// result := false ;
78581: LD_ADDR_VAR 0 3
78585: PUSH
78586: LD_INT 0
78588: ST_TO_ADDR
// end ;
78589: LD_VAR 0 3
78593: RET
// export function HealTarget ( sci ) ; begin
78594: LD_INT 0
78596: PPUSH
// if not sci then
78597: LD_VAR 0 1
78601: NOT
78602: IFFALSE 78606
// exit ;
78604: GO 78671
// result := 0 ;
78606: LD_ADDR_VAR 0 2
78610: PUSH
78611: LD_INT 0
78613: ST_TO_ADDR
// if GetTaskList ( sci ) then
78614: LD_VAR 0 1
78618: PPUSH
78619: CALL_OW 437
78623: IFFALSE 78671
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78625: LD_VAR 0 1
78629: PPUSH
78630: CALL_OW 437
78634: PUSH
78635: LD_INT 1
78637: ARRAY
78638: PUSH
78639: LD_INT 1
78641: ARRAY
78642: PUSH
78643: LD_STRING l
78645: EQUAL
78646: IFFALSE 78671
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78648: LD_ADDR_VAR 0 2
78652: PUSH
78653: LD_VAR 0 1
78657: PPUSH
78658: CALL_OW 437
78662: PUSH
78663: LD_INT 1
78665: ARRAY
78666: PUSH
78667: LD_INT 4
78669: ARRAY
78670: ST_TO_ADDR
// end ;
78671: LD_VAR 0 2
78675: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78676: LD_INT 0
78678: PPUSH
78679: PPUSH
78680: PPUSH
78681: PPUSH
// if not base_units then
78682: LD_VAR 0 1
78686: NOT
78687: IFFALSE 78691
// exit ;
78689: GO 78778
// result := false ;
78691: LD_ADDR_VAR 0 2
78695: PUSH
78696: LD_INT 0
78698: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78699: LD_ADDR_VAR 0 5
78703: PUSH
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_INT 21
78711: PUSH
78712: LD_INT 3
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PPUSH
78719: CALL_OW 72
78723: ST_TO_ADDR
// if not tmp then
78724: LD_VAR 0 5
78728: NOT
78729: IFFALSE 78733
// exit ;
78731: GO 78778
// for i in tmp do
78733: LD_ADDR_VAR 0 3
78737: PUSH
78738: LD_VAR 0 5
78742: PUSH
78743: FOR_IN
78744: IFFALSE 78776
// begin result := EnemyInRange ( i , 22 ) ;
78746: LD_ADDR_VAR 0 2
78750: PUSH
78751: LD_VAR 0 3
78755: PPUSH
78756: LD_INT 22
78758: PPUSH
78759: CALL 76365 0 2
78763: ST_TO_ADDR
// if result then
78764: LD_VAR 0 2
78768: IFFALSE 78774
// exit ;
78770: POP
78771: POP
78772: GO 78778
// end ;
78774: GO 78743
78776: POP
78777: POP
// end ;
78778: LD_VAR 0 2
78782: RET
// export function FilterByTag ( units , tag ) ; begin
78783: LD_INT 0
78785: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78786: LD_ADDR_VAR 0 3
78790: PUSH
78791: LD_VAR 0 1
78795: PPUSH
78796: LD_INT 120
78798: PUSH
78799: LD_VAR 0 2
78803: PUSH
78804: EMPTY
78805: LIST
78806: LIST
78807: PPUSH
78808: CALL_OW 72
78812: ST_TO_ADDR
// end ;
78813: LD_VAR 0 3
78817: RET
// export function IsDriver ( un ) ; begin
78818: LD_INT 0
78820: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78821: LD_ADDR_VAR 0 2
78825: PUSH
78826: LD_VAR 0 1
78830: PUSH
78831: LD_INT 55
78833: PUSH
78834: EMPTY
78835: LIST
78836: PPUSH
78837: CALL_OW 69
78841: IN
78842: ST_TO_ADDR
// end ;
78843: LD_VAR 0 2
78847: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78848: LD_INT 0
78850: PPUSH
78851: PPUSH
// list := [ ] ;
78852: LD_ADDR_VAR 0 5
78856: PUSH
78857: EMPTY
78858: ST_TO_ADDR
// case d of 0 :
78859: LD_VAR 0 3
78863: PUSH
78864: LD_INT 0
78866: DOUBLE
78867: EQUAL
78868: IFTRUE 78872
78870: GO 79005
78872: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78873: LD_ADDR_VAR 0 5
78877: PUSH
78878: LD_VAR 0 1
78882: PUSH
78883: LD_INT 4
78885: MINUS
78886: PUSH
78887: LD_VAR 0 2
78891: PUSH
78892: LD_INT 4
78894: MINUS
78895: PUSH
78896: LD_INT 2
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: LIST
78903: PUSH
78904: LD_VAR 0 1
78908: PUSH
78909: LD_INT 3
78911: MINUS
78912: PUSH
78913: LD_VAR 0 2
78917: PUSH
78918: LD_INT 1
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: LIST
78925: PUSH
78926: LD_VAR 0 1
78930: PUSH
78931: LD_INT 4
78933: PLUS
78934: PUSH
78935: LD_VAR 0 2
78939: PUSH
78940: LD_INT 4
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: LIST
78947: PUSH
78948: LD_VAR 0 1
78952: PUSH
78953: LD_INT 3
78955: PLUS
78956: PUSH
78957: LD_VAR 0 2
78961: PUSH
78962: LD_INT 3
78964: PLUS
78965: PUSH
78966: LD_INT 5
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: LIST
78973: PUSH
78974: LD_VAR 0 1
78978: PUSH
78979: LD_VAR 0 2
78983: PUSH
78984: LD_INT 4
78986: PLUS
78987: PUSH
78988: LD_INT 0
78990: PUSH
78991: EMPTY
78992: LIST
78993: LIST
78994: LIST
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: ST_TO_ADDR
// end ; 1 :
79003: GO 79703
79005: LD_INT 1
79007: DOUBLE
79008: EQUAL
79009: IFTRUE 79013
79011: GO 79146
79013: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79014: LD_ADDR_VAR 0 5
79018: PUSH
79019: LD_VAR 0 1
79023: PUSH
79024: LD_VAR 0 2
79028: PUSH
79029: LD_INT 4
79031: MINUS
79032: PUSH
79033: LD_INT 3
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: LIST
79040: PUSH
79041: LD_VAR 0 1
79045: PUSH
79046: LD_INT 3
79048: MINUS
79049: PUSH
79050: LD_VAR 0 2
79054: PUSH
79055: LD_INT 3
79057: MINUS
79058: PUSH
79059: LD_INT 2
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: LIST
79066: PUSH
79067: LD_VAR 0 1
79071: PUSH
79072: LD_INT 4
79074: MINUS
79075: PUSH
79076: LD_VAR 0 2
79080: PUSH
79081: LD_INT 1
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: LIST
79088: PUSH
79089: LD_VAR 0 1
79093: PUSH
79094: LD_VAR 0 2
79098: PUSH
79099: LD_INT 3
79101: PLUS
79102: PUSH
79103: LD_INT 0
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: LIST
79110: PUSH
79111: LD_VAR 0 1
79115: PUSH
79116: LD_INT 4
79118: PLUS
79119: PUSH
79120: LD_VAR 0 2
79124: PUSH
79125: LD_INT 4
79127: PLUS
79128: PUSH
79129: LD_INT 5
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: LIST
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: LIST
79141: LIST
79142: LIST
79143: ST_TO_ADDR
// end ; 2 :
79144: GO 79703
79146: LD_INT 2
79148: DOUBLE
79149: EQUAL
79150: IFTRUE 79154
79152: GO 79283
79154: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79155: LD_ADDR_VAR 0 5
79159: PUSH
79160: LD_VAR 0 1
79164: PUSH
79165: LD_VAR 0 2
79169: PUSH
79170: LD_INT 3
79172: MINUS
79173: PUSH
79174: LD_INT 3
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: LIST
79181: PUSH
79182: LD_VAR 0 1
79186: PUSH
79187: LD_INT 4
79189: PLUS
79190: PUSH
79191: LD_VAR 0 2
79195: PUSH
79196: LD_INT 4
79198: PUSH
79199: EMPTY
79200: LIST
79201: LIST
79202: LIST
79203: PUSH
79204: LD_VAR 0 1
79208: PUSH
79209: LD_VAR 0 2
79213: PUSH
79214: LD_INT 4
79216: PLUS
79217: PUSH
79218: LD_INT 0
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: LIST
79225: PUSH
79226: LD_VAR 0 1
79230: PUSH
79231: LD_INT 3
79233: MINUS
79234: PUSH
79235: LD_VAR 0 2
79239: PUSH
79240: LD_INT 1
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: LIST
79247: PUSH
79248: LD_VAR 0 1
79252: PUSH
79253: LD_INT 4
79255: MINUS
79256: PUSH
79257: LD_VAR 0 2
79261: PUSH
79262: LD_INT 4
79264: MINUS
79265: PUSH
79266: LD_INT 2
79268: PUSH
79269: EMPTY
79270: LIST
79271: LIST
79272: LIST
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: LIST
79278: LIST
79279: LIST
79280: ST_TO_ADDR
// end ; 3 :
79281: GO 79703
79283: LD_INT 3
79285: DOUBLE
79286: EQUAL
79287: IFTRUE 79291
79289: GO 79424
79291: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79292: LD_ADDR_VAR 0 5
79296: PUSH
79297: LD_VAR 0 1
79301: PUSH
79302: LD_INT 3
79304: PLUS
79305: PUSH
79306: LD_VAR 0 2
79310: PUSH
79311: LD_INT 4
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: LIST
79318: PUSH
79319: LD_VAR 0 1
79323: PUSH
79324: LD_INT 4
79326: PLUS
79327: PUSH
79328: LD_VAR 0 2
79332: PUSH
79333: LD_INT 4
79335: PLUS
79336: PUSH
79337: LD_INT 5
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: LIST
79344: PUSH
79345: LD_VAR 0 1
79349: PUSH
79350: LD_INT 4
79352: MINUS
79353: PUSH
79354: LD_VAR 0 2
79358: PUSH
79359: LD_INT 1
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: LIST
79366: PUSH
79367: LD_VAR 0 1
79371: PUSH
79372: LD_VAR 0 2
79376: PUSH
79377: LD_INT 4
79379: MINUS
79380: PUSH
79381: LD_INT 3
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: LIST
79388: PUSH
79389: LD_VAR 0 1
79393: PUSH
79394: LD_INT 3
79396: MINUS
79397: PUSH
79398: LD_VAR 0 2
79402: PUSH
79403: LD_INT 3
79405: MINUS
79406: PUSH
79407: LD_INT 2
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: LIST
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: LIST
79419: LIST
79420: LIST
79421: ST_TO_ADDR
// end ; 4 :
79422: GO 79703
79424: LD_INT 4
79426: DOUBLE
79427: EQUAL
79428: IFTRUE 79432
79430: GO 79565
79432: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79433: LD_ADDR_VAR 0 5
79437: PUSH
79438: LD_VAR 0 1
79442: PUSH
79443: LD_VAR 0 2
79447: PUSH
79448: LD_INT 4
79450: PLUS
79451: PUSH
79452: LD_INT 0
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: LIST
79459: PUSH
79460: LD_VAR 0 1
79464: PUSH
79465: LD_INT 3
79467: PLUS
79468: PUSH
79469: LD_VAR 0 2
79473: PUSH
79474: LD_INT 3
79476: PLUS
79477: PUSH
79478: LD_INT 5
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: LIST
79485: PUSH
79486: LD_VAR 0 1
79490: PUSH
79491: LD_INT 4
79493: PLUS
79494: PUSH
79495: LD_VAR 0 2
79499: PUSH
79500: LD_INT 4
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: LIST
79507: PUSH
79508: LD_VAR 0 1
79512: PUSH
79513: LD_VAR 0 2
79517: PUSH
79518: LD_INT 3
79520: MINUS
79521: PUSH
79522: LD_INT 3
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: LIST
79529: PUSH
79530: LD_VAR 0 1
79534: PUSH
79535: LD_INT 4
79537: MINUS
79538: PUSH
79539: LD_VAR 0 2
79543: PUSH
79544: LD_INT 4
79546: MINUS
79547: PUSH
79548: LD_INT 2
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: LIST
79555: PUSH
79556: EMPTY
79557: LIST
79558: LIST
79559: LIST
79560: LIST
79561: LIST
79562: ST_TO_ADDR
// end ; 5 :
79563: GO 79703
79565: LD_INT 5
79567: DOUBLE
79568: EQUAL
79569: IFTRUE 79573
79571: GO 79702
79573: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79574: LD_ADDR_VAR 0 5
79578: PUSH
79579: LD_VAR 0 1
79583: PUSH
79584: LD_INT 4
79586: MINUS
79587: PUSH
79588: LD_VAR 0 2
79592: PUSH
79593: LD_INT 1
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: LIST
79600: PUSH
79601: LD_VAR 0 1
79605: PUSH
79606: LD_VAR 0 2
79610: PUSH
79611: LD_INT 4
79613: MINUS
79614: PUSH
79615: LD_INT 3
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: LIST
79622: PUSH
79623: LD_VAR 0 1
79627: PUSH
79628: LD_INT 4
79630: PLUS
79631: PUSH
79632: LD_VAR 0 2
79636: PUSH
79637: LD_INT 4
79639: PLUS
79640: PUSH
79641: LD_INT 5
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: LIST
79648: PUSH
79649: LD_VAR 0 1
79653: PUSH
79654: LD_INT 3
79656: PLUS
79657: PUSH
79658: LD_VAR 0 2
79662: PUSH
79663: LD_INT 4
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: LIST
79670: PUSH
79671: LD_VAR 0 1
79675: PUSH
79676: LD_VAR 0 2
79680: PUSH
79681: LD_INT 3
79683: PLUS
79684: PUSH
79685: LD_INT 0
79687: PUSH
79688: EMPTY
79689: LIST
79690: LIST
79691: LIST
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: ST_TO_ADDR
// end ; end ;
79700: GO 79703
79702: POP
// result := list ;
79703: LD_ADDR_VAR 0 4
79707: PUSH
79708: LD_VAR 0 5
79712: ST_TO_ADDR
// end ;
79713: LD_VAR 0 4
79717: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79718: LD_INT 0
79720: PPUSH
79721: PPUSH
79722: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79723: LD_VAR 0 1
79727: NOT
79728: PUSH
79729: LD_VAR 0 2
79733: PUSH
79734: LD_INT 1
79736: PUSH
79737: LD_INT 2
79739: PUSH
79740: LD_INT 3
79742: PUSH
79743: LD_INT 4
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: LIST
79750: LIST
79751: IN
79752: NOT
79753: OR
79754: IFFALSE 79758
// exit ;
79756: GO 79841
// tmp := [ ] ;
79758: LD_ADDR_VAR 0 5
79762: PUSH
79763: EMPTY
79764: ST_TO_ADDR
// for i in units do
79765: LD_ADDR_VAR 0 4
79769: PUSH
79770: LD_VAR 0 1
79774: PUSH
79775: FOR_IN
79776: IFFALSE 79810
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79778: LD_ADDR_VAR 0 5
79782: PUSH
79783: LD_VAR 0 5
79787: PPUSH
79788: LD_VAR 0 4
79792: PPUSH
79793: LD_VAR 0 2
79797: PPUSH
79798: CALL_OW 259
79802: PPUSH
79803: CALL 81202 0 2
79807: ST_TO_ADDR
79808: GO 79775
79810: POP
79811: POP
// if not tmp then
79812: LD_VAR 0 5
79816: NOT
79817: IFFALSE 79821
// exit ;
79819: GO 79841
// result := SortListByListDesc ( units , tmp ) ;
79821: LD_ADDR_VAR 0 3
79825: PUSH
79826: LD_VAR 0 1
79830: PPUSH
79831: LD_VAR 0 5
79835: PPUSH
79836: CALL_OW 77
79840: ST_TO_ADDR
// end ;
79841: LD_VAR 0 3
79845: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79846: LD_INT 0
79848: PPUSH
79849: PPUSH
79850: PPUSH
// result := false ;
79851: LD_ADDR_VAR 0 3
79855: PUSH
79856: LD_INT 0
79858: ST_TO_ADDR
// if not building then
79859: LD_VAR 0 2
79863: NOT
79864: IFFALSE 79868
// exit ;
79866: GO 80006
// x := GetX ( building ) ;
79868: LD_ADDR_VAR 0 4
79872: PUSH
79873: LD_VAR 0 2
79877: PPUSH
79878: CALL_OW 250
79882: ST_TO_ADDR
// y := GetY ( building ) ;
79883: LD_ADDR_VAR 0 5
79887: PUSH
79888: LD_VAR 0 2
79892: PPUSH
79893: CALL_OW 251
79897: ST_TO_ADDR
// if not x or not y then
79898: LD_VAR 0 4
79902: NOT
79903: PUSH
79904: LD_VAR 0 5
79908: NOT
79909: OR
79910: IFFALSE 79914
// exit ;
79912: GO 80006
// if GetTaskList ( unit ) then
79914: LD_VAR 0 1
79918: PPUSH
79919: CALL_OW 437
79923: IFFALSE 80006
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79925: LD_STRING e
79927: PUSH
79928: LD_VAR 0 1
79932: PPUSH
79933: CALL_OW 437
79937: PUSH
79938: LD_INT 1
79940: ARRAY
79941: PUSH
79942: LD_INT 1
79944: ARRAY
79945: EQUAL
79946: PUSH
79947: LD_VAR 0 4
79951: PUSH
79952: LD_VAR 0 1
79956: PPUSH
79957: CALL_OW 437
79961: PUSH
79962: LD_INT 1
79964: ARRAY
79965: PUSH
79966: LD_INT 2
79968: ARRAY
79969: EQUAL
79970: AND
79971: PUSH
79972: LD_VAR 0 5
79976: PUSH
79977: LD_VAR 0 1
79981: PPUSH
79982: CALL_OW 437
79986: PUSH
79987: LD_INT 1
79989: ARRAY
79990: PUSH
79991: LD_INT 3
79993: ARRAY
79994: EQUAL
79995: AND
79996: IFFALSE 80006
// result := true end ;
79998: LD_ADDR_VAR 0 3
80002: PUSH
80003: LD_INT 1
80005: ST_TO_ADDR
// end ;
80006: LD_VAR 0 3
80010: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80011: LD_INT 0
80013: PPUSH
// result := false ;
80014: LD_ADDR_VAR 0 4
80018: PUSH
80019: LD_INT 0
80021: ST_TO_ADDR
// if GetTaskList ( unit ) then
80022: LD_VAR 0 1
80026: PPUSH
80027: CALL_OW 437
80031: IFFALSE 80114
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80033: LD_STRING M
80035: PUSH
80036: LD_VAR 0 1
80040: PPUSH
80041: CALL_OW 437
80045: PUSH
80046: LD_INT 1
80048: ARRAY
80049: PUSH
80050: LD_INT 1
80052: ARRAY
80053: EQUAL
80054: PUSH
80055: LD_VAR 0 2
80059: PUSH
80060: LD_VAR 0 1
80064: PPUSH
80065: CALL_OW 437
80069: PUSH
80070: LD_INT 1
80072: ARRAY
80073: PUSH
80074: LD_INT 2
80076: ARRAY
80077: EQUAL
80078: AND
80079: PUSH
80080: LD_VAR 0 3
80084: PUSH
80085: LD_VAR 0 1
80089: PPUSH
80090: CALL_OW 437
80094: PUSH
80095: LD_INT 1
80097: ARRAY
80098: PUSH
80099: LD_INT 3
80101: ARRAY
80102: EQUAL
80103: AND
80104: IFFALSE 80114
// result := true ;
80106: LD_ADDR_VAR 0 4
80110: PUSH
80111: LD_INT 1
80113: ST_TO_ADDR
// end ; end ;
80114: LD_VAR 0 4
80118: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80119: LD_INT 0
80121: PPUSH
80122: PPUSH
80123: PPUSH
80124: PPUSH
// if not unit or not area then
80125: LD_VAR 0 1
80129: NOT
80130: PUSH
80131: LD_VAR 0 2
80135: NOT
80136: OR
80137: IFFALSE 80141
// exit ;
80139: GO 80305
// tmp := AreaToList ( area , i ) ;
80141: LD_ADDR_VAR 0 6
80145: PUSH
80146: LD_VAR 0 2
80150: PPUSH
80151: LD_VAR 0 5
80155: PPUSH
80156: CALL_OW 517
80160: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80161: LD_ADDR_VAR 0 5
80165: PUSH
80166: DOUBLE
80167: LD_INT 1
80169: DEC
80170: ST_TO_ADDR
80171: LD_VAR 0 6
80175: PUSH
80176: LD_INT 1
80178: ARRAY
80179: PUSH
80180: FOR_TO
80181: IFFALSE 80303
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80183: LD_ADDR_VAR 0 7
80187: PUSH
80188: LD_VAR 0 6
80192: PUSH
80193: LD_INT 1
80195: ARRAY
80196: PUSH
80197: LD_VAR 0 5
80201: ARRAY
80202: PUSH
80203: LD_VAR 0 6
80207: PUSH
80208: LD_INT 2
80210: ARRAY
80211: PUSH
80212: LD_VAR 0 5
80216: ARRAY
80217: PUSH
80218: EMPTY
80219: LIST
80220: LIST
80221: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80222: LD_VAR 0 7
80226: PUSH
80227: LD_INT 1
80229: ARRAY
80230: PPUSH
80231: LD_VAR 0 7
80235: PUSH
80236: LD_INT 2
80238: ARRAY
80239: PPUSH
80240: CALL_OW 428
80244: PUSH
80245: LD_INT 0
80247: EQUAL
80248: IFFALSE 80301
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80250: LD_VAR 0 1
80254: PPUSH
80255: LD_VAR 0 7
80259: PUSH
80260: LD_INT 1
80262: ARRAY
80263: PPUSH
80264: LD_VAR 0 7
80268: PUSH
80269: LD_INT 2
80271: ARRAY
80272: PPUSH
80273: LD_VAR 0 3
80277: PPUSH
80278: CALL_OW 48
// result := IsPlaced ( unit ) ;
80282: LD_ADDR_VAR 0 4
80286: PUSH
80287: LD_VAR 0 1
80291: PPUSH
80292: CALL_OW 305
80296: ST_TO_ADDR
// exit ;
80297: POP
80298: POP
80299: GO 80305
// end ; end ;
80301: GO 80180
80303: POP
80304: POP
// end ;
80305: LD_VAR 0 4
80309: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80310: LD_INT 0
80312: PPUSH
80313: PPUSH
80314: PPUSH
// if not side or side > 8 then
80315: LD_VAR 0 1
80319: NOT
80320: PUSH
80321: LD_VAR 0 1
80325: PUSH
80326: LD_INT 8
80328: GREATER
80329: OR
80330: IFFALSE 80334
// exit ;
80332: GO 80521
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80334: LD_ADDR_VAR 0 4
80338: PUSH
80339: LD_INT 22
80341: PUSH
80342: LD_VAR 0 1
80346: PUSH
80347: EMPTY
80348: LIST
80349: LIST
80350: PUSH
80351: LD_INT 21
80353: PUSH
80354: LD_INT 3
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PPUSH
80365: CALL_OW 69
80369: ST_TO_ADDR
// if not tmp then
80370: LD_VAR 0 4
80374: NOT
80375: IFFALSE 80379
// exit ;
80377: GO 80521
// enable_addtolog := true ;
80379: LD_ADDR_OWVAR 81
80383: PUSH
80384: LD_INT 1
80386: ST_TO_ADDR
// AddToLog ( [ ) ;
80387: LD_STRING [
80389: PPUSH
80390: CALL_OW 561
// for i in tmp do
80394: LD_ADDR_VAR 0 3
80398: PUSH
80399: LD_VAR 0 4
80403: PUSH
80404: FOR_IN
80405: IFFALSE 80512
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80407: LD_STRING [
80409: PUSH
80410: LD_VAR 0 3
80414: PPUSH
80415: CALL_OW 266
80419: STR
80420: PUSH
80421: LD_STRING , 
80423: STR
80424: PUSH
80425: LD_VAR 0 3
80429: PPUSH
80430: CALL_OW 250
80434: STR
80435: PUSH
80436: LD_STRING , 
80438: STR
80439: PUSH
80440: LD_VAR 0 3
80444: PPUSH
80445: CALL_OW 251
80449: STR
80450: PUSH
80451: LD_STRING , 
80453: STR
80454: PUSH
80455: LD_VAR 0 3
80459: PPUSH
80460: CALL_OW 254
80464: STR
80465: PUSH
80466: LD_STRING , 
80468: STR
80469: PUSH
80470: LD_VAR 0 3
80474: PPUSH
80475: LD_INT 1
80477: PPUSH
80478: CALL_OW 268
80482: STR
80483: PUSH
80484: LD_STRING , 
80486: STR
80487: PUSH
80488: LD_VAR 0 3
80492: PPUSH
80493: LD_INT 2
80495: PPUSH
80496: CALL_OW 268
80500: STR
80501: PUSH
80502: LD_STRING ],
80504: STR
80505: PPUSH
80506: CALL_OW 561
// end ;
80510: GO 80404
80512: POP
80513: POP
// AddToLog ( ]; ) ;
80514: LD_STRING ];
80516: PPUSH
80517: CALL_OW 561
// end ;
80521: LD_VAR 0 2
80525: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80526: LD_INT 0
80528: PPUSH
80529: PPUSH
80530: PPUSH
80531: PPUSH
80532: PPUSH
// if not area or not rate or not max then
80533: LD_VAR 0 1
80537: NOT
80538: PUSH
80539: LD_VAR 0 2
80543: NOT
80544: OR
80545: PUSH
80546: LD_VAR 0 4
80550: NOT
80551: OR
80552: IFFALSE 80556
// exit ;
80554: GO 80745
// while 1 do
80556: LD_INT 1
80558: IFFALSE 80745
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80560: LD_ADDR_VAR 0 9
80564: PUSH
80565: LD_VAR 0 1
80569: PPUSH
80570: LD_INT 1
80572: PPUSH
80573: CALL_OW 287
80577: PUSH
80578: LD_INT 10
80580: MUL
80581: ST_TO_ADDR
// r := rate / 10 ;
80582: LD_ADDR_VAR 0 7
80586: PUSH
80587: LD_VAR 0 2
80591: PUSH
80592: LD_INT 10
80594: DIVREAL
80595: ST_TO_ADDR
// time := 1 1$00 ;
80596: LD_ADDR_VAR 0 8
80600: PUSH
80601: LD_INT 2100
80603: ST_TO_ADDR
// if amount < min then
80604: LD_VAR 0 9
80608: PUSH
80609: LD_VAR 0 3
80613: LESS
80614: IFFALSE 80632
// r := r * 2 else
80616: LD_ADDR_VAR 0 7
80620: PUSH
80621: LD_VAR 0 7
80625: PUSH
80626: LD_INT 2
80628: MUL
80629: ST_TO_ADDR
80630: GO 80658
// if amount > max then
80632: LD_VAR 0 9
80636: PUSH
80637: LD_VAR 0 4
80641: GREATER
80642: IFFALSE 80658
// r := r / 2 ;
80644: LD_ADDR_VAR 0 7
80648: PUSH
80649: LD_VAR 0 7
80653: PUSH
80654: LD_INT 2
80656: DIVREAL
80657: ST_TO_ADDR
// time := time / r ;
80658: LD_ADDR_VAR 0 8
80662: PUSH
80663: LD_VAR 0 8
80667: PUSH
80668: LD_VAR 0 7
80672: DIVREAL
80673: ST_TO_ADDR
// if time < 0 then
80674: LD_VAR 0 8
80678: PUSH
80679: LD_INT 0
80681: LESS
80682: IFFALSE 80699
// time := time * - 1 ;
80684: LD_ADDR_VAR 0 8
80688: PUSH
80689: LD_VAR 0 8
80693: PUSH
80694: LD_INT 1
80696: NEG
80697: MUL
80698: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80699: LD_VAR 0 8
80703: PUSH
80704: LD_INT 35
80706: PPUSH
80707: LD_INT 875
80709: PPUSH
80710: CALL_OW 12
80714: PLUS
80715: PPUSH
80716: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80720: LD_INT 1
80722: PPUSH
80723: LD_INT 5
80725: PPUSH
80726: CALL_OW 12
80730: PPUSH
80731: LD_VAR 0 1
80735: PPUSH
80736: LD_INT 1
80738: PPUSH
80739: CALL_OW 55
// end ;
80743: GO 80556
// end ;
80745: LD_VAR 0 5
80749: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80750: LD_INT 0
80752: PPUSH
80753: PPUSH
80754: PPUSH
80755: PPUSH
80756: PPUSH
80757: PPUSH
80758: PPUSH
80759: PPUSH
// if not turrets or not factories then
80760: LD_VAR 0 1
80764: NOT
80765: PUSH
80766: LD_VAR 0 2
80770: NOT
80771: OR
80772: IFFALSE 80776
// exit ;
80774: GO 81083
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80776: LD_ADDR_VAR 0 10
80780: PUSH
80781: LD_INT 5
80783: PUSH
80784: LD_INT 6
80786: PUSH
80787: EMPTY
80788: LIST
80789: LIST
80790: PUSH
80791: LD_INT 2
80793: PUSH
80794: LD_INT 4
80796: PUSH
80797: EMPTY
80798: LIST
80799: LIST
80800: PUSH
80801: LD_INT 3
80803: PUSH
80804: LD_INT 5
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: LIST
80815: PUSH
80816: LD_INT 24
80818: PUSH
80819: LD_INT 25
80821: PUSH
80822: EMPTY
80823: LIST
80824: LIST
80825: PUSH
80826: LD_INT 23
80828: PUSH
80829: LD_INT 27
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: PUSH
80840: LD_INT 42
80842: PUSH
80843: LD_INT 43
80845: PUSH
80846: EMPTY
80847: LIST
80848: LIST
80849: PUSH
80850: LD_INT 44
80852: PUSH
80853: LD_INT 46
80855: PUSH
80856: EMPTY
80857: LIST
80858: LIST
80859: PUSH
80860: LD_INT 45
80862: PUSH
80863: LD_INT 47
80865: PUSH
80866: EMPTY
80867: LIST
80868: LIST
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: LIST
80874: PUSH
80875: EMPTY
80876: LIST
80877: LIST
80878: LIST
80879: ST_TO_ADDR
// result := [ ] ;
80880: LD_ADDR_VAR 0 3
80884: PUSH
80885: EMPTY
80886: ST_TO_ADDR
// for i in turrets do
80887: LD_ADDR_VAR 0 4
80891: PUSH
80892: LD_VAR 0 1
80896: PUSH
80897: FOR_IN
80898: IFFALSE 81081
// begin nat := GetNation ( i ) ;
80900: LD_ADDR_VAR 0 7
80904: PUSH
80905: LD_VAR 0 4
80909: PPUSH
80910: CALL_OW 248
80914: ST_TO_ADDR
// weapon := 0 ;
80915: LD_ADDR_VAR 0 8
80919: PUSH
80920: LD_INT 0
80922: ST_TO_ADDR
// if not nat then
80923: LD_VAR 0 7
80927: NOT
80928: IFFALSE 80932
// continue ;
80930: GO 80897
// for j in list [ nat ] do
80932: LD_ADDR_VAR 0 5
80936: PUSH
80937: LD_VAR 0 10
80941: PUSH
80942: LD_VAR 0 7
80946: ARRAY
80947: PUSH
80948: FOR_IN
80949: IFFALSE 80990
// if GetBWeapon ( i ) = j [ 1 ] then
80951: LD_VAR 0 4
80955: PPUSH
80956: CALL_OW 269
80960: PUSH
80961: LD_VAR 0 5
80965: PUSH
80966: LD_INT 1
80968: ARRAY
80969: EQUAL
80970: IFFALSE 80988
// begin weapon := j [ 2 ] ;
80972: LD_ADDR_VAR 0 8
80976: PUSH
80977: LD_VAR 0 5
80981: PUSH
80982: LD_INT 2
80984: ARRAY
80985: ST_TO_ADDR
// break ;
80986: GO 80990
// end ;
80988: GO 80948
80990: POP
80991: POP
// if not weapon then
80992: LD_VAR 0 8
80996: NOT
80997: IFFALSE 81001
// continue ;
80999: GO 80897
// for k in factories do
81001: LD_ADDR_VAR 0 6
81005: PUSH
81006: LD_VAR 0 2
81010: PUSH
81011: FOR_IN
81012: IFFALSE 81077
// begin weapons := AvailableWeaponList ( k ) ;
81014: LD_ADDR_VAR 0 9
81018: PUSH
81019: LD_VAR 0 6
81023: PPUSH
81024: CALL_OW 478
81028: ST_TO_ADDR
// if not weapons then
81029: LD_VAR 0 9
81033: NOT
81034: IFFALSE 81038
// continue ;
81036: GO 81011
// if weapon in weapons then
81038: LD_VAR 0 8
81042: PUSH
81043: LD_VAR 0 9
81047: IN
81048: IFFALSE 81075
// begin result := [ i , weapon ] ;
81050: LD_ADDR_VAR 0 3
81054: PUSH
81055: LD_VAR 0 4
81059: PUSH
81060: LD_VAR 0 8
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: ST_TO_ADDR
// exit ;
81069: POP
81070: POP
81071: POP
81072: POP
81073: GO 81083
// end ; end ;
81075: GO 81011
81077: POP
81078: POP
// end ;
81079: GO 80897
81081: POP
81082: POP
// end ;
81083: LD_VAR 0 3
81087: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81088: LD_INT 0
81090: PPUSH
// if not side or side > 8 then
81091: LD_VAR 0 3
81095: NOT
81096: PUSH
81097: LD_VAR 0 3
81101: PUSH
81102: LD_INT 8
81104: GREATER
81105: OR
81106: IFFALSE 81110
// exit ;
81108: GO 81169
// if not range then
81110: LD_VAR 0 4
81114: NOT
81115: IFFALSE 81126
// range := - 12 ;
81117: LD_ADDR_VAR 0 4
81121: PUSH
81122: LD_INT 12
81124: NEG
81125: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81126: LD_VAR 0 1
81130: PPUSH
81131: LD_VAR 0 2
81135: PPUSH
81136: LD_VAR 0 3
81140: PPUSH
81141: LD_VAR 0 4
81145: PPUSH
81146: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81150: LD_VAR 0 1
81154: PPUSH
81155: LD_VAR 0 2
81159: PPUSH
81160: LD_VAR 0 3
81164: PPUSH
81165: CALL_OW 331
// end ;
81169: LD_VAR 0 5
81173: RET
// export function Video ( mode ) ; begin
81174: LD_INT 0
81176: PPUSH
// ingame_video = mode ;
81177: LD_ADDR_OWVAR 52
81181: PUSH
81182: LD_VAR 0 1
81186: ST_TO_ADDR
// interface_hidden = mode ;
81187: LD_ADDR_OWVAR 54
81191: PUSH
81192: LD_VAR 0 1
81196: ST_TO_ADDR
// end ;
81197: LD_VAR 0 2
81201: RET
// export function Join ( array , element ) ; begin
81202: LD_INT 0
81204: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81205: LD_ADDR_VAR 0 3
81209: PUSH
81210: LD_VAR 0 1
81214: PPUSH
81215: LD_VAR 0 1
81219: PUSH
81220: LD_INT 1
81222: PLUS
81223: PPUSH
81224: LD_VAR 0 2
81228: PPUSH
81229: CALL_OW 1
81233: ST_TO_ADDR
// end ;
81234: LD_VAR 0 3
81238: RET
// export function JoinUnion ( array , element ) ; begin
81239: LD_INT 0
81241: PPUSH
// result := array union element ;
81242: LD_ADDR_VAR 0 3
81246: PUSH
81247: LD_VAR 0 1
81251: PUSH
81252: LD_VAR 0 2
81256: UNION
81257: ST_TO_ADDR
// end ;
81258: LD_VAR 0 3
81262: RET
// export function GetBehemoths ( side ) ; begin
81263: LD_INT 0
81265: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81266: LD_ADDR_VAR 0 2
81270: PUSH
81271: LD_INT 22
81273: PUSH
81274: LD_VAR 0 1
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: PUSH
81283: LD_INT 31
81285: PUSH
81286: LD_INT 25
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: PPUSH
81297: CALL_OW 69
81301: ST_TO_ADDR
// end ;
81302: LD_VAR 0 2
81306: RET
// export function Shuffle ( array ) ; var i , index ; begin
81307: LD_INT 0
81309: PPUSH
81310: PPUSH
81311: PPUSH
// result := [ ] ;
81312: LD_ADDR_VAR 0 2
81316: PUSH
81317: EMPTY
81318: ST_TO_ADDR
// if not array then
81319: LD_VAR 0 1
81323: NOT
81324: IFFALSE 81328
// exit ;
81326: GO 81427
// Randomize ;
81328: CALL_OW 10
// for i = array downto 1 do
81332: LD_ADDR_VAR 0 3
81336: PUSH
81337: DOUBLE
81338: LD_VAR 0 1
81342: INC
81343: ST_TO_ADDR
81344: LD_INT 1
81346: PUSH
81347: FOR_DOWNTO
81348: IFFALSE 81425
// begin index := rand ( 1 , array ) ;
81350: LD_ADDR_VAR 0 4
81354: PUSH
81355: LD_INT 1
81357: PPUSH
81358: LD_VAR 0 1
81362: PPUSH
81363: CALL_OW 12
81367: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81368: LD_ADDR_VAR 0 2
81372: PUSH
81373: LD_VAR 0 2
81377: PPUSH
81378: LD_VAR 0 2
81382: PUSH
81383: LD_INT 1
81385: PLUS
81386: PPUSH
81387: LD_VAR 0 1
81391: PUSH
81392: LD_VAR 0 4
81396: ARRAY
81397: PPUSH
81398: CALL_OW 2
81402: ST_TO_ADDR
// array := Delete ( array , index ) ;
81403: LD_ADDR_VAR 0 1
81407: PUSH
81408: LD_VAR 0 1
81412: PPUSH
81413: LD_VAR 0 4
81417: PPUSH
81418: CALL_OW 3
81422: ST_TO_ADDR
// end ;
81423: GO 81347
81425: POP
81426: POP
// end ;
81427: LD_VAR 0 2
81431: RET
// export function GetBaseMaterials ( base ) ; begin
81432: LD_INT 0
81434: PPUSH
// result := [ 0 , 0 , 0 ] ;
81435: LD_ADDR_VAR 0 2
81439: PUSH
81440: LD_INT 0
81442: PUSH
81443: LD_INT 0
81445: PUSH
81446: LD_INT 0
81448: PUSH
81449: EMPTY
81450: LIST
81451: LIST
81452: LIST
81453: ST_TO_ADDR
// if not base then
81454: LD_VAR 0 1
81458: NOT
81459: IFFALSE 81463
// exit ;
81461: GO 81512
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81463: LD_ADDR_VAR 0 2
81467: PUSH
81468: LD_VAR 0 1
81472: PPUSH
81473: LD_INT 1
81475: PPUSH
81476: CALL_OW 275
81480: PUSH
81481: LD_VAR 0 1
81485: PPUSH
81486: LD_INT 2
81488: PPUSH
81489: CALL_OW 275
81493: PUSH
81494: LD_VAR 0 1
81498: PPUSH
81499: LD_INT 3
81501: PPUSH
81502: CALL_OW 275
81506: PUSH
81507: EMPTY
81508: LIST
81509: LIST
81510: LIST
81511: ST_TO_ADDR
// end ;
81512: LD_VAR 0 2
81516: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81517: LD_INT 0
81519: PPUSH
81520: PPUSH
// result := array ;
81521: LD_ADDR_VAR 0 3
81525: PUSH
81526: LD_VAR 0 1
81530: ST_TO_ADDR
// if size >= result then
81531: LD_VAR 0 2
81535: PUSH
81536: LD_VAR 0 3
81540: GREATEREQUAL
81541: IFFALSE 81545
// exit ;
81543: GO 81595
// if size then
81545: LD_VAR 0 2
81549: IFFALSE 81595
// for i := array downto size do
81551: LD_ADDR_VAR 0 4
81555: PUSH
81556: DOUBLE
81557: LD_VAR 0 1
81561: INC
81562: ST_TO_ADDR
81563: LD_VAR 0 2
81567: PUSH
81568: FOR_DOWNTO
81569: IFFALSE 81593
// result := Delete ( result , result ) ;
81571: LD_ADDR_VAR 0 3
81575: PUSH
81576: LD_VAR 0 3
81580: PPUSH
81581: LD_VAR 0 3
81585: PPUSH
81586: CALL_OW 3
81590: ST_TO_ADDR
81591: GO 81568
81593: POP
81594: POP
// end ;
81595: LD_VAR 0 3
81599: RET
// export function ComExit ( unit ) ; var tmp ; begin
81600: LD_INT 0
81602: PPUSH
81603: PPUSH
// if not IsInUnit ( unit ) then
81604: LD_VAR 0 1
81608: PPUSH
81609: CALL_OW 310
81613: NOT
81614: IFFALSE 81618
// exit ;
81616: GO 81678
// tmp := IsInUnit ( unit ) ;
81618: LD_ADDR_VAR 0 3
81622: PUSH
81623: LD_VAR 0 1
81627: PPUSH
81628: CALL_OW 310
81632: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81633: LD_VAR 0 3
81637: PPUSH
81638: CALL_OW 247
81642: PUSH
81643: LD_INT 2
81645: EQUAL
81646: IFFALSE 81659
// ComExitVehicle ( unit ) else
81648: LD_VAR 0 1
81652: PPUSH
81653: CALL_OW 121
81657: GO 81668
// ComExitBuilding ( unit ) ;
81659: LD_VAR 0 1
81663: PPUSH
81664: CALL_OW 122
// result := tmp ;
81668: LD_ADDR_VAR 0 2
81672: PUSH
81673: LD_VAR 0 3
81677: ST_TO_ADDR
// end ;
81678: LD_VAR 0 2
81682: RET
// export function ComExitAll ( units ) ; var i ; begin
81683: LD_INT 0
81685: PPUSH
81686: PPUSH
// if not units then
81687: LD_VAR 0 1
81691: NOT
81692: IFFALSE 81696
// exit ;
81694: GO 81722
// for i in units do
81696: LD_ADDR_VAR 0 3
81700: PUSH
81701: LD_VAR 0 1
81705: PUSH
81706: FOR_IN
81707: IFFALSE 81720
// ComExit ( i ) ;
81709: LD_VAR 0 3
81713: PPUSH
81714: CALL 81600 0 1
81718: GO 81706
81720: POP
81721: POP
// end ;
81722: LD_VAR 0 2
81726: RET
// export function ResetHc ; begin
81727: LD_INT 0
81729: PPUSH
// InitHc ;
81730: CALL_OW 19
// hc_importance := 0 ;
81734: LD_ADDR_OWVAR 32
81738: PUSH
81739: LD_INT 0
81741: ST_TO_ADDR
// end ;
81742: LD_VAR 0 1
81746: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81747: LD_INT 0
81749: PPUSH
81750: PPUSH
81751: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81752: LD_ADDR_VAR 0 6
81756: PUSH
81757: LD_VAR 0 1
81761: PUSH
81762: LD_VAR 0 3
81766: PLUS
81767: PUSH
81768: LD_INT 2
81770: DIV
81771: ST_TO_ADDR
// if _x < 0 then
81772: LD_VAR 0 6
81776: PUSH
81777: LD_INT 0
81779: LESS
81780: IFFALSE 81797
// _x := _x * - 1 ;
81782: LD_ADDR_VAR 0 6
81786: PUSH
81787: LD_VAR 0 6
81791: PUSH
81792: LD_INT 1
81794: NEG
81795: MUL
81796: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81797: LD_ADDR_VAR 0 7
81801: PUSH
81802: LD_VAR 0 2
81806: PUSH
81807: LD_VAR 0 4
81811: PLUS
81812: PUSH
81813: LD_INT 2
81815: DIV
81816: ST_TO_ADDR
// if _y < 0 then
81817: LD_VAR 0 7
81821: PUSH
81822: LD_INT 0
81824: LESS
81825: IFFALSE 81842
// _y := _y * - 1 ;
81827: LD_ADDR_VAR 0 7
81831: PUSH
81832: LD_VAR 0 7
81836: PUSH
81837: LD_INT 1
81839: NEG
81840: MUL
81841: ST_TO_ADDR
// result := [ _x , _y ] ;
81842: LD_ADDR_VAR 0 5
81846: PUSH
81847: LD_VAR 0 6
81851: PUSH
81852: LD_VAR 0 7
81856: PUSH
81857: EMPTY
81858: LIST
81859: LIST
81860: ST_TO_ADDR
// end ;
81861: LD_VAR 0 5
81865: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81866: LD_INT 0
81868: PPUSH
81869: PPUSH
81870: PPUSH
81871: PPUSH
// task := GetTaskList ( unit ) ;
81872: LD_ADDR_VAR 0 7
81876: PUSH
81877: LD_VAR 0 1
81881: PPUSH
81882: CALL_OW 437
81886: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81887: LD_VAR 0 7
81891: NOT
81892: PUSH
81893: LD_VAR 0 1
81897: PPUSH
81898: LD_VAR 0 2
81902: PPUSH
81903: CALL_OW 308
81907: NOT
81908: AND
81909: IFFALSE 81913
// exit ;
81911: GO 82031
// if IsInArea ( unit , area ) then
81913: LD_VAR 0 1
81917: PPUSH
81918: LD_VAR 0 2
81922: PPUSH
81923: CALL_OW 308
81927: IFFALSE 81945
// begin ComMoveToArea ( unit , goAway ) ;
81929: LD_VAR 0 1
81933: PPUSH
81934: LD_VAR 0 3
81938: PPUSH
81939: CALL_OW 113
// exit ;
81943: GO 82031
// end ; if task [ 1 ] [ 1 ] <> M then
81945: LD_VAR 0 7
81949: PUSH
81950: LD_INT 1
81952: ARRAY
81953: PUSH
81954: LD_INT 1
81956: ARRAY
81957: PUSH
81958: LD_STRING M
81960: NONEQUAL
81961: IFFALSE 81965
// exit ;
81963: GO 82031
// x := task [ 1 ] [ 2 ] ;
81965: LD_ADDR_VAR 0 5
81969: PUSH
81970: LD_VAR 0 7
81974: PUSH
81975: LD_INT 1
81977: ARRAY
81978: PUSH
81979: LD_INT 2
81981: ARRAY
81982: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81983: LD_ADDR_VAR 0 6
81987: PUSH
81988: LD_VAR 0 7
81992: PUSH
81993: LD_INT 1
81995: ARRAY
81996: PUSH
81997: LD_INT 3
81999: ARRAY
82000: ST_TO_ADDR
// if InArea ( x , y , area ) then
82001: LD_VAR 0 5
82005: PPUSH
82006: LD_VAR 0 6
82010: PPUSH
82011: LD_VAR 0 2
82015: PPUSH
82016: CALL_OW 309
82020: IFFALSE 82031
// ComStop ( unit ) ;
82022: LD_VAR 0 1
82026: PPUSH
82027: CALL_OW 141
// end ;
82031: LD_VAR 0 4
82035: RET
// export function Abs ( value ) ; begin
82036: LD_INT 0
82038: PPUSH
// result := value ;
82039: LD_ADDR_VAR 0 2
82043: PUSH
82044: LD_VAR 0 1
82048: ST_TO_ADDR
// if value < 0 then
82049: LD_VAR 0 1
82053: PUSH
82054: LD_INT 0
82056: LESS
82057: IFFALSE 82074
// result := value * - 1 ;
82059: LD_ADDR_VAR 0 2
82063: PUSH
82064: LD_VAR 0 1
82068: PUSH
82069: LD_INT 1
82071: NEG
82072: MUL
82073: ST_TO_ADDR
// end ;
82074: LD_VAR 0 2
82078: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82079: LD_INT 0
82081: PPUSH
82082: PPUSH
82083: PPUSH
82084: PPUSH
82085: PPUSH
82086: PPUSH
82087: PPUSH
82088: PPUSH
// if not unit or not building then
82089: LD_VAR 0 1
82093: NOT
82094: PUSH
82095: LD_VAR 0 2
82099: NOT
82100: OR
82101: IFFALSE 82105
// exit ;
82103: GO 82331
// x := GetX ( building ) ;
82105: LD_ADDR_VAR 0 4
82109: PUSH
82110: LD_VAR 0 2
82114: PPUSH
82115: CALL_OW 250
82119: ST_TO_ADDR
// y := GetY ( building ) ;
82120: LD_ADDR_VAR 0 6
82124: PUSH
82125: LD_VAR 0 2
82129: PPUSH
82130: CALL_OW 251
82134: ST_TO_ADDR
// d := GetDir ( building ) ;
82135: LD_ADDR_VAR 0 8
82139: PUSH
82140: LD_VAR 0 2
82144: PPUSH
82145: CALL_OW 254
82149: ST_TO_ADDR
// r := 4 ;
82150: LD_ADDR_VAR 0 9
82154: PUSH
82155: LD_INT 4
82157: ST_TO_ADDR
// for i := 1 to 5 do
82158: LD_ADDR_VAR 0 10
82162: PUSH
82163: DOUBLE
82164: LD_INT 1
82166: DEC
82167: ST_TO_ADDR
82168: LD_INT 5
82170: PUSH
82171: FOR_TO
82172: IFFALSE 82329
// begin _x := ShiftX ( x , d , r + i ) ;
82174: LD_ADDR_VAR 0 5
82178: PUSH
82179: LD_VAR 0 4
82183: PPUSH
82184: LD_VAR 0 8
82188: PPUSH
82189: LD_VAR 0 9
82193: PUSH
82194: LD_VAR 0 10
82198: PLUS
82199: PPUSH
82200: CALL_OW 272
82204: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82205: LD_ADDR_VAR 0 7
82209: PUSH
82210: LD_VAR 0 6
82214: PPUSH
82215: LD_VAR 0 8
82219: PPUSH
82220: LD_VAR 0 9
82224: PUSH
82225: LD_VAR 0 10
82229: PLUS
82230: PPUSH
82231: CALL_OW 273
82235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82236: LD_VAR 0 5
82240: PPUSH
82241: LD_VAR 0 7
82245: PPUSH
82246: CALL_OW 488
82250: PUSH
82251: LD_VAR 0 5
82255: PPUSH
82256: LD_VAR 0 7
82260: PPUSH
82261: CALL_OW 428
82265: PPUSH
82266: CALL_OW 247
82270: PUSH
82271: LD_INT 3
82273: PUSH
82274: LD_INT 2
82276: PUSH
82277: EMPTY
82278: LIST
82279: LIST
82280: IN
82281: NOT
82282: AND
82283: IFFALSE 82327
// begin ComMoveXY ( unit , _x , _y ) ;
82285: LD_VAR 0 1
82289: PPUSH
82290: LD_VAR 0 5
82294: PPUSH
82295: LD_VAR 0 7
82299: PPUSH
82300: CALL_OW 111
// result := [ _x , _y ] ;
82304: LD_ADDR_VAR 0 3
82308: PUSH
82309: LD_VAR 0 5
82313: PUSH
82314: LD_VAR 0 7
82318: PUSH
82319: EMPTY
82320: LIST
82321: LIST
82322: ST_TO_ADDR
// exit ;
82323: POP
82324: POP
82325: GO 82331
// end ; end ;
82327: GO 82171
82329: POP
82330: POP
// end ;
82331: LD_VAR 0 3
82335: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82336: LD_INT 0
82338: PPUSH
82339: PPUSH
82340: PPUSH
// result := 0 ;
82341: LD_ADDR_VAR 0 3
82345: PUSH
82346: LD_INT 0
82348: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82349: LD_VAR 0 1
82353: PUSH
82354: LD_INT 0
82356: LESS
82357: PUSH
82358: LD_VAR 0 1
82362: PUSH
82363: LD_INT 8
82365: GREATER
82366: OR
82367: PUSH
82368: LD_VAR 0 2
82372: PUSH
82373: LD_INT 0
82375: LESS
82376: OR
82377: PUSH
82378: LD_VAR 0 2
82382: PUSH
82383: LD_INT 8
82385: GREATER
82386: OR
82387: IFFALSE 82391
// exit ;
82389: GO 82466
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82391: LD_ADDR_VAR 0 4
82395: PUSH
82396: LD_INT 22
82398: PUSH
82399: LD_VAR 0 2
82403: PUSH
82404: EMPTY
82405: LIST
82406: LIST
82407: PPUSH
82408: CALL_OW 69
82412: PUSH
82413: FOR_IN
82414: IFFALSE 82464
// begin un := UnitShoot ( i ) ;
82416: LD_ADDR_VAR 0 5
82420: PUSH
82421: LD_VAR 0 4
82425: PPUSH
82426: CALL_OW 504
82430: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82431: LD_VAR 0 5
82435: PPUSH
82436: CALL_OW 255
82440: PUSH
82441: LD_VAR 0 1
82445: EQUAL
82446: IFFALSE 82462
// begin result := un ;
82448: LD_ADDR_VAR 0 3
82452: PUSH
82453: LD_VAR 0 5
82457: ST_TO_ADDR
// exit ;
82458: POP
82459: POP
82460: GO 82466
// end ; end ;
82462: GO 82413
82464: POP
82465: POP
// end ;
82466: LD_VAR 0 3
82470: RET
// export function GetCargoBay ( units ) ; begin
82471: LD_INT 0
82473: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82474: LD_ADDR_VAR 0 2
82478: PUSH
82479: LD_VAR 0 1
82483: PPUSH
82484: LD_INT 2
82486: PUSH
82487: LD_INT 34
82489: PUSH
82490: LD_INT 12
82492: PUSH
82493: EMPTY
82494: LIST
82495: LIST
82496: PUSH
82497: LD_INT 34
82499: PUSH
82500: LD_INT 51
82502: PUSH
82503: EMPTY
82504: LIST
82505: LIST
82506: PUSH
82507: LD_INT 34
82509: PUSH
82510: LD_INT 32
82512: PUSH
82513: EMPTY
82514: LIST
82515: LIST
82516: PUSH
82517: LD_INT 34
82519: PUSH
82520: LD_INT 89
82522: PUSH
82523: EMPTY
82524: LIST
82525: LIST
82526: PUSH
82527: EMPTY
82528: LIST
82529: LIST
82530: LIST
82531: LIST
82532: LIST
82533: PPUSH
82534: CALL_OW 72
82538: ST_TO_ADDR
// end ;
82539: LD_VAR 0 2
82543: RET
// export function Negate ( value ) ; begin
82544: LD_INT 0
82546: PPUSH
// result := not value ;
82547: LD_ADDR_VAR 0 2
82551: PUSH
82552: LD_VAR 0 1
82556: NOT
82557: ST_TO_ADDR
// end ;
82558: LD_VAR 0 2
82562: RET
// export function Inc ( value ) ; begin
82563: LD_INT 0
82565: PPUSH
// result := value + 1 ;
82566: LD_ADDR_VAR 0 2
82570: PUSH
82571: LD_VAR 0 1
82575: PUSH
82576: LD_INT 1
82578: PLUS
82579: ST_TO_ADDR
// end ;
82580: LD_VAR 0 2
82584: RET
// export function Dec ( value ) ; begin
82585: LD_INT 0
82587: PPUSH
// result := value - 1 ;
82588: LD_ADDR_VAR 0 2
82592: PUSH
82593: LD_VAR 0 1
82597: PUSH
82598: LD_INT 1
82600: MINUS
82601: ST_TO_ADDR
// end ;
82602: LD_VAR 0 2
82606: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82607: LD_INT 0
82609: PPUSH
82610: PPUSH
82611: PPUSH
82612: PPUSH
82613: PPUSH
82614: PPUSH
82615: PPUSH
82616: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82617: LD_VAR 0 1
82621: PPUSH
82622: LD_VAR 0 2
82626: PPUSH
82627: CALL_OW 488
82631: NOT
82632: PUSH
82633: LD_VAR 0 3
82637: PPUSH
82638: LD_VAR 0 4
82642: PPUSH
82643: CALL_OW 488
82647: NOT
82648: OR
82649: IFFALSE 82662
// begin result := - 1 ;
82651: LD_ADDR_VAR 0 5
82655: PUSH
82656: LD_INT 1
82658: NEG
82659: ST_TO_ADDR
// exit ;
82660: GO 82897
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82662: LD_ADDR_VAR 0 12
82666: PUSH
82667: LD_VAR 0 1
82671: PPUSH
82672: LD_VAR 0 2
82676: PPUSH
82677: LD_VAR 0 3
82681: PPUSH
82682: LD_VAR 0 4
82686: PPUSH
82687: CALL 81747 0 4
82691: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82692: LD_ADDR_VAR 0 11
82696: PUSH
82697: LD_VAR 0 1
82701: PPUSH
82702: LD_VAR 0 2
82706: PPUSH
82707: LD_VAR 0 12
82711: PUSH
82712: LD_INT 1
82714: ARRAY
82715: PPUSH
82716: LD_VAR 0 12
82720: PUSH
82721: LD_INT 2
82723: ARRAY
82724: PPUSH
82725: CALL_OW 298
82729: ST_TO_ADDR
// distance := 9999 ;
82730: LD_ADDR_VAR 0 10
82734: PUSH
82735: LD_INT 9999
82737: ST_TO_ADDR
// for i := 0 to 5 do
82738: LD_ADDR_VAR 0 6
82742: PUSH
82743: DOUBLE
82744: LD_INT 0
82746: DEC
82747: ST_TO_ADDR
82748: LD_INT 5
82750: PUSH
82751: FOR_TO
82752: IFFALSE 82895
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82754: LD_ADDR_VAR 0 7
82758: PUSH
82759: LD_VAR 0 1
82763: PPUSH
82764: LD_VAR 0 6
82768: PPUSH
82769: LD_VAR 0 11
82773: PPUSH
82774: CALL_OW 272
82778: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82779: LD_ADDR_VAR 0 8
82783: PUSH
82784: LD_VAR 0 2
82788: PPUSH
82789: LD_VAR 0 6
82793: PPUSH
82794: LD_VAR 0 11
82798: PPUSH
82799: CALL_OW 273
82803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82804: LD_VAR 0 7
82808: PPUSH
82809: LD_VAR 0 8
82813: PPUSH
82814: CALL_OW 488
82818: NOT
82819: IFFALSE 82823
// continue ;
82821: GO 82751
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82823: LD_ADDR_VAR 0 9
82827: PUSH
82828: LD_VAR 0 12
82832: PUSH
82833: LD_INT 1
82835: ARRAY
82836: PPUSH
82837: LD_VAR 0 12
82841: PUSH
82842: LD_INT 2
82844: ARRAY
82845: PPUSH
82846: LD_VAR 0 7
82850: PPUSH
82851: LD_VAR 0 8
82855: PPUSH
82856: CALL_OW 298
82860: ST_TO_ADDR
// if tmp < distance then
82861: LD_VAR 0 9
82865: PUSH
82866: LD_VAR 0 10
82870: LESS
82871: IFFALSE 82893
// begin result := i ;
82873: LD_ADDR_VAR 0 5
82877: PUSH
82878: LD_VAR 0 6
82882: ST_TO_ADDR
// distance := tmp ;
82883: LD_ADDR_VAR 0 10
82887: PUSH
82888: LD_VAR 0 9
82892: ST_TO_ADDR
// end ; end ;
82893: GO 82751
82895: POP
82896: POP
// end ;
82897: LD_VAR 0 5
82901: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82902: LD_INT 0
82904: PPUSH
82905: PPUSH
// if not driver or not IsInUnit ( driver ) then
82906: LD_VAR 0 1
82910: NOT
82911: PUSH
82912: LD_VAR 0 1
82916: PPUSH
82917: CALL_OW 310
82921: NOT
82922: OR
82923: IFFALSE 82927
// exit ;
82925: GO 83017
// vehicle := IsInUnit ( driver ) ;
82927: LD_ADDR_VAR 0 3
82931: PUSH
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 310
82941: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82942: LD_VAR 0 1
82946: PPUSH
82947: LD_STRING \
82949: PUSH
82950: LD_INT 0
82952: PUSH
82953: LD_INT 0
82955: PUSH
82956: LD_INT 0
82958: PUSH
82959: LD_INT 0
82961: PUSH
82962: LD_INT 0
82964: PUSH
82965: LD_INT 0
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: LIST
82972: LIST
82973: LIST
82974: LIST
82975: LIST
82976: PUSH
82977: LD_STRING E
82979: PUSH
82980: LD_INT 0
82982: PUSH
82983: LD_INT 0
82985: PUSH
82986: LD_VAR 0 3
82990: PUSH
82991: LD_INT 0
82993: PUSH
82994: LD_INT 0
82996: PUSH
82997: LD_INT 0
82999: PUSH
83000: EMPTY
83001: LIST
83002: LIST
83003: LIST
83004: LIST
83005: LIST
83006: LIST
83007: LIST
83008: PUSH
83009: EMPTY
83010: LIST
83011: LIST
83012: PPUSH
83013: CALL_OW 446
// end ;
83017: LD_VAR 0 2
83021: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83022: LD_INT 0
83024: PPUSH
83025: PPUSH
// if not driver or not IsInUnit ( driver ) then
83026: LD_VAR 0 1
83030: NOT
83031: PUSH
83032: LD_VAR 0 1
83036: PPUSH
83037: CALL_OW 310
83041: NOT
83042: OR
83043: IFFALSE 83047
// exit ;
83045: GO 83137
// vehicle := IsInUnit ( driver ) ;
83047: LD_ADDR_VAR 0 3
83051: PUSH
83052: LD_VAR 0 1
83056: PPUSH
83057: CALL_OW 310
83061: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83062: LD_VAR 0 1
83066: PPUSH
83067: LD_STRING \
83069: PUSH
83070: LD_INT 0
83072: PUSH
83073: LD_INT 0
83075: PUSH
83076: LD_INT 0
83078: PUSH
83079: LD_INT 0
83081: PUSH
83082: LD_INT 0
83084: PUSH
83085: LD_INT 0
83087: PUSH
83088: EMPTY
83089: LIST
83090: LIST
83091: LIST
83092: LIST
83093: LIST
83094: LIST
83095: LIST
83096: PUSH
83097: LD_STRING E
83099: PUSH
83100: LD_INT 0
83102: PUSH
83103: LD_INT 0
83105: PUSH
83106: LD_VAR 0 3
83110: PUSH
83111: LD_INT 0
83113: PUSH
83114: LD_INT 0
83116: PUSH
83117: LD_INT 0
83119: PUSH
83120: EMPTY
83121: LIST
83122: LIST
83123: LIST
83124: LIST
83125: LIST
83126: LIST
83127: LIST
83128: PUSH
83129: EMPTY
83130: LIST
83131: LIST
83132: PPUSH
83133: CALL_OW 447
// end ;
83137: LD_VAR 0 2
83141: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83142: LD_INT 0
83144: PPUSH
83145: PPUSH
83146: PPUSH
// tmp := [ ] ;
83147: LD_ADDR_VAR 0 5
83151: PUSH
83152: EMPTY
83153: ST_TO_ADDR
// for i in units do
83154: LD_ADDR_VAR 0 4
83158: PUSH
83159: LD_VAR 0 1
83163: PUSH
83164: FOR_IN
83165: IFFALSE 83203
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83167: LD_ADDR_VAR 0 5
83171: PUSH
83172: LD_VAR 0 5
83176: PPUSH
83177: LD_VAR 0 5
83181: PUSH
83182: LD_INT 1
83184: PLUS
83185: PPUSH
83186: LD_VAR 0 4
83190: PPUSH
83191: CALL_OW 256
83195: PPUSH
83196: CALL_OW 2
83200: ST_TO_ADDR
83201: GO 83164
83203: POP
83204: POP
// if not tmp then
83205: LD_VAR 0 5
83209: NOT
83210: IFFALSE 83214
// exit ;
83212: GO 83262
// if asc then
83214: LD_VAR 0 2
83218: IFFALSE 83242
// result := SortListByListAsc ( units , tmp ) else
83220: LD_ADDR_VAR 0 3
83224: PUSH
83225: LD_VAR 0 1
83229: PPUSH
83230: LD_VAR 0 5
83234: PPUSH
83235: CALL_OW 76
83239: ST_TO_ADDR
83240: GO 83262
// result := SortListByListDesc ( units , tmp ) ;
83242: LD_ADDR_VAR 0 3
83246: PUSH
83247: LD_VAR 0 1
83251: PPUSH
83252: LD_VAR 0 5
83256: PPUSH
83257: CALL_OW 77
83261: ST_TO_ADDR
// end ;
83262: LD_VAR 0 3
83266: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83267: LD_INT 0
83269: PPUSH
83270: PPUSH
// task := GetTaskList ( mech ) ;
83271: LD_ADDR_VAR 0 4
83275: PUSH
83276: LD_VAR 0 1
83280: PPUSH
83281: CALL_OW 437
83285: ST_TO_ADDR
// if not task then
83286: LD_VAR 0 4
83290: NOT
83291: IFFALSE 83295
// exit ;
83293: GO 83337
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83295: LD_ADDR_VAR 0 3
83299: PUSH
83300: LD_VAR 0 4
83304: PUSH
83305: LD_INT 1
83307: ARRAY
83308: PUSH
83309: LD_INT 1
83311: ARRAY
83312: PUSH
83313: LD_STRING r
83315: EQUAL
83316: PUSH
83317: LD_VAR 0 4
83321: PUSH
83322: LD_INT 1
83324: ARRAY
83325: PUSH
83326: LD_INT 4
83328: ARRAY
83329: PUSH
83330: LD_VAR 0 2
83334: EQUAL
83335: AND
83336: ST_TO_ADDR
// end ;
83337: LD_VAR 0 3
83341: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83342: LD_INT 0
83344: PPUSH
// SetDir ( unit , d ) ;
83345: LD_VAR 0 1
83349: PPUSH
83350: LD_VAR 0 4
83354: PPUSH
83355: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83359: LD_VAR 0 1
83363: PPUSH
83364: LD_VAR 0 2
83368: PPUSH
83369: LD_VAR 0 3
83373: PPUSH
83374: LD_VAR 0 5
83378: PPUSH
83379: CALL_OW 48
// end ;
83383: LD_VAR 0 6
83387: RET
// export function ToNaturalNumber ( number ) ; begin
83388: LD_INT 0
83390: PPUSH
// result := number div 1 ;
83391: LD_ADDR_VAR 0 2
83395: PUSH
83396: LD_VAR 0 1
83400: PUSH
83401: LD_INT 1
83403: DIV
83404: ST_TO_ADDR
// if number < 0 then
83405: LD_VAR 0 1
83409: PUSH
83410: LD_INT 0
83412: LESS
83413: IFFALSE 83423
// result := 0 ;
83415: LD_ADDR_VAR 0 2
83419: PUSH
83420: LD_INT 0
83422: ST_TO_ADDR
// end ;
83423: LD_VAR 0 2
83427: RET
// export function SortByClass ( units , class ) ; var un ; begin
83428: LD_INT 0
83430: PPUSH
83431: PPUSH
// if not units or not class then
83432: LD_VAR 0 1
83436: NOT
83437: PUSH
83438: LD_VAR 0 2
83442: NOT
83443: OR
83444: IFFALSE 83448
// exit ;
83446: GO 83543
// result := [ ] ;
83448: LD_ADDR_VAR 0 3
83452: PUSH
83453: EMPTY
83454: ST_TO_ADDR
// for un in units do
83455: LD_ADDR_VAR 0 4
83459: PUSH
83460: LD_VAR 0 1
83464: PUSH
83465: FOR_IN
83466: IFFALSE 83541
// if GetClass ( un ) = class then
83468: LD_VAR 0 4
83472: PPUSH
83473: CALL_OW 257
83477: PUSH
83478: LD_VAR 0 2
83482: EQUAL
83483: IFFALSE 83510
// result := Insert ( result , 1 , un ) else
83485: LD_ADDR_VAR 0 3
83489: PUSH
83490: LD_VAR 0 3
83494: PPUSH
83495: LD_INT 1
83497: PPUSH
83498: LD_VAR 0 4
83502: PPUSH
83503: CALL_OW 2
83507: ST_TO_ADDR
83508: GO 83539
// result := Replace ( result , result + 1 , un ) ;
83510: LD_ADDR_VAR 0 3
83514: PUSH
83515: LD_VAR 0 3
83519: PPUSH
83520: LD_VAR 0 3
83524: PUSH
83525: LD_INT 1
83527: PLUS
83528: PPUSH
83529: LD_VAR 0 4
83533: PPUSH
83534: CALL_OW 1
83538: ST_TO_ADDR
83539: GO 83465
83541: POP
83542: POP
// end ;
83543: LD_VAR 0 3
83547: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83548: LD_INT 0
83550: PPUSH
83551: PPUSH
83552: PPUSH
83553: PPUSH
83554: PPUSH
83555: PPUSH
83556: PPUSH
// result := [ ] ;
83557: LD_ADDR_VAR 0 4
83561: PUSH
83562: EMPTY
83563: ST_TO_ADDR
// if x - r < 0 then
83564: LD_VAR 0 1
83568: PUSH
83569: LD_VAR 0 3
83573: MINUS
83574: PUSH
83575: LD_INT 0
83577: LESS
83578: IFFALSE 83590
// min_x := 0 else
83580: LD_ADDR_VAR 0 8
83584: PUSH
83585: LD_INT 0
83587: ST_TO_ADDR
83588: GO 83606
// min_x := x - r ;
83590: LD_ADDR_VAR 0 8
83594: PUSH
83595: LD_VAR 0 1
83599: PUSH
83600: LD_VAR 0 3
83604: MINUS
83605: ST_TO_ADDR
// if y - r < 0 then
83606: LD_VAR 0 2
83610: PUSH
83611: LD_VAR 0 3
83615: MINUS
83616: PUSH
83617: LD_INT 0
83619: LESS
83620: IFFALSE 83632
// min_y := 0 else
83622: LD_ADDR_VAR 0 7
83626: PUSH
83627: LD_INT 0
83629: ST_TO_ADDR
83630: GO 83648
// min_y := y - r ;
83632: LD_ADDR_VAR 0 7
83636: PUSH
83637: LD_VAR 0 2
83641: PUSH
83642: LD_VAR 0 3
83646: MINUS
83647: ST_TO_ADDR
// max_x := x + r ;
83648: LD_ADDR_VAR 0 9
83652: PUSH
83653: LD_VAR 0 1
83657: PUSH
83658: LD_VAR 0 3
83662: PLUS
83663: ST_TO_ADDR
// max_y := y + r ;
83664: LD_ADDR_VAR 0 10
83668: PUSH
83669: LD_VAR 0 2
83673: PUSH
83674: LD_VAR 0 3
83678: PLUS
83679: ST_TO_ADDR
// for _x = min_x to max_x do
83680: LD_ADDR_VAR 0 5
83684: PUSH
83685: DOUBLE
83686: LD_VAR 0 8
83690: DEC
83691: ST_TO_ADDR
83692: LD_VAR 0 9
83696: PUSH
83697: FOR_TO
83698: IFFALSE 83799
// for _y = min_y to max_y do
83700: LD_ADDR_VAR 0 6
83704: PUSH
83705: DOUBLE
83706: LD_VAR 0 7
83710: DEC
83711: ST_TO_ADDR
83712: LD_VAR 0 10
83716: PUSH
83717: FOR_TO
83718: IFFALSE 83795
// begin if not ValidHex ( _x , _y ) then
83720: LD_VAR 0 5
83724: PPUSH
83725: LD_VAR 0 6
83729: PPUSH
83730: CALL_OW 488
83734: NOT
83735: IFFALSE 83739
// continue ;
83737: GO 83717
// if GetResourceTypeXY ( _x , _y ) then
83739: LD_VAR 0 5
83743: PPUSH
83744: LD_VAR 0 6
83748: PPUSH
83749: CALL_OW 283
83753: IFFALSE 83793
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83755: LD_ADDR_VAR 0 4
83759: PUSH
83760: LD_VAR 0 4
83764: PPUSH
83765: LD_VAR 0 4
83769: PUSH
83770: LD_INT 1
83772: PLUS
83773: PPUSH
83774: LD_VAR 0 5
83778: PUSH
83779: LD_VAR 0 6
83783: PUSH
83784: EMPTY
83785: LIST
83786: LIST
83787: PPUSH
83788: CALL_OW 1
83792: ST_TO_ADDR
// end ;
83793: GO 83717
83795: POP
83796: POP
83797: GO 83697
83799: POP
83800: POP
// end ;
83801: LD_VAR 0 4
83805: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83806: LD_INT 0
83808: PPUSH
83809: PPUSH
83810: PPUSH
83811: PPUSH
83812: PPUSH
83813: PPUSH
83814: PPUSH
83815: PPUSH
// if not units then
83816: LD_VAR 0 1
83820: NOT
83821: IFFALSE 83825
// exit ;
83823: GO 84349
// result := UnitFilter ( units , [ f_ok ] ) ;
83825: LD_ADDR_VAR 0 3
83829: PUSH
83830: LD_VAR 0 1
83834: PPUSH
83835: LD_INT 50
83837: PUSH
83838: EMPTY
83839: LIST
83840: PPUSH
83841: CALL_OW 72
83845: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83846: LD_ADDR_VAR 0 8
83850: PUSH
83851: LD_VAR 0 1
83855: PUSH
83856: LD_INT 1
83858: ARRAY
83859: PPUSH
83860: CALL_OW 255
83864: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83865: LD_ADDR_VAR 0 10
83869: PUSH
83870: LD_INT 29
83872: PUSH
83873: LD_INT 91
83875: PUSH
83876: LD_INT 49
83878: PUSH
83879: EMPTY
83880: LIST
83881: LIST
83882: LIST
83883: ST_TO_ADDR
// if not result then
83884: LD_VAR 0 3
83888: NOT
83889: IFFALSE 83893
// exit ;
83891: GO 84349
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83893: LD_ADDR_VAR 0 5
83897: PUSH
83898: LD_INT 81
83900: PUSH
83901: LD_VAR 0 8
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: PPUSH
83910: CALL_OW 69
83914: ST_TO_ADDR
// for i in result do
83915: LD_ADDR_VAR 0 4
83919: PUSH
83920: LD_VAR 0 3
83924: PUSH
83925: FOR_IN
83926: IFFALSE 84347
// begin tag := GetTag ( i ) + 1 ;
83928: LD_ADDR_VAR 0 9
83932: PUSH
83933: LD_VAR 0 4
83937: PPUSH
83938: CALL_OW 110
83942: PUSH
83943: LD_INT 1
83945: PLUS
83946: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83947: LD_ADDR_VAR 0 7
83951: PUSH
83952: LD_VAR 0 4
83956: PPUSH
83957: CALL_OW 250
83961: PPUSH
83962: LD_VAR 0 4
83966: PPUSH
83967: CALL_OW 251
83971: PPUSH
83972: LD_INT 6
83974: PPUSH
83975: CALL 83548 0 3
83979: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83980: LD_VAR 0 4
83984: PPUSH
83985: CALL_OW 247
83989: PUSH
83990: LD_INT 2
83992: EQUAL
83993: PUSH
83994: LD_VAR 0 7
83998: AND
83999: PUSH
84000: LD_VAR 0 4
84004: PPUSH
84005: CALL_OW 264
84009: PUSH
84010: LD_VAR 0 10
84014: IN
84015: NOT
84016: AND
84017: IFFALSE 84056
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84019: LD_VAR 0 4
84023: PPUSH
84024: LD_VAR 0 7
84028: PUSH
84029: LD_INT 1
84031: ARRAY
84032: PUSH
84033: LD_INT 1
84035: ARRAY
84036: PPUSH
84037: LD_VAR 0 7
84041: PUSH
84042: LD_INT 1
84044: ARRAY
84045: PUSH
84046: LD_INT 2
84048: ARRAY
84049: PPUSH
84050: CALL_OW 116
84054: GO 84345
// if path > tag then
84056: LD_VAR 0 2
84060: PUSH
84061: LD_VAR 0 9
84065: GREATER
84066: IFFALSE 84274
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84068: LD_ADDR_VAR 0 6
84072: PUSH
84073: LD_VAR 0 5
84077: PPUSH
84078: LD_INT 91
84080: PUSH
84081: LD_VAR 0 4
84085: PUSH
84086: LD_INT 8
84088: PUSH
84089: EMPTY
84090: LIST
84091: LIST
84092: LIST
84093: PPUSH
84094: CALL_OW 72
84098: ST_TO_ADDR
// if nearEnemy then
84099: LD_VAR 0 6
84103: IFFALSE 84172
// begin if GetWeapon ( i ) = ru_time_lapser then
84105: LD_VAR 0 4
84109: PPUSH
84110: CALL_OW 264
84114: PUSH
84115: LD_INT 49
84117: EQUAL
84118: IFFALSE 84146
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84120: LD_VAR 0 4
84124: PPUSH
84125: LD_VAR 0 6
84129: PPUSH
84130: LD_VAR 0 4
84134: PPUSH
84135: CALL_OW 74
84139: PPUSH
84140: CALL_OW 112
84144: GO 84170
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84146: LD_VAR 0 4
84150: PPUSH
84151: LD_VAR 0 6
84155: PPUSH
84156: LD_VAR 0 4
84160: PPUSH
84161: CALL_OW 74
84165: PPUSH
84166: CALL_OW 115
// end else
84170: GO 84272
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84172: LD_VAR 0 4
84176: PPUSH
84177: LD_VAR 0 2
84181: PUSH
84182: LD_VAR 0 9
84186: ARRAY
84187: PUSH
84188: LD_INT 1
84190: ARRAY
84191: PPUSH
84192: LD_VAR 0 2
84196: PUSH
84197: LD_VAR 0 9
84201: ARRAY
84202: PUSH
84203: LD_INT 2
84205: ARRAY
84206: PPUSH
84207: CALL_OW 297
84211: PUSH
84212: LD_INT 6
84214: GREATER
84215: IFFALSE 84258
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84217: LD_VAR 0 4
84221: PPUSH
84222: LD_VAR 0 2
84226: PUSH
84227: LD_VAR 0 9
84231: ARRAY
84232: PUSH
84233: LD_INT 1
84235: ARRAY
84236: PPUSH
84237: LD_VAR 0 2
84241: PUSH
84242: LD_VAR 0 9
84246: ARRAY
84247: PUSH
84248: LD_INT 2
84250: ARRAY
84251: PPUSH
84252: CALL_OW 114
84256: GO 84272
// SetTag ( i , tag ) ;
84258: LD_VAR 0 4
84262: PPUSH
84263: LD_VAR 0 9
84267: PPUSH
84268: CALL_OW 109
// end else
84272: GO 84345
// if enemy then
84274: LD_VAR 0 5
84278: IFFALSE 84345
// begin if GetWeapon ( i ) = ru_time_lapser then
84280: LD_VAR 0 4
84284: PPUSH
84285: CALL_OW 264
84289: PUSH
84290: LD_INT 49
84292: EQUAL
84293: IFFALSE 84321
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84295: LD_VAR 0 4
84299: PPUSH
84300: LD_VAR 0 5
84304: PPUSH
84305: LD_VAR 0 4
84309: PPUSH
84310: CALL_OW 74
84314: PPUSH
84315: CALL_OW 112
84319: GO 84345
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84321: LD_VAR 0 4
84325: PPUSH
84326: LD_VAR 0 5
84330: PPUSH
84331: LD_VAR 0 4
84335: PPUSH
84336: CALL_OW 74
84340: PPUSH
84341: CALL_OW 115
// end ; end ;
84345: GO 83925
84347: POP
84348: POP
// end ;
84349: LD_VAR 0 3
84353: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84354: LD_INT 0
84356: PPUSH
84357: PPUSH
84358: PPUSH
// if not unit or IsInUnit ( unit ) then
84359: LD_VAR 0 1
84363: NOT
84364: PUSH
84365: LD_VAR 0 1
84369: PPUSH
84370: CALL_OW 310
84374: OR
84375: IFFALSE 84379
// exit ;
84377: GO 84470
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84379: LD_ADDR_VAR 0 4
84383: PUSH
84384: LD_VAR 0 1
84388: PPUSH
84389: CALL_OW 250
84393: PPUSH
84394: LD_VAR 0 2
84398: PPUSH
84399: LD_INT 1
84401: PPUSH
84402: CALL_OW 272
84406: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84407: LD_ADDR_VAR 0 5
84411: PUSH
84412: LD_VAR 0 1
84416: PPUSH
84417: CALL_OW 251
84421: PPUSH
84422: LD_VAR 0 2
84426: PPUSH
84427: LD_INT 1
84429: PPUSH
84430: CALL_OW 273
84434: ST_TO_ADDR
// if ValidHex ( x , y ) then
84435: LD_VAR 0 4
84439: PPUSH
84440: LD_VAR 0 5
84444: PPUSH
84445: CALL_OW 488
84449: IFFALSE 84470
// ComTurnXY ( unit , x , y ) ;
84451: LD_VAR 0 1
84455: PPUSH
84456: LD_VAR 0 4
84460: PPUSH
84461: LD_VAR 0 5
84465: PPUSH
84466: CALL_OW 118
// end ;
84470: LD_VAR 0 3
84474: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84475: LD_INT 0
84477: PPUSH
84478: PPUSH
// result := false ;
84479: LD_ADDR_VAR 0 3
84483: PUSH
84484: LD_INT 0
84486: ST_TO_ADDR
// if not units then
84487: LD_VAR 0 2
84491: NOT
84492: IFFALSE 84496
// exit ;
84494: GO 84541
// for i in units do
84496: LD_ADDR_VAR 0 4
84500: PUSH
84501: LD_VAR 0 2
84505: PUSH
84506: FOR_IN
84507: IFFALSE 84539
// if See ( side , i ) then
84509: LD_VAR 0 1
84513: PPUSH
84514: LD_VAR 0 4
84518: PPUSH
84519: CALL_OW 292
84523: IFFALSE 84537
// begin result := true ;
84525: LD_ADDR_VAR 0 3
84529: PUSH
84530: LD_INT 1
84532: ST_TO_ADDR
// exit ;
84533: POP
84534: POP
84535: GO 84541
// end ;
84537: GO 84506
84539: POP
84540: POP
// end ;
84541: LD_VAR 0 3
84545: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84546: LD_INT 0
84548: PPUSH
84549: PPUSH
84550: PPUSH
84551: PPUSH
// if not unit or not points then
84552: LD_VAR 0 1
84556: NOT
84557: PUSH
84558: LD_VAR 0 2
84562: NOT
84563: OR
84564: IFFALSE 84568
// exit ;
84566: GO 84658
// dist := 99999 ;
84568: LD_ADDR_VAR 0 5
84572: PUSH
84573: LD_INT 99999
84575: ST_TO_ADDR
// for i in points do
84576: LD_ADDR_VAR 0 4
84580: PUSH
84581: LD_VAR 0 2
84585: PUSH
84586: FOR_IN
84587: IFFALSE 84656
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84589: LD_ADDR_VAR 0 6
84593: PUSH
84594: LD_VAR 0 1
84598: PPUSH
84599: LD_VAR 0 4
84603: PUSH
84604: LD_INT 1
84606: ARRAY
84607: PPUSH
84608: LD_VAR 0 4
84612: PUSH
84613: LD_INT 2
84615: ARRAY
84616: PPUSH
84617: CALL_OW 297
84621: ST_TO_ADDR
// if tmpDist < dist then
84622: LD_VAR 0 6
84626: PUSH
84627: LD_VAR 0 5
84631: LESS
84632: IFFALSE 84654
// begin result := i ;
84634: LD_ADDR_VAR 0 3
84638: PUSH
84639: LD_VAR 0 4
84643: ST_TO_ADDR
// dist := tmpDist ;
84644: LD_ADDR_VAR 0 5
84648: PUSH
84649: LD_VAR 0 6
84653: ST_TO_ADDR
// end ; end ;
84654: GO 84586
84656: POP
84657: POP
// end ;
84658: LD_VAR 0 3
84662: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84663: LD_INT 0
84665: PPUSH
// uc_side := side ;
84666: LD_ADDR_OWVAR 20
84670: PUSH
84671: LD_VAR 0 1
84675: ST_TO_ADDR
// uc_nation := 3 ;
84676: LD_ADDR_OWVAR 21
84680: PUSH
84681: LD_INT 3
84683: ST_TO_ADDR
// vc_chassis := 25 ;
84684: LD_ADDR_OWVAR 37
84688: PUSH
84689: LD_INT 25
84691: ST_TO_ADDR
// vc_engine := engine_siberite ;
84692: LD_ADDR_OWVAR 39
84696: PUSH
84697: LD_INT 3
84699: ST_TO_ADDR
// vc_control := control_computer ;
84700: LD_ADDR_OWVAR 38
84704: PUSH
84705: LD_INT 3
84707: ST_TO_ADDR
// vc_weapon := 59 ;
84708: LD_ADDR_OWVAR 40
84712: PUSH
84713: LD_INT 59
84715: ST_TO_ADDR
// result := CreateVehicle ;
84716: LD_ADDR_VAR 0 5
84720: PUSH
84721: CALL_OW 45
84725: ST_TO_ADDR
// SetDir ( result , d ) ;
84726: LD_VAR 0 5
84730: PPUSH
84731: LD_VAR 0 4
84735: PPUSH
84736: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84740: LD_VAR 0 5
84744: PPUSH
84745: LD_VAR 0 2
84749: PPUSH
84750: LD_VAR 0 3
84754: PPUSH
84755: LD_INT 0
84757: PPUSH
84758: CALL_OW 48
// end ;
84762: LD_VAR 0 5
84766: RET
// export function GetMultiCargo ( export ru_radar export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84767: LD_INT 0
84769: PPUSH
84770: PPUSH
84771: PPUSH
84772: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84773: LD_VAR 0 1
84777: PPUSH
84778: CALL_OW 264
84782: PUSH
84783: LD_INT 91
84785: EQUAL
84786: IFFALSE 84858
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84788: LD_INT 68
84790: PPUSH
84791: LD_VAR 0 1
84795: PPUSH
84796: CALL_OW 255
84800: PPUSH
84801: CALL_OW 321
84805: PUSH
84806: LD_INT 2
84808: EQUAL
84809: IFFALSE 84821
// eff := 70 else
84811: LD_ADDR_VAR 0 4
84815: PUSH
84816: LD_INT 70
84818: ST_TO_ADDR
84819: GO 84829
// eff := 30 ;
84821: LD_ADDR_VAR 0 4
84825: PUSH
84826: LD_INT 30
84828: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84829: LD_VAR 0 1
84833: PPUSH
84834: CALL_OW 250
84838: PPUSH
84839: LD_VAR 0 1
84843: PPUSH
84844: CALL_OW 251
84848: PPUSH
84849: LD_VAR 0 4
84853: PPUSH
84854: CALL_OW 495
// end ; end ;
84858: LD_VAR 0 2
84862: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84863: LD_INT 0
84865: PPUSH
// end ;
84866: LD_VAR 0 4
84870: RET
// export function SOS_Command ( cmd ) ; begin
84871: LD_INT 0
84873: PPUSH
// end ;
84874: LD_VAR 0 2
84878: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84879: LD_INT 0
84881: PPUSH
// end ;
84882: LD_VAR 0 6
84886: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84887: LD_INT 0
84889: PPUSH
84890: PPUSH
// if not vehicle or not factory then
84891: LD_VAR 0 1
84895: NOT
84896: PUSH
84897: LD_VAR 0 2
84901: NOT
84902: OR
84903: IFFALSE 84907
// exit ;
84905: GO 85138
// if factoryWaypoints >= factory then
84907: LD_EXP 122
84911: PUSH
84912: LD_VAR 0 2
84916: GREATEREQUAL
84917: IFFALSE 85138
// if factoryWaypoints [ factory ] then
84919: LD_EXP 122
84923: PUSH
84924: LD_VAR 0 2
84928: ARRAY
84929: IFFALSE 85138
// begin if GetControl ( vehicle ) = control_manual then
84931: LD_VAR 0 1
84935: PPUSH
84936: CALL_OW 263
84940: PUSH
84941: LD_INT 1
84943: EQUAL
84944: IFFALSE 85025
// begin driver := IsDrivenBy ( vehicle ) ;
84946: LD_ADDR_VAR 0 4
84950: PUSH
84951: LD_VAR 0 1
84955: PPUSH
84956: CALL_OW 311
84960: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84961: LD_VAR 0 4
84965: PPUSH
84966: LD_EXP 122
84970: PUSH
84971: LD_VAR 0 2
84975: ARRAY
84976: PUSH
84977: LD_INT 3
84979: ARRAY
84980: PPUSH
84981: LD_EXP 122
84985: PUSH
84986: LD_VAR 0 2
84990: ARRAY
84991: PUSH
84992: LD_INT 4
84994: ARRAY
84995: PPUSH
84996: CALL_OW 171
// AddComExitVehicle ( driver ) ;
85000: LD_VAR 0 4
85004: PPUSH
85005: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
85009: LD_VAR 0 4
85013: PPUSH
85014: LD_VAR 0 2
85018: PPUSH
85019: CALL_OW 180
// end else
85023: GO 85138
// if GetControl ( vehicle ) = control_remote then
85025: LD_VAR 0 1
85029: PPUSH
85030: CALL_OW 263
85034: PUSH
85035: LD_INT 2
85037: EQUAL
85038: IFFALSE 85099
// begin wait ( 0 0$2 ) ;
85040: LD_INT 70
85042: PPUSH
85043: CALL_OW 67
// if Connect ( vehicle ) then
85047: LD_VAR 0 1
85051: PPUSH
85052: CALL 51840 0 1
85056: IFFALSE 85097
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85058: LD_VAR 0 1
85062: PPUSH
85063: LD_EXP 122
85067: PUSH
85068: LD_VAR 0 2
85072: ARRAY
85073: PUSH
85074: LD_INT 3
85076: ARRAY
85077: PPUSH
85078: LD_EXP 122
85082: PUSH
85083: LD_VAR 0 2
85087: ARRAY
85088: PUSH
85089: LD_INT 4
85091: ARRAY
85092: PPUSH
85093: CALL_OW 171
// end else
85097: GO 85138
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85099: LD_VAR 0 1
85103: PPUSH
85104: LD_EXP 122
85108: PUSH
85109: LD_VAR 0 2
85113: ARRAY
85114: PUSH
85115: LD_INT 3
85117: ARRAY
85118: PPUSH
85119: LD_EXP 122
85123: PUSH
85124: LD_VAR 0 2
85128: ARRAY
85129: PUSH
85130: LD_INT 4
85132: ARRAY
85133: PPUSH
85134: CALL_OW 171
// end ; end ;
85138: LD_VAR 0 3
85142: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
85143: LD_INT 0
85145: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85146: LD_VAR 0 1
85150: PUSH
85151: LD_INT 250
85153: EQUAL
85154: PUSH
85155: LD_VAR 0 2
85159: PPUSH
85160: CALL_OW 264
85164: PUSH
85165: LD_INT 81
85167: EQUAL
85168: AND
85169: IFFALSE 85190
// MinerPlaceMine ( unit , x , y ) ;
85171: LD_VAR 0 2
85175: PPUSH
85176: LD_VAR 0 4
85180: PPUSH
85181: LD_VAR 0 5
85185: PPUSH
85186: CALL 87575 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85190: LD_VAR 0 1
85194: PUSH
85195: LD_INT 251
85197: EQUAL
85198: PUSH
85199: LD_VAR 0 2
85203: PPUSH
85204: CALL_OW 264
85208: PUSH
85209: LD_INT 81
85211: EQUAL
85212: AND
85213: IFFALSE 85234
// MinerDetonateMine ( unit , x , y ) ;
85215: LD_VAR 0 2
85219: PPUSH
85220: LD_VAR 0 4
85224: PPUSH
85225: LD_VAR 0 5
85229: PPUSH
85230: CALL 87850 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85234: LD_VAR 0 1
85238: PUSH
85239: LD_INT 252
85241: EQUAL
85242: PUSH
85243: LD_VAR 0 2
85247: PPUSH
85248: CALL_OW 264
85252: PUSH
85253: LD_INT 81
85255: EQUAL
85256: AND
85257: IFFALSE 85278
// MinerCreateMinefield ( unit , x , y ) ;
85259: LD_VAR 0 2
85263: PPUSH
85264: LD_VAR 0 4
85268: PPUSH
85269: LD_VAR 0 5
85273: PPUSH
85274: CALL 88267 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85278: LD_VAR 0 1
85282: PUSH
85283: LD_INT 253
85285: EQUAL
85286: PUSH
85287: LD_VAR 0 2
85291: PPUSH
85292: CALL_OW 257
85296: PUSH
85297: LD_INT 5
85299: EQUAL
85300: AND
85301: IFFALSE 85322
// ComBinocular ( unit , x , y ) ;
85303: LD_VAR 0 2
85307: PPUSH
85308: LD_VAR 0 4
85312: PPUSH
85313: LD_VAR 0 5
85317: PPUSH
85318: CALL 88636 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85322: LD_VAR 0 1
85326: PUSH
85327: LD_INT 254
85329: EQUAL
85330: PUSH
85331: LD_VAR 0 2
85335: PPUSH
85336: CALL_OW 264
85340: PUSH
85341: LD_INT 99
85343: EQUAL
85344: AND
85345: PUSH
85346: LD_VAR 0 3
85350: PPUSH
85351: CALL_OW 263
85355: PUSH
85356: LD_INT 3
85358: EQUAL
85359: AND
85360: IFFALSE 85376
// HackDestroyVehicle ( unit , selectedUnit ) ;
85362: LD_VAR 0 2
85366: PPUSH
85367: LD_VAR 0 3
85371: PPUSH
85372: CALL 86939 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85376: LD_VAR 0 1
85380: PUSH
85381: LD_INT 255
85383: EQUAL
85384: PUSH
85385: LD_VAR 0 2
85389: PPUSH
85390: CALL_OW 264
85394: PUSH
85395: LD_INT 14
85397: PUSH
85398: LD_INT 53
85400: PUSH
85401: EMPTY
85402: LIST
85403: LIST
85404: IN
85405: AND
85406: PUSH
85407: LD_VAR 0 4
85411: PPUSH
85412: LD_VAR 0 5
85416: PPUSH
85417: CALL_OW 488
85421: AND
85422: IFFALSE 85446
// CutTreeXYR ( unit , x , y , 12 ) ;
85424: LD_VAR 0 2
85428: PPUSH
85429: LD_VAR 0 4
85433: PPUSH
85434: LD_VAR 0 5
85438: PPUSH
85439: LD_INT 12
85441: PPUSH
85442: CALL 85509 0 4
// if cmd = 256 then
85446: LD_VAR 0 1
85450: PUSH
85451: LD_INT 256
85453: EQUAL
85454: IFFALSE 85475
// SetFactoryWaypoint ( unit , x , y ) ;
85456: LD_VAR 0 2
85460: PPUSH
85461: LD_VAR 0 4
85465: PPUSH
85466: LD_VAR 0 5
85470: PPUSH
85471: CALL 42423 0 3
// if cmd = 257 then
85475: LD_VAR 0 1
85479: PUSH
85480: LD_INT 257
85482: EQUAL
85483: IFFALSE 85504
// SetWarehouseGatheringPoint ( unit , x , y ) ;
85485: LD_VAR 0 2
85489: PPUSH
85490: LD_VAR 0 4
85494: PPUSH
85495: LD_VAR 0 5
85499: PPUSH
85500: CALL 42785 0 3
// end ;
85504: LD_VAR 0 6
85508: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85509: LD_INT 0
85511: PPUSH
85512: PPUSH
85513: PPUSH
85514: PPUSH
85515: PPUSH
85516: PPUSH
85517: PPUSH
85518: PPUSH
85519: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85520: LD_VAR 0 1
85524: NOT
85525: PUSH
85526: LD_VAR 0 2
85530: PPUSH
85531: LD_VAR 0 3
85535: PPUSH
85536: CALL_OW 488
85540: NOT
85541: OR
85542: PUSH
85543: LD_VAR 0 4
85547: NOT
85548: OR
85549: IFFALSE 85553
// exit ;
85551: GO 85893
// list := [ ] ;
85553: LD_ADDR_VAR 0 13
85557: PUSH
85558: EMPTY
85559: ST_TO_ADDR
// if x - r < 0 then
85560: LD_VAR 0 2
85564: PUSH
85565: LD_VAR 0 4
85569: MINUS
85570: PUSH
85571: LD_INT 0
85573: LESS
85574: IFFALSE 85586
// min_x := 0 else
85576: LD_ADDR_VAR 0 7
85580: PUSH
85581: LD_INT 0
85583: ST_TO_ADDR
85584: GO 85602
// min_x := x - r ;
85586: LD_ADDR_VAR 0 7
85590: PUSH
85591: LD_VAR 0 2
85595: PUSH
85596: LD_VAR 0 4
85600: MINUS
85601: ST_TO_ADDR
// if y - r < 0 then
85602: LD_VAR 0 3
85606: PUSH
85607: LD_VAR 0 4
85611: MINUS
85612: PUSH
85613: LD_INT 0
85615: LESS
85616: IFFALSE 85628
// min_y := 0 else
85618: LD_ADDR_VAR 0 8
85622: PUSH
85623: LD_INT 0
85625: ST_TO_ADDR
85626: GO 85644
// min_y := y - r ;
85628: LD_ADDR_VAR 0 8
85632: PUSH
85633: LD_VAR 0 3
85637: PUSH
85638: LD_VAR 0 4
85642: MINUS
85643: ST_TO_ADDR
// max_x := x + r ;
85644: LD_ADDR_VAR 0 9
85648: PUSH
85649: LD_VAR 0 2
85653: PUSH
85654: LD_VAR 0 4
85658: PLUS
85659: ST_TO_ADDR
// max_y := y + r ;
85660: LD_ADDR_VAR 0 10
85664: PUSH
85665: LD_VAR 0 3
85669: PUSH
85670: LD_VAR 0 4
85674: PLUS
85675: ST_TO_ADDR
// for _x = min_x to max_x do
85676: LD_ADDR_VAR 0 11
85680: PUSH
85681: DOUBLE
85682: LD_VAR 0 7
85686: DEC
85687: ST_TO_ADDR
85688: LD_VAR 0 9
85692: PUSH
85693: FOR_TO
85694: IFFALSE 85811
// for _y = min_y to max_y do
85696: LD_ADDR_VAR 0 12
85700: PUSH
85701: DOUBLE
85702: LD_VAR 0 8
85706: DEC
85707: ST_TO_ADDR
85708: LD_VAR 0 10
85712: PUSH
85713: FOR_TO
85714: IFFALSE 85807
// begin if not ValidHex ( _x , _y ) then
85716: LD_VAR 0 11
85720: PPUSH
85721: LD_VAR 0 12
85725: PPUSH
85726: CALL_OW 488
85730: NOT
85731: IFFALSE 85735
// continue ;
85733: GO 85713
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85735: LD_VAR 0 11
85739: PPUSH
85740: LD_VAR 0 12
85744: PPUSH
85745: CALL_OW 351
85749: PUSH
85750: LD_VAR 0 11
85754: PPUSH
85755: LD_VAR 0 12
85759: PPUSH
85760: CALL_OW 554
85764: AND
85765: IFFALSE 85805
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85767: LD_ADDR_VAR 0 13
85771: PUSH
85772: LD_VAR 0 13
85776: PPUSH
85777: LD_VAR 0 13
85781: PUSH
85782: LD_INT 1
85784: PLUS
85785: PPUSH
85786: LD_VAR 0 11
85790: PUSH
85791: LD_VAR 0 12
85795: PUSH
85796: EMPTY
85797: LIST
85798: LIST
85799: PPUSH
85800: CALL_OW 2
85804: ST_TO_ADDR
// end ;
85805: GO 85713
85807: POP
85808: POP
85809: GO 85693
85811: POP
85812: POP
// if not list then
85813: LD_VAR 0 13
85817: NOT
85818: IFFALSE 85822
// exit ;
85820: GO 85893
// for i in list do
85822: LD_ADDR_VAR 0 6
85826: PUSH
85827: LD_VAR 0 13
85831: PUSH
85832: FOR_IN
85833: IFFALSE 85891
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85835: LD_VAR 0 1
85839: PPUSH
85840: LD_STRING M
85842: PUSH
85843: LD_VAR 0 6
85847: PUSH
85848: LD_INT 1
85850: ARRAY
85851: PUSH
85852: LD_VAR 0 6
85856: PUSH
85857: LD_INT 2
85859: ARRAY
85860: PUSH
85861: LD_INT 0
85863: PUSH
85864: LD_INT 0
85866: PUSH
85867: LD_INT 0
85869: PUSH
85870: LD_INT 0
85872: PUSH
85873: EMPTY
85874: LIST
85875: LIST
85876: LIST
85877: LIST
85878: LIST
85879: LIST
85880: LIST
85881: PUSH
85882: EMPTY
85883: LIST
85884: PPUSH
85885: CALL_OW 447
85889: GO 85832
85891: POP
85892: POP
// end ;
85893: LD_VAR 0 5
85897: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85898: LD_EXP 125
85902: NOT
85903: IFFALSE 85953
85905: GO 85907
85907: DISABLE
// begin initHack := true ;
85908: LD_ADDR_EXP 125
85912: PUSH
85913: LD_INT 1
85915: ST_TO_ADDR
// hackTanks := [ ] ;
85916: LD_ADDR_EXP 126
85920: PUSH
85921: EMPTY
85922: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85923: LD_ADDR_EXP 127
85927: PUSH
85928: EMPTY
85929: ST_TO_ADDR
// hackLimit := 3 ;
85930: LD_ADDR_EXP 128
85934: PUSH
85935: LD_INT 3
85937: ST_TO_ADDR
// hackDist := 12 ;
85938: LD_ADDR_EXP 129
85942: PUSH
85943: LD_INT 12
85945: ST_TO_ADDR
// hackCounter := [ ] ;
85946: LD_ADDR_EXP 130
85950: PUSH
85951: EMPTY
85952: ST_TO_ADDR
// end ;
85953: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85954: LD_EXP 125
85958: PUSH
85959: LD_INT 34
85961: PUSH
85962: LD_INT 99
85964: PUSH
85965: EMPTY
85966: LIST
85967: LIST
85968: PPUSH
85969: CALL_OW 69
85973: AND
85974: IFFALSE 86227
85976: GO 85978
85978: DISABLE
85979: LD_INT 0
85981: PPUSH
85982: PPUSH
// begin enable ;
85983: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85984: LD_ADDR_VAR 0 1
85988: PUSH
85989: LD_INT 34
85991: PUSH
85992: LD_INT 99
85994: PUSH
85995: EMPTY
85996: LIST
85997: LIST
85998: PPUSH
85999: CALL_OW 69
86003: PUSH
86004: FOR_IN
86005: IFFALSE 86225
// begin if not i in hackTanks then
86007: LD_VAR 0 1
86011: PUSH
86012: LD_EXP 126
86016: IN
86017: NOT
86018: IFFALSE 86101
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
86020: LD_ADDR_EXP 126
86024: PUSH
86025: LD_EXP 126
86029: PPUSH
86030: LD_EXP 126
86034: PUSH
86035: LD_INT 1
86037: PLUS
86038: PPUSH
86039: LD_VAR 0 1
86043: PPUSH
86044: CALL_OW 1
86048: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
86049: LD_ADDR_EXP 127
86053: PUSH
86054: LD_EXP 127
86058: PPUSH
86059: LD_EXP 127
86063: PUSH
86064: LD_INT 1
86066: PLUS
86067: PPUSH
86068: EMPTY
86069: PPUSH
86070: CALL_OW 1
86074: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
86075: LD_ADDR_EXP 130
86079: PUSH
86080: LD_EXP 130
86084: PPUSH
86085: LD_EXP 130
86089: PUSH
86090: LD_INT 1
86092: PLUS
86093: PPUSH
86094: EMPTY
86095: PPUSH
86096: CALL_OW 1
86100: ST_TO_ADDR
// end ; if not IsOk ( i ) then
86101: LD_VAR 0 1
86105: PPUSH
86106: CALL_OW 302
86110: NOT
86111: IFFALSE 86124
// begin HackUnlinkAll ( i ) ;
86113: LD_VAR 0 1
86117: PPUSH
86118: CALL 86230 0 1
// continue ;
86122: GO 86004
// end ; HackCheckCapturedStatus ( i ) ;
86124: LD_VAR 0 1
86128: PPUSH
86129: CALL 86673 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
86133: LD_ADDR_VAR 0 2
86137: PUSH
86138: LD_INT 81
86140: PUSH
86141: LD_VAR 0 1
86145: PPUSH
86146: CALL_OW 255
86150: PUSH
86151: EMPTY
86152: LIST
86153: LIST
86154: PUSH
86155: LD_INT 33
86157: PUSH
86158: LD_INT 3
86160: PUSH
86161: EMPTY
86162: LIST
86163: LIST
86164: PUSH
86165: LD_INT 91
86167: PUSH
86168: LD_VAR 0 1
86172: PUSH
86173: LD_EXP 129
86177: PUSH
86178: EMPTY
86179: LIST
86180: LIST
86181: LIST
86182: PUSH
86183: LD_INT 50
86185: PUSH
86186: EMPTY
86187: LIST
86188: PUSH
86189: EMPTY
86190: LIST
86191: LIST
86192: LIST
86193: LIST
86194: PPUSH
86195: CALL_OW 69
86199: ST_TO_ADDR
// if not tmp then
86200: LD_VAR 0 2
86204: NOT
86205: IFFALSE 86209
// continue ;
86207: GO 86004
// HackLink ( i , tmp ) ;
86209: LD_VAR 0 1
86213: PPUSH
86214: LD_VAR 0 2
86218: PPUSH
86219: CALL 86366 0 2
// end ;
86223: GO 86004
86225: POP
86226: POP
// end ;
86227: PPOPN 2
86229: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86230: LD_INT 0
86232: PPUSH
86233: PPUSH
86234: PPUSH
// if not hack in hackTanks then
86235: LD_VAR 0 1
86239: PUSH
86240: LD_EXP 126
86244: IN
86245: NOT
86246: IFFALSE 86250
// exit ;
86248: GO 86361
// index := GetElementIndex ( hackTanks , hack ) ;
86250: LD_ADDR_VAR 0 4
86254: PUSH
86255: LD_EXP 126
86259: PPUSH
86260: LD_VAR 0 1
86264: PPUSH
86265: CALL 48656 0 2
86269: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86270: LD_EXP 127
86274: PUSH
86275: LD_VAR 0 4
86279: ARRAY
86280: IFFALSE 86361
// begin for i in hackTanksCaptured [ index ] do
86282: LD_ADDR_VAR 0 3
86286: PUSH
86287: LD_EXP 127
86291: PUSH
86292: LD_VAR 0 4
86296: ARRAY
86297: PUSH
86298: FOR_IN
86299: IFFALSE 86325
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86301: LD_VAR 0 3
86305: PUSH
86306: LD_INT 1
86308: ARRAY
86309: PPUSH
86310: LD_VAR 0 3
86314: PUSH
86315: LD_INT 2
86317: ARRAY
86318: PPUSH
86319: CALL_OW 235
86323: GO 86298
86325: POP
86326: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86327: LD_ADDR_EXP 127
86331: PUSH
86332: LD_EXP 127
86336: PPUSH
86337: LD_VAR 0 4
86341: PPUSH
86342: EMPTY
86343: PPUSH
86344: CALL_OW 1
86348: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86349: LD_VAR 0 1
86353: PPUSH
86354: LD_INT 0
86356: PPUSH
86357: CALL_OW 505
// end ; end ;
86361: LD_VAR 0 2
86365: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86366: LD_INT 0
86368: PPUSH
86369: PPUSH
86370: PPUSH
// if not hack in hackTanks or not vehicles then
86371: LD_VAR 0 1
86375: PUSH
86376: LD_EXP 126
86380: IN
86381: NOT
86382: PUSH
86383: LD_VAR 0 2
86387: NOT
86388: OR
86389: IFFALSE 86393
// exit ;
86391: GO 86668
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86393: LD_ADDR_VAR 0 2
86397: PUSH
86398: LD_VAR 0 1
86402: PPUSH
86403: LD_VAR 0 2
86407: PPUSH
86408: LD_INT 1
86410: PPUSH
86411: LD_INT 1
86413: PPUSH
86414: CALL 49306 0 4
86418: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86419: LD_ADDR_VAR 0 5
86423: PUSH
86424: LD_EXP 126
86428: PPUSH
86429: LD_VAR 0 1
86433: PPUSH
86434: CALL 48656 0 2
86438: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86439: LD_EXP 127
86443: PUSH
86444: LD_VAR 0 5
86448: ARRAY
86449: PUSH
86450: LD_EXP 128
86454: LESS
86455: IFFALSE 86644
// begin for i := 1 to vehicles do
86457: LD_ADDR_VAR 0 4
86461: PUSH
86462: DOUBLE
86463: LD_INT 1
86465: DEC
86466: ST_TO_ADDR
86467: LD_VAR 0 2
86471: PUSH
86472: FOR_TO
86473: IFFALSE 86642
// begin if hackTanksCaptured [ index ] = hackLimit then
86475: LD_EXP 127
86479: PUSH
86480: LD_VAR 0 5
86484: ARRAY
86485: PUSH
86486: LD_EXP 128
86490: EQUAL
86491: IFFALSE 86495
// break ;
86493: GO 86642
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86495: LD_ADDR_EXP 130
86499: PUSH
86500: LD_EXP 130
86504: PPUSH
86505: LD_VAR 0 5
86509: PPUSH
86510: LD_EXP 130
86514: PUSH
86515: LD_VAR 0 5
86519: ARRAY
86520: PUSH
86521: LD_INT 1
86523: PLUS
86524: PPUSH
86525: CALL_OW 1
86529: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86530: LD_ADDR_EXP 127
86534: PUSH
86535: LD_EXP 127
86539: PPUSH
86540: LD_VAR 0 5
86544: PUSH
86545: LD_EXP 127
86549: PUSH
86550: LD_VAR 0 5
86554: ARRAY
86555: PUSH
86556: LD_INT 1
86558: PLUS
86559: PUSH
86560: EMPTY
86561: LIST
86562: LIST
86563: PPUSH
86564: LD_VAR 0 2
86568: PUSH
86569: LD_VAR 0 4
86573: ARRAY
86574: PUSH
86575: LD_VAR 0 2
86579: PUSH
86580: LD_VAR 0 4
86584: ARRAY
86585: PPUSH
86586: CALL_OW 255
86590: PUSH
86591: EMPTY
86592: LIST
86593: LIST
86594: PPUSH
86595: CALL 48871 0 3
86599: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86600: LD_VAR 0 2
86604: PUSH
86605: LD_VAR 0 4
86609: ARRAY
86610: PPUSH
86611: LD_VAR 0 1
86615: PPUSH
86616: CALL_OW 255
86620: PPUSH
86621: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86625: LD_VAR 0 2
86629: PUSH
86630: LD_VAR 0 4
86634: ARRAY
86635: PPUSH
86636: CALL_OW 141
// end ;
86640: GO 86472
86642: POP
86643: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86644: LD_VAR 0 1
86648: PPUSH
86649: LD_EXP 127
86653: PUSH
86654: LD_VAR 0 5
86658: ARRAY
86659: PUSH
86660: LD_INT 0
86662: PLUS
86663: PPUSH
86664: CALL_OW 505
// end ;
86668: LD_VAR 0 3
86672: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86673: LD_INT 0
86675: PPUSH
86676: PPUSH
86677: PPUSH
86678: PPUSH
// if not hack in hackTanks then
86679: LD_VAR 0 1
86683: PUSH
86684: LD_EXP 126
86688: IN
86689: NOT
86690: IFFALSE 86694
// exit ;
86692: GO 86934
// index := GetElementIndex ( hackTanks , hack ) ;
86694: LD_ADDR_VAR 0 4
86698: PUSH
86699: LD_EXP 126
86703: PPUSH
86704: LD_VAR 0 1
86708: PPUSH
86709: CALL 48656 0 2
86713: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86714: LD_ADDR_VAR 0 3
86718: PUSH
86719: DOUBLE
86720: LD_EXP 127
86724: PUSH
86725: LD_VAR 0 4
86729: ARRAY
86730: INC
86731: ST_TO_ADDR
86732: LD_INT 1
86734: PUSH
86735: FOR_DOWNTO
86736: IFFALSE 86908
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86738: LD_ADDR_VAR 0 5
86742: PUSH
86743: LD_EXP 127
86747: PUSH
86748: LD_VAR 0 4
86752: ARRAY
86753: PUSH
86754: LD_VAR 0 3
86758: ARRAY
86759: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86760: LD_VAR 0 5
86764: PUSH
86765: LD_INT 1
86767: ARRAY
86768: PPUSH
86769: CALL_OW 302
86773: NOT
86774: PUSH
86775: LD_VAR 0 5
86779: PUSH
86780: LD_INT 1
86782: ARRAY
86783: PPUSH
86784: CALL_OW 255
86788: PUSH
86789: LD_VAR 0 1
86793: PPUSH
86794: CALL_OW 255
86798: NONEQUAL
86799: OR
86800: IFFALSE 86906
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86802: LD_VAR 0 5
86806: PUSH
86807: LD_INT 1
86809: ARRAY
86810: PPUSH
86811: CALL_OW 305
86815: PUSH
86816: LD_VAR 0 5
86820: PUSH
86821: LD_INT 1
86823: ARRAY
86824: PPUSH
86825: CALL_OW 255
86829: PUSH
86830: LD_VAR 0 1
86834: PPUSH
86835: CALL_OW 255
86839: EQUAL
86840: AND
86841: IFFALSE 86865
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86843: LD_VAR 0 5
86847: PUSH
86848: LD_INT 1
86850: ARRAY
86851: PPUSH
86852: LD_VAR 0 5
86856: PUSH
86857: LD_INT 2
86859: ARRAY
86860: PPUSH
86861: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86865: LD_ADDR_EXP 127
86869: PUSH
86870: LD_EXP 127
86874: PPUSH
86875: LD_VAR 0 4
86879: PPUSH
86880: LD_EXP 127
86884: PUSH
86885: LD_VAR 0 4
86889: ARRAY
86890: PPUSH
86891: LD_VAR 0 3
86895: PPUSH
86896: CALL_OW 3
86900: PPUSH
86901: CALL_OW 1
86905: ST_TO_ADDR
// end ; end ;
86906: GO 86735
86908: POP
86909: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86910: LD_VAR 0 1
86914: PPUSH
86915: LD_EXP 127
86919: PUSH
86920: LD_VAR 0 4
86924: ARRAY
86925: PUSH
86926: LD_INT 0
86928: PLUS
86929: PPUSH
86930: CALL_OW 505
// end ;
86934: LD_VAR 0 2
86938: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86939: LD_INT 0
86941: PPUSH
86942: PPUSH
86943: PPUSH
86944: PPUSH
// if not hack in hackTanks then
86945: LD_VAR 0 1
86949: PUSH
86950: LD_EXP 126
86954: IN
86955: NOT
86956: IFFALSE 86960
// exit ;
86958: GO 87045
// index := GetElementIndex ( hackTanks , hack ) ;
86960: LD_ADDR_VAR 0 5
86964: PUSH
86965: LD_EXP 126
86969: PPUSH
86970: LD_VAR 0 1
86974: PPUSH
86975: CALL 48656 0 2
86979: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86980: LD_ADDR_VAR 0 4
86984: PUSH
86985: DOUBLE
86986: LD_INT 1
86988: DEC
86989: ST_TO_ADDR
86990: LD_EXP 127
86994: PUSH
86995: LD_VAR 0 5
86999: ARRAY
87000: PUSH
87001: FOR_TO
87002: IFFALSE 87043
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
87004: LD_EXP 127
87008: PUSH
87009: LD_VAR 0 5
87013: ARRAY
87014: PUSH
87015: LD_VAR 0 4
87019: ARRAY
87020: PUSH
87021: LD_INT 1
87023: ARRAY
87024: PUSH
87025: LD_VAR 0 2
87029: EQUAL
87030: IFFALSE 87041
// KillUnit ( vehicle ) ;
87032: LD_VAR 0 2
87036: PPUSH
87037: CALL_OW 66
87041: GO 87001
87043: POP
87044: POP
// end ;
87045: LD_VAR 0 3
87049: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
87050: LD_EXP 131
87054: NOT
87055: IFFALSE 87090
87057: GO 87059
87059: DISABLE
// begin initMiner := true ;
87060: LD_ADDR_EXP 131
87064: PUSH
87065: LD_INT 1
87067: ST_TO_ADDR
// minersList := [ ] ;
87068: LD_ADDR_EXP 132
87072: PUSH
87073: EMPTY
87074: ST_TO_ADDR
// minerMinesList := [ ] ;
87075: LD_ADDR_EXP 133
87079: PUSH
87080: EMPTY
87081: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
87082: LD_ADDR_EXP 134
87086: PUSH
87087: LD_INT 5
87089: ST_TO_ADDR
// end ;
87090: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
87091: LD_EXP 131
87095: PUSH
87096: LD_INT 34
87098: PUSH
87099: LD_INT 81
87101: PUSH
87102: EMPTY
87103: LIST
87104: LIST
87105: PPUSH
87106: CALL_OW 69
87110: AND
87111: IFFALSE 87572
87113: GO 87115
87115: DISABLE
87116: LD_INT 0
87118: PPUSH
87119: PPUSH
87120: PPUSH
87121: PPUSH
// begin enable ;
87122: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
87123: LD_ADDR_VAR 0 1
87127: PUSH
87128: LD_INT 34
87130: PUSH
87131: LD_INT 81
87133: PUSH
87134: EMPTY
87135: LIST
87136: LIST
87137: PPUSH
87138: CALL_OW 69
87142: PUSH
87143: FOR_IN
87144: IFFALSE 87216
// begin if not i in minersList then
87146: LD_VAR 0 1
87150: PUSH
87151: LD_EXP 132
87155: IN
87156: NOT
87157: IFFALSE 87214
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87159: LD_ADDR_EXP 132
87163: PUSH
87164: LD_EXP 132
87168: PPUSH
87169: LD_EXP 132
87173: PUSH
87174: LD_INT 1
87176: PLUS
87177: PPUSH
87178: LD_VAR 0 1
87182: PPUSH
87183: CALL_OW 1
87187: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87188: LD_ADDR_EXP 133
87192: PUSH
87193: LD_EXP 133
87197: PPUSH
87198: LD_EXP 133
87202: PUSH
87203: LD_INT 1
87205: PLUS
87206: PPUSH
87207: EMPTY
87208: PPUSH
87209: CALL_OW 1
87213: ST_TO_ADDR
// end end ;
87214: GO 87143
87216: POP
87217: POP
// for i := minerMinesList downto 1 do
87218: LD_ADDR_VAR 0 1
87222: PUSH
87223: DOUBLE
87224: LD_EXP 133
87228: INC
87229: ST_TO_ADDR
87230: LD_INT 1
87232: PUSH
87233: FOR_DOWNTO
87234: IFFALSE 87570
// begin if IsLive ( minersList [ i ] ) then
87236: LD_EXP 132
87240: PUSH
87241: LD_VAR 0 1
87245: ARRAY
87246: PPUSH
87247: CALL_OW 300
87251: IFFALSE 87279
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87253: LD_EXP 132
87257: PUSH
87258: LD_VAR 0 1
87262: ARRAY
87263: PPUSH
87264: LD_EXP 133
87268: PUSH
87269: LD_VAR 0 1
87273: ARRAY
87274: PPUSH
87275: CALL_OW 505
// if not minerMinesList [ i ] then
87279: LD_EXP 133
87283: PUSH
87284: LD_VAR 0 1
87288: ARRAY
87289: NOT
87290: IFFALSE 87294
// continue ;
87292: GO 87233
// for j := minerMinesList [ i ] downto 1 do
87294: LD_ADDR_VAR 0 2
87298: PUSH
87299: DOUBLE
87300: LD_EXP 133
87304: PUSH
87305: LD_VAR 0 1
87309: ARRAY
87310: INC
87311: ST_TO_ADDR
87312: LD_INT 1
87314: PUSH
87315: FOR_DOWNTO
87316: IFFALSE 87566
// begin side := GetSide ( minersList [ i ] ) ;
87318: LD_ADDR_VAR 0 3
87322: PUSH
87323: LD_EXP 132
87327: PUSH
87328: LD_VAR 0 1
87332: ARRAY
87333: PPUSH
87334: CALL_OW 255
87338: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87339: LD_ADDR_VAR 0 4
87343: PUSH
87344: LD_EXP 133
87348: PUSH
87349: LD_VAR 0 1
87353: ARRAY
87354: PUSH
87355: LD_VAR 0 2
87359: ARRAY
87360: PUSH
87361: LD_INT 1
87363: ARRAY
87364: PPUSH
87365: LD_EXP 133
87369: PUSH
87370: LD_VAR 0 1
87374: ARRAY
87375: PUSH
87376: LD_VAR 0 2
87380: ARRAY
87381: PUSH
87382: LD_INT 2
87384: ARRAY
87385: PPUSH
87386: CALL_OW 428
87390: ST_TO_ADDR
// if not tmp then
87391: LD_VAR 0 4
87395: NOT
87396: IFFALSE 87400
// continue ;
87398: GO 87315
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
87400: LD_VAR 0 4
87404: PUSH
87405: LD_INT 81
87407: PUSH
87408: LD_VAR 0 3
87412: PUSH
87413: EMPTY
87414: LIST
87415: LIST
87416: PPUSH
87417: CALL_OW 69
87421: IN
87422: PUSH
87423: LD_EXP 133
87427: PUSH
87428: LD_VAR 0 1
87432: ARRAY
87433: PUSH
87434: LD_VAR 0 2
87438: ARRAY
87439: PUSH
87440: LD_INT 1
87442: ARRAY
87443: PPUSH
87444: LD_EXP 133
87448: PUSH
87449: LD_VAR 0 1
87453: ARRAY
87454: PUSH
87455: LD_VAR 0 2
87459: ARRAY
87460: PUSH
87461: LD_INT 2
87463: ARRAY
87464: PPUSH
87465: CALL_OW 458
87469: AND
87470: IFFALSE 87564
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87472: LD_EXP 133
87476: PUSH
87477: LD_VAR 0 1
87481: ARRAY
87482: PUSH
87483: LD_VAR 0 2
87487: ARRAY
87488: PUSH
87489: LD_INT 1
87491: ARRAY
87492: PPUSH
87493: LD_EXP 133
87497: PUSH
87498: LD_VAR 0 1
87502: ARRAY
87503: PUSH
87504: LD_VAR 0 2
87508: ARRAY
87509: PUSH
87510: LD_INT 2
87512: ARRAY
87513: PPUSH
87514: LD_VAR 0 3
87518: PPUSH
87519: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87523: LD_ADDR_EXP 133
87527: PUSH
87528: LD_EXP 133
87532: PPUSH
87533: LD_VAR 0 1
87537: PPUSH
87538: LD_EXP 133
87542: PUSH
87543: LD_VAR 0 1
87547: ARRAY
87548: PPUSH
87549: LD_VAR 0 2
87553: PPUSH
87554: CALL_OW 3
87558: PPUSH
87559: CALL_OW 1
87563: ST_TO_ADDR
// end ; end ;
87564: GO 87315
87566: POP
87567: POP
// end ;
87568: GO 87233
87570: POP
87571: POP
// end ;
87572: PPOPN 4
87574: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87575: LD_INT 0
87577: PPUSH
87578: PPUSH
// result := false ;
87579: LD_ADDR_VAR 0 4
87583: PUSH
87584: LD_INT 0
87586: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87587: LD_VAR 0 1
87591: PPUSH
87592: CALL_OW 264
87596: PUSH
87597: LD_INT 81
87599: EQUAL
87600: NOT
87601: IFFALSE 87605
// exit ;
87603: GO 87845
// index := GetElementIndex ( minersList , unit ) ;
87605: LD_ADDR_VAR 0 5
87609: PUSH
87610: LD_EXP 132
87614: PPUSH
87615: LD_VAR 0 1
87619: PPUSH
87620: CALL 48656 0 2
87624: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87625: LD_EXP 133
87629: PUSH
87630: LD_VAR 0 5
87634: ARRAY
87635: PUSH
87636: LD_EXP 134
87640: GREATEREQUAL
87641: IFFALSE 87645
// exit ;
87643: GO 87845
// ComMoveXY ( unit , x , y ) ;
87645: LD_VAR 0 1
87649: PPUSH
87650: LD_VAR 0 2
87654: PPUSH
87655: LD_VAR 0 3
87659: PPUSH
87660: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87664: LD_INT 35
87666: PPUSH
87667: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87671: LD_VAR 0 1
87675: PPUSH
87676: LD_VAR 0 2
87680: PPUSH
87681: LD_VAR 0 3
87685: PPUSH
87686: CALL 80011 0 3
87690: NOT
87691: PUSH
87692: LD_VAR 0 1
87696: PPUSH
87697: CALL_OW 314
87701: AND
87702: IFFALSE 87706
// exit ;
87704: GO 87845
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87706: LD_VAR 0 2
87710: PPUSH
87711: LD_VAR 0 3
87715: PPUSH
87716: CALL_OW 428
87720: PUSH
87721: LD_VAR 0 1
87725: EQUAL
87726: PUSH
87727: LD_VAR 0 1
87731: PPUSH
87732: CALL_OW 314
87736: NOT
87737: AND
87738: IFFALSE 87664
// PlaySoundXY ( x , y , PlantMine ) ;
87740: LD_VAR 0 2
87744: PPUSH
87745: LD_VAR 0 3
87749: PPUSH
87750: LD_STRING PlantMine
87752: PPUSH
87753: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87757: LD_VAR 0 2
87761: PPUSH
87762: LD_VAR 0 3
87766: PPUSH
87767: LD_VAR 0 1
87771: PPUSH
87772: CALL_OW 255
87776: PPUSH
87777: LD_INT 0
87779: PPUSH
87780: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87784: LD_ADDR_EXP 133
87788: PUSH
87789: LD_EXP 133
87793: PPUSH
87794: LD_VAR 0 5
87798: PUSH
87799: LD_EXP 133
87803: PUSH
87804: LD_VAR 0 5
87808: ARRAY
87809: PUSH
87810: LD_INT 1
87812: PLUS
87813: PUSH
87814: EMPTY
87815: LIST
87816: LIST
87817: PPUSH
87818: LD_VAR 0 2
87822: PUSH
87823: LD_VAR 0 3
87827: PUSH
87828: EMPTY
87829: LIST
87830: LIST
87831: PPUSH
87832: CALL 48871 0 3
87836: ST_TO_ADDR
// result := true ;
87837: LD_ADDR_VAR 0 4
87841: PUSH
87842: LD_INT 1
87844: ST_TO_ADDR
// end ;
87845: LD_VAR 0 4
87849: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87850: LD_INT 0
87852: PPUSH
87853: PPUSH
87854: PPUSH
// if not unit in minersList then
87855: LD_VAR 0 1
87859: PUSH
87860: LD_EXP 132
87864: IN
87865: NOT
87866: IFFALSE 87870
// exit ;
87868: GO 88262
// index := GetElementIndex ( minersList , unit ) ;
87870: LD_ADDR_VAR 0 6
87874: PUSH
87875: LD_EXP 132
87879: PPUSH
87880: LD_VAR 0 1
87884: PPUSH
87885: CALL 48656 0 2
87889: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87890: LD_ADDR_VAR 0 5
87894: PUSH
87895: DOUBLE
87896: LD_EXP 133
87900: PUSH
87901: LD_VAR 0 6
87905: ARRAY
87906: INC
87907: ST_TO_ADDR
87908: LD_INT 1
87910: PUSH
87911: FOR_DOWNTO
87912: IFFALSE 88073
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87914: LD_EXP 133
87918: PUSH
87919: LD_VAR 0 6
87923: ARRAY
87924: PUSH
87925: LD_VAR 0 5
87929: ARRAY
87930: PUSH
87931: LD_INT 1
87933: ARRAY
87934: PUSH
87935: LD_VAR 0 2
87939: EQUAL
87940: PUSH
87941: LD_EXP 133
87945: PUSH
87946: LD_VAR 0 6
87950: ARRAY
87951: PUSH
87952: LD_VAR 0 5
87956: ARRAY
87957: PUSH
87958: LD_INT 2
87960: ARRAY
87961: PUSH
87962: LD_VAR 0 3
87966: EQUAL
87967: AND
87968: IFFALSE 88071
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87970: LD_EXP 133
87974: PUSH
87975: LD_VAR 0 6
87979: ARRAY
87980: PUSH
87981: LD_VAR 0 5
87985: ARRAY
87986: PUSH
87987: LD_INT 1
87989: ARRAY
87990: PPUSH
87991: LD_EXP 133
87995: PUSH
87996: LD_VAR 0 6
88000: ARRAY
88001: PUSH
88002: LD_VAR 0 5
88006: ARRAY
88007: PUSH
88008: LD_INT 2
88010: ARRAY
88011: PPUSH
88012: LD_VAR 0 1
88016: PPUSH
88017: CALL_OW 255
88021: PPUSH
88022: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88026: LD_ADDR_EXP 133
88030: PUSH
88031: LD_EXP 133
88035: PPUSH
88036: LD_VAR 0 6
88040: PPUSH
88041: LD_EXP 133
88045: PUSH
88046: LD_VAR 0 6
88050: ARRAY
88051: PPUSH
88052: LD_VAR 0 5
88056: PPUSH
88057: CALL_OW 3
88061: PPUSH
88062: CALL_OW 1
88066: ST_TO_ADDR
// exit ;
88067: POP
88068: POP
88069: GO 88262
// end ; end ;
88071: GO 87911
88073: POP
88074: POP
// for i := minerMinesList [ index ] downto 1 do
88075: LD_ADDR_VAR 0 5
88079: PUSH
88080: DOUBLE
88081: LD_EXP 133
88085: PUSH
88086: LD_VAR 0 6
88090: ARRAY
88091: INC
88092: ST_TO_ADDR
88093: LD_INT 1
88095: PUSH
88096: FOR_DOWNTO
88097: IFFALSE 88260
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
88099: LD_EXP 133
88103: PUSH
88104: LD_VAR 0 6
88108: ARRAY
88109: PUSH
88110: LD_VAR 0 5
88114: ARRAY
88115: PUSH
88116: LD_INT 1
88118: ARRAY
88119: PPUSH
88120: LD_EXP 133
88124: PUSH
88125: LD_VAR 0 6
88129: ARRAY
88130: PUSH
88131: LD_VAR 0 5
88135: ARRAY
88136: PUSH
88137: LD_INT 2
88139: ARRAY
88140: PPUSH
88141: LD_VAR 0 2
88145: PPUSH
88146: LD_VAR 0 3
88150: PPUSH
88151: CALL_OW 298
88155: PUSH
88156: LD_INT 6
88158: LESS
88159: IFFALSE 88258
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88161: LD_EXP 133
88165: PUSH
88166: LD_VAR 0 6
88170: ARRAY
88171: PUSH
88172: LD_VAR 0 5
88176: ARRAY
88177: PUSH
88178: LD_INT 1
88180: ARRAY
88181: PPUSH
88182: LD_EXP 133
88186: PUSH
88187: LD_VAR 0 6
88191: ARRAY
88192: PUSH
88193: LD_VAR 0 5
88197: ARRAY
88198: PUSH
88199: LD_INT 2
88201: ARRAY
88202: PPUSH
88203: LD_VAR 0 1
88207: PPUSH
88208: CALL_OW 255
88212: PPUSH
88213: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88217: LD_ADDR_EXP 133
88221: PUSH
88222: LD_EXP 133
88226: PPUSH
88227: LD_VAR 0 6
88231: PPUSH
88232: LD_EXP 133
88236: PUSH
88237: LD_VAR 0 6
88241: ARRAY
88242: PPUSH
88243: LD_VAR 0 5
88247: PPUSH
88248: CALL_OW 3
88252: PPUSH
88253: CALL_OW 1
88257: ST_TO_ADDR
// end ; end ;
88258: GO 88096
88260: POP
88261: POP
// end ;
88262: LD_VAR 0 4
88266: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88267: LD_INT 0
88269: PPUSH
88270: PPUSH
88271: PPUSH
88272: PPUSH
88273: PPUSH
88274: PPUSH
88275: PPUSH
88276: PPUSH
88277: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88278: LD_VAR 0 1
88282: PPUSH
88283: CALL_OW 264
88287: PUSH
88288: LD_INT 81
88290: EQUAL
88291: NOT
88292: PUSH
88293: LD_VAR 0 1
88297: PUSH
88298: LD_EXP 132
88302: IN
88303: NOT
88304: OR
88305: IFFALSE 88309
// exit ;
88307: GO 88631
// index := GetElementIndex ( minersList , unit ) ;
88309: LD_ADDR_VAR 0 6
88313: PUSH
88314: LD_EXP 132
88318: PPUSH
88319: LD_VAR 0 1
88323: PPUSH
88324: CALL 48656 0 2
88328: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88329: LD_ADDR_VAR 0 8
88333: PUSH
88334: LD_EXP 134
88338: PUSH
88339: LD_EXP 133
88343: PUSH
88344: LD_VAR 0 6
88348: ARRAY
88349: MINUS
88350: ST_TO_ADDR
// if not minesFreeAmount then
88351: LD_VAR 0 8
88355: NOT
88356: IFFALSE 88360
// exit ;
88358: GO 88631
// tmp := [ ] ;
88360: LD_ADDR_VAR 0 7
88364: PUSH
88365: EMPTY
88366: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88367: LD_ADDR_VAR 0 5
88371: PUSH
88372: DOUBLE
88373: LD_INT 1
88375: DEC
88376: ST_TO_ADDR
88377: LD_VAR 0 8
88381: PUSH
88382: FOR_TO
88383: IFFALSE 88578
// begin _d := rand ( 0 , 5 ) ;
88385: LD_ADDR_VAR 0 11
88389: PUSH
88390: LD_INT 0
88392: PPUSH
88393: LD_INT 5
88395: PPUSH
88396: CALL_OW 12
88400: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
88401: LD_ADDR_VAR 0 12
88405: PUSH
88406: LD_INT 2
88408: PPUSH
88409: LD_INT 6
88411: PPUSH
88412: CALL_OW 12
88416: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88417: LD_ADDR_VAR 0 9
88421: PUSH
88422: LD_VAR 0 2
88426: PPUSH
88427: LD_VAR 0 11
88431: PPUSH
88432: LD_VAR 0 12
88436: PPUSH
88437: CALL_OW 272
88441: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88442: LD_ADDR_VAR 0 10
88446: PUSH
88447: LD_VAR 0 3
88451: PPUSH
88452: LD_VAR 0 11
88456: PPUSH
88457: LD_VAR 0 12
88461: PPUSH
88462: CALL_OW 273
88466: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88467: LD_VAR 0 9
88471: PPUSH
88472: LD_VAR 0 10
88476: PPUSH
88477: CALL_OW 488
88481: PUSH
88482: LD_VAR 0 9
88486: PUSH
88487: LD_VAR 0 10
88491: PUSH
88492: EMPTY
88493: LIST
88494: LIST
88495: PUSH
88496: LD_VAR 0 7
88500: IN
88501: NOT
88502: AND
88503: PUSH
88504: LD_VAR 0 9
88508: PPUSH
88509: LD_VAR 0 10
88513: PPUSH
88514: CALL_OW 458
88518: NOT
88519: AND
88520: IFFALSE 88562
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88522: LD_ADDR_VAR 0 7
88526: PUSH
88527: LD_VAR 0 7
88531: PPUSH
88532: LD_VAR 0 7
88536: PUSH
88537: LD_INT 1
88539: PLUS
88540: PPUSH
88541: LD_VAR 0 9
88545: PUSH
88546: LD_VAR 0 10
88550: PUSH
88551: EMPTY
88552: LIST
88553: LIST
88554: PPUSH
88555: CALL_OW 1
88559: ST_TO_ADDR
88560: GO 88576
// i := i - 1 ;
88562: LD_ADDR_VAR 0 5
88566: PUSH
88567: LD_VAR 0 5
88571: PUSH
88572: LD_INT 1
88574: MINUS
88575: ST_TO_ADDR
// end ;
88576: GO 88382
88578: POP
88579: POP
// for i in tmp do
88580: LD_ADDR_VAR 0 5
88584: PUSH
88585: LD_VAR 0 7
88589: PUSH
88590: FOR_IN
88591: IFFALSE 88629
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88593: LD_VAR 0 1
88597: PPUSH
88598: LD_VAR 0 5
88602: PUSH
88603: LD_INT 1
88605: ARRAY
88606: PPUSH
88607: LD_VAR 0 5
88611: PUSH
88612: LD_INT 2
88614: ARRAY
88615: PPUSH
88616: CALL 87575 0 3
88620: NOT
88621: IFFALSE 88627
// exit ;
88623: POP
88624: POP
88625: GO 88631
88627: GO 88590
88629: POP
88630: POP
// end ;
88631: LD_VAR 0 4
88635: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88636: LD_INT 0
88638: PPUSH
88639: PPUSH
88640: PPUSH
88641: PPUSH
88642: PPUSH
88643: PPUSH
88644: PPUSH
// if not GetClass ( unit ) = class_sniper then
88645: LD_VAR 0 1
88649: PPUSH
88650: CALL_OW 257
88654: PUSH
88655: LD_INT 5
88657: EQUAL
88658: NOT
88659: IFFALSE 88663
// exit ;
88661: GO 89051
// dist := 8 ;
88663: LD_ADDR_VAR 0 5
88667: PUSH
88668: LD_INT 8
88670: ST_TO_ADDR
// viewRange := 12 ;
88671: LD_ADDR_VAR 0 7
88675: PUSH
88676: LD_INT 12
88678: ST_TO_ADDR
// side := GetSide ( unit ) ;
88679: LD_ADDR_VAR 0 6
88683: PUSH
88684: LD_VAR 0 1
88688: PPUSH
88689: CALL_OW 255
88693: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88694: LD_INT 61
88696: PPUSH
88697: LD_VAR 0 6
88701: PPUSH
88702: CALL_OW 321
88706: PUSH
88707: LD_INT 2
88709: EQUAL
88710: IFFALSE 88720
// viewRange := 16 ;
88712: LD_ADDR_VAR 0 7
88716: PUSH
88717: LD_INT 16
88719: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88720: LD_VAR 0 1
88724: PPUSH
88725: LD_VAR 0 2
88729: PPUSH
88730: LD_VAR 0 3
88734: PPUSH
88735: CALL_OW 297
88739: PUSH
88740: LD_VAR 0 5
88744: GREATER
88745: IFFALSE 88824
// begin ComMoveXY ( unit , x , y ) ;
88747: LD_VAR 0 1
88751: PPUSH
88752: LD_VAR 0 2
88756: PPUSH
88757: LD_VAR 0 3
88761: PPUSH
88762: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88766: LD_INT 35
88768: PPUSH
88769: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88773: LD_VAR 0 1
88777: PPUSH
88778: LD_VAR 0 2
88782: PPUSH
88783: LD_VAR 0 3
88787: PPUSH
88788: CALL 80011 0 3
88792: NOT
88793: IFFALSE 88797
// exit ;
88795: GO 89051
// until GetDistUnitXY ( unit , x , y ) < dist ;
88797: LD_VAR 0 1
88801: PPUSH
88802: LD_VAR 0 2
88806: PPUSH
88807: LD_VAR 0 3
88811: PPUSH
88812: CALL_OW 297
88816: PUSH
88817: LD_VAR 0 5
88821: LESS
88822: IFFALSE 88766
// end ; ComTurnXY ( unit , x , y ) ;
88824: LD_VAR 0 1
88828: PPUSH
88829: LD_VAR 0 2
88833: PPUSH
88834: LD_VAR 0 3
88838: PPUSH
88839: CALL_OW 118
// wait ( 5 ) ;
88843: LD_INT 5
88845: PPUSH
88846: CALL_OW 67
// _d := GetDir ( unit ) ;
88850: LD_ADDR_VAR 0 10
88854: PUSH
88855: LD_VAR 0 1
88859: PPUSH
88860: CALL_OW 254
88864: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88865: LD_ADDR_VAR 0 8
88869: PUSH
88870: LD_VAR 0 1
88874: PPUSH
88875: CALL_OW 250
88879: PPUSH
88880: LD_VAR 0 10
88884: PPUSH
88885: LD_VAR 0 5
88889: PPUSH
88890: CALL_OW 272
88894: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88895: LD_ADDR_VAR 0 9
88899: PUSH
88900: LD_VAR 0 1
88904: PPUSH
88905: CALL_OW 251
88909: PPUSH
88910: LD_VAR 0 10
88914: PPUSH
88915: LD_VAR 0 5
88919: PPUSH
88920: CALL_OW 273
88924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88925: LD_VAR 0 8
88929: PPUSH
88930: LD_VAR 0 9
88934: PPUSH
88935: CALL_OW 488
88939: NOT
88940: IFFALSE 88944
// exit ;
88942: GO 89051
// ComAnimCustom ( unit , 1 ) ;
88944: LD_VAR 0 1
88948: PPUSH
88949: LD_INT 1
88951: PPUSH
88952: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88956: LD_VAR 0 8
88960: PPUSH
88961: LD_VAR 0 9
88965: PPUSH
88966: LD_VAR 0 6
88970: PPUSH
88971: LD_VAR 0 7
88975: PPUSH
88976: CALL_OW 330
// repeat wait ( 1 ) ;
88980: LD_INT 1
88982: PPUSH
88983: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88987: LD_VAR 0 1
88991: PPUSH
88992: CALL_OW 316
88996: PUSH
88997: LD_VAR 0 1
89001: PPUSH
89002: CALL_OW 314
89006: OR
89007: PUSH
89008: LD_VAR 0 1
89012: PPUSH
89013: CALL_OW 302
89017: NOT
89018: OR
89019: PUSH
89020: LD_VAR 0 1
89024: PPUSH
89025: CALL_OW 301
89029: OR
89030: IFFALSE 88980
// RemoveSeeing ( _x , _y , side ) ;
89032: LD_VAR 0 8
89036: PPUSH
89037: LD_VAR 0 9
89041: PPUSH
89042: LD_VAR 0 6
89046: PPUSH
89047: CALL_OW 331
// end ; end_of_file
89051: LD_VAR 0 4
89055: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89056: LD_VAR 0 1
89060: PUSH
89061: LD_INT 200
89063: DOUBLE
89064: GREATEREQUAL
89065: IFFALSE 89073
89067: LD_INT 299
89069: DOUBLE
89070: LESSEQUAL
89071: IFTRUE 89075
89073: GO 89107
89075: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89076: LD_VAR 0 1
89080: PPUSH
89081: LD_VAR 0 2
89085: PPUSH
89086: LD_VAR 0 3
89090: PPUSH
89091: LD_VAR 0 4
89095: PPUSH
89096: LD_VAR 0 5
89100: PPUSH
89101: CALL 85143 0 5
89105: GO 89184
89107: LD_INT 300
89109: DOUBLE
89110: GREATEREQUAL
89111: IFFALSE 89119
89113: LD_INT 399
89115: DOUBLE
89116: LESSEQUAL
89117: IFTRUE 89121
89119: GO 89183
89121: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89122: LD_VAR 0 1
89126: PPUSH
89127: LD_VAR 0 2
89131: PPUSH
89132: LD_VAR 0 3
89136: PPUSH
89137: LD_VAR 0 4
89141: PPUSH
89142: LD_VAR 0 5
89146: PPUSH
89147: LD_VAR 0 6
89151: PPUSH
89152: LD_VAR 0 7
89156: PPUSH
89157: LD_VAR 0 8
89161: PPUSH
89162: LD_VAR 0 9
89166: PPUSH
89167: LD_VAR 0 10
89171: PPUSH
89172: LD_VAR 0 11
89176: PPUSH
89177: CALL 40443 0 11
89181: GO 89184
89183: POP
// end ;
89184: PPOPN 11
89186: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89187: LD_VAR 0 1
89191: PPUSH
89192: LD_VAR 0 2
89196: PPUSH
89197: LD_VAR 0 3
89201: PPUSH
89202: LD_VAR 0 4
89206: PPUSH
89207: LD_VAR 0 5
89211: PPUSH
89212: CALL 84879 0 5
// end ;
89216: PPOPN 5
89218: END
