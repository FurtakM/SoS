// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27314 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 48744 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 48744 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 48744 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 48744 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 48744 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18820 0 1
7815: PPUSH
7816: CALL 18664 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18820 0 1
11310: PPUSH
11311: CALL 18702 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25610 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25610 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16597 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16597 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 51612 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 53874 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17262 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17277 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19368 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19277 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19090 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19368 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16512
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_INT 88
16303: PUSH
16304: LD_INT 52
16306: PUSH
16307: LD_INT 14
16309: PUSH
16310: LD_INT 53
16312: PUSH
16313: LD_INT 31
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: IN
16327: NOT
16328: IFFALSE 16387
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16330: LD_VAR 0 3
16334: PUSH
16335: LD_INT 13
16337: ARRAY
16338: PUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: CALL 19448 0 1
16348: GREATER
16349: IFFALSE 16370
// AddNewVehicle ( aiData , vehicle , 2 ) else
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_INT 2
16363: PPUSH
16364: CALL 18985 0 3
16368: GO 16387
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: LD_INT 4
16382: PPUSH
16383: CALL 18985 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 264
16396: PUSH
16397: LD_INT 12
16399: PUSH
16400: LD_INT 32
16402: PUSH
16403: LD_INT 51
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 88
16411: PUSH
16412: LD_INT 52
16414: PUSH
16415: LD_INT 14
16417: PUSH
16418: LD_INT 53
16420: PUSH
16421: LD_INT 31
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: IN
16435: IFFALSE 16454
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL 18985 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16454: LD_EXP 60
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 263
16468: PUSH
16469: LD_INT 2
16471: EQUAL
16472: AND
16473: IFFALSE 16512
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_EXP 60
16484: PUSH
16485: LD_INT 1
16487: PPUSH
16488: LD_EXP 60
16492: PPUSH
16493: CALL_OW 12
16497: ARRAY
16498: PPUSH
16499: CALL_OW 313
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: CALL_OW 53
// end ; end ;
16512: PPOPN 3
16514: END
// on BuildingStarted ( building , unit ) do var aiData ;
16515: LD_INT 0
16517: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16518: LD_ADDR_VAR 0 3
16522: PUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: CALL_OW 255
16532: PPUSH
16533: CALL 19368 0 1
16537: ST_TO_ADDR
// if ( aiData ) then
16538: LD_VAR 0 3
16542: IFFALSE 16567
// begin RemoveDestroyedBuilding ( aiData ) ;
16544: LD_VAR 0 3
16548: PPUSH
16549: CALL 19184 0 1
// AddNewUnit ( aiData , building ) ;
16553: LD_VAR 0 3
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL 18894 0 2
// end ; end ;
16567: PPOPN 3
16569: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16570: LD_VAR 0 2
16574: PUSH
16575: LD_EXP 51
16579: EQUAL
16580: IFFALSE 16594
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 19
16589: PPUSH
16590: CALL_OW 113
// end ; end_of_file
16594: PPOPN 2
16596: END
// export function FinishMission ; begin
16597: LD_INT 0
16599: PPUSH
// SetRewards ;
16600: CALL 16621 0 0
// SavePlayerCharacters ;
16604: CALL 16800 0 0
// SaveGlobalVariables ;
16608: CALL 17242 0 0
// YouWin ;
16612: CALL_OW 103
// end ;
16616: LD_VAR 0 1
16620: RET
// function SetRewards ; begin
16621: LD_INT 0
16623: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16624: LD_EXP 55
16628: PPUSH
16629: CALL_OW 302
16633: PUSH
16634: LD_EXP 55
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 3
16646: EQUAL
16647: AND
16648: IFFALSE 16662
// AddMedal ( Xavier , 1 ) else
16650: LD_STRING Xavier
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 101
16660: GO 16673
// AddMedal ( Xavier , - 1 ) ;
16662: LD_STRING Xavier
16664: PPUSH
16665: LD_INT 1
16667: NEG
16668: PPUSH
16669: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16673: LD_EXP 19
16677: PUSH
16678: LD_EXP 28
16682: LESSEQUAL
16683: IFFALSE 16697
// AddMedal ( TimeVS , 1 ) else
16685: LD_STRING TimeVS
16687: PPUSH
16688: LD_INT 1
16690: PPUSH
16691: CALL_OW 101
16695: GO 16708
// AddMedal ( TimeVS , - 1 ) ;
16697: LD_STRING TimeVS
16699: PPUSH
16700: LD_INT 1
16702: NEG
16703: PPUSH
16704: CALL_OW 101
// if heikeCaptured then
16708: LD_EXP 17
16712: IFFALSE 16726
// AddMedal ( Heike , 1 ) else
16714: LD_STRING Heike
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 101
16724: GO 16737
// AddMedal ( Heike , - 1 ) ;
16726: LD_STRING Heike
16728: PPUSH
16729: LD_INT 1
16731: NEG
16732: PPUSH
16733: CALL_OW 101
// GiveMedals ( Main1 ) ;
16737: LD_STRING Main1
16739: PPUSH
16740: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16744: LD_INT 22
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 21
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 23
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 50
16776: PUSH
16777: EMPTY
16778: LIST
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 69
16790: PPUSH
16791: CALL_OW 43
// end ;
16795: LD_VAR 0 1
16799: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16804: LD_EXP 37
16808: PPUSH
16809: LD_STRING Burlak
16811: PPUSH
16812: LD_INT 3
16814: PPUSH
16815: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16819: LD_EXP 38
16823: PPUSH
16824: LD_STRING Karamazov
16826: PPUSH
16827: LD_INT 3
16829: PPUSH
16830: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16834: LD_EXP 39
16838: PPUSH
16839: LD_STRING Petrovova
16841: PPUSH
16842: LD_INT 3
16844: PPUSH
16845: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16849: LD_EXP 40
16853: PPUSH
16854: LD_STRING Gleb
16856: PPUSH
16857: LD_INT 3
16859: PPUSH
16860: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16864: LD_EXP 41
16868: PPUSH
16869: LD_STRING Petrosyan
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16879: LD_EXP 43
16883: PPUSH
16884: LD_STRING Dolgov
16886: PPUSH
16887: LD_INT 3
16889: PPUSH
16890: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16894: LD_EXP 44
16898: PPUSH
16899: LD_STRING Lipshchin
16901: PPUSH
16902: LD_INT 3
16904: PPUSH
16905: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16909: LD_EXP 42
16913: PPUSH
16914: LD_STRING Titov
16916: PPUSH
16917: LD_INT 3
16919: PPUSH
16920: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16924: LD_EXP 45
16928: PPUSH
16929: LD_STRING Kirilenkova
16931: PPUSH
16932: LD_INT 3
16934: PPUSH
16935: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16939: LD_EXP 46
16943: PPUSH
16944: LD_STRING Belkov
16946: PPUSH
16947: LD_INT 3
16949: PPUSH
16950: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16954: LD_EXP 47
16958: PPUSH
16959: LD_STRING Belkov2
16961: PPUSH
16962: LD_INT 3
16964: PPUSH
16965: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16969: LD_EXP 55
16973: PPUSH
16974: LD_STRING Xavier
16976: PPUSH
16977: LD_INT 3
16979: PPUSH
16980: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16984: LD_EXP 48
16988: PPUSH
16989: LD_STRING Vsevolod
16991: PPUSH
16992: LD_INT 3
16994: PPUSH
16995: CALL 12290 0 3
// if heikeCaptured then
16999: LD_EXP 17
17003: IFFALSE 17017
// SaveCharacters ( Heike , 07_Heike ) ;
17005: LD_EXP 56
17009: PPUSH
17010: LD_STRING 07_Heike
17012: PPUSH
17013: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17017: LD_INT 22
17019: PUSH
17020: LD_INT 3
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 2
17039: PUSH
17040: LD_INT 25
17042: PUSH
17043: LD_INT 12
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 25
17052: PUSH
17053: LD_INT 16
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 15
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: PPUSH
17086: LD_STRING other_apemans
17088: PPUSH
17089: LD_INT 3
17091: PPUSH
17092: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_INT 22
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 23
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: PUSH
17141: LD_EXP 37
17145: PUSH
17146: LD_EXP 38
17150: PUSH
17151: LD_EXP 39
17155: PUSH
17156: LD_EXP 40
17160: PUSH
17161: LD_EXP 41
17165: PUSH
17166: LD_EXP 42
17170: PUSH
17171: LD_EXP 43
17175: PUSH
17176: LD_EXP 44
17180: PUSH
17181: LD_EXP 45
17185: PUSH
17186: LD_EXP 46
17190: PUSH
17191: LD_EXP 47
17195: PUSH
17196: LD_EXP 55
17200: PUSH
17201: LD_EXP 48
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: DIFF
17221: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_STRING other_survivors
17229: PPUSH
17230: LD_INT 3
17232: PPUSH
17233: CALL 12347 0 3
// end ;
17237: LD_VAR 0 1
17241: RET
// function SaveGlobalVariables ; begin
17242: LD_INT 0
17244: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17245: LD_EXP 17
17249: PPUSH
17250: LD_STRING 07_HeikeCaptured_1
17252: PPUSH
17253: CALL_OW 39
// end ; end_of_file
17257: LD_VAR 0 1
17261: RET
// export function Lose_Burlak ; begin
17262: LD_INT 0
17264: PPUSH
// YouLost ( Burlak ) ;
17265: LD_STRING Burlak
17267: PPUSH
17268: CALL_OW 104
// end ;
17272: LD_VAR 0 1
17276: RET
// export function Lose_Vsevolod ; begin
17277: LD_INT 0
17279: PPUSH
// YouLost ( Sevi ) ;
17280: LD_STRING Sevi
17282: PPUSH
17283: CALL_OW 104
// end ;
17287: LD_VAR 0 1
17291: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17292: LD_EXP 56
17296: PPUSH
17297: LD_INT 9
17299: PPUSH
17300: CALL_OW 308
17304: PUSH
17305: LD_EXP 57
17309: PPUSH
17310: LD_INT 9
17312: PPUSH
17313: CALL_OW 308
17317: OR
17318: IFFALSE 17330
17320: GO 17322
17322: DISABLE
// YouLost ( Heike ) ; end_of_file
17323: LD_STRING Heike
17325: PPUSH
17326: CALL_OW 104
17330: END
// export aiStructDatas ; export function InitAIManager ; begin
17331: LD_INT 0
17333: PPUSH
// aiStructDatas = [ ] ;
17334: LD_ADDR_EXP 62
17338: PUSH
17339: EMPTY
17340: ST_TO_ADDR
// end ;
17341: LD_VAR 0 1
17345: RET
// every 1 do
17346: GO 17348
17348: DISABLE
// begin InitAIManager ;
17349: CALL 17331 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17353: LD_INT 1
17355: PPUSH
17356: LD_INT 0
17358: PPUSH
17359: LD_INT 2
17361: PPUSH
17362: LD_INT 2
17364: PPUSH
17365: LD_EXP 59
17369: PPUSH
17370: LD_INT 10
17372: PPUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PPUSH
17397: CALL_OW 70
17401: PPUSH
17402: EMPTY
17403: PPUSH
17404: LD_INT 10
17406: PPUSH
17407: LD_INT 12
17409: PPUSH
17410: LD_INT 13
17412: PPUSH
17413: LD_INT 11
17415: PPUSH
17416: LD_INT 13
17418: PPUSH
17419: LD_INT 13
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 25
17430: PUSH
17431: LD_INT 27
17433: PUSH
17434: LD_INT 23
17436: PUSH
17437: LD_INT 26
17439: PUSH
17440: LD_INT 28
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 13
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 25
17467: PUSH
17468: LD_INT 27
17470: PUSH
17471: LD_INT 23
17473: PUSH
17474: LD_INT 26
17476: PUSH
17477: LD_INT 28
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: LD_INT 13
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 25
17508: PUSH
17509: LD_INT 27
17511: PUSH
17512: LD_INT 23
17514: PUSH
17515: LD_INT 26
17517: PUSH
17518: LD_INT 28
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 13
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 25
17545: PUSH
17546: LD_INT 27
17548: PUSH
17549: LD_INT 23
17551: PUSH
17552: LD_INT 26
17554: PUSH
17555: LD_INT 28
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 13
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 25
17582: PUSH
17583: LD_INT 27
17585: PUSH
17586: LD_INT 23
17588: PUSH
17589: LD_INT 26
17591: PUSH
17592: LD_INT 28
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: PPUSH
17613: LD_INT 1
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: PPUSH
17627: LD_INT 5250
17629: PPUSH
17630: LD_INT 1
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL 18520 0 20
// end ;
17657: END
// every 0 0$1 do
17658: GO 17660
17660: DISABLE
// begin StateManager ( 1 ) ;
17661: LD_INT 1
17663: PPUSH
17664: CALL 19668 0 1
// MechanicsManager ( 1 ) ;
17668: LD_INT 1
17670: PPUSH
17671: CALL 20781 0 1
// VehiclesManager ( 1 ) ;
17675: LD_INT 1
17677: PPUSH
17678: CALL 21045 0 1
// SoldiersManager ( 1 ) ;
17682: LD_INT 1
17684: PPUSH
17685: CALL 20154 0 1
// DefenceManager ( 1 ) ;
17689: LD_INT 1
17691: PPUSH
17692: CALL 21555 0 1
// CollectCrates ( 1 ) ;
17696: LD_INT 1
17698: PPUSH
17699: CALL 22487 0 1
// FleeToHealArea ( 1 ) ;
17703: LD_INT 1
17705: PPUSH
17706: CALL 22677 0 1
// FleeToRepairArea ( 1 ) ;
17710: LD_INT 1
17712: PPUSH
17713: CALL 22808 0 1
// RepairBuildings ( 1 ) ;
17717: LD_INT 1
17719: PPUSH
17720: CALL 22964 0 1
// HealDamageUnits ( 1 ) ;
17724: LD_INT 1
17726: PPUSH
17727: CALL 23707 0 1
// enable ;
17731: ENABLE
// end ;
17732: END
// every 0 0$1 do
17733: GO 17735
17735: DISABLE
// begin ProduceVehicles ( 1 ) ;
17736: LD_INT 1
17738: PPUSH
17739: CALL 24205 0 1
// enable ;
17743: ENABLE
// end ;
17744: END
// every 0 0$1 do
17745: GO 17747
17747: DISABLE
// begin AttackManager ( 1 ) ;
17748: LD_INT 1
17750: PPUSH
17751: CALL 22053 0 1
// enable ;
17755: ENABLE
// end ;
17756: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17757: LD_INT 14
17759: PPUSH
17760: LD_INT 22
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PPUSH
17770: CALL_OW 70
17774: PUSH
17775: LD_INT 15
17777: PPUSH
17778: LD_INT 22
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 70
17792: OR
17793: PUSH
17794: LD_INT 16
17796: PPUSH
17797: LD_INT 22
17799: PUSH
17800: LD_INT 3
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 70
17811: OR
17812: PUSH
17813: LD_INT 17
17815: PPUSH
17816: LD_INT 22
17818: PUSH
17819: LD_INT 3
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PPUSH
17826: CALL_OW 70
17830: OR
17831: PUSH
17832: LD_INT 18
17834: PPUSH
17835: LD_INT 22
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 70
17849: OR
17850: PUSH
17851: LD_EXP 61
17855: AND
17856: IFFALSE 18276
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
// begin unitsInArea = [ ] ;
17868: LD_ADDR_VAR 0 2
17872: PUSH
17873: EMPTY
17874: ST_TO_ADDR
// tmp = [ ] ;
17875: LD_ADDR_VAR 0 5
17879: PUSH
17880: EMPTY
17881: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: LD_VAR 0 2
17891: PUSH
17892: LD_INT 14
17894: PPUSH
17895: LD_INT 22
17897: PUSH
17898: LD_INT 3
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 70
17909: ADD
17910: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_VAR 0 2
17920: PUSH
17921: LD_INT 15
17923: PPUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 70
17938: ADD
17939: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_VAR 0 2
17949: PUSH
17950: LD_INT 16
17952: PPUSH
17953: LD_INT 22
17955: PUSH
17956: LD_INT 3
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 70
17967: ADD
17968: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_VAR 0 2
17978: PUSH
17979: LD_INT 17
17981: PPUSH
17982: LD_INT 22
17984: PUSH
17985: LD_INT 3
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 70
17996: ADD
17997: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
17998: LD_ADDR_VAR 0 2
18002: PUSH
18003: LD_VAR 0 2
18007: PUSH
18008: LD_INT 18
18010: PPUSH
18011: LD_INT 22
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 70
18025: ADD
18026: ST_TO_ADDR
// for unit in unitsInArea do
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_VAR 0 2
18036: PUSH
18037: FOR_IN
18038: IFFALSE 18273
// begin if GetType ( unit ) = unit_human then
18040: LD_VAR 0 3
18044: PPUSH
18045: CALL_OW 247
18049: PUSH
18050: LD_INT 1
18052: EQUAL
18053: IFFALSE 18065
// minDistance = 3 else
18055: LD_ADDR_VAR 0 4
18059: PUSH
18060: LD_INT 3
18062: ST_TO_ADDR
18063: GO 18073
// minDistance = 4 ;
18065: LD_ADDR_VAR 0 4
18069: PUSH
18070: LD_INT 4
18072: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18073: LD_ADDR_VAR 0 1
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_EXP 61
18087: PUSH
18088: LD_INT 2
18090: DIV
18091: PUSH
18092: FOR_TO
18093: IFFALSE 18252
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18095: LD_EXP 61
18099: PUSH
18100: LD_VAR 0 1
18104: PUSH
18105: LD_INT 2
18107: MUL
18108: PUSH
18109: LD_INT 1
18111: MINUS
18112: ARRAY
18113: PPUSH
18114: LD_EXP 61
18118: PUSH
18119: LD_VAR 0 1
18123: PUSH
18124: LD_INT 2
18126: MUL
18127: ARRAY
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: CALL_OW 250
18138: PPUSH
18139: LD_VAR 0 3
18143: PPUSH
18144: CALL_OW 251
18148: PPUSH
18149: CALL_OW 298
18153: PUSH
18154: LD_VAR 0 4
18158: LESS
18159: IFFALSE 18204
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18161: LD_EXP 61
18165: PUSH
18166: LD_VAR 0 1
18170: PUSH
18171: LD_INT 2
18173: MUL
18174: PUSH
18175: LD_INT 1
18177: MINUS
18178: ARRAY
18179: PPUSH
18180: LD_EXP 61
18184: PUSH
18185: LD_VAR 0 1
18189: PUSH
18190: LD_INT 2
18192: MUL
18193: ARRAY
18194: PPUSH
18195: LD_INT 2
18197: PPUSH
18198: CALL_OW 456
18202: GO 18250
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18204: LD_ADDR_VAR 0 5
18208: PUSH
18209: LD_VAR 0 5
18213: PUSH
18214: LD_EXP 61
18218: PUSH
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 2
18226: MUL
18227: PUSH
18228: LD_INT 1
18230: MINUS
18231: ARRAY
18232: ADD
18233: PUSH
18234: LD_EXP 61
18238: PUSH
18239: LD_VAR 0 1
18243: PUSH
18244: LD_INT 2
18246: MUL
18247: ARRAY
18248: ADD
18249: ST_TO_ADDR
18250: GO 18092
18252: POP
18253: POP
// minesList = tmp ;
18254: LD_ADDR_EXP 61
18258: PUSH
18259: LD_VAR 0 5
18263: ST_TO_ADDR
// tmp := [ ] ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: EMPTY
18270: ST_TO_ADDR
// end ;
18271: GO 18037
18273: POP
18274: POP
// enable ;
18275: ENABLE
// end ;
18276: PPOPN 5
18278: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18279: LD_INT 2
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 3
18289: EQUAL
18290: PUSH
18291: LD_INT 2
18293: PPUSH
18294: CALL_OW 303
18298: OR
18299: IFFALSE 18428
18301: GO 18303
18303: DISABLE
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 50
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: LD_INT 21
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 32
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: PUSH
18360: FOR_IN
18361: IFFALSE 18426
// if UnitsInside ( turret ) then
18363: LD_VAR 0 2
18367: PPUSH
18368: CALL_OW 313
18372: IFFALSE 18424
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_VAR 0 2
18383: PPUSH
18384: CALL_OW 313
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 122
// wait ( 0 0$01 ) ;
18402: LD_INT 35
18404: PPUSH
18405: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_INT 103
18416: PPUSH
18417: LD_INT 48
18419: PPUSH
18420: CALL_OW 114
// end ;
18424: GO 18360
18426: POP
18427: POP
// end ;
18428: PPOPN 2
18430: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18431: GO 18433
18433: DISABLE
18434: LD_INT 0
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_INT 2
18447: PPUSH
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL 43792 0 3
18458: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18459: LD_ADDR_VAR 0 1
18463: PUSH
18464: DOUBLE
18465: LD_INT 1
18467: DEC
18468: ST_TO_ADDR
18469: LD_VAR 0 4
18473: PUSH
18474: FOR_TO
18475: IFFALSE 18515
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18477: LD_INT 13
18479: PPUSH
18480: LD_VAR 0 4
18484: PUSH
18485: LD_VAR 0 1
18489: ARRAY
18490: PPUSH
18491: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18495: LD_INT 14
18497: PPUSH
18498: LD_VAR 0 4
18502: PUSH
18503: LD_VAR 0 1
18507: ARRAY
18508: PPUSH
18509: CALL_OW 184
// end ;
18513: GO 18474
18515: POP
18516: POP
// end ;
18517: PPOPN 4
18519: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18520: LD_INT 0
18522: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18523: LD_ADDR_EXP 62
18527: PUSH
18528: LD_EXP 62
18532: PUSH
18533: LD_VAR 0 1
18537: PUSH
18538: LD_VAR 0 2
18542: PUSH
18543: LD_VAR 0 3
18547: PUSH
18548: LD_VAR 0 4
18552: PUSH
18553: LD_VAR 0 5
18557: PUSH
18558: LD_VAR 0 6
18562: PUSH
18563: LD_VAR 0 7
18567: PUSH
18568: LD_VAR 0 8
18572: PUSH
18573: LD_VAR 0 9
18577: PUSH
18578: LD_VAR 0 10
18582: PUSH
18583: LD_VAR 0 11
18587: PUSH
18588: LD_VAR 0 12
18592: PUSH
18593: LD_VAR 0 13
18597: PUSH
18598: LD_VAR 0 14
18602: PUSH
18603: LD_VAR 0 15
18607: PUSH
18608: LD_VAR 0 16
18612: PUSH
18613: LD_VAR 0 17
18617: PUSH
18618: LD_VAR 0 18
18622: PUSH
18623: LD_VAR 0 19
18627: PUSH
18628: LD_VAR 0 20
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: ADD
18658: ST_TO_ADDR
// end ;
18659: LD_VAR 0 21
18663: RET
// export function ActiveAI ( index ) ; begin
18664: LD_INT 0
18666: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18667: LD_ADDR_EXP 62
18671: PUSH
18672: LD_EXP 62
18676: PPUSH
18677: LD_VAR 0 1
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL 48866 0 3
18696: ST_TO_ADDR
// end ;
18697: LD_VAR 0 2
18701: RET
// export function DeactiveAI ( index ) ; begin
18702: LD_INT 0
18704: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18705: LD_ADDR_EXP 62
18709: PUSH
18710: LD_EXP 62
18714: PPUSH
18715: LD_VAR 0 1
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PPUSH
18727: LD_INT 0
18729: PPUSH
18730: CALL 48866 0 3
18734: ST_TO_ADDR
// end ;
18735: LD_VAR 0 2
18739: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18740: LD_INT 0
18742: PPUSH
18743: PPUSH
// for i := 1 to aiStructDatas do
18744: LD_ADDR_VAR 0 3
18748: PUSH
18749: DOUBLE
18750: LD_INT 1
18752: DEC
18753: ST_TO_ADDR
18754: LD_EXP 62
18758: PUSH
18759: FOR_TO
18760: IFFALSE 18806
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18762: LD_EXP 62
18766: PUSH
18767: LD_VAR 0 3
18771: ARRAY
18772: PUSH
18773: LD_INT 1
18775: ARRAY
18776: PUSH
18777: LD_VAR 0 1
18781: EQUAL
18782: IFFALSE 18804
// begin result = aiStructDatas [ i ] ;
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: LD_EXP 62
18793: PUSH
18794: LD_VAR 0 3
18798: ARRAY
18799: ST_TO_ADDR
// exit ;
18800: POP
18801: POP
18802: GO 18815
// end ;
18804: GO 18759
18806: POP
18807: POP
// result = [ ] ;
18808: LD_ADDR_VAR 0 2
18812: PUSH
18813: EMPTY
18814: ST_TO_ADDR
// end ;
18815: LD_VAR 0 2
18819: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
// for i := 1 to aiStructDatas do
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: DOUBLE
18830: LD_INT 1
18832: DEC
18833: ST_TO_ADDR
18834: LD_EXP 62
18838: PUSH
18839: FOR_TO
18840: IFFALSE 18880
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18842: LD_EXP 62
18846: PUSH
18847: LD_VAR 0 3
18851: ARRAY
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PUSH
18857: LD_VAR 0 1
18861: EQUAL
18862: IFFALSE 18878
// begin result = i ;
18864: LD_ADDR_VAR 0 2
18868: PUSH
18869: LD_VAR 0 3
18873: ST_TO_ADDR
// exit ;
18874: POP
18875: POP
18876: GO 18889
// end ;
18878: GO 18839
18880: POP
18881: POP
// result = [ ] ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: EMPTY
18888: ST_TO_ADDR
// end ;
18889: LD_VAR 0 2
18893: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
18898: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18899: LD_ADDR_VAR 0 4
18903: PUSH
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 1
18911: ARRAY
18912: PPUSH
18913: CALL 18820 0 1
18917: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18918: LD_ADDR_VAR 0 5
18922: PUSH
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 5
18930: ARRAY
18931: ST_TO_ADDR
// newArray = newArray ^ unit ;
18932: LD_ADDR_VAR 0 5
18936: PUSH
18937: LD_VAR 0 5
18941: PUSH
18942: LD_VAR 0 2
18946: ADD
18947: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18948: LD_ADDR_EXP 62
18952: PUSH
18953: LD_EXP 62
18957: PPUSH
18958: LD_VAR 0 4
18962: PUSH
18963: LD_INT 5
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: LD_VAR 0 5
18974: PPUSH
18975: CALL 48866 0 3
18979: ST_TO_ADDR
// end ;
18980: LD_VAR 0 3
18984: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18985: LD_INT 0
18987: PPUSH
18988: PPUSH
18989: PPUSH
// SetTag ( veh , state ) ;
18990: LD_VAR 0 2
18994: PPUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19004: LD_ADDR_VAR 0 5
19008: PUSH
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 1
19016: ARRAY
19017: PPUSH
19018: CALL 18820 0 1
19022: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19023: LD_ADDR_VAR 0 6
19027: PUSH
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 5
19035: ARRAY
19036: ST_TO_ADDR
// newArray = newArray ^ veh ;
19037: LD_ADDR_VAR 0 6
19041: PUSH
19042: LD_VAR 0 6
19046: PUSH
19047: LD_VAR 0 2
19051: ADD
19052: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19053: LD_ADDR_EXP 62
19057: PUSH
19058: LD_EXP 62
19062: PPUSH
19063: LD_VAR 0 5
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: LD_VAR 0 6
19079: PPUSH
19080: CALL 48866 0 3
19084: ST_TO_ADDR
// end ;
19085: LD_VAR 0 4
19089: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19090: LD_INT 0
19092: PPUSH
19093: PPUSH
19094: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19095: LD_ADDR_VAR 0 4
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: PPUSH
19109: CALL 18820 0 1
19113: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19114: LD_ADDR_VAR 0 5
19118: PUSH
19119: LD_VAR 0 1
19123: PUSH
19124: LD_INT 7
19126: ARRAY
19127: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19128: LD_ADDR_VAR 0 5
19132: PUSH
19133: LD_VAR 0 5
19137: PUSH
19138: LD_VAR 0 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: ADD
19146: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19147: LD_ADDR_EXP 62
19151: PUSH
19152: LD_EXP 62
19156: PPUSH
19157: LD_VAR 0 4
19161: PUSH
19162: LD_INT 7
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 48866 0 3
19178: ST_TO_ADDR
// end ;
19179: LD_VAR 0 3
19183: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19184: LD_INT 0
19186: PPUSH
19187: PPUSH
19188: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_VAR 0 1
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: PPUSH
19203: CALL 18820 0 1
19207: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19208: LD_ADDR_VAR 0 4
19212: PUSH
19213: LD_VAR 0 1
19217: PUSH
19218: LD_INT 7
19220: ARRAY
19221: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19222: LD_ADDR_VAR 0 4
19226: PUSH
19227: LD_VAR 0 4
19231: PPUSH
19232: LD_INT 1
19234: PPUSH
19235: CALL_OW 3
19239: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19240: LD_ADDR_EXP 62
19244: PUSH
19245: LD_EXP 62
19249: PPUSH
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 7
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: LD_VAR 0 4
19266: PPUSH
19267: CALL 48866 0 3
19271: ST_TO_ADDR
// end ;
19272: LD_VAR 0 2
19276: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
19281: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19282: LD_ADDR_VAR 0 4
19286: PUSH
19287: LD_VAR 0 1
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: CALL 18820 0 1
19300: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_VAR 0 1
19310: PUSH
19311: LD_INT 5
19313: ARRAY
19314: ST_TO_ADDR
// newArray = newArray diff unit ;
19315: LD_ADDR_VAR 0 5
19319: PUSH
19320: LD_VAR 0 5
19324: PUSH
19325: LD_VAR 0 2
19329: DIFF
19330: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19331: LD_ADDR_EXP 62
19335: PUSH
19336: LD_EXP 62
19340: PPUSH
19341: LD_VAR 0 4
19345: PUSH
19346: LD_INT 5
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: LD_VAR 0 5
19357: PPUSH
19358: CALL 48866 0 3
19362: ST_TO_ADDR
// end ;
19363: LD_VAR 0 3
19367: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19368: LD_INT 0
19370: PPUSH
19371: PPUSH
// for i := 1 to aiStructDatas do
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_EXP 62
19386: PUSH
19387: FOR_TO
19388: IFFALSE 19434
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19390: LD_EXP 62
19394: PUSH
19395: LD_VAR 0 3
19399: ARRAY
19400: PUSH
19401: LD_INT 3
19403: ARRAY
19404: PUSH
19405: LD_VAR 0 1
19409: EQUAL
19410: IFFALSE 19432
// begin result = aiStructDatas [ i ] ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_EXP 62
19421: PUSH
19422: LD_VAR 0 3
19426: ARRAY
19427: ST_TO_ADDR
// exit ;
19428: POP
19429: POP
19430: GO 19443
// end ;
19432: GO 19387
19434: POP
19435: POP
// result = [ ] ;
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: EMPTY
19442: ST_TO_ADDR
// end ;
19443: LD_VAR 0 2
19447: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
// if not aiData then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19469
// begin result = [ ] ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: EMPTY
19466: ST_TO_ADDR
// exit ;
19467: GO 19553
// end ; defVehs = [ ] ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: EMPTY
19475: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19476: LD_ADDR_VAR 0 4
19480: PUSH
19481: LD_VAR 0 1
19485: PUSH
19486: LD_INT 5
19488: ARRAY
19489: PPUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 72
19504: PUSH
19505: FOR_IN
19506: IFFALSE 19541
// if GetTag ( veh ) = 2 then
19508: LD_VAR 0 4
19512: PPUSH
19513: CALL_OW 110
19517: PUSH
19518: LD_INT 2
19520: EQUAL
19521: IFFALSE 19539
// defVehs = defVehs ^ veh ;
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_VAR 0 3
19532: PUSH
19533: LD_VAR 0 4
19537: ADD
19538: ST_TO_ADDR
19539: GO 19505
19541: POP
19542: POP
// result = defVehs ;
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: LD_VAR 0 3
19552: ST_TO_ADDR
// end ;
19553: LD_VAR 0 2
19557: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
19562: PPUSH
// if not aiData then
19563: LD_VAR 0 1
19567: NOT
19568: IFFALSE 19579
// begin result = [ ] ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: EMPTY
19576: ST_TO_ADDR
// exit ;
19577: GO 19663
// end ; attackVehs = [ ] ;
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: EMPTY
19585: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19586: LD_ADDR_VAR 0 4
19590: PUSH
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 5
19598: ARRAY
19599: PPUSH
19600: LD_INT 21
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL_OW 72
19614: PUSH
19615: FOR_IN
19616: IFFALSE 19651
// if GetTag ( veh ) = 4 then
19618: LD_VAR 0 4
19622: PPUSH
19623: CALL_OW 110
19627: PUSH
19628: LD_INT 4
19630: EQUAL
19631: IFFALSE 19649
// attackVehs = attackVehs ^ veh ;
19633: LD_ADDR_VAR 0 3
19637: PUSH
19638: LD_VAR 0 3
19642: PUSH
19643: LD_VAR 0 4
19647: ADD
19648: ST_TO_ADDR
19649: GO 19615
19651: POP
19652: POP
// result = attackVehs ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_VAR 0 3
19662: ST_TO_ADDR
// end ;
19663: LD_VAR 0 2
19667: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
19672: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19673: LD_ADDR_VAR 0 3
19677: PUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL 18740 0 1
19687: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19688: LD_VAR 0 3
19692: PUSH
19693: LD_INT 2
19695: ARRAY
19696: PUSH
19697: LD_INT 0
19699: EQUAL
19700: IFFALSE 19704
// exit ;
19702: GO 20149
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19704: LD_ADDR_VAR 0 4
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_INT 5
19716: ARRAY
19717: PPUSH
19718: LD_INT 21
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 72
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19839
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19736: LD_VAR 0 4
19740: PPUSH
19741: CALL_OW 256
19745: PUSH
19746: LD_INT 1000
19748: EQUAL
19749: PUSH
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 110
19759: PUSH
19760: LD_INT 0
19762: EQUAL
19763: AND
19764: IFFALSE 19780
// SetTag ( unit , 1 ) else
19766: LD_VAR 0 4
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: CALL_OW 109
19778: GO 19837
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19780: LD_VAR 0 4
19784: PPUSH
19785: CALL_OW 256
19789: PUSH
19790: LD_INT 950
19792: LESSEQUAL
19793: PUSH
19794: LD_VAR 0 4
19798: PPUSH
19799: CALL_OW 256
19803: PUSH
19804: LD_INT 250
19806: GREATER
19807: AND
19808: PUSH
19809: LD_VAR 0 4
19813: PPUSH
19814: CALL_OW 110
19818: PUSH
19819: LD_INT 1
19821: EQUAL
19822: AND
19823: IFFALSE 19837
// SetTag ( unit , 0 ) ;
19825: LD_VAR 0 4
19829: PPUSH
19830: LD_INT 0
19832: PPUSH
19833: CALL_OW 109
// end ;
19837: GO 19733
19839: POP
19840: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19841: LD_ADDR_VAR 0 4
19845: PUSH
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 5
19853: ARRAY
19854: PPUSH
19855: LD_INT 21
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 72
19869: PUSH
19870: FOR_IN
19871: IFFALSE 20147
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19873: LD_VAR 0 4
19877: PPUSH
19878: CALL_OW 256
19882: PUSH
19883: LD_INT 1000
19885: EQUAL
19886: PUSH
19887: LD_VAR 0 4
19891: PPUSH
19892: CALL_OW 110
19896: PUSH
19897: LD_INT 3
19899: EQUAL
19900: AND
19901: IFFALSE 19915
// SetTag ( unit , 2 ) ;
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_INT 2
19910: PPUSH
19911: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19915: LD_VAR 0 4
19919: PPUSH
19920: CALL_OW 256
19924: PUSH
19925: LD_INT 1000
19927: EQUAL
19928: PUSH
19929: LD_VAR 0 4
19933: PPUSH
19934: CALL_OW 110
19938: PUSH
19939: LD_INT 5
19941: EQUAL
19942: AND
19943: IFFALSE 19957
// SetTag ( unit , 4 ) ;
19945: LD_VAR 0 4
19949: PPUSH
19950: LD_INT 4
19952: PPUSH
19953: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19957: LD_VAR 0 4
19961: PPUSH
19962: CALL_OW 256
19966: PUSH
19967: LD_INT 650
19969: LESSEQUAL
19970: PUSH
19971: LD_VAR 0 4
19975: PPUSH
19976: CALL_OW 110
19980: PUSH
19981: LD_INT 4
19983: EQUAL
19984: AND
19985: PUSH
19986: LD_VAR 0 4
19990: PPUSH
19991: CALL_OW 263
19995: PUSH
19996: LD_INT 1
19998: EQUAL
19999: AND
20000: IFFALSE 20014
// SetTag ( unit , 5 ) ;
20002: LD_VAR 0 4
20006: PPUSH
20007: LD_INT 5
20009: PPUSH
20010: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20014: LD_VAR 0 4
20018: PPUSH
20019: CALL_OW 256
20023: PUSH
20024: LD_INT 650
20026: LESSEQUAL
20027: PUSH
20028: LD_VAR 0 4
20032: PPUSH
20033: CALL_OW 110
20037: PUSH
20038: LD_INT 2
20040: EQUAL
20041: AND
20042: PUSH
20043: LD_VAR 0 4
20047: PPUSH
20048: CALL_OW 263
20052: PUSH
20053: LD_INT 1
20055: EQUAL
20056: AND
20057: IFFALSE 20071
// SetTag ( unit , 3 ) ;
20059: LD_VAR 0 4
20063: PPUSH
20064: LD_INT 3
20066: PPUSH
20067: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20071: LD_VAR 0 4
20075: PPUSH
20076: CALL_OW 263
20080: PUSH
20081: LD_INT 1
20083: EQUAL
20084: IFFALSE 20118
// if ( UnitsInside ( unit ) ) then
20086: LD_VAR 0 4
20090: PPUSH
20091: CALL_OW 313
20095: IFFALSE 20118
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20097: LD_VAR 0 4
20101: PPUSH
20102: CALL_OW 313
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PPUSH
20111: LD_INT 7
20113: PPUSH
20114: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20118: LD_VAR 0 4
20122: PPUSH
20123: CALL_OW 261
20127: PUSH
20128: LD_INT 50
20130: LESS
20131: IFFALSE 20145
// SetFuel ( unit , 100 ) ;
20133: LD_VAR 0 4
20137: PPUSH
20138: LD_INT 100
20140: PPUSH
20141: CALL_OW 240
// end ;
20145: GO 19870
20147: POP
20148: POP
// end ;
20149: LD_VAR 0 2
20153: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20154: LD_INT 0
20156: PPUSH
20157: PPUSH
20158: PPUSH
20159: PPUSH
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL 18740 0 1
20180: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 2
20188: ARRAY
20189: PUSH
20190: LD_INT 0
20192: EQUAL
20193: IFFALSE 20197
// exit ;
20195: GO 20776
// soldiersInsideBarracks = [ ] ;
20197: LD_ADDR_VAR 0 10
20201: PUSH
20202: EMPTY
20203: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 5
20216: ARRAY
20217: PPUSH
20218: LD_INT 25
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 50
20230: PUSH
20231: EMPTY
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PPUSH
20238: CALL_OW 72
20242: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20243: LD_ADDR_VAR 0 6
20247: PUSH
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 6
20255: ARRAY
20256: PPUSH
20257: LD_INT 21
20259: PUSH
20260: LD_INT 3
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 50
20269: PUSH
20270: EMPTY
20271: LIST
20272: PUSH
20273: LD_INT 3
20275: PUSH
20276: LD_INT 59
20278: PUSH
20279: EMPTY
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 31
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 30
20301: PUSH
20302: LD_INT 32
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 72
20324: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20325: LD_ADDR_VAR 0 7
20329: PUSH
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 6
20337: ARRAY
20338: PPUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 3
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 50
20351: PUSH
20352: EMPTY
20353: LIST
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 4
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 30
20370: PUSH
20371: LD_INT 5
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 72
20392: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20393: LD_ADDR_VAR 0 9
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 6
20405: ARRAY
20406: PPUSH
20407: LD_INT 21
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 50
20419: PUSH
20420: EMPTY
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 30
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 72
20460: PUSH
20461: LD_INT 1
20463: ARRAY
20464: ST_TO_ADDR
// for barrack in barracks do
20465: LD_ADDR_VAR 0 11
20469: PUSH
20470: LD_VAR 0 7
20474: PUSH
20475: FOR_IN
20476: IFFALSE 20501
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20478: LD_ADDR_VAR 0 10
20482: PUSH
20483: LD_VAR 0 10
20487: PUSH
20488: LD_VAR 0 11
20492: PPUSH
20493: CALL_OW 313
20497: ADD
20498: ST_TO_ADDR
20499: GO 20475
20501: POP
20502: POP
// index = 1 ;
20503: LD_ADDR_VAR 0 8
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20511: LD_VAR 0 4
20515: PPUSH
20516: LD_INT 56
20518: PUSH
20519: EMPTY
20520: LIST
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: LD_INT 60
20527: PUSH
20528: EMPTY
20529: LIST
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 72
20543: PUSH
20544: LD_VAR 0 6
20548: AND
20549: PUSH
20550: LD_VAR 0 9
20554: AND
20555: IFFALSE 20655
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20557: LD_ADDR_VAR 0 5
20561: PUSH
20562: LD_VAR 0 4
20566: PPUSH
20567: LD_INT 56
20569: PUSH
20570: EMPTY
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: PPUSH
20576: CALL_OW 72
20580: PUSH
20581: LD_VAR 0 10
20585: ADD
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20653
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20590: LD_VAR 0 5
20594: PPUSH
20595: CALL_OW 110
20599: PUSH
20600: LD_INT 1
20602: EQUAL
20603: PUSH
20604: LD_VAR 0 8
20608: PUSH
20609: LD_VAR 0 6
20613: LESSEQUAL
20614: AND
20615: IFFALSE 20651
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20617: LD_VAR 0 5
20621: PPUSH
20622: LD_VAR 0 6
20626: PUSH
20627: LD_VAR 0 8
20631: ARRAY
20632: PPUSH
20633: CALL_OW 120
// index = index + 1 ;
20637: LD_ADDR_VAR 0 8
20641: PUSH
20642: LD_VAR 0 8
20646: PUSH
20647: LD_INT 1
20649: PLUS
20650: ST_TO_ADDR
// end ;
20651: GO 20587
20653: POP
20654: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20655: LD_VAR 0 4
20659: PPUSH
20660: LD_INT 56
20662: PUSH
20663: EMPTY
20664: LIST
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: LD_INT 60
20671: PUSH
20672: EMPTY
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 72
20687: PUSH
20688: LD_VAR 0 6
20692: NOT
20693: AND
20694: PUSH
20695: LD_VAR 0 7
20699: AND
20700: IFFALSE 20776
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20702: LD_ADDR_VAR 0 5
20706: PUSH
20707: LD_VAR 0 4
20711: PPUSH
20712: LD_INT 56
20714: PUSH
20715: EMPTY
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: PPUSH
20721: CALL_OW 72
20725: PUSH
20726: FOR_IN
20727: IFFALSE 20774
// if ( GetTag ( sold ) = 1 ) then
20729: LD_VAR 0 5
20733: PPUSH
20734: CALL_OW 110
20738: PUSH
20739: LD_INT 1
20741: EQUAL
20742: IFFALSE 20772
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20744: LD_VAR 0 5
20748: PPUSH
20749: LD_VAR 0 7
20753: PUSH
20754: LD_INT 1
20756: PPUSH
20757: LD_VAR 0 7
20761: PPUSH
20762: CALL_OW 12
20766: ARRAY
20767: PPUSH
20768: CALL_OW 120
20772: GO 20726
20774: POP
20775: POP
// end ;
20776: LD_VAR 0 2
20780: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL 18740 0 1
20802: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 2
20810: ARRAY
20811: PUSH
20812: LD_INT 0
20814: EQUAL
20815: IFFALSE 20819
// exit ;
20817: GO 21040
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 5
20831: ARRAY
20832: PPUSH
20833: LD_INT 25
20835: PUSH
20836: LD_INT 3
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 50
20845: PUSH
20846: EMPTY
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PPUSH
20853: CALL_OW 72
20857: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20858: LD_ADDR_VAR 0 6
20862: PUSH
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 6
20870: ARRAY
20871: PPUSH
20872: LD_INT 21
20874: PUSH
20875: LD_INT 3
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 50
20884: PUSH
20885: EMPTY
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 30
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 3
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: PPUSH
20921: CALL_OW 72
20925: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20926: LD_VAR 0 4
20930: PPUSH
20931: LD_INT 56
20933: PUSH
20934: EMPTY
20935: LIST
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: LD_INT 60
20942: PUSH
20943: EMPTY
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PPUSH
20954: CALL_OW 72
20958: PUSH
20959: LD_VAR 0 6
20963: AND
20964: IFFALSE 21040
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20966: LD_ADDR_VAR 0 5
20970: PUSH
20971: LD_VAR 0 4
20975: PPUSH
20976: LD_INT 56
20978: PUSH
20979: EMPTY
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: PPUSH
20985: CALL_OW 72
20989: PUSH
20990: FOR_IN
20991: IFFALSE 21038
// if ( GetTag ( mech ) = 1 ) then
20993: LD_VAR 0 5
20997: PPUSH
20998: CALL_OW 110
21002: PUSH
21003: LD_INT 1
21005: EQUAL
21006: IFFALSE 21036
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21008: LD_VAR 0 5
21012: PPUSH
21013: LD_VAR 0 6
21017: PUSH
21018: LD_INT 1
21020: PPUSH
21021: LD_VAR 0 6
21025: PPUSH
21026: CALL_OW 12
21030: ARRAY
21031: PPUSH
21032: CALL_OW 120
21036: GO 20990
21038: POP
21039: POP
// end ;
21040: LD_VAR 0 2
21044: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21045: LD_INT 0
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL 18740 0 1
21070: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 2
21078: ARRAY
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: IFFALSE 21087
// exit ;
21085: GO 21550
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21087: LD_ADDR_VAR 0 5
21091: PUSH
21092: LD_VAR 0 3
21096: PUSH
21097: LD_INT 5
21099: ARRAY
21100: PPUSH
21101: LD_INT 21
21103: PUSH
21104: LD_INT 3
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 50
21113: PUSH
21114: EMPTY
21115: LIST
21116: PUSH
21117: LD_INT 59
21119: PUSH
21120: EMPTY
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 30
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 30
21138: PUSH
21139: LD_INT 3
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PPUSH
21157: CALL_OW 72
21161: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21162: LD_ADDR_VAR 0 8
21166: PUSH
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 5
21174: ARRAY
21175: PPUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 33
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 92
21198: PUSH
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 10
21206: ARRAY
21207: PPUSH
21208: LD_INT 0
21210: PPUSH
21211: CALL_OW 517
21215: PUSH
21216: LD_INT 1
21218: ARRAY
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_VAR 0 3
21228: PUSH
21229: LD_INT 10
21231: ARRAY
21232: PPUSH
21233: LD_INT 0
21235: PPUSH
21236: CALL_OW 517
21240: PUSH
21241: LD_INT 2
21243: ARRAY
21244: PUSH
21245: LD_INT 1
21247: ARRAY
21248: PUSH
21249: LD_INT 16
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 24
21263: PUSH
21264: LD_INT 1000
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: PPUSH
21281: CALL_OW 72
21285: ST_TO_ADDR
// if not damageVehicles then
21286: LD_VAR 0 8
21290: NOT
21291: IFFALSE 21295
// exit ;
21293: GO 21550
// if fabs then
21295: LD_VAR 0 5
21299: IFFALSE 21424
// begin for damageVeh in damageVehicles do
21301: LD_ADDR_VAR 0 9
21305: PUSH
21306: LD_VAR 0 8
21310: PUSH
21311: FOR_IN
21312: IFFALSE 21422
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21314: LD_VAR 0 9
21318: PPUSH
21319: CALL_OW 110
21323: PUSH
21324: LD_INT 3
21326: EQUAL
21327: PUSH
21328: LD_VAR 0 9
21332: PPUSH
21333: CALL_OW 110
21337: PUSH
21338: LD_INT 5
21340: EQUAL
21341: OR
21342: IFFALSE 21420
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21344: LD_ADDR_VAR 0 7
21348: PUSH
21349: LD_VAR 0 5
21353: PPUSH
21354: LD_VAR 0 9
21358: PPUSH
21359: CALL_OW 74
21363: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21364: LD_ADDR_VAR 0 4
21368: PUSH
21369: LD_VAR 0 7
21373: PPUSH
21374: CALL_OW 313
21378: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21379: LD_VAR 0 4
21383: PPUSH
21384: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21388: LD_VAR 0 4
21392: PPUSH
21393: LD_INT 3
21395: PUSH
21396: LD_INT 60
21398: PUSH
21399: EMPTY
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 72
21410: PPUSH
21411: LD_VAR 0 9
21415: PPUSH
21416: CALL_OW 189
// end ;
21420: GO 21311
21422: POP
21423: POP
// end ; for damageVeh in damageVehicles do
21424: LD_ADDR_VAR 0 9
21428: PUSH
21429: LD_VAR 0 8
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21548
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21437: LD_VAR 0 9
21441: PPUSH
21442: CALL_OW 110
21446: PUSH
21447: LD_INT 3
21449: EQUAL
21450: PUSH
21451: LD_VAR 0 9
21455: PPUSH
21456: CALL_OW 110
21460: PUSH
21461: LD_INT 5
21463: EQUAL
21464: OR
21465: IFFALSE 21546
// begin mehInside = UnitsInside ( damageVeh ) ;
21467: LD_ADDR_VAR 0 10
21471: PUSH
21472: LD_VAR 0 9
21476: PPUSH
21477: CALL_OW 313
21481: ST_TO_ADDR
// if mehInside then
21482: LD_VAR 0 10
21486: IFFALSE 21546
// begin mehInside = mehInside [ 1 ] ;
21488: LD_ADDR_VAR 0 10
21492: PUSH
21493: LD_VAR 0 10
21497: PUSH
21498: LD_INT 1
21500: ARRAY
21501: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21502: LD_VAR 0 10
21506: PPUSH
21507: CALL_OW 181
// wait ( 0 0$01 ) ;
21511: LD_INT 35
21513: PPUSH
21514: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21518: LD_VAR 0 10
21522: PPUSH
21523: LD_VAR 0 9
21527: PPUSH
21528: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21532: LD_VAR 0 10
21536: PPUSH
21537: LD_VAR 0 9
21541: PPUSH
21542: CALL_OW 180
// end ; end ;
21546: GO 21434
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 2
21554: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21563: LD_ADDR_VAR 0 3
21567: PUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL 18740 0 1
21577: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21578: LD_VAR 0 3
21582: PUSH
21583: LD_INT 2
21585: ARRAY
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: IFFALSE 21594
// exit ;
21592: GO 22048
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21594: LD_ADDR_VAR 0 7
21598: PUSH
21599: LD_VAR 0 3
21603: PUSH
21604: LD_INT 6
21606: ARRAY
21607: PPUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 50
21620: PUSH
21621: EMPTY
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: PPUSH
21657: CALL_OW 72
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21666: LD_VAR 0 3
21670: PPUSH
21671: CALL 19448 0 1
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 22048
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21680: LD_VAR 0 7
21684: PUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL 19448 0 1
21694: AND
21695: PUSH
21696: LD_VAR 0 3
21700: PUSH
21701: LD_INT 11
21703: ARRAY
21704: PPUSH
21705: LD_INT 81
21707: PUSH
21708: LD_VAR 0 3
21712: PUSH
21713: LD_INT 3
21715: ARRAY
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PPUSH
21721: CALL_OW 70
21725: NOT
21726: AND
21727: IFFALSE 21877
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21729: LD_ADDR_VAR 0 5
21733: PUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: CALL 19448 0 1
21743: PPUSH
21744: LD_INT 50
21746: PUSH
21747: EMPTY
21748: LIST
21749: PUSH
21750: LD_INT 3
21752: PUSH
21753: LD_INT 60
21755: PUSH
21756: EMPTY
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: LD_INT 92
21768: PUSH
21769: LD_VAR 0 7
21773: PPUSH
21774: CALL_OW 250
21778: PUSH
21779: LD_VAR 0 7
21783: PPUSH
21784: CALL_OW 251
21788: PUSH
21789: LD_INT 12
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PPUSH
21807: CALL_OW 72
21811: PUSH
21812: FOR_IN
21813: IFFALSE 21875
// if GetLives ( veh ) = 1000 then
21815: LD_VAR 0 5
21819: PPUSH
21820: CALL_OW 256
21824: PUSH
21825: LD_INT 1000
21827: EQUAL
21828: IFFALSE 21861
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21830: LD_VAR 0 5
21834: PPUSH
21835: LD_VAR 0 7
21839: PPUSH
21840: CALL_OW 250
21844: PPUSH
21845: LD_VAR 0 7
21849: PPUSH
21850: CALL_OW 251
21854: PPUSH
21855: CALL_OW 111
21859: GO 21873
// SetTag ( veh , 3 ) ;
21861: LD_VAR 0 5
21865: PPUSH
21866: LD_INT 3
21868: PPUSH
21869: CALL_OW 109
21873: GO 21812
21875: POP
21876: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21877: LD_VAR 0 3
21881: PUSH
21882: LD_INT 11
21884: ARRAY
21885: PPUSH
21886: LD_INT 81
21888: PUSH
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 3
21896: ARRAY
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 70
21906: NOT
21907: IFFALSE 21911
// exit ;
21909: GO 22048
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21911: LD_ADDR_VAR 0 5
21915: PUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL 19448 0 1
21925: PPUSH
21926: LD_INT 50
21928: PUSH
21929: EMPTY
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 60
21937: PUSH
21938: EMPTY
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 72
21953: PUSH
21954: FOR_IN
21955: IFFALSE 22046
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21957: LD_VAR 0 5
21961: PPUSH
21962: LD_VAR 0 3
21966: PUSH
21967: LD_INT 11
21969: ARRAY
21970: PPUSH
21971: LD_INT 81
21973: PUSH
21974: LD_VAR 0 3
21978: PUSH
21979: LD_INT 3
21981: ARRAY
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PPUSH
21987: CALL_OW 70
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: CALL_OW 250
22000: PPUSH
22001: LD_VAR 0 3
22005: PUSH
22006: LD_INT 11
22008: ARRAY
22009: PPUSH
22010: LD_INT 81
22012: PUSH
22013: LD_VAR 0 3
22017: PUSH
22018: LD_INT 3
22020: ARRAY
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PPUSH
22026: CALL_OW 70
22030: PUSH
22031: LD_INT 1
22033: ARRAY
22034: PPUSH
22035: CALL_OW 251
22039: PPUSH
22040: CALL_OW 114
22044: GO 21954
22046: POP
22047: POP
// end ;
22048: LD_VAR 0 2
22052: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL 18740 0 1
22075: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 2
22083: ARRAY
22084: PUSH
22085: LD_INT 0
22087: EQUAL
22088: IFFALSE 22092
// exit ;
22090: GO 22482
// if ( aiData [ 18 ] = 0 ) then
22092: LD_VAR 0 3
22096: PUSH
22097: LD_INT 18
22099: ARRAY
22100: PUSH
22101: LD_INT 0
22103: EQUAL
22104: IFFALSE 22108
// exit ;
22106: GO 22482
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22108: LD_VAR 0 3
22112: PPUSH
22113: CALL 19558 0 1
22117: PUSH
22118: LD_VAR 0 3
22122: PUSH
22123: LD_INT 14
22125: ARRAY
22126: GREATEREQUAL
22127: IFFALSE 22482
// begin repeat wait ( 0 0$01 ) ;
22129: LD_INT 35
22131: PPUSH
22132: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22136: LD_ADDR_VAR 0 6
22140: PUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: CALL 19558 0 1
22150: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22151: LD_ADDR_VAR 0 7
22155: PUSH
22156: LD_VAR 0 6
22160: PUSH
22161: FOR_IN
22162: IFFALSE 22462
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22164: LD_ADDR_VAR 0 4
22168: PUSH
22169: LD_INT 81
22171: PUSH
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 3
22179: ARRAY
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: PPUSH
22190: LD_VAR 0 7
22194: PPUSH
22195: CALL_OW 74
22199: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22200: LD_ADDR_VAR 0 5
22204: PUSH
22205: LD_INT 81
22207: PUSH
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 3
22215: ARRAY
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 59
22226: PUSH
22227: EMPTY
22228: LIST
22229: PUSH
22230: LD_INT 21
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 21
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: PPUSH
22263: CALL_OW 69
22267: PPUSH
22268: LD_VAR 0 7
22272: PPUSH
22273: CALL_OW 74
22277: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22278: LD_VAR 0 7
22282: PPUSH
22283: LD_VAR 0 4
22287: PPUSH
22288: CALL_OW 296
22292: PUSH
22293: LD_INT 12
22295: PLUS
22296: PUSH
22297: LD_VAR 0 7
22301: PPUSH
22302: LD_VAR 0 5
22306: PPUSH
22307: CALL_OW 296
22311: LESS
22312: IFFALSE 22388
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22314: LD_VAR 0 7
22318: PPUSH
22319: LD_INT 50
22321: PUSH
22322: EMPTY
22323: LIST
22324: PPUSH
22325: CALL_OW 72
22329: PPUSH
22330: LD_VAR 0 4
22334: PPUSH
22335: CALL_OW 250
22339: PPUSH
22340: LD_VAR 0 4
22344: PPUSH
22345: CALL_OW 251
22349: PPUSH
22350: CALL_OW 114
// wait ( 0 0$01 ) ;
22354: LD_INT 35
22356: PPUSH
22357: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22361: LD_VAR 0 7
22365: PPUSH
22366: LD_INT 50
22368: PUSH
22369: EMPTY
22370: LIST
22371: PPUSH
22372: CALL_OW 72
22376: PPUSH
22377: LD_VAR 0 4
22381: PPUSH
22382: CALL_OW 115
// end else
22386: GO 22460
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22388: LD_VAR 0 7
22392: PPUSH
22393: LD_INT 50
22395: PUSH
22396: EMPTY
22397: LIST
22398: PPUSH
22399: CALL_OW 72
22403: PPUSH
22404: LD_VAR 0 5
22408: PPUSH
22409: CALL_OW 250
22413: PPUSH
22414: LD_VAR 0 5
22418: PPUSH
22419: CALL_OW 251
22423: PPUSH
22424: CALL_OW 114
// wait ( 0 0$01 ) ;
22428: LD_INT 35
22430: PPUSH
22431: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22435: LD_VAR 0 7
22439: PPUSH
22440: LD_INT 50
22442: PUSH
22443: EMPTY
22444: LIST
22445: PPUSH
22446: CALL_OW 72
22450: PPUSH
22451: LD_VAR 0 5
22455: PPUSH
22456: CALL_OW 115
// end ; end ;
22460: GO 22161
22462: POP
22463: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22464: LD_VAR 0 6
22468: PPUSH
22469: LD_INT 50
22471: PUSH
22472: EMPTY
22473: LIST
22474: PPUSH
22475: CALL_OW 72
22479: NOT
22480: IFFALSE 22129
// end ; end ;
22482: LD_VAR 0 2
22486: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22487: LD_INT 0
22489: PPUSH
22490: PPUSH
22491: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22492: LD_ADDR_VAR 0 3
22496: PUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL 18740 0 1
22506: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22507: LD_VAR 0 3
22511: PUSH
22512: LD_INT 2
22514: ARRAY
22515: PUSH
22516: LD_INT 0
22518: EQUAL
22519: IFFALSE 22523
// exit ;
22521: GO 22672
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22523: LD_ADDR_VAR 0 4
22527: PUSH
22528: LD_VAR 0 3
22532: PUSH
22533: LD_INT 5
22535: ARRAY
22536: PPUSH
22537: LD_INT 21
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 50
22549: PUSH
22550: EMPTY
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 34
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 34
22568: PUSH
22569: LD_INT 32
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 34
22578: PUSH
22579: LD_INT 51
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: LIST
22596: PPUSH
22597: CALL_OW 72
22601: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22602: LD_VAR 0 3
22606: PUSH
22607: LD_INT 8
22609: ARRAY
22610: PPUSH
22611: CALL_OW 435
22615: NOT
22616: PUSH
22617: LD_VAR 0 4
22621: NOT
22622: OR
22623: IFFALSE 22627
// exit ;
22625: GO 22672
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22627: LD_VAR 0 4
22631: PPUSH
22632: LD_VAR 0 3
22636: PUSH
22637: LD_INT 8
22639: ARRAY
22640: PPUSH
22641: CALL_OW 435
22645: PUSH
22646: LD_INT 1
22648: ARRAY
22649: PPUSH
22650: LD_VAR 0 3
22654: PUSH
22655: LD_INT 8
22657: ARRAY
22658: PPUSH
22659: CALL_OW 435
22663: PUSH
22664: LD_INT 2
22666: ARRAY
22667: PPUSH
22668: CALL_OW 117
// end ;
22672: LD_VAR 0 2
22676: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL 18740 0 1
22696: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22697: LD_VAR 0 3
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: IFFALSE 22713
// exit ;
22711: GO 22803
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: LD_VAR 0 3
22722: PUSH
22723: LD_INT 5
22725: ARRAY
22726: PPUSH
22727: LD_INT 21
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PPUSH
22737: CALL_OW 72
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22801
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22745: LD_VAR 0 4
22749: PPUSH
22750: CALL_OW 110
22754: PUSH
22755: LD_INT 0
22757: EQUAL
22758: PUSH
22759: LD_VAR 0 4
22763: PPUSH
22764: LD_VAR 0 3
22768: PUSH
22769: LD_INT 9
22771: ARRAY
22772: PPUSH
22773: CALL_OW 308
22777: NOT
22778: AND
22779: IFFALSE 22799
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22781: LD_VAR 0 4
22785: PPUSH
22786: LD_VAR 0 3
22790: PUSH
22791: LD_INT 9
22793: ARRAY
22794: PPUSH
22795: CALL_OW 113
22799: GO 22742
22801: POP
22802: POP
// end ;
22803: LD_VAR 0 2
22807: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22813: LD_ADDR_VAR 0 3
22817: PUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL 18740 0 1
22827: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22828: LD_VAR 0 3
22832: PUSH
22833: LD_INT 2
22835: ARRAY
22836: PUSH
22837: LD_INT 0
22839: EQUAL
22840: IFFALSE 22844
// exit ;
22842: GO 22959
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22844: LD_ADDR_VAR 0 4
22848: PUSH
22849: LD_VAR 0 3
22853: PUSH
22854: LD_INT 5
22856: ARRAY
22857: PPUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 50
22870: PUSH
22871: EMPTY
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 72
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22957
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22886: LD_VAR 0 4
22890: PPUSH
22891: CALL_OW 110
22895: PUSH
22896: LD_INT 3
22898: EQUAL
22899: PUSH
22900: LD_VAR 0 4
22904: PPUSH
22905: CALL_OW 110
22909: PUSH
22910: LD_INT 5
22912: EQUAL
22913: OR
22914: PUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 10
22927: ARRAY
22928: PPUSH
22929: CALL_OW 308
22933: NOT
22934: AND
22935: IFFALSE 22955
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22937: LD_VAR 0 4
22941: PPUSH
22942: LD_VAR 0 3
22946: PUSH
22947: LD_INT 10
22949: ARRAY
22950: PPUSH
22951: CALL_OW 113
22955: GO 22883
22957: POP
22958: POP
// end ;
22959: LD_VAR 0 2
22963: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22964: LD_INT 0
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22973: LD_ADDR_VAR 0 3
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL 18740 0 1
22987: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22988: LD_VAR 0 3
22992: PUSH
22993: LD_INT 2
22995: ARRAY
22996: PUSH
22997: LD_INT 0
22999: EQUAL
23000: IFFALSE 23004
// exit ;
23002: GO 23702
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23004: LD_ADDR_VAR 0 4
23008: PUSH
23009: LD_VAR 0 3
23013: PUSH
23014: LD_INT 5
23016: ARRAY
23017: PPUSH
23018: LD_INT 25
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 50
23030: PUSH
23031: EMPTY
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PPUSH
23038: CALL_OW 72
23042: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23043: LD_ADDR_VAR 0 5
23047: PUSH
23048: LD_VAR 0 3
23052: PUSH
23053: LD_INT 5
23055: ARRAY
23056: PPUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 50
23069: PUSH
23070: EMPTY
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: PUSH
23076: LD_INT 34
23078: PUSH
23079: LD_INT 13
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 34
23088: PUSH
23089: LD_INT 88
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 34
23098: PUSH
23099: LD_INT 52
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 72
23121: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23122: LD_ADDR_VAR 0 8
23126: PUSH
23127: LD_VAR 0 3
23131: PUSH
23132: LD_INT 6
23134: ARRAY
23135: PPUSH
23136: LD_INT 21
23138: PUSH
23139: LD_INT 3
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: LD_INT 24
23151: PUSH
23152: LD_INT 1000
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 72
23171: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23172: LD_VAR 0 4
23176: PPUSH
23177: LD_INT 56
23179: PUSH
23180: EMPTY
23181: LIST
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: LD_INT 60
23188: PUSH
23189: EMPTY
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 72
23204: PUSH
23205: LD_VAR 0 8
23209: NOT
23210: AND
23211: PUSH
23212: LD_VAR 0 3
23216: PUSH
23217: LD_INT 6
23219: ARRAY
23220: PPUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 50
23233: PUSH
23234: EMPTY
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 72
23274: AND
23275: IFFALSE 23413
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_VAR 0 4
23286: PPUSH
23287: LD_INT 56
23289: PUSH
23290: EMPTY
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 60
23298: PUSH
23299: EMPTY
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PPUSH
23310: CALL_OW 72
23314: PUSH
23315: FOR_IN
23316: IFFALSE 23411
// if ( GetTag ( eng ) = 1 ) then
23318: LD_VAR 0 7
23322: PPUSH
23323: CALL_OW 110
23327: PUSH
23328: LD_INT 1
23330: EQUAL
23331: IFFALSE 23409
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23333: LD_VAR 0 7
23337: PPUSH
23338: LD_VAR 0 3
23342: PUSH
23343: LD_INT 6
23345: ARRAY
23346: PPUSH
23347: LD_INT 21
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 50
23359: PUSH
23360: EMPTY
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 30
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: PPUSH
23396: CALL_OW 72
23400: PUSH
23401: LD_INT 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 120
23409: GO 23315
23411: POP
23412: POP
// if engineers and damagedBuildings then
23413: LD_VAR 0 4
23417: PUSH
23418: LD_VAR 0 8
23422: AND
23423: IFFALSE 23570
// begin for eng in engineers do
23425: LD_ADDR_VAR 0 7
23429: PUSH
23430: LD_VAR 0 4
23434: PUSH
23435: FOR_IN
23436: IFFALSE 23509
// if ( GetTag ( eng ) = 1 ) then
23438: LD_VAR 0 7
23442: PPUSH
23443: CALL_OW 110
23447: PUSH
23448: LD_INT 1
23450: EQUAL
23451: IFFALSE 23507
// begin ForceResetTaskList ( eng ) ;
23453: LD_VAR 0 7
23457: PPUSH
23458: CALL 27050 0 1
// ExitUnitFromBuilding ( eng ) ;
23462: LD_VAR 0 7
23466: PPUSH
23467: CALL 27103 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23471: LD_VAR 0 7
23475: PPUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 60
23481: PUSH
23482: EMPTY
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PPUSH
23489: CALL_OW 72
23493: PPUSH
23494: LD_VAR 0 8
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PPUSH
23503: CALL_OW 190
// end ;
23507: GO 23435
23509: POP
23510: POP
// if cranes then
23511: LD_VAR 0 5
23515: IFFALSE 23570
// for crane in cranes do
23517: LD_ADDR_VAR 0 6
23521: PUSH
23522: LD_VAR 0 5
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23568
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23530: LD_VAR 0 6
23534: PPUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 60
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 72
23552: PPUSH
23553: LD_VAR 0 8
23557: PUSH
23558: LD_INT 1
23560: ARRAY
23561: PPUSH
23562: CALL_OW 190
23566: GO 23527
23568: POP
23569: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23570: LD_VAR 0 4
23574: PUSH
23575: LD_VAR 0 8
23579: NOT
23580: AND
23581: PUSH
23582: LD_VAR 0 3
23586: PUSH
23587: LD_INT 7
23589: ARRAY
23590: AND
23591: IFFALSE 23702
// begin for eng in engineers do
23593: LD_ADDR_VAR 0 7
23597: PUSH
23598: LD_VAR 0 4
23602: PUSH
23603: FOR_IN
23604: IFFALSE 23700
// if ( GetTag ( eng ) = 1 ) then
23606: LD_VAR 0 7
23610: PPUSH
23611: CALL_OW 110
23615: PUSH
23616: LD_INT 1
23618: EQUAL
23619: IFFALSE 23698
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23621: LD_VAR 0 7
23625: PPUSH
23626: LD_VAR 0 3
23630: PUSH
23631: LD_INT 7
23633: ARRAY
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PPUSH
23643: LD_VAR 0 3
23647: PUSH
23648: LD_INT 7
23650: ARRAY
23651: PUSH
23652: LD_INT 1
23654: ARRAY
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: LD_VAR 0 3
23664: PUSH
23665: LD_INT 7
23667: ARRAY
23668: PUSH
23669: LD_INT 1
23671: ARRAY
23672: PUSH
23673: LD_INT 3
23675: ARRAY
23676: PPUSH
23677: LD_VAR 0 3
23681: PUSH
23682: LD_INT 7
23684: ARRAY
23685: PUSH
23686: LD_INT 1
23688: ARRAY
23689: PUSH
23690: LD_INT 4
23692: ARRAY
23693: PPUSH
23694: CALL_OW 145
23698: GO 23603
23700: POP
23701: POP
// end ;
23702: LD_VAR 0 2
23706: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23707: LD_INT 0
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL 18740 0 1
23729: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23730: LD_VAR 0 3
23734: PUSH
23735: LD_INT 2
23737: ARRAY
23738: PUSH
23739: LD_INT 0
23741: EQUAL
23742: IFFALSE 23746
// exit ;
23744: GO 24200
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23746: LD_ADDR_VAR 0 4
23750: PUSH
23751: LD_VAR 0 3
23755: PUSH
23756: LD_INT 5
23758: ARRAY
23759: PPUSH
23760: LD_INT 25
23762: PUSH
23763: LD_INT 4
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 50
23772: PUSH
23773: EMPTY
23774: LIST
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PPUSH
23780: CALL_OW 72
23784: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23785: LD_ADDR_VAR 0 6
23789: PUSH
23790: LD_VAR 0 3
23794: PUSH
23795: LD_INT 5
23797: ARRAY
23798: PPUSH
23799: LD_INT 21
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 92
23811: PUSH
23812: LD_VAR 0 3
23816: PUSH
23817: LD_INT 9
23819: ARRAY
23820: PPUSH
23821: LD_INT 0
23823: PPUSH
23824: CALL_OW 517
23828: PUSH
23829: LD_INT 1
23831: ARRAY
23832: PUSH
23833: LD_INT 1
23835: ARRAY
23836: PUSH
23837: LD_VAR 0 3
23841: PUSH
23842: LD_INT 9
23844: ARRAY
23845: PPUSH
23846: LD_INT 0
23848: PPUSH
23849: CALL_OW 517
23853: PUSH
23854: LD_INT 2
23856: ARRAY
23857: PUSH
23858: LD_INT 1
23860: ARRAY
23861: PUSH
23862: LD_INT 6
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: LD_INT 24
23876: PUSH
23877: LD_INT 1000
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 72
23897: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23898: LD_ADDR_VAR 0 7
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_INT 5
23910: ARRAY
23911: PPUSH
23912: LD_INT 21
23914: PUSH
23915: LD_INT 3
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 50
23924: PUSH
23925: EMPTY
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 30
23933: PUSH
23934: LD_INT 6
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 30
23943: PUSH
23944: LD_INT 7
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: LD_INT 8
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: PPUSH
23972: CALL_OW 72
23976: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23977: LD_VAR 0 4
23981: PPUSH
23982: LD_INT 56
23984: PUSH
23985: EMPTY
23986: LIST
23987: PUSH
23988: LD_INT 3
23990: PUSH
23991: LD_INT 60
23993: PUSH
23994: EMPTY
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PPUSH
24005: CALL_OW 72
24009: PUSH
24010: LD_VAR 0 6
24014: NOT
24015: AND
24016: PUSH
24017: LD_VAR 0 7
24021: AND
24022: IFFALSE 24098
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24024: LD_ADDR_VAR 0 5
24028: PUSH
24029: LD_VAR 0 4
24033: PPUSH
24034: LD_INT 56
24036: PUSH
24037: EMPTY
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: PPUSH
24043: CALL_OW 72
24047: PUSH
24048: FOR_IN
24049: IFFALSE 24096
// if ( GetTag ( sci ) = 1 ) then
24051: LD_VAR 0 5
24055: PPUSH
24056: CALL_OW 110
24060: PUSH
24061: LD_INT 1
24063: EQUAL
24064: IFFALSE 24094
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24066: LD_VAR 0 5
24070: PPUSH
24071: LD_VAR 0 7
24075: PUSH
24076: LD_INT 1
24078: PPUSH
24079: LD_VAR 0 7
24083: PPUSH
24084: CALL_OW 12
24088: ARRAY
24089: PPUSH
24090: CALL_OW 120
24094: GO 24048
24096: POP
24097: POP
// if not scientists or not damageUnits then
24098: LD_VAR 0 4
24102: NOT
24103: PUSH
24104: LD_VAR 0 6
24108: NOT
24109: OR
24110: IFFALSE 24114
// exit ;
24112: GO 24200
// for sci in scientists do
24114: LD_ADDR_VAR 0 5
24118: PUSH
24119: LD_VAR 0 4
24123: PUSH
24124: FOR_IN
24125: IFFALSE 24198
// if ( GetTag ( sci ) = 1 ) then
24127: LD_VAR 0 5
24131: PPUSH
24132: CALL_OW 110
24136: PUSH
24137: LD_INT 1
24139: EQUAL
24140: IFFALSE 24196
// begin ForceResetTaskList ( sci ) ;
24142: LD_VAR 0 5
24146: PPUSH
24147: CALL 27050 0 1
// ExitUnitFromBuilding ( sci ) ;
24151: LD_VAR 0 5
24155: PPUSH
24156: CALL 27103 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24160: LD_VAR 0 5
24164: PPUSH
24165: LD_INT 3
24167: PUSH
24168: LD_INT 60
24170: PUSH
24171: EMPTY
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PPUSH
24178: CALL_OW 72
24182: PPUSH
24183: LD_VAR 0 6
24187: PUSH
24188: LD_INT 1
24190: ARRAY
24191: PPUSH
24192: CALL_OW 188
// end ;
24196: GO 24124
24198: POP
24199: POP
// end ;
24200: LD_VAR 0 2
24204: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24213: LD_ADDR_VAR 0 3
24217: PUSH
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL 18740 0 1
24227: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24228: LD_VAR 0 3
24232: PUSH
24233: LD_INT 2
24235: ARRAY
24236: PUSH
24237: LD_INT 0
24239: EQUAL
24240: IFFALSE 24244
// exit ;
24242: GO 25605
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_INT 6
24256: ARRAY
24257: PPUSH
24258: LD_INT 21
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 50
24270: PUSH
24271: EMPTY
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 3
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 72
24311: ST_TO_ADDR
// if not fabs then
24312: LD_VAR 0 4
24316: NOT
24317: IFFALSE 24321
// exit ;
24319: GO 25605
// wait ( aiData [ 16 ] ) ;
24321: LD_VAR 0 3
24325: PUSH
24326: LD_INT 16
24328: ARRAY
24329: PPUSH
24330: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24334: LD_VAR 0 3
24338: PUSH
24339: LD_INT 17
24341: ARRAY
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: IFFALSE 24518
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24348: LD_ADDR_VAR 0 5
24352: PUSH
24353: DOUBLE
24354: LD_INT 1
24356: DEC
24357: ST_TO_ADDR
24358: LD_VAR 0 3
24362: PUSH
24363: LD_INT 13
24365: ARRAY
24366: PUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL 19448 0 1
24376: MINUS
24377: PUSH
24378: FOR_TO
24379: IFFALSE 24516
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24381: LD_ADDR_VAR 0 6
24385: PUSH
24386: LD_VAR 0 3
24390: PUSH
24391: LD_INT 13
24393: ARRAY
24394: PUSH
24395: LD_VAR 0 5
24399: ARRAY
24400: PUSH
24401: LD_INT 4
24403: ARRAY
24404: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24405: LD_ADDR_VAR 0 7
24409: PUSH
24410: LD_VAR 0 6
24414: PUSH
24415: LD_INT 1
24417: PPUSH
24418: LD_VAR 0 6
24422: PPUSH
24423: CALL_OW 12
24427: ARRAY
24428: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24429: LD_VAR 0 4
24433: PUSH
24434: LD_INT 0
24436: PPUSH
24437: LD_VAR 0 4
24441: PPUSH
24442: CALL_OW 12
24446: ARRAY
24447: PPUSH
24448: LD_VAR 0 3
24452: PUSH
24453: LD_INT 13
24455: ARRAY
24456: PUSH
24457: LD_VAR 0 5
24461: ARRAY
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: PPUSH
24467: LD_VAR 0 3
24471: PUSH
24472: LD_INT 13
24474: ARRAY
24475: PUSH
24476: LD_VAR 0 5
24480: ARRAY
24481: PUSH
24482: LD_INT 2
24484: ARRAY
24485: PPUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_INT 13
24493: ARRAY
24494: PUSH
24495: LD_VAR 0 5
24499: ARRAY
24500: PUSH
24501: LD_INT 3
24503: ARRAY
24504: PPUSH
24505: LD_VAR 0 7
24509: PPUSH
24510: CALL_OW 185
// end ;
24514: GO 24378
24516: POP
24517: POP
// end ; if aiData [ 17 ] [ 3 ] then
24518: LD_VAR 0 3
24522: PUSH
24523: LD_INT 17
24525: ARRAY
24526: PUSH
24527: LD_INT 3
24529: ARRAY
24530: IFFALSE 25421
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24532: LD_INT 22
24534: PUSH
24535: LD_VAR 0 3
24539: PUSH
24540: LD_INT 3
24542: ARRAY
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 34
24563: PUSH
24564: LD_INT 12
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 34
24583: PUSH
24584: LD_INT 51
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 69
24606: PUSH
24607: LD_VAR 0 3
24611: PUSH
24612: LD_INT 15
24614: ARRAY
24615: PUSH
24616: LD_INT 1
24618: ARRAY
24619: LESS
24620: IFFALSE 24831
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24622: LD_ADDR_VAR 0 5
24626: PUSH
24627: DOUBLE
24628: LD_INT 1
24630: DEC
24631: ST_TO_ADDR
24632: LD_VAR 0 3
24636: PUSH
24637: LD_INT 15
24639: ARRAY
24640: PUSH
24641: LD_INT 1
24643: ARRAY
24644: PUSH
24645: LD_INT 22
24647: PUSH
24648: LD_VAR 0 3
24652: PUSH
24653: LD_INT 3
24655: ARRAY
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 34
24676: PUSH
24677: LD_INT 12
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 34
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 34
24696: PUSH
24697: LD_INT 51
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 69
24719: MINUS
24720: PUSH
24721: FOR_TO
24722: IFFALSE 24829
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24724: LD_VAR 0 4
24728: PUSH
24729: LD_INT 0
24731: PPUSH
24732: LD_VAR 0 4
24736: PPUSH
24737: CALL_OW 12
24741: ARRAY
24742: PPUSH
24743: LD_INT 3
24745: PUSH
24746: EMPTY
24747: LIST
24748: PUSH
24749: LD_INT 13
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 22
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_VAR 0 3
24770: PUSH
24771: LD_INT 4
24773: ARRAY
24774: ARRAY
24775: PUSH
24776: LD_INT 1
24778: ARRAY
24779: PPUSH
24780: LD_INT 1
24782: PPUSH
24783: LD_INT 2
24785: PPUSH
24786: LD_INT 12
24788: PUSH
24789: EMPTY
24790: LIST
24791: PUSH
24792: LD_INT 32
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 51
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: LD_INT 4
24816: ARRAY
24817: ARRAY
24818: PUSH
24819: LD_INT 1
24821: ARRAY
24822: PPUSH
24823: CALL_OW 185
24827: GO 24721
24829: POP
24830: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24831: LD_INT 22
24833: PUSH
24834: LD_VAR 0 3
24838: PUSH
24839: LD_INT 3
24841: ARRAY
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 21
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 13
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 34
24872: PUSH
24873: LD_INT 88
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 34
24882: PUSH
24883: LD_INT 52
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 69
24905: PUSH
24906: LD_VAR 0 3
24910: PUSH
24911: LD_INT 15
24913: ARRAY
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: LESS
24919: IFFALSE 25130
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24921: LD_ADDR_VAR 0 5
24925: PUSH
24926: DOUBLE
24927: LD_INT 1
24929: DEC
24930: ST_TO_ADDR
24931: LD_VAR 0 3
24935: PUSH
24936: LD_INT 15
24938: ARRAY
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_VAR 0 3
24951: PUSH
24952: LD_INT 3
24954: ARRAY
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 34
24975: PUSH
24976: LD_INT 13
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 34
24985: PUSH
24986: LD_INT 88
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 34
24995: PUSH
24996: LD_INT 52
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: MINUS
25019: PUSH
25020: FOR_TO
25021: IFFALSE 25128
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25023: LD_VAR 0 4
25027: PUSH
25028: LD_INT 0
25030: PPUSH
25031: LD_VAR 0 4
25035: PPUSH
25036: CALL_OW 12
25040: ARRAY
25041: PPUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: PUSH
25048: LD_INT 13
25050: PUSH
25051: EMPTY
25052: LIST
25053: PUSH
25054: LD_INT 22
25056: PUSH
25057: EMPTY
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_INT 4
25072: ARRAY
25073: ARRAY
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: LD_INT 2
25084: PPUSH
25085: LD_INT 13
25087: PUSH
25088: EMPTY
25089: LIST
25090: PUSH
25091: LD_INT 88
25093: PUSH
25094: EMPTY
25095: LIST
25096: PUSH
25097: LD_INT 52
25099: PUSH
25100: EMPTY
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: PUSH
25108: LD_VAR 0 3
25112: PUSH
25113: LD_INT 4
25115: ARRAY
25116: ARRAY
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PPUSH
25122: CALL_OW 185
25126: GO 25020
25128: POP
25129: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25130: LD_INT 22
25132: PUSH
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 3
25140: ARRAY
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 34
25161: PUSH
25162: LD_INT 14
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 14
25171: PUSH
25172: EMPTY
25173: LIST
25174: PUSH
25175: LD_INT 34
25177: PUSH
25178: LD_INT 53
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_VAR 0 3
25205: PUSH
25206: LD_INT 15
25208: ARRAY
25209: PUSH
25210: LD_INT 3
25212: ARRAY
25213: LESS
25214: IFFALSE 25421
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: DOUBLE
25222: LD_INT 1
25224: DEC
25225: ST_TO_ADDR
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 15
25233: ARRAY
25234: PUSH
25235: LD_INT 3
25237: ARRAY
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_VAR 0 3
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 21
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 34
25270: PUSH
25271: LD_INT 14
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 14
25280: PUSH
25281: EMPTY
25282: LIST
25283: PUSH
25284: LD_INT 34
25286: PUSH
25287: LD_INT 53
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: MINUS
25310: PUSH
25311: FOR_TO
25312: IFFALSE 25419
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25314: LD_VAR 0 4
25318: PUSH
25319: LD_INT 0
25321: PPUSH
25322: LD_VAR 0 4
25326: PPUSH
25327: CALL_OW 12
25331: ARRAY
25332: PPUSH
25333: LD_INT 4
25335: PUSH
25336: EMPTY
25337: LIST
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: EMPTY
25343: LIST
25344: PUSH
25345: LD_INT 24
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 4
25363: ARRAY
25364: ARRAY
25365: PUSH
25366: LD_INT 1
25368: ARRAY
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: LD_INT 14
25378: PUSH
25379: EMPTY
25380: LIST
25381: PUSH
25382: LD_INT 14
25384: PUSH
25385: EMPTY
25386: LIST
25387: PUSH
25388: LD_INT 53
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: LD_VAR 0 3
25403: PUSH
25404: LD_INT 4
25406: ARRAY
25407: ARRAY
25408: PUSH
25409: LD_INT 1
25411: ARRAY
25412: PPUSH
25413: CALL_OW 185
25417: GO 25311
25419: POP
25420: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25421: LD_VAR 0 3
25425: PUSH
25426: LD_INT 17
25428: ARRAY
25429: PUSH
25430: LD_INT 2
25432: ARRAY
25433: PUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL 19558 0 1
25443: MINUS
25444: IFFALSE 25605
// begin for i := 1 to aiData [ 14 ] do
25446: LD_ADDR_VAR 0 5
25450: PUSH
25451: DOUBLE
25452: LD_INT 1
25454: DEC
25455: ST_TO_ADDR
25456: LD_VAR 0 3
25460: PUSH
25461: LD_INT 14
25463: ARRAY
25464: PUSH
25465: FOR_TO
25466: IFFALSE 25603
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25468: LD_ADDR_VAR 0 6
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_INT 14
25480: ARRAY
25481: PUSH
25482: LD_VAR 0 5
25486: ARRAY
25487: PUSH
25488: LD_INT 4
25490: ARRAY
25491: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25492: LD_ADDR_VAR 0 7
25496: PUSH
25497: LD_VAR 0 6
25501: PUSH
25502: LD_INT 1
25504: PPUSH
25505: LD_VAR 0 6
25509: PPUSH
25510: CALL_OW 12
25514: ARRAY
25515: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25516: LD_VAR 0 4
25520: PUSH
25521: LD_INT 0
25523: PPUSH
25524: LD_VAR 0 4
25528: PPUSH
25529: CALL_OW 12
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 3
25539: PUSH
25540: LD_INT 14
25542: ARRAY
25543: PUSH
25544: LD_VAR 0 5
25548: ARRAY
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: LD_VAR 0 3
25558: PUSH
25559: LD_INT 14
25561: ARRAY
25562: PUSH
25563: LD_VAR 0 5
25567: ARRAY
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PPUSH
25573: LD_VAR 0 3
25577: PUSH
25578: LD_INT 14
25580: ARRAY
25581: PUSH
25582: LD_VAR 0 5
25586: ARRAY
25587: PUSH
25588: LD_INT 3
25590: ARRAY
25591: PPUSH
25592: LD_VAR 0 7
25596: PPUSH
25597: CALL_OW 185
// end ;
25601: GO 25465
25603: POP
25604: POP
// end ; end ;
25605: LD_VAR 0 2
25609: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
// for unit in units do
25626: LD_ADDR_VAR 0 6
25630: PUSH
25631: LD_VAR 0 2
25635: PUSH
25636: FOR_IN
25637: IFFALSE 25653
// SetTag ( unit , 0 ) ;
25639: LD_VAR 0 6
25643: PPUSH
25644: LD_INT 0
25646: PPUSH
25647: CALL_OW 109
25651: GO 25636
25653: POP
25654: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25655: LD_ADDR_VAR 0 13
25659: PUSH
25660: LD_VAR 0 3
25664: PUSH
25665: LD_VAR 0 3
25669: ARRAY
25670: PUSH
25671: LD_INT 1
25673: ARRAY
25674: PUSH
25675: LD_VAR 0 3
25679: PUSH
25680: LD_VAR 0 3
25684: ARRAY
25685: PUSH
25686: LD_INT 2
25688: ARRAY
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25694: LD_ADDR_VAR 0 7
25698: PUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_INT 50
25706: PUSH
25707: EMPTY
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 59
25715: PUSH
25716: EMPTY
25717: LIST
25718: PUSH
25719: LD_INT 25
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 25
25731: PUSH
25732: LD_INT 8
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 21
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PPUSH
25760: CALL_OW 72
25764: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25765: LD_ADDR_VAR 0 9
25769: PUSH
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_INT 50
25777: PUSH
25778: EMPTY
25779: LIST
25780: PUSH
25781: LD_INT 25
25783: PUSH
25784: LD_INT 4
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PPUSH
25795: CALL_OW 72
25799: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25800: LD_ADDR_VAR 0 10
25804: PUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: LD_INT 21
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: LD_INT 24
25825: PUSH
25826: LD_INT 1000
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 72
25845: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25846: LD_ADDR_VAR 0 11
25850: PUSH
25851: LD_INT 21
25853: PPUSH
25854: CALL_OW 435
25858: ST_TO_ADDR
// for unit in attackUnits do
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: LD_VAR 0 7
25868: PUSH
25869: FOR_IN
25870: IFFALSE 26619
// begin if path then
25872: LD_VAR 0 3
25876: IFFALSE 26608
// begin i = 1 ;
25878: LD_ADDR_VAR 0 5
25882: PUSH
25883: LD_INT 1
25885: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25886: LD_ADDR_VAR 0 11
25890: PUSH
25891: LD_INT 21
25893: PPUSH
25894: CALL_OW 435
25898: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25899: LD_ADDR_VAR 0 14
25903: PUSH
25904: LD_INT 81
25906: PUSH
25907: LD_VAR 0 6
25911: PPUSH
25912: CALL_OW 255
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 69
25925: PPUSH
25926: LD_VAR 0 6
25930: PPUSH
25931: CALL_OW 74
25935: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25936: LD_ADDR_VAR 0 15
25940: PUSH
25941: LD_VAR 0 11
25945: PPUSH
25946: LD_VAR 0 6
25950: PPUSH
25951: CALL_OW 250
25955: PPUSH
25956: LD_VAR 0 6
25960: PPUSH
25961: CALL_OW 251
25965: PPUSH
25966: CALL_OW 439
25970: ST_TO_ADDR
// if damageUnits and medics then
25971: LD_VAR 0 10
25975: PUSH
25976: LD_VAR 0 9
25980: AND
25981: IFFALSE 26003
// ComHeal ( medics , damageUnits [ 1 ] ) else
25983: LD_VAR 0 9
25987: PPUSH
25988: LD_VAR 0 10
25992: PUSH
25993: LD_INT 1
25995: ARRAY
25996: PPUSH
25997: CALL_OW 128
26001: GO 26046
// if medics then
26003: LD_VAR 0 9
26007: IFFALSE 26046
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26009: LD_VAR 0 9
26013: PPUSH
26014: LD_VAR 0 7
26018: PUSH
26019: LD_INT 1
26021: ARRAY
26022: PPUSH
26023: CALL_OW 250
26027: PPUSH
26028: LD_VAR 0 7
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: CALL_OW 251
26041: PPUSH
26042: CALL_OW 111
// if not HasTask ( unit ) then
26046: LD_VAR 0 6
26050: PPUSH
26051: CALL_OW 314
26055: NOT
26056: IFFALSE 26295
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26058: LD_ADDR_VAR 0 15
26062: PUSH
26063: LD_VAR 0 11
26067: PPUSH
26068: LD_VAR 0 6
26072: PPUSH
26073: CALL_OW 250
26077: PPUSH
26078: LD_VAR 0 6
26082: PPUSH
26083: CALL_OW 251
26087: PPUSH
26088: CALL_OW 439
26092: ST_TO_ADDR
// if i > crates then
26093: LD_VAR 0 5
26097: PUSH
26098: LD_VAR 0 11
26102: GREATER
26103: IFFALSE 26113
// i = 1 ;
26105: LD_ADDR_VAR 0 5
26109: PUSH
26110: LD_INT 1
26112: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26113: LD_VAR 0 14
26117: PUSH
26118: LD_VAR 0 15
26122: AND
26123: IFFALSE 26238
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26125: LD_VAR 0 6
26129: PPUSH
26130: LD_VAR 0 14
26134: PPUSH
26135: CALL_OW 250
26139: PPUSH
26140: LD_VAR 0 14
26144: PPUSH
26145: CALL_OW 251
26149: PPUSH
26150: CALL_OW 297
26154: PUSH
26155: LD_VAR 0 6
26159: PPUSH
26160: LD_VAR 0 15
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PPUSH
26169: LD_VAR 0 15
26173: PUSH
26174: LD_INT 2
26176: ARRAY
26177: PPUSH
26178: CALL_OW 297
26182: LESS
26183: IFFALSE 26201
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26185: LD_VAR 0 7
26189: PPUSH
26190: LD_VAR 0 14
26194: PPUSH
26195: CALL_OW 115
26199: GO 26236
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26201: LD_VAR 0 7
26205: PPUSH
26206: LD_VAR 0 11
26210: PUSH
26211: LD_VAR 0 5
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 11
26221: PUSH
26222: LD_VAR 0 5
26226: PUSH
26227: LD_INT 1
26229: PLUS
26230: ARRAY
26231: PPUSH
26232: CALL_OW 116
// end else
26236: GO 26295
// if crates then
26238: LD_VAR 0 11
26242: IFFALSE 26281
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26244: LD_VAR 0 7
26248: PPUSH
26249: LD_VAR 0 11
26253: PUSH
26254: LD_VAR 0 5
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 11
26264: PUSH
26265: LD_VAR 0 5
26269: PUSH
26270: LD_INT 1
26272: PLUS
26273: ARRAY
26274: PPUSH
26275: CALL_OW 116
26279: GO 26295
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26281: LD_VAR 0 7
26285: PPUSH
26286: LD_VAR 0 14
26290: PPUSH
26291: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26295: LD_INT 35
26297: PPUSH
26298: CALL_OW 67
// if path then
26302: LD_VAR 0 3
26306: IFFALSE 26382
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26308: LD_ADDR_VAR 0 16
26312: PUSH
26313: LD_VAR 0 6
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL 26837 0 2
26327: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26328: LD_VAR 0 7
26332: PPUSH
26333: LD_VAR 0 16
26337: PUSH
26338: LD_INT 1
26340: ARRAY
26341: PPUSH
26342: LD_VAR 0 16
26346: PUSH
26347: LD_INT 2
26349: ARRAY
26350: PPUSH
26351: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 16
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: LD_VAR 0 16
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: CALL_OW 114
// end ; i = i + 2 ;
26382: LD_ADDR_VAR 0 5
26386: PUSH
26387: LD_VAR 0 5
26391: PUSH
26392: LD_INT 2
26394: PLUS
26395: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_VAR 0 16
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PPUSH
26410: LD_VAR 0 16
26414: PUSH
26415: LD_INT 2
26417: ARRAY
26418: PPUSH
26419: CALL_OW 297
26423: PUSH
26424: LD_INT 6
26426: LESSEQUAL
26427: IFFALSE 25886
// repeat wait ( 0 0$1 ) ;
26429: LD_INT 35
26431: PPUSH
26432: CALL_OW 67
// nearUnitsCounter = 0 ;
26436: LD_ADDR_VAR 0 12
26440: PUSH
26441: LD_INT 0
26443: ST_TO_ADDR
// for attackUnit in attackUnits do
26444: LD_ADDR_VAR 0 8
26448: PUSH
26449: LD_VAR 0 7
26453: PUSH
26454: FOR_IN
26455: IFFALSE 26493
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26457: LD_VAR 0 6
26461: PPUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 296
26471: PUSH
26472: LD_INT 7
26474: LESSEQUAL
26475: IFFALSE 26491
// nearUnitsCounter = nearUnitsCounter + 1 ;
26477: LD_ADDR_VAR 0 12
26481: PUSH
26482: LD_VAR 0 12
26486: PUSH
26487: LD_INT 1
26489: PLUS
26490: ST_TO_ADDR
26491: GO 26454
26493: POP
26494: POP
// until nearUnitsCounter = attackUnits ;
26495: LD_VAR 0 12
26499: PUSH
26500: LD_VAR 0 7
26504: EQUAL
26505: IFFALSE 26429
// for i := 1 to path do
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: DOUBLE
26513: LD_INT 1
26515: DEC
26516: ST_TO_ADDR
26517: LD_VAR 0 3
26521: PUSH
26522: FOR_TO
26523: IFFALSE 26606
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26525: LD_VAR 0 3
26529: PUSH
26530: LD_VAR 0 5
26534: ARRAY
26535: PUSH
26536: LD_INT 1
26538: ARRAY
26539: PUSH
26540: LD_VAR 0 16
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: EQUAL
26549: PUSH
26550: LD_VAR 0 3
26554: PUSH
26555: LD_VAR 0 5
26559: ARRAY
26560: PUSH
26561: LD_INT 2
26563: ARRAY
26564: PUSH
26565: LD_VAR 0 16
26569: PUSH
26570: LD_INT 2
26572: ARRAY
26573: EQUAL
26574: AND
26575: IFFALSE 26604
// begin path = path diff [ path [ i ] ] ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_VAR 0 3
26591: PUSH
26592: LD_VAR 0 5
26596: ARRAY
26597: PUSH
26598: EMPTY
26599: LIST
26600: DIFF
26601: ST_TO_ADDR
// break ;
26602: GO 26606
// end ;
26604: GO 26522
26606: POP
26607: POP
// end ; if not path then
26608: LD_VAR 0 3
26612: NOT
26613: IFFALSE 26617
// break ;
26615: GO 26619
// end ;
26617: GO 25869
26619: POP
26620: POP
// repeat unitsReachPathEnd = 0 ;
26621: LD_ADDR_VAR 0 17
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// for attackUnit in attackUnits do
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: LD_VAR 0 7
26638: PUSH
26639: FOR_IN
26640: IFFALSE 26778
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26642: LD_VAR 0 8
26646: PPUSH
26647: LD_VAR 0 13
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PPUSH
26656: LD_VAR 0 13
26660: PUSH
26661: LD_INT 2
26663: ARRAY
26664: PPUSH
26665: CALL_OW 297
26669: PUSH
26670: LD_INT 7
26672: LESS
26673: NOT
26674: PUSH
26675: LD_VAR 0 8
26679: PPUSH
26680: CALL_OW 110
26684: PUSH
26685: LD_INT 0
26687: EQUAL
26688: AND
26689: IFFALSE 26720
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26691: LD_VAR 0 8
26695: PPUSH
26696: LD_VAR 0 13
26700: PUSH
26701: LD_INT 1
26703: ARRAY
26704: PPUSH
26705: LD_VAR 0 13
26709: PUSH
26710: LD_INT 2
26712: ARRAY
26713: PPUSH
26714: CALL_OW 111
26718: GO 26747
// if GetTag ( attackUnit ) = 0 then
26720: LD_VAR 0 8
26724: PPUSH
26725: CALL_OW 110
26729: PUSH
26730: LD_INT 0
26732: EQUAL
26733: IFFALSE 26747
// SetTag ( attackUnit , 1 ) ;
26735: LD_VAR 0 8
26739: PPUSH
26740: LD_INT 1
26742: PPUSH
26743: CALL_OW 109
// if GetTag ( unit ) = 1 then
26747: LD_VAR 0 6
26751: PPUSH
26752: CALL_OW 110
26756: PUSH
26757: LD_INT 1
26759: EQUAL
26760: IFFALSE 26776
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26762: LD_ADDR_VAR 0 17
26766: PUSH
26767: LD_VAR 0 17
26771: PUSH
26772: LD_INT 1
26774: PLUS
26775: ST_TO_ADDR
// end ;
26776: GO 26639
26778: POP
26779: POP
// wait ( 0 0$1 ) ;
26780: LD_INT 35
26782: PPUSH
26783: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26787: LD_VAR 0 17
26791: PUSH
26792: LD_VAR 0 7
26796: PUSH
26797: LD_INT 3
26799: MINUS
26800: GREATER
26801: IFFALSE 26621
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26803: LD_VAR 0 2
26807: PPUSH
26808: LD_INT 50
26810: PUSH
26811: EMPTY
26812: LIST
26813: PPUSH
26814: CALL_OW 72
26818: NOT
26819: PUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL_OW 303
26829: OR
26830: IFFALSE 25694
// end ;
26832: LD_VAR 0 4
26836: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26837: LD_INT 0
26839: PPUSH
26840: PPUSH
26841: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26842: LD_ADDR_VAR 0 5
26846: PUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_INT 1
26854: ARRAY
26855: PUSH
26856: LD_INT 1
26858: ARRAY
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: PUSH
26869: LD_INT 2
26871: ARRAY
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// for i := 2 to path do
26877: LD_ADDR_VAR 0 4
26881: PUSH
26882: DOUBLE
26883: LD_INT 2
26885: DEC
26886: ST_TO_ADDR
26887: LD_VAR 0 2
26891: PUSH
26892: FOR_TO
26893: IFFALSE 27033
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26895: LD_VAR 0 1
26899: PPUSH
26900: LD_VAR 0 2
26904: PUSH
26905: LD_VAR 0 4
26909: ARRAY
26910: PUSH
26911: LD_INT 1
26913: ARRAY
26914: PPUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_VAR 0 4
26924: ARRAY
26925: PUSH
26926: LD_INT 2
26928: ARRAY
26929: PPUSH
26930: CALL_OW 297
26934: PUSH
26935: LD_VAR 0 1
26939: PPUSH
26940: LD_VAR 0 5
26944: PUSH
26945: LD_INT 1
26947: ARRAY
26948: PPUSH
26949: LD_VAR 0 5
26953: PUSH
26954: LD_INT 2
26956: ARRAY
26957: PPUSH
26958: CALL_OW 297
26962: LESS
26963: IFFALSE 27031
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26965: LD_ADDR_VAR 0 5
26969: PUSH
26970: LD_VAR 0 5
26974: PPUSH
26975: LD_INT 1
26977: PPUSH
26978: LD_VAR 0 2
26982: PUSH
26983: LD_VAR 0 4
26987: ARRAY
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: PPUSH
26993: CALL_OW 1
26997: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
26998: LD_ADDR_VAR 0 5
27002: PUSH
27003: LD_VAR 0 5
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 4
27020: ARRAY
27021: PUSH
27022: LD_INT 2
27024: ARRAY
27025: PPUSH
27026: CALL_OW 1
27030: ST_TO_ADDR
// end ; end ;
27031: GO 26892
27033: POP
27034: POP
// result = nearPosition ;
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_VAR 0 5
27044: ST_TO_ADDR
// end ;
27045: LD_VAR 0 3
27049: RET
// function ForceResetTaskList ( unit ) ; begin
27050: LD_INT 0
27052: PPUSH
// if GetTaskList ( unit ) then
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 437
27062: IFFALSE 27098
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 437
27073: PUSH
27074: LD_INT 1
27076: ARRAY
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PUSH
27082: LD_STRING e
27084: EQUAL
27085: IFFALSE 27098
// SetTaskList ( unit , [ ] ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: EMPTY
27093: PPUSH
27094: CALL_OW 446
// end ;
27098: LD_VAR 0 2
27102: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27103: LD_INT 0
27105: PPUSH
// if IsInUnit ( unit ) then
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 310
27115: IFFALSE 27126
// ComExitBuilding ( unit ) ;
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 122
// end ; end_of_file
27126: LD_VAR 0 2
27130: RET
// every 0 0$1 trigger enableCounter do
27131: LD_EXP 18
27135: IFFALSE 27172
27137: GO 27139
27139: DISABLE
// begin enable ;
27140: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27141: LD_ADDR_OWVAR 47
27145: PUSH
27146: LD_STRING #Am01-1
27148: PUSH
27149: LD_EXP 19
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27158: LD_ADDR_EXP 19
27162: PUSH
27163: LD_EXP 19
27167: PUSH
27168: LD_INT 35
27170: PLUS
27171: ST_TO_ADDR
// end ; end_of_file end_of_file
27172: END
// every 0 0$01 do var timer ;
27173: GO 27175
27175: DISABLE
27176: LD_INT 0
27178: PPUSH
// begin timer := 1 1$30 ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 3150
27186: ST_TO_ADDR
// repeat wait ( timer ) ;
27187: LD_VAR 0 1
27191: PPUSH
27192: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27196: LD_EXP 20
27200: PUSH
27201: LD_INT 6
27203: GREATEREQUAL
27204: PUSH
27205: LD_EXP 20
27209: PUSH
27210: LD_INT 12
27212: LESS
27213: AND
27214: IFFALSE 27230
// timer := timer + 0 0$3 ;
27216: LD_ADDR_VAR 0 1
27220: PUSH
27221: LD_VAR 0 1
27225: PUSH
27226: LD_INT 105
27228: PLUS
27229: ST_TO_ADDR
// if cratesSpawned >= 12 then
27230: LD_EXP 20
27234: PUSH
27235: LD_INT 12
27237: GREATEREQUAL
27238: IFFALSE 27254
// timer := timer + 0 0$9 ;
27240: LD_ADDR_VAR 0 1
27244: PUSH
27245: LD_VAR 0 1
27249: PUSH
27250: LD_INT 315
27252: PLUS
27253: ST_TO_ADDR
// if timer > 3 3$00 then
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 6300
27261: GREATER
27262: IFFALSE 27272
// timer := 0 0$50 ;
27264: LD_ADDR_VAR 0 1
27268: PUSH
27269: LD_INT 1750
27271: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27272: LD_INT 3
27274: PPUSH
27275: LD_INT 5
27277: PPUSH
27278: CALL_OW 12
27282: PPUSH
27283: LD_INT 22
27285: PPUSH
27286: LD_INT 1
27288: PPUSH
27289: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27293: LD_ADDR_EXP 20
27297: PUSH
27298: LD_EXP 20
27302: PUSH
27303: LD_INT 1
27305: PLUS
27306: ST_TO_ADDR
// until false ;
27307: LD_INT 0
27309: IFFALSE 27187
// end ; end_of_file
27311: PPOPN 1
27313: END
// export function Nef_PrepareNature ; var i , un ; begin
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
27318: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: DOUBLE
27325: LD_INT 1
27327: DEC
27328: ST_TO_ADDR
27329: LD_EXP 21
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PUSH
27338: FOR_TO
27339: IFFALSE 27449
// begin uc_side = 0 ;
27341: LD_ADDR_OWVAR 20
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// uc_nation = nation_nature ;
27349: LD_ADDR_OWVAR 21
27353: PUSH
27354: LD_INT 0
27356: ST_TO_ADDR
// hc_class = class_apeman ;
27357: LD_ADDR_OWVAR 28
27361: PUSH
27362: LD_INT 12
27364: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27365: LD_ADDR_OWVAR 31
27369: PUSH
27370: LD_EXP 22
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PUSH
27379: LD_EXP 22
27383: PUSH
27384: LD_INT 2
27386: ARRAY
27387: PUSH
27388: LD_EXP 22
27392: PUSH
27393: LD_INT 3
27395: ARRAY
27396: PUSH
27397: LD_EXP 22
27401: PUSH
27402: LD_INT 4
27404: ARRAY
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27412: LD_ADDR_OWVAR 35
27416: PUSH
27417: LD_EXP 23
27421: ST_TO_ADDR
// un = CreateHuman ;
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: CALL_OW 44
27431: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27432: LD_VAR 0 3
27436: PPUSH
27437: LD_INT 23
27439: PPUSH
27440: LD_INT 0
27442: PPUSH
27443: CALL_OW 49
// end ;
27447: GO 27338
27449: POP
27450: POP
// for i := 1 to animalsAmount [ 2 ] do
27451: LD_ADDR_VAR 0 2
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_EXP 21
27465: PUSH
27466: LD_INT 2
27468: ARRAY
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27581
// begin uc_side = 0 ;
27473: LD_ADDR_OWVAR 20
27477: PUSH
27478: LD_INT 0
27480: ST_TO_ADDR
// uc_nation = nation_nature ;
27481: LD_ADDR_OWVAR 21
27485: PUSH
27486: LD_INT 0
27488: ST_TO_ADDR
// hc_class = class_phororhacos ;
27489: LD_ADDR_OWVAR 28
27493: PUSH
27494: LD_INT 18
27496: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27497: LD_ADDR_OWVAR 31
27501: PUSH
27502: LD_EXP 22
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PUSH
27511: LD_EXP 22
27515: PUSH
27516: LD_INT 2
27518: ARRAY
27519: PUSH
27520: LD_EXP 22
27524: PUSH
27525: LD_INT 3
27527: ARRAY
27528: PUSH
27529: LD_EXP 22
27533: PUSH
27534: LD_INT 4
27536: ARRAY
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27544: LD_ADDR_OWVAR 35
27548: PUSH
27549: LD_EXP 23
27553: ST_TO_ADDR
// un = CreateHuman ;
27554: LD_ADDR_VAR 0 3
27558: PUSH
27559: CALL_OW 44
27563: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27564: LD_VAR 0 3
27568: PPUSH
27569: LD_INT 23
27571: PPUSH
27572: LD_INT 0
27574: PPUSH
27575: CALL_OW 49
// end ;
27579: GO 27470
27581: POP
27582: POP
// for i := 1 to animalsAmount [ 3 ] do
27583: LD_ADDR_VAR 0 2
27587: PUSH
27588: DOUBLE
27589: LD_INT 1
27591: DEC
27592: ST_TO_ADDR
27593: LD_EXP 21
27597: PUSH
27598: LD_INT 3
27600: ARRAY
27601: PUSH
27602: FOR_TO
27603: IFFALSE 27713
// begin uc_side = 0 ;
27605: LD_ADDR_OWVAR 20
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// uc_nation = nation_nature ;
27613: LD_ADDR_OWVAR 21
27617: PUSH
27618: LD_INT 0
27620: ST_TO_ADDR
// hc_class = class_tiger ;
27621: LD_ADDR_OWVAR 28
27625: PUSH
27626: LD_INT 14
27628: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27629: LD_ADDR_OWVAR 31
27633: PUSH
27634: LD_EXP 22
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PUSH
27643: LD_EXP 22
27647: PUSH
27648: LD_INT 2
27650: ARRAY
27651: PUSH
27652: LD_EXP 22
27656: PUSH
27657: LD_INT 3
27659: ARRAY
27660: PUSH
27661: LD_EXP 22
27665: PUSH
27666: LD_INT 4
27668: ARRAY
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27676: LD_ADDR_OWVAR 35
27680: PUSH
27681: LD_EXP 23
27685: ST_TO_ADDR
// un = CreateHuman ;
27686: LD_ADDR_VAR 0 3
27690: PUSH
27691: CALL_OW 44
27695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27696: LD_VAR 0 3
27700: PPUSH
27701: LD_INT 23
27703: PPUSH
27704: LD_INT 0
27706: PPUSH
27707: CALL_OW 49
// end ;
27711: GO 27602
27713: POP
27714: POP
// for i := 1 to animalsAmount [ 4 ] do
27715: LD_ADDR_VAR 0 2
27719: PUSH
27720: DOUBLE
27721: LD_INT 1
27723: DEC
27724: ST_TO_ADDR
27725: LD_EXP 21
27729: PUSH
27730: LD_INT 4
27732: ARRAY
27733: PUSH
27734: FOR_TO
27735: IFFALSE 27845
// begin uc_side = 0 ;
27737: LD_ADDR_OWVAR 20
27741: PUSH
27742: LD_INT 0
27744: ST_TO_ADDR
// uc_nation = nation_nature ;
27745: LD_ADDR_OWVAR 21
27749: PUSH
27750: LD_INT 0
27752: ST_TO_ADDR
// hc_class = 21 ;
27753: LD_ADDR_OWVAR 28
27757: PUSH
27758: LD_INT 21
27760: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27761: LD_ADDR_OWVAR 31
27765: PUSH
27766: LD_EXP 22
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PUSH
27775: LD_EXP 22
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PUSH
27784: LD_EXP 22
27788: PUSH
27789: LD_INT 3
27791: ARRAY
27792: PUSH
27793: LD_EXP 22
27797: PUSH
27798: LD_INT 4
27800: ARRAY
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27808: LD_ADDR_OWVAR 35
27812: PUSH
27813: LD_EXP 23
27817: ST_TO_ADDR
// un = CreateHuman ;
27818: LD_ADDR_VAR 0 3
27822: PUSH
27823: CALL_OW 44
27827: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_INT 23
27835: PPUSH
27836: LD_INT 0
27838: PPUSH
27839: CALL_OW 49
// end ;
27843: GO 27734
27845: POP
27846: POP
// for i := 1 to animalsAmount [ 5 ] do
27847: LD_ADDR_VAR 0 2
27851: PUSH
27852: DOUBLE
27853: LD_INT 1
27855: DEC
27856: ST_TO_ADDR
27857: LD_EXP 21
27861: PUSH
27862: LD_INT 5
27864: ARRAY
27865: PUSH
27866: FOR_TO
27867: IFFALSE 27928
// begin uc_side = 0 ;
27869: LD_ADDR_OWVAR 20
27873: PUSH
27874: LD_INT 0
27876: ST_TO_ADDR
// uc_nation = nation_nature ;
27877: LD_ADDR_OWVAR 21
27881: PUSH
27882: LD_INT 0
27884: ST_TO_ADDR
// vc_chassis := 31 ;
27885: LD_ADDR_OWVAR 37
27889: PUSH
27890: LD_INT 31
27892: ST_TO_ADDR
// vc_control := control_rider ;
27893: LD_ADDR_OWVAR 38
27897: PUSH
27898: LD_INT 4
27900: ST_TO_ADDR
// un := CreateVehicle ;
27901: LD_ADDR_VAR 0 3
27905: PUSH
27906: CALL_OW 45
27910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27911: LD_VAR 0 3
27915: PPUSH
27916: LD_INT 23
27918: PPUSH
27919: LD_INT 0
27921: PPUSH
27922: CALL_OW 49
// end ;
27926: GO 27866
27928: POP
27929: POP
// end ; end_of_file
27930: LD_VAR 0 1
27934: RET
// export globalGameSaveCounter ; every 0 0$1 do
27935: GO 27937
27937: DISABLE
// begin enable ;
27938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27939: LD_STRING updateTimer(
27941: PUSH
27942: LD_OWVAR 1
27946: STR
27947: PUSH
27948: LD_STRING );
27950: STR
27951: PPUSH
27952: CALL_OW 559
// end ;
27956: END
// every 0 0$1 do
27957: GO 27959
27959: DISABLE
// begin globalGameSaveCounter := 0 ;
27960: LD_ADDR_EXP 63
27964: PUSH
27965: LD_INT 0
27967: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
27968: LD_STRING setGameSaveCounter(0)
27970: PPUSH
27971: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
27975: LD_STRING initStreamRollete();
27977: PPUSH
27978: CALL_OW 559
// InitStreamMode ;
27982: CALL 29308 0 0
// DefineStreamItems ( false ) ;
27986: LD_INT 0
27988: PPUSH
27989: CALL 29772 0 1
// end ;
27993: END
// export function SOS_MapStart ( ) ; begin
27994: LD_INT 0
27996: PPUSH
// if streamModeActive then
27997: LD_EXP 64
28001: IFFALSE 28010
// DefineStreamItems ( true ) ;
28003: LD_INT 1
28005: PPUSH
28006: CALL 29772 0 1
// UpdateLuaVariables ( ) ;
28010: CALL 28027 0 0
// UpdateFactoryWaypoints ( ) ;
28014: CALL 42633 0 0
// UpdateWarehouseGatheringPoints ( ) ;
28018: CALL 42890 0 0
// end ;
28022: LD_VAR 0 1
28026: RET
// function UpdateLuaVariables ( ) ; begin
28027: LD_INT 0
28029: PPUSH
// if globalGameSaveCounter then
28030: LD_EXP 63
28034: IFFALSE 28068
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
28036: LD_ADDR_EXP 63
28040: PUSH
28041: LD_EXP 63
28045: PPUSH
28046: CALL 82558 0 1
28050: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
28051: LD_STRING setGameSaveCounter(
28053: PUSH
28054: LD_EXP 63
28058: STR
28059: PUSH
28060: LD_STRING )
28062: STR
28063: PPUSH
28064: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
28068: LD_STRING setGameDifficulty(
28070: PUSH
28071: LD_OWVAR 67
28075: STR
28076: PUSH
28077: LD_STRING )
28079: STR
28080: PPUSH
28081: CALL_OW 559
// end ;
28085: LD_VAR 0 1
28089: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28090: LD_INT 0
28092: PPUSH
// if p2 = stream_mode then
28093: LD_VAR 0 2
28097: PUSH
28098: LD_INT 100
28100: EQUAL
28101: IFFALSE 29104
// begin if not StreamModeActive then
28103: LD_EXP 64
28107: NOT
28108: IFFALSE 28118
// StreamModeActive := true ;
28110: LD_ADDR_EXP 64
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// if p3 = 0 then
28118: LD_VAR 0 3
28122: PUSH
28123: LD_INT 0
28125: EQUAL
28126: IFFALSE 28132
// InitStreamMode ;
28128: CALL 29308 0 0
// if p3 = 1 then
28132: LD_VAR 0 3
28136: PUSH
28137: LD_INT 1
28139: EQUAL
28140: IFFALSE 28150
// sRocket := true ;
28142: LD_ADDR_EXP 69
28146: PUSH
28147: LD_INT 1
28149: ST_TO_ADDR
// if p3 = 2 then
28150: LD_VAR 0 3
28154: PUSH
28155: LD_INT 2
28157: EQUAL
28158: IFFALSE 28168
// sSpeed := true ;
28160: LD_ADDR_EXP 68
28164: PUSH
28165: LD_INT 1
28167: ST_TO_ADDR
// if p3 = 3 then
28168: LD_VAR 0 3
28172: PUSH
28173: LD_INT 3
28175: EQUAL
28176: IFFALSE 28186
// sEngine := true ;
28178: LD_ADDR_EXP 70
28182: PUSH
28183: LD_INT 1
28185: ST_TO_ADDR
// if p3 = 4 then
28186: LD_VAR 0 3
28190: PUSH
28191: LD_INT 4
28193: EQUAL
28194: IFFALSE 28204
// sSpec := true ;
28196: LD_ADDR_EXP 67
28200: PUSH
28201: LD_INT 1
28203: ST_TO_ADDR
// if p3 = 5 then
28204: LD_VAR 0 3
28208: PUSH
28209: LD_INT 5
28211: EQUAL
28212: IFFALSE 28222
// sLevel := true ;
28214: LD_ADDR_EXP 71
28218: PUSH
28219: LD_INT 1
28221: ST_TO_ADDR
// if p3 = 6 then
28222: LD_VAR 0 3
28226: PUSH
28227: LD_INT 6
28229: EQUAL
28230: IFFALSE 28240
// sArmoury := true ;
28232: LD_ADDR_EXP 72
28236: PUSH
28237: LD_INT 1
28239: ST_TO_ADDR
// if p3 = 7 then
28240: LD_VAR 0 3
28244: PUSH
28245: LD_INT 7
28247: EQUAL
28248: IFFALSE 28258
// sRadar := true ;
28250: LD_ADDR_EXP 73
28254: PUSH
28255: LD_INT 1
28257: ST_TO_ADDR
// if p3 = 8 then
28258: LD_VAR 0 3
28262: PUSH
28263: LD_INT 8
28265: EQUAL
28266: IFFALSE 28276
// sBunker := true ;
28268: LD_ADDR_EXP 74
28272: PUSH
28273: LD_INT 1
28275: ST_TO_ADDR
// if p3 = 9 then
28276: LD_VAR 0 3
28280: PUSH
28281: LD_INT 9
28283: EQUAL
28284: IFFALSE 28294
// sHack := true ;
28286: LD_ADDR_EXP 75
28290: PUSH
28291: LD_INT 1
28293: ST_TO_ADDR
// if p3 = 10 then
28294: LD_VAR 0 3
28298: PUSH
28299: LD_INT 10
28301: EQUAL
28302: IFFALSE 28312
// sFire := true ;
28304: LD_ADDR_EXP 76
28308: PUSH
28309: LD_INT 1
28311: ST_TO_ADDR
// if p3 = 11 then
28312: LD_VAR 0 3
28316: PUSH
28317: LD_INT 11
28319: EQUAL
28320: IFFALSE 28330
// sRefresh := true ;
28322: LD_ADDR_EXP 77
28326: PUSH
28327: LD_INT 1
28329: ST_TO_ADDR
// if p3 = 12 then
28330: LD_VAR 0 3
28334: PUSH
28335: LD_INT 12
28337: EQUAL
28338: IFFALSE 28348
// sExp := true ;
28340: LD_ADDR_EXP 78
28344: PUSH
28345: LD_INT 1
28347: ST_TO_ADDR
// if p3 = 13 then
28348: LD_VAR 0 3
28352: PUSH
28353: LD_INT 13
28355: EQUAL
28356: IFFALSE 28366
// sDepot := true ;
28358: LD_ADDR_EXP 79
28362: PUSH
28363: LD_INT 1
28365: ST_TO_ADDR
// if p3 = 14 then
28366: LD_VAR 0 3
28370: PUSH
28371: LD_INT 14
28373: EQUAL
28374: IFFALSE 28384
// sFlag := true ;
28376: LD_ADDR_EXP 80
28380: PUSH
28381: LD_INT 1
28383: ST_TO_ADDR
// if p3 = 15 then
28384: LD_VAR 0 3
28388: PUSH
28389: LD_INT 15
28391: EQUAL
28392: IFFALSE 28402
// sKamikadze := true ;
28394: LD_ADDR_EXP 88
28398: PUSH
28399: LD_INT 1
28401: ST_TO_ADDR
// if p3 = 16 then
28402: LD_VAR 0 3
28406: PUSH
28407: LD_INT 16
28409: EQUAL
28410: IFFALSE 28420
// sTroll := true ;
28412: LD_ADDR_EXP 89
28416: PUSH
28417: LD_INT 1
28419: ST_TO_ADDR
// if p3 = 17 then
28420: LD_VAR 0 3
28424: PUSH
28425: LD_INT 17
28427: EQUAL
28428: IFFALSE 28438
// sSlow := true ;
28430: LD_ADDR_EXP 90
28434: PUSH
28435: LD_INT 1
28437: ST_TO_ADDR
// if p3 = 18 then
28438: LD_VAR 0 3
28442: PUSH
28443: LD_INT 18
28445: EQUAL
28446: IFFALSE 28456
// sLack := true ;
28448: LD_ADDR_EXP 91
28452: PUSH
28453: LD_INT 1
28455: ST_TO_ADDR
// if p3 = 19 then
28456: LD_VAR 0 3
28460: PUSH
28461: LD_INT 19
28463: EQUAL
28464: IFFALSE 28474
// sTank := true ;
28466: LD_ADDR_EXP 93
28470: PUSH
28471: LD_INT 1
28473: ST_TO_ADDR
// if p3 = 20 then
28474: LD_VAR 0 3
28478: PUSH
28479: LD_INT 20
28481: EQUAL
28482: IFFALSE 28492
// sRemote := true ;
28484: LD_ADDR_EXP 94
28488: PUSH
28489: LD_INT 1
28491: ST_TO_ADDR
// if p3 = 21 then
28492: LD_VAR 0 3
28496: PUSH
28497: LD_INT 21
28499: EQUAL
28500: IFFALSE 28510
// sPowell := true ;
28502: LD_ADDR_EXP 95
28506: PUSH
28507: LD_INT 1
28509: ST_TO_ADDR
// if p3 = 22 then
28510: LD_VAR 0 3
28514: PUSH
28515: LD_INT 22
28517: EQUAL
28518: IFFALSE 28528
// sTeleport := true ;
28520: LD_ADDR_EXP 98
28524: PUSH
28525: LD_INT 1
28527: ST_TO_ADDR
// if p3 = 23 then
28528: LD_VAR 0 3
28532: PUSH
28533: LD_INT 23
28535: EQUAL
28536: IFFALSE 28546
// sOilTower := true ;
28538: LD_ADDR_EXP 100
28542: PUSH
28543: LD_INT 1
28545: ST_TO_ADDR
// if p3 = 24 then
28546: LD_VAR 0 3
28550: PUSH
28551: LD_INT 24
28553: EQUAL
28554: IFFALSE 28564
// sShovel := true ;
28556: LD_ADDR_EXP 101
28560: PUSH
28561: LD_INT 1
28563: ST_TO_ADDR
// if p3 = 25 then
28564: LD_VAR 0 3
28568: PUSH
28569: LD_INT 25
28571: EQUAL
28572: IFFALSE 28582
// sSheik := true ;
28574: LD_ADDR_EXP 102
28578: PUSH
28579: LD_INT 1
28581: ST_TO_ADDR
// if p3 = 26 then
28582: LD_VAR 0 3
28586: PUSH
28587: LD_INT 26
28589: EQUAL
28590: IFFALSE 28600
// sEarthquake := true ;
28592: LD_ADDR_EXP 104
28596: PUSH
28597: LD_INT 1
28599: ST_TO_ADDR
// if p3 = 27 then
28600: LD_VAR 0 3
28604: PUSH
28605: LD_INT 27
28607: EQUAL
28608: IFFALSE 28618
// sAI := true ;
28610: LD_ADDR_EXP 105
28614: PUSH
28615: LD_INT 1
28617: ST_TO_ADDR
// if p3 = 28 then
28618: LD_VAR 0 3
28622: PUSH
28623: LD_INT 28
28625: EQUAL
28626: IFFALSE 28636
// sCargo := true ;
28628: LD_ADDR_EXP 108
28632: PUSH
28633: LD_INT 1
28635: ST_TO_ADDR
// if p3 = 29 then
28636: LD_VAR 0 3
28640: PUSH
28641: LD_INT 29
28643: EQUAL
28644: IFFALSE 28654
// sDLaser := true ;
28646: LD_ADDR_EXP 109
28650: PUSH
28651: LD_INT 1
28653: ST_TO_ADDR
// if p3 = 30 then
28654: LD_VAR 0 3
28658: PUSH
28659: LD_INT 30
28661: EQUAL
28662: IFFALSE 28672
// sExchange := true ;
28664: LD_ADDR_EXP 110
28668: PUSH
28669: LD_INT 1
28671: ST_TO_ADDR
// if p3 = 31 then
28672: LD_VAR 0 3
28676: PUSH
28677: LD_INT 31
28679: EQUAL
28680: IFFALSE 28690
// sFac := true ;
28682: LD_ADDR_EXP 111
28686: PUSH
28687: LD_INT 1
28689: ST_TO_ADDR
// if p3 = 32 then
28690: LD_VAR 0 3
28694: PUSH
28695: LD_INT 32
28697: EQUAL
28698: IFFALSE 28708
// sPower := true ;
28700: LD_ADDR_EXP 112
28704: PUSH
28705: LD_INT 1
28707: ST_TO_ADDR
// if p3 = 33 then
28708: LD_VAR 0 3
28712: PUSH
28713: LD_INT 33
28715: EQUAL
28716: IFFALSE 28726
// sRandom := true ;
28718: LD_ADDR_EXP 113
28722: PUSH
28723: LD_INT 1
28725: ST_TO_ADDR
// if p3 = 34 then
28726: LD_VAR 0 3
28730: PUSH
28731: LD_INT 34
28733: EQUAL
28734: IFFALSE 28744
// sShield := true ;
28736: LD_ADDR_EXP 114
28740: PUSH
28741: LD_INT 1
28743: ST_TO_ADDR
// if p3 = 35 then
28744: LD_VAR 0 3
28748: PUSH
28749: LD_INT 35
28751: EQUAL
28752: IFFALSE 28762
// sTime := true ;
28754: LD_ADDR_EXP 115
28758: PUSH
28759: LD_INT 1
28761: ST_TO_ADDR
// if p3 = 36 then
28762: LD_VAR 0 3
28766: PUSH
28767: LD_INT 36
28769: EQUAL
28770: IFFALSE 28780
// sTools := true ;
28772: LD_ADDR_EXP 116
28776: PUSH
28777: LD_INT 1
28779: ST_TO_ADDR
// if p3 = 101 then
28780: LD_VAR 0 3
28784: PUSH
28785: LD_INT 101
28787: EQUAL
28788: IFFALSE 28798
// sSold := true ;
28790: LD_ADDR_EXP 81
28794: PUSH
28795: LD_INT 1
28797: ST_TO_ADDR
// if p3 = 102 then
28798: LD_VAR 0 3
28802: PUSH
28803: LD_INT 102
28805: EQUAL
28806: IFFALSE 28816
// sDiff := true ;
28808: LD_ADDR_EXP 82
28812: PUSH
28813: LD_INT 1
28815: ST_TO_ADDR
// if p3 = 103 then
28816: LD_VAR 0 3
28820: PUSH
28821: LD_INT 103
28823: EQUAL
28824: IFFALSE 28834
// sFog := true ;
28826: LD_ADDR_EXP 85
28830: PUSH
28831: LD_INT 1
28833: ST_TO_ADDR
// if p3 = 104 then
28834: LD_VAR 0 3
28838: PUSH
28839: LD_INT 104
28841: EQUAL
28842: IFFALSE 28852
// sReset := true ;
28844: LD_ADDR_EXP 86
28848: PUSH
28849: LD_INT 1
28851: ST_TO_ADDR
// if p3 = 105 then
28852: LD_VAR 0 3
28856: PUSH
28857: LD_INT 105
28859: EQUAL
28860: IFFALSE 28870
// sSun := true ;
28862: LD_ADDR_EXP 87
28866: PUSH
28867: LD_INT 1
28869: ST_TO_ADDR
// if p3 = 106 then
28870: LD_VAR 0 3
28874: PUSH
28875: LD_INT 106
28877: EQUAL
28878: IFFALSE 28888
// sTiger := true ;
28880: LD_ADDR_EXP 83
28884: PUSH
28885: LD_INT 1
28887: ST_TO_ADDR
// if p3 = 107 then
28888: LD_VAR 0 3
28892: PUSH
28893: LD_INT 107
28895: EQUAL
28896: IFFALSE 28906
// sBomb := true ;
28898: LD_ADDR_EXP 84
28902: PUSH
28903: LD_INT 1
28905: ST_TO_ADDR
// if p3 = 108 then
28906: LD_VAR 0 3
28910: PUSH
28911: LD_INT 108
28913: EQUAL
28914: IFFALSE 28924
// sWound := true ;
28916: LD_ADDR_EXP 92
28920: PUSH
28921: LD_INT 1
28923: ST_TO_ADDR
// if p3 = 109 then
28924: LD_VAR 0 3
28928: PUSH
28929: LD_INT 109
28931: EQUAL
28932: IFFALSE 28942
// sBetray := true ;
28934: LD_ADDR_EXP 96
28938: PUSH
28939: LD_INT 1
28941: ST_TO_ADDR
// if p3 = 110 then
28942: LD_VAR 0 3
28946: PUSH
28947: LD_INT 110
28949: EQUAL
28950: IFFALSE 28960
// sContamin := true ;
28952: LD_ADDR_EXP 97
28956: PUSH
28957: LD_INT 1
28959: ST_TO_ADDR
// if p3 = 111 then
28960: LD_VAR 0 3
28964: PUSH
28965: LD_INT 111
28967: EQUAL
28968: IFFALSE 28978
// sOil := true ;
28970: LD_ADDR_EXP 99
28974: PUSH
28975: LD_INT 1
28977: ST_TO_ADDR
// if p3 = 112 then
28978: LD_VAR 0 3
28982: PUSH
28983: LD_INT 112
28985: EQUAL
28986: IFFALSE 28996
// sStu := true ;
28988: LD_ADDR_EXP 103
28992: PUSH
28993: LD_INT 1
28995: ST_TO_ADDR
// if p3 = 113 then
28996: LD_VAR 0 3
29000: PUSH
29001: LD_INT 113
29003: EQUAL
29004: IFFALSE 29014
// sBazooka := true ;
29006: LD_ADDR_EXP 106
29010: PUSH
29011: LD_INT 1
29013: ST_TO_ADDR
// if p3 = 114 then
29014: LD_VAR 0 3
29018: PUSH
29019: LD_INT 114
29021: EQUAL
29022: IFFALSE 29032
// sMortar := true ;
29024: LD_ADDR_EXP 107
29028: PUSH
29029: LD_INT 1
29031: ST_TO_ADDR
// if p3 = 115 then
29032: LD_VAR 0 3
29036: PUSH
29037: LD_INT 115
29039: EQUAL
29040: IFFALSE 29050
// sRanger := true ;
29042: LD_ADDR_EXP 117
29046: PUSH
29047: LD_INT 1
29049: ST_TO_ADDR
// if p3 = 116 then
29050: LD_VAR 0 3
29054: PUSH
29055: LD_INT 116
29057: EQUAL
29058: IFFALSE 29068
// sComputer := true ;
29060: LD_ADDR_EXP 118
29064: PUSH
29065: LD_INT 1
29067: ST_TO_ADDR
// if p3 = 117 then
29068: LD_VAR 0 3
29072: PUSH
29073: LD_INT 117
29075: EQUAL
29076: IFFALSE 29086
// s30 := true ;
29078: LD_ADDR_EXP 119
29082: PUSH
29083: LD_INT 1
29085: ST_TO_ADDR
// if p3 = 118 then
29086: LD_VAR 0 3
29090: PUSH
29091: LD_INT 118
29093: EQUAL
29094: IFFALSE 29104
// s60 := true ;
29096: LD_ADDR_EXP 120
29100: PUSH
29101: LD_INT 1
29103: ST_TO_ADDR
// end ; if p2 = hack_mode then
29104: LD_VAR 0 2
29108: PUSH
29109: LD_INT 101
29111: EQUAL
29112: IFFALSE 29240
// begin case p3 of 1 :
29114: LD_VAR 0 3
29118: PUSH
29119: LD_INT 1
29121: DOUBLE
29122: EQUAL
29123: IFTRUE 29127
29125: GO 29134
29127: POP
// hHackUnlimitedResources ; 2 :
29128: CALL 41379 0 0
29132: GO 29240
29134: LD_INT 2
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29149
29142: POP
// hHackSetLevel10 ; 3 :
29143: CALL 41512 0 0
29147: GO 29240
29149: LD_INT 3
29151: DOUBLE
29152: EQUAL
29153: IFTRUE 29157
29155: GO 29164
29157: POP
// hHackSetLevel10YourUnits ; 4 :
29158: CALL 41597 0 0
29162: GO 29240
29164: LD_INT 4
29166: DOUBLE
29167: EQUAL
29168: IFTRUE 29172
29170: GO 29179
29172: POP
// hHackInvincible ; 5 :
29173: CALL 42045 0 0
29177: GO 29240
29179: LD_INT 5
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29187
29185: GO 29194
29187: POP
// hHackInvisible ; 6 :
29188: CALL 42156 0 0
29192: GO 29240
29194: LD_INT 6
29196: DOUBLE
29197: EQUAL
29198: IFTRUE 29202
29200: GO 29209
29202: POP
// hHackChangeYourSide ; 7 :
29203: CALL 42213 0 0
29207: GO 29240
29209: LD_INT 7
29211: DOUBLE
29212: EQUAL
29213: IFTRUE 29217
29215: GO 29224
29217: POP
// hHackChangeUnitSide ; 8 :
29218: CALL 42255 0 0
29222: GO 29240
29224: LD_INT 8
29226: DOUBLE
29227: EQUAL
29228: IFTRUE 29232
29230: GO 29239
29232: POP
// hHackFog ; end ;
29233: CALL 42356 0 0
29237: GO 29240
29239: POP
// end ; if p2 = game_save_mode then
29240: LD_VAR 0 2
29244: PUSH
29245: LD_INT 102
29247: EQUAL
29248: IFFALSE 29303
// begin if p3 = 1 then
29250: LD_VAR 0 3
29254: PUSH
29255: LD_INT 1
29257: EQUAL
29258: IFFALSE 29270
// globalGameSaveCounter := p4 ;
29260: LD_ADDR_EXP 63
29264: PUSH
29265: LD_VAR 0 4
29269: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
29270: LD_VAR 0 3
29274: PUSH
29275: LD_INT 2
29277: EQUAL
29278: PUSH
29279: LD_EXP 63
29283: AND
29284: IFFALSE 29303
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
29286: LD_STRING setGameSaveCounter(
29288: PUSH
29289: LD_EXP 63
29293: STR
29294: PUSH
29295: LD_STRING )
29297: STR
29298: PPUSH
29299: CALL_OW 559
// end ; end ;
29303: LD_VAR 0 7
29307: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
29308: LD_INT 0
29310: PPUSH
// streamModeActive := false ;
29311: LD_ADDR_EXP 64
29315: PUSH
29316: LD_INT 0
29318: ST_TO_ADDR
// normalCounter := 36 ;
29319: LD_ADDR_EXP 65
29323: PUSH
29324: LD_INT 36
29326: ST_TO_ADDR
// hardcoreCounter := 18 ;
29327: LD_ADDR_EXP 66
29331: PUSH
29332: LD_INT 18
29334: ST_TO_ADDR
// sRocket := false ;
29335: LD_ADDR_EXP 69
29339: PUSH
29340: LD_INT 0
29342: ST_TO_ADDR
// sSpeed := false ;
29343: LD_ADDR_EXP 68
29347: PUSH
29348: LD_INT 0
29350: ST_TO_ADDR
// sEngine := false ;
29351: LD_ADDR_EXP 70
29355: PUSH
29356: LD_INT 0
29358: ST_TO_ADDR
// sSpec := false ;
29359: LD_ADDR_EXP 67
29363: PUSH
29364: LD_INT 0
29366: ST_TO_ADDR
// sLevel := false ;
29367: LD_ADDR_EXP 71
29371: PUSH
29372: LD_INT 0
29374: ST_TO_ADDR
// sArmoury := false ;
29375: LD_ADDR_EXP 72
29379: PUSH
29380: LD_INT 0
29382: ST_TO_ADDR
// sRadar := false ;
29383: LD_ADDR_EXP 73
29387: PUSH
29388: LD_INT 0
29390: ST_TO_ADDR
// sBunker := false ;
29391: LD_ADDR_EXP 74
29395: PUSH
29396: LD_INT 0
29398: ST_TO_ADDR
// sHack := false ;
29399: LD_ADDR_EXP 75
29403: PUSH
29404: LD_INT 0
29406: ST_TO_ADDR
// sFire := false ;
29407: LD_ADDR_EXP 76
29411: PUSH
29412: LD_INT 0
29414: ST_TO_ADDR
// sRefresh := false ;
29415: LD_ADDR_EXP 77
29419: PUSH
29420: LD_INT 0
29422: ST_TO_ADDR
// sExp := false ;
29423: LD_ADDR_EXP 78
29427: PUSH
29428: LD_INT 0
29430: ST_TO_ADDR
// sDepot := false ;
29431: LD_ADDR_EXP 79
29435: PUSH
29436: LD_INT 0
29438: ST_TO_ADDR
// sFlag := false ;
29439: LD_ADDR_EXP 80
29443: PUSH
29444: LD_INT 0
29446: ST_TO_ADDR
// sKamikadze := false ;
29447: LD_ADDR_EXP 88
29451: PUSH
29452: LD_INT 0
29454: ST_TO_ADDR
// sTroll := false ;
29455: LD_ADDR_EXP 89
29459: PUSH
29460: LD_INT 0
29462: ST_TO_ADDR
// sSlow := false ;
29463: LD_ADDR_EXP 90
29467: PUSH
29468: LD_INT 0
29470: ST_TO_ADDR
// sLack := false ;
29471: LD_ADDR_EXP 91
29475: PUSH
29476: LD_INT 0
29478: ST_TO_ADDR
// sTank := false ;
29479: LD_ADDR_EXP 93
29483: PUSH
29484: LD_INT 0
29486: ST_TO_ADDR
// sRemote := false ;
29487: LD_ADDR_EXP 94
29491: PUSH
29492: LD_INT 0
29494: ST_TO_ADDR
// sPowell := false ;
29495: LD_ADDR_EXP 95
29499: PUSH
29500: LD_INT 0
29502: ST_TO_ADDR
// sTeleport := false ;
29503: LD_ADDR_EXP 98
29507: PUSH
29508: LD_INT 0
29510: ST_TO_ADDR
// sOilTower := false ;
29511: LD_ADDR_EXP 100
29515: PUSH
29516: LD_INT 0
29518: ST_TO_ADDR
// sShovel := false ;
29519: LD_ADDR_EXP 101
29523: PUSH
29524: LD_INT 0
29526: ST_TO_ADDR
// sSheik := false ;
29527: LD_ADDR_EXP 102
29531: PUSH
29532: LD_INT 0
29534: ST_TO_ADDR
// sEarthquake := false ;
29535: LD_ADDR_EXP 104
29539: PUSH
29540: LD_INT 0
29542: ST_TO_ADDR
// sAI := false ;
29543: LD_ADDR_EXP 105
29547: PUSH
29548: LD_INT 0
29550: ST_TO_ADDR
// sCargo := false ;
29551: LD_ADDR_EXP 108
29555: PUSH
29556: LD_INT 0
29558: ST_TO_ADDR
// sDLaser := false ;
29559: LD_ADDR_EXP 109
29563: PUSH
29564: LD_INT 0
29566: ST_TO_ADDR
// sExchange := false ;
29567: LD_ADDR_EXP 110
29571: PUSH
29572: LD_INT 0
29574: ST_TO_ADDR
// sFac := false ;
29575: LD_ADDR_EXP 111
29579: PUSH
29580: LD_INT 0
29582: ST_TO_ADDR
// sPower := false ;
29583: LD_ADDR_EXP 112
29587: PUSH
29588: LD_INT 0
29590: ST_TO_ADDR
// sRandom := false ;
29591: LD_ADDR_EXP 113
29595: PUSH
29596: LD_INT 0
29598: ST_TO_ADDR
// sShield := false ;
29599: LD_ADDR_EXP 114
29603: PUSH
29604: LD_INT 0
29606: ST_TO_ADDR
// sTime := false ;
29607: LD_ADDR_EXP 115
29611: PUSH
29612: LD_INT 0
29614: ST_TO_ADDR
// sTools := false ;
29615: LD_ADDR_EXP 116
29619: PUSH
29620: LD_INT 0
29622: ST_TO_ADDR
// sSold := false ;
29623: LD_ADDR_EXP 81
29627: PUSH
29628: LD_INT 0
29630: ST_TO_ADDR
// sDiff := false ;
29631: LD_ADDR_EXP 82
29635: PUSH
29636: LD_INT 0
29638: ST_TO_ADDR
// sFog := false ;
29639: LD_ADDR_EXP 85
29643: PUSH
29644: LD_INT 0
29646: ST_TO_ADDR
// sReset := false ;
29647: LD_ADDR_EXP 86
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// sSun := false ;
29655: LD_ADDR_EXP 87
29659: PUSH
29660: LD_INT 0
29662: ST_TO_ADDR
// sTiger := false ;
29663: LD_ADDR_EXP 83
29667: PUSH
29668: LD_INT 0
29670: ST_TO_ADDR
// sBomb := false ;
29671: LD_ADDR_EXP 84
29675: PUSH
29676: LD_INT 0
29678: ST_TO_ADDR
// sWound := false ;
29679: LD_ADDR_EXP 92
29683: PUSH
29684: LD_INT 0
29686: ST_TO_ADDR
// sBetray := false ;
29687: LD_ADDR_EXP 96
29691: PUSH
29692: LD_INT 0
29694: ST_TO_ADDR
// sContamin := false ;
29695: LD_ADDR_EXP 97
29699: PUSH
29700: LD_INT 0
29702: ST_TO_ADDR
// sOil := false ;
29703: LD_ADDR_EXP 99
29707: PUSH
29708: LD_INT 0
29710: ST_TO_ADDR
// sStu := false ;
29711: LD_ADDR_EXP 103
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// sBazooka := false ;
29719: LD_ADDR_EXP 106
29723: PUSH
29724: LD_INT 0
29726: ST_TO_ADDR
// sMortar := false ;
29727: LD_ADDR_EXP 107
29731: PUSH
29732: LD_INT 0
29734: ST_TO_ADDR
// sRanger := false ;
29735: LD_ADDR_EXP 117
29739: PUSH
29740: LD_INT 0
29742: ST_TO_ADDR
// sComputer := false ;
29743: LD_ADDR_EXP 118
29747: PUSH
29748: LD_INT 0
29750: ST_TO_ADDR
// s30 := false ;
29751: LD_ADDR_EXP 119
29755: PUSH
29756: LD_INT 0
29758: ST_TO_ADDR
// s60 := false ;
29759: LD_ADDR_EXP 120
29763: PUSH
29764: LD_INT 0
29766: ST_TO_ADDR
// end ;
29767: LD_VAR 0 1
29771: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
// result := [ ] ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: EMPTY
29787: ST_TO_ADDR
// if campaign_id = 1 then
29788: LD_OWVAR 69
29792: PUSH
29793: LD_INT 1
29795: EQUAL
29796: IFFALSE 32962
// begin case mission_number of 1 :
29798: LD_OWVAR 70
29802: PUSH
29803: LD_INT 1
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29887
29811: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29812: LD_ADDR_VAR 0 2
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: LD_INT 11
29825: PUSH
29826: LD_INT 12
29828: PUSH
29829: LD_INT 15
29831: PUSH
29832: LD_INT 16
29834: PUSH
29835: LD_INT 22
29837: PUSH
29838: LD_INT 23
29840: PUSH
29841: LD_INT 26
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 101
29857: PUSH
29858: LD_INT 102
29860: PUSH
29861: LD_INT 106
29863: PUSH
29864: LD_INT 116
29866: PUSH
29867: LD_INT 117
29869: PUSH
29870: LD_INT 118
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: ST_TO_ADDR
29885: GO 32960
29887: LD_INT 2
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29979
29895: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29896: LD_ADDR_VAR 0 2
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: LD_INT 4
29906: PUSH
29907: LD_INT 11
29909: PUSH
29910: LD_INT 12
29912: PUSH
29913: LD_INT 15
29915: PUSH
29916: LD_INT 16
29918: PUSH
29919: LD_INT 22
29921: PUSH
29922: LD_INT 23
29924: PUSH
29925: LD_INT 26
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 101
29941: PUSH
29942: LD_INT 102
29944: PUSH
29945: LD_INT 105
29947: PUSH
29948: LD_INT 106
29950: PUSH
29951: LD_INT 108
29953: PUSH
29954: LD_INT 116
29956: PUSH
29957: LD_INT 117
29959: PUSH
29960: LD_INT 118
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: ST_TO_ADDR
29977: GO 32960
29979: LD_INT 3
29981: DOUBLE
29982: EQUAL
29983: IFTRUE 29987
29985: GO 30075
29987: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29988: LD_ADDR_VAR 0 2
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 4
29998: PUSH
29999: LD_INT 5
30001: PUSH
30002: LD_INT 11
30004: PUSH
30005: LD_INT 12
30007: PUSH
30008: LD_INT 15
30010: PUSH
30011: LD_INT 16
30013: PUSH
30014: LD_INT 22
30016: PUSH
30017: LD_INT 26
30019: PUSH
30020: LD_INT 36
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 101
30037: PUSH
30038: LD_INT 102
30040: PUSH
30041: LD_INT 105
30043: PUSH
30044: LD_INT 106
30046: PUSH
30047: LD_INT 108
30049: PUSH
30050: LD_INT 116
30052: PUSH
30053: LD_INT 117
30055: PUSH
30056: LD_INT 118
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: ST_TO_ADDR
30073: GO 32960
30075: LD_INT 4
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30179
30083: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
30084: LD_ADDR_VAR 0 2
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 4
30094: PUSH
30095: LD_INT 5
30097: PUSH
30098: LD_INT 8
30100: PUSH
30101: LD_INT 11
30103: PUSH
30104: LD_INT 12
30106: PUSH
30107: LD_INT 15
30109: PUSH
30110: LD_INT 16
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_INT 23
30118: PUSH
30119: LD_INT 26
30121: PUSH
30122: LD_INT 36
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 101
30141: PUSH
30142: LD_INT 102
30144: PUSH
30145: LD_INT 105
30147: PUSH
30148: LD_INT 106
30150: PUSH
30151: LD_INT 108
30153: PUSH
30154: LD_INT 116
30156: PUSH
30157: LD_INT 117
30159: PUSH
30160: LD_INT 118
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: ST_TO_ADDR
30177: GO 32960
30179: LD_INT 5
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30299
30187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
30188: LD_ADDR_VAR 0 2
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 4
30198: PUSH
30199: LD_INT 5
30201: PUSH
30202: LD_INT 6
30204: PUSH
30205: LD_INT 8
30207: PUSH
30208: LD_INT 11
30210: PUSH
30211: LD_INT 12
30213: PUSH
30214: LD_INT 15
30216: PUSH
30217: LD_INT 16
30219: PUSH
30220: LD_INT 22
30222: PUSH
30223: LD_INT 23
30225: PUSH
30226: LD_INT 25
30228: PUSH
30229: LD_INT 26
30231: PUSH
30232: LD_INT 36
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 101
30253: PUSH
30254: LD_INT 102
30256: PUSH
30257: LD_INT 105
30259: PUSH
30260: LD_INT 106
30262: PUSH
30263: LD_INT 108
30265: PUSH
30266: LD_INT 109
30268: PUSH
30269: LD_INT 112
30271: PUSH
30272: LD_INT 116
30274: PUSH
30275: LD_INT 117
30277: PUSH
30278: LD_INT 118
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: ST_TO_ADDR
30297: GO 32960
30299: LD_INT 6
30301: DOUBLE
30302: EQUAL
30303: IFTRUE 30307
30305: GO 30439
30307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
30308: LD_ADDR_VAR 0 2
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 4
30318: PUSH
30319: LD_INT 5
30321: PUSH
30322: LD_INT 6
30324: PUSH
30325: LD_INT 8
30327: PUSH
30328: LD_INT 11
30330: PUSH
30331: LD_INT 12
30333: PUSH
30334: LD_INT 15
30336: PUSH
30337: LD_INT 16
30339: PUSH
30340: LD_INT 20
30342: PUSH
30343: LD_INT 21
30345: PUSH
30346: LD_INT 22
30348: PUSH
30349: LD_INT 23
30351: PUSH
30352: LD_INT 25
30354: PUSH
30355: LD_INT 26
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 31
30363: PUSH
30364: LD_INT 32
30366: PUSH
30367: LD_INT 36
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 101
30393: PUSH
30394: LD_INT 102
30396: PUSH
30397: LD_INT 105
30399: PUSH
30400: LD_INT 106
30402: PUSH
30403: LD_INT 108
30405: PUSH
30406: LD_INT 109
30408: PUSH
30409: LD_INT 112
30411: PUSH
30412: LD_INT 116
30414: PUSH
30415: LD_INT 117
30417: PUSH
30418: LD_INT 118
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: ST_TO_ADDR
30437: GO 32960
30439: LD_INT 7
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30559
30447: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
30448: LD_ADDR_VAR 0 2
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: LD_INT 7
30464: PUSH
30465: LD_INT 11
30467: PUSH
30468: LD_INT 12
30470: PUSH
30471: LD_INT 15
30473: PUSH
30474: LD_INT 16
30476: PUSH
30477: LD_INT 20
30479: PUSH
30480: LD_INT 21
30482: PUSH
30483: LD_INT 22
30485: PUSH
30486: LD_INT 23
30488: PUSH
30489: LD_INT 25
30491: PUSH
30492: LD_INT 26
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 101
30513: PUSH
30514: LD_INT 102
30516: PUSH
30517: LD_INT 103
30519: PUSH
30520: LD_INT 105
30522: PUSH
30523: LD_INT 106
30525: PUSH
30526: LD_INT 108
30528: PUSH
30529: LD_INT 112
30531: PUSH
30532: LD_INT 116
30534: PUSH
30535: LD_INT 117
30537: PUSH
30538: LD_INT 118
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: ST_TO_ADDR
30557: GO 32960
30559: LD_INT 8
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30707
30567: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
30568: LD_ADDR_VAR 0 2
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: LD_INT 5
30581: PUSH
30582: LD_INT 6
30584: PUSH
30585: LD_INT 7
30587: PUSH
30588: LD_INT 8
30590: PUSH
30591: LD_INT 11
30593: PUSH
30594: LD_INT 12
30596: PUSH
30597: LD_INT 15
30599: PUSH
30600: LD_INT 16
30602: PUSH
30603: LD_INT 20
30605: PUSH
30606: LD_INT 21
30608: PUSH
30609: LD_INT 22
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 25
30617: PUSH
30618: LD_INT 26
30620: PUSH
30621: LD_INT 30
30623: PUSH
30624: LD_INT 31
30626: PUSH
30627: LD_INT 32
30629: PUSH
30630: LD_INT 36
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 101
30657: PUSH
30658: LD_INT 102
30660: PUSH
30661: LD_INT 103
30663: PUSH
30664: LD_INT 105
30666: PUSH
30667: LD_INT 106
30669: PUSH
30670: LD_INT 108
30672: PUSH
30673: LD_INT 109
30675: PUSH
30676: LD_INT 112
30678: PUSH
30679: LD_INT 116
30681: PUSH
30682: LD_INT 117
30684: PUSH
30685: LD_INT 118
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: ST_TO_ADDR
30705: GO 32960
30707: LD_INT 9
30709: DOUBLE
30710: EQUAL
30711: IFTRUE 30715
30713: GO 30863
30715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
30716: LD_ADDR_VAR 0 2
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: LD_INT 6
30732: PUSH
30733: LD_INT 7
30735: PUSH
30736: LD_INT 8
30738: PUSH
30739: LD_INT 11
30741: PUSH
30742: LD_INT 12
30744: PUSH
30745: LD_INT 15
30747: PUSH
30748: LD_INT 16
30750: PUSH
30751: LD_INT 20
30753: PUSH
30754: LD_INT 21
30756: PUSH
30757: LD_INT 22
30759: PUSH
30760: LD_INT 23
30762: PUSH
30763: LD_INT 25
30765: PUSH
30766: LD_INT 26
30768: PUSH
30769: LD_INT 28
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 31
30777: PUSH
30778: LD_INT 32
30780: PUSH
30781: LD_INT 36
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 101
30809: PUSH
30810: LD_INT 102
30812: PUSH
30813: LD_INT 103
30815: PUSH
30816: LD_INT 105
30818: PUSH
30819: LD_INT 106
30821: PUSH
30822: LD_INT 108
30824: PUSH
30825: LD_INT 109
30827: PUSH
30828: LD_INT 112
30830: PUSH
30831: LD_INT 114
30833: PUSH
30834: LD_INT 116
30836: PUSH
30837: LD_INT 117
30839: PUSH
30840: LD_INT 118
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 32960
30863: LD_INT 10
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 31067
30871: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 4
30882: PUSH
30883: LD_INT 5
30885: PUSH
30886: LD_INT 6
30888: PUSH
30889: LD_INT 7
30891: PUSH
30892: LD_INT 8
30894: PUSH
30895: LD_INT 9
30897: PUSH
30898: LD_INT 10
30900: PUSH
30901: LD_INT 11
30903: PUSH
30904: LD_INT 12
30906: PUSH
30907: LD_INT 13
30909: PUSH
30910: LD_INT 14
30912: PUSH
30913: LD_INT 15
30915: PUSH
30916: LD_INT 16
30918: PUSH
30919: LD_INT 17
30921: PUSH
30922: LD_INT 18
30924: PUSH
30925: LD_INT 19
30927: PUSH
30928: LD_INT 20
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 22
30936: PUSH
30937: LD_INT 23
30939: PUSH
30940: LD_INT 24
30942: PUSH
30943: LD_INT 25
30945: PUSH
30946: LD_INT 26
30948: PUSH
30949: LD_INT 28
30951: PUSH
30952: LD_INT 30
30954: PUSH
30955: LD_INT 31
30957: PUSH
30958: LD_INT 32
30960: PUSH
30961: LD_INT 36
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 101
30997: PUSH
30998: LD_INT 102
31000: PUSH
31001: LD_INT 103
31003: PUSH
31004: LD_INT 104
31006: PUSH
31007: LD_INT 105
31009: PUSH
31010: LD_INT 106
31012: PUSH
31013: LD_INT 107
31015: PUSH
31016: LD_INT 108
31018: PUSH
31019: LD_INT 109
31021: PUSH
31022: LD_INT 110
31024: PUSH
31025: LD_INT 111
31027: PUSH
31028: LD_INT 112
31030: PUSH
31031: LD_INT 114
31033: PUSH
31034: LD_INT 116
31036: PUSH
31037: LD_INT 117
31039: PUSH
31040: LD_INT 118
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: ST_TO_ADDR
31065: GO 32960
31067: LD_INT 11
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31075
31073: GO 31279
31075: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 3
31086: PUSH
31087: LD_INT 4
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: LD_INT 6
31095: PUSH
31096: LD_INT 7
31098: PUSH
31099: LD_INT 8
31101: PUSH
31102: LD_INT 9
31104: PUSH
31105: LD_INT 10
31107: PUSH
31108: LD_INT 11
31110: PUSH
31111: LD_INT 12
31113: PUSH
31114: LD_INT 13
31116: PUSH
31117: LD_INT 14
31119: PUSH
31120: LD_INT 15
31122: PUSH
31123: LD_INT 16
31125: PUSH
31126: LD_INT 17
31128: PUSH
31129: LD_INT 18
31131: PUSH
31132: LD_INT 19
31134: PUSH
31135: LD_INT 20
31137: PUSH
31138: LD_INT 21
31140: PUSH
31141: LD_INT 22
31143: PUSH
31144: LD_INT 23
31146: PUSH
31147: LD_INT 24
31149: PUSH
31150: LD_INT 25
31152: PUSH
31153: LD_INT 26
31155: PUSH
31156: LD_INT 28
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 31
31164: PUSH
31165: LD_INT 32
31167: PUSH
31168: LD_INT 34
31170: PUSH
31171: LD_INT 36
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 101
31209: PUSH
31210: LD_INT 102
31212: PUSH
31213: LD_INT 103
31215: PUSH
31216: LD_INT 104
31218: PUSH
31219: LD_INT 105
31221: PUSH
31222: LD_INT 106
31224: PUSH
31225: LD_INT 107
31227: PUSH
31228: LD_INT 108
31230: PUSH
31231: LD_INT 109
31233: PUSH
31234: LD_INT 110
31236: PUSH
31237: LD_INT 111
31239: PUSH
31240: LD_INT 112
31242: PUSH
31243: LD_INT 114
31245: PUSH
31246: LD_INT 116
31248: PUSH
31249: LD_INT 117
31251: PUSH
31252: LD_INT 118
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: ST_TO_ADDR
31277: GO 32960
31279: LD_INT 12
31281: DOUBLE
31282: EQUAL
31283: IFTRUE 31287
31285: GO 31507
31287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
31288: LD_ADDR_VAR 0 2
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: LD_INT 5
31307: PUSH
31308: LD_INT 6
31310: PUSH
31311: LD_INT 7
31313: PUSH
31314: LD_INT 8
31316: PUSH
31317: LD_INT 9
31319: PUSH
31320: LD_INT 10
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: LD_INT 15
31337: PUSH
31338: LD_INT 16
31340: PUSH
31341: LD_INT 17
31343: PUSH
31344: LD_INT 18
31346: PUSH
31347: LD_INT 19
31349: PUSH
31350: LD_INT 20
31352: PUSH
31353: LD_INT 21
31355: PUSH
31356: LD_INT 22
31358: PUSH
31359: LD_INT 23
31361: PUSH
31362: LD_INT 24
31364: PUSH
31365: LD_INT 25
31367: PUSH
31368: LD_INT 26
31370: PUSH
31371: LD_INT 27
31373: PUSH
31374: LD_INT 28
31376: PUSH
31377: LD_INT 30
31379: PUSH
31380: LD_INT 31
31382: PUSH
31383: LD_INT 32
31385: PUSH
31386: LD_INT 33
31388: PUSH
31389: LD_INT 34
31391: PUSH
31392: LD_INT 36
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 101
31433: PUSH
31434: LD_INT 102
31436: PUSH
31437: LD_INT 103
31439: PUSH
31440: LD_INT 104
31442: PUSH
31443: LD_INT 105
31445: PUSH
31446: LD_INT 106
31448: PUSH
31449: LD_INT 107
31451: PUSH
31452: LD_INT 108
31454: PUSH
31455: LD_INT 109
31457: PUSH
31458: LD_INT 110
31460: PUSH
31461: LD_INT 111
31463: PUSH
31464: LD_INT 112
31466: PUSH
31467: LD_INT 113
31469: PUSH
31470: LD_INT 114
31472: PUSH
31473: LD_INT 116
31475: PUSH
31476: LD_INT 117
31478: PUSH
31479: LD_INT 118
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: ST_TO_ADDR
31505: GO 32960
31507: LD_INT 13
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31723
31515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
31516: LD_ADDR_VAR 0 2
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 4
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: LD_INT 8
31538: PUSH
31539: LD_INT 9
31541: PUSH
31542: LD_INT 10
31544: PUSH
31545: LD_INT 11
31547: PUSH
31548: LD_INT 12
31550: PUSH
31551: LD_INT 14
31553: PUSH
31554: LD_INT 15
31556: PUSH
31557: LD_INT 16
31559: PUSH
31560: LD_INT 17
31562: PUSH
31563: LD_INT 18
31565: PUSH
31566: LD_INT 19
31568: PUSH
31569: LD_INT 20
31571: PUSH
31572: LD_INT 21
31574: PUSH
31575: LD_INT 22
31577: PUSH
31578: LD_INT 23
31580: PUSH
31581: LD_INT 24
31583: PUSH
31584: LD_INT 25
31586: PUSH
31587: LD_INT 26
31589: PUSH
31590: LD_INT 27
31592: PUSH
31593: LD_INT 28
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: LD_INT 31
31601: PUSH
31602: LD_INT 32
31604: PUSH
31605: LD_INT 33
31607: PUSH
31608: LD_INT 34
31610: PUSH
31611: LD_INT 36
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 101
31649: PUSH
31650: LD_INT 102
31652: PUSH
31653: LD_INT 103
31655: PUSH
31656: LD_INT 104
31658: PUSH
31659: LD_INT 105
31661: PUSH
31662: LD_INT 106
31664: PUSH
31665: LD_INT 107
31667: PUSH
31668: LD_INT 108
31670: PUSH
31671: LD_INT 109
31673: PUSH
31674: LD_INT 110
31676: PUSH
31677: LD_INT 111
31679: PUSH
31680: LD_INT 112
31682: PUSH
31683: LD_INT 113
31685: PUSH
31686: LD_INT 114
31688: PUSH
31689: LD_INT 116
31691: PUSH
31692: LD_INT 117
31694: PUSH
31695: LD_INT 118
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: ST_TO_ADDR
31721: GO 32960
31723: LD_INT 14
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31955
31731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
31732: LD_ADDR_VAR 0 2
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 4
31748: PUSH
31749: LD_INT 5
31751: PUSH
31752: LD_INT 6
31754: PUSH
31755: LD_INT 7
31757: PUSH
31758: LD_INT 8
31760: PUSH
31761: LD_INT 9
31763: PUSH
31764: LD_INT 10
31766: PUSH
31767: LD_INT 11
31769: PUSH
31770: LD_INT 12
31772: PUSH
31773: LD_INT 13
31775: PUSH
31776: LD_INT 14
31778: PUSH
31779: LD_INT 15
31781: PUSH
31782: LD_INT 16
31784: PUSH
31785: LD_INT 17
31787: PUSH
31788: LD_INT 18
31790: PUSH
31791: LD_INT 19
31793: PUSH
31794: LD_INT 20
31796: PUSH
31797: LD_INT 21
31799: PUSH
31800: LD_INT 22
31802: PUSH
31803: LD_INT 23
31805: PUSH
31806: LD_INT 24
31808: PUSH
31809: LD_INT 25
31811: PUSH
31812: LD_INT 26
31814: PUSH
31815: LD_INT 27
31817: PUSH
31818: LD_INT 28
31820: PUSH
31821: LD_INT 29
31823: PUSH
31824: LD_INT 30
31826: PUSH
31827: LD_INT 31
31829: PUSH
31830: LD_INT 32
31832: PUSH
31833: LD_INT 33
31835: PUSH
31836: LD_INT 34
31838: PUSH
31839: LD_INT 36
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 101
31881: PUSH
31882: LD_INT 102
31884: PUSH
31885: LD_INT 103
31887: PUSH
31888: LD_INT 104
31890: PUSH
31891: LD_INT 105
31893: PUSH
31894: LD_INT 106
31896: PUSH
31897: LD_INT 107
31899: PUSH
31900: LD_INT 108
31902: PUSH
31903: LD_INT 109
31905: PUSH
31906: LD_INT 110
31908: PUSH
31909: LD_INT 111
31911: PUSH
31912: LD_INT 112
31914: PUSH
31915: LD_INT 113
31917: PUSH
31918: LD_INT 114
31920: PUSH
31921: LD_INT 116
31923: PUSH
31924: LD_INT 117
31926: PUSH
31927: LD_INT 118
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: ST_TO_ADDR
31953: GO 32960
31955: LD_INT 15
31957: DOUBLE
31958: EQUAL
31959: IFTRUE 31963
31961: GO 32187
31963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31964: LD_ADDR_VAR 0 2
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 4
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: LD_INT 6
31986: PUSH
31987: LD_INT 7
31989: PUSH
31990: LD_INT 8
31992: PUSH
31993: LD_INT 9
31995: PUSH
31996: LD_INT 10
31998: PUSH
31999: LD_INT 11
32001: PUSH
32002: LD_INT 12
32004: PUSH
32005: LD_INT 13
32007: PUSH
32008: LD_INT 14
32010: PUSH
32011: LD_INT 15
32013: PUSH
32014: LD_INT 16
32016: PUSH
32017: LD_INT 17
32019: PUSH
32020: LD_INT 18
32022: PUSH
32023: LD_INT 19
32025: PUSH
32026: LD_INT 20
32028: PUSH
32029: LD_INT 21
32031: PUSH
32032: LD_INT 22
32034: PUSH
32035: LD_INT 23
32037: PUSH
32038: LD_INT 24
32040: PUSH
32041: LD_INT 25
32043: PUSH
32044: LD_INT 26
32046: PUSH
32047: LD_INT 27
32049: PUSH
32050: LD_INT 28
32052: PUSH
32053: LD_INT 29
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 31
32061: PUSH
32062: LD_INT 32
32064: PUSH
32065: LD_INT 33
32067: PUSH
32068: LD_INT 34
32070: PUSH
32071: LD_INT 36
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 101
32113: PUSH
32114: LD_INT 102
32116: PUSH
32117: LD_INT 103
32119: PUSH
32120: LD_INT 104
32122: PUSH
32123: LD_INT 105
32125: PUSH
32126: LD_INT 106
32128: PUSH
32129: LD_INT 107
32131: PUSH
32132: LD_INT 108
32134: PUSH
32135: LD_INT 109
32137: PUSH
32138: LD_INT 110
32140: PUSH
32141: LD_INT 111
32143: PUSH
32144: LD_INT 112
32146: PUSH
32147: LD_INT 113
32149: PUSH
32150: LD_INT 114
32152: PUSH
32153: LD_INT 116
32155: PUSH
32156: LD_INT 117
32158: PUSH
32159: LD_INT 118
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: ST_TO_ADDR
32185: GO 32960
32187: LD_INT 16
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32331
32195: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: LD_INT 7
32212: PUSH
32213: LD_INT 11
32215: PUSH
32216: LD_INT 12
32218: PUSH
32219: LD_INT 15
32221: PUSH
32222: LD_INT 16
32224: PUSH
32225: LD_INT 20
32227: PUSH
32228: LD_INT 21
32230: PUSH
32231: LD_INT 22
32233: PUSH
32234: LD_INT 23
32236: PUSH
32237: LD_INT 25
32239: PUSH
32240: LD_INT 26
32242: PUSH
32243: LD_INT 30
32245: PUSH
32246: LD_INT 31
32248: PUSH
32249: LD_INT 32
32251: PUSH
32252: LD_INT 33
32254: PUSH
32255: LD_INT 34
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 101
32281: PUSH
32282: LD_INT 102
32284: PUSH
32285: LD_INT 103
32287: PUSH
32288: LD_INT 106
32290: PUSH
32291: LD_INT 108
32293: PUSH
32294: LD_INT 112
32296: PUSH
32297: LD_INT 113
32299: PUSH
32300: LD_INT 114
32302: PUSH
32303: LD_INT 116
32305: PUSH
32306: LD_INT 117
32308: PUSH
32309: LD_INT 118
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: ST_TO_ADDR
32329: GO 32960
32331: LD_INT 17
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32339
32337: GO 32563
32339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
32340: LD_ADDR_VAR 0 2
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: LD_INT 6
32362: PUSH
32363: LD_INT 7
32365: PUSH
32366: LD_INT 8
32368: PUSH
32369: LD_INT 9
32371: PUSH
32372: LD_INT 10
32374: PUSH
32375: LD_INT 11
32377: PUSH
32378: LD_INT 12
32380: PUSH
32381: LD_INT 13
32383: PUSH
32384: LD_INT 14
32386: PUSH
32387: LD_INT 15
32389: PUSH
32390: LD_INT 16
32392: PUSH
32393: LD_INT 17
32395: PUSH
32396: LD_INT 18
32398: PUSH
32399: LD_INT 19
32401: PUSH
32402: LD_INT 20
32404: PUSH
32405: LD_INT 21
32407: PUSH
32408: LD_INT 22
32410: PUSH
32411: LD_INT 23
32413: PUSH
32414: LD_INT 24
32416: PUSH
32417: LD_INT 25
32419: PUSH
32420: LD_INT 26
32422: PUSH
32423: LD_INT 27
32425: PUSH
32426: LD_INT 28
32428: PUSH
32429: LD_INT 29
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: LD_INT 31
32437: PUSH
32438: LD_INT 32
32440: PUSH
32441: LD_INT 33
32443: PUSH
32444: LD_INT 34
32446: PUSH
32447: LD_INT 36
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 101
32489: PUSH
32490: LD_INT 102
32492: PUSH
32493: LD_INT 103
32495: PUSH
32496: LD_INT 104
32498: PUSH
32499: LD_INT 105
32501: PUSH
32502: LD_INT 106
32504: PUSH
32505: LD_INT 107
32507: PUSH
32508: LD_INT 108
32510: PUSH
32511: LD_INT 109
32513: PUSH
32514: LD_INT 110
32516: PUSH
32517: LD_INT 111
32519: PUSH
32520: LD_INT 112
32522: PUSH
32523: LD_INT 113
32525: PUSH
32526: LD_INT 114
32528: PUSH
32529: LD_INT 116
32531: PUSH
32532: LD_INT 117
32534: PUSH
32535: LD_INT 118
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: ST_TO_ADDR
32561: GO 32960
32563: LD_INT 18
32565: DOUBLE
32566: EQUAL
32567: IFTRUE 32571
32569: GO 32719
32571: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: LD_INT 7
32588: PUSH
32589: LD_INT 11
32591: PUSH
32592: LD_INT 12
32594: PUSH
32595: LD_INT 15
32597: PUSH
32598: LD_INT 16
32600: PUSH
32601: LD_INT 20
32603: PUSH
32604: LD_INT 21
32606: PUSH
32607: LD_INT 22
32609: PUSH
32610: LD_INT 23
32612: PUSH
32613: LD_INT 25
32615: PUSH
32616: LD_INT 26
32618: PUSH
32619: LD_INT 30
32621: PUSH
32622: LD_INT 31
32624: PUSH
32625: LD_INT 32
32627: PUSH
32628: LD_INT 33
32630: PUSH
32631: LD_INT 34
32633: PUSH
32634: LD_INT 35
32636: PUSH
32637: LD_INT 36
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 101
32665: PUSH
32666: LD_INT 102
32668: PUSH
32669: LD_INT 103
32671: PUSH
32672: LD_INT 106
32674: PUSH
32675: LD_INT 108
32677: PUSH
32678: LD_INT 112
32680: PUSH
32681: LD_INT 113
32683: PUSH
32684: LD_INT 114
32686: PUSH
32687: LD_INT 115
32689: PUSH
32690: LD_INT 116
32692: PUSH
32693: LD_INT 117
32695: PUSH
32696: LD_INT 118
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: ST_TO_ADDR
32717: GO 32960
32719: LD_INT 19
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32959
32727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
32728: LD_ADDR_VAR 0 2
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: LD_INT 4
32744: PUSH
32745: LD_INT 5
32747: PUSH
32748: LD_INT 6
32750: PUSH
32751: LD_INT 7
32753: PUSH
32754: LD_INT 8
32756: PUSH
32757: LD_INT 9
32759: PUSH
32760: LD_INT 10
32762: PUSH
32763: LD_INT 11
32765: PUSH
32766: LD_INT 12
32768: PUSH
32769: LD_INT 13
32771: PUSH
32772: LD_INT 14
32774: PUSH
32775: LD_INT 15
32777: PUSH
32778: LD_INT 16
32780: PUSH
32781: LD_INT 17
32783: PUSH
32784: LD_INT 18
32786: PUSH
32787: LD_INT 19
32789: PUSH
32790: LD_INT 20
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 22
32798: PUSH
32799: LD_INT 23
32801: PUSH
32802: LD_INT 24
32804: PUSH
32805: LD_INT 25
32807: PUSH
32808: LD_INT 26
32810: PUSH
32811: LD_INT 27
32813: PUSH
32814: LD_INT 28
32816: PUSH
32817: LD_INT 29
32819: PUSH
32820: LD_INT 30
32822: PUSH
32823: LD_INT 31
32825: PUSH
32826: LD_INT 32
32828: PUSH
32829: LD_INT 33
32831: PUSH
32832: LD_INT 34
32834: PUSH
32835: LD_INT 35
32837: PUSH
32838: LD_INT 36
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 101
32881: PUSH
32882: LD_INT 102
32884: PUSH
32885: LD_INT 103
32887: PUSH
32888: LD_INT 104
32890: PUSH
32891: LD_INT 105
32893: PUSH
32894: LD_INT 106
32896: PUSH
32897: LD_INT 107
32899: PUSH
32900: LD_INT 108
32902: PUSH
32903: LD_INT 109
32905: PUSH
32906: LD_INT 110
32908: PUSH
32909: LD_INT 111
32911: PUSH
32912: LD_INT 112
32914: PUSH
32915: LD_INT 113
32917: PUSH
32918: LD_INT 114
32920: PUSH
32921: LD_INT 115
32923: PUSH
32924: LD_INT 116
32926: PUSH
32927: LD_INT 117
32929: PUSH
32930: LD_INT 118
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: ST_TO_ADDR
32957: GO 32960
32959: POP
// end else
32960: GO 33191
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32962: LD_ADDR_VAR 0 2
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 4
32978: PUSH
32979: LD_INT 5
32981: PUSH
32982: LD_INT 6
32984: PUSH
32985: LD_INT 7
32987: PUSH
32988: LD_INT 8
32990: PUSH
32991: LD_INT 9
32993: PUSH
32994: LD_INT 10
32996: PUSH
32997: LD_INT 11
32999: PUSH
33000: LD_INT 12
33002: PUSH
33003: LD_INT 13
33005: PUSH
33006: LD_INT 14
33008: PUSH
33009: LD_INT 15
33011: PUSH
33012: LD_INT 16
33014: PUSH
33015: LD_INT 17
33017: PUSH
33018: LD_INT 18
33020: PUSH
33021: LD_INT 19
33023: PUSH
33024: LD_INT 20
33026: PUSH
33027: LD_INT 21
33029: PUSH
33030: LD_INT 22
33032: PUSH
33033: LD_INT 23
33035: PUSH
33036: LD_INT 24
33038: PUSH
33039: LD_INT 25
33041: PUSH
33042: LD_INT 26
33044: PUSH
33045: LD_INT 27
33047: PUSH
33048: LD_INT 28
33050: PUSH
33051: LD_INT 29
33053: PUSH
33054: LD_INT 30
33056: PUSH
33057: LD_INT 31
33059: PUSH
33060: LD_INT 32
33062: PUSH
33063: LD_INT 33
33065: PUSH
33066: LD_INT 34
33068: PUSH
33069: LD_INT 35
33071: PUSH
33072: LD_INT 36
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 101
33115: PUSH
33116: LD_INT 102
33118: PUSH
33119: LD_INT 103
33121: PUSH
33122: LD_INT 104
33124: PUSH
33125: LD_INT 105
33127: PUSH
33128: LD_INT 106
33130: PUSH
33131: LD_INT 107
33133: PUSH
33134: LD_INT 108
33136: PUSH
33137: LD_INT 109
33139: PUSH
33140: LD_INT 110
33142: PUSH
33143: LD_INT 111
33145: PUSH
33146: LD_INT 112
33148: PUSH
33149: LD_INT 113
33151: PUSH
33152: LD_INT 114
33154: PUSH
33155: LD_INT 115
33157: PUSH
33158: LD_INT 116
33160: PUSH
33161: LD_INT 117
33163: PUSH
33164: LD_INT 118
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: ST_TO_ADDR
// if result then
33191: LD_VAR 0 2
33195: IFFALSE 33981
// begin normal :=  ;
33197: LD_ADDR_VAR 0 5
33201: PUSH
33202: LD_STRING 
33204: ST_TO_ADDR
// hardcore :=  ;
33205: LD_ADDR_VAR 0 6
33209: PUSH
33210: LD_STRING 
33212: ST_TO_ADDR
// active :=  ;
33213: LD_ADDR_VAR 0 7
33217: PUSH
33218: LD_STRING 
33220: ST_TO_ADDR
// for i = 1 to normalCounter do
33221: LD_ADDR_VAR 0 8
33225: PUSH
33226: DOUBLE
33227: LD_INT 1
33229: DEC
33230: ST_TO_ADDR
33231: LD_EXP 65
33235: PUSH
33236: FOR_TO
33237: IFFALSE 33338
// begin tmp := 0 ;
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: LD_STRING 0
33246: ST_TO_ADDR
// if result [ 1 ] then
33247: LD_VAR 0 2
33251: PUSH
33252: LD_INT 1
33254: ARRAY
33255: IFFALSE 33320
// if result [ 1 ] [ 1 ] = i then
33257: LD_VAR 0 2
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: PUSH
33266: LD_INT 1
33268: ARRAY
33269: PUSH
33270: LD_VAR 0 8
33274: EQUAL
33275: IFFALSE 33320
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_VAR 0 2
33286: PPUSH
33287: LD_INT 1
33289: PPUSH
33290: LD_VAR 0 2
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: PPUSH
33299: LD_INT 1
33301: PPUSH
33302: CALL_OW 3
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// tmp := 1 ;
33312: LD_ADDR_VAR 0 3
33316: PUSH
33317: LD_STRING 1
33319: ST_TO_ADDR
// end ; normal := normal & tmp ;
33320: LD_ADDR_VAR 0 5
33324: PUSH
33325: LD_VAR 0 5
33329: PUSH
33330: LD_VAR 0 3
33334: STR
33335: ST_TO_ADDR
// end ;
33336: GO 33236
33338: POP
33339: POP
// for i = 1 to hardcoreCounter do
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: DOUBLE
33346: LD_INT 1
33348: DEC
33349: ST_TO_ADDR
33350: LD_EXP 66
33354: PUSH
33355: FOR_TO
33356: IFFALSE 33461
// begin tmp := 0 ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_STRING 0
33365: ST_TO_ADDR
// if result [ 2 ] then
33366: LD_VAR 0 2
33370: PUSH
33371: LD_INT 2
33373: ARRAY
33374: IFFALSE 33443
// if result [ 2 ] [ 1 ] = 100 + i then
33376: LD_VAR 0 2
33380: PUSH
33381: LD_INT 2
33383: ARRAY
33384: PUSH
33385: LD_INT 1
33387: ARRAY
33388: PUSH
33389: LD_INT 100
33391: PUSH
33392: LD_VAR 0 8
33396: PLUS
33397: EQUAL
33398: IFFALSE 33443
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_VAR 0 2
33409: PPUSH
33410: LD_INT 2
33412: PPUSH
33413: LD_VAR 0 2
33417: PUSH
33418: LD_INT 2
33420: ARRAY
33421: PPUSH
33422: LD_INT 1
33424: PPUSH
33425: CALL_OW 3
33429: PPUSH
33430: CALL_OW 1
33434: ST_TO_ADDR
// tmp := 1 ;
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_STRING 1
33442: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33443: LD_ADDR_VAR 0 6
33447: PUSH
33448: LD_VAR 0 6
33452: PUSH
33453: LD_VAR 0 3
33457: STR
33458: ST_TO_ADDR
// end ;
33459: GO 33355
33461: POP
33462: POP
// if isGameLoad then
33463: LD_VAR 0 1
33467: IFFALSE 33942
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
33469: LD_ADDR_VAR 0 4
33473: PUSH
33474: LD_EXP 69
33478: PUSH
33479: LD_EXP 68
33483: PUSH
33484: LD_EXP 70
33488: PUSH
33489: LD_EXP 67
33493: PUSH
33494: LD_EXP 71
33498: PUSH
33499: LD_EXP 72
33503: PUSH
33504: LD_EXP 73
33508: PUSH
33509: LD_EXP 74
33513: PUSH
33514: LD_EXP 75
33518: PUSH
33519: LD_EXP 76
33523: PUSH
33524: LD_EXP 77
33528: PUSH
33529: LD_EXP 78
33533: PUSH
33534: LD_EXP 79
33538: PUSH
33539: LD_EXP 80
33543: PUSH
33544: LD_EXP 88
33548: PUSH
33549: LD_EXP 89
33553: PUSH
33554: LD_EXP 90
33558: PUSH
33559: LD_EXP 91
33563: PUSH
33564: LD_EXP 93
33568: PUSH
33569: LD_EXP 94
33573: PUSH
33574: LD_EXP 95
33578: PUSH
33579: LD_EXP 98
33583: PUSH
33584: LD_EXP 100
33588: PUSH
33589: LD_EXP 101
33593: PUSH
33594: LD_EXP 102
33598: PUSH
33599: LD_EXP 104
33603: PUSH
33604: LD_EXP 105
33608: PUSH
33609: LD_EXP 108
33613: PUSH
33614: LD_EXP 109
33618: PUSH
33619: LD_EXP 110
33623: PUSH
33624: LD_EXP 111
33628: PUSH
33629: LD_EXP 112
33633: PUSH
33634: LD_EXP 113
33638: PUSH
33639: LD_EXP 114
33643: PUSH
33644: LD_EXP 115
33648: PUSH
33649: LD_EXP 116
33653: PUSH
33654: LD_EXP 81
33658: PUSH
33659: LD_EXP 82
33663: PUSH
33664: LD_EXP 85
33668: PUSH
33669: LD_EXP 86
33673: PUSH
33674: LD_EXP 87
33678: PUSH
33679: LD_EXP 83
33683: PUSH
33684: LD_EXP 84
33688: PUSH
33689: LD_EXP 92
33693: PUSH
33694: LD_EXP 96
33698: PUSH
33699: LD_EXP 97
33703: PUSH
33704: LD_EXP 99
33708: PUSH
33709: LD_EXP 103
33713: PUSH
33714: LD_EXP 106
33718: PUSH
33719: LD_EXP 107
33723: PUSH
33724: LD_EXP 117
33728: PUSH
33729: LD_EXP 118
33733: PUSH
33734: LD_EXP 119
33738: PUSH
33739: LD_EXP 120
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
// tmp :=  ;
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_STRING 
33807: ST_TO_ADDR
// for i = 1 to normalCounter do
33808: LD_ADDR_VAR 0 8
33812: PUSH
33813: DOUBLE
33814: LD_INT 1
33816: DEC
33817: ST_TO_ADDR
33818: LD_EXP 65
33822: PUSH
33823: FOR_TO
33824: IFFALSE 33860
// begin if flags [ i ] then
33826: LD_VAR 0 4
33830: PUSH
33831: LD_VAR 0 8
33835: ARRAY
33836: IFFALSE 33858
// tmp := tmp & i & ; ;
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_VAR 0 3
33847: PUSH
33848: LD_VAR 0 8
33852: STR
33853: PUSH
33854: LD_STRING ;
33856: STR
33857: ST_TO_ADDR
// end ;
33858: GO 33823
33860: POP
33861: POP
// for i = 1 to hardcoreCounter do
33862: LD_ADDR_VAR 0 8
33866: PUSH
33867: DOUBLE
33868: LD_INT 1
33870: DEC
33871: ST_TO_ADDR
33872: LD_EXP 66
33876: PUSH
33877: FOR_TO
33878: IFFALSE 33924
// begin if flags [ normalCounter + i ] then
33880: LD_VAR 0 4
33884: PUSH
33885: LD_EXP 65
33889: PUSH
33890: LD_VAR 0 8
33894: PLUS
33895: ARRAY
33896: IFFALSE 33922
// tmp := tmp & ( 100 + i ) & ; ;
33898: LD_ADDR_VAR 0 3
33902: PUSH
33903: LD_VAR 0 3
33907: PUSH
33908: LD_INT 100
33910: PUSH
33911: LD_VAR 0 8
33915: PLUS
33916: STR
33917: PUSH
33918: LD_STRING ;
33920: STR
33921: ST_TO_ADDR
// end ;
33922: GO 33877
33924: POP
33925: POP
// if tmp then
33926: LD_VAR 0 3
33930: IFFALSE 33942
// active := tmp ;
33932: LD_ADDR_VAR 0 7
33936: PUSH
33937: LD_VAR 0 3
33941: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33942: LD_STRING getStreamItemsFromMission("
33944: PUSH
33945: LD_VAR 0 5
33949: STR
33950: PUSH
33951: LD_STRING ","
33953: STR
33954: PUSH
33955: LD_VAR 0 6
33959: STR
33960: PUSH
33961: LD_STRING ","
33963: STR
33964: PUSH
33965: LD_VAR 0 7
33969: STR
33970: PUSH
33971: LD_STRING ")
33973: STR
33974: PPUSH
33975: CALL_OW 559
// end else
33979: GO 33988
// ToLua ( getStreamItemsFromMission("","","") ) ;
33981: LD_STRING getStreamItemsFromMission("","","")
33983: PPUSH
33984: CALL_OW 559
// end ;
33988: LD_VAR 0 2
33992: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33993: LD_EXP 64
33997: PUSH
33998: LD_EXP 69
34002: AND
34003: IFFALSE 34127
34005: GO 34007
34007: DISABLE
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
// begin enable ;
34012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34013: LD_ADDR_VAR 0 2
34017: PUSH
34018: LD_INT 22
34020: PUSH
34021: LD_OWVAR 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 34
34035: PUSH
34036: LD_INT 7
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 34
34045: PUSH
34046: LD_INT 45
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 34
34055: PUSH
34056: LD_INT 28
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 34
34065: PUSH
34066: LD_INT 47
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PPUSH
34084: CALL_OW 69
34088: ST_TO_ADDR
// if not tmp then
34089: LD_VAR 0 2
34093: NOT
34094: IFFALSE 34098
// exit ;
34096: GO 34127
// for i in tmp do
34098: LD_ADDR_VAR 0 1
34102: PUSH
34103: LD_VAR 0 2
34107: PUSH
34108: FOR_IN
34109: IFFALSE 34125
// begin SetLives ( i , 0 ) ;
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_INT 0
34118: PPUSH
34119: CALL_OW 234
// end ;
34123: GO 34108
34125: POP
34126: POP
// end ;
34127: PPOPN 2
34129: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34130: LD_EXP 64
34134: PUSH
34135: LD_EXP 70
34139: AND
34140: IFFALSE 34224
34142: GO 34144
34144: DISABLE
34145: LD_INT 0
34147: PPUSH
34148: PPUSH
// begin enable ;
34149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34150: LD_ADDR_VAR 0 2
34154: PUSH
34155: LD_INT 22
34157: PUSH
34158: LD_OWVAR 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 32
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: CALL_OW 69
34185: ST_TO_ADDR
// if not tmp then
34186: LD_VAR 0 2
34190: NOT
34191: IFFALSE 34195
// exit ;
34193: GO 34224
// for i in tmp do
34195: LD_ADDR_VAR 0 1
34199: PUSH
34200: LD_VAR 0 2
34204: PUSH
34205: FOR_IN
34206: IFFALSE 34222
// begin SetLives ( i , 0 ) ;
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_INT 0
34215: PPUSH
34216: CALL_OW 234
// end ;
34220: GO 34205
34222: POP
34223: POP
// end ;
34224: PPOPN 2
34226: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34227: LD_EXP 64
34231: PUSH
34232: LD_EXP 67
34236: AND
34237: IFFALSE 34330
34239: GO 34241
34241: DISABLE
34242: LD_INT 0
34244: PPUSH
// begin enable ;
34245: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34246: LD_ADDR_VAR 0 1
34250: PUSH
34251: LD_INT 22
34253: PUSH
34254: LD_OWVAR 2
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 25
34268: PUSH
34269: LD_INT 5
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 25
34278: PUSH
34279: LD_INT 9
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 25
34288: PUSH
34289: LD_INT 8
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PPUSH
34306: CALL_OW 69
34310: PUSH
34311: FOR_IN
34312: IFFALSE 34328
// begin SetClass ( i , 1 ) ;
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_INT 1
34321: PPUSH
34322: CALL_OW 336
// end ;
34326: GO 34311
34328: POP
34329: POP
// end ;
34330: PPOPN 1
34332: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34333: LD_EXP 64
34337: PUSH
34338: LD_EXP 68
34342: AND
34343: PUSH
34344: LD_OWVAR 65
34348: PUSH
34349: LD_INT 7
34351: LESS
34352: AND
34353: IFFALSE 34367
34355: GO 34357
34357: DISABLE
// begin enable ;
34358: ENABLE
// game_speed := 7 ;
34359: LD_ADDR_OWVAR 65
34363: PUSH
34364: LD_INT 7
34366: ST_TO_ADDR
// end ;
34367: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34368: LD_EXP 64
34372: PUSH
34373: LD_EXP 71
34377: AND
34378: IFFALSE 34580
34380: GO 34382
34382: DISABLE
34383: LD_INT 0
34385: PPUSH
34386: PPUSH
34387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_INT 81
34395: PUSH
34396: LD_OWVAR 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 21
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PPUSH
34419: CALL_OW 69
34423: ST_TO_ADDR
// if not tmp then
34424: LD_VAR 0 3
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34580
// if tmp > 5 then
34433: LD_VAR 0 3
34437: PUSH
34438: LD_INT 5
34440: GREATER
34441: IFFALSE 34453
// k := 5 else
34443: LD_ADDR_VAR 0 2
34447: PUSH
34448: LD_INT 5
34450: ST_TO_ADDR
34451: GO 34463
// k := tmp ;
34453: LD_ADDR_VAR 0 2
34457: PUSH
34458: LD_VAR 0 3
34462: ST_TO_ADDR
// for i := 1 to k do
34463: LD_ADDR_VAR 0 1
34467: PUSH
34468: DOUBLE
34469: LD_INT 1
34471: DEC
34472: ST_TO_ADDR
34473: LD_VAR 0 2
34477: PUSH
34478: FOR_TO
34479: IFFALSE 34578
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
34481: LD_VAR 0 3
34485: PUSH
34486: LD_VAR 0 1
34490: ARRAY
34491: PPUSH
34492: LD_VAR 0 1
34496: PUSH
34497: LD_INT 4
34499: MOD
34500: PUSH
34501: LD_INT 1
34503: PLUS
34504: PPUSH
34505: CALL_OW 259
34509: PUSH
34510: LD_INT 10
34512: LESS
34513: IFFALSE 34576
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
34515: LD_VAR 0 3
34519: PUSH
34520: LD_VAR 0 1
34524: ARRAY
34525: PPUSH
34526: LD_VAR 0 1
34530: PUSH
34531: LD_INT 4
34533: MOD
34534: PUSH
34535: LD_INT 1
34537: PLUS
34538: PPUSH
34539: LD_VAR 0 3
34543: PUSH
34544: LD_VAR 0 1
34548: ARRAY
34549: PPUSH
34550: LD_VAR 0 1
34554: PUSH
34555: LD_INT 4
34557: MOD
34558: PUSH
34559: LD_INT 1
34561: PLUS
34562: PPUSH
34563: CALL_OW 259
34567: PUSH
34568: LD_INT 1
34570: PLUS
34571: PPUSH
34572: CALL_OW 237
34576: GO 34478
34578: POP
34579: POP
// end ;
34580: PPOPN 3
34582: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
34583: LD_EXP 64
34587: PUSH
34588: LD_EXP 72
34592: AND
34593: IFFALSE 34613
34595: GO 34597
34597: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
34598: LD_INT 4
34600: PPUSH
34601: LD_OWVAR 2
34605: PPUSH
34606: LD_INT 0
34608: PPUSH
34609: CALL_OW 324
34613: END
// every 0 0$1 trigger StreamModeActive and sShovel do
34614: LD_EXP 64
34618: PUSH
34619: LD_EXP 101
34623: AND
34624: IFFALSE 34644
34626: GO 34628
34628: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
34629: LD_INT 19
34631: PPUSH
34632: LD_OWVAR 2
34636: PPUSH
34637: LD_INT 0
34639: PPUSH
34640: CALL_OW 324
34644: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
34645: LD_EXP 64
34649: PUSH
34650: LD_EXP 73
34654: AND
34655: IFFALSE 34757
34657: GO 34659
34659: DISABLE
34660: LD_INT 0
34662: PPUSH
34663: PPUSH
// begin enable ;
34664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
34665: LD_ADDR_VAR 0 2
34669: PUSH
34670: LD_INT 22
34672: PUSH
34673: LD_OWVAR 2
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 34
34687: PUSH
34688: LD_INT 11
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 34
34697: PUSH
34698: LD_INT 30
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PPUSH
34714: CALL_OW 69
34718: ST_TO_ADDR
// if not tmp then
34719: LD_VAR 0 2
34723: NOT
34724: IFFALSE 34728
// exit ;
34726: GO 34757
// for i in tmp do
34728: LD_ADDR_VAR 0 1
34732: PUSH
34733: LD_VAR 0 2
34737: PUSH
34738: FOR_IN
34739: IFFALSE 34755
// begin SetLives ( i , 0 ) ;
34741: LD_VAR 0 1
34745: PPUSH
34746: LD_INT 0
34748: PPUSH
34749: CALL_OW 234
// end ;
34753: GO 34738
34755: POP
34756: POP
// end ;
34757: PPOPN 2
34759: END
// every 0 0$1 trigger StreamModeActive and sBunker do
34760: LD_EXP 64
34764: PUSH
34765: LD_EXP 74
34769: AND
34770: IFFALSE 34790
34772: GO 34774
34774: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
34775: LD_INT 32
34777: PPUSH
34778: LD_OWVAR 2
34782: PPUSH
34783: LD_INT 0
34785: PPUSH
34786: CALL_OW 324
34790: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34791: LD_EXP 64
34795: PUSH
34796: LD_EXP 75
34800: AND
34801: IFFALSE 34982
34803: GO 34805
34805: DISABLE
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34811: LD_ADDR_VAR 0 2
34815: PUSH
34816: LD_INT 22
34818: PUSH
34819: LD_OWVAR 2
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 33
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PPUSH
34842: CALL_OW 69
34846: ST_TO_ADDR
// if not tmp then
34847: LD_VAR 0 2
34851: NOT
34852: IFFALSE 34856
// exit ;
34854: GO 34982
// side := 0 ;
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 0
34863: ST_TO_ADDR
// for i := 1 to 8 do
34864: LD_ADDR_VAR 0 1
34868: PUSH
34869: DOUBLE
34870: LD_INT 1
34872: DEC
34873: ST_TO_ADDR
34874: LD_INT 8
34876: PUSH
34877: FOR_TO
34878: IFFALSE 34926
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34880: LD_OWVAR 2
34884: PUSH
34885: LD_VAR 0 1
34889: NONEQUAL
34890: PUSH
34891: LD_OWVAR 2
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 81
34905: PUSH
34906: LD_INT 2
34908: EQUAL
34909: AND
34910: IFFALSE 34924
// begin side := i ;
34912: LD_ADDR_VAR 0 3
34916: PUSH
34917: LD_VAR 0 1
34921: ST_TO_ADDR
// break ;
34922: GO 34926
// end ;
34924: GO 34877
34926: POP
34927: POP
// if not side then
34928: LD_VAR 0 3
34932: NOT
34933: IFFALSE 34937
// exit ;
34935: GO 34982
// for i := 1 to tmp do
34937: LD_ADDR_VAR 0 1
34941: PUSH
34942: DOUBLE
34943: LD_INT 1
34945: DEC
34946: ST_TO_ADDR
34947: LD_VAR 0 2
34951: PUSH
34952: FOR_TO
34953: IFFALSE 34980
// if Prob ( 60 ) then
34955: LD_INT 60
34957: PPUSH
34958: CALL_OW 13
34962: IFFALSE 34978
// SetSide ( i , side ) ;
34964: LD_VAR 0 1
34968: PPUSH
34969: LD_VAR 0 3
34973: PPUSH
34974: CALL_OW 235
34978: GO 34952
34980: POP
34981: POP
// end ;
34982: PPOPN 3
34984: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34985: LD_EXP 64
34989: PUSH
34990: LD_EXP 77
34994: AND
34995: IFFALSE 35114
34997: GO 34999
34999: DISABLE
35000: LD_INT 0
35002: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35003: LD_ADDR_VAR 0 1
35007: PUSH
35008: LD_INT 22
35010: PUSH
35011: LD_OWVAR 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 21
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 23
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: PPUSH
35052: CALL_OW 69
35056: PUSH
35057: FOR_IN
35058: IFFALSE 35112
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 257
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: LD_INT 4
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: IN
35088: IFFALSE 35110
// SetClass ( un , rand ( 1 , 4 ) ) ;
35090: LD_VAR 0 1
35094: PPUSH
35095: LD_INT 1
35097: PPUSH
35098: LD_INT 4
35100: PPUSH
35101: CALL_OW 12
35105: PPUSH
35106: CALL_OW 336
35110: GO 35057
35112: POP
35113: POP
// end ;
35114: PPOPN 1
35116: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35117: LD_EXP 64
35121: PUSH
35122: LD_EXP 76
35126: AND
35127: IFFALSE 35206
35129: GO 35131
35131: DISABLE
35132: LD_INT 0
35134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35135: LD_ADDR_VAR 0 1
35139: PUSH
35140: LD_INT 22
35142: PUSH
35143: LD_OWVAR 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 21
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: ST_TO_ADDR
// if not tmp then
35171: LD_VAR 0 1
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 35206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35180: LD_VAR 0 1
35184: PUSH
35185: LD_INT 1
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 12
35197: ARRAY
35198: PPUSH
35199: LD_INT 100
35201: PPUSH
35202: CALL_OW 234
// end ;
35206: PPOPN 1
35208: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35209: LD_EXP 64
35213: PUSH
35214: LD_EXP 78
35218: AND
35219: IFFALSE 35317
35221: GO 35223
35223: DISABLE
35224: LD_INT 0
35226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35227: LD_ADDR_VAR 0 1
35231: PUSH
35232: LD_INT 22
35234: PUSH
35235: LD_OWVAR 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 21
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PPUSH
35258: CALL_OW 69
35262: ST_TO_ADDR
// if not tmp then
35263: LD_VAR 0 1
35267: NOT
35268: IFFALSE 35272
// exit ;
35270: GO 35317
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35272: LD_VAR 0 1
35276: PUSH
35277: LD_INT 1
35279: PPUSH
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 12
35289: ARRAY
35290: PPUSH
35291: LD_INT 1
35293: PPUSH
35294: LD_INT 4
35296: PPUSH
35297: CALL_OW 12
35301: PPUSH
35302: LD_INT 3000
35304: PPUSH
35305: LD_INT 9000
35307: PPUSH
35308: CALL_OW 12
35312: PPUSH
35313: CALL_OW 492
// end ;
35317: PPOPN 1
35319: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35320: LD_EXP 64
35324: PUSH
35325: LD_EXP 79
35329: AND
35330: IFFALSE 35350
35332: GO 35334
35334: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35335: LD_INT 1
35337: PPUSH
35338: LD_OWVAR 2
35342: PPUSH
35343: LD_INT 0
35345: PPUSH
35346: CALL_OW 324
35350: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35351: LD_EXP 64
35355: PUSH
35356: LD_EXP 80
35360: AND
35361: IFFALSE 35444
35363: GO 35365
35365: DISABLE
35366: LD_INT 0
35368: PPUSH
35369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35370: LD_ADDR_VAR 0 2
35374: PUSH
35375: LD_INT 22
35377: PUSH
35378: LD_OWVAR 2
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 21
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PPUSH
35401: CALL_OW 69
35405: ST_TO_ADDR
// if not tmp then
35406: LD_VAR 0 2
35410: NOT
35411: IFFALSE 35415
// exit ;
35413: GO 35444
// for i in tmp do
35415: LD_ADDR_VAR 0 1
35419: PUSH
35420: LD_VAR 0 2
35424: PUSH
35425: FOR_IN
35426: IFFALSE 35442
// SetBLevel ( i , 10 ) ;
35428: LD_VAR 0 1
35432: PPUSH
35433: LD_INT 10
35435: PPUSH
35436: CALL_OW 241
35440: GO 35425
35442: POP
35443: POP
// end ;
35444: PPOPN 2
35446: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
35447: LD_EXP 64
35451: PUSH
35452: LD_EXP 81
35456: AND
35457: IFFALSE 35568
35459: GO 35461
35461: DISABLE
35462: LD_INT 0
35464: PPUSH
35465: PPUSH
35466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 22
35474: PUSH
35475: LD_OWVAR 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 25
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PPUSH
35498: CALL_OW 69
35502: ST_TO_ADDR
// if not tmp then
35503: LD_VAR 0 3
35507: NOT
35508: IFFALSE 35512
// exit ;
35510: GO 35568
// un := tmp [ rand ( 1 , tmp ) ] ;
35512: LD_ADDR_VAR 0 2
35516: PUSH
35517: LD_VAR 0 3
35521: PUSH
35522: LD_INT 1
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: CALL_OW 12
35534: ARRAY
35535: ST_TO_ADDR
// if Crawls ( un ) then
35536: LD_VAR 0 2
35540: PPUSH
35541: CALL_OW 318
35545: IFFALSE 35556
// ComWalk ( un ) ;
35547: LD_VAR 0 2
35551: PPUSH
35552: CALL_OW 138
// SetClass ( un , class_sniper ) ;
35556: LD_VAR 0 2
35560: PPUSH
35561: LD_INT 5
35563: PPUSH
35564: CALL_OW 336
// end ;
35568: PPOPN 3
35570: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
35571: LD_EXP 64
35575: PUSH
35576: LD_EXP 82
35580: AND
35581: PUSH
35582: LD_OWVAR 67
35586: PUSH
35587: LD_INT 4
35589: LESS
35590: AND
35591: IFFALSE 35610
35593: GO 35595
35595: DISABLE
// begin Difficulty := Difficulty + 1 ;
35596: LD_ADDR_OWVAR 67
35600: PUSH
35601: LD_OWVAR 67
35605: PUSH
35606: LD_INT 1
35608: PLUS
35609: ST_TO_ADDR
// end ;
35610: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
35611: LD_EXP 64
35615: PUSH
35616: LD_EXP 83
35620: AND
35621: IFFALSE 35724
35623: GO 35625
35625: DISABLE
35626: LD_INT 0
35628: PPUSH
// begin for i := 1 to 5 do
35629: LD_ADDR_VAR 0 1
35633: PUSH
35634: DOUBLE
35635: LD_INT 1
35637: DEC
35638: ST_TO_ADDR
35639: LD_INT 5
35641: PUSH
35642: FOR_TO
35643: IFFALSE 35722
// begin uc_nation := nation_nature ;
35645: LD_ADDR_OWVAR 21
35649: PUSH
35650: LD_INT 0
35652: ST_TO_ADDR
// uc_side := 0 ;
35653: LD_ADDR_OWVAR 20
35657: PUSH
35658: LD_INT 0
35660: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35661: LD_ADDR_OWVAR 29
35665: PUSH
35666: LD_INT 12
35668: PUSH
35669: LD_INT 12
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// hc_agressivity := 20 ;
35676: LD_ADDR_OWVAR 35
35680: PUSH
35681: LD_INT 20
35683: ST_TO_ADDR
// hc_class := class_tiger ;
35684: LD_ADDR_OWVAR 28
35688: PUSH
35689: LD_INT 14
35691: ST_TO_ADDR
// hc_gallery :=  ;
35692: LD_ADDR_OWVAR 33
35696: PUSH
35697: LD_STRING 
35699: ST_TO_ADDR
// hc_name :=  ;
35700: LD_ADDR_OWVAR 26
35704: PUSH
35705: LD_STRING 
35707: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
35708: CALL_OW 44
35712: PPUSH
35713: LD_INT 0
35715: PPUSH
35716: CALL_OW 51
// end ;
35720: GO 35642
35722: POP
35723: POP
// end ;
35724: PPOPN 1
35726: END
// every 0 0$1 trigger StreamModeActive and sBomb do
35727: LD_EXP 64
35731: PUSH
35732: LD_EXP 84
35736: AND
35737: IFFALSE 35746
35739: GO 35741
35741: DISABLE
// StreamSibBomb ;
35742: CALL 35747 0 0
35746: END
// export function StreamSibBomb ; var i , x , y ; begin
35747: LD_INT 0
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
// result := false ;
35753: LD_ADDR_VAR 0 1
35757: PUSH
35758: LD_INT 0
35760: ST_TO_ADDR
// for i := 1 to 16 do
35761: LD_ADDR_VAR 0 2
35765: PUSH
35766: DOUBLE
35767: LD_INT 1
35769: DEC
35770: ST_TO_ADDR
35771: LD_INT 16
35773: PUSH
35774: FOR_TO
35775: IFFALSE 35974
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_INT 10
35784: PUSH
35785: LD_INT 20
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 40
35793: PUSH
35794: LD_INT 50
35796: PUSH
35797: LD_INT 60
35799: PUSH
35800: LD_INT 70
35802: PUSH
35803: LD_INT 80
35805: PUSH
35806: LD_INT 90
35808: PUSH
35809: LD_INT 100
35811: PUSH
35812: LD_INT 110
35814: PUSH
35815: LD_INT 120
35817: PUSH
35818: LD_INT 130
35820: PUSH
35821: LD_INT 140
35823: PUSH
35824: LD_INT 150
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PPUSH
35847: LD_INT 15
35849: PPUSH
35850: CALL_OW 12
35854: ARRAY
35855: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35856: LD_ADDR_VAR 0 4
35860: PUSH
35861: LD_INT 10
35863: PUSH
35864: LD_INT 20
35866: PUSH
35867: LD_INT 30
35869: PUSH
35870: LD_INT 40
35872: PUSH
35873: LD_INT 50
35875: PUSH
35876: LD_INT 60
35878: PUSH
35879: LD_INT 70
35881: PUSH
35882: LD_INT 80
35884: PUSH
35885: LD_INT 90
35887: PUSH
35888: LD_INT 100
35890: PUSH
35891: LD_INT 110
35893: PUSH
35894: LD_INT 120
35896: PUSH
35897: LD_INT 130
35899: PUSH
35900: LD_INT 140
35902: PUSH
35903: LD_INT 150
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PPUSH
35926: LD_INT 15
35928: PPUSH
35929: CALL_OW 12
35933: ARRAY
35934: ST_TO_ADDR
// if ValidHex ( x , y ) then
35935: LD_VAR 0 3
35939: PPUSH
35940: LD_VAR 0 4
35944: PPUSH
35945: CALL_OW 488
35949: IFFALSE 35972
// begin result := [ x , y ] ;
35951: LD_ADDR_VAR 0 1
35955: PUSH
35956: LD_VAR 0 3
35960: PUSH
35961: LD_VAR 0 4
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// break ;
35970: GO 35974
// end ; end ;
35972: GO 35774
35974: POP
35975: POP
// if result then
35976: LD_VAR 0 1
35980: IFFALSE 36040
// begin ToLua ( playSibBomb() ) ;
35982: LD_STRING playSibBomb()
35984: PPUSH
35985: CALL_OW 559
// wait ( 0 0$14 ) ;
35989: LD_INT 490
35991: PPUSH
35992: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35996: LD_VAR 0 1
36000: PUSH
36001: LD_INT 1
36003: ARRAY
36004: PPUSH
36005: LD_VAR 0 1
36009: PUSH
36010: LD_INT 2
36012: ARRAY
36013: PPUSH
36014: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36018: LD_VAR 0 1
36022: PUSH
36023: LD_INT 1
36025: ARRAY
36026: PPUSH
36027: LD_VAR 0 1
36031: PUSH
36032: LD_INT 2
36034: ARRAY
36035: PPUSH
36036: CALL_OW 429
// end ; end ;
36040: LD_VAR 0 1
36044: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36045: LD_EXP 64
36049: PUSH
36050: LD_EXP 86
36054: AND
36055: IFFALSE 36067
36057: GO 36059
36059: DISABLE
// YouLost (  ) ;
36060: LD_STRING 
36062: PPUSH
36063: CALL_OW 104
36067: END
// every 0 0$1 trigger StreamModeActive and sFog do
36068: LD_EXP 64
36072: PUSH
36073: LD_EXP 85
36077: AND
36078: IFFALSE 36092
36080: GO 36082
36082: DISABLE
// FogOff ( your_side ) ;
36083: LD_OWVAR 2
36087: PPUSH
36088: CALL_OW 344
36092: END
// every 0 0$1 trigger StreamModeActive and sSun do
36093: LD_EXP 64
36097: PUSH
36098: LD_EXP 87
36102: AND
36103: IFFALSE 36131
36105: GO 36107
36107: DISABLE
// begin solar_recharge_percent := 0 ;
36108: LD_ADDR_OWVAR 79
36112: PUSH
36113: LD_INT 0
36115: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36116: LD_INT 10500
36118: PPUSH
36119: CALL_OW 67
// solar_recharge_percent := 100 ;
36123: LD_ADDR_OWVAR 79
36127: PUSH
36128: LD_INT 100
36130: ST_TO_ADDR
// end ;
36131: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36132: LD_EXP 64
36136: PUSH
36137: LD_EXP 88
36141: AND
36142: IFFALSE 36381
36144: GO 36146
36146: DISABLE
36147: LD_INT 0
36149: PPUSH
36150: PPUSH
36151: PPUSH
// begin tmp := [ ] ;
36152: LD_ADDR_VAR 0 3
36156: PUSH
36157: EMPTY
36158: ST_TO_ADDR
// for i := 1 to 6 do
36159: LD_ADDR_VAR 0 1
36163: PUSH
36164: DOUBLE
36165: LD_INT 1
36167: DEC
36168: ST_TO_ADDR
36169: LD_INT 6
36171: PUSH
36172: FOR_TO
36173: IFFALSE 36278
// begin uc_nation := nation_nature ;
36175: LD_ADDR_OWVAR 21
36179: PUSH
36180: LD_INT 0
36182: ST_TO_ADDR
// uc_side := 0 ;
36183: LD_ADDR_OWVAR 20
36187: PUSH
36188: LD_INT 0
36190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36191: LD_ADDR_OWVAR 29
36195: PUSH
36196: LD_INT 12
36198: PUSH
36199: LD_INT 12
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// hc_agressivity := 20 ;
36206: LD_ADDR_OWVAR 35
36210: PUSH
36211: LD_INT 20
36213: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36214: LD_ADDR_OWVAR 28
36218: PUSH
36219: LD_INT 17
36221: ST_TO_ADDR
// hc_gallery :=  ;
36222: LD_ADDR_OWVAR 33
36226: PUSH
36227: LD_STRING 
36229: ST_TO_ADDR
// hc_name :=  ;
36230: LD_ADDR_OWVAR 26
36234: PUSH
36235: LD_STRING 
36237: ST_TO_ADDR
// un := CreateHuman ;
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: CALL_OW 44
36247: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36248: LD_VAR 0 2
36252: PPUSH
36253: LD_INT 1
36255: PPUSH
36256: CALL_OW 51
// tmp := tmp ^ un ;
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_VAR 0 3
36269: PUSH
36270: LD_VAR 0 2
36274: ADD
36275: ST_TO_ADDR
// end ;
36276: GO 36172
36278: POP
36279: POP
// repeat wait ( 0 0$1 ) ;
36280: LD_INT 35
36282: PPUSH
36283: CALL_OW 67
// for un in tmp do
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: LD_VAR 0 3
36296: PUSH
36297: FOR_IN
36298: IFFALSE 36372
// begin if IsDead ( un ) then
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL_OW 301
36309: IFFALSE 36329
// begin tmp := tmp diff un ;
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 3
36320: PUSH
36321: LD_VAR 0 2
36325: DIFF
36326: ST_TO_ADDR
// continue ;
36327: GO 36297
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36329: LD_VAR 0 2
36333: PPUSH
36334: LD_INT 3
36336: PUSH
36337: LD_INT 22
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PPUSH
36351: CALL_OW 69
36355: PPUSH
36356: LD_VAR 0 2
36360: PPUSH
36361: CALL_OW 74
36365: PPUSH
36366: CALL_OW 115
// end ;
36370: GO 36297
36372: POP
36373: POP
// until not tmp ;
36374: LD_VAR 0 3
36378: NOT
36379: IFFALSE 36280
// end ;
36381: PPOPN 3
36383: END
// every 0 0$1 trigger StreamModeActive and sTroll do
36384: LD_EXP 64
36388: PUSH
36389: LD_EXP 89
36393: AND
36394: IFFALSE 36448
36396: GO 36398
36398: DISABLE
// begin ToLua ( displayTroll(); ) ;
36399: LD_STRING displayTroll();
36401: PPUSH
36402: CALL_OW 559
// wait ( 3 3$00 ) ;
36406: LD_INT 6300
36408: PPUSH
36409: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36413: LD_STRING hideTroll();
36415: PPUSH
36416: CALL_OW 559
// wait ( 1 1$00 ) ;
36420: LD_INT 2100
36422: PPUSH
36423: CALL_OW 67
// ToLua ( displayTroll(); ) ;
36427: LD_STRING displayTroll();
36429: PPUSH
36430: CALL_OW 559
// wait ( 1 1$00 ) ;
36434: LD_INT 2100
36436: PPUSH
36437: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36441: LD_STRING hideTroll();
36443: PPUSH
36444: CALL_OW 559
// end ;
36448: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
36449: LD_EXP 64
36453: PUSH
36454: LD_EXP 90
36458: AND
36459: IFFALSE 36522
36461: GO 36463
36463: DISABLE
36464: LD_INT 0
36466: PPUSH
// begin p := 0 ;
36467: LD_ADDR_VAR 0 1
36471: PUSH
36472: LD_INT 0
36474: ST_TO_ADDR
// repeat game_speed := 1 ;
36475: LD_ADDR_OWVAR 65
36479: PUSH
36480: LD_INT 1
36482: ST_TO_ADDR
// wait ( 0 0$1 ) ;
36483: LD_INT 35
36485: PPUSH
36486: CALL_OW 67
// p := p + 1 ;
36490: LD_ADDR_VAR 0 1
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 1
36502: PLUS
36503: ST_TO_ADDR
// until p >= 60 ;
36504: LD_VAR 0 1
36508: PUSH
36509: LD_INT 60
36511: GREATEREQUAL
36512: IFFALSE 36475
// game_speed := 4 ;
36514: LD_ADDR_OWVAR 65
36518: PUSH
36519: LD_INT 4
36521: ST_TO_ADDR
// end ;
36522: PPOPN 1
36524: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
36525: LD_EXP 64
36529: PUSH
36530: LD_EXP 91
36534: AND
36535: IFFALSE 36681
36537: GO 36539
36539: DISABLE
36540: LD_INT 0
36542: PPUSH
36543: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36544: LD_ADDR_VAR 0 1
36548: PUSH
36549: LD_INT 22
36551: PUSH
36552: LD_OWVAR 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 30
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 30
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PPUSH
36593: CALL_OW 69
36597: ST_TO_ADDR
// if not depot then
36598: LD_VAR 0 1
36602: NOT
36603: IFFALSE 36607
// exit ;
36605: GO 36681
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
36607: LD_ADDR_VAR 0 2
36611: PUSH
36612: LD_VAR 0 1
36616: PUSH
36617: LD_INT 1
36619: PPUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: CALL_OW 12
36629: ARRAY
36630: PPUSH
36631: CALL_OW 274
36635: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
36636: LD_VAR 0 2
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: LD_INT 0
36646: PPUSH
36647: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
36651: LD_VAR 0 2
36655: PPUSH
36656: LD_INT 2
36658: PPUSH
36659: LD_INT 0
36661: PPUSH
36662: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_INT 3
36673: PPUSH
36674: LD_INT 0
36676: PPUSH
36677: CALL_OW 277
// end ;
36681: PPOPN 2
36683: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
36684: LD_EXP 64
36688: PUSH
36689: LD_EXP 92
36693: AND
36694: IFFALSE 36791
36696: GO 36698
36698: DISABLE
36699: LD_INT 0
36701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36702: LD_ADDR_VAR 0 1
36706: PUSH
36707: LD_INT 22
36709: PUSH
36710: LD_OWVAR 2
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 21
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 23
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: PPUSH
36751: CALL_OW 69
36755: ST_TO_ADDR
// if not tmp then
36756: LD_VAR 0 1
36760: NOT
36761: IFFALSE 36765
// exit ;
36763: GO 36791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
36765: LD_VAR 0 1
36769: PUSH
36770: LD_INT 1
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 12
36782: ARRAY
36783: PPUSH
36784: LD_INT 200
36786: PPUSH
36787: CALL_OW 234
// end ;
36791: PPOPN 1
36793: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36794: LD_EXP 64
36798: PUSH
36799: LD_EXP 93
36803: AND
36804: IFFALSE 36883
36806: GO 36808
36808: DISABLE
36809: LD_INT 0
36811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36812: LD_ADDR_VAR 0 1
36816: PUSH
36817: LD_INT 22
36819: PUSH
36820: LD_OWVAR 2
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 21
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PPUSH
36843: CALL_OW 69
36847: ST_TO_ADDR
// if not tmp then
36848: LD_VAR 0 1
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 36883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36857: LD_VAR 0 1
36861: PUSH
36862: LD_INT 1
36864: PPUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 12
36874: ARRAY
36875: PPUSH
36876: LD_INT 60
36878: PPUSH
36879: CALL_OW 234
// end ;
36883: PPOPN 1
36885: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36886: LD_EXP 64
36890: PUSH
36891: LD_EXP 94
36895: AND
36896: IFFALSE 36995
36898: GO 36900
36900: DISABLE
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
// begin enable ;
36905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36906: LD_ADDR_VAR 0 1
36910: PUSH
36911: LD_INT 22
36913: PUSH
36914: LD_OWVAR 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 61
36925: PUSH
36926: EMPTY
36927: LIST
36928: PUSH
36929: LD_INT 33
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 69
36948: ST_TO_ADDR
// if not tmp then
36949: LD_VAR 0 1
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 36995
// for i in tmp do
36958: LD_ADDR_VAR 0 2
36962: PUSH
36963: LD_VAR 0 1
36967: PUSH
36968: FOR_IN
36969: IFFALSE 36993
// if IsControledBy ( i ) then
36971: LD_VAR 0 2
36975: PPUSH
36976: CALL_OW 312
36980: IFFALSE 36991
// ComUnlink ( i ) ;
36982: LD_VAR 0 2
36986: PPUSH
36987: CALL_OW 136
36991: GO 36968
36993: POP
36994: POP
// end ;
36995: PPOPN 2
36997: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36998: LD_EXP 64
37002: PUSH
37003: LD_EXP 95
37007: AND
37008: IFFALSE 37148
37010: GO 37012
37012: DISABLE
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
// begin ToLua ( displayPowell(); ) ;
37017: LD_STRING displayPowell();
37019: PPUSH
37020: CALL_OW 559
// uc_side := 0 ;
37024: LD_ADDR_OWVAR 20
37028: PUSH
37029: LD_INT 0
37031: ST_TO_ADDR
// uc_nation := 2 ;
37032: LD_ADDR_OWVAR 21
37036: PUSH
37037: LD_INT 2
37039: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37040: LD_ADDR_OWVAR 37
37044: PUSH
37045: LD_INT 14
37047: ST_TO_ADDR
// vc_engine := engine_siberite ;
37048: LD_ADDR_OWVAR 39
37052: PUSH
37053: LD_INT 3
37055: ST_TO_ADDR
// vc_control := control_apeman ;
37056: LD_ADDR_OWVAR 38
37060: PUSH
37061: LD_INT 5
37063: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37064: LD_ADDR_OWVAR 40
37068: PUSH
37069: LD_INT 29
37071: ST_TO_ADDR
// un := CreateVehicle ;
37072: LD_ADDR_VAR 0 2
37076: PUSH
37077: CALL_OW 45
37081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_INT 1
37089: PPUSH
37090: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37094: LD_INT 35
37096: PPUSH
37097: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37101: LD_VAR 0 2
37105: PPUSH
37106: LD_INT 22
37108: PUSH
37109: LD_OWVAR 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL_OW 69
37122: PPUSH
37123: LD_VAR 0 2
37127: PPUSH
37128: CALL_OW 74
37132: PPUSH
37133: CALL_OW 115
// until IsDead ( un ) ;
37137: LD_VAR 0 2
37141: PPUSH
37142: CALL_OW 301
37146: IFFALSE 37094
// end ;
37148: PPOPN 2
37150: END
// every 0 0$1 trigger StreamModeActive and sStu do
37151: LD_EXP 64
37155: PUSH
37156: LD_EXP 103
37160: AND
37161: IFFALSE 37177
37163: GO 37165
37165: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37166: LD_STRING displayStucuk();
37168: PPUSH
37169: CALL_OW 559
// ResetFog ;
37173: CALL_OW 335
// end ;
37177: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37178: LD_EXP 64
37182: PUSH
37183: LD_EXP 96
37187: AND
37188: IFFALSE 37329
37190: GO 37192
37192: DISABLE
37193: LD_INT 0
37195: PPUSH
37196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37197: LD_ADDR_VAR 0 2
37201: PUSH
37202: LD_INT 22
37204: PUSH
37205: LD_OWVAR 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 21
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PPUSH
37228: CALL_OW 69
37232: ST_TO_ADDR
// if not tmp then
37233: LD_VAR 0 2
37237: NOT
37238: IFFALSE 37242
// exit ;
37240: GO 37329
// un := tmp [ rand ( 1 , tmp ) ] ;
37242: LD_ADDR_VAR 0 1
37246: PUSH
37247: LD_VAR 0 2
37251: PUSH
37252: LD_INT 1
37254: PPUSH
37255: LD_VAR 0 2
37259: PPUSH
37260: CALL_OW 12
37264: ARRAY
37265: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_INT 0
37273: PPUSH
37274: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37278: LD_VAR 0 1
37282: PPUSH
37283: LD_OWVAR 3
37287: PUSH
37288: LD_VAR 0 1
37292: DIFF
37293: PPUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 74
37303: PPUSH
37304: CALL_OW 115
// wait ( 0 0$20 ) ;
37308: LD_INT 700
37310: PPUSH
37311: CALL_OW 67
// SetSide ( un , your_side ) ;
37315: LD_VAR 0 1
37319: PPUSH
37320: LD_OWVAR 2
37324: PPUSH
37325: CALL_OW 235
// end ;
37329: PPOPN 2
37331: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37332: LD_EXP 64
37336: PUSH
37337: LD_EXP 97
37341: AND
37342: IFFALSE 37448
37344: GO 37346
37346: DISABLE
37347: LD_INT 0
37349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37350: LD_ADDR_VAR 0 1
37354: PUSH
37355: LD_INT 22
37357: PUSH
37358: LD_OWVAR 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 30
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 30
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PPUSH
37399: CALL_OW 69
37403: ST_TO_ADDR
// if not depot then
37404: LD_VAR 0 1
37408: NOT
37409: IFFALSE 37413
// exit ;
37411: GO 37448
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
37413: LD_VAR 0 1
37417: PUSH
37418: LD_INT 1
37420: ARRAY
37421: PPUSH
37422: CALL_OW 250
37426: PPUSH
37427: LD_VAR 0 1
37431: PUSH
37432: LD_INT 1
37434: ARRAY
37435: PPUSH
37436: CALL_OW 251
37440: PPUSH
37441: LD_INT 70
37443: PPUSH
37444: CALL_OW 495
// end ;
37448: PPOPN 1
37450: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
37451: LD_EXP 64
37455: PUSH
37456: LD_EXP 98
37460: AND
37461: IFFALSE 37672
37463: GO 37465
37465: DISABLE
37466: LD_INT 0
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37473: LD_ADDR_VAR 0 5
37477: PUSH
37478: LD_INT 22
37480: PUSH
37481: LD_OWVAR 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 21
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PPUSH
37504: CALL_OW 69
37508: ST_TO_ADDR
// if not tmp then
37509: LD_VAR 0 5
37513: NOT
37514: IFFALSE 37518
// exit ;
37516: GO 37672
// for i in tmp do
37518: LD_ADDR_VAR 0 1
37522: PUSH
37523: LD_VAR 0 5
37527: PUSH
37528: FOR_IN
37529: IFFALSE 37670
// begin d := rand ( 0 , 5 ) ;
37531: LD_ADDR_VAR 0 4
37535: PUSH
37536: LD_INT 0
37538: PPUSH
37539: LD_INT 5
37541: PPUSH
37542: CALL_OW 12
37546: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
37547: LD_ADDR_VAR 0 2
37551: PUSH
37552: LD_VAR 0 1
37556: PPUSH
37557: CALL_OW 250
37561: PPUSH
37562: LD_VAR 0 4
37566: PPUSH
37567: LD_INT 3
37569: PPUSH
37570: LD_INT 12
37572: PPUSH
37573: CALL_OW 12
37577: PPUSH
37578: CALL_OW 272
37582: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
37583: LD_ADDR_VAR 0 3
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 251
37597: PPUSH
37598: LD_VAR 0 4
37602: PPUSH
37603: LD_INT 3
37605: PPUSH
37606: LD_INT 12
37608: PPUSH
37609: CALL_OW 12
37613: PPUSH
37614: CALL_OW 273
37618: ST_TO_ADDR
// if ValidHex ( x , y ) then
37619: LD_VAR 0 2
37623: PPUSH
37624: LD_VAR 0 3
37628: PPUSH
37629: CALL_OW 488
37633: IFFALSE 37668
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
37635: LD_VAR 0 1
37639: PPUSH
37640: LD_VAR 0 2
37644: PPUSH
37645: LD_VAR 0 3
37649: PPUSH
37650: LD_INT 3
37652: PPUSH
37653: LD_INT 6
37655: PPUSH
37656: CALL_OW 12
37660: PPUSH
37661: LD_INT 1
37663: PPUSH
37664: CALL_OW 483
// end ;
37668: GO 37528
37670: POP
37671: POP
// end ;
37672: PPOPN 5
37674: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
37675: LD_EXP 64
37679: PUSH
37680: LD_EXP 99
37684: AND
37685: IFFALSE 37779
37687: GO 37689
37689: DISABLE
37690: LD_INT 0
37692: PPUSH
37693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
37694: LD_ADDR_VAR 0 2
37698: PUSH
37699: LD_INT 22
37701: PUSH
37702: LD_OWVAR 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 32
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 21
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PPUSH
37736: CALL_OW 69
37740: ST_TO_ADDR
// if not tmp then
37741: LD_VAR 0 2
37745: NOT
37746: IFFALSE 37750
// exit ;
37748: GO 37779
// for i in tmp do
37750: LD_ADDR_VAR 0 1
37754: PUSH
37755: LD_VAR 0 2
37759: PUSH
37760: FOR_IN
37761: IFFALSE 37777
// SetFuel ( i , 0 ) ;
37763: LD_VAR 0 1
37767: PPUSH
37768: LD_INT 0
37770: PPUSH
37771: CALL_OW 240
37775: GO 37760
37777: POP
37778: POP
// end ;
37779: PPOPN 2
37781: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
37782: LD_EXP 64
37786: PUSH
37787: LD_EXP 100
37791: AND
37792: IFFALSE 37858
37794: GO 37796
37796: DISABLE
37797: LD_INT 0
37799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37800: LD_ADDR_VAR 0 1
37804: PUSH
37805: LD_INT 22
37807: PUSH
37808: LD_OWVAR 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 30
37819: PUSH
37820: LD_INT 29
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PPUSH
37831: CALL_OW 69
37835: ST_TO_ADDR
// if not tmp then
37836: LD_VAR 0 1
37840: NOT
37841: IFFALSE 37845
// exit ;
37843: GO 37858
// DestroyUnit ( tmp [ 1 ] ) ;
37845: LD_VAR 0 1
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PPUSH
37854: CALL_OW 65
// end ;
37858: PPOPN 1
37860: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37861: LD_EXP 64
37865: PUSH
37866: LD_EXP 102
37870: AND
37871: IFFALSE 38000
37873: GO 37875
37875: DISABLE
37876: LD_INT 0
37878: PPUSH
// begin uc_side := 0 ;
37879: LD_ADDR_OWVAR 20
37883: PUSH
37884: LD_INT 0
37886: ST_TO_ADDR
// uc_nation := nation_arabian ;
37887: LD_ADDR_OWVAR 21
37891: PUSH
37892: LD_INT 2
37894: ST_TO_ADDR
// hc_gallery :=  ;
37895: LD_ADDR_OWVAR 33
37899: PUSH
37900: LD_STRING 
37902: ST_TO_ADDR
// hc_name :=  ;
37903: LD_ADDR_OWVAR 26
37907: PUSH
37908: LD_STRING 
37910: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37911: LD_INT 1
37913: PPUSH
37914: LD_INT 11
37916: PPUSH
37917: LD_INT 10
37919: PPUSH
37920: CALL_OW 380
// un := CreateHuman ;
37924: LD_ADDR_VAR 0 1
37928: PUSH
37929: CALL_OW 44
37933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37934: LD_VAR 0 1
37938: PPUSH
37939: LD_INT 1
37941: PPUSH
37942: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37946: LD_INT 35
37948: PPUSH
37949: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37953: LD_VAR 0 1
37957: PPUSH
37958: LD_INT 22
37960: PUSH
37961: LD_OWVAR 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PPUSH
37970: CALL_OW 69
37974: PPUSH
37975: LD_VAR 0 1
37979: PPUSH
37980: CALL_OW 74
37984: PPUSH
37985: CALL_OW 115
// until IsDead ( un ) ;
37989: LD_VAR 0 1
37993: PPUSH
37994: CALL_OW 301
37998: IFFALSE 37946
// end ;
38000: PPOPN 1
38002: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38003: LD_EXP 64
38007: PUSH
38008: LD_EXP 104
38012: AND
38013: IFFALSE 38025
38015: GO 38017
38017: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38018: LD_STRING earthquake(getX(game), 0, 32)
38020: PPUSH
38021: CALL_OW 559
38025: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38026: LD_EXP 64
38030: PUSH
38031: LD_EXP 105
38035: AND
38036: IFFALSE 38127
38038: GO 38040
38040: DISABLE
38041: LD_INT 0
38043: PPUSH
// begin enable ;
38044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38045: LD_ADDR_VAR 0 1
38049: PUSH
38050: LD_INT 22
38052: PUSH
38053: LD_OWVAR 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 21
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 33
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: PPUSH
38087: CALL_OW 69
38091: ST_TO_ADDR
// if not tmp then
38092: LD_VAR 0 1
38096: NOT
38097: IFFALSE 38101
// exit ;
38099: GO 38127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38101: LD_VAR 0 1
38105: PUSH
38106: LD_INT 1
38108: PPUSH
38109: LD_VAR 0 1
38113: PPUSH
38114: CALL_OW 12
38118: ARRAY
38119: PPUSH
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 234
// end ;
38127: PPOPN 1
38129: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38130: LD_EXP 64
38134: PUSH
38135: LD_EXP 106
38139: AND
38140: IFFALSE 38281
38142: GO 38144
38144: DISABLE
38145: LD_INT 0
38147: PPUSH
38148: PPUSH
38149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38150: LD_ADDR_VAR 0 3
38154: PUSH
38155: LD_INT 22
38157: PUSH
38158: LD_OWVAR 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 25
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PPUSH
38181: CALL_OW 69
38185: ST_TO_ADDR
// if not tmp then
38186: LD_VAR 0 3
38190: NOT
38191: IFFALSE 38195
// exit ;
38193: GO 38281
// un := tmp [ rand ( 1 , tmp ) ] ;
38195: LD_ADDR_VAR 0 2
38199: PUSH
38200: LD_VAR 0 3
38204: PUSH
38205: LD_INT 1
38207: PPUSH
38208: LD_VAR 0 3
38212: PPUSH
38213: CALL_OW 12
38217: ARRAY
38218: ST_TO_ADDR
// if Crawls ( un ) then
38219: LD_VAR 0 2
38223: PPUSH
38224: CALL_OW 318
38228: IFFALSE 38239
// ComWalk ( un ) ;
38230: LD_VAR 0 2
38234: PPUSH
38235: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38239: LD_VAR 0 2
38243: PPUSH
38244: LD_INT 9
38246: PPUSH
38247: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38251: LD_INT 28
38253: PPUSH
38254: LD_OWVAR 2
38258: PPUSH
38259: LD_INT 2
38261: PPUSH
38262: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38266: LD_INT 29
38268: PPUSH
38269: LD_OWVAR 2
38273: PPUSH
38274: LD_INT 2
38276: PPUSH
38277: CALL_OW 322
// end ;
38281: PPOPN 3
38283: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38284: LD_EXP 64
38288: PUSH
38289: LD_EXP 107
38293: AND
38294: IFFALSE 38405
38296: GO 38298
38298: DISABLE
38299: LD_INT 0
38301: PPUSH
38302: PPUSH
38303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38304: LD_ADDR_VAR 0 3
38308: PUSH
38309: LD_INT 22
38311: PUSH
38312: LD_OWVAR 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 25
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PPUSH
38335: CALL_OW 69
38339: ST_TO_ADDR
// if not tmp then
38340: LD_VAR 0 3
38344: NOT
38345: IFFALSE 38349
// exit ;
38347: GO 38405
// un := tmp [ rand ( 1 , tmp ) ] ;
38349: LD_ADDR_VAR 0 2
38353: PUSH
38354: LD_VAR 0 3
38358: PUSH
38359: LD_INT 1
38361: PPUSH
38362: LD_VAR 0 3
38366: PPUSH
38367: CALL_OW 12
38371: ARRAY
38372: ST_TO_ADDR
// if Crawls ( un ) then
38373: LD_VAR 0 2
38377: PPUSH
38378: CALL_OW 318
38382: IFFALSE 38393
// ComWalk ( un ) ;
38384: LD_VAR 0 2
38388: PPUSH
38389: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38393: LD_VAR 0 2
38397: PPUSH
38398: LD_INT 8
38400: PPUSH
38401: CALL_OW 336
// end ;
38405: PPOPN 3
38407: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
38408: LD_EXP 64
38412: PUSH
38413: LD_EXP 108
38417: AND
38418: IFFALSE 38562
38420: GO 38422
38422: DISABLE
38423: LD_INT 0
38425: PPUSH
38426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
38427: LD_ADDR_VAR 0 2
38431: PUSH
38432: LD_INT 22
38434: PUSH
38435: LD_OWVAR 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 21
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 34
38459: PUSH
38460: LD_INT 12
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 34
38469: PUSH
38470: LD_INT 51
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 34
38479: PUSH
38480: LD_INT 32
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: PPUSH
38498: CALL_OW 69
38502: ST_TO_ADDR
// if not tmp then
38503: LD_VAR 0 2
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38562
// for i in tmp do
38512: LD_ADDR_VAR 0 1
38516: PUSH
38517: LD_VAR 0 2
38521: PUSH
38522: FOR_IN
38523: IFFALSE 38560
// if GetCargo ( i , mat_artifact ) = 0 then
38525: LD_VAR 0 1
38529: PPUSH
38530: LD_INT 4
38532: PPUSH
38533: CALL_OW 289
38537: PUSH
38538: LD_INT 0
38540: EQUAL
38541: IFFALSE 38558
// SetCargo ( i , mat_siberit , 100 ) ;
38543: LD_VAR 0 1
38547: PPUSH
38548: LD_INT 3
38550: PPUSH
38551: LD_INT 100
38553: PPUSH
38554: CALL_OW 290
38558: GO 38522
38560: POP
38561: POP
// end ;
38562: PPOPN 2
38564: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
38565: LD_EXP 64
38569: PUSH
38570: LD_EXP 109
38574: AND
38575: IFFALSE 38758
38577: GO 38579
38579: DISABLE
38580: LD_INT 0
38582: PPUSH
38583: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38584: LD_ADDR_VAR 0 2
38588: PUSH
38589: LD_INT 22
38591: PUSH
38592: LD_OWVAR 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PPUSH
38601: CALL_OW 69
38605: ST_TO_ADDR
// if not tmp then
38606: LD_VAR 0 2
38610: NOT
38611: IFFALSE 38615
// exit ;
38613: GO 38758
// for i := 1 to 2 do
38615: LD_ADDR_VAR 0 1
38619: PUSH
38620: DOUBLE
38621: LD_INT 1
38623: DEC
38624: ST_TO_ADDR
38625: LD_INT 2
38627: PUSH
38628: FOR_TO
38629: IFFALSE 38756
// begin uc_side := your_side ;
38631: LD_ADDR_OWVAR 20
38635: PUSH
38636: LD_OWVAR 2
38640: ST_TO_ADDR
// uc_nation := nation_american ;
38641: LD_ADDR_OWVAR 21
38645: PUSH
38646: LD_INT 1
38648: ST_TO_ADDR
// vc_chassis := us_morphling ;
38649: LD_ADDR_OWVAR 37
38653: PUSH
38654: LD_INT 5
38656: ST_TO_ADDR
// vc_engine := engine_siberite ;
38657: LD_ADDR_OWVAR 39
38661: PUSH
38662: LD_INT 3
38664: ST_TO_ADDR
// vc_control := control_computer ;
38665: LD_ADDR_OWVAR 38
38669: PUSH
38670: LD_INT 3
38672: ST_TO_ADDR
// vc_weapon := us_double_laser ;
38673: LD_ADDR_OWVAR 40
38677: PUSH
38678: LD_INT 10
38680: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 1
38688: ARRAY
38689: PPUSH
38690: CALL_OW 310
38694: NOT
38695: IFFALSE 38742
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
38697: CALL_OW 45
38701: PPUSH
38702: LD_VAR 0 2
38706: PUSH
38707: LD_INT 1
38709: ARRAY
38710: PPUSH
38711: CALL_OW 250
38715: PPUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_INT 1
38723: ARRAY
38724: PPUSH
38725: CALL_OW 251
38729: PPUSH
38730: LD_INT 12
38732: PPUSH
38733: LD_INT 1
38735: PPUSH
38736: CALL_OW 50
38740: GO 38754
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
38742: CALL_OW 45
38746: PPUSH
38747: LD_INT 1
38749: PPUSH
38750: CALL_OW 51
// end ;
38754: GO 38628
38756: POP
38757: POP
// end ;
38758: PPOPN 2
38760: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
38761: LD_EXP 64
38765: PUSH
38766: LD_EXP 110
38770: AND
38771: IFFALSE 38993
38773: GO 38775
38775: DISABLE
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38784: LD_ADDR_VAR 0 6
38788: PUSH
38789: LD_INT 22
38791: PUSH
38792: LD_OWVAR 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 21
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: LD_INT 23
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: PPUSH
38833: CALL_OW 69
38837: ST_TO_ADDR
// if not tmp then
38838: LD_VAR 0 6
38842: NOT
38843: IFFALSE 38847
// exit ;
38845: GO 38993
// s1 := rand ( 1 , 4 ) ;
38847: LD_ADDR_VAR 0 2
38851: PUSH
38852: LD_INT 1
38854: PPUSH
38855: LD_INT 4
38857: PPUSH
38858: CALL_OW 12
38862: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38863: LD_ADDR_VAR 0 4
38867: PUSH
38868: LD_VAR 0 6
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PPUSH
38877: LD_VAR 0 2
38881: PPUSH
38882: CALL_OW 259
38886: ST_TO_ADDR
// if s1 = 1 then
38887: LD_VAR 0 2
38891: PUSH
38892: LD_INT 1
38894: EQUAL
38895: IFFALSE 38915
// s2 := rand ( 2 , 4 ) else
38897: LD_ADDR_VAR 0 3
38901: PUSH
38902: LD_INT 2
38904: PPUSH
38905: LD_INT 4
38907: PPUSH
38908: CALL_OW 12
38912: ST_TO_ADDR
38913: GO 38923
// s2 := 1 ;
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_INT 1
38922: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: LD_VAR 0 6
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: PPUSH
38937: LD_VAR 0 3
38941: PPUSH
38942: CALL_OW 259
38946: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38947: LD_VAR 0 6
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: PPUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: LD_VAR 0 5
38965: PPUSH
38966: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38970: LD_VAR 0 6
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: LD_VAR 0 3
38983: PPUSH
38984: LD_VAR 0 4
38988: PPUSH
38989: CALL_OW 237
// end ;
38993: PPOPN 6
38995: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38996: LD_EXP 64
39000: PUSH
39001: LD_EXP 111
39005: AND
39006: IFFALSE 39085
39008: GO 39010
39010: DISABLE
39011: LD_INT 0
39013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39014: LD_ADDR_VAR 0 1
39018: PUSH
39019: LD_INT 22
39021: PUSH
39022: LD_OWVAR 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 30
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PPUSH
39045: CALL_OW 69
39049: ST_TO_ADDR
// if not tmp then
39050: LD_VAR 0 1
39054: NOT
39055: IFFALSE 39059
// exit ;
39057: GO 39085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39059: LD_VAR 0 1
39063: PUSH
39064: LD_INT 1
39066: PPUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL_OW 12
39076: ARRAY
39077: PPUSH
39078: LD_INT 1
39080: PPUSH
39081: CALL_OW 234
// end ;
39085: PPOPN 1
39087: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39088: LD_EXP 64
39092: PUSH
39093: LD_EXP 112
39097: AND
39098: IFFALSE 39210
39100: GO 39102
39102: DISABLE
39103: LD_INT 0
39105: PPUSH
39106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: LD_INT 22
39114: PUSH
39115: LD_OWVAR 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 30
39129: PUSH
39130: LD_INT 27
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 30
39139: PUSH
39140: LD_INT 26
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 30
39149: PUSH
39150: LD_INT 28
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PPUSH
39167: CALL_OW 69
39171: ST_TO_ADDR
// if not tmp then
39172: LD_VAR 0 2
39176: NOT
39177: IFFALSE 39181
// exit ;
39179: GO 39210
// for i in tmp do
39181: LD_ADDR_VAR 0 1
39185: PUSH
39186: LD_VAR 0 2
39190: PUSH
39191: FOR_IN
39192: IFFALSE 39208
// SetLives ( i , 1 ) ;
39194: LD_VAR 0 1
39198: PPUSH
39199: LD_INT 1
39201: PPUSH
39202: CALL_OW 234
39206: GO 39191
39208: POP
39209: POP
// end ;
39210: PPOPN 2
39212: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39213: LD_EXP 64
39217: PUSH
39218: LD_EXP 113
39222: AND
39223: IFFALSE 39510
39225: GO 39227
39227: DISABLE
39228: LD_INT 0
39230: PPUSH
39231: PPUSH
39232: PPUSH
// begin i := rand ( 1 , 7 ) ;
39233: LD_ADDR_VAR 0 1
39237: PUSH
39238: LD_INT 1
39240: PPUSH
39241: LD_INT 7
39243: PPUSH
39244: CALL_OW 12
39248: ST_TO_ADDR
// case i of 1 :
39249: LD_VAR 0 1
39253: PUSH
39254: LD_INT 1
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39272
39262: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39263: LD_STRING earthquake(getX(game), 0, 32)
39265: PPUSH
39266: CALL_OW 559
39270: GO 39510
39272: LD_INT 2
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39280
39278: GO 39294
39280: POP
// begin ToLua ( displayStucuk(); ) ;
39281: LD_STRING displayStucuk();
39283: PPUSH
39284: CALL_OW 559
// ResetFog ;
39288: CALL_OW 335
// end ; 3 :
39292: GO 39510
39294: LD_INT 3
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39406
39302: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39303: LD_ADDR_VAR 0 2
39307: PUSH
39308: LD_INT 22
39310: PUSH
39311: LD_OWVAR 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 25
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PPUSH
39334: CALL_OW 69
39338: ST_TO_ADDR
// if not tmp then
39339: LD_VAR 0 2
39343: NOT
39344: IFFALSE 39348
// exit ;
39346: GO 39510
// un := tmp [ rand ( 1 , tmp ) ] ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_VAR 0 2
39357: PUSH
39358: LD_INT 1
39360: PPUSH
39361: LD_VAR 0 2
39365: PPUSH
39366: CALL_OW 12
39370: ARRAY
39371: ST_TO_ADDR
// if Crawls ( un ) then
39372: LD_VAR 0 3
39376: PPUSH
39377: CALL_OW 318
39381: IFFALSE 39392
// ComWalk ( un ) ;
39383: LD_VAR 0 3
39387: PPUSH
39388: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39392: LD_VAR 0 3
39396: PPUSH
39397: LD_INT 8
39399: PPUSH
39400: CALL_OW 336
// end ; 4 :
39404: GO 39510
39406: LD_INT 4
39408: DOUBLE
39409: EQUAL
39410: IFTRUE 39414
39412: GO 39488
39414: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39415: LD_ADDR_VAR 0 2
39419: PUSH
39420: LD_INT 22
39422: PUSH
39423: LD_OWVAR 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 30
39434: PUSH
39435: LD_INT 29
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PPUSH
39446: CALL_OW 69
39450: ST_TO_ADDR
// if not tmp then
39451: LD_VAR 0 2
39455: NOT
39456: IFFALSE 39460
// exit ;
39458: GO 39510
// CenterNowOnUnits ( tmp [ 1 ] ) ;
39460: LD_VAR 0 2
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: PPUSH
39469: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
39473: LD_VAR 0 2
39477: PUSH
39478: LD_INT 1
39480: ARRAY
39481: PPUSH
39482: CALL_OW 65
// end ; 5 .. 7 :
39486: GO 39510
39488: LD_INT 5
39490: DOUBLE
39491: GREATEREQUAL
39492: IFFALSE 39500
39494: LD_INT 7
39496: DOUBLE
39497: LESSEQUAL
39498: IFTRUE 39502
39500: GO 39509
39502: POP
// StreamSibBomb ; end ;
39503: CALL 35747 0 0
39507: GO 39510
39509: POP
// end ;
39510: PPOPN 3
39512: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
39513: LD_EXP 64
39517: PUSH
39518: LD_EXP 114
39522: AND
39523: IFFALSE 39679
39525: GO 39527
39527: DISABLE
39528: LD_INT 0
39530: PPUSH
39531: PPUSH
39532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
39533: LD_ADDR_VAR 0 2
39537: PUSH
39538: LD_INT 81
39540: PUSH
39541: LD_OWVAR 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 21
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 21
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PPUSH
39582: CALL_OW 69
39586: ST_TO_ADDR
// if not tmp then
39587: LD_VAR 0 2
39591: NOT
39592: IFFALSE 39596
// exit ;
39594: GO 39679
// p := 0 ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_INT 0
39603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39604: LD_INT 35
39606: PPUSH
39607: CALL_OW 67
// p := p + 1 ;
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_VAR 0 3
39620: PUSH
39621: LD_INT 1
39623: PLUS
39624: ST_TO_ADDR
// for i in tmp do
39625: LD_ADDR_VAR 0 1
39629: PUSH
39630: LD_VAR 0 2
39634: PUSH
39635: FOR_IN
39636: IFFALSE 39667
// if GetLives ( i ) < 1000 then
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 256
39647: PUSH
39648: LD_INT 1000
39650: LESS
39651: IFFALSE 39665
// SetLives ( i , 1000 ) ;
39653: LD_VAR 0 1
39657: PPUSH
39658: LD_INT 1000
39660: PPUSH
39661: CALL_OW 234
39665: GO 39635
39667: POP
39668: POP
// until p > 20 ;
39669: LD_VAR 0 3
39673: PUSH
39674: LD_INT 20
39676: GREATER
39677: IFFALSE 39604
// end ;
39679: PPOPN 3
39681: END
// every 0 0$1 trigger StreamModeActive and sTime do
39682: LD_EXP 64
39686: PUSH
39687: LD_EXP 115
39691: AND
39692: IFFALSE 39727
39694: GO 39696
39696: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
39697: LD_INT 28
39699: PPUSH
39700: LD_OWVAR 2
39704: PPUSH
39705: LD_INT 2
39707: PPUSH
39708: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
39712: LD_INT 30
39714: PPUSH
39715: LD_OWVAR 2
39719: PPUSH
39720: LD_INT 2
39722: PPUSH
39723: CALL_OW 322
// end ;
39727: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
39728: LD_EXP 64
39732: PUSH
39733: LD_EXP 116
39737: AND
39738: IFFALSE 39859
39740: GO 39742
39742: DISABLE
39743: LD_INT 0
39745: PPUSH
39746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39747: LD_ADDR_VAR 0 2
39751: PUSH
39752: LD_INT 22
39754: PUSH
39755: LD_OWVAR 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 21
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: PUSH
39777: LD_INT 23
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: PPUSH
39796: CALL_OW 69
39800: ST_TO_ADDR
// if not tmp then
39801: LD_VAR 0 2
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39859
// for i in tmp do
39810: LD_ADDR_VAR 0 1
39814: PUSH
39815: LD_VAR 0 2
39819: PUSH
39820: FOR_IN
39821: IFFALSE 39857
// begin if Crawls ( i ) then
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 318
39832: IFFALSE 39843
// ComWalk ( i ) ;
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 138
// SetClass ( i , 2 ) ;
39843: LD_VAR 0 1
39847: PPUSH
39848: LD_INT 2
39850: PPUSH
39851: CALL_OW 336
// end ;
39855: GO 39820
39857: POP
39858: POP
// end ;
39859: PPOPN 2
39861: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39862: LD_EXP 64
39866: PUSH
39867: LD_EXP 117
39871: AND
39872: IFFALSE 40160
39874: GO 39876
39876: DISABLE
39877: LD_INT 0
39879: PPUSH
39880: PPUSH
39881: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39882: LD_OWVAR 2
39886: PPUSH
39887: LD_INT 9
39889: PPUSH
39890: LD_INT 1
39892: PPUSH
39893: LD_INT 1
39895: PPUSH
39896: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39900: LD_INT 9
39902: PPUSH
39903: LD_OWVAR 2
39907: PPUSH
39908: CALL_OW 343
// uc_side := 9 ;
39912: LD_ADDR_OWVAR 20
39916: PUSH
39917: LD_INT 9
39919: ST_TO_ADDR
// uc_nation := 2 ;
39920: LD_ADDR_OWVAR 21
39924: PUSH
39925: LD_INT 2
39927: ST_TO_ADDR
// hc_name := Dark Warrior ;
39928: LD_ADDR_OWVAR 26
39932: PUSH
39933: LD_STRING Dark Warrior
39935: ST_TO_ADDR
// hc_gallery :=  ;
39936: LD_ADDR_OWVAR 33
39940: PUSH
39941: LD_STRING 
39943: ST_TO_ADDR
// hc_noskilllimit := true ;
39944: LD_ADDR_OWVAR 76
39948: PUSH
39949: LD_INT 1
39951: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39952: LD_ADDR_OWVAR 31
39956: PUSH
39957: LD_INT 30
39959: PUSH
39960: LD_INT 30
39962: PUSH
39963: LD_INT 30
39965: PUSH
39966: LD_INT 30
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// un := CreateHuman ;
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: CALL_OW 44
39984: ST_TO_ADDR
// hc_noskilllimit := false ;
39985: LD_ADDR_OWVAR 76
39989: PUSH
39990: LD_INT 0
39992: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39993: LD_VAR 0 3
39997: PPUSH
39998: LD_INT 1
40000: PPUSH
40001: CALL_OW 51
// ToLua ( playRanger() ) ;
40005: LD_STRING playRanger()
40007: PPUSH
40008: CALL_OW 559
// p := 0 ;
40012: LD_ADDR_VAR 0 2
40016: PUSH
40017: LD_INT 0
40019: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40020: LD_INT 35
40022: PPUSH
40023: CALL_OW 67
// p := p + 1 ;
40027: LD_ADDR_VAR 0 2
40031: PUSH
40032: LD_VAR 0 2
40036: PUSH
40037: LD_INT 1
40039: PLUS
40040: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40041: LD_VAR 0 3
40045: PPUSH
40046: CALL_OW 256
40050: PUSH
40051: LD_INT 1000
40053: LESS
40054: IFFALSE 40068
// SetLives ( un , 1000 ) ;
40056: LD_VAR 0 3
40060: PPUSH
40061: LD_INT 1000
40063: PPUSH
40064: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40068: LD_VAR 0 3
40072: PPUSH
40073: LD_INT 81
40075: PUSH
40076: LD_OWVAR 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 91
40087: PUSH
40088: LD_VAR 0 3
40092: PUSH
40093: LD_INT 30
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PPUSH
40105: CALL_OW 69
40109: PPUSH
40110: LD_VAR 0 3
40114: PPUSH
40115: CALL_OW 74
40119: PPUSH
40120: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
40124: LD_VAR 0 2
40128: PUSH
40129: LD_INT 80
40131: GREATER
40132: PUSH
40133: LD_VAR 0 3
40137: PPUSH
40138: CALL_OW 301
40142: OR
40143: IFFALSE 40020
// if un then
40145: LD_VAR 0 3
40149: IFFALSE 40160
// RemoveUnit ( un ) ;
40151: LD_VAR 0 3
40155: PPUSH
40156: CALL_OW 64
// end ;
40160: PPOPN 3
40162: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
40163: LD_EXP 118
40167: IFFALSE 40283
40169: GO 40171
40171: DISABLE
40172: LD_INT 0
40174: PPUSH
40175: PPUSH
40176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40177: LD_ADDR_VAR 0 2
40181: PUSH
40182: LD_INT 81
40184: PUSH
40185: LD_OWVAR 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 21
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PPUSH
40208: CALL_OW 69
40212: ST_TO_ADDR
// ToLua ( playComputer() ) ;
40213: LD_STRING playComputer()
40215: PPUSH
40216: CALL_OW 559
// if not tmp then
40220: LD_VAR 0 2
40224: NOT
40225: IFFALSE 40229
// exit ;
40227: GO 40283
// for i in tmp do
40229: LD_ADDR_VAR 0 1
40233: PUSH
40234: LD_VAR 0 2
40238: PUSH
40239: FOR_IN
40240: IFFALSE 40281
// for j := 1 to 4 do
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: DOUBLE
40248: LD_INT 1
40250: DEC
40251: ST_TO_ADDR
40252: LD_INT 4
40254: PUSH
40255: FOR_TO
40256: IFFALSE 40277
// SetSkill ( i , j , 10 ) ;
40258: LD_VAR 0 1
40262: PPUSH
40263: LD_VAR 0 3
40267: PPUSH
40268: LD_INT 10
40270: PPUSH
40271: CALL_OW 237
40275: GO 40255
40277: POP
40278: POP
40279: GO 40239
40281: POP
40282: POP
// end ;
40283: PPOPN 3
40285: END
// every 0 0$1 trigger s30 do var i , tmp ;
40286: LD_EXP 119
40290: IFFALSE 40359
40292: GO 40294
40294: DISABLE
40295: LD_INT 0
40297: PPUSH
40298: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40299: LD_ADDR_VAR 0 2
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_OWVAR 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PPUSH
40316: CALL_OW 69
40320: ST_TO_ADDR
// if not tmp then
40321: LD_VAR 0 2
40325: NOT
40326: IFFALSE 40330
// exit ;
40328: GO 40359
// for i in tmp do
40330: LD_ADDR_VAR 0 1
40334: PUSH
40335: LD_VAR 0 2
40339: PUSH
40340: FOR_IN
40341: IFFALSE 40357
// SetLives ( i , 300 ) ;
40343: LD_VAR 0 1
40347: PPUSH
40348: LD_INT 300
40350: PPUSH
40351: CALL_OW 234
40355: GO 40340
40357: POP
40358: POP
// end ;
40359: PPOPN 2
40361: END
// every 0 0$1 trigger s60 do var i , tmp ;
40362: LD_EXP 120
40366: IFFALSE 40435
40368: GO 40370
40370: DISABLE
40371: LD_INT 0
40373: PPUSH
40374: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40375: LD_ADDR_VAR 0 2
40379: PUSH
40380: LD_INT 22
40382: PUSH
40383: LD_OWVAR 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PPUSH
40392: CALL_OW 69
40396: ST_TO_ADDR
// if not tmp then
40397: LD_VAR 0 2
40401: NOT
40402: IFFALSE 40406
// exit ;
40404: GO 40435
// for i in tmp do
40406: LD_ADDR_VAR 0 1
40410: PUSH
40411: LD_VAR 0 2
40415: PUSH
40416: FOR_IN
40417: IFFALSE 40433
// SetLives ( i , 600 ) ;
40419: LD_VAR 0 1
40423: PPUSH
40424: LD_INT 600
40426: PPUSH
40427: CALL_OW 234
40431: GO 40416
40433: POP
40434: POP
// end ;
40435: PPOPN 2
40437: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40438: LD_INT 0
40440: PPUSH
// case cmd of 301 :
40441: LD_VAR 0 1
40445: PUSH
40446: LD_INT 301
40448: DOUBLE
40449: EQUAL
40450: IFTRUE 40454
40452: GO 40486
40454: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40455: LD_VAR 0 6
40459: PPUSH
40460: LD_VAR 0 7
40464: PPUSH
40465: LD_VAR 0 8
40469: PPUSH
40470: LD_VAR 0 4
40474: PPUSH
40475: LD_VAR 0 5
40479: PPUSH
40480: CALL 41687 0 5
40484: GO 40607
40486: LD_INT 302
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 40531
40494: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
40495: LD_VAR 0 6
40499: PPUSH
40500: LD_VAR 0 7
40504: PPUSH
40505: LD_VAR 0 8
40509: PPUSH
40510: LD_VAR 0 9
40514: PPUSH
40515: LD_VAR 0 4
40519: PPUSH
40520: LD_VAR 0 5
40524: PPUSH
40525: CALL 41778 0 6
40529: GO 40607
40531: LD_INT 303
40533: DOUBLE
40534: EQUAL
40535: IFTRUE 40539
40537: GO 40576
40539: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
40540: LD_VAR 0 6
40544: PPUSH
40545: LD_VAR 0 7
40549: PPUSH
40550: LD_VAR 0 8
40554: PPUSH
40555: LD_VAR 0 9
40559: PPUSH
40560: LD_VAR 0 4
40564: PPUSH
40565: LD_VAR 0 5
40569: PPUSH
40570: CALL 40612 0 6
40574: GO 40607
40576: LD_INT 304
40578: DOUBLE
40579: EQUAL
40580: IFTRUE 40584
40582: GO 40606
40584: POP
// hHackTeleport ( unit , x , y ) ; end ;
40585: LD_VAR 0 2
40589: PPUSH
40590: LD_VAR 0 4
40594: PPUSH
40595: LD_VAR 0 5
40599: PPUSH
40600: CALL 42371 0 3
40604: GO 40607
40606: POP
// end ;
40607: LD_VAR 0 12
40611: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
40612: LD_INT 0
40614: PPUSH
40615: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
40616: LD_VAR 0 1
40620: PUSH
40621: LD_INT 1
40623: LESS
40624: PUSH
40625: LD_VAR 0 1
40629: PUSH
40630: LD_INT 3
40632: GREATER
40633: OR
40634: PUSH
40635: LD_VAR 0 5
40639: PPUSH
40640: LD_VAR 0 6
40644: PPUSH
40645: CALL_OW 428
40649: OR
40650: IFFALSE 40654
// exit ;
40652: GO 41374
// uc_side := your_side ;
40654: LD_ADDR_OWVAR 20
40658: PUSH
40659: LD_OWVAR 2
40663: ST_TO_ADDR
// uc_nation := nation ;
40664: LD_ADDR_OWVAR 21
40668: PUSH
40669: LD_VAR 0 1
40673: ST_TO_ADDR
// bc_level = 1 ;
40674: LD_ADDR_OWVAR 43
40678: PUSH
40679: LD_INT 1
40681: ST_TO_ADDR
// case btype of 1 :
40682: LD_VAR 0 2
40686: PUSH
40687: LD_INT 1
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40706
40695: POP
// bc_type := b_depot ; 2 :
40696: LD_ADDR_OWVAR 42
40700: PUSH
40701: LD_INT 0
40703: ST_TO_ADDR
40704: GO 41318
40706: LD_INT 2
40708: DOUBLE
40709: EQUAL
40710: IFTRUE 40714
40712: GO 40725
40714: POP
// bc_type := b_warehouse ; 3 :
40715: LD_ADDR_OWVAR 42
40719: PUSH
40720: LD_INT 1
40722: ST_TO_ADDR
40723: GO 41318
40725: LD_INT 3
40727: DOUBLE
40728: EQUAL
40729: IFTRUE 40733
40731: GO 40744
40733: POP
// bc_type := b_lab ; 4 .. 9 :
40734: LD_ADDR_OWVAR 42
40738: PUSH
40739: LD_INT 6
40741: ST_TO_ADDR
40742: GO 41318
40744: LD_INT 4
40746: DOUBLE
40747: GREATEREQUAL
40748: IFFALSE 40756
40750: LD_INT 9
40752: DOUBLE
40753: LESSEQUAL
40754: IFTRUE 40758
40756: GO 40810
40758: POP
// begin bc_type := b_lab_half ;
40759: LD_ADDR_OWVAR 42
40763: PUSH
40764: LD_INT 7
40766: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
40767: LD_ADDR_OWVAR 44
40771: PUSH
40772: LD_INT 10
40774: PUSH
40775: LD_INT 11
40777: PUSH
40778: LD_INT 12
40780: PUSH
40781: LD_INT 15
40783: PUSH
40784: LD_INT 14
40786: PUSH
40787: LD_INT 13
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: PUSH
40798: LD_VAR 0 2
40802: PUSH
40803: LD_INT 3
40805: MINUS
40806: ARRAY
40807: ST_TO_ADDR
// end ; 10 .. 13 :
40808: GO 41318
40810: LD_INT 10
40812: DOUBLE
40813: GREATEREQUAL
40814: IFFALSE 40822
40816: LD_INT 13
40818: DOUBLE
40819: LESSEQUAL
40820: IFTRUE 40824
40822: GO 40901
40824: POP
// begin bc_type := b_lab_full ;
40825: LD_ADDR_OWVAR 42
40829: PUSH
40830: LD_INT 8
40832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40833: LD_ADDR_OWVAR 44
40837: PUSH
40838: LD_INT 10
40840: PUSH
40841: LD_INT 12
40843: PUSH
40844: LD_INT 14
40846: PUSH
40847: LD_INT 13
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: PUSH
40856: LD_VAR 0 2
40860: PUSH
40861: LD_INT 9
40863: MINUS
40864: ARRAY
40865: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40866: LD_ADDR_OWVAR 45
40870: PUSH
40871: LD_INT 11
40873: PUSH
40874: LD_INT 15
40876: PUSH
40877: LD_INT 12
40879: PUSH
40880: LD_INT 15
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: PUSH
40889: LD_VAR 0 2
40893: PUSH
40894: LD_INT 9
40896: MINUS
40897: ARRAY
40898: ST_TO_ADDR
// end ; 14 :
40899: GO 41318
40901: LD_INT 14
40903: DOUBLE
40904: EQUAL
40905: IFTRUE 40909
40907: GO 40920
40909: POP
// bc_type := b_workshop ; 15 :
40910: LD_ADDR_OWVAR 42
40914: PUSH
40915: LD_INT 2
40917: ST_TO_ADDR
40918: GO 41318
40920: LD_INT 15
40922: DOUBLE
40923: EQUAL
40924: IFTRUE 40928
40926: GO 40939
40928: POP
// bc_type := b_factory ; 16 :
40929: LD_ADDR_OWVAR 42
40933: PUSH
40934: LD_INT 3
40936: ST_TO_ADDR
40937: GO 41318
40939: LD_INT 16
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 40958
40947: POP
// bc_type := b_ext_gun ; 17 :
40948: LD_ADDR_OWVAR 42
40952: PUSH
40953: LD_INT 17
40955: ST_TO_ADDR
40956: GO 41318
40958: LD_INT 17
40960: DOUBLE
40961: EQUAL
40962: IFTRUE 40966
40964: GO 40994
40966: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40967: LD_ADDR_OWVAR 42
40971: PUSH
40972: LD_INT 19
40974: PUSH
40975: LD_INT 23
40977: PUSH
40978: LD_INT 19
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PUSH
40986: LD_VAR 0 1
40990: ARRAY
40991: ST_TO_ADDR
40992: GO 41318
40994: LD_INT 18
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41013
41002: POP
// bc_type := b_ext_radar ; 19 :
41003: LD_ADDR_OWVAR 42
41007: PUSH
41008: LD_INT 20
41010: ST_TO_ADDR
41011: GO 41318
41013: LD_INT 19
41015: DOUBLE
41016: EQUAL
41017: IFTRUE 41021
41019: GO 41032
41021: POP
// bc_type := b_ext_radio ; 20 :
41022: LD_ADDR_OWVAR 42
41026: PUSH
41027: LD_INT 22
41029: ST_TO_ADDR
41030: GO 41318
41032: LD_INT 20
41034: DOUBLE
41035: EQUAL
41036: IFTRUE 41040
41038: GO 41051
41040: POP
// bc_type := b_ext_siberium ; 21 :
41041: LD_ADDR_OWVAR 42
41045: PUSH
41046: LD_INT 21
41048: ST_TO_ADDR
41049: GO 41318
41051: LD_INT 21
41053: DOUBLE
41054: EQUAL
41055: IFTRUE 41059
41057: GO 41070
41059: POP
// bc_type := b_ext_computer ; 22 :
41060: LD_ADDR_OWVAR 42
41064: PUSH
41065: LD_INT 24
41067: ST_TO_ADDR
41068: GO 41318
41070: LD_INT 22
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41089
41078: POP
// bc_type := b_ext_track ; 23 :
41079: LD_ADDR_OWVAR 42
41083: PUSH
41084: LD_INT 16
41086: ST_TO_ADDR
41087: GO 41318
41089: LD_INT 23
41091: DOUBLE
41092: EQUAL
41093: IFTRUE 41097
41095: GO 41108
41097: POP
// bc_type := b_ext_laser ; 24 :
41098: LD_ADDR_OWVAR 42
41102: PUSH
41103: LD_INT 25
41105: ST_TO_ADDR
41106: GO 41318
41108: LD_INT 24
41110: DOUBLE
41111: EQUAL
41112: IFTRUE 41116
41114: GO 41127
41116: POP
// bc_type := b_control_tower ; 25 :
41117: LD_ADDR_OWVAR 42
41121: PUSH
41122: LD_INT 36
41124: ST_TO_ADDR
41125: GO 41318
41127: LD_INT 25
41129: DOUBLE
41130: EQUAL
41131: IFTRUE 41135
41133: GO 41146
41135: POP
// bc_type := b_breastwork ; 26 :
41136: LD_ADDR_OWVAR 42
41140: PUSH
41141: LD_INT 31
41143: ST_TO_ADDR
41144: GO 41318
41146: LD_INT 26
41148: DOUBLE
41149: EQUAL
41150: IFTRUE 41154
41152: GO 41165
41154: POP
// bc_type := b_bunker ; 27 :
41155: LD_ADDR_OWVAR 42
41159: PUSH
41160: LD_INT 32
41162: ST_TO_ADDR
41163: GO 41318
41165: LD_INT 27
41167: DOUBLE
41168: EQUAL
41169: IFTRUE 41173
41171: GO 41184
41173: POP
// bc_type := b_turret ; 28 :
41174: LD_ADDR_OWVAR 42
41178: PUSH
41179: LD_INT 33
41181: ST_TO_ADDR
41182: GO 41318
41184: LD_INT 28
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41203
41192: POP
// bc_type := b_armoury ; 29 :
41193: LD_ADDR_OWVAR 42
41197: PUSH
41198: LD_INT 4
41200: ST_TO_ADDR
41201: GO 41318
41203: LD_INT 29
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41211
41209: GO 41222
41211: POP
// bc_type := b_barracks ; 30 :
41212: LD_ADDR_OWVAR 42
41216: PUSH
41217: LD_INT 5
41219: ST_TO_ADDR
41220: GO 41318
41222: LD_INT 30
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41241
41230: POP
// bc_type := b_solar_power ; 31 :
41231: LD_ADDR_OWVAR 42
41235: PUSH
41236: LD_INT 27
41238: ST_TO_ADDR
41239: GO 41318
41241: LD_INT 31
41243: DOUBLE
41244: EQUAL
41245: IFTRUE 41249
41247: GO 41260
41249: POP
// bc_type := b_oil_power ; 32 :
41250: LD_ADDR_OWVAR 42
41254: PUSH
41255: LD_INT 26
41257: ST_TO_ADDR
41258: GO 41318
41260: LD_INT 32
41262: DOUBLE
41263: EQUAL
41264: IFTRUE 41268
41266: GO 41279
41268: POP
// bc_type := b_siberite_power ; 33 :
41269: LD_ADDR_OWVAR 42
41273: PUSH
41274: LD_INT 28
41276: ST_TO_ADDR
41277: GO 41318
41279: LD_INT 33
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41287
41285: GO 41298
41287: POP
// bc_type := b_oil_mine ; 34 :
41288: LD_ADDR_OWVAR 42
41292: PUSH
41293: LD_INT 29
41295: ST_TO_ADDR
41296: GO 41318
41298: LD_INT 34
41300: DOUBLE
41301: EQUAL
41302: IFTRUE 41306
41304: GO 41317
41306: POP
// bc_type := b_siberite_mine ; end ;
41307: LD_ADDR_OWVAR 42
41311: PUSH
41312: LD_INT 30
41314: ST_TO_ADDR
41315: GO 41318
41317: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41318: LD_ADDR_VAR 0 8
41322: PUSH
41323: LD_VAR 0 5
41327: PPUSH
41328: LD_VAR 0 6
41332: PPUSH
41333: LD_VAR 0 3
41337: PPUSH
41338: CALL_OW 47
41342: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41343: LD_OWVAR 42
41347: PUSH
41348: LD_INT 32
41350: PUSH
41351: LD_INT 33
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: IN
41358: IFFALSE 41374
// PlaceWeaponTurret ( b , weapon ) ;
41360: LD_VAR 0 8
41364: PPUSH
41365: LD_VAR 0 4
41369: PPUSH
41370: CALL_OW 431
// end ;
41374: LD_VAR 0 7
41378: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41379: LD_INT 0
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: LD_INT 22
41392: PUSH
41393: LD_OWVAR 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 30
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 30
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PPUSH
41434: CALL_OW 69
41438: ST_TO_ADDR
// if not tmp then
41439: LD_VAR 0 4
41443: NOT
41444: IFFALSE 41448
// exit ;
41446: GO 41507
// for i in tmp do
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_VAR 0 4
41457: PUSH
41458: FOR_IN
41459: IFFALSE 41505
// for j = 1 to 3 do
41461: LD_ADDR_VAR 0 3
41465: PUSH
41466: DOUBLE
41467: LD_INT 1
41469: DEC
41470: ST_TO_ADDR
41471: LD_INT 3
41473: PUSH
41474: FOR_TO
41475: IFFALSE 41501
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
41477: LD_VAR 0 2
41481: PPUSH
41482: CALL_OW 274
41486: PPUSH
41487: LD_VAR 0 3
41491: PPUSH
41492: LD_INT 99999
41494: PPUSH
41495: CALL_OW 277
41499: GO 41474
41501: POP
41502: POP
41503: GO 41458
41505: POP
41506: POP
// end ;
41507: LD_VAR 0 1
41511: RET
// export function hHackSetLevel10 ; var i , j ; begin
41512: LD_INT 0
41514: PPUSH
41515: PPUSH
41516: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41517: LD_ADDR_VAR 0 2
41521: PUSH
41522: LD_INT 21
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PPUSH
41532: CALL_OW 69
41536: PUSH
41537: FOR_IN
41538: IFFALSE 41590
// if IsSelected ( i ) then
41540: LD_VAR 0 2
41544: PPUSH
41545: CALL_OW 306
41549: IFFALSE 41588
// begin for j := 1 to 4 do
41551: LD_ADDR_VAR 0 3
41555: PUSH
41556: DOUBLE
41557: LD_INT 1
41559: DEC
41560: ST_TO_ADDR
41561: LD_INT 4
41563: PUSH
41564: FOR_TO
41565: IFFALSE 41586
// SetSkill ( i , j , 10 ) ;
41567: LD_VAR 0 2
41571: PPUSH
41572: LD_VAR 0 3
41576: PPUSH
41577: LD_INT 10
41579: PPUSH
41580: CALL_OW 237
41584: GO 41564
41586: POP
41587: POP
// end ;
41588: GO 41537
41590: POP
41591: POP
// end ;
41592: LD_VAR 0 1
41596: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
41597: LD_INT 0
41599: PPUSH
41600: PPUSH
41601: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
41602: LD_ADDR_VAR 0 2
41606: PUSH
41607: LD_INT 22
41609: PUSH
41610: LD_OWVAR 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 21
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PPUSH
41633: CALL_OW 69
41637: PUSH
41638: FOR_IN
41639: IFFALSE 41680
// begin for j := 1 to 4 do
41641: LD_ADDR_VAR 0 3
41645: PUSH
41646: DOUBLE
41647: LD_INT 1
41649: DEC
41650: ST_TO_ADDR
41651: LD_INT 4
41653: PUSH
41654: FOR_TO
41655: IFFALSE 41676
// SetSkill ( i , j , 10 ) ;
41657: LD_VAR 0 2
41661: PPUSH
41662: LD_VAR 0 3
41666: PPUSH
41667: LD_INT 10
41669: PPUSH
41670: CALL_OW 237
41674: GO 41654
41676: POP
41677: POP
// end ;
41678: GO 41638
41680: POP
41681: POP
// end ;
41682: LD_VAR 0 1
41686: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
41687: LD_INT 0
41689: PPUSH
// uc_side := your_side ;
41690: LD_ADDR_OWVAR 20
41694: PUSH
41695: LD_OWVAR 2
41699: ST_TO_ADDR
// uc_nation := nation ;
41700: LD_ADDR_OWVAR 21
41704: PUSH
41705: LD_VAR 0 1
41709: ST_TO_ADDR
// InitHc ;
41710: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41714: LD_INT 0
41716: PPUSH
41717: LD_VAR 0 2
41721: PPUSH
41722: LD_VAR 0 3
41726: PPUSH
41727: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
41731: LD_VAR 0 4
41735: PPUSH
41736: LD_VAR 0 5
41740: PPUSH
41741: CALL_OW 428
41745: PUSH
41746: LD_INT 0
41748: EQUAL
41749: IFFALSE 41773
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
41751: CALL_OW 44
41755: PPUSH
41756: LD_VAR 0 4
41760: PPUSH
41761: LD_VAR 0 5
41765: PPUSH
41766: LD_INT 1
41768: PPUSH
41769: CALL_OW 48
// end ;
41773: LD_VAR 0 6
41777: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
41778: LD_INT 0
41780: PPUSH
41781: PPUSH
// uc_side := your_side ;
41782: LD_ADDR_OWVAR 20
41786: PUSH
41787: LD_OWVAR 2
41791: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41792: LD_VAR 0 1
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 3
41805: PUSH
41806: LD_INT 4
41808: PUSH
41809: LD_INT 5
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: IN
41819: IFFALSE 41831
// uc_nation := nation_american else
41821: LD_ADDR_OWVAR 21
41825: PUSH
41826: LD_INT 1
41828: ST_TO_ADDR
41829: GO 41874
// if chassis in [ 11 , 12 , 13 , 14 ] then
41831: LD_VAR 0 1
41835: PUSH
41836: LD_INT 11
41838: PUSH
41839: LD_INT 12
41841: PUSH
41842: LD_INT 13
41844: PUSH
41845: LD_INT 14
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: IN
41854: IFFALSE 41866
// uc_nation := nation_arabian else
41856: LD_ADDR_OWVAR 21
41860: PUSH
41861: LD_INT 2
41863: ST_TO_ADDR
41864: GO 41874
// uc_nation := nation_russian ;
41866: LD_ADDR_OWVAR 21
41870: PUSH
41871: LD_INT 3
41873: ST_TO_ADDR
// vc_chassis := chassis ;
41874: LD_ADDR_OWVAR 37
41878: PUSH
41879: LD_VAR 0 1
41883: ST_TO_ADDR
// vc_engine := engine ;
41884: LD_ADDR_OWVAR 39
41888: PUSH
41889: LD_VAR 0 2
41893: ST_TO_ADDR
// vc_control := control ;
41894: LD_ADDR_OWVAR 38
41898: PUSH
41899: LD_VAR 0 3
41903: ST_TO_ADDR
// vc_weapon := weapon ;
41904: LD_ADDR_OWVAR 40
41908: PUSH
41909: LD_VAR 0 4
41913: ST_TO_ADDR
// un := CreateVehicle ;
41914: LD_ADDR_VAR 0 8
41918: PUSH
41919: CALL_OW 45
41923: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41924: LD_VAR 0 8
41928: PPUSH
41929: LD_INT 0
41931: PPUSH
41932: LD_INT 5
41934: PPUSH
41935: CALL_OW 12
41939: PPUSH
41940: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41944: LD_VAR 0 8
41948: PPUSH
41949: LD_VAR 0 5
41953: PPUSH
41954: LD_VAR 0 6
41958: PPUSH
41959: LD_INT 1
41961: PPUSH
41962: CALL_OW 48
// end ;
41966: LD_VAR 0 7
41970: RET
// export hInvincible ; every 1 do
41971: GO 41973
41973: DISABLE
// hInvincible := [ ] ;
41974: LD_ADDR_EXP 121
41978: PUSH
41979: EMPTY
41980: ST_TO_ADDR
41981: END
// every 10 do var i ;
41982: GO 41984
41984: DISABLE
41985: LD_INT 0
41987: PPUSH
// begin enable ;
41988: ENABLE
// if not hInvincible then
41989: LD_EXP 121
41993: NOT
41994: IFFALSE 41998
// exit ;
41996: GO 42042
// for i in hInvincible do
41998: LD_ADDR_VAR 0 1
42002: PUSH
42003: LD_EXP 121
42007: PUSH
42008: FOR_IN
42009: IFFALSE 42040
// if GetLives ( i ) < 1000 then
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 256
42020: PUSH
42021: LD_INT 1000
42023: LESS
42024: IFFALSE 42038
// SetLives ( i , 1000 ) ;
42026: LD_VAR 0 1
42030: PPUSH
42031: LD_INT 1000
42033: PPUSH
42034: CALL_OW 234
42038: GO 42008
42040: POP
42041: POP
// end ;
42042: PPOPN 1
42044: END
// export function hHackInvincible ; var i ; begin
42045: LD_INT 0
42047: PPUSH
42048: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42049: LD_ADDR_VAR 0 2
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: LD_INT 21
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 21
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: PPUSH
42082: CALL_OW 69
42086: PUSH
42087: FOR_IN
42088: IFFALSE 42149
// if IsSelected ( i ) then
42090: LD_VAR 0 2
42094: PPUSH
42095: CALL_OW 306
42099: IFFALSE 42147
// begin if i in hInvincible then
42101: LD_VAR 0 2
42105: PUSH
42106: LD_EXP 121
42110: IN
42111: IFFALSE 42131
// hInvincible := hInvincible diff i else
42113: LD_ADDR_EXP 121
42117: PUSH
42118: LD_EXP 121
42122: PUSH
42123: LD_VAR 0 2
42127: DIFF
42128: ST_TO_ADDR
42129: GO 42147
// hInvincible := hInvincible union i ;
42131: LD_ADDR_EXP 121
42135: PUSH
42136: LD_EXP 121
42140: PUSH
42141: LD_VAR 0 2
42145: UNION
42146: ST_TO_ADDR
// end ;
42147: GO 42087
42149: POP
42150: POP
// end ;
42151: LD_VAR 0 1
42155: RET
// export function hHackInvisible ; var i , j ; begin
42156: LD_INT 0
42158: PPUSH
42159: PPUSH
42160: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42161: LD_ADDR_VAR 0 2
42165: PUSH
42166: LD_INT 21
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PPUSH
42176: CALL_OW 69
42180: PUSH
42181: FOR_IN
42182: IFFALSE 42206
// if IsSelected ( i ) then
42184: LD_VAR 0 2
42188: PPUSH
42189: CALL_OW 306
42193: IFFALSE 42204
// ComForceInvisible ( i ) ;
42195: LD_VAR 0 2
42199: PPUSH
42200: CALL_OW 496
42204: GO 42181
42206: POP
42207: POP
// end ;
42208: LD_VAR 0 1
42212: RET
// export function hHackChangeYourSide ; begin
42213: LD_INT 0
42215: PPUSH
// if your_side = 8 then
42216: LD_OWVAR 2
42220: PUSH
42221: LD_INT 8
42223: EQUAL
42224: IFFALSE 42236
// your_side := 0 else
42226: LD_ADDR_OWVAR 2
42230: PUSH
42231: LD_INT 0
42233: ST_TO_ADDR
42234: GO 42250
// your_side := your_side + 1 ;
42236: LD_ADDR_OWVAR 2
42240: PUSH
42241: LD_OWVAR 2
42245: PUSH
42246: LD_INT 1
42248: PLUS
42249: ST_TO_ADDR
// end ;
42250: LD_VAR 0 1
42254: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
42259: PPUSH
// for i in all_units do
42260: LD_ADDR_VAR 0 2
42264: PUSH
42265: LD_OWVAR 3
42269: PUSH
42270: FOR_IN
42271: IFFALSE 42349
// if IsSelected ( i ) then
42273: LD_VAR 0 2
42277: PPUSH
42278: CALL_OW 306
42282: IFFALSE 42347
// begin j := GetSide ( i ) ;
42284: LD_ADDR_VAR 0 3
42288: PUSH
42289: LD_VAR 0 2
42293: PPUSH
42294: CALL_OW 255
42298: ST_TO_ADDR
// if j = 8 then
42299: LD_VAR 0 3
42303: PUSH
42304: LD_INT 8
42306: EQUAL
42307: IFFALSE 42319
// j := 0 else
42309: LD_ADDR_VAR 0 3
42313: PUSH
42314: LD_INT 0
42316: ST_TO_ADDR
42317: GO 42333
// j := j + 1 ;
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_VAR 0 3
42328: PUSH
42329: LD_INT 1
42331: PLUS
42332: ST_TO_ADDR
// SetSide ( i , j ) ;
42333: LD_VAR 0 2
42337: PPUSH
42338: LD_VAR 0 3
42342: PPUSH
42343: CALL_OW 235
// end ;
42347: GO 42270
42349: POP
42350: POP
// end ;
42351: LD_VAR 0 1
42355: RET
// export function hHackFog ; begin
42356: LD_INT 0
42358: PPUSH
// FogOff ( true ) ;
42359: LD_INT 1
42361: PPUSH
42362: CALL_OW 344
// end ;
42366: LD_VAR 0 1
42370: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42371: LD_INT 0
42373: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42374: LD_VAR 0 1
42378: PPUSH
42379: LD_VAR 0 2
42383: PPUSH
42384: LD_VAR 0 3
42388: PPUSH
42389: LD_INT 1
42391: PPUSH
42392: LD_INT 1
42394: PPUSH
42395: CALL_OW 483
// CenterOnXY ( x , y ) ;
42399: LD_VAR 0 2
42403: PPUSH
42404: LD_VAR 0 3
42408: PPUSH
42409: CALL_OW 84
// end ;
42413: LD_VAR 0 4
42417: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42418: LD_INT 0
42420: PPUSH
42421: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42422: LD_VAR 0 1
42426: NOT
42427: PUSH
42428: LD_VAR 0 2
42432: PPUSH
42433: LD_VAR 0 3
42437: PPUSH
42438: CALL_OW 488
42442: NOT
42443: OR
42444: PUSH
42445: LD_VAR 0 1
42449: PPUSH
42450: CALL_OW 266
42454: PUSH
42455: LD_INT 3
42457: NONEQUAL
42458: PUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 247
42468: PUSH
42469: LD_INT 1
42471: EQUAL
42472: NOT
42473: AND
42474: OR
42475: IFFALSE 42479
// exit ;
42477: GO 42628
// if GetType ( factory ) = unit_human then
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 247
42488: PUSH
42489: LD_INT 1
42491: EQUAL
42492: IFFALSE 42509
// factory := IsInUnit ( factory ) ;
42494: LD_ADDR_VAR 0 1
42498: PUSH
42499: LD_VAR 0 1
42503: PPUSH
42504: CALL_OW 310
42508: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42509: LD_VAR 0 1
42513: PPUSH
42514: CALL_OW 266
42518: PUSH
42519: LD_INT 3
42521: NONEQUAL
42522: IFFALSE 42526
// exit ;
42524: GO 42628
// if HexInfo ( x , y ) = factory then
42526: LD_VAR 0 2
42530: PPUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: CALL_OW 428
42540: PUSH
42541: LD_VAR 0 1
42545: EQUAL
42546: IFFALSE 42573
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42548: LD_ADDR_EXP 122
42552: PUSH
42553: LD_EXP 122
42557: PPUSH
42558: LD_VAR 0 1
42562: PPUSH
42563: LD_INT 0
42565: PPUSH
42566: CALL_OW 1
42570: ST_TO_ADDR
42571: GO 42624
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42573: LD_ADDR_EXP 122
42577: PUSH
42578: LD_EXP 122
42582: PPUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: LD_VAR 0 1
42592: PPUSH
42593: CALL_OW 255
42597: PUSH
42598: LD_VAR 0 1
42602: PUSH
42603: LD_VAR 0 2
42607: PUSH
42608: LD_VAR 0 3
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: PPUSH
42619: CALL_OW 1
42623: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42624: CALL 42633 0 0
// end ;
42628: LD_VAR 0 4
42632: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
42633: LD_INT 0
42635: PPUSH
42636: PPUSH
42637: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42638: LD_STRING resetFactoryWaypoint();
42640: PPUSH
42641: CALL_OW 559
// if factoryWaypoints then
42645: LD_EXP 122
42649: IFFALSE 42775
// begin list := PrepareArray ( factoryWaypoints ) ;
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_EXP 122
42660: PPUSH
42661: NOP4
42665: ST_TO_ADDR
// for i := 1 to list do
42666: LD_ADDR_VAR 0 2
42670: PUSH
42671: DOUBLE
42672: LD_INT 1
42674: DEC
42675: ST_TO_ADDR
42676: LD_VAR 0 3
42680: PUSH
42681: FOR_TO
42682: IFFALSE 42773
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
42684: LD_STRING setFactoryWaypointXY(
42686: PUSH
42687: LD_VAR 0 3
42691: PUSH
42692: LD_VAR 0 2
42696: ARRAY
42697: PUSH
42698: LD_INT 1
42700: ARRAY
42701: STR
42702: PUSH
42703: LD_STRING ,
42705: STR
42706: PUSH
42707: LD_VAR 0 3
42711: PUSH
42712: LD_VAR 0 2
42716: ARRAY
42717: PUSH
42718: LD_INT 2
42720: ARRAY
42721: STR
42722: PUSH
42723: LD_STRING ,
42725: STR
42726: PUSH
42727: LD_VAR 0 3
42731: PUSH
42732: LD_VAR 0 2
42736: ARRAY
42737: PUSH
42738: LD_INT 3
42740: ARRAY
42741: STR
42742: PUSH
42743: LD_STRING ,
42745: STR
42746: PUSH
42747: LD_VAR 0 3
42751: PUSH
42752: LD_VAR 0 2
42756: ARRAY
42757: PUSH
42758: LD_INT 4
42760: ARRAY
42761: STR
42762: PUSH
42763: LD_STRING )
42765: STR
42766: PPUSH
42767: CALL_OW 559
42771: GO 42681
42773: POP
42774: POP
// end ; end ;
42775: LD_VAR 0 1
42779: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
42780: LD_INT 0
42782: PPUSH
// if HexInfo ( x , y ) = warehouse then
42783: LD_VAR 0 2
42787: PPUSH
42788: LD_VAR 0 3
42792: PPUSH
42793: CALL_OW 428
42797: PUSH
42798: LD_VAR 0 1
42802: EQUAL
42803: IFFALSE 42830
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
42805: LD_ADDR_EXP 123
42809: PUSH
42810: LD_EXP 123
42814: PPUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: LD_INT 0
42822: PPUSH
42823: CALL_OW 1
42827: ST_TO_ADDR
42828: GO 42881
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
42830: LD_ADDR_EXP 123
42834: PUSH
42835: LD_EXP 123
42839: PPUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: CALL_OW 255
42854: PUSH
42855: LD_VAR 0 1
42859: PUSH
42860: LD_VAR 0 2
42864: PUSH
42865: LD_VAR 0 3
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: PPUSH
42876: CALL_OW 1
42880: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
42881: CALL 42890 0 0
// end ;
42885: LD_VAR 0 4
42889: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
42890: LD_INT 0
42892: PPUSH
42893: PPUSH
42894: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
42895: LD_STRING resetWarehouseGatheringPoints();
42897: PPUSH
42898: CALL_OW 559
// if warehouseGatheringPoints then
42902: LD_EXP 123
42906: IFFALSE 43032
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
42908: LD_ADDR_VAR 0 3
42912: PUSH
42913: LD_EXP 123
42917: PPUSH
42918: NOP4
42922: ST_TO_ADDR
// for i := 1 to list do
42923: LD_ADDR_VAR 0 2
42927: PUSH
42928: DOUBLE
42929: LD_INT 1
42931: DEC
42932: ST_TO_ADDR
42933: LD_VAR 0 3
42937: PUSH
42938: FOR_TO
42939: IFFALSE 43030
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
42941: LD_STRING setWarehouseGatheringPointXY(
42943: PUSH
42944: LD_VAR 0 3
42948: PUSH
42949: LD_VAR 0 2
42953: ARRAY
42954: PUSH
42955: LD_INT 1
42957: ARRAY
42958: STR
42959: PUSH
42960: LD_STRING ,
42962: STR
42963: PUSH
42964: LD_VAR 0 3
42968: PUSH
42969: LD_VAR 0 2
42973: ARRAY
42974: PUSH
42975: LD_INT 2
42977: ARRAY
42978: STR
42979: PUSH
42980: LD_STRING ,
42982: STR
42983: PUSH
42984: LD_VAR 0 3
42988: PUSH
42989: LD_VAR 0 2
42993: ARRAY
42994: PUSH
42995: LD_INT 3
42997: ARRAY
42998: STR
42999: PUSH
43000: LD_STRING ,
43002: STR
43003: PUSH
43004: LD_VAR 0 3
43008: PUSH
43009: LD_VAR 0 2
43013: ARRAY
43014: PUSH
43015: LD_INT 4
43017: ARRAY
43018: STR
43019: PUSH
43020: LD_STRING )
43022: STR
43023: PPUSH
43024: CALL_OW 559
43028: GO 42938
43030: POP
43031: POP
// end ; end ;
43032: LD_VAR 0 1
43036: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
43037: LD_EXP 123
43041: IFFALSE 43726
43043: GO 43045
43045: DISABLE
43046: LD_INT 0
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
// begin enable ;
43057: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
43058: LD_ADDR_VAR 0 3
43062: PUSH
43063: LD_EXP 123
43067: PPUSH
43068: NOP4
43072: ST_TO_ADDR
// if not list then
43073: LD_VAR 0 3
43077: NOT
43078: IFFALSE 43082
// exit ;
43080: GO 43726
// for i := 1 to list do
43082: LD_ADDR_VAR 0 1
43086: PUSH
43087: DOUBLE
43088: LD_INT 1
43090: DEC
43091: ST_TO_ADDR
43092: LD_VAR 0 3
43096: PUSH
43097: FOR_TO
43098: IFFALSE 43724
// begin depot := list [ i ] [ 2 ] ;
43100: LD_ADDR_VAR 0 8
43104: PUSH
43105: LD_VAR 0 3
43109: PUSH
43110: LD_VAR 0 1
43114: ARRAY
43115: PUSH
43116: LD_INT 2
43118: ARRAY
43119: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
43120: LD_ADDR_VAR 0 5
43124: PUSH
43125: LD_VAR 0 3
43129: PUSH
43130: LD_VAR 0 1
43134: ARRAY
43135: PUSH
43136: LD_INT 1
43138: ARRAY
43139: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
43140: LD_VAR 0 8
43144: PPUSH
43145: CALL_OW 301
43149: PUSH
43150: LD_VAR 0 5
43154: PUSH
43155: LD_VAR 0 8
43159: PPUSH
43160: CALL_OW 255
43164: NONEQUAL
43165: OR
43166: IFFALSE 43195
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
43168: LD_ADDR_EXP 123
43172: PUSH
43173: LD_EXP 123
43177: PPUSH
43178: LD_VAR 0 8
43182: PPUSH
43183: LD_INT 0
43185: PPUSH
43186: CALL_OW 1
43190: ST_TO_ADDR
// exit ;
43191: POP
43192: POP
43193: GO 43726
// end ; x := list [ i ] [ 3 ] ;
43195: LD_ADDR_VAR 0 6
43199: PUSH
43200: LD_VAR 0 3
43204: PUSH
43205: LD_VAR 0 1
43209: ARRAY
43210: PUSH
43211: LD_INT 3
43213: ARRAY
43214: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
43215: LD_ADDR_VAR 0 7
43219: PUSH
43220: LD_VAR 0 3
43224: PUSH
43225: LD_VAR 0 1
43229: ARRAY
43230: PUSH
43231: LD_INT 4
43233: ARRAY
43234: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
43235: LD_ADDR_VAR 0 9
43239: PUSH
43240: LD_VAR 0 6
43244: PPUSH
43245: LD_VAR 0 7
43249: PPUSH
43250: LD_INT 16
43252: PPUSH
43253: CALL 83543 0 3
43257: ST_TO_ADDR
// if not cratesNearbyPoint then
43258: LD_VAR 0 9
43262: NOT
43263: IFFALSE 43269
// exit ;
43265: POP
43266: POP
43267: GO 43726
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
43269: LD_ADDR_VAR 0 4
43273: PUSH
43274: LD_INT 22
43276: PUSH
43277: LD_VAR 0 5
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: LD_INT 60
43291: PUSH
43292: EMPTY
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 91
43301: PUSH
43302: LD_VAR 0 8
43306: PUSH
43307: LD_INT 6
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 25
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 25
43330: PUSH
43331: LD_INT 16
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: PPUSH
43349: CALL_OW 69
43353: PUSH
43354: LD_VAR 0 8
43358: PPUSH
43359: CALL_OW 313
43363: PPUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 60
43369: PUSH
43370: EMPTY
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 25
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 25
43392: PUSH
43393: LD_INT 16
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PPUSH
43409: CALL_OW 72
43413: UNION
43414: ST_TO_ADDR
// if tmp then
43415: LD_VAR 0 4
43419: IFFALSE 43499
// begin tmp := ShrinkArray ( tmp , 3 ) ;
43421: LD_ADDR_VAR 0 4
43425: PUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: LD_INT 3
43433: PPUSH
43434: CALL 81512 0 2
43438: ST_TO_ADDR
// for j in tmp do
43439: LD_ADDR_VAR 0 2
43443: PUSH
43444: LD_VAR 0 4
43448: PUSH
43449: FOR_IN
43450: IFFALSE 43493
// begin if IsInUnit ( j ) then
43452: LD_VAR 0 2
43456: PPUSH
43457: CALL_OW 310
43461: IFFALSE 43472
// ComExit ( j ) ;
43463: LD_VAR 0 2
43467: PPUSH
43468: CALL 81595 0 1
// AddComCollect ( j , x , y ) ;
43472: LD_VAR 0 2
43476: PPUSH
43477: LD_VAR 0 6
43481: PPUSH
43482: LD_VAR 0 7
43486: PPUSH
43487: CALL_OW 177
// end ;
43491: GO 43449
43493: POP
43494: POP
// exit ;
43495: POP
43496: POP
43497: GO 43726
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
43499: LD_ADDR_VAR 0 4
43503: PUSH
43504: LD_INT 22
43506: PUSH
43507: LD_VAR 0 5
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 91
43518: PUSH
43519: LD_VAR 0 8
43523: PUSH
43524: LD_INT 8
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 34
43537: PUSH
43538: LD_INT 12
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 34
43547: PUSH
43548: LD_INT 51
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 34
43557: PUSH
43558: LD_INT 32
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 34
43567: PUSH
43568: LD_INT 89
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: PPUSH
43587: CALL_OW 69
43591: ST_TO_ADDR
// if tmp then
43592: LD_VAR 0 4
43596: IFFALSE 43722
// begin for j in tmp do
43598: LD_ADDR_VAR 0 2
43602: PUSH
43603: LD_VAR 0 4
43607: PUSH
43608: FOR_IN
43609: IFFALSE 43720
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
43611: LD_VAR 0 2
43615: PPUSH
43616: CALL_OW 262
43620: PUSH
43621: LD_INT 3
43623: EQUAL
43624: PUSH
43625: LD_VAR 0 2
43629: PPUSH
43630: CALL_OW 261
43634: PUSH
43635: LD_INT 20
43637: GREATER
43638: OR
43639: PUSH
43640: LD_VAR 0 2
43644: PPUSH
43645: CALL_OW 314
43649: NOT
43650: AND
43651: PUSH
43652: LD_VAR 0 2
43656: PPUSH
43657: CALL_OW 263
43661: PUSH
43662: LD_INT 1
43664: NONEQUAL
43665: PUSH
43666: LD_VAR 0 2
43670: PPUSH
43671: CALL_OW 311
43675: OR
43676: AND
43677: IFFALSE 43718
// begin ComCollect ( j , x , y ) ;
43679: LD_VAR 0 2
43683: PPUSH
43684: LD_VAR 0 6
43688: PPUSH
43689: LD_VAR 0 7
43693: PPUSH
43694: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
43698: LD_VAR 0 2
43702: PPUSH
43703: LD_VAR 0 8
43707: PPUSH
43708: CALL_OW 172
// exit ;
43712: POP
43713: POP
43714: POP
43715: POP
43716: GO 43726
// end ;
43718: GO 43608
43720: POP
43721: POP
// end ; end ;
43722: GO 43097
43724: POP
43725: POP
// end ; end_of_file
43726: PPOPN 9
43728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43729: LD_INT 0
43731: PPUSH
43732: PPUSH
// if exist_mode then
43733: LD_VAR 0 2
43737: IFFALSE 43762
// unit := CreateCharacter ( prefix & ident ) else
43739: LD_ADDR_VAR 0 5
43743: PUSH
43744: LD_VAR 0 3
43748: PUSH
43749: LD_VAR 0 1
43753: STR
43754: PPUSH
43755: CALL_OW 34
43759: ST_TO_ADDR
43760: GO 43777
// unit := NewCharacter ( ident ) ;
43762: LD_ADDR_VAR 0 5
43766: PUSH
43767: LD_VAR 0 1
43771: PPUSH
43772: CALL_OW 25
43776: ST_TO_ADDR
// result := unit ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_VAR 0 5
43786: ST_TO_ADDR
// end ;
43787: LD_VAR 0 4
43791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43792: LD_INT 0
43794: PPUSH
43795: PPUSH
// if not side or not nation then
43796: LD_VAR 0 1
43800: NOT
43801: PUSH
43802: LD_VAR 0 2
43806: NOT
43807: OR
43808: IFFALSE 43812
// exit ;
43810: GO 44580
// case nation of nation_american :
43812: LD_VAR 0 2
43816: PUSH
43817: LD_INT 1
43819: DOUBLE
43820: EQUAL
43821: IFTRUE 43825
43823: GO 44039
43825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43826: LD_ADDR_VAR 0 4
43830: PUSH
43831: LD_INT 35
43833: PUSH
43834: LD_INT 45
43836: PUSH
43837: LD_INT 46
43839: PUSH
43840: LD_INT 47
43842: PUSH
43843: LD_INT 82
43845: PUSH
43846: LD_INT 83
43848: PUSH
43849: LD_INT 84
43851: PUSH
43852: LD_INT 85
43854: PUSH
43855: LD_INT 86
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 6
43866: PUSH
43867: LD_INT 15
43869: PUSH
43870: LD_INT 16
43872: PUSH
43873: LD_INT 7
43875: PUSH
43876: LD_INT 12
43878: PUSH
43879: LD_INT 13
43881: PUSH
43882: LD_INT 10
43884: PUSH
43885: LD_INT 14
43887: PUSH
43888: LD_INT 20
43890: PUSH
43891: LD_INT 21
43893: PUSH
43894: LD_INT 22
43896: PUSH
43897: LD_INT 25
43899: PUSH
43900: LD_INT 32
43902: PUSH
43903: LD_INT 27
43905: PUSH
43906: LD_INT 36
43908: PUSH
43909: LD_INT 69
43911: PUSH
43912: LD_INT 39
43914: PUSH
43915: LD_INT 34
43917: PUSH
43918: LD_INT 40
43920: PUSH
43921: LD_INT 48
43923: PUSH
43924: LD_INT 49
43926: PUSH
43927: LD_INT 50
43929: PUSH
43930: LD_INT 51
43932: PUSH
43933: LD_INT 52
43935: PUSH
43936: LD_INT 53
43938: PUSH
43939: LD_INT 54
43941: PUSH
43942: LD_INT 55
43944: PUSH
43945: LD_INT 56
43947: PUSH
43948: LD_INT 57
43950: PUSH
43951: LD_INT 58
43953: PUSH
43954: LD_INT 59
43956: PUSH
43957: LD_INT 60
43959: PUSH
43960: LD_INT 61
43962: PUSH
43963: LD_INT 62
43965: PUSH
43966: LD_INT 80
43968: PUSH
43969: LD_INT 82
43971: PUSH
43972: LD_INT 83
43974: PUSH
43975: LD_INT 84
43977: PUSH
43978: LD_INT 85
43980: PUSH
43981: LD_INT 86
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: ST_TO_ADDR
44037: GO 44504
44039: LD_INT 2
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44273
44047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44048: LD_ADDR_VAR 0 4
44052: PUSH
44053: LD_INT 35
44055: PUSH
44056: LD_INT 45
44058: PUSH
44059: LD_INT 46
44061: PUSH
44062: LD_INT 47
44064: PUSH
44065: LD_INT 82
44067: PUSH
44068: LD_INT 83
44070: PUSH
44071: LD_INT 84
44073: PUSH
44074: LD_INT 85
44076: PUSH
44077: LD_INT 87
44079: PUSH
44080: LD_INT 70
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 11
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 4
44094: PUSH
44095: LD_INT 5
44097: PUSH
44098: LD_INT 6
44100: PUSH
44101: LD_INT 15
44103: PUSH
44104: LD_INT 18
44106: PUSH
44107: LD_INT 7
44109: PUSH
44110: LD_INT 17
44112: PUSH
44113: LD_INT 8
44115: PUSH
44116: LD_INT 20
44118: PUSH
44119: LD_INT 21
44121: PUSH
44122: LD_INT 22
44124: PUSH
44125: LD_INT 72
44127: PUSH
44128: LD_INT 26
44130: PUSH
44131: LD_INT 69
44133: PUSH
44134: LD_INT 39
44136: PUSH
44137: LD_INT 40
44139: PUSH
44140: LD_INT 41
44142: PUSH
44143: LD_INT 42
44145: PUSH
44146: LD_INT 43
44148: PUSH
44149: LD_INT 48
44151: PUSH
44152: LD_INT 49
44154: PUSH
44155: LD_INT 50
44157: PUSH
44158: LD_INT 51
44160: PUSH
44161: LD_INT 52
44163: PUSH
44164: LD_INT 53
44166: PUSH
44167: LD_INT 54
44169: PUSH
44170: LD_INT 55
44172: PUSH
44173: LD_INT 56
44175: PUSH
44176: LD_INT 60
44178: PUSH
44179: LD_INT 61
44181: PUSH
44182: LD_INT 62
44184: PUSH
44185: LD_INT 66
44187: PUSH
44188: LD_INT 67
44190: PUSH
44191: LD_INT 68
44193: PUSH
44194: LD_INT 81
44196: PUSH
44197: LD_INT 82
44199: PUSH
44200: LD_INT 83
44202: PUSH
44203: LD_INT 84
44205: PUSH
44206: LD_INT 85
44208: PUSH
44209: LD_INT 87
44211: PUSH
44212: LD_INT 88
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
44271: GO 44504
44273: LD_INT 3
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44503
44281: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44282: LD_ADDR_VAR 0 4
44286: PUSH
44287: LD_INT 46
44289: PUSH
44290: LD_INT 47
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 82
44301: PUSH
44302: LD_INT 83
44304: PUSH
44305: LD_INT 84
44307: PUSH
44308: LD_INT 85
44310: PUSH
44311: LD_INT 86
44313: PUSH
44314: LD_INT 11
44316: PUSH
44317: LD_INT 9
44319: PUSH
44320: LD_INT 20
44322: PUSH
44323: LD_INT 19
44325: PUSH
44326: LD_INT 21
44328: PUSH
44329: LD_INT 24
44331: PUSH
44332: LD_INT 22
44334: PUSH
44335: LD_INT 25
44337: PUSH
44338: LD_INT 28
44340: PUSH
44341: LD_INT 29
44343: PUSH
44344: LD_INT 30
44346: PUSH
44347: LD_INT 31
44349: PUSH
44350: LD_INT 37
44352: PUSH
44353: LD_INT 38
44355: PUSH
44356: LD_INT 32
44358: PUSH
44359: LD_INT 27
44361: PUSH
44362: LD_INT 33
44364: PUSH
44365: LD_INT 69
44367: PUSH
44368: LD_INT 39
44370: PUSH
44371: LD_INT 34
44373: PUSH
44374: LD_INT 40
44376: PUSH
44377: LD_INT 71
44379: PUSH
44380: LD_INT 23
44382: PUSH
44383: LD_INT 44
44385: PUSH
44386: LD_INT 48
44388: PUSH
44389: LD_INT 49
44391: PUSH
44392: LD_INT 50
44394: PUSH
44395: LD_INT 51
44397: PUSH
44398: LD_INT 52
44400: PUSH
44401: LD_INT 53
44403: PUSH
44404: LD_INT 54
44406: PUSH
44407: LD_INT 55
44409: PUSH
44410: LD_INT 56
44412: PUSH
44413: LD_INT 57
44415: PUSH
44416: LD_INT 58
44418: PUSH
44419: LD_INT 59
44421: PUSH
44422: LD_INT 63
44424: PUSH
44425: LD_INT 64
44427: PUSH
44428: LD_INT 65
44430: PUSH
44431: LD_INT 82
44433: PUSH
44434: LD_INT 83
44436: PUSH
44437: LD_INT 84
44439: PUSH
44440: LD_INT 85
44442: PUSH
44443: LD_INT 86
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
44501: GO 44504
44503: POP
// if state > - 1 and state < 3 then
44504: LD_VAR 0 3
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: GREATER
44513: PUSH
44514: LD_VAR 0 3
44518: PUSH
44519: LD_INT 3
44521: LESS
44522: AND
44523: IFFALSE 44580
// for i in result do
44525: LD_ADDR_VAR 0 5
44529: PUSH
44530: LD_VAR 0 4
44534: PUSH
44535: FOR_IN
44536: IFFALSE 44578
// if GetTech ( i , side ) <> state then
44538: LD_VAR 0 5
44542: PPUSH
44543: LD_VAR 0 1
44547: PPUSH
44548: CALL_OW 321
44552: PUSH
44553: LD_VAR 0 3
44557: NONEQUAL
44558: IFFALSE 44576
// result := result diff i ;
44560: LD_ADDR_VAR 0 4
44564: PUSH
44565: LD_VAR 0 4
44569: PUSH
44570: LD_VAR 0 5
44574: DIFF
44575: ST_TO_ADDR
44576: GO 44535
44578: POP
44579: POP
// end ;
44580: LD_VAR 0 4
44584: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44585: LD_INT 0
44587: PPUSH
44588: PPUSH
44589: PPUSH
// result := true ;
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: LD_INT 1
44597: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44598: LD_ADDR_VAR 0 5
44602: PUSH
44603: LD_VAR 0 2
44607: PPUSH
44608: CALL_OW 480
44612: ST_TO_ADDR
// if not tmp then
44613: LD_VAR 0 5
44617: NOT
44618: IFFALSE 44622
// exit ;
44620: GO 44671
// for i in tmp do
44622: LD_ADDR_VAR 0 4
44626: PUSH
44627: LD_VAR 0 5
44631: PUSH
44632: FOR_IN
44633: IFFALSE 44669
// if GetTech ( i , side ) <> state_researched then
44635: LD_VAR 0 4
44639: PPUSH
44640: LD_VAR 0 1
44644: PPUSH
44645: CALL_OW 321
44649: PUSH
44650: LD_INT 2
44652: NONEQUAL
44653: IFFALSE 44667
// begin result := false ;
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_INT 0
44662: ST_TO_ADDR
// exit ;
44663: POP
44664: POP
44665: GO 44671
// end ;
44667: GO 44632
44669: POP
44670: POP
// end ;
44671: LD_VAR 0 3
44675: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44676: LD_INT 0
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44691: LD_VAR 0 1
44695: NOT
44696: PUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: CALL_OW 257
44706: PUSH
44707: LD_INT 9
44709: NONEQUAL
44710: OR
44711: IFFALSE 44715
// exit ;
44713: GO 45288
// side := GetSide ( unit ) ;
44715: LD_ADDR_VAR 0 9
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 255
44729: ST_TO_ADDR
// tech_space := tech_spacanom ;
44730: LD_ADDR_VAR 0 12
44734: PUSH
44735: LD_INT 29
44737: ST_TO_ADDR
// tech_time := tech_taurad ;
44738: LD_ADDR_VAR 0 13
44742: PUSH
44743: LD_INT 28
44745: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44746: LD_ADDR_VAR 0 11
44750: PUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: CALL_OW 310
44760: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44761: LD_VAR 0 11
44765: PPUSH
44766: CALL_OW 247
44770: PUSH
44771: LD_INT 2
44773: EQUAL
44774: IFFALSE 44778
// exit ;
44776: GO 45288
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44778: LD_ADDR_VAR 0 8
44782: PUSH
44783: LD_INT 81
44785: PUSH
44786: LD_VAR 0 9
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 21
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PPUSH
44816: CALL_OW 69
44820: ST_TO_ADDR
// if not tmp then
44821: LD_VAR 0 8
44825: NOT
44826: IFFALSE 44830
// exit ;
44828: GO 45288
// if in_unit then
44830: LD_VAR 0 11
44834: IFFALSE 44858
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44836: LD_ADDR_VAR 0 10
44840: PUSH
44841: LD_VAR 0 8
44845: PPUSH
44846: LD_VAR 0 11
44850: PPUSH
44851: CALL_OW 74
44855: ST_TO_ADDR
44856: GO 44878
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44858: LD_ADDR_VAR 0 10
44862: PUSH
44863: LD_VAR 0 8
44867: PPUSH
44868: LD_VAR 0 1
44872: PPUSH
44873: CALL_OW 74
44877: ST_TO_ADDR
// if not enemy then
44878: LD_VAR 0 10
44882: NOT
44883: IFFALSE 44887
// exit ;
44885: GO 45288
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44887: LD_VAR 0 11
44891: PUSH
44892: LD_VAR 0 11
44896: PPUSH
44897: LD_VAR 0 10
44901: PPUSH
44902: CALL_OW 296
44906: PUSH
44907: LD_INT 13
44909: GREATER
44910: AND
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: LD_VAR 0 10
44921: PPUSH
44922: CALL_OW 296
44926: PUSH
44927: LD_INT 12
44929: GREATER
44930: OR
44931: IFFALSE 44935
// exit ;
44933: GO 45288
// missile := [ 1 ] ;
44935: LD_ADDR_VAR 0 14
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44946: LD_VAR 0 9
44950: PPUSH
44951: LD_VAR 0 12
44955: PPUSH
44956: CALL_OW 325
44960: IFFALSE 44989
// missile := Replace ( missile , missile + 1 , 2 ) ;
44962: LD_ADDR_VAR 0 14
44966: PUSH
44967: LD_VAR 0 14
44971: PPUSH
44972: LD_VAR 0 14
44976: PUSH
44977: LD_INT 1
44979: PLUS
44980: PPUSH
44981: LD_INT 2
44983: PPUSH
44984: CALL_OW 1
44988: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44989: LD_VAR 0 9
44993: PPUSH
44994: LD_VAR 0 13
44998: PPUSH
44999: CALL_OW 325
45003: PUSH
45004: LD_VAR 0 10
45008: PPUSH
45009: CALL_OW 255
45013: PPUSH
45014: LD_VAR 0 13
45018: PPUSH
45019: CALL_OW 325
45023: NOT
45024: AND
45025: IFFALSE 45054
// missile := Replace ( missile , missile + 1 , 3 ) ;
45027: LD_ADDR_VAR 0 14
45031: PUSH
45032: LD_VAR 0 14
45036: PPUSH
45037: LD_VAR 0 14
45041: PUSH
45042: LD_INT 1
45044: PLUS
45045: PPUSH
45046: LD_INT 3
45048: PPUSH
45049: CALL_OW 1
45053: ST_TO_ADDR
// if missile < 2 then
45054: LD_VAR 0 14
45058: PUSH
45059: LD_INT 2
45061: LESS
45062: IFFALSE 45066
// exit ;
45064: GO 45288
// x := GetX ( enemy ) ;
45066: LD_ADDR_VAR 0 4
45070: PUSH
45071: LD_VAR 0 10
45075: PPUSH
45076: CALL_OW 250
45080: ST_TO_ADDR
// y := GetY ( enemy ) ;
45081: LD_ADDR_VAR 0 5
45085: PUSH
45086: LD_VAR 0 10
45090: PPUSH
45091: CALL_OW 251
45095: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45096: LD_ADDR_VAR 0 6
45100: PUSH
45101: LD_VAR 0 4
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PPUSH
45110: LD_INT 1
45112: PPUSH
45113: CALL_OW 12
45117: PLUS
45118: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45119: LD_ADDR_VAR 0 7
45123: PUSH
45124: LD_VAR 0 5
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PPUSH
45133: LD_INT 1
45135: PPUSH
45136: CALL_OW 12
45140: PLUS
45141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45142: LD_VAR 0 6
45146: PPUSH
45147: LD_VAR 0 7
45151: PPUSH
45152: CALL_OW 488
45156: NOT
45157: IFFALSE 45179
// begin _x := x ;
45159: LD_ADDR_VAR 0 6
45163: PUSH
45164: LD_VAR 0 4
45168: ST_TO_ADDR
// _y := y ;
45169: LD_ADDR_VAR 0 7
45173: PUSH
45174: LD_VAR 0 5
45178: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45179: LD_ADDR_VAR 0 3
45183: PUSH
45184: LD_INT 1
45186: PPUSH
45187: LD_VAR 0 14
45191: PPUSH
45192: CALL_OW 12
45196: ST_TO_ADDR
// case i of 1 :
45197: LD_VAR 0 3
45201: PUSH
45202: LD_INT 1
45204: DOUBLE
45205: EQUAL
45206: IFTRUE 45210
45208: GO 45227
45210: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45211: LD_VAR 0 1
45215: PPUSH
45216: LD_VAR 0 10
45220: PPUSH
45221: CALL_OW 115
45225: GO 45288
45227: LD_INT 2
45229: DOUBLE
45230: EQUAL
45231: IFTRUE 45235
45233: GO 45257
45235: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45236: LD_VAR 0 1
45240: PPUSH
45241: LD_VAR 0 6
45245: PPUSH
45246: LD_VAR 0 7
45250: PPUSH
45251: CALL_OW 153
45255: GO 45288
45257: LD_INT 3
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45287
45265: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45266: LD_VAR 0 1
45270: PPUSH
45271: LD_VAR 0 6
45275: PPUSH
45276: LD_VAR 0 7
45280: PPUSH
45281: CALL_OW 154
45285: GO 45288
45287: POP
// end ;
45288: LD_VAR 0 2
45292: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45293: LD_INT 0
45295: PPUSH
45296: PPUSH
45297: PPUSH
45298: PPUSH
45299: PPUSH
45300: PPUSH
// if not unit or not building then
45301: LD_VAR 0 1
45305: NOT
45306: PUSH
45307: LD_VAR 0 2
45311: NOT
45312: OR
45313: IFFALSE 45317
// exit ;
45315: GO 45475
// x := GetX ( building ) ;
45317: LD_ADDR_VAR 0 5
45321: PUSH
45322: LD_VAR 0 2
45326: PPUSH
45327: CALL_OW 250
45331: ST_TO_ADDR
// y := GetY ( building ) ;
45332: LD_ADDR_VAR 0 6
45336: PUSH
45337: LD_VAR 0 2
45341: PPUSH
45342: CALL_OW 251
45346: ST_TO_ADDR
// for i = 0 to 5 do
45347: LD_ADDR_VAR 0 4
45351: PUSH
45352: DOUBLE
45353: LD_INT 0
45355: DEC
45356: ST_TO_ADDR
45357: LD_INT 5
45359: PUSH
45360: FOR_TO
45361: IFFALSE 45473
// begin _x := ShiftX ( x , i , 3 ) ;
45363: LD_ADDR_VAR 0 7
45367: PUSH
45368: LD_VAR 0 5
45372: PPUSH
45373: LD_VAR 0 4
45377: PPUSH
45378: LD_INT 3
45380: PPUSH
45381: CALL_OW 272
45385: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45386: LD_ADDR_VAR 0 8
45390: PUSH
45391: LD_VAR 0 6
45395: PPUSH
45396: LD_VAR 0 4
45400: PPUSH
45401: LD_INT 3
45403: PPUSH
45404: CALL_OW 273
45408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45409: LD_VAR 0 7
45413: PPUSH
45414: LD_VAR 0 8
45418: PPUSH
45419: CALL_OW 488
45423: NOT
45424: IFFALSE 45428
// continue ;
45426: GO 45360
// if HexInfo ( _x , _y ) = 0 then
45428: LD_VAR 0 7
45432: PPUSH
45433: LD_VAR 0 8
45437: PPUSH
45438: CALL_OW 428
45442: PUSH
45443: LD_INT 0
45445: EQUAL
45446: IFFALSE 45471
// begin ComMoveXY ( unit , _x , _y ) ;
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_VAR 0 7
45457: PPUSH
45458: LD_VAR 0 8
45462: PPUSH
45463: CALL_OW 111
// exit ;
45467: POP
45468: POP
45469: GO 45475
// end ; end ;
45471: GO 45360
45473: POP
45474: POP
// end ;
45475: LD_VAR 0 3
45479: RET
// export function ScanBase ( side , base_area ) ; begin
45480: LD_INT 0
45482: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45483: LD_ADDR_VAR 0 3
45487: PUSH
45488: LD_VAR 0 2
45492: PPUSH
45493: LD_INT 81
45495: PUSH
45496: LD_VAR 0 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PPUSH
45505: CALL_OW 70
45509: ST_TO_ADDR
// end ;
45510: LD_VAR 0 3
45514: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45515: LD_INT 0
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
// result := false ;
45521: LD_ADDR_VAR 0 2
45525: PUSH
45526: LD_INT 0
45528: ST_TO_ADDR
// side := GetSide ( unit ) ;
45529: LD_ADDR_VAR 0 3
45533: PUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: CALL_OW 255
45543: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45544: LD_ADDR_VAR 0 4
45548: PUSH
45549: LD_VAR 0 1
45553: PPUSH
45554: CALL_OW 248
45558: ST_TO_ADDR
// case nat of 1 :
45559: LD_VAR 0 4
45563: PUSH
45564: LD_INT 1
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45583
45572: POP
// tech := tech_lassight ; 2 :
45573: LD_ADDR_VAR 0 5
45577: PUSH
45578: LD_INT 12
45580: ST_TO_ADDR
45581: GO 45622
45583: LD_INT 2
45585: DOUBLE
45586: EQUAL
45587: IFTRUE 45591
45589: GO 45602
45591: POP
// tech := tech_mortar ; 3 :
45592: LD_ADDR_VAR 0 5
45596: PUSH
45597: LD_INT 41
45599: ST_TO_ADDR
45600: GO 45622
45602: LD_INT 3
45604: DOUBLE
45605: EQUAL
45606: IFTRUE 45610
45608: GO 45621
45610: POP
// tech := tech_bazooka ; end ;
45611: LD_ADDR_VAR 0 5
45615: PUSH
45616: LD_INT 44
45618: ST_TO_ADDR
45619: GO 45622
45621: POP
// if Researched ( side , tech ) then
45622: LD_VAR 0 3
45626: PPUSH
45627: LD_VAR 0 5
45631: PPUSH
45632: CALL_OW 325
45636: IFFALSE 45663
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45638: LD_ADDR_VAR 0 2
45642: PUSH
45643: LD_INT 5
45645: PUSH
45646: LD_INT 8
45648: PUSH
45649: LD_INT 9
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: PUSH
45657: LD_VAR 0 4
45661: ARRAY
45662: ST_TO_ADDR
// end ;
45663: LD_VAR 0 2
45667: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45668: LD_INT 0
45670: PPUSH
45671: PPUSH
45672: PPUSH
// if not mines then
45673: LD_VAR 0 2
45677: NOT
45678: IFFALSE 45682
// exit ;
45680: GO 45826
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45682: LD_ADDR_VAR 0 5
45686: PUSH
45687: LD_INT 81
45689: PUSH
45690: LD_VAR 0 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 3
45701: PUSH
45702: LD_INT 21
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PPUSH
45720: CALL_OW 69
45724: ST_TO_ADDR
// for i in mines do
45725: LD_ADDR_VAR 0 4
45729: PUSH
45730: LD_VAR 0 2
45734: PUSH
45735: FOR_IN
45736: IFFALSE 45824
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45738: LD_VAR 0 4
45742: PUSH
45743: LD_INT 1
45745: ARRAY
45746: PPUSH
45747: LD_VAR 0 4
45751: PUSH
45752: LD_INT 2
45754: ARRAY
45755: PPUSH
45756: CALL_OW 458
45760: NOT
45761: IFFALSE 45765
// continue ;
45763: GO 45735
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45765: LD_VAR 0 4
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PPUSH
45774: LD_VAR 0 4
45778: PUSH
45779: LD_INT 2
45781: ARRAY
45782: PPUSH
45783: CALL_OW 428
45787: PUSH
45788: LD_VAR 0 5
45792: IN
45793: IFFALSE 45822
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45795: LD_VAR 0 4
45799: PUSH
45800: LD_INT 1
45802: ARRAY
45803: PPUSH
45804: LD_VAR 0 4
45808: PUSH
45809: LD_INT 2
45811: ARRAY
45812: PPUSH
45813: LD_VAR 0 1
45817: PPUSH
45818: CALL_OW 456
// end ;
45822: GO 45735
45824: POP
45825: POP
// end ;
45826: LD_VAR 0 3
45830: RET
// export function Count ( array ) ; var i ; begin
45831: LD_INT 0
45833: PPUSH
45834: PPUSH
// result := 0 ;
45835: LD_ADDR_VAR 0 2
45839: PUSH
45840: LD_INT 0
45842: ST_TO_ADDR
// for i in array do
45843: LD_ADDR_VAR 0 3
45847: PUSH
45848: LD_VAR 0 1
45852: PUSH
45853: FOR_IN
45854: IFFALSE 45878
// if i then
45856: LD_VAR 0 3
45860: IFFALSE 45876
// result := result + 1 ;
45862: LD_ADDR_VAR 0 2
45866: PUSH
45867: LD_VAR 0 2
45871: PUSH
45872: LD_INT 1
45874: PLUS
45875: ST_TO_ADDR
45876: GO 45853
45878: POP
45879: POP
// end ;
45880: LD_VAR 0 2
45884: RET
// export function IsEmpty ( building ) ; begin
45885: LD_INT 0
45887: PPUSH
// if not building then
45888: LD_VAR 0 1
45892: NOT
45893: IFFALSE 45897
// exit ;
45895: GO 45940
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45897: LD_ADDR_VAR 0 2
45901: PUSH
45902: LD_VAR 0 1
45906: PUSH
45907: LD_INT 22
45909: PUSH
45910: LD_VAR 0 1
45914: PPUSH
45915: CALL_OW 255
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 58
45926: PUSH
45927: EMPTY
45928: LIST
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PPUSH
45934: CALL_OW 69
45938: IN
45939: ST_TO_ADDR
// end ;
45940: LD_VAR 0 2
45944: RET
// export function IsNotFull ( building ) ; var places ; begin
45945: LD_INT 0
45947: PPUSH
45948: PPUSH
// if not building then
45949: LD_VAR 0 1
45953: NOT
45954: IFFALSE 45958
// exit ;
45956: GO 46129
// result := false ;
45958: LD_ADDR_VAR 0 2
45962: PUSH
45963: LD_INT 0
45965: ST_TO_ADDR
// places := 0 ;
45966: LD_ADDR_VAR 0 3
45970: PUSH
45971: LD_INT 0
45973: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
45974: LD_VAR 0 1
45978: PPUSH
45979: CALL_OW 266
45983: PUSH
45984: LD_INT 0
45986: DOUBLE
45987: EQUAL
45988: IFTRUE 46046
45990: LD_INT 1
45992: DOUBLE
45993: EQUAL
45994: IFTRUE 46046
45996: LD_INT 6
45998: DOUBLE
45999: EQUAL
46000: IFTRUE 46046
46002: LD_INT 7
46004: DOUBLE
46005: EQUAL
46006: IFTRUE 46046
46008: LD_INT 8
46010: DOUBLE
46011: EQUAL
46012: IFTRUE 46046
46014: LD_INT 4
46016: DOUBLE
46017: EQUAL
46018: IFTRUE 46046
46020: LD_INT 5
46022: DOUBLE
46023: EQUAL
46024: IFTRUE 46046
46026: LD_INT 2
46028: DOUBLE
46029: EQUAL
46030: IFTRUE 46046
46032: LD_INT 3
46034: DOUBLE
46035: EQUAL
46036: IFTRUE 46046
46038: LD_INT 35
46040: DOUBLE
46041: EQUAL
46042: IFTRUE 46046
46044: GO 46057
46046: POP
// places := 6 ; b_bunker , b_breastwork :
46047: LD_ADDR_VAR 0 3
46051: PUSH
46052: LD_INT 6
46054: ST_TO_ADDR
46055: GO 46102
46057: LD_INT 32
46059: DOUBLE
46060: EQUAL
46061: IFTRUE 46071
46063: LD_INT 31
46065: DOUBLE
46066: EQUAL
46067: IFTRUE 46071
46069: GO 46082
46071: POP
// places := 1 ; b_control_tower :
46072: LD_ADDR_VAR 0 3
46076: PUSH
46077: LD_INT 1
46079: ST_TO_ADDR
46080: GO 46102
46082: LD_INT 36
46084: DOUBLE
46085: EQUAL
46086: IFTRUE 46090
46088: GO 46101
46090: POP
// places := 3 ; end ;
46091: LD_ADDR_VAR 0 3
46095: PUSH
46096: LD_INT 3
46098: ST_TO_ADDR
46099: GO 46102
46101: POP
// if places then
46102: LD_VAR 0 3
46106: IFFALSE 46129
// result := UnitsInside ( building ) < places ;
46108: LD_ADDR_VAR 0 2
46112: PUSH
46113: LD_VAR 0 1
46117: PPUSH
46118: CALL_OW 313
46122: PUSH
46123: LD_VAR 0 3
46127: LESS
46128: ST_TO_ADDR
// end ;
46129: LD_VAR 0 2
46133: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46134: LD_INT 0
46136: PPUSH
46137: PPUSH
46138: PPUSH
46139: PPUSH
// tmp := [ ] ;
46140: LD_ADDR_VAR 0 3
46144: PUSH
46145: EMPTY
46146: ST_TO_ADDR
// list := [ ] ;
46147: LD_ADDR_VAR 0 5
46151: PUSH
46152: EMPTY
46153: ST_TO_ADDR
// for i = 16 to 25 do
46154: LD_ADDR_VAR 0 4
46158: PUSH
46159: DOUBLE
46160: LD_INT 16
46162: DEC
46163: ST_TO_ADDR
46164: LD_INT 25
46166: PUSH
46167: FOR_TO
46168: IFFALSE 46241
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46170: LD_ADDR_VAR 0 3
46174: PUSH
46175: LD_VAR 0 3
46179: PUSH
46180: LD_INT 22
46182: PUSH
46183: LD_VAR 0 1
46187: PPUSH
46188: CALL_OW 255
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 91
46199: PUSH
46200: LD_VAR 0 1
46204: PUSH
46205: LD_INT 6
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 30
46215: PUSH
46216: LD_VAR 0 4
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: PPUSH
46233: CALL_OW 69
46237: ADD
46238: ST_TO_ADDR
46239: GO 46167
46241: POP
46242: POP
// for i = 1 to tmp do
46243: LD_ADDR_VAR 0 4
46247: PUSH
46248: DOUBLE
46249: LD_INT 1
46251: DEC
46252: ST_TO_ADDR
46253: LD_VAR 0 3
46257: PUSH
46258: FOR_TO
46259: IFFALSE 46347
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46261: LD_ADDR_VAR 0 5
46265: PUSH
46266: LD_VAR 0 5
46270: PUSH
46271: LD_VAR 0 3
46275: PUSH
46276: LD_VAR 0 4
46280: ARRAY
46281: PPUSH
46282: CALL_OW 266
46286: PUSH
46287: LD_VAR 0 3
46291: PUSH
46292: LD_VAR 0 4
46296: ARRAY
46297: PPUSH
46298: CALL_OW 250
46302: PUSH
46303: LD_VAR 0 3
46307: PUSH
46308: LD_VAR 0 4
46312: ARRAY
46313: PPUSH
46314: CALL_OW 251
46318: PUSH
46319: LD_VAR 0 3
46323: PUSH
46324: LD_VAR 0 4
46328: ARRAY
46329: PPUSH
46330: CALL_OW 254
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: ADD
46344: ST_TO_ADDR
46345: GO 46258
46347: POP
46348: POP
// result := list ;
46349: LD_ADDR_VAR 0 2
46353: PUSH
46354: LD_VAR 0 5
46358: ST_TO_ADDR
// end ;
46359: LD_VAR 0 2
46363: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46364: LD_INT 0
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
// if not factory then
46373: LD_VAR 0 1
46377: NOT
46378: IFFALSE 46382
// exit ;
46380: GO 46975
// if control = control_apeman then
46382: LD_VAR 0 4
46386: PUSH
46387: LD_INT 5
46389: EQUAL
46390: IFFALSE 46499
// begin tmp := UnitsInside ( factory ) ;
46392: LD_ADDR_VAR 0 8
46396: PUSH
46397: LD_VAR 0 1
46401: PPUSH
46402: CALL_OW 313
46406: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46407: LD_VAR 0 8
46411: PPUSH
46412: LD_INT 25
46414: PUSH
46415: LD_INT 12
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PPUSH
46422: CALL_OW 72
46426: NOT
46427: IFFALSE 46437
// control := control_manual ;
46429: LD_ADDR_VAR 0 4
46433: PUSH
46434: LD_INT 1
46436: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46437: LD_ADDR_VAR 0 8
46441: PUSH
46442: LD_VAR 0 1
46446: PPUSH
46447: CALL 46134 0 1
46451: ST_TO_ADDR
// if tmp then
46452: LD_VAR 0 8
46456: IFFALSE 46499
// begin for i in tmp do
46458: LD_ADDR_VAR 0 7
46462: PUSH
46463: LD_VAR 0 8
46467: PUSH
46468: FOR_IN
46469: IFFALSE 46497
// if i [ 1 ] = b_ext_radio then
46471: LD_VAR 0 7
46475: PUSH
46476: LD_INT 1
46478: ARRAY
46479: PUSH
46480: LD_INT 22
46482: EQUAL
46483: IFFALSE 46495
// begin control := control_remote ;
46485: LD_ADDR_VAR 0 4
46489: PUSH
46490: LD_INT 2
46492: ST_TO_ADDR
// break ;
46493: GO 46497
// end ;
46495: GO 46468
46497: POP
46498: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46499: LD_VAR 0 1
46503: PPUSH
46504: LD_VAR 0 2
46508: PPUSH
46509: LD_VAR 0 3
46513: PPUSH
46514: LD_VAR 0 4
46518: PPUSH
46519: LD_VAR 0 5
46523: PPUSH
46524: CALL_OW 448
46528: IFFALSE 46563
// begin result := [ chassis , engine , control , weapon ] ;
46530: LD_ADDR_VAR 0 6
46534: PUSH
46535: LD_VAR 0 2
46539: PUSH
46540: LD_VAR 0 3
46544: PUSH
46545: LD_VAR 0 4
46549: PUSH
46550: LD_VAR 0 5
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: ST_TO_ADDR
// exit ;
46561: GO 46975
// end ; _chassis := AvailableChassisList ( factory ) ;
46563: LD_ADDR_VAR 0 9
46567: PUSH
46568: LD_VAR 0 1
46572: PPUSH
46573: CALL_OW 475
46577: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46578: LD_ADDR_VAR 0 11
46582: PUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: CALL_OW 476
46592: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46593: LD_ADDR_VAR 0 12
46597: PUSH
46598: LD_VAR 0 1
46602: PPUSH
46603: CALL_OW 477
46607: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46608: LD_ADDR_VAR 0 10
46612: PUSH
46613: LD_VAR 0 1
46617: PPUSH
46618: CALL_OW 478
46622: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46623: LD_VAR 0 9
46627: NOT
46628: PUSH
46629: LD_VAR 0 11
46633: NOT
46634: OR
46635: PUSH
46636: LD_VAR 0 12
46640: NOT
46641: OR
46642: PUSH
46643: LD_VAR 0 10
46647: NOT
46648: OR
46649: IFFALSE 46684
// begin result := [ chassis , engine , control , weapon ] ;
46651: LD_ADDR_VAR 0 6
46655: PUSH
46656: LD_VAR 0 2
46660: PUSH
46661: LD_VAR 0 3
46665: PUSH
46666: LD_VAR 0 4
46670: PUSH
46671: LD_VAR 0 5
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// exit ;
46682: GO 46975
// end ; if not chassis in _chassis then
46684: LD_VAR 0 2
46688: PUSH
46689: LD_VAR 0 9
46693: IN
46694: NOT
46695: IFFALSE 46721
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46697: LD_ADDR_VAR 0 2
46701: PUSH
46702: LD_VAR 0 9
46706: PUSH
46707: LD_INT 1
46709: PPUSH
46710: LD_VAR 0 9
46714: PPUSH
46715: CALL_OW 12
46719: ARRAY
46720: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46721: LD_VAR 0 2
46725: PPUSH
46726: LD_VAR 0 3
46730: PPUSH
46731: CALL 46980 0 2
46735: NOT
46736: IFFALSE 46795
// repeat engine := _engine [ 1 ] ;
46738: LD_ADDR_VAR 0 3
46742: PUSH
46743: LD_VAR 0 11
46747: PUSH
46748: LD_INT 1
46750: ARRAY
46751: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46752: LD_ADDR_VAR 0 11
46756: PUSH
46757: LD_VAR 0 11
46761: PPUSH
46762: LD_INT 1
46764: PPUSH
46765: CALL_OW 3
46769: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46770: LD_VAR 0 2
46774: PPUSH
46775: LD_VAR 0 3
46779: PPUSH
46780: CALL 46980 0 2
46784: PUSH
46785: LD_VAR 0 11
46789: PUSH
46790: EMPTY
46791: EQUAL
46792: OR
46793: IFFALSE 46738
// if not control in _control then
46795: LD_VAR 0 4
46799: PUSH
46800: LD_VAR 0 12
46804: IN
46805: NOT
46806: IFFALSE 46832
// control := _control [ rand ( 1 , _control ) ] ;
46808: LD_ADDR_VAR 0 4
46812: PUSH
46813: LD_VAR 0 12
46817: PUSH
46818: LD_INT 1
46820: PPUSH
46821: LD_VAR 0 12
46825: PPUSH
46826: CALL_OW 12
46830: ARRAY
46831: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46832: LD_VAR 0 2
46836: PPUSH
46837: LD_VAR 0 5
46841: PPUSH
46842: CALL 47200 0 2
46846: NOT
46847: IFFALSE 46906
// repeat weapon := _weapon [ 1 ] ;
46849: LD_ADDR_VAR 0 5
46853: PUSH
46854: LD_VAR 0 10
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46863: LD_ADDR_VAR 0 10
46867: PUSH
46868: LD_VAR 0 10
46872: PPUSH
46873: LD_INT 1
46875: PPUSH
46876: CALL_OW 3
46880: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46881: LD_VAR 0 2
46885: PPUSH
46886: LD_VAR 0 5
46890: PPUSH
46891: CALL 47200 0 2
46895: PUSH
46896: LD_VAR 0 10
46900: PUSH
46901: EMPTY
46902: EQUAL
46903: OR
46904: IFFALSE 46849
// result := [ ] ;
46906: LD_ADDR_VAR 0 6
46910: PUSH
46911: EMPTY
46912: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46913: LD_VAR 0 1
46917: PPUSH
46918: LD_VAR 0 2
46922: PPUSH
46923: LD_VAR 0 3
46927: PPUSH
46928: LD_VAR 0 4
46932: PPUSH
46933: LD_VAR 0 5
46937: PPUSH
46938: CALL_OW 448
46942: IFFALSE 46975
// result := [ chassis , engine , control , weapon ] ;
46944: LD_ADDR_VAR 0 6
46948: PUSH
46949: LD_VAR 0 2
46953: PUSH
46954: LD_VAR 0 3
46958: PUSH
46959: LD_VAR 0 4
46963: PUSH
46964: LD_VAR 0 5
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// end ;
46975: LD_VAR 0 6
46979: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46980: LD_INT 0
46982: PPUSH
// if not chassis or not engine then
46983: LD_VAR 0 1
46987: NOT
46988: PUSH
46989: LD_VAR 0 2
46993: NOT
46994: OR
46995: IFFALSE 46999
// exit ;
46997: GO 47195
// case engine of engine_solar :
46999: LD_VAR 0 2
47003: PUSH
47004: LD_INT 2
47006: DOUBLE
47007: EQUAL
47008: IFTRUE 47012
47010: GO 47050
47012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: LD_INT 11
47020: PUSH
47021: LD_INT 12
47023: PUSH
47024: LD_INT 13
47026: PUSH
47027: LD_INT 14
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: ST_TO_ADDR
47048: GO 47179
47050: LD_INT 1
47052: DOUBLE
47053: EQUAL
47054: IFTRUE 47058
47056: GO 47120
47058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47059: LD_ADDR_VAR 0 3
47063: PUSH
47064: LD_INT 11
47066: PUSH
47067: LD_INT 12
47069: PUSH
47070: LD_INT 13
47072: PUSH
47073: LD_INT 14
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: LD_INT 4
47087: PUSH
47088: LD_INT 5
47090: PUSH
47091: LD_INT 21
47093: PUSH
47094: LD_INT 23
47096: PUSH
47097: LD_INT 22
47099: PUSH
47100: LD_INT 24
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
47118: GO 47179
47120: LD_INT 3
47122: DOUBLE
47123: EQUAL
47124: IFTRUE 47128
47126: GO 47178
47128: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47129: LD_ADDR_VAR 0 3
47133: PUSH
47134: LD_INT 13
47136: PUSH
47137: LD_INT 14
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: LD_INT 5
47151: PUSH
47152: LD_INT 21
47154: PUSH
47155: LD_INT 22
47157: PUSH
47158: LD_INT 23
47160: PUSH
47161: LD_INT 24
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
47176: GO 47179
47178: POP
// result := ( chassis in result ) ;
47179: LD_ADDR_VAR 0 3
47183: PUSH
47184: LD_VAR 0 1
47188: PUSH
47189: LD_VAR 0 3
47193: IN
47194: ST_TO_ADDR
// end ;
47195: LD_VAR 0 3
47199: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47200: LD_INT 0
47202: PPUSH
// if not chassis or not weapon then
47203: LD_VAR 0 1
47207: NOT
47208: PUSH
47209: LD_VAR 0 2
47213: NOT
47214: OR
47215: IFFALSE 47219
// exit ;
47217: GO 48279
// case weapon of us_machine_gun :
47219: LD_VAR 0 2
47223: PUSH
47224: LD_INT 2
47226: DOUBLE
47227: EQUAL
47228: IFTRUE 47232
47230: GO 47262
47232: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47233: LD_ADDR_VAR 0 3
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: LD_INT 5
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
47260: GO 48263
47262: LD_INT 3
47264: DOUBLE
47265: EQUAL
47266: IFTRUE 47270
47268: GO 47300
47270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47271: LD_ADDR_VAR 0 3
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: LD_INT 5
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: ST_TO_ADDR
47298: GO 48263
47300: LD_INT 11
47302: DOUBLE
47303: EQUAL
47304: IFTRUE 47308
47306: GO 47338
47308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47309: LD_ADDR_VAR 0 3
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: LD_INT 5
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: ST_TO_ADDR
47336: GO 48263
47338: LD_INT 4
47340: DOUBLE
47341: EQUAL
47342: IFTRUE 47346
47344: GO 47372
47346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47347: LD_ADDR_VAR 0 3
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: LD_INT 5
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
47370: GO 48263
47372: LD_INT 5
47374: DOUBLE
47375: EQUAL
47376: IFTRUE 47380
47378: GO 47406
47380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47381: LD_ADDR_VAR 0 3
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 4
47394: PUSH
47395: LD_INT 5
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
47404: GO 48263
47406: LD_INT 9
47408: DOUBLE
47409: EQUAL
47410: IFTRUE 47414
47412: GO 47440
47414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47415: LD_ADDR_VAR 0 3
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: LD_INT 5
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: ST_TO_ADDR
47438: GO 48263
47440: LD_INT 7
47442: DOUBLE
47443: EQUAL
47444: IFTRUE 47448
47446: GO 47474
47448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47449: LD_ADDR_VAR 0 3
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: LD_INT 4
47462: PUSH
47463: LD_INT 5
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: ST_TO_ADDR
47472: GO 48263
47474: LD_INT 12
47476: DOUBLE
47477: EQUAL
47478: IFTRUE 47482
47480: GO 47508
47482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47483: LD_ADDR_VAR 0 3
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: LD_INT 4
47496: PUSH
47497: LD_INT 5
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: ST_TO_ADDR
47506: GO 48263
47508: LD_INT 13
47510: DOUBLE
47511: EQUAL
47512: IFTRUE 47516
47514: GO 47542
47516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47517: LD_ADDR_VAR 0 3
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 4
47530: PUSH
47531: LD_INT 5
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: ST_TO_ADDR
47540: GO 48263
47542: LD_INT 14
47544: DOUBLE
47545: EQUAL
47546: IFTRUE 47550
47548: GO 47568
47550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47551: LD_ADDR_VAR 0 3
47555: PUSH
47556: LD_INT 4
47558: PUSH
47559: LD_INT 5
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: ST_TO_ADDR
47566: GO 48263
47568: LD_INT 6
47570: DOUBLE
47571: EQUAL
47572: IFTRUE 47576
47574: GO 47594
47576: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47577: LD_ADDR_VAR 0 3
47581: PUSH
47582: LD_INT 4
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: ST_TO_ADDR
47592: GO 48263
47594: LD_INT 10
47596: DOUBLE
47597: EQUAL
47598: IFTRUE 47602
47600: GO 47620
47602: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47603: LD_ADDR_VAR 0 3
47607: PUSH
47608: LD_INT 4
47610: PUSH
47611: LD_INT 5
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: ST_TO_ADDR
47618: GO 48263
47620: LD_INT 22
47622: DOUBLE
47623: EQUAL
47624: IFTRUE 47628
47626: GO 47654
47628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47629: LD_ADDR_VAR 0 3
47633: PUSH
47634: LD_INT 11
47636: PUSH
47637: LD_INT 12
47639: PUSH
47640: LD_INT 13
47642: PUSH
47643: LD_INT 14
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
47652: GO 48263
47654: LD_INT 23
47656: DOUBLE
47657: EQUAL
47658: IFTRUE 47662
47660: GO 47688
47662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47663: LD_ADDR_VAR 0 3
47667: PUSH
47668: LD_INT 11
47670: PUSH
47671: LD_INT 12
47673: PUSH
47674: LD_INT 13
47676: PUSH
47677: LD_INT 14
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
47686: GO 48263
47688: LD_INT 24
47690: DOUBLE
47691: EQUAL
47692: IFTRUE 47696
47694: GO 47722
47696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47697: LD_ADDR_VAR 0 3
47701: PUSH
47702: LD_INT 11
47704: PUSH
47705: LD_INT 12
47707: PUSH
47708: LD_INT 13
47710: PUSH
47711: LD_INT 14
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
47720: GO 48263
47722: LD_INT 30
47724: DOUBLE
47725: EQUAL
47726: IFTRUE 47730
47728: GO 47756
47730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47731: LD_ADDR_VAR 0 3
47735: PUSH
47736: LD_INT 11
47738: PUSH
47739: LD_INT 12
47741: PUSH
47742: LD_INT 13
47744: PUSH
47745: LD_INT 14
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
47754: GO 48263
47756: LD_INT 25
47758: DOUBLE
47759: EQUAL
47760: IFTRUE 47764
47762: GO 47782
47764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47765: LD_ADDR_VAR 0 3
47769: PUSH
47770: LD_INT 13
47772: PUSH
47773: LD_INT 14
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: ST_TO_ADDR
47780: GO 48263
47782: LD_INT 27
47784: DOUBLE
47785: EQUAL
47786: IFTRUE 47790
47788: GO 47808
47790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47791: LD_ADDR_VAR 0 3
47795: PUSH
47796: LD_INT 13
47798: PUSH
47799: LD_INT 14
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: ST_TO_ADDR
47806: GO 48263
47808: LD_INT 92
47810: DOUBLE
47811: EQUAL
47812: IFTRUE 47816
47814: GO 47842
47816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47817: LD_ADDR_VAR 0 3
47821: PUSH
47822: LD_INT 11
47824: PUSH
47825: LD_INT 12
47827: PUSH
47828: LD_INT 13
47830: PUSH
47831: LD_INT 14
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
47840: GO 48263
47842: LD_INT 28
47844: DOUBLE
47845: EQUAL
47846: IFTRUE 47850
47848: GO 47868
47850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47851: LD_ADDR_VAR 0 3
47855: PUSH
47856: LD_INT 13
47858: PUSH
47859: LD_INT 14
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: ST_TO_ADDR
47866: GO 48263
47868: LD_INT 29
47870: DOUBLE
47871: EQUAL
47872: IFTRUE 47876
47874: GO 47894
47876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47877: LD_ADDR_VAR 0 3
47881: PUSH
47882: LD_INT 13
47884: PUSH
47885: LD_INT 14
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: ST_TO_ADDR
47892: GO 48263
47894: LD_INT 31
47896: DOUBLE
47897: EQUAL
47898: IFTRUE 47902
47900: GO 47920
47902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47903: LD_ADDR_VAR 0 3
47907: PUSH
47908: LD_INT 13
47910: PUSH
47911: LD_INT 14
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: ST_TO_ADDR
47918: GO 48263
47920: LD_INT 26
47922: DOUBLE
47923: EQUAL
47924: IFTRUE 47928
47926: GO 47946
47928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47929: LD_ADDR_VAR 0 3
47933: PUSH
47934: LD_INT 13
47936: PUSH
47937: LD_INT 14
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: ST_TO_ADDR
47944: GO 48263
47946: LD_INT 42
47948: DOUBLE
47949: EQUAL
47950: IFTRUE 47954
47952: GO 47980
47954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_INT 21
47962: PUSH
47963: LD_INT 22
47965: PUSH
47966: LD_INT 23
47968: PUSH
47969: LD_INT 24
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: ST_TO_ADDR
47978: GO 48263
47980: LD_INT 43
47982: DOUBLE
47983: EQUAL
47984: IFTRUE 47988
47986: GO 48014
47988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47989: LD_ADDR_VAR 0 3
47993: PUSH
47994: LD_INT 21
47996: PUSH
47997: LD_INT 22
47999: PUSH
48000: LD_INT 23
48002: PUSH
48003: LD_INT 24
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: ST_TO_ADDR
48012: GO 48263
48014: LD_INT 44
48016: DOUBLE
48017: EQUAL
48018: IFTRUE 48022
48020: GO 48048
48022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48023: LD_ADDR_VAR 0 3
48027: PUSH
48028: LD_INT 21
48030: PUSH
48031: LD_INT 22
48033: PUSH
48034: LD_INT 23
48036: PUSH
48037: LD_INT 24
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
48046: GO 48263
48048: LD_INT 45
48050: DOUBLE
48051: EQUAL
48052: IFTRUE 48056
48054: GO 48082
48056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48057: LD_ADDR_VAR 0 3
48061: PUSH
48062: LD_INT 21
48064: PUSH
48065: LD_INT 22
48067: PUSH
48068: LD_INT 23
48070: PUSH
48071: LD_INT 24
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
48080: GO 48263
48082: LD_INT 49
48084: DOUBLE
48085: EQUAL
48086: IFTRUE 48090
48088: GO 48116
48090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48091: LD_ADDR_VAR 0 3
48095: PUSH
48096: LD_INT 21
48098: PUSH
48099: LD_INT 22
48101: PUSH
48102: LD_INT 23
48104: PUSH
48105: LD_INT 24
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: ST_TO_ADDR
48114: GO 48263
48116: LD_INT 51
48118: DOUBLE
48119: EQUAL
48120: IFTRUE 48124
48122: GO 48150
48124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48125: LD_ADDR_VAR 0 3
48129: PUSH
48130: LD_INT 21
48132: PUSH
48133: LD_INT 22
48135: PUSH
48136: LD_INT 23
48138: PUSH
48139: LD_INT 24
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
48148: GO 48263
48150: LD_INT 52
48152: DOUBLE
48153: EQUAL
48154: IFTRUE 48158
48156: GO 48184
48158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48159: LD_ADDR_VAR 0 3
48163: PUSH
48164: LD_INT 21
48166: PUSH
48167: LD_INT 22
48169: PUSH
48170: LD_INT 23
48172: PUSH
48173: LD_INT 24
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
48182: GO 48263
48184: LD_INT 53
48186: DOUBLE
48187: EQUAL
48188: IFTRUE 48192
48190: GO 48210
48192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48193: LD_ADDR_VAR 0 3
48197: PUSH
48198: LD_INT 23
48200: PUSH
48201: LD_INT 24
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: ST_TO_ADDR
48208: GO 48263
48210: LD_INT 46
48212: DOUBLE
48213: EQUAL
48214: IFTRUE 48218
48216: GO 48236
48218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48219: LD_ADDR_VAR 0 3
48223: PUSH
48224: LD_INT 23
48226: PUSH
48227: LD_INT 24
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: ST_TO_ADDR
48234: GO 48263
48236: LD_INT 47
48238: DOUBLE
48239: EQUAL
48240: IFTRUE 48244
48242: GO 48262
48244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48245: LD_ADDR_VAR 0 3
48249: PUSH
48250: LD_INT 23
48252: PUSH
48253: LD_INT 24
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: ST_TO_ADDR
48260: GO 48263
48262: POP
// result := ( chassis in result ) ;
48263: LD_ADDR_VAR 0 3
48267: PUSH
48268: LD_VAR 0 1
48272: PUSH
48273: LD_VAR 0 3
48277: IN
48278: ST_TO_ADDR
// end ;
48279: LD_VAR 0 3
48283: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48284: LD_INT 0
48286: PPUSH
48287: PPUSH
48288: PPUSH
48289: PPUSH
48290: PPUSH
48291: PPUSH
48292: PPUSH
// result := array ;
48293: LD_ADDR_VAR 0 5
48297: PUSH
48298: LD_VAR 0 1
48302: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48303: LD_VAR 0 1
48307: NOT
48308: PUSH
48309: LD_VAR 0 2
48313: NOT
48314: OR
48315: PUSH
48316: LD_VAR 0 3
48320: NOT
48321: OR
48322: PUSH
48323: LD_VAR 0 2
48327: PUSH
48328: LD_VAR 0 1
48332: GREATER
48333: OR
48334: PUSH
48335: LD_VAR 0 3
48339: PUSH
48340: LD_VAR 0 1
48344: GREATER
48345: OR
48346: IFFALSE 48350
// exit ;
48348: GO 48646
// if direction then
48350: LD_VAR 0 4
48354: IFFALSE 48418
// begin d := 1 ;
48356: LD_ADDR_VAR 0 9
48360: PUSH
48361: LD_INT 1
48363: ST_TO_ADDR
// if i_from > i_to then
48364: LD_VAR 0 2
48368: PUSH
48369: LD_VAR 0 3
48373: GREATER
48374: IFFALSE 48400
// length := ( array - i_from ) + i_to else
48376: LD_ADDR_VAR 0 11
48380: PUSH
48381: LD_VAR 0 1
48385: PUSH
48386: LD_VAR 0 2
48390: MINUS
48391: PUSH
48392: LD_VAR 0 3
48396: PLUS
48397: ST_TO_ADDR
48398: GO 48416
// length := i_to - i_from ;
48400: LD_ADDR_VAR 0 11
48404: PUSH
48405: LD_VAR 0 3
48409: PUSH
48410: LD_VAR 0 2
48414: MINUS
48415: ST_TO_ADDR
// end else
48416: GO 48479
// begin d := - 1 ;
48418: LD_ADDR_VAR 0 9
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: ST_TO_ADDR
// if i_from > i_to then
48427: LD_VAR 0 2
48431: PUSH
48432: LD_VAR 0 3
48436: GREATER
48437: IFFALSE 48457
// length := i_from - i_to else
48439: LD_ADDR_VAR 0 11
48443: PUSH
48444: LD_VAR 0 2
48448: PUSH
48449: LD_VAR 0 3
48453: MINUS
48454: ST_TO_ADDR
48455: GO 48479
// length := ( array - i_to ) + i_from ;
48457: LD_ADDR_VAR 0 11
48461: PUSH
48462: LD_VAR 0 1
48466: PUSH
48467: LD_VAR 0 3
48471: MINUS
48472: PUSH
48473: LD_VAR 0 2
48477: PLUS
48478: ST_TO_ADDR
// end ; if not length then
48479: LD_VAR 0 11
48483: NOT
48484: IFFALSE 48488
// exit ;
48486: GO 48646
// tmp := array ;
48488: LD_ADDR_VAR 0 10
48492: PUSH
48493: LD_VAR 0 1
48497: ST_TO_ADDR
// for i = 1 to length do
48498: LD_ADDR_VAR 0 6
48502: PUSH
48503: DOUBLE
48504: LD_INT 1
48506: DEC
48507: ST_TO_ADDR
48508: LD_VAR 0 11
48512: PUSH
48513: FOR_TO
48514: IFFALSE 48634
// begin for j = 1 to array do
48516: LD_ADDR_VAR 0 7
48520: PUSH
48521: DOUBLE
48522: LD_INT 1
48524: DEC
48525: ST_TO_ADDR
48526: LD_VAR 0 1
48530: PUSH
48531: FOR_TO
48532: IFFALSE 48620
// begin k := j + d ;
48534: LD_ADDR_VAR 0 8
48538: PUSH
48539: LD_VAR 0 7
48543: PUSH
48544: LD_VAR 0 9
48548: PLUS
48549: ST_TO_ADDR
// if k > array then
48550: LD_VAR 0 8
48554: PUSH
48555: LD_VAR 0 1
48559: GREATER
48560: IFFALSE 48570
// k := 1 ;
48562: LD_ADDR_VAR 0 8
48566: PUSH
48567: LD_INT 1
48569: ST_TO_ADDR
// if not k then
48570: LD_VAR 0 8
48574: NOT
48575: IFFALSE 48587
// k := array ;
48577: LD_ADDR_VAR 0 8
48581: PUSH
48582: LD_VAR 0 1
48586: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48587: LD_ADDR_VAR 0 10
48591: PUSH
48592: LD_VAR 0 10
48596: PPUSH
48597: LD_VAR 0 8
48601: PPUSH
48602: LD_VAR 0 1
48606: PUSH
48607: LD_VAR 0 7
48611: ARRAY
48612: PPUSH
48613: CALL_OW 1
48617: ST_TO_ADDR
// end ;
48618: GO 48531
48620: POP
48621: POP
// array := tmp ;
48622: LD_ADDR_VAR 0 1
48626: PUSH
48627: LD_VAR 0 10
48631: ST_TO_ADDR
// end ;
48632: GO 48513
48634: POP
48635: POP
// result := array ;
48636: LD_ADDR_VAR 0 5
48640: PUSH
48641: LD_VAR 0 1
48645: ST_TO_ADDR
// end ;
48646: LD_VAR 0 5
48650: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48651: LD_INT 0
48653: PPUSH
48654: PPUSH
// result := 0 ;
48655: LD_ADDR_VAR 0 3
48659: PUSH
48660: LD_INT 0
48662: ST_TO_ADDR
// if not array or not value in array then
48663: LD_VAR 0 1
48667: NOT
48668: PUSH
48669: LD_VAR 0 2
48673: PUSH
48674: LD_VAR 0 1
48678: IN
48679: NOT
48680: OR
48681: IFFALSE 48685
// exit ;
48683: GO 48739
// for i = 1 to array do
48685: LD_ADDR_VAR 0 4
48689: PUSH
48690: DOUBLE
48691: LD_INT 1
48693: DEC
48694: ST_TO_ADDR
48695: LD_VAR 0 1
48699: PUSH
48700: FOR_TO
48701: IFFALSE 48737
// if value = array [ i ] then
48703: LD_VAR 0 2
48707: PUSH
48708: LD_VAR 0 1
48712: PUSH
48713: LD_VAR 0 4
48717: ARRAY
48718: EQUAL
48719: IFFALSE 48735
// begin result := i ;
48721: LD_ADDR_VAR 0 3
48725: PUSH
48726: LD_VAR 0 4
48730: ST_TO_ADDR
// exit ;
48731: POP
48732: POP
48733: GO 48739
// end ;
48735: GO 48700
48737: POP
48738: POP
// end ;
48739: LD_VAR 0 3
48743: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48744: LD_INT 0
48746: PPUSH
// vc_chassis := chassis ;
48747: LD_ADDR_OWVAR 37
48751: PUSH
48752: LD_VAR 0 1
48756: ST_TO_ADDR
// vc_engine := engine ;
48757: LD_ADDR_OWVAR 39
48761: PUSH
48762: LD_VAR 0 2
48766: ST_TO_ADDR
// vc_control := control ;
48767: LD_ADDR_OWVAR 38
48771: PUSH
48772: LD_VAR 0 3
48776: ST_TO_ADDR
// vc_weapon := weapon ;
48777: LD_ADDR_OWVAR 40
48781: PUSH
48782: LD_VAR 0 4
48786: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48787: LD_ADDR_OWVAR 41
48791: PUSH
48792: LD_VAR 0 5
48796: ST_TO_ADDR
// end ;
48797: LD_VAR 0 6
48801: RET
// export function WantPlant ( unit ) ; var task ; begin
48802: LD_INT 0
48804: PPUSH
48805: PPUSH
// result := false ;
48806: LD_ADDR_VAR 0 2
48810: PUSH
48811: LD_INT 0
48813: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48814: LD_ADDR_VAR 0 3
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 437
48828: ST_TO_ADDR
// if task then
48829: LD_VAR 0 3
48833: IFFALSE 48861
// if task [ 1 ] [ 1 ] = p then
48835: LD_VAR 0 3
48839: PUSH
48840: LD_INT 1
48842: ARRAY
48843: PUSH
48844: LD_INT 1
48846: ARRAY
48847: PUSH
48848: LD_STRING p
48850: EQUAL
48851: IFFALSE 48861
// result := true ;
48853: LD_ADDR_VAR 0 2
48857: PUSH
48858: LD_INT 1
48860: ST_TO_ADDR
// end ;
48861: LD_VAR 0 2
48865: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48866: LD_INT 0
48868: PPUSH
48869: PPUSH
48870: PPUSH
48871: PPUSH
// if pos < 1 then
48872: LD_VAR 0 2
48876: PUSH
48877: LD_INT 1
48879: LESS
48880: IFFALSE 48884
// exit ;
48882: GO 49187
// if pos = 1 then
48884: LD_VAR 0 2
48888: PUSH
48889: LD_INT 1
48891: EQUAL
48892: IFFALSE 48925
// result := Replace ( arr , pos [ 1 ] , value ) else
48894: LD_ADDR_VAR 0 4
48898: PUSH
48899: LD_VAR 0 1
48903: PPUSH
48904: LD_VAR 0 2
48908: PUSH
48909: LD_INT 1
48911: ARRAY
48912: PPUSH
48913: LD_VAR 0 3
48917: PPUSH
48918: CALL_OW 1
48922: ST_TO_ADDR
48923: GO 49187
// begin tmp := arr ;
48925: LD_ADDR_VAR 0 6
48929: PUSH
48930: LD_VAR 0 1
48934: ST_TO_ADDR
// s_arr := [ tmp ] ;
48935: LD_ADDR_VAR 0 7
48939: PUSH
48940: LD_VAR 0 6
48944: PUSH
48945: EMPTY
48946: LIST
48947: ST_TO_ADDR
// for i = 1 to pos - 1 do
48948: LD_ADDR_VAR 0 5
48952: PUSH
48953: DOUBLE
48954: LD_INT 1
48956: DEC
48957: ST_TO_ADDR
48958: LD_VAR 0 2
48962: PUSH
48963: LD_INT 1
48965: MINUS
48966: PUSH
48967: FOR_TO
48968: IFFALSE 49013
// begin tmp := tmp [ pos [ i ] ] ;
48970: LD_ADDR_VAR 0 6
48974: PUSH
48975: LD_VAR 0 6
48979: PUSH
48980: LD_VAR 0 2
48984: PUSH
48985: LD_VAR 0 5
48989: ARRAY
48990: ARRAY
48991: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48992: LD_ADDR_VAR 0 7
48996: PUSH
48997: LD_VAR 0 7
49001: PUSH
49002: LD_VAR 0 6
49006: PUSH
49007: EMPTY
49008: LIST
49009: ADD
49010: ST_TO_ADDR
// end ;
49011: GO 48967
49013: POP
49014: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49015: LD_ADDR_VAR 0 6
49019: PUSH
49020: LD_VAR 0 6
49024: PPUSH
49025: LD_VAR 0 2
49029: PUSH
49030: LD_VAR 0 2
49034: ARRAY
49035: PPUSH
49036: LD_VAR 0 3
49040: PPUSH
49041: CALL_OW 1
49045: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49046: LD_ADDR_VAR 0 7
49050: PUSH
49051: LD_VAR 0 7
49055: PPUSH
49056: LD_VAR 0 7
49060: PPUSH
49061: LD_VAR 0 6
49065: PPUSH
49066: CALL_OW 1
49070: ST_TO_ADDR
// for i = s_arr downto 2 do
49071: LD_ADDR_VAR 0 5
49075: PUSH
49076: DOUBLE
49077: LD_VAR 0 7
49081: INC
49082: ST_TO_ADDR
49083: LD_INT 2
49085: PUSH
49086: FOR_DOWNTO
49087: IFFALSE 49171
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49089: LD_ADDR_VAR 0 6
49093: PUSH
49094: LD_VAR 0 7
49098: PUSH
49099: LD_VAR 0 5
49103: PUSH
49104: LD_INT 1
49106: MINUS
49107: ARRAY
49108: PPUSH
49109: LD_VAR 0 2
49113: PUSH
49114: LD_VAR 0 5
49118: PUSH
49119: LD_INT 1
49121: MINUS
49122: ARRAY
49123: PPUSH
49124: LD_VAR 0 7
49128: PUSH
49129: LD_VAR 0 5
49133: ARRAY
49134: PPUSH
49135: CALL_OW 1
49139: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49140: LD_ADDR_VAR 0 7
49144: PUSH
49145: LD_VAR 0 7
49149: PPUSH
49150: LD_VAR 0 5
49154: PUSH
49155: LD_INT 1
49157: MINUS
49158: PPUSH
49159: LD_VAR 0 6
49163: PPUSH
49164: CALL_OW 1
49168: ST_TO_ADDR
// end ;
49169: GO 49086
49171: POP
49172: POP
// result := s_arr [ 1 ] ;
49173: LD_ADDR_VAR 0 4
49177: PUSH
49178: LD_VAR 0 7
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: ST_TO_ADDR
// end ; end ;
49187: LD_VAR 0 4
49191: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49192: LD_INT 0
49194: PPUSH
49195: PPUSH
// if not list then
49196: LD_VAR 0 1
49200: NOT
49201: IFFALSE 49205
// exit ;
49203: GO 49296
// i := list [ pos1 ] ;
49205: LD_ADDR_VAR 0 5
49209: PUSH
49210: LD_VAR 0 1
49214: PUSH
49215: LD_VAR 0 2
49219: ARRAY
49220: ST_TO_ADDR
// if not i then
49221: LD_VAR 0 5
49225: NOT
49226: IFFALSE 49230
// exit ;
49228: GO 49296
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49230: LD_ADDR_VAR 0 1
49234: PUSH
49235: LD_VAR 0 1
49239: PPUSH
49240: LD_VAR 0 2
49244: PPUSH
49245: LD_VAR 0 1
49249: PUSH
49250: LD_VAR 0 3
49254: ARRAY
49255: PPUSH
49256: CALL_OW 1
49260: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49261: LD_ADDR_VAR 0 1
49265: PUSH
49266: LD_VAR 0 1
49270: PPUSH
49271: LD_VAR 0 3
49275: PPUSH
49276: LD_VAR 0 5
49280: PPUSH
49281: CALL_OW 1
49285: ST_TO_ADDR
// result := list ;
49286: LD_ADDR_VAR 0 4
49290: PUSH
49291: LD_VAR 0 1
49295: ST_TO_ADDR
// end ;
49296: LD_VAR 0 4
49300: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49301: LD_INT 0
49303: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49304: LD_ADDR_VAR 0 5
49308: PUSH
49309: LD_VAR 0 1
49313: PPUSH
49314: CALL_OW 250
49318: PPUSH
49319: LD_VAR 0 1
49323: PPUSH
49324: CALL_OW 251
49328: PPUSH
49329: LD_VAR 0 2
49333: PPUSH
49334: LD_VAR 0 3
49338: PPUSH
49339: LD_VAR 0 4
49343: PPUSH
49344: CALL 49354 0 5
49348: ST_TO_ADDR
// end ;
49349: LD_VAR 0 5
49353: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49354: LD_INT 0
49356: PPUSH
49357: PPUSH
49358: PPUSH
49359: PPUSH
// if not list then
49360: LD_VAR 0 3
49364: NOT
49365: IFFALSE 49369
// exit ;
49367: GO 49757
// result := [ ] ;
49369: LD_ADDR_VAR 0 6
49373: PUSH
49374: EMPTY
49375: ST_TO_ADDR
// for i in list do
49376: LD_ADDR_VAR 0 7
49380: PUSH
49381: LD_VAR 0 3
49385: PUSH
49386: FOR_IN
49387: IFFALSE 49589
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49389: LD_ADDR_VAR 0 9
49393: PUSH
49394: LD_VAR 0 7
49398: PPUSH
49399: LD_VAR 0 1
49403: PPUSH
49404: LD_VAR 0 2
49408: PPUSH
49409: CALL_OW 297
49413: ST_TO_ADDR
// if not result then
49414: LD_VAR 0 6
49418: NOT
49419: IFFALSE 49445
// result := [ [ i , tmp ] ] else
49421: LD_ADDR_VAR 0 6
49425: PUSH
49426: LD_VAR 0 7
49430: PUSH
49431: LD_VAR 0 9
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: EMPTY
49441: LIST
49442: ST_TO_ADDR
49443: GO 49587
// begin if result [ result ] [ 2 ] < tmp then
49445: LD_VAR 0 6
49449: PUSH
49450: LD_VAR 0 6
49454: ARRAY
49455: PUSH
49456: LD_INT 2
49458: ARRAY
49459: PUSH
49460: LD_VAR 0 9
49464: LESS
49465: IFFALSE 49507
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49467: LD_ADDR_VAR 0 6
49471: PUSH
49472: LD_VAR 0 6
49476: PPUSH
49477: LD_VAR 0 6
49481: PUSH
49482: LD_INT 1
49484: PLUS
49485: PPUSH
49486: LD_VAR 0 7
49490: PUSH
49491: LD_VAR 0 9
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PPUSH
49500: CALL_OW 2
49504: ST_TO_ADDR
49505: GO 49587
// for j = 1 to result do
49507: LD_ADDR_VAR 0 8
49511: PUSH
49512: DOUBLE
49513: LD_INT 1
49515: DEC
49516: ST_TO_ADDR
49517: LD_VAR 0 6
49521: PUSH
49522: FOR_TO
49523: IFFALSE 49585
// begin if tmp < result [ j ] [ 2 ] then
49525: LD_VAR 0 9
49529: PUSH
49530: LD_VAR 0 6
49534: PUSH
49535: LD_VAR 0 8
49539: ARRAY
49540: PUSH
49541: LD_INT 2
49543: ARRAY
49544: LESS
49545: IFFALSE 49583
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49547: LD_ADDR_VAR 0 6
49551: PUSH
49552: LD_VAR 0 6
49556: PPUSH
49557: LD_VAR 0 8
49561: PPUSH
49562: LD_VAR 0 7
49566: PUSH
49567: LD_VAR 0 9
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PPUSH
49576: CALL_OW 2
49580: ST_TO_ADDR
// break ;
49581: GO 49585
// end ; end ;
49583: GO 49522
49585: POP
49586: POP
// end ; end ;
49587: GO 49386
49589: POP
49590: POP
// if result and not asc then
49591: LD_VAR 0 6
49595: PUSH
49596: LD_VAR 0 4
49600: NOT
49601: AND
49602: IFFALSE 49677
// begin tmp := result ;
49604: LD_ADDR_VAR 0 9
49608: PUSH
49609: LD_VAR 0 6
49613: ST_TO_ADDR
// for i = tmp downto 1 do
49614: LD_ADDR_VAR 0 7
49618: PUSH
49619: DOUBLE
49620: LD_VAR 0 9
49624: INC
49625: ST_TO_ADDR
49626: LD_INT 1
49628: PUSH
49629: FOR_DOWNTO
49630: IFFALSE 49675
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49632: LD_ADDR_VAR 0 6
49636: PUSH
49637: LD_VAR 0 6
49641: PPUSH
49642: LD_VAR 0 9
49646: PUSH
49647: LD_VAR 0 7
49651: MINUS
49652: PUSH
49653: LD_INT 1
49655: PLUS
49656: PPUSH
49657: LD_VAR 0 9
49661: PUSH
49662: LD_VAR 0 7
49666: ARRAY
49667: PPUSH
49668: CALL_OW 1
49672: ST_TO_ADDR
49673: GO 49629
49675: POP
49676: POP
// end ; tmp := [ ] ;
49677: LD_ADDR_VAR 0 9
49681: PUSH
49682: EMPTY
49683: ST_TO_ADDR
// if mode then
49684: LD_VAR 0 5
49688: IFFALSE 49757
// begin for i = 1 to result do
49690: LD_ADDR_VAR 0 7
49694: PUSH
49695: DOUBLE
49696: LD_INT 1
49698: DEC
49699: ST_TO_ADDR
49700: LD_VAR 0 6
49704: PUSH
49705: FOR_TO
49706: IFFALSE 49745
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49708: LD_ADDR_VAR 0 9
49712: PUSH
49713: LD_VAR 0 9
49717: PPUSH
49718: LD_VAR 0 7
49722: PPUSH
49723: LD_VAR 0 6
49727: PUSH
49728: LD_VAR 0 7
49732: ARRAY
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: PPUSH
49738: CALL_OW 1
49742: ST_TO_ADDR
49743: GO 49705
49745: POP
49746: POP
// result := tmp ;
49747: LD_ADDR_VAR 0 6
49751: PUSH
49752: LD_VAR 0 9
49756: ST_TO_ADDR
// end ; end ;
49757: LD_VAR 0 6
49761: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49762: LD_INT 0
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49770: LD_ADDR_VAR 0 5
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: ST_TO_ADDR
// if not x or not y then
49792: LD_VAR 0 2
49796: NOT
49797: PUSH
49798: LD_VAR 0 3
49802: NOT
49803: OR
49804: IFFALSE 49808
// exit ;
49806: GO 51458
// if not range then
49808: LD_VAR 0 4
49812: NOT
49813: IFFALSE 49823
// range := 10 ;
49815: LD_ADDR_VAR 0 4
49819: PUSH
49820: LD_INT 10
49822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49823: LD_ADDR_VAR 0 8
49827: PUSH
49828: LD_INT 81
49830: PUSH
49831: LD_VAR 0 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 92
49842: PUSH
49843: LD_VAR 0 2
49847: PUSH
49848: LD_VAR 0 3
49852: PUSH
49853: LD_VAR 0 4
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 21
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: PPUSH
49886: CALL_OW 69
49890: ST_TO_ADDR
// if not tmp then
49891: LD_VAR 0 8
49895: NOT
49896: IFFALSE 49900
// exit ;
49898: GO 51458
// for i in tmp do
49900: LD_ADDR_VAR 0 6
49904: PUSH
49905: LD_VAR 0 8
49909: PUSH
49910: FOR_IN
49911: IFFALSE 51433
// begin points := [ 0 , 0 , 0 ] ;
49913: LD_ADDR_VAR 0 9
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// bpoints := 1 ;
49932: LD_ADDR_VAR 0 10
49936: PUSH
49937: LD_INT 1
49939: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49940: LD_VAR 0 6
49944: PPUSH
49945: CALL_OW 247
49949: PUSH
49950: LD_INT 1
49952: DOUBLE
49953: EQUAL
49954: IFTRUE 49958
49956: GO 50536
49958: POP
// begin if GetClass ( i ) = 1 then
49959: LD_VAR 0 6
49963: PPUSH
49964: CALL_OW 257
49968: PUSH
49969: LD_INT 1
49971: EQUAL
49972: IFFALSE 49993
// points := [ 10 , 5 , 3 ] ;
49974: LD_ADDR_VAR 0 9
49978: PUSH
49979: LD_INT 10
49981: PUSH
49982: LD_INT 5
49984: PUSH
49985: LD_INT 3
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49993: LD_VAR 0 6
49997: PPUSH
49998: CALL_OW 257
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 3
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: IN
50017: IFFALSE 50038
// points := [ 3 , 2 , 1 ] ;
50019: LD_ADDR_VAR 0 9
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50038: LD_VAR 0 6
50042: PPUSH
50043: CALL_OW 257
50047: PUSH
50048: LD_INT 5
50050: EQUAL
50051: IFFALSE 50072
// points := [ 130 , 5 , 2 ] ;
50053: LD_ADDR_VAR 0 9
50057: PUSH
50058: LD_INT 130
50060: PUSH
50061: LD_INT 5
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50072: LD_VAR 0 6
50076: PPUSH
50077: CALL_OW 257
50081: PUSH
50082: LD_INT 8
50084: EQUAL
50085: IFFALSE 50106
// points := [ 35 , 35 , 30 ] ;
50087: LD_ADDR_VAR 0 9
50091: PUSH
50092: LD_INT 35
50094: PUSH
50095: LD_INT 35
50097: PUSH
50098: LD_INT 30
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50106: LD_VAR 0 6
50110: PPUSH
50111: CALL_OW 257
50115: PUSH
50116: LD_INT 9
50118: EQUAL
50119: IFFALSE 50140
// points := [ 20 , 55 , 40 ] ;
50121: LD_ADDR_VAR 0 9
50125: PUSH
50126: LD_INT 20
50128: PUSH
50129: LD_INT 55
50131: PUSH
50132: LD_INT 40
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50140: LD_VAR 0 6
50144: PPUSH
50145: CALL_OW 257
50149: PUSH
50150: LD_INT 12
50152: PUSH
50153: LD_INT 16
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: IN
50160: IFFALSE 50181
// points := [ 5 , 3 , 2 ] ;
50162: LD_ADDR_VAR 0 9
50166: PUSH
50167: LD_INT 5
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50181: LD_VAR 0 6
50185: PPUSH
50186: CALL_OW 257
50190: PUSH
50191: LD_INT 17
50193: EQUAL
50194: IFFALSE 50215
// points := [ 100 , 50 , 75 ] ;
50196: LD_ADDR_VAR 0 9
50200: PUSH
50201: LD_INT 100
50203: PUSH
50204: LD_INT 50
50206: PUSH
50207: LD_INT 75
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50215: LD_VAR 0 6
50219: PPUSH
50220: CALL_OW 257
50224: PUSH
50225: LD_INT 15
50227: EQUAL
50228: IFFALSE 50249
// points := [ 10 , 5 , 3 ] ;
50230: LD_ADDR_VAR 0 9
50234: PUSH
50235: LD_INT 10
50237: PUSH
50238: LD_INT 5
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50249: LD_VAR 0 6
50253: PPUSH
50254: CALL_OW 257
50258: PUSH
50259: LD_INT 14
50261: EQUAL
50262: IFFALSE 50283
// points := [ 10 , 0 , 0 ] ;
50264: LD_ADDR_VAR 0 9
50268: PUSH
50269: LD_INT 10
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: LIST
50282: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50283: LD_VAR 0 6
50287: PPUSH
50288: CALL_OW 257
50292: PUSH
50293: LD_INT 11
50295: EQUAL
50296: IFFALSE 50317
// points := [ 30 , 10 , 5 ] ;
50298: LD_ADDR_VAR 0 9
50302: PUSH
50303: LD_INT 30
50305: PUSH
50306: LD_INT 10
50308: PUSH
50309: LD_INT 5
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50317: LD_VAR 0 1
50321: PPUSH
50322: LD_INT 5
50324: PPUSH
50325: CALL_OW 321
50329: PUSH
50330: LD_INT 2
50332: EQUAL
50333: IFFALSE 50350
// bpoints := bpoints * 1.8 ;
50335: LD_ADDR_VAR 0 10
50339: PUSH
50340: LD_VAR 0 10
50344: PUSH
50345: LD_REAL  1.80000000000000E+0000
50348: MUL
50349: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50350: LD_VAR 0 6
50354: PPUSH
50355: CALL_OW 257
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: IN
50378: PUSH
50379: LD_VAR 0 1
50383: PPUSH
50384: LD_INT 51
50386: PPUSH
50387: CALL_OW 321
50391: PUSH
50392: LD_INT 2
50394: EQUAL
50395: AND
50396: IFFALSE 50413
// bpoints := bpoints * 1.2 ;
50398: LD_ADDR_VAR 0 10
50402: PUSH
50403: LD_VAR 0 10
50407: PUSH
50408: LD_REAL  1.20000000000000E+0000
50411: MUL
50412: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50413: LD_VAR 0 6
50417: PPUSH
50418: CALL_OW 257
50422: PUSH
50423: LD_INT 5
50425: PUSH
50426: LD_INT 7
50428: PUSH
50429: LD_INT 9
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: IN
50437: PUSH
50438: LD_VAR 0 1
50442: PPUSH
50443: LD_INT 52
50445: PPUSH
50446: CALL_OW 321
50450: PUSH
50451: LD_INT 2
50453: EQUAL
50454: AND
50455: IFFALSE 50472
// bpoints := bpoints * 1.5 ;
50457: LD_ADDR_VAR 0 10
50461: PUSH
50462: LD_VAR 0 10
50466: PUSH
50467: LD_REAL  1.50000000000000E+0000
50470: MUL
50471: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50472: LD_VAR 0 1
50476: PPUSH
50477: LD_INT 66
50479: PPUSH
50480: CALL_OW 321
50484: PUSH
50485: LD_INT 2
50487: EQUAL
50488: IFFALSE 50505
// bpoints := bpoints * 1.1 ;
50490: LD_ADDR_VAR 0 10
50494: PUSH
50495: LD_VAR 0 10
50499: PUSH
50500: LD_REAL  1.10000000000000E+0000
50503: MUL
50504: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50505: LD_ADDR_VAR 0 10
50509: PUSH
50510: LD_VAR 0 10
50514: PUSH
50515: LD_VAR 0 6
50519: PPUSH
50520: LD_INT 1
50522: PPUSH
50523: CALL_OW 259
50527: PUSH
50528: LD_REAL  1.15000000000000E+0000
50531: MUL
50532: MUL
50533: ST_TO_ADDR
// end ; unit_vehicle :
50534: GO 51362
50536: LD_INT 2
50538: DOUBLE
50539: EQUAL
50540: IFTRUE 50544
50542: GO 51350
50544: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50545: LD_VAR 0 6
50549: PPUSH
50550: CALL_OW 264
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: LD_INT 42
50560: PUSH
50561: LD_INT 24
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: IN
50569: IFFALSE 50590
// points := [ 25 , 5 , 3 ] ;
50571: LD_ADDR_VAR 0 9
50575: PUSH
50576: LD_INT 25
50578: PUSH
50579: LD_INT 5
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50590: LD_VAR 0 6
50594: PPUSH
50595: CALL_OW 264
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: LD_INT 43
50605: PUSH
50606: LD_INT 25
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: IN
50614: IFFALSE 50635
// points := [ 40 , 15 , 5 ] ;
50616: LD_ADDR_VAR 0 9
50620: PUSH
50621: LD_INT 40
50623: PUSH
50624: LD_INT 15
50626: PUSH
50627: LD_INT 5
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: LIST
50634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50635: LD_VAR 0 6
50639: PPUSH
50640: CALL_OW 264
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: LD_INT 23
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: IN
50655: IFFALSE 50676
// points := [ 7 , 25 , 8 ] ;
50657: LD_ADDR_VAR 0 9
50661: PUSH
50662: LD_INT 7
50664: PUSH
50665: LD_INT 25
50667: PUSH
50668: LD_INT 8
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50676: LD_VAR 0 6
50680: PPUSH
50681: CALL_OW 264
50685: PUSH
50686: LD_INT 5
50688: PUSH
50689: LD_INT 27
50691: PUSH
50692: LD_INT 44
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: IN
50700: IFFALSE 50721
// points := [ 14 , 50 , 16 ] ;
50702: LD_ADDR_VAR 0 9
50706: PUSH
50707: LD_INT 14
50709: PUSH
50710: LD_INT 50
50712: PUSH
50713: LD_INT 16
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50721: LD_VAR 0 6
50725: PPUSH
50726: CALL_OW 264
50730: PUSH
50731: LD_INT 6
50733: PUSH
50734: LD_INT 46
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: IN
50741: IFFALSE 50762
// points := [ 32 , 120 , 70 ] ;
50743: LD_ADDR_VAR 0 9
50747: PUSH
50748: LD_INT 32
50750: PUSH
50751: LD_INT 120
50753: PUSH
50754: LD_INT 70
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50762: LD_VAR 0 6
50766: PPUSH
50767: CALL_OW 264
50771: PUSH
50772: LD_INT 7
50774: PUSH
50775: LD_INT 28
50777: PUSH
50778: LD_INT 45
50780: PUSH
50781: LD_INT 92
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: IN
50790: IFFALSE 50811
// points := [ 35 , 20 , 45 ] ;
50792: LD_ADDR_VAR 0 9
50796: PUSH
50797: LD_INT 35
50799: PUSH
50800: LD_INT 20
50802: PUSH
50803: LD_INT 45
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50811: LD_VAR 0 6
50815: PPUSH
50816: CALL_OW 264
50820: PUSH
50821: LD_INT 47
50823: PUSH
50824: EMPTY
50825: LIST
50826: IN
50827: IFFALSE 50848
// points := [ 67 , 45 , 75 ] ;
50829: LD_ADDR_VAR 0 9
50833: PUSH
50834: LD_INT 67
50836: PUSH
50837: LD_INT 45
50839: PUSH
50840: LD_INT 75
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50848: LD_VAR 0 6
50852: PPUSH
50853: CALL_OW 264
50857: PUSH
50858: LD_INT 26
50860: PUSH
50861: EMPTY
50862: LIST
50863: IN
50864: IFFALSE 50885
// points := [ 120 , 30 , 80 ] ;
50866: LD_ADDR_VAR 0 9
50870: PUSH
50871: LD_INT 120
50873: PUSH
50874: LD_INT 30
50876: PUSH
50877: LD_INT 80
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50885: LD_VAR 0 6
50889: PPUSH
50890: CALL_OW 264
50894: PUSH
50895: LD_INT 22
50897: PUSH
50898: EMPTY
50899: LIST
50900: IN
50901: IFFALSE 50922
// points := [ 40 , 1 , 1 ] ;
50903: LD_ADDR_VAR 0 9
50907: PUSH
50908: LD_INT 40
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50922: LD_VAR 0 6
50926: PPUSH
50927: CALL_OW 264
50931: PUSH
50932: LD_INT 29
50934: PUSH
50935: EMPTY
50936: LIST
50937: IN
50938: IFFALSE 50959
// points := [ 70 , 200 , 400 ] ;
50940: LD_ADDR_VAR 0 9
50944: PUSH
50945: LD_INT 70
50947: PUSH
50948: LD_INT 200
50950: PUSH
50951: LD_INT 400
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50959: LD_VAR 0 6
50963: PPUSH
50964: CALL_OW 264
50968: PUSH
50969: LD_INT 14
50971: PUSH
50972: LD_INT 53
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: IN
50979: IFFALSE 51000
// points := [ 40 , 10 , 20 ] ;
50981: LD_ADDR_VAR 0 9
50985: PUSH
50986: LD_INT 40
50988: PUSH
50989: LD_INT 10
50991: PUSH
50992: LD_INT 20
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51000: LD_VAR 0 6
51004: PPUSH
51005: CALL_OW 264
51009: PUSH
51010: LD_INT 9
51012: PUSH
51013: EMPTY
51014: LIST
51015: IN
51016: IFFALSE 51037
// points := [ 5 , 70 , 20 ] ;
51018: LD_ADDR_VAR 0 9
51022: PUSH
51023: LD_INT 5
51025: PUSH
51026: LD_INT 70
51028: PUSH
51029: LD_INT 20
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51037: LD_VAR 0 6
51041: PPUSH
51042: CALL_OW 264
51046: PUSH
51047: LD_INT 10
51049: PUSH
51050: EMPTY
51051: LIST
51052: IN
51053: IFFALSE 51074
// points := [ 35 , 110 , 70 ] ;
51055: LD_ADDR_VAR 0 9
51059: PUSH
51060: LD_INT 35
51062: PUSH
51063: LD_INT 110
51065: PUSH
51066: LD_INT 70
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51074: LD_VAR 0 6
51078: PPUSH
51079: CALL_OW 265
51083: PUSH
51084: LD_INT 25
51086: EQUAL
51087: IFFALSE 51108
// points := [ 80 , 65 , 100 ] ;
51089: LD_ADDR_VAR 0 9
51093: PUSH
51094: LD_INT 80
51096: PUSH
51097: LD_INT 65
51099: PUSH
51100: LD_INT 100
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51108: LD_VAR 0 6
51112: PPUSH
51113: CALL_OW 263
51117: PUSH
51118: LD_INT 1
51120: EQUAL
51121: IFFALSE 51156
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51123: LD_ADDR_VAR 0 10
51127: PUSH
51128: LD_VAR 0 10
51132: PUSH
51133: LD_VAR 0 6
51137: PPUSH
51138: CALL_OW 311
51142: PPUSH
51143: LD_INT 3
51145: PPUSH
51146: CALL_OW 259
51150: PUSH
51151: LD_INT 4
51153: MUL
51154: MUL
51155: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51156: LD_VAR 0 6
51160: PPUSH
51161: CALL_OW 263
51165: PUSH
51166: LD_INT 2
51168: EQUAL
51169: IFFALSE 51220
// begin j := IsControledBy ( i ) ;
51171: LD_ADDR_VAR 0 7
51175: PUSH
51176: LD_VAR 0 6
51180: PPUSH
51181: CALL_OW 312
51185: ST_TO_ADDR
// if j then
51186: LD_VAR 0 7
51190: IFFALSE 51220
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51192: LD_ADDR_VAR 0 10
51196: PUSH
51197: LD_VAR 0 10
51201: PUSH
51202: LD_VAR 0 7
51206: PPUSH
51207: LD_INT 3
51209: PPUSH
51210: CALL_OW 259
51214: PUSH
51215: LD_INT 3
51217: MUL
51218: MUL
51219: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51220: LD_VAR 0 6
51224: PPUSH
51225: CALL_OW 264
51229: PUSH
51230: LD_INT 5
51232: PUSH
51233: LD_INT 6
51235: PUSH
51236: LD_INT 46
51238: PUSH
51239: LD_INT 44
51241: PUSH
51242: LD_INT 47
51244: PUSH
51245: LD_INT 45
51247: PUSH
51248: LD_INT 28
51250: PUSH
51251: LD_INT 7
51253: PUSH
51254: LD_INT 27
51256: PUSH
51257: LD_INT 29
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: IN
51272: PUSH
51273: LD_VAR 0 1
51277: PPUSH
51278: LD_INT 52
51280: PPUSH
51281: CALL_OW 321
51285: PUSH
51286: LD_INT 2
51288: EQUAL
51289: AND
51290: IFFALSE 51307
// bpoints := bpoints * 1.2 ;
51292: LD_ADDR_VAR 0 10
51296: PUSH
51297: LD_VAR 0 10
51301: PUSH
51302: LD_REAL  1.20000000000000E+0000
51305: MUL
51306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51307: LD_VAR 0 6
51311: PPUSH
51312: CALL_OW 264
51316: PUSH
51317: LD_INT 6
51319: PUSH
51320: LD_INT 46
51322: PUSH
51323: LD_INT 47
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: IN
51331: IFFALSE 51348
// bpoints := bpoints * 1.2 ;
51333: LD_ADDR_VAR 0 10
51337: PUSH
51338: LD_VAR 0 10
51342: PUSH
51343: LD_REAL  1.20000000000000E+0000
51346: MUL
51347: ST_TO_ADDR
// end ; unit_building :
51348: GO 51362
51350: LD_INT 3
51352: DOUBLE
51353: EQUAL
51354: IFTRUE 51358
51356: GO 51361
51358: POP
// ; end ;
51359: GO 51362
51361: POP
// for j = 1 to 3 do
51362: LD_ADDR_VAR 0 7
51366: PUSH
51367: DOUBLE
51368: LD_INT 1
51370: DEC
51371: ST_TO_ADDR
51372: LD_INT 3
51374: PUSH
51375: FOR_TO
51376: IFFALSE 51429
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51378: LD_ADDR_VAR 0 5
51382: PUSH
51383: LD_VAR 0 5
51387: PPUSH
51388: LD_VAR 0 7
51392: PPUSH
51393: LD_VAR 0 5
51397: PUSH
51398: LD_VAR 0 7
51402: ARRAY
51403: PUSH
51404: LD_VAR 0 9
51408: PUSH
51409: LD_VAR 0 7
51413: ARRAY
51414: PUSH
51415: LD_VAR 0 10
51419: MUL
51420: PLUS
51421: PPUSH
51422: CALL_OW 1
51426: ST_TO_ADDR
51427: GO 51375
51429: POP
51430: POP
// end ;
51431: GO 49910
51433: POP
51434: POP
// result := Replace ( result , 4 , tmp ) ;
51435: LD_ADDR_VAR 0 5
51439: PUSH
51440: LD_VAR 0 5
51444: PPUSH
51445: LD_INT 4
51447: PPUSH
51448: LD_VAR 0 8
51452: PPUSH
51453: CALL_OW 1
51457: ST_TO_ADDR
// end ;
51458: LD_VAR 0 5
51462: RET
// export function DangerAtRange ( unit , range ) ; begin
51463: LD_INT 0
51465: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51466: LD_ADDR_VAR 0 3
51470: PUSH
51471: LD_VAR 0 1
51475: PPUSH
51476: CALL_OW 255
51480: PPUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: CALL_OW 250
51490: PPUSH
51491: LD_VAR 0 1
51495: PPUSH
51496: CALL_OW 251
51500: PPUSH
51501: LD_VAR 0 2
51505: PPUSH
51506: CALL 49762 0 4
51510: ST_TO_ADDR
// end ;
51511: LD_VAR 0 3
51515: RET
// export function DangerInArea ( side , area ) ; begin
51516: LD_INT 0
51518: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51519: LD_ADDR_VAR 0 3
51523: PUSH
51524: LD_VAR 0 2
51528: PPUSH
51529: LD_INT 81
51531: PUSH
51532: LD_VAR 0 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PPUSH
51541: CALL_OW 70
51545: ST_TO_ADDR
// end ;
51546: LD_VAR 0 3
51550: RET
// export function IsExtension ( b ) ; begin
51551: LD_INT 0
51553: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51554: LD_ADDR_VAR 0 2
51558: PUSH
51559: LD_VAR 0 1
51563: PUSH
51564: LD_INT 23
51566: PUSH
51567: LD_INT 20
51569: PUSH
51570: LD_INT 22
51572: PUSH
51573: LD_INT 17
51575: PUSH
51576: LD_INT 24
51578: PUSH
51579: LD_INT 21
51581: PUSH
51582: LD_INT 19
51584: PUSH
51585: LD_INT 16
51587: PUSH
51588: LD_INT 25
51590: PUSH
51591: LD_INT 18
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: IN
51606: ST_TO_ADDR
// end ;
51607: LD_VAR 0 2
51611: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51612: LD_INT 0
51614: PPUSH
51615: PPUSH
51616: PPUSH
// result := [ ] ;
51617: LD_ADDR_VAR 0 4
51621: PUSH
51622: EMPTY
51623: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51624: LD_ADDR_VAR 0 5
51628: PUSH
51629: LD_VAR 0 2
51633: PPUSH
51634: LD_INT 21
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PPUSH
51644: CALL_OW 70
51648: ST_TO_ADDR
// if not tmp then
51649: LD_VAR 0 5
51653: NOT
51654: IFFALSE 51658
// exit ;
51656: GO 51722
// if checkLink then
51658: LD_VAR 0 3
51662: IFFALSE 51712
// begin for i in tmp do
51664: LD_ADDR_VAR 0 6
51668: PUSH
51669: LD_VAR 0 5
51673: PUSH
51674: FOR_IN
51675: IFFALSE 51710
// if GetBase ( i ) <> base then
51677: LD_VAR 0 6
51681: PPUSH
51682: CALL_OW 274
51686: PUSH
51687: LD_VAR 0 1
51691: NONEQUAL
51692: IFFALSE 51708
// ComLinkToBase ( base , i ) ;
51694: LD_VAR 0 1
51698: PPUSH
51699: LD_VAR 0 6
51703: PPUSH
51704: CALL_OW 169
51708: GO 51674
51710: POP
51711: POP
// end ; result := tmp ;
51712: LD_ADDR_VAR 0 4
51716: PUSH
51717: LD_VAR 0 5
51721: ST_TO_ADDR
// end ;
51722: LD_VAR 0 4
51726: RET
// export function ComComplete ( units , b ) ; var i ; begin
51727: LD_INT 0
51729: PPUSH
51730: PPUSH
// if not units then
51731: LD_VAR 0 1
51735: NOT
51736: IFFALSE 51740
// exit ;
51738: GO 51830
// for i in units do
51740: LD_ADDR_VAR 0 4
51744: PUSH
51745: LD_VAR 0 1
51749: PUSH
51750: FOR_IN
51751: IFFALSE 51828
// if BuildingStatus ( b ) = bs_build then
51753: LD_VAR 0 2
51757: PPUSH
51758: CALL_OW 461
51762: PUSH
51763: LD_INT 1
51765: EQUAL
51766: IFFALSE 51826
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51768: LD_VAR 0 4
51772: PPUSH
51773: LD_STRING h
51775: PUSH
51776: LD_VAR 0 2
51780: PPUSH
51781: CALL_OW 250
51785: PUSH
51786: LD_VAR 0 2
51790: PPUSH
51791: CALL_OW 251
51795: PUSH
51796: LD_VAR 0 2
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: PPUSH
51822: CALL_OW 446
51826: GO 51750
51828: POP
51829: POP
// end ;
51830: LD_VAR 0 3
51834: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51835: LD_INT 0
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51843: LD_VAR 0 1
51847: NOT
51848: PUSH
51849: LD_VAR 0 1
51853: PPUSH
51854: CALL_OW 263
51858: PUSH
51859: LD_INT 2
51861: NONEQUAL
51862: OR
51863: IFFALSE 51867
// exit ;
51865: GO 52183
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51867: LD_ADDR_VAR 0 6
51871: PUSH
51872: LD_INT 22
51874: PUSH
51875: LD_VAR 0 1
51879: PPUSH
51880: CALL_OW 255
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 30
51894: PUSH
51895: LD_INT 36
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 34
51904: PUSH
51905: LD_INT 31
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PPUSH
51921: CALL_OW 69
51925: ST_TO_ADDR
// if not tmp then
51926: LD_VAR 0 6
51930: NOT
51931: IFFALSE 51935
// exit ;
51933: GO 52183
// result := [ ] ;
51935: LD_ADDR_VAR 0 2
51939: PUSH
51940: EMPTY
51941: ST_TO_ADDR
// for i in tmp do
51942: LD_ADDR_VAR 0 3
51946: PUSH
51947: LD_VAR 0 6
51951: PUSH
51952: FOR_IN
51953: IFFALSE 52024
// begin t := UnitsInside ( i ) ;
51955: LD_ADDR_VAR 0 4
51959: PUSH
51960: LD_VAR 0 3
51964: PPUSH
51965: CALL_OW 313
51969: ST_TO_ADDR
// if t then
51970: LD_VAR 0 4
51974: IFFALSE 52022
// for j in t do
51976: LD_ADDR_VAR 0 7
51980: PUSH
51981: LD_VAR 0 4
51985: PUSH
51986: FOR_IN
51987: IFFALSE 52020
// result := Replace ( result , result + 1 , j ) ;
51989: LD_ADDR_VAR 0 2
51993: PUSH
51994: LD_VAR 0 2
51998: PPUSH
51999: LD_VAR 0 2
52003: PUSH
52004: LD_INT 1
52006: PLUS
52007: PPUSH
52008: LD_VAR 0 7
52012: PPUSH
52013: CALL_OW 1
52017: ST_TO_ADDR
52018: GO 51986
52020: POP
52021: POP
// end ;
52022: GO 51952
52024: POP
52025: POP
// if not result then
52026: LD_VAR 0 2
52030: NOT
52031: IFFALSE 52035
// exit ;
52033: GO 52183
// mech := result [ 1 ] ;
52035: LD_ADDR_VAR 0 5
52039: PUSH
52040: LD_VAR 0 2
52044: PUSH
52045: LD_INT 1
52047: ARRAY
52048: ST_TO_ADDR
// if result > 1 then
52049: LD_VAR 0 2
52053: PUSH
52054: LD_INT 1
52056: GREATER
52057: IFFALSE 52169
// begin for i = 2 to result do
52059: LD_ADDR_VAR 0 3
52063: PUSH
52064: DOUBLE
52065: LD_INT 2
52067: DEC
52068: ST_TO_ADDR
52069: LD_VAR 0 2
52073: PUSH
52074: FOR_TO
52075: IFFALSE 52167
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52077: LD_ADDR_VAR 0 4
52081: PUSH
52082: LD_VAR 0 2
52086: PUSH
52087: LD_VAR 0 3
52091: ARRAY
52092: PPUSH
52093: LD_INT 3
52095: PPUSH
52096: CALL_OW 259
52100: PUSH
52101: LD_VAR 0 2
52105: PUSH
52106: LD_VAR 0 3
52110: ARRAY
52111: PPUSH
52112: CALL_OW 432
52116: MINUS
52117: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52118: LD_VAR 0 4
52122: PUSH
52123: LD_VAR 0 5
52127: PPUSH
52128: LD_INT 3
52130: PPUSH
52131: CALL_OW 259
52135: PUSH
52136: LD_VAR 0 5
52140: PPUSH
52141: CALL_OW 432
52145: MINUS
52146: GREATEREQUAL
52147: IFFALSE 52165
// mech := result [ i ] ;
52149: LD_ADDR_VAR 0 5
52153: PUSH
52154: LD_VAR 0 2
52158: PUSH
52159: LD_VAR 0 3
52163: ARRAY
52164: ST_TO_ADDR
// end ;
52165: GO 52074
52167: POP
52168: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52169: LD_VAR 0 1
52173: PPUSH
52174: LD_VAR 0 5
52178: PPUSH
52179: CALL_OW 135
// end ;
52183: LD_VAR 0 2
52187: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52188: LD_INT 0
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
// result := [ ] ;
52203: LD_ADDR_VAR 0 7
52207: PUSH
52208: EMPTY
52209: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52210: LD_VAR 0 1
52214: PPUSH
52215: CALL_OW 266
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: IN
52230: NOT
52231: IFFALSE 52235
// exit ;
52233: GO 53869
// if name then
52235: LD_VAR 0 3
52239: IFFALSE 52255
// SetBName ( base_dep , name ) ;
52241: LD_VAR 0 1
52245: PPUSH
52246: LD_VAR 0 3
52250: PPUSH
52251: CALL_OW 500
// base := GetBase ( base_dep ) ;
52255: LD_ADDR_VAR 0 15
52259: PUSH
52260: LD_VAR 0 1
52264: PPUSH
52265: CALL_OW 274
52269: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52270: LD_ADDR_VAR 0 16
52274: PUSH
52275: LD_VAR 0 1
52279: PPUSH
52280: CALL_OW 255
52284: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52285: LD_ADDR_VAR 0 17
52289: PUSH
52290: LD_VAR 0 1
52294: PPUSH
52295: CALL_OW 248
52299: ST_TO_ADDR
// if sources then
52300: LD_VAR 0 5
52304: IFFALSE 52351
// for i = 1 to 3 do
52306: LD_ADDR_VAR 0 8
52310: PUSH
52311: DOUBLE
52312: LD_INT 1
52314: DEC
52315: ST_TO_ADDR
52316: LD_INT 3
52318: PUSH
52319: FOR_TO
52320: IFFALSE 52349
// AddResourceType ( base , i , sources [ i ] ) ;
52322: LD_VAR 0 15
52326: PPUSH
52327: LD_VAR 0 8
52331: PPUSH
52332: LD_VAR 0 5
52336: PUSH
52337: LD_VAR 0 8
52341: ARRAY
52342: PPUSH
52343: CALL_OW 276
52347: GO 52319
52349: POP
52350: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52351: LD_ADDR_VAR 0 18
52355: PUSH
52356: LD_VAR 0 15
52360: PPUSH
52361: LD_VAR 0 2
52365: PPUSH
52366: LD_INT 1
52368: PPUSH
52369: CALL 51612 0 3
52373: ST_TO_ADDR
// InitHc ;
52374: CALL_OW 19
// InitUc ;
52378: CALL_OW 18
// uc_side := side ;
52382: LD_ADDR_OWVAR 20
52386: PUSH
52387: LD_VAR 0 16
52391: ST_TO_ADDR
// uc_nation := nation ;
52392: LD_ADDR_OWVAR 21
52396: PUSH
52397: LD_VAR 0 17
52401: ST_TO_ADDR
// if buildings then
52402: LD_VAR 0 18
52406: IFFALSE 53728
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52408: LD_ADDR_VAR 0 19
52412: PUSH
52413: LD_VAR 0 18
52417: PPUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 30
52423: PUSH
52424: LD_INT 29
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 30
52433: PUSH
52434: LD_INT 30
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: PPUSH
52446: CALL_OW 72
52450: ST_TO_ADDR
// if tmp then
52451: LD_VAR 0 19
52455: IFFALSE 52503
// for i in tmp do
52457: LD_ADDR_VAR 0 8
52461: PUSH
52462: LD_VAR 0 19
52466: PUSH
52467: FOR_IN
52468: IFFALSE 52501
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52470: LD_VAR 0 8
52474: PPUSH
52475: CALL_OW 250
52479: PPUSH
52480: LD_VAR 0 8
52484: PPUSH
52485: CALL_OW 251
52489: PPUSH
52490: LD_VAR 0 16
52494: PPUSH
52495: CALL_OW 441
52499: GO 52467
52501: POP
52502: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52503: LD_VAR 0 18
52507: PPUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 30
52513: PUSH
52514: LD_INT 32
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 30
52523: PUSH
52524: LD_INT 33
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: PPUSH
52536: CALL_OW 72
52540: IFFALSE 52628
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52542: LD_ADDR_VAR 0 8
52546: PUSH
52547: LD_VAR 0 18
52551: PPUSH
52552: LD_INT 2
52554: PUSH
52555: LD_INT 30
52557: PUSH
52558: LD_INT 32
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 30
52567: PUSH
52568: LD_INT 33
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: PPUSH
52580: CALL_OW 72
52584: PUSH
52585: FOR_IN
52586: IFFALSE 52626
// begin if not GetBWeapon ( i ) then
52588: LD_VAR 0 8
52592: PPUSH
52593: CALL_OW 269
52597: NOT
52598: IFFALSE 52624
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52600: LD_VAR 0 8
52604: PPUSH
52605: LD_VAR 0 8
52609: PPUSH
52610: LD_VAR 0 2
52614: PPUSH
52615: CALL 53874 0 2
52619: PPUSH
52620: CALL_OW 431
// end ;
52624: GO 52585
52626: POP
52627: POP
// end ; for i = 1 to personel do
52628: LD_ADDR_VAR 0 8
52632: PUSH
52633: DOUBLE
52634: LD_INT 1
52636: DEC
52637: ST_TO_ADDR
52638: LD_VAR 0 6
52642: PUSH
52643: FOR_TO
52644: IFFALSE 53708
// begin if i > 4 then
52646: LD_VAR 0 8
52650: PUSH
52651: LD_INT 4
52653: GREATER
52654: IFFALSE 52658
// break ;
52656: GO 53708
// case i of 1 :
52658: LD_VAR 0 8
52662: PUSH
52663: LD_INT 1
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52671
52669: GO 52751
52671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52672: LD_ADDR_VAR 0 12
52676: PUSH
52677: LD_VAR 0 18
52681: PPUSH
52682: LD_INT 22
52684: PUSH
52685: LD_VAR 0 16
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 58
52696: PUSH
52697: EMPTY
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 30
52705: PUSH
52706: LD_INT 32
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 30
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 30
52725: PUSH
52726: LD_INT 5
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: PPUSH
52744: CALL_OW 72
52748: ST_TO_ADDR
52749: GO 52973
52751: LD_INT 2
52753: DOUBLE
52754: EQUAL
52755: IFTRUE 52759
52757: GO 52821
52759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52760: LD_ADDR_VAR 0 12
52764: PUSH
52765: LD_VAR 0 18
52769: PPUSH
52770: LD_INT 22
52772: PUSH
52773: LD_VAR 0 16
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: LD_INT 30
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 30
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PPUSH
52814: CALL_OW 72
52818: ST_TO_ADDR
52819: GO 52973
52821: LD_INT 3
52823: DOUBLE
52824: EQUAL
52825: IFTRUE 52829
52827: GO 52891
52829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52830: LD_ADDR_VAR 0 12
52834: PUSH
52835: LD_VAR 0 18
52839: PPUSH
52840: LD_INT 22
52842: PUSH
52843: LD_VAR 0 16
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 30
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 30
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PPUSH
52884: CALL_OW 72
52888: ST_TO_ADDR
52889: GO 52973
52891: LD_INT 4
52893: DOUBLE
52894: EQUAL
52895: IFTRUE 52899
52897: GO 52972
52899: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52900: LD_ADDR_VAR 0 12
52904: PUSH
52905: LD_VAR 0 18
52909: PPUSH
52910: LD_INT 22
52912: PUSH
52913: LD_VAR 0 16
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 30
52927: PUSH
52928: LD_INT 6
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 30
52937: PUSH
52938: LD_INT 7
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 30
52947: PUSH
52948: LD_INT 8
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PPUSH
52965: CALL_OW 72
52969: ST_TO_ADDR
52970: GO 52973
52972: POP
// if i = 1 then
52973: LD_VAR 0 8
52977: PUSH
52978: LD_INT 1
52980: EQUAL
52981: IFFALSE 53092
// begin tmp := [ ] ;
52983: LD_ADDR_VAR 0 19
52987: PUSH
52988: EMPTY
52989: ST_TO_ADDR
// for j in f do
52990: LD_ADDR_VAR 0 9
52994: PUSH
52995: LD_VAR 0 12
52999: PUSH
53000: FOR_IN
53001: IFFALSE 53074
// if GetBType ( j ) = b_bunker then
53003: LD_VAR 0 9
53007: PPUSH
53008: CALL_OW 266
53012: PUSH
53013: LD_INT 32
53015: EQUAL
53016: IFFALSE 53043
// tmp := Insert ( tmp , 1 , j ) else
53018: LD_ADDR_VAR 0 19
53022: PUSH
53023: LD_VAR 0 19
53027: PPUSH
53028: LD_INT 1
53030: PPUSH
53031: LD_VAR 0 9
53035: PPUSH
53036: CALL_OW 2
53040: ST_TO_ADDR
53041: GO 53072
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53043: LD_ADDR_VAR 0 19
53047: PUSH
53048: LD_VAR 0 19
53052: PPUSH
53053: LD_VAR 0 19
53057: PUSH
53058: LD_INT 1
53060: PLUS
53061: PPUSH
53062: LD_VAR 0 9
53066: PPUSH
53067: CALL_OW 2
53071: ST_TO_ADDR
53072: GO 53000
53074: POP
53075: POP
// if tmp then
53076: LD_VAR 0 19
53080: IFFALSE 53092
// f := tmp ;
53082: LD_ADDR_VAR 0 12
53086: PUSH
53087: LD_VAR 0 19
53091: ST_TO_ADDR
// end ; x := personel [ i ] ;
53092: LD_ADDR_VAR 0 13
53096: PUSH
53097: LD_VAR 0 6
53101: PUSH
53102: LD_VAR 0 8
53106: ARRAY
53107: ST_TO_ADDR
// if x = - 1 then
53108: LD_VAR 0 13
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: EQUAL
53117: IFFALSE 53326
// begin for j in f do
53119: LD_ADDR_VAR 0 9
53123: PUSH
53124: LD_VAR 0 12
53128: PUSH
53129: FOR_IN
53130: IFFALSE 53322
// repeat InitHc ;
53132: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53136: LD_VAR 0 9
53140: PPUSH
53141: CALL_OW 266
53145: PUSH
53146: LD_INT 5
53148: EQUAL
53149: IFFALSE 53219
// begin if UnitsInside ( j ) < 3 then
53151: LD_VAR 0 9
53155: PPUSH
53156: CALL_OW 313
53160: PUSH
53161: LD_INT 3
53163: LESS
53164: IFFALSE 53200
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53166: LD_INT 0
53168: PPUSH
53169: LD_INT 5
53171: PUSH
53172: LD_INT 8
53174: PUSH
53175: LD_INT 9
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: PUSH
53183: LD_VAR 0 17
53187: ARRAY
53188: PPUSH
53189: LD_VAR 0 4
53193: PPUSH
53194: CALL_OW 380
53198: GO 53217
// PrepareHuman ( false , i , skill ) ;
53200: LD_INT 0
53202: PPUSH
53203: LD_VAR 0 8
53207: PPUSH
53208: LD_VAR 0 4
53212: PPUSH
53213: CALL_OW 380
// end else
53217: GO 53236
// PrepareHuman ( false , i , skill ) ;
53219: LD_INT 0
53221: PPUSH
53222: LD_VAR 0 8
53226: PPUSH
53227: LD_VAR 0 4
53231: PPUSH
53232: CALL_OW 380
// un := CreateHuman ;
53236: LD_ADDR_VAR 0 14
53240: PUSH
53241: CALL_OW 44
53245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53246: LD_ADDR_VAR 0 7
53250: PUSH
53251: LD_VAR 0 7
53255: PPUSH
53256: LD_INT 1
53258: PPUSH
53259: LD_VAR 0 14
53263: PPUSH
53264: CALL_OW 2
53268: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53269: LD_VAR 0 14
53273: PPUSH
53274: LD_VAR 0 9
53278: PPUSH
53279: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53283: LD_VAR 0 9
53287: PPUSH
53288: CALL_OW 313
53292: PUSH
53293: LD_INT 6
53295: EQUAL
53296: PUSH
53297: LD_VAR 0 9
53301: PPUSH
53302: CALL_OW 266
53306: PUSH
53307: LD_INT 32
53309: PUSH
53310: LD_INT 31
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: IN
53317: OR
53318: IFFALSE 53132
53320: GO 53129
53322: POP
53323: POP
// end else
53324: GO 53706
// for j = 1 to x do
53326: LD_ADDR_VAR 0 9
53330: PUSH
53331: DOUBLE
53332: LD_INT 1
53334: DEC
53335: ST_TO_ADDR
53336: LD_VAR 0 13
53340: PUSH
53341: FOR_TO
53342: IFFALSE 53704
// begin InitHc ;
53344: CALL_OW 19
// if not f then
53348: LD_VAR 0 12
53352: NOT
53353: IFFALSE 53442
// begin PrepareHuman ( false , i , skill ) ;
53355: LD_INT 0
53357: PPUSH
53358: LD_VAR 0 8
53362: PPUSH
53363: LD_VAR 0 4
53367: PPUSH
53368: CALL_OW 380
// un := CreateHuman ;
53372: LD_ADDR_VAR 0 14
53376: PUSH
53377: CALL_OW 44
53381: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53382: LD_ADDR_VAR 0 7
53386: PUSH
53387: LD_VAR 0 7
53391: PPUSH
53392: LD_INT 1
53394: PPUSH
53395: LD_VAR 0 14
53399: PPUSH
53400: CALL_OW 2
53404: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53405: LD_VAR 0 14
53409: PPUSH
53410: LD_VAR 0 1
53414: PPUSH
53415: CALL_OW 250
53419: PPUSH
53420: LD_VAR 0 1
53424: PPUSH
53425: CALL_OW 251
53429: PPUSH
53430: LD_INT 10
53432: PPUSH
53433: LD_INT 0
53435: PPUSH
53436: CALL_OW 50
// continue ;
53440: GO 53341
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53442: LD_VAR 0 12
53446: PUSH
53447: LD_INT 1
53449: ARRAY
53450: PPUSH
53451: CALL_OW 313
53455: PUSH
53456: LD_VAR 0 12
53460: PUSH
53461: LD_INT 1
53463: ARRAY
53464: PPUSH
53465: CALL_OW 266
53469: PUSH
53470: LD_INT 32
53472: PUSH
53473: LD_INT 31
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: IN
53480: AND
53481: PUSH
53482: LD_VAR 0 12
53486: PUSH
53487: LD_INT 1
53489: ARRAY
53490: PPUSH
53491: CALL_OW 313
53495: PUSH
53496: LD_INT 6
53498: EQUAL
53499: OR
53500: IFFALSE 53520
// f := Delete ( f , 1 ) ;
53502: LD_ADDR_VAR 0 12
53506: PUSH
53507: LD_VAR 0 12
53511: PPUSH
53512: LD_INT 1
53514: PPUSH
53515: CALL_OW 3
53519: ST_TO_ADDR
// if not f then
53520: LD_VAR 0 12
53524: NOT
53525: IFFALSE 53543
// begin x := x + 2 ;
53527: LD_ADDR_VAR 0 13
53531: PUSH
53532: LD_VAR 0 13
53536: PUSH
53537: LD_INT 2
53539: PLUS
53540: ST_TO_ADDR
// continue ;
53541: GO 53341
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53543: LD_VAR 0 12
53547: PUSH
53548: LD_INT 1
53550: ARRAY
53551: PPUSH
53552: CALL_OW 266
53556: PUSH
53557: LD_INT 5
53559: EQUAL
53560: IFFALSE 53634
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53562: LD_VAR 0 12
53566: PUSH
53567: LD_INT 1
53569: ARRAY
53570: PPUSH
53571: CALL_OW 313
53575: PUSH
53576: LD_INT 3
53578: LESS
53579: IFFALSE 53615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53581: LD_INT 0
53583: PPUSH
53584: LD_INT 5
53586: PUSH
53587: LD_INT 8
53589: PUSH
53590: LD_INT 9
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: PUSH
53598: LD_VAR 0 17
53602: ARRAY
53603: PPUSH
53604: LD_VAR 0 4
53608: PPUSH
53609: CALL_OW 380
53613: GO 53632
// PrepareHuman ( false , i , skill ) ;
53615: LD_INT 0
53617: PPUSH
53618: LD_VAR 0 8
53622: PPUSH
53623: LD_VAR 0 4
53627: PPUSH
53628: CALL_OW 380
// end else
53632: GO 53651
// PrepareHuman ( false , i , skill ) ;
53634: LD_INT 0
53636: PPUSH
53637: LD_VAR 0 8
53641: PPUSH
53642: LD_VAR 0 4
53646: PPUSH
53647: CALL_OW 380
// un := CreateHuman ;
53651: LD_ADDR_VAR 0 14
53655: PUSH
53656: CALL_OW 44
53660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53661: LD_ADDR_VAR 0 7
53665: PUSH
53666: LD_VAR 0 7
53670: PPUSH
53671: LD_INT 1
53673: PPUSH
53674: LD_VAR 0 14
53678: PPUSH
53679: CALL_OW 2
53683: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53684: LD_VAR 0 14
53688: PPUSH
53689: LD_VAR 0 12
53693: PUSH
53694: LD_INT 1
53696: ARRAY
53697: PPUSH
53698: CALL_OW 52
// end ;
53702: GO 53341
53704: POP
53705: POP
// end ;
53706: GO 52643
53708: POP
53709: POP
// result := result ^ buildings ;
53710: LD_ADDR_VAR 0 7
53714: PUSH
53715: LD_VAR 0 7
53719: PUSH
53720: LD_VAR 0 18
53724: ADD
53725: ST_TO_ADDR
// end else
53726: GO 53869
// begin for i = 1 to personel do
53728: LD_ADDR_VAR 0 8
53732: PUSH
53733: DOUBLE
53734: LD_INT 1
53736: DEC
53737: ST_TO_ADDR
53738: LD_VAR 0 6
53742: PUSH
53743: FOR_TO
53744: IFFALSE 53867
// begin if i > 4 then
53746: LD_VAR 0 8
53750: PUSH
53751: LD_INT 4
53753: GREATER
53754: IFFALSE 53758
// break ;
53756: GO 53867
// x := personel [ i ] ;
53758: LD_ADDR_VAR 0 13
53762: PUSH
53763: LD_VAR 0 6
53767: PUSH
53768: LD_VAR 0 8
53772: ARRAY
53773: ST_TO_ADDR
// if x = - 1 then
53774: LD_VAR 0 13
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: EQUAL
53783: IFFALSE 53787
// continue ;
53785: GO 53743
// PrepareHuman ( false , i , skill ) ;
53787: LD_INT 0
53789: PPUSH
53790: LD_VAR 0 8
53794: PPUSH
53795: LD_VAR 0 4
53799: PPUSH
53800: CALL_OW 380
// un := CreateHuman ;
53804: LD_ADDR_VAR 0 14
53808: PUSH
53809: CALL_OW 44
53813: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53814: LD_VAR 0 14
53818: PPUSH
53819: LD_VAR 0 1
53823: PPUSH
53824: CALL_OW 250
53828: PPUSH
53829: LD_VAR 0 1
53833: PPUSH
53834: CALL_OW 251
53838: PPUSH
53839: LD_INT 10
53841: PPUSH
53842: LD_INT 0
53844: PPUSH
53845: CALL_OW 50
// result := result ^ un ;
53849: LD_ADDR_VAR 0 7
53853: PUSH
53854: LD_VAR 0 7
53858: PUSH
53859: LD_VAR 0 14
53863: ADD
53864: ST_TO_ADDR
// end ;
53865: GO 53743
53867: POP
53868: POP
// end ; end ;
53869: LD_VAR 0 7
53873: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53874: LD_INT 0
53876: PPUSH
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
// result := false ;
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_INT 0
53899: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53900: LD_VAR 0 1
53904: NOT
53905: PUSH
53906: LD_VAR 0 1
53910: PPUSH
53911: CALL_OW 266
53915: PUSH
53916: LD_INT 32
53918: PUSH
53919: LD_INT 33
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: IN
53926: NOT
53927: OR
53928: IFFALSE 53932
// exit ;
53930: GO 55041
// nat := GetNation ( tower ) ;
53932: LD_ADDR_VAR 0 12
53936: PUSH
53937: LD_VAR 0 1
53941: PPUSH
53942: CALL_OW 248
53946: ST_TO_ADDR
// side := GetSide ( tower ) ;
53947: LD_ADDR_VAR 0 16
53951: PUSH
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL_OW 255
53961: ST_TO_ADDR
// x := GetX ( tower ) ;
53962: LD_ADDR_VAR 0 10
53966: PUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: CALL_OW 250
53976: ST_TO_ADDR
// y := GetY ( tower ) ;
53977: LD_ADDR_VAR 0 11
53981: PUSH
53982: LD_VAR 0 1
53986: PPUSH
53987: CALL_OW 251
53991: ST_TO_ADDR
// if not x or not y then
53992: LD_VAR 0 10
53996: NOT
53997: PUSH
53998: LD_VAR 0 11
54002: NOT
54003: OR
54004: IFFALSE 54008
// exit ;
54006: GO 55041
// weapon := 0 ;
54008: LD_ADDR_VAR 0 18
54012: PUSH
54013: LD_INT 0
54015: ST_TO_ADDR
// fac_list := [ ] ;
54016: LD_ADDR_VAR 0 17
54020: PUSH
54021: EMPTY
54022: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54023: LD_ADDR_VAR 0 6
54027: PUSH
54028: LD_VAR 0 1
54032: PPUSH
54033: CALL_OW 274
54037: PPUSH
54038: LD_VAR 0 2
54042: PPUSH
54043: LD_INT 0
54045: PPUSH
54046: CALL 51612 0 3
54050: PPUSH
54051: LD_INT 30
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PPUSH
54061: CALL_OW 72
54065: ST_TO_ADDR
// if not factories then
54066: LD_VAR 0 6
54070: NOT
54071: IFFALSE 54075
// exit ;
54073: GO 55041
// for i in factories do
54075: LD_ADDR_VAR 0 8
54079: PUSH
54080: LD_VAR 0 6
54084: PUSH
54085: FOR_IN
54086: IFFALSE 54111
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54088: LD_ADDR_VAR 0 17
54092: PUSH
54093: LD_VAR 0 17
54097: PUSH
54098: LD_VAR 0 8
54102: PPUSH
54103: CALL_OW 478
54107: UNION
54108: ST_TO_ADDR
54109: GO 54085
54111: POP
54112: POP
// if not fac_list then
54113: LD_VAR 0 17
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 55041
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54122: LD_ADDR_VAR 0 5
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: LD_INT 5
54132: PUSH
54133: LD_INT 9
54135: PUSH
54136: LD_INT 10
54138: PUSH
54139: LD_INT 6
54141: PUSH
54142: LD_INT 7
54144: PUSH
54145: LD_INT 11
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 27
54159: PUSH
54160: LD_INT 28
54162: PUSH
54163: LD_INT 26
54165: PUSH
54166: LD_INT 30
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 43
54177: PUSH
54178: LD_INT 44
54180: PUSH
54181: LD_INT 46
54183: PUSH
54184: LD_INT 45
54186: PUSH
54187: LD_INT 47
54189: PUSH
54190: LD_INT 49
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: LIST
54205: PUSH
54206: LD_VAR 0 12
54210: ARRAY
54211: ST_TO_ADDR
// list := list isect fac_list ;
54212: LD_ADDR_VAR 0 5
54216: PUSH
54217: LD_VAR 0 5
54221: PUSH
54222: LD_VAR 0 17
54226: ISECT
54227: ST_TO_ADDR
// if not list then
54228: LD_VAR 0 5
54232: NOT
54233: IFFALSE 54237
// exit ;
54235: GO 55041
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54237: LD_VAR 0 12
54241: PUSH
54242: LD_INT 3
54244: EQUAL
54245: PUSH
54246: LD_INT 49
54248: PUSH
54249: LD_VAR 0 5
54253: IN
54254: AND
54255: PUSH
54256: LD_INT 31
54258: PPUSH
54259: LD_VAR 0 16
54263: PPUSH
54264: CALL_OW 321
54268: PUSH
54269: LD_INT 2
54271: EQUAL
54272: AND
54273: IFFALSE 54333
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54275: LD_INT 22
54277: PUSH
54278: LD_VAR 0 16
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 35
54289: PUSH
54290: LD_INT 49
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 91
54299: PUSH
54300: LD_VAR 0 1
54304: PUSH
54305: LD_INT 10
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: PPUSH
54318: CALL_OW 69
54322: NOT
54323: IFFALSE 54333
// weapon := ru_time_lapser ;
54325: LD_ADDR_VAR 0 18
54329: PUSH
54330: LD_INT 49
54332: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54333: LD_VAR 0 12
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: IN
54348: PUSH
54349: LD_INT 11
54351: PUSH
54352: LD_VAR 0 5
54356: IN
54357: PUSH
54358: LD_INT 30
54360: PUSH
54361: LD_VAR 0 5
54365: IN
54366: OR
54367: AND
54368: PUSH
54369: LD_INT 6
54371: PPUSH
54372: LD_VAR 0 16
54376: PPUSH
54377: CALL_OW 321
54381: PUSH
54382: LD_INT 2
54384: EQUAL
54385: AND
54386: IFFALSE 54551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54388: LD_INT 22
54390: PUSH
54391: LD_VAR 0 16
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 35
54405: PUSH
54406: LD_INT 11
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 35
54415: PUSH
54416: LD_INT 30
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 91
54430: PUSH
54431: LD_VAR 0 1
54435: PUSH
54436: LD_INT 18
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: PPUSH
54449: CALL_OW 69
54453: NOT
54454: PUSH
54455: LD_INT 22
54457: PUSH
54458: LD_VAR 0 16
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 30
54472: PUSH
54473: LD_INT 32
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 30
54482: PUSH
54483: LD_INT 33
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 91
54497: PUSH
54498: LD_VAR 0 1
54502: PUSH
54503: LD_INT 12
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: LIST
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: PPUSH
54519: CALL_OW 69
54523: PUSH
54524: LD_INT 2
54526: GREATER
54527: AND
54528: IFFALSE 54551
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54530: LD_ADDR_VAR 0 18
54534: PUSH
54535: LD_INT 11
54537: PUSH
54538: LD_INT 30
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_VAR 0 12
54549: ARRAY
54550: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54551: LD_VAR 0 18
54555: NOT
54556: PUSH
54557: LD_INT 40
54559: PPUSH
54560: LD_VAR 0 16
54564: PPUSH
54565: CALL_OW 321
54569: PUSH
54570: LD_INT 2
54572: EQUAL
54573: AND
54574: PUSH
54575: LD_INT 7
54577: PUSH
54578: LD_VAR 0 5
54582: IN
54583: PUSH
54584: LD_INT 28
54586: PUSH
54587: LD_VAR 0 5
54591: IN
54592: OR
54593: PUSH
54594: LD_INT 45
54596: PUSH
54597: LD_VAR 0 5
54601: IN
54602: OR
54603: AND
54604: IFFALSE 54858
// begin hex := GetHexInfo ( x , y ) ;
54606: LD_ADDR_VAR 0 4
54610: PUSH
54611: LD_VAR 0 10
54615: PPUSH
54616: LD_VAR 0 11
54620: PPUSH
54621: CALL_OW 546
54625: ST_TO_ADDR
// if hex [ 1 ] then
54626: LD_VAR 0 4
54630: PUSH
54631: LD_INT 1
54633: ARRAY
54634: IFFALSE 54638
// exit ;
54636: GO 55041
// height := hex [ 2 ] ;
54638: LD_ADDR_VAR 0 15
54642: PUSH
54643: LD_VAR 0 4
54647: PUSH
54648: LD_INT 2
54650: ARRAY
54651: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54652: LD_ADDR_VAR 0 14
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: LD_INT 5
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// for i in tmp do
54675: LD_ADDR_VAR 0 8
54679: PUSH
54680: LD_VAR 0 14
54684: PUSH
54685: FOR_IN
54686: IFFALSE 54856
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54688: LD_ADDR_VAR 0 9
54692: PUSH
54693: LD_VAR 0 10
54697: PPUSH
54698: LD_VAR 0 8
54702: PPUSH
54703: LD_INT 5
54705: PPUSH
54706: CALL_OW 272
54710: PUSH
54711: LD_VAR 0 11
54715: PPUSH
54716: LD_VAR 0 8
54720: PPUSH
54721: LD_INT 5
54723: PPUSH
54724: CALL_OW 273
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54733: LD_VAR 0 9
54737: PUSH
54738: LD_INT 1
54740: ARRAY
54741: PPUSH
54742: LD_VAR 0 9
54746: PUSH
54747: LD_INT 2
54749: ARRAY
54750: PPUSH
54751: CALL_OW 488
54755: IFFALSE 54854
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54757: LD_ADDR_VAR 0 4
54761: PUSH
54762: LD_VAR 0 9
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: PPUSH
54771: LD_VAR 0 9
54775: PUSH
54776: LD_INT 2
54778: ARRAY
54779: PPUSH
54780: CALL_OW 546
54784: ST_TO_ADDR
// if hex [ 1 ] then
54785: LD_VAR 0 4
54789: PUSH
54790: LD_INT 1
54792: ARRAY
54793: IFFALSE 54797
// continue ;
54795: GO 54685
// h := hex [ 2 ] ;
54797: LD_ADDR_VAR 0 13
54801: PUSH
54802: LD_VAR 0 4
54806: PUSH
54807: LD_INT 2
54809: ARRAY
54810: ST_TO_ADDR
// if h + 7 < height then
54811: LD_VAR 0 13
54815: PUSH
54816: LD_INT 7
54818: PLUS
54819: PUSH
54820: LD_VAR 0 15
54824: LESS
54825: IFFALSE 54854
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54827: LD_ADDR_VAR 0 18
54831: PUSH
54832: LD_INT 7
54834: PUSH
54835: LD_INT 28
54837: PUSH
54838: LD_INT 45
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: PUSH
54846: LD_VAR 0 12
54850: ARRAY
54851: ST_TO_ADDR
// break ;
54852: GO 54856
// end ; end ; end ;
54854: GO 54685
54856: POP
54857: POP
// end ; if not weapon then
54858: LD_VAR 0 18
54862: NOT
54863: IFFALSE 54923
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54865: LD_ADDR_VAR 0 5
54869: PUSH
54870: LD_VAR 0 5
54874: PUSH
54875: LD_INT 11
54877: PUSH
54878: LD_INT 30
54880: PUSH
54881: LD_INT 49
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: DIFF
54889: ST_TO_ADDR
// if not list then
54890: LD_VAR 0 5
54894: NOT
54895: IFFALSE 54899
// exit ;
54897: GO 55041
// weapon := list [ rand ( 1 , list ) ] ;
54899: LD_ADDR_VAR 0 18
54903: PUSH
54904: LD_VAR 0 5
54908: PUSH
54909: LD_INT 1
54911: PPUSH
54912: LD_VAR 0 5
54916: PPUSH
54917: CALL_OW 12
54921: ARRAY
54922: ST_TO_ADDR
// end ; if weapon then
54923: LD_VAR 0 18
54927: IFFALSE 55041
// begin tmp := CostOfWeapon ( weapon ) ;
54929: LD_ADDR_VAR 0 14
54933: PUSH
54934: LD_VAR 0 18
54938: PPUSH
54939: CALL_OW 451
54943: ST_TO_ADDR
// j := GetBase ( tower ) ;
54944: LD_ADDR_VAR 0 9
54948: PUSH
54949: LD_VAR 0 1
54953: PPUSH
54954: CALL_OW 274
54958: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54959: LD_VAR 0 9
54963: PPUSH
54964: LD_INT 1
54966: PPUSH
54967: CALL_OW 275
54971: PUSH
54972: LD_VAR 0 14
54976: PUSH
54977: LD_INT 1
54979: ARRAY
54980: GREATEREQUAL
54981: PUSH
54982: LD_VAR 0 9
54986: PPUSH
54987: LD_INT 2
54989: PPUSH
54990: CALL_OW 275
54994: PUSH
54995: LD_VAR 0 14
54999: PUSH
55000: LD_INT 2
55002: ARRAY
55003: GREATEREQUAL
55004: AND
55005: PUSH
55006: LD_VAR 0 9
55010: PPUSH
55011: LD_INT 3
55013: PPUSH
55014: CALL_OW 275
55018: PUSH
55019: LD_VAR 0 14
55023: PUSH
55024: LD_INT 3
55026: ARRAY
55027: GREATEREQUAL
55028: AND
55029: IFFALSE 55041
// result := weapon ;
55031: LD_ADDR_VAR 0 3
55035: PUSH
55036: LD_VAR 0 18
55040: ST_TO_ADDR
// end ; end ;
55041: LD_VAR 0 3
55045: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55046: LD_INT 0
55048: PPUSH
55049: PPUSH
// result := true ;
55050: LD_ADDR_VAR 0 3
55054: PUSH
55055: LD_INT 1
55057: ST_TO_ADDR
// if array1 = array2 then
55058: LD_VAR 0 1
55062: PUSH
55063: LD_VAR 0 2
55067: EQUAL
55068: IFFALSE 55128
// begin for i = 1 to array1 do
55070: LD_ADDR_VAR 0 4
55074: PUSH
55075: DOUBLE
55076: LD_INT 1
55078: DEC
55079: ST_TO_ADDR
55080: LD_VAR 0 1
55084: PUSH
55085: FOR_TO
55086: IFFALSE 55124
// if array1 [ i ] <> array2 [ i ] then
55088: LD_VAR 0 1
55092: PUSH
55093: LD_VAR 0 4
55097: ARRAY
55098: PUSH
55099: LD_VAR 0 2
55103: PUSH
55104: LD_VAR 0 4
55108: ARRAY
55109: NONEQUAL
55110: IFFALSE 55122
// begin result := false ;
55112: LD_ADDR_VAR 0 3
55116: PUSH
55117: LD_INT 0
55119: ST_TO_ADDR
// break ;
55120: GO 55124
// end ;
55122: GO 55085
55124: POP
55125: POP
// end else
55126: GO 55136
// result := false ;
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_INT 0
55135: ST_TO_ADDR
// end ;
55136: LD_VAR 0 3
55140: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55141: LD_INT 0
55143: PPUSH
55144: PPUSH
// if not array1 or not array2 then
55145: LD_VAR 0 1
55149: NOT
55150: PUSH
55151: LD_VAR 0 2
55155: NOT
55156: OR
55157: IFFALSE 55161
// exit ;
55159: GO 55225
// result := true ;
55161: LD_ADDR_VAR 0 3
55165: PUSH
55166: LD_INT 1
55168: ST_TO_ADDR
// for i = 1 to array1 do
55169: LD_ADDR_VAR 0 4
55173: PUSH
55174: DOUBLE
55175: LD_INT 1
55177: DEC
55178: ST_TO_ADDR
55179: LD_VAR 0 1
55183: PUSH
55184: FOR_TO
55185: IFFALSE 55223
// if array1 [ i ] <> array2 [ i ] then
55187: LD_VAR 0 1
55191: PUSH
55192: LD_VAR 0 4
55196: ARRAY
55197: PUSH
55198: LD_VAR 0 2
55202: PUSH
55203: LD_VAR 0 4
55207: ARRAY
55208: NONEQUAL
55209: IFFALSE 55221
// begin result := false ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_INT 0
55218: ST_TO_ADDR
// break ;
55219: GO 55223
// end ;
55221: GO 55184
55223: POP
55224: POP
// end ;
55225: LD_VAR 0 3
55229: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55230: LD_INT 0
55232: PPUSH
55233: PPUSH
55234: PPUSH
// pom := GetBase ( fac ) ;
55235: LD_ADDR_VAR 0 5
55239: PUSH
55240: LD_VAR 0 1
55244: PPUSH
55245: CALL_OW 274
55249: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55250: LD_ADDR_VAR 0 4
55254: PUSH
55255: LD_VAR 0 2
55259: PUSH
55260: LD_INT 1
55262: ARRAY
55263: PPUSH
55264: LD_VAR 0 2
55268: PUSH
55269: LD_INT 2
55271: ARRAY
55272: PPUSH
55273: LD_VAR 0 2
55277: PUSH
55278: LD_INT 3
55280: ARRAY
55281: PPUSH
55282: LD_VAR 0 2
55286: PUSH
55287: LD_INT 4
55289: ARRAY
55290: PPUSH
55291: CALL_OW 449
55295: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55296: LD_ADDR_VAR 0 3
55300: PUSH
55301: LD_VAR 0 5
55305: PPUSH
55306: LD_INT 1
55308: PPUSH
55309: CALL_OW 275
55313: PUSH
55314: LD_VAR 0 4
55318: PUSH
55319: LD_INT 1
55321: ARRAY
55322: GREATEREQUAL
55323: PUSH
55324: LD_VAR 0 5
55328: PPUSH
55329: LD_INT 2
55331: PPUSH
55332: CALL_OW 275
55336: PUSH
55337: LD_VAR 0 4
55341: PUSH
55342: LD_INT 2
55344: ARRAY
55345: GREATEREQUAL
55346: AND
55347: PUSH
55348: LD_VAR 0 5
55352: PPUSH
55353: LD_INT 3
55355: PPUSH
55356: CALL_OW 275
55360: PUSH
55361: LD_VAR 0 4
55365: PUSH
55366: LD_INT 3
55368: ARRAY
55369: GREATEREQUAL
55370: AND
55371: ST_TO_ADDR
// end ;
55372: LD_VAR 0 3
55376: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55377: LD_INT 0
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
// pom := GetBase ( building ) ;
55383: LD_ADDR_VAR 0 3
55387: PUSH
55388: LD_VAR 0 1
55392: PPUSH
55393: CALL_OW 274
55397: ST_TO_ADDR
// if not pom then
55398: LD_VAR 0 3
55402: NOT
55403: IFFALSE 55407
// exit ;
55405: GO 55577
// btype := GetBType ( building ) ;
55407: LD_ADDR_VAR 0 5
55411: PUSH
55412: LD_VAR 0 1
55416: PPUSH
55417: CALL_OW 266
55421: ST_TO_ADDR
// if btype = b_armoury then
55422: LD_VAR 0 5
55426: PUSH
55427: LD_INT 4
55429: EQUAL
55430: IFFALSE 55440
// btype := b_barracks ;
55432: LD_ADDR_VAR 0 5
55436: PUSH
55437: LD_INT 5
55439: ST_TO_ADDR
// if btype = b_depot then
55440: LD_VAR 0 5
55444: PUSH
55445: LD_INT 0
55447: EQUAL
55448: IFFALSE 55458
// btype := b_warehouse ;
55450: LD_ADDR_VAR 0 5
55454: PUSH
55455: LD_INT 1
55457: ST_TO_ADDR
// if btype = b_workshop then
55458: LD_VAR 0 5
55462: PUSH
55463: LD_INT 2
55465: EQUAL
55466: IFFALSE 55476
// btype := b_factory ;
55468: LD_ADDR_VAR 0 5
55472: PUSH
55473: LD_INT 3
55475: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55476: LD_ADDR_VAR 0 4
55480: PUSH
55481: LD_VAR 0 5
55485: PPUSH
55486: LD_VAR 0 1
55490: PPUSH
55491: CALL_OW 248
55495: PPUSH
55496: CALL_OW 450
55500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55501: LD_ADDR_VAR 0 2
55505: PUSH
55506: LD_VAR 0 3
55510: PPUSH
55511: LD_INT 1
55513: PPUSH
55514: CALL_OW 275
55518: PUSH
55519: LD_VAR 0 4
55523: PUSH
55524: LD_INT 1
55526: ARRAY
55527: GREATEREQUAL
55528: PUSH
55529: LD_VAR 0 3
55533: PPUSH
55534: LD_INT 2
55536: PPUSH
55537: CALL_OW 275
55541: PUSH
55542: LD_VAR 0 4
55546: PUSH
55547: LD_INT 2
55549: ARRAY
55550: GREATEREQUAL
55551: AND
55552: PUSH
55553: LD_VAR 0 3
55557: PPUSH
55558: LD_INT 3
55560: PPUSH
55561: CALL_OW 275
55565: PUSH
55566: LD_VAR 0 4
55570: PUSH
55571: LD_INT 3
55573: ARRAY
55574: GREATEREQUAL
55575: AND
55576: ST_TO_ADDR
// end ;
55577: LD_VAR 0 2
55581: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55582: LD_INT 0
55584: PPUSH
55585: PPUSH
55586: PPUSH
// pom := GetBase ( building ) ;
55587: LD_ADDR_VAR 0 4
55591: PUSH
55592: LD_VAR 0 1
55596: PPUSH
55597: CALL_OW 274
55601: ST_TO_ADDR
// if not pom then
55602: LD_VAR 0 4
55606: NOT
55607: IFFALSE 55611
// exit ;
55609: GO 55712
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55611: LD_ADDR_VAR 0 5
55615: PUSH
55616: LD_VAR 0 2
55620: PPUSH
55621: LD_VAR 0 1
55625: PPUSH
55626: CALL_OW 248
55630: PPUSH
55631: CALL_OW 450
55635: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55636: LD_ADDR_VAR 0 3
55640: PUSH
55641: LD_VAR 0 4
55645: PPUSH
55646: LD_INT 1
55648: PPUSH
55649: CALL_OW 275
55653: PUSH
55654: LD_VAR 0 5
55658: PUSH
55659: LD_INT 1
55661: ARRAY
55662: GREATEREQUAL
55663: PUSH
55664: LD_VAR 0 4
55668: PPUSH
55669: LD_INT 2
55671: PPUSH
55672: CALL_OW 275
55676: PUSH
55677: LD_VAR 0 5
55681: PUSH
55682: LD_INT 2
55684: ARRAY
55685: GREATEREQUAL
55686: AND
55687: PUSH
55688: LD_VAR 0 4
55692: PPUSH
55693: LD_INT 3
55695: PPUSH
55696: CALL_OW 275
55700: PUSH
55701: LD_VAR 0 5
55705: PUSH
55706: LD_INT 3
55708: ARRAY
55709: GREATEREQUAL
55710: AND
55711: ST_TO_ADDR
// end ;
55712: LD_VAR 0 3
55716: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55717: LD_INT 0
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
// result := false ;
55730: LD_ADDR_VAR 0 8
55734: PUSH
55735: LD_INT 0
55737: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55738: LD_VAR 0 5
55742: NOT
55743: PUSH
55744: LD_VAR 0 1
55748: NOT
55749: OR
55750: PUSH
55751: LD_VAR 0 2
55755: NOT
55756: OR
55757: PUSH
55758: LD_VAR 0 3
55762: NOT
55763: OR
55764: IFFALSE 55768
// exit ;
55766: GO 56582
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55768: LD_ADDR_VAR 0 14
55772: PUSH
55773: LD_VAR 0 1
55777: PPUSH
55778: LD_VAR 0 2
55782: PPUSH
55783: LD_VAR 0 3
55787: PPUSH
55788: LD_VAR 0 4
55792: PPUSH
55793: LD_VAR 0 5
55797: PUSH
55798: LD_INT 1
55800: ARRAY
55801: PPUSH
55802: CALL_OW 248
55806: PPUSH
55807: LD_INT 0
55809: PPUSH
55810: CALL 57815 0 6
55814: ST_TO_ADDR
// if not hexes then
55815: LD_VAR 0 14
55819: NOT
55820: IFFALSE 55824
// exit ;
55822: GO 56582
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55824: LD_ADDR_VAR 0 17
55828: PUSH
55829: LD_VAR 0 5
55833: PPUSH
55834: LD_INT 22
55836: PUSH
55837: LD_VAR 0 13
55841: PPUSH
55842: CALL_OW 255
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 30
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 30
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PPUSH
55883: CALL_OW 72
55887: ST_TO_ADDR
// for i = 1 to hexes do
55888: LD_ADDR_VAR 0 9
55892: PUSH
55893: DOUBLE
55894: LD_INT 1
55896: DEC
55897: ST_TO_ADDR
55898: LD_VAR 0 14
55902: PUSH
55903: FOR_TO
55904: IFFALSE 56580
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55906: LD_ADDR_VAR 0 13
55910: PUSH
55911: LD_VAR 0 14
55915: PUSH
55916: LD_VAR 0 9
55920: ARRAY
55921: PUSH
55922: LD_INT 1
55924: ARRAY
55925: PPUSH
55926: LD_VAR 0 14
55930: PUSH
55931: LD_VAR 0 9
55935: ARRAY
55936: PUSH
55937: LD_INT 2
55939: ARRAY
55940: PPUSH
55941: CALL_OW 428
55945: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55946: LD_VAR 0 14
55950: PUSH
55951: LD_VAR 0 9
55955: ARRAY
55956: PUSH
55957: LD_INT 1
55959: ARRAY
55960: PPUSH
55961: LD_VAR 0 14
55965: PUSH
55966: LD_VAR 0 9
55970: ARRAY
55971: PUSH
55972: LD_INT 2
55974: ARRAY
55975: PPUSH
55976: CALL_OW 351
55980: PUSH
55981: LD_VAR 0 14
55985: PUSH
55986: LD_VAR 0 9
55990: ARRAY
55991: PUSH
55992: LD_INT 1
55994: ARRAY
55995: PPUSH
55996: LD_VAR 0 14
56000: PUSH
56001: LD_VAR 0 9
56005: ARRAY
56006: PUSH
56007: LD_INT 2
56009: ARRAY
56010: PPUSH
56011: CALL_OW 488
56015: NOT
56016: OR
56017: PUSH
56018: LD_VAR 0 13
56022: PPUSH
56023: CALL_OW 247
56027: PUSH
56028: LD_INT 3
56030: EQUAL
56031: OR
56032: IFFALSE 56038
// exit ;
56034: POP
56035: POP
56036: GO 56582
// if not tmp then
56038: LD_VAR 0 13
56042: NOT
56043: IFFALSE 56047
// continue ;
56045: GO 55903
// result := true ;
56047: LD_ADDR_VAR 0 8
56051: PUSH
56052: LD_INT 1
56054: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56055: LD_VAR 0 6
56059: PUSH
56060: LD_VAR 0 13
56064: PPUSH
56065: CALL_OW 247
56069: PUSH
56070: LD_INT 2
56072: EQUAL
56073: AND
56074: PUSH
56075: LD_VAR 0 13
56079: PPUSH
56080: CALL_OW 263
56084: PUSH
56085: LD_INT 1
56087: EQUAL
56088: AND
56089: IFFALSE 56253
// begin if IsDrivenBy ( tmp ) then
56091: LD_VAR 0 13
56095: PPUSH
56096: CALL_OW 311
56100: IFFALSE 56104
// continue ;
56102: GO 55903
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56104: LD_VAR 0 6
56108: PPUSH
56109: LD_INT 3
56111: PUSH
56112: LD_INT 60
56114: PUSH
56115: EMPTY
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: PUSH
56125: LD_INT 55
56127: PUSH
56128: EMPTY
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PPUSH
56139: CALL_OW 72
56143: IFFALSE 56251
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56145: LD_ADDR_VAR 0 18
56149: PUSH
56150: LD_VAR 0 6
56154: PPUSH
56155: LD_INT 3
56157: PUSH
56158: LD_INT 60
56160: PUSH
56161: EMPTY
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: LD_INT 55
56173: PUSH
56174: EMPTY
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PPUSH
56185: CALL_OW 72
56189: PUSH
56190: LD_INT 1
56192: ARRAY
56193: ST_TO_ADDR
// if IsInUnit ( driver ) then
56194: LD_VAR 0 18
56198: PPUSH
56199: CALL_OW 310
56203: IFFALSE 56214
// ComExit ( driver ) ;
56205: LD_VAR 0 18
56209: PPUSH
56210: CALL 81595 0 1
// AddComEnterUnit ( driver , tmp ) ;
56214: LD_VAR 0 18
56218: PPUSH
56219: LD_VAR 0 13
56223: PPUSH
56224: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56228: LD_VAR 0 18
56232: PPUSH
56233: LD_VAR 0 7
56237: PPUSH
56238: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56242: LD_VAR 0 18
56246: PPUSH
56247: CALL_OW 181
// end ; continue ;
56251: GO 55903
// end ; if not cleaners or not tmp in cleaners then
56253: LD_VAR 0 6
56257: NOT
56258: PUSH
56259: LD_VAR 0 13
56263: PUSH
56264: LD_VAR 0 6
56268: IN
56269: NOT
56270: OR
56271: IFFALSE 56578
// begin if dep then
56273: LD_VAR 0 17
56277: IFFALSE 56413
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56279: LD_ADDR_VAR 0 16
56283: PUSH
56284: LD_VAR 0 17
56288: PUSH
56289: LD_INT 1
56291: ARRAY
56292: PPUSH
56293: CALL_OW 250
56297: PPUSH
56298: LD_VAR 0 17
56302: PUSH
56303: LD_INT 1
56305: ARRAY
56306: PPUSH
56307: CALL_OW 254
56311: PPUSH
56312: LD_INT 5
56314: PPUSH
56315: CALL_OW 272
56319: PUSH
56320: LD_VAR 0 17
56324: PUSH
56325: LD_INT 1
56327: ARRAY
56328: PPUSH
56329: CALL_OW 251
56333: PPUSH
56334: LD_VAR 0 17
56338: PUSH
56339: LD_INT 1
56341: ARRAY
56342: PPUSH
56343: CALL_OW 254
56347: PPUSH
56348: LD_INT 5
56350: PPUSH
56351: CALL_OW 273
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56360: LD_VAR 0 16
56364: PUSH
56365: LD_INT 1
56367: ARRAY
56368: PPUSH
56369: LD_VAR 0 16
56373: PUSH
56374: LD_INT 2
56376: ARRAY
56377: PPUSH
56378: CALL_OW 488
56382: IFFALSE 56413
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56384: LD_VAR 0 13
56388: PPUSH
56389: LD_VAR 0 16
56393: PUSH
56394: LD_INT 1
56396: ARRAY
56397: PPUSH
56398: LD_VAR 0 16
56402: PUSH
56403: LD_INT 2
56405: ARRAY
56406: PPUSH
56407: CALL_OW 111
// continue ;
56411: GO 55903
// end ; end ; r := GetDir ( tmp ) ;
56413: LD_ADDR_VAR 0 15
56417: PUSH
56418: LD_VAR 0 13
56422: PPUSH
56423: CALL_OW 254
56427: ST_TO_ADDR
// if r = 5 then
56428: LD_VAR 0 15
56432: PUSH
56433: LD_INT 5
56435: EQUAL
56436: IFFALSE 56446
// r := 0 ;
56438: LD_ADDR_VAR 0 15
56442: PUSH
56443: LD_INT 0
56445: ST_TO_ADDR
// for j = r to 5 do
56446: LD_ADDR_VAR 0 10
56450: PUSH
56451: DOUBLE
56452: LD_VAR 0 15
56456: DEC
56457: ST_TO_ADDR
56458: LD_INT 5
56460: PUSH
56461: FOR_TO
56462: IFFALSE 56576
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56464: LD_ADDR_VAR 0 11
56468: PUSH
56469: LD_VAR 0 13
56473: PPUSH
56474: CALL_OW 250
56478: PPUSH
56479: LD_VAR 0 10
56483: PPUSH
56484: LD_INT 2
56486: PPUSH
56487: CALL_OW 272
56491: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56492: LD_ADDR_VAR 0 12
56496: PUSH
56497: LD_VAR 0 13
56501: PPUSH
56502: CALL_OW 251
56506: PPUSH
56507: LD_VAR 0 10
56511: PPUSH
56512: LD_INT 2
56514: PPUSH
56515: CALL_OW 273
56519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56520: LD_VAR 0 11
56524: PPUSH
56525: LD_VAR 0 12
56529: PPUSH
56530: CALL_OW 488
56534: PUSH
56535: LD_VAR 0 11
56539: PPUSH
56540: LD_VAR 0 12
56544: PPUSH
56545: CALL_OW 428
56549: NOT
56550: AND
56551: IFFALSE 56574
// begin ComMoveXY ( tmp , _x , _y ) ;
56553: LD_VAR 0 13
56557: PPUSH
56558: LD_VAR 0 11
56562: PPUSH
56563: LD_VAR 0 12
56567: PPUSH
56568: CALL_OW 111
// break ;
56572: GO 56576
// end ; end ;
56574: GO 56461
56576: POP
56577: POP
// end ; end ;
56578: GO 55903
56580: POP
56581: POP
// end ;
56582: LD_VAR 0 8
56586: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56587: LD_INT 0
56589: PPUSH
// result := true ;
56590: LD_ADDR_VAR 0 3
56594: PUSH
56595: LD_INT 1
56597: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56598: LD_VAR 0 2
56602: PUSH
56603: LD_INT 24
56605: DOUBLE
56606: EQUAL
56607: IFTRUE 56617
56609: LD_INT 33
56611: DOUBLE
56612: EQUAL
56613: IFTRUE 56617
56615: GO 56642
56617: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56618: LD_ADDR_VAR 0 3
56622: PUSH
56623: LD_INT 32
56625: PPUSH
56626: LD_VAR 0 1
56630: PPUSH
56631: CALL_OW 321
56635: PUSH
56636: LD_INT 2
56638: EQUAL
56639: ST_TO_ADDR
56640: GO 56958
56642: LD_INT 20
56644: DOUBLE
56645: EQUAL
56646: IFTRUE 56650
56648: GO 56675
56650: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56651: LD_ADDR_VAR 0 3
56655: PUSH
56656: LD_INT 6
56658: PPUSH
56659: LD_VAR 0 1
56663: PPUSH
56664: CALL_OW 321
56668: PUSH
56669: LD_INT 2
56671: EQUAL
56672: ST_TO_ADDR
56673: GO 56958
56675: LD_INT 22
56677: DOUBLE
56678: EQUAL
56679: IFTRUE 56689
56681: LD_INT 36
56683: DOUBLE
56684: EQUAL
56685: IFTRUE 56689
56687: GO 56714
56689: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56690: LD_ADDR_VAR 0 3
56694: PUSH
56695: LD_INT 15
56697: PPUSH
56698: LD_VAR 0 1
56702: PPUSH
56703: CALL_OW 321
56707: PUSH
56708: LD_INT 2
56710: EQUAL
56711: ST_TO_ADDR
56712: GO 56958
56714: LD_INT 30
56716: DOUBLE
56717: EQUAL
56718: IFTRUE 56722
56720: GO 56747
56722: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56723: LD_ADDR_VAR 0 3
56727: PUSH
56728: LD_INT 20
56730: PPUSH
56731: LD_VAR 0 1
56735: PPUSH
56736: CALL_OW 321
56740: PUSH
56741: LD_INT 2
56743: EQUAL
56744: ST_TO_ADDR
56745: GO 56958
56747: LD_INT 28
56749: DOUBLE
56750: EQUAL
56751: IFTRUE 56761
56753: LD_INT 21
56755: DOUBLE
56756: EQUAL
56757: IFTRUE 56761
56759: GO 56786
56761: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56762: LD_ADDR_VAR 0 3
56766: PUSH
56767: LD_INT 21
56769: PPUSH
56770: LD_VAR 0 1
56774: PPUSH
56775: CALL_OW 321
56779: PUSH
56780: LD_INT 2
56782: EQUAL
56783: ST_TO_ADDR
56784: GO 56958
56786: LD_INT 16
56788: DOUBLE
56789: EQUAL
56790: IFTRUE 56794
56792: GO 56819
56794: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56795: LD_ADDR_VAR 0 3
56799: PUSH
56800: LD_INT 84
56802: PPUSH
56803: LD_VAR 0 1
56807: PPUSH
56808: CALL_OW 321
56812: PUSH
56813: LD_INT 2
56815: EQUAL
56816: ST_TO_ADDR
56817: GO 56958
56819: LD_INT 19
56821: DOUBLE
56822: EQUAL
56823: IFTRUE 56833
56825: LD_INT 23
56827: DOUBLE
56828: EQUAL
56829: IFTRUE 56833
56831: GO 56858
56833: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56834: LD_ADDR_VAR 0 3
56838: PUSH
56839: LD_INT 83
56841: PPUSH
56842: LD_VAR 0 1
56846: PPUSH
56847: CALL_OW 321
56851: PUSH
56852: LD_INT 2
56854: EQUAL
56855: ST_TO_ADDR
56856: GO 56958
56858: LD_INT 17
56860: DOUBLE
56861: EQUAL
56862: IFTRUE 56866
56864: GO 56891
56866: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56867: LD_ADDR_VAR 0 3
56871: PUSH
56872: LD_INT 39
56874: PPUSH
56875: LD_VAR 0 1
56879: PPUSH
56880: CALL_OW 321
56884: PUSH
56885: LD_INT 2
56887: EQUAL
56888: ST_TO_ADDR
56889: GO 56958
56891: LD_INT 18
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56899
56897: GO 56924
56899: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56900: LD_ADDR_VAR 0 3
56904: PUSH
56905: LD_INT 40
56907: PPUSH
56908: LD_VAR 0 1
56912: PPUSH
56913: CALL_OW 321
56917: PUSH
56918: LD_INT 2
56920: EQUAL
56921: ST_TO_ADDR
56922: GO 56958
56924: LD_INT 27
56926: DOUBLE
56927: EQUAL
56928: IFTRUE 56932
56930: GO 56957
56932: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56933: LD_ADDR_VAR 0 3
56937: PUSH
56938: LD_INT 35
56940: PPUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 321
56950: PUSH
56951: LD_INT 2
56953: EQUAL
56954: ST_TO_ADDR
56955: GO 56958
56957: POP
// end ;
56958: LD_VAR 0 3
56962: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56963: LD_INT 0
56965: PPUSH
56966: PPUSH
56967: PPUSH
56968: PPUSH
56969: PPUSH
56970: PPUSH
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
// result := false ;
56976: LD_ADDR_VAR 0 6
56980: PUSH
56981: LD_INT 0
56983: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56984: LD_VAR 0 1
56988: NOT
56989: PUSH
56990: LD_VAR 0 1
56994: PPUSH
56995: CALL_OW 266
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: IN
57010: NOT
57011: OR
57012: PUSH
57013: LD_VAR 0 2
57017: NOT
57018: OR
57019: PUSH
57020: LD_VAR 0 5
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: LD_INT 5
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: IN
57051: NOT
57052: OR
57053: PUSH
57054: LD_VAR 0 3
57058: PPUSH
57059: LD_VAR 0 4
57063: PPUSH
57064: CALL_OW 488
57068: NOT
57069: OR
57070: IFFALSE 57074
// exit ;
57072: GO 57810
// side := GetSide ( depot ) ;
57074: LD_ADDR_VAR 0 9
57078: PUSH
57079: LD_VAR 0 1
57083: PPUSH
57084: CALL_OW 255
57088: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57089: LD_VAR 0 9
57093: PPUSH
57094: LD_VAR 0 2
57098: PPUSH
57099: CALL 56587 0 2
57103: NOT
57104: IFFALSE 57108
// exit ;
57106: GO 57810
// pom := GetBase ( depot ) ;
57108: LD_ADDR_VAR 0 10
57112: PUSH
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 274
57122: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57123: LD_ADDR_VAR 0 11
57127: PUSH
57128: LD_VAR 0 2
57132: PPUSH
57133: LD_VAR 0 1
57137: PPUSH
57138: CALL_OW 248
57142: PPUSH
57143: CALL_OW 450
57147: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57148: LD_VAR 0 10
57152: PPUSH
57153: LD_INT 1
57155: PPUSH
57156: CALL_OW 275
57160: PUSH
57161: LD_VAR 0 11
57165: PUSH
57166: LD_INT 1
57168: ARRAY
57169: GREATEREQUAL
57170: PUSH
57171: LD_VAR 0 10
57175: PPUSH
57176: LD_INT 2
57178: PPUSH
57179: CALL_OW 275
57183: PUSH
57184: LD_VAR 0 11
57188: PUSH
57189: LD_INT 2
57191: ARRAY
57192: GREATEREQUAL
57193: AND
57194: PUSH
57195: LD_VAR 0 10
57199: PPUSH
57200: LD_INT 3
57202: PPUSH
57203: CALL_OW 275
57207: PUSH
57208: LD_VAR 0 11
57212: PUSH
57213: LD_INT 3
57215: ARRAY
57216: GREATEREQUAL
57217: AND
57218: NOT
57219: IFFALSE 57223
// exit ;
57221: GO 57810
// if GetBType ( depot ) = b_depot then
57223: LD_VAR 0 1
57227: PPUSH
57228: CALL_OW 266
57232: PUSH
57233: LD_INT 0
57235: EQUAL
57236: IFFALSE 57248
// dist := 28 else
57238: LD_ADDR_VAR 0 14
57242: PUSH
57243: LD_INT 28
57245: ST_TO_ADDR
57246: GO 57256
// dist := 36 ;
57248: LD_ADDR_VAR 0 14
57252: PUSH
57253: LD_INT 36
57255: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57256: LD_VAR 0 1
57260: PPUSH
57261: LD_VAR 0 3
57265: PPUSH
57266: LD_VAR 0 4
57270: PPUSH
57271: CALL_OW 297
57275: PUSH
57276: LD_VAR 0 14
57280: GREATER
57281: IFFALSE 57285
// exit ;
57283: GO 57810
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57285: LD_ADDR_VAR 0 12
57289: PUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: LD_VAR 0 3
57299: PPUSH
57300: LD_VAR 0 4
57304: PPUSH
57305: LD_VAR 0 5
57309: PPUSH
57310: LD_VAR 0 1
57314: PPUSH
57315: CALL_OW 248
57319: PPUSH
57320: LD_INT 0
57322: PPUSH
57323: CALL 57815 0 6
57327: ST_TO_ADDR
// if not hexes then
57328: LD_VAR 0 12
57332: NOT
57333: IFFALSE 57337
// exit ;
57335: GO 57810
// hex := GetHexInfo ( x , y ) ;
57337: LD_ADDR_VAR 0 15
57341: PUSH
57342: LD_VAR 0 3
57346: PPUSH
57347: LD_VAR 0 4
57351: PPUSH
57352: CALL_OW 546
57356: ST_TO_ADDR
// if hex [ 1 ] then
57357: LD_VAR 0 15
57361: PUSH
57362: LD_INT 1
57364: ARRAY
57365: IFFALSE 57369
// exit ;
57367: GO 57810
// height := hex [ 2 ] ;
57369: LD_ADDR_VAR 0 13
57373: PUSH
57374: LD_VAR 0 15
57378: PUSH
57379: LD_INT 2
57381: ARRAY
57382: ST_TO_ADDR
// for i = 1 to hexes do
57383: LD_ADDR_VAR 0 7
57387: PUSH
57388: DOUBLE
57389: LD_INT 1
57391: DEC
57392: ST_TO_ADDR
57393: LD_VAR 0 12
57397: PUSH
57398: FOR_TO
57399: IFFALSE 57729
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57401: LD_VAR 0 12
57405: PUSH
57406: LD_VAR 0 7
57410: ARRAY
57411: PUSH
57412: LD_INT 1
57414: ARRAY
57415: PPUSH
57416: LD_VAR 0 12
57420: PUSH
57421: LD_VAR 0 7
57425: ARRAY
57426: PUSH
57427: LD_INT 2
57429: ARRAY
57430: PPUSH
57431: CALL_OW 488
57435: NOT
57436: PUSH
57437: LD_VAR 0 12
57441: PUSH
57442: LD_VAR 0 7
57446: ARRAY
57447: PUSH
57448: LD_INT 1
57450: ARRAY
57451: PPUSH
57452: LD_VAR 0 12
57456: PUSH
57457: LD_VAR 0 7
57461: ARRAY
57462: PUSH
57463: LD_INT 2
57465: ARRAY
57466: PPUSH
57467: CALL_OW 428
57471: PUSH
57472: LD_INT 0
57474: GREATER
57475: OR
57476: PUSH
57477: LD_VAR 0 12
57481: PUSH
57482: LD_VAR 0 7
57486: ARRAY
57487: PUSH
57488: LD_INT 1
57490: ARRAY
57491: PPUSH
57492: LD_VAR 0 12
57496: PUSH
57497: LD_VAR 0 7
57501: ARRAY
57502: PUSH
57503: LD_INT 2
57505: ARRAY
57506: PPUSH
57507: CALL_OW 351
57511: OR
57512: IFFALSE 57518
// exit ;
57514: POP
57515: POP
57516: GO 57810
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57518: LD_ADDR_VAR 0 8
57522: PUSH
57523: LD_VAR 0 12
57527: PUSH
57528: LD_VAR 0 7
57532: ARRAY
57533: PUSH
57534: LD_INT 1
57536: ARRAY
57537: PPUSH
57538: LD_VAR 0 12
57542: PUSH
57543: LD_VAR 0 7
57547: ARRAY
57548: PUSH
57549: LD_INT 2
57551: ARRAY
57552: PPUSH
57553: CALL_OW 546
57557: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57558: LD_VAR 0 8
57562: PUSH
57563: LD_INT 1
57565: ARRAY
57566: PUSH
57567: LD_VAR 0 8
57571: PUSH
57572: LD_INT 2
57574: ARRAY
57575: PUSH
57576: LD_VAR 0 13
57580: PUSH
57581: LD_INT 2
57583: PLUS
57584: GREATER
57585: OR
57586: PUSH
57587: LD_VAR 0 8
57591: PUSH
57592: LD_INT 2
57594: ARRAY
57595: PUSH
57596: LD_VAR 0 13
57600: PUSH
57601: LD_INT 2
57603: MINUS
57604: LESS
57605: OR
57606: PUSH
57607: LD_VAR 0 8
57611: PUSH
57612: LD_INT 3
57614: ARRAY
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 8
57621: PUSH
57622: LD_INT 9
57624: PUSH
57625: LD_INT 10
57627: PUSH
57628: LD_INT 11
57630: PUSH
57631: LD_INT 12
57633: PUSH
57634: LD_INT 13
57636: PUSH
57637: LD_INT 16
57639: PUSH
57640: LD_INT 17
57642: PUSH
57643: LD_INT 18
57645: PUSH
57646: LD_INT 19
57648: PUSH
57649: LD_INT 20
57651: PUSH
57652: LD_INT 21
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: IN
57670: NOT
57671: OR
57672: PUSH
57673: LD_VAR 0 8
57677: PUSH
57678: LD_INT 5
57680: ARRAY
57681: NOT
57682: OR
57683: PUSH
57684: LD_VAR 0 8
57688: PUSH
57689: LD_INT 6
57691: ARRAY
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 7
57701: PUSH
57702: LD_INT 9
57704: PUSH
57705: LD_INT 10
57707: PUSH
57708: LD_INT 11
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: IN
57719: NOT
57720: OR
57721: IFFALSE 57727
// exit ;
57723: POP
57724: POP
57725: GO 57810
// end ;
57727: GO 57398
57729: POP
57730: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57731: LD_VAR 0 9
57735: PPUSH
57736: LD_VAR 0 3
57740: PPUSH
57741: LD_VAR 0 4
57745: PPUSH
57746: LD_INT 20
57748: PPUSH
57749: CALL 49762 0 4
57753: PUSH
57754: LD_INT 4
57756: ARRAY
57757: IFFALSE 57761
// exit ;
57759: GO 57810
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57761: LD_VAR 0 2
57765: PUSH
57766: LD_INT 29
57768: PUSH
57769: LD_INT 30
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: IN
57776: PUSH
57777: LD_VAR 0 3
57781: PPUSH
57782: LD_VAR 0 4
57786: PPUSH
57787: LD_VAR 0 9
57791: PPUSH
57792: CALL_OW 440
57796: NOT
57797: AND
57798: IFFALSE 57802
// exit ;
57800: GO 57810
// result := true ;
57802: LD_ADDR_VAR 0 6
57806: PUSH
57807: LD_INT 1
57809: ST_TO_ADDR
// end ;
57810: LD_VAR 0 6
57814: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57815: LD_INT 0
57817: PPUSH
57818: PPUSH
57819: PPUSH
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
57828: PPUSH
57829: PPUSH
57830: PPUSH
57831: PPUSH
57832: PPUSH
57833: PPUSH
57834: PPUSH
57835: PPUSH
57836: PPUSH
57837: PPUSH
57838: PPUSH
57839: PPUSH
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
57844: PPUSH
57845: PPUSH
57846: PPUSH
57847: PPUSH
57848: PPUSH
57849: PPUSH
57850: PPUSH
57851: PPUSH
57852: PPUSH
57853: PPUSH
57854: PPUSH
57855: PPUSH
57856: PPUSH
57857: PPUSH
57858: PPUSH
57859: PPUSH
57860: PPUSH
57861: PPUSH
57862: PPUSH
57863: PPUSH
57864: PPUSH
57865: PPUSH
57866: PPUSH
57867: PPUSH
57868: PPUSH
57869: PPUSH
57870: PPUSH
57871: PPUSH
57872: PPUSH
57873: PPUSH
57874: PPUSH
// result = [ ] ;
57875: LD_ADDR_VAR 0 7
57879: PUSH
57880: EMPTY
57881: ST_TO_ADDR
// temp_list = [ ] ;
57882: LD_ADDR_VAR 0 9
57886: PUSH
57887: EMPTY
57888: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57889: LD_VAR 0 4
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 5
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: IN
57920: NOT
57921: PUSH
57922: LD_VAR 0 1
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: IN
57937: PUSH
57938: LD_VAR 0 5
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: IN
57957: NOT
57958: AND
57959: OR
57960: IFFALSE 57964
// exit ;
57962: GO 76355
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57964: LD_VAR 0 1
57968: PUSH
57969: LD_INT 6
57971: PUSH
57972: LD_INT 7
57974: PUSH
57975: LD_INT 8
57977: PUSH
57978: LD_INT 13
57980: PUSH
57981: LD_INT 12
57983: PUSH
57984: LD_INT 15
57986: PUSH
57987: LD_INT 11
57989: PUSH
57990: LD_INT 14
57992: PUSH
57993: LD_INT 10
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: IN
58007: IFFALSE 58017
// btype = b_lab ;
58009: LD_ADDR_VAR 0 1
58013: PUSH
58014: LD_INT 6
58016: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58017: LD_VAR 0 6
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: IN
58036: NOT
58037: PUSH
58038: LD_VAR 0 1
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 6
58057: PUSH
58058: LD_INT 36
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: LD_INT 5
58066: PUSH
58067: LD_INT 31
58069: PUSH
58070: LD_INT 32
58072: PUSH
58073: LD_INT 33
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: IN
58089: NOT
58090: PUSH
58091: LD_VAR 0 6
58095: PUSH
58096: LD_INT 1
58098: EQUAL
58099: AND
58100: OR
58101: PUSH
58102: LD_VAR 0 1
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: IN
58117: NOT
58118: PUSH
58119: LD_VAR 0 6
58123: PUSH
58124: LD_INT 2
58126: EQUAL
58127: AND
58128: OR
58129: IFFALSE 58139
// mode = 0 ;
58131: LD_ADDR_VAR 0 6
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// case mode of 0 :
58139: LD_VAR 0 6
58143: PUSH
58144: LD_INT 0
58146: DOUBLE
58147: EQUAL
58148: IFTRUE 58152
58150: GO 69605
58152: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58153: LD_ADDR_VAR 0 11
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58346: LD_ADDR_VAR 0 12
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58542: LD_ADDR_VAR 0 13
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: LD_INT 3
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58741: LD_ADDR_VAR 0 14
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58937: LD_ADDR_VAR 0 15
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59130: LD_ADDR_VAR 0 16
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59323: LD_ADDR_VAR 0 17
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59553: LD_ADDR_VAR 0 18
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59783: LD_ADDR_VAR 0 19
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60013: LD_ADDR_VAR 0 20
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60243: LD_ADDR_VAR 0 21
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60473: LD_ADDR_VAR 0 22
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60703: LD_ADDR_VAR 0 23
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60983: LD_ADDR_VAR 0 24
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61259: LD_ADDR_VAR 0 25
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 2
61435: NEG
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 3
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61533: LD_ADDR_VAR 0 26
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 2
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61809: LD_ADDR_VAR 0 27
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62089: LD_ADDR_VAR 0 28
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 3
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62371: LD_ADDR_VAR 0 29
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 2
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 3
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62650: LD_ADDR_VAR 0 30
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62928: LD_ADDR_VAR 0 31
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63206: LD_ADDR_VAR 0 32
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: LD_INT 2
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: LD_INT 2
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 3
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63484: LD_ADDR_VAR 0 33
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: NEG
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 2
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63763: LD_ADDR_VAR 0 34
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: NEG
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64043: LD_ADDR_VAR 0 35
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64155: LD_ADDR_VAR 0 36
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64267: LD_ADDR_VAR 0 37
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64379: LD_ADDR_VAR 0 38
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: LD_INT 1
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64491: LD_ADDR_VAR 0 39
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64603: LD_ADDR_VAR 0 40
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64715: LD_ADDR_VAR 0 41
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 3
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: LD_INT 3
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 2
64978: NEG
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: NEG
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 3
65000: NEG
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65065: LD_ADDR_VAR 0 42
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: NEG
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: LD_INT 2
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: LD_INT 3
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: LD_INT 3
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65415: LD_ADDR_VAR 0 43
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 2
65581: NEG
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 2
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 3
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: NEG
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65763: LD_ADDR_VAR 0 44
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 2
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 2
65887: PUSH
65888: LD_INT 2
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: LD_INT 2
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 2
65918: NEG
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: LD_INT 2
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 3
65996: PUSH
65997: LD_INT 2
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: LD_INT 3
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 3
66037: NEG
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 3
66048: NEG
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: LD_INT 3
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66113: LD_ADDR_VAR 0 45
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: LD_INT 2
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 2
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 2
66279: NEG
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 3
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: LD_INT 3
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: LD_INT 3
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: NEG
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 3
66422: NEG
66423: PUSH
66424: LD_INT 3
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66463: LD_ADDR_VAR 0 46
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 1
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: PUSH
66546: LD_INT 2
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 2
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: LD_INT 3
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 3
66759: NEG
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 3
66770: NEG
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66811: LD_ADDR_VAR 0 47
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 1
66869: NEG
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: LD_INT 2
66896: NEG
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: LD_INT 2
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 2
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66962: LD_ADDR_VAR 0 48
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67109: LD_ADDR_VAR 0 49
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 2
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67253: LD_ADDR_VAR 0 50
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: LD_INT 1
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: LD_INT 2
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: LD_INT 2
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67397: LD_ADDR_VAR 0 51
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: LD_INT 1
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 1
67455: NEG
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 2
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67544: LD_ADDR_VAR 0 52
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: LD_INT 1
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: LD_INT 2
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 1
67637: NEG
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: NEG
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 2
67659: NEG
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 2
67671: NEG
67672: PUSH
67673: LD_INT 2
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67695: LD_ADDR_VAR 0 53
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 1
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: NEG
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: PUSH
67778: LD_INT 2
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: LD_INT 2
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 1
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 2
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 2
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 2
67830: PUSH
67831: LD_INT 2
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: LD_INT 2
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 2
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 2
67882: NEG
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 2
67894: NEG
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67925: LD_ADDR_VAR 0 54
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 1
67963: PUSH
67964: LD_INT 1
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 1
68006: NEG
68007: PUSH
68008: LD_INT 2
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 2
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: PUSH
68030: LD_INT 1
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 2
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 2
68050: PUSH
68051: LD_INT 1
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: LD_INT 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 2
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 2
68112: NEG
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 2
68124: NEG
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68155: LD_ADDR_VAR 0 55
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 1
68213: NEG
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: LD_INT 1
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: LD_INT 2
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: LD_INT 2
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: LD_INT 1
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 2
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 2
68280: PUSH
68281: LD_INT 1
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: LD_INT 2
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: LD_INT 2
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: NEG
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: NEG
68355: PUSH
68356: LD_INT 2
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68385: LD_ADDR_VAR 0 56
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 1
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 1
68423: PUSH
68424: LD_INT 1
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 1
68443: NEG
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: NEG
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 1
68466: NEG
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 2
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 1
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 2
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 2
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 2
68561: NEG
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: LD_INT 1
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 2
68584: NEG
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68615: LD_ADDR_VAR 0 57
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 0
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 1
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 1
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: LD_INT 1
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 1
68673: NEG
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: LD_INT 1
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: LD_INT 2
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: PUSH
68720: LD_INT 1
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 2
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 2
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: LD_INT 2
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: LD_INT 2
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 2
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 2
68791: NEG
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: NEG
68803: PUSH
68804: LD_INT 1
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PUSH
68816: LD_INT 2
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68845: LD_ADDR_VAR 0 58
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 1
68865: NEG
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 1
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: LD_INT 1
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 1
68903: NEG
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 1
68914: NEG
68915: PUSH
68916: LD_INT 1
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 1
68926: NEG
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 2
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 1
68949: PUSH
68950: LD_INT 1
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: LD_INT 1
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: LD_INT 2
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: LD_INT 2
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: LD_INT 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: LD_INT 1
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 2
69021: NEG
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 2
69032: NEG
69033: PUSH
69034: LD_INT 1
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 2
69044: NEG
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69075: LD_ADDR_VAR 0 59
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 1
69133: NEG
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 1
69144: NEG
69145: PUSH
69146: LD_INT 1
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69163: LD_ADDR_VAR 0 60
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: LD_INT 1
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69251: LD_ADDR_VAR 0 61
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 1
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: NEG
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: PUSH
69322: LD_INT 1
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69339: LD_ADDR_VAR 0 62
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: LD_INT 0
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 0
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 1
69367: PUSH
69368: LD_INT 0
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: LD_INT 1
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: LD_INT 1
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69427: LD_ADDR_VAR 0 63
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: LD_INT 0
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 1
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 0
69475: PUSH
69476: LD_INT 1
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 1
69485: NEG
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 1
69496: NEG
69497: PUSH
69498: LD_INT 1
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69515: LD_ADDR_VAR 0 64
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: LD_INT 1
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 1
69584: NEG
69585: PUSH
69586: LD_INT 1
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: ST_TO_ADDR
// end ; 1 :
69603: GO 75500
69605: LD_INT 1
69607: DOUBLE
69608: EQUAL
69609: IFTRUE 69613
69611: GO 72236
69613: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69614: LD_ADDR_VAR 0 11
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: LD_INT 3
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: LD_INT 3
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: LD_INT 2
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: LIST
69657: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69658: LD_ADDR_VAR 0 12
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 3
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 3
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: LIST
69698: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69699: LD_ADDR_VAR 0 13
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 3
69716: PUSH
69717: LD_INT 3
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 2
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69739: LD_ADDR_VAR 0 14
69743: PUSH
69744: LD_INT 1
69746: PUSH
69747: LD_INT 3
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: LD_INT 2
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: LIST
69779: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69780: LD_ADDR_VAR 0 15
69784: PUSH
69785: LD_INT 2
69787: NEG
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 3
69798: NEG
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 3
69809: NEG
69810: PUSH
69811: LD_INT 1
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: LIST
69823: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69824: LD_ADDR_VAR 0 16
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: LD_INT 3
69835: NEG
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: LD_INT 3
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69870: LD_ADDR_VAR 0 17
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: LD_INT 3
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: LIST
69913: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69914: LD_ADDR_VAR 0 18
69918: PUSH
69919: LD_INT 2
69921: PUSH
69922: LD_INT 1
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 3
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: LIST
69954: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69955: LD_ADDR_VAR 0 19
69959: PUSH
69960: LD_INT 3
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 3
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 2
69982: PUSH
69983: LD_INT 3
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69995: LD_ADDR_VAR 0 20
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: LD_INT 3
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: NEG
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: LIST
70035: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70036: LD_ADDR_VAR 0 21
70040: PUSH
70041: LD_INT 2
70043: NEG
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 3
70054: NEG
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 3
70065: NEG
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: LIST
70079: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70080: LD_ADDR_VAR 0 22
70084: PUSH
70085: LD_INT 2
70087: NEG
70088: PUSH
70089: LD_INT 3
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 3
70099: NEG
70100: PUSH
70101: LD_INT 2
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 3
70111: NEG
70112: PUSH
70113: LD_INT 3
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70126: LD_ADDR_VAR 0 23
70130: PUSH
70131: LD_INT 0
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 1
70144: NEG
70145: PUSH
70146: LD_INT 4
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 1
70156: PUSH
70157: LD_INT 3
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70170: LD_ADDR_VAR 0 24
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 3
70187: PUSH
70188: LD_INT 1
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 4
70198: PUSH
70199: LD_INT 1
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70211: LD_ADDR_VAR 0 25
70215: PUSH
70216: LD_INT 3
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 4
70228: PUSH
70229: LD_INT 3
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: LD_INT 4
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70251: LD_ADDR_VAR 0 26
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 1
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 1
70278: NEG
70279: PUSH
70280: LD_INT 3
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70292: LD_ADDR_VAR 0 27
70296: PUSH
70297: LD_INT 3
70299: NEG
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: LD_INT 1
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 4
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70336: LD_ADDR_VAR 0 28
70340: PUSH
70341: LD_INT 3
70343: NEG
70344: PUSH
70345: LD_INT 3
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: LD_INT 4
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 4
70367: NEG
70368: PUSH
70369: LD_INT 3
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: LIST
70381: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70382: LD_ADDR_VAR 0 29
70386: PUSH
70387: LD_INT 1
70389: NEG
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 4
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: LD_INT 4
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 1
70446: PUSH
70447: LD_INT 3
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: LD_INT 5
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 5
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: LD_INT 4
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 1
70491: NEG
70492: PUSH
70493: LD_INT 6
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: LD_INT 6
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: LD_INT 5
70517: NEG
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70537: LD_ADDR_VAR 0 30
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: PUSH
70556: LD_INT 0
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 3
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 1
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 4
70586: PUSH
70587: LD_INT 0
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: LD_INT 1
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 4
70606: PUSH
70607: LD_INT 1
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 5
70617: PUSH
70618: LD_INT 0
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 5
70627: PUSH
70628: LD_INT 1
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 5
70637: PUSH
70638: LD_INT 1
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 6
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 6
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70680: LD_ADDR_VAR 0 31
70684: PUSH
70685: LD_INT 3
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 3
70697: PUSH
70698: LD_INT 3
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: PUSH
70708: LD_INT 3
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 4
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 4
70727: PUSH
70728: LD_INT 4
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: LD_INT 4
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 5
70747: PUSH
70748: LD_INT 4
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 5
70757: PUSH
70758: LD_INT 5
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: PUSH
70768: LD_INT 5
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 6
70777: PUSH
70778: LD_INT 5
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 6
70787: PUSH
70788: LD_INT 6
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 5
70797: PUSH
70798: LD_INT 6
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70819: LD_ADDR_VAR 0 32
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: LD_INT 3
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 3
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: NEG
70847: PUSH
70848: LD_INT 2
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: LD_INT 4
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: LD_INT 4
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 1
70877: NEG
70878: PUSH
70879: LD_INT 3
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 1
70888: PUSH
70889: LD_INT 5
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: LD_INT 5
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: LD_INT 4
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 1
70919: PUSH
70920: LD_INT 6
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 0
70929: PUSH
70930: LD_INT 6
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 1
70939: NEG
70940: PUSH
70941: LD_INT 5
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70962: LD_ADDR_VAR 0 33
70966: PUSH
70967: LD_INT 2
70969: NEG
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 3
70980: NEG
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 3
70991: NEG
70992: PUSH
70993: LD_INT 1
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 3
71003: NEG
71004: PUSH
71005: LD_INT 1
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 4
71014: NEG
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 4
71025: NEG
71026: PUSH
71027: LD_INT 1
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 4
71037: NEG
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 5
71048: NEG
71049: PUSH
71050: LD_INT 0
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 5
71059: NEG
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 5
71071: NEG
71072: PUSH
71073: LD_INT 1
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 6
71082: NEG
71083: PUSH
71084: LD_INT 0
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 6
71093: NEG
71094: PUSH
71095: LD_INT 1
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71117: LD_ADDR_VAR 0 34
71121: PUSH
71122: LD_INT 2
71124: NEG
71125: PUSH
71126: LD_INT 3
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 3
71136: NEG
71137: PUSH
71138: LD_INT 2
71140: NEG
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 3
71148: NEG
71149: PUSH
71150: LD_INT 3
71152: NEG
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 3
71160: NEG
71161: PUSH
71162: LD_INT 4
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 4
71172: NEG
71173: PUSH
71174: LD_INT 3
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 4
71184: NEG
71185: PUSH
71186: LD_INT 4
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 4
71196: NEG
71197: PUSH
71198: LD_INT 5
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 5
71208: NEG
71209: PUSH
71210: LD_INT 4
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 5
71220: NEG
71221: PUSH
71222: LD_INT 5
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 5
71232: NEG
71233: PUSH
71234: LD_INT 6
71236: NEG
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 6
71244: NEG
71245: PUSH
71246: LD_INT 5
71248: NEG
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 6
71256: NEG
71257: PUSH
71258: LD_INT 6
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71280: LD_ADDR_VAR 0 41
71284: PUSH
71285: LD_INT 0
71287: PUSH
71288: LD_INT 2
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 1
71298: NEG
71299: PUSH
71300: LD_INT 3
71302: NEG
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 1
71310: PUSH
71311: LD_INT 2
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: LIST
71323: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71324: LD_ADDR_VAR 0 42
71328: PUSH
71329: LD_INT 2
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: LD_INT 1
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: LIST
71364: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71365: LD_ADDR_VAR 0 43
71369: PUSH
71370: LD_INT 2
71372: PUSH
71373: LD_INT 2
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 3
71382: PUSH
71383: LD_INT 2
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: LD_INT 3
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: LIST
71404: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71405: LD_ADDR_VAR 0 44
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: LD_INT 2
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 1
71422: PUSH
71423: LD_INT 3
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: NEG
71433: PUSH
71434: LD_INT 2
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: LIST
71445: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71446: LD_ADDR_VAR 0 45
71450: PUSH
71451: LD_INT 2
71453: NEG
71454: PUSH
71455: LD_INT 0
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 2
71464: NEG
71465: PUSH
71466: LD_INT 1
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: LD_INT 3
71475: NEG
71476: PUSH
71477: LD_INT 1
71479: NEG
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71490: LD_ADDR_VAR 0 46
71494: PUSH
71495: LD_INT 2
71497: NEG
71498: PUSH
71499: LD_INT 2
71501: NEG
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 2
71509: NEG
71510: PUSH
71511: LD_INT 3
71513: NEG
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 3
71521: NEG
71522: PUSH
71523: LD_INT 2
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: LIST
71535: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71536: LD_ADDR_VAR 0 47
71540: PUSH
71541: LD_INT 2
71543: NEG
71544: PUSH
71545: LD_INT 3
71547: NEG
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 1
71555: NEG
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71569: LD_ADDR_VAR 0 48
71573: PUSH
71574: LD_INT 1
71576: PUSH
71577: LD_INT 2
71579: NEG
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 2
71587: PUSH
71588: LD_INT 1
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71600: LD_ADDR_VAR 0 49
71604: PUSH
71605: LD_INT 3
71607: PUSH
71608: LD_INT 1
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 3
71617: PUSH
71618: LD_INT 2
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71629: LD_ADDR_VAR 0 50
71633: PUSH
71634: LD_INT 2
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 1
71646: PUSH
71647: LD_INT 3
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71658: LD_ADDR_VAR 0 51
71662: PUSH
71663: LD_INT 1
71665: NEG
71666: PUSH
71667: LD_INT 2
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 2
71676: NEG
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71689: LD_ADDR_VAR 0 52
71693: PUSH
71694: LD_INT 3
71696: NEG
71697: PUSH
71698: LD_INT 1
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 3
71708: NEG
71709: PUSH
71710: LD_INT 2
71712: NEG
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71722: LD_ADDR_VAR 0 53
71726: PUSH
71727: LD_INT 1
71729: NEG
71730: PUSH
71731: LD_INT 3
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 0
71741: PUSH
71742: LD_INT 3
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: LD_INT 2
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: LIST
71765: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71766: LD_ADDR_VAR 0 54
71770: PUSH
71771: LD_INT 2
71773: PUSH
71774: LD_INT 1
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 3
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 3
71794: PUSH
71795: LD_INT 1
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: LIST
71806: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71807: LD_ADDR_VAR 0 55
71811: PUSH
71812: LD_INT 3
71814: PUSH
71815: LD_INT 2
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 3
71824: PUSH
71825: LD_INT 3
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 2
71834: PUSH
71835: LD_INT 3
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: LIST
71846: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71847: LD_ADDR_VAR 0 56
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: LD_INT 3
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 0
71864: PUSH
71865: LD_INT 3
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 1
71874: NEG
71875: PUSH
71876: LD_INT 2
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71888: LD_ADDR_VAR 0 57
71892: PUSH
71893: LD_INT 2
71895: NEG
71896: PUSH
71897: LD_INT 1
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 3
71906: NEG
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: NEG
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71932: LD_ADDR_VAR 0 58
71936: PUSH
71937: LD_INT 2
71939: NEG
71940: PUSH
71941: LD_INT 3
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 3
71951: NEG
71952: PUSH
71953: LD_INT 2
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 3
71963: NEG
71964: PUSH
71965: LD_INT 3
71967: NEG
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71978: LD_ADDR_VAR 0 59
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: LD_INT 2
71989: NEG
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 0
71997: PUSH
71998: LD_INT 2
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 1
72008: PUSH
72009: LD_INT 1
72011: NEG
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: LIST
72021: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72022: LD_ADDR_VAR 0 60
72026: PUSH
72027: LD_INT 1
72029: PUSH
72030: LD_INT 1
72032: NEG
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 2
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 2
72050: PUSH
72051: LD_INT 1
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72063: LD_ADDR_VAR 0 61
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: LD_INT 1
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 2
72080: PUSH
72081: LD_INT 2
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 1
72090: PUSH
72091: LD_INT 2
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: LIST
72102: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72103: LD_ADDR_VAR 0 62
72107: PUSH
72108: LD_INT 1
72110: PUSH
72111: LD_INT 2
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 0
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 1
72130: NEG
72131: PUSH
72132: LD_INT 1
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72144: LD_ADDR_VAR 0 63
72148: PUSH
72149: LD_INT 1
72151: NEG
72152: PUSH
72153: LD_INT 1
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 2
72162: NEG
72163: PUSH
72164: LD_INT 0
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 2
72173: NEG
72174: PUSH
72175: LD_INT 1
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: LIST
72187: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72188: LD_ADDR_VAR 0 64
72192: PUSH
72193: LD_INT 1
72195: NEG
72196: PUSH
72197: LD_INT 2
72199: NEG
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 2
72207: NEG
72208: PUSH
72209: LD_INT 1
72211: NEG
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 2
72219: NEG
72220: PUSH
72221: LD_INT 2
72223: NEG
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: LIST
72233: ST_TO_ADDR
// end ; 2 :
72234: GO 75500
72236: LD_INT 2
72238: DOUBLE
72239: EQUAL
72240: IFTRUE 72244
72242: GO 75499
72244: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72245: LD_ADDR_VAR 0 29
72249: PUSH
72250: LD_INT 4
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 4
72262: PUSH
72263: LD_INT 1
72265: NEG
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 5
72273: PUSH
72274: LD_INT 0
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 5
72283: PUSH
72284: LD_INT 1
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 4
72293: PUSH
72294: LD_INT 1
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 3
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 3
72313: PUSH
72314: LD_INT 1
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 3
72324: PUSH
72325: LD_INT 2
72327: NEG
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 5
72335: PUSH
72336: LD_INT 2
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 3
72345: PUSH
72346: LD_INT 3
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 3
72355: PUSH
72356: LD_INT 2
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 4
72365: PUSH
72366: LD_INT 3
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 4
72375: PUSH
72376: LD_INT 4
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 3
72385: PUSH
72386: LD_INT 4
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 2
72395: PUSH
72396: LD_INT 3
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: LD_INT 2
72405: PUSH
72406: LD_INT 2
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 4
72415: PUSH
72416: LD_INT 2
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 2
72425: PUSH
72426: LD_INT 4
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 0
72435: PUSH
72436: LD_INT 4
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 0
72445: PUSH
72446: LD_INT 3
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: PUSH
72456: LD_INT 4
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 1
72465: PUSH
72466: LD_INT 5
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: LD_INT 5
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: LD_INT 4
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 1
72496: NEG
72497: PUSH
72498: LD_INT 3
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 2
72507: PUSH
72508: LD_INT 5
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 2
72517: NEG
72518: PUSH
72519: LD_INT 3
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 3
72528: NEG
72529: PUSH
72530: LD_INT 0
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 3
72539: NEG
72540: PUSH
72541: LD_INT 1
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 2
72551: NEG
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 2
72562: NEG
72563: PUSH
72564: LD_INT 1
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 3
72573: NEG
72574: PUSH
72575: LD_INT 1
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 4
72584: NEG
72585: PUSH
72586: LD_INT 0
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 4
72595: NEG
72596: PUSH
72597: LD_INT 1
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 4
72607: NEG
72608: PUSH
72609: LD_INT 2
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 2
72619: NEG
72620: PUSH
72621: LD_INT 2
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 4
72630: NEG
72631: PUSH
72632: LD_INT 4
72634: NEG
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 4
72642: NEG
72643: PUSH
72644: LD_INT 5
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 3
72654: NEG
72655: PUSH
72656: LD_INT 4
72658: NEG
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 3
72666: NEG
72667: PUSH
72668: LD_INT 3
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 4
72678: NEG
72679: PUSH
72680: LD_INT 3
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 5
72690: NEG
72691: PUSH
72692: LD_INT 4
72694: NEG
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 5
72702: NEG
72703: PUSH
72704: LD_INT 5
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 3
72714: NEG
72715: PUSH
72716: LD_INT 5
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 5
72726: NEG
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72783: LD_ADDR_VAR 0 30
72787: PUSH
72788: LD_INT 4
72790: PUSH
72791: LD_INT 4
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 4
72800: PUSH
72801: LD_INT 3
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 5
72810: PUSH
72811: LD_INT 4
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 5
72820: PUSH
72821: LD_INT 5
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 4
72830: PUSH
72831: LD_INT 5
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 3
72840: PUSH
72841: LD_INT 4
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 3
72850: PUSH
72851: LD_INT 3
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 5
72860: PUSH
72861: LD_INT 3
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 3
72870: PUSH
72871: LD_INT 5
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 0
72880: PUSH
72881: LD_INT 3
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 0
72890: PUSH
72891: LD_INT 2
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 1
72900: PUSH
72901: LD_INT 3
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 1
72910: PUSH
72911: LD_INT 4
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 0
72920: PUSH
72921: LD_INT 4
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 1
72930: NEG
72931: PUSH
72932: LD_INT 3
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 1
72941: NEG
72942: PUSH
72943: LD_INT 2
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 2
72952: PUSH
72953: LD_INT 4
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 2
72962: NEG
72963: PUSH
72964: LD_INT 2
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 4
72973: NEG
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 4
72984: NEG
72985: PUSH
72986: LD_INT 1
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 3
72996: NEG
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 3
73007: NEG
73008: PUSH
73009: LD_INT 1
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 4
73018: NEG
73019: PUSH
73020: LD_INT 1
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 5
73029: NEG
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 5
73040: NEG
73041: PUSH
73042: LD_INT 1
73044: NEG
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 5
73052: NEG
73053: PUSH
73054: LD_INT 2
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 3
73064: NEG
73065: PUSH
73066: LD_INT 2
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 3
73075: NEG
73076: PUSH
73077: LD_INT 3
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 3
73087: NEG
73088: PUSH
73089: LD_INT 4
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 2
73099: NEG
73100: PUSH
73101: LD_INT 3
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 2
73111: NEG
73112: PUSH
73113: LD_INT 2
73115: NEG
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 3
73123: NEG
73124: PUSH
73125: LD_INT 2
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 4
73135: NEG
73136: PUSH
73137: LD_INT 3
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 4
73147: NEG
73148: PUSH
73149: LD_INT 4
73151: NEG
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 2
73159: NEG
73160: PUSH
73161: LD_INT 4
73163: NEG
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 4
73171: NEG
73172: PUSH
73173: LD_INT 2
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 0
73183: PUSH
73184: LD_INT 4
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: LD_INT 5
73197: NEG
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 1
73205: PUSH
73206: LD_INT 4
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 1
73216: PUSH
73217: LD_INT 3
73219: NEG
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 0
73227: PUSH
73228: LD_INT 3
73230: NEG
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 1
73238: NEG
73239: PUSH
73240: LD_INT 4
73242: NEG
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 1
73250: NEG
73251: PUSH
73252: LD_INT 5
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 2
73262: PUSH
73263: LD_INT 3
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 2
73273: NEG
73274: PUSH
73275: LD_INT 5
73277: NEG
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73330: LD_ADDR_VAR 0 31
73334: PUSH
73335: LD_INT 0
73337: PUSH
73338: LD_INT 4
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 0
73347: PUSH
73348: LD_INT 3
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 1
73357: PUSH
73358: LD_INT 4
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 1
73367: PUSH
73368: LD_INT 5
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: LD_INT 5
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 1
73387: NEG
73388: PUSH
73389: LD_INT 4
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 1
73398: NEG
73399: PUSH
73400: LD_INT 3
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 2
73409: PUSH
73410: LD_INT 5
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 2
73419: NEG
73420: PUSH
73421: LD_INT 3
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 3
73430: NEG
73431: PUSH
73432: LD_INT 0
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 3
73441: NEG
73442: PUSH
73443: LD_INT 1
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 2
73453: NEG
73454: PUSH
73455: LD_INT 0
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 2
73464: NEG
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 3
73475: NEG
73476: PUSH
73477: LD_INT 1
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: NEG
73487: PUSH
73488: LD_INT 0
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 4
73497: NEG
73498: PUSH
73499: LD_INT 1
73501: NEG
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 4
73509: NEG
73510: PUSH
73511: LD_INT 2
73513: NEG
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 2
73521: NEG
73522: PUSH
73523: LD_INT 2
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 4
73532: NEG
73533: PUSH
73534: LD_INT 4
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 4
73544: NEG
73545: PUSH
73546: LD_INT 5
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 3
73556: NEG
73557: PUSH
73558: LD_INT 4
73560: NEG
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 3
73568: NEG
73569: PUSH
73570: LD_INT 3
73572: NEG
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 4
73580: NEG
73581: PUSH
73582: LD_INT 3
73584: NEG
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 5
73592: NEG
73593: PUSH
73594: LD_INT 4
73596: NEG
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 5
73604: NEG
73605: PUSH
73606: LD_INT 5
73608: NEG
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 3
73616: NEG
73617: PUSH
73618: LD_INT 5
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 5
73628: NEG
73629: PUSH
73630: LD_INT 3
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: LD_INT 3
73643: NEG
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 0
73651: PUSH
73652: LD_INT 4
73654: NEG
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 1
73662: PUSH
73663: LD_INT 3
73665: NEG
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 1
73673: PUSH
73674: LD_INT 2
73676: NEG
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 0
73684: PUSH
73685: LD_INT 2
73687: NEG
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 1
73695: NEG
73696: PUSH
73697: LD_INT 3
73699: NEG
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 1
73707: NEG
73708: PUSH
73709: LD_INT 4
73711: NEG
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 2
73719: PUSH
73720: LD_INT 2
73722: NEG
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 2
73730: NEG
73731: PUSH
73732: LD_INT 4
73734: NEG
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 4
73742: PUSH
73743: LD_INT 0
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 4
73752: PUSH
73753: LD_INT 1
73755: NEG
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 5
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 5
73773: PUSH
73774: LD_INT 1
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: LD_INT 4
73783: PUSH
73784: LD_INT 1
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 3
73793: PUSH
73794: LD_INT 0
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 3
73803: PUSH
73804: LD_INT 1
73806: NEG
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 3
73814: PUSH
73815: LD_INT 2
73817: NEG
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 5
73825: PUSH
73826: LD_INT 2
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73880: LD_ADDR_VAR 0 32
73884: PUSH
73885: LD_INT 4
73887: NEG
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 4
73898: NEG
73899: PUSH
73900: LD_INT 1
73902: NEG
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 3
73910: NEG
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 3
73921: NEG
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 4
73932: NEG
73933: PUSH
73934: LD_INT 1
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 5
73943: NEG
73944: PUSH
73945: LD_INT 0
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 5
73954: NEG
73955: PUSH
73956: LD_INT 1
73958: NEG
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 5
73966: NEG
73967: PUSH
73968: LD_INT 2
73970: NEG
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 3
73978: NEG
73979: PUSH
73980: LD_INT 2
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 3
73989: NEG
73990: PUSH
73991: LD_INT 3
73993: NEG
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 3
74001: NEG
74002: PUSH
74003: LD_INT 4
74005: NEG
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 2
74013: NEG
74014: PUSH
74015: LD_INT 3
74017: NEG
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 2
74025: NEG
74026: PUSH
74027: LD_INT 2
74029: NEG
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 3
74037: NEG
74038: PUSH
74039: LD_INT 2
74041: NEG
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 4
74049: NEG
74050: PUSH
74051: LD_INT 3
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 4
74061: NEG
74062: PUSH
74063: LD_INT 4
74065: NEG
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 2
74073: NEG
74074: PUSH
74075: LD_INT 4
74077: NEG
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 4
74085: NEG
74086: PUSH
74087: LD_INT 2
74089: NEG
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 0
74097: PUSH
74098: LD_INT 4
74100: NEG
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: LD_INT 5
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 1
74119: PUSH
74120: LD_INT 4
74122: NEG
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 1
74130: PUSH
74131: LD_INT 3
74133: NEG
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: LD_INT 3
74144: NEG
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 1
74152: NEG
74153: PUSH
74154: LD_INT 4
74156: NEG
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: PUSH
74162: LD_INT 1
74164: NEG
74165: PUSH
74166: LD_INT 5
74168: NEG
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 2
74176: PUSH
74177: LD_INT 3
74179: NEG
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 2
74187: NEG
74188: PUSH
74189: LD_INT 5
74191: NEG
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 3
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 3
74209: PUSH
74210: LD_INT 1
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 4
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 4
74230: PUSH
74231: LD_INT 1
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_INT 3
74240: PUSH
74241: LD_INT 1
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PUSH
74248: LD_INT 2
74250: PUSH
74251: LD_INT 0
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 2
74260: PUSH
74261: LD_INT 1
74263: NEG
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 2
74271: PUSH
74272: LD_INT 2
74274: NEG
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 4
74282: PUSH
74283: LD_INT 2
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 4
74292: PUSH
74293: LD_INT 4
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: LD_INT 4
74302: PUSH
74303: LD_INT 3
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 5
74312: PUSH
74313: LD_INT 4
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 5
74322: PUSH
74323: LD_INT 5
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 4
74332: PUSH
74333: LD_INT 5
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 3
74342: PUSH
74343: LD_INT 4
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 3
74352: PUSH
74353: LD_INT 3
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 5
74362: PUSH
74363: LD_INT 3
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 3
74372: PUSH
74373: LD_INT 5
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74427: LD_ADDR_VAR 0 33
74431: PUSH
74432: LD_INT 4
74434: NEG
74435: PUSH
74436: LD_INT 4
74438: NEG
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 4
74446: NEG
74447: PUSH
74448: LD_INT 5
74450: NEG
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 3
74458: NEG
74459: PUSH
74460: LD_INT 4
74462: NEG
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 3
74470: NEG
74471: PUSH
74472: LD_INT 3
74474: NEG
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 4
74482: NEG
74483: PUSH
74484: LD_INT 3
74486: NEG
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 5
74494: NEG
74495: PUSH
74496: LD_INT 4
74498: NEG
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 5
74506: NEG
74507: PUSH
74508: LD_INT 5
74510: NEG
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 3
74518: NEG
74519: PUSH
74520: LD_INT 5
74522: NEG
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 5
74530: NEG
74531: PUSH
74532: LD_INT 3
74534: NEG
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 0
74542: PUSH
74543: LD_INT 3
74545: NEG
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: LD_INT 0
74553: PUSH
74554: LD_INT 4
74556: NEG
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: LD_INT 1
74564: PUSH
74565: LD_INT 3
74567: NEG
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 1
74575: PUSH
74576: LD_INT 2
74578: NEG
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: LD_INT 0
74586: PUSH
74587: LD_INT 2
74589: NEG
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 1
74597: NEG
74598: PUSH
74599: LD_INT 3
74601: NEG
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 1
74609: NEG
74610: PUSH
74611: LD_INT 4
74613: NEG
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 2
74621: PUSH
74622: LD_INT 2
74624: NEG
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 2
74632: NEG
74633: PUSH
74634: LD_INT 4
74636: NEG
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 4
74644: PUSH
74645: LD_INT 0
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 4
74654: PUSH
74655: LD_INT 1
74657: NEG
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 5
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: PUSH
74673: LD_INT 5
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: LD_INT 4
74685: PUSH
74686: LD_INT 1
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: PUSH
74693: LD_INT 3
74695: PUSH
74696: LD_INT 0
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: LD_INT 3
74705: PUSH
74706: LD_INT 1
74708: NEG
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 3
74716: PUSH
74717: LD_INT 2
74719: NEG
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 5
74727: PUSH
74728: LD_INT 2
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 3
74737: PUSH
74738: LD_INT 3
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 3
74747: PUSH
74748: LD_INT 2
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 4
74757: PUSH
74758: LD_INT 3
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: LD_INT 4
74767: PUSH
74768: LD_INT 4
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PUSH
74775: LD_INT 3
74777: PUSH
74778: LD_INT 4
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_INT 2
74787: PUSH
74788: LD_INT 3
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: PUSH
74795: LD_INT 2
74797: PUSH
74798: LD_INT 2
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 4
74807: PUSH
74808: LD_INT 2
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 2
74817: PUSH
74818: LD_INT 4
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: LD_INT 0
74827: PUSH
74828: LD_INT 4
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: PUSH
74835: LD_INT 0
74837: PUSH
74838: LD_INT 3
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: LD_INT 1
74847: PUSH
74848: LD_INT 4
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 1
74857: PUSH
74858: LD_INT 5
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 0
74867: PUSH
74868: LD_INT 5
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 1
74877: NEG
74878: PUSH
74879: LD_INT 4
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 1
74888: NEG
74889: PUSH
74890: LD_INT 3
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 2
74899: PUSH
74900: LD_INT 5
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 2
74909: NEG
74910: PUSH
74911: LD_INT 3
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74965: LD_ADDR_VAR 0 34
74969: PUSH
74970: LD_INT 0
74972: PUSH
74973: LD_INT 4
74975: NEG
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: LD_INT 0
74983: PUSH
74984: LD_INT 5
74986: NEG
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 1
74994: PUSH
74995: LD_INT 4
74997: NEG
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 1
75005: PUSH
75006: LD_INT 3
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 0
75016: PUSH
75017: LD_INT 3
75019: NEG
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 1
75027: NEG
75028: PUSH
75029: LD_INT 4
75031: NEG
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 1
75039: NEG
75040: PUSH
75041: LD_INT 5
75043: NEG
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 2
75051: PUSH
75052: LD_INT 3
75054: NEG
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 2
75062: NEG
75063: PUSH
75064: LD_INT 5
75066: NEG
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 3
75074: PUSH
75075: LD_INT 0
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: PUSH
75082: LD_INT 3
75084: PUSH
75085: LD_INT 1
75087: NEG
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 4
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 4
75105: PUSH
75106: LD_INT 1
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PUSH
75113: LD_INT 3
75115: PUSH
75116: LD_INT 1
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 2
75125: PUSH
75126: LD_INT 0
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_INT 2
75135: PUSH
75136: LD_INT 1
75138: NEG
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 2
75146: PUSH
75147: LD_INT 2
75149: NEG
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 4
75157: PUSH
75158: LD_INT 2
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 4
75167: PUSH
75168: LD_INT 4
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 4
75177: PUSH
75178: LD_INT 3
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 5
75187: PUSH
75188: LD_INT 4
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 5
75197: PUSH
75198: LD_INT 5
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 4
75207: PUSH
75208: LD_INT 5
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 3
75217: PUSH
75218: LD_INT 4
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 3
75227: PUSH
75228: LD_INT 3
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 5
75237: PUSH
75238: LD_INT 3
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 3
75247: PUSH
75248: LD_INT 5
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PUSH
75255: LD_INT 0
75257: PUSH
75258: LD_INT 3
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PUSH
75265: LD_INT 0
75267: PUSH
75268: LD_INT 2
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 1
75277: PUSH
75278: LD_INT 3
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 1
75287: PUSH
75288: LD_INT 4
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 0
75297: PUSH
75298: LD_INT 4
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 1
75307: NEG
75308: PUSH
75309: LD_INT 3
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 1
75318: NEG
75319: PUSH
75320: LD_INT 2
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 2
75329: PUSH
75330: LD_INT 4
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 2
75339: NEG
75340: PUSH
75341: LD_INT 2
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 4
75350: NEG
75351: PUSH
75352: LD_INT 0
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: PUSH
75359: LD_INT 4
75361: NEG
75362: PUSH
75363: LD_INT 1
75365: NEG
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 3
75373: NEG
75374: PUSH
75375: LD_INT 0
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 3
75384: NEG
75385: PUSH
75386: LD_INT 1
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: LD_INT 4
75395: NEG
75396: PUSH
75397: LD_INT 1
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 5
75406: NEG
75407: PUSH
75408: LD_INT 0
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 5
75417: NEG
75418: PUSH
75419: LD_INT 1
75421: NEG
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 5
75429: NEG
75430: PUSH
75431: LD_INT 2
75433: NEG
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: PUSH
75439: LD_INT 3
75441: NEG
75442: PUSH
75443: LD_INT 2
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: ST_TO_ADDR
// end ; end ;
75497: GO 75500
75499: POP
// case btype of b_depot , b_warehouse :
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 0
75507: DOUBLE
75508: EQUAL
75509: IFTRUE 75519
75511: LD_INT 1
75513: DOUBLE
75514: EQUAL
75515: IFTRUE 75519
75517: GO 75720
75519: POP
// case nation of nation_american :
75520: LD_VAR 0 5
75524: PUSH
75525: LD_INT 1
75527: DOUBLE
75528: EQUAL
75529: IFTRUE 75533
75531: GO 75589
75533: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75534: LD_ADDR_VAR 0 9
75538: PUSH
75539: LD_VAR 0 11
75543: PUSH
75544: LD_VAR 0 12
75548: PUSH
75549: LD_VAR 0 13
75553: PUSH
75554: LD_VAR 0 14
75558: PUSH
75559: LD_VAR 0 15
75563: PUSH
75564: LD_VAR 0 16
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: PUSH
75577: LD_VAR 0 4
75581: PUSH
75582: LD_INT 1
75584: PLUS
75585: ARRAY
75586: ST_TO_ADDR
75587: GO 75718
75589: LD_INT 2
75591: DOUBLE
75592: EQUAL
75593: IFTRUE 75597
75595: GO 75653
75597: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75598: LD_ADDR_VAR 0 9
75602: PUSH
75603: LD_VAR 0 17
75607: PUSH
75608: LD_VAR 0 18
75612: PUSH
75613: LD_VAR 0 19
75617: PUSH
75618: LD_VAR 0 20
75622: PUSH
75623: LD_VAR 0 21
75627: PUSH
75628: LD_VAR 0 22
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: PUSH
75641: LD_VAR 0 4
75645: PUSH
75646: LD_INT 1
75648: PLUS
75649: ARRAY
75650: ST_TO_ADDR
75651: GO 75718
75653: LD_INT 3
75655: DOUBLE
75656: EQUAL
75657: IFTRUE 75661
75659: GO 75717
75661: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75662: LD_ADDR_VAR 0 9
75666: PUSH
75667: LD_VAR 0 23
75671: PUSH
75672: LD_VAR 0 24
75676: PUSH
75677: LD_VAR 0 25
75681: PUSH
75682: LD_VAR 0 26
75686: PUSH
75687: LD_VAR 0 27
75691: PUSH
75692: LD_VAR 0 28
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_VAR 0 4
75709: PUSH
75710: LD_INT 1
75712: PLUS
75713: ARRAY
75714: ST_TO_ADDR
75715: GO 75718
75717: POP
75718: GO 76273
75720: LD_INT 2
75722: DOUBLE
75723: EQUAL
75724: IFTRUE 75734
75726: LD_INT 3
75728: DOUBLE
75729: EQUAL
75730: IFTRUE 75734
75732: GO 75790
75734: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75735: LD_ADDR_VAR 0 9
75739: PUSH
75740: LD_VAR 0 29
75744: PUSH
75745: LD_VAR 0 30
75749: PUSH
75750: LD_VAR 0 31
75754: PUSH
75755: LD_VAR 0 32
75759: PUSH
75760: LD_VAR 0 33
75764: PUSH
75765: LD_VAR 0 34
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: PUSH
75778: LD_VAR 0 4
75782: PUSH
75783: LD_INT 1
75785: PLUS
75786: ARRAY
75787: ST_TO_ADDR
75788: GO 76273
75790: LD_INT 16
75792: DOUBLE
75793: EQUAL
75794: IFTRUE 75852
75796: LD_INT 17
75798: DOUBLE
75799: EQUAL
75800: IFTRUE 75852
75802: LD_INT 18
75804: DOUBLE
75805: EQUAL
75806: IFTRUE 75852
75808: LD_INT 19
75810: DOUBLE
75811: EQUAL
75812: IFTRUE 75852
75814: LD_INT 22
75816: DOUBLE
75817: EQUAL
75818: IFTRUE 75852
75820: LD_INT 20
75822: DOUBLE
75823: EQUAL
75824: IFTRUE 75852
75826: LD_INT 21
75828: DOUBLE
75829: EQUAL
75830: IFTRUE 75852
75832: LD_INT 23
75834: DOUBLE
75835: EQUAL
75836: IFTRUE 75852
75838: LD_INT 24
75840: DOUBLE
75841: EQUAL
75842: IFTRUE 75852
75844: LD_INT 25
75846: DOUBLE
75847: EQUAL
75848: IFTRUE 75852
75850: GO 75908
75852: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75853: LD_ADDR_VAR 0 9
75857: PUSH
75858: LD_VAR 0 35
75862: PUSH
75863: LD_VAR 0 36
75867: PUSH
75868: LD_VAR 0 37
75872: PUSH
75873: LD_VAR 0 38
75877: PUSH
75878: LD_VAR 0 39
75882: PUSH
75883: LD_VAR 0 40
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: PUSH
75896: LD_VAR 0 4
75900: PUSH
75901: LD_INT 1
75903: PLUS
75904: ARRAY
75905: ST_TO_ADDR
75906: GO 76273
75908: LD_INT 6
75910: DOUBLE
75911: EQUAL
75912: IFTRUE 75964
75914: LD_INT 7
75916: DOUBLE
75917: EQUAL
75918: IFTRUE 75964
75920: LD_INT 8
75922: DOUBLE
75923: EQUAL
75924: IFTRUE 75964
75926: LD_INT 13
75928: DOUBLE
75929: EQUAL
75930: IFTRUE 75964
75932: LD_INT 12
75934: DOUBLE
75935: EQUAL
75936: IFTRUE 75964
75938: LD_INT 15
75940: DOUBLE
75941: EQUAL
75942: IFTRUE 75964
75944: LD_INT 11
75946: DOUBLE
75947: EQUAL
75948: IFTRUE 75964
75950: LD_INT 14
75952: DOUBLE
75953: EQUAL
75954: IFTRUE 75964
75956: LD_INT 10
75958: DOUBLE
75959: EQUAL
75960: IFTRUE 75964
75962: GO 76020
75964: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75965: LD_ADDR_VAR 0 9
75969: PUSH
75970: LD_VAR 0 41
75974: PUSH
75975: LD_VAR 0 42
75979: PUSH
75980: LD_VAR 0 43
75984: PUSH
75985: LD_VAR 0 44
75989: PUSH
75990: LD_VAR 0 45
75994: PUSH
75995: LD_VAR 0 46
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: PUSH
76008: LD_VAR 0 4
76012: PUSH
76013: LD_INT 1
76015: PLUS
76016: ARRAY
76017: ST_TO_ADDR
76018: GO 76273
76020: LD_INT 36
76022: DOUBLE
76023: EQUAL
76024: IFTRUE 76028
76026: GO 76084
76028: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76029: LD_ADDR_VAR 0 9
76033: PUSH
76034: LD_VAR 0 47
76038: PUSH
76039: LD_VAR 0 48
76043: PUSH
76044: LD_VAR 0 49
76048: PUSH
76049: LD_VAR 0 50
76053: PUSH
76054: LD_VAR 0 51
76058: PUSH
76059: LD_VAR 0 52
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: PUSH
76072: LD_VAR 0 4
76076: PUSH
76077: LD_INT 1
76079: PLUS
76080: ARRAY
76081: ST_TO_ADDR
76082: GO 76273
76084: LD_INT 4
76086: DOUBLE
76087: EQUAL
76088: IFTRUE 76110
76090: LD_INT 5
76092: DOUBLE
76093: EQUAL
76094: IFTRUE 76110
76096: LD_INT 34
76098: DOUBLE
76099: EQUAL
76100: IFTRUE 76110
76102: LD_INT 37
76104: DOUBLE
76105: EQUAL
76106: IFTRUE 76110
76108: GO 76166
76110: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76111: LD_ADDR_VAR 0 9
76115: PUSH
76116: LD_VAR 0 53
76120: PUSH
76121: LD_VAR 0 54
76125: PUSH
76126: LD_VAR 0 55
76130: PUSH
76131: LD_VAR 0 56
76135: PUSH
76136: LD_VAR 0 57
76140: PUSH
76141: LD_VAR 0 58
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: PUSH
76154: LD_VAR 0 4
76158: PUSH
76159: LD_INT 1
76161: PLUS
76162: ARRAY
76163: ST_TO_ADDR
76164: GO 76273
76166: LD_INT 31
76168: DOUBLE
76169: EQUAL
76170: IFTRUE 76216
76172: LD_INT 32
76174: DOUBLE
76175: EQUAL
76176: IFTRUE 76216
76178: LD_INT 33
76180: DOUBLE
76181: EQUAL
76182: IFTRUE 76216
76184: LD_INT 27
76186: DOUBLE
76187: EQUAL
76188: IFTRUE 76216
76190: LD_INT 26
76192: DOUBLE
76193: EQUAL
76194: IFTRUE 76216
76196: LD_INT 28
76198: DOUBLE
76199: EQUAL
76200: IFTRUE 76216
76202: LD_INT 29
76204: DOUBLE
76205: EQUAL
76206: IFTRUE 76216
76208: LD_INT 30
76210: DOUBLE
76211: EQUAL
76212: IFTRUE 76216
76214: GO 76272
76216: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76217: LD_ADDR_VAR 0 9
76221: PUSH
76222: LD_VAR 0 59
76226: PUSH
76227: LD_VAR 0 60
76231: PUSH
76232: LD_VAR 0 61
76236: PUSH
76237: LD_VAR 0 62
76241: PUSH
76242: LD_VAR 0 63
76246: PUSH
76247: LD_VAR 0 64
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: PUSH
76260: LD_VAR 0 4
76264: PUSH
76265: LD_INT 1
76267: PLUS
76268: ARRAY
76269: ST_TO_ADDR
76270: GO 76273
76272: POP
// temp_list2 = [ ] ;
76273: LD_ADDR_VAR 0 10
76277: PUSH
76278: EMPTY
76279: ST_TO_ADDR
// for i in temp_list do
76280: LD_ADDR_VAR 0 8
76284: PUSH
76285: LD_VAR 0 9
76289: PUSH
76290: FOR_IN
76291: IFFALSE 76343
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76293: LD_ADDR_VAR 0 10
76297: PUSH
76298: LD_VAR 0 10
76302: PUSH
76303: LD_VAR 0 8
76307: PUSH
76308: LD_INT 1
76310: ARRAY
76311: PUSH
76312: LD_VAR 0 2
76316: PLUS
76317: PUSH
76318: LD_VAR 0 8
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: PUSH
76327: LD_VAR 0 3
76331: PLUS
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: PUSH
76337: EMPTY
76338: LIST
76339: ADD
76340: ST_TO_ADDR
76341: GO 76290
76343: POP
76344: POP
// result = temp_list2 ;
76345: LD_ADDR_VAR 0 7
76349: PUSH
76350: LD_VAR 0 10
76354: ST_TO_ADDR
// end ;
76355: LD_VAR 0 7
76359: RET
// export function EnemyInRange ( unit , dist ) ; begin
76360: LD_INT 0
76362: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76363: LD_ADDR_VAR 0 3
76367: PUSH
76368: LD_VAR 0 1
76372: PPUSH
76373: CALL_OW 255
76377: PPUSH
76378: LD_VAR 0 1
76382: PPUSH
76383: CALL_OW 250
76387: PPUSH
76388: LD_VAR 0 1
76392: PPUSH
76393: CALL_OW 251
76397: PPUSH
76398: LD_VAR 0 2
76402: PPUSH
76403: CALL 49762 0 4
76407: PUSH
76408: LD_INT 4
76410: ARRAY
76411: ST_TO_ADDR
// end ;
76412: LD_VAR 0 3
76416: RET
// export function PlayerSeeMe ( unit ) ; begin
76417: LD_INT 0
76419: PPUSH
// result := See ( your_side , unit ) ;
76420: LD_ADDR_VAR 0 2
76424: PUSH
76425: LD_OWVAR 2
76429: PPUSH
76430: LD_VAR 0 1
76434: PPUSH
76435: CALL_OW 292
76439: ST_TO_ADDR
// end ;
76440: LD_VAR 0 2
76444: RET
// export function ReverseDir ( unit ) ; begin
76445: LD_INT 0
76447: PPUSH
// if not unit then
76448: LD_VAR 0 1
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76480
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76457: LD_ADDR_VAR 0 2
76461: PUSH
76462: LD_VAR 0 1
76466: PPUSH
76467: CALL_OW 254
76471: PUSH
76472: LD_INT 3
76474: PLUS
76475: PUSH
76476: LD_INT 6
76478: MOD
76479: ST_TO_ADDR
// end ;
76480: LD_VAR 0 2
76484: RET
// export function ReverseArray ( array ) ; var i ; begin
76485: LD_INT 0
76487: PPUSH
76488: PPUSH
// if not array then
76489: LD_VAR 0 1
76493: NOT
76494: IFFALSE 76498
// exit ;
76496: GO 76553
// result := [ ] ;
76498: LD_ADDR_VAR 0 2
76502: PUSH
76503: EMPTY
76504: ST_TO_ADDR
// for i := array downto 1 do
76505: LD_ADDR_VAR 0 3
76509: PUSH
76510: DOUBLE
76511: LD_VAR 0 1
76515: INC
76516: ST_TO_ADDR
76517: LD_INT 1
76519: PUSH
76520: FOR_DOWNTO
76521: IFFALSE 76551
// result := Join ( result , array [ i ] ) ;
76523: LD_ADDR_VAR 0 2
76527: PUSH
76528: LD_VAR 0 2
76532: PPUSH
76533: LD_VAR 0 1
76537: PUSH
76538: LD_VAR 0 3
76542: ARRAY
76543: PPUSH
76544: CALL 81197 0 2
76548: ST_TO_ADDR
76549: GO 76520
76551: POP
76552: POP
// end ;
76553: LD_VAR 0 2
76557: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76558: LD_INT 0
76560: PPUSH
76561: PPUSH
76562: PPUSH
76563: PPUSH
76564: PPUSH
76565: PPUSH
// if not unit or not hexes then
76566: LD_VAR 0 1
76570: NOT
76571: PUSH
76572: LD_VAR 0 2
76576: NOT
76577: OR
76578: IFFALSE 76582
// exit ;
76580: GO 76705
// dist := 9999 ;
76582: LD_ADDR_VAR 0 5
76586: PUSH
76587: LD_INT 9999
76589: ST_TO_ADDR
// for i = 1 to hexes do
76590: LD_ADDR_VAR 0 4
76594: PUSH
76595: DOUBLE
76596: LD_INT 1
76598: DEC
76599: ST_TO_ADDR
76600: LD_VAR 0 2
76604: PUSH
76605: FOR_TO
76606: IFFALSE 76693
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76608: LD_ADDR_VAR 0 6
76612: PUSH
76613: LD_VAR 0 1
76617: PPUSH
76618: LD_VAR 0 2
76622: PUSH
76623: LD_VAR 0 4
76627: ARRAY
76628: PUSH
76629: LD_INT 1
76631: ARRAY
76632: PPUSH
76633: LD_VAR 0 2
76637: PUSH
76638: LD_VAR 0 4
76642: ARRAY
76643: PUSH
76644: LD_INT 2
76646: ARRAY
76647: PPUSH
76648: CALL_OW 297
76652: ST_TO_ADDR
// if tdist < dist then
76653: LD_VAR 0 6
76657: PUSH
76658: LD_VAR 0 5
76662: LESS
76663: IFFALSE 76691
// begin hex := hexes [ i ] ;
76665: LD_ADDR_VAR 0 8
76669: PUSH
76670: LD_VAR 0 2
76674: PUSH
76675: LD_VAR 0 4
76679: ARRAY
76680: ST_TO_ADDR
// dist := tdist ;
76681: LD_ADDR_VAR 0 5
76685: PUSH
76686: LD_VAR 0 6
76690: ST_TO_ADDR
// end ; end ;
76691: GO 76605
76693: POP
76694: POP
// result := hex ;
76695: LD_ADDR_VAR 0 3
76699: PUSH
76700: LD_VAR 0 8
76704: ST_TO_ADDR
// end ;
76705: LD_VAR 0 3
76709: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76710: LD_INT 0
76712: PPUSH
76713: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76714: LD_VAR 0 1
76718: NOT
76719: PUSH
76720: LD_VAR 0 1
76724: PUSH
76725: LD_INT 21
76727: PUSH
76728: LD_INT 2
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 23
76737: PUSH
76738: LD_INT 2
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PPUSH
76749: CALL_OW 69
76753: IN
76754: NOT
76755: OR
76756: IFFALSE 76760
// exit ;
76758: GO 76807
// for i = 1 to 3 do
76760: LD_ADDR_VAR 0 3
76764: PUSH
76765: DOUBLE
76766: LD_INT 1
76768: DEC
76769: ST_TO_ADDR
76770: LD_INT 3
76772: PUSH
76773: FOR_TO
76774: IFFALSE 76805
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76776: LD_VAR 0 1
76780: PPUSH
76781: CALL_OW 250
76785: PPUSH
76786: LD_VAR 0 1
76790: PPUSH
76791: CALL_OW 251
76795: PPUSH
76796: LD_INT 1
76798: PPUSH
76799: CALL_OW 453
76803: GO 76773
76805: POP
76806: POP
// end ;
76807: LD_VAR 0 2
76811: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76812: LD_INT 0
76814: PPUSH
76815: PPUSH
76816: PPUSH
76817: PPUSH
76818: PPUSH
76819: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76820: LD_VAR 0 1
76824: NOT
76825: PUSH
76826: LD_VAR 0 2
76830: NOT
76831: OR
76832: PUSH
76833: LD_VAR 0 1
76837: PPUSH
76838: CALL_OW 314
76842: OR
76843: IFFALSE 76847
// exit ;
76845: GO 77314
// if GetLives ( i ) < 250 then
76847: LD_VAR 0 4
76851: PPUSH
76852: CALL_OW 256
76856: PUSH
76857: LD_INT 250
76859: LESS
76860: IFFALSE 76873
// begin ComAutodestruct ( i ) ;
76862: LD_VAR 0 4
76866: PPUSH
76867: CALL 76710 0 1
// exit ;
76871: GO 77314
// end ; x := GetX ( enemy_unit ) ;
76873: LD_ADDR_VAR 0 7
76877: PUSH
76878: LD_VAR 0 2
76882: PPUSH
76883: CALL_OW 250
76887: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76888: LD_ADDR_VAR 0 8
76892: PUSH
76893: LD_VAR 0 2
76897: PPUSH
76898: CALL_OW 251
76902: ST_TO_ADDR
// if not x or not y then
76903: LD_VAR 0 7
76907: NOT
76908: PUSH
76909: LD_VAR 0 8
76913: NOT
76914: OR
76915: IFFALSE 76919
// exit ;
76917: GO 77314
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76919: LD_ADDR_VAR 0 6
76923: PUSH
76924: LD_VAR 0 7
76928: PPUSH
76929: LD_INT 0
76931: PPUSH
76932: LD_INT 4
76934: PPUSH
76935: CALL_OW 272
76939: PUSH
76940: LD_VAR 0 8
76944: PPUSH
76945: LD_INT 0
76947: PPUSH
76948: LD_INT 4
76950: PPUSH
76951: CALL_OW 273
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_VAR 0 7
76964: PPUSH
76965: LD_INT 1
76967: PPUSH
76968: LD_INT 4
76970: PPUSH
76971: CALL_OW 272
76975: PUSH
76976: LD_VAR 0 8
76980: PPUSH
76981: LD_INT 1
76983: PPUSH
76984: LD_INT 4
76986: PPUSH
76987: CALL_OW 273
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: PUSH
76996: LD_VAR 0 7
77000: PPUSH
77001: LD_INT 2
77003: PPUSH
77004: LD_INT 4
77006: PPUSH
77007: CALL_OW 272
77011: PUSH
77012: LD_VAR 0 8
77016: PPUSH
77017: LD_INT 2
77019: PPUSH
77020: LD_INT 4
77022: PPUSH
77023: CALL_OW 273
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_VAR 0 7
77036: PPUSH
77037: LD_INT 3
77039: PPUSH
77040: LD_INT 4
77042: PPUSH
77043: CALL_OW 272
77047: PUSH
77048: LD_VAR 0 8
77052: PPUSH
77053: LD_INT 3
77055: PPUSH
77056: LD_INT 4
77058: PPUSH
77059: CALL_OW 273
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: LD_VAR 0 7
77072: PPUSH
77073: LD_INT 4
77075: PPUSH
77076: LD_INT 4
77078: PPUSH
77079: CALL_OW 272
77083: PUSH
77084: LD_VAR 0 8
77088: PPUSH
77089: LD_INT 4
77091: PPUSH
77092: LD_INT 4
77094: PPUSH
77095: CALL_OW 273
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PUSH
77104: LD_VAR 0 7
77108: PPUSH
77109: LD_INT 5
77111: PPUSH
77112: LD_INT 4
77114: PPUSH
77115: CALL_OW 272
77119: PUSH
77120: LD_VAR 0 8
77124: PPUSH
77125: LD_INT 5
77127: PPUSH
77128: LD_INT 4
77130: PPUSH
77131: CALL_OW 273
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: ST_TO_ADDR
// for i = tmp downto 1 do
77148: LD_ADDR_VAR 0 4
77152: PUSH
77153: DOUBLE
77154: LD_VAR 0 6
77158: INC
77159: ST_TO_ADDR
77160: LD_INT 1
77162: PUSH
77163: FOR_DOWNTO
77164: IFFALSE 77265
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77166: LD_VAR 0 6
77170: PUSH
77171: LD_VAR 0 4
77175: ARRAY
77176: PUSH
77177: LD_INT 1
77179: ARRAY
77180: PPUSH
77181: LD_VAR 0 6
77185: PUSH
77186: LD_VAR 0 4
77190: ARRAY
77191: PUSH
77192: LD_INT 2
77194: ARRAY
77195: PPUSH
77196: CALL_OW 488
77200: NOT
77201: PUSH
77202: LD_VAR 0 6
77206: PUSH
77207: LD_VAR 0 4
77211: ARRAY
77212: PUSH
77213: LD_INT 1
77215: ARRAY
77216: PPUSH
77217: LD_VAR 0 6
77221: PUSH
77222: LD_VAR 0 4
77226: ARRAY
77227: PUSH
77228: LD_INT 2
77230: ARRAY
77231: PPUSH
77232: CALL_OW 428
77236: PUSH
77237: LD_INT 0
77239: NONEQUAL
77240: OR
77241: IFFALSE 77263
// tmp := Delete ( tmp , i ) ;
77243: LD_ADDR_VAR 0 6
77247: PUSH
77248: LD_VAR 0 6
77252: PPUSH
77253: LD_VAR 0 4
77257: PPUSH
77258: CALL_OW 3
77262: ST_TO_ADDR
77263: GO 77163
77265: POP
77266: POP
// j := GetClosestHex ( unit , tmp ) ;
77267: LD_ADDR_VAR 0 5
77271: PUSH
77272: LD_VAR 0 1
77276: PPUSH
77277: LD_VAR 0 6
77281: PPUSH
77282: CALL 76558 0 2
77286: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77287: LD_VAR 0 1
77291: PPUSH
77292: LD_VAR 0 5
77296: PUSH
77297: LD_INT 1
77299: ARRAY
77300: PPUSH
77301: LD_VAR 0 5
77305: PUSH
77306: LD_INT 2
77308: ARRAY
77309: PPUSH
77310: CALL_OW 111
// end ;
77314: LD_VAR 0 3
77318: RET
// export function PrepareApemanSoldier ( ) ; begin
77319: LD_INT 0
77321: PPUSH
// uc_nation := 0 ;
77322: LD_ADDR_OWVAR 21
77326: PUSH
77327: LD_INT 0
77329: ST_TO_ADDR
// hc_sex := sex_male ;
77330: LD_ADDR_OWVAR 27
77334: PUSH
77335: LD_INT 1
77337: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77338: LD_ADDR_OWVAR 28
77342: PUSH
77343: LD_INT 15
77345: ST_TO_ADDR
// hc_gallery :=  ;
77346: LD_ADDR_OWVAR 33
77350: PUSH
77351: LD_STRING 
77353: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77354: LD_ADDR_OWVAR 31
77358: PUSH
77359: LD_INT 0
77361: PPUSH
77362: LD_INT 3
77364: PPUSH
77365: CALL_OW 12
77369: PUSH
77370: LD_INT 0
77372: PPUSH
77373: LD_INT 3
77375: PPUSH
77376: CALL_OW 12
77380: PUSH
77381: LD_INT 0
77383: PUSH
77384: LD_INT 0
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: ST_TO_ADDR
// end ;
77393: LD_VAR 0 1
77397: RET
// export function PrepareApemanEngineer ( ) ; begin
77398: LD_INT 0
77400: PPUSH
// uc_nation := 0 ;
77401: LD_ADDR_OWVAR 21
77405: PUSH
77406: LD_INT 0
77408: ST_TO_ADDR
// hc_sex := sex_male ;
77409: LD_ADDR_OWVAR 27
77413: PUSH
77414: LD_INT 1
77416: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77417: LD_ADDR_OWVAR 28
77421: PUSH
77422: LD_INT 16
77424: ST_TO_ADDR
// hc_gallery :=  ;
77425: LD_ADDR_OWVAR 33
77429: PUSH
77430: LD_STRING 
77432: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77433: LD_ADDR_OWVAR 31
77437: PUSH
77438: LD_INT 0
77440: PPUSH
77441: LD_INT 3
77443: PPUSH
77444: CALL_OW 12
77448: PUSH
77449: LD_INT 0
77451: PPUSH
77452: LD_INT 3
77454: PPUSH
77455: CALL_OW 12
77459: PUSH
77460: LD_INT 0
77462: PUSH
77463: LD_INT 0
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: ST_TO_ADDR
// end ;
77472: LD_VAR 0 1
77476: RET
// export function PrepareApeman ( agressivity ) ; begin
77477: LD_INT 0
77479: PPUSH
// uc_side := 0 ;
77480: LD_ADDR_OWVAR 20
77484: PUSH
77485: LD_INT 0
77487: ST_TO_ADDR
// uc_nation := 0 ;
77488: LD_ADDR_OWVAR 21
77492: PUSH
77493: LD_INT 0
77495: ST_TO_ADDR
// hc_sex := sex_male ;
77496: LD_ADDR_OWVAR 27
77500: PUSH
77501: LD_INT 1
77503: ST_TO_ADDR
// hc_class := class_apeman ;
77504: LD_ADDR_OWVAR 28
77508: PUSH
77509: LD_INT 12
77511: ST_TO_ADDR
// hc_gallery :=  ;
77512: LD_ADDR_OWVAR 33
77516: PUSH
77517: LD_STRING 
77519: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77520: LD_ADDR_OWVAR 35
77524: PUSH
77525: LD_VAR 0 1
77529: NEG
77530: PPUSH
77531: LD_VAR 0 1
77535: PPUSH
77536: CALL_OW 12
77540: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77541: LD_ADDR_OWVAR 31
77545: PUSH
77546: LD_INT 0
77548: PPUSH
77549: LD_INT 3
77551: PPUSH
77552: CALL_OW 12
77556: PUSH
77557: LD_INT 0
77559: PPUSH
77560: LD_INT 3
77562: PPUSH
77563: CALL_OW 12
77567: PUSH
77568: LD_INT 0
77570: PUSH
77571: LD_INT 0
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: ST_TO_ADDR
// end ;
77580: LD_VAR 0 2
77584: RET
// export function PrepareTiger ( agressivity ) ; begin
77585: LD_INT 0
77587: PPUSH
// uc_side := 0 ;
77588: LD_ADDR_OWVAR 20
77592: PUSH
77593: LD_INT 0
77595: ST_TO_ADDR
// uc_nation := 0 ;
77596: LD_ADDR_OWVAR 21
77600: PUSH
77601: LD_INT 0
77603: ST_TO_ADDR
// hc_class := class_tiger ;
77604: LD_ADDR_OWVAR 28
77608: PUSH
77609: LD_INT 14
77611: ST_TO_ADDR
// hc_gallery :=  ;
77612: LD_ADDR_OWVAR 33
77616: PUSH
77617: LD_STRING 
77619: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77620: LD_ADDR_OWVAR 35
77624: PUSH
77625: LD_VAR 0 1
77629: NEG
77630: PPUSH
77631: LD_VAR 0 1
77635: PPUSH
77636: CALL_OW 12
77640: ST_TO_ADDR
// end ;
77641: LD_VAR 0 2
77645: RET
// export function PrepareEnchidna ( ) ; begin
77646: LD_INT 0
77648: PPUSH
// uc_side := 0 ;
77649: LD_ADDR_OWVAR 20
77653: PUSH
77654: LD_INT 0
77656: ST_TO_ADDR
// uc_nation := 0 ;
77657: LD_ADDR_OWVAR 21
77661: PUSH
77662: LD_INT 0
77664: ST_TO_ADDR
// hc_class := class_baggie ;
77665: LD_ADDR_OWVAR 28
77669: PUSH
77670: LD_INT 13
77672: ST_TO_ADDR
// hc_gallery :=  ;
77673: LD_ADDR_OWVAR 33
77677: PUSH
77678: LD_STRING 
77680: ST_TO_ADDR
// end ;
77681: LD_VAR 0 1
77685: RET
// export function PrepareFrog ( ) ; begin
77686: LD_INT 0
77688: PPUSH
// uc_side := 0 ;
77689: LD_ADDR_OWVAR 20
77693: PUSH
77694: LD_INT 0
77696: ST_TO_ADDR
// uc_nation := 0 ;
77697: LD_ADDR_OWVAR 21
77701: PUSH
77702: LD_INT 0
77704: ST_TO_ADDR
// hc_class := class_frog ;
77705: LD_ADDR_OWVAR 28
77709: PUSH
77710: LD_INT 19
77712: ST_TO_ADDR
// hc_gallery :=  ;
77713: LD_ADDR_OWVAR 33
77717: PUSH
77718: LD_STRING 
77720: ST_TO_ADDR
// end ;
77721: LD_VAR 0 1
77725: RET
// export function PrepareFish ( ) ; begin
77726: LD_INT 0
77728: PPUSH
// uc_side := 0 ;
77729: LD_ADDR_OWVAR 20
77733: PUSH
77734: LD_INT 0
77736: ST_TO_ADDR
// uc_nation := 0 ;
77737: LD_ADDR_OWVAR 21
77741: PUSH
77742: LD_INT 0
77744: ST_TO_ADDR
// hc_class := class_fish ;
77745: LD_ADDR_OWVAR 28
77749: PUSH
77750: LD_INT 20
77752: ST_TO_ADDR
// hc_gallery :=  ;
77753: LD_ADDR_OWVAR 33
77757: PUSH
77758: LD_STRING 
77760: ST_TO_ADDR
// end ;
77761: LD_VAR 0 1
77765: RET
// export function PrepareBird ( ) ; begin
77766: LD_INT 0
77768: PPUSH
// uc_side := 0 ;
77769: LD_ADDR_OWVAR 20
77773: PUSH
77774: LD_INT 0
77776: ST_TO_ADDR
// uc_nation := 0 ;
77777: LD_ADDR_OWVAR 21
77781: PUSH
77782: LD_INT 0
77784: ST_TO_ADDR
// hc_class := class_phororhacos ;
77785: LD_ADDR_OWVAR 28
77789: PUSH
77790: LD_INT 18
77792: ST_TO_ADDR
// hc_gallery :=  ;
77793: LD_ADDR_OWVAR 33
77797: PUSH
77798: LD_STRING 
77800: ST_TO_ADDR
// end ;
77801: LD_VAR 0 1
77805: RET
// export function PrepareHorse ( ) ; begin
77806: LD_INT 0
77808: PPUSH
// uc_side := 0 ;
77809: LD_ADDR_OWVAR 20
77813: PUSH
77814: LD_INT 0
77816: ST_TO_ADDR
// uc_nation := 0 ;
77817: LD_ADDR_OWVAR 21
77821: PUSH
77822: LD_INT 0
77824: ST_TO_ADDR
// hc_class := class_horse ;
77825: LD_ADDR_OWVAR 28
77829: PUSH
77830: LD_INT 21
77832: ST_TO_ADDR
// hc_gallery :=  ;
77833: LD_ADDR_OWVAR 33
77837: PUSH
77838: LD_STRING 
77840: ST_TO_ADDR
// end ;
77841: LD_VAR 0 1
77845: RET
// export function PrepareMastodont ( ) ; begin
77846: LD_INT 0
77848: PPUSH
// uc_side := 0 ;
77849: LD_ADDR_OWVAR 20
77853: PUSH
77854: LD_INT 0
77856: ST_TO_ADDR
// uc_nation := 0 ;
77857: LD_ADDR_OWVAR 21
77861: PUSH
77862: LD_INT 0
77864: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77865: LD_ADDR_OWVAR 37
77869: PUSH
77870: LD_INT 31
77872: ST_TO_ADDR
// vc_control := control_rider ;
77873: LD_ADDR_OWVAR 38
77877: PUSH
77878: LD_INT 4
77880: ST_TO_ADDR
// end ;
77881: LD_VAR 0 1
77885: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77886: LD_INT 0
77888: PPUSH
77889: PPUSH
77890: PPUSH
// uc_side = 0 ;
77891: LD_ADDR_OWVAR 20
77895: PUSH
77896: LD_INT 0
77898: ST_TO_ADDR
// uc_nation = 0 ;
77899: LD_ADDR_OWVAR 21
77903: PUSH
77904: LD_INT 0
77906: ST_TO_ADDR
// InitHc_All ( ) ;
77907: CALL_OW 584
// InitVc ;
77911: CALL_OW 20
// if mastodonts then
77915: LD_VAR 0 6
77919: IFFALSE 77986
// for i = 1 to mastodonts do
77921: LD_ADDR_VAR 0 11
77925: PUSH
77926: DOUBLE
77927: LD_INT 1
77929: DEC
77930: ST_TO_ADDR
77931: LD_VAR 0 6
77935: PUSH
77936: FOR_TO
77937: IFFALSE 77984
// begin vc_chassis := 31 ;
77939: LD_ADDR_OWVAR 37
77943: PUSH
77944: LD_INT 31
77946: ST_TO_ADDR
// vc_control := control_rider ;
77947: LD_ADDR_OWVAR 38
77951: PUSH
77952: LD_INT 4
77954: ST_TO_ADDR
// animal := CreateVehicle ;
77955: LD_ADDR_VAR 0 12
77959: PUSH
77960: CALL_OW 45
77964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77965: LD_VAR 0 12
77969: PPUSH
77970: LD_VAR 0 8
77974: PPUSH
77975: LD_INT 0
77977: PPUSH
77978: CALL 80114 0 3
// end ;
77982: GO 77936
77984: POP
77985: POP
// if horses then
77986: LD_VAR 0 5
77990: IFFALSE 78057
// for i = 1 to horses do
77992: LD_ADDR_VAR 0 11
77996: PUSH
77997: DOUBLE
77998: LD_INT 1
78000: DEC
78001: ST_TO_ADDR
78002: LD_VAR 0 5
78006: PUSH
78007: FOR_TO
78008: IFFALSE 78055
// begin hc_class := 21 ;
78010: LD_ADDR_OWVAR 28
78014: PUSH
78015: LD_INT 21
78017: ST_TO_ADDR
// hc_gallery :=  ;
78018: LD_ADDR_OWVAR 33
78022: PUSH
78023: LD_STRING 
78025: ST_TO_ADDR
// animal := CreateHuman ;
78026: LD_ADDR_VAR 0 12
78030: PUSH
78031: CALL_OW 44
78035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78036: LD_VAR 0 12
78040: PPUSH
78041: LD_VAR 0 8
78045: PPUSH
78046: LD_INT 0
78048: PPUSH
78049: CALL 80114 0 3
// end ;
78053: GO 78007
78055: POP
78056: POP
// if birds then
78057: LD_VAR 0 1
78061: IFFALSE 78128
// for i = 1 to birds do
78063: LD_ADDR_VAR 0 11
78067: PUSH
78068: DOUBLE
78069: LD_INT 1
78071: DEC
78072: ST_TO_ADDR
78073: LD_VAR 0 1
78077: PUSH
78078: FOR_TO
78079: IFFALSE 78126
// begin hc_class = 18 ;
78081: LD_ADDR_OWVAR 28
78085: PUSH
78086: LD_INT 18
78088: ST_TO_ADDR
// hc_gallery =  ;
78089: LD_ADDR_OWVAR 33
78093: PUSH
78094: LD_STRING 
78096: ST_TO_ADDR
// animal := CreateHuman ;
78097: LD_ADDR_VAR 0 12
78101: PUSH
78102: CALL_OW 44
78106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78107: LD_VAR 0 12
78111: PPUSH
78112: LD_VAR 0 8
78116: PPUSH
78117: LD_INT 0
78119: PPUSH
78120: CALL 80114 0 3
// end ;
78124: GO 78078
78126: POP
78127: POP
// if tigers then
78128: LD_VAR 0 2
78132: IFFALSE 78216
// for i = 1 to tigers do
78134: LD_ADDR_VAR 0 11
78138: PUSH
78139: DOUBLE
78140: LD_INT 1
78142: DEC
78143: ST_TO_ADDR
78144: LD_VAR 0 2
78148: PUSH
78149: FOR_TO
78150: IFFALSE 78214
// begin hc_class = class_tiger ;
78152: LD_ADDR_OWVAR 28
78156: PUSH
78157: LD_INT 14
78159: ST_TO_ADDR
// hc_gallery =  ;
78160: LD_ADDR_OWVAR 33
78164: PUSH
78165: LD_STRING 
78167: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78168: LD_ADDR_OWVAR 35
78172: PUSH
78173: LD_INT 7
78175: NEG
78176: PPUSH
78177: LD_INT 7
78179: PPUSH
78180: CALL_OW 12
78184: ST_TO_ADDR
// animal := CreateHuman ;
78185: LD_ADDR_VAR 0 12
78189: PUSH
78190: CALL_OW 44
78194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78195: LD_VAR 0 12
78199: PPUSH
78200: LD_VAR 0 8
78204: PPUSH
78205: LD_INT 0
78207: PPUSH
78208: CALL 80114 0 3
// end ;
78212: GO 78149
78214: POP
78215: POP
// if apemans then
78216: LD_VAR 0 3
78220: IFFALSE 78343
// for i = 1 to apemans do
78222: LD_ADDR_VAR 0 11
78226: PUSH
78227: DOUBLE
78228: LD_INT 1
78230: DEC
78231: ST_TO_ADDR
78232: LD_VAR 0 3
78236: PUSH
78237: FOR_TO
78238: IFFALSE 78341
// begin hc_class = class_apeman ;
78240: LD_ADDR_OWVAR 28
78244: PUSH
78245: LD_INT 12
78247: ST_TO_ADDR
// hc_gallery =  ;
78248: LD_ADDR_OWVAR 33
78252: PUSH
78253: LD_STRING 
78255: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78256: LD_ADDR_OWVAR 35
78260: PUSH
78261: LD_INT 2
78263: NEG
78264: PPUSH
78265: LD_INT 2
78267: PPUSH
78268: CALL_OW 12
78272: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78273: LD_ADDR_OWVAR 31
78277: PUSH
78278: LD_INT 1
78280: PPUSH
78281: LD_INT 3
78283: PPUSH
78284: CALL_OW 12
78288: PUSH
78289: LD_INT 1
78291: PPUSH
78292: LD_INT 3
78294: PPUSH
78295: CALL_OW 12
78299: PUSH
78300: LD_INT 0
78302: PUSH
78303: LD_INT 0
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: LIST
78310: LIST
78311: ST_TO_ADDR
// animal := CreateHuman ;
78312: LD_ADDR_VAR 0 12
78316: PUSH
78317: CALL_OW 44
78321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78322: LD_VAR 0 12
78326: PPUSH
78327: LD_VAR 0 8
78331: PPUSH
78332: LD_INT 0
78334: PPUSH
78335: CALL 80114 0 3
// end ;
78339: GO 78237
78341: POP
78342: POP
// if enchidnas then
78343: LD_VAR 0 4
78347: IFFALSE 78414
// for i = 1 to enchidnas do
78349: LD_ADDR_VAR 0 11
78353: PUSH
78354: DOUBLE
78355: LD_INT 1
78357: DEC
78358: ST_TO_ADDR
78359: LD_VAR 0 4
78363: PUSH
78364: FOR_TO
78365: IFFALSE 78412
// begin hc_class = 13 ;
78367: LD_ADDR_OWVAR 28
78371: PUSH
78372: LD_INT 13
78374: ST_TO_ADDR
// hc_gallery =  ;
78375: LD_ADDR_OWVAR 33
78379: PUSH
78380: LD_STRING 
78382: ST_TO_ADDR
// animal := CreateHuman ;
78383: LD_ADDR_VAR 0 12
78387: PUSH
78388: CALL_OW 44
78392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78393: LD_VAR 0 12
78397: PPUSH
78398: LD_VAR 0 8
78402: PPUSH
78403: LD_INT 0
78405: PPUSH
78406: CALL 80114 0 3
// end ;
78410: GO 78364
78412: POP
78413: POP
// if fishes then
78414: LD_VAR 0 7
78418: IFFALSE 78485
// for i = 1 to fishes do
78420: LD_ADDR_VAR 0 11
78424: PUSH
78425: DOUBLE
78426: LD_INT 1
78428: DEC
78429: ST_TO_ADDR
78430: LD_VAR 0 7
78434: PUSH
78435: FOR_TO
78436: IFFALSE 78483
// begin hc_class = 20 ;
78438: LD_ADDR_OWVAR 28
78442: PUSH
78443: LD_INT 20
78445: ST_TO_ADDR
// hc_gallery =  ;
78446: LD_ADDR_OWVAR 33
78450: PUSH
78451: LD_STRING 
78453: ST_TO_ADDR
// animal := CreateHuman ;
78454: LD_ADDR_VAR 0 12
78458: PUSH
78459: CALL_OW 44
78463: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78464: LD_VAR 0 12
78468: PPUSH
78469: LD_VAR 0 9
78473: PPUSH
78474: LD_INT 0
78476: PPUSH
78477: CALL 80114 0 3
// end ;
78481: GO 78435
78483: POP
78484: POP
// end ;
78485: LD_VAR 0 10
78489: RET
// export function WantHeal ( sci , unit ) ; begin
78490: LD_INT 0
78492: PPUSH
// if GetTaskList ( sci ) > 0 then
78493: LD_VAR 0 1
78497: PPUSH
78498: CALL_OW 437
78502: PUSH
78503: LD_INT 0
78505: GREATER
78506: IFFALSE 78576
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78508: LD_VAR 0 1
78512: PPUSH
78513: CALL_OW 437
78517: PUSH
78518: LD_INT 1
78520: ARRAY
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PUSH
78526: LD_STRING l
78528: EQUAL
78529: PUSH
78530: LD_VAR 0 1
78534: PPUSH
78535: CALL_OW 437
78539: PUSH
78540: LD_INT 1
78542: ARRAY
78543: PUSH
78544: LD_INT 4
78546: ARRAY
78547: PUSH
78548: LD_VAR 0 2
78552: EQUAL
78553: AND
78554: IFFALSE 78566
// result := true else
78556: LD_ADDR_VAR 0 3
78560: PUSH
78561: LD_INT 1
78563: ST_TO_ADDR
78564: GO 78574
// result := false ;
78566: LD_ADDR_VAR 0 3
78570: PUSH
78571: LD_INT 0
78573: ST_TO_ADDR
// end else
78574: GO 78584
// result := false ;
78576: LD_ADDR_VAR 0 3
78580: PUSH
78581: LD_INT 0
78583: ST_TO_ADDR
// end ;
78584: LD_VAR 0 3
78588: RET
// export function HealTarget ( sci ) ; begin
78589: LD_INT 0
78591: PPUSH
// if not sci then
78592: LD_VAR 0 1
78596: NOT
78597: IFFALSE 78601
// exit ;
78599: GO 78666
// result := 0 ;
78601: LD_ADDR_VAR 0 2
78605: PUSH
78606: LD_INT 0
78608: ST_TO_ADDR
// if GetTaskList ( sci ) then
78609: LD_VAR 0 1
78613: PPUSH
78614: CALL_OW 437
78618: IFFALSE 78666
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78620: LD_VAR 0 1
78624: PPUSH
78625: CALL_OW 437
78629: PUSH
78630: LD_INT 1
78632: ARRAY
78633: PUSH
78634: LD_INT 1
78636: ARRAY
78637: PUSH
78638: LD_STRING l
78640: EQUAL
78641: IFFALSE 78666
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78643: LD_ADDR_VAR 0 2
78647: PUSH
78648: LD_VAR 0 1
78652: PPUSH
78653: CALL_OW 437
78657: PUSH
78658: LD_INT 1
78660: ARRAY
78661: PUSH
78662: LD_INT 4
78664: ARRAY
78665: ST_TO_ADDR
// end ;
78666: LD_VAR 0 2
78670: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78671: LD_INT 0
78673: PPUSH
78674: PPUSH
78675: PPUSH
78676: PPUSH
// if not base_units then
78677: LD_VAR 0 1
78681: NOT
78682: IFFALSE 78686
// exit ;
78684: GO 78773
// result := false ;
78686: LD_ADDR_VAR 0 2
78690: PUSH
78691: LD_INT 0
78693: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78694: LD_ADDR_VAR 0 5
78698: PUSH
78699: LD_VAR 0 1
78703: PPUSH
78704: LD_INT 21
78706: PUSH
78707: LD_INT 3
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PPUSH
78714: CALL_OW 72
78718: ST_TO_ADDR
// if not tmp then
78719: LD_VAR 0 5
78723: NOT
78724: IFFALSE 78728
// exit ;
78726: GO 78773
// for i in tmp do
78728: LD_ADDR_VAR 0 3
78732: PUSH
78733: LD_VAR 0 5
78737: PUSH
78738: FOR_IN
78739: IFFALSE 78771
// begin result := EnemyInRange ( i , 22 ) ;
78741: LD_ADDR_VAR 0 2
78745: PUSH
78746: LD_VAR 0 3
78750: PPUSH
78751: LD_INT 22
78753: PPUSH
78754: CALL 76360 0 2
78758: ST_TO_ADDR
// if result then
78759: LD_VAR 0 2
78763: IFFALSE 78769
// exit ;
78765: POP
78766: POP
78767: GO 78773
// end ;
78769: GO 78738
78771: POP
78772: POP
// end ;
78773: LD_VAR 0 2
78777: RET
// export function FilterByTag ( units , tag ) ; begin
78778: LD_INT 0
78780: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78781: LD_ADDR_VAR 0 3
78785: PUSH
78786: LD_VAR 0 1
78790: PPUSH
78791: LD_INT 120
78793: PUSH
78794: LD_VAR 0 2
78798: PUSH
78799: EMPTY
78800: LIST
78801: LIST
78802: PPUSH
78803: CALL_OW 72
78807: ST_TO_ADDR
// end ;
78808: LD_VAR 0 3
78812: RET
// export function IsDriver ( un ) ; begin
78813: LD_INT 0
78815: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78816: LD_ADDR_VAR 0 2
78820: PUSH
78821: LD_VAR 0 1
78825: PUSH
78826: LD_INT 55
78828: PUSH
78829: EMPTY
78830: LIST
78831: PPUSH
78832: CALL_OW 69
78836: IN
78837: ST_TO_ADDR
// end ;
78838: LD_VAR 0 2
78842: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78843: LD_INT 0
78845: PPUSH
78846: PPUSH
// list := [ ] ;
78847: LD_ADDR_VAR 0 5
78851: PUSH
78852: EMPTY
78853: ST_TO_ADDR
// case d of 0 :
78854: LD_VAR 0 3
78858: PUSH
78859: LD_INT 0
78861: DOUBLE
78862: EQUAL
78863: IFTRUE 78867
78865: GO 79000
78867: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78868: LD_ADDR_VAR 0 5
78872: PUSH
78873: LD_VAR 0 1
78877: PUSH
78878: LD_INT 4
78880: MINUS
78881: PUSH
78882: LD_VAR 0 2
78886: PUSH
78887: LD_INT 4
78889: MINUS
78890: PUSH
78891: LD_INT 2
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: LIST
78898: PUSH
78899: LD_VAR 0 1
78903: PUSH
78904: LD_INT 3
78906: MINUS
78907: PUSH
78908: LD_VAR 0 2
78912: PUSH
78913: LD_INT 1
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: LIST
78920: PUSH
78921: LD_VAR 0 1
78925: PUSH
78926: LD_INT 4
78928: PLUS
78929: PUSH
78930: LD_VAR 0 2
78934: PUSH
78935: LD_INT 4
78937: PUSH
78938: EMPTY
78939: LIST
78940: LIST
78941: LIST
78942: PUSH
78943: LD_VAR 0 1
78947: PUSH
78948: LD_INT 3
78950: PLUS
78951: PUSH
78952: LD_VAR 0 2
78956: PUSH
78957: LD_INT 3
78959: PLUS
78960: PUSH
78961: LD_INT 5
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: LIST
78968: PUSH
78969: LD_VAR 0 1
78973: PUSH
78974: LD_VAR 0 2
78978: PUSH
78979: LD_INT 4
78981: PLUS
78982: PUSH
78983: LD_INT 0
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: LIST
78990: PUSH
78991: EMPTY
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: ST_TO_ADDR
// end ; 1 :
78998: GO 79698
79000: LD_INT 1
79002: DOUBLE
79003: EQUAL
79004: IFTRUE 79008
79006: GO 79141
79008: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79009: LD_ADDR_VAR 0 5
79013: PUSH
79014: LD_VAR 0 1
79018: PUSH
79019: LD_VAR 0 2
79023: PUSH
79024: LD_INT 4
79026: MINUS
79027: PUSH
79028: LD_INT 3
79030: PUSH
79031: EMPTY
79032: LIST
79033: LIST
79034: LIST
79035: PUSH
79036: LD_VAR 0 1
79040: PUSH
79041: LD_INT 3
79043: MINUS
79044: PUSH
79045: LD_VAR 0 2
79049: PUSH
79050: LD_INT 3
79052: MINUS
79053: PUSH
79054: LD_INT 2
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: LIST
79061: PUSH
79062: LD_VAR 0 1
79066: PUSH
79067: LD_INT 4
79069: MINUS
79070: PUSH
79071: LD_VAR 0 2
79075: PUSH
79076: LD_INT 1
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: LIST
79083: PUSH
79084: LD_VAR 0 1
79088: PUSH
79089: LD_VAR 0 2
79093: PUSH
79094: LD_INT 3
79096: PLUS
79097: PUSH
79098: LD_INT 0
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: LIST
79105: PUSH
79106: LD_VAR 0 1
79110: PUSH
79111: LD_INT 4
79113: PLUS
79114: PUSH
79115: LD_VAR 0 2
79119: PUSH
79120: LD_INT 4
79122: PLUS
79123: PUSH
79124: LD_INT 5
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: LIST
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: LIST
79136: LIST
79137: LIST
79138: ST_TO_ADDR
// end ; 2 :
79139: GO 79698
79141: LD_INT 2
79143: DOUBLE
79144: EQUAL
79145: IFTRUE 79149
79147: GO 79278
79149: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79150: LD_ADDR_VAR 0 5
79154: PUSH
79155: LD_VAR 0 1
79159: PUSH
79160: LD_VAR 0 2
79164: PUSH
79165: LD_INT 3
79167: MINUS
79168: PUSH
79169: LD_INT 3
79171: PUSH
79172: EMPTY
79173: LIST
79174: LIST
79175: LIST
79176: PUSH
79177: LD_VAR 0 1
79181: PUSH
79182: LD_INT 4
79184: PLUS
79185: PUSH
79186: LD_VAR 0 2
79190: PUSH
79191: LD_INT 4
79193: PUSH
79194: EMPTY
79195: LIST
79196: LIST
79197: LIST
79198: PUSH
79199: LD_VAR 0 1
79203: PUSH
79204: LD_VAR 0 2
79208: PUSH
79209: LD_INT 4
79211: PLUS
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: LIST
79220: PUSH
79221: LD_VAR 0 1
79225: PUSH
79226: LD_INT 3
79228: MINUS
79229: PUSH
79230: LD_VAR 0 2
79234: PUSH
79235: LD_INT 1
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: LIST
79242: PUSH
79243: LD_VAR 0 1
79247: PUSH
79248: LD_INT 4
79250: MINUS
79251: PUSH
79252: LD_VAR 0 2
79256: PUSH
79257: LD_INT 4
79259: MINUS
79260: PUSH
79261: LD_INT 2
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: LIST
79268: PUSH
79269: EMPTY
79270: LIST
79271: LIST
79272: LIST
79273: LIST
79274: LIST
79275: ST_TO_ADDR
// end ; 3 :
79276: GO 79698
79278: LD_INT 3
79280: DOUBLE
79281: EQUAL
79282: IFTRUE 79286
79284: GO 79419
79286: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79287: LD_ADDR_VAR 0 5
79291: PUSH
79292: LD_VAR 0 1
79296: PUSH
79297: LD_INT 3
79299: PLUS
79300: PUSH
79301: LD_VAR 0 2
79305: PUSH
79306: LD_INT 4
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: LIST
79313: PUSH
79314: LD_VAR 0 1
79318: PUSH
79319: LD_INT 4
79321: PLUS
79322: PUSH
79323: LD_VAR 0 2
79327: PUSH
79328: LD_INT 4
79330: PLUS
79331: PUSH
79332: LD_INT 5
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: LIST
79339: PUSH
79340: LD_VAR 0 1
79344: PUSH
79345: LD_INT 4
79347: MINUS
79348: PUSH
79349: LD_VAR 0 2
79353: PUSH
79354: LD_INT 1
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: LIST
79361: PUSH
79362: LD_VAR 0 1
79366: PUSH
79367: LD_VAR 0 2
79371: PUSH
79372: LD_INT 4
79374: MINUS
79375: PUSH
79376: LD_INT 3
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: LIST
79383: PUSH
79384: LD_VAR 0 1
79388: PUSH
79389: LD_INT 3
79391: MINUS
79392: PUSH
79393: LD_VAR 0 2
79397: PUSH
79398: LD_INT 3
79400: MINUS
79401: PUSH
79402: LD_INT 2
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: LIST
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: LIST
79414: LIST
79415: LIST
79416: ST_TO_ADDR
// end ; 4 :
79417: GO 79698
79419: LD_INT 4
79421: DOUBLE
79422: EQUAL
79423: IFTRUE 79427
79425: GO 79560
79427: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79428: LD_ADDR_VAR 0 5
79432: PUSH
79433: LD_VAR 0 1
79437: PUSH
79438: LD_VAR 0 2
79442: PUSH
79443: LD_INT 4
79445: PLUS
79446: PUSH
79447: LD_INT 0
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: LIST
79454: PUSH
79455: LD_VAR 0 1
79459: PUSH
79460: LD_INT 3
79462: PLUS
79463: PUSH
79464: LD_VAR 0 2
79468: PUSH
79469: LD_INT 3
79471: PLUS
79472: PUSH
79473: LD_INT 5
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: PUSH
79481: LD_VAR 0 1
79485: PUSH
79486: LD_INT 4
79488: PLUS
79489: PUSH
79490: LD_VAR 0 2
79494: PUSH
79495: LD_INT 4
79497: PUSH
79498: EMPTY
79499: LIST
79500: LIST
79501: LIST
79502: PUSH
79503: LD_VAR 0 1
79507: PUSH
79508: LD_VAR 0 2
79512: PUSH
79513: LD_INT 3
79515: MINUS
79516: PUSH
79517: LD_INT 3
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: LIST
79524: PUSH
79525: LD_VAR 0 1
79529: PUSH
79530: LD_INT 4
79532: MINUS
79533: PUSH
79534: LD_VAR 0 2
79538: PUSH
79539: LD_INT 4
79541: MINUS
79542: PUSH
79543: LD_INT 2
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: LIST
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: LIST
79557: ST_TO_ADDR
// end ; 5 :
79558: GO 79698
79560: LD_INT 5
79562: DOUBLE
79563: EQUAL
79564: IFTRUE 79568
79566: GO 79697
79568: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79569: LD_ADDR_VAR 0 5
79573: PUSH
79574: LD_VAR 0 1
79578: PUSH
79579: LD_INT 4
79581: MINUS
79582: PUSH
79583: LD_VAR 0 2
79587: PUSH
79588: LD_INT 1
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: LIST
79595: PUSH
79596: LD_VAR 0 1
79600: PUSH
79601: LD_VAR 0 2
79605: PUSH
79606: LD_INT 4
79608: MINUS
79609: PUSH
79610: LD_INT 3
79612: PUSH
79613: EMPTY
79614: LIST
79615: LIST
79616: LIST
79617: PUSH
79618: LD_VAR 0 1
79622: PUSH
79623: LD_INT 4
79625: PLUS
79626: PUSH
79627: LD_VAR 0 2
79631: PUSH
79632: LD_INT 4
79634: PLUS
79635: PUSH
79636: LD_INT 5
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: LIST
79643: PUSH
79644: LD_VAR 0 1
79648: PUSH
79649: LD_INT 3
79651: PLUS
79652: PUSH
79653: LD_VAR 0 2
79657: PUSH
79658: LD_INT 4
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: LIST
79665: PUSH
79666: LD_VAR 0 1
79670: PUSH
79671: LD_VAR 0 2
79675: PUSH
79676: LD_INT 3
79678: PLUS
79679: PUSH
79680: LD_INT 0
79682: PUSH
79683: EMPTY
79684: LIST
79685: LIST
79686: LIST
79687: PUSH
79688: EMPTY
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: ST_TO_ADDR
// end ; end ;
79695: GO 79698
79697: POP
// result := list ;
79698: LD_ADDR_VAR 0 4
79702: PUSH
79703: LD_VAR 0 5
79707: ST_TO_ADDR
// end ;
79708: LD_VAR 0 4
79712: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79713: LD_INT 0
79715: PPUSH
79716: PPUSH
79717: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79718: LD_VAR 0 1
79722: NOT
79723: PUSH
79724: LD_VAR 0 2
79728: PUSH
79729: LD_INT 1
79731: PUSH
79732: LD_INT 2
79734: PUSH
79735: LD_INT 3
79737: PUSH
79738: LD_INT 4
79740: PUSH
79741: EMPTY
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: IN
79747: NOT
79748: OR
79749: IFFALSE 79753
// exit ;
79751: GO 79836
// tmp := [ ] ;
79753: LD_ADDR_VAR 0 5
79757: PUSH
79758: EMPTY
79759: ST_TO_ADDR
// for i in units do
79760: LD_ADDR_VAR 0 4
79764: PUSH
79765: LD_VAR 0 1
79769: PUSH
79770: FOR_IN
79771: IFFALSE 79805
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79773: LD_ADDR_VAR 0 5
79777: PUSH
79778: LD_VAR 0 5
79782: PPUSH
79783: LD_VAR 0 4
79787: PPUSH
79788: LD_VAR 0 2
79792: PPUSH
79793: CALL_OW 259
79797: PPUSH
79798: CALL 81197 0 2
79802: ST_TO_ADDR
79803: GO 79770
79805: POP
79806: POP
// if not tmp then
79807: LD_VAR 0 5
79811: NOT
79812: IFFALSE 79816
// exit ;
79814: GO 79836
// result := SortListByListDesc ( units , tmp ) ;
79816: LD_ADDR_VAR 0 3
79820: PUSH
79821: LD_VAR 0 1
79825: PPUSH
79826: LD_VAR 0 5
79830: PPUSH
79831: CALL_OW 77
79835: ST_TO_ADDR
// end ;
79836: LD_VAR 0 3
79840: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79841: LD_INT 0
79843: PPUSH
79844: PPUSH
79845: PPUSH
// result := false ;
79846: LD_ADDR_VAR 0 3
79850: PUSH
79851: LD_INT 0
79853: ST_TO_ADDR
// if not building then
79854: LD_VAR 0 2
79858: NOT
79859: IFFALSE 79863
// exit ;
79861: GO 80001
// x := GetX ( building ) ;
79863: LD_ADDR_VAR 0 4
79867: PUSH
79868: LD_VAR 0 2
79872: PPUSH
79873: CALL_OW 250
79877: ST_TO_ADDR
// y := GetY ( building ) ;
79878: LD_ADDR_VAR 0 5
79882: PUSH
79883: LD_VAR 0 2
79887: PPUSH
79888: CALL_OW 251
79892: ST_TO_ADDR
// if not x or not y then
79893: LD_VAR 0 4
79897: NOT
79898: PUSH
79899: LD_VAR 0 5
79903: NOT
79904: OR
79905: IFFALSE 79909
// exit ;
79907: GO 80001
// if GetTaskList ( unit ) then
79909: LD_VAR 0 1
79913: PPUSH
79914: CALL_OW 437
79918: IFFALSE 80001
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79920: LD_STRING e
79922: PUSH
79923: LD_VAR 0 1
79927: PPUSH
79928: CALL_OW 437
79932: PUSH
79933: LD_INT 1
79935: ARRAY
79936: PUSH
79937: LD_INT 1
79939: ARRAY
79940: EQUAL
79941: PUSH
79942: LD_VAR 0 4
79946: PUSH
79947: LD_VAR 0 1
79951: PPUSH
79952: CALL_OW 437
79956: PUSH
79957: LD_INT 1
79959: ARRAY
79960: PUSH
79961: LD_INT 2
79963: ARRAY
79964: EQUAL
79965: AND
79966: PUSH
79967: LD_VAR 0 5
79971: PUSH
79972: LD_VAR 0 1
79976: PPUSH
79977: CALL_OW 437
79981: PUSH
79982: LD_INT 1
79984: ARRAY
79985: PUSH
79986: LD_INT 3
79988: ARRAY
79989: EQUAL
79990: AND
79991: IFFALSE 80001
// result := true end ;
79993: LD_ADDR_VAR 0 3
79997: PUSH
79998: LD_INT 1
80000: ST_TO_ADDR
// end ;
80001: LD_VAR 0 3
80005: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80006: LD_INT 0
80008: PPUSH
// result := false ;
80009: LD_ADDR_VAR 0 4
80013: PUSH
80014: LD_INT 0
80016: ST_TO_ADDR
// if GetTaskList ( unit ) then
80017: LD_VAR 0 1
80021: PPUSH
80022: CALL_OW 437
80026: IFFALSE 80109
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80028: LD_STRING M
80030: PUSH
80031: LD_VAR 0 1
80035: PPUSH
80036: CALL_OW 437
80040: PUSH
80041: LD_INT 1
80043: ARRAY
80044: PUSH
80045: LD_INT 1
80047: ARRAY
80048: EQUAL
80049: PUSH
80050: LD_VAR 0 2
80054: PUSH
80055: LD_VAR 0 1
80059: PPUSH
80060: CALL_OW 437
80064: PUSH
80065: LD_INT 1
80067: ARRAY
80068: PUSH
80069: LD_INT 2
80071: ARRAY
80072: EQUAL
80073: AND
80074: PUSH
80075: LD_VAR 0 3
80079: PUSH
80080: LD_VAR 0 1
80084: PPUSH
80085: CALL_OW 437
80089: PUSH
80090: LD_INT 1
80092: ARRAY
80093: PUSH
80094: LD_INT 3
80096: ARRAY
80097: EQUAL
80098: AND
80099: IFFALSE 80109
// result := true ;
80101: LD_ADDR_VAR 0 4
80105: PUSH
80106: LD_INT 1
80108: ST_TO_ADDR
// end ; end ;
80109: LD_VAR 0 4
80113: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80114: LD_INT 0
80116: PPUSH
80117: PPUSH
80118: PPUSH
80119: PPUSH
// if not unit or not area then
80120: LD_VAR 0 1
80124: NOT
80125: PUSH
80126: LD_VAR 0 2
80130: NOT
80131: OR
80132: IFFALSE 80136
// exit ;
80134: GO 80300
// tmp := AreaToList ( area , i ) ;
80136: LD_ADDR_VAR 0 6
80140: PUSH
80141: LD_VAR 0 2
80145: PPUSH
80146: LD_VAR 0 5
80150: PPUSH
80151: CALL_OW 517
80155: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80156: LD_ADDR_VAR 0 5
80160: PUSH
80161: DOUBLE
80162: LD_INT 1
80164: DEC
80165: ST_TO_ADDR
80166: LD_VAR 0 6
80170: PUSH
80171: LD_INT 1
80173: ARRAY
80174: PUSH
80175: FOR_TO
80176: IFFALSE 80298
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80178: LD_ADDR_VAR 0 7
80182: PUSH
80183: LD_VAR 0 6
80187: PUSH
80188: LD_INT 1
80190: ARRAY
80191: PUSH
80192: LD_VAR 0 5
80196: ARRAY
80197: PUSH
80198: LD_VAR 0 6
80202: PUSH
80203: LD_INT 2
80205: ARRAY
80206: PUSH
80207: LD_VAR 0 5
80211: ARRAY
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80217: LD_VAR 0 7
80221: PUSH
80222: LD_INT 1
80224: ARRAY
80225: PPUSH
80226: LD_VAR 0 7
80230: PUSH
80231: LD_INT 2
80233: ARRAY
80234: PPUSH
80235: CALL_OW 428
80239: PUSH
80240: LD_INT 0
80242: EQUAL
80243: IFFALSE 80296
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80245: LD_VAR 0 1
80249: PPUSH
80250: LD_VAR 0 7
80254: PUSH
80255: LD_INT 1
80257: ARRAY
80258: PPUSH
80259: LD_VAR 0 7
80263: PUSH
80264: LD_INT 2
80266: ARRAY
80267: PPUSH
80268: LD_VAR 0 3
80272: PPUSH
80273: CALL_OW 48
// result := IsPlaced ( unit ) ;
80277: LD_ADDR_VAR 0 4
80281: PUSH
80282: LD_VAR 0 1
80286: PPUSH
80287: CALL_OW 305
80291: ST_TO_ADDR
// exit ;
80292: POP
80293: POP
80294: GO 80300
// end ; end ;
80296: GO 80175
80298: POP
80299: POP
// end ;
80300: LD_VAR 0 4
80304: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80305: LD_INT 0
80307: PPUSH
80308: PPUSH
80309: PPUSH
// if not side or side > 8 then
80310: LD_VAR 0 1
80314: NOT
80315: PUSH
80316: LD_VAR 0 1
80320: PUSH
80321: LD_INT 8
80323: GREATER
80324: OR
80325: IFFALSE 80329
// exit ;
80327: GO 80516
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80329: LD_ADDR_VAR 0 4
80333: PUSH
80334: LD_INT 22
80336: PUSH
80337: LD_VAR 0 1
80341: PUSH
80342: EMPTY
80343: LIST
80344: LIST
80345: PUSH
80346: LD_INT 21
80348: PUSH
80349: LD_INT 3
80351: PUSH
80352: EMPTY
80353: LIST
80354: LIST
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PPUSH
80360: CALL_OW 69
80364: ST_TO_ADDR
// if not tmp then
80365: LD_VAR 0 4
80369: NOT
80370: IFFALSE 80374
// exit ;
80372: GO 80516
// enable_addtolog := true ;
80374: LD_ADDR_OWVAR 81
80378: PUSH
80379: LD_INT 1
80381: ST_TO_ADDR
// AddToLog ( [ ) ;
80382: LD_STRING [
80384: PPUSH
80385: CALL_OW 561
// for i in tmp do
80389: LD_ADDR_VAR 0 3
80393: PUSH
80394: LD_VAR 0 4
80398: PUSH
80399: FOR_IN
80400: IFFALSE 80507
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80402: LD_STRING [
80404: PUSH
80405: LD_VAR 0 3
80409: PPUSH
80410: CALL_OW 266
80414: STR
80415: PUSH
80416: LD_STRING , 
80418: STR
80419: PUSH
80420: LD_VAR 0 3
80424: PPUSH
80425: CALL_OW 250
80429: STR
80430: PUSH
80431: LD_STRING , 
80433: STR
80434: PUSH
80435: LD_VAR 0 3
80439: PPUSH
80440: CALL_OW 251
80444: STR
80445: PUSH
80446: LD_STRING , 
80448: STR
80449: PUSH
80450: LD_VAR 0 3
80454: PPUSH
80455: CALL_OW 254
80459: STR
80460: PUSH
80461: LD_STRING , 
80463: STR
80464: PUSH
80465: LD_VAR 0 3
80469: PPUSH
80470: LD_INT 1
80472: PPUSH
80473: CALL_OW 268
80477: STR
80478: PUSH
80479: LD_STRING , 
80481: STR
80482: PUSH
80483: LD_VAR 0 3
80487: PPUSH
80488: LD_INT 2
80490: PPUSH
80491: CALL_OW 268
80495: STR
80496: PUSH
80497: LD_STRING ],
80499: STR
80500: PPUSH
80501: CALL_OW 561
// end ;
80505: GO 80399
80507: POP
80508: POP
// AddToLog ( ]; ) ;
80509: LD_STRING ];
80511: PPUSH
80512: CALL_OW 561
// end ;
80516: LD_VAR 0 2
80520: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80521: LD_INT 0
80523: PPUSH
80524: PPUSH
80525: PPUSH
80526: PPUSH
80527: PPUSH
// if not area or not rate or not max then
80528: LD_VAR 0 1
80532: NOT
80533: PUSH
80534: LD_VAR 0 2
80538: NOT
80539: OR
80540: PUSH
80541: LD_VAR 0 4
80545: NOT
80546: OR
80547: IFFALSE 80551
// exit ;
80549: GO 80740
// while 1 do
80551: LD_INT 1
80553: IFFALSE 80740
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80555: LD_ADDR_VAR 0 9
80559: PUSH
80560: LD_VAR 0 1
80564: PPUSH
80565: LD_INT 1
80567: PPUSH
80568: CALL_OW 287
80572: PUSH
80573: LD_INT 10
80575: MUL
80576: ST_TO_ADDR
// r := rate / 10 ;
80577: LD_ADDR_VAR 0 7
80581: PUSH
80582: LD_VAR 0 2
80586: PUSH
80587: LD_INT 10
80589: DIVREAL
80590: ST_TO_ADDR
// time := 1 1$00 ;
80591: LD_ADDR_VAR 0 8
80595: PUSH
80596: LD_INT 2100
80598: ST_TO_ADDR
// if amount < min then
80599: LD_VAR 0 9
80603: PUSH
80604: LD_VAR 0 3
80608: LESS
80609: IFFALSE 80627
// r := r * 2 else
80611: LD_ADDR_VAR 0 7
80615: PUSH
80616: LD_VAR 0 7
80620: PUSH
80621: LD_INT 2
80623: MUL
80624: ST_TO_ADDR
80625: GO 80653
// if amount > max then
80627: LD_VAR 0 9
80631: PUSH
80632: LD_VAR 0 4
80636: GREATER
80637: IFFALSE 80653
// r := r / 2 ;
80639: LD_ADDR_VAR 0 7
80643: PUSH
80644: LD_VAR 0 7
80648: PUSH
80649: LD_INT 2
80651: DIVREAL
80652: ST_TO_ADDR
// time := time / r ;
80653: LD_ADDR_VAR 0 8
80657: PUSH
80658: LD_VAR 0 8
80662: PUSH
80663: LD_VAR 0 7
80667: DIVREAL
80668: ST_TO_ADDR
// if time < 0 then
80669: LD_VAR 0 8
80673: PUSH
80674: LD_INT 0
80676: LESS
80677: IFFALSE 80694
// time := time * - 1 ;
80679: LD_ADDR_VAR 0 8
80683: PUSH
80684: LD_VAR 0 8
80688: PUSH
80689: LD_INT 1
80691: NEG
80692: MUL
80693: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80694: LD_VAR 0 8
80698: PUSH
80699: LD_INT 35
80701: PPUSH
80702: LD_INT 875
80704: PPUSH
80705: CALL_OW 12
80709: PLUS
80710: PPUSH
80711: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80715: LD_INT 1
80717: PPUSH
80718: LD_INT 5
80720: PPUSH
80721: CALL_OW 12
80725: PPUSH
80726: LD_VAR 0 1
80730: PPUSH
80731: LD_INT 1
80733: PPUSH
80734: CALL_OW 55
// end ;
80738: GO 80551
// end ;
80740: LD_VAR 0 5
80744: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80745: LD_INT 0
80747: PPUSH
80748: PPUSH
80749: PPUSH
80750: PPUSH
80751: PPUSH
80752: PPUSH
80753: PPUSH
80754: PPUSH
// if not turrets or not factories then
80755: LD_VAR 0 1
80759: NOT
80760: PUSH
80761: LD_VAR 0 2
80765: NOT
80766: OR
80767: IFFALSE 80771
// exit ;
80769: GO 81078
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80771: LD_ADDR_VAR 0 10
80775: PUSH
80776: LD_INT 5
80778: PUSH
80779: LD_INT 6
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: PUSH
80786: LD_INT 2
80788: PUSH
80789: LD_INT 4
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PUSH
80796: LD_INT 3
80798: PUSH
80799: LD_INT 5
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: PUSH
80806: EMPTY
80807: LIST
80808: LIST
80809: LIST
80810: PUSH
80811: LD_INT 24
80813: PUSH
80814: LD_INT 25
80816: PUSH
80817: EMPTY
80818: LIST
80819: LIST
80820: PUSH
80821: LD_INT 23
80823: PUSH
80824: LD_INT 27
80826: PUSH
80827: EMPTY
80828: LIST
80829: LIST
80830: PUSH
80831: EMPTY
80832: LIST
80833: LIST
80834: PUSH
80835: LD_INT 42
80837: PUSH
80838: LD_INT 43
80840: PUSH
80841: EMPTY
80842: LIST
80843: LIST
80844: PUSH
80845: LD_INT 44
80847: PUSH
80848: LD_INT 46
80850: PUSH
80851: EMPTY
80852: LIST
80853: LIST
80854: PUSH
80855: LD_INT 45
80857: PUSH
80858: LD_INT 47
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: LIST
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: LIST
80874: ST_TO_ADDR
// result := [ ] ;
80875: LD_ADDR_VAR 0 3
80879: PUSH
80880: EMPTY
80881: ST_TO_ADDR
// for i in turrets do
80882: LD_ADDR_VAR 0 4
80886: PUSH
80887: LD_VAR 0 1
80891: PUSH
80892: FOR_IN
80893: IFFALSE 81076
// begin nat := GetNation ( i ) ;
80895: LD_ADDR_VAR 0 7
80899: PUSH
80900: LD_VAR 0 4
80904: PPUSH
80905: CALL_OW 248
80909: ST_TO_ADDR
// weapon := 0 ;
80910: LD_ADDR_VAR 0 8
80914: PUSH
80915: LD_INT 0
80917: ST_TO_ADDR
// if not nat then
80918: LD_VAR 0 7
80922: NOT
80923: IFFALSE 80927
// continue ;
80925: GO 80892
// for j in list [ nat ] do
80927: LD_ADDR_VAR 0 5
80931: PUSH
80932: LD_VAR 0 10
80936: PUSH
80937: LD_VAR 0 7
80941: ARRAY
80942: PUSH
80943: FOR_IN
80944: IFFALSE 80985
// if GetBWeapon ( i ) = j [ 1 ] then
80946: LD_VAR 0 4
80950: PPUSH
80951: CALL_OW 269
80955: PUSH
80956: LD_VAR 0 5
80960: PUSH
80961: LD_INT 1
80963: ARRAY
80964: EQUAL
80965: IFFALSE 80983
// begin weapon := j [ 2 ] ;
80967: LD_ADDR_VAR 0 8
80971: PUSH
80972: LD_VAR 0 5
80976: PUSH
80977: LD_INT 2
80979: ARRAY
80980: ST_TO_ADDR
// break ;
80981: GO 80985
// end ;
80983: GO 80943
80985: POP
80986: POP
// if not weapon then
80987: LD_VAR 0 8
80991: NOT
80992: IFFALSE 80996
// continue ;
80994: GO 80892
// for k in factories do
80996: LD_ADDR_VAR 0 6
81000: PUSH
81001: LD_VAR 0 2
81005: PUSH
81006: FOR_IN
81007: IFFALSE 81072
// begin weapons := AvailableWeaponList ( k ) ;
81009: LD_ADDR_VAR 0 9
81013: PUSH
81014: LD_VAR 0 6
81018: PPUSH
81019: CALL_OW 478
81023: ST_TO_ADDR
// if not weapons then
81024: LD_VAR 0 9
81028: NOT
81029: IFFALSE 81033
// continue ;
81031: GO 81006
// if weapon in weapons then
81033: LD_VAR 0 8
81037: PUSH
81038: LD_VAR 0 9
81042: IN
81043: IFFALSE 81070
// begin result := [ i , weapon ] ;
81045: LD_ADDR_VAR 0 3
81049: PUSH
81050: LD_VAR 0 4
81054: PUSH
81055: LD_VAR 0 8
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: ST_TO_ADDR
// exit ;
81064: POP
81065: POP
81066: POP
81067: POP
81068: GO 81078
// end ; end ;
81070: GO 81006
81072: POP
81073: POP
// end ;
81074: GO 80892
81076: POP
81077: POP
// end ;
81078: LD_VAR 0 3
81082: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81083: LD_INT 0
81085: PPUSH
// if not side or side > 8 then
81086: LD_VAR 0 3
81090: NOT
81091: PUSH
81092: LD_VAR 0 3
81096: PUSH
81097: LD_INT 8
81099: GREATER
81100: OR
81101: IFFALSE 81105
// exit ;
81103: GO 81164
// if not range then
81105: LD_VAR 0 4
81109: NOT
81110: IFFALSE 81121
// range := - 12 ;
81112: LD_ADDR_VAR 0 4
81116: PUSH
81117: LD_INT 12
81119: NEG
81120: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81121: LD_VAR 0 1
81125: PPUSH
81126: LD_VAR 0 2
81130: PPUSH
81131: LD_VAR 0 3
81135: PPUSH
81136: LD_VAR 0 4
81140: PPUSH
81141: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81145: LD_VAR 0 1
81149: PPUSH
81150: LD_VAR 0 2
81154: PPUSH
81155: LD_VAR 0 3
81159: PPUSH
81160: CALL_OW 331
// end ;
81164: LD_VAR 0 5
81168: RET
// export function Video ( mode ) ; begin
81169: LD_INT 0
81171: PPUSH
// ingame_video = mode ;
81172: LD_ADDR_OWVAR 52
81176: PUSH
81177: LD_VAR 0 1
81181: ST_TO_ADDR
// interface_hidden = mode ;
81182: LD_ADDR_OWVAR 54
81186: PUSH
81187: LD_VAR 0 1
81191: ST_TO_ADDR
// end ;
81192: LD_VAR 0 2
81196: RET
// export function Join ( array , element ) ; begin
81197: LD_INT 0
81199: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81200: LD_ADDR_VAR 0 3
81204: PUSH
81205: LD_VAR 0 1
81209: PPUSH
81210: LD_VAR 0 1
81214: PUSH
81215: LD_INT 1
81217: PLUS
81218: PPUSH
81219: LD_VAR 0 2
81223: PPUSH
81224: CALL_OW 1
81228: ST_TO_ADDR
// end ;
81229: LD_VAR 0 3
81233: RET
// export function JoinUnion ( array , element ) ; begin
81234: LD_INT 0
81236: PPUSH
// result := array union element ;
81237: LD_ADDR_VAR 0 3
81241: PUSH
81242: LD_VAR 0 1
81246: PUSH
81247: LD_VAR 0 2
81251: UNION
81252: ST_TO_ADDR
// end ;
81253: LD_VAR 0 3
81257: RET
// export function GetBehemoths ( side ) ; begin
81258: LD_INT 0
81260: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81261: LD_ADDR_VAR 0 2
81265: PUSH
81266: LD_INT 22
81268: PUSH
81269: LD_VAR 0 1
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: PUSH
81278: LD_INT 31
81280: PUSH
81281: LD_INT 25
81283: PUSH
81284: EMPTY
81285: LIST
81286: LIST
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: PPUSH
81292: CALL_OW 69
81296: ST_TO_ADDR
// end ;
81297: LD_VAR 0 2
81301: RET
// export function Shuffle ( array ) ; var i , index ; begin
81302: LD_INT 0
81304: PPUSH
81305: PPUSH
81306: PPUSH
// result := [ ] ;
81307: LD_ADDR_VAR 0 2
81311: PUSH
81312: EMPTY
81313: ST_TO_ADDR
// if not array then
81314: LD_VAR 0 1
81318: NOT
81319: IFFALSE 81323
// exit ;
81321: GO 81422
// Randomize ;
81323: CALL_OW 10
// for i = array downto 1 do
81327: LD_ADDR_VAR 0 3
81331: PUSH
81332: DOUBLE
81333: LD_VAR 0 1
81337: INC
81338: ST_TO_ADDR
81339: LD_INT 1
81341: PUSH
81342: FOR_DOWNTO
81343: IFFALSE 81420
// begin index := rand ( 1 , array ) ;
81345: LD_ADDR_VAR 0 4
81349: PUSH
81350: LD_INT 1
81352: PPUSH
81353: LD_VAR 0 1
81357: PPUSH
81358: CALL_OW 12
81362: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81363: LD_ADDR_VAR 0 2
81367: PUSH
81368: LD_VAR 0 2
81372: PPUSH
81373: LD_VAR 0 2
81377: PUSH
81378: LD_INT 1
81380: PLUS
81381: PPUSH
81382: LD_VAR 0 1
81386: PUSH
81387: LD_VAR 0 4
81391: ARRAY
81392: PPUSH
81393: CALL_OW 2
81397: ST_TO_ADDR
// array := Delete ( array , index ) ;
81398: LD_ADDR_VAR 0 1
81402: PUSH
81403: LD_VAR 0 1
81407: PPUSH
81408: LD_VAR 0 4
81412: PPUSH
81413: CALL_OW 3
81417: ST_TO_ADDR
// end ;
81418: GO 81342
81420: POP
81421: POP
// end ;
81422: LD_VAR 0 2
81426: RET
// export function GetBaseMaterials ( base ) ; begin
81427: LD_INT 0
81429: PPUSH
// result := [ 0 , 0 , 0 ] ;
81430: LD_ADDR_VAR 0 2
81434: PUSH
81435: LD_INT 0
81437: PUSH
81438: LD_INT 0
81440: PUSH
81441: LD_INT 0
81443: PUSH
81444: EMPTY
81445: LIST
81446: LIST
81447: LIST
81448: ST_TO_ADDR
// if not base then
81449: LD_VAR 0 1
81453: NOT
81454: IFFALSE 81458
// exit ;
81456: GO 81507
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81458: LD_ADDR_VAR 0 2
81462: PUSH
81463: LD_VAR 0 1
81467: PPUSH
81468: LD_INT 1
81470: PPUSH
81471: CALL_OW 275
81475: PUSH
81476: LD_VAR 0 1
81480: PPUSH
81481: LD_INT 2
81483: PPUSH
81484: CALL_OW 275
81488: PUSH
81489: LD_VAR 0 1
81493: PPUSH
81494: LD_INT 3
81496: PPUSH
81497: CALL_OW 275
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: LIST
81506: ST_TO_ADDR
// end ;
81507: LD_VAR 0 2
81511: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81512: LD_INT 0
81514: PPUSH
81515: PPUSH
// result := array ;
81516: LD_ADDR_VAR 0 3
81520: PUSH
81521: LD_VAR 0 1
81525: ST_TO_ADDR
// if size >= result then
81526: LD_VAR 0 2
81530: PUSH
81531: LD_VAR 0 3
81535: GREATEREQUAL
81536: IFFALSE 81540
// exit ;
81538: GO 81590
// if size then
81540: LD_VAR 0 2
81544: IFFALSE 81590
// for i := array downto size do
81546: LD_ADDR_VAR 0 4
81550: PUSH
81551: DOUBLE
81552: LD_VAR 0 1
81556: INC
81557: ST_TO_ADDR
81558: LD_VAR 0 2
81562: PUSH
81563: FOR_DOWNTO
81564: IFFALSE 81588
// result := Delete ( result , result ) ;
81566: LD_ADDR_VAR 0 3
81570: PUSH
81571: LD_VAR 0 3
81575: PPUSH
81576: LD_VAR 0 3
81580: PPUSH
81581: CALL_OW 3
81585: ST_TO_ADDR
81586: GO 81563
81588: POP
81589: POP
// end ;
81590: LD_VAR 0 3
81594: RET
// export function ComExit ( unit ) ; var tmp ; begin
81595: LD_INT 0
81597: PPUSH
81598: PPUSH
// if not IsInUnit ( unit ) then
81599: LD_VAR 0 1
81603: PPUSH
81604: CALL_OW 310
81608: NOT
81609: IFFALSE 81613
// exit ;
81611: GO 81673
// tmp := IsInUnit ( unit ) ;
81613: LD_ADDR_VAR 0 3
81617: PUSH
81618: LD_VAR 0 1
81622: PPUSH
81623: CALL_OW 310
81627: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81628: LD_VAR 0 3
81632: PPUSH
81633: CALL_OW 247
81637: PUSH
81638: LD_INT 2
81640: EQUAL
81641: IFFALSE 81654
// ComExitVehicle ( unit ) else
81643: LD_VAR 0 1
81647: PPUSH
81648: CALL_OW 121
81652: GO 81663
// ComExitBuilding ( unit ) ;
81654: LD_VAR 0 1
81658: PPUSH
81659: CALL_OW 122
// result := tmp ;
81663: LD_ADDR_VAR 0 2
81667: PUSH
81668: LD_VAR 0 3
81672: ST_TO_ADDR
// end ;
81673: LD_VAR 0 2
81677: RET
// export function ComExitAll ( units ) ; var i ; begin
81678: LD_INT 0
81680: PPUSH
81681: PPUSH
// if not units then
81682: LD_VAR 0 1
81686: NOT
81687: IFFALSE 81691
// exit ;
81689: GO 81717
// for i in units do
81691: LD_ADDR_VAR 0 3
81695: PUSH
81696: LD_VAR 0 1
81700: PUSH
81701: FOR_IN
81702: IFFALSE 81715
// ComExit ( i ) ;
81704: LD_VAR 0 3
81708: PPUSH
81709: CALL 81595 0 1
81713: GO 81701
81715: POP
81716: POP
// end ;
81717: LD_VAR 0 2
81721: RET
// export function ResetHc ; begin
81722: LD_INT 0
81724: PPUSH
// InitHc ;
81725: CALL_OW 19
// hc_importance := 0 ;
81729: LD_ADDR_OWVAR 32
81733: PUSH
81734: LD_INT 0
81736: ST_TO_ADDR
// end ;
81737: LD_VAR 0 1
81741: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81742: LD_INT 0
81744: PPUSH
81745: PPUSH
81746: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81747: LD_ADDR_VAR 0 6
81751: PUSH
81752: LD_VAR 0 1
81756: PUSH
81757: LD_VAR 0 3
81761: PLUS
81762: PUSH
81763: LD_INT 2
81765: DIV
81766: ST_TO_ADDR
// if _x < 0 then
81767: LD_VAR 0 6
81771: PUSH
81772: LD_INT 0
81774: LESS
81775: IFFALSE 81792
// _x := _x * - 1 ;
81777: LD_ADDR_VAR 0 6
81781: PUSH
81782: LD_VAR 0 6
81786: PUSH
81787: LD_INT 1
81789: NEG
81790: MUL
81791: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81792: LD_ADDR_VAR 0 7
81796: PUSH
81797: LD_VAR 0 2
81801: PUSH
81802: LD_VAR 0 4
81806: PLUS
81807: PUSH
81808: LD_INT 2
81810: DIV
81811: ST_TO_ADDR
// if _y < 0 then
81812: LD_VAR 0 7
81816: PUSH
81817: LD_INT 0
81819: LESS
81820: IFFALSE 81837
// _y := _y * - 1 ;
81822: LD_ADDR_VAR 0 7
81826: PUSH
81827: LD_VAR 0 7
81831: PUSH
81832: LD_INT 1
81834: NEG
81835: MUL
81836: ST_TO_ADDR
// result := [ _x , _y ] ;
81837: LD_ADDR_VAR 0 5
81841: PUSH
81842: LD_VAR 0 6
81846: PUSH
81847: LD_VAR 0 7
81851: PUSH
81852: EMPTY
81853: LIST
81854: LIST
81855: ST_TO_ADDR
// end ;
81856: LD_VAR 0 5
81860: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81861: LD_INT 0
81863: PPUSH
81864: PPUSH
81865: PPUSH
81866: PPUSH
// task := GetTaskList ( unit ) ;
81867: LD_ADDR_VAR 0 7
81871: PUSH
81872: LD_VAR 0 1
81876: PPUSH
81877: CALL_OW 437
81881: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81882: LD_VAR 0 7
81886: NOT
81887: PUSH
81888: LD_VAR 0 1
81892: PPUSH
81893: LD_VAR 0 2
81897: PPUSH
81898: CALL_OW 308
81902: NOT
81903: AND
81904: IFFALSE 81908
// exit ;
81906: GO 82026
// if IsInArea ( unit , area ) then
81908: LD_VAR 0 1
81912: PPUSH
81913: LD_VAR 0 2
81917: PPUSH
81918: CALL_OW 308
81922: IFFALSE 81940
// begin ComMoveToArea ( unit , goAway ) ;
81924: LD_VAR 0 1
81928: PPUSH
81929: LD_VAR 0 3
81933: PPUSH
81934: CALL_OW 113
// exit ;
81938: GO 82026
// end ; if task [ 1 ] [ 1 ] <> M then
81940: LD_VAR 0 7
81944: PUSH
81945: LD_INT 1
81947: ARRAY
81948: PUSH
81949: LD_INT 1
81951: ARRAY
81952: PUSH
81953: LD_STRING M
81955: NONEQUAL
81956: IFFALSE 81960
// exit ;
81958: GO 82026
// x := task [ 1 ] [ 2 ] ;
81960: LD_ADDR_VAR 0 5
81964: PUSH
81965: LD_VAR 0 7
81969: PUSH
81970: LD_INT 1
81972: ARRAY
81973: PUSH
81974: LD_INT 2
81976: ARRAY
81977: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81978: LD_ADDR_VAR 0 6
81982: PUSH
81983: LD_VAR 0 7
81987: PUSH
81988: LD_INT 1
81990: ARRAY
81991: PUSH
81992: LD_INT 3
81994: ARRAY
81995: ST_TO_ADDR
// if InArea ( x , y , area ) then
81996: LD_VAR 0 5
82000: PPUSH
82001: LD_VAR 0 6
82005: PPUSH
82006: LD_VAR 0 2
82010: PPUSH
82011: CALL_OW 309
82015: IFFALSE 82026
// ComStop ( unit ) ;
82017: LD_VAR 0 1
82021: PPUSH
82022: CALL_OW 141
// end ;
82026: LD_VAR 0 4
82030: RET
// export function Abs ( value ) ; begin
82031: LD_INT 0
82033: PPUSH
// result := value ;
82034: LD_ADDR_VAR 0 2
82038: PUSH
82039: LD_VAR 0 1
82043: ST_TO_ADDR
// if value < 0 then
82044: LD_VAR 0 1
82048: PUSH
82049: LD_INT 0
82051: LESS
82052: IFFALSE 82069
// result := value * - 1 ;
82054: LD_ADDR_VAR 0 2
82058: PUSH
82059: LD_VAR 0 1
82063: PUSH
82064: LD_INT 1
82066: NEG
82067: MUL
82068: ST_TO_ADDR
// end ;
82069: LD_VAR 0 2
82073: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82074: LD_INT 0
82076: PPUSH
82077: PPUSH
82078: PPUSH
82079: PPUSH
82080: PPUSH
82081: PPUSH
82082: PPUSH
82083: PPUSH
// if not unit or not building then
82084: LD_VAR 0 1
82088: NOT
82089: PUSH
82090: LD_VAR 0 2
82094: NOT
82095: OR
82096: IFFALSE 82100
// exit ;
82098: GO 82326
// x := GetX ( building ) ;
82100: LD_ADDR_VAR 0 4
82104: PUSH
82105: LD_VAR 0 2
82109: PPUSH
82110: CALL_OW 250
82114: ST_TO_ADDR
// y := GetY ( building ) ;
82115: LD_ADDR_VAR 0 6
82119: PUSH
82120: LD_VAR 0 2
82124: PPUSH
82125: CALL_OW 251
82129: ST_TO_ADDR
// d := GetDir ( building ) ;
82130: LD_ADDR_VAR 0 8
82134: PUSH
82135: LD_VAR 0 2
82139: PPUSH
82140: CALL_OW 254
82144: ST_TO_ADDR
// r := 4 ;
82145: LD_ADDR_VAR 0 9
82149: PUSH
82150: LD_INT 4
82152: ST_TO_ADDR
// for i := 1 to 5 do
82153: LD_ADDR_VAR 0 10
82157: PUSH
82158: DOUBLE
82159: LD_INT 1
82161: DEC
82162: ST_TO_ADDR
82163: LD_INT 5
82165: PUSH
82166: FOR_TO
82167: IFFALSE 82324
// begin _x := ShiftX ( x , d , r + i ) ;
82169: LD_ADDR_VAR 0 5
82173: PUSH
82174: LD_VAR 0 4
82178: PPUSH
82179: LD_VAR 0 8
82183: PPUSH
82184: LD_VAR 0 9
82188: PUSH
82189: LD_VAR 0 10
82193: PLUS
82194: PPUSH
82195: CALL_OW 272
82199: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82200: LD_ADDR_VAR 0 7
82204: PUSH
82205: LD_VAR 0 6
82209: PPUSH
82210: LD_VAR 0 8
82214: PPUSH
82215: LD_VAR 0 9
82219: PUSH
82220: LD_VAR 0 10
82224: PLUS
82225: PPUSH
82226: CALL_OW 273
82230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82231: LD_VAR 0 5
82235: PPUSH
82236: LD_VAR 0 7
82240: PPUSH
82241: CALL_OW 488
82245: PUSH
82246: LD_VAR 0 5
82250: PPUSH
82251: LD_VAR 0 7
82255: PPUSH
82256: CALL_OW 428
82260: PPUSH
82261: CALL_OW 247
82265: PUSH
82266: LD_INT 3
82268: PUSH
82269: LD_INT 2
82271: PUSH
82272: EMPTY
82273: LIST
82274: LIST
82275: IN
82276: NOT
82277: AND
82278: IFFALSE 82322
// begin ComMoveXY ( unit , _x , _y ) ;
82280: LD_VAR 0 1
82284: PPUSH
82285: LD_VAR 0 5
82289: PPUSH
82290: LD_VAR 0 7
82294: PPUSH
82295: CALL_OW 111
// result := [ _x , _y ] ;
82299: LD_ADDR_VAR 0 3
82303: PUSH
82304: LD_VAR 0 5
82308: PUSH
82309: LD_VAR 0 7
82313: PUSH
82314: EMPTY
82315: LIST
82316: LIST
82317: ST_TO_ADDR
// exit ;
82318: POP
82319: POP
82320: GO 82326
// end ; end ;
82322: GO 82166
82324: POP
82325: POP
// end ;
82326: LD_VAR 0 3
82330: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82331: LD_INT 0
82333: PPUSH
82334: PPUSH
82335: PPUSH
// result := 0 ;
82336: LD_ADDR_VAR 0 3
82340: PUSH
82341: LD_INT 0
82343: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82344: LD_VAR 0 1
82348: PUSH
82349: LD_INT 0
82351: LESS
82352: PUSH
82353: LD_VAR 0 1
82357: PUSH
82358: LD_INT 8
82360: GREATER
82361: OR
82362: PUSH
82363: LD_VAR 0 2
82367: PUSH
82368: LD_INT 0
82370: LESS
82371: OR
82372: PUSH
82373: LD_VAR 0 2
82377: PUSH
82378: LD_INT 8
82380: GREATER
82381: OR
82382: IFFALSE 82386
// exit ;
82384: GO 82461
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82386: LD_ADDR_VAR 0 4
82390: PUSH
82391: LD_INT 22
82393: PUSH
82394: LD_VAR 0 2
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: PPUSH
82403: CALL_OW 69
82407: PUSH
82408: FOR_IN
82409: IFFALSE 82459
// begin un := UnitShoot ( i ) ;
82411: LD_ADDR_VAR 0 5
82415: PUSH
82416: LD_VAR 0 4
82420: PPUSH
82421: CALL_OW 504
82425: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82426: LD_VAR 0 5
82430: PPUSH
82431: CALL_OW 255
82435: PUSH
82436: LD_VAR 0 1
82440: EQUAL
82441: IFFALSE 82457
// begin result := un ;
82443: LD_ADDR_VAR 0 3
82447: PUSH
82448: LD_VAR 0 5
82452: ST_TO_ADDR
// exit ;
82453: POP
82454: POP
82455: GO 82461
// end ; end ;
82457: GO 82408
82459: POP
82460: POP
// end ;
82461: LD_VAR 0 3
82465: RET
// export function GetCargoBay ( units ) ; begin
82466: LD_INT 0
82468: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82469: LD_ADDR_VAR 0 2
82473: PUSH
82474: LD_VAR 0 1
82478: PPUSH
82479: LD_INT 2
82481: PUSH
82482: LD_INT 34
82484: PUSH
82485: LD_INT 12
82487: PUSH
82488: EMPTY
82489: LIST
82490: LIST
82491: PUSH
82492: LD_INT 34
82494: PUSH
82495: LD_INT 51
82497: PUSH
82498: EMPTY
82499: LIST
82500: LIST
82501: PUSH
82502: LD_INT 34
82504: PUSH
82505: LD_INT 32
82507: PUSH
82508: EMPTY
82509: LIST
82510: LIST
82511: PUSH
82512: LD_INT 34
82514: PUSH
82515: LD_INT 89
82517: PUSH
82518: EMPTY
82519: LIST
82520: LIST
82521: PUSH
82522: EMPTY
82523: LIST
82524: LIST
82525: LIST
82526: LIST
82527: LIST
82528: PPUSH
82529: CALL_OW 72
82533: ST_TO_ADDR
// end ;
82534: LD_VAR 0 2
82538: RET
// export function Negate ( value ) ; begin
82539: LD_INT 0
82541: PPUSH
// result := not value ;
82542: LD_ADDR_VAR 0 2
82546: PUSH
82547: LD_VAR 0 1
82551: NOT
82552: ST_TO_ADDR
// end ;
82553: LD_VAR 0 2
82557: RET
// export function Inc ( value ) ; begin
82558: LD_INT 0
82560: PPUSH
// result := value + 1 ;
82561: LD_ADDR_VAR 0 2
82565: PUSH
82566: LD_VAR 0 1
82570: PUSH
82571: LD_INT 1
82573: PLUS
82574: ST_TO_ADDR
// end ;
82575: LD_VAR 0 2
82579: RET
// export function Dec ( value ) ; begin
82580: LD_INT 0
82582: PPUSH
// result := value - 1 ;
82583: LD_ADDR_VAR 0 2
82587: PUSH
82588: LD_VAR 0 1
82592: PUSH
82593: LD_INT 1
82595: MINUS
82596: ST_TO_ADDR
// end ;
82597: LD_VAR 0 2
82601: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82602: LD_INT 0
82604: PPUSH
82605: PPUSH
82606: PPUSH
82607: PPUSH
82608: PPUSH
82609: PPUSH
82610: PPUSH
82611: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82612: LD_VAR 0 1
82616: PPUSH
82617: LD_VAR 0 2
82621: PPUSH
82622: CALL_OW 488
82626: NOT
82627: PUSH
82628: LD_VAR 0 3
82632: PPUSH
82633: LD_VAR 0 4
82637: PPUSH
82638: CALL_OW 488
82642: NOT
82643: OR
82644: IFFALSE 82657
// begin result := - 1 ;
82646: LD_ADDR_VAR 0 5
82650: PUSH
82651: LD_INT 1
82653: NEG
82654: ST_TO_ADDR
// exit ;
82655: GO 82892
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82657: LD_ADDR_VAR 0 12
82661: PUSH
82662: LD_VAR 0 1
82666: PPUSH
82667: LD_VAR 0 2
82671: PPUSH
82672: LD_VAR 0 3
82676: PPUSH
82677: LD_VAR 0 4
82681: PPUSH
82682: CALL 81742 0 4
82686: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82687: LD_ADDR_VAR 0 11
82691: PUSH
82692: LD_VAR 0 1
82696: PPUSH
82697: LD_VAR 0 2
82701: PPUSH
82702: LD_VAR 0 12
82706: PUSH
82707: LD_INT 1
82709: ARRAY
82710: PPUSH
82711: LD_VAR 0 12
82715: PUSH
82716: LD_INT 2
82718: ARRAY
82719: PPUSH
82720: CALL_OW 298
82724: ST_TO_ADDR
// distance := 9999 ;
82725: LD_ADDR_VAR 0 10
82729: PUSH
82730: LD_INT 9999
82732: ST_TO_ADDR
// for i := 0 to 5 do
82733: LD_ADDR_VAR 0 6
82737: PUSH
82738: DOUBLE
82739: LD_INT 0
82741: DEC
82742: ST_TO_ADDR
82743: LD_INT 5
82745: PUSH
82746: FOR_TO
82747: IFFALSE 82890
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82749: LD_ADDR_VAR 0 7
82753: PUSH
82754: LD_VAR 0 1
82758: PPUSH
82759: LD_VAR 0 6
82763: PPUSH
82764: LD_VAR 0 11
82768: PPUSH
82769: CALL_OW 272
82773: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82774: LD_ADDR_VAR 0 8
82778: PUSH
82779: LD_VAR 0 2
82783: PPUSH
82784: LD_VAR 0 6
82788: PPUSH
82789: LD_VAR 0 11
82793: PPUSH
82794: CALL_OW 273
82798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82799: LD_VAR 0 7
82803: PPUSH
82804: LD_VAR 0 8
82808: PPUSH
82809: CALL_OW 488
82813: NOT
82814: IFFALSE 82818
// continue ;
82816: GO 82746
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82818: LD_ADDR_VAR 0 9
82822: PUSH
82823: LD_VAR 0 12
82827: PUSH
82828: LD_INT 1
82830: ARRAY
82831: PPUSH
82832: LD_VAR 0 12
82836: PUSH
82837: LD_INT 2
82839: ARRAY
82840: PPUSH
82841: LD_VAR 0 7
82845: PPUSH
82846: LD_VAR 0 8
82850: PPUSH
82851: CALL_OW 298
82855: ST_TO_ADDR
// if tmp < distance then
82856: LD_VAR 0 9
82860: PUSH
82861: LD_VAR 0 10
82865: LESS
82866: IFFALSE 82888
// begin result := i ;
82868: LD_ADDR_VAR 0 5
82872: PUSH
82873: LD_VAR 0 6
82877: ST_TO_ADDR
// distance := tmp ;
82878: LD_ADDR_VAR 0 10
82882: PUSH
82883: LD_VAR 0 9
82887: ST_TO_ADDR
// end ; end ;
82888: GO 82746
82890: POP
82891: POP
// end ;
82892: LD_VAR 0 5
82896: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82897: LD_INT 0
82899: PPUSH
82900: PPUSH
// if not driver or not IsInUnit ( driver ) then
82901: LD_VAR 0 1
82905: NOT
82906: PUSH
82907: LD_VAR 0 1
82911: PPUSH
82912: CALL_OW 310
82916: NOT
82917: OR
82918: IFFALSE 82922
// exit ;
82920: GO 83012
// vehicle := IsInUnit ( driver ) ;
82922: LD_ADDR_VAR 0 3
82926: PUSH
82927: LD_VAR 0 1
82931: PPUSH
82932: CALL_OW 310
82936: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82937: LD_VAR 0 1
82941: PPUSH
82942: LD_STRING \
82944: PUSH
82945: LD_INT 0
82947: PUSH
82948: LD_INT 0
82950: PUSH
82951: LD_INT 0
82953: PUSH
82954: LD_INT 0
82956: PUSH
82957: LD_INT 0
82959: PUSH
82960: LD_INT 0
82962: PUSH
82963: EMPTY
82964: LIST
82965: LIST
82966: LIST
82967: LIST
82968: LIST
82969: LIST
82970: LIST
82971: PUSH
82972: LD_STRING E
82974: PUSH
82975: LD_INT 0
82977: PUSH
82978: LD_INT 0
82980: PUSH
82981: LD_VAR 0 3
82985: PUSH
82986: LD_INT 0
82988: PUSH
82989: LD_INT 0
82991: PUSH
82992: LD_INT 0
82994: PUSH
82995: EMPTY
82996: LIST
82997: LIST
82998: LIST
82999: LIST
83000: LIST
83001: LIST
83002: LIST
83003: PUSH
83004: EMPTY
83005: LIST
83006: LIST
83007: PPUSH
83008: CALL_OW 446
// end ;
83012: LD_VAR 0 2
83016: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83017: LD_INT 0
83019: PPUSH
83020: PPUSH
// if not driver or not IsInUnit ( driver ) then
83021: LD_VAR 0 1
83025: NOT
83026: PUSH
83027: LD_VAR 0 1
83031: PPUSH
83032: CALL_OW 310
83036: NOT
83037: OR
83038: IFFALSE 83042
// exit ;
83040: GO 83132
// vehicle := IsInUnit ( driver ) ;
83042: LD_ADDR_VAR 0 3
83046: PUSH
83047: LD_VAR 0 1
83051: PPUSH
83052: CALL_OW 310
83056: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83057: LD_VAR 0 1
83061: PPUSH
83062: LD_STRING \
83064: PUSH
83065: LD_INT 0
83067: PUSH
83068: LD_INT 0
83070: PUSH
83071: LD_INT 0
83073: PUSH
83074: LD_INT 0
83076: PUSH
83077: LD_INT 0
83079: PUSH
83080: LD_INT 0
83082: PUSH
83083: EMPTY
83084: LIST
83085: LIST
83086: LIST
83087: LIST
83088: LIST
83089: LIST
83090: LIST
83091: PUSH
83092: LD_STRING E
83094: PUSH
83095: LD_INT 0
83097: PUSH
83098: LD_INT 0
83100: PUSH
83101: LD_VAR 0 3
83105: PUSH
83106: LD_INT 0
83108: PUSH
83109: LD_INT 0
83111: PUSH
83112: LD_INT 0
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: LIST
83119: LIST
83120: LIST
83121: LIST
83122: LIST
83123: PUSH
83124: EMPTY
83125: LIST
83126: LIST
83127: PPUSH
83128: CALL_OW 447
// end ;
83132: LD_VAR 0 2
83136: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83137: LD_INT 0
83139: PPUSH
83140: PPUSH
83141: PPUSH
// tmp := [ ] ;
83142: LD_ADDR_VAR 0 5
83146: PUSH
83147: EMPTY
83148: ST_TO_ADDR
// for i in units do
83149: LD_ADDR_VAR 0 4
83153: PUSH
83154: LD_VAR 0 1
83158: PUSH
83159: FOR_IN
83160: IFFALSE 83198
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83162: LD_ADDR_VAR 0 5
83166: PUSH
83167: LD_VAR 0 5
83171: PPUSH
83172: LD_VAR 0 5
83176: PUSH
83177: LD_INT 1
83179: PLUS
83180: PPUSH
83181: LD_VAR 0 4
83185: PPUSH
83186: CALL_OW 256
83190: PPUSH
83191: CALL_OW 2
83195: ST_TO_ADDR
83196: GO 83159
83198: POP
83199: POP
// if not tmp then
83200: LD_VAR 0 5
83204: NOT
83205: IFFALSE 83209
// exit ;
83207: GO 83257
// if asc then
83209: LD_VAR 0 2
83213: IFFALSE 83237
// result := SortListByListAsc ( units , tmp ) else
83215: LD_ADDR_VAR 0 3
83219: PUSH
83220: LD_VAR 0 1
83224: PPUSH
83225: LD_VAR 0 5
83229: PPUSH
83230: CALL_OW 76
83234: ST_TO_ADDR
83235: GO 83257
// result := SortListByListDesc ( units , tmp ) ;
83237: LD_ADDR_VAR 0 3
83241: PUSH
83242: LD_VAR 0 1
83246: PPUSH
83247: LD_VAR 0 5
83251: PPUSH
83252: CALL_OW 77
83256: ST_TO_ADDR
// end ;
83257: LD_VAR 0 3
83261: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83262: LD_INT 0
83264: PPUSH
83265: PPUSH
// task := GetTaskList ( mech ) ;
83266: LD_ADDR_VAR 0 4
83270: PUSH
83271: LD_VAR 0 1
83275: PPUSH
83276: CALL_OW 437
83280: ST_TO_ADDR
// if not task then
83281: LD_VAR 0 4
83285: NOT
83286: IFFALSE 83290
// exit ;
83288: GO 83332
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83290: LD_ADDR_VAR 0 3
83294: PUSH
83295: LD_VAR 0 4
83299: PUSH
83300: LD_INT 1
83302: ARRAY
83303: PUSH
83304: LD_INT 1
83306: ARRAY
83307: PUSH
83308: LD_STRING r
83310: EQUAL
83311: PUSH
83312: LD_VAR 0 4
83316: PUSH
83317: LD_INT 1
83319: ARRAY
83320: PUSH
83321: LD_INT 4
83323: ARRAY
83324: PUSH
83325: LD_VAR 0 2
83329: EQUAL
83330: AND
83331: ST_TO_ADDR
// end ;
83332: LD_VAR 0 3
83336: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83337: LD_INT 0
83339: PPUSH
// SetDir ( unit , d ) ;
83340: LD_VAR 0 1
83344: PPUSH
83345: LD_VAR 0 4
83349: PPUSH
83350: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83354: LD_VAR 0 1
83358: PPUSH
83359: LD_VAR 0 2
83363: PPUSH
83364: LD_VAR 0 3
83368: PPUSH
83369: LD_VAR 0 5
83373: PPUSH
83374: CALL_OW 48
// end ;
83378: LD_VAR 0 6
83382: RET
// export function ToNaturalNumber ( number ) ; begin
83383: LD_INT 0
83385: PPUSH
// result := number div 1 ;
83386: LD_ADDR_VAR 0 2
83390: PUSH
83391: LD_VAR 0 1
83395: PUSH
83396: LD_INT 1
83398: DIV
83399: ST_TO_ADDR
// if number < 0 then
83400: LD_VAR 0 1
83404: PUSH
83405: LD_INT 0
83407: LESS
83408: IFFALSE 83418
// result := 0 ;
83410: LD_ADDR_VAR 0 2
83414: PUSH
83415: LD_INT 0
83417: ST_TO_ADDR
// end ;
83418: LD_VAR 0 2
83422: RET
// export function SortByClass ( units , class ) ; var un ; begin
83423: LD_INT 0
83425: PPUSH
83426: PPUSH
// if not units or not class then
83427: LD_VAR 0 1
83431: NOT
83432: PUSH
83433: LD_VAR 0 2
83437: NOT
83438: OR
83439: IFFALSE 83443
// exit ;
83441: GO 83538
// result := [ ] ;
83443: LD_ADDR_VAR 0 3
83447: PUSH
83448: EMPTY
83449: ST_TO_ADDR
// for un in units do
83450: LD_ADDR_VAR 0 4
83454: PUSH
83455: LD_VAR 0 1
83459: PUSH
83460: FOR_IN
83461: IFFALSE 83536
// if GetClass ( un ) = class then
83463: LD_VAR 0 4
83467: PPUSH
83468: CALL_OW 257
83472: PUSH
83473: LD_VAR 0 2
83477: EQUAL
83478: IFFALSE 83505
// result := Insert ( result , 1 , un ) else
83480: LD_ADDR_VAR 0 3
83484: PUSH
83485: LD_VAR 0 3
83489: PPUSH
83490: LD_INT 1
83492: PPUSH
83493: LD_VAR 0 4
83497: PPUSH
83498: CALL_OW 2
83502: ST_TO_ADDR
83503: GO 83534
// result := Replace ( result , result + 1 , un ) ;
83505: LD_ADDR_VAR 0 3
83509: PUSH
83510: LD_VAR 0 3
83514: PPUSH
83515: LD_VAR 0 3
83519: PUSH
83520: LD_INT 1
83522: PLUS
83523: PPUSH
83524: LD_VAR 0 4
83528: PPUSH
83529: CALL_OW 1
83533: ST_TO_ADDR
83534: GO 83460
83536: POP
83537: POP
// end ;
83538: LD_VAR 0 3
83542: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83543: LD_INT 0
83545: PPUSH
83546: PPUSH
83547: PPUSH
83548: PPUSH
83549: PPUSH
83550: PPUSH
83551: PPUSH
// result := [ ] ;
83552: LD_ADDR_VAR 0 4
83556: PUSH
83557: EMPTY
83558: ST_TO_ADDR
// if x - r < 0 then
83559: LD_VAR 0 1
83563: PUSH
83564: LD_VAR 0 3
83568: MINUS
83569: PUSH
83570: LD_INT 0
83572: LESS
83573: IFFALSE 83585
// min_x := 0 else
83575: LD_ADDR_VAR 0 8
83579: PUSH
83580: LD_INT 0
83582: ST_TO_ADDR
83583: GO 83601
// min_x := x - r ;
83585: LD_ADDR_VAR 0 8
83589: PUSH
83590: LD_VAR 0 1
83594: PUSH
83595: LD_VAR 0 3
83599: MINUS
83600: ST_TO_ADDR
// if y - r < 0 then
83601: LD_VAR 0 2
83605: PUSH
83606: LD_VAR 0 3
83610: MINUS
83611: PUSH
83612: LD_INT 0
83614: LESS
83615: IFFALSE 83627
// min_y := 0 else
83617: LD_ADDR_VAR 0 7
83621: PUSH
83622: LD_INT 0
83624: ST_TO_ADDR
83625: GO 83643
// min_y := y - r ;
83627: LD_ADDR_VAR 0 7
83631: PUSH
83632: LD_VAR 0 2
83636: PUSH
83637: LD_VAR 0 3
83641: MINUS
83642: ST_TO_ADDR
// max_x := x + r ;
83643: LD_ADDR_VAR 0 9
83647: PUSH
83648: LD_VAR 0 1
83652: PUSH
83653: LD_VAR 0 3
83657: PLUS
83658: ST_TO_ADDR
// max_y := y + r ;
83659: LD_ADDR_VAR 0 10
83663: PUSH
83664: LD_VAR 0 2
83668: PUSH
83669: LD_VAR 0 3
83673: PLUS
83674: ST_TO_ADDR
// for _x = min_x to max_x do
83675: LD_ADDR_VAR 0 5
83679: PUSH
83680: DOUBLE
83681: LD_VAR 0 8
83685: DEC
83686: ST_TO_ADDR
83687: LD_VAR 0 9
83691: PUSH
83692: FOR_TO
83693: IFFALSE 83794
// for _y = min_y to max_y do
83695: LD_ADDR_VAR 0 6
83699: PUSH
83700: DOUBLE
83701: LD_VAR 0 7
83705: DEC
83706: ST_TO_ADDR
83707: LD_VAR 0 10
83711: PUSH
83712: FOR_TO
83713: IFFALSE 83790
// begin if not ValidHex ( _x , _y ) then
83715: LD_VAR 0 5
83719: PPUSH
83720: LD_VAR 0 6
83724: PPUSH
83725: CALL_OW 488
83729: NOT
83730: IFFALSE 83734
// continue ;
83732: GO 83712
// if GetResourceTypeXY ( _x , _y ) then
83734: LD_VAR 0 5
83738: PPUSH
83739: LD_VAR 0 6
83743: PPUSH
83744: CALL_OW 283
83748: IFFALSE 83788
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83750: LD_ADDR_VAR 0 4
83754: PUSH
83755: LD_VAR 0 4
83759: PPUSH
83760: LD_VAR 0 4
83764: PUSH
83765: LD_INT 1
83767: PLUS
83768: PPUSH
83769: LD_VAR 0 5
83773: PUSH
83774: LD_VAR 0 6
83778: PUSH
83779: EMPTY
83780: LIST
83781: LIST
83782: PPUSH
83783: CALL_OW 1
83787: ST_TO_ADDR
// end ;
83788: GO 83712
83790: POP
83791: POP
83792: GO 83692
83794: POP
83795: POP
// end ;
83796: LD_VAR 0 4
83800: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83801: LD_INT 0
83803: PPUSH
83804: PPUSH
83805: PPUSH
83806: PPUSH
83807: PPUSH
83808: PPUSH
83809: PPUSH
83810: PPUSH
// if not units then
83811: LD_VAR 0 1
83815: NOT
83816: IFFALSE 83820
// exit ;
83818: GO 84344
// result := UnitFilter ( units , [ f_ok ] ) ;
83820: LD_ADDR_VAR 0 3
83824: PUSH
83825: LD_VAR 0 1
83829: PPUSH
83830: LD_INT 50
83832: PUSH
83833: EMPTY
83834: LIST
83835: PPUSH
83836: CALL_OW 72
83840: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83841: LD_ADDR_VAR 0 8
83845: PUSH
83846: LD_VAR 0 1
83850: PUSH
83851: LD_INT 1
83853: ARRAY
83854: PPUSH
83855: CALL_OW 255
83859: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83860: LD_ADDR_VAR 0 10
83864: PUSH
83865: LD_INT 29
83867: PUSH
83868: LD_INT 91
83870: PUSH
83871: LD_INT 49
83873: PUSH
83874: EMPTY
83875: LIST
83876: LIST
83877: LIST
83878: ST_TO_ADDR
// if not result then
83879: LD_VAR 0 3
83883: NOT
83884: IFFALSE 83888
// exit ;
83886: GO 84344
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83888: LD_ADDR_VAR 0 5
83892: PUSH
83893: LD_INT 81
83895: PUSH
83896: LD_VAR 0 8
83900: PUSH
83901: EMPTY
83902: LIST
83903: LIST
83904: PPUSH
83905: CALL_OW 69
83909: ST_TO_ADDR
// for i in result do
83910: LD_ADDR_VAR 0 4
83914: PUSH
83915: LD_VAR 0 3
83919: PUSH
83920: FOR_IN
83921: IFFALSE 84342
// begin tag := GetTag ( i ) + 1 ;
83923: LD_ADDR_VAR 0 9
83927: PUSH
83928: LD_VAR 0 4
83932: PPUSH
83933: CALL_OW 110
83937: PUSH
83938: LD_INT 1
83940: PLUS
83941: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83942: LD_ADDR_VAR 0 7
83946: PUSH
83947: LD_VAR 0 4
83951: PPUSH
83952: CALL_OW 250
83956: PPUSH
83957: LD_VAR 0 4
83961: PPUSH
83962: CALL_OW 251
83966: PPUSH
83967: LD_INT 6
83969: PPUSH
83970: CALL 83543 0 3
83974: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83975: LD_VAR 0 4
83979: PPUSH
83980: CALL_OW 247
83984: PUSH
83985: LD_INT 2
83987: EQUAL
83988: PUSH
83989: LD_VAR 0 7
83993: AND
83994: PUSH
83995: LD_VAR 0 4
83999: PPUSH
84000: CALL_OW 264
84004: PUSH
84005: LD_VAR 0 10
84009: IN
84010: NOT
84011: AND
84012: IFFALSE 84051
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84014: LD_VAR 0 4
84018: PPUSH
84019: LD_VAR 0 7
84023: PUSH
84024: LD_INT 1
84026: ARRAY
84027: PUSH
84028: LD_INT 1
84030: ARRAY
84031: PPUSH
84032: LD_VAR 0 7
84036: PUSH
84037: LD_INT 1
84039: ARRAY
84040: PUSH
84041: LD_INT 2
84043: ARRAY
84044: PPUSH
84045: CALL_OW 116
84049: GO 84340
// if path > tag then
84051: LD_VAR 0 2
84055: PUSH
84056: LD_VAR 0 9
84060: GREATER
84061: IFFALSE 84269
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84063: LD_ADDR_VAR 0 6
84067: PUSH
84068: LD_VAR 0 5
84072: PPUSH
84073: LD_INT 91
84075: PUSH
84076: LD_VAR 0 4
84080: PUSH
84081: LD_INT 8
84083: PUSH
84084: EMPTY
84085: LIST
84086: LIST
84087: LIST
84088: PPUSH
84089: CALL_OW 72
84093: ST_TO_ADDR
// if nearEnemy then
84094: LD_VAR 0 6
84098: IFFALSE 84167
// begin if GetWeapon ( i ) = ru_time_lapser then
84100: LD_VAR 0 4
84104: PPUSH
84105: CALL_OW 264
84109: PUSH
84110: LD_INT 49
84112: EQUAL
84113: IFFALSE 84141
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84115: LD_VAR 0 4
84119: PPUSH
84120: LD_VAR 0 6
84124: PPUSH
84125: LD_VAR 0 4
84129: PPUSH
84130: CALL_OW 74
84134: PPUSH
84135: CALL_OW 112
84139: GO 84165
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84141: LD_VAR 0 4
84145: PPUSH
84146: LD_VAR 0 6
84150: PPUSH
84151: LD_VAR 0 4
84155: PPUSH
84156: CALL_OW 74
84160: PPUSH
84161: CALL_OW 115
// end else
84165: GO 84267
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84167: LD_VAR 0 4
84171: PPUSH
84172: LD_VAR 0 2
84176: PUSH
84177: LD_VAR 0 9
84181: ARRAY
84182: PUSH
84183: LD_INT 1
84185: ARRAY
84186: PPUSH
84187: LD_VAR 0 2
84191: PUSH
84192: LD_VAR 0 9
84196: ARRAY
84197: PUSH
84198: LD_INT 2
84200: ARRAY
84201: PPUSH
84202: CALL_OW 297
84206: PUSH
84207: LD_INT 6
84209: GREATER
84210: IFFALSE 84253
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84212: LD_VAR 0 4
84216: PPUSH
84217: LD_VAR 0 2
84221: PUSH
84222: LD_VAR 0 9
84226: ARRAY
84227: PUSH
84228: LD_INT 1
84230: ARRAY
84231: PPUSH
84232: LD_VAR 0 2
84236: PUSH
84237: LD_VAR 0 9
84241: ARRAY
84242: PUSH
84243: LD_INT 2
84245: ARRAY
84246: PPUSH
84247: CALL_OW 114
84251: GO 84267
// SetTag ( i , tag ) ;
84253: LD_VAR 0 4
84257: PPUSH
84258: LD_VAR 0 9
84262: PPUSH
84263: CALL_OW 109
// end else
84267: GO 84340
// if enemy then
84269: LD_VAR 0 5
84273: IFFALSE 84340
// begin if GetWeapon ( i ) = ru_time_lapser then
84275: LD_VAR 0 4
84279: PPUSH
84280: CALL_OW 264
84284: PUSH
84285: LD_INT 49
84287: EQUAL
84288: IFFALSE 84316
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84290: LD_VAR 0 4
84294: PPUSH
84295: LD_VAR 0 5
84299: PPUSH
84300: LD_VAR 0 4
84304: PPUSH
84305: CALL_OW 74
84309: PPUSH
84310: CALL_OW 112
84314: GO 84340
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84316: LD_VAR 0 4
84320: PPUSH
84321: LD_VAR 0 5
84325: PPUSH
84326: LD_VAR 0 4
84330: PPUSH
84331: CALL_OW 74
84335: PPUSH
84336: CALL_OW 115
// end ; end ;
84340: GO 83920
84342: POP
84343: POP
// end ;
84344: LD_VAR 0 3
84348: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84349: LD_INT 0
84351: PPUSH
84352: PPUSH
84353: PPUSH
// if not unit or IsInUnit ( unit ) then
84354: LD_VAR 0 1
84358: NOT
84359: PUSH
84360: LD_VAR 0 1
84364: PPUSH
84365: CALL_OW 310
84369: OR
84370: IFFALSE 84374
// exit ;
84372: GO 84465
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84374: LD_ADDR_VAR 0 4
84378: PUSH
84379: LD_VAR 0 1
84383: PPUSH
84384: CALL_OW 250
84388: PPUSH
84389: LD_VAR 0 2
84393: PPUSH
84394: LD_INT 1
84396: PPUSH
84397: CALL_OW 272
84401: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84402: LD_ADDR_VAR 0 5
84406: PUSH
84407: LD_VAR 0 1
84411: PPUSH
84412: CALL_OW 251
84416: PPUSH
84417: LD_VAR 0 2
84421: PPUSH
84422: LD_INT 1
84424: PPUSH
84425: CALL_OW 273
84429: ST_TO_ADDR
// if ValidHex ( x , y ) then
84430: LD_VAR 0 4
84434: PPUSH
84435: LD_VAR 0 5
84439: PPUSH
84440: CALL_OW 488
84444: IFFALSE 84465
// ComTurnXY ( unit , x , y ) ;
84446: LD_VAR 0 1
84450: PPUSH
84451: LD_VAR 0 4
84455: PPUSH
84456: LD_VAR 0 5
84460: PPUSH
84461: CALL_OW 118
// end ;
84465: LD_VAR 0 3
84469: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84470: LD_INT 0
84472: PPUSH
84473: PPUSH
// result := false ;
84474: LD_ADDR_VAR 0 3
84478: PUSH
84479: LD_INT 0
84481: ST_TO_ADDR
// if not units then
84482: LD_VAR 0 2
84486: NOT
84487: IFFALSE 84491
// exit ;
84489: GO 84536
// for i in units do
84491: LD_ADDR_VAR 0 4
84495: PUSH
84496: LD_VAR 0 2
84500: PUSH
84501: FOR_IN
84502: IFFALSE 84534
// if See ( side , i ) then
84504: LD_VAR 0 1
84508: PPUSH
84509: LD_VAR 0 4
84513: PPUSH
84514: CALL_OW 292
84518: IFFALSE 84532
// begin result := true ;
84520: LD_ADDR_VAR 0 3
84524: PUSH
84525: LD_INT 1
84527: ST_TO_ADDR
// exit ;
84528: POP
84529: POP
84530: GO 84536
// end ;
84532: GO 84501
84534: POP
84535: POP
// end ;
84536: LD_VAR 0 3
84540: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84541: LD_INT 0
84543: PPUSH
84544: PPUSH
84545: PPUSH
84546: PPUSH
// if not unit or not points then
84547: LD_VAR 0 1
84551: NOT
84552: PUSH
84553: LD_VAR 0 2
84557: NOT
84558: OR
84559: IFFALSE 84563
// exit ;
84561: GO 84653
// dist := 99999 ;
84563: LD_ADDR_VAR 0 5
84567: PUSH
84568: LD_INT 99999
84570: ST_TO_ADDR
// for i in points do
84571: LD_ADDR_VAR 0 4
84575: PUSH
84576: LD_VAR 0 2
84580: PUSH
84581: FOR_IN
84582: IFFALSE 84651
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84584: LD_ADDR_VAR 0 6
84588: PUSH
84589: LD_VAR 0 1
84593: PPUSH
84594: LD_VAR 0 4
84598: PUSH
84599: LD_INT 1
84601: ARRAY
84602: PPUSH
84603: LD_VAR 0 4
84607: PUSH
84608: LD_INT 2
84610: ARRAY
84611: PPUSH
84612: CALL_OW 297
84616: ST_TO_ADDR
// if tmpDist < dist then
84617: LD_VAR 0 6
84621: PUSH
84622: LD_VAR 0 5
84626: LESS
84627: IFFALSE 84649
// begin result := i ;
84629: LD_ADDR_VAR 0 3
84633: PUSH
84634: LD_VAR 0 4
84638: ST_TO_ADDR
// dist := tmpDist ;
84639: LD_ADDR_VAR 0 5
84643: PUSH
84644: LD_VAR 0 6
84648: ST_TO_ADDR
// end ; end ;
84649: GO 84581
84651: POP
84652: POP
// end ;
84653: LD_VAR 0 3
84657: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84658: LD_INT 0
84660: PPUSH
// uc_side := side ;
84661: LD_ADDR_OWVAR 20
84665: PUSH
84666: LD_VAR 0 1
84670: ST_TO_ADDR
// uc_nation := 3 ;
84671: LD_ADDR_OWVAR 21
84675: PUSH
84676: LD_INT 3
84678: ST_TO_ADDR
// vc_chassis := 25 ;
84679: LD_ADDR_OWVAR 37
84683: PUSH
84684: LD_INT 25
84686: ST_TO_ADDR
// vc_engine := engine_siberite ;
84687: LD_ADDR_OWVAR 39
84691: PUSH
84692: LD_INT 3
84694: ST_TO_ADDR
// vc_control := control_computer ;
84695: LD_ADDR_OWVAR 38
84699: PUSH
84700: LD_INT 3
84702: ST_TO_ADDR
// vc_weapon := 59 ;
84703: LD_ADDR_OWVAR 40
84707: PUSH
84708: LD_INT 59
84710: ST_TO_ADDR
// result := CreateVehicle ;
84711: LD_ADDR_VAR 0 5
84715: PUSH
84716: CALL_OW 45
84720: ST_TO_ADDR
// SetDir ( result , d ) ;
84721: LD_VAR 0 5
84725: PPUSH
84726: LD_VAR 0 4
84730: PPUSH
84731: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84735: LD_VAR 0 5
84739: PPUSH
84740: LD_VAR 0 2
84744: PPUSH
84745: LD_VAR 0 3
84749: PPUSH
84750: LD_INT 0
84752: PPUSH
84753: CALL_OW 48
// end ;
84757: LD_VAR 0 5
84761: RET
// export function GetMultiCargo ( export ru_radar export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84762: LD_INT 0
84764: PPUSH
84765: PPUSH
84766: PPUSH
84767: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84768: LD_VAR 0 1
84772: PPUSH
84773: CALL_OW 264
84777: PUSH
84778: LD_INT 91
84780: EQUAL
84781: IFFALSE 84853
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84783: LD_INT 68
84785: PPUSH
84786: LD_VAR 0 1
84790: PPUSH
84791: CALL_OW 255
84795: PPUSH
84796: CALL_OW 321
84800: PUSH
84801: LD_INT 2
84803: EQUAL
84804: IFFALSE 84816
// eff := 70 else
84806: LD_ADDR_VAR 0 4
84810: PUSH
84811: LD_INT 70
84813: ST_TO_ADDR
84814: GO 84824
// eff := 30 ;
84816: LD_ADDR_VAR 0 4
84820: PUSH
84821: LD_INT 30
84823: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84824: LD_VAR 0 1
84828: PPUSH
84829: CALL_OW 250
84833: PPUSH
84834: LD_VAR 0 1
84838: PPUSH
84839: CALL_OW 251
84843: PPUSH
84844: LD_VAR 0 4
84848: PPUSH
84849: CALL_OW 495
// end ; end ;
84853: LD_VAR 0 2
84857: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84858: LD_INT 0
84860: PPUSH
// end ;
84861: LD_VAR 0 4
84865: RET
// export function SOS_Command ( cmd ) ; begin
84866: LD_INT 0
84868: PPUSH
// end ;
84869: LD_VAR 0 2
84873: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84874: LD_INT 0
84876: PPUSH
// end ;
84877: LD_VAR 0 6
84881: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84882: LD_INT 0
84884: PPUSH
84885: PPUSH
// if not vehicle or not factory then
84886: LD_VAR 0 1
84890: NOT
84891: PUSH
84892: LD_VAR 0 2
84896: NOT
84897: OR
84898: IFFALSE 84902
// exit ;
84900: GO 85133
// if factoryWaypoints >= factory then
84902: LD_EXP 122
84906: PUSH
84907: LD_VAR 0 2
84911: GREATEREQUAL
84912: IFFALSE 85133
// if factoryWaypoints [ factory ] then
84914: LD_EXP 122
84918: PUSH
84919: LD_VAR 0 2
84923: ARRAY
84924: IFFALSE 85133
// begin if GetControl ( vehicle ) = control_manual then
84926: LD_VAR 0 1
84930: PPUSH
84931: CALL_OW 263
84935: PUSH
84936: LD_INT 1
84938: EQUAL
84939: IFFALSE 85020
// begin driver := IsDrivenBy ( vehicle ) ;
84941: LD_ADDR_VAR 0 4
84945: PUSH
84946: LD_VAR 0 1
84950: PPUSH
84951: CALL_OW 311
84955: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84956: LD_VAR 0 4
84960: PPUSH
84961: LD_EXP 122
84965: PUSH
84966: LD_VAR 0 2
84970: ARRAY
84971: PUSH
84972: LD_INT 3
84974: ARRAY
84975: PPUSH
84976: LD_EXP 122
84980: PUSH
84981: LD_VAR 0 2
84985: ARRAY
84986: PUSH
84987: LD_INT 4
84989: ARRAY
84990: PPUSH
84991: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84995: LD_VAR 0 4
84999: PPUSH
85000: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
85004: LD_VAR 0 4
85008: PPUSH
85009: LD_VAR 0 2
85013: PPUSH
85014: CALL_OW 180
// end else
85018: GO 85133
// if GetControl ( vehicle ) = control_remote then
85020: LD_VAR 0 1
85024: PPUSH
85025: CALL_OW 263
85029: PUSH
85030: LD_INT 2
85032: EQUAL
85033: IFFALSE 85094
// begin wait ( 0 0$2 ) ;
85035: LD_INT 70
85037: PPUSH
85038: CALL_OW 67
// if Connect ( vehicle ) then
85042: LD_VAR 0 1
85046: PPUSH
85047: CALL 51835 0 1
85051: IFFALSE 85092
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85053: LD_VAR 0 1
85057: PPUSH
85058: LD_EXP 122
85062: PUSH
85063: LD_VAR 0 2
85067: ARRAY
85068: PUSH
85069: LD_INT 3
85071: ARRAY
85072: PPUSH
85073: LD_EXP 122
85077: PUSH
85078: LD_VAR 0 2
85082: ARRAY
85083: PUSH
85084: LD_INT 4
85086: ARRAY
85087: PPUSH
85088: CALL_OW 171
// end else
85092: GO 85133
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85094: LD_VAR 0 1
85098: PPUSH
85099: LD_EXP 122
85103: PUSH
85104: LD_VAR 0 2
85108: ARRAY
85109: PUSH
85110: LD_INT 3
85112: ARRAY
85113: PPUSH
85114: LD_EXP 122
85118: PUSH
85119: LD_VAR 0 2
85123: ARRAY
85124: PUSH
85125: LD_INT 4
85127: ARRAY
85128: PPUSH
85129: CALL_OW 171
// end ; end ;
85133: LD_VAR 0 3
85137: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
85138: LD_INT 0
85140: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85141: LD_VAR 0 1
85145: PUSH
85146: LD_INT 250
85148: EQUAL
85149: PUSH
85150: LD_VAR 0 2
85154: PPUSH
85155: CALL_OW 264
85159: PUSH
85160: LD_INT 81
85162: EQUAL
85163: AND
85164: IFFALSE 85185
// MinerPlaceMine ( unit , x , y ) ;
85166: LD_VAR 0 2
85170: PPUSH
85171: LD_VAR 0 4
85175: PPUSH
85176: LD_VAR 0 5
85180: PPUSH
85181: CALL 87570 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85185: LD_VAR 0 1
85189: PUSH
85190: LD_INT 251
85192: EQUAL
85193: PUSH
85194: LD_VAR 0 2
85198: PPUSH
85199: CALL_OW 264
85203: PUSH
85204: LD_INT 81
85206: EQUAL
85207: AND
85208: IFFALSE 85229
// MinerDetonateMine ( unit , x , y ) ;
85210: LD_VAR 0 2
85214: PPUSH
85215: LD_VAR 0 4
85219: PPUSH
85220: LD_VAR 0 5
85224: PPUSH
85225: CALL 87845 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85229: LD_VAR 0 1
85233: PUSH
85234: LD_INT 252
85236: EQUAL
85237: PUSH
85238: LD_VAR 0 2
85242: PPUSH
85243: CALL_OW 264
85247: PUSH
85248: LD_INT 81
85250: EQUAL
85251: AND
85252: IFFALSE 85273
// MinerCreateMinefield ( unit , x , y ) ;
85254: LD_VAR 0 2
85258: PPUSH
85259: LD_VAR 0 4
85263: PPUSH
85264: LD_VAR 0 5
85268: PPUSH
85269: CALL 88262 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85273: LD_VAR 0 1
85277: PUSH
85278: LD_INT 253
85280: EQUAL
85281: PUSH
85282: LD_VAR 0 2
85286: PPUSH
85287: CALL_OW 257
85291: PUSH
85292: LD_INT 5
85294: EQUAL
85295: AND
85296: IFFALSE 85317
// ComBinocular ( unit , x , y ) ;
85298: LD_VAR 0 2
85302: PPUSH
85303: LD_VAR 0 4
85307: PPUSH
85308: LD_VAR 0 5
85312: PPUSH
85313: CALL 88631 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85317: LD_VAR 0 1
85321: PUSH
85322: LD_INT 254
85324: EQUAL
85325: PUSH
85326: LD_VAR 0 2
85330: PPUSH
85331: CALL_OW 264
85335: PUSH
85336: LD_INT 99
85338: EQUAL
85339: AND
85340: PUSH
85341: LD_VAR 0 3
85345: PPUSH
85346: CALL_OW 263
85350: PUSH
85351: LD_INT 3
85353: EQUAL
85354: AND
85355: IFFALSE 85371
// HackDestroyVehicle ( unit , selectedUnit ) ;
85357: LD_VAR 0 2
85361: PPUSH
85362: LD_VAR 0 3
85366: PPUSH
85367: CALL 86934 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85371: LD_VAR 0 1
85375: PUSH
85376: LD_INT 255
85378: EQUAL
85379: PUSH
85380: LD_VAR 0 2
85384: PPUSH
85385: CALL_OW 264
85389: PUSH
85390: LD_INT 14
85392: PUSH
85393: LD_INT 53
85395: PUSH
85396: EMPTY
85397: LIST
85398: LIST
85399: IN
85400: AND
85401: PUSH
85402: LD_VAR 0 4
85406: PPUSH
85407: LD_VAR 0 5
85411: PPUSH
85412: CALL_OW 488
85416: AND
85417: IFFALSE 85441
// CutTreeXYR ( unit , x , y , 12 ) ;
85419: LD_VAR 0 2
85423: PPUSH
85424: LD_VAR 0 4
85428: PPUSH
85429: LD_VAR 0 5
85433: PPUSH
85434: LD_INT 12
85436: PPUSH
85437: CALL 85504 0 4
// if cmd = 256 then
85441: LD_VAR 0 1
85445: PUSH
85446: LD_INT 256
85448: EQUAL
85449: IFFALSE 85470
// SetFactoryWaypoint ( unit , x , y ) ;
85451: LD_VAR 0 2
85455: PPUSH
85456: LD_VAR 0 4
85460: PPUSH
85461: LD_VAR 0 5
85465: PPUSH
85466: CALL 42418 0 3
// if cmd = 257 then
85470: LD_VAR 0 1
85474: PUSH
85475: LD_INT 257
85477: EQUAL
85478: IFFALSE 85499
// SetWarehouseGatheringPoint ( unit , x , y ) ;
85480: LD_VAR 0 2
85484: PPUSH
85485: LD_VAR 0 4
85489: PPUSH
85490: LD_VAR 0 5
85494: PPUSH
85495: CALL 42780 0 3
// end ;
85499: LD_VAR 0 6
85503: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85504: LD_INT 0
85506: PPUSH
85507: PPUSH
85508: PPUSH
85509: PPUSH
85510: PPUSH
85511: PPUSH
85512: PPUSH
85513: PPUSH
85514: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85515: LD_VAR 0 1
85519: NOT
85520: PUSH
85521: LD_VAR 0 2
85525: PPUSH
85526: LD_VAR 0 3
85530: PPUSH
85531: CALL_OW 488
85535: NOT
85536: OR
85537: PUSH
85538: LD_VAR 0 4
85542: NOT
85543: OR
85544: IFFALSE 85548
// exit ;
85546: GO 85888
// list := [ ] ;
85548: LD_ADDR_VAR 0 13
85552: PUSH
85553: EMPTY
85554: ST_TO_ADDR
// if x - r < 0 then
85555: LD_VAR 0 2
85559: PUSH
85560: LD_VAR 0 4
85564: MINUS
85565: PUSH
85566: LD_INT 0
85568: LESS
85569: IFFALSE 85581
// min_x := 0 else
85571: LD_ADDR_VAR 0 7
85575: PUSH
85576: LD_INT 0
85578: ST_TO_ADDR
85579: GO 85597
// min_x := x - r ;
85581: LD_ADDR_VAR 0 7
85585: PUSH
85586: LD_VAR 0 2
85590: PUSH
85591: LD_VAR 0 4
85595: MINUS
85596: ST_TO_ADDR
// if y - r < 0 then
85597: LD_VAR 0 3
85601: PUSH
85602: LD_VAR 0 4
85606: MINUS
85607: PUSH
85608: LD_INT 0
85610: LESS
85611: IFFALSE 85623
// min_y := 0 else
85613: LD_ADDR_VAR 0 8
85617: PUSH
85618: LD_INT 0
85620: ST_TO_ADDR
85621: GO 85639
// min_y := y - r ;
85623: LD_ADDR_VAR 0 8
85627: PUSH
85628: LD_VAR 0 3
85632: PUSH
85633: LD_VAR 0 4
85637: MINUS
85638: ST_TO_ADDR
// max_x := x + r ;
85639: LD_ADDR_VAR 0 9
85643: PUSH
85644: LD_VAR 0 2
85648: PUSH
85649: LD_VAR 0 4
85653: PLUS
85654: ST_TO_ADDR
// max_y := y + r ;
85655: LD_ADDR_VAR 0 10
85659: PUSH
85660: LD_VAR 0 3
85664: PUSH
85665: LD_VAR 0 4
85669: PLUS
85670: ST_TO_ADDR
// for _x = min_x to max_x do
85671: LD_ADDR_VAR 0 11
85675: PUSH
85676: DOUBLE
85677: LD_VAR 0 7
85681: DEC
85682: ST_TO_ADDR
85683: LD_VAR 0 9
85687: PUSH
85688: FOR_TO
85689: IFFALSE 85806
// for _y = min_y to max_y do
85691: LD_ADDR_VAR 0 12
85695: PUSH
85696: DOUBLE
85697: LD_VAR 0 8
85701: DEC
85702: ST_TO_ADDR
85703: LD_VAR 0 10
85707: PUSH
85708: FOR_TO
85709: IFFALSE 85802
// begin if not ValidHex ( _x , _y ) then
85711: LD_VAR 0 11
85715: PPUSH
85716: LD_VAR 0 12
85720: PPUSH
85721: CALL_OW 488
85725: NOT
85726: IFFALSE 85730
// continue ;
85728: GO 85708
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85730: LD_VAR 0 11
85734: PPUSH
85735: LD_VAR 0 12
85739: PPUSH
85740: CALL_OW 351
85744: PUSH
85745: LD_VAR 0 11
85749: PPUSH
85750: LD_VAR 0 12
85754: PPUSH
85755: CALL_OW 554
85759: AND
85760: IFFALSE 85800
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85762: LD_ADDR_VAR 0 13
85766: PUSH
85767: LD_VAR 0 13
85771: PPUSH
85772: LD_VAR 0 13
85776: PUSH
85777: LD_INT 1
85779: PLUS
85780: PPUSH
85781: LD_VAR 0 11
85785: PUSH
85786: LD_VAR 0 12
85790: PUSH
85791: EMPTY
85792: LIST
85793: LIST
85794: PPUSH
85795: CALL_OW 2
85799: ST_TO_ADDR
// end ;
85800: GO 85708
85802: POP
85803: POP
85804: GO 85688
85806: POP
85807: POP
// if not list then
85808: LD_VAR 0 13
85812: NOT
85813: IFFALSE 85817
// exit ;
85815: GO 85888
// for i in list do
85817: LD_ADDR_VAR 0 6
85821: PUSH
85822: LD_VAR 0 13
85826: PUSH
85827: FOR_IN
85828: IFFALSE 85886
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85830: LD_VAR 0 1
85834: PPUSH
85835: LD_STRING M
85837: PUSH
85838: LD_VAR 0 6
85842: PUSH
85843: LD_INT 1
85845: ARRAY
85846: PUSH
85847: LD_VAR 0 6
85851: PUSH
85852: LD_INT 2
85854: ARRAY
85855: PUSH
85856: LD_INT 0
85858: PUSH
85859: LD_INT 0
85861: PUSH
85862: LD_INT 0
85864: PUSH
85865: LD_INT 0
85867: PUSH
85868: EMPTY
85869: LIST
85870: LIST
85871: LIST
85872: LIST
85873: LIST
85874: LIST
85875: LIST
85876: PUSH
85877: EMPTY
85878: LIST
85879: PPUSH
85880: CALL_OW 447
85884: GO 85827
85886: POP
85887: POP
// end ;
85888: LD_VAR 0 5
85892: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85893: LD_EXP 125
85897: NOT
85898: IFFALSE 85948
85900: GO 85902
85902: DISABLE
// begin initHack := true ;
85903: LD_ADDR_EXP 125
85907: PUSH
85908: LD_INT 1
85910: ST_TO_ADDR
// hackTanks := [ ] ;
85911: LD_ADDR_EXP 126
85915: PUSH
85916: EMPTY
85917: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85918: LD_ADDR_EXP 127
85922: PUSH
85923: EMPTY
85924: ST_TO_ADDR
// hackLimit := 3 ;
85925: LD_ADDR_EXP 128
85929: PUSH
85930: LD_INT 3
85932: ST_TO_ADDR
// hackDist := 12 ;
85933: LD_ADDR_EXP 129
85937: PUSH
85938: LD_INT 12
85940: ST_TO_ADDR
// hackCounter := [ ] ;
85941: LD_ADDR_EXP 130
85945: PUSH
85946: EMPTY
85947: ST_TO_ADDR
// end ;
85948: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85949: LD_EXP 125
85953: PUSH
85954: LD_INT 34
85956: PUSH
85957: LD_INT 99
85959: PUSH
85960: EMPTY
85961: LIST
85962: LIST
85963: PPUSH
85964: CALL_OW 69
85968: AND
85969: IFFALSE 86222
85971: GO 85973
85973: DISABLE
85974: LD_INT 0
85976: PPUSH
85977: PPUSH
// begin enable ;
85978: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85979: LD_ADDR_VAR 0 1
85983: PUSH
85984: LD_INT 34
85986: PUSH
85987: LD_INT 99
85989: PUSH
85990: EMPTY
85991: LIST
85992: LIST
85993: PPUSH
85994: CALL_OW 69
85998: PUSH
85999: FOR_IN
86000: IFFALSE 86220
// begin if not i in hackTanks then
86002: LD_VAR 0 1
86006: PUSH
86007: LD_EXP 126
86011: IN
86012: NOT
86013: IFFALSE 86096
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
86015: LD_ADDR_EXP 126
86019: PUSH
86020: LD_EXP 126
86024: PPUSH
86025: LD_EXP 126
86029: PUSH
86030: LD_INT 1
86032: PLUS
86033: PPUSH
86034: LD_VAR 0 1
86038: PPUSH
86039: CALL_OW 1
86043: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
86044: LD_ADDR_EXP 127
86048: PUSH
86049: LD_EXP 127
86053: PPUSH
86054: LD_EXP 127
86058: PUSH
86059: LD_INT 1
86061: PLUS
86062: PPUSH
86063: EMPTY
86064: PPUSH
86065: CALL_OW 1
86069: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
86070: LD_ADDR_EXP 130
86074: PUSH
86075: LD_EXP 130
86079: PPUSH
86080: LD_EXP 130
86084: PUSH
86085: LD_INT 1
86087: PLUS
86088: PPUSH
86089: EMPTY
86090: PPUSH
86091: CALL_OW 1
86095: ST_TO_ADDR
// end ; if not IsOk ( i ) then
86096: LD_VAR 0 1
86100: PPUSH
86101: CALL_OW 302
86105: NOT
86106: IFFALSE 86119
// begin HackUnlinkAll ( i ) ;
86108: LD_VAR 0 1
86112: PPUSH
86113: CALL 86225 0 1
// continue ;
86117: GO 85999
// end ; HackCheckCapturedStatus ( i ) ;
86119: LD_VAR 0 1
86123: PPUSH
86124: CALL 86668 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
86128: LD_ADDR_VAR 0 2
86132: PUSH
86133: LD_INT 81
86135: PUSH
86136: LD_VAR 0 1
86140: PPUSH
86141: CALL_OW 255
86145: PUSH
86146: EMPTY
86147: LIST
86148: LIST
86149: PUSH
86150: LD_INT 33
86152: PUSH
86153: LD_INT 3
86155: PUSH
86156: EMPTY
86157: LIST
86158: LIST
86159: PUSH
86160: LD_INT 91
86162: PUSH
86163: LD_VAR 0 1
86167: PUSH
86168: LD_EXP 129
86172: PUSH
86173: EMPTY
86174: LIST
86175: LIST
86176: LIST
86177: PUSH
86178: LD_INT 50
86180: PUSH
86181: EMPTY
86182: LIST
86183: PUSH
86184: EMPTY
86185: LIST
86186: LIST
86187: LIST
86188: LIST
86189: PPUSH
86190: CALL_OW 69
86194: ST_TO_ADDR
// if not tmp then
86195: LD_VAR 0 2
86199: NOT
86200: IFFALSE 86204
// continue ;
86202: GO 85999
// HackLink ( i , tmp ) ;
86204: LD_VAR 0 1
86208: PPUSH
86209: LD_VAR 0 2
86213: PPUSH
86214: CALL 86361 0 2
// end ;
86218: GO 85999
86220: POP
86221: POP
// end ;
86222: PPOPN 2
86224: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86225: LD_INT 0
86227: PPUSH
86228: PPUSH
86229: PPUSH
// if not hack in hackTanks then
86230: LD_VAR 0 1
86234: PUSH
86235: LD_EXP 126
86239: IN
86240: NOT
86241: IFFALSE 86245
// exit ;
86243: GO 86356
// index := GetElementIndex ( hackTanks , hack ) ;
86245: LD_ADDR_VAR 0 4
86249: PUSH
86250: LD_EXP 126
86254: PPUSH
86255: LD_VAR 0 1
86259: PPUSH
86260: CALL 48651 0 2
86264: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86265: LD_EXP 127
86269: PUSH
86270: LD_VAR 0 4
86274: ARRAY
86275: IFFALSE 86356
// begin for i in hackTanksCaptured [ index ] do
86277: LD_ADDR_VAR 0 3
86281: PUSH
86282: LD_EXP 127
86286: PUSH
86287: LD_VAR 0 4
86291: ARRAY
86292: PUSH
86293: FOR_IN
86294: IFFALSE 86320
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86296: LD_VAR 0 3
86300: PUSH
86301: LD_INT 1
86303: ARRAY
86304: PPUSH
86305: LD_VAR 0 3
86309: PUSH
86310: LD_INT 2
86312: ARRAY
86313: PPUSH
86314: CALL_OW 235
86318: GO 86293
86320: POP
86321: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86322: LD_ADDR_EXP 127
86326: PUSH
86327: LD_EXP 127
86331: PPUSH
86332: LD_VAR 0 4
86336: PPUSH
86337: EMPTY
86338: PPUSH
86339: CALL_OW 1
86343: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86344: LD_VAR 0 1
86348: PPUSH
86349: LD_INT 0
86351: PPUSH
86352: CALL_OW 505
// end ; end ;
86356: LD_VAR 0 2
86360: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86361: LD_INT 0
86363: PPUSH
86364: PPUSH
86365: PPUSH
// if not hack in hackTanks or not vehicles then
86366: LD_VAR 0 1
86370: PUSH
86371: LD_EXP 126
86375: IN
86376: NOT
86377: PUSH
86378: LD_VAR 0 2
86382: NOT
86383: OR
86384: IFFALSE 86388
// exit ;
86386: GO 86663
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86388: LD_ADDR_VAR 0 2
86392: PUSH
86393: LD_VAR 0 1
86397: PPUSH
86398: LD_VAR 0 2
86402: PPUSH
86403: LD_INT 1
86405: PPUSH
86406: LD_INT 1
86408: PPUSH
86409: CALL 49301 0 4
86413: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86414: LD_ADDR_VAR 0 5
86418: PUSH
86419: LD_EXP 126
86423: PPUSH
86424: LD_VAR 0 1
86428: PPUSH
86429: CALL 48651 0 2
86433: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86434: LD_EXP 127
86438: PUSH
86439: LD_VAR 0 5
86443: ARRAY
86444: PUSH
86445: LD_EXP 128
86449: LESS
86450: IFFALSE 86639
// begin for i := 1 to vehicles do
86452: LD_ADDR_VAR 0 4
86456: PUSH
86457: DOUBLE
86458: LD_INT 1
86460: DEC
86461: ST_TO_ADDR
86462: LD_VAR 0 2
86466: PUSH
86467: FOR_TO
86468: IFFALSE 86637
// begin if hackTanksCaptured [ index ] = hackLimit then
86470: LD_EXP 127
86474: PUSH
86475: LD_VAR 0 5
86479: ARRAY
86480: PUSH
86481: LD_EXP 128
86485: EQUAL
86486: IFFALSE 86490
// break ;
86488: GO 86637
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86490: LD_ADDR_EXP 130
86494: PUSH
86495: LD_EXP 130
86499: PPUSH
86500: LD_VAR 0 5
86504: PPUSH
86505: LD_EXP 130
86509: PUSH
86510: LD_VAR 0 5
86514: ARRAY
86515: PUSH
86516: LD_INT 1
86518: PLUS
86519: PPUSH
86520: CALL_OW 1
86524: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86525: LD_ADDR_EXP 127
86529: PUSH
86530: LD_EXP 127
86534: PPUSH
86535: LD_VAR 0 5
86539: PUSH
86540: LD_EXP 127
86544: PUSH
86545: LD_VAR 0 5
86549: ARRAY
86550: PUSH
86551: LD_INT 1
86553: PLUS
86554: PUSH
86555: EMPTY
86556: LIST
86557: LIST
86558: PPUSH
86559: LD_VAR 0 2
86563: PUSH
86564: LD_VAR 0 4
86568: ARRAY
86569: PUSH
86570: LD_VAR 0 2
86574: PUSH
86575: LD_VAR 0 4
86579: ARRAY
86580: PPUSH
86581: CALL_OW 255
86585: PUSH
86586: EMPTY
86587: LIST
86588: LIST
86589: PPUSH
86590: CALL 48866 0 3
86594: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86595: LD_VAR 0 2
86599: PUSH
86600: LD_VAR 0 4
86604: ARRAY
86605: PPUSH
86606: LD_VAR 0 1
86610: PPUSH
86611: CALL_OW 255
86615: PPUSH
86616: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86620: LD_VAR 0 2
86624: PUSH
86625: LD_VAR 0 4
86629: ARRAY
86630: PPUSH
86631: CALL_OW 141
// end ;
86635: GO 86467
86637: POP
86638: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86639: LD_VAR 0 1
86643: PPUSH
86644: LD_EXP 127
86648: PUSH
86649: LD_VAR 0 5
86653: ARRAY
86654: PUSH
86655: LD_INT 0
86657: PLUS
86658: PPUSH
86659: CALL_OW 505
// end ;
86663: LD_VAR 0 3
86667: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86668: LD_INT 0
86670: PPUSH
86671: PPUSH
86672: PPUSH
86673: PPUSH
// if not hack in hackTanks then
86674: LD_VAR 0 1
86678: PUSH
86679: LD_EXP 126
86683: IN
86684: NOT
86685: IFFALSE 86689
// exit ;
86687: GO 86929
// index := GetElementIndex ( hackTanks , hack ) ;
86689: LD_ADDR_VAR 0 4
86693: PUSH
86694: LD_EXP 126
86698: PPUSH
86699: LD_VAR 0 1
86703: PPUSH
86704: CALL 48651 0 2
86708: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86709: LD_ADDR_VAR 0 3
86713: PUSH
86714: DOUBLE
86715: LD_EXP 127
86719: PUSH
86720: LD_VAR 0 4
86724: ARRAY
86725: INC
86726: ST_TO_ADDR
86727: LD_INT 1
86729: PUSH
86730: FOR_DOWNTO
86731: IFFALSE 86903
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86733: LD_ADDR_VAR 0 5
86737: PUSH
86738: LD_EXP 127
86742: PUSH
86743: LD_VAR 0 4
86747: ARRAY
86748: PUSH
86749: LD_VAR 0 3
86753: ARRAY
86754: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86755: LD_VAR 0 5
86759: PUSH
86760: LD_INT 1
86762: ARRAY
86763: PPUSH
86764: CALL_OW 302
86768: NOT
86769: PUSH
86770: LD_VAR 0 5
86774: PUSH
86775: LD_INT 1
86777: ARRAY
86778: PPUSH
86779: CALL_OW 255
86783: PUSH
86784: LD_VAR 0 1
86788: PPUSH
86789: CALL_OW 255
86793: NONEQUAL
86794: OR
86795: IFFALSE 86901
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86797: LD_VAR 0 5
86801: PUSH
86802: LD_INT 1
86804: ARRAY
86805: PPUSH
86806: CALL_OW 305
86810: PUSH
86811: LD_VAR 0 5
86815: PUSH
86816: LD_INT 1
86818: ARRAY
86819: PPUSH
86820: CALL_OW 255
86824: PUSH
86825: LD_VAR 0 1
86829: PPUSH
86830: CALL_OW 255
86834: EQUAL
86835: AND
86836: IFFALSE 86860
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86838: LD_VAR 0 5
86842: PUSH
86843: LD_INT 1
86845: ARRAY
86846: PPUSH
86847: LD_VAR 0 5
86851: PUSH
86852: LD_INT 2
86854: ARRAY
86855: PPUSH
86856: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86860: LD_ADDR_EXP 127
86864: PUSH
86865: LD_EXP 127
86869: PPUSH
86870: LD_VAR 0 4
86874: PPUSH
86875: LD_EXP 127
86879: PUSH
86880: LD_VAR 0 4
86884: ARRAY
86885: PPUSH
86886: LD_VAR 0 3
86890: PPUSH
86891: CALL_OW 3
86895: PPUSH
86896: CALL_OW 1
86900: ST_TO_ADDR
// end ; end ;
86901: GO 86730
86903: POP
86904: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86905: LD_VAR 0 1
86909: PPUSH
86910: LD_EXP 127
86914: PUSH
86915: LD_VAR 0 4
86919: ARRAY
86920: PUSH
86921: LD_INT 0
86923: PLUS
86924: PPUSH
86925: CALL_OW 505
// end ;
86929: LD_VAR 0 2
86933: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86934: LD_INT 0
86936: PPUSH
86937: PPUSH
86938: PPUSH
86939: PPUSH
// if not hack in hackTanks then
86940: LD_VAR 0 1
86944: PUSH
86945: LD_EXP 126
86949: IN
86950: NOT
86951: IFFALSE 86955
// exit ;
86953: GO 87040
// index := GetElementIndex ( hackTanks , hack ) ;
86955: LD_ADDR_VAR 0 5
86959: PUSH
86960: LD_EXP 126
86964: PPUSH
86965: LD_VAR 0 1
86969: PPUSH
86970: CALL 48651 0 2
86974: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86975: LD_ADDR_VAR 0 4
86979: PUSH
86980: DOUBLE
86981: LD_INT 1
86983: DEC
86984: ST_TO_ADDR
86985: LD_EXP 127
86989: PUSH
86990: LD_VAR 0 5
86994: ARRAY
86995: PUSH
86996: FOR_TO
86997: IFFALSE 87038
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86999: LD_EXP 127
87003: PUSH
87004: LD_VAR 0 5
87008: ARRAY
87009: PUSH
87010: LD_VAR 0 4
87014: ARRAY
87015: PUSH
87016: LD_INT 1
87018: ARRAY
87019: PUSH
87020: LD_VAR 0 2
87024: EQUAL
87025: IFFALSE 87036
// KillUnit ( vehicle ) ;
87027: LD_VAR 0 2
87031: PPUSH
87032: CALL_OW 66
87036: GO 86996
87038: POP
87039: POP
// end ;
87040: LD_VAR 0 3
87044: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
87045: LD_EXP 131
87049: NOT
87050: IFFALSE 87085
87052: GO 87054
87054: DISABLE
// begin initMiner := true ;
87055: LD_ADDR_EXP 131
87059: PUSH
87060: LD_INT 1
87062: ST_TO_ADDR
// minersList := [ ] ;
87063: LD_ADDR_EXP 132
87067: PUSH
87068: EMPTY
87069: ST_TO_ADDR
// minerMinesList := [ ] ;
87070: LD_ADDR_EXP 133
87074: PUSH
87075: EMPTY
87076: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
87077: LD_ADDR_EXP 134
87081: PUSH
87082: LD_INT 5
87084: ST_TO_ADDR
// end ;
87085: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
87086: LD_EXP 131
87090: PUSH
87091: LD_INT 34
87093: PUSH
87094: LD_INT 81
87096: PUSH
87097: EMPTY
87098: LIST
87099: LIST
87100: PPUSH
87101: CALL_OW 69
87105: AND
87106: IFFALSE 87567
87108: GO 87110
87110: DISABLE
87111: LD_INT 0
87113: PPUSH
87114: PPUSH
87115: PPUSH
87116: PPUSH
// begin enable ;
87117: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
87118: LD_ADDR_VAR 0 1
87122: PUSH
87123: LD_INT 34
87125: PUSH
87126: LD_INT 81
87128: PUSH
87129: EMPTY
87130: LIST
87131: LIST
87132: PPUSH
87133: CALL_OW 69
87137: PUSH
87138: FOR_IN
87139: IFFALSE 87211
// begin if not i in minersList then
87141: LD_VAR 0 1
87145: PUSH
87146: LD_EXP 132
87150: IN
87151: NOT
87152: IFFALSE 87209
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87154: LD_ADDR_EXP 132
87158: PUSH
87159: LD_EXP 132
87163: PPUSH
87164: LD_EXP 132
87168: PUSH
87169: LD_INT 1
87171: PLUS
87172: PPUSH
87173: LD_VAR 0 1
87177: PPUSH
87178: CALL_OW 1
87182: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87183: LD_ADDR_EXP 133
87187: PUSH
87188: LD_EXP 133
87192: PPUSH
87193: LD_EXP 133
87197: PUSH
87198: LD_INT 1
87200: PLUS
87201: PPUSH
87202: EMPTY
87203: PPUSH
87204: CALL_OW 1
87208: ST_TO_ADDR
// end end ;
87209: GO 87138
87211: POP
87212: POP
// for i := minerMinesList downto 1 do
87213: LD_ADDR_VAR 0 1
87217: PUSH
87218: DOUBLE
87219: LD_EXP 133
87223: INC
87224: ST_TO_ADDR
87225: LD_INT 1
87227: PUSH
87228: FOR_DOWNTO
87229: IFFALSE 87565
// begin if IsLive ( minersList [ i ] ) then
87231: LD_EXP 132
87235: PUSH
87236: LD_VAR 0 1
87240: ARRAY
87241: PPUSH
87242: CALL_OW 300
87246: IFFALSE 87274
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87248: LD_EXP 132
87252: PUSH
87253: LD_VAR 0 1
87257: ARRAY
87258: PPUSH
87259: LD_EXP 133
87263: PUSH
87264: LD_VAR 0 1
87268: ARRAY
87269: PPUSH
87270: CALL_OW 505
// if not minerMinesList [ i ] then
87274: LD_EXP 133
87278: PUSH
87279: LD_VAR 0 1
87283: ARRAY
87284: NOT
87285: IFFALSE 87289
// continue ;
87287: GO 87228
// for j := minerMinesList [ i ] downto 1 do
87289: LD_ADDR_VAR 0 2
87293: PUSH
87294: DOUBLE
87295: LD_EXP 133
87299: PUSH
87300: LD_VAR 0 1
87304: ARRAY
87305: INC
87306: ST_TO_ADDR
87307: LD_INT 1
87309: PUSH
87310: FOR_DOWNTO
87311: IFFALSE 87561
// begin side := GetSide ( minersList [ i ] ) ;
87313: LD_ADDR_VAR 0 3
87317: PUSH
87318: LD_EXP 132
87322: PUSH
87323: LD_VAR 0 1
87327: ARRAY
87328: PPUSH
87329: CALL_OW 255
87333: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87334: LD_ADDR_VAR 0 4
87338: PUSH
87339: LD_EXP 133
87343: PUSH
87344: LD_VAR 0 1
87348: ARRAY
87349: PUSH
87350: LD_VAR 0 2
87354: ARRAY
87355: PUSH
87356: LD_INT 1
87358: ARRAY
87359: PPUSH
87360: LD_EXP 133
87364: PUSH
87365: LD_VAR 0 1
87369: ARRAY
87370: PUSH
87371: LD_VAR 0 2
87375: ARRAY
87376: PUSH
87377: LD_INT 2
87379: ARRAY
87380: PPUSH
87381: CALL_OW 428
87385: ST_TO_ADDR
// if not tmp then
87386: LD_VAR 0 4
87390: NOT
87391: IFFALSE 87395
// continue ;
87393: GO 87310
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
87395: LD_VAR 0 4
87399: PUSH
87400: LD_INT 81
87402: PUSH
87403: LD_VAR 0 3
87407: PUSH
87408: EMPTY
87409: LIST
87410: LIST
87411: PPUSH
87412: CALL_OW 69
87416: IN
87417: PUSH
87418: LD_EXP 133
87422: PUSH
87423: LD_VAR 0 1
87427: ARRAY
87428: PUSH
87429: LD_VAR 0 2
87433: ARRAY
87434: PUSH
87435: LD_INT 1
87437: ARRAY
87438: PPUSH
87439: LD_EXP 133
87443: PUSH
87444: LD_VAR 0 1
87448: ARRAY
87449: PUSH
87450: LD_VAR 0 2
87454: ARRAY
87455: PUSH
87456: LD_INT 2
87458: ARRAY
87459: PPUSH
87460: CALL_OW 458
87464: AND
87465: IFFALSE 87559
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87467: LD_EXP 133
87471: PUSH
87472: LD_VAR 0 1
87476: ARRAY
87477: PUSH
87478: LD_VAR 0 2
87482: ARRAY
87483: PUSH
87484: LD_INT 1
87486: ARRAY
87487: PPUSH
87488: LD_EXP 133
87492: PUSH
87493: LD_VAR 0 1
87497: ARRAY
87498: PUSH
87499: LD_VAR 0 2
87503: ARRAY
87504: PUSH
87505: LD_INT 2
87507: ARRAY
87508: PPUSH
87509: LD_VAR 0 3
87513: PPUSH
87514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87518: LD_ADDR_EXP 133
87522: PUSH
87523: LD_EXP 133
87527: PPUSH
87528: LD_VAR 0 1
87532: PPUSH
87533: LD_EXP 133
87537: PUSH
87538: LD_VAR 0 1
87542: ARRAY
87543: PPUSH
87544: LD_VAR 0 2
87548: PPUSH
87549: CALL_OW 3
87553: PPUSH
87554: CALL_OW 1
87558: ST_TO_ADDR
// end ; end ;
87559: GO 87310
87561: POP
87562: POP
// end ;
87563: GO 87228
87565: POP
87566: POP
// end ;
87567: PPOPN 4
87569: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87570: LD_INT 0
87572: PPUSH
87573: PPUSH
// result := false ;
87574: LD_ADDR_VAR 0 4
87578: PUSH
87579: LD_INT 0
87581: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87582: LD_VAR 0 1
87586: PPUSH
87587: CALL_OW 264
87591: PUSH
87592: LD_INT 81
87594: EQUAL
87595: NOT
87596: IFFALSE 87600
// exit ;
87598: GO 87840
// index := GetElementIndex ( minersList , unit ) ;
87600: LD_ADDR_VAR 0 5
87604: PUSH
87605: LD_EXP 132
87609: PPUSH
87610: LD_VAR 0 1
87614: PPUSH
87615: CALL 48651 0 2
87619: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87620: LD_EXP 133
87624: PUSH
87625: LD_VAR 0 5
87629: ARRAY
87630: PUSH
87631: LD_EXP 134
87635: GREATEREQUAL
87636: IFFALSE 87640
// exit ;
87638: GO 87840
// ComMoveXY ( unit , x , y ) ;
87640: LD_VAR 0 1
87644: PPUSH
87645: LD_VAR 0 2
87649: PPUSH
87650: LD_VAR 0 3
87654: PPUSH
87655: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87659: LD_INT 35
87661: PPUSH
87662: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87666: LD_VAR 0 1
87670: PPUSH
87671: LD_VAR 0 2
87675: PPUSH
87676: LD_VAR 0 3
87680: PPUSH
87681: CALL 80006 0 3
87685: NOT
87686: PUSH
87687: LD_VAR 0 1
87691: PPUSH
87692: CALL_OW 314
87696: AND
87697: IFFALSE 87701
// exit ;
87699: GO 87840
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87701: LD_VAR 0 2
87705: PPUSH
87706: LD_VAR 0 3
87710: PPUSH
87711: CALL_OW 428
87715: PUSH
87716: LD_VAR 0 1
87720: EQUAL
87721: PUSH
87722: LD_VAR 0 1
87726: PPUSH
87727: CALL_OW 314
87731: NOT
87732: AND
87733: IFFALSE 87659
// PlaySoundXY ( x , y , PlantMine ) ;
87735: LD_VAR 0 2
87739: PPUSH
87740: LD_VAR 0 3
87744: PPUSH
87745: LD_STRING PlantMine
87747: PPUSH
87748: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87752: LD_VAR 0 2
87756: PPUSH
87757: LD_VAR 0 3
87761: PPUSH
87762: LD_VAR 0 1
87766: PPUSH
87767: CALL_OW 255
87771: PPUSH
87772: LD_INT 0
87774: PPUSH
87775: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87779: LD_ADDR_EXP 133
87783: PUSH
87784: LD_EXP 133
87788: PPUSH
87789: LD_VAR 0 5
87793: PUSH
87794: LD_EXP 133
87798: PUSH
87799: LD_VAR 0 5
87803: ARRAY
87804: PUSH
87805: LD_INT 1
87807: PLUS
87808: PUSH
87809: EMPTY
87810: LIST
87811: LIST
87812: PPUSH
87813: LD_VAR 0 2
87817: PUSH
87818: LD_VAR 0 3
87822: PUSH
87823: EMPTY
87824: LIST
87825: LIST
87826: PPUSH
87827: CALL 48866 0 3
87831: ST_TO_ADDR
// result := true ;
87832: LD_ADDR_VAR 0 4
87836: PUSH
87837: LD_INT 1
87839: ST_TO_ADDR
// end ;
87840: LD_VAR 0 4
87844: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87845: LD_INT 0
87847: PPUSH
87848: PPUSH
87849: PPUSH
// if not unit in minersList then
87850: LD_VAR 0 1
87854: PUSH
87855: LD_EXP 132
87859: IN
87860: NOT
87861: IFFALSE 87865
// exit ;
87863: GO 88257
// index := GetElementIndex ( minersList , unit ) ;
87865: LD_ADDR_VAR 0 6
87869: PUSH
87870: LD_EXP 132
87874: PPUSH
87875: LD_VAR 0 1
87879: PPUSH
87880: CALL 48651 0 2
87884: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87885: LD_ADDR_VAR 0 5
87889: PUSH
87890: DOUBLE
87891: LD_EXP 133
87895: PUSH
87896: LD_VAR 0 6
87900: ARRAY
87901: INC
87902: ST_TO_ADDR
87903: LD_INT 1
87905: PUSH
87906: FOR_DOWNTO
87907: IFFALSE 88068
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87909: LD_EXP 133
87913: PUSH
87914: LD_VAR 0 6
87918: ARRAY
87919: PUSH
87920: LD_VAR 0 5
87924: ARRAY
87925: PUSH
87926: LD_INT 1
87928: ARRAY
87929: PUSH
87930: LD_VAR 0 2
87934: EQUAL
87935: PUSH
87936: LD_EXP 133
87940: PUSH
87941: LD_VAR 0 6
87945: ARRAY
87946: PUSH
87947: LD_VAR 0 5
87951: ARRAY
87952: PUSH
87953: LD_INT 2
87955: ARRAY
87956: PUSH
87957: LD_VAR 0 3
87961: EQUAL
87962: AND
87963: IFFALSE 88066
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87965: LD_EXP 133
87969: PUSH
87970: LD_VAR 0 6
87974: ARRAY
87975: PUSH
87976: LD_VAR 0 5
87980: ARRAY
87981: PUSH
87982: LD_INT 1
87984: ARRAY
87985: PPUSH
87986: LD_EXP 133
87990: PUSH
87991: LD_VAR 0 6
87995: ARRAY
87996: PUSH
87997: LD_VAR 0 5
88001: ARRAY
88002: PUSH
88003: LD_INT 2
88005: ARRAY
88006: PPUSH
88007: LD_VAR 0 1
88011: PPUSH
88012: CALL_OW 255
88016: PPUSH
88017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88021: LD_ADDR_EXP 133
88025: PUSH
88026: LD_EXP 133
88030: PPUSH
88031: LD_VAR 0 6
88035: PPUSH
88036: LD_EXP 133
88040: PUSH
88041: LD_VAR 0 6
88045: ARRAY
88046: PPUSH
88047: LD_VAR 0 5
88051: PPUSH
88052: CALL_OW 3
88056: PPUSH
88057: CALL_OW 1
88061: ST_TO_ADDR
// exit ;
88062: POP
88063: POP
88064: GO 88257
// end ; end ;
88066: GO 87906
88068: POP
88069: POP
// for i := minerMinesList [ index ] downto 1 do
88070: LD_ADDR_VAR 0 5
88074: PUSH
88075: DOUBLE
88076: LD_EXP 133
88080: PUSH
88081: LD_VAR 0 6
88085: ARRAY
88086: INC
88087: ST_TO_ADDR
88088: LD_INT 1
88090: PUSH
88091: FOR_DOWNTO
88092: IFFALSE 88255
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
88094: LD_EXP 133
88098: PUSH
88099: LD_VAR 0 6
88103: ARRAY
88104: PUSH
88105: LD_VAR 0 5
88109: ARRAY
88110: PUSH
88111: LD_INT 1
88113: ARRAY
88114: PPUSH
88115: LD_EXP 133
88119: PUSH
88120: LD_VAR 0 6
88124: ARRAY
88125: PUSH
88126: LD_VAR 0 5
88130: ARRAY
88131: PUSH
88132: LD_INT 2
88134: ARRAY
88135: PPUSH
88136: LD_VAR 0 2
88140: PPUSH
88141: LD_VAR 0 3
88145: PPUSH
88146: CALL_OW 298
88150: PUSH
88151: LD_INT 6
88153: LESS
88154: IFFALSE 88253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88156: LD_EXP 133
88160: PUSH
88161: LD_VAR 0 6
88165: ARRAY
88166: PUSH
88167: LD_VAR 0 5
88171: ARRAY
88172: PUSH
88173: LD_INT 1
88175: ARRAY
88176: PPUSH
88177: LD_EXP 133
88181: PUSH
88182: LD_VAR 0 6
88186: ARRAY
88187: PUSH
88188: LD_VAR 0 5
88192: ARRAY
88193: PUSH
88194: LD_INT 2
88196: ARRAY
88197: PPUSH
88198: LD_VAR 0 1
88202: PPUSH
88203: CALL_OW 255
88207: PPUSH
88208: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88212: LD_ADDR_EXP 133
88216: PUSH
88217: LD_EXP 133
88221: PPUSH
88222: LD_VAR 0 6
88226: PPUSH
88227: LD_EXP 133
88231: PUSH
88232: LD_VAR 0 6
88236: ARRAY
88237: PPUSH
88238: LD_VAR 0 5
88242: PPUSH
88243: CALL_OW 3
88247: PPUSH
88248: CALL_OW 1
88252: ST_TO_ADDR
// end ; end ;
88253: GO 88091
88255: POP
88256: POP
// end ;
88257: LD_VAR 0 4
88261: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88262: LD_INT 0
88264: PPUSH
88265: PPUSH
88266: PPUSH
88267: PPUSH
88268: PPUSH
88269: PPUSH
88270: PPUSH
88271: PPUSH
88272: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88273: LD_VAR 0 1
88277: PPUSH
88278: CALL_OW 264
88282: PUSH
88283: LD_INT 81
88285: EQUAL
88286: NOT
88287: PUSH
88288: LD_VAR 0 1
88292: PUSH
88293: LD_EXP 132
88297: IN
88298: NOT
88299: OR
88300: IFFALSE 88304
// exit ;
88302: GO 88626
// index := GetElementIndex ( minersList , unit ) ;
88304: LD_ADDR_VAR 0 6
88308: PUSH
88309: LD_EXP 132
88313: PPUSH
88314: LD_VAR 0 1
88318: PPUSH
88319: CALL 48651 0 2
88323: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88324: LD_ADDR_VAR 0 8
88328: PUSH
88329: LD_EXP 134
88333: PUSH
88334: LD_EXP 133
88338: PUSH
88339: LD_VAR 0 6
88343: ARRAY
88344: MINUS
88345: ST_TO_ADDR
// if not minesFreeAmount then
88346: LD_VAR 0 8
88350: NOT
88351: IFFALSE 88355
// exit ;
88353: GO 88626
// tmp := [ ] ;
88355: LD_ADDR_VAR 0 7
88359: PUSH
88360: EMPTY
88361: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88362: LD_ADDR_VAR 0 5
88366: PUSH
88367: DOUBLE
88368: LD_INT 1
88370: DEC
88371: ST_TO_ADDR
88372: LD_VAR 0 8
88376: PUSH
88377: FOR_TO
88378: IFFALSE 88573
// begin _d := rand ( 0 , 5 ) ;
88380: LD_ADDR_VAR 0 11
88384: PUSH
88385: LD_INT 0
88387: PPUSH
88388: LD_INT 5
88390: PPUSH
88391: CALL_OW 12
88395: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
88396: LD_ADDR_VAR 0 12
88400: PUSH
88401: LD_INT 2
88403: PPUSH
88404: LD_INT 6
88406: PPUSH
88407: CALL_OW 12
88411: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88412: LD_ADDR_VAR 0 9
88416: PUSH
88417: LD_VAR 0 2
88421: PPUSH
88422: LD_VAR 0 11
88426: PPUSH
88427: LD_VAR 0 12
88431: PPUSH
88432: CALL_OW 272
88436: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88437: LD_ADDR_VAR 0 10
88441: PUSH
88442: LD_VAR 0 3
88446: PPUSH
88447: LD_VAR 0 11
88451: PPUSH
88452: LD_VAR 0 12
88456: PPUSH
88457: CALL_OW 273
88461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88462: LD_VAR 0 9
88466: PPUSH
88467: LD_VAR 0 10
88471: PPUSH
88472: CALL_OW 488
88476: PUSH
88477: LD_VAR 0 9
88481: PUSH
88482: LD_VAR 0 10
88486: PUSH
88487: EMPTY
88488: LIST
88489: LIST
88490: PUSH
88491: LD_VAR 0 7
88495: IN
88496: NOT
88497: AND
88498: PUSH
88499: LD_VAR 0 9
88503: PPUSH
88504: LD_VAR 0 10
88508: PPUSH
88509: CALL_OW 458
88513: NOT
88514: AND
88515: IFFALSE 88557
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88517: LD_ADDR_VAR 0 7
88521: PUSH
88522: LD_VAR 0 7
88526: PPUSH
88527: LD_VAR 0 7
88531: PUSH
88532: LD_INT 1
88534: PLUS
88535: PPUSH
88536: LD_VAR 0 9
88540: PUSH
88541: LD_VAR 0 10
88545: PUSH
88546: EMPTY
88547: LIST
88548: LIST
88549: PPUSH
88550: CALL_OW 1
88554: ST_TO_ADDR
88555: GO 88571
// i := i - 1 ;
88557: LD_ADDR_VAR 0 5
88561: PUSH
88562: LD_VAR 0 5
88566: PUSH
88567: LD_INT 1
88569: MINUS
88570: ST_TO_ADDR
// end ;
88571: GO 88377
88573: POP
88574: POP
// for i in tmp do
88575: LD_ADDR_VAR 0 5
88579: PUSH
88580: LD_VAR 0 7
88584: PUSH
88585: FOR_IN
88586: IFFALSE 88624
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88588: LD_VAR 0 1
88592: PPUSH
88593: LD_VAR 0 5
88597: PUSH
88598: LD_INT 1
88600: ARRAY
88601: PPUSH
88602: LD_VAR 0 5
88606: PUSH
88607: LD_INT 2
88609: ARRAY
88610: PPUSH
88611: CALL 87570 0 3
88615: NOT
88616: IFFALSE 88622
// exit ;
88618: POP
88619: POP
88620: GO 88626
88622: GO 88585
88624: POP
88625: POP
// end ;
88626: LD_VAR 0 4
88630: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88631: LD_INT 0
88633: PPUSH
88634: PPUSH
88635: PPUSH
88636: PPUSH
88637: PPUSH
88638: PPUSH
88639: PPUSH
// if not GetClass ( unit ) = class_sniper then
88640: LD_VAR 0 1
88644: PPUSH
88645: CALL_OW 257
88649: PUSH
88650: LD_INT 5
88652: EQUAL
88653: NOT
88654: IFFALSE 88658
// exit ;
88656: GO 89046
// dist := 8 ;
88658: LD_ADDR_VAR 0 5
88662: PUSH
88663: LD_INT 8
88665: ST_TO_ADDR
// viewRange := 12 ;
88666: LD_ADDR_VAR 0 7
88670: PUSH
88671: LD_INT 12
88673: ST_TO_ADDR
// side := GetSide ( unit ) ;
88674: LD_ADDR_VAR 0 6
88678: PUSH
88679: LD_VAR 0 1
88683: PPUSH
88684: CALL_OW 255
88688: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88689: LD_INT 61
88691: PPUSH
88692: LD_VAR 0 6
88696: PPUSH
88697: CALL_OW 321
88701: PUSH
88702: LD_INT 2
88704: EQUAL
88705: IFFALSE 88715
// viewRange := 16 ;
88707: LD_ADDR_VAR 0 7
88711: PUSH
88712: LD_INT 16
88714: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88715: LD_VAR 0 1
88719: PPUSH
88720: LD_VAR 0 2
88724: PPUSH
88725: LD_VAR 0 3
88729: PPUSH
88730: CALL_OW 297
88734: PUSH
88735: LD_VAR 0 5
88739: GREATER
88740: IFFALSE 88819
// begin ComMoveXY ( unit , x , y ) ;
88742: LD_VAR 0 1
88746: PPUSH
88747: LD_VAR 0 2
88751: PPUSH
88752: LD_VAR 0 3
88756: PPUSH
88757: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88761: LD_INT 35
88763: PPUSH
88764: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88768: LD_VAR 0 1
88772: PPUSH
88773: LD_VAR 0 2
88777: PPUSH
88778: LD_VAR 0 3
88782: PPUSH
88783: CALL 80006 0 3
88787: NOT
88788: IFFALSE 88792
// exit ;
88790: GO 89046
// until GetDistUnitXY ( unit , x , y ) < dist ;
88792: LD_VAR 0 1
88796: PPUSH
88797: LD_VAR 0 2
88801: PPUSH
88802: LD_VAR 0 3
88806: PPUSH
88807: CALL_OW 297
88811: PUSH
88812: LD_VAR 0 5
88816: LESS
88817: IFFALSE 88761
// end ; ComTurnXY ( unit , x , y ) ;
88819: LD_VAR 0 1
88823: PPUSH
88824: LD_VAR 0 2
88828: PPUSH
88829: LD_VAR 0 3
88833: PPUSH
88834: CALL_OW 118
// wait ( 5 ) ;
88838: LD_INT 5
88840: PPUSH
88841: CALL_OW 67
// _d := GetDir ( unit ) ;
88845: LD_ADDR_VAR 0 10
88849: PUSH
88850: LD_VAR 0 1
88854: PPUSH
88855: CALL_OW 254
88859: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88860: LD_ADDR_VAR 0 8
88864: PUSH
88865: LD_VAR 0 1
88869: PPUSH
88870: CALL_OW 250
88874: PPUSH
88875: LD_VAR 0 10
88879: PPUSH
88880: LD_VAR 0 5
88884: PPUSH
88885: CALL_OW 272
88889: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88890: LD_ADDR_VAR 0 9
88894: PUSH
88895: LD_VAR 0 1
88899: PPUSH
88900: CALL_OW 251
88904: PPUSH
88905: LD_VAR 0 10
88909: PPUSH
88910: LD_VAR 0 5
88914: PPUSH
88915: CALL_OW 273
88919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88920: LD_VAR 0 8
88924: PPUSH
88925: LD_VAR 0 9
88929: PPUSH
88930: CALL_OW 488
88934: NOT
88935: IFFALSE 88939
// exit ;
88937: GO 89046
// ComAnimCustom ( unit , 1 ) ;
88939: LD_VAR 0 1
88943: PPUSH
88944: LD_INT 1
88946: PPUSH
88947: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88951: LD_VAR 0 8
88955: PPUSH
88956: LD_VAR 0 9
88960: PPUSH
88961: LD_VAR 0 6
88965: PPUSH
88966: LD_VAR 0 7
88970: PPUSH
88971: CALL_OW 330
// repeat wait ( 1 ) ;
88975: LD_INT 1
88977: PPUSH
88978: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88982: LD_VAR 0 1
88986: PPUSH
88987: CALL_OW 316
88991: PUSH
88992: LD_VAR 0 1
88996: PPUSH
88997: CALL_OW 314
89001: OR
89002: PUSH
89003: LD_VAR 0 1
89007: PPUSH
89008: CALL_OW 302
89012: NOT
89013: OR
89014: PUSH
89015: LD_VAR 0 1
89019: PPUSH
89020: CALL_OW 301
89024: OR
89025: IFFALSE 88975
// RemoveSeeing ( _x , _y , side ) ;
89027: LD_VAR 0 8
89031: PPUSH
89032: LD_VAR 0 9
89036: PPUSH
89037: LD_VAR 0 6
89041: PPUSH
89042: CALL_OW 331
// end ; end_of_file
89046: LD_VAR 0 4
89050: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89051: LD_VAR 0 1
89055: PUSH
89056: LD_INT 200
89058: DOUBLE
89059: GREATEREQUAL
89060: IFFALSE 89068
89062: LD_INT 299
89064: DOUBLE
89065: LESSEQUAL
89066: IFTRUE 89070
89068: GO 89102
89070: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89071: LD_VAR 0 1
89075: PPUSH
89076: LD_VAR 0 2
89080: PPUSH
89081: LD_VAR 0 3
89085: PPUSH
89086: LD_VAR 0 4
89090: PPUSH
89091: LD_VAR 0 5
89095: PPUSH
89096: CALL 85138 0 5
89100: GO 89179
89102: LD_INT 300
89104: DOUBLE
89105: GREATEREQUAL
89106: IFFALSE 89114
89108: LD_INT 399
89110: DOUBLE
89111: LESSEQUAL
89112: IFTRUE 89116
89114: GO 89178
89116: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89117: LD_VAR 0 1
89121: PPUSH
89122: LD_VAR 0 2
89126: PPUSH
89127: LD_VAR 0 3
89131: PPUSH
89132: LD_VAR 0 4
89136: PPUSH
89137: LD_VAR 0 5
89141: PPUSH
89142: LD_VAR 0 6
89146: PPUSH
89147: LD_VAR 0 7
89151: PPUSH
89152: LD_VAR 0 8
89156: PPUSH
89157: LD_VAR 0 9
89161: PPUSH
89162: LD_VAR 0 10
89166: PPUSH
89167: LD_VAR 0 11
89171: PPUSH
89172: CALL 40438 0 11
89176: GO 89179
89178: POP
// end ;
89179: PPOPN 11
89181: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89182: LD_VAR 0 1
89186: PPUSH
89187: LD_VAR 0 2
89191: PPUSH
89192: LD_VAR 0 3
89196: PPUSH
89197: LD_VAR 0 4
89201: PPUSH
89202: LD_VAR 0 5
89206: PPUSH
89207: CALL 84874 0 5
// end ;
89211: PPOPN 5
89213: END
