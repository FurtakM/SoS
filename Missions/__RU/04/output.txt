// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// every 0 0$1 do
18606: GO 18608
18608: DISABLE
// begin enable ;
18609: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18610: LD_STRING updateTimer(
18612: PUSH
18613: LD_OWVAR 1
18617: STR
18618: PUSH
18619: LD_STRING );
18621: STR
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// export function SOS_MapStart ( ) ; begin
18628: LD_INT 0
18630: PPUSH
// if streamModeActive then
18631: LD_EXP 66
18635: IFFALSE 18644
// DefineStreamItems ( true ) ;
18637: LD_INT 1
18639: PPUSH
18640: CALL 20298 0 1
// UpdateFactoryWaypoints ( ) ;
18644: CALL 33159 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18648: CALL 33416 0 0
// end ;
18652: LD_VAR 0 1
18656: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18657: LD_INT 0
18659: PPUSH
// if p2 = 100 then
18660: LD_VAR 0 2
18664: PUSH
18665: LD_INT 100
18667: EQUAL
18668: IFFALSE 19671
// begin if not StreamModeActive then
18670: LD_EXP 66
18674: NOT
18675: IFFALSE 18685
// StreamModeActive := true ;
18677: LD_ADDR_EXP 66
18681: PUSH
18682: LD_INT 1
18684: ST_TO_ADDR
// if p3 = 0 then
18685: LD_VAR 0 3
18689: PUSH
18690: LD_INT 0
18692: EQUAL
18693: IFFALSE 18699
// InitStreamMode ;
18695: CALL 19834 0 0
// if p3 = 1 then
18699: LD_VAR 0 3
18703: PUSH
18704: LD_INT 1
18706: EQUAL
18707: IFFALSE 18717
// sRocket := true ;
18709: LD_ADDR_EXP 71
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// if p3 = 2 then
18717: LD_VAR 0 3
18721: PUSH
18722: LD_INT 2
18724: EQUAL
18725: IFFALSE 18735
// sSpeed := true ;
18727: LD_ADDR_EXP 70
18731: PUSH
18732: LD_INT 1
18734: ST_TO_ADDR
// if p3 = 3 then
18735: LD_VAR 0 3
18739: PUSH
18740: LD_INT 3
18742: EQUAL
18743: IFFALSE 18753
// sEngine := true ;
18745: LD_ADDR_EXP 72
18749: PUSH
18750: LD_INT 1
18752: ST_TO_ADDR
// if p3 = 4 then
18753: LD_VAR 0 3
18757: PUSH
18758: LD_INT 4
18760: EQUAL
18761: IFFALSE 18771
// sSpec := true ;
18763: LD_ADDR_EXP 69
18767: PUSH
18768: LD_INT 1
18770: ST_TO_ADDR
// if p3 = 5 then
18771: LD_VAR 0 3
18775: PUSH
18776: LD_INT 5
18778: EQUAL
18779: IFFALSE 18789
// sLevel := true ;
18781: LD_ADDR_EXP 73
18785: PUSH
18786: LD_INT 1
18788: ST_TO_ADDR
// if p3 = 6 then
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 6
18796: EQUAL
18797: IFFALSE 18807
// sArmoury := true ;
18799: LD_ADDR_EXP 74
18803: PUSH
18804: LD_INT 1
18806: ST_TO_ADDR
// if p3 = 7 then
18807: LD_VAR 0 3
18811: PUSH
18812: LD_INT 7
18814: EQUAL
18815: IFFALSE 18825
// sRadar := true ;
18817: LD_ADDR_EXP 75
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
// if p3 = 8 then
18825: LD_VAR 0 3
18829: PUSH
18830: LD_INT 8
18832: EQUAL
18833: IFFALSE 18843
// sBunker := true ;
18835: LD_ADDR_EXP 76
18839: PUSH
18840: LD_INT 1
18842: ST_TO_ADDR
// if p3 = 9 then
18843: LD_VAR 0 3
18847: PUSH
18848: LD_INT 9
18850: EQUAL
18851: IFFALSE 18861
// sHack := true ;
18853: LD_ADDR_EXP 77
18857: PUSH
18858: LD_INT 1
18860: ST_TO_ADDR
// if p3 = 10 then
18861: LD_VAR 0 3
18865: PUSH
18866: LD_INT 10
18868: EQUAL
18869: IFFALSE 18879
// sFire := true ;
18871: LD_ADDR_EXP 78
18875: PUSH
18876: LD_INT 1
18878: ST_TO_ADDR
// if p3 = 11 then
18879: LD_VAR 0 3
18883: PUSH
18884: LD_INT 11
18886: EQUAL
18887: IFFALSE 18897
// sRefresh := true ;
18889: LD_ADDR_EXP 79
18893: PUSH
18894: LD_INT 1
18896: ST_TO_ADDR
// if p3 = 12 then
18897: LD_VAR 0 3
18901: PUSH
18902: LD_INT 12
18904: EQUAL
18905: IFFALSE 18915
// sExp := true ;
18907: LD_ADDR_EXP 80
18911: PUSH
18912: LD_INT 1
18914: ST_TO_ADDR
// if p3 = 13 then
18915: LD_VAR 0 3
18919: PUSH
18920: LD_INT 13
18922: EQUAL
18923: IFFALSE 18933
// sDepot := true ;
18925: LD_ADDR_EXP 81
18929: PUSH
18930: LD_INT 1
18932: ST_TO_ADDR
// if p3 = 14 then
18933: LD_VAR 0 3
18937: PUSH
18938: LD_INT 14
18940: EQUAL
18941: IFFALSE 18951
// sFlag := true ;
18943: LD_ADDR_EXP 82
18947: PUSH
18948: LD_INT 1
18950: ST_TO_ADDR
// if p3 = 15 then
18951: LD_VAR 0 3
18955: PUSH
18956: LD_INT 15
18958: EQUAL
18959: IFFALSE 18969
// sKamikadze := true ;
18961: LD_ADDR_EXP 90
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// if p3 = 16 then
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 16
18976: EQUAL
18977: IFFALSE 18987
// sTroll := true ;
18979: LD_ADDR_EXP 91
18983: PUSH
18984: LD_INT 1
18986: ST_TO_ADDR
// if p3 = 17 then
18987: LD_VAR 0 3
18991: PUSH
18992: LD_INT 17
18994: EQUAL
18995: IFFALSE 19005
// sSlow := true ;
18997: LD_ADDR_EXP 92
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
// if p3 = 18 then
19005: LD_VAR 0 3
19009: PUSH
19010: LD_INT 18
19012: EQUAL
19013: IFFALSE 19023
// sLack := true ;
19015: LD_ADDR_EXP 93
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// if p3 = 19 then
19023: LD_VAR 0 3
19027: PUSH
19028: LD_INT 19
19030: EQUAL
19031: IFFALSE 19041
// sTank := true ;
19033: LD_ADDR_EXP 95
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
// if p3 = 20 then
19041: LD_VAR 0 3
19045: PUSH
19046: LD_INT 20
19048: EQUAL
19049: IFFALSE 19059
// sRemote := true ;
19051: LD_ADDR_EXP 96
19055: PUSH
19056: LD_INT 1
19058: ST_TO_ADDR
// if p3 = 21 then
19059: LD_VAR 0 3
19063: PUSH
19064: LD_INT 21
19066: EQUAL
19067: IFFALSE 19077
// sPowell := true ;
19069: LD_ADDR_EXP 97
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// if p3 = 22 then
19077: LD_VAR 0 3
19081: PUSH
19082: LD_INT 22
19084: EQUAL
19085: IFFALSE 19095
// sTeleport := true ;
19087: LD_ADDR_EXP 100
19091: PUSH
19092: LD_INT 1
19094: ST_TO_ADDR
// if p3 = 23 then
19095: LD_VAR 0 3
19099: PUSH
19100: LD_INT 23
19102: EQUAL
19103: IFFALSE 19113
// sOilTower := true ;
19105: LD_ADDR_EXP 102
19109: PUSH
19110: LD_INT 1
19112: ST_TO_ADDR
// if p3 = 24 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 24
19120: EQUAL
19121: IFFALSE 19131
// sShovel := true ;
19123: LD_ADDR_EXP 103
19127: PUSH
19128: LD_INT 1
19130: ST_TO_ADDR
// if p3 = 25 then
19131: LD_VAR 0 3
19135: PUSH
19136: LD_INT 25
19138: EQUAL
19139: IFFALSE 19149
// sSheik := true ;
19141: LD_ADDR_EXP 104
19145: PUSH
19146: LD_INT 1
19148: ST_TO_ADDR
// if p3 = 26 then
19149: LD_VAR 0 3
19153: PUSH
19154: LD_INT 26
19156: EQUAL
19157: IFFALSE 19167
// sEarthquake := true ;
19159: LD_ADDR_EXP 106
19163: PUSH
19164: LD_INT 1
19166: ST_TO_ADDR
// if p3 = 27 then
19167: LD_VAR 0 3
19171: PUSH
19172: LD_INT 27
19174: EQUAL
19175: IFFALSE 19185
// sAI := true ;
19177: LD_ADDR_EXP 107
19181: PUSH
19182: LD_INT 1
19184: ST_TO_ADDR
// if p3 = 28 then
19185: LD_VAR 0 3
19189: PUSH
19190: LD_INT 28
19192: EQUAL
19193: IFFALSE 19203
// sCargo := true ;
19195: LD_ADDR_EXP 110
19199: PUSH
19200: LD_INT 1
19202: ST_TO_ADDR
// if p3 = 29 then
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 29
19210: EQUAL
19211: IFFALSE 19221
// sDLaser := true ;
19213: LD_ADDR_EXP 111
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 30 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 30
19228: EQUAL
19229: IFFALSE 19239
// sExchange := true ;
19231: LD_ADDR_EXP 112
19235: PUSH
19236: LD_INT 1
19238: ST_TO_ADDR
// if p3 = 31 then
19239: LD_VAR 0 3
19243: PUSH
19244: LD_INT 31
19246: EQUAL
19247: IFFALSE 19257
// sFac := true ;
19249: LD_ADDR_EXP 113
19253: PUSH
19254: LD_INT 1
19256: ST_TO_ADDR
// if p3 = 32 then
19257: LD_VAR 0 3
19261: PUSH
19262: LD_INT 32
19264: EQUAL
19265: IFFALSE 19275
// sPower := true ;
19267: LD_ADDR_EXP 114
19271: PUSH
19272: LD_INT 1
19274: ST_TO_ADDR
// if p3 = 33 then
19275: LD_VAR 0 3
19279: PUSH
19280: LD_INT 33
19282: EQUAL
19283: IFFALSE 19293
// sRandom := true ;
19285: LD_ADDR_EXP 115
19289: PUSH
19290: LD_INT 1
19292: ST_TO_ADDR
// if p3 = 34 then
19293: LD_VAR 0 3
19297: PUSH
19298: LD_INT 34
19300: EQUAL
19301: IFFALSE 19311
// sShield := true ;
19303: LD_ADDR_EXP 116
19307: PUSH
19308: LD_INT 1
19310: ST_TO_ADDR
// if p3 = 35 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_INT 35
19318: EQUAL
19319: IFFALSE 19329
// sTime := true ;
19321: LD_ADDR_EXP 117
19325: PUSH
19326: LD_INT 1
19328: ST_TO_ADDR
// if p3 = 36 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 36
19336: EQUAL
19337: IFFALSE 19347
// sTools := true ;
19339: LD_ADDR_EXP 118
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// if p3 = 101 then
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 101
19354: EQUAL
19355: IFFALSE 19365
// sSold := true ;
19357: LD_ADDR_EXP 83
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if p3 = 102 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 102
19372: EQUAL
19373: IFFALSE 19383
// sDiff := true ;
19375: LD_ADDR_EXP 84
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 103 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 103
19390: EQUAL
19391: IFFALSE 19401
// sFog := true ;
19393: LD_ADDR_EXP 87
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 104 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 104
19408: EQUAL
19409: IFFALSE 19419
// sReset := true ;
19411: LD_ADDR_EXP 88
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 105 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 105
19426: EQUAL
19427: IFFALSE 19437
// sSun := true ;
19429: LD_ADDR_EXP 89
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 106 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 106
19444: EQUAL
19445: IFFALSE 19455
// sTiger := true ;
19447: LD_ADDR_EXP 85
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 107 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 107
19462: EQUAL
19463: IFFALSE 19473
// sBomb := true ;
19465: LD_ADDR_EXP 86
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 108 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 108
19480: EQUAL
19481: IFFALSE 19491
// sWound := true ;
19483: LD_ADDR_EXP 94
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 109 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 109
19498: EQUAL
19499: IFFALSE 19509
// sBetray := true ;
19501: LD_ADDR_EXP 98
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 110 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 110
19516: EQUAL
19517: IFFALSE 19527
// sContamin := true ;
19519: LD_ADDR_EXP 99
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 111 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 111
19534: EQUAL
19535: IFFALSE 19545
// sOil := true ;
19537: LD_ADDR_EXP 101
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 112 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 112
19552: EQUAL
19553: IFFALSE 19563
// sStu := true ;
19555: LD_ADDR_EXP 105
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 113 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 113
19570: EQUAL
19571: IFFALSE 19581
// sBazooka := true ;
19573: LD_ADDR_EXP 108
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 114 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 114
19588: EQUAL
19589: IFFALSE 19599
// sMortar := true ;
19591: LD_ADDR_EXP 109
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 115 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 115
19606: EQUAL
19607: IFFALSE 19617
// sRanger := true ;
19609: LD_ADDR_EXP 119
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 116 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 116
19624: EQUAL
19625: IFFALSE 19635
// sComputer := true ;
19627: LD_ADDR_EXP 120
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 117 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 117
19642: EQUAL
19643: IFFALSE 19653
// s30 := true ;
19645: LD_ADDR_EXP 121
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 118 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 118
19660: EQUAL
19661: IFFALSE 19671
// s60 := true ;
19663: LD_ADDR_EXP 122
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// end ; if p2 = 101 then
19671: LD_VAR 0 2
19675: PUSH
19676: LD_INT 101
19678: EQUAL
19679: IFFALSE 19807
// begin case p3 of 1 :
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 1
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19701
19694: POP
// hHackUnlimitedResources ; 2 :
19695: CALL 31905 0 0
19699: GO 19807
19701: LD_INT 2
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19716
19709: POP
// hHackSetLevel10 ; 3 :
19710: CALL 32038 0 0
19714: GO 19807
19716: LD_INT 3
19718: DOUBLE
19719: EQUAL
19720: IFTRUE 19724
19722: GO 19731
19724: POP
// hHackSetLevel10YourUnits ; 4 :
19725: CALL 32123 0 0
19729: GO 19807
19731: LD_INT 4
19733: DOUBLE
19734: EQUAL
19735: IFTRUE 19739
19737: GO 19746
19739: POP
// hHackInvincible ; 5 :
19740: CALL 32571 0 0
19744: GO 19807
19746: LD_INT 5
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19761
19754: POP
// hHackInvisible ; 6 :
19755: CALL 32682 0 0
19759: GO 19807
19761: LD_INT 6
19763: DOUBLE
19764: EQUAL
19765: IFTRUE 19769
19767: GO 19776
19769: POP
// hHackChangeYourSide ; 7 :
19770: CALL 32739 0 0
19774: GO 19807
19776: LD_INT 7
19778: DOUBLE
19779: EQUAL
19780: IFTRUE 19784
19782: GO 19791
19784: POP
// hHackChangeUnitSide ; 8 :
19785: CALL 32781 0 0
19789: GO 19807
19791: LD_INT 8
19793: DOUBLE
19794: EQUAL
19795: IFTRUE 19799
19797: GO 19806
19799: POP
// hHackFog ; end ;
19800: CALL 32882 0 0
19804: GO 19807
19806: POP
// end ; end ;
19807: LD_VAR 0 7
19811: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19812: GO 19814
19814: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19815: LD_STRING initStreamRollete();
19817: PPUSH
19818: CALL_OW 559
// InitStreamMode ;
19822: CALL 19834 0 0
// DefineStreamItems ( false ) ;
19826: LD_INT 0
19828: PPUSH
19829: CALL 20298 0 1
// end ;
19833: END
// function InitStreamMode ; begin
19834: LD_INT 0
19836: PPUSH
// streamModeActive := false ;
19837: LD_ADDR_EXP 66
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// normalCounter := 36 ;
19845: LD_ADDR_EXP 67
19849: PUSH
19850: LD_INT 36
19852: ST_TO_ADDR
// hardcoreCounter := 18 ;
19853: LD_ADDR_EXP 68
19857: PUSH
19858: LD_INT 18
19860: ST_TO_ADDR
// sRocket := false ;
19861: LD_ADDR_EXP 71
19865: PUSH
19866: LD_INT 0
19868: ST_TO_ADDR
// sSpeed := false ;
19869: LD_ADDR_EXP 70
19873: PUSH
19874: LD_INT 0
19876: ST_TO_ADDR
// sEngine := false ;
19877: LD_ADDR_EXP 72
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// sSpec := false ;
19885: LD_ADDR_EXP 69
19889: PUSH
19890: LD_INT 0
19892: ST_TO_ADDR
// sLevel := false ;
19893: LD_ADDR_EXP 73
19897: PUSH
19898: LD_INT 0
19900: ST_TO_ADDR
// sArmoury := false ;
19901: LD_ADDR_EXP 74
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// sRadar := false ;
19909: LD_ADDR_EXP 75
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// sBunker := false ;
19917: LD_ADDR_EXP 76
19921: PUSH
19922: LD_INT 0
19924: ST_TO_ADDR
// sHack := false ;
19925: LD_ADDR_EXP 77
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// sFire := false ;
19933: LD_ADDR_EXP 78
19937: PUSH
19938: LD_INT 0
19940: ST_TO_ADDR
// sRefresh := false ;
19941: LD_ADDR_EXP 79
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// sExp := false ;
19949: LD_ADDR_EXP 80
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// sDepot := false ;
19957: LD_ADDR_EXP 81
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// sFlag := false ;
19965: LD_ADDR_EXP 82
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sKamikadze := false ;
19973: LD_ADDR_EXP 90
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// sTroll := false ;
19981: LD_ADDR_EXP 91
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// sSlow := false ;
19989: LD_ADDR_EXP 92
19993: PUSH
19994: LD_INT 0
19996: ST_TO_ADDR
// sLack := false ;
19997: LD_ADDR_EXP 93
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// sTank := false ;
20005: LD_ADDR_EXP 95
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// sRemote := false ;
20013: LD_ADDR_EXP 96
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
// sPowell := false ;
20021: LD_ADDR_EXP 97
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// sTeleport := false ;
20029: LD_ADDR_EXP 100
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// sOilTower := false ;
20037: LD_ADDR_EXP 102
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// sShovel := false ;
20045: LD_ADDR_EXP 103
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// sSheik := false ;
20053: LD_ADDR_EXP 104
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// sEarthquake := false ;
20061: LD_ADDR_EXP 106
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// sAI := false ;
20069: LD_ADDR_EXP 107
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// sCargo := false ;
20077: LD_ADDR_EXP 110
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// sDLaser := false ;
20085: LD_ADDR_EXP 111
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// sExchange := false ;
20093: LD_ADDR_EXP 112
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// sFac := false ;
20101: LD_ADDR_EXP 113
20105: PUSH
20106: LD_INT 0
20108: ST_TO_ADDR
// sPower := false ;
20109: LD_ADDR_EXP 114
20113: PUSH
20114: LD_INT 0
20116: ST_TO_ADDR
// sRandom := false ;
20117: LD_ADDR_EXP 115
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
// sShield := false ;
20125: LD_ADDR_EXP 116
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// sTime := false ;
20133: LD_ADDR_EXP 117
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// sTools := false ;
20141: LD_ADDR_EXP 118
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// sSold := false ;
20149: LD_ADDR_EXP 83
20153: PUSH
20154: LD_INT 0
20156: ST_TO_ADDR
// sDiff := false ;
20157: LD_ADDR_EXP 84
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// sFog := false ;
20165: LD_ADDR_EXP 87
20169: PUSH
20170: LD_INT 0
20172: ST_TO_ADDR
// sReset := false ;
20173: LD_ADDR_EXP 88
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// sSun := false ;
20181: LD_ADDR_EXP 89
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// sTiger := false ;
20189: LD_ADDR_EXP 85
20193: PUSH
20194: LD_INT 0
20196: ST_TO_ADDR
// sBomb := false ;
20197: LD_ADDR_EXP 86
20201: PUSH
20202: LD_INT 0
20204: ST_TO_ADDR
// sWound := false ;
20205: LD_ADDR_EXP 94
20209: PUSH
20210: LD_INT 0
20212: ST_TO_ADDR
// sBetray := false ;
20213: LD_ADDR_EXP 98
20217: PUSH
20218: LD_INT 0
20220: ST_TO_ADDR
// sContamin := false ;
20221: LD_ADDR_EXP 99
20225: PUSH
20226: LD_INT 0
20228: ST_TO_ADDR
// sOil := false ;
20229: LD_ADDR_EXP 101
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// sStu := false ;
20237: LD_ADDR_EXP 105
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// sBazooka := false ;
20245: LD_ADDR_EXP 108
20249: PUSH
20250: LD_INT 0
20252: ST_TO_ADDR
// sMortar := false ;
20253: LD_ADDR_EXP 109
20257: PUSH
20258: LD_INT 0
20260: ST_TO_ADDR
// sRanger := false ;
20261: LD_ADDR_EXP 119
20265: PUSH
20266: LD_INT 0
20268: ST_TO_ADDR
// sComputer := false ;
20269: LD_ADDR_EXP 120
20273: PUSH
20274: LD_INT 0
20276: ST_TO_ADDR
// s30 := false ;
20277: LD_ADDR_EXP 121
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// s60 := false ;
20285: LD_ADDR_EXP 122
20289: PUSH
20290: LD_INT 0
20292: ST_TO_ADDR
// end ;
20293: LD_VAR 0 1
20297: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
20306: PPUSH
// result := [ ] ;
20307: LD_ADDR_VAR 0 2
20311: PUSH
20312: EMPTY
20313: ST_TO_ADDR
// if campaign_id = 1 then
20314: LD_OWVAR 69
20318: PUSH
20319: LD_INT 1
20321: EQUAL
20322: IFFALSE 23488
// begin case mission_number of 1 :
20324: LD_OWVAR 70
20328: PUSH
20329: LD_INT 1
20331: DOUBLE
20332: EQUAL
20333: IFTRUE 20337
20335: GO 20413
20337: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20338: LD_ADDR_VAR 0 2
20342: PUSH
20343: LD_INT 2
20345: PUSH
20346: LD_INT 4
20348: PUSH
20349: LD_INT 11
20351: PUSH
20352: LD_INT 12
20354: PUSH
20355: LD_INT 15
20357: PUSH
20358: LD_INT 16
20360: PUSH
20361: LD_INT 22
20363: PUSH
20364: LD_INT 23
20366: PUSH
20367: LD_INT 26
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 101
20383: PUSH
20384: LD_INT 102
20386: PUSH
20387: LD_INT 106
20389: PUSH
20390: LD_INT 116
20392: PUSH
20393: LD_INT 117
20395: PUSH
20396: LD_INT 118
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: ST_TO_ADDR
20411: GO 23486
20413: LD_INT 2
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20505
20421: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20422: LD_ADDR_VAR 0 2
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 4
20432: PUSH
20433: LD_INT 11
20435: PUSH
20436: LD_INT 12
20438: PUSH
20439: LD_INT 15
20441: PUSH
20442: LD_INT 16
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_INT 23
20450: PUSH
20451: LD_INT 26
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 101
20467: PUSH
20468: LD_INT 102
20470: PUSH
20471: LD_INT 105
20473: PUSH
20474: LD_INT 106
20476: PUSH
20477: LD_INT 108
20479: PUSH
20480: LD_INT 116
20482: PUSH
20483: LD_INT 117
20485: PUSH
20486: LD_INT 118
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: ST_TO_ADDR
20503: GO 23486
20505: LD_INT 3
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20601
20513: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20514: LD_ADDR_VAR 0 2
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: LD_INT 4
20524: PUSH
20525: LD_INT 5
20527: PUSH
20528: LD_INT 11
20530: PUSH
20531: LD_INT 12
20533: PUSH
20534: LD_INT 15
20536: PUSH
20537: LD_INT 16
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 26
20545: PUSH
20546: LD_INT 36
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 101
20563: PUSH
20564: LD_INT 102
20566: PUSH
20567: LD_INT 105
20569: PUSH
20570: LD_INT 106
20572: PUSH
20573: LD_INT 108
20575: PUSH
20576: LD_INT 116
20578: PUSH
20579: LD_INT 117
20581: PUSH
20582: LD_INT 118
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: ST_TO_ADDR
20599: GO 23486
20601: LD_INT 4
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20705
20609: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20610: LD_ADDR_VAR 0 2
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 4
20620: PUSH
20621: LD_INT 5
20623: PUSH
20624: LD_INT 8
20626: PUSH
20627: LD_INT 11
20629: PUSH
20630: LD_INT 12
20632: PUSH
20633: LD_INT 15
20635: PUSH
20636: LD_INT 16
20638: PUSH
20639: LD_INT 22
20641: PUSH
20642: LD_INT 23
20644: PUSH
20645: LD_INT 26
20647: PUSH
20648: LD_INT 36
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 101
20667: PUSH
20668: LD_INT 102
20670: PUSH
20671: LD_INT 105
20673: PUSH
20674: LD_INT 106
20676: PUSH
20677: LD_INT 108
20679: PUSH
20680: LD_INT 116
20682: PUSH
20683: LD_INT 117
20685: PUSH
20686: LD_INT 118
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: ST_TO_ADDR
20703: GO 23486
20705: LD_INT 5
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20825
20713: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20714: LD_ADDR_VAR 0 2
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 4
20724: PUSH
20725: LD_INT 5
20727: PUSH
20728: LD_INT 6
20730: PUSH
20731: LD_INT 8
20733: PUSH
20734: LD_INT 11
20736: PUSH
20737: LD_INT 12
20739: PUSH
20740: LD_INT 15
20742: PUSH
20743: LD_INT 16
20745: PUSH
20746: LD_INT 22
20748: PUSH
20749: LD_INT 23
20751: PUSH
20752: LD_INT 25
20754: PUSH
20755: LD_INT 26
20757: PUSH
20758: LD_INT 36
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 101
20779: PUSH
20780: LD_INT 102
20782: PUSH
20783: LD_INT 105
20785: PUSH
20786: LD_INT 106
20788: PUSH
20789: LD_INT 108
20791: PUSH
20792: LD_INT 109
20794: PUSH
20795: LD_INT 112
20797: PUSH
20798: LD_INT 116
20800: PUSH
20801: LD_INT 117
20803: PUSH
20804: LD_INT 118
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: ST_TO_ADDR
20823: GO 23486
20825: LD_INT 6
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20965
20833: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20834: LD_ADDR_VAR 0 2
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 4
20844: PUSH
20845: LD_INT 5
20847: PUSH
20848: LD_INT 6
20850: PUSH
20851: LD_INT 8
20853: PUSH
20854: LD_INT 11
20856: PUSH
20857: LD_INT 12
20859: PUSH
20860: LD_INT 15
20862: PUSH
20863: LD_INT 16
20865: PUSH
20866: LD_INT 20
20868: PUSH
20869: LD_INT 21
20871: PUSH
20872: LD_INT 22
20874: PUSH
20875: LD_INT 23
20877: PUSH
20878: LD_INT 25
20880: PUSH
20881: LD_INT 26
20883: PUSH
20884: LD_INT 30
20886: PUSH
20887: LD_INT 31
20889: PUSH
20890: LD_INT 32
20892: PUSH
20893: LD_INT 36
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 101
20919: PUSH
20920: LD_INT 102
20922: PUSH
20923: LD_INT 105
20925: PUSH
20926: LD_INT 106
20928: PUSH
20929: LD_INT 108
20931: PUSH
20932: LD_INT 109
20934: PUSH
20935: LD_INT 112
20937: PUSH
20938: LD_INT 116
20940: PUSH
20941: LD_INT 117
20943: PUSH
20944: LD_INT 118
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: ST_TO_ADDR
20963: GO 23486
20965: LD_INT 7
20967: DOUBLE
20968: EQUAL
20969: IFTRUE 20973
20971: GO 21085
20973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20974: LD_ADDR_VAR 0 2
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: LD_INT 4
20984: PUSH
20985: LD_INT 5
20987: PUSH
20988: LD_INT 7
20990: PUSH
20991: LD_INT 11
20993: PUSH
20994: LD_INT 12
20996: PUSH
20997: LD_INT 15
20999: PUSH
21000: LD_INT 16
21002: PUSH
21003: LD_INT 20
21005: PUSH
21006: LD_INT 21
21008: PUSH
21009: LD_INT 22
21011: PUSH
21012: LD_INT 23
21014: PUSH
21015: LD_INT 25
21017: PUSH
21018: LD_INT 26
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 101
21039: PUSH
21040: LD_INT 102
21042: PUSH
21043: LD_INT 103
21045: PUSH
21046: LD_INT 105
21048: PUSH
21049: LD_INT 106
21051: PUSH
21052: LD_INT 108
21054: PUSH
21055: LD_INT 112
21057: PUSH
21058: LD_INT 116
21060: PUSH
21061: LD_INT 117
21063: PUSH
21064: LD_INT 118
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: ST_TO_ADDR
21083: GO 23486
21085: LD_INT 8
21087: DOUBLE
21088: EQUAL
21089: IFTRUE 21093
21091: GO 21233
21093: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21094: LD_ADDR_VAR 0 2
21098: PUSH
21099: LD_INT 2
21101: PUSH
21102: LD_INT 4
21104: PUSH
21105: LD_INT 5
21107: PUSH
21108: LD_INT 6
21110: PUSH
21111: LD_INT 7
21113: PUSH
21114: LD_INT 8
21116: PUSH
21117: LD_INT 11
21119: PUSH
21120: LD_INT 12
21122: PUSH
21123: LD_INT 15
21125: PUSH
21126: LD_INT 16
21128: PUSH
21129: LD_INT 20
21131: PUSH
21132: LD_INT 21
21134: PUSH
21135: LD_INT 22
21137: PUSH
21138: LD_INT 23
21140: PUSH
21141: LD_INT 25
21143: PUSH
21144: LD_INT 26
21146: PUSH
21147: LD_INT 30
21149: PUSH
21150: LD_INT 31
21152: PUSH
21153: LD_INT 32
21155: PUSH
21156: LD_INT 36
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 101
21183: PUSH
21184: LD_INT 102
21186: PUSH
21187: LD_INT 103
21189: PUSH
21190: LD_INT 105
21192: PUSH
21193: LD_INT 106
21195: PUSH
21196: LD_INT 108
21198: PUSH
21199: LD_INT 109
21201: PUSH
21202: LD_INT 112
21204: PUSH
21205: LD_INT 116
21207: PUSH
21208: LD_INT 117
21210: PUSH
21211: LD_INT 118
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: ST_TO_ADDR
21231: GO 23486
21233: LD_INT 9
21235: DOUBLE
21236: EQUAL
21237: IFTRUE 21241
21239: GO 21389
21241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21242: LD_ADDR_VAR 0 2
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: LD_INT 4
21252: PUSH
21253: LD_INT 5
21255: PUSH
21256: LD_INT 6
21258: PUSH
21259: LD_INT 7
21261: PUSH
21262: LD_INT 8
21264: PUSH
21265: LD_INT 11
21267: PUSH
21268: LD_INT 12
21270: PUSH
21271: LD_INT 15
21273: PUSH
21274: LD_INT 16
21276: PUSH
21277: LD_INT 20
21279: PUSH
21280: LD_INT 21
21282: PUSH
21283: LD_INT 22
21285: PUSH
21286: LD_INT 23
21288: PUSH
21289: LD_INT 25
21291: PUSH
21292: LD_INT 26
21294: PUSH
21295: LD_INT 28
21297: PUSH
21298: LD_INT 30
21300: PUSH
21301: LD_INT 31
21303: PUSH
21304: LD_INT 32
21306: PUSH
21307: LD_INT 36
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 101
21335: PUSH
21336: LD_INT 102
21338: PUSH
21339: LD_INT 103
21341: PUSH
21342: LD_INT 105
21344: PUSH
21345: LD_INT 106
21347: PUSH
21348: LD_INT 108
21350: PUSH
21351: LD_INT 109
21353: PUSH
21354: LD_INT 112
21356: PUSH
21357: LD_INT 114
21359: PUSH
21360: LD_INT 116
21362: PUSH
21363: LD_INT 117
21365: PUSH
21366: LD_INT 118
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: ST_TO_ADDR
21387: GO 23486
21389: LD_INT 10
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21593
21397: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_INT 2
21405: PUSH
21406: LD_INT 4
21408: PUSH
21409: LD_INT 5
21411: PUSH
21412: LD_INT 6
21414: PUSH
21415: LD_INT 7
21417: PUSH
21418: LD_INT 8
21420: PUSH
21421: LD_INT 9
21423: PUSH
21424: LD_INT 10
21426: PUSH
21427: LD_INT 11
21429: PUSH
21430: LD_INT 12
21432: PUSH
21433: LD_INT 13
21435: PUSH
21436: LD_INT 14
21438: PUSH
21439: LD_INT 15
21441: PUSH
21442: LD_INT 16
21444: PUSH
21445: LD_INT 17
21447: PUSH
21448: LD_INT 18
21450: PUSH
21451: LD_INT 19
21453: PUSH
21454: LD_INT 20
21456: PUSH
21457: LD_INT 21
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_INT 23
21465: PUSH
21466: LD_INT 24
21468: PUSH
21469: LD_INT 25
21471: PUSH
21472: LD_INT 26
21474: PUSH
21475: LD_INT 28
21477: PUSH
21478: LD_INT 30
21480: PUSH
21481: LD_INT 31
21483: PUSH
21484: LD_INT 32
21486: PUSH
21487: LD_INT 36
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 101
21523: PUSH
21524: LD_INT 102
21526: PUSH
21527: LD_INT 103
21529: PUSH
21530: LD_INT 104
21532: PUSH
21533: LD_INT 105
21535: PUSH
21536: LD_INT 106
21538: PUSH
21539: LD_INT 107
21541: PUSH
21542: LD_INT 108
21544: PUSH
21545: LD_INT 109
21547: PUSH
21548: LD_INT 110
21550: PUSH
21551: LD_INT 111
21553: PUSH
21554: LD_INT 112
21556: PUSH
21557: LD_INT 114
21559: PUSH
21560: LD_INT 116
21562: PUSH
21563: LD_INT 117
21565: PUSH
21566: LD_INT 118
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: ST_TO_ADDR
21591: GO 23486
21593: LD_INT 11
21595: DOUBLE
21596: EQUAL
21597: IFTRUE 21601
21599: GO 21805
21601: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: LD_INT 3
21612: PUSH
21613: LD_INT 4
21615: PUSH
21616: LD_INT 5
21618: PUSH
21619: LD_INT 6
21621: PUSH
21622: LD_INT 7
21624: PUSH
21625: LD_INT 8
21627: PUSH
21628: LD_INT 9
21630: PUSH
21631: LD_INT 10
21633: PUSH
21634: LD_INT 11
21636: PUSH
21637: LD_INT 12
21639: PUSH
21640: LD_INT 13
21642: PUSH
21643: LD_INT 14
21645: PUSH
21646: LD_INT 15
21648: PUSH
21649: LD_INT 16
21651: PUSH
21652: LD_INT 17
21654: PUSH
21655: LD_INT 18
21657: PUSH
21658: LD_INT 19
21660: PUSH
21661: LD_INT 20
21663: PUSH
21664: LD_INT 21
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_INT 23
21672: PUSH
21673: LD_INT 24
21675: PUSH
21676: LD_INT 25
21678: PUSH
21679: LD_INT 26
21681: PUSH
21682: LD_INT 28
21684: PUSH
21685: LD_INT 30
21687: PUSH
21688: LD_INT 31
21690: PUSH
21691: LD_INT 32
21693: PUSH
21694: LD_INT 34
21696: PUSH
21697: LD_INT 36
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 101
21735: PUSH
21736: LD_INT 102
21738: PUSH
21739: LD_INT 103
21741: PUSH
21742: LD_INT 104
21744: PUSH
21745: LD_INT 105
21747: PUSH
21748: LD_INT 106
21750: PUSH
21751: LD_INT 107
21753: PUSH
21754: LD_INT 108
21756: PUSH
21757: LD_INT 109
21759: PUSH
21760: LD_INT 110
21762: PUSH
21763: LD_INT 111
21765: PUSH
21766: LD_INT 112
21768: PUSH
21769: LD_INT 114
21771: PUSH
21772: LD_INT 116
21774: PUSH
21775: LD_INT 117
21777: PUSH
21778: LD_INT 118
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: ST_TO_ADDR
21803: GO 23486
21805: LD_INT 12
21807: DOUBLE
21808: EQUAL
21809: IFTRUE 21813
21811: GO 22033
21813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21814: LD_ADDR_VAR 0 2
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: LD_INT 4
21830: PUSH
21831: LD_INT 5
21833: PUSH
21834: LD_INT 6
21836: PUSH
21837: LD_INT 7
21839: PUSH
21840: LD_INT 8
21842: PUSH
21843: LD_INT 9
21845: PUSH
21846: LD_INT 10
21848: PUSH
21849: LD_INT 11
21851: PUSH
21852: LD_INT 12
21854: PUSH
21855: LD_INT 13
21857: PUSH
21858: LD_INT 14
21860: PUSH
21861: LD_INT 15
21863: PUSH
21864: LD_INT 16
21866: PUSH
21867: LD_INT 17
21869: PUSH
21870: LD_INT 18
21872: PUSH
21873: LD_INT 19
21875: PUSH
21876: LD_INT 20
21878: PUSH
21879: LD_INT 21
21881: PUSH
21882: LD_INT 22
21884: PUSH
21885: LD_INT 23
21887: PUSH
21888: LD_INT 24
21890: PUSH
21891: LD_INT 25
21893: PUSH
21894: LD_INT 26
21896: PUSH
21897: LD_INT 27
21899: PUSH
21900: LD_INT 28
21902: PUSH
21903: LD_INT 30
21905: PUSH
21906: LD_INT 31
21908: PUSH
21909: LD_INT 32
21911: PUSH
21912: LD_INT 33
21914: PUSH
21915: LD_INT 34
21917: PUSH
21918: LD_INT 36
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 101
21959: PUSH
21960: LD_INT 102
21962: PUSH
21963: LD_INT 103
21965: PUSH
21966: LD_INT 104
21968: PUSH
21969: LD_INT 105
21971: PUSH
21972: LD_INT 106
21974: PUSH
21975: LD_INT 107
21977: PUSH
21978: LD_INT 108
21980: PUSH
21981: LD_INT 109
21983: PUSH
21984: LD_INT 110
21986: PUSH
21987: LD_INT 111
21989: PUSH
21990: LD_INT 112
21992: PUSH
21993: LD_INT 113
21995: PUSH
21996: LD_INT 114
21998: PUSH
21999: LD_INT 116
22001: PUSH
22002: LD_INT 117
22004: PUSH
22005: LD_INT 118
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: ST_TO_ADDR
22031: GO 23486
22033: LD_INT 13
22035: DOUBLE
22036: EQUAL
22037: IFTRUE 22041
22039: GO 22249
22041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22042: LD_ADDR_VAR 0 2
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 3
22055: PUSH
22056: LD_INT 4
22058: PUSH
22059: LD_INT 5
22061: PUSH
22062: LD_INT 8
22064: PUSH
22065: LD_INT 9
22067: PUSH
22068: LD_INT 10
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 14
22079: PUSH
22080: LD_INT 15
22082: PUSH
22083: LD_INT 16
22085: PUSH
22086: LD_INT 17
22088: PUSH
22089: LD_INT 18
22091: PUSH
22092: LD_INT 19
22094: PUSH
22095: LD_INT 20
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 24
22109: PUSH
22110: LD_INT 25
22112: PUSH
22113: LD_INT 26
22115: PUSH
22116: LD_INT 27
22118: PUSH
22119: LD_INT 28
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 31
22127: PUSH
22128: LD_INT 32
22130: PUSH
22131: LD_INT 33
22133: PUSH
22134: LD_INT 34
22136: PUSH
22137: LD_INT 36
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 101
22175: PUSH
22176: LD_INT 102
22178: PUSH
22179: LD_INT 103
22181: PUSH
22182: LD_INT 104
22184: PUSH
22185: LD_INT 105
22187: PUSH
22188: LD_INT 106
22190: PUSH
22191: LD_INT 107
22193: PUSH
22194: LD_INT 108
22196: PUSH
22197: LD_INT 109
22199: PUSH
22200: LD_INT 110
22202: PUSH
22203: LD_INT 111
22205: PUSH
22206: LD_INT 112
22208: PUSH
22209: LD_INT 113
22211: PUSH
22212: LD_INT 114
22214: PUSH
22215: LD_INT 116
22217: PUSH
22218: LD_INT 117
22220: PUSH
22221: LD_INT 118
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: ST_TO_ADDR
22247: GO 23486
22249: LD_INT 14
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22481
22257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 3
22271: PUSH
22272: LD_INT 4
22274: PUSH
22275: LD_INT 5
22277: PUSH
22278: LD_INT 6
22280: PUSH
22281: LD_INT 7
22283: PUSH
22284: LD_INT 8
22286: PUSH
22287: LD_INT 9
22289: PUSH
22290: LD_INT 10
22292: PUSH
22293: LD_INT 11
22295: PUSH
22296: LD_INT 12
22298: PUSH
22299: LD_INT 13
22301: PUSH
22302: LD_INT 14
22304: PUSH
22305: LD_INT 15
22307: PUSH
22308: LD_INT 16
22310: PUSH
22311: LD_INT 17
22313: PUSH
22314: LD_INT 18
22316: PUSH
22317: LD_INT 19
22319: PUSH
22320: LD_INT 20
22322: PUSH
22323: LD_INT 21
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_INT 23
22331: PUSH
22332: LD_INT 24
22334: PUSH
22335: LD_INT 25
22337: PUSH
22338: LD_INT 26
22340: PUSH
22341: LD_INT 27
22343: PUSH
22344: LD_INT 28
22346: PUSH
22347: LD_INT 29
22349: PUSH
22350: LD_INT 30
22352: PUSH
22353: LD_INT 31
22355: PUSH
22356: LD_INT 32
22358: PUSH
22359: LD_INT 33
22361: PUSH
22362: LD_INT 34
22364: PUSH
22365: LD_INT 36
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 101
22407: PUSH
22408: LD_INT 102
22410: PUSH
22411: LD_INT 103
22413: PUSH
22414: LD_INT 104
22416: PUSH
22417: LD_INT 105
22419: PUSH
22420: LD_INT 106
22422: PUSH
22423: LD_INT 107
22425: PUSH
22426: LD_INT 108
22428: PUSH
22429: LD_INT 109
22431: PUSH
22432: LD_INT 110
22434: PUSH
22435: LD_INT 111
22437: PUSH
22438: LD_INT 112
22440: PUSH
22441: LD_INT 113
22443: PUSH
22444: LD_INT 114
22446: PUSH
22447: LD_INT 116
22449: PUSH
22450: LD_INT 117
22452: PUSH
22453: LD_INT 118
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: ST_TO_ADDR
22479: GO 23486
22481: LD_INT 15
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22713
22489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22490: LD_ADDR_VAR 0 2
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: LD_INT 3
22503: PUSH
22504: LD_INT 4
22506: PUSH
22507: LD_INT 5
22509: PUSH
22510: LD_INT 6
22512: PUSH
22513: LD_INT 7
22515: PUSH
22516: LD_INT 8
22518: PUSH
22519: LD_INT 9
22521: PUSH
22522: LD_INT 10
22524: PUSH
22525: LD_INT 11
22527: PUSH
22528: LD_INT 12
22530: PUSH
22531: LD_INT 13
22533: PUSH
22534: LD_INT 14
22536: PUSH
22537: LD_INT 15
22539: PUSH
22540: LD_INT 16
22542: PUSH
22543: LD_INT 17
22545: PUSH
22546: LD_INT 18
22548: PUSH
22549: LD_INT 19
22551: PUSH
22552: LD_INT 20
22554: PUSH
22555: LD_INT 21
22557: PUSH
22558: LD_INT 22
22560: PUSH
22561: LD_INT 23
22563: PUSH
22564: LD_INT 24
22566: PUSH
22567: LD_INT 25
22569: PUSH
22570: LD_INT 26
22572: PUSH
22573: LD_INT 27
22575: PUSH
22576: LD_INT 28
22578: PUSH
22579: LD_INT 29
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 31
22587: PUSH
22588: LD_INT 32
22590: PUSH
22591: LD_INT 33
22593: PUSH
22594: LD_INT 34
22596: PUSH
22597: LD_INT 36
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 101
22639: PUSH
22640: LD_INT 102
22642: PUSH
22643: LD_INT 103
22645: PUSH
22646: LD_INT 104
22648: PUSH
22649: LD_INT 105
22651: PUSH
22652: LD_INT 106
22654: PUSH
22655: LD_INT 107
22657: PUSH
22658: LD_INT 108
22660: PUSH
22661: LD_INT 109
22663: PUSH
22664: LD_INT 110
22666: PUSH
22667: LD_INT 111
22669: PUSH
22670: LD_INT 112
22672: PUSH
22673: LD_INT 113
22675: PUSH
22676: LD_INT 114
22678: PUSH
22679: LD_INT 116
22681: PUSH
22682: LD_INT 117
22684: PUSH
22685: LD_INT 118
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: ST_TO_ADDR
22711: GO 23486
22713: LD_INT 16
22715: DOUBLE
22716: EQUAL
22717: IFTRUE 22721
22719: GO 22857
22721: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22722: LD_ADDR_VAR 0 2
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 4
22732: PUSH
22733: LD_INT 5
22735: PUSH
22736: LD_INT 7
22738: PUSH
22739: LD_INT 11
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 15
22747: PUSH
22748: LD_INT 16
22750: PUSH
22751: LD_INT 20
22753: PUSH
22754: LD_INT 21
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 23
22762: PUSH
22763: LD_INT 25
22765: PUSH
22766: LD_INT 26
22768: PUSH
22769: LD_INT 30
22771: PUSH
22772: LD_INT 31
22774: PUSH
22775: LD_INT 32
22777: PUSH
22778: LD_INT 33
22780: PUSH
22781: LD_INT 34
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 101
22807: PUSH
22808: LD_INT 102
22810: PUSH
22811: LD_INT 103
22813: PUSH
22814: LD_INT 106
22816: PUSH
22817: LD_INT 108
22819: PUSH
22820: LD_INT 112
22822: PUSH
22823: LD_INT 113
22825: PUSH
22826: LD_INT 114
22828: PUSH
22829: LD_INT 116
22831: PUSH
22832: LD_INT 117
22834: PUSH
22835: LD_INT 118
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: ST_TO_ADDR
22855: GO 23486
22857: LD_INT 17
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 23089
22865: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22866: LD_ADDR_VAR 0 2
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 3
22879: PUSH
22880: LD_INT 4
22882: PUSH
22883: LD_INT 5
22885: PUSH
22886: LD_INT 6
22888: PUSH
22889: LD_INT 7
22891: PUSH
22892: LD_INT 8
22894: PUSH
22895: LD_INT 9
22897: PUSH
22898: LD_INT 10
22900: PUSH
22901: LD_INT 11
22903: PUSH
22904: LD_INT 12
22906: PUSH
22907: LD_INT 13
22909: PUSH
22910: LD_INT 14
22912: PUSH
22913: LD_INT 15
22915: PUSH
22916: LD_INT 16
22918: PUSH
22919: LD_INT 17
22921: PUSH
22922: LD_INT 18
22924: PUSH
22925: LD_INT 19
22927: PUSH
22928: LD_INT 20
22930: PUSH
22931: LD_INT 21
22933: PUSH
22934: LD_INT 22
22936: PUSH
22937: LD_INT 23
22939: PUSH
22940: LD_INT 24
22942: PUSH
22943: LD_INT 25
22945: PUSH
22946: LD_INT 26
22948: PUSH
22949: LD_INT 27
22951: PUSH
22952: LD_INT 28
22954: PUSH
22955: LD_INT 29
22957: PUSH
22958: LD_INT 30
22960: PUSH
22961: LD_INT 31
22963: PUSH
22964: LD_INT 32
22966: PUSH
22967: LD_INT 33
22969: PUSH
22970: LD_INT 34
22972: PUSH
22973: LD_INT 36
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 101
23015: PUSH
23016: LD_INT 102
23018: PUSH
23019: LD_INT 103
23021: PUSH
23022: LD_INT 104
23024: PUSH
23025: LD_INT 105
23027: PUSH
23028: LD_INT 106
23030: PUSH
23031: LD_INT 107
23033: PUSH
23034: LD_INT 108
23036: PUSH
23037: LD_INT 109
23039: PUSH
23040: LD_INT 110
23042: PUSH
23043: LD_INT 111
23045: PUSH
23046: LD_INT 112
23048: PUSH
23049: LD_INT 113
23051: PUSH
23052: LD_INT 114
23054: PUSH
23055: LD_INT 116
23057: PUSH
23058: LD_INT 117
23060: PUSH
23061: LD_INT 118
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: ST_TO_ADDR
23087: GO 23486
23089: LD_INT 18
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23245
23097: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23098: LD_ADDR_VAR 0 2
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 4
23108: PUSH
23109: LD_INT 5
23111: PUSH
23112: LD_INT 7
23114: PUSH
23115: LD_INT 11
23117: PUSH
23118: LD_INT 12
23120: PUSH
23121: LD_INT 15
23123: PUSH
23124: LD_INT 16
23126: PUSH
23127: LD_INT 20
23129: PUSH
23130: LD_INT 21
23132: PUSH
23133: LD_INT 22
23135: PUSH
23136: LD_INT 23
23138: PUSH
23139: LD_INT 25
23141: PUSH
23142: LD_INT 26
23144: PUSH
23145: LD_INT 30
23147: PUSH
23148: LD_INT 31
23150: PUSH
23151: LD_INT 32
23153: PUSH
23154: LD_INT 33
23156: PUSH
23157: LD_INT 34
23159: PUSH
23160: LD_INT 35
23162: PUSH
23163: LD_INT 36
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 101
23191: PUSH
23192: LD_INT 102
23194: PUSH
23195: LD_INT 103
23197: PUSH
23198: LD_INT 106
23200: PUSH
23201: LD_INT 108
23203: PUSH
23204: LD_INT 112
23206: PUSH
23207: LD_INT 113
23209: PUSH
23210: LD_INT 114
23212: PUSH
23213: LD_INT 115
23215: PUSH
23216: LD_INT 116
23218: PUSH
23219: LD_INT 117
23221: PUSH
23222: LD_INT 118
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: ST_TO_ADDR
23243: GO 23486
23245: LD_INT 19
23247: DOUBLE
23248: EQUAL
23249: IFTRUE 23253
23251: GO 23485
23253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23254: LD_ADDR_VAR 0 2
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 3
23267: PUSH
23268: LD_INT 4
23270: PUSH
23271: LD_INT 5
23273: PUSH
23274: LD_INT 6
23276: PUSH
23277: LD_INT 7
23279: PUSH
23280: LD_INT 8
23282: PUSH
23283: LD_INT 9
23285: PUSH
23286: LD_INT 10
23288: PUSH
23289: LD_INT 11
23291: PUSH
23292: LD_INT 12
23294: PUSH
23295: LD_INT 13
23297: PUSH
23298: LD_INT 14
23300: PUSH
23301: LD_INT 15
23303: PUSH
23304: LD_INT 16
23306: PUSH
23307: LD_INT 17
23309: PUSH
23310: LD_INT 18
23312: PUSH
23313: LD_INT 19
23315: PUSH
23316: LD_INT 20
23318: PUSH
23319: LD_INT 21
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_INT 23
23327: PUSH
23328: LD_INT 24
23330: PUSH
23331: LD_INT 25
23333: PUSH
23334: LD_INT 26
23336: PUSH
23337: LD_INT 27
23339: PUSH
23340: LD_INT 28
23342: PUSH
23343: LD_INT 29
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: LD_INT 33
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: LD_INT 35
23363: PUSH
23364: LD_INT 36
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 101
23407: PUSH
23408: LD_INT 102
23410: PUSH
23411: LD_INT 103
23413: PUSH
23414: LD_INT 104
23416: PUSH
23417: LD_INT 105
23419: PUSH
23420: LD_INT 106
23422: PUSH
23423: LD_INT 107
23425: PUSH
23426: LD_INT 108
23428: PUSH
23429: LD_INT 109
23431: PUSH
23432: LD_INT 110
23434: PUSH
23435: LD_INT 111
23437: PUSH
23438: LD_INT 112
23440: PUSH
23441: LD_INT 113
23443: PUSH
23444: LD_INT 114
23446: PUSH
23447: LD_INT 115
23449: PUSH
23450: LD_INT 116
23452: PUSH
23453: LD_INT 117
23455: PUSH
23456: LD_INT 118
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: ST_TO_ADDR
23483: GO 23486
23485: POP
// end else
23486: GO 23717
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23488: LD_ADDR_VAR 0 2
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: LD_INT 3
23501: PUSH
23502: LD_INT 4
23504: PUSH
23505: LD_INT 5
23507: PUSH
23508: LD_INT 6
23510: PUSH
23511: LD_INT 7
23513: PUSH
23514: LD_INT 8
23516: PUSH
23517: LD_INT 9
23519: PUSH
23520: LD_INT 10
23522: PUSH
23523: LD_INT 11
23525: PUSH
23526: LD_INT 12
23528: PUSH
23529: LD_INT 13
23531: PUSH
23532: LD_INT 14
23534: PUSH
23535: LD_INT 15
23537: PUSH
23538: LD_INT 16
23540: PUSH
23541: LD_INT 17
23543: PUSH
23544: LD_INT 18
23546: PUSH
23547: LD_INT 19
23549: PUSH
23550: LD_INT 20
23552: PUSH
23553: LD_INT 21
23555: PUSH
23556: LD_INT 22
23558: PUSH
23559: LD_INT 23
23561: PUSH
23562: LD_INT 24
23564: PUSH
23565: LD_INT 25
23567: PUSH
23568: LD_INT 26
23570: PUSH
23571: LD_INT 27
23573: PUSH
23574: LD_INT 28
23576: PUSH
23577: LD_INT 29
23579: PUSH
23580: LD_INT 30
23582: PUSH
23583: LD_INT 31
23585: PUSH
23586: LD_INT 32
23588: PUSH
23589: LD_INT 33
23591: PUSH
23592: LD_INT 34
23594: PUSH
23595: LD_INT 35
23597: PUSH
23598: LD_INT 36
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 101
23641: PUSH
23642: LD_INT 102
23644: PUSH
23645: LD_INT 103
23647: PUSH
23648: LD_INT 104
23650: PUSH
23651: LD_INT 105
23653: PUSH
23654: LD_INT 106
23656: PUSH
23657: LD_INT 107
23659: PUSH
23660: LD_INT 108
23662: PUSH
23663: LD_INT 109
23665: PUSH
23666: LD_INT 110
23668: PUSH
23669: LD_INT 111
23671: PUSH
23672: LD_INT 112
23674: PUSH
23675: LD_INT 113
23677: PUSH
23678: LD_INT 114
23680: PUSH
23681: LD_INT 115
23683: PUSH
23684: LD_INT 116
23686: PUSH
23687: LD_INT 117
23689: PUSH
23690: LD_INT 118
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: ST_TO_ADDR
// if result then
23717: LD_VAR 0 2
23721: IFFALSE 24507
// begin normal :=  ;
23723: LD_ADDR_VAR 0 5
23727: PUSH
23728: LD_STRING 
23730: ST_TO_ADDR
// hardcore :=  ;
23731: LD_ADDR_VAR 0 6
23735: PUSH
23736: LD_STRING 
23738: ST_TO_ADDR
// active :=  ;
23739: LD_ADDR_VAR 0 7
23743: PUSH
23744: LD_STRING 
23746: ST_TO_ADDR
// for i = 1 to normalCounter do
23747: LD_ADDR_VAR 0 8
23751: PUSH
23752: DOUBLE
23753: LD_INT 1
23755: DEC
23756: ST_TO_ADDR
23757: LD_EXP 67
23761: PUSH
23762: FOR_TO
23763: IFFALSE 23864
// begin tmp := 0 ;
23765: LD_ADDR_VAR 0 3
23769: PUSH
23770: LD_STRING 0
23772: ST_TO_ADDR
// if result [ 1 ] then
23773: LD_VAR 0 2
23777: PUSH
23778: LD_INT 1
23780: ARRAY
23781: IFFALSE 23846
// if result [ 1 ] [ 1 ] = i then
23783: LD_VAR 0 2
23787: PUSH
23788: LD_INT 1
23790: ARRAY
23791: PUSH
23792: LD_INT 1
23794: ARRAY
23795: PUSH
23796: LD_VAR 0 8
23800: EQUAL
23801: IFFALSE 23846
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23803: LD_ADDR_VAR 0 2
23807: PUSH
23808: LD_VAR 0 2
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_INT 1
23823: ARRAY
23824: PPUSH
23825: LD_INT 1
23827: PPUSH
23828: CALL_OW 3
23832: PPUSH
23833: CALL_OW 1
23837: ST_TO_ADDR
// tmp := 1 ;
23838: LD_ADDR_VAR 0 3
23842: PUSH
23843: LD_STRING 1
23845: ST_TO_ADDR
// end ; normal := normal & tmp ;
23846: LD_ADDR_VAR 0 5
23850: PUSH
23851: LD_VAR 0 5
23855: PUSH
23856: LD_VAR 0 3
23860: STR
23861: ST_TO_ADDR
// end ;
23862: GO 23762
23864: POP
23865: POP
// for i = 1 to hardcoreCounter do
23866: LD_ADDR_VAR 0 8
23870: PUSH
23871: DOUBLE
23872: LD_INT 1
23874: DEC
23875: ST_TO_ADDR
23876: LD_EXP 68
23880: PUSH
23881: FOR_TO
23882: IFFALSE 23987
// begin tmp := 0 ;
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_STRING 0
23891: ST_TO_ADDR
// if result [ 2 ] then
23892: LD_VAR 0 2
23896: PUSH
23897: LD_INT 2
23899: ARRAY
23900: IFFALSE 23969
// if result [ 2 ] [ 1 ] = 100 + i then
23902: LD_VAR 0 2
23906: PUSH
23907: LD_INT 2
23909: ARRAY
23910: PUSH
23911: LD_INT 1
23913: ARRAY
23914: PUSH
23915: LD_INT 100
23917: PUSH
23918: LD_VAR 0 8
23922: PLUS
23923: EQUAL
23924: IFFALSE 23969
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23926: LD_ADDR_VAR 0 2
23930: PUSH
23931: LD_VAR 0 2
23935: PPUSH
23936: LD_INT 2
23938: PPUSH
23939: LD_VAR 0 2
23943: PUSH
23944: LD_INT 2
23946: ARRAY
23947: PPUSH
23948: LD_INT 1
23950: PPUSH
23951: CALL_OW 3
23955: PPUSH
23956: CALL_OW 1
23960: ST_TO_ADDR
// tmp := 1 ;
23961: LD_ADDR_VAR 0 3
23965: PUSH
23966: LD_STRING 1
23968: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23969: LD_ADDR_VAR 0 6
23973: PUSH
23974: LD_VAR 0 6
23978: PUSH
23979: LD_VAR 0 3
23983: STR
23984: ST_TO_ADDR
// end ;
23985: GO 23881
23987: POP
23988: POP
// if isGameLoad then
23989: LD_VAR 0 1
23993: IFFALSE 24468
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23995: LD_ADDR_VAR 0 4
23999: PUSH
24000: LD_EXP 71
24004: PUSH
24005: LD_EXP 70
24009: PUSH
24010: LD_EXP 72
24014: PUSH
24015: LD_EXP 69
24019: PUSH
24020: LD_EXP 73
24024: PUSH
24025: LD_EXP 74
24029: PUSH
24030: LD_EXP 75
24034: PUSH
24035: LD_EXP 76
24039: PUSH
24040: LD_EXP 77
24044: PUSH
24045: LD_EXP 78
24049: PUSH
24050: LD_EXP 79
24054: PUSH
24055: LD_EXP 80
24059: PUSH
24060: LD_EXP 81
24064: PUSH
24065: LD_EXP 82
24069: PUSH
24070: LD_EXP 90
24074: PUSH
24075: LD_EXP 91
24079: PUSH
24080: LD_EXP 92
24084: PUSH
24085: LD_EXP 93
24089: PUSH
24090: LD_EXP 95
24094: PUSH
24095: LD_EXP 96
24099: PUSH
24100: LD_EXP 97
24104: PUSH
24105: LD_EXP 100
24109: PUSH
24110: LD_EXP 102
24114: PUSH
24115: LD_EXP 103
24119: PUSH
24120: LD_EXP 104
24124: PUSH
24125: LD_EXP 106
24129: PUSH
24130: LD_EXP 107
24134: PUSH
24135: LD_EXP 110
24139: PUSH
24140: LD_EXP 111
24144: PUSH
24145: LD_EXP 112
24149: PUSH
24150: LD_EXP 113
24154: PUSH
24155: LD_EXP 114
24159: PUSH
24160: LD_EXP 115
24164: PUSH
24165: LD_EXP 116
24169: PUSH
24170: LD_EXP 117
24174: PUSH
24175: LD_EXP 118
24179: PUSH
24180: LD_EXP 83
24184: PUSH
24185: LD_EXP 84
24189: PUSH
24190: LD_EXP 87
24194: PUSH
24195: LD_EXP 88
24199: PUSH
24200: LD_EXP 89
24204: PUSH
24205: LD_EXP 85
24209: PUSH
24210: LD_EXP 86
24214: PUSH
24215: LD_EXP 94
24219: PUSH
24220: LD_EXP 98
24224: PUSH
24225: LD_EXP 99
24229: PUSH
24230: LD_EXP 101
24234: PUSH
24235: LD_EXP 105
24239: PUSH
24240: LD_EXP 108
24244: PUSH
24245: LD_EXP 109
24249: PUSH
24250: LD_EXP 119
24254: PUSH
24255: LD_EXP 120
24259: PUSH
24260: LD_EXP 121
24264: PUSH
24265: LD_EXP 122
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: ST_TO_ADDR
// tmp :=  ;
24326: LD_ADDR_VAR 0 3
24330: PUSH
24331: LD_STRING 
24333: ST_TO_ADDR
// for i = 1 to normalCounter do
24334: LD_ADDR_VAR 0 8
24338: PUSH
24339: DOUBLE
24340: LD_INT 1
24342: DEC
24343: ST_TO_ADDR
24344: LD_EXP 67
24348: PUSH
24349: FOR_TO
24350: IFFALSE 24386
// begin if flags [ i ] then
24352: LD_VAR 0 4
24356: PUSH
24357: LD_VAR 0 8
24361: ARRAY
24362: IFFALSE 24384
// tmp := tmp & i & ; ;
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_VAR 0 3
24373: PUSH
24374: LD_VAR 0 8
24378: STR
24379: PUSH
24380: LD_STRING ;
24382: STR
24383: ST_TO_ADDR
// end ;
24384: GO 24349
24386: POP
24387: POP
// for i = 1 to hardcoreCounter do
24388: LD_ADDR_VAR 0 8
24392: PUSH
24393: DOUBLE
24394: LD_INT 1
24396: DEC
24397: ST_TO_ADDR
24398: LD_EXP 68
24402: PUSH
24403: FOR_TO
24404: IFFALSE 24450
// begin if flags [ normalCounter + i ] then
24406: LD_VAR 0 4
24410: PUSH
24411: LD_EXP 67
24415: PUSH
24416: LD_VAR 0 8
24420: PLUS
24421: ARRAY
24422: IFFALSE 24448
// tmp := tmp & ( 100 + i ) & ; ;
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_VAR 0 3
24433: PUSH
24434: LD_INT 100
24436: PUSH
24437: LD_VAR 0 8
24441: PLUS
24442: STR
24443: PUSH
24444: LD_STRING ;
24446: STR
24447: ST_TO_ADDR
// end ;
24448: GO 24403
24450: POP
24451: POP
// if tmp then
24452: LD_VAR 0 3
24456: IFFALSE 24468
// active := tmp ;
24458: LD_ADDR_VAR 0 7
24462: PUSH
24463: LD_VAR 0 3
24467: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24468: LD_STRING getStreamItemsFromMission("
24470: PUSH
24471: LD_VAR 0 5
24475: STR
24476: PUSH
24477: LD_STRING ","
24479: STR
24480: PUSH
24481: LD_VAR 0 6
24485: STR
24486: PUSH
24487: LD_STRING ","
24489: STR
24490: PUSH
24491: LD_VAR 0 7
24495: STR
24496: PUSH
24497: LD_STRING ")
24499: STR
24500: PPUSH
24501: CALL_OW 559
// end else
24505: GO 24514
// ToLua ( getStreamItemsFromMission("","","") ) ;
24507: LD_STRING getStreamItemsFromMission("","","")
24509: PPUSH
24510: CALL_OW 559
// end ;
24514: LD_VAR 0 2
24518: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24519: LD_EXP 66
24523: PUSH
24524: LD_EXP 71
24528: AND
24529: IFFALSE 24653
24531: GO 24533
24533: DISABLE
24534: LD_INT 0
24536: PPUSH
24537: PPUSH
// begin enable ;
24538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24539: LD_ADDR_VAR 0 2
24543: PUSH
24544: LD_INT 22
24546: PUSH
24547: LD_OWVAR 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: LD_INT 34
24561: PUSH
24562: LD_INT 7
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 34
24571: PUSH
24572: LD_INT 45
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 34
24581: PUSH
24582: LD_INT 28
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 34
24591: PUSH
24592: LD_INT 47
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PPUSH
24610: CALL_OW 69
24614: ST_TO_ADDR
// if not tmp then
24615: LD_VAR 0 2
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 24653
// for i in tmp do
24624: LD_ADDR_VAR 0 1
24628: PUSH
24629: LD_VAR 0 2
24633: PUSH
24634: FOR_IN
24635: IFFALSE 24651
// begin SetLives ( i , 0 ) ;
24637: LD_VAR 0 1
24641: PPUSH
24642: LD_INT 0
24644: PPUSH
24645: CALL_OW 234
// end ;
24649: GO 24634
24651: POP
24652: POP
// end ;
24653: PPOPN 2
24655: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24656: LD_EXP 66
24660: PUSH
24661: LD_EXP 72
24665: AND
24666: IFFALSE 24750
24668: GO 24670
24670: DISABLE
24671: LD_INT 0
24673: PPUSH
24674: PPUSH
// begin enable ;
24675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24676: LD_ADDR_VAR 0 2
24680: PUSH
24681: LD_INT 22
24683: PUSH
24684: LD_OWVAR 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 32
24695: PUSH
24696: LD_INT 3
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: ST_TO_ADDR
// if not tmp then
24712: LD_VAR 0 2
24716: NOT
24717: IFFALSE 24721
// exit ;
24719: GO 24750
// for i in tmp do
24721: LD_ADDR_VAR 0 1
24725: PUSH
24726: LD_VAR 0 2
24730: PUSH
24731: FOR_IN
24732: IFFALSE 24748
// begin SetLives ( i , 0 ) ;
24734: LD_VAR 0 1
24738: PPUSH
24739: LD_INT 0
24741: PPUSH
24742: CALL_OW 234
// end ;
24746: GO 24731
24748: POP
24749: POP
// end ;
24750: PPOPN 2
24752: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24753: LD_EXP 66
24757: PUSH
24758: LD_EXP 69
24762: AND
24763: IFFALSE 24856
24765: GO 24767
24767: DISABLE
24768: LD_INT 0
24770: PPUSH
// begin enable ;
24771: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24772: LD_ADDR_VAR 0 1
24776: PUSH
24777: LD_INT 22
24779: PUSH
24780: LD_OWVAR 2
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: LD_INT 25
24794: PUSH
24795: LD_INT 5
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 25
24804: PUSH
24805: LD_INT 9
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 25
24814: PUSH
24815: LD_INT 8
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PPUSH
24832: CALL_OW 69
24836: PUSH
24837: FOR_IN
24838: IFFALSE 24854
// begin SetClass ( i , 1 ) ;
24840: LD_VAR 0 1
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL_OW 336
// end ;
24852: GO 24837
24854: POP
24855: POP
// end ;
24856: PPOPN 1
24858: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24859: LD_EXP 66
24863: PUSH
24864: LD_EXP 70
24868: AND
24869: PUSH
24870: LD_OWVAR 65
24874: PUSH
24875: LD_INT 7
24877: LESS
24878: AND
24879: IFFALSE 24893
24881: GO 24883
24883: DISABLE
// begin enable ;
24884: ENABLE
// game_speed := 7 ;
24885: LD_ADDR_OWVAR 65
24889: PUSH
24890: LD_INT 7
24892: ST_TO_ADDR
// end ;
24893: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24894: LD_EXP 66
24898: PUSH
24899: LD_EXP 73
24903: AND
24904: IFFALSE 25106
24906: GO 24908
24908: DISABLE
24909: LD_INT 0
24911: PPUSH
24912: PPUSH
24913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: LD_INT 81
24921: PUSH
24922: LD_OWVAR 2
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 21
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PPUSH
24945: CALL_OW 69
24949: ST_TO_ADDR
// if not tmp then
24950: LD_VAR 0 3
24954: NOT
24955: IFFALSE 24959
// exit ;
24957: GO 25106
// if tmp > 5 then
24959: LD_VAR 0 3
24963: PUSH
24964: LD_INT 5
24966: GREATER
24967: IFFALSE 24979
// k := 5 else
24969: LD_ADDR_VAR 0 2
24973: PUSH
24974: LD_INT 5
24976: ST_TO_ADDR
24977: GO 24989
// k := tmp ;
24979: LD_ADDR_VAR 0 2
24983: PUSH
24984: LD_VAR 0 3
24988: ST_TO_ADDR
// for i := 1 to k do
24989: LD_ADDR_VAR 0 1
24993: PUSH
24994: DOUBLE
24995: LD_INT 1
24997: DEC
24998: ST_TO_ADDR
24999: LD_VAR 0 2
25003: PUSH
25004: FOR_TO
25005: IFFALSE 25104
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25007: LD_VAR 0 3
25011: PUSH
25012: LD_VAR 0 1
25016: ARRAY
25017: PPUSH
25018: LD_VAR 0 1
25022: PUSH
25023: LD_INT 4
25025: MOD
25026: PUSH
25027: LD_INT 1
25029: PLUS
25030: PPUSH
25031: CALL_OW 259
25035: PUSH
25036: LD_INT 10
25038: LESS
25039: IFFALSE 25102
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25041: LD_VAR 0 3
25045: PUSH
25046: LD_VAR 0 1
25050: ARRAY
25051: PPUSH
25052: LD_VAR 0 1
25056: PUSH
25057: LD_INT 4
25059: MOD
25060: PUSH
25061: LD_INT 1
25063: PLUS
25064: PPUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_VAR 0 1
25074: ARRAY
25075: PPUSH
25076: LD_VAR 0 1
25080: PUSH
25081: LD_INT 4
25083: MOD
25084: PUSH
25085: LD_INT 1
25087: PLUS
25088: PPUSH
25089: CALL_OW 259
25093: PUSH
25094: LD_INT 1
25096: PLUS
25097: PPUSH
25098: CALL_OW 237
25102: GO 25004
25104: POP
25105: POP
// end ;
25106: PPOPN 3
25108: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25109: LD_EXP 66
25113: PUSH
25114: LD_EXP 74
25118: AND
25119: IFFALSE 25139
25121: GO 25123
25123: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25124: LD_INT 4
25126: PPUSH
25127: LD_OWVAR 2
25131: PPUSH
25132: LD_INT 0
25134: PPUSH
25135: CALL_OW 324
25139: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25140: LD_EXP 66
25144: PUSH
25145: LD_EXP 103
25149: AND
25150: IFFALSE 25170
25152: GO 25154
25154: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25155: LD_INT 19
25157: PPUSH
25158: LD_OWVAR 2
25162: PPUSH
25163: LD_INT 0
25165: PPUSH
25166: CALL_OW 324
25170: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25171: LD_EXP 66
25175: PUSH
25176: LD_EXP 75
25180: AND
25181: IFFALSE 25283
25183: GO 25185
25185: DISABLE
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
// begin enable ;
25190: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_OWVAR 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: LD_INT 34
25213: PUSH
25214: LD_INT 11
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 34
25223: PUSH
25224: LD_INT 30
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: ST_TO_ADDR
// if not tmp then
25245: LD_VAR 0 2
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 25283
// for i in tmp do
25254: LD_ADDR_VAR 0 1
25258: PUSH
25259: LD_VAR 0 2
25263: PUSH
25264: FOR_IN
25265: IFFALSE 25281
// begin SetLives ( i , 0 ) ;
25267: LD_VAR 0 1
25271: PPUSH
25272: LD_INT 0
25274: PPUSH
25275: CALL_OW 234
// end ;
25279: GO 25264
25281: POP
25282: POP
// end ;
25283: PPOPN 2
25285: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25286: LD_EXP 66
25290: PUSH
25291: LD_EXP 76
25295: AND
25296: IFFALSE 25316
25298: GO 25300
25300: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25301: LD_INT 32
25303: PPUSH
25304: LD_OWVAR 2
25308: PPUSH
25309: LD_INT 0
25311: PPUSH
25312: CALL_OW 324
25316: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25317: LD_EXP 66
25321: PUSH
25322: LD_EXP 77
25326: AND
25327: IFFALSE 25508
25329: GO 25331
25331: DISABLE
25332: LD_INT 0
25334: PPUSH
25335: PPUSH
25336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25337: LD_ADDR_VAR 0 2
25341: PUSH
25342: LD_INT 22
25344: PUSH
25345: LD_OWVAR 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 33
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: ST_TO_ADDR
// if not tmp then
25373: LD_VAR 0 2
25377: NOT
25378: IFFALSE 25382
// exit ;
25380: GO 25508
// side := 0 ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_INT 0
25389: ST_TO_ADDR
// for i := 1 to 8 do
25390: LD_ADDR_VAR 0 1
25394: PUSH
25395: DOUBLE
25396: LD_INT 1
25398: DEC
25399: ST_TO_ADDR
25400: LD_INT 8
25402: PUSH
25403: FOR_TO
25404: IFFALSE 25452
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25406: LD_OWVAR 2
25410: PUSH
25411: LD_VAR 0 1
25415: NONEQUAL
25416: PUSH
25417: LD_OWVAR 2
25421: PPUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 81
25431: PUSH
25432: LD_INT 2
25434: EQUAL
25435: AND
25436: IFFALSE 25450
// begin side := i ;
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: LD_VAR 0 1
25447: ST_TO_ADDR
// break ;
25448: GO 25452
// end ;
25450: GO 25403
25452: POP
25453: POP
// if not side then
25454: LD_VAR 0 3
25458: NOT
25459: IFFALSE 25463
// exit ;
25461: GO 25508
// for i := 1 to tmp do
25463: LD_ADDR_VAR 0 1
25467: PUSH
25468: DOUBLE
25469: LD_INT 1
25471: DEC
25472: ST_TO_ADDR
25473: LD_VAR 0 2
25477: PUSH
25478: FOR_TO
25479: IFFALSE 25506
// if Prob ( 60 ) then
25481: LD_INT 60
25483: PPUSH
25484: CALL_OW 13
25488: IFFALSE 25504
// SetSide ( i , side ) ;
25490: LD_VAR 0 1
25494: PPUSH
25495: LD_VAR 0 3
25499: PPUSH
25500: CALL_OW 235
25504: GO 25478
25506: POP
25507: POP
// end ;
25508: PPOPN 3
25510: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25511: LD_EXP 66
25515: PUSH
25516: LD_EXP 79
25520: AND
25521: IFFALSE 25640
25523: GO 25525
25525: DISABLE
25526: LD_INT 0
25528: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25529: LD_ADDR_VAR 0 1
25533: PUSH
25534: LD_INT 22
25536: PUSH
25537: LD_OWVAR 2
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 21
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: LD_INT 23
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: LIST
25577: PPUSH
25578: CALL_OW 69
25582: PUSH
25583: FOR_IN
25584: IFFALSE 25638
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25586: LD_VAR 0 1
25590: PPUSH
25591: CALL_OW 257
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 3
25604: PUSH
25605: LD_INT 4
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: IN
25614: IFFALSE 25636
// SetClass ( un , rand ( 1 , 4 ) ) ;
25616: LD_VAR 0 1
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: LD_INT 4
25626: PPUSH
25627: CALL_OW 12
25631: PPUSH
25632: CALL_OW 336
25636: GO 25583
25638: POP
25639: POP
// end ;
25640: PPOPN 1
25642: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25643: LD_EXP 66
25647: PUSH
25648: LD_EXP 78
25652: AND
25653: IFFALSE 25732
25655: GO 25657
25657: DISABLE
25658: LD_INT 0
25660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25661: LD_ADDR_VAR 0 1
25665: PUSH
25666: LD_INT 22
25668: PUSH
25669: LD_OWVAR 2
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 21
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PPUSH
25692: CALL_OW 69
25696: ST_TO_ADDR
// if not tmp then
25697: LD_VAR 0 1
25701: NOT
25702: IFFALSE 25706
// exit ;
25704: GO 25732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25706: LD_VAR 0 1
25710: PUSH
25711: LD_INT 1
25713: PPUSH
25714: LD_VAR 0 1
25718: PPUSH
25719: CALL_OW 12
25723: ARRAY
25724: PPUSH
25725: LD_INT 100
25727: PPUSH
25728: CALL_OW 234
// end ;
25732: PPOPN 1
25734: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25735: LD_EXP 66
25739: PUSH
25740: LD_EXP 80
25744: AND
25745: IFFALSE 25843
25747: GO 25749
25749: DISABLE
25750: LD_INT 0
25752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25753: LD_ADDR_VAR 0 1
25757: PUSH
25758: LD_INT 22
25760: PUSH
25761: LD_OWVAR 2
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 21
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PPUSH
25784: CALL_OW 69
25788: ST_TO_ADDR
// if not tmp then
25789: LD_VAR 0 1
25793: NOT
25794: IFFALSE 25798
// exit ;
25796: GO 25843
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25798: LD_VAR 0 1
25802: PUSH
25803: LD_INT 1
25805: PPUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 12
25815: ARRAY
25816: PPUSH
25817: LD_INT 1
25819: PPUSH
25820: LD_INT 4
25822: PPUSH
25823: CALL_OW 12
25827: PPUSH
25828: LD_INT 3000
25830: PPUSH
25831: LD_INT 9000
25833: PPUSH
25834: CALL_OW 12
25838: PPUSH
25839: CALL_OW 492
// end ;
25843: PPOPN 1
25845: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25846: LD_EXP 66
25850: PUSH
25851: LD_EXP 81
25855: AND
25856: IFFALSE 25876
25858: GO 25860
25860: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25861: LD_INT 1
25863: PPUSH
25864: LD_OWVAR 2
25868: PPUSH
25869: LD_INT 0
25871: PPUSH
25872: CALL_OW 324
25876: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25877: LD_EXP 66
25881: PUSH
25882: LD_EXP 82
25886: AND
25887: IFFALSE 25970
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25896: LD_ADDR_VAR 0 2
25900: PUSH
25901: LD_INT 22
25903: PUSH
25904: LD_OWVAR 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 3
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PPUSH
25927: CALL_OW 69
25931: ST_TO_ADDR
// if not tmp then
25932: LD_VAR 0 2
25936: NOT
25937: IFFALSE 25941
// exit ;
25939: GO 25970
// for i in tmp do
25941: LD_ADDR_VAR 0 1
25945: PUSH
25946: LD_VAR 0 2
25950: PUSH
25951: FOR_IN
25952: IFFALSE 25968
// SetBLevel ( i , 10 ) ;
25954: LD_VAR 0 1
25958: PPUSH
25959: LD_INT 10
25961: PPUSH
25962: CALL_OW 241
25966: GO 25951
25968: POP
25969: POP
// end ;
25970: PPOPN 2
25972: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25973: LD_EXP 66
25977: PUSH
25978: LD_EXP 83
25982: AND
25983: IFFALSE 26094
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
25992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_INT 22
26000: PUSH
26001: LD_OWVAR 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 25
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: ST_TO_ADDR
// if not tmp then
26029: LD_VAR 0 3
26033: NOT
26034: IFFALSE 26038
// exit ;
26036: GO 26094
// un := tmp [ rand ( 1 , tmp ) ] ;
26038: LD_ADDR_VAR 0 2
26042: PUSH
26043: LD_VAR 0 3
26047: PUSH
26048: LD_INT 1
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: CALL_OW 12
26060: ARRAY
26061: ST_TO_ADDR
// if Crawls ( un ) then
26062: LD_VAR 0 2
26066: PPUSH
26067: CALL_OW 318
26071: IFFALSE 26082
// ComWalk ( un ) ;
26073: LD_VAR 0 2
26077: PPUSH
26078: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26082: LD_VAR 0 2
26086: PPUSH
26087: LD_INT 5
26089: PPUSH
26090: CALL_OW 336
// end ;
26094: PPOPN 3
26096: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26097: LD_EXP 66
26101: PUSH
26102: LD_EXP 84
26106: AND
26107: PUSH
26108: LD_OWVAR 67
26112: PUSH
26113: LD_INT 4
26115: LESS
26116: AND
26117: IFFALSE 26136
26119: GO 26121
26121: DISABLE
// begin Difficulty := Difficulty + 1 ;
26122: LD_ADDR_OWVAR 67
26126: PUSH
26127: LD_OWVAR 67
26131: PUSH
26132: LD_INT 1
26134: PLUS
26135: ST_TO_ADDR
// end ;
26136: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26137: LD_EXP 66
26141: PUSH
26142: LD_EXP 85
26146: AND
26147: IFFALSE 26250
26149: GO 26151
26151: DISABLE
26152: LD_INT 0
26154: PPUSH
// begin for i := 1 to 5 do
26155: LD_ADDR_VAR 0 1
26159: PUSH
26160: DOUBLE
26161: LD_INT 1
26163: DEC
26164: ST_TO_ADDR
26165: LD_INT 5
26167: PUSH
26168: FOR_TO
26169: IFFALSE 26248
// begin uc_nation := nation_nature ;
26171: LD_ADDR_OWVAR 21
26175: PUSH
26176: LD_INT 0
26178: ST_TO_ADDR
// uc_side := 0 ;
26179: LD_ADDR_OWVAR 20
26183: PUSH
26184: LD_INT 0
26186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26187: LD_ADDR_OWVAR 29
26191: PUSH
26192: LD_INT 12
26194: PUSH
26195: LD_INT 12
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: ST_TO_ADDR
// hc_agressivity := 20 ;
26202: LD_ADDR_OWVAR 35
26206: PUSH
26207: LD_INT 20
26209: ST_TO_ADDR
// hc_class := class_tiger ;
26210: LD_ADDR_OWVAR 28
26214: PUSH
26215: LD_INT 14
26217: ST_TO_ADDR
// hc_gallery :=  ;
26218: LD_ADDR_OWVAR 33
26222: PUSH
26223: LD_STRING 
26225: ST_TO_ADDR
// hc_name :=  ;
26226: LD_ADDR_OWVAR 26
26230: PUSH
26231: LD_STRING 
26233: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26234: CALL_OW 44
26238: PPUSH
26239: LD_INT 0
26241: PPUSH
26242: CALL_OW 51
// end ;
26246: GO 26168
26248: POP
26249: POP
// end ;
26250: PPOPN 1
26252: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26253: LD_EXP 66
26257: PUSH
26258: LD_EXP 86
26262: AND
26263: IFFALSE 26272
26265: GO 26267
26267: DISABLE
// StreamSibBomb ;
26268: CALL 26273 0 0
26272: END
// export function StreamSibBomb ; var i , x , y ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
// result := false ;
26279: LD_ADDR_VAR 0 1
26283: PUSH
26284: LD_INT 0
26286: ST_TO_ADDR
// for i := 1 to 16 do
26287: LD_ADDR_VAR 0 2
26291: PUSH
26292: DOUBLE
26293: LD_INT 1
26295: DEC
26296: ST_TO_ADDR
26297: LD_INT 16
26299: PUSH
26300: FOR_TO
26301: IFFALSE 26500
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26303: LD_ADDR_VAR 0 3
26307: PUSH
26308: LD_INT 10
26310: PUSH
26311: LD_INT 20
26313: PUSH
26314: LD_INT 30
26316: PUSH
26317: LD_INT 40
26319: PUSH
26320: LD_INT 50
26322: PUSH
26323: LD_INT 60
26325: PUSH
26326: LD_INT 70
26328: PUSH
26329: LD_INT 80
26331: PUSH
26332: LD_INT 90
26334: PUSH
26335: LD_INT 100
26337: PUSH
26338: LD_INT 110
26340: PUSH
26341: LD_INT 120
26343: PUSH
26344: LD_INT 130
26346: PUSH
26347: LD_INT 140
26349: PUSH
26350: LD_INT 150
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PPUSH
26373: LD_INT 15
26375: PPUSH
26376: CALL_OW 12
26380: ARRAY
26381: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26382: LD_ADDR_VAR 0 4
26386: PUSH
26387: LD_INT 10
26389: PUSH
26390: LD_INT 20
26392: PUSH
26393: LD_INT 30
26395: PUSH
26396: LD_INT 40
26398: PUSH
26399: LD_INT 50
26401: PUSH
26402: LD_INT 60
26404: PUSH
26405: LD_INT 70
26407: PUSH
26408: LD_INT 80
26410: PUSH
26411: LD_INT 90
26413: PUSH
26414: LD_INT 100
26416: PUSH
26417: LD_INT 110
26419: PUSH
26420: LD_INT 120
26422: PUSH
26423: LD_INT 130
26425: PUSH
26426: LD_INT 140
26428: PUSH
26429: LD_INT 150
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: PPUSH
26452: LD_INT 15
26454: PPUSH
26455: CALL_OW 12
26459: ARRAY
26460: ST_TO_ADDR
// if ValidHex ( x , y ) then
26461: LD_VAR 0 3
26465: PPUSH
26466: LD_VAR 0 4
26470: PPUSH
26471: CALL_OW 488
26475: IFFALSE 26498
// begin result := [ x , y ] ;
26477: LD_ADDR_VAR 0 1
26481: PUSH
26482: LD_VAR 0 3
26486: PUSH
26487: LD_VAR 0 4
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: ST_TO_ADDR
// break ;
26496: GO 26500
// end ; end ;
26498: GO 26300
26500: POP
26501: POP
// if result then
26502: LD_VAR 0 1
26506: IFFALSE 26566
// begin ToLua ( playSibBomb() ) ;
26508: LD_STRING playSibBomb()
26510: PPUSH
26511: CALL_OW 559
// wait ( 0 0$14 ) ;
26515: LD_INT 490
26517: PPUSH
26518: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26522: LD_VAR 0 1
26526: PUSH
26527: LD_INT 1
26529: ARRAY
26530: PPUSH
26531: LD_VAR 0 1
26535: PUSH
26536: LD_INT 2
26538: ARRAY
26539: PPUSH
26540: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26544: LD_VAR 0 1
26548: PUSH
26549: LD_INT 1
26551: ARRAY
26552: PPUSH
26553: LD_VAR 0 1
26557: PUSH
26558: LD_INT 2
26560: ARRAY
26561: PPUSH
26562: CALL_OW 429
// end ; end ;
26566: LD_VAR 0 1
26570: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26571: LD_EXP 66
26575: PUSH
26576: LD_EXP 88
26580: AND
26581: IFFALSE 26593
26583: GO 26585
26585: DISABLE
// YouLost (  ) ;
26586: LD_STRING 
26588: PPUSH
26589: CALL_OW 104
26593: END
// every 0 0$1 trigger StreamModeActive and sFog do
26594: LD_EXP 66
26598: PUSH
26599: LD_EXP 87
26603: AND
26604: IFFALSE 26618
26606: GO 26608
26608: DISABLE
// FogOff ( your_side ) ;
26609: LD_OWVAR 2
26613: PPUSH
26614: CALL_OW 344
26618: END
// every 0 0$1 trigger StreamModeActive and sSun do
26619: LD_EXP 66
26623: PUSH
26624: LD_EXP 89
26628: AND
26629: IFFALSE 26657
26631: GO 26633
26633: DISABLE
// begin solar_recharge_percent := 0 ;
26634: LD_ADDR_OWVAR 79
26638: PUSH
26639: LD_INT 0
26641: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26642: LD_INT 10500
26644: PPUSH
26645: CALL_OW 67
// solar_recharge_percent := 100 ;
26649: LD_ADDR_OWVAR 79
26653: PUSH
26654: LD_INT 100
26656: ST_TO_ADDR
// end ;
26657: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26658: LD_EXP 66
26662: PUSH
26663: LD_EXP 90
26667: AND
26668: IFFALSE 26907
26670: GO 26672
26672: DISABLE
26673: LD_INT 0
26675: PPUSH
26676: PPUSH
26677: PPUSH
// begin tmp := [ ] ;
26678: LD_ADDR_VAR 0 3
26682: PUSH
26683: EMPTY
26684: ST_TO_ADDR
// for i := 1 to 6 do
26685: LD_ADDR_VAR 0 1
26689: PUSH
26690: DOUBLE
26691: LD_INT 1
26693: DEC
26694: ST_TO_ADDR
26695: LD_INT 6
26697: PUSH
26698: FOR_TO
26699: IFFALSE 26804
// begin uc_nation := nation_nature ;
26701: LD_ADDR_OWVAR 21
26705: PUSH
26706: LD_INT 0
26708: ST_TO_ADDR
// uc_side := 0 ;
26709: LD_ADDR_OWVAR 20
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26717: LD_ADDR_OWVAR 29
26721: PUSH
26722: LD_INT 12
26724: PUSH
26725: LD_INT 12
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: ST_TO_ADDR
// hc_agressivity := 20 ;
26732: LD_ADDR_OWVAR 35
26736: PUSH
26737: LD_INT 20
26739: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26740: LD_ADDR_OWVAR 28
26744: PUSH
26745: LD_INT 17
26747: ST_TO_ADDR
// hc_gallery :=  ;
26748: LD_ADDR_OWVAR 33
26752: PUSH
26753: LD_STRING 
26755: ST_TO_ADDR
// hc_name :=  ;
26756: LD_ADDR_OWVAR 26
26760: PUSH
26761: LD_STRING 
26763: ST_TO_ADDR
// un := CreateHuman ;
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: CALL_OW 44
26773: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26774: LD_VAR 0 2
26778: PPUSH
26779: LD_INT 1
26781: PPUSH
26782: CALL_OW 51
// tmp := tmp ^ un ;
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_VAR 0 3
26795: PUSH
26796: LD_VAR 0 2
26800: ADD
26801: ST_TO_ADDR
// end ;
26802: GO 26698
26804: POP
26805: POP
// repeat wait ( 0 0$1 ) ;
26806: LD_INT 35
26808: PPUSH
26809: CALL_OW 67
// for un in tmp do
26813: LD_ADDR_VAR 0 2
26817: PUSH
26818: LD_VAR 0 3
26822: PUSH
26823: FOR_IN
26824: IFFALSE 26898
// begin if IsDead ( un ) then
26826: LD_VAR 0 2
26830: PPUSH
26831: CALL_OW 301
26835: IFFALSE 26855
// begin tmp := tmp diff un ;
26837: LD_ADDR_VAR 0 3
26841: PUSH
26842: LD_VAR 0 3
26846: PUSH
26847: LD_VAR 0 2
26851: DIFF
26852: ST_TO_ADDR
// continue ;
26853: GO 26823
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26855: LD_VAR 0 2
26859: PPUSH
26860: LD_INT 3
26862: PUSH
26863: LD_INT 22
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: PPUSH
26882: LD_VAR 0 2
26886: PPUSH
26887: CALL_OW 74
26891: PPUSH
26892: CALL_OW 115
// end ;
26896: GO 26823
26898: POP
26899: POP
// until not tmp ;
26900: LD_VAR 0 3
26904: NOT
26905: IFFALSE 26806
// end ;
26907: PPOPN 3
26909: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26910: LD_EXP 66
26914: PUSH
26915: LD_EXP 91
26919: AND
26920: IFFALSE 26974
26922: GO 26924
26924: DISABLE
// begin ToLua ( displayTroll(); ) ;
26925: LD_STRING displayTroll();
26927: PPUSH
26928: CALL_OW 559
// wait ( 3 3$00 ) ;
26932: LD_INT 6300
26934: PPUSH
26935: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26939: LD_STRING hideTroll();
26941: PPUSH
26942: CALL_OW 559
// wait ( 1 1$00 ) ;
26946: LD_INT 2100
26948: PPUSH
26949: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26953: LD_STRING displayTroll();
26955: PPUSH
26956: CALL_OW 559
// wait ( 1 1$00 ) ;
26960: LD_INT 2100
26962: PPUSH
26963: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26967: LD_STRING hideTroll();
26969: PPUSH
26970: CALL_OW 559
// end ;
26974: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26975: LD_EXP 66
26979: PUSH
26980: LD_EXP 92
26984: AND
26985: IFFALSE 27048
26987: GO 26989
26989: DISABLE
26990: LD_INT 0
26992: PPUSH
// begin p := 0 ;
26993: LD_ADDR_VAR 0 1
26997: PUSH
26998: LD_INT 0
27000: ST_TO_ADDR
// repeat game_speed := 1 ;
27001: LD_ADDR_OWVAR 65
27005: PUSH
27006: LD_INT 1
27008: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27009: LD_INT 35
27011: PPUSH
27012: CALL_OW 67
// p := p + 1 ;
27016: LD_ADDR_VAR 0 1
27020: PUSH
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 1
27028: PLUS
27029: ST_TO_ADDR
// until p >= 60 ;
27030: LD_VAR 0 1
27034: PUSH
27035: LD_INT 60
27037: GREATEREQUAL
27038: IFFALSE 27001
// game_speed := 4 ;
27040: LD_ADDR_OWVAR 65
27044: PUSH
27045: LD_INT 4
27047: ST_TO_ADDR
// end ;
27048: PPOPN 1
27050: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27051: LD_EXP 66
27055: PUSH
27056: LD_EXP 93
27060: AND
27061: IFFALSE 27207
27063: GO 27065
27065: DISABLE
27066: LD_INT 0
27068: PPUSH
27069: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27070: LD_ADDR_VAR 0 1
27074: PUSH
27075: LD_INT 22
27077: PUSH
27078: LD_OWVAR 2
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: LD_INT 30
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PPUSH
27119: CALL_OW 69
27123: ST_TO_ADDR
// if not depot then
27124: LD_VAR 0 1
27128: NOT
27129: IFFALSE 27133
// exit ;
27131: GO 27207
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27133: LD_ADDR_VAR 0 2
27137: PUSH
27138: LD_VAR 0 1
27142: PUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 12
27155: ARRAY
27156: PPUSH
27157: CALL_OW 274
27161: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27162: LD_VAR 0 2
27166: PPUSH
27167: LD_INT 1
27169: PPUSH
27170: LD_INT 0
27172: PPUSH
27173: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27177: LD_VAR 0 2
27181: PPUSH
27182: LD_INT 2
27184: PPUSH
27185: LD_INT 0
27187: PPUSH
27188: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_INT 3
27199: PPUSH
27200: LD_INT 0
27202: PPUSH
27203: CALL_OW 277
// end ;
27207: PPOPN 2
27209: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27210: LD_EXP 66
27214: PUSH
27215: LD_EXP 94
27219: AND
27220: IFFALSE 27317
27222: GO 27224
27224: DISABLE
27225: LD_INT 0
27227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: LD_INT 22
27235: PUSH
27236: LD_OWVAR 2
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 21
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 3
27257: PUSH
27258: LD_INT 23
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: PPUSH
27277: CALL_OW 69
27281: ST_TO_ADDR
// if not tmp then
27282: LD_VAR 0 1
27286: NOT
27287: IFFALSE 27291
// exit ;
27289: GO 27317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27291: LD_VAR 0 1
27295: PUSH
27296: LD_INT 1
27298: PPUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 12
27308: ARRAY
27309: PPUSH
27310: LD_INT 200
27312: PPUSH
27313: CALL_OW 234
// end ;
27317: PPOPN 1
27319: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27320: LD_EXP 66
27324: PUSH
27325: LD_EXP 95
27329: AND
27330: IFFALSE 27409
27332: GO 27334
27334: DISABLE
27335: LD_INT 0
27337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27338: LD_ADDR_VAR 0 1
27342: PUSH
27343: LD_INT 22
27345: PUSH
27346: LD_OWVAR 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 21
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 69
27373: ST_TO_ADDR
// if not tmp then
27374: LD_VAR 0 1
27378: NOT
27379: IFFALSE 27383
// exit ;
27381: GO 27409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27383: LD_VAR 0 1
27387: PUSH
27388: LD_INT 1
27390: PPUSH
27391: LD_VAR 0 1
27395: PPUSH
27396: CALL_OW 12
27400: ARRAY
27401: PPUSH
27402: LD_INT 60
27404: PPUSH
27405: CALL_OW 234
// end ;
27409: PPOPN 1
27411: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27412: LD_EXP 66
27416: PUSH
27417: LD_EXP 96
27421: AND
27422: IFFALSE 27521
27424: GO 27426
27426: DISABLE
27427: LD_INT 0
27429: PPUSH
27430: PPUSH
// begin enable ;
27431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27432: LD_ADDR_VAR 0 1
27436: PUSH
27437: LD_INT 22
27439: PUSH
27440: LD_OWVAR 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 61
27451: PUSH
27452: EMPTY
27453: LIST
27454: PUSH
27455: LD_INT 33
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: PPUSH
27470: CALL_OW 69
27474: ST_TO_ADDR
// if not tmp then
27475: LD_VAR 0 1
27479: NOT
27480: IFFALSE 27484
// exit ;
27482: GO 27521
// for i in tmp do
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: LD_VAR 0 1
27493: PUSH
27494: FOR_IN
27495: IFFALSE 27519
// if IsControledBy ( i ) then
27497: LD_VAR 0 2
27501: PPUSH
27502: CALL_OW 312
27506: IFFALSE 27517
// ComUnlink ( i ) ;
27508: LD_VAR 0 2
27512: PPUSH
27513: CALL_OW 136
27517: GO 27494
27519: POP
27520: POP
// end ;
27521: PPOPN 2
27523: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27524: LD_EXP 66
27528: PUSH
27529: LD_EXP 97
27533: AND
27534: IFFALSE 27674
27536: GO 27538
27538: DISABLE
27539: LD_INT 0
27541: PPUSH
27542: PPUSH
// begin ToLua ( displayPowell(); ) ;
27543: LD_STRING displayPowell();
27545: PPUSH
27546: CALL_OW 559
// uc_side := 0 ;
27550: LD_ADDR_OWVAR 20
27554: PUSH
27555: LD_INT 0
27557: ST_TO_ADDR
// uc_nation := 2 ;
27558: LD_ADDR_OWVAR 21
27562: PUSH
27563: LD_INT 2
27565: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27566: LD_ADDR_OWVAR 37
27570: PUSH
27571: LD_INT 14
27573: ST_TO_ADDR
// vc_engine := engine_siberite ;
27574: LD_ADDR_OWVAR 39
27578: PUSH
27579: LD_INT 3
27581: ST_TO_ADDR
// vc_control := control_apeman ;
27582: LD_ADDR_OWVAR 38
27586: PUSH
27587: LD_INT 5
27589: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27590: LD_ADDR_OWVAR 40
27594: PUSH
27595: LD_INT 29
27597: ST_TO_ADDR
// un := CreateVehicle ;
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: CALL_OW 45
27607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27608: LD_VAR 0 2
27612: PPUSH
27613: LD_INT 1
27615: PPUSH
27616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27620: LD_INT 35
27622: PPUSH
27623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_INT 22
27634: PUSH
27635: LD_OWVAR 2
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PPUSH
27644: CALL_OW 69
27648: PPUSH
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 74
27658: PPUSH
27659: CALL_OW 115
// until IsDead ( un ) ;
27663: LD_VAR 0 2
27667: PPUSH
27668: CALL_OW 301
27672: IFFALSE 27620
// end ;
27674: PPOPN 2
27676: END
// every 0 0$1 trigger StreamModeActive and sStu do
27677: LD_EXP 66
27681: PUSH
27682: LD_EXP 105
27686: AND
27687: IFFALSE 27703
27689: GO 27691
27691: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27692: LD_STRING displayStucuk();
27694: PPUSH
27695: CALL_OW 559
// ResetFog ;
27699: CALL_OW 335
// end ;
27703: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27704: LD_EXP 66
27708: PUSH
27709: LD_EXP 98
27713: AND
27714: IFFALSE 27855
27716: GO 27718
27718: DISABLE
27719: LD_INT 0
27721: PPUSH
27722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27723: LD_ADDR_VAR 0 2
27727: PUSH
27728: LD_INT 22
27730: PUSH
27731: LD_OWVAR 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 21
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 2
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 27855
// un := tmp [ rand ( 1 , tmp ) ] ;
27768: LD_ADDR_VAR 0 1
27772: PUSH
27773: LD_VAR 0 2
27777: PUSH
27778: LD_INT 1
27780: PPUSH
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 12
27790: ARRAY
27791: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27792: LD_VAR 0 1
27796: PPUSH
27797: LD_INT 0
27799: PPUSH
27800: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27804: LD_VAR 0 1
27808: PPUSH
27809: LD_OWVAR 3
27813: PUSH
27814: LD_VAR 0 1
27818: DIFF
27819: PPUSH
27820: LD_VAR 0 1
27824: PPUSH
27825: CALL_OW 74
27829: PPUSH
27830: CALL_OW 115
// wait ( 0 0$20 ) ;
27834: LD_INT 700
27836: PPUSH
27837: CALL_OW 67
// SetSide ( un , your_side ) ;
27841: LD_VAR 0 1
27845: PPUSH
27846: LD_OWVAR 2
27850: PPUSH
27851: CALL_OW 235
// end ;
27855: PPOPN 2
27857: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27858: LD_EXP 66
27862: PUSH
27863: LD_EXP 99
27867: AND
27868: IFFALSE 27974
27870: GO 27872
27872: DISABLE
27873: LD_INT 0
27875: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27876: LD_ADDR_VAR 0 1
27880: PUSH
27881: LD_INT 22
27883: PUSH
27884: LD_OWVAR 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 30
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 69
27929: ST_TO_ADDR
// if not depot then
27930: LD_VAR 0 1
27934: NOT
27935: IFFALSE 27939
// exit ;
27937: GO 27974
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27939: LD_VAR 0 1
27943: PUSH
27944: LD_INT 1
27946: ARRAY
27947: PPUSH
27948: CALL_OW 250
27952: PPUSH
27953: LD_VAR 0 1
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: PPUSH
27962: CALL_OW 251
27966: PPUSH
27967: LD_INT 70
27969: PPUSH
27970: CALL_OW 495
// end ;
27974: PPOPN 1
27976: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27977: LD_EXP 66
27981: PUSH
27982: LD_EXP 100
27986: AND
27987: IFFALSE 28198
27989: GO 27991
27991: DISABLE
27992: LD_INT 0
27994: PPUSH
27995: PPUSH
27996: PPUSH
27997: PPUSH
27998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27999: LD_ADDR_VAR 0 5
28003: PUSH
28004: LD_INT 22
28006: PUSH
28007: LD_OWVAR 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 21
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PPUSH
28030: CALL_OW 69
28034: ST_TO_ADDR
// if not tmp then
28035: LD_VAR 0 5
28039: NOT
28040: IFFALSE 28044
// exit ;
28042: GO 28198
// for i in tmp do
28044: LD_ADDR_VAR 0 1
28048: PUSH
28049: LD_VAR 0 5
28053: PUSH
28054: FOR_IN
28055: IFFALSE 28196
// begin d := rand ( 0 , 5 ) ;
28057: LD_ADDR_VAR 0 4
28061: PUSH
28062: LD_INT 0
28064: PPUSH
28065: LD_INT 5
28067: PPUSH
28068: CALL_OW 12
28072: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28073: LD_ADDR_VAR 0 2
28077: PUSH
28078: LD_VAR 0 1
28082: PPUSH
28083: CALL_OW 250
28087: PPUSH
28088: LD_VAR 0 4
28092: PPUSH
28093: LD_INT 3
28095: PPUSH
28096: LD_INT 12
28098: PPUSH
28099: CALL_OW 12
28103: PPUSH
28104: CALL_OW 272
28108: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 251
28123: PPUSH
28124: LD_VAR 0 4
28128: PPUSH
28129: LD_INT 3
28131: PPUSH
28132: LD_INT 12
28134: PPUSH
28135: CALL_OW 12
28139: PPUSH
28140: CALL_OW 273
28144: ST_TO_ADDR
// if ValidHex ( x , y ) then
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_VAR 0 3
28154: PPUSH
28155: CALL_OW 488
28159: IFFALSE 28194
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28161: LD_VAR 0 1
28165: PPUSH
28166: LD_VAR 0 2
28170: PPUSH
28171: LD_VAR 0 3
28175: PPUSH
28176: LD_INT 3
28178: PPUSH
28179: LD_INT 6
28181: PPUSH
28182: CALL_OW 12
28186: PPUSH
28187: LD_INT 1
28189: PPUSH
28190: CALL_OW 483
// end ;
28194: GO 28054
28196: POP
28197: POP
// end ;
28198: PPOPN 5
28200: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28201: LD_EXP 66
28205: PUSH
28206: LD_EXP 101
28210: AND
28211: IFFALSE 28305
28213: GO 28215
28215: DISABLE
28216: LD_INT 0
28218: PPUSH
28219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28220: LD_ADDR_VAR 0 2
28224: PUSH
28225: LD_INT 22
28227: PUSH
28228: LD_OWVAR 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 32
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 21
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: PPUSH
28262: CALL_OW 69
28266: ST_TO_ADDR
// if not tmp then
28267: LD_VAR 0 2
28271: NOT
28272: IFFALSE 28276
// exit ;
28274: GO 28305
// for i in tmp do
28276: LD_ADDR_VAR 0 1
28280: PUSH
28281: LD_VAR 0 2
28285: PUSH
28286: FOR_IN
28287: IFFALSE 28303
// SetFuel ( i , 0 ) ;
28289: LD_VAR 0 1
28293: PPUSH
28294: LD_INT 0
28296: PPUSH
28297: CALL_OW 240
28301: GO 28286
28303: POP
28304: POP
// end ;
28305: PPOPN 2
28307: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28308: LD_EXP 66
28312: PUSH
28313: LD_EXP 102
28317: AND
28318: IFFALSE 28384
28320: GO 28322
28322: DISABLE
28323: LD_INT 0
28325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28326: LD_ADDR_VAR 0 1
28330: PUSH
28331: LD_INT 22
28333: PUSH
28334: LD_OWVAR 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 30
28345: PUSH
28346: LD_INT 29
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PPUSH
28357: CALL_OW 69
28361: ST_TO_ADDR
// if not tmp then
28362: LD_VAR 0 1
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28384
// DestroyUnit ( tmp [ 1 ] ) ;
28371: LD_VAR 0 1
28375: PUSH
28376: LD_INT 1
28378: ARRAY
28379: PPUSH
28380: CALL_OW 65
// end ;
28384: PPOPN 1
28386: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28387: LD_EXP 66
28391: PUSH
28392: LD_EXP 104
28396: AND
28397: IFFALSE 28526
28399: GO 28401
28401: DISABLE
28402: LD_INT 0
28404: PPUSH
// begin uc_side := 0 ;
28405: LD_ADDR_OWVAR 20
28409: PUSH
28410: LD_INT 0
28412: ST_TO_ADDR
// uc_nation := nation_arabian ;
28413: LD_ADDR_OWVAR 21
28417: PUSH
28418: LD_INT 2
28420: ST_TO_ADDR
// hc_gallery :=  ;
28421: LD_ADDR_OWVAR 33
28425: PUSH
28426: LD_STRING 
28428: ST_TO_ADDR
// hc_name :=  ;
28429: LD_ADDR_OWVAR 26
28433: PUSH
28434: LD_STRING 
28436: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28437: LD_INT 1
28439: PPUSH
28440: LD_INT 11
28442: PPUSH
28443: LD_INT 10
28445: PPUSH
28446: CALL_OW 380
// un := CreateHuman ;
28450: LD_ADDR_VAR 0 1
28454: PUSH
28455: CALL_OW 44
28459: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28460: LD_VAR 0 1
28464: PPUSH
28465: LD_INT 1
28467: PPUSH
28468: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28472: LD_INT 35
28474: PPUSH
28475: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28479: LD_VAR 0 1
28483: PPUSH
28484: LD_INT 22
28486: PUSH
28487: LD_OWVAR 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PPUSH
28496: CALL_OW 69
28500: PPUSH
28501: LD_VAR 0 1
28505: PPUSH
28506: CALL_OW 74
28510: PPUSH
28511: CALL_OW 115
// until IsDead ( un ) ;
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 301
28524: IFFALSE 28472
// end ;
28526: PPOPN 1
28528: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28529: LD_EXP 66
28533: PUSH
28534: LD_EXP 106
28538: AND
28539: IFFALSE 28551
28541: GO 28543
28543: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28544: LD_STRING earthquake(getX(game), 0, 32)
28546: PPUSH
28547: CALL_OW 559
28551: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28552: LD_EXP 66
28556: PUSH
28557: LD_EXP 107
28561: AND
28562: IFFALSE 28653
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
// begin enable ;
28570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28571: LD_ADDR_VAR 0 1
28575: PUSH
28576: LD_INT 22
28578: PUSH
28579: LD_OWVAR 2
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 21
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 33
28600: PUSH
28601: LD_INT 3
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: PPUSH
28613: CALL_OW 69
28617: ST_TO_ADDR
// if not tmp then
28618: LD_VAR 0 1
28622: NOT
28623: IFFALSE 28627
// exit ;
28625: GO 28653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28627: LD_VAR 0 1
28631: PUSH
28632: LD_INT 1
28634: PPUSH
28635: LD_VAR 0 1
28639: PPUSH
28640: CALL_OW 12
28644: ARRAY
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: CALL_OW 234
// end ;
28653: PPOPN 1
28655: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28656: LD_EXP 66
28660: PUSH
28661: LD_EXP 108
28665: AND
28666: IFFALSE 28807
28668: GO 28670
28670: DISABLE
28671: LD_INT 0
28673: PPUSH
28674: PPUSH
28675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28676: LD_ADDR_VAR 0 3
28680: PUSH
28681: LD_INT 22
28683: PUSH
28684: LD_OWVAR 2
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 25
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: ST_TO_ADDR
// if not tmp then
28712: LD_VAR 0 3
28716: NOT
28717: IFFALSE 28721
// exit ;
28719: GO 28807
// un := tmp [ rand ( 1 , tmp ) ] ;
28721: LD_ADDR_VAR 0 2
28725: PUSH
28726: LD_VAR 0 3
28730: PUSH
28731: LD_INT 1
28733: PPUSH
28734: LD_VAR 0 3
28738: PPUSH
28739: CALL_OW 12
28743: ARRAY
28744: ST_TO_ADDR
// if Crawls ( un ) then
28745: LD_VAR 0 2
28749: PPUSH
28750: CALL_OW 318
28754: IFFALSE 28765
// ComWalk ( un ) ;
28756: LD_VAR 0 2
28760: PPUSH
28761: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28765: LD_VAR 0 2
28769: PPUSH
28770: LD_INT 9
28772: PPUSH
28773: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28777: LD_INT 28
28779: PPUSH
28780: LD_OWVAR 2
28784: PPUSH
28785: LD_INT 2
28787: PPUSH
28788: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28792: LD_INT 29
28794: PPUSH
28795: LD_OWVAR 2
28799: PPUSH
28800: LD_INT 2
28802: PPUSH
28803: CALL_OW 322
// end ;
28807: PPOPN 3
28809: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28810: LD_EXP 66
28814: PUSH
28815: LD_EXP 109
28819: AND
28820: IFFALSE 28931
28822: GO 28824
28824: DISABLE
28825: LD_INT 0
28827: PPUSH
28828: PPUSH
28829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 22
28837: PUSH
28838: LD_OWVAR 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 25
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PPUSH
28861: CALL_OW 69
28865: ST_TO_ADDR
// if not tmp then
28866: LD_VAR 0 3
28870: NOT
28871: IFFALSE 28875
// exit ;
28873: GO 28931
// un := tmp [ rand ( 1 , tmp ) ] ;
28875: LD_ADDR_VAR 0 2
28879: PUSH
28880: LD_VAR 0 3
28884: PUSH
28885: LD_INT 1
28887: PPUSH
28888: LD_VAR 0 3
28892: PPUSH
28893: CALL_OW 12
28897: ARRAY
28898: ST_TO_ADDR
// if Crawls ( un ) then
28899: LD_VAR 0 2
28903: PPUSH
28904: CALL_OW 318
28908: IFFALSE 28919
// ComWalk ( un ) ;
28910: LD_VAR 0 2
28914: PPUSH
28915: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28919: LD_VAR 0 2
28923: PPUSH
28924: LD_INT 8
28926: PPUSH
28927: CALL_OW 336
// end ;
28931: PPOPN 3
28933: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28934: LD_EXP 66
28938: PUSH
28939: LD_EXP 110
28943: AND
28944: IFFALSE 29088
28946: GO 28948
28948: DISABLE
28949: LD_INT 0
28951: PPUSH
28952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28953: LD_ADDR_VAR 0 2
28957: PUSH
28958: LD_INT 22
28960: PUSH
28961: LD_OWVAR 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 21
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 34
28985: PUSH
28986: LD_INT 12
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 34
28995: PUSH
28996: LD_INT 51
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 34
29005: PUSH
29006: LD_INT 32
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 69
29028: ST_TO_ADDR
// if not tmp then
29029: LD_VAR 0 2
29033: NOT
29034: IFFALSE 29038
// exit ;
29036: GO 29088
// for i in tmp do
29038: LD_ADDR_VAR 0 1
29042: PUSH
29043: LD_VAR 0 2
29047: PUSH
29048: FOR_IN
29049: IFFALSE 29086
// if GetCargo ( i , mat_artifact ) = 0 then
29051: LD_VAR 0 1
29055: PPUSH
29056: LD_INT 4
29058: PPUSH
29059: CALL_OW 289
29063: PUSH
29064: LD_INT 0
29066: EQUAL
29067: IFFALSE 29084
// SetCargo ( i , mat_siberit , 100 ) ;
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_INT 3
29076: PPUSH
29077: LD_INT 100
29079: PPUSH
29080: CALL_OW 290
29084: GO 29048
29086: POP
29087: POP
// end ;
29088: PPOPN 2
29090: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29091: LD_EXP 66
29095: PUSH
29096: LD_EXP 111
29100: AND
29101: IFFALSE 29284
29103: GO 29105
29105: DISABLE
29106: LD_INT 0
29108: PPUSH
29109: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29110: LD_ADDR_VAR 0 2
29114: PUSH
29115: LD_INT 22
29117: PUSH
29118: LD_OWVAR 2
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PPUSH
29127: CALL_OW 69
29131: ST_TO_ADDR
// if not tmp then
29132: LD_VAR 0 2
29136: NOT
29137: IFFALSE 29141
// exit ;
29139: GO 29284
// for i := 1 to 2 do
29141: LD_ADDR_VAR 0 1
29145: PUSH
29146: DOUBLE
29147: LD_INT 1
29149: DEC
29150: ST_TO_ADDR
29151: LD_INT 2
29153: PUSH
29154: FOR_TO
29155: IFFALSE 29282
// begin uc_side := your_side ;
29157: LD_ADDR_OWVAR 20
29161: PUSH
29162: LD_OWVAR 2
29166: ST_TO_ADDR
// uc_nation := nation_american ;
29167: LD_ADDR_OWVAR 21
29171: PUSH
29172: LD_INT 1
29174: ST_TO_ADDR
// vc_chassis := us_morphling ;
29175: LD_ADDR_OWVAR 37
29179: PUSH
29180: LD_INT 5
29182: ST_TO_ADDR
// vc_engine := engine_siberite ;
29183: LD_ADDR_OWVAR 39
29187: PUSH
29188: LD_INT 3
29190: ST_TO_ADDR
// vc_control := control_computer ;
29191: LD_ADDR_OWVAR 38
29195: PUSH
29196: LD_INT 3
29198: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29199: LD_ADDR_OWVAR 40
29203: PUSH
29204: LD_INT 10
29206: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29207: LD_VAR 0 2
29211: PUSH
29212: LD_INT 1
29214: ARRAY
29215: PPUSH
29216: CALL_OW 310
29220: NOT
29221: IFFALSE 29268
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29223: CALL_OW 45
29227: PPUSH
29228: LD_VAR 0 2
29232: PUSH
29233: LD_INT 1
29235: ARRAY
29236: PPUSH
29237: CALL_OW 250
29241: PPUSH
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: PPUSH
29251: CALL_OW 251
29255: PPUSH
29256: LD_INT 12
29258: PPUSH
29259: LD_INT 1
29261: PPUSH
29262: CALL_OW 50
29266: GO 29280
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29268: CALL_OW 45
29272: PPUSH
29273: LD_INT 1
29275: PPUSH
29276: CALL_OW 51
// end ;
29280: GO 29154
29282: POP
29283: POP
// end ;
29284: PPOPN 2
29286: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29287: LD_EXP 66
29291: PUSH
29292: LD_EXP 112
29296: AND
29297: IFFALSE 29519
29299: GO 29301
29301: DISABLE
29302: LD_INT 0
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29310: LD_ADDR_VAR 0 6
29314: PUSH
29315: LD_INT 22
29317: PUSH
29318: LD_OWVAR 2
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 21
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: LD_INT 23
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: PPUSH
29359: CALL_OW 69
29363: ST_TO_ADDR
// if not tmp then
29364: LD_VAR 0 6
29368: NOT
29369: IFFALSE 29373
// exit ;
29371: GO 29519
// s1 := rand ( 1 , 4 ) ;
29373: LD_ADDR_VAR 0 2
29377: PUSH
29378: LD_INT 1
29380: PPUSH
29381: LD_INT 4
29383: PPUSH
29384: CALL_OW 12
29388: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29389: LD_ADDR_VAR 0 4
29393: PUSH
29394: LD_VAR 0 6
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: LD_VAR 0 2
29407: PPUSH
29408: CALL_OW 259
29412: ST_TO_ADDR
// if s1 = 1 then
29413: LD_VAR 0 2
29417: PUSH
29418: LD_INT 1
29420: EQUAL
29421: IFFALSE 29441
// s2 := rand ( 2 , 4 ) else
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_INT 2
29430: PPUSH
29431: LD_INT 4
29433: PPUSH
29434: CALL_OW 12
29438: ST_TO_ADDR
29439: GO 29449
// s2 := 1 ;
29441: LD_ADDR_VAR 0 3
29445: PUSH
29446: LD_INT 1
29448: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29449: LD_ADDR_VAR 0 5
29453: PUSH
29454: LD_VAR 0 6
29458: PUSH
29459: LD_INT 1
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 3
29467: PPUSH
29468: CALL_OW 259
29472: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29473: LD_VAR 0 6
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: PPUSH
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_VAR 0 5
29491: PPUSH
29492: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29496: LD_VAR 0 6
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: PPUSH
29505: LD_VAR 0 3
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: CALL_OW 237
// end ;
29519: PPOPN 6
29521: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29522: LD_EXP 66
29526: PUSH
29527: LD_EXP 113
29531: AND
29532: IFFALSE 29611
29534: GO 29536
29536: DISABLE
29537: LD_INT 0
29539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29540: LD_ADDR_VAR 0 1
29544: PUSH
29545: LD_INT 22
29547: PUSH
29548: LD_OWVAR 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 30
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PPUSH
29571: CALL_OW 69
29575: ST_TO_ADDR
// if not tmp then
29576: LD_VAR 0 1
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 29611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29585: LD_VAR 0 1
29589: PUSH
29590: LD_INT 1
29592: PPUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 12
29602: ARRAY
29603: PPUSH
29604: LD_INT 1
29606: PPUSH
29607: CALL_OW 234
// end ;
29611: PPOPN 1
29613: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29614: LD_EXP 66
29618: PUSH
29619: LD_EXP 114
29623: AND
29624: IFFALSE 29736
29626: GO 29628
29628: DISABLE
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_INT 22
29640: PUSH
29641: LD_OWVAR 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 30
29655: PUSH
29656: LD_INT 27
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 26
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 30
29675: PUSH
29676: LD_INT 28
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 69
29697: ST_TO_ADDR
// if not tmp then
29698: LD_VAR 0 2
29702: NOT
29703: IFFALSE 29707
// exit ;
29705: GO 29736
// for i in tmp do
29707: LD_ADDR_VAR 0 1
29711: PUSH
29712: LD_VAR 0 2
29716: PUSH
29717: FOR_IN
29718: IFFALSE 29734
// SetLives ( i , 1 ) ;
29720: LD_VAR 0 1
29724: PPUSH
29725: LD_INT 1
29727: PPUSH
29728: CALL_OW 234
29732: GO 29717
29734: POP
29735: POP
// end ;
29736: PPOPN 2
29738: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29739: LD_EXP 66
29743: PUSH
29744: LD_EXP 115
29748: AND
29749: IFFALSE 30036
29751: GO 29753
29753: DISABLE
29754: LD_INT 0
29756: PPUSH
29757: PPUSH
29758: PPUSH
// begin i := rand ( 1 , 7 ) ;
29759: LD_ADDR_VAR 0 1
29763: PUSH
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 7
29769: PPUSH
29770: CALL_OW 12
29774: ST_TO_ADDR
// case i of 1 :
29775: LD_VAR 0 1
29779: PUSH
29780: LD_INT 1
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29798
29788: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29789: LD_STRING earthquake(getX(game), 0, 32)
29791: PPUSH
29792: CALL_OW 559
29796: GO 30036
29798: LD_INT 2
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29820
29806: POP
// begin ToLua ( displayStucuk(); ) ;
29807: LD_STRING displayStucuk();
29809: PPUSH
29810: CALL_OW 559
// ResetFog ;
29814: CALL_OW 335
// end ; 3 :
29818: GO 30036
29820: LD_INT 3
29822: DOUBLE
29823: EQUAL
29824: IFTRUE 29828
29826: GO 29932
29828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 22
29836: PUSH
29837: LD_OWVAR 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 25
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: ST_TO_ADDR
// if not tmp then
29865: LD_VAR 0 2
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 30036
// un := tmp [ rand ( 1 , tmp ) ] ;
29874: LD_ADDR_VAR 0 3
29878: PUSH
29879: LD_VAR 0 2
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 2
29891: PPUSH
29892: CALL_OW 12
29896: ARRAY
29897: ST_TO_ADDR
// if Crawls ( un ) then
29898: LD_VAR 0 3
29902: PPUSH
29903: CALL_OW 318
29907: IFFALSE 29918
// ComWalk ( un ) ;
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29918: LD_VAR 0 3
29922: PPUSH
29923: LD_INT 8
29925: PPUSH
29926: CALL_OW 336
// end ; 4 :
29930: GO 30036
29932: LD_INT 4
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 30014
29940: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_INT 22
29948: PUSH
29949: LD_OWVAR 2
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: LD_INT 29
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PPUSH
29972: CALL_OW 69
29976: ST_TO_ADDR
// if not tmp then
29977: LD_VAR 0 2
29981: NOT
29982: IFFALSE 29986
// exit ;
29984: GO 30036
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29986: LD_VAR 0 2
29990: PUSH
29991: LD_INT 1
29993: ARRAY
29994: PPUSH
29995: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29999: LD_VAR 0 2
30003: PUSH
30004: LD_INT 1
30006: ARRAY
30007: PPUSH
30008: CALL_OW 65
// end ; 5 .. 7 :
30012: GO 30036
30014: LD_INT 5
30016: DOUBLE
30017: GREATEREQUAL
30018: IFFALSE 30026
30020: LD_INT 7
30022: DOUBLE
30023: LESSEQUAL
30024: IFTRUE 30028
30026: GO 30035
30028: POP
// StreamSibBomb ; end ;
30029: CALL 26273 0 0
30033: GO 30036
30035: POP
// end ;
30036: PPOPN 3
30038: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30039: LD_EXP 66
30043: PUSH
30044: LD_EXP 116
30048: AND
30049: IFFALSE 30205
30051: GO 30053
30053: DISABLE
30054: LD_INT 0
30056: PPUSH
30057: PPUSH
30058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30059: LD_ADDR_VAR 0 2
30063: PUSH
30064: LD_INT 81
30066: PUSH
30067: LD_OWVAR 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 21
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 21
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 69
30112: ST_TO_ADDR
// if not tmp then
30113: LD_VAR 0 2
30117: NOT
30118: IFFALSE 30122
// exit ;
30120: GO 30205
// p := 0 ;
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: LD_INT 0
30129: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30130: LD_INT 35
30132: PPUSH
30133: CALL_OW 67
// p := p + 1 ;
30137: LD_ADDR_VAR 0 3
30141: PUSH
30142: LD_VAR 0 3
30146: PUSH
30147: LD_INT 1
30149: PLUS
30150: ST_TO_ADDR
// for i in tmp do
30151: LD_ADDR_VAR 0 1
30155: PUSH
30156: LD_VAR 0 2
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30193
// if GetLives ( i ) < 1000 then
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 256
30173: PUSH
30174: LD_INT 1000
30176: LESS
30177: IFFALSE 30191
// SetLives ( i , 1000 ) ;
30179: LD_VAR 0 1
30183: PPUSH
30184: LD_INT 1000
30186: PPUSH
30187: CALL_OW 234
30191: GO 30161
30193: POP
30194: POP
// until p > 20 ;
30195: LD_VAR 0 3
30199: PUSH
30200: LD_INT 20
30202: GREATER
30203: IFFALSE 30130
// end ;
30205: PPOPN 3
30207: END
// every 0 0$1 trigger StreamModeActive and sTime do
30208: LD_EXP 66
30212: PUSH
30213: LD_EXP 117
30217: AND
30218: IFFALSE 30253
30220: GO 30222
30222: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30223: LD_INT 28
30225: PPUSH
30226: LD_OWVAR 2
30230: PPUSH
30231: LD_INT 2
30233: PPUSH
30234: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30238: LD_INT 30
30240: PPUSH
30241: LD_OWVAR 2
30245: PPUSH
30246: LD_INT 2
30248: PPUSH
30249: CALL_OW 322
// end ;
30253: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30254: LD_EXP 66
30258: PUSH
30259: LD_EXP 118
30263: AND
30264: IFFALSE 30385
30266: GO 30268
30268: DISABLE
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30273: LD_ADDR_VAR 0 2
30277: PUSH
30278: LD_INT 22
30280: PUSH
30281: LD_OWVAR 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 21
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: LD_INT 23
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: PPUSH
30322: CALL_OW 69
30326: ST_TO_ADDR
// if not tmp then
30327: LD_VAR 0 2
30331: NOT
30332: IFFALSE 30336
// exit ;
30334: GO 30385
// for i in tmp do
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_VAR 0 2
30345: PUSH
30346: FOR_IN
30347: IFFALSE 30383
// begin if Crawls ( i ) then
30349: LD_VAR 0 1
30353: PPUSH
30354: CALL_OW 318
30358: IFFALSE 30369
// ComWalk ( i ) ;
30360: LD_VAR 0 1
30364: PPUSH
30365: CALL_OW 138
// SetClass ( i , 2 ) ;
30369: LD_VAR 0 1
30373: PPUSH
30374: LD_INT 2
30376: PPUSH
30377: CALL_OW 336
// end ;
30381: GO 30346
30383: POP
30384: POP
// end ;
30385: PPOPN 2
30387: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30388: LD_EXP 66
30392: PUSH
30393: LD_EXP 119
30397: AND
30398: IFFALSE 30686
30400: GO 30402
30402: DISABLE
30403: LD_INT 0
30405: PPUSH
30406: PPUSH
30407: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30408: LD_OWVAR 2
30412: PPUSH
30413: LD_INT 9
30415: PPUSH
30416: LD_INT 1
30418: PPUSH
30419: LD_INT 1
30421: PPUSH
30422: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30426: LD_INT 9
30428: PPUSH
30429: LD_OWVAR 2
30433: PPUSH
30434: CALL_OW 343
// uc_side := 9 ;
30438: LD_ADDR_OWVAR 20
30442: PUSH
30443: LD_INT 9
30445: ST_TO_ADDR
// uc_nation := 2 ;
30446: LD_ADDR_OWVAR 21
30450: PUSH
30451: LD_INT 2
30453: ST_TO_ADDR
// hc_name := Dark Warrior ;
30454: LD_ADDR_OWVAR 26
30458: PUSH
30459: LD_STRING Dark Warrior
30461: ST_TO_ADDR
// hc_gallery :=  ;
30462: LD_ADDR_OWVAR 33
30466: PUSH
30467: LD_STRING 
30469: ST_TO_ADDR
// hc_noskilllimit := true ;
30470: LD_ADDR_OWVAR 76
30474: PUSH
30475: LD_INT 1
30477: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30478: LD_ADDR_OWVAR 31
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_INT 30
30491: PUSH
30492: LD_INT 30
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// un := CreateHuman ;
30501: LD_ADDR_VAR 0 3
30505: PUSH
30506: CALL_OW 44
30510: ST_TO_ADDR
// hc_noskilllimit := false ;
30511: LD_ADDR_OWVAR 76
30515: PUSH
30516: LD_INT 0
30518: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30519: LD_VAR 0 3
30523: PPUSH
30524: LD_INT 1
30526: PPUSH
30527: CALL_OW 51
// ToLua ( playRanger() ) ;
30531: LD_STRING playRanger()
30533: PPUSH
30534: CALL_OW 559
// p := 0 ;
30538: LD_ADDR_VAR 0 2
30542: PUSH
30543: LD_INT 0
30545: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30546: LD_INT 35
30548: PPUSH
30549: CALL_OW 67
// p := p + 1 ;
30553: LD_ADDR_VAR 0 2
30557: PUSH
30558: LD_VAR 0 2
30562: PUSH
30563: LD_INT 1
30565: PLUS
30566: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30567: LD_VAR 0 3
30571: PPUSH
30572: CALL_OW 256
30576: PUSH
30577: LD_INT 1000
30579: LESS
30580: IFFALSE 30594
// SetLives ( un , 1000 ) ;
30582: LD_VAR 0 3
30586: PPUSH
30587: LD_INT 1000
30589: PPUSH
30590: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30594: LD_VAR 0 3
30598: PPUSH
30599: LD_INT 81
30601: PUSH
30602: LD_OWVAR 2
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 91
30613: PUSH
30614: LD_VAR 0 3
30618: PUSH
30619: LD_INT 30
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: LIST
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PPUSH
30631: CALL_OW 69
30635: PPUSH
30636: LD_VAR 0 3
30640: PPUSH
30641: CALL_OW 74
30645: PPUSH
30646: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30650: LD_VAR 0 2
30654: PUSH
30655: LD_INT 80
30657: GREATER
30658: PUSH
30659: LD_VAR 0 3
30663: PPUSH
30664: CALL_OW 301
30668: OR
30669: IFFALSE 30546
// if un then
30671: LD_VAR 0 3
30675: IFFALSE 30686
// RemoveUnit ( un ) ;
30677: LD_VAR 0 3
30681: PPUSH
30682: CALL_OW 64
// end ;
30686: PPOPN 3
30688: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30689: LD_EXP 120
30693: IFFALSE 30809
30695: GO 30697
30697: DISABLE
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30703: LD_ADDR_VAR 0 2
30707: PUSH
30708: LD_INT 81
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 21
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PPUSH
30734: CALL_OW 69
30738: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30739: LD_STRING playComputer()
30741: PPUSH
30742: CALL_OW 559
// if not tmp then
30746: LD_VAR 0 2
30750: NOT
30751: IFFALSE 30755
// exit ;
30753: GO 30809
// for i in tmp do
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_VAR 0 2
30764: PUSH
30765: FOR_IN
30766: IFFALSE 30807
// for j := 1 to 4 do
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: DOUBLE
30774: LD_INT 1
30776: DEC
30777: ST_TO_ADDR
30778: LD_INT 4
30780: PUSH
30781: FOR_TO
30782: IFFALSE 30803
// SetSkill ( i , j , 10 ) ;
30784: LD_VAR 0 1
30788: PPUSH
30789: LD_VAR 0 3
30793: PPUSH
30794: LD_INT 10
30796: PPUSH
30797: CALL_OW 237
30801: GO 30781
30803: POP
30804: POP
30805: GO 30765
30807: POP
30808: POP
// end ;
30809: PPOPN 3
30811: END
// every 0 0$1 trigger s30 do var i , tmp ;
30812: LD_EXP 121
30816: IFFALSE 30885
30818: GO 30820
30820: DISABLE
30821: LD_INT 0
30823: PPUSH
30824: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30825: LD_ADDR_VAR 0 2
30829: PUSH
30830: LD_INT 22
30832: PUSH
30833: LD_OWVAR 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: ST_TO_ADDR
// if not tmp then
30847: LD_VAR 0 2
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 30885
// for i in tmp do
30856: LD_ADDR_VAR 0 1
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: FOR_IN
30867: IFFALSE 30883
// SetLives ( i , 300 ) ;
30869: LD_VAR 0 1
30873: PPUSH
30874: LD_INT 300
30876: PPUSH
30877: CALL_OW 234
30881: GO 30866
30883: POP
30884: POP
// end ;
30885: PPOPN 2
30887: END
// every 0 0$1 trigger s60 do var i , tmp ;
30888: LD_EXP 122
30892: IFFALSE 30961
30894: GO 30896
30896: DISABLE
30897: LD_INT 0
30899: PPUSH
30900: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30901: LD_ADDR_VAR 0 2
30905: PUSH
30906: LD_INT 22
30908: PUSH
30909: LD_OWVAR 2
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PPUSH
30918: CALL_OW 69
30922: ST_TO_ADDR
// if not tmp then
30923: LD_VAR 0 2
30927: NOT
30928: IFFALSE 30932
// exit ;
30930: GO 30961
// for i in tmp do
30932: LD_ADDR_VAR 0 1
30936: PUSH
30937: LD_VAR 0 2
30941: PUSH
30942: FOR_IN
30943: IFFALSE 30959
// SetLives ( i , 600 ) ;
30945: LD_VAR 0 1
30949: PPUSH
30950: LD_INT 600
30952: PPUSH
30953: CALL_OW 234
30957: GO 30942
30959: POP
30960: POP
// end ;
30961: PPOPN 2
30963: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30964: LD_INT 0
30966: PPUSH
// case cmd of 301 :
30967: LD_VAR 0 1
30971: PUSH
30972: LD_INT 301
30974: DOUBLE
30975: EQUAL
30976: IFTRUE 30980
30978: GO 31012
30980: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30981: LD_VAR 0 6
30985: PPUSH
30986: LD_VAR 0 7
30990: PPUSH
30991: LD_VAR 0 8
30995: PPUSH
30996: LD_VAR 0 4
31000: PPUSH
31001: LD_VAR 0 5
31005: PPUSH
31006: CALL 32213 0 5
31010: GO 31133
31012: LD_INT 302
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31057
31020: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31021: LD_VAR 0 6
31025: PPUSH
31026: LD_VAR 0 7
31030: PPUSH
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_VAR 0 9
31040: PPUSH
31041: LD_VAR 0 4
31045: PPUSH
31046: LD_VAR 0 5
31050: PPUSH
31051: CALL 32304 0 6
31055: GO 31133
31057: LD_INT 303
31059: DOUBLE
31060: EQUAL
31061: IFTRUE 31065
31063: GO 31102
31065: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31066: LD_VAR 0 6
31070: PPUSH
31071: LD_VAR 0 7
31075: PPUSH
31076: LD_VAR 0 8
31080: PPUSH
31081: LD_VAR 0 9
31085: PPUSH
31086: LD_VAR 0 4
31090: PPUSH
31091: LD_VAR 0 5
31095: PPUSH
31096: CALL 31138 0 6
31100: GO 31133
31102: LD_INT 304
31104: DOUBLE
31105: EQUAL
31106: IFTRUE 31110
31108: GO 31132
31110: POP
// hHackTeleport ( unit , x , y ) ; end ;
31111: LD_VAR 0 2
31115: PPUSH
31116: LD_VAR 0 4
31120: PPUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: CALL 32897 0 3
31130: GO 31133
31132: POP
// end ;
31133: LD_VAR 0 12
31137: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31138: LD_INT 0
31140: PPUSH
31141: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31142: LD_VAR 0 1
31146: PUSH
31147: LD_INT 1
31149: LESS
31150: PUSH
31151: LD_VAR 0 1
31155: PUSH
31156: LD_INT 3
31158: GREATER
31159: OR
31160: PUSH
31161: LD_VAR 0 5
31165: PPUSH
31166: LD_VAR 0 6
31170: PPUSH
31171: CALL_OW 428
31175: OR
31176: IFFALSE 31180
// exit ;
31178: GO 31900
// uc_side := your_side ;
31180: LD_ADDR_OWVAR 20
31184: PUSH
31185: LD_OWVAR 2
31189: ST_TO_ADDR
// uc_nation := nation ;
31190: LD_ADDR_OWVAR 21
31194: PUSH
31195: LD_VAR 0 1
31199: ST_TO_ADDR
// bc_level = 1 ;
31200: LD_ADDR_OWVAR 43
31204: PUSH
31205: LD_INT 1
31207: ST_TO_ADDR
// case btype of 1 :
31208: LD_VAR 0 2
31212: PUSH
31213: LD_INT 1
31215: DOUBLE
31216: EQUAL
31217: IFTRUE 31221
31219: GO 31232
31221: POP
// bc_type := b_depot ; 2 :
31222: LD_ADDR_OWVAR 42
31226: PUSH
31227: LD_INT 0
31229: ST_TO_ADDR
31230: GO 31844
31232: LD_INT 2
31234: DOUBLE
31235: EQUAL
31236: IFTRUE 31240
31238: GO 31251
31240: POP
// bc_type := b_warehouse ; 3 :
31241: LD_ADDR_OWVAR 42
31245: PUSH
31246: LD_INT 1
31248: ST_TO_ADDR
31249: GO 31844
31251: LD_INT 3
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31270
31259: POP
// bc_type := b_lab ; 4 .. 9 :
31260: LD_ADDR_OWVAR 42
31264: PUSH
31265: LD_INT 6
31267: ST_TO_ADDR
31268: GO 31844
31270: LD_INT 4
31272: DOUBLE
31273: GREATEREQUAL
31274: IFFALSE 31282
31276: LD_INT 9
31278: DOUBLE
31279: LESSEQUAL
31280: IFTRUE 31284
31282: GO 31336
31284: POP
// begin bc_type := b_lab_half ;
31285: LD_ADDR_OWVAR 42
31289: PUSH
31290: LD_INT 7
31292: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31293: LD_ADDR_OWVAR 44
31297: PUSH
31298: LD_INT 10
31300: PUSH
31301: LD_INT 11
31303: PUSH
31304: LD_INT 12
31306: PUSH
31307: LD_INT 15
31309: PUSH
31310: LD_INT 14
31312: PUSH
31313: LD_INT 13
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: PUSH
31324: LD_VAR 0 2
31328: PUSH
31329: LD_INT 3
31331: MINUS
31332: ARRAY
31333: ST_TO_ADDR
// end ; 10 .. 13 :
31334: GO 31844
31336: LD_INT 10
31338: DOUBLE
31339: GREATEREQUAL
31340: IFFALSE 31348
31342: LD_INT 13
31344: DOUBLE
31345: LESSEQUAL
31346: IFTRUE 31350
31348: GO 31427
31350: POP
// begin bc_type := b_lab_full ;
31351: LD_ADDR_OWVAR 42
31355: PUSH
31356: LD_INT 8
31358: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31359: LD_ADDR_OWVAR 44
31363: PUSH
31364: LD_INT 10
31366: PUSH
31367: LD_INT 12
31369: PUSH
31370: LD_INT 14
31372: PUSH
31373: LD_INT 13
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: PUSH
31382: LD_VAR 0 2
31386: PUSH
31387: LD_INT 9
31389: MINUS
31390: ARRAY
31391: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31392: LD_ADDR_OWVAR 45
31396: PUSH
31397: LD_INT 11
31399: PUSH
31400: LD_INT 15
31402: PUSH
31403: LD_INT 12
31405: PUSH
31406: LD_INT 15
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: PUSH
31415: LD_VAR 0 2
31419: PUSH
31420: LD_INT 9
31422: MINUS
31423: ARRAY
31424: ST_TO_ADDR
// end ; 14 :
31425: GO 31844
31427: LD_INT 14
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31446
31435: POP
// bc_type := b_workshop ; 15 :
31436: LD_ADDR_OWVAR 42
31440: PUSH
31441: LD_INT 2
31443: ST_TO_ADDR
31444: GO 31844
31446: LD_INT 15
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31465
31454: POP
// bc_type := b_factory ; 16 :
31455: LD_ADDR_OWVAR 42
31459: PUSH
31460: LD_INT 3
31462: ST_TO_ADDR
31463: GO 31844
31465: LD_INT 16
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31484
31473: POP
// bc_type := b_ext_gun ; 17 :
31474: LD_ADDR_OWVAR 42
31478: PUSH
31479: LD_INT 17
31481: ST_TO_ADDR
31482: GO 31844
31484: LD_INT 17
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31520
31492: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31493: LD_ADDR_OWVAR 42
31497: PUSH
31498: LD_INT 19
31500: PUSH
31501: LD_INT 23
31503: PUSH
31504: LD_INT 19
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: PUSH
31512: LD_VAR 0 1
31516: ARRAY
31517: ST_TO_ADDR
31518: GO 31844
31520: LD_INT 18
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31539
31528: POP
// bc_type := b_ext_radar ; 19 :
31529: LD_ADDR_OWVAR 42
31533: PUSH
31534: LD_INT 20
31536: ST_TO_ADDR
31537: GO 31844
31539: LD_INT 19
31541: DOUBLE
31542: EQUAL
31543: IFTRUE 31547
31545: GO 31558
31547: POP
// bc_type := b_ext_radio ; 20 :
31548: LD_ADDR_OWVAR 42
31552: PUSH
31553: LD_INT 22
31555: ST_TO_ADDR
31556: GO 31844
31558: LD_INT 20
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31577
31566: POP
// bc_type := b_ext_siberium ; 21 :
31567: LD_ADDR_OWVAR 42
31571: PUSH
31572: LD_INT 21
31574: ST_TO_ADDR
31575: GO 31844
31577: LD_INT 21
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31596
31585: POP
// bc_type := b_ext_computer ; 22 :
31586: LD_ADDR_OWVAR 42
31590: PUSH
31591: LD_INT 24
31593: ST_TO_ADDR
31594: GO 31844
31596: LD_INT 22
31598: DOUBLE
31599: EQUAL
31600: IFTRUE 31604
31602: GO 31615
31604: POP
// bc_type := b_ext_track ; 23 :
31605: LD_ADDR_OWVAR 42
31609: PUSH
31610: LD_INT 16
31612: ST_TO_ADDR
31613: GO 31844
31615: LD_INT 23
31617: DOUBLE
31618: EQUAL
31619: IFTRUE 31623
31621: GO 31634
31623: POP
// bc_type := b_ext_laser ; 24 :
31624: LD_ADDR_OWVAR 42
31628: PUSH
31629: LD_INT 25
31631: ST_TO_ADDR
31632: GO 31844
31634: LD_INT 24
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31653
31642: POP
// bc_type := b_control_tower ; 25 :
31643: LD_ADDR_OWVAR 42
31647: PUSH
31648: LD_INT 36
31650: ST_TO_ADDR
31651: GO 31844
31653: LD_INT 25
31655: DOUBLE
31656: EQUAL
31657: IFTRUE 31661
31659: GO 31672
31661: POP
// bc_type := b_breastwork ; 26 :
31662: LD_ADDR_OWVAR 42
31666: PUSH
31667: LD_INT 31
31669: ST_TO_ADDR
31670: GO 31844
31672: LD_INT 26
31674: DOUBLE
31675: EQUAL
31676: IFTRUE 31680
31678: GO 31691
31680: POP
// bc_type := b_bunker ; 27 :
31681: LD_ADDR_OWVAR 42
31685: PUSH
31686: LD_INT 32
31688: ST_TO_ADDR
31689: GO 31844
31691: LD_INT 27
31693: DOUBLE
31694: EQUAL
31695: IFTRUE 31699
31697: GO 31710
31699: POP
// bc_type := b_turret ; 28 :
31700: LD_ADDR_OWVAR 42
31704: PUSH
31705: LD_INT 33
31707: ST_TO_ADDR
31708: GO 31844
31710: LD_INT 28
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31718
31716: GO 31729
31718: POP
// bc_type := b_armoury ; 29 :
31719: LD_ADDR_OWVAR 42
31723: PUSH
31724: LD_INT 4
31726: ST_TO_ADDR
31727: GO 31844
31729: LD_INT 29
31731: DOUBLE
31732: EQUAL
31733: IFTRUE 31737
31735: GO 31748
31737: POP
// bc_type := b_barracks ; 30 :
31738: LD_ADDR_OWVAR 42
31742: PUSH
31743: LD_INT 5
31745: ST_TO_ADDR
31746: GO 31844
31748: LD_INT 30
31750: DOUBLE
31751: EQUAL
31752: IFTRUE 31756
31754: GO 31767
31756: POP
// bc_type := b_solar_power ; 31 :
31757: LD_ADDR_OWVAR 42
31761: PUSH
31762: LD_INT 27
31764: ST_TO_ADDR
31765: GO 31844
31767: LD_INT 31
31769: DOUBLE
31770: EQUAL
31771: IFTRUE 31775
31773: GO 31786
31775: POP
// bc_type := b_oil_power ; 32 :
31776: LD_ADDR_OWVAR 42
31780: PUSH
31781: LD_INT 26
31783: ST_TO_ADDR
31784: GO 31844
31786: LD_INT 32
31788: DOUBLE
31789: EQUAL
31790: IFTRUE 31794
31792: GO 31805
31794: POP
// bc_type := b_siberite_power ; 33 :
31795: LD_ADDR_OWVAR 42
31799: PUSH
31800: LD_INT 28
31802: ST_TO_ADDR
31803: GO 31844
31805: LD_INT 33
31807: DOUBLE
31808: EQUAL
31809: IFTRUE 31813
31811: GO 31824
31813: POP
// bc_type := b_oil_mine ; 34 :
31814: LD_ADDR_OWVAR 42
31818: PUSH
31819: LD_INT 29
31821: ST_TO_ADDR
31822: GO 31844
31824: LD_INT 34
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31843
31832: POP
// bc_type := b_siberite_mine ; end ;
31833: LD_ADDR_OWVAR 42
31837: PUSH
31838: LD_INT 30
31840: ST_TO_ADDR
31841: GO 31844
31843: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31844: LD_ADDR_VAR 0 8
31848: PUSH
31849: LD_VAR 0 5
31853: PPUSH
31854: LD_VAR 0 6
31858: PPUSH
31859: LD_VAR 0 3
31863: PPUSH
31864: CALL_OW 47
31868: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31869: LD_OWVAR 42
31873: PUSH
31874: LD_INT 32
31876: PUSH
31877: LD_INT 33
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: IN
31884: IFFALSE 31900
// PlaceWeaponTurret ( b , weapon ) ;
31886: LD_VAR 0 8
31890: PPUSH
31891: LD_VAR 0 4
31895: PPUSH
31896: CALL_OW 431
// end ;
31900: LD_VAR 0 7
31904: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31905: LD_INT 0
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31911: LD_ADDR_VAR 0 4
31915: PUSH
31916: LD_INT 22
31918: PUSH
31919: LD_OWVAR 2
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: LD_INT 30
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 30
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 69
31964: ST_TO_ADDR
// if not tmp then
31965: LD_VAR 0 4
31969: NOT
31970: IFFALSE 31974
// exit ;
31972: GO 32033
// for i in tmp do
31974: LD_ADDR_VAR 0 2
31978: PUSH
31979: LD_VAR 0 4
31983: PUSH
31984: FOR_IN
31985: IFFALSE 32031
// for j = 1 to 3 do
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: DOUBLE
31993: LD_INT 1
31995: DEC
31996: ST_TO_ADDR
31997: LD_INT 3
31999: PUSH
32000: FOR_TO
32001: IFFALSE 32027
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32003: LD_VAR 0 2
32007: PPUSH
32008: CALL_OW 274
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: LD_INT 99999
32020: PPUSH
32021: CALL_OW 277
32025: GO 32000
32027: POP
32028: POP
32029: GO 31984
32031: POP
32032: POP
// end ;
32033: LD_VAR 0 1
32037: RET
// export function hHackSetLevel10 ; var i , j ; begin
32038: LD_INT 0
32040: PPUSH
32041: PPUSH
32042: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32043: LD_ADDR_VAR 0 2
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PPUSH
32058: CALL_OW 69
32062: PUSH
32063: FOR_IN
32064: IFFALSE 32116
// if IsSelected ( i ) then
32066: LD_VAR 0 2
32070: PPUSH
32071: CALL_OW 306
32075: IFFALSE 32114
// begin for j := 1 to 4 do
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: DOUBLE
32083: LD_INT 1
32085: DEC
32086: ST_TO_ADDR
32087: LD_INT 4
32089: PUSH
32090: FOR_TO
32091: IFFALSE 32112
// SetSkill ( i , j , 10 ) ;
32093: LD_VAR 0 2
32097: PPUSH
32098: LD_VAR 0 3
32102: PPUSH
32103: LD_INT 10
32105: PPUSH
32106: CALL_OW 237
32110: GO 32090
32112: POP
32113: POP
// end ;
32114: GO 32063
32116: POP
32117: POP
// end ;
32118: LD_VAR 0 1
32122: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
32127: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32128: LD_ADDR_VAR 0 2
32132: PUSH
32133: LD_INT 22
32135: PUSH
32136: LD_OWVAR 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 21
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PPUSH
32159: CALL_OW 69
32163: PUSH
32164: FOR_IN
32165: IFFALSE 32206
// begin for j := 1 to 4 do
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: DOUBLE
32173: LD_INT 1
32175: DEC
32176: ST_TO_ADDR
32177: LD_INT 4
32179: PUSH
32180: FOR_TO
32181: IFFALSE 32202
// SetSkill ( i , j , 10 ) ;
32183: LD_VAR 0 2
32187: PPUSH
32188: LD_VAR 0 3
32192: PPUSH
32193: LD_INT 10
32195: PPUSH
32196: CALL_OW 237
32200: GO 32180
32202: POP
32203: POP
// end ;
32204: GO 32164
32206: POP
32207: POP
// end ;
32208: LD_VAR 0 1
32212: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32213: LD_INT 0
32215: PPUSH
// uc_side := your_side ;
32216: LD_ADDR_OWVAR 20
32220: PUSH
32221: LD_OWVAR 2
32225: ST_TO_ADDR
// uc_nation := nation ;
32226: LD_ADDR_OWVAR 21
32230: PUSH
32231: LD_VAR 0 1
32235: ST_TO_ADDR
// InitHc ;
32236: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32240: LD_INT 0
32242: PPUSH
32243: LD_VAR 0 2
32247: PPUSH
32248: LD_VAR 0 3
32252: PPUSH
32253: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32257: LD_VAR 0 4
32261: PPUSH
32262: LD_VAR 0 5
32266: PPUSH
32267: CALL_OW 428
32271: PUSH
32272: LD_INT 0
32274: EQUAL
32275: IFFALSE 32299
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32277: CALL_OW 44
32281: PPUSH
32282: LD_VAR 0 4
32286: PPUSH
32287: LD_VAR 0 5
32291: PPUSH
32292: LD_INT 1
32294: PPUSH
32295: CALL_OW 48
// end ;
32299: LD_VAR 0 6
32303: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32304: LD_INT 0
32306: PPUSH
32307: PPUSH
// uc_side := your_side ;
32308: LD_ADDR_OWVAR 20
32312: PUSH
32313: LD_OWVAR 2
32317: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32318: LD_VAR 0 1
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 4
32334: PUSH
32335: LD_INT 5
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: IN
32345: IFFALSE 32357
// uc_nation := nation_american else
32347: LD_ADDR_OWVAR 21
32351: PUSH
32352: LD_INT 1
32354: ST_TO_ADDR
32355: GO 32400
// if chassis in [ 11 , 12 , 13 , 14 ] then
32357: LD_VAR 0 1
32361: PUSH
32362: LD_INT 11
32364: PUSH
32365: LD_INT 12
32367: PUSH
32368: LD_INT 13
32370: PUSH
32371: LD_INT 14
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: IN
32380: IFFALSE 32392
// uc_nation := nation_arabian else
32382: LD_ADDR_OWVAR 21
32386: PUSH
32387: LD_INT 2
32389: ST_TO_ADDR
32390: GO 32400
// uc_nation := nation_russian ;
32392: LD_ADDR_OWVAR 21
32396: PUSH
32397: LD_INT 3
32399: ST_TO_ADDR
// vc_chassis := chassis ;
32400: LD_ADDR_OWVAR 37
32404: PUSH
32405: LD_VAR 0 1
32409: ST_TO_ADDR
// vc_engine := engine ;
32410: LD_ADDR_OWVAR 39
32414: PUSH
32415: LD_VAR 0 2
32419: ST_TO_ADDR
// vc_control := control ;
32420: LD_ADDR_OWVAR 38
32424: PUSH
32425: LD_VAR 0 3
32429: ST_TO_ADDR
// vc_weapon := weapon ;
32430: LD_ADDR_OWVAR 40
32434: PUSH
32435: LD_VAR 0 4
32439: ST_TO_ADDR
// un := CreateVehicle ;
32440: LD_ADDR_VAR 0 8
32444: PUSH
32445: CALL_OW 45
32449: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32450: LD_VAR 0 8
32454: PPUSH
32455: LD_INT 0
32457: PPUSH
32458: LD_INT 5
32460: PPUSH
32461: CALL_OW 12
32465: PPUSH
32466: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32470: LD_VAR 0 8
32474: PPUSH
32475: LD_VAR 0 5
32479: PPUSH
32480: LD_VAR 0 6
32484: PPUSH
32485: LD_INT 1
32487: PPUSH
32488: CALL_OW 48
// end ;
32492: LD_VAR 0 7
32496: RET
// export hInvincible ; every 1 do
32497: GO 32499
32499: DISABLE
// hInvincible := [ ] ;
32500: LD_ADDR_EXP 123
32504: PUSH
32505: EMPTY
32506: ST_TO_ADDR
32507: END
// every 10 do var i ;
32508: GO 32510
32510: DISABLE
32511: LD_INT 0
32513: PPUSH
// begin enable ;
32514: ENABLE
// if not hInvincible then
32515: LD_EXP 123
32519: NOT
32520: IFFALSE 32524
// exit ;
32522: GO 32568
// for i in hInvincible do
32524: LD_ADDR_VAR 0 1
32528: PUSH
32529: LD_EXP 123
32533: PUSH
32534: FOR_IN
32535: IFFALSE 32566
// if GetLives ( i ) < 1000 then
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 256
32546: PUSH
32547: LD_INT 1000
32549: LESS
32550: IFFALSE 32564
// SetLives ( i , 1000 ) ;
32552: LD_VAR 0 1
32556: PPUSH
32557: LD_INT 1000
32559: PPUSH
32560: CALL_OW 234
32564: GO 32534
32566: POP
32567: POP
// end ;
32568: PPOPN 1
32570: END
// export function hHackInvincible ; var i ; begin
32571: LD_INT 0
32573: PPUSH
32574: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32575: LD_ADDR_VAR 0 2
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: LD_INT 21
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 21
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: PPUSH
32608: CALL_OW 69
32612: PUSH
32613: FOR_IN
32614: IFFALSE 32675
// if IsSelected ( i ) then
32616: LD_VAR 0 2
32620: PPUSH
32621: CALL_OW 306
32625: IFFALSE 32673
// begin if i in hInvincible then
32627: LD_VAR 0 2
32631: PUSH
32632: LD_EXP 123
32636: IN
32637: IFFALSE 32657
// hInvincible := hInvincible diff i else
32639: LD_ADDR_EXP 123
32643: PUSH
32644: LD_EXP 123
32648: PUSH
32649: LD_VAR 0 2
32653: DIFF
32654: ST_TO_ADDR
32655: GO 32673
// hInvincible := hInvincible union i ;
32657: LD_ADDR_EXP 123
32661: PUSH
32662: LD_EXP 123
32666: PUSH
32667: LD_VAR 0 2
32671: UNION
32672: ST_TO_ADDR
// end ;
32673: GO 32613
32675: POP
32676: POP
// end ;
32677: LD_VAR 0 1
32681: RET
// export function hHackInvisible ; var i , j ; begin
32682: LD_INT 0
32684: PPUSH
32685: PPUSH
32686: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32687: LD_ADDR_VAR 0 2
32691: PUSH
32692: LD_INT 21
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PPUSH
32702: CALL_OW 69
32706: PUSH
32707: FOR_IN
32708: IFFALSE 32732
// if IsSelected ( i ) then
32710: LD_VAR 0 2
32714: PPUSH
32715: CALL_OW 306
32719: IFFALSE 32730
// ComForceInvisible ( i ) ;
32721: LD_VAR 0 2
32725: PPUSH
32726: CALL_OW 496
32730: GO 32707
32732: POP
32733: POP
// end ;
32734: LD_VAR 0 1
32738: RET
// export function hHackChangeYourSide ; begin
32739: LD_INT 0
32741: PPUSH
// if your_side = 8 then
32742: LD_OWVAR 2
32746: PUSH
32747: LD_INT 8
32749: EQUAL
32750: IFFALSE 32762
// your_side := 0 else
32752: LD_ADDR_OWVAR 2
32756: PUSH
32757: LD_INT 0
32759: ST_TO_ADDR
32760: GO 32776
// your_side := your_side + 1 ;
32762: LD_ADDR_OWVAR 2
32766: PUSH
32767: LD_OWVAR 2
32771: PUSH
32772: LD_INT 1
32774: PLUS
32775: ST_TO_ADDR
// end ;
32776: LD_VAR 0 1
32780: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32781: LD_INT 0
32783: PPUSH
32784: PPUSH
32785: PPUSH
// for i in all_units do
32786: LD_ADDR_VAR 0 2
32790: PUSH
32791: LD_OWVAR 3
32795: PUSH
32796: FOR_IN
32797: IFFALSE 32875
// if IsSelected ( i ) then
32799: LD_VAR 0 2
32803: PPUSH
32804: CALL_OW 306
32808: IFFALSE 32873
// begin j := GetSide ( i ) ;
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_VAR 0 2
32819: PPUSH
32820: CALL_OW 255
32824: ST_TO_ADDR
// if j = 8 then
32825: LD_VAR 0 3
32829: PUSH
32830: LD_INT 8
32832: EQUAL
32833: IFFALSE 32845
// j := 0 else
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_INT 0
32842: ST_TO_ADDR
32843: GO 32859
// j := j + 1 ;
32845: LD_ADDR_VAR 0 3
32849: PUSH
32850: LD_VAR 0 3
32854: PUSH
32855: LD_INT 1
32857: PLUS
32858: ST_TO_ADDR
// SetSide ( i , j ) ;
32859: LD_VAR 0 2
32863: PPUSH
32864: LD_VAR 0 3
32868: PPUSH
32869: CALL_OW 235
// end ;
32873: GO 32796
32875: POP
32876: POP
// end ;
32877: LD_VAR 0 1
32881: RET
// export function hHackFog ; begin
32882: LD_INT 0
32884: PPUSH
// FogOff ( true ) ;
32885: LD_INT 1
32887: PPUSH
32888: CALL_OW 344
// end ;
32892: LD_VAR 0 1
32896: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32897: LD_INT 0
32899: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32900: LD_VAR 0 1
32904: PPUSH
32905: LD_VAR 0 2
32909: PPUSH
32910: LD_VAR 0 3
32914: PPUSH
32915: LD_INT 1
32917: PPUSH
32918: LD_INT 1
32920: PPUSH
32921: CALL_OW 483
// CenterOnXY ( x , y ) ;
32925: LD_VAR 0 2
32929: PPUSH
32930: LD_VAR 0 3
32934: PPUSH
32935: CALL_OW 84
// end ;
32939: LD_VAR 0 4
32943: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32944: LD_INT 0
32946: PPUSH
32947: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32948: LD_VAR 0 1
32952: NOT
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: LD_VAR 0 3
32963: PPUSH
32964: CALL_OW 488
32968: NOT
32969: OR
32970: PUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 266
32980: PUSH
32981: LD_INT 3
32983: NONEQUAL
32984: PUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 247
32994: PUSH
32995: LD_INT 1
32997: EQUAL
32998: NOT
32999: AND
33000: OR
33001: IFFALSE 33005
// exit ;
33003: GO 33154
// if GetType ( factory ) = unit_human then
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 247
33014: PUSH
33015: LD_INT 1
33017: EQUAL
33018: IFFALSE 33035
// factory := IsInUnit ( factory ) ;
33020: LD_ADDR_VAR 0 1
33024: PUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 310
33034: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 266
33044: PUSH
33045: LD_INT 3
33047: NONEQUAL
33048: IFFALSE 33052
// exit ;
33050: GO 33154
// if HexInfo ( x , y ) = factory then
33052: LD_VAR 0 2
33056: PPUSH
33057: LD_VAR 0 3
33061: PPUSH
33062: CALL_OW 428
33066: PUSH
33067: LD_VAR 0 1
33071: EQUAL
33072: IFFALSE 33099
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33074: LD_ADDR_EXP 124
33078: PUSH
33079: LD_EXP 124
33083: PPUSH
33084: LD_VAR 0 1
33088: PPUSH
33089: LD_INT 0
33091: PPUSH
33092: CALL_OW 1
33096: ST_TO_ADDR
33097: GO 33150
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33099: LD_ADDR_EXP 124
33103: PUSH
33104: LD_EXP 124
33108: PPUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: LD_VAR 0 1
33118: PPUSH
33119: CALL_OW 255
33123: PUSH
33124: LD_VAR 0 1
33128: PUSH
33129: LD_VAR 0 2
33133: PUSH
33134: LD_VAR 0 3
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: PPUSH
33145: CALL_OW 1
33149: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33150: CALL 33159 0 0
// end ;
33154: LD_VAR 0 4
33158: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33159: LD_INT 0
33161: PPUSH
33162: PPUSH
33163: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33164: LD_STRING resetFactoryWaypoint();
33166: PPUSH
33167: CALL_OW 559
// if factoryWaypoints then
33171: LD_EXP 124
33175: IFFALSE 33301
// begin list := PrepareArray ( factoryWaypoints ) ;
33177: LD_ADDR_VAR 0 3
33181: PUSH
33182: LD_EXP 124
33186: PPUSH
33187: CALL 80056 0 1
33191: ST_TO_ADDR
// for i := 1 to list do
33192: LD_ADDR_VAR 0 2
33196: PUSH
33197: DOUBLE
33198: LD_INT 1
33200: DEC
33201: ST_TO_ADDR
33202: LD_VAR 0 3
33206: PUSH
33207: FOR_TO
33208: IFFALSE 33299
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33210: LD_STRING setFactoryWaypointXY(
33212: PUSH
33213: LD_VAR 0 3
33217: PUSH
33218: LD_VAR 0 2
33222: ARRAY
33223: PUSH
33224: LD_INT 1
33226: ARRAY
33227: STR
33228: PUSH
33229: LD_STRING ,
33231: STR
33232: PUSH
33233: LD_VAR 0 3
33237: PUSH
33238: LD_VAR 0 2
33242: ARRAY
33243: PUSH
33244: LD_INT 2
33246: ARRAY
33247: STR
33248: PUSH
33249: LD_STRING ,
33251: STR
33252: PUSH
33253: LD_VAR 0 3
33257: PUSH
33258: LD_VAR 0 2
33262: ARRAY
33263: PUSH
33264: LD_INT 3
33266: ARRAY
33267: STR
33268: PUSH
33269: LD_STRING ,
33271: STR
33272: PUSH
33273: LD_VAR 0 3
33277: PUSH
33278: LD_VAR 0 2
33282: ARRAY
33283: PUSH
33284: LD_INT 4
33286: ARRAY
33287: STR
33288: PUSH
33289: LD_STRING )
33291: STR
33292: PPUSH
33293: CALL_OW 559
33297: GO 33207
33299: POP
33300: POP
// end ; end ;
33301: LD_VAR 0 1
33305: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33306: LD_INT 0
33308: PPUSH
// if HexInfo ( x , y ) = warehouse then
33309: LD_VAR 0 2
33313: PPUSH
33314: LD_VAR 0 3
33318: PPUSH
33319: CALL_OW 428
33323: PUSH
33324: LD_VAR 0 1
33328: EQUAL
33329: IFFALSE 33356
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33331: LD_ADDR_EXP 125
33335: PUSH
33336: LD_EXP 125
33340: PPUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: LD_INT 0
33348: PPUSH
33349: CALL_OW 1
33353: ST_TO_ADDR
33354: GO 33407
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33356: LD_ADDR_EXP 125
33360: PUSH
33361: LD_EXP 125
33365: PPUSH
33366: LD_VAR 0 1
33370: PPUSH
33371: LD_VAR 0 1
33375: PPUSH
33376: CALL_OW 255
33380: PUSH
33381: LD_VAR 0 1
33385: PUSH
33386: LD_VAR 0 2
33390: PUSH
33391: LD_VAR 0 3
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: PPUSH
33402: CALL_OW 1
33406: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33407: CALL 33416 0 0
// end ;
33411: LD_VAR 0 4
33415: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33416: LD_INT 0
33418: PPUSH
33419: PPUSH
33420: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33421: LD_STRING resetWarehouseGatheringPoints();
33423: PPUSH
33424: CALL_OW 559
// if warehouseGatheringPoints then
33428: LD_EXP 125
33432: IFFALSE 33558
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_EXP 125
33443: PPUSH
33444: CALL 80056 0 1
33448: ST_TO_ADDR
// for i := 1 to list do
33449: LD_ADDR_VAR 0 2
33453: PUSH
33454: DOUBLE
33455: LD_INT 1
33457: DEC
33458: ST_TO_ADDR
33459: LD_VAR 0 3
33463: PUSH
33464: FOR_TO
33465: IFFALSE 33556
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33467: LD_STRING setWarehouseGatheringPointXY(
33469: PUSH
33470: LD_VAR 0 3
33474: PUSH
33475: LD_VAR 0 2
33479: ARRAY
33480: PUSH
33481: LD_INT 1
33483: ARRAY
33484: STR
33485: PUSH
33486: LD_STRING ,
33488: STR
33489: PUSH
33490: LD_VAR 0 3
33494: PUSH
33495: LD_VAR 0 2
33499: ARRAY
33500: PUSH
33501: LD_INT 2
33503: ARRAY
33504: STR
33505: PUSH
33506: LD_STRING ,
33508: STR
33509: PUSH
33510: LD_VAR 0 3
33514: PUSH
33515: LD_VAR 0 2
33519: ARRAY
33520: PUSH
33521: LD_INT 3
33523: ARRAY
33524: STR
33525: PUSH
33526: LD_STRING ,
33528: STR
33529: PUSH
33530: LD_VAR 0 3
33534: PUSH
33535: LD_VAR 0 2
33539: ARRAY
33540: PUSH
33541: LD_INT 4
33543: ARRAY
33544: STR
33545: PUSH
33546: LD_STRING )
33548: STR
33549: PPUSH
33550: CALL_OW 559
33554: GO 33464
33556: POP
33557: POP
// end ; end ;
33558: LD_VAR 0 1
33562: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33563: LD_EXP 125
33567: IFFALSE 34254
33569: GO 33571
33571: DISABLE
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
33582: PPUSH
// begin enable ;
33583: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_EXP 125
33593: PPUSH
33594: CALL 80056 0 1
33598: ST_TO_ADDR
// if not list then
33599: LD_VAR 0 3
33603: NOT
33604: IFFALSE 33608
// exit ;
33606: GO 34254
// for i := 1 to list do
33608: LD_ADDR_VAR 0 1
33612: PUSH
33613: DOUBLE
33614: LD_INT 1
33616: DEC
33617: ST_TO_ADDR
33618: LD_VAR 0 3
33622: PUSH
33623: FOR_TO
33624: IFFALSE 34252
// begin depot := list [ i ] [ 2 ] ;
33626: LD_ADDR_VAR 0 8
33630: PUSH
33631: LD_VAR 0 3
33635: PUSH
33636: LD_VAR 0 1
33640: ARRAY
33641: PUSH
33642: LD_INT 2
33644: ARRAY
33645: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33646: LD_ADDR_VAR 0 5
33650: PUSH
33651: LD_VAR 0 3
33655: PUSH
33656: LD_VAR 0 1
33660: ARRAY
33661: PUSH
33662: LD_INT 1
33664: ARRAY
33665: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33666: LD_VAR 0 8
33670: PPUSH
33671: CALL_OW 301
33675: PUSH
33676: LD_VAR 0 5
33680: PUSH
33681: LD_VAR 0 8
33685: PPUSH
33686: CALL_OW 255
33690: NONEQUAL
33691: OR
33692: IFFALSE 33721
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33694: LD_ADDR_EXP 125
33698: PUSH
33699: LD_EXP 125
33703: PPUSH
33704: LD_VAR 0 8
33708: PPUSH
33709: LD_INT 0
33711: PPUSH
33712: CALL_OW 1
33716: ST_TO_ADDR
// exit ;
33717: POP
33718: POP
33719: GO 34254
// end ; x := list [ i ] [ 3 ] ;
33721: LD_ADDR_VAR 0 6
33725: PUSH
33726: LD_VAR 0 3
33730: PUSH
33731: LD_VAR 0 1
33735: ARRAY
33736: PUSH
33737: LD_INT 3
33739: ARRAY
33740: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33741: LD_ADDR_VAR 0 7
33745: PUSH
33746: LD_VAR 0 3
33750: PUSH
33751: LD_VAR 0 1
33755: ARRAY
33756: PUSH
33757: LD_INT 4
33759: ARRAY
33760: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33761: LD_ADDR_VAR 0 9
33765: PUSH
33766: LD_VAR 0 6
33770: PPUSH
33771: LD_VAR 0 7
33775: PPUSH
33776: LD_INT 16
33778: PPUSH
33779: CALL 78640 0 3
33783: ST_TO_ADDR
// if not cratesNearbyPoint then
33784: LD_VAR 0 9
33788: NOT
33789: IFFALSE 33795
// exit ;
33791: POP
33792: POP
33793: GO 34254
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33795: LD_ADDR_VAR 0 4
33799: PUSH
33800: LD_INT 22
33802: PUSH
33803: LD_VAR 0 5
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: LD_INT 60
33817: PUSH
33818: EMPTY
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 91
33827: PUSH
33828: LD_VAR 0 8
33832: PUSH
33833: LD_INT 6
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: LD_INT 25
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 25
33856: PUSH
33857: LD_INT 16
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: PPUSH
33875: CALL_OW 69
33879: PUSH
33880: LD_VAR 0 8
33884: PPUSH
33885: CALL_OW 313
33889: PPUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 60
33895: PUSH
33896: EMPTY
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 25
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 25
33918: PUSH
33919: LD_INT 16
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PPUSH
33935: CALL_OW 72
33939: UNION
33940: ST_TO_ADDR
// if tmp then
33941: LD_VAR 0 4
33945: IFFALSE 34025
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33947: LD_ADDR_VAR 0 4
33951: PUSH
33952: LD_VAR 0 4
33956: PPUSH
33957: LD_INT 3
33959: PPUSH
33960: CALL 76607 0 2
33964: ST_TO_ADDR
// for j in tmp do
33965: LD_ADDR_VAR 0 2
33969: PUSH
33970: LD_VAR 0 4
33974: PUSH
33975: FOR_IN
33976: IFFALSE 34019
// begin if IsInUnit ( j ) then
33978: LD_VAR 0 2
33982: PPUSH
33983: CALL_OW 310
33987: IFFALSE 33998
// ComExit ( j ) ;
33989: LD_VAR 0 2
33993: PPUSH
33994: CALL 76690 0 1
// AddComCollect ( j , x , y ) ;
33998: LD_VAR 0 2
34002: PPUSH
34003: LD_VAR 0 6
34007: PPUSH
34008: LD_VAR 0 7
34012: PPUSH
34013: CALL_OW 177
// end ;
34017: GO 33975
34019: POP
34020: POP
// exit ;
34021: POP
34022: POP
34023: GO 34254
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34025: LD_ADDR_VAR 0 4
34029: PUSH
34030: LD_INT 22
34032: PUSH
34033: LD_VAR 0 5
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 91
34044: PUSH
34045: LD_VAR 0 8
34049: PUSH
34050: LD_INT 8
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 34
34063: PUSH
34064: LD_INT 12
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 34
34073: PUSH
34074: LD_INT 51
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 34
34083: PUSH
34084: LD_INT 32
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 34
34093: PUSH
34094: LD_EXP 138
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: PPUSH
34115: CALL_OW 69
34119: ST_TO_ADDR
// if tmp then
34120: LD_VAR 0 4
34124: IFFALSE 34250
// begin for j in tmp do
34126: LD_ADDR_VAR 0 2
34130: PUSH
34131: LD_VAR 0 4
34135: PUSH
34136: FOR_IN
34137: IFFALSE 34248
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34139: LD_VAR 0 2
34143: PPUSH
34144: CALL_OW 262
34148: PUSH
34149: LD_INT 3
34151: EQUAL
34152: PUSH
34153: LD_VAR 0 2
34157: PPUSH
34158: CALL_OW 261
34162: PUSH
34163: LD_INT 20
34165: GREATER
34166: OR
34167: PUSH
34168: LD_VAR 0 2
34172: PPUSH
34173: CALL_OW 314
34177: NOT
34178: AND
34179: PUSH
34180: LD_VAR 0 2
34184: PPUSH
34185: CALL_OW 263
34189: PUSH
34190: LD_INT 1
34192: NONEQUAL
34193: PUSH
34194: LD_VAR 0 2
34198: PPUSH
34199: CALL_OW 311
34203: OR
34204: AND
34205: IFFALSE 34246
// begin ComCollect ( j , x , y ) ;
34207: LD_VAR 0 2
34211: PPUSH
34212: LD_VAR 0 6
34216: PPUSH
34217: LD_VAR 0 7
34221: PPUSH
34222: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34226: LD_VAR 0 2
34230: PPUSH
34231: LD_VAR 0 8
34235: PPUSH
34236: CALL_OW 172
// exit ;
34240: POP
34241: POP
34242: POP
34243: POP
34244: GO 34254
// end ;
34246: GO 34136
34248: POP
34249: POP
// end ; end ;
34250: GO 33623
34252: POP
34253: POP
// end ; end_of_file
34254: PPOPN 9
34256: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34257: LD_VAR 0 1
34261: PUSH
34262: LD_INT 200
34264: DOUBLE
34265: GREATEREQUAL
34266: IFFALSE 34274
34268: LD_INT 299
34270: DOUBLE
34271: LESSEQUAL
34272: IFTRUE 34276
34274: GO 34308
34276: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34277: LD_VAR 0 1
34281: PPUSH
34282: LD_VAR 0 2
34286: PPUSH
34287: LD_VAR 0 3
34291: PPUSH
34292: LD_VAR 0 4
34296: PPUSH
34297: LD_VAR 0 5
34301: PPUSH
34302: CALL 34798 0 5
34306: GO 34385
34308: LD_INT 300
34310: DOUBLE
34311: GREATEREQUAL
34312: IFFALSE 34320
34314: LD_INT 399
34316: DOUBLE
34317: LESSEQUAL
34318: IFTRUE 34322
34320: GO 34384
34322: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34323: LD_VAR 0 1
34327: PPUSH
34328: LD_VAR 0 2
34332: PPUSH
34333: LD_VAR 0 3
34337: PPUSH
34338: LD_VAR 0 4
34342: PPUSH
34343: LD_VAR 0 5
34347: PPUSH
34348: LD_VAR 0 6
34352: PPUSH
34353: LD_VAR 0 7
34357: PPUSH
34358: LD_VAR 0 8
34362: PPUSH
34363: LD_VAR 0 9
34367: PPUSH
34368: LD_VAR 0 10
34372: PPUSH
34373: LD_VAR 0 11
34377: PPUSH
34378: CALL 30964 0 11
34382: GO 34385
34384: POP
// end ;
34385: PPOPN 11
34387: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34388: LD_VAR 0 1
34392: PPUSH
34393: LD_VAR 0 2
34397: PPUSH
34398: LD_VAR 0 3
34402: PPUSH
34403: LD_VAR 0 4
34407: PPUSH
34408: LD_VAR 0 5
34412: PPUSH
34413: CALL 34534 0 5
// end ; end_of_file end_of_file
34417: PPOPN 5
34419: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 264
34435: PUSH
34436: LD_EXP 141
34440: EQUAL
34441: IFFALSE 34513
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34443: LD_INT 68
34445: PPUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 255
34455: PPUSH
34456: CALL_OW 321
34460: PUSH
34461: LD_INT 2
34463: EQUAL
34464: IFFALSE 34476
// eff := 70 else
34466: LD_ADDR_VAR 0 4
34470: PUSH
34471: LD_INT 70
34473: ST_TO_ADDR
34474: GO 34484
// eff := 30 ;
34476: LD_ADDR_VAR 0 4
34480: PUSH
34481: LD_INT 30
34483: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 250
34493: PPUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: CALL_OW 251
34503: PPUSH
34504: LD_VAR 0 4
34508: PPUSH
34509: CALL_OW 495
// end ; end ;
34513: LD_VAR 0 2
34517: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34518: LD_INT 0
34520: PPUSH
// end ;
34521: LD_VAR 0 4
34525: RET
// export function SOS_Command ( cmd ) ; begin
34526: LD_INT 0
34528: PPUSH
// end ;
34529: LD_VAR 0 2
34533: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34534: LD_INT 0
34536: PPUSH
// end ;
34537: LD_VAR 0 6
34541: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34542: LD_INT 0
34544: PPUSH
34545: PPUSH
// if not vehicle or not factory then
34546: LD_VAR 0 1
34550: NOT
34551: PUSH
34552: LD_VAR 0 2
34556: NOT
34557: OR
34558: IFFALSE 34562
// exit ;
34560: GO 34793
// if factoryWaypoints >= factory then
34562: LD_EXP 124
34566: PUSH
34567: LD_VAR 0 2
34571: GREATEREQUAL
34572: IFFALSE 34793
// if factoryWaypoints [ factory ] then
34574: LD_EXP 124
34578: PUSH
34579: LD_VAR 0 2
34583: ARRAY
34584: IFFALSE 34793
// begin if GetControl ( vehicle ) = control_manual then
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL_OW 263
34595: PUSH
34596: LD_INT 1
34598: EQUAL
34599: IFFALSE 34680
// begin driver := IsDrivenBy ( vehicle ) ;
34601: LD_ADDR_VAR 0 4
34605: PUSH
34606: LD_VAR 0 1
34610: PPUSH
34611: CALL_OW 311
34615: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34616: LD_VAR 0 4
34620: PPUSH
34621: LD_EXP 124
34625: PUSH
34626: LD_VAR 0 2
34630: ARRAY
34631: PUSH
34632: LD_INT 3
34634: ARRAY
34635: PPUSH
34636: LD_EXP 124
34640: PUSH
34641: LD_VAR 0 2
34645: ARRAY
34646: PUSH
34647: LD_INT 4
34649: ARRAY
34650: PPUSH
34651: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34655: LD_VAR 0 4
34659: PPUSH
34660: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34664: LD_VAR 0 4
34668: PPUSH
34669: LD_VAR 0 2
34673: PPUSH
34674: CALL_OW 180
// end else
34678: GO 34793
// if GetControl ( vehicle ) = control_remote then
34680: LD_VAR 0 1
34684: PPUSH
34685: CALL_OW 263
34689: PUSH
34690: LD_INT 2
34692: EQUAL
34693: IFFALSE 34754
// begin wait ( 0 0$2 ) ;
34695: LD_INT 70
34697: PPUSH
34698: CALL_OW 67
// if Connect ( vehicle ) then
34702: LD_VAR 0 1
34706: PPUSH
34707: CALL 47001 0 1
34711: IFFALSE 34752
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34713: LD_VAR 0 1
34717: PPUSH
34718: LD_EXP 124
34722: PUSH
34723: LD_VAR 0 2
34727: ARRAY
34728: PUSH
34729: LD_INT 3
34731: ARRAY
34732: PPUSH
34733: LD_EXP 124
34737: PUSH
34738: LD_VAR 0 2
34742: ARRAY
34743: PUSH
34744: LD_INT 4
34746: ARRAY
34747: PPUSH
34748: CALL_OW 171
// end else
34752: GO 34793
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34754: LD_VAR 0 1
34758: PPUSH
34759: LD_EXP 124
34763: PUSH
34764: LD_VAR 0 2
34768: ARRAY
34769: PUSH
34770: LD_INT 3
34772: ARRAY
34773: PPUSH
34774: LD_EXP 124
34778: PUSH
34779: LD_VAR 0 2
34783: ARRAY
34784: PUSH
34785: LD_INT 4
34787: ARRAY
34788: PPUSH
34789: CALL_OW 171
// end ; end ;
34793: LD_VAR 0 3
34797: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34798: LD_INT 0
34800: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34801: LD_VAR 0 1
34805: PUSH
34806: LD_INT 250
34808: EQUAL
34809: PUSH
34810: LD_VAR 0 2
34814: PPUSH
34815: CALL_OW 264
34819: PUSH
34820: LD_EXP 144
34824: EQUAL
34825: AND
34826: IFFALSE 34847
// MinerPlaceMine ( unit , x , y ) ;
34828: LD_VAR 0 2
34832: PPUSH
34833: LD_VAR 0 4
34837: PPUSH
34838: LD_VAR 0 5
34842: PPUSH
34843: CALL 37246 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34847: LD_VAR 0 1
34851: PUSH
34852: LD_INT 251
34854: EQUAL
34855: PUSH
34856: LD_VAR 0 2
34860: PPUSH
34861: CALL_OW 264
34865: PUSH
34866: LD_EXP 144
34870: EQUAL
34871: AND
34872: IFFALSE 34893
// MinerDetonateMine ( unit , x , y ) ;
34874: LD_VAR 0 2
34878: PPUSH
34879: LD_VAR 0 4
34883: PPUSH
34884: LD_VAR 0 5
34888: PPUSH
34889: CALL 37523 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34893: LD_VAR 0 1
34897: PUSH
34898: LD_INT 252
34900: EQUAL
34901: PUSH
34902: LD_VAR 0 2
34906: PPUSH
34907: CALL_OW 264
34911: PUSH
34912: LD_EXP 144
34916: EQUAL
34917: AND
34918: IFFALSE 34939
// MinerCreateMinefield ( unit , x , y ) ;
34920: LD_VAR 0 2
34924: PPUSH
34925: LD_VAR 0 4
34929: PPUSH
34930: LD_VAR 0 5
34934: PPUSH
34935: CALL 37940 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34939: LD_VAR 0 1
34943: PUSH
34944: LD_INT 253
34946: EQUAL
34947: PUSH
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL_OW 257
34957: PUSH
34958: LD_INT 5
34960: EQUAL
34961: AND
34962: IFFALSE 34983
// ComBinocular ( unit , x , y ) ;
34964: LD_VAR 0 2
34968: PPUSH
34969: LD_VAR 0 4
34973: PPUSH
34974: LD_VAR 0 5
34978: PPUSH
34979: CALL 38311 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34983: LD_VAR 0 1
34987: PUSH
34988: LD_INT 254
34990: EQUAL
34991: PUSH
34992: LD_VAR 0 2
34996: PPUSH
34997: CALL_OW 264
35001: PUSH
35002: LD_EXP 139
35006: EQUAL
35007: AND
35008: PUSH
35009: LD_VAR 0 3
35013: PPUSH
35014: CALL_OW 263
35018: PUSH
35019: LD_INT 3
35021: EQUAL
35022: AND
35023: IFFALSE 35039
// HackDestroyVehicle ( unit , selectedUnit ) ;
35025: LD_VAR 0 2
35029: PPUSH
35030: LD_VAR 0 3
35034: PPUSH
35035: CALL 36606 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35039: LD_VAR 0 1
35043: PUSH
35044: LD_INT 255
35046: EQUAL
35047: PUSH
35048: LD_VAR 0 2
35052: PPUSH
35053: CALL_OW 264
35057: PUSH
35058: LD_INT 14
35060: PUSH
35061: LD_INT 53
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: IN
35068: AND
35069: PUSH
35070: LD_VAR 0 4
35074: PPUSH
35075: LD_VAR 0 5
35079: PPUSH
35080: CALL_OW 488
35084: AND
35085: IFFALSE 35109
// CutTreeXYR ( unit , x , y , 12 ) ;
35087: LD_VAR 0 2
35091: PPUSH
35092: LD_VAR 0 4
35096: PPUSH
35097: LD_VAR 0 5
35101: PPUSH
35102: LD_INT 12
35104: PPUSH
35105: CALL 35172 0 4
// if cmd = 256 then
35109: LD_VAR 0 1
35113: PUSH
35114: LD_INT 256
35116: EQUAL
35117: IFFALSE 35138
// SetFactoryWaypoint ( unit , x , y ) ;
35119: LD_VAR 0 2
35123: PPUSH
35124: LD_VAR 0 4
35128: PPUSH
35129: LD_VAR 0 5
35133: PPUSH
35134: CALL 32944 0 3
// if cmd = 257 then
35138: LD_VAR 0 1
35142: PUSH
35143: LD_INT 257
35145: EQUAL
35146: IFFALSE 35167
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35148: LD_VAR 0 2
35152: PPUSH
35153: LD_VAR 0 4
35157: PPUSH
35158: LD_VAR 0 5
35162: PPUSH
35163: CALL 33306 0 3
// end ;
35167: LD_VAR 0 6
35171: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35172: LD_INT 0
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35183: LD_VAR 0 1
35187: NOT
35188: PUSH
35189: LD_VAR 0 2
35193: PPUSH
35194: LD_VAR 0 3
35198: PPUSH
35199: CALL_OW 488
35203: NOT
35204: OR
35205: PUSH
35206: LD_VAR 0 4
35210: NOT
35211: OR
35212: IFFALSE 35216
// exit ;
35214: GO 35556
// list := [ ] ;
35216: LD_ADDR_VAR 0 13
35220: PUSH
35221: EMPTY
35222: ST_TO_ADDR
// if x - r < 0 then
35223: LD_VAR 0 2
35227: PUSH
35228: LD_VAR 0 4
35232: MINUS
35233: PUSH
35234: LD_INT 0
35236: LESS
35237: IFFALSE 35249
// min_x := 0 else
35239: LD_ADDR_VAR 0 7
35243: PUSH
35244: LD_INT 0
35246: ST_TO_ADDR
35247: GO 35265
// min_x := x - r ;
35249: LD_ADDR_VAR 0 7
35253: PUSH
35254: LD_VAR 0 2
35258: PUSH
35259: LD_VAR 0 4
35263: MINUS
35264: ST_TO_ADDR
// if y - r < 0 then
35265: LD_VAR 0 3
35269: PUSH
35270: LD_VAR 0 4
35274: MINUS
35275: PUSH
35276: LD_INT 0
35278: LESS
35279: IFFALSE 35291
// min_y := 0 else
35281: LD_ADDR_VAR 0 8
35285: PUSH
35286: LD_INT 0
35288: ST_TO_ADDR
35289: GO 35307
// min_y := y - r ;
35291: LD_ADDR_VAR 0 8
35295: PUSH
35296: LD_VAR 0 3
35300: PUSH
35301: LD_VAR 0 4
35305: MINUS
35306: ST_TO_ADDR
// max_x := x + r ;
35307: LD_ADDR_VAR 0 9
35311: PUSH
35312: LD_VAR 0 2
35316: PUSH
35317: LD_VAR 0 4
35321: PLUS
35322: ST_TO_ADDR
// max_y := y + r ;
35323: LD_ADDR_VAR 0 10
35327: PUSH
35328: LD_VAR 0 3
35332: PUSH
35333: LD_VAR 0 4
35337: PLUS
35338: ST_TO_ADDR
// for _x = min_x to max_x do
35339: LD_ADDR_VAR 0 11
35343: PUSH
35344: DOUBLE
35345: LD_VAR 0 7
35349: DEC
35350: ST_TO_ADDR
35351: LD_VAR 0 9
35355: PUSH
35356: FOR_TO
35357: IFFALSE 35474
// for _y = min_y to max_y do
35359: LD_ADDR_VAR 0 12
35363: PUSH
35364: DOUBLE
35365: LD_VAR 0 8
35369: DEC
35370: ST_TO_ADDR
35371: LD_VAR 0 10
35375: PUSH
35376: FOR_TO
35377: IFFALSE 35470
// begin if not ValidHex ( _x , _y ) then
35379: LD_VAR 0 11
35383: PPUSH
35384: LD_VAR 0 12
35388: PPUSH
35389: CALL_OW 488
35393: NOT
35394: IFFALSE 35398
// continue ;
35396: GO 35376
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35398: LD_VAR 0 11
35402: PPUSH
35403: LD_VAR 0 12
35407: PPUSH
35408: CALL_OW 351
35412: PUSH
35413: LD_VAR 0 11
35417: PPUSH
35418: LD_VAR 0 12
35422: PPUSH
35423: CALL_OW 554
35427: AND
35428: IFFALSE 35468
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35430: LD_ADDR_VAR 0 13
35434: PUSH
35435: LD_VAR 0 13
35439: PPUSH
35440: LD_VAR 0 13
35444: PUSH
35445: LD_INT 1
35447: PLUS
35448: PPUSH
35449: LD_VAR 0 11
35453: PUSH
35454: LD_VAR 0 12
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PPUSH
35463: CALL_OW 2
35467: ST_TO_ADDR
// end ;
35468: GO 35376
35470: POP
35471: POP
35472: GO 35356
35474: POP
35475: POP
// if not list then
35476: LD_VAR 0 13
35480: NOT
35481: IFFALSE 35485
// exit ;
35483: GO 35556
// for i in list do
35485: LD_ADDR_VAR 0 6
35489: PUSH
35490: LD_VAR 0 13
35494: PUSH
35495: FOR_IN
35496: IFFALSE 35554
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35498: LD_VAR 0 1
35502: PPUSH
35503: LD_STRING M
35505: PUSH
35506: LD_VAR 0 6
35510: PUSH
35511: LD_INT 1
35513: ARRAY
35514: PUSH
35515: LD_VAR 0 6
35519: PUSH
35520: LD_INT 2
35522: ARRAY
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: PPUSH
35548: CALL_OW 447
35552: GO 35495
35554: POP
35555: POP
// end ;
35556: LD_VAR 0 5
35560: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35561: LD_EXP 127
35565: NOT
35566: IFFALSE 35616
35568: GO 35570
35570: DISABLE
// begin initHack := true ;
35571: LD_ADDR_EXP 127
35575: PUSH
35576: LD_INT 1
35578: ST_TO_ADDR
// hackTanks := [ ] ;
35579: LD_ADDR_EXP 128
35583: PUSH
35584: EMPTY
35585: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35586: LD_ADDR_EXP 129
35590: PUSH
35591: EMPTY
35592: ST_TO_ADDR
// hackLimit := 3 ;
35593: LD_ADDR_EXP 130
35597: PUSH
35598: LD_INT 3
35600: ST_TO_ADDR
// hackDist := 12 ;
35601: LD_ADDR_EXP 131
35605: PUSH
35606: LD_INT 12
35608: ST_TO_ADDR
// hackCounter := [ ] ;
35609: LD_ADDR_EXP 132
35613: PUSH
35614: EMPTY
35615: ST_TO_ADDR
// end ;
35616: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35617: LD_EXP 127
35621: PUSH
35622: LD_INT 34
35624: PUSH
35625: LD_EXP 139
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PPUSH
35634: CALL_OW 69
35638: AND
35639: IFFALSE 35894
35641: GO 35643
35643: DISABLE
35644: LD_INT 0
35646: PPUSH
35647: PPUSH
// begin enable ;
35648: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35649: LD_ADDR_VAR 0 1
35653: PUSH
35654: LD_INT 34
35656: PUSH
35657: LD_EXP 139
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PPUSH
35666: CALL_OW 69
35670: PUSH
35671: FOR_IN
35672: IFFALSE 35892
// begin if not i in hackTanks then
35674: LD_VAR 0 1
35678: PUSH
35679: LD_EXP 128
35683: IN
35684: NOT
35685: IFFALSE 35768
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35687: LD_ADDR_EXP 128
35691: PUSH
35692: LD_EXP 128
35696: PPUSH
35697: LD_EXP 128
35701: PUSH
35702: LD_INT 1
35704: PLUS
35705: PPUSH
35706: LD_VAR 0 1
35710: PPUSH
35711: CALL_OW 1
35715: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35716: LD_ADDR_EXP 129
35720: PUSH
35721: LD_EXP 129
35725: PPUSH
35726: LD_EXP 129
35730: PUSH
35731: LD_INT 1
35733: PLUS
35734: PPUSH
35735: EMPTY
35736: PPUSH
35737: CALL_OW 1
35741: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35742: LD_ADDR_EXP 132
35746: PUSH
35747: LD_EXP 132
35751: PPUSH
35752: LD_EXP 132
35756: PUSH
35757: LD_INT 1
35759: PLUS
35760: PPUSH
35761: EMPTY
35762: PPUSH
35763: CALL_OW 1
35767: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35768: LD_VAR 0 1
35772: PPUSH
35773: CALL_OW 302
35777: NOT
35778: IFFALSE 35791
// begin HackUnlinkAll ( i ) ;
35780: LD_VAR 0 1
35784: PPUSH
35785: CALL 35897 0 1
// continue ;
35789: GO 35671
// end ; HackCheckCapturedStatus ( i ) ;
35791: LD_VAR 0 1
35795: PPUSH
35796: CALL 36340 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35800: LD_ADDR_VAR 0 2
35804: PUSH
35805: LD_INT 81
35807: PUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 255
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 33
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 91
35834: PUSH
35835: LD_VAR 0 1
35839: PUSH
35840: LD_EXP 131
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 50
35852: PUSH
35853: EMPTY
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: PPUSH
35862: CALL_OW 69
35866: ST_TO_ADDR
// if not tmp then
35867: LD_VAR 0 2
35871: NOT
35872: IFFALSE 35876
// continue ;
35874: GO 35671
// HackLink ( i , tmp ) ;
35876: LD_VAR 0 1
35880: PPUSH
35881: LD_VAR 0 2
35885: PPUSH
35886: CALL 36033 0 2
// end ;
35890: GO 35671
35892: POP
35893: POP
// end ;
35894: PPOPN 2
35896: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35897: LD_INT 0
35899: PPUSH
35900: PPUSH
35901: PPUSH
// if not hack in hackTanks then
35902: LD_VAR 0 1
35906: PUSH
35907: LD_EXP 128
35911: IN
35912: NOT
35913: IFFALSE 35917
// exit ;
35915: GO 36028
// index := GetElementIndex ( hackTanks , hack ) ;
35917: LD_ADDR_VAR 0 4
35921: PUSH
35922: LD_EXP 128
35926: PPUSH
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL 43815 0 2
35936: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35937: LD_EXP 129
35941: PUSH
35942: LD_VAR 0 4
35946: ARRAY
35947: IFFALSE 36028
// begin for i in hackTanksCaptured [ index ] do
35949: LD_ADDR_VAR 0 3
35953: PUSH
35954: LD_EXP 129
35958: PUSH
35959: LD_VAR 0 4
35963: ARRAY
35964: PUSH
35965: FOR_IN
35966: IFFALSE 35992
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35968: LD_VAR 0 3
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: PPUSH
35977: LD_VAR 0 3
35981: PUSH
35982: LD_INT 2
35984: ARRAY
35985: PPUSH
35986: CALL_OW 235
35990: GO 35965
35992: POP
35993: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35994: LD_ADDR_EXP 129
35998: PUSH
35999: LD_EXP 129
36003: PPUSH
36004: LD_VAR 0 4
36008: PPUSH
36009: EMPTY
36010: PPUSH
36011: CALL_OW 1
36015: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36016: LD_VAR 0 1
36020: PPUSH
36021: LD_INT 0
36023: PPUSH
36024: CALL_OW 505
// end ; end ;
36028: LD_VAR 0 2
36032: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36033: LD_INT 0
36035: PPUSH
36036: PPUSH
36037: PPUSH
// if not hack in hackTanks or not vehicles then
36038: LD_VAR 0 1
36042: PUSH
36043: LD_EXP 128
36047: IN
36048: NOT
36049: PUSH
36050: LD_VAR 0 2
36054: NOT
36055: OR
36056: IFFALSE 36060
// exit ;
36058: GO 36335
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36060: LD_ADDR_VAR 0 2
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: LD_INT 1
36077: PPUSH
36078: LD_INT 1
36080: PPUSH
36081: CALL 44465 0 4
36085: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36086: LD_ADDR_VAR 0 5
36090: PUSH
36091: LD_EXP 128
36095: PPUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL 43815 0 2
36105: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36106: LD_EXP 129
36110: PUSH
36111: LD_VAR 0 5
36115: ARRAY
36116: PUSH
36117: LD_EXP 130
36121: LESS
36122: IFFALSE 36311
// begin for i := 1 to vehicles do
36124: LD_ADDR_VAR 0 4
36128: PUSH
36129: DOUBLE
36130: LD_INT 1
36132: DEC
36133: ST_TO_ADDR
36134: LD_VAR 0 2
36138: PUSH
36139: FOR_TO
36140: IFFALSE 36309
// begin if hackTanksCaptured [ index ] = hackLimit then
36142: LD_EXP 129
36146: PUSH
36147: LD_VAR 0 5
36151: ARRAY
36152: PUSH
36153: LD_EXP 130
36157: EQUAL
36158: IFFALSE 36162
// break ;
36160: GO 36309
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36162: LD_ADDR_EXP 132
36166: PUSH
36167: LD_EXP 132
36171: PPUSH
36172: LD_VAR 0 5
36176: PPUSH
36177: LD_EXP 132
36181: PUSH
36182: LD_VAR 0 5
36186: ARRAY
36187: PUSH
36188: LD_INT 1
36190: PLUS
36191: PPUSH
36192: CALL_OW 1
36196: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36197: LD_ADDR_EXP 129
36201: PUSH
36202: LD_EXP 129
36206: PPUSH
36207: LD_VAR 0 5
36211: PUSH
36212: LD_EXP 129
36216: PUSH
36217: LD_VAR 0 5
36221: ARRAY
36222: PUSH
36223: LD_INT 1
36225: PLUS
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PPUSH
36231: LD_VAR 0 2
36235: PUSH
36236: LD_VAR 0 4
36240: ARRAY
36241: PUSH
36242: LD_VAR 0 2
36246: PUSH
36247: LD_VAR 0 4
36251: ARRAY
36252: PPUSH
36253: CALL_OW 255
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PPUSH
36262: CALL 44030 0 3
36266: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36267: LD_VAR 0 2
36271: PUSH
36272: LD_VAR 0 4
36276: ARRAY
36277: PPUSH
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 255
36287: PPUSH
36288: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36292: LD_VAR 0 2
36296: PUSH
36297: LD_VAR 0 4
36301: ARRAY
36302: PPUSH
36303: CALL_OW 141
// end ;
36307: GO 36139
36309: POP
36310: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36311: LD_VAR 0 1
36315: PPUSH
36316: LD_EXP 129
36320: PUSH
36321: LD_VAR 0 5
36325: ARRAY
36326: PUSH
36327: LD_INT 0
36329: PLUS
36330: PPUSH
36331: CALL_OW 505
// end ;
36335: LD_VAR 0 3
36339: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36340: LD_INT 0
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
// if not hack in hackTanks then
36346: LD_VAR 0 1
36350: PUSH
36351: LD_EXP 128
36355: IN
36356: NOT
36357: IFFALSE 36361
// exit ;
36359: GO 36601
// index := GetElementIndex ( hackTanks , hack ) ;
36361: LD_ADDR_VAR 0 4
36365: PUSH
36366: LD_EXP 128
36370: PPUSH
36371: LD_VAR 0 1
36375: PPUSH
36376: CALL 43815 0 2
36380: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36381: LD_ADDR_VAR 0 3
36385: PUSH
36386: DOUBLE
36387: LD_EXP 129
36391: PUSH
36392: LD_VAR 0 4
36396: ARRAY
36397: INC
36398: ST_TO_ADDR
36399: LD_INT 1
36401: PUSH
36402: FOR_DOWNTO
36403: IFFALSE 36575
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36405: LD_ADDR_VAR 0 5
36409: PUSH
36410: LD_EXP 129
36414: PUSH
36415: LD_VAR 0 4
36419: ARRAY
36420: PUSH
36421: LD_VAR 0 3
36425: ARRAY
36426: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36427: LD_VAR 0 5
36431: PUSH
36432: LD_INT 1
36434: ARRAY
36435: PPUSH
36436: CALL_OW 302
36440: NOT
36441: PUSH
36442: LD_VAR 0 5
36446: PUSH
36447: LD_INT 1
36449: ARRAY
36450: PPUSH
36451: CALL_OW 255
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 255
36465: NONEQUAL
36466: OR
36467: IFFALSE 36573
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36469: LD_VAR 0 5
36473: PUSH
36474: LD_INT 1
36476: ARRAY
36477: PPUSH
36478: CALL_OW 305
36482: PUSH
36483: LD_VAR 0 5
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: CALL_OW 255
36496: PUSH
36497: LD_VAR 0 1
36501: PPUSH
36502: CALL_OW 255
36506: EQUAL
36507: AND
36508: IFFALSE 36532
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36510: LD_VAR 0 5
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: PPUSH
36519: LD_VAR 0 5
36523: PUSH
36524: LD_INT 2
36526: ARRAY
36527: PPUSH
36528: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36532: LD_ADDR_EXP 129
36536: PUSH
36537: LD_EXP 129
36541: PPUSH
36542: LD_VAR 0 4
36546: PPUSH
36547: LD_EXP 129
36551: PUSH
36552: LD_VAR 0 4
36556: ARRAY
36557: PPUSH
36558: LD_VAR 0 3
36562: PPUSH
36563: CALL_OW 3
36567: PPUSH
36568: CALL_OW 1
36572: ST_TO_ADDR
// end ; end ;
36573: GO 36402
36575: POP
36576: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36577: LD_VAR 0 1
36581: PPUSH
36582: LD_EXP 129
36586: PUSH
36587: LD_VAR 0 4
36591: ARRAY
36592: PUSH
36593: LD_INT 0
36595: PLUS
36596: PPUSH
36597: CALL_OW 505
// end ;
36601: LD_VAR 0 2
36605: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36606: LD_INT 0
36608: PPUSH
36609: PPUSH
36610: PPUSH
36611: PPUSH
// if not hack in hackTanks then
36612: LD_VAR 0 1
36616: PUSH
36617: LD_EXP 128
36621: IN
36622: NOT
36623: IFFALSE 36627
// exit ;
36625: GO 36712
// index := GetElementIndex ( hackTanks , hack ) ;
36627: LD_ADDR_VAR 0 5
36631: PUSH
36632: LD_EXP 128
36636: PPUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL 43815 0 2
36646: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36647: LD_ADDR_VAR 0 4
36651: PUSH
36652: DOUBLE
36653: LD_INT 1
36655: DEC
36656: ST_TO_ADDR
36657: LD_EXP 129
36661: PUSH
36662: LD_VAR 0 5
36666: ARRAY
36667: PUSH
36668: FOR_TO
36669: IFFALSE 36710
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36671: LD_EXP 129
36675: PUSH
36676: LD_VAR 0 5
36680: ARRAY
36681: PUSH
36682: LD_VAR 0 4
36686: ARRAY
36687: PUSH
36688: LD_INT 1
36690: ARRAY
36691: PUSH
36692: LD_VAR 0 2
36696: EQUAL
36697: IFFALSE 36708
// KillUnit ( vehicle ) ;
36699: LD_VAR 0 2
36703: PPUSH
36704: CALL_OW 66
36708: GO 36668
36710: POP
36711: POP
// end ;
36712: LD_VAR 0 3
36716: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36717: LD_EXP 133
36721: NOT
36722: IFFALSE 36757
36724: GO 36726
36726: DISABLE
// begin initMiner := true ;
36727: LD_ADDR_EXP 133
36731: PUSH
36732: LD_INT 1
36734: ST_TO_ADDR
// minersList := [ ] ;
36735: LD_ADDR_EXP 134
36739: PUSH
36740: EMPTY
36741: ST_TO_ADDR
// minerMinesList := [ ] ;
36742: LD_ADDR_EXP 135
36746: PUSH
36747: EMPTY
36748: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36749: LD_ADDR_EXP 136
36753: PUSH
36754: LD_INT 5
36756: ST_TO_ADDR
// end ;
36757: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36758: LD_EXP 133
36762: PUSH
36763: LD_INT 34
36765: PUSH
36766: LD_EXP 144
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PPUSH
36775: CALL_OW 69
36779: AND
36780: IFFALSE 37243
36782: GO 36784
36784: DISABLE
36785: LD_INT 0
36787: PPUSH
36788: PPUSH
36789: PPUSH
36790: PPUSH
// begin enable ;
36791: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36792: LD_ADDR_VAR 0 1
36796: PUSH
36797: LD_INT 34
36799: PUSH
36800: LD_EXP 144
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PPUSH
36809: CALL_OW 69
36813: PUSH
36814: FOR_IN
36815: IFFALSE 36887
// begin if not i in minersList then
36817: LD_VAR 0 1
36821: PUSH
36822: LD_EXP 134
36826: IN
36827: NOT
36828: IFFALSE 36885
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36830: LD_ADDR_EXP 134
36834: PUSH
36835: LD_EXP 134
36839: PPUSH
36840: LD_EXP 134
36844: PUSH
36845: LD_INT 1
36847: PLUS
36848: PPUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 1
36858: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36859: LD_ADDR_EXP 135
36863: PUSH
36864: LD_EXP 135
36868: PPUSH
36869: LD_EXP 135
36873: PUSH
36874: LD_INT 1
36876: PLUS
36877: PPUSH
36878: EMPTY
36879: PPUSH
36880: CALL_OW 1
36884: ST_TO_ADDR
// end end ;
36885: GO 36814
36887: POP
36888: POP
// for i := minerMinesList downto 1 do
36889: LD_ADDR_VAR 0 1
36893: PUSH
36894: DOUBLE
36895: LD_EXP 135
36899: INC
36900: ST_TO_ADDR
36901: LD_INT 1
36903: PUSH
36904: FOR_DOWNTO
36905: IFFALSE 37241
// begin if IsLive ( minersList [ i ] ) then
36907: LD_EXP 134
36911: PUSH
36912: LD_VAR 0 1
36916: ARRAY
36917: PPUSH
36918: CALL_OW 300
36922: IFFALSE 36950
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36924: LD_EXP 134
36928: PUSH
36929: LD_VAR 0 1
36933: ARRAY
36934: PPUSH
36935: LD_EXP 135
36939: PUSH
36940: LD_VAR 0 1
36944: ARRAY
36945: PPUSH
36946: CALL_OW 505
// if not minerMinesList [ i ] then
36950: LD_EXP 135
36954: PUSH
36955: LD_VAR 0 1
36959: ARRAY
36960: NOT
36961: IFFALSE 36965
// continue ;
36963: GO 36904
// for j := minerMinesList [ i ] downto 1 do
36965: LD_ADDR_VAR 0 2
36969: PUSH
36970: DOUBLE
36971: LD_EXP 135
36975: PUSH
36976: LD_VAR 0 1
36980: ARRAY
36981: INC
36982: ST_TO_ADDR
36983: LD_INT 1
36985: PUSH
36986: FOR_DOWNTO
36987: IFFALSE 37237
// begin side := GetSide ( minersList [ i ] ) ;
36989: LD_ADDR_VAR 0 3
36993: PUSH
36994: LD_EXP 134
36998: PUSH
36999: LD_VAR 0 1
37003: ARRAY
37004: PPUSH
37005: CALL_OW 255
37009: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37010: LD_ADDR_VAR 0 4
37014: PUSH
37015: LD_EXP 135
37019: PUSH
37020: LD_VAR 0 1
37024: ARRAY
37025: PUSH
37026: LD_VAR 0 2
37030: ARRAY
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PPUSH
37036: LD_EXP 135
37040: PUSH
37041: LD_VAR 0 1
37045: ARRAY
37046: PUSH
37047: LD_VAR 0 2
37051: ARRAY
37052: PUSH
37053: LD_INT 2
37055: ARRAY
37056: PPUSH
37057: CALL_OW 428
37061: ST_TO_ADDR
// if not tmp then
37062: LD_VAR 0 4
37066: NOT
37067: IFFALSE 37071
// continue ;
37069: GO 36986
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37071: LD_VAR 0 4
37075: PUSH
37076: LD_INT 81
37078: PUSH
37079: LD_VAR 0 3
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PPUSH
37088: CALL_OW 69
37092: IN
37093: PUSH
37094: LD_EXP 135
37098: PUSH
37099: LD_VAR 0 1
37103: ARRAY
37104: PUSH
37105: LD_VAR 0 2
37109: ARRAY
37110: PUSH
37111: LD_INT 1
37113: ARRAY
37114: PPUSH
37115: LD_EXP 135
37119: PUSH
37120: LD_VAR 0 1
37124: ARRAY
37125: PUSH
37126: LD_VAR 0 2
37130: ARRAY
37131: PUSH
37132: LD_INT 2
37134: ARRAY
37135: PPUSH
37136: CALL_OW 458
37140: AND
37141: IFFALSE 37235
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37143: LD_EXP 135
37147: PUSH
37148: LD_VAR 0 1
37152: ARRAY
37153: PUSH
37154: LD_VAR 0 2
37158: ARRAY
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: LD_EXP 135
37168: PUSH
37169: LD_VAR 0 1
37173: ARRAY
37174: PUSH
37175: LD_VAR 0 2
37179: ARRAY
37180: PUSH
37181: LD_INT 2
37183: ARRAY
37184: PPUSH
37185: LD_VAR 0 3
37189: PPUSH
37190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37194: LD_ADDR_EXP 135
37198: PUSH
37199: LD_EXP 135
37203: PPUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: LD_EXP 135
37213: PUSH
37214: LD_VAR 0 1
37218: ARRAY
37219: PPUSH
37220: LD_VAR 0 2
37224: PPUSH
37225: CALL_OW 3
37229: PPUSH
37230: CALL_OW 1
37234: ST_TO_ADDR
// end ; end ;
37235: GO 36986
37237: POP
37238: POP
// end ;
37239: GO 36904
37241: POP
37242: POP
// end ;
37243: PPOPN 4
37245: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37246: LD_INT 0
37248: PPUSH
37249: PPUSH
// result := false ;
37250: LD_ADDR_VAR 0 4
37254: PUSH
37255: LD_INT 0
37257: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37258: LD_VAR 0 1
37262: PPUSH
37263: CALL_OW 264
37267: PUSH
37268: LD_EXP 144
37272: EQUAL
37273: NOT
37274: IFFALSE 37278
// exit ;
37276: GO 37518
// index := GetElementIndex ( minersList , unit ) ;
37278: LD_ADDR_VAR 0 5
37282: PUSH
37283: LD_EXP 134
37287: PPUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL 43815 0 2
37297: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37298: LD_EXP 135
37302: PUSH
37303: LD_VAR 0 5
37307: ARRAY
37308: PUSH
37309: LD_EXP 136
37313: GREATEREQUAL
37314: IFFALSE 37318
// exit ;
37316: GO 37518
// ComMoveXY ( unit , x , y ) ;
37318: LD_VAR 0 1
37322: PPUSH
37323: LD_VAR 0 2
37327: PPUSH
37328: LD_VAR 0 3
37332: PPUSH
37333: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37337: LD_INT 35
37339: PPUSH
37340: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37344: LD_VAR 0 1
37348: PPUSH
37349: LD_VAR 0 2
37353: PPUSH
37354: LD_VAR 0 3
37358: PPUSH
37359: CALL 75101 0 3
37363: NOT
37364: PUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 314
37374: AND
37375: IFFALSE 37379
// exit ;
37377: GO 37518
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37379: LD_VAR 0 2
37383: PPUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 428
37393: PUSH
37394: LD_VAR 0 1
37398: EQUAL
37399: PUSH
37400: LD_VAR 0 1
37404: PPUSH
37405: CALL_OW 314
37409: NOT
37410: AND
37411: IFFALSE 37337
// PlaySoundXY ( x , y , PlantMine ) ;
37413: LD_VAR 0 2
37417: PPUSH
37418: LD_VAR 0 3
37422: PPUSH
37423: LD_STRING PlantMine
37425: PPUSH
37426: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37430: LD_VAR 0 2
37434: PPUSH
37435: LD_VAR 0 3
37439: PPUSH
37440: LD_VAR 0 1
37444: PPUSH
37445: CALL_OW 255
37449: PPUSH
37450: LD_INT 0
37452: PPUSH
37453: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37457: LD_ADDR_EXP 135
37461: PUSH
37462: LD_EXP 135
37466: PPUSH
37467: LD_VAR 0 5
37471: PUSH
37472: LD_EXP 135
37476: PUSH
37477: LD_VAR 0 5
37481: ARRAY
37482: PUSH
37483: LD_INT 1
37485: PLUS
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PPUSH
37491: LD_VAR 0 2
37495: PUSH
37496: LD_VAR 0 3
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PPUSH
37505: CALL 44030 0 3
37509: ST_TO_ADDR
// result := true ;
37510: LD_ADDR_VAR 0 4
37514: PUSH
37515: LD_INT 1
37517: ST_TO_ADDR
// end ;
37518: LD_VAR 0 4
37522: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37523: LD_INT 0
37525: PPUSH
37526: PPUSH
37527: PPUSH
// if not unit in minersList then
37528: LD_VAR 0 1
37532: PUSH
37533: LD_EXP 134
37537: IN
37538: NOT
37539: IFFALSE 37543
// exit ;
37541: GO 37935
// index := GetElementIndex ( minersList , unit ) ;
37543: LD_ADDR_VAR 0 6
37547: PUSH
37548: LD_EXP 134
37552: PPUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL 43815 0 2
37562: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37563: LD_ADDR_VAR 0 5
37567: PUSH
37568: DOUBLE
37569: LD_EXP 135
37573: PUSH
37574: LD_VAR 0 6
37578: ARRAY
37579: INC
37580: ST_TO_ADDR
37581: LD_INT 1
37583: PUSH
37584: FOR_DOWNTO
37585: IFFALSE 37746
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37587: LD_EXP 135
37591: PUSH
37592: LD_VAR 0 6
37596: ARRAY
37597: PUSH
37598: LD_VAR 0 5
37602: ARRAY
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PUSH
37608: LD_VAR 0 2
37612: EQUAL
37613: PUSH
37614: LD_EXP 135
37618: PUSH
37619: LD_VAR 0 6
37623: ARRAY
37624: PUSH
37625: LD_VAR 0 5
37629: ARRAY
37630: PUSH
37631: LD_INT 2
37633: ARRAY
37634: PUSH
37635: LD_VAR 0 3
37639: EQUAL
37640: AND
37641: IFFALSE 37744
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37643: LD_EXP 135
37647: PUSH
37648: LD_VAR 0 6
37652: ARRAY
37653: PUSH
37654: LD_VAR 0 5
37658: ARRAY
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: LD_EXP 135
37668: PUSH
37669: LD_VAR 0 6
37673: ARRAY
37674: PUSH
37675: LD_VAR 0 5
37679: ARRAY
37680: PUSH
37681: LD_INT 2
37683: ARRAY
37684: PPUSH
37685: LD_VAR 0 1
37689: PPUSH
37690: CALL_OW 255
37694: PPUSH
37695: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37699: LD_ADDR_EXP 135
37703: PUSH
37704: LD_EXP 135
37708: PPUSH
37709: LD_VAR 0 6
37713: PPUSH
37714: LD_EXP 135
37718: PUSH
37719: LD_VAR 0 6
37723: ARRAY
37724: PPUSH
37725: LD_VAR 0 5
37729: PPUSH
37730: CALL_OW 3
37734: PPUSH
37735: CALL_OW 1
37739: ST_TO_ADDR
// exit ;
37740: POP
37741: POP
37742: GO 37935
// end ; end ;
37744: GO 37584
37746: POP
37747: POP
// for i := minerMinesList [ index ] downto 1 do
37748: LD_ADDR_VAR 0 5
37752: PUSH
37753: DOUBLE
37754: LD_EXP 135
37758: PUSH
37759: LD_VAR 0 6
37763: ARRAY
37764: INC
37765: ST_TO_ADDR
37766: LD_INT 1
37768: PUSH
37769: FOR_DOWNTO
37770: IFFALSE 37933
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37772: LD_EXP 135
37776: PUSH
37777: LD_VAR 0 6
37781: ARRAY
37782: PUSH
37783: LD_VAR 0 5
37787: ARRAY
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: LD_EXP 135
37797: PUSH
37798: LD_VAR 0 6
37802: ARRAY
37803: PUSH
37804: LD_VAR 0 5
37808: ARRAY
37809: PUSH
37810: LD_INT 2
37812: ARRAY
37813: PPUSH
37814: LD_VAR 0 2
37818: PPUSH
37819: LD_VAR 0 3
37823: PPUSH
37824: CALL_OW 298
37828: PUSH
37829: LD_INT 6
37831: LESS
37832: IFFALSE 37931
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37834: LD_EXP 135
37838: PUSH
37839: LD_VAR 0 6
37843: ARRAY
37844: PUSH
37845: LD_VAR 0 5
37849: ARRAY
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: PPUSH
37855: LD_EXP 135
37859: PUSH
37860: LD_VAR 0 6
37864: ARRAY
37865: PUSH
37866: LD_VAR 0 5
37870: ARRAY
37871: PUSH
37872: LD_INT 2
37874: ARRAY
37875: PPUSH
37876: LD_VAR 0 1
37880: PPUSH
37881: CALL_OW 255
37885: PPUSH
37886: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37890: LD_ADDR_EXP 135
37894: PUSH
37895: LD_EXP 135
37899: PPUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: LD_EXP 135
37909: PUSH
37910: LD_VAR 0 6
37914: ARRAY
37915: PPUSH
37916: LD_VAR 0 5
37920: PPUSH
37921: CALL_OW 3
37925: PPUSH
37926: CALL_OW 1
37930: ST_TO_ADDR
// end ; end ;
37931: GO 37769
37933: POP
37934: POP
// end ;
37935: LD_VAR 0 4
37939: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37940: LD_INT 0
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
37948: PPUSH
37949: PPUSH
37950: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37951: LD_VAR 0 1
37955: PPUSH
37956: CALL_OW 264
37960: PUSH
37961: LD_EXP 144
37965: EQUAL
37966: NOT
37967: PUSH
37968: LD_VAR 0 1
37972: PUSH
37973: LD_EXP 134
37977: IN
37978: NOT
37979: OR
37980: IFFALSE 37984
// exit ;
37982: GO 38306
// index := GetElementIndex ( minersList , unit ) ;
37984: LD_ADDR_VAR 0 6
37988: PUSH
37989: LD_EXP 134
37993: PPUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL 43815 0 2
38003: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38004: LD_ADDR_VAR 0 8
38008: PUSH
38009: LD_EXP 136
38013: PUSH
38014: LD_EXP 135
38018: PUSH
38019: LD_VAR 0 6
38023: ARRAY
38024: MINUS
38025: ST_TO_ADDR
// if not minesFreeAmount then
38026: LD_VAR 0 8
38030: NOT
38031: IFFALSE 38035
// exit ;
38033: GO 38306
// tmp := [ ] ;
38035: LD_ADDR_VAR 0 7
38039: PUSH
38040: EMPTY
38041: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38042: LD_ADDR_VAR 0 5
38046: PUSH
38047: DOUBLE
38048: LD_INT 1
38050: DEC
38051: ST_TO_ADDR
38052: LD_VAR 0 8
38056: PUSH
38057: FOR_TO
38058: IFFALSE 38253
// begin _d := rand ( 0 , 5 ) ;
38060: LD_ADDR_VAR 0 11
38064: PUSH
38065: LD_INT 0
38067: PPUSH
38068: LD_INT 5
38070: PPUSH
38071: CALL_OW 12
38075: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38076: LD_ADDR_VAR 0 12
38080: PUSH
38081: LD_INT 2
38083: PPUSH
38084: LD_INT 6
38086: PPUSH
38087: CALL_OW 12
38091: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38092: LD_ADDR_VAR 0 9
38096: PUSH
38097: LD_VAR 0 2
38101: PPUSH
38102: LD_VAR 0 11
38106: PPUSH
38107: LD_VAR 0 12
38111: PPUSH
38112: CALL_OW 272
38116: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38117: LD_ADDR_VAR 0 10
38121: PUSH
38122: LD_VAR 0 3
38126: PPUSH
38127: LD_VAR 0 11
38131: PPUSH
38132: LD_VAR 0 12
38136: PPUSH
38137: CALL_OW 273
38141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38142: LD_VAR 0 9
38146: PPUSH
38147: LD_VAR 0 10
38151: PPUSH
38152: CALL_OW 488
38156: PUSH
38157: LD_VAR 0 9
38161: PUSH
38162: LD_VAR 0 10
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_VAR 0 7
38175: IN
38176: NOT
38177: AND
38178: PUSH
38179: LD_VAR 0 9
38183: PPUSH
38184: LD_VAR 0 10
38188: PPUSH
38189: CALL_OW 458
38193: NOT
38194: AND
38195: IFFALSE 38237
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38197: LD_ADDR_VAR 0 7
38201: PUSH
38202: LD_VAR 0 7
38206: PPUSH
38207: LD_VAR 0 7
38211: PUSH
38212: LD_INT 1
38214: PLUS
38215: PPUSH
38216: LD_VAR 0 9
38220: PUSH
38221: LD_VAR 0 10
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PPUSH
38230: CALL_OW 1
38234: ST_TO_ADDR
38235: GO 38251
// i := i - 1 ;
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_VAR 0 5
38246: PUSH
38247: LD_INT 1
38249: MINUS
38250: ST_TO_ADDR
// end ;
38251: GO 38057
38253: POP
38254: POP
// for i in tmp do
38255: LD_ADDR_VAR 0 5
38259: PUSH
38260: LD_VAR 0 7
38264: PUSH
38265: FOR_IN
38266: IFFALSE 38304
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38268: LD_VAR 0 1
38272: PPUSH
38273: LD_VAR 0 5
38277: PUSH
38278: LD_INT 1
38280: ARRAY
38281: PPUSH
38282: LD_VAR 0 5
38286: PUSH
38287: LD_INT 2
38289: ARRAY
38290: PPUSH
38291: CALL 37246 0 3
38295: NOT
38296: IFFALSE 38302
// exit ;
38298: POP
38299: POP
38300: GO 38306
38302: GO 38265
38304: POP
38305: POP
// end ;
38306: LD_VAR 0 4
38310: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38311: LD_INT 0
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
// if not GetClass ( unit ) = class_sniper then
38320: LD_VAR 0 1
38324: PPUSH
38325: CALL_OW 257
38329: PUSH
38330: LD_INT 5
38332: EQUAL
38333: NOT
38334: IFFALSE 38338
// exit ;
38336: GO 38726
// dist := 8 ;
38338: LD_ADDR_VAR 0 5
38342: PUSH
38343: LD_INT 8
38345: ST_TO_ADDR
// viewRange := 12 ;
38346: LD_ADDR_VAR 0 7
38350: PUSH
38351: LD_INT 12
38353: ST_TO_ADDR
// side := GetSide ( unit ) ;
38354: LD_ADDR_VAR 0 6
38358: PUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: CALL_OW 255
38368: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38369: LD_INT 61
38371: PPUSH
38372: LD_VAR 0 6
38376: PPUSH
38377: CALL_OW 321
38381: PUSH
38382: LD_INT 2
38384: EQUAL
38385: IFFALSE 38395
// viewRange := 16 ;
38387: LD_ADDR_VAR 0 7
38391: PUSH
38392: LD_INT 16
38394: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38395: LD_VAR 0 1
38399: PPUSH
38400: LD_VAR 0 2
38404: PPUSH
38405: LD_VAR 0 3
38409: PPUSH
38410: CALL_OW 297
38414: PUSH
38415: LD_VAR 0 5
38419: GREATER
38420: IFFALSE 38499
// begin ComMoveXY ( unit , x , y ) ;
38422: LD_VAR 0 1
38426: PPUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_VAR 0 3
38436: PPUSH
38437: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38441: LD_INT 35
38443: PPUSH
38444: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38448: LD_VAR 0 1
38452: PPUSH
38453: LD_VAR 0 2
38457: PPUSH
38458: LD_VAR 0 3
38462: PPUSH
38463: CALL 75101 0 3
38467: NOT
38468: IFFALSE 38472
// exit ;
38470: GO 38726
// until GetDistUnitXY ( unit , x , y ) < dist ;
38472: LD_VAR 0 1
38476: PPUSH
38477: LD_VAR 0 2
38481: PPUSH
38482: LD_VAR 0 3
38486: PPUSH
38487: CALL_OW 297
38491: PUSH
38492: LD_VAR 0 5
38496: LESS
38497: IFFALSE 38441
// end ; ComTurnXY ( unit , x , y ) ;
38499: LD_VAR 0 1
38503: PPUSH
38504: LD_VAR 0 2
38508: PPUSH
38509: LD_VAR 0 3
38513: PPUSH
38514: CALL_OW 118
// wait ( 5 ) ;
38518: LD_INT 5
38520: PPUSH
38521: CALL_OW 67
// _d := GetDir ( unit ) ;
38525: LD_ADDR_VAR 0 10
38529: PUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 254
38539: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38540: LD_ADDR_VAR 0 8
38544: PUSH
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 250
38554: PPUSH
38555: LD_VAR 0 10
38559: PPUSH
38560: LD_VAR 0 5
38564: PPUSH
38565: CALL_OW 272
38569: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38570: LD_ADDR_VAR 0 9
38574: PUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 251
38584: PPUSH
38585: LD_VAR 0 10
38589: PPUSH
38590: LD_VAR 0 5
38594: PPUSH
38595: CALL_OW 273
38599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38600: LD_VAR 0 8
38604: PPUSH
38605: LD_VAR 0 9
38609: PPUSH
38610: CALL_OW 488
38614: NOT
38615: IFFALSE 38619
// exit ;
38617: GO 38726
// ComAnimCustom ( unit , 1 ) ;
38619: LD_VAR 0 1
38623: PPUSH
38624: LD_INT 1
38626: PPUSH
38627: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38631: LD_VAR 0 8
38635: PPUSH
38636: LD_VAR 0 9
38640: PPUSH
38641: LD_VAR 0 6
38645: PPUSH
38646: LD_VAR 0 7
38650: PPUSH
38651: CALL_OW 330
// repeat wait ( 1 ) ;
38655: LD_INT 1
38657: PPUSH
38658: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 316
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 314
38681: OR
38682: PUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 302
38692: NOT
38693: OR
38694: PUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL_OW 301
38704: OR
38705: IFFALSE 38655
// RemoveSeeing ( _x , _y , side ) ;
38707: LD_VAR 0 8
38711: PPUSH
38712: LD_VAR 0 9
38716: PPUSH
38717: LD_VAR 0 6
38721: PPUSH
38722: CALL_OW 331
// end ; end_of_file
38726: LD_VAR 0 4
38730: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
38731: LD_INT 0
38733: PPUSH
// ar_miner := 81 ;
38734: LD_ADDR_EXP 144
38738: PUSH
38739: LD_INT 81
38741: ST_TO_ADDR
// ar_crane := 88 ;
38742: LD_ADDR_EXP 143
38746: PUSH
38747: LD_INT 88
38749: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
38750: LD_ADDR_EXP 138
38754: PUSH
38755: LD_INT 89
38757: ST_TO_ADDR
// us_hack := 99 ;
38758: LD_ADDR_EXP 139
38762: PUSH
38763: LD_INT 99
38765: ST_TO_ADDR
// us_artillery := 97 ;
38766: LD_ADDR_EXP 140
38770: PUSH
38771: LD_INT 97
38773: ST_TO_ADDR
// ar_bio_bomb := 91 ;
38774: LD_ADDR_EXP 141
38778: PUSH
38779: LD_INT 91
38781: ST_TO_ADDR
// ar_mortar := 92 ;
38782: LD_ADDR_EXP 142
38786: PUSH
38787: LD_INT 92
38789: ST_TO_ADDR
// ru_flamethrower := 93 ;
38790: LD_ADDR_EXP 145
38794: PUSH
38795: LD_INT 93
38797: ST_TO_ADDR
// ru_radar := 98 ;
38798: LD_ADDR_EXP 137
38802: PUSH
38803: LD_INT 98
38805: ST_TO_ADDR
// tech_Artillery := 80 ;
38806: LD_ADDR_EXP 146
38810: PUSH
38811: LD_INT 80
38813: ST_TO_ADDR
// tech_RadMat := 81 ;
38814: LD_ADDR_EXP 147
38818: PUSH
38819: LD_INT 81
38821: ST_TO_ADDR
// tech_BasicTools := 82 ;
38822: LD_ADDR_EXP 148
38826: PUSH
38827: LD_INT 82
38829: ST_TO_ADDR
// tech_Cargo := 83 ;
38830: LD_ADDR_EXP 149
38834: PUSH
38835: LD_INT 83
38837: ST_TO_ADDR
// tech_Track := 84 ;
38838: LD_ADDR_EXP 150
38842: PUSH
38843: LD_INT 84
38845: ST_TO_ADDR
// tech_Crane := 85 ;
38846: LD_ADDR_EXP 151
38850: PUSH
38851: LD_INT 85
38853: ST_TO_ADDR
// tech_Bulldozer := 86 ;
38854: LD_ADDR_EXP 152
38858: PUSH
38859: LD_INT 86
38861: ST_TO_ADDR
// tech_Hovercraft := 87 ;
38862: LD_ADDR_EXP 153
38866: PUSH
38867: LD_INT 87
38869: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
38870: LD_ADDR_EXP 154
38874: PUSH
38875: LD_INT 88
38877: ST_TO_ADDR
// end ;
38878: LD_VAR 0 1
38882: RET
// every 1 do
38883: GO 38885
38885: DISABLE
// InitGlobalVariables ; end_of_file
38886: CALL 38731 0 0
38890: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
// if exist_mode then
38895: LD_VAR 0 2
38899: IFFALSE 38924
// unit := CreateCharacter ( prefix & ident ) else
38901: LD_ADDR_VAR 0 5
38905: PUSH
38906: LD_VAR 0 3
38910: PUSH
38911: LD_VAR 0 1
38915: STR
38916: PPUSH
38917: CALL_OW 34
38921: ST_TO_ADDR
38922: GO 38939
// unit := NewCharacter ( ident ) ;
38924: LD_ADDR_VAR 0 5
38928: PUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: CALL_OW 25
38938: ST_TO_ADDR
// result := unit ;
38939: LD_ADDR_VAR 0 4
38943: PUSH
38944: LD_VAR 0 5
38948: ST_TO_ADDR
// end ;
38949: LD_VAR 0 4
38953: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38954: LD_INT 0
38956: PPUSH
38957: PPUSH
// if not side or not nation then
38958: LD_VAR 0 1
38962: NOT
38963: PUSH
38964: LD_VAR 0 2
38968: NOT
38969: OR
38970: IFFALSE 38974
// exit ;
38972: GO 39742
// case nation of nation_american :
38974: LD_VAR 0 2
38978: PUSH
38979: LD_INT 1
38981: DOUBLE
38982: EQUAL
38983: IFTRUE 38987
38985: GO 39201
38987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38988: LD_ADDR_VAR 0 4
38992: PUSH
38993: LD_INT 35
38995: PUSH
38996: LD_INT 45
38998: PUSH
38999: LD_INT 46
39001: PUSH
39002: LD_INT 47
39004: PUSH
39005: LD_INT 82
39007: PUSH
39008: LD_INT 83
39010: PUSH
39011: LD_INT 84
39013: PUSH
39014: LD_INT 85
39016: PUSH
39017: LD_INT 86
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 6
39028: PUSH
39029: LD_INT 15
39031: PUSH
39032: LD_INT 16
39034: PUSH
39035: LD_INT 7
39037: PUSH
39038: LD_INT 12
39040: PUSH
39041: LD_INT 13
39043: PUSH
39044: LD_INT 10
39046: PUSH
39047: LD_INT 14
39049: PUSH
39050: LD_INT 20
39052: PUSH
39053: LD_INT 21
39055: PUSH
39056: LD_INT 22
39058: PUSH
39059: LD_INT 25
39061: PUSH
39062: LD_INT 32
39064: PUSH
39065: LD_INT 27
39067: PUSH
39068: LD_INT 36
39070: PUSH
39071: LD_INT 69
39073: PUSH
39074: LD_INT 39
39076: PUSH
39077: LD_INT 34
39079: PUSH
39080: LD_INT 40
39082: PUSH
39083: LD_INT 48
39085: PUSH
39086: LD_INT 49
39088: PUSH
39089: LD_INT 50
39091: PUSH
39092: LD_INT 51
39094: PUSH
39095: LD_INT 52
39097: PUSH
39098: LD_INT 53
39100: PUSH
39101: LD_INT 54
39103: PUSH
39104: LD_INT 55
39106: PUSH
39107: LD_INT 56
39109: PUSH
39110: LD_INT 57
39112: PUSH
39113: LD_INT 58
39115: PUSH
39116: LD_INT 59
39118: PUSH
39119: LD_INT 60
39121: PUSH
39122: LD_INT 61
39124: PUSH
39125: LD_INT 62
39127: PUSH
39128: LD_INT 80
39130: PUSH
39131: LD_INT 82
39133: PUSH
39134: LD_INT 83
39136: PUSH
39137: LD_INT 84
39139: PUSH
39140: LD_INT 85
39142: PUSH
39143: LD_INT 86
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: ST_TO_ADDR
39199: GO 39666
39201: LD_INT 2
39203: DOUBLE
39204: EQUAL
39205: IFTRUE 39209
39207: GO 39435
39209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39210: LD_ADDR_VAR 0 4
39214: PUSH
39215: LD_INT 35
39217: PUSH
39218: LD_INT 45
39220: PUSH
39221: LD_INT 46
39223: PUSH
39224: LD_INT 47
39226: PUSH
39227: LD_INT 82
39229: PUSH
39230: LD_INT 83
39232: PUSH
39233: LD_INT 84
39235: PUSH
39236: LD_INT 85
39238: PUSH
39239: LD_INT 87
39241: PUSH
39242: LD_INT 70
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 11
39250: PUSH
39251: LD_INT 3
39253: PUSH
39254: LD_INT 4
39256: PUSH
39257: LD_INT 5
39259: PUSH
39260: LD_INT 6
39262: PUSH
39263: LD_INT 15
39265: PUSH
39266: LD_INT 18
39268: PUSH
39269: LD_INT 7
39271: PUSH
39272: LD_INT 17
39274: PUSH
39275: LD_INT 8
39277: PUSH
39278: LD_INT 20
39280: PUSH
39281: LD_INT 21
39283: PUSH
39284: LD_INT 22
39286: PUSH
39287: LD_INT 72
39289: PUSH
39290: LD_INT 26
39292: PUSH
39293: LD_INT 69
39295: PUSH
39296: LD_INT 39
39298: PUSH
39299: LD_INT 40
39301: PUSH
39302: LD_INT 41
39304: PUSH
39305: LD_INT 42
39307: PUSH
39308: LD_INT 43
39310: PUSH
39311: LD_INT 48
39313: PUSH
39314: LD_INT 49
39316: PUSH
39317: LD_INT 50
39319: PUSH
39320: LD_INT 51
39322: PUSH
39323: LD_INT 52
39325: PUSH
39326: LD_INT 53
39328: PUSH
39329: LD_INT 54
39331: PUSH
39332: LD_INT 55
39334: PUSH
39335: LD_INT 56
39337: PUSH
39338: LD_INT 60
39340: PUSH
39341: LD_INT 61
39343: PUSH
39344: LD_INT 62
39346: PUSH
39347: LD_INT 66
39349: PUSH
39350: LD_INT 67
39352: PUSH
39353: LD_INT 68
39355: PUSH
39356: LD_INT 81
39358: PUSH
39359: LD_INT 82
39361: PUSH
39362: LD_INT 83
39364: PUSH
39365: LD_INT 84
39367: PUSH
39368: LD_INT 85
39370: PUSH
39371: LD_INT 87
39373: PUSH
39374: LD_INT 88
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
39433: GO 39666
39435: LD_INT 3
39437: DOUBLE
39438: EQUAL
39439: IFTRUE 39443
39441: GO 39665
39443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39444: LD_ADDR_VAR 0 4
39448: PUSH
39449: LD_INT 46
39451: PUSH
39452: LD_INT 47
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: LD_INT 82
39463: PUSH
39464: LD_INT 83
39466: PUSH
39467: LD_INT 84
39469: PUSH
39470: LD_INT 85
39472: PUSH
39473: LD_INT 86
39475: PUSH
39476: LD_INT 11
39478: PUSH
39479: LD_INT 9
39481: PUSH
39482: LD_INT 20
39484: PUSH
39485: LD_INT 19
39487: PUSH
39488: LD_INT 21
39490: PUSH
39491: LD_INT 24
39493: PUSH
39494: LD_INT 22
39496: PUSH
39497: LD_INT 25
39499: PUSH
39500: LD_INT 28
39502: PUSH
39503: LD_INT 29
39505: PUSH
39506: LD_INT 30
39508: PUSH
39509: LD_INT 31
39511: PUSH
39512: LD_INT 37
39514: PUSH
39515: LD_INT 38
39517: PUSH
39518: LD_INT 32
39520: PUSH
39521: LD_INT 27
39523: PUSH
39524: LD_INT 33
39526: PUSH
39527: LD_INT 69
39529: PUSH
39530: LD_INT 39
39532: PUSH
39533: LD_INT 34
39535: PUSH
39536: LD_INT 40
39538: PUSH
39539: LD_INT 71
39541: PUSH
39542: LD_INT 23
39544: PUSH
39545: LD_INT 44
39547: PUSH
39548: LD_INT 48
39550: PUSH
39551: LD_INT 49
39553: PUSH
39554: LD_INT 50
39556: PUSH
39557: LD_INT 51
39559: PUSH
39560: LD_INT 52
39562: PUSH
39563: LD_INT 53
39565: PUSH
39566: LD_INT 54
39568: PUSH
39569: LD_INT 55
39571: PUSH
39572: LD_INT 56
39574: PUSH
39575: LD_INT 57
39577: PUSH
39578: LD_INT 58
39580: PUSH
39581: LD_INT 59
39583: PUSH
39584: LD_INT 63
39586: PUSH
39587: LD_INT 64
39589: PUSH
39590: LD_INT 65
39592: PUSH
39593: LD_INT 82
39595: PUSH
39596: LD_INT 83
39598: PUSH
39599: LD_INT 84
39601: PUSH
39602: LD_INT 85
39604: PUSH
39605: LD_INT 86
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
39663: GO 39666
39665: POP
// if state > - 1 and state < 3 then
39666: LD_VAR 0 3
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: GREATER
39675: PUSH
39676: LD_VAR 0 3
39680: PUSH
39681: LD_INT 3
39683: LESS
39684: AND
39685: IFFALSE 39742
// for i in result do
39687: LD_ADDR_VAR 0 5
39691: PUSH
39692: LD_VAR 0 4
39696: PUSH
39697: FOR_IN
39698: IFFALSE 39740
// if GetTech ( i , side ) <> state then
39700: LD_VAR 0 5
39704: PPUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 321
39714: PUSH
39715: LD_VAR 0 3
39719: NONEQUAL
39720: IFFALSE 39738
// result := result diff i ;
39722: LD_ADDR_VAR 0 4
39726: PUSH
39727: LD_VAR 0 4
39731: PUSH
39732: LD_VAR 0 5
39736: DIFF
39737: ST_TO_ADDR
39738: GO 39697
39740: POP
39741: POP
// end ;
39742: LD_VAR 0 4
39746: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39747: LD_INT 0
39749: PPUSH
39750: PPUSH
39751: PPUSH
// result := true ;
39752: LD_ADDR_VAR 0 3
39756: PUSH
39757: LD_INT 1
39759: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39760: LD_ADDR_VAR 0 5
39764: PUSH
39765: LD_VAR 0 2
39769: PPUSH
39770: CALL_OW 480
39774: ST_TO_ADDR
// if not tmp then
39775: LD_VAR 0 5
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 39833
// for i in tmp do
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: LD_VAR 0 5
39793: PUSH
39794: FOR_IN
39795: IFFALSE 39831
// if GetTech ( i , side ) <> state_researched then
39797: LD_VAR 0 4
39801: PPUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 321
39811: PUSH
39812: LD_INT 2
39814: NONEQUAL
39815: IFFALSE 39829
// begin result := false ;
39817: LD_ADDR_VAR 0 3
39821: PUSH
39822: LD_INT 0
39824: ST_TO_ADDR
// exit ;
39825: POP
39826: POP
39827: GO 39833
// end ;
39829: GO 39794
39831: POP
39832: POP
// end ;
39833: LD_VAR 0 3
39837: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39838: LD_INT 0
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39853: LD_VAR 0 1
39857: NOT
39858: PUSH
39859: LD_VAR 0 1
39863: PPUSH
39864: CALL_OW 257
39868: PUSH
39869: LD_INT 9
39871: NONEQUAL
39872: OR
39873: IFFALSE 39877
// exit ;
39875: GO 40450
// side := GetSide ( unit ) ;
39877: LD_ADDR_VAR 0 9
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 255
39891: ST_TO_ADDR
// tech_space := tech_spacanom ;
39892: LD_ADDR_VAR 0 12
39896: PUSH
39897: LD_INT 29
39899: ST_TO_ADDR
// tech_time := tech_taurad ;
39900: LD_ADDR_VAR 0 13
39904: PUSH
39905: LD_INT 28
39907: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39908: LD_ADDR_VAR 0 11
39912: PUSH
39913: LD_VAR 0 1
39917: PPUSH
39918: CALL_OW 310
39922: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39923: LD_VAR 0 11
39927: PPUSH
39928: CALL_OW 247
39932: PUSH
39933: LD_INT 2
39935: EQUAL
39936: IFFALSE 39940
// exit ;
39938: GO 40450
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39940: LD_ADDR_VAR 0 8
39944: PUSH
39945: LD_INT 81
39947: PUSH
39948: LD_VAR 0 9
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: LD_INT 21
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PPUSH
39978: CALL_OW 69
39982: ST_TO_ADDR
// if not tmp then
39983: LD_VAR 0 8
39987: NOT
39988: IFFALSE 39992
// exit ;
39990: GO 40450
// if in_unit then
39992: LD_VAR 0 11
39996: IFFALSE 40020
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39998: LD_ADDR_VAR 0 10
40002: PUSH
40003: LD_VAR 0 8
40007: PPUSH
40008: LD_VAR 0 11
40012: PPUSH
40013: CALL_OW 74
40017: ST_TO_ADDR
40018: GO 40040
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40020: LD_ADDR_VAR 0 10
40024: PUSH
40025: LD_VAR 0 8
40029: PPUSH
40030: LD_VAR 0 1
40034: PPUSH
40035: CALL_OW 74
40039: ST_TO_ADDR
// if not enemy then
40040: LD_VAR 0 10
40044: NOT
40045: IFFALSE 40049
// exit ;
40047: GO 40450
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40049: LD_VAR 0 11
40053: PUSH
40054: LD_VAR 0 11
40058: PPUSH
40059: LD_VAR 0 10
40063: PPUSH
40064: CALL_OW 296
40068: PUSH
40069: LD_INT 13
40071: GREATER
40072: AND
40073: PUSH
40074: LD_VAR 0 1
40078: PPUSH
40079: LD_VAR 0 10
40083: PPUSH
40084: CALL_OW 296
40088: PUSH
40089: LD_INT 12
40091: GREATER
40092: OR
40093: IFFALSE 40097
// exit ;
40095: GO 40450
// missile := [ 1 ] ;
40097: LD_ADDR_VAR 0 14
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40108: LD_VAR 0 9
40112: PPUSH
40113: LD_VAR 0 12
40117: PPUSH
40118: CALL_OW 325
40122: IFFALSE 40151
// missile := Replace ( missile , missile + 1 , 2 ) ;
40124: LD_ADDR_VAR 0 14
40128: PUSH
40129: LD_VAR 0 14
40133: PPUSH
40134: LD_VAR 0 14
40138: PUSH
40139: LD_INT 1
40141: PLUS
40142: PPUSH
40143: LD_INT 2
40145: PPUSH
40146: CALL_OW 1
40150: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40151: LD_VAR 0 9
40155: PPUSH
40156: LD_VAR 0 13
40160: PPUSH
40161: CALL_OW 325
40165: PUSH
40166: LD_VAR 0 10
40170: PPUSH
40171: CALL_OW 255
40175: PPUSH
40176: LD_VAR 0 13
40180: PPUSH
40181: CALL_OW 325
40185: NOT
40186: AND
40187: IFFALSE 40216
// missile := Replace ( missile , missile + 1 , 3 ) ;
40189: LD_ADDR_VAR 0 14
40193: PUSH
40194: LD_VAR 0 14
40198: PPUSH
40199: LD_VAR 0 14
40203: PUSH
40204: LD_INT 1
40206: PLUS
40207: PPUSH
40208: LD_INT 3
40210: PPUSH
40211: CALL_OW 1
40215: ST_TO_ADDR
// if missile < 2 then
40216: LD_VAR 0 14
40220: PUSH
40221: LD_INT 2
40223: LESS
40224: IFFALSE 40228
// exit ;
40226: GO 40450
// x := GetX ( enemy ) ;
40228: LD_ADDR_VAR 0 4
40232: PUSH
40233: LD_VAR 0 10
40237: PPUSH
40238: CALL_OW 250
40242: ST_TO_ADDR
// y := GetY ( enemy ) ;
40243: LD_ADDR_VAR 0 5
40247: PUSH
40248: LD_VAR 0 10
40252: PPUSH
40253: CALL_OW 251
40257: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40258: LD_ADDR_VAR 0 6
40262: PUSH
40263: LD_VAR 0 4
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PPUSH
40272: LD_INT 1
40274: PPUSH
40275: CALL_OW 12
40279: PLUS
40280: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40281: LD_ADDR_VAR 0 7
40285: PUSH
40286: LD_VAR 0 5
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PPUSH
40295: LD_INT 1
40297: PPUSH
40298: CALL_OW 12
40302: PLUS
40303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40304: LD_VAR 0 6
40308: PPUSH
40309: LD_VAR 0 7
40313: PPUSH
40314: CALL_OW 488
40318: NOT
40319: IFFALSE 40341
// begin _x := x ;
40321: LD_ADDR_VAR 0 6
40325: PUSH
40326: LD_VAR 0 4
40330: ST_TO_ADDR
// _y := y ;
40331: LD_ADDR_VAR 0 7
40335: PUSH
40336: LD_VAR 0 5
40340: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_INT 1
40348: PPUSH
40349: LD_VAR 0 14
40353: PPUSH
40354: CALL_OW 12
40358: ST_TO_ADDR
// case i of 1 :
40359: LD_VAR 0 3
40363: PUSH
40364: LD_INT 1
40366: DOUBLE
40367: EQUAL
40368: IFTRUE 40372
40370: GO 40389
40372: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40373: LD_VAR 0 1
40377: PPUSH
40378: LD_VAR 0 10
40382: PPUSH
40383: CALL_OW 115
40387: GO 40450
40389: LD_INT 2
40391: DOUBLE
40392: EQUAL
40393: IFTRUE 40397
40395: GO 40419
40397: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40398: LD_VAR 0 1
40402: PPUSH
40403: LD_VAR 0 6
40407: PPUSH
40408: LD_VAR 0 7
40412: PPUSH
40413: CALL_OW 153
40417: GO 40450
40419: LD_INT 3
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40427
40425: GO 40449
40427: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40428: LD_VAR 0 1
40432: PPUSH
40433: LD_VAR 0 6
40437: PPUSH
40438: LD_VAR 0 7
40442: PPUSH
40443: CALL_OW 154
40447: GO 40450
40449: POP
// end ;
40450: LD_VAR 0 2
40454: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40455: LD_INT 0
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
// if not unit or not building then
40463: LD_VAR 0 1
40467: NOT
40468: PUSH
40469: LD_VAR 0 2
40473: NOT
40474: OR
40475: IFFALSE 40479
// exit ;
40477: GO 40637
// x := GetX ( building ) ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_VAR 0 2
40488: PPUSH
40489: CALL_OW 250
40493: ST_TO_ADDR
// y := GetY ( building ) ;
40494: LD_ADDR_VAR 0 6
40498: PUSH
40499: LD_VAR 0 2
40503: PPUSH
40504: CALL_OW 251
40508: ST_TO_ADDR
// for i = 0 to 5 do
40509: LD_ADDR_VAR 0 4
40513: PUSH
40514: DOUBLE
40515: LD_INT 0
40517: DEC
40518: ST_TO_ADDR
40519: LD_INT 5
40521: PUSH
40522: FOR_TO
40523: IFFALSE 40635
// begin _x := ShiftX ( x , i , 3 ) ;
40525: LD_ADDR_VAR 0 7
40529: PUSH
40530: LD_VAR 0 5
40534: PPUSH
40535: LD_VAR 0 4
40539: PPUSH
40540: LD_INT 3
40542: PPUSH
40543: CALL_OW 272
40547: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40548: LD_ADDR_VAR 0 8
40552: PUSH
40553: LD_VAR 0 6
40557: PPUSH
40558: LD_VAR 0 4
40562: PPUSH
40563: LD_INT 3
40565: PPUSH
40566: CALL_OW 273
40570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40571: LD_VAR 0 7
40575: PPUSH
40576: LD_VAR 0 8
40580: PPUSH
40581: CALL_OW 488
40585: NOT
40586: IFFALSE 40590
// continue ;
40588: GO 40522
// if HexInfo ( _x , _y ) = 0 then
40590: LD_VAR 0 7
40594: PPUSH
40595: LD_VAR 0 8
40599: PPUSH
40600: CALL_OW 428
40604: PUSH
40605: LD_INT 0
40607: EQUAL
40608: IFFALSE 40633
// begin ComMoveXY ( unit , _x , _y ) ;
40610: LD_VAR 0 1
40614: PPUSH
40615: LD_VAR 0 7
40619: PPUSH
40620: LD_VAR 0 8
40624: PPUSH
40625: CALL_OW 111
// exit ;
40629: POP
40630: POP
40631: GO 40637
// end ; end ;
40633: GO 40522
40635: POP
40636: POP
// end ;
40637: LD_VAR 0 3
40641: RET
// export function ScanBase ( side , base_area ) ; begin
40642: LD_INT 0
40644: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40645: LD_ADDR_VAR 0 3
40649: PUSH
40650: LD_VAR 0 2
40654: PPUSH
40655: LD_INT 81
40657: PUSH
40658: LD_VAR 0 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PPUSH
40667: CALL_OW 70
40671: ST_TO_ADDR
// end ;
40672: LD_VAR 0 3
40676: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
// result := false ;
40683: LD_ADDR_VAR 0 2
40687: PUSH
40688: LD_INT 0
40690: ST_TO_ADDR
// side := GetSide ( unit ) ;
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 255
40705: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40706: LD_ADDR_VAR 0 4
40710: PUSH
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 248
40720: ST_TO_ADDR
// case nat of 1 :
40721: LD_VAR 0 4
40725: PUSH
40726: LD_INT 1
40728: DOUBLE
40729: EQUAL
40730: IFTRUE 40734
40732: GO 40745
40734: POP
// tech := tech_lassight ; 2 :
40735: LD_ADDR_VAR 0 5
40739: PUSH
40740: LD_INT 12
40742: ST_TO_ADDR
40743: GO 40784
40745: LD_INT 2
40747: DOUBLE
40748: EQUAL
40749: IFTRUE 40753
40751: GO 40764
40753: POP
// tech := tech_mortar ; 3 :
40754: LD_ADDR_VAR 0 5
40758: PUSH
40759: LD_INT 41
40761: ST_TO_ADDR
40762: GO 40784
40764: LD_INT 3
40766: DOUBLE
40767: EQUAL
40768: IFTRUE 40772
40770: GO 40783
40772: POP
// tech := tech_bazooka ; end ;
40773: LD_ADDR_VAR 0 5
40777: PUSH
40778: LD_INT 44
40780: ST_TO_ADDR
40781: GO 40784
40783: POP
// if Researched ( side , tech ) then
40784: LD_VAR 0 3
40788: PPUSH
40789: LD_VAR 0 5
40793: PPUSH
40794: CALL_OW 325
40798: IFFALSE 40825
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40800: LD_ADDR_VAR 0 2
40804: PUSH
40805: LD_INT 5
40807: PUSH
40808: LD_INT 8
40810: PUSH
40811: LD_INT 9
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: PUSH
40819: LD_VAR 0 4
40823: ARRAY
40824: ST_TO_ADDR
// end ;
40825: LD_VAR 0 2
40829: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40830: LD_INT 0
40832: PPUSH
40833: PPUSH
40834: PPUSH
// if not mines then
40835: LD_VAR 0 2
40839: NOT
40840: IFFALSE 40844
// exit ;
40842: GO 40988
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40844: LD_ADDR_VAR 0 5
40848: PUSH
40849: LD_INT 81
40851: PUSH
40852: LD_VAR 0 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 21
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PPUSH
40882: CALL_OW 69
40886: ST_TO_ADDR
// for i in mines do
40887: LD_ADDR_VAR 0 4
40891: PUSH
40892: LD_VAR 0 2
40896: PUSH
40897: FOR_IN
40898: IFFALSE 40986
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40900: LD_VAR 0 4
40904: PUSH
40905: LD_INT 1
40907: ARRAY
40908: PPUSH
40909: LD_VAR 0 4
40913: PUSH
40914: LD_INT 2
40916: ARRAY
40917: PPUSH
40918: CALL_OW 458
40922: NOT
40923: IFFALSE 40927
// continue ;
40925: GO 40897
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40927: LD_VAR 0 4
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: PPUSH
40936: LD_VAR 0 4
40940: PUSH
40941: LD_INT 2
40943: ARRAY
40944: PPUSH
40945: CALL_OW 428
40949: PUSH
40950: LD_VAR 0 5
40954: IN
40955: IFFALSE 40984
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40957: LD_VAR 0 4
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PPUSH
40966: LD_VAR 0 4
40970: PUSH
40971: LD_INT 2
40973: ARRAY
40974: PPUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 456
// end ;
40984: GO 40897
40986: POP
40987: POP
// end ;
40988: LD_VAR 0 3
40992: RET
// export function Count ( array ) ; var i ; begin
40993: LD_INT 0
40995: PPUSH
40996: PPUSH
// result := 0 ;
40997: LD_ADDR_VAR 0 2
41001: PUSH
41002: LD_INT 0
41004: ST_TO_ADDR
// for i in array do
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: LD_VAR 0 1
41014: PUSH
41015: FOR_IN
41016: IFFALSE 41040
// if i then
41018: LD_VAR 0 3
41022: IFFALSE 41038
// result := result + 1 ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_VAR 0 2
41033: PUSH
41034: LD_INT 1
41036: PLUS
41037: ST_TO_ADDR
41038: GO 41015
41040: POP
41041: POP
// end ;
41042: LD_VAR 0 2
41046: RET
// export function IsEmpty ( building ) ; begin
41047: LD_INT 0
41049: PPUSH
// if not building then
41050: LD_VAR 0 1
41054: NOT
41055: IFFALSE 41059
// exit ;
41057: GO 41102
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41059: LD_ADDR_VAR 0 2
41063: PUSH
41064: LD_VAR 0 1
41068: PUSH
41069: LD_INT 22
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 255
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 58
41088: PUSH
41089: EMPTY
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PPUSH
41096: CALL_OW 69
41100: IN
41101: ST_TO_ADDR
// end ;
41102: LD_VAR 0 2
41106: RET
// export function IsNotFull ( building ) ; var places ; begin
41107: LD_INT 0
41109: PPUSH
41110: PPUSH
// if not building then
41111: LD_VAR 0 1
41115: NOT
41116: IFFALSE 41120
// exit ;
41118: GO 41291
// result := false ;
41120: LD_ADDR_VAR 0 2
41124: PUSH
41125: LD_INT 0
41127: ST_TO_ADDR
// places := 0 ;
41128: LD_ADDR_VAR 0 3
41132: PUSH
41133: LD_INT 0
41135: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41136: LD_VAR 0 1
41140: PPUSH
41141: CALL_OW 266
41145: PUSH
41146: LD_INT 0
41148: DOUBLE
41149: EQUAL
41150: IFTRUE 41208
41152: LD_INT 1
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41208
41158: LD_INT 6
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41208
41164: LD_INT 7
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41208
41170: LD_INT 8
41172: DOUBLE
41173: EQUAL
41174: IFTRUE 41208
41176: LD_INT 4
41178: DOUBLE
41179: EQUAL
41180: IFTRUE 41208
41182: LD_INT 5
41184: DOUBLE
41185: EQUAL
41186: IFTRUE 41208
41188: LD_INT 2
41190: DOUBLE
41191: EQUAL
41192: IFTRUE 41208
41194: LD_INT 3
41196: DOUBLE
41197: EQUAL
41198: IFTRUE 41208
41200: LD_INT 35
41202: DOUBLE
41203: EQUAL
41204: IFTRUE 41208
41206: GO 41219
41208: POP
// places := 6 ; b_bunker , b_breastwork :
41209: LD_ADDR_VAR 0 3
41213: PUSH
41214: LD_INT 6
41216: ST_TO_ADDR
41217: GO 41264
41219: LD_INT 32
41221: DOUBLE
41222: EQUAL
41223: IFTRUE 41233
41225: LD_INT 31
41227: DOUBLE
41228: EQUAL
41229: IFTRUE 41233
41231: GO 41244
41233: POP
// places := 1 ; b_control_tower :
41234: LD_ADDR_VAR 0 3
41238: PUSH
41239: LD_INT 1
41241: ST_TO_ADDR
41242: GO 41264
41244: LD_INT 36
41246: DOUBLE
41247: EQUAL
41248: IFTRUE 41252
41250: GO 41263
41252: POP
// places := 3 ; end ;
41253: LD_ADDR_VAR 0 3
41257: PUSH
41258: LD_INT 3
41260: ST_TO_ADDR
41261: GO 41264
41263: POP
// if places then
41264: LD_VAR 0 3
41268: IFFALSE 41291
// result := UnitsInside ( building ) < places ;
41270: LD_ADDR_VAR 0 2
41274: PUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 313
41284: PUSH
41285: LD_VAR 0 3
41289: LESS
41290: ST_TO_ADDR
// end ;
41291: LD_VAR 0 2
41295: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41296: LD_INT 0
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
// tmp := [ ] ;
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: EMPTY
41308: ST_TO_ADDR
// list := [ ] ;
41309: LD_ADDR_VAR 0 5
41313: PUSH
41314: EMPTY
41315: ST_TO_ADDR
// for i = 16 to 25 do
41316: LD_ADDR_VAR 0 4
41320: PUSH
41321: DOUBLE
41322: LD_INT 16
41324: DEC
41325: ST_TO_ADDR
41326: LD_INT 25
41328: PUSH
41329: FOR_TO
41330: IFFALSE 41403
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_VAR 0 3
41341: PUSH
41342: LD_INT 22
41344: PUSH
41345: LD_VAR 0 1
41349: PPUSH
41350: CALL_OW 255
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 91
41361: PUSH
41362: LD_VAR 0 1
41366: PUSH
41367: LD_INT 6
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 30
41377: PUSH
41378: LD_VAR 0 4
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: PPUSH
41395: CALL_OW 69
41399: ADD
41400: ST_TO_ADDR
41401: GO 41329
41403: POP
41404: POP
// for i = 1 to tmp do
41405: LD_ADDR_VAR 0 4
41409: PUSH
41410: DOUBLE
41411: LD_INT 1
41413: DEC
41414: ST_TO_ADDR
41415: LD_VAR 0 3
41419: PUSH
41420: FOR_TO
41421: IFFALSE 41509
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41423: LD_ADDR_VAR 0 5
41427: PUSH
41428: LD_VAR 0 5
41432: PUSH
41433: LD_VAR 0 3
41437: PUSH
41438: LD_VAR 0 4
41442: ARRAY
41443: PPUSH
41444: CALL_OW 266
41448: PUSH
41449: LD_VAR 0 3
41453: PUSH
41454: LD_VAR 0 4
41458: ARRAY
41459: PPUSH
41460: CALL_OW 250
41464: PUSH
41465: LD_VAR 0 3
41469: PUSH
41470: LD_VAR 0 4
41474: ARRAY
41475: PPUSH
41476: CALL_OW 251
41480: PUSH
41481: LD_VAR 0 3
41485: PUSH
41486: LD_VAR 0 4
41490: ARRAY
41491: PPUSH
41492: CALL_OW 254
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: ADD
41506: ST_TO_ADDR
41507: GO 41420
41509: POP
41510: POP
// result := list ;
41511: LD_ADDR_VAR 0 2
41515: PUSH
41516: LD_VAR 0 5
41520: ST_TO_ADDR
// end ;
41521: LD_VAR 0 2
41525: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41526: LD_INT 0
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
// if not factory then
41535: LD_VAR 0 1
41539: NOT
41540: IFFALSE 41544
// exit ;
41542: GO 42137
// if control = control_apeman then
41544: LD_VAR 0 4
41548: PUSH
41549: LD_INT 5
41551: EQUAL
41552: IFFALSE 41661
// begin tmp := UnitsInside ( factory ) ;
41554: LD_ADDR_VAR 0 8
41558: PUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 313
41568: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41569: LD_VAR 0 8
41573: PPUSH
41574: LD_INT 25
41576: PUSH
41577: LD_INT 12
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PPUSH
41584: CALL_OW 72
41588: NOT
41589: IFFALSE 41599
// control := control_manual ;
41591: LD_ADDR_VAR 0 4
41595: PUSH
41596: LD_INT 1
41598: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41599: LD_ADDR_VAR 0 8
41603: PUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL 41296 0 1
41613: ST_TO_ADDR
// if tmp then
41614: LD_VAR 0 8
41618: IFFALSE 41661
// begin for i in tmp do
41620: LD_ADDR_VAR 0 7
41624: PUSH
41625: LD_VAR 0 8
41629: PUSH
41630: FOR_IN
41631: IFFALSE 41659
// if i [ 1 ] = b_ext_radio then
41633: LD_VAR 0 7
41637: PUSH
41638: LD_INT 1
41640: ARRAY
41641: PUSH
41642: LD_INT 22
41644: EQUAL
41645: IFFALSE 41657
// begin control := control_remote ;
41647: LD_ADDR_VAR 0 4
41651: PUSH
41652: LD_INT 2
41654: ST_TO_ADDR
// break ;
41655: GO 41659
// end ;
41657: GO 41630
41659: POP
41660: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41661: LD_VAR 0 1
41665: PPUSH
41666: LD_VAR 0 2
41670: PPUSH
41671: LD_VAR 0 3
41675: PPUSH
41676: LD_VAR 0 4
41680: PPUSH
41681: LD_VAR 0 5
41685: PPUSH
41686: CALL_OW 448
41690: IFFALSE 41725
// begin result := [ chassis , engine , control , weapon ] ;
41692: LD_ADDR_VAR 0 6
41696: PUSH
41697: LD_VAR 0 2
41701: PUSH
41702: LD_VAR 0 3
41706: PUSH
41707: LD_VAR 0 4
41711: PUSH
41712: LD_VAR 0 5
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// exit ;
41723: GO 42137
// end ; _chassis := AvailableChassisList ( factory ) ;
41725: LD_ADDR_VAR 0 9
41729: PUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: CALL_OW 475
41739: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41740: LD_ADDR_VAR 0 11
41744: PUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: CALL_OW 476
41754: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41755: LD_ADDR_VAR 0 12
41759: PUSH
41760: LD_VAR 0 1
41764: PPUSH
41765: CALL_OW 477
41769: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41770: LD_ADDR_VAR 0 10
41774: PUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 478
41784: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41785: LD_VAR 0 9
41789: NOT
41790: PUSH
41791: LD_VAR 0 11
41795: NOT
41796: OR
41797: PUSH
41798: LD_VAR 0 12
41802: NOT
41803: OR
41804: PUSH
41805: LD_VAR 0 10
41809: NOT
41810: OR
41811: IFFALSE 41846
// begin result := [ chassis , engine , control , weapon ] ;
41813: LD_ADDR_VAR 0 6
41817: PUSH
41818: LD_VAR 0 2
41822: PUSH
41823: LD_VAR 0 3
41827: PUSH
41828: LD_VAR 0 4
41832: PUSH
41833: LD_VAR 0 5
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: ST_TO_ADDR
// exit ;
41844: GO 42137
// end ; if not chassis in _chassis then
41846: LD_VAR 0 2
41850: PUSH
41851: LD_VAR 0 9
41855: IN
41856: NOT
41857: IFFALSE 41883
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41859: LD_ADDR_VAR 0 2
41863: PUSH
41864: LD_VAR 0 9
41868: PUSH
41869: LD_INT 1
41871: PPUSH
41872: LD_VAR 0 9
41876: PPUSH
41877: CALL_OW 12
41881: ARRAY
41882: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41883: LD_VAR 0 2
41887: PPUSH
41888: LD_VAR 0 3
41892: PPUSH
41893: CALL 42142 0 2
41897: NOT
41898: IFFALSE 41957
// repeat engine := _engine [ 1 ] ;
41900: LD_ADDR_VAR 0 3
41904: PUSH
41905: LD_VAR 0 11
41909: PUSH
41910: LD_INT 1
41912: ARRAY
41913: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41914: LD_ADDR_VAR 0 11
41918: PUSH
41919: LD_VAR 0 11
41923: PPUSH
41924: LD_INT 1
41926: PPUSH
41927: CALL_OW 3
41931: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41932: LD_VAR 0 2
41936: PPUSH
41937: LD_VAR 0 3
41941: PPUSH
41942: CALL 42142 0 2
41946: PUSH
41947: LD_VAR 0 11
41951: PUSH
41952: EMPTY
41953: EQUAL
41954: OR
41955: IFFALSE 41900
// if not control in _control then
41957: LD_VAR 0 4
41961: PUSH
41962: LD_VAR 0 12
41966: IN
41967: NOT
41968: IFFALSE 41994
// control := _control [ rand ( 1 , _control ) ] ;
41970: LD_ADDR_VAR 0 4
41974: PUSH
41975: LD_VAR 0 12
41979: PUSH
41980: LD_INT 1
41982: PPUSH
41983: LD_VAR 0 12
41987: PPUSH
41988: CALL_OW 12
41992: ARRAY
41993: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41994: LD_VAR 0 2
41998: PPUSH
41999: LD_VAR 0 5
42003: PPUSH
42004: CALL 42362 0 2
42008: NOT
42009: IFFALSE 42068
// repeat weapon := _weapon [ 1 ] ;
42011: LD_ADDR_VAR 0 5
42015: PUSH
42016: LD_VAR 0 10
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42025: LD_ADDR_VAR 0 10
42029: PUSH
42030: LD_VAR 0 10
42034: PPUSH
42035: LD_INT 1
42037: PPUSH
42038: CALL_OW 3
42042: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42043: LD_VAR 0 2
42047: PPUSH
42048: LD_VAR 0 5
42052: PPUSH
42053: CALL 42362 0 2
42057: PUSH
42058: LD_VAR 0 10
42062: PUSH
42063: EMPTY
42064: EQUAL
42065: OR
42066: IFFALSE 42011
// result := [ ] ;
42068: LD_ADDR_VAR 0 6
42072: PUSH
42073: EMPTY
42074: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42075: LD_VAR 0 1
42079: PPUSH
42080: LD_VAR 0 2
42084: PPUSH
42085: LD_VAR 0 3
42089: PPUSH
42090: LD_VAR 0 4
42094: PPUSH
42095: LD_VAR 0 5
42099: PPUSH
42100: CALL_OW 448
42104: IFFALSE 42137
// result := [ chassis , engine , control , weapon ] ;
42106: LD_ADDR_VAR 0 6
42110: PUSH
42111: LD_VAR 0 2
42115: PUSH
42116: LD_VAR 0 3
42120: PUSH
42121: LD_VAR 0 4
42125: PUSH
42126: LD_VAR 0 5
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// end ;
42137: LD_VAR 0 6
42141: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42142: LD_INT 0
42144: PPUSH
// if not chassis or not engine then
42145: LD_VAR 0 1
42149: NOT
42150: PUSH
42151: LD_VAR 0 2
42155: NOT
42156: OR
42157: IFFALSE 42161
// exit ;
42159: GO 42357
// case engine of engine_solar :
42161: LD_VAR 0 2
42165: PUSH
42166: LD_INT 2
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42174
42172: GO 42212
42174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42175: LD_ADDR_VAR 0 3
42179: PUSH
42180: LD_INT 11
42182: PUSH
42183: LD_INT 12
42185: PUSH
42186: LD_INT 13
42188: PUSH
42189: LD_INT 14
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: ST_TO_ADDR
42210: GO 42341
42212: LD_INT 1
42214: DOUBLE
42215: EQUAL
42216: IFTRUE 42220
42218: GO 42282
42220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42221: LD_ADDR_VAR 0 3
42225: PUSH
42226: LD_INT 11
42228: PUSH
42229: LD_INT 12
42231: PUSH
42232: LD_INT 13
42234: PUSH
42235: LD_INT 14
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 4
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: LD_INT 21
42255: PUSH
42256: LD_INT 23
42258: PUSH
42259: LD_INT 22
42261: PUSH
42262: LD_INT 24
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
42280: GO 42341
42282: LD_INT 3
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42340
42290: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 13
42298: PUSH
42299: LD_INT 14
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 4
42310: PUSH
42311: LD_INT 5
42313: PUSH
42314: LD_INT 21
42316: PUSH
42317: LD_INT 22
42319: PUSH
42320: LD_INT 23
42322: PUSH
42323: LD_INT 24
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
42338: GO 42341
42340: POP
// result := ( chassis in result ) ;
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: LD_VAR 0 1
42350: PUSH
42351: LD_VAR 0 3
42355: IN
42356: ST_TO_ADDR
// end ;
42357: LD_VAR 0 3
42361: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42362: LD_INT 0
42364: PPUSH
// if not chassis or not weapon then
42365: LD_VAR 0 1
42369: NOT
42370: PUSH
42371: LD_VAR 0 2
42375: NOT
42376: OR
42377: IFFALSE 42381
// exit ;
42379: GO 43443
// case weapon of us_machine_gun :
42381: LD_VAR 0 2
42385: PUSH
42386: LD_INT 2
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42394
42392: GO 42424
42394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: LD_INT 4
42411: PUSH
42412: LD_INT 5
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
42422: GO 43427
42424: LD_INT 3
42426: DOUBLE
42427: EQUAL
42428: IFTRUE 42432
42430: GO 42462
42432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: LD_INT 4
42449: PUSH
42450: LD_INT 5
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
42460: GO 43427
42462: LD_INT 11
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42470
42468: GO 42500
42470: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 4
42487: PUSH
42488: LD_INT 5
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
42498: GO 43427
42500: LD_INT 4
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42534
42508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 4
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
42532: GO 43427
42534: LD_INT 5
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42568
42542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: LD_INT 4
42556: PUSH
42557: LD_INT 5
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
42566: GO 43427
42568: LD_INT 9
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 42602
42576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42577: LD_ADDR_VAR 0 3
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: LD_INT 4
42590: PUSH
42591: LD_INT 5
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
42600: GO 43427
42602: LD_INT 7
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42636
42610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: LD_INT 4
42624: PUSH
42625: LD_INT 5
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 43427
42636: LD_INT 12
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42670
42644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 4
42658: PUSH
42659: LD_INT 5
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
42668: GO 43427
42670: LD_INT 13
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42704
42678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: LD_INT 5
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
42702: GO 43427
42704: LD_INT 14
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42712
42710: GO 42730
42712: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 4
42720: PUSH
42721: LD_INT 5
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: ST_TO_ADDR
42728: GO 43427
42730: LD_INT 6
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42756
42738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_INT 4
42746: PUSH
42747: LD_INT 5
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: ST_TO_ADDR
42754: GO 43427
42756: LD_INT 10
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42782
42764: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 4
42772: PUSH
42773: LD_INT 5
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: ST_TO_ADDR
42780: GO 43427
42782: LD_INT 22
42784: DOUBLE
42785: EQUAL
42786: IFTRUE 42790
42788: GO 42816
42790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42791: LD_ADDR_VAR 0 3
42795: PUSH
42796: LD_INT 11
42798: PUSH
42799: LD_INT 12
42801: PUSH
42802: LD_INT 13
42804: PUSH
42805: LD_INT 14
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
42814: GO 43427
42816: LD_INT 23
42818: DOUBLE
42819: EQUAL
42820: IFTRUE 42824
42822: GO 42850
42824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_INT 11
42832: PUSH
42833: LD_INT 12
42835: PUSH
42836: LD_INT 13
42838: PUSH
42839: LD_INT 14
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: ST_TO_ADDR
42848: GO 43427
42850: LD_INT 24
42852: DOUBLE
42853: EQUAL
42854: IFTRUE 42858
42856: GO 42884
42858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_INT 11
42866: PUSH
42867: LD_INT 12
42869: PUSH
42870: LD_INT 13
42872: PUSH
42873: LD_INT 14
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
42882: GO 43427
42884: LD_INT 30
42886: DOUBLE
42887: EQUAL
42888: IFTRUE 42892
42890: GO 42918
42892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_INT 11
42900: PUSH
42901: LD_INT 12
42903: PUSH
42904: LD_INT 13
42906: PUSH
42907: LD_INT 14
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
42916: GO 43427
42918: LD_INT 25
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42944
42926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42927: LD_ADDR_VAR 0 3
42931: PUSH
42932: LD_INT 13
42934: PUSH
42935: LD_INT 14
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: ST_TO_ADDR
42942: GO 43427
42944: LD_INT 27
42946: DOUBLE
42947: EQUAL
42948: IFTRUE 42952
42950: GO 42970
42952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42953: LD_ADDR_VAR 0 3
42957: PUSH
42958: LD_INT 13
42960: PUSH
42961: LD_INT 14
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: ST_TO_ADDR
42968: GO 43427
42970: LD_EXP 142
42974: DOUBLE
42975: EQUAL
42976: IFTRUE 42980
42978: GO 43006
42980: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42981: LD_ADDR_VAR 0 3
42985: PUSH
42986: LD_INT 11
42988: PUSH
42989: LD_INT 12
42991: PUSH
42992: LD_INT 13
42994: PUSH
42995: LD_INT 14
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
43004: GO 43427
43006: LD_INT 28
43008: DOUBLE
43009: EQUAL
43010: IFTRUE 43014
43012: GO 43032
43014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43015: LD_ADDR_VAR 0 3
43019: PUSH
43020: LD_INT 13
43022: PUSH
43023: LD_INT 14
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: ST_TO_ADDR
43030: GO 43427
43032: LD_INT 29
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43040
43038: GO 43058
43040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: LD_INT 13
43048: PUSH
43049: LD_INT 14
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: ST_TO_ADDR
43056: GO 43427
43058: LD_INT 31
43060: DOUBLE
43061: EQUAL
43062: IFTRUE 43066
43064: GO 43084
43066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43067: LD_ADDR_VAR 0 3
43071: PUSH
43072: LD_INT 13
43074: PUSH
43075: LD_INT 14
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: ST_TO_ADDR
43082: GO 43427
43084: LD_INT 26
43086: DOUBLE
43087: EQUAL
43088: IFTRUE 43092
43090: GO 43110
43092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43093: LD_ADDR_VAR 0 3
43097: PUSH
43098: LD_INT 13
43100: PUSH
43101: LD_INT 14
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: ST_TO_ADDR
43108: GO 43427
43110: LD_INT 42
43112: DOUBLE
43113: EQUAL
43114: IFTRUE 43118
43116: GO 43144
43118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43119: LD_ADDR_VAR 0 3
43123: PUSH
43124: LD_INT 21
43126: PUSH
43127: LD_INT 22
43129: PUSH
43130: LD_INT 23
43132: PUSH
43133: LD_INT 24
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
43142: GO 43427
43144: LD_INT 43
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43178
43152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43153: LD_ADDR_VAR 0 3
43157: PUSH
43158: LD_INT 21
43160: PUSH
43161: LD_INT 22
43163: PUSH
43164: LD_INT 23
43166: PUSH
43167: LD_INT 24
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
43176: GO 43427
43178: LD_INT 44
43180: DOUBLE
43181: EQUAL
43182: IFTRUE 43186
43184: GO 43212
43186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43187: LD_ADDR_VAR 0 3
43191: PUSH
43192: LD_INT 21
43194: PUSH
43195: LD_INT 22
43197: PUSH
43198: LD_INT 23
43200: PUSH
43201: LD_INT 24
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
43210: GO 43427
43212: LD_INT 45
43214: DOUBLE
43215: EQUAL
43216: IFTRUE 43220
43218: GO 43246
43220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43221: LD_ADDR_VAR 0 3
43225: PUSH
43226: LD_INT 21
43228: PUSH
43229: LD_INT 22
43231: PUSH
43232: LD_INT 23
43234: PUSH
43235: LD_INT 24
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
43244: GO 43427
43246: LD_INT 49
43248: DOUBLE
43249: EQUAL
43250: IFTRUE 43254
43252: GO 43280
43254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_INT 21
43262: PUSH
43263: LD_INT 22
43265: PUSH
43266: LD_INT 23
43268: PUSH
43269: LD_INT 24
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
43278: GO 43427
43280: LD_INT 51
43282: DOUBLE
43283: EQUAL
43284: IFTRUE 43288
43286: GO 43314
43288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43289: LD_ADDR_VAR 0 3
43293: PUSH
43294: LD_INT 21
43296: PUSH
43297: LD_INT 22
43299: PUSH
43300: LD_INT 23
43302: PUSH
43303: LD_INT 24
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: ST_TO_ADDR
43312: GO 43427
43314: LD_INT 52
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 43348
43322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43323: LD_ADDR_VAR 0 3
43327: PUSH
43328: LD_INT 21
43330: PUSH
43331: LD_INT 22
43333: PUSH
43334: LD_INT 23
43336: PUSH
43337: LD_INT 24
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
43346: GO 43427
43348: LD_INT 53
43350: DOUBLE
43351: EQUAL
43352: IFTRUE 43356
43354: GO 43374
43356: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43357: LD_ADDR_VAR 0 3
43361: PUSH
43362: LD_INT 23
43364: PUSH
43365: LD_INT 24
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: ST_TO_ADDR
43372: GO 43427
43374: LD_INT 46
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43400
43382: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43383: LD_ADDR_VAR 0 3
43387: PUSH
43388: LD_INT 23
43390: PUSH
43391: LD_INT 24
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: ST_TO_ADDR
43398: GO 43427
43400: LD_INT 47
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43426
43408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43409: LD_ADDR_VAR 0 3
43413: PUSH
43414: LD_INT 23
43416: PUSH
43417: LD_INT 24
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: ST_TO_ADDR
43424: GO 43427
43426: POP
// result := ( chassis in result ) ;
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_VAR 0 1
43436: PUSH
43437: LD_VAR 0 3
43441: IN
43442: ST_TO_ADDR
// end ;
43443: LD_VAR 0 3
43447: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43448: LD_INT 0
43450: PPUSH
43451: PPUSH
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
// result := array ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: LD_VAR 0 1
43466: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43467: LD_VAR 0 1
43471: NOT
43472: PUSH
43473: LD_VAR 0 2
43477: NOT
43478: OR
43479: PUSH
43480: LD_VAR 0 3
43484: NOT
43485: OR
43486: PUSH
43487: LD_VAR 0 2
43491: PUSH
43492: LD_VAR 0 1
43496: GREATER
43497: OR
43498: PUSH
43499: LD_VAR 0 3
43503: PUSH
43504: LD_VAR 0 1
43508: GREATER
43509: OR
43510: IFFALSE 43514
// exit ;
43512: GO 43810
// if direction then
43514: LD_VAR 0 4
43518: IFFALSE 43582
// begin d := 1 ;
43520: LD_ADDR_VAR 0 9
43524: PUSH
43525: LD_INT 1
43527: ST_TO_ADDR
// if i_from > i_to then
43528: LD_VAR 0 2
43532: PUSH
43533: LD_VAR 0 3
43537: GREATER
43538: IFFALSE 43564
// length := ( array - i_from ) + i_to else
43540: LD_ADDR_VAR 0 11
43544: PUSH
43545: LD_VAR 0 1
43549: PUSH
43550: LD_VAR 0 2
43554: MINUS
43555: PUSH
43556: LD_VAR 0 3
43560: PLUS
43561: ST_TO_ADDR
43562: GO 43580
// length := i_to - i_from ;
43564: LD_ADDR_VAR 0 11
43568: PUSH
43569: LD_VAR 0 3
43573: PUSH
43574: LD_VAR 0 2
43578: MINUS
43579: ST_TO_ADDR
// end else
43580: GO 43643
// begin d := - 1 ;
43582: LD_ADDR_VAR 0 9
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: ST_TO_ADDR
// if i_from > i_to then
43591: LD_VAR 0 2
43595: PUSH
43596: LD_VAR 0 3
43600: GREATER
43601: IFFALSE 43621
// length := i_from - i_to else
43603: LD_ADDR_VAR 0 11
43607: PUSH
43608: LD_VAR 0 2
43612: PUSH
43613: LD_VAR 0 3
43617: MINUS
43618: ST_TO_ADDR
43619: GO 43643
// length := ( array - i_to ) + i_from ;
43621: LD_ADDR_VAR 0 11
43625: PUSH
43626: LD_VAR 0 1
43630: PUSH
43631: LD_VAR 0 3
43635: MINUS
43636: PUSH
43637: LD_VAR 0 2
43641: PLUS
43642: ST_TO_ADDR
// end ; if not length then
43643: LD_VAR 0 11
43647: NOT
43648: IFFALSE 43652
// exit ;
43650: GO 43810
// tmp := array ;
43652: LD_ADDR_VAR 0 10
43656: PUSH
43657: LD_VAR 0 1
43661: ST_TO_ADDR
// for i = 1 to length do
43662: LD_ADDR_VAR 0 6
43666: PUSH
43667: DOUBLE
43668: LD_INT 1
43670: DEC
43671: ST_TO_ADDR
43672: LD_VAR 0 11
43676: PUSH
43677: FOR_TO
43678: IFFALSE 43798
// begin for j = 1 to array do
43680: LD_ADDR_VAR 0 7
43684: PUSH
43685: DOUBLE
43686: LD_INT 1
43688: DEC
43689: ST_TO_ADDR
43690: LD_VAR 0 1
43694: PUSH
43695: FOR_TO
43696: IFFALSE 43784
// begin k := j + d ;
43698: LD_ADDR_VAR 0 8
43702: PUSH
43703: LD_VAR 0 7
43707: PUSH
43708: LD_VAR 0 9
43712: PLUS
43713: ST_TO_ADDR
// if k > array then
43714: LD_VAR 0 8
43718: PUSH
43719: LD_VAR 0 1
43723: GREATER
43724: IFFALSE 43734
// k := 1 ;
43726: LD_ADDR_VAR 0 8
43730: PUSH
43731: LD_INT 1
43733: ST_TO_ADDR
// if not k then
43734: LD_VAR 0 8
43738: NOT
43739: IFFALSE 43751
// k := array ;
43741: LD_ADDR_VAR 0 8
43745: PUSH
43746: LD_VAR 0 1
43750: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43751: LD_ADDR_VAR 0 10
43755: PUSH
43756: LD_VAR 0 10
43760: PPUSH
43761: LD_VAR 0 8
43765: PPUSH
43766: LD_VAR 0 1
43770: PUSH
43771: LD_VAR 0 7
43775: ARRAY
43776: PPUSH
43777: CALL_OW 1
43781: ST_TO_ADDR
// end ;
43782: GO 43695
43784: POP
43785: POP
// array := tmp ;
43786: LD_ADDR_VAR 0 1
43790: PUSH
43791: LD_VAR 0 10
43795: ST_TO_ADDR
// end ;
43796: GO 43677
43798: POP
43799: POP
// result := array ;
43800: LD_ADDR_VAR 0 5
43804: PUSH
43805: LD_VAR 0 1
43809: ST_TO_ADDR
// end ;
43810: LD_VAR 0 5
43814: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43815: LD_INT 0
43817: PPUSH
43818: PPUSH
// result := 0 ;
43819: LD_ADDR_VAR 0 3
43823: PUSH
43824: LD_INT 0
43826: ST_TO_ADDR
// if not array or not value in array then
43827: LD_VAR 0 1
43831: NOT
43832: PUSH
43833: LD_VAR 0 2
43837: PUSH
43838: LD_VAR 0 1
43842: IN
43843: NOT
43844: OR
43845: IFFALSE 43849
// exit ;
43847: GO 43903
// for i = 1 to array do
43849: LD_ADDR_VAR 0 4
43853: PUSH
43854: DOUBLE
43855: LD_INT 1
43857: DEC
43858: ST_TO_ADDR
43859: LD_VAR 0 1
43863: PUSH
43864: FOR_TO
43865: IFFALSE 43901
// if value = array [ i ] then
43867: LD_VAR 0 2
43871: PUSH
43872: LD_VAR 0 1
43876: PUSH
43877: LD_VAR 0 4
43881: ARRAY
43882: EQUAL
43883: IFFALSE 43899
// begin result := i ;
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_VAR 0 4
43894: ST_TO_ADDR
// exit ;
43895: POP
43896: POP
43897: GO 43903
// end ;
43899: GO 43864
43901: POP
43902: POP
// end ;
43903: LD_VAR 0 3
43907: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43908: LD_INT 0
43910: PPUSH
// vc_chassis := chassis ;
43911: LD_ADDR_OWVAR 37
43915: PUSH
43916: LD_VAR 0 1
43920: ST_TO_ADDR
// vc_engine := engine ;
43921: LD_ADDR_OWVAR 39
43925: PUSH
43926: LD_VAR 0 2
43930: ST_TO_ADDR
// vc_control := control ;
43931: LD_ADDR_OWVAR 38
43935: PUSH
43936: LD_VAR 0 3
43940: ST_TO_ADDR
// vc_weapon := weapon ;
43941: LD_ADDR_OWVAR 40
43945: PUSH
43946: LD_VAR 0 4
43950: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43951: LD_ADDR_OWVAR 41
43955: PUSH
43956: LD_VAR 0 5
43960: ST_TO_ADDR
// end ;
43961: LD_VAR 0 6
43965: RET
// export function WantPlant ( unit ) ; var task ; begin
43966: LD_INT 0
43968: PPUSH
43969: PPUSH
// result := false ;
43970: LD_ADDR_VAR 0 2
43974: PUSH
43975: LD_INT 0
43977: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43978: LD_ADDR_VAR 0 3
43982: PUSH
43983: LD_VAR 0 1
43987: PPUSH
43988: CALL_OW 437
43992: ST_TO_ADDR
// if task then
43993: LD_VAR 0 3
43997: IFFALSE 44025
// if task [ 1 ] [ 1 ] = p then
43999: LD_VAR 0 3
44003: PUSH
44004: LD_INT 1
44006: ARRAY
44007: PUSH
44008: LD_INT 1
44010: ARRAY
44011: PUSH
44012: LD_STRING p
44014: EQUAL
44015: IFFALSE 44025
// result := true ;
44017: LD_ADDR_VAR 0 2
44021: PUSH
44022: LD_INT 1
44024: ST_TO_ADDR
// end ;
44025: LD_VAR 0 2
44029: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44030: LD_INT 0
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
// if pos < 1 then
44036: LD_VAR 0 2
44040: PUSH
44041: LD_INT 1
44043: LESS
44044: IFFALSE 44048
// exit ;
44046: GO 44351
// if pos = 1 then
44048: LD_VAR 0 2
44052: PUSH
44053: LD_INT 1
44055: EQUAL
44056: IFFALSE 44089
// result := Replace ( arr , pos [ 1 ] , value ) else
44058: LD_ADDR_VAR 0 4
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: LD_VAR 0 2
44072: PUSH
44073: LD_INT 1
44075: ARRAY
44076: PPUSH
44077: LD_VAR 0 3
44081: PPUSH
44082: CALL_OW 1
44086: ST_TO_ADDR
44087: GO 44351
// begin tmp := arr ;
44089: LD_ADDR_VAR 0 6
44093: PUSH
44094: LD_VAR 0 1
44098: ST_TO_ADDR
// s_arr := [ tmp ] ;
44099: LD_ADDR_VAR 0 7
44103: PUSH
44104: LD_VAR 0 6
44108: PUSH
44109: EMPTY
44110: LIST
44111: ST_TO_ADDR
// for i = 1 to pos - 1 do
44112: LD_ADDR_VAR 0 5
44116: PUSH
44117: DOUBLE
44118: LD_INT 1
44120: DEC
44121: ST_TO_ADDR
44122: LD_VAR 0 2
44126: PUSH
44127: LD_INT 1
44129: MINUS
44130: PUSH
44131: FOR_TO
44132: IFFALSE 44177
// begin tmp := tmp [ pos [ i ] ] ;
44134: LD_ADDR_VAR 0 6
44138: PUSH
44139: LD_VAR 0 6
44143: PUSH
44144: LD_VAR 0 2
44148: PUSH
44149: LD_VAR 0 5
44153: ARRAY
44154: ARRAY
44155: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44156: LD_ADDR_VAR 0 7
44160: PUSH
44161: LD_VAR 0 7
44165: PUSH
44166: LD_VAR 0 6
44170: PUSH
44171: EMPTY
44172: LIST
44173: ADD
44174: ST_TO_ADDR
// end ;
44175: GO 44131
44177: POP
44178: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44179: LD_ADDR_VAR 0 6
44183: PUSH
44184: LD_VAR 0 6
44188: PPUSH
44189: LD_VAR 0 2
44193: PUSH
44194: LD_VAR 0 2
44198: ARRAY
44199: PPUSH
44200: LD_VAR 0 3
44204: PPUSH
44205: CALL_OW 1
44209: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44210: LD_ADDR_VAR 0 7
44214: PUSH
44215: LD_VAR 0 7
44219: PPUSH
44220: LD_VAR 0 7
44224: PPUSH
44225: LD_VAR 0 6
44229: PPUSH
44230: CALL_OW 1
44234: ST_TO_ADDR
// for i = s_arr downto 2 do
44235: LD_ADDR_VAR 0 5
44239: PUSH
44240: DOUBLE
44241: LD_VAR 0 7
44245: INC
44246: ST_TO_ADDR
44247: LD_INT 2
44249: PUSH
44250: FOR_DOWNTO
44251: IFFALSE 44335
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44253: LD_ADDR_VAR 0 6
44257: PUSH
44258: LD_VAR 0 7
44262: PUSH
44263: LD_VAR 0 5
44267: PUSH
44268: LD_INT 1
44270: MINUS
44271: ARRAY
44272: PPUSH
44273: LD_VAR 0 2
44277: PUSH
44278: LD_VAR 0 5
44282: PUSH
44283: LD_INT 1
44285: MINUS
44286: ARRAY
44287: PPUSH
44288: LD_VAR 0 7
44292: PUSH
44293: LD_VAR 0 5
44297: ARRAY
44298: PPUSH
44299: CALL_OW 1
44303: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44304: LD_ADDR_VAR 0 7
44308: PUSH
44309: LD_VAR 0 7
44313: PPUSH
44314: LD_VAR 0 5
44318: PUSH
44319: LD_INT 1
44321: MINUS
44322: PPUSH
44323: LD_VAR 0 6
44327: PPUSH
44328: CALL_OW 1
44332: ST_TO_ADDR
// end ;
44333: GO 44250
44335: POP
44336: POP
// result := s_arr [ 1 ] ;
44337: LD_ADDR_VAR 0 4
44341: PUSH
44342: LD_VAR 0 7
44346: PUSH
44347: LD_INT 1
44349: ARRAY
44350: ST_TO_ADDR
// end ; end ;
44351: LD_VAR 0 4
44355: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44356: LD_INT 0
44358: PPUSH
44359: PPUSH
// if not list then
44360: LD_VAR 0 1
44364: NOT
44365: IFFALSE 44369
// exit ;
44367: GO 44460
// i := list [ pos1 ] ;
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: LD_VAR 0 1
44378: PUSH
44379: LD_VAR 0 2
44383: ARRAY
44384: ST_TO_ADDR
// if not i then
44385: LD_VAR 0 5
44389: NOT
44390: IFFALSE 44394
// exit ;
44392: GO 44460
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44394: LD_ADDR_VAR 0 1
44398: PUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: LD_VAR 0 1
44413: PUSH
44414: LD_VAR 0 3
44418: ARRAY
44419: PPUSH
44420: CALL_OW 1
44424: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44425: LD_ADDR_VAR 0 1
44429: PUSH
44430: LD_VAR 0 1
44434: PPUSH
44435: LD_VAR 0 3
44439: PPUSH
44440: LD_VAR 0 5
44444: PPUSH
44445: CALL_OW 1
44449: ST_TO_ADDR
// result := list ;
44450: LD_ADDR_VAR 0 4
44454: PUSH
44455: LD_VAR 0 1
44459: ST_TO_ADDR
// end ;
44460: LD_VAR 0 4
44464: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44465: LD_INT 0
44467: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44468: LD_ADDR_VAR 0 5
44472: PUSH
44473: LD_VAR 0 1
44477: PPUSH
44478: CALL_OW 250
44482: PPUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 251
44492: PPUSH
44493: LD_VAR 0 2
44497: PPUSH
44498: LD_VAR 0 3
44502: PPUSH
44503: LD_VAR 0 4
44507: PPUSH
44508: CALL 44518 0 5
44512: ST_TO_ADDR
// end ;
44513: LD_VAR 0 5
44517: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44518: LD_INT 0
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
// if not list then
44524: LD_VAR 0 3
44528: NOT
44529: IFFALSE 44533
// exit ;
44531: GO 44921
// result := [ ] ;
44533: LD_ADDR_VAR 0 6
44537: PUSH
44538: EMPTY
44539: ST_TO_ADDR
// for i in list do
44540: LD_ADDR_VAR 0 7
44544: PUSH
44545: LD_VAR 0 3
44549: PUSH
44550: FOR_IN
44551: IFFALSE 44753
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44553: LD_ADDR_VAR 0 9
44557: PUSH
44558: LD_VAR 0 7
44562: PPUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 2
44572: PPUSH
44573: CALL_OW 297
44577: ST_TO_ADDR
// if not result then
44578: LD_VAR 0 6
44582: NOT
44583: IFFALSE 44609
// result := [ [ i , tmp ] ] else
44585: LD_ADDR_VAR 0 6
44589: PUSH
44590: LD_VAR 0 7
44594: PUSH
44595: LD_VAR 0 9
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: ST_TO_ADDR
44607: GO 44751
// begin if result [ result ] [ 2 ] < tmp then
44609: LD_VAR 0 6
44613: PUSH
44614: LD_VAR 0 6
44618: ARRAY
44619: PUSH
44620: LD_INT 2
44622: ARRAY
44623: PUSH
44624: LD_VAR 0 9
44628: LESS
44629: IFFALSE 44671
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44631: LD_ADDR_VAR 0 6
44635: PUSH
44636: LD_VAR 0 6
44640: PPUSH
44641: LD_VAR 0 6
44645: PUSH
44646: LD_INT 1
44648: PLUS
44649: PPUSH
44650: LD_VAR 0 7
44654: PUSH
44655: LD_VAR 0 9
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PPUSH
44664: CALL_OW 2
44668: ST_TO_ADDR
44669: GO 44751
// for j = 1 to result do
44671: LD_ADDR_VAR 0 8
44675: PUSH
44676: DOUBLE
44677: LD_INT 1
44679: DEC
44680: ST_TO_ADDR
44681: LD_VAR 0 6
44685: PUSH
44686: FOR_TO
44687: IFFALSE 44749
// begin if tmp < result [ j ] [ 2 ] then
44689: LD_VAR 0 9
44693: PUSH
44694: LD_VAR 0 6
44698: PUSH
44699: LD_VAR 0 8
44703: ARRAY
44704: PUSH
44705: LD_INT 2
44707: ARRAY
44708: LESS
44709: IFFALSE 44747
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44711: LD_ADDR_VAR 0 6
44715: PUSH
44716: LD_VAR 0 6
44720: PPUSH
44721: LD_VAR 0 8
44725: PPUSH
44726: LD_VAR 0 7
44730: PUSH
44731: LD_VAR 0 9
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 2
44744: ST_TO_ADDR
// break ;
44745: GO 44749
// end ; end ;
44747: GO 44686
44749: POP
44750: POP
// end ; end ;
44751: GO 44550
44753: POP
44754: POP
// if result and not asc then
44755: LD_VAR 0 6
44759: PUSH
44760: LD_VAR 0 4
44764: NOT
44765: AND
44766: IFFALSE 44841
// begin tmp := result ;
44768: LD_ADDR_VAR 0 9
44772: PUSH
44773: LD_VAR 0 6
44777: ST_TO_ADDR
// for i = tmp downto 1 do
44778: LD_ADDR_VAR 0 7
44782: PUSH
44783: DOUBLE
44784: LD_VAR 0 9
44788: INC
44789: ST_TO_ADDR
44790: LD_INT 1
44792: PUSH
44793: FOR_DOWNTO
44794: IFFALSE 44839
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44796: LD_ADDR_VAR 0 6
44800: PUSH
44801: LD_VAR 0 6
44805: PPUSH
44806: LD_VAR 0 9
44810: PUSH
44811: LD_VAR 0 7
44815: MINUS
44816: PUSH
44817: LD_INT 1
44819: PLUS
44820: PPUSH
44821: LD_VAR 0 9
44825: PUSH
44826: LD_VAR 0 7
44830: ARRAY
44831: PPUSH
44832: CALL_OW 1
44836: ST_TO_ADDR
44837: GO 44793
44839: POP
44840: POP
// end ; tmp := [ ] ;
44841: LD_ADDR_VAR 0 9
44845: PUSH
44846: EMPTY
44847: ST_TO_ADDR
// if mode then
44848: LD_VAR 0 5
44852: IFFALSE 44921
// begin for i = 1 to result do
44854: LD_ADDR_VAR 0 7
44858: PUSH
44859: DOUBLE
44860: LD_INT 1
44862: DEC
44863: ST_TO_ADDR
44864: LD_VAR 0 6
44868: PUSH
44869: FOR_TO
44870: IFFALSE 44909
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44872: LD_ADDR_VAR 0 9
44876: PUSH
44877: LD_VAR 0 9
44881: PPUSH
44882: LD_VAR 0 7
44886: PPUSH
44887: LD_VAR 0 6
44891: PUSH
44892: LD_VAR 0 7
44896: ARRAY
44897: PUSH
44898: LD_INT 1
44900: ARRAY
44901: PPUSH
44902: CALL_OW 1
44906: ST_TO_ADDR
44907: GO 44869
44909: POP
44910: POP
// result := tmp ;
44911: LD_ADDR_VAR 0 6
44915: PUSH
44916: LD_VAR 0 9
44920: ST_TO_ADDR
// end ; end ;
44921: LD_VAR 0 6
44925: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44926: LD_INT 0
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44934: LD_ADDR_VAR 0 5
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// if not x or not y then
44956: LD_VAR 0 2
44960: NOT
44961: PUSH
44962: LD_VAR 0 3
44966: NOT
44967: OR
44968: IFFALSE 44972
// exit ;
44970: GO 46624
// if not range then
44972: LD_VAR 0 4
44976: NOT
44977: IFFALSE 44987
// range := 10 ;
44979: LD_ADDR_VAR 0 4
44983: PUSH
44984: LD_INT 10
44986: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44987: LD_ADDR_VAR 0 8
44991: PUSH
44992: LD_INT 81
44994: PUSH
44995: LD_VAR 0 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 92
45006: PUSH
45007: LD_VAR 0 2
45011: PUSH
45012: LD_VAR 0 3
45016: PUSH
45017: LD_VAR 0 4
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: LD_INT 21
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: PPUSH
45050: CALL_OW 69
45054: ST_TO_ADDR
// if not tmp then
45055: LD_VAR 0 8
45059: NOT
45060: IFFALSE 45064
// exit ;
45062: GO 46624
// for i in tmp do
45064: LD_ADDR_VAR 0 6
45068: PUSH
45069: LD_VAR 0 8
45073: PUSH
45074: FOR_IN
45075: IFFALSE 46599
// begin points := [ 0 , 0 , 0 ] ;
45077: LD_ADDR_VAR 0 9
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// bpoints := 1 ;
45096: LD_ADDR_VAR 0 10
45100: PUSH
45101: LD_INT 1
45103: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45104: LD_VAR 0 6
45108: PPUSH
45109: CALL_OW 247
45113: PUSH
45114: LD_INT 1
45116: DOUBLE
45117: EQUAL
45118: IFTRUE 45122
45120: GO 45700
45122: POP
// begin if GetClass ( i ) = 1 then
45123: LD_VAR 0 6
45127: PPUSH
45128: CALL_OW 257
45132: PUSH
45133: LD_INT 1
45135: EQUAL
45136: IFFALSE 45157
// points := [ 10 , 5 , 3 ] ;
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_INT 10
45145: PUSH
45146: LD_INT 5
45148: PUSH
45149: LD_INT 3
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45157: LD_VAR 0 6
45161: PPUSH
45162: CALL_OW 257
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: LD_INT 4
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: IN
45181: IFFALSE 45202
// points := [ 3 , 2 , 1 ] ;
45183: LD_ADDR_VAR 0 9
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45202: LD_VAR 0 6
45206: PPUSH
45207: CALL_OW 257
45211: PUSH
45212: LD_INT 5
45214: EQUAL
45215: IFFALSE 45236
// points := [ 130 , 5 , 2 ] ;
45217: LD_ADDR_VAR 0 9
45221: PUSH
45222: LD_INT 130
45224: PUSH
45225: LD_INT 5
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45236: LD_VAR 0 6
45240: PPUSH
45241: CALL_OW 257
45245: PUSH
45246: LD_INT 8
45248: EQUAL
45249: IFFALSE 45270
// points := [ 35 , 35 , 30 ] ;
45251: LD_ADDR_VAR 0 9
45255: PUSH
45256: LD_INT 35
45258: PUSH
45259: LD_INT 35
45261: PUSH
45262: LD_INT 30
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45270: LD_VAR 0 6
45274: PPUSH
45275: CALL_OW 257
45279: PUSH
45280: LD_INT 9
45282: EQUAL
45283: IFFALSE 45304
// points := [ 20 , 55 , 40 ] ;
45285: LD_ADDR_VAR 0 9
45289: PUSH
45290: LD_INT 20
45292: PUSH
45293: LD_INT 55
45295: PUSH
45296: LD_INT 40
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45304: LD_VAR 0 6
45308: PPUSH
45309: CALL_OW 257
45313: PUSH
45314: LD_INT 12
45316: PUSH
45317: LD_INT 16
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: IN
45324: IFFALSE 45345
// points := [ 5 , 3 , 2 ] ;
45326: LD_ADDR_VAR 0 9
45330: PUSH
45331: LD_INT 5
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45345: LD_VAR 0 6
45349: PPUSH
45350: CALL_OW 257
45354: PUSH
45355: LD_INT 17
45357: EQUAL
45358: IFFALSE 45379
// points := [ 100 , 50 , 75 ] ;
45360: LD_ADDR_VAR 0 9
45364: PUSH
45365: LD_INT 100
45367: PUSH
45368: LD_INT 50
45370: PUSH
45371: LD_INT 75
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45379: LD_VAR 0 6
45383: PPUSH
45384: CALL_OW 257
45388: PUSH
45389: LD_INT 15
45391: EQUAL
45392: IFFALSE 45413
// points := [ 10 , 5 , 3 ] ;
45394: LD_ADDR_VAR 0 9
45398: PUSH
45399: LD_INT 10
45401: PUSH
45402: LD_INT 5
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45413: LD_VAR 0 6
45417: PPUSH
45418: CALL_OW 257
45422: PUSH
45423: LD_INT 14
45425: EQUAL
45426: IFFALSE 45447
// points := [ 10 , 0 , 0 ] ;
45428: LD_ADDR_VAR 0 9
45432: PUSH
45433: LD_INT 10
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45447: LD_VAR 0 6
45451: PPUSH
45452: CALL_OW 257
45456: PUSH
45457: LD_INT 11
45459: EQUAL
45460: IFFALSE 45481
// points := [ 30 , 10 , 5 ] ;
45462: LD_ADDR_VAR 0 9
45466: PUSH
45467: LD_INT 30
45469: PUSH
45470: LD_INT 10
45472: PUSH
45473: LD_INT 5
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45481: LD_VAR 0 1
45485: PPUSH
45486: LD_INT 5
45488: PPUSH
45489: CALL_OW 321
45493: PUSH
45494: LD_INT 2
45496: EQUAL
45497: IFFALSE 45514
// bpoints := bpoints * 1.8 ;
45499: LD_ADDR_VAR 0 10
45503: PUSH
45504: LD_VAR 0 10
45508: PUSH
45509: LD_REAL  1.80000000000000E+0000
45512: MUL
45513: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45514: LD_VAR 0 6
45518: PPUSH
45519: CALL_OW 257
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: LD_INT 3
45532: PUSH
45533: LD_INT 4
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: IN
45542: PUSH
45543: LD_VAR 0 1
45547: PPUSH
45548: LD_INT 51
45550: PPUSH
45551: CALL_OW 321
45555: PUSH
45556: LD_INT 2
45558: EQUAL
45559: AND
45560: IFFALSE 45577
// bpoints := bpoints * 1.2 ;
45562: LD_ADDR_VAR 0 10
45566: PUSH
45567: LD_VAR 0 10
45571: PUSH
45572: LD_REAL  1.20000000000000E+0000
45575: MUL
45576: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45577: LD_VAR 0 6
45581: PPUSH
45582: CALL_OW 257
45586: PUSH
45587: LD_INT 5
45589: PUSH
45590: LD_INT 7
45592: PUSH
45593: LD_INT 9
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: IN
45601: PUSH
45602: LD_VAR 0 1
45606: PPUSH
45607: LD_INT 52
45609: PPUSH
45610: CALL_OW 321
45614: PUSH
45615: LD_INT 2
45617: EQUAL
45618: AND
45619: IFFALSE 45636
// bpoints := bpoints * 1.5 ;
45621: LD_ADDR_VAR 0 10
45625: PUSH
45626: LD_VAR 0 10
45630: PUSH
45631: LD_REAL  1.50000000000000E+0000
45634: MUL
45635: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45636: LD_VAR 0 1
45640: PPUSH
45641: LD_INT 66
45643: PPUSH
45644: CALL_OW 321
45648: PUSH
45649: LD_INT 2
45651: EQUAL
45652: IFFALSE 45669
// bpoints := bpoints * 1.1 ;
45654: LD_ADDR_VAR 0 10
45658: PUSH
45659: LD_VAR 0 10
45663: PUSH
45664: LD_REAL  1.10000000000000E+0000
45667: MUL
45668: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45669: LD_ADDR_VAR 0 10
45673: PUSH
45674: LD_VAR 0 10
45678: PUSH
45679: LD_VAR 0 6
45683: PPUSH
45684: LD_INT 1
45686: PPUSH
45687: CALL_OW 259
45691: PUSH
45692: LD_REAL  1.15000000000000E+0000
45695: MUL
45696: MUL
45697: ST_TO_ADDR
// end ; unit_vehicle :
45698: GO 46528
45700: LD_INT 2
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45708
45706: GO 46516
45708: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45709: LD_VAR 0 6
45713: PPUSH
45714: CALL_OW 264
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 42
45724: PUSH
45725: LD_INT 24
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: IN
45733: IFFALSE 45754
// points := [ 25 , 5 , 3 ] ;
45735: LD_ADDR_VAR 0 9
45739: PUSH
45740: LD_INT 25
45742: PUSH
45743: LD_INT 5
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45754: LD_VAR 0 6
45758: PPUSH
45759: CALL_OW 264
45763: PUSH
45764: LD_INT 4
45766: PUSH
45767: LD_INT 43
45769: PUSH
45770: LD_INT 25
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: IN
45778: IFFALSE 45799
// points := [ 40 , 15 , 5 ] ;
45780: LD_ADDR_VAR 0 9
45784: PUSH
45785: LD_INT 40
45787: PUSH
45788: LD_INT 15
45790: PUSH
45791: LD_INT 5
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45799: LD_VAR 0 6
45803: PPUSH
45804: CALL_OW 264
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: LD_INT 23
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: IN
45819: IFFALSE 45840
// points := [ 7 , 25 , 8 ] ;
45821: LD_ADDR_VAR 0 9
45825: PUSH
45826: LD_INT 7
45828: PUSH
45829: LD_INT 25
45831: PUSH
45832: LD_INT 8
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45840: LD_VAR 0 6
45844: PPUSH
45845: CALL_OW 264
45849: PUSH
45850: LD_INT 5
45852: PUSH
45853: LD_INT 27
45855: PUSH
45856: LD_INT 44
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: LIST
45863: IN
45864: IFFALSE 45885
// points := [ 14 , 50 , 16 ] ;
45866: LD_ADDR_VAR 0 9
45870: PUSH
45871: LD_INT 14
45873: PUSH
45874: LD_INT 50
45876: PUSH
45877: LD_INT 16
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45885: LD_VAR 0 6
45889: PPUSH
45890: CALL_OW 264
45894: PUSH
45895: LD_INT 6
45897: PUSH
45898: LD_INT 46
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: IN
45905: IFFALSE 45926
// points := [ 32 , 120 , 70 ] ;
45907: LD_ADDR_VAR 0 9
45911: PUSH
45912: LD_INT 32
45914: PUSH
45915: LD_INT 120
45917: PUSH
45918: LD_INT 70
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45926: LD_VAR 0 6
45930: PPUSH
45931: CALL_OW 264
45935: PUSH
45936: LD_INT 7
45938: PUSH
45939: LD_INT 28
45941: PUSH
45942: LD_INT 45
45944: PUSH
45945: LD_EXP 142
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: IN
45956: IFFALSE 45977
// points := [ 35 , 20 , 45 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 35
45965: PUSH
45966: LD_INT 20
45968: PUSH
45969: LD_INT 45
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 264
45986: PUSH
45987: LD_INT 47
45989: PUSH
45990: EMPTY
45991: LIST
45992: IN
45993: IFFALSE 46014
// points := [ 67 , 45 , 75 ] ;
45995: LD_ADDR_VAR 0 9
45999: PUSH
46000: LD_INT 67
46002: PUSH
46003: LD_INT 45
46005: PUSH
46006: LD_INT 75
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46014: LD_VAR 0 6
46018: PPUSH
46019: CALL_OW 264
46023: PUSH
46024: LD_INT 26
46026: PUSH
46027: EMPTY
46028: LIST
46029: IN
46030: IFFALSE 46051
// points := [ 120 , 30 , 80 ] ;
46032: LD_ADDR_VAR 0 9
46036: PUSH
46037: LD_INT 120
46039: PUSH
46040: LD_INT 30
46042: PUSH
46043: LD_INT 80
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46051: LD_VAR 0 6
46055: PPUSH
46056: CALL_OW 264
46060: PUSH
46061: LD_INT 22
46063: PUSH
46064: EMPTY
46065: LIST
46066: IN
46067: IFFALSE 46088
// points := [ 40 , 1 , 1 ] ;
46069: LD_ADDR_VAR 0 9
46073: PUSH
46074: LD_INT 40
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46088: LD_VAR 0 6
46092: PPUSH
46093: CALL_OW 264
46097: PUSH
46098: LD_INT 29
46100: PUSH
46101: EMPTY
46102: LIST
46103: IN
46104: IFFALSE 46125
// points := [ 70 , 200 , 400 ] ;
46106: LD_ADDR_VAR 0 9
46110: PUSH
46111: LD_INT 70
46113: PUSH
46114: LD_INT 200
46116: PUSH
46117: LD_INT 400
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46125: LD_VAR 0 6
46129: PPUSH
46130: CALL_OW 264
46134: PUSH
46135: LD_INT 14
46137: PUSH
46138: LD_INT 53
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: IN
46145: IFFALSE 46166
// points := [ 40 , 10 , 20 ] ;
46147: LD_ADDR_VAR 0 9
46151: PUSH
46152: LD_INT 40
46154: PUSH
46155: LD_INT 10
46157: PUSH
46158: LD_INT 20
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46166: LD_VAR 0 6
46170: PPUSH
46171: CALL_OW 264
46175: PUSH
46176: LD_INT 9
46178: PUSH
46179: EMPTY
46180: LIST
46181: IN
46182: IFFALSE 46203
// points := [ 5 , 70 , 20 ] ;
46184: LD_ADDR_VAR 0 9
46188: PUSH
46189: LD_INT 5
46191: PUSH
46192: LD_INT 70
46194: PUSH
46195: LD_INT 20
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46203: LD_VAR 0 6
46207: PPUSH
46208: CALL_OW 264
46212: PUSH
46213: LD_INT 10
46215: PUSH
46216: EMPTY
46217: LIST
46218: IN
46219: IFFALSE 46240
// points := [ 35 , 110 , 70 ] ;
46221: LD_ADDR_VAR 0 9
46225: PUSH
46226: LD_INT 35
46228: PUSH
46229: LD_INT 110
46231: PUSH
46232: LD_INT 70
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46240: LD_VAR 0 6
46244: PPUSH
46245: CALL_OW 265
46249: PUSH
46250: LD_INT 25
46252: EQUAL
46253: IFFALSE 46274
// points := [ 80 , 65 , 100 ] ;
46255: LD_ADDR_VAR 0 9
46259: PUSH
46260: LD_INT 80
46262: PUSH
46263: LD_INT 65
46265: PUSH
46266: LD_INT 100
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46274: LD_VAR 0 6
46278: PPUSH
46279: CALL_OW 263
46283: PUSH
46284: LD_INT 1
46286: EQUAL
46287: IFFALSE 46322
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46289: LD_ADDR_VAR 0 10
46293: PUSH
46294: LD_VAR 0 10
46298: PUSH
46299: LD_VAR 0 6
46303: PPUSH
46304: CALL_OW 311
46308: PPUSH
46309: LD_INT 3
46311: PPUSH
46312: CALL_OW 259
46316: PUSH
46317: LD_INT 4
46319: MUL
46320: MUL
46321: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46322: LD_VAR 0 6
46326: PPUSH
46327: CALL_OW 263
46331: PUSH
46332: LD_INT 2
46334: EQUAL
46335: IFFALSE 46386
// begin j := IsControledBy ( i ) ;
46337: LD_ADDR_VAR 0 7
46341: PUSH
46342: LD_VAR 0 6
46346: PPUSH
46347: CALL_OW 312
46351: ST_TO_ADDR
// if j then
46352: LD_VAR 0 7
46356: IFFALSE 46386
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46358: LD_ADDR_VAR 0 10
46362: PUSH
46363: LD_VAR 0 10
46367: PUSH
46368: LD_VAR 0 7
46372: PPUSH
46373: LD_INT 3
46375: PPUSH
46376: CALL_OW 259
46380: PUSH
46381: LD_INT 3
46383: MUL
46384: MUL
46385: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46386: LD_VAR 0 6
46390: PPUSH
46391: CALL_OW 264
46395: PUSH
46396: LD_INT 5
46398: PUSH
46399: LD_INT 6
46401: PUSH
46402: LD_INT 46
46404: PUSH
46405: LD_INT 44
46407: PUSH
46408: LD_INT 47
46410: PUSH
46411: LD_INT 45
46413: PUSH
46414: LD_INT 28
46416: PUSH
46417: LD_INT 7
46419: PUSH
46420: LD_INT 27
46422: PUSH
46423: LD_INT 29
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: IN
46438: PUSH
46439: LD_VAR 0 1
46443: PPUSH
46444: LD_INT 52
46446: PPUSH
46447: CALL_OW 321
46451: PUSH
46452: LD_INT 2
46454: EQUAL
46455: AND
46456: IFFALSE 46473
// bpoints := bpoints * 1.2 ;
46458: LD_ADDR_VAR 0 10
46462: PUSH
46463: LD_VAR 0 10
46467: PUSH
46468: LD_REAL  1.20000000000000E+0000
46471: MUL
46472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46473: LD_VAR 0 6
46477: PPUSH
46478: CALL_OW 264
46482: PUSH
46483: LD_INT 6
46485: PUSH
46486: LD_INT 46
46488: PUSH
46489: LD_INT 47
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: IN
46497: IFFALSE 46514
// bpoints := bpoints * 1.2 ;
46499: LD_ADDR_VAR 0 10
46503: PUSH
46504: LD_VAR 0 10
46508: PUSH
46509: LD_REAL  1.20000000000000E+0000
46512: MUL
46513: ST_TO_ADDR
// end ; unit_building :
46514: GO 46528
46516: LD_INT 3
46518: DOUBLE
46519: EQUAL
46520: IFTRUE 46524
46522: GO 46527
46524: POP
// ; end ;
46525: GO 46528
46527: POP
// for j = 1 to 3 do
46528: LD_ADDR_VAR 0 7
46532: PUSH
46533: DOUBLE
46534: LD_INT 1
46536: DEC
46537: ST_TO_ADDR
46538: LD_INT 3
46540: PUSH
46541: FOR_TO
46542: IFFALSE 46595
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46544: LD_ADDR_VAR 0 5
46548: PUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: LD_VAR 0 7
46558: PPUSH
46559: LD_VAR 0 5
46563: PUSH
46564: LD_VAR 0 7
46568: ARRAY
46569: PUSH
46570: LD_VAR 0 9
46574: PUSH
46575: LD_VAR 0 7
46579: ARRAY
46580: PUSH
46581: LD_VAR 0 10
46585: MUL
46586: PLUS
46587: PPUSH
46588: CALL_OW 1
46592: ST_TO_ADDR
46593: GO 46541
46595: POP
46596: POP
// end ;
46597: GO 45074
46599: POP
46600: POP
// result := Replace ( result , 4 , tmp ) ;
46601: LD_ADDR_VAR 0 5
46605: PUSH
46606: LD_VAR 0 5
46610: PPUSH
46611: LD_INT 4
46613: PPUSH
46614: LD_VAR 0 8
46618: PPUSH
46619: CALL_OW 1
46623: ST_TO_ADDR
// end ;
46624: LD_VAR 0 5
46628: RET
// export function DangerAtRange ( unit , range ) ; begin
46629: LD_INT 0
46631: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46632: LD_ADDR_VAR 0 3
46636: PUSH
46637: LD_VAR 0 1
46641: PPUSH
46642: CALL_OW 255
46646: PPUSH
46647: LD_VAR 0 1
46651: PPUSH
46652: CALL_OW 250
46656: PPUSH
46657: LD_VAR 0 1
46661: PPUSH
46662: CALL_OW 251
46666: PPUSH
46667: LD_VAR 0 2
46671: PPUSH
46672: CALL 44926 0 4
46676: ST_TO_ADDR
// end ;
46677: LD_VAR 0 3
46681: RET
// export function DangerInArea ( side , area ) ; begin
46682: LD_INT 0
46684: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46685: LD_ADDR_VAR 0 3
46689: PUSH
46690: LD_VAR 0 2
46694: PPUSH
46695: LD_INT 81
46697: PUSH
46698: LD_VAR 0 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PPUSH
46707: CALL_OW 70
46711: ST_TO_ADDR
// end ;
46712: LD_VAR 0 3
46716: RET
// export function IsExtension ( b ) ; begin
46717: LD_INT 0
46719: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46720: LD_ADDR_VAR 0 2
46724: PUSH
46725: LD_VAR 0 1
46729: PUSH
46730: LD_INT 23
46732: PUSH
46733: LD_INT 20
46735: PUSH
46736: LD_INT 22
46738: PUSH
46739: LD_INT 17
46741: PUSH
46742: LD_INT 24
46744: PUSH
46745: LD_INT 21
46747: PUSH
46748: LD_INT 19
46750: PUSH
46751: LD_INT 16
46753: PUSH
46754: LD_INT 25
46756: PUSH
46757: LD_INT 18
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: IN
46772: ST_TO_ADDR
// end ;
46773: LD_VAR 0 2
46777: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46778: LD_INT 0
46780: PPUSH
46781: PPUSH
46782: PPUSH
// result := [ ] ;
46783: LD_ADDR_VAR 0 4
46787: PUSH
46788: EMPTY
46789: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46790: LD_ADDR_VAR 0 5
46794: PUSH
46795: LD_VAR 0 2
46799: PPUSH
46800: LD_INT 21
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PPUSH
46810: CALL_OW 70
46814: ST_TO_ADDR
// if not tmp then
46815: LD_VAR 0 5
46819: NOT
46820: IFFALSE 46824
// exit ;
46822: GO 46888
// if checkLink then
46824: LD_VAR 0 3
46828: IFFALSE 46878
// begin for i in tmp do
46830: LD_ADDR_VAR 0 6
46834: PUSH
46835: LD_VAR 0 5
46839: PUSH
46840: FOR_IN
46841: IFFALSE 46876
// if GetBase ( i ) <> base then
46843: LD_VAR 0 6
46847: PPUSH
46848: CALL_OW 274
46852: PUSH
46853: LD_VAR 0 1
46857: NONEQUAL
46858: IFFALSE 46874
// ComLinkToBase ( base , i ) ;
46860: LD_VAR 0 1
46864: PPUSH
46865: LD_VAR 0 6
46869: PPUSH
46870: CALL_OW 169
46874: GO 46840
46876: POP
46877: POP
// end ; result := tmp ;
46878: LD_ADDR_VAR 0 4
46882: PUSH
46883: LD_VAR 0 5
46887: ST_TO_ADDR
// end ;
46888: LD_VAR 0 4
46892: RET
// export function ComComplete ( units , b ) ; var i ; begin
46893: LD_INT 0
46895: PPUSH
46896: PPUSH
// if not units then
46897: LD_VAR 0 1
46901: NOT
46902: IFFALSE 46906
// exit ;
46904: GO 46996
// for i in units do
46906: LD_ADDR_VAR 0 4
46910: PUSH
46911: LD_VAR 0 1
46915: PUSH
46916: FOR_IN
46917: IFFALSE 46994
// if BuildingStatus ( b ) = bs_build then
46919: LD_VAR 0 2
46923: PPUSH
46924: CALL_OW 461
46928: PUSH
46929: LD_INT 1
46931: EQUAL
46932: IFFALSE 46992
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46934: LD_VAR 0 4
46938: PPUSH
46939: LD_STRING h
46941: PUSH
46942: LD_VAR 0 2
46946: PPUSH
46947: CALL_OW 250
46951: PUSH
46952: LD_VAR 0 2
46956: PPUSH
46957: CALL_OW 251
46961: PUSH
46962: LD_VAR 0 2
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: PPUSH
46988: CALL_OW 446
46992: GO 46916
46994: POP
46995: POP
// end ;
46996: LD_VAR 0 3
47000: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47001: LD_INT 0
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47009: LD_VAR 0 1
47013: NOT
47014: PUSH
47015: LD_VAR 0 1
47019: PPUSH
47020: CALL_OW 263
47024: PUSH
47025: LD_INT 2
47027: NONEQUAL
47028: OR
47029: IFFALSE 47033
// exit ;
47031: GO 47349
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47033: LD_ADDR_VAR 0 6
47037: PUSH
47038: LD_INT 22
47040: PUSH
47041: LD_VAR 0 1
47045: PPUSH
47046: CALL_OW 255
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 30
47060: PUSH
47061: LD_INT 36
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 34
47070: PUSH
47071: LD_INT 31
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PPUSH
47087: CALL_OW 69
47091: ST_TO_ADDR
// if not tmp then
47092: LD_VAR 0 6
47096: NOT
47097: IFFALSE 47101
// exit ;
47099: GO 47349
// result := [ ] ;
47101: LD_ADDR_VAR 0 2
47105: PUSH
47106: EMPTY
47107: ST_TO_ADDR
// for i in tmp do
47108: LD_ADDR_VAR 0 3
47112: PUSH
47113: LD_VAR 0 6
47117: PUSH
47118: FOR_IN
47119: IFFALSE 47190
// begin t := UnitsInside ( i ) ;
47121: LD_ADDR_VAR 0 4
47125: PUSH
47126: LD_VAR 0 3
47130: PPUSH
47131: CALL_OW 313
47135: ST_TO_ADDR
// if t then
47136: LD_VAR 0 4
47140: IFFALSE 47188
// for j in t do
47142: LD_ADDR_VAR 0 7
47146: PUSH
47147: LD_VAR 0 4
47151: PUSH
47152: FOR_IN
47153: IFFALSE 47186
// result := Replace ( result , result + 1 , j ) ;
47155: LD_ADDR_VAR 0 2
47159: PUSH
47160: LD_VAR 0 2
47164: PPUSH
47165: LD_VAR 0 2
47169: PUSH
47170: LD_INT 1
47172: PLUS
47173: PPUSH
47174: LD_VAR 0 7
47178: PPUSH
47179: CALL_OW 1
47183: ST_TO_ADDR
47184: GO 47152
47186: POP
47187: POP
// end ;
47188: GO 47118
47190: POP
47191: POP
// if not result then
47192: LD_VAR 0 2
47196: NOT
47197: IFFALSE 47201
// exit ;
47199: GO 47349
// mech := result [ 1 ] ;
47201: LD_ADDR_VAR 0 5
47205: PUSH
47206: LD_VAR 0 2
47210: PUSH
47211: LD_INT 1
47213: ARRAY
47214: ST_TO_ADDR
// if result > 1 then
47215: LD_VAR 0 2
47219: PUSH
47220: LD_INT 1
47222: GREATER
47223: IFFALSE 47335
// begin for i = 2 to result do
47225: LD_ADDR_VAR 0 3
47229: PUSH
47230: DOUBLE
47231: LD_INT 2
47233: DEC
47234: ST_TO_ADDR
47235: LD_VAR 0 2
47239: PUSH
47240: FOR_TO
47241: IFFALSE 47333
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47243: LD_ADDR_VAR 0 4
47247: PUSH
47248: LD_VAR 0 2
47252: PUSH
47253: LD_VAR 0 3
47257: ARRAY
47258: PPUSH
47259: LD_INT 3
47261: PPUSH
47262: CALL_OW 259
47266: PUSH
47267: LD_VAR 0 2
47271: PUSH
47272: LD_VAR 0 3
47276: ARRAY
47277: PPUSH
47278: CALL_OW 432
47282: MINUS
47283: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47284: LD_VAR 0 4
47288: PUSH
47289: LD_VAR 0 5
47293: PPUSH
47294: LD_INT 3
47296: PPUSH
47297: CALL_OW 259
47301: PUSH
47302: LD_VAR 0 5
47306: PPUSH
47307: CALL_OW 432
47311: MINUS
47312: GREATEREQUAL
47313: IFFALSE 47331
// mech := result [ i ] ;
47315: LD_ADDR_VAR 0 5
47319: PUSH
47320: LD_VAR 0 2
47324: PUSH
47325: LD_VAR 0 3
47329: ARRAY
47330: ST_TO_ADDR
// end ;
47331: GO 47240
47333: POP
47334: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47335: LD_VAR 0 1
47339: PPUSH
47340: LD_VAR 0 5
47344: PPUSH
47345: CALL_OW 135
// end ;
47349: LD_VAR 0 2
47353: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47354: LD_INT 0
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
// result := [ ] ;
47369: LD_ADDR_VAR 0 7
47373: PUSH
47374: EMPTY
47375: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47376: LD_VAR 0 1
47380: PPUSH
47381: CALL_OW 266
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: IN
47396: NOT
47397: IFFALSE 47401
// exit ;
47399: GO 49035
// if name then
47401: LD_VAR 0 3
47405: IFFALSE 47421
// SetBName ( base_dep , name ) ;
47407: LD_VAR 0 1
47411: PPUSH
47412: LD_VAR 0 3
47416: PPUSH
47417: CALL_OW 500
// base := GetBase ( base_dep ) ;
47421: LD_ADDR_VAR 0 15
47425: PUSH
47426: LD_VAR 0 1
47430: PPUSH
47431: CALL_OW 274
47435: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47436: LD_ADDR_VAR 0 16
47440: PUSH
47441: LD_VAR 0 1
47445: PPUSH
47446: CALL_OW 255
47450: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47451: LD_ADDR_VAR 0 17
47455: PUSH
47456: LD_VAR 0 1
47460: PPUSH
47461: CALL_OW 248
47465: ST_TO_ADDR
// if sources then
47466: LD_VAR 0 5
47470: IFFALSE 47517
// for i = 1 to 3 do
47472: LD_ADDR_VAR 0 8
47476: PUSH
47477: DOUBLE
47478: LD_INT 1
47480: DEC
47481: ST_TO_ADDR
47482: LD_INT 3
47484: PUSH
47485: FOR_TO
47486: IFFALSE 47515
// AddResourceType ( base , i , sources [ i ] ) ;
47488: LD_VAR 0 15
47492: PPUSH
47493: LD_VAR 0 8
47497: PPUSH
47498: LD_VAR 0 5
47502: PUSH
47503: LD_VAR 0 8
47507: ARRAY
47508: PPUSH
47509: CALL_OW 276
47513: GO 47485
47515: POP
47516: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47517: LD_ADDR_VAR 0 18
47521: PUSH
47522: LD_VAR 0 15
47526: PPUSH
47527: LD_VAR 0 2
47531: PPUSH
47532: LD_INT 1
47534: PPUSH
47535: CALL 46778 0 3
47539: ST_TO_ADDR
// InitHc ;
47540: CALL_OW 19
// InitUc ;
47544: CALL_OW 18
// uc_side := side ;
47548: LD_ADDR_OWVAR 20
47552: PUSH
47553: LD_VAR 0 16
47557: ST_TO_ADDR
// uc_nation := nation ;
47558: LD_ADDR_OWVAR 21
47562: PUSH
47563: LD_VAR 0 17
47567: ST_TO_ADDR
// if buildings then
47568: LD_VAR 0 18
47572: IFFALSE 48894
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47574: LD_ADDR_VAR 0 19
47578: PUSH
47579: LD_VAR 0 18
47583: PPUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 30
47589: PUSH
47590: LD_INT 29
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 30
47599: PUSH
47600: LD_INT 30
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: LIST
47611: PPUSH
47612: CALL_OW 72
47616: ST_TO_ADDR
// if tmp then
47617: LD_VAR 0 19
47621: IFFALSE 47669
// for i in tmp do
47623: LD_ADDR_VAR 0 8
47627: PUSH
47628: LD_VAR 0 19
47632: PUSH
47633: FOR_IN
47634: IFFALSE 47667
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47636: LD_VAR 0 8
47640: PPUSH
47641: CALL_OW 250
47645: PPUSH
47646: LD_VAR 0 8
47650: PPUSH
47651: CALL_OW 251
47655: PPUSH
47656: LD_VAR 0 16
47660: PPUSH
47661: CALL_OW 441
47665: GO 47633
47667: POP
47668: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47669: LD_VAR 0 18
47673: PPUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 30
47679: PUSH
47680: LD_INT 32
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 30
47689: PUSH
47690: LD_INT 33
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: PPUSH
47702: CALL_OW 72
47706: IFFALSE 47794
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47708: LD_ADDR_VAR 0 8
47712: PUSH
47713: LD_VAR 0 18
47717: PPUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 30
47723: PUSH
47724: LD_INT 32
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 30
47733: PUSH
47734: LD_INT 33
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: PPUSH
47746: CALL_OW 72
47750: PUSH
47751: FOR_IN
47752: IFFALSE 47792
// begin if not GetBWeapon ( i ) then
47754: LD_VAR 0 8
47758: PPUSH
47759: CALL_OW 269
47763: NOT
47764: IFFALSE 47790
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47766: LD_VAR 0 8
47770: PPUSH
47771: LD_VAR 0 8
47775: PPUSH
47776: LD_VAR 0 2
47780: PPUSH
47781: CALL 49040 0 2
47785: PPUSH
47786: CALL_OW 431
// end ;
47790: GO 47751
47792: POP
47793: POP
// end ; for i = 1 to personel do
47794: LD_ADDR_VAR 0 8
47798: PUSH
47799: DOUBLE
47800: LD_INT 1
47802: DEC
47803: ST_TO_ADDR
47804: LD_VAR 0 6
47808: PUSH
47809: FOR_TO
47810: IFFALSE 48874
// begin if i > 4 then
47812: LD_VAR 0 8
47816: PUSH
47817: LD_INT 4
47819: GREATER
47820: IFFALSE 47824
// break ;
47822: GO 48874
// case i of 1 :
47824: LD_VAR 0 8
47828: PUSH
47829: LD_INT 1
47831: DOUBLE
47832: EQUAL
47833: IFTRUE 47837
47835: GO 47917
47837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47838: LD_ADDR_VAR 0 12
47842: PUSH
47843: LD_VAR 0 18
47847: PPUSH
47848: LD_INT 22
47850: PUSH
47851: LD_VAR 0 16
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 58
47862: PUSH
47863: EMPTY
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: LD_INT 30
47871: PUSH
47872: LD_INT 32
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 30
47881: PUSH
47882: LD_INT 4
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 30
47891: PUSH
47892: LD_INT 5
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: PPUSH
47910: CALL_OW 72
47914: ST_TO_ADDR
47915: GO 48139
47917: LD_INT 2
47919: DOUBLE
47920: EQUAL
47921: IFTRUE 47925
47923: GO 47987
47925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47926: LD_ADDR_VAR 0 12
47930: PUSH
47931: LD_VAR 0 18
47935: PPUSH
47936: LD_INT 22
47938: PUSH
47939: LD_VAR 0 16
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 30
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 30
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PPUSH
47980: CALL_OW 72
47984: ST_TO_ADDR
47985: GO 48139
47987: LD_INT 3
47989: DOUBLE
47990: EQUAL
47991: IFTRUE 47995
47993: GO 48057
47995: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47996: LD_ADDR_VAR 0 12
48000: PUSH
48001: LD_VAR 0 18
48005: PPUSH
48006: LD_INT 22
48008: PUSH
48009: LD_VAR 0 16
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 30
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 30
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PPUSH
48050: CALL_OW 72
48054: ST_TO_ADDR
48055: GO 48139
48057: LD_INT 4
48059: DOUBLE
48060: EQUAL
48061: IFTRUE 48065
48063: GO 48138
48065: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48066: LD_ADDR_VAR 0 12
48070: PUSH
48071: LD_VAR 0 18
48075: PPUSH
48076: LD_INT 22
48078: PUSH
48079: LD_VAR 0 16
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 30
48093: PUSH
48094: LD_INT 6
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 30
48103: PUSH
48104: LD_INT 7
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 30
48113: PUSH
48114: LD_INT 8
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PPUSH
48131: CALL_OW 72
48135: ST_TO_ADDR
48136: GO 48139
48138: POP
// if i = 1 then
48139: LD_VAR 0 8
48143: PUSH
48144: LD_INT 1
48146: EQUAL
48147: IFFALSE 48258
// begin tmp := [ ] ;
48149: LD_ADDR_VAR 0 19
48153: PUSH
48154: EMPTY
48155: ST_TO_ADDR
// for j in f do
48156: LD_ADDR_VAR 0 9
48160: PUSH
48161: LD_VAR 0 12
48165: PUSH
48166: FOR_IN
48167: IFFALSE 48240
// if GetBType ( j ) = b_bunker then
48169: LD_VAR 0 9
48173: PPUSH
48174: CALL_OW 266
48178: PUSH
48179: LD_INT 32
48181: EQUAL
48182: IFFALSE 48209
// tmp := Insert ( tmp , 1 , j ) else
48184: LD_ADDR_VAR 0 19
48188: PUSH
48189: LD_VAR 0 19
48193: PPUSH
48194: LD_INT 1
48196: PPUSH
48197: LD_VAR 0 9
48201: PPUSH
48202: CALL_OW 2
48206: ST_TO_ADDR
48207: GO 48238
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48209: LD_ADDR_VAR 0 19
48213: PUSH
48214: LD_VAR 0 19
48218: PPUSH
48219: LD_VAR 0 19
48223: PUSH
48224: LD_INT 1
48226: PLUS
48227: PPUSH
48228: LD_VAR 0 9
48232: PPUSH
48233: CALL_OW 2
48237: ST_TO_ADDR
48238: GO 48166
48240: POP
48241: POP
// if tmp then
48242: LD_VAR 0 19
48246: IFFALSE 48258
// f := tmp ;
48248: LD_ADDR_VAR 0 12
48252: PUSH
48253: LD_VAR 0 19
48257: ST_TO_ADDR
// end ; x := personel [ i ] ;
48258: LD_ADDR_VAR 0 13
48262: PUSH
48263: LD_VAR 0 6
48267: PUSH
48268: LD_VAR 0 8
48272: ARRAY
48273: ST_TO_ADDR
// if x = - 1 then
48274: LD_VAR 0 13
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: EQUAL
48283: IFFALSE 48492
// begin for j in f do
48285: LD_ADDR_VAR 0 9
48289: PUSH
48290: LD_VAR 0 12
48294: PUSH
48295: FOR_IN
48296: IFFALSE 48488
// repeat InitHc ;
48298: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48302: LD_VAR 0 9
48306: PPUSH
48307: CALL_OW 266
48311: PUSH
48312: LD_INT 5
48314: EQUAL
48315: IFFALSE 48385
// begin if UnitsInside ( j ) < 3 then
48317: LD_VAR 0 9
48321: PPUSH
48322: CALL_OW 313
48326: PUSH
48327: LD_INT 3
48329: LESS
48330: IFFALSE 48366
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48332: LD_INT 0
48334: PPUSH
48335: LD_INT 5
48337: PUSH
48338: LD_INT 8
48340: PUSH
48341: LD_INT 9
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: PUSH
48349: LD_VAR 0 17
48353: ARRAY
48354: PPUSH
48355: LD_VAR 0 4
48359: PPUSH
48360: CALL_OW 380
48364: GO 48383
// PrepareHuman ( false , i , skill ) ;
48366: LD_INT 0
48368: PPUSH
48369: LD_VAR 0 8
48373: PPUSH
48374: LD_VAR 0 4
48378: PPUSH
48379: CALL_OW 380
// end else
48383: GO 48402
// PrepareHuman ( false , i , skill ) ;
48385: LD_INT 0
48387: PPUSH
48388: LD_VAR 0 8
48392: PPUSH
48393: LD_VAR 0 4
48397: PPUSH
48398: CALL_OW 380
// un := CreateHuman ;
48402: LD_ADDR_VAR 0 14
48406: PUSH
48407: CALL_OW 44
48411: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48412: LD_ADDR_VAR 0 7
48416: PUSH
48417: LD_VAR 0 7
48421: PPUSH
48422: LD_INT 1
48424: PPUSH
48425: LD_VAR 0 14
48429: PPUSH
48430: CALL_OW 2
48434: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48435: LD_VAR 0 14
48439: PPUSH
48440: LD_VAR 0 9
48444: PPUSH
48445: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48449: LD_VAR 0 9
48453: PPUSH
48454: CALL_OW 313
48458: PUSH
48459: LD_INT 6
48461: EQUAL
48462: PUSH
48463: LD_VAR 0 9
48467: PPUSH
48468: CALL_OW 266
48472: PUSH
48473: LD_INT 32
48475: PUSH
48476: LD_INT 31
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: IN
48483: OR
48484: IFFALSE 48298
48486: GO 48295
48488: POP
48489: POP
// end else
48490: GO 48872
// for j = 1 to x do
48492: LD_ADDR_VAR 0 9
48496: PUSH
48497: DOUBLE
48498: LD_INT 1
48500: DEC
48501: ST_TO_ADDR
48502: LD_VAR 0 13
48506: PUSH
48507: FOR_TO
48508: IFFALSE 48870
// begin InitHc ;
48510: CALL_OW 19
// if not f then
48514: LD_VAR 0 12
48518: NOT
48519: IFFALSE 48608
// begin PrepareHuman ( false , i , skill ) ;
48521: LD_INT 0
48523: PPUSH
48524: LD_VAR 0 8
48528: PPUSH
48529: LD_VAR 0 4
48533: PPUSH
48534: CALL_OW 380
// un := CreateHuman ;
48538: LD_ADDR_VAR 0 14
48542: PUSH
48543: CALL_OW 44
48547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48548: LD_ADDR_VAR 0 7
48552: PUSH
48553: LD_VAR 0 7
48557: PPUSH
48558: LD_INT 1
48560: PPUSH
48561: LD_VAR 0 14
48565: PPUSH
48566: CALL_OW 2
48570: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48571: LD_VAR 0 14
48575: PPUSH
48576: LD_VAR 0 1
48580: PPUSH
48581: CALL_OW 250
48585: PPUSH
48586: LD_VAR 0 1
48590: PPUSH
48591: CALL_OW 251
48595: PPUSH
48596: LD_INT 10
48598: PPUSH
48599: LD_INT 0
48601: PPUSH
48602: CALL_OW 50
// continue ;
48606: GO 48507
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48608: LD_VAR 0 12
48612: PUSH
48613: LD_INT 1
48615: ARRAY
48616: PPUSH
48617: CALL_OW 313
48621: PUSH
48622: LD_VAR 0 12
48626: PUSH
48627: LD_INT 1
48629: ARRAY
48630: PPUSH
48631: CALL_OW 266
48635: PUSH
48636: LD_INT 32
48638: PUSH
48639: LD_INT 31
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: IN
48646: AND
48647: PUSH
48648: LD_VAR 0 12
48652: PUSH
48653: LD_INT 1
48655: ARRAY
48656: PPUSH
48657: CALL_OW 313
48661: PUSH
48662: LD_INT 6
48664: EQUAL
48665: OR
48666: IFFALSE 48686
// f := Delete ( f , 1 ) ;
48668: LD_ADDR_VAR 0 12
48672: PUSH
48673: LD_VAR 0 12
48677: PPUSH
48678: LD_INT 1
48680: PPUSH
48681: CALL_OW 3
48685: ST_TO_ADDR
// if not f then
48686: LD_VAR 0 12
48690: NOT
48691: IFFALSE 48709
// begin x := x + 2 ;
48693: LD_ADDR_VAR 0 13
48697: PUSH
48698: LD_VAR 0 13
48702: PUSH
48703: LD_INT 2
48705: PLUS
48706: ST_TO_ADDR
// continue ;
48707: GO 48507
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48709: LD_VAR 0 12
48713: PUSH
48714: LD_INT 1
48716: ARRAY
48717: PPUSH
48718: CALL_OW 266
48722: PUSH
48723: LD_INT 5
48725: EQUAL
48726: IFFALSE 48800
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48728: LD_VAR 0 12
48732: PUSH
48733: LD_INT 1
48735: ARRAY
48736: PPUSH
48737: CALL_OW 313
48741: PUSH
48742: LD_INT 3
48744: LESS
48745: IFFALSE 48781
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48747: LD_INT 0
48749: PPUSH
48750: LD_INT 5
48752: PUSH
48753: LD_INT 8
48755: PUSH
48756: LD_INT 9
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: PUSH
48764: LD_VAR 0 17
48768: ARRAY
48769: PPUSH
48770: LD_VAR 0 4
48774: PPUSH
48775: CALL_OW 380
48779: GO 48798
// PrepareHuman ( false , i , skill ) ;
48781: LD_INT 0
48783: PPUSH
48784: LD_VAR 0 8
48788: PPUSH
48789: LD_VAR 0 4
48793: PPUSH
48794: CALL_OW 380
// end else
48798: GO 48817
// PrepareHuman ( false , i , skill ) ;
48800: LD_INT 0
48802: PPUSH
48803: LD_VAR 0 8
48807: PPUSH
48808: LD_VAR 0 4
48812: PPUSH
48813: CALL_OW 380
// un := CreateHuman ;
48817: LD_ADDR_VAR 0 14
48821: PUSH
48822: CALL_OW 44
48826: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48827: LD_ADDR_VAR 0 7
48831: PUSH
48832: LD_VAR 0 7
48836: PPUSH
48837: LD_INT 1
48839: PPUSH
48840: LD_VAR 0 14
48844: PPUSH
48845: CALL_OW 2
48849: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48850: LD_VAR 0 14
48854: PPUSH
48855: LD_VAR 0 12
48859: PUSH
48860: LD_INT 1
48862: ARRAY
48863: PPUSH
48864: CALL_OW 52
// end ;
48868: GO 48507
48870: POP
48871: POP
// end ;
48872: GO 47809
48874: POP
48875: POP
// result := result ^ buildings ;
48876: LD_ADDR_VAR 0 7
48880: PUSH
48881: LD_VAR 0 7
48885: PUSH
48886: LD_VAR 0 18
48890: ADD
48891: ST_TO_ADDR
// end else
48892: GO 49035
// begin for i = 1 to personel do
48894: LD_ADDR_VAR 0 8
48898: PUSH
48899: DOUBLE
48900: LD_INT 1
48902: DEC
48903: ST_TO_ADDR
48904: LD_VAR 0 6
48908: PUSH
48909: FOR_TO
48910: IFFALSE 49033
// begin if i > 4 then
48912: LD_VAR 0 8
48916: PUSH
48917: LD_INT 4
48919: GREATER
48920: IFFALSE 48924
// break ;
48922: GO 49033
// x := personel [ i ] ;
48924: LD_ADDR_VAR 0 13
48928: PUSH
48929: LD_VAR 0 6
48933: PUSH
48934: LD_VAR 0 8
48938: ARRAY
48939: ST_TO_ADDR
// if x = - 1 then
48940: LD_VAR 0 13
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: EQUAL
48949: IFFALSE 48953
// continue ;
48951: GO 48909
// PrepareHuman ( false , i , skill ) ;
48953: LD_INT 0
48955: PPUSH
48956: LD_VAR 0 8
48960: PPUSH
48961: LD_VAR 0 4
48965: PPUSH
48966: CALL_OW 380
// un := CreateHuman ;
48970: LD_ADDR_VAR 0 14
48974: PUSH
48975: CALL_OW 44
48979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48980: LD_VAR 0 14
48984: PPUSH
48985: LD_VAR 0 1
48989: PPUSH
48990: CALL_OW 250
48994: PPUSH
48995: LD_VAR 0 1
48999: PPUSH
49000: CALL_OW 251
49004: PPUSH
49005: LD_INT 10
49007: PPUSH
49008: LD_INT 0
49010: PPUSH
49011: CALL_OW 50
// result := result ^ un ;
49015: LD_ADDR_VAR 0 7
49019: PUSH
49020: LD_VAR 0 7
49024: PUSH
49025: LD_VAR 0 14
49029: ADD
49030: ST_TO_ADDR
// end ;
49031: GO 48909
49033: POP
49034: POP
// end ; end ;
49035: LD_VAR 0 7
49039: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49040: LD_INT 0
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
// result := false ;
49058: LD_ADDR_VAR 0 3
49062: PUSH
49063: LD_INT 0
49065: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49066: LD_VAR 0 1
49070: NOT
49071: PUSH
49072: LD_VAR 0 1
49076: PPUSH
49077: CALL_OW 266
49081: PUSH
49082: LD_INT 32
49084: PUSH
49085: LD_INT 33
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: IN
49092: NOT
49093: OR
49094: IFFALSE 49098
// exit ;
49096: GO 50207
// nat := GetNation ( tower ) ;
49098: LD_ADDR_VAR 0 12
49102: PUSH
49103: LD_VAR 0 1
49107: PPUSH
49108: CALL_OW 248
49112: ST_TO_ADDR
// side := GetSide ( tower ) ;
49113: LD_ADDR_VAR 0 16
49117: PUSH
49118: LD_VAR 0 1
49122: PPUSH
49123: CALL_OW 255
49127: ST_TO_ADDR
// x := GetX ( tower ) ;
49128: LD_ADDR_VAR 0 10
49132: PUSH
49133: LD_VAR 0 1
49137: PPUSH
49138: CALL_OW 250
49142: ST_TO_ADDR
// y := GetY ( tower ) ;
49143: LD_ADDR_VAR 0 11
49147: PUSH
49148: LD_VAR 0 1
49152: PPUSH
49153: CALL_OW 251
49157: ST_TO_ADDR
// if not x or not y then
49158: LD_VAR 0 10
49162: NOT
49163: PUSH
49164: LD_VAR 0 11
49168: NOT
49169: OR
49170: IFFALSE 49174
// exit ;
49172: GO 50207
// weapon := 0 ;
49174: LD_ADDR_VAR 0 18
49178: PUSH
49179: LD_INT 0
49181: ST_TO_ADDR
// fac_list := [ ] ;
49182: LD_ADDR_VAR 0 17
49186: PUSH
49187: EMPTY
49188: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49189: LD_ADDR_VAR 0 6
49193: PUSH
49194: LD_VAR 0 1
49198: PPUSH
49199: CALL_OW 274
49203: PPUSH
49204: LD_VAR 0 2
49208: PPUSH
49209: LD_INT 0
49211: PPUSH
49212: CALL 46778 0 3
49216: PPUSH
49217: LD_INT 30
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PPUSH
49227: CALL_OW 72
49231: ST_TO_ADDR
// if not factories then
49232: LD_VAR 0 6
49236: NOT
49237: IFFALSE 49241
// exit ;
49239: GO 50207
// for i in factories do
49241: LD_ADDR_VAR 0 8
49245: PUSH
49246: LD_VAR 0 6
49250: PUSH
49251: FOR_IN
49252: IFFALSE 49277
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49254: LD_ADDR_VAR 0 17
49258: PUSH
49259: LD_VAR 0 17
49263: PUSH
49264: LD_VAR 0 8
49268: PPUSH
49269: CALL_OW 478
49273: UNION
49274: ST_TO_ADDR
49275: GO 49251
49277: POP
49278: POP
// if not fac_list then
49279: LD_VAR 0 17
49283: NOT
49284: IFFALSE 49288
// exit ;
49286: GO 50207
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49288: LD_ADDR_VAR 0 5
49292: PUSH
49293: LD_INT 4
49295: PUSH
49296: LD_INT 5
49298: PUSH
49299: LD_INT 9
49301: PUSH
49302: LD_INT 10
49304: PUSH
49305: LD_INT 6
49307: PUSH
49308: LD_INT 7
49310: PUSH
49311: LD_INT 11
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 27
49325: PUSH
49326: LD_INT 28
49328: PUSH
49329: LD_INT 26
49331: PUSH
49332: LD_INT 30
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 43
49343: PUSH
49344: LD_INT 44
49346: PUSH
49347: LD_INT 46
49349: PUSH
49350: LD_INT 45
49352: PUSH
49353: LD_INT 47
49355: PUSH
49356: LD_INT 49
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: PUSH
49372: LD_VAR 0 12
49376: ARRAY
49377: ST_TO_ADDR
// list := list isect fac_list ;
49378: LD_ADDR_VAR 0 5
49382: PUSH
49383: LD_VAR 0 5
49387: PUSH
49388: LD_VAR 0 17
49392: ISECT
49393: ST_TO_ADDR
// if not list then
49394: LD_VAR 0 5
49398: NOT
49399: IFFALSE 49403
// exit ;
49401: GO 50207
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49403: LD_VAR 0 12
49407: PUSH
49408: LD_INT 3
49410: EQUAL
49411: PUSH
49412: LD_INT 49
49414: PUSH
49415: LD_VAR 0 5
49419: IN
49420: AND
49421: PUSH
49422: LD_INT 31
49424: PPUSH
49425: LD_VAR 0 16
49429: PPUSH
49430: CALL_OW 321
49434: PUSH
49435: LD_INT 2
49437: EQUAL
49438: AND
49439: IFFALSE 49499
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49441: LD_INT 22
49443: PUSH
49444: LD_VAR 0 16
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 35
49455: PUSH
49456: LD_INT 49
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 91
49465: PUSH
49466: LD_VAR 0 1
49470: PUSH
49471: LD_INT 10
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: LIST
49483: PPUSH
49484: CALL_OW 69
49488: NOT
49489: IFFALSE 49499
// weapon := ru_time_lapser ;
49491: LD_ADDR_VAR 0 18
49495: PUSH
49496: LD_INT 49
49498: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49499: LD_VAR 0 12
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: IN
49514: PUSH
49515: LD_INT 11
49517: PUSH
49518: LD_VAR 0 5
49522: IN
49523: PUSH
49524: LD_INT 30
49526: PUSH
49527: LD_VAR 0 5
49531: IN
49532: OR
49533: AND
49534: PUSH
49535: LD_INT 6
49537: PPUSH
49538: LD_VAR 0 16
49542: PPUSH
49543: CALL_OW 321
49547: PUSH
49548: LD_INT 2
49550: EQUAL
49551: AND
49552: IFFALSE 49717
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49554: LD_INT 22
49556: PUSH
49557: LD_VAR 0 16
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 35
49571: PUSH
49572: LD_INT 11
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 35
49581: PUSH
49582: LD_INT 30
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 91
49596: PUSH
49597: LD_VAR 0 1
49601: PUSH
49602: LD_INT 18
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: PPUSH
49615: CALL_OW 69
49619: NOT
49620: PUSH
49621: LD_INT 22
49623: PUSH
49624: LD_VAR 0 16
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 30
49638: PUSH
49639: LD_INT 32
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 30
49648: PUSH
49649: LD_INT 33
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 91
49663: PUSH
49664: LD_VAR 0 1
49668: PUSH
49669: LD_INT 12
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: PPUSH
49685: CALL_OW 69
49689: PUSH
49690: LD_INT 2
49692: GREATER
49693: AND
49694: IFFALSE 49717
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49696: LD_ADDR_VAR 0 18
49700: PUSH
49701: LD_INT 11
49703: PUSH
49704: LD_INT 30
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_VAR 0 12
49715: ARRAY
49716: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49717: LD_VAR 0 18
49721: NOT
49722: PUSH
49723: LD_INT 40
49725: PPUSH
49726: LD_VAR 0 16
49730: PPUSH
49731: CALL_OW 321
49735: PUSH
49736: LD_INT 2
49738: EQUAL
49739: AND
49740: PUSH
49741: LD_INT 7
49743: PUSH
49744: LD_VAR 0 5
49748: IN
49749: PUSH
49750: LD_INT 28
49752: PUSH
49753: LD_VAR 0 5
49757: IN
49758: OR
49759: PUSH
49760: LD_INT 45
49762: PUSH
49763: LD_VAR 0 5
49767: IN
49768: OR
49769: AND
49770: IFFALSE 50024
// begin hex := GetHexInfo ( x , y ) ;
49772: LD_ADDR_VAR 0 4
49776: PUSH
49777: LD_VAR 0 10
49781: PPUSH
49782: LD_VAR 0 11
49786: PPUSH
49787: CALL_OW 546
49791: ST_TO_ADDR
// if hex [ 1 ] then
49792: LD_VAR 0 4
49796: PUSH
49797: LD_INT 1
49799: ARRAY
49800: IFFALSE 49804
// exit ;
49802: GO 50207
// height := hex [ 2 ] ;
49804: LD_ADDR_VAR 0 15
49808: PUSH
49809: LD_VAR 0 4
49813: PUSH
49814: LD_INT 2
49816: ARRAY
49817: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49818: LD_ADDR_VAR 0 14
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 5
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: ST_TO_ADDR
// for i in tmp do
49841: LD_ADDR_VAR 0 8
49845: PUSH
49846: LD_VAR 0 14
49850: PUSH
49851: FOR_IN
49852: IFFALSE 50022
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49854: LD_ADDR_VAR 0 9
49858: PUSH
49859: LD_VAR 0 10
49863: PPUSH
49864: LD_VAR 0 8
49868: PPUSH
49869: LD_INT 5
49871: PPUSH
49872: CALL_OW 272
49876: PUSH
49877: LD_VAR 0 11
49881: PPUSH
49882: LD_VAR 0 8
49886: PPUSH
49887: LD_INT 5
49889: PPUSH
49890: CALL_OW 273
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49899: LD_VAR 0 9
49903: PUSH
49904: LD_INT 1
49906: ARRAY
49907: PPUSH
49908: LD_VAR 0 9
49912: PUSH
49913: LD_INT 2
49915: ARRAY
49916: PPUSH
49917: CALL_OW 488
49921: IFFALSE 50020
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49923: LD_ADDR_VAR 0 4
49927: PUSH
49928: LD_VAR 0 9
49932: PUSH
49933: LD_INT 1
49935: ARRAY
49936: PPUSH
49937: LD_VAR 0 9
49941: PUSH
49942: LD_INT 2
49944: ARRAY
49945: PPUSH
49946: CALL_OW 546
49950: ST_TO_ADDR
// if hex [ 1 ] then
49951: LD_VAR 0 4
49955: PUSH
49956: LD_INT 1
49958: ARRAY
49959: IFFALSE 49963
// continue ;
49961: GO 49851
// h := hex [ 2 ] ;
49963: LD_ADDR_VAR 0 13
49967: PUSH
49968: LD_VAR 0 4
49972: PUSH
49973: LD_INT 2
49975: ARRAY
49976: ST_TO_ADDR
// if h + 7 < height then
49977: LD_VAR 0 13
49981: PUSH
49982: LD_INT 7
49984: PLUS
49985: PUSH
49986: LD_VAR 0 15
49990: LESS
49991: IFFALSE 50020
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49993: LD_ADDR_VAR 0 18
49997: PUSH
49998: LD_INT 7
50000: PUSH
50001: LD_INT 28
50003: PUSH
50004: LD_INT 45
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: PUSH
50012: LD_VAR 0 12
50016: ARRAY
50017: ST_TO_ADDR
// break ;
50018: GO 50022
// end ; end ; end ;
50020: GO 49851
50022: POP
50023: POP
// end ; if not weapon then
50024: LD_VAR 0 18
50028: NOT
50029: IFFALSE 50089
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50031: LD_ADDR_VAR 0 5
50035: PUSH
50036: LD_VAR 0 5
50040: PUSH
50041: LD_INT 11
50043: PUSH
50044: LD_INT 30
50046: PUSH
50047: LD_INT 49
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: DIFF
50055: ST_TO_ADDR
// if not list then
50056: LD_VAR 0 5
50060: NOT
50061: IFFALSE 50065
// exit ;
50063: GO 50207
// weapon := list [ rand ( 1 , list ) ] ;
50065: LD_ADDR_VAR 0 18
50069: PUSH
50070: LD_VAR 0 5
50074: PUSH
50075: LD_INT 1
50077: PPUSH
50078: LD_VAR 0 5
50082: PPUSH
50083: CALL_OW 12
50087: ARRAY
50088: ST_TO_ADDR
// end ; if weapon then
50089: LD_VAR 0 18
50093: IFFALSE 50207
// begin tmp := CostOfWeapon ( weapon ) ;
50095: LD_ADDR_VAR 0 14
50099: PUSH
50100: LD_VAR 0 18
50104: PPUSH
50105: CALL_OW 451
50109: ST_TO_ADDR
// j := GetBase ( tower ) ;
50110: LD_ADDR_VAR 0 9
50114: PUSH
50115: LD_VAR 0 1
50119: PPUSH
50120: CALL_OW 274
50124: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50125: LD_VAR 0 9
50129: PPUSH
50130: LD_INT 1
50132: PPUSH
50133: CALL_OW 275
50137: PUSH
50138: LD_VAR 0 14
50142: PUSH
50143: LD_INT 1
50145: ARRAY
50146: GREATEREQUAL
50147: PUSH
50148: LD_VAR 0 9
50152: PPUSH
50153: LD_INT 2
50155: PPUSH
50156: CALL_OW 275
50160: PUSH
50161: LD_VAR 0 14
50165: PUSH
50166: LD_INT 2
50168: ARRAY
50169: GREATEREQUAL
50170: AND
50171: PUSH
50172: LD_VAR 0 9
50176: PPUSH
50177: LD_INT 3
50179: PPUSH
50180: CALL_OW 275
50184: PUSH
50185: LD_VAR 0 14
50189: PUSH
50190: LD_INT 3
50192: ARRAY
50193: GREATEREQUAL
50194: AND
50195: IFFALSE 50207
// result := weapon ;
50197: LD_ADDR_VAR 0 3
50201: PUSH
50202: LD_VAR 0 18
50206: ST_TO_ADDR
// end ; end ;
50207: LD_VAR 0 3
50211: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50212: LD_INT 0
50214: PPUSH
50215: PPUSH
// result := true ;
50216: LD_ADDR_VAR 0 3
50220: PUSH
50221: LD_INT 1
50223: ST_TO_ADDR
// if array1 = array2 then
50224: LD_VAR 0 1
50228: PUSH
50229: LD_VAR 0 2
50233: EQUAL
50234: IFFALSE 50294
// begin for i = 1 to array1 do
50236: LD_ADDR_VAR 0 4
50240: PUSH
50241: DOUBLE
50242: LD_INT 1
50244: DEC
50245: ST_TO_ADDR
50246: LD_VAR 0 1
50250: PUSH
50251: FOR_TO
50252: IFFALSE 50290
// if array1 [ i ] <> array2 [ i ] then
50254: LD_VAR 0 1
50258: PUSH
50259: LD_VAR 0 4
50263: ARRAY
50264: PUSH
50265: LD_VAR 0 2
50269: PUSH
50270: LD_VAR 0 4
50274: ARRAY
50275: NONEQUAL
50276: IFFALSE 50288
// begin result := false ;
50278: LD_ADDR_VAR 0 3
50282: PUSH
50283: LD_INT 0
50285: ST_TO_ADDR
// break ;
50286: GO 50290
// end ;
50288: GO 50251
50290: POP
50291: POP
// end else
50292: GO 50302
// result := false ;
50294: LD_ADDR_VAR 0 3
50298: PUSH
50299: LD_INT 0
50301: ST_TO_ADDR
// end ;
50302: LD_VAR 0 3
50306: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50307: LD_INT 0
50309: PPUSH
50310: PPUSH
// if not array1 or not array2 then
50311: LD_VAR 0 1
50315: NOT
50316: PUSH
50317: LD_VAR 0 2
50321: NOT
50322: OR
50323: IFFALSE 50327
// exit ;
50325: GO 50391
// result := true ;
50327: LD_ADDR_VAR 0 3
50331: PUSH
50332: LD_INT 1
50334: ST_TO_ADDR
// for i = 1 to array1 do
50335: LD_ADDR_VAR 0 4
50339: PUSH
50340: DOUBLE
50341: LD_INT 1
50343: DEC
50344: ST_TO_ADDR
50345: LD_VAR 0 1
50349: PUSH
50350: FOR_TO
50351: IFFALSE 50389
// if array1 [ i ] <> array2 [ i ] then
50353: LD_VAR 0 1
50357: PUSH
50358: LD_VAR 0 4
50362: ARRAY
50363: PUSH
50364: LD_VAR 0 2
50368: PUSH
50369: LD_VAR 0 4
50373: ARRAY
50374: NONEQUAL
50375: IFFALSE 50387
// begin result := false ;
50377: LD_ADDR_VAR 0 3
50381: PUSH
50382: LD_INT 0
50384: ST_TO_ADDR
// break ;
50385: GO 50389
// end ;
50387: GO 50350
50389: POP
50390: POP
// end ;
50391: LD_VAR 0 3
50395: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50396: LD_INT 0
50398: PPUSH
50399: PPUSH
50400: PPUSH
// pom := GetBase ( fac ) ;
50401: LD_ADDR_VAR 0 5
50405: PUSH
50406: LD_VAR 0 1
50410: PPUSH
50411: CALL_OW 274
50415: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50416: LD_ADDR_VAR 0 4
50420: PUSH
50421: LD_VAR 0 2
50425: PUSH
50426: LD_INT 1
50428: ARRAY
50429: PPUSH
50430: LD_VAR 0 2
50434: PUSH
50435: LD_INT 2
50437: ARRAY
50438: PPUSH
50439: LD_VAR 0 2
50443: PUSH
50444: LD_INT 3
50446: ARRAY
50447: PPUSH
50448: LD_VAR 0 2
50452: PUSH
50453: LD_INT 4
50455: ARRAY
50456: PPUSH
50457: CALL_OW 449
50461: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50462: LD_ADDR_VAR 0 3
50466: PUSH
50467: LD_VAR 0 5
50471: PPUSH
50472: LD_INT 1
50474: PPUSH
50475: CALL_OW 275
50479: PUSH
50480: LD_VAR 0 4
50484: PUSH
50485: LD_INT 1
50487: ARRAY
50488: GREATEREQUAL
50489: PUSH
50490: LD_VAR 0 5
50494: PPUSH
50495: LD_INT 2
50497: PPUSH
50498: CALL_OW 275
50502: PUSH
50503: LD_VAR 0 4
50507: PUSH
50508: LD_INT 2
50510: ARRAY
50511: GREATEREQUAL
50512: AND
50513: PUSH
50514: LD_VAR 0 5
50518: PPUSH
50519: LD_INT 3
50521: PPUSH
50522: CALL_OW 275
50526: PUSH
50527: LD_VAR 0 4
50531: PUSH
50532: LD_INT 3
50534: ARRAY
50535: GREATEREQUAL
50536: AND
50537: ST_TO_ADDR
// end ;
50538: LD_VAR 0 3
50542: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50543: LD_INT 0
50545: PPUSH
50546: PPUSH
50547: PPUSH
50548: PPUSH
// pom := GetBase ( building ) ;
50549: LD_ADDR_VAR 0 3
50553: PUSH
50554: LD_VAR 0 1
50558: PPUSH
50559: CALL_OW 274
50563: ST_TO_ADDR
// if not pom then
50564: LD_VAR 0 3
50568: NOT
50569: IFFALSE 50573
// exit ;
50571: GO 50743
// btype := GetBType ( building ) ;
50573: LD_ADDR_VAR 0 5
50577: PUSH
50578: LD_VAR 0 1
50582: PPUSH
50583: CALL_OW 266
50587: ST_TO_ADDR
// if btype = b_armoury then
50588: LD_VAR 0 5
50592: PUSH
50593: LD_INT 4
50595: EQUAL
50596: IFFALSE 50606
// btype := b_barracks ;
50598: LD_ADDR_VAR 0 5
50602: PUSH
50603: LD_INT 5
50605: ST_TO_ADDR
// if btype = b_depot then
50606: LD_VAR 0 5
50610: PUSH
50611: LD_INT 0
50613: EQUAL
50614: IFFALSE 50624
// btype := b_warehouse ;
50616: LD_ADDR_VAR 0 5
50620: PUSH
50621: LD_INT 1
50623: ST_TO_ADDR
// if btype = b_workshop then
50624: LD_VAR 0 5
50628: PUSH
50629: LD_INT 2
50631: EQUAL
50632: IFFALSE 50642
// btype := b_factory ;
50634: LD_ADDR_VAR 0 5
50638: PUSH
50639: LD_INT 3
50641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50642: LD_ADDR_VAR 0 4
50646: PUSH
50647: LD_VAR 0 5
50651: PPUSH
50652: LD_VAR 0 1
50656: PPUSH
50657: CALL_OW 248
50661: PPUSH
50662: CALL_OW 450
50666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50667: LD_ADDR_VAR 0 2
50671: PUSH
50672: LD_VAR 0 3
50676: PPUSH
50677: LD_INT 1
50679: PPUSH
50680: CALL_OW 275
50684: PUSH
50685: LD_VAR 0 4
50689: PUSH
50690: LD_INT 1
50692: ARRAY
50693: GREATEREQUAL
50694: PUSH
50695: LD_VAR 0 3
50699: PPUSH
50700: LD_INT 2
50702: PPUSH
50703: CALL_OW 275
50707: PUSH
50708: LD_VAR 0 4
50712: PUSH
50713: LD_INT 2
50715: ARRAY
50716: GREATEREQUAL
50717: AND
50718: PUSH
50719: LD_VAR 0 3
50723: PPUSH
50724: LD_INT 3
50726: PPUSH
50727: CALL_OW 275
50731: PUSH
50732: LD_VAR 0 4
50736: PUSH
50737: LD_INT 3
50739: ARRAY
50740: GREATEREQUAL
50741: AND
50742: ST_TO_ADDR
// end ;
50743: LD_VAR 0 2
50747: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50748: LD_INT 0
50750: PPUSH
50751: PPUSH
50752: PPUSH
// pom := GetBase ( building ) ;
50753: LD_ADDR_VAR 0 4
50757: PUSH
50758: LD_VAR 0 1
50762: PPUSH
50763: CALL_OW 274
50767: ST_TO_ADDR
// if not pom then
50768: LD_VAR 0 4
50772: NOT
50773: IFFALSE 50777
// exit ;
50775: GO 50878
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50777: LD_ADDR_VAR 0 5
50781: PUSH
50782: LD_VAR 0 2
50786: PPUSH
50787: LD_VAR 0 1
50791: PPUSH
50792: CALL_OW 248
50796: PPUSH
50797: CALL_OW 450
50801: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50802: LD_ADDR_VAR 0 3
50806: PUSH
50807: LD_VAR 0 4
50811: PPUSH
50812: LD_INT 1
50814: PPUSH
50815: CALL_OW 275
50819: PUSH
50820: LD_VAR 0 5
50824: PUSH
50825: LD_INT 1
50827: ARRAY
50828: GREATEREQUAL
50829: PUSH
50830: LD_VAR 0 4
50834: PPUSH
50835: LD_INT 2
50837: PPUSH
50838: CALL_OW 275
50842: PUSH
50843: LD_VAR 0 5
50847: PUSH
50848: LD_INT 2
50850: ARRAY
50851: GREATEREQUAL
50852: AND
50853: PUSH
50854: LD_VAR 0 4
50858: PPUSH
50859: LD_INT 3
50861: PPUSH
50862: CALL_OW 275
50866: PUSH
50867: LD_VAR 0 5
50871: PUSH
50872: LD_INT 3
50874: ARRAY
50875: GREATEREQUAL
50876: AND
50877: ST_TO_ADDR
// end ;
50878: LD_VAR 0 3
50882: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50883: LD_INT 0
50885: PPUSH
50886: PPUSH
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
50892: PPUSH
50893: PPUSH
50894: PPUSH
50895: PPUSH
// result := false ;
50896: LD_ADDR_VAR 0 8
50900: PUSH
50901: LD_INT 0
50903: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50904: LD_VAR 0 5
50908: NOT
50909: PUSH
50910: LD_VAR 0 1
50914: NOT
50915: OR
50916: PUSH
50917: LD_VAR 0 2
50921: NOT
50922: OR
50923: PUSH
50924: LD_VAR 0 3
50928: NOT
50929: OR
50930: IFFALSE 50934
// exit ;
50932: GO 51748
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50934: LD_ADDR_VAR 0 14
50938: PUSH
50939: LD_VAR 0 1
50943: PPUSH
50944: LD_VAR 0 2
50948: PPUSH
50949: LD_VAR 0 3
50953: PPUSH
50954: LD_VAR 0 4
50958: PPUSH
50959: LD_VAR 0 5
50963: PUSH
50964: LD_INT 1
50966: ARRAY
50967: PPUSH
50968: CALL_OW 248
50972: PPUSH
50973: LD_INT 0
50975: PPUSH
50976: CALL 52985 0 6
50980: ST_TO_ADDR
// if not hexes then
50981: LD_VAR 0 14
50985: NOT
50986: IFFALSE 50990
// exit ;
50988: GO 51748
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50990: LD_ADDR_VAR 0 17
50994: PUSH
50995: LD_VAR 0 5
50999: PPUSH
51000: LD_INT 22
51002: PUSH
51003: LD_VAR 0 13
51007: PPUSH
51008: CALL_OW 255
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 30
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 30
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PPUSH
51049: CALL_OW 72
51053: ST_TO_ADDR
// for i = 1 to hexes do
51054: LD_ADDR_VAR 0 9
51058: PUSH
51059: DOUBLE
51060: LD_INT 1
51062: DEC
51063: ST_TO_ADDR
51064: LD_VAR 0 14
51068: PUSH
51069: FOR_TO
51070: IFFALSE 51746
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51072: LD_ADDR_VAR 0 13
51076: PUSH
51077: LD_VAR 0 14
51081: PUSH
51082: LD_VAR 0 9
51086: ARRAY
51087: PUSH
51088: LD_INT 1
51090: ARRAY
51091: PPUSH
51092: LD_VAR 0 14
51096: PUSH
51097: LD_VAR 0 9
51101: ARRAY
51102: PUSH
51103: LD_INT 2
51105: ARRAY
51106: PPUSH
51107: CALL_OW 428
51111: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51112: LD_VAR 0 14
51116: PUSH
51117: LD_VAR 0 9
51121: ARRAY
51122: PUSH
51123: LD_INT 1
51125: ARRAY
51126: PPUSH
51127: LD_VAR 0 14
51131: PUSH
51132: LD_VAR 0 9
51136: ARRAY
51137: PUSH
51138: LD_INT 2
51140: ARRAY
51141: PPUSH
51142: CALL_OW 351
51146: PUSH
51147: LD_VAR 0 14
51151: PUSH
51152: LD_VAR 0 9
51156: ARRAY
51157: PUSH
51158: LD_INT 1
51160: ARRAY
51161: PPUSH
51162: LD_VAR 0 14
51166: PUSH
51167: LD_VAR 0 9
51171: ARRAY
51172: PUSH
51173: LD_INT 2
51175: ARRAY
51176: PPUSH
51177: CALL_OW 488
51181: NOT
51182: OR
51183: PUSH
51184: LD_VAR 0 13
51188: PPUSH
51189: CALL_OW 247
51193: PUSH
51194: LD_INT 3
51196: EQUAL
51197: OR
51198: IFFALSE 51204
// exit ;
51200: POP
51201: POP
51202: GO 51748
// if not tmp then
51204: LD_VAR 0 13
51208: NOT
51209: IFFALSE 51213
// continue ;
51211: GO 51069
// result := true ;
51213: LD_ADDR_VAR 0 8
51217: PUSH
51218: LD_INT 1
51220: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51221: LD_VAR 0 6
51225: PUSH
51226: LD_VAR 0 13
51230: PPUSH
51231: CALL_OW 247
51235: PUSH
51236: LD_INT 2
51238: EQUAL
51239: AND
51240: PUSH
51241: LD_VAR 0 13
51245: PPUSH
51246: CALL_OW 263
51250: PUSH
51251: LD_INT 1
51253: EQUAL
51254: AND
51255: IFFALSE 51419
// begin if IsDrivenBy ( tmp ) then
51257: LD_VAR 0 13
51261: PPUSH
51262: CALL_OW 311
51266: IFFALSE 51270
// continue ;
51268: GO 51069
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51270: LD_VAR 0 6
51274: PPUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 60
51280: PUSH
51281: EMPTY
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 55
51293: PUSH
51294: EMPTY
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PPUSH
51305: CALL_OW 72
51309: IFFALSE 51417
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51311: LD_ADDR_VAR 0 18
51315: PUSH
51316: LD_VAR 0 6
51320: PPUSH
51321: LD_INT 3
51323: PUSH
51324: LD_INT 60
51326: PUSH
51327: EMPTY
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: LD_INT 55
51339: PUSH
51340: EMPTY
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PPUSH
51351: CALL_OW 72
51355: PUSH
51356: LD_INT 1
51358: ARRAY
51359: ST_TO_ADDR
// if IsInUnit ( driver ) then
51360: LD_VAR 0 18
51364: PPUSH
51365: CALL_OW 310
51369: IFFALSE 51380
// ComExit ( driver ) ;
51371: LD_VAR 0 18
51375: PPUSH
51376: CALL 76690 0 1
// AddComEnterUnit ( driver , tmp ) ;
51380: LD_VAR 0 18
51384: PPUSH
51385: LD_VAR 0 13
51389: PPUSH
51390: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51394: LD_VAR 0 18
51398: PPUSH
51399: LD_VAR 0 7
51403: PPUSH
51404: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51408: LD_VAR 0 18
51412: PPUSH
51413: CALL_OW 181
// end ; continue ;
51417: GO 51069
// end ; if not cleaners or not tmp in cleaners then
51419: LD_VAR 0 6
51423: NOT
51424: PUSH
51425: LD_VAR 0 13
51429: PUSH
51430: LD_VAR 0 6
51434: IN
51435: NOT
51436: OR
51437: IFFALSE 51744
// begin if dep then
51439: LD_VAR 0 17
51443: IFFALSE 51579
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51445: LD_ADDR_VAR 0 16
51449: PUSH
51450: LD_VAR 0 17
51454: PUSH
51455: LD_INT 1
51457: ARRAY
51458: PPUSH
51459: CALL_OW 250
51463: PPUSH
51464: LD_VAR 0 17
51468: PUSH
51469: LD_INT 1
51471: ARRAY
51472: PPUSH
51473: CALL_OW 254
51477: PPUSH
51478: LD_INT 5
51480: PPUSH
51481: CALL_OW 272
51485: PUSH
51486: LD_VAR 0 17
51490: PUSH
51491: LD_INT 1
51493: ARRAY
51494: PPUSH
51495: CALL_OW 251
51499: PPUSH
51500: LD_VAR 0 17
51504: PUSH
51505: LD_INT 1
51507: ARRAY
51508: PPUSH
51509: CALL_OW 254
51513: PPUSH
51514: LD_INT 5
51516: PPUSH
51517: CALL_OW 273
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51526: LD_VAR 0 16
51530: PUSH
51531: LD_INT 1
51533: ARRAY
51534: PPUSH
51535: LD_VAR 0 16
51539: PUSH
51540: LD_INT 2
51542: ARRAY
51543: PPUSH
51544: CALL_OW 488
51548: IFFALSE 51579
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51550: LD_VAR 0 13
51554: PPUSH
51555: LD_VAR 0 16
51559: PUSH
51560: LD_INT 1
51562: ARRAY
51563: PPUSH
51564: LD_VAR 0 16
51568: PUSH
51569: LD_INT 2
51571: ARRAY
51572: PPUSH
51573: CALL_OW 111
// continue ;
51577: GO 51069
// end ; end ; r := GetDir ( tmp ) ;
51579: LD_ADDR_VAR 0 15
51583: PUSH
51584: LD_VAR 0 13
51588: PPUSH
51589: CALL_OW 254
51593: ST_TO_ADDR
// if r = 5 then
51594: LD_VAR 0 15
51598: PUSH
51599: LD_INT 5
51601: EQUAL
51602: IFFALSE 51612
// r := 0 ;
51604: LD_ADDR_VAR 0 15
51608: PUSH
51609: LD_INT 0
51611: ST_TO_ADDR
// for j = r to 5 do
51612: LD_ADDR_VAR 0 10
51616: PUSH
51617: DOUBLE
51618: LD_VAR 0 15
51622: DEC
51623: ST_TO_ADDR
51624: LD_INT 5
51626: PUSH
51627: FOR_TO
51628: IFFALSE 51742
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51630: LD_ADDR_VAR 0 11
51634: PUSH
51635: LD_VAR 0 13
51639: PPUSH
51640: CALL_OW 250
51644: PPUSH
51645: LD_VAR 0 10
51649: PPUSH
51650: LD_INT 2
51652: PPUSH
51653: CALL_OW 272
51657: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51658: LD_ADDR_VAR 0 12
51662: PUSH
51663: LD_VAR 0 13
51667: PPUSH
51668: CALL_OW 251
51672: PPUSH
51673: LD_VAR 0 10
51677: PPUSH
51678: LD_INT 2
51680: PPUSH
51681: CALL_OW 273
51685: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51686: LD_VAR 0 11
51690: PPUSH
51691: LD_VAR 0 12
51695: PPUSH
51696: CALL_OW 488
51700: PUSH
51701: LD_VAR 0 11
51705: PPUSH
51706: LD_VAR 0 12
51710: PPUSH
51711: CALL_OW 428
51715: NOT
51716: AND
51717: IFFALSE 51740
// begin ComMoveXY ( tmp , _x , _y ) ;
51719: LD_VAR 0 13
51723: PPUSH
51724: LD_VAR 0 11
51728: PPUSH
51729: LD_VAR 0 12
51733: PPUSH
51734: CALL_OW 111
// break ;
51738: GO 51742
// end ; end ;
51740: GO 51627
51742: POP
51743: POP
// end ; end ;
51744: GO 51069
51746: POP
51747: POP
// end ;
51748: LD_VAR 0 8
51752: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51753: LD_INT 0
51755: PPUSH
// result := true ;
51756: LD_ADDR_VAR 0 3
51760: PUSH
51761: LD_INT 1
51763: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51764: LD_VAR 0 2
51768: PUSH
51769: LD_INT 24
51771: DOUBLE
51772: EQUAL
51773: IFTRUE 51783
51775: LD_INT 33
51777: DOUBLE
51778: EQUAL
51779: IFTRUE 51783
51781: GO 51808
51783: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: LD_INT 32
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 321
51801: PUSH
51802: LD_INT 2
51804: EQUAL
51805: ST_TO_ADDR
51806: GO 52128
51808: LD_INT 20
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51816
51814: GO 51841
51816: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_INT 6
51824: PPUSH
51825: LD_VAR 0 1
51829: PPUSH
51830: CALL_OW 321
51834: PUSH
51835: LD_INT 2
51837: EQUAL
51838: ST_TO_ADDR
51839: GO 52128
51841: LD_INT 22
51843: DOUBLE
51844: EQUAL
51845: IFTRUE 51855
51847: LD_INT 36
51849: DOUBLE
51850: EQUAL
51851: IFTRUE 51855
51853: GO 51880
51855: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51856: LD_ADDR_VAR 0 3
51860: PUSH
51861: LD_INT 15
51863: PPUSH
51864: LD_VAR 0 1
51868: PPUSH
51869: CALL_OW 321
51873: PUSH
51874: LD_INT 2
51876: EQUAL
51877: ST_TO_ADDR
51878: GO 52128
51880: LD_INT 30
51882: DOUBLE
51883: EQUAL
51884: IFTRUE 51888
51886: GO 51913
51888: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51889: LD_ADDR_VAR 0 3
51893: PUSH
51894: LD_INT 20
51896: PPUSH
51897: LD_VAR 0 1
51901: PPUSH
51902: CALL_OW 321
51906: PUSH
51907: LD_INT 2
51909: EQUAL
51910: ST_TO_ADDR
51911: GO 52128
51913: LD_INT 28
51915: DOUBLE
51916: EQUAL
51917: IFTRUE 51927
51919: LD_INT 21
51921: DOUBLE
51922: EQUAL
51923: IFTRUE 51927
51925: GO 51952
51927: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51928: LD_ADDR_VAR 0 3
51932: PUSH
51933: LD_INT 21
51935: PPUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: CALL_OW 321
51945: PUSH
51946: LD_INT 2
51948: EQUAL
51949: ST_TO_ADDR
51950: GO 52128
51952: LD_INT 16
51954: DOUBLE
51955: EQUAL
51956: IFTRUE 51960
51958: GO 51987
51960: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51961: LD_ADDR_VAR 0 3
51965: PUSH
51966: LD_EXP 150
51970: PPUSH
51971: LD_VAR 0 1
51975: PPUSH
51976: CALL_OW 321
51980: PUSH
51981: LD_INT 2
51983: EQUAL
51984: ST_TO_ADDR
51985: GO 52128
51987: LD_INT 19
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 52001
51993: LD_INT 23
51995: DOUBLE
51996: EQUAL
51997: IFTRUE 52001
51999: GO 52028
52001: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52002: LD_ADDR_VAR 0 3
52006: PUSH
52007: LD_EXP 149
52011: PPUSH
52012: LD_VAR 0 1
52016: PPUSH
52017: CALL_OW 321
52021: PUSH
52022: LD_INT 2
52024: EQUAL
52025: ST_TO_ADDR
52026: GO 52128
52028: LD_INT 17
52030: DOUBLE
52031: EQUAL
52032: IFTRUE 52036
52034: GO 52061
52036: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52037: LD_ADDR_VAR 0 3
52041: PUSH
52042: LD_INT 39
52044: PPUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 321
52054: PUSH
52055: LD_INT 2
52057: EQUAL
52058: ST_TO_ADDR
52059: GO 52128
52061: LD_INT 18
52063: DOUBLE
52064: EQUAL
52065: IFTRUE 52069
52067: GO 52094
52069: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52070: LD_ADDR_VAR 0 3
52074: PUSH
52075: LD_INT 40
52077: PPUSH
52078: LD_VAR 0 1
52082: PPUSH
52083: CALL_OW 321
52087: PUSH
52088: LD_INT 2
52090: EQUAL
52091: ST_TO_ADDR
52092: GO 52128
52094: LD_INT 27
52096: DOUBLE
52097: EQUAL
52098: IFTRUE 52102
52100: GO 52127
52102: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52103: LD_ADDR_VAR 0 3
52107: PUSH
52108: LD_INT 35
52110: PPUSH
52111: LD_VAR 0 1
52115: PPUSH
52116: CALL_OW 321
52120: PUSH
52121: LD_INT 2
52123: EQUAL
52124: ST_TO_ADDR
52125: GO 52128
52127: POP
// end ;
52128: LD_VAR 0 3
52132: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52133: LD_INT 0
52135: PPUSH
52136: PPUSH
52137: PPUSH
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
52144: PPUSH
52145: PPUSH
// result := false ;
52146: LD_ADDR_VAR 0 6
52150: PUSH
52151: LD_INT 0
52153: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52154: LD_VAR 0 1
52158: NOT
52159: PUSH
52160: LD_VAR 0 1
52164: PPUSH
52165: CALL_OW 266
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: IN
52180: NOT
52181: OR
52182: PUSH
52183: LD_VAR 0 2
52187: NOT
52188: OR
52189: PUSH
52190: LD_VAR 0 5
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: LD_INT 4
52209: PUSH
52210: LD_INT 5
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: IN
52221: NOT
52222: OR
52223: PUSH
52224: LD_VAR 0 3
52228: PPUSH
52229: LD_VAR 0 4
52233: PPUSH
52234: CALL_OW 488
52238: NOT
52239: OR
52240: IFFALSE 52244
// exit ;
52242: GO 52980
// side := GetSide ( depot ) ;
52244: LD_ADDR_VAR 0 9
52248: PUSH
52249: LD_VAR 0 1
52253: PPUSH
52254: CALL_OW 255
52258: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52259: LD_VAR 0 9
52263: PPUSH
52264: LD_VAR 0 2
52268: PPUSH
52269: CALL 51753 0 2
52273: NOT
52274: IFFALSE 52278
// exit ;
52276: GO 52980
// pom := GetBase ( depot ) ;
52278: LD_ADDR_VAR 0 10
52282: PUSH
52283: LD_VAR 0 1
52287: PPUSH
52288: CALL_OW 274
52292: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52293: LD_ADDR_VAR 0 11
52297: PUSH
52298: LD_VAR 0 2
52302: PPUSH
52303: LD_VAR 0 1
52307: PPUSH
52308: CALL_OW 248
52312: PPUSH
52313: CALL_OW 450
52317: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52318: LD_VAR 0 10
52322: PPUSH
52323: LD_INT 1
52325: PPUSH
52326: CALL_OW 275
52330: PUSH
52331: LD_VAR 0 11
52335: PUSH
52336: LD_INT 1
52338: ARRAY
52339: GREATEREQUAL
52340: PUSH
52341: LD_VAR 0 10
52345: PPUSH
52346: LD_INT 2
52348: PPUSH
52349: CALL_OW 275
52353: PUSH
52354: LD_VAR 0 11
52358: PUSH
52359: LD_INT 2
52361: ARRAY
52362: GREATEREQUAL
52363: AND
52364: PUSH
52365: LD_VAR 0 10
52369: PPUSH
52370: LD_INT 3
52372: PPUSH
52373: CALL_OW 275
52377: PUSH
52378: LD_VAR 0 11
52382: PUSH
52383: LD_INT 3
52385: ARRAY
52386: GREATEREQUAL
52387: AND
52388: NOT
52389: IFFALSE 52393
// exit ;
52391: GO 52980
// if GetBType ( depot ) = b_depot then
52393: LD_VAR 0 1
52397: PPUSH
52398: CALL_OW 266
52402: PUSH
52403: LD_INT 0
52405: EQUAL
52406: IFFALSE 52418
// dist := 28 else
52408: LD_ADDR_VAR 0 14
52412: PUSH
52413: LD_INT 28
52415: ST_TO_ADDR
52416: GO 52426
// dist := 36 ;
52418: LD_ADDR_VAR 0 14
52422: PUSH
52423: LD_INT 36
52425: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52426: LD_VAR 0 1
52430: PPUSH
52431: LD_VAR 0 3
52435: PPUSH
52436: LD_VAR 0 4
52440: PPUSH
52441: CALL_OW 297
52445: PUSH
52446: LD_VAR 0 14
52450: GREATER
52451: IFFALSE 52455
// exit ;
52453: GO 52980
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52455: LD_ADDR_VAR 0 12
52459: PUSH
52460: LD_VAR 0 2
52464: PPUSH
52465: LD_VAR 0 3
52469: PPUSH
52470: LD_VAR 0 4
52474: PPUSH
52475: LD_VAR 0 5
52479: PPUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: CALL_OW 248
52489: PPUSH
52490: LD_INT 0
52492: PPUSH
52493: CALL 52985 0 6
52497: ST_TO_ADDR
// if not hexes then
52498: LD_VAR 0 12
52502: NOT
52503: IFFALSE 52507
// exit ;
52505: GO 52980
// hex := GetHexInfo ( x , y ) ;
52507: LD_ADDR_VAR 0 15
52511: PUSH
52512: LD_VAR 0 3
52516: PPUSH
52517: LD_VAR 0 4
52521: PPUSH
52522: CALL_OW 546
52526: ST_TO_ADDR
// if hex [ 1 ] then
52527: LD_VAR 0 15
52531: PUSH
52532: LD_INT 1
52534: ARRAY
52535: IFFALSE 52539
// exit ;
52537: GO 52980
// height := hex [ 2 ] ;
52539: LD_ADDR_VAR 0 13
52543: PUSH
52544: LD_VAR 0 15
52548: PUSH
52549: LD_INT 2
52551: ARRAY
52552: ST_TO_ADDR
// for i = 1 to hexes do
52553: LD_ADDR_VAR 0 7
52557: PUSH
52558: DOUBLE
52559: LD_INT 1
52561: DEC
52562: ST_TO_ADDR
52563: LD_VAR 0 12
52567: PUSH
52568: FOR_TO
52569: IFFALSE 52899
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52571: LD_VAR 0 12
52575: PUSH
52576: LD_VAR 0 7
52580: ARRAY
52581: PUSH
52582: LD_INT 1
52584: ARRAY
52585: PPUSH
52586: LD_VAR 0 12
52590: PUSH
52591: LD_VAR 0 7
52595: ARRAY
52596: PUSH
52597: LD_INT 2
52599: ARRAY
52600: PPUSH
52601: CALL_OW 488
52605: NOT
52606: PUSH
52607: LD_VAR 0 12
52611: PUSH
52612: LD_VAR 0 7
52616: ARRAY
52617: PUSH
52618: LD_INT 1
52620: ARRAY
52621: PPUSH
52622: LD_VAR 0 12
52626: PUSH
52627: LD_VAR 0 7
52631: ARRAY
52632: PUSH
52633: LD_INT 2
52635: ARRAY
52636: PPUSH
52637: CALL_OW 428
52641: PUSH
52642: LD_INT 0
52644: GREATER
52645: OR
52646: PUSH
52647: LD_VAR 0 12
52651: PUSH
52652: LD_VAR 0 7
52656: ARRAY
52657: PUSH
52658: LD_INT 1
52660: ARRAY
52661: PPUSH
52662: LD_VAR 0 12
52666: PUSH
52667: LD_VAR 0 7
52671: ARRAY
52672: PUSH
52673: LD_INT 2
52675: ARRAY
52676: PPUSH
52677: CALL_OW 351
52681: OR
52682: IFFALSE 52688
// exit ;
52684: POP
52685: POP
52686: GO 52980
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52688: LD_ADDR_VAR 0 8
52692: PUSH
52693: LD_VAR 0 12
52697: PUSH
52698: LD_VAR 0 7
52702: ARRAY
52703: PUSH
52704: LD_INT 1
52706: ARRAY
52707: PPUSH
52708: LD_VAR 0 12
52712: PUSH
52713: LD_VAR 0 7
52717: ARRAY
52718: PUSH
52719: LD_INT 2
52721: ARRAY
52722: PPUSH
52723: CALL_OW 546
52727: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52728: LD_VAR 0 8
52732: PUSH
52733: LD_INT 1
52735: ARRAY
52736: PUSH
52737: LD_VAR 0 8
52741: PUSH
52742: LD_INT 2
52744: ARRAY
52745: PUSH
52746: LD_VAR 0 13
52750: PUSH
52751: LD_INT 2
52753: PLUS
52754: GREATER
52755: OR
52756: PUSH
52757: LD_VAR 0 8
52761: PUSH
52762: LD_INT 2
52764: ARRAY
52765: PUSH
52766: LD_VAR 0 13
52770: PUSH
52771: LD_INT 2
52773: MINUS
52774: LESS
52775: OR
52776: PUSH
52777: LD_VAR 0 8
52781: PUSH
52782: LD_INT 3
52784: ARRAY
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 8
52791: PUSH
52792: LD_INT 9
52794: PUSH
52795: LD_INT 10
52797: PUSH
52798: LD_INT 11
52800: PUSH
52801: LD_INT 12
52803: PUSH
52804: LD_INT 13
52806: PUSH
52807: LD_INT 16
52809: PUSH
52810: LD_INT 17
52812: PUSH
52813: LD_INT 18
52815: PUSH
52816: LD_INT 19
52818: PUSH
52819: LD_INT 20
52821: PUSH
52822: LD_INT 21
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: IN
52840: NOT
52841: OR
52842: PUSH
52843: LD_VAR 0 8
52847: PUSH
52848: LD_INT 5
52850: ARRAY
52851: NOT
52852: OR
52853: PUSH
52854: LD_VAR 0 8
52858: PUSH
52859: LD_INT 6
52861: ARRAY
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 7
52871: PUSH
52872: LD_INT 9
52874: PUSH
52875: LD_INT 10
52877: PUSH
52878: LD_INT 11
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: IN
52889: NOT
52890: OR
52891: IFFALSE 52897
// exit ;
52893: POP
52894: POP
52895: GO 52980
// end ;
52897: GO 52568
52899: POP
52900: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52901: LD_VAR 0 9
52905: PPUSH
52906: LD_VAR 0 3
52910: PPUSH
52911: LD_VAR 0 4
52915: PPUSH
52916: LD_INT 20
52918: PPUSH
52919: CALL 44926 0 4
52923: PUSH
52924: LD_INT 4
52926: ARRAY
52927: IFFALSE 52931
// exit ;
52929: GO 52980
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52931: LD_VAR 0 2
52935: PUSH
52936: LD_INT 29
52938: PUSH
52939: LD_INT 30
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: IN
52946: PUSH
52947: LD_VAR 0 3
52951: PPUSH
52952: LD_VAR 0 4
52956: PPUSH
52957: LD_VAR 0 9
52961: PPUSH
52962: CALL_OW 440
52966: NOT
52967: AND
52968: IFFALSE 52972
// exit ;
52970: GO 52980
// result := true ;
52972: LD_ADDR_VAR 0 6
52976: PUSH
52977: LD_INT 1
52979: ST_TO_ADDR
// end ;
52980: LD_VAR 0 6
52984: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52985: LD_INT 0
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
53023: PPUSH
53024: PPUSH
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
53029: PPUSH
53030: PPUSH
53031: PPUSH
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
// result = [ ] ;
53045: LD_ADDR_VAR 0 7
53049: PUSH
53050: EMPTY
53051: ST_TO_ADDR
// temp_list = [ ] ;
53052: LD_ADDR_VAR 0 9
53056: PUSH
53057: EMPTY
53058: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53059: LD_VAR 0 4
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: LD_INT 4
53078: PUSH
53079: LD_INT 5
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: IN
53090: NOT
53091: PUSH
53092: LD_VAR 0 1
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: IN
53107: PUSH
53108: LD_VAR 0 5
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 3
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: IN
53127: NOT
53128: AND
53129: OR
53130: IFFALSE 53134
// exit ;
53132: GO 71525
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53134: LD_VAR 0 1
53138: PUSH
53139: LD_INT 6
53141: PUSH
53142: LD_INT 7
53144: PUSH
53145: LD_INT 8
53147: PUSH
53148: LD_INT 13
53150: PUSH
53151: LD_INT 12
53153: PUSH
53154: LD_INT 15
53156: PUSH
53157: LD_INT 11
53159: PUSH
53160: LD_INT 14
53162: PUSH
53163: LD_INT 10
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: IN
53177: IFFALSE 53187
// btype = b_lab ;
53179: LD_ADDR_VAR 0 1
53183: PUSH
53184: LD_INT 6
53186: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53187: LD_VAR 0 6
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: IN
53206: NOT
53207: PUSH
53208: LD_VAR 0 1
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 6
53227: PUSH
53228: LD_INT 36
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: LD_INT 31
53239: PUSH
53240: LD_INT 32
53242: PUSH
53243: LD_INT 33
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: IN
53259: NOT
53260: PUSH
53261: LD_VAR 0 6
53265: PUSH
53266: LD_INT 1
53268: EQUAL
53269: AND
53270: OR
53271: PUSH
53272: LD_VAR 0 1
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: IN
53287: NOT
53288: PUSH
53289: LD_VAR 0 6
53293: PUSH
53294: LD_INT 2
53296: EQUAL
53297: AND
53298: OR
53299: IFFALSE 53309
// mode = 0 ;
53301: LD_ADDR_VAR 0 6
53305: PUSH
53306: LD_INT 0
53308: ST_TO_ADDR
// case mode of 0 :
53309: LD_VAR 0 6
53313: PUSH
53314: LD_INT 0
53316: DOUBLE
53317: EQUAL
53318: IFTRUE 53322
53320: GO 64775
53322: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53323: LD_ADDR_VAR 0 11
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53516: LD_ADDR_VAR 0 12
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53712: LD_ADDR_VAR 0 13
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53911: LD_ADDR_VAR 0 14
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54107: LD_ADDR_VAR 0 15
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54300: LD_ADDR_VAR 0 16
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 3
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54493: LD_ADDR_VAR 0 17
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54723: LD_ADDR_VAR 0 18
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54953: LD_ADDR_VAR 0 19
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55183: LD_ADDR_VAR 0 20
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55413: LD_ADDR_VAR 0 21
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55643: LD_ADDR_VAR 0 22
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55873: LD_ADDR_VAR 0 23
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56153: LD_ADDR_VAR 0 24
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56429: LD_ADDR_VAR 0 25
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56703: LD_ADDR_VAR 0 26
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56979: LD_ADDR_VAR 0 27
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57259: LD_ADDR_VAR 0 28
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57541: LD_ADDR_VAR 0 29
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57820: LD_ADDR_VAR 0 30
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58098: LD_ADDR_VAR 0 31
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58376: LD_ADDR_VAR 0 32
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58654: LD_ADDR_VAR 0 33
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58933: LD_ADDR_VAR 0 34
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59213: LD_ADDR_VAR 0 35
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59325: LD_ADDR_VAR 0 36
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59437: LD_ADDR_VAR 0 37
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59549: LD_ADDR_VAR 0 38
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59661: LD_ADDR_VAR 0 39
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59773: LD_ADDR_VAR 0 40
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59885: LD_ADDR_VAR 0 41
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: NEG
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: NEG
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60235: LD_ADDR_VAR 0 42
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 3
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60585: LD_ADDR_VAR 0 43
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 3
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60933: LD_ADDR_VAR 0 44
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: NEG
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61283: LD_ADDR_VAR 0 45
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61633: LD_ADDR_VAR 0 46
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 3
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 3
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61981: LD_ADDR_VAR 0 47
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 2
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: NEG
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62132: LD_ADDR_VAR 0 48
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62279: LD_ADDR_VAR 0 49
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62423: LD_ADDR_VAR 0 50
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62567: LD_ADDR_VAR 0 51
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62714: LD_ADDR_VAR 0 52
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: LD_INT 2
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62865: LD_ADDR_VAR 0 53
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: NEG
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63095: LD_ADDR_VAR 0 54
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: LD_INT 1
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63325: LD_ADDR_VAR 0 55
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63555: LD_ADDR_VAR 0 56
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 2
63754: NEG
63755: PUSH
63756: LD_INT 2
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63785: LD_ADDR_VAR 0 57
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: NEG
63985: PUSH
63986: LD_INT 2
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64015: LD_ADDR_VAR 0 58
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: LD_INT 2
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 2
64214: NEG
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64245: LD_ADDR_VAR 0 59
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64333: LD_ADDR_VAR 0 60
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64421: LD_ADDR_VAR 0 61
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64509: LD_ADDR_VAR 0 62
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64597: LD_ADDR_VAR 0 63
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64685: LD_ADDR_VAR 0 64
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// end ; 1 :
64773: GO 70670
64775: LD_INT 1
64777: DOUBLE
64778: EQUAL
64779: IFTRUE 64783
64781: GO 67406
64783: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64784: LD_ADDR_VAR 0 11
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64828: LD_ADDR_VAR 0 12
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 3
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64869: LD_ADDR_VAR 0 13
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 2
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64909: LD_ADDR_VAR 0 14
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64950: LD_ADDR_VAR 0 15
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 3
64979: NEG
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64994: LD_ADDR_VAR 0 16
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65040: LD_ADDR_VAR 0 17
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 3
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65084: LD_ADDR_VAR 0 18
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 3
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65125: LD_ADDR_VAR 0 19
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65165: LD_ADDR_VAR 0 20
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: LIST
65205: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65206: LD_ADDR_VAR 0 21
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65250: LD_ADDR_VAR 0 22
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 3
65269: NEG
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65296: LD_ADDR_VAR 0 23
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: LD_INT 4
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: LIST
65339: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65340: LD_ADDR_VAR 0 24
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 3
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 4
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65381: LD_ADDR_VAR 0 25
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: LD_INT 3
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 3
65408: PUSH
65409: LD_INT 4
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65421: LD_ADDR_VAR 0 26
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: LD_INT 4
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: LIST
65461: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65462: LD_ADDR_VAR 0 27
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 3
65480: NEG
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 4
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65506: LD_ADDR_VAR 0 28
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 3
65525: NEG
65526: PUSH
65527: LD_INT 4
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 4
65537: NEG
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65552: LD_ADDR_VAR 0 29
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: LD_INT 3
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 3
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: LD_INT 2
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: PUSH
65595: LD_INT 4
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 4
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: LD_INT 5
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 5
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: LD_INT 4
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: NEG
65662: PUSH
65663: LD_INT 6
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: LD_INT 6
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: LD_INT 5
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65707: LD_ADDR_VAR 0 30
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 3
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 3
65735: PUSH
65736: LD_INT 1
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 3
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 4
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 4
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 5
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 5
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 5
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 6
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 6
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65850: LD_ADDR_VAR 0 31
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: LD_INT 3
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 4
65887: PUSH
65888: LD_INT 3
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 4
65897: PUSH
65898: LD_INT 4
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 3
65907: PUSH
65908: LD_INT 4
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 5
65917: PUSH
65918: LD_INT 4
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 5
65927: PUSH
65928: LD_INT 5
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 4
65937: PUSH
65938: LD_INT 5
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 6
65947: PUSH
65948: LD_INT 5
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 6
65957: PUSH
65958: LD_INT 6
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: LD_INT 6
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65989: LD_ADDR_VAR 0 32
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: LD_INT 3
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: LD_INT 5
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 5
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: LD_INT 4
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: LD_INT 6
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 6
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 5
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66132: LD_ADDR_VAR 0 33
66136: PUSH
66137: LD_INT 2
66139: NEG
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: NEG
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 3
66173: NEG
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 4
66184: NEG
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 4
66195: NEG
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 4
66207: NEG
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 5
66218: NEG
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 5
66229: NEG
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 5
66241: NEG
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 6
66252: NEG
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 6
66263: NEG
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66287: LD_ADDR_VAR 0 34
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 2
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: NEG
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: LD_INT 4
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 4
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: NEG
66355: PUSH
66356: LD_INT 4
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 4
66366: NEG
66367: PUSH
66368: LD_INT 5
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 5
66378: NEG
66379: PUSH
66380: LD_INT 4
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 5
66390: NEG
66391: PUSH
66392: LD_INT 5
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 5
66402: NEG
66403: PUSH
66404: LD_INT 6
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 6
66414: NEG
66415: PUSH
66416: LD_INT 5
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 6
66426: NEG
66427: PUSH
66428: LD_INT 6
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66450: LD_ADDR_VAR 0 41
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66494: LD_ADDR_VAR 0 42
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: LIST
66534: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66535: LD_ADDR_VAR 0 43
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 3
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: LD_INT 3
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: LIST
66574: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66575: LD_ADDR_VAR 0 44
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66616: LD_ADDR_VAR 0 45
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 3
66645: NEG
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66660: LD_ADDR_VAR 0 46
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: NEG
66692: PUSH
66693: LD_INT 2
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66706: LD_ADDR_VAR 0 47
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: LD_INT 3
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66739: LD_ADDR_VAR 0 48
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66770: LD_ADDR_VAR 0 49
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66799: LD_ADDR_VAR 0 50
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66828: LD_ADDR_VAR 0 51
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 2
66846: NEG
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66859: LD_ADDR_VAR 0 52
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66892: LD_ADDR_VAR 0 53
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: LD_INT 3
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 3
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: LIST
66935: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66936: LD_ADDR_VAR 0 54
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66977: LD_ADDR_VAR 0 55
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: LD_INT 2
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67017: LD_ADDR_VAR 0 56
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 3
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67058: LD_ADDR_VAR 0 57
67062: PUSH
67063: LD_INT 2
67065: NEG
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67102: LD_ADDR_VAR 0 58
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 3
67121: NEG
67122: PUSH
67123: LD_INT 2
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 3
67133: NEG
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: LIST
67147: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67148: LD_ADDR_VAR 0 59
67152: PUSH
67153: LD_INT 1
67155: NEG
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: LD_INT 1
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67192: LD_ADDR_VAR 0 60
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 1
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 2
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 2
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: LIST
67232: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67233: LD_ADDR_VAR 0 61
67237: PUSH
67238: LD_INT 2
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: LIST
67272: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67273: LD_ADDR_VAR 0 62
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: LD_INT 2
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: LIST
67313: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67314: LD_ADDR_VAR 0 63
67318: PUSH
67319: LD_INT 1
67321: NEG
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67358: LD_ADDR_VAR 0 64
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 2
67377: NEG
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: ST_TO_ADDR
// end ; 2 :
67404: GO 70670
67406: LD_INT 2
67408: DOUBLE
67409: EQUAL
67410: IFTRUE 67414
67412: GO 70669
67414: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67415: LD_ADDR_VAR 0 29
67419: PUSH
67420: LD_INT 4
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 5
67505: PUSH
67506: LD_INT 2
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 4
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: LD_INT 4
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: LD_INT 4
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 4
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 5
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 4
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: LD_INT 5
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: NEG
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 3
67698: NEG
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 2
67721: NEG
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 4
67754: NEG
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 4
67765: NEG
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: LD_INT 2
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 2
67789: NEG
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 4
67800: NEG
67801: PUSH
67802: LD_INT 4
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 4
67812: NEG
67813: PUSH
67814: LD_INT 5
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: LD_INT 4
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: NEG
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 4
67848: NEG
67849: PUSH
67850: LD_INT 3
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 5
67860: NEG
67861: PUSH
67862: LD_INT 4
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 5
67872: NEG
67873: PUSH
67874: LD_INT 5
67876: NEG
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 3
67884: NEG
67885: PUSH
67886: LD_INT 5
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 5
67896: NEG
67897: PUSH
67898: LD_INT 3
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67953: LD_ADDR_VAR 0 30
67957: PUSH
67958: LD_INT 4
67960: PUSH
67961: LD_INT 4
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: LD_INT 4
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: LD_INT 5
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: PUSH
68001: LD_INT 5
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 3
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 5
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 3
68040: PUSH
68041: LD_INT 5
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 3
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 1
68111: NEG
68112: PUSH
68113: LD_INT 2
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 2
68122: PUSH
68123: LD_INT 4
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 2
68132: NEG
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 4
68143: NEG
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 4
68154: NEG
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 4
68188: NEG
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 5
68199: NEG
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 5
68210: NEG
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 5
68222: NEG
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: LD_INT 2
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: LD_INT 3
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: LD_INT 4
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 2
68269: NEG
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 2
68281: NEG
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 3
68293: NEG
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 4
68305: NEG
68306: PUSH
68307: LD_INT 3
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 4
68317: NEG
68318: PUSH
68319: LD_INT 4
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: LD_INT 4
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: LD_INT 2
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: LD_INT 4
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 5
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 4
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 1
68386: PUSH
68387: LD_INT 3
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: LD_INT 3
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: PUSH
68410: LD_INT 4
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 1
68420: NEG
68421: PUSH
68422: LD_INT 5
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 2
68443: NEG
68444: PUSH
68445: LD_INT 5
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68500: LD_ADDR_VAR 0 31
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 4
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: PUSH
68528: LD_INT 4
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: PUSH
68538: LD_INT 5
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 5
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: LD_INT 4
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: LD_INT 5
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 3
68600: NEG
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 2
68623: NEG
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 2
68634: NEG
68635: PUSH
68636: LD_INT 1
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: NEG
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: NEG
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 2
68691: NEG
68692: PUSH
68693: LD_INT 2
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 4
68702: NEG
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 4
68714: NEG
68715: PUSH
68716: LD_INT 5
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: LD_INT 4
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 3
68738: NEG
68739: PUSH
68740: LD_INT 3
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 4
68750: NEG
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 5
68762: NEG
68763: PUSH
68764: LD_INT 4
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: NEG
68775: PUSH
68776: LD_INT 5
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: NEG
68787: PUSH
68788: LD_INT 5
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 5
68798: NEG
68799: PUSH
68800: LD_INT 3
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: LD_INT 3
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 4
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 1
68843: PUSH
68844: LD_INT 2
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: LD_INT 2
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: NEG
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 4
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 2
68889: PUSH
68890: LD_INT 2
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: NEG
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 4
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 4
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 5
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 5
68943: PUSH
68944: LD_INT 1
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 4
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 3
68973: PUSH
68974: LD_INT 1
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 3
68984: PUSH
68985: LD_INT 2
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 5
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69050: LD_ADDR_VAR 0 32
69054: PUSH
69055: LD_INT 4
69057: NEG
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: NEG
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: NEG
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 5
69113: NEG
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 5
69124: NEG
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 5
69136: NEG
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 2
69183: NEG
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: NEG
69208: PUSH
69209: LD_INT 2
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: NEG
69220: PUSH
69221: LD_INT 3
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 4
69231: NEG
69232: PUSH
69233: LD_INT 4
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 2
69243: NEG
69244: PUSH
69245: LD_INT 4
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 4
69255: NEG
69256: PUSH
69257: LD_INT 2
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: LD_INT 4
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 5
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: PUSH
69290: LD_INT 4
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 3
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 3
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: NEG
69323: PUSH
69324: LD_INT 4
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 2
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 2
69357: NEG
69358: PUSH
69359: LD_INT 5
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 4
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 3
69410: PUSH
69411: LD_INT 1
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 2
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: LD_INT 1
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 2
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: LD_INT 2
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: LD_INT 4
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 4
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 5
69482: PUSH
69483: LD_INT 4
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 5
69492: PUSH
69493: LD_INT 5
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 4
69502: PUSH
69503: LD_INT 5
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 3
69512: PUSH
69513: LD_INT 4
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: LD_INT 3
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 5
69532: PUSH
69533: LD_INT 3
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: LD_INT 5
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69597: LD_ADDR_VAR 0 33
69601: PUSH
69602: LD_INT 4
69604: NEG
69605: PUSH
69606: LD_INT 4
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 4
69616: NEG
69617: PUSH
69618: LD_INT 5
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: LD_INT 4
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: NEG
69641: PUSH
69642: LD_INT 3
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 4
69652: NEG
69653: PUSH
69654: LD_INT 3
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 5
69664: NEG
69665: PUSH
69666: LD_INT 4
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 5
69676: NEG
69677: PUSH
69678: LD_INT 5
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 3
69688: NEG
69689: PUSH
69690: LD_INT 5
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 5
69700: NEG
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 3
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: LD_INT 4
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: LD_INT 3
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 1
69745: PUSH
69746: LD_INT 2
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: LD_INT 3
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: LD_INT 2
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: NEG
69803: PUSH
69804: LD_INT 4
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 4
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 4
69824: PUSH
69825: LD_INT 1
69827: NEG
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 5
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 5
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 4
69855: PUSH
69856: LD_INT 1
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: LD_INT 2
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 5
69897: PUSH
69898: LD_INT 2
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 4
69927: PUSH
69928: LD_INT 3
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: LD_INT 4
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: LD_INT 4
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 2
69957: PUSH
69958: LD_INT 3
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: LD_INT 2
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 4
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: LD_INT 4
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 0
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 1
70017: PUSH
70018: LD_INT 4
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 1
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 5
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: NEG
70048: PUSH
70049: LD_INT 4
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: NEG
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 2
70069: PUSH
70070: LD_INT 5
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70135: LD_ADDR_VAR 0 34
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 4
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: LD_INT 5
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 1
70164: PUSH
70165: LD_INT 4
70167: NEG
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: LD_INT 3
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 3
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: NEG
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 1
70209: NEG
70210: PUSH
70211: LD_INT 5
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 2
70221: PUSH
70222: LD_INT 3
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 2
70232: NEG
70233: PUSH
70234: LD_INT 5
70236: NEG
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 3
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 3
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 4
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 4
70275: PUSH
70276: LD_INT 1
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 3
70285: PUSH
70286: LD_INT 1
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: LD_INT 1
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 2
70316: PUSH
70317: LD_INT 2
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 4
70327: PUSH
70328: LD_INT 2
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 4
70337: PUSH
70338: LD_INT 4
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 4
70347: PUSH
70348: LD_INT 3
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 5
70357: PUSH
70358: LD_INT 4
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 5
70367: PUSH
70368: LD_INT 5
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: LD_INT 5
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: LD_INT 4
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 5
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: PUSH
70418: LD_INT 5
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 0
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 2
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 1
70447: PUSH
70448: LD_INT 3
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 0
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 1
70477: NEG
70478: PUSH
70479: LD_INT 3
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: LD_INT 4
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 2
70509: NEG
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 4
70520: NEG
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 4
70531: NEG
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: NEG
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 3
70554: NEG
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 4
70565: NEG
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 5
70576: NEG
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 5
70587: NEG
70588: PUSH
70589: LD_INT 1
70591: NEG
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 5
70599: NEG
70600: PUSH
70601: LD_INT 2
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: ST_TO_ADDR
// end ; end ;
70667: GO 70670
70669: POP
// case btype of b_depot , b_warehouse :
70670: LD_VAR 0 1
70674: PUSH
70675: LD_INT 0
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70689
70681: LD_INT 1
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70689
70687: GO 70890
70689: POP
// case nation of nation_american :
70690: LD_VAR 0 5
70694: PUSH
70695: LD_INT 1
70697: DOUBLE
70698: EQUAL
70699: IFTRUE 70703
70701: GO 70759
70703: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70704: LD_ADDR_VAR 0 9
70708: PUSH
70709: LD_VAR 0 11
70713: PUSH
70714: LD_VAR 0 12
70718: PUSH
70719: LD_VAR 0 13
70723: PUSH
70724: LD_VAR 0 14
70728: PUSH
70729: LD_VAR 0 15
70733: PUSH
70734: LD_VAR 0 16
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: PUSH
70747: LD_VAR 0 4
70751: PUSH
70752: LD_INT 1
70754: PLUS
70755: ARRAY
70756: ST_TO_ADDR
70757: GO 70888
70759: LD_INT 2
70761: DOUBLE
70762: EQUAL
70763: IFTRUE 70767
70765: GO 70823
70767: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70768: LD_ADDR_VAR 0 9
70772: PUSH
70773: LD_VAR 0 17
70777: PUSH
70778: LD_VAR 0 18
70782: PUSH
70783: LD_VAR 0 19
70787: PUSH
70788: LD_VAR 0 20
70792: PUSH
70793: LD_VAR 0 21
70797: PUSH
70798: LD_VAR 0 22
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: PUSH
70811: LD_VAR 0 4
70815: PUSH
70816: LD_INT 1
70818: PLUS
70819: ARRAY
70820: ST_TO_ADDR
70821: GO 70888
70823: LD_INT 3
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70831
70829: GO 70887
70831: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70832: LD_ADDR_VAR 0 9
70836: PUSH
70837: LD_VAR 0 23
70841: PUSH
70842: LD_VAR 0 24
70846: PUSH
70847: LD_VAR 0 25
70851: PUSH
70852: LD_VAR 0 26
70856: PUSH
70857: LD_VAR 0 27
70861: PUSH
70862: LD_VAR 0 28
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: PUSH
70875: LD_VAR 0 4
70879: PUSH
70880: LD_INT 1
70882: PLUS
70883: ARRAY
70884: ST_TO_ADDR
70885: GO 70888
70887: POP
70888: GO 71443
70890: LD_INT 2
70892: DOUBLE
70893: EQUAL
70894: IFTRUE 70904
70896: LD_INT 3
70898: DOUBLE
70899: EQUAL
70900: IFTRUE 70904
70902: GO 70960
70904: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70905: LD_ADDR_VAR 0 9
70909: PUSH
70910: LD_VAR 0 29
70914: PUSH
70915: LD_VAR 0 30
70919: PUSH
70920: LD_VAR 0 31
70924: PUSH
70925: LD_VAR 0 32
70929: PUSH
70930: LD_VAR 0 33
70934: PUSH
70935: LD_VAR 0 34
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: PUSH
70948: LD_VAR 0 4
70952: PUSH
70953: LD_INT 1
70955: PLUS
70956: ARRAY
70957: ST_TO_ADDR
70958: GO 71443
70960: LD_INT 16
70962: DOUBLE
70963: EQUAL
70964: IFTRUE 71022
70966: LD_INT 17
70968: DOUBLE
70969: EQUAL
70970: IFTRUE 71022
70972: LD_INT 18
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 71022
70978: LD_INT 19
70980: DOUBLE
70981: EQUAL
70982: IFTRUE 71022
70984: LD_INT 22
70986: DOUBLE
70987: EQUAL
70988: IFTRUE 71022
70990: LD_INT 20
70992: DOUBLE
70993: EQUAL
70994: IFTRUE 71022
70996: LD_INT 21
70998: DOUBLE
70999: EQUAL
71000: IFTRUE 71022
71002: LD_INT 23
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71022
71008: LD_INT 24
71010: DOUBLE
71011: EQUAL
71012: IFTRUE 71022
71014: LD_INT 25
71016: DOUBLE
71017: EQUAL
71018: IFTRUE 71022
71020: GO 71078
71022: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71023: LD_ADDR_VAR 0 9
71027: PUSH
71028: LD_VAR 0 35
71032: PUSH
71033: LD_VAR 0 36
71037: PUSH
71038: LD_VAR 0 37
71042: PUSH
71043: LD_VAR 0 38
71047: PUSH
71048: LD_VAR 0 39
71052: PUSH
71053: LD_VAR 0 40
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: PUSH
71066: LD_VAR 0 4
71070: PUSH
71071: LD_INT 1
71073: PLUS
71074: ARRAY
71075: ST_TO_ADDR
71076: GO 71443
71078: LD_INT 6
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71134
71084: LD_INT 7
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71134
71090: LD_INT 8
71092: DOUBLE
71093: EQUAL
71094: IFTRUE 71134
71096: LD_INT 13
71098: DOUBLE
71099: EQUAL
71100: IFTRUE 71134
71102: LD_INT 12
71104: DOUBLE
71105: EQUAL
71106: IFTRUE 71134
71108: LD_INT 15
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71134
71114: LD_INT 11
71116: DOUBLE
71117: EQUAL
71118: IFTRUE 71134
71120: LD_INT 14
71122: DOUBLE
71123: EQUAL
71124: IFTRUE 71134
71126: LD_INT 10
71128: DOUBLE
71129: EQUAL
71130: IFTRUE 71134
71132: GO 71190
71134: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71135: LD_ADDR_VAR 0 9
71139: PUSH
71140: LD_VAR 0 41
71144: PUSH
71145: LD_VAR 0 42
71149: PUSH
71150: LD_VAR 0 43
71154: PUSH
71155: LD_VAR 0 44
71159: PUSH
71160: LD_VAR 0 45
71164: PUSH
71165: LD_VAR 0 46
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: PUSH
71178: LD_VAR 0 4
71182: PUSH
71183: LD_INT 1
71185: PLUS
71186: ARRAY
71187: ST_TO_ADDR
71188: GO 71443
71190: LD_INT 36
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71198
71196: GO 71254
71198: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71199: LD_ADDR_VAR 0 9
71203: PUSH
71204: LD_VAR 0 47
71208: PUSH
71209: LD_VAR 0 48
71213: PUSH
71214: LD_VAR 0 49
71218: PUSH
71219: LD_VAR 0 50
71223: PUSH
71224: LD_VAR 0 51
71228: PUSH
71229: LD_VAR 0 52
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: PUSH
71242: LD_VAR 0 4
71246: PUSH
71247: LD_INT 1
71249: PLUS
71250: ARRAY
71251: ST_TO_ADDR
71252: GO 71443
71254: LD_INT 4
71256: DOUBLE
71257: EQUAL
71258: IFTRUE 71280
71260: LD_INT 5
71262: DOUBLE
71263: EQUAL
71264: IFTRUE 71280
71266: LD_INT 34
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71280
71272: LD_INT 37
71274: DOUBLE
71275: EQUAL
71276: IFTRUE 71280
71278: GO 71336
71280: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71281: LD_ADDR_VAR 0 9
71285: PUSH
71286: LD_VAR 0 53
71290: PUSH
71291: LD_VAR 0 54
71295: PUSH
71296: LD_VAR 0 55
71300: PUSH
71301: LD_VAR 0 56
71305: PUSH
71306: LD_VAR 0 57
71310: PUSH
71311: LD_VAR 0 58
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: PUSH
71324: LD_VAR 0 4
71328: PUSH
71329: LD_INT 1
71331: PLUS
71332: ARRAY
71333: ST_TO_ADDR
71334: GO 71443
71336: LD_INT 31
71338: DOUBLE
71339: EQUAL
71340: IFTRUE 71386
71342: LD_INT 32
71344: DOUBLE
71345: EQUAL
71346: IFTRUE 71386
71348: LD_INT 33
71350: DOUBLE
71351: EQUAL
71352: IFTRUE 71386
71354: LD_INT 27
71356: DOUBLE
71357: EQUAL
71358: IFTRUE 71386
71360: LD_INT 26
71362: DOUBLE
71363: EQUAL
71364: IFTRUE 71386
71366: LD_INT 28
71368: DOUBLE
71369: EQUAL
71370: IFTRUE 71386
71372: LD_INT 29
71374: DOUBLE
71375: EQUAL
71376: IFTRUE 71386
71378: LD_INT 30
71380: DOUBLE
71381: EQUAL
71382: IFTRUE 71386
71384: GO 71442
71386: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71387: LD_ADDR_VAR 0 9
71391: PUSH
71392: LD_VAR 0 59
71396: PUSH
71397: LD_VAR 0 60
71401: PUSH
71402: LD_VAR 0 61
71406: PUSH
71407: LD_VAR 0 62
71411: PUSH
71412: LD_VAR 0 63
71416: PUSH
71417: LD_VAR 0 64
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: PUSH
71430: LD_VAR 0 4
71434: PUSH
71435: LD_INT 1
71437: PLUS
71438: ARRAY
71439: ST_TO_ADDR
71440: GO 71443
71442: POP
// temp_list2 = [ ] ;
71443: LD_ADDR_VAR 0 10
71447: PUSH
71448: EMPTY
71449: ST_TO_ADDR
// for i in temp_list do
71450: LD_ADDR_VAR 0 8
71454: PUSH
71455: LD_VAR 0 9
71459: PUSH
71460: FOR_IN
71461: IFFALSE 71513
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71463: LD_ADDR_VAR 0 10
71467: PUSH
71468: LD_VAR 0 10
71472: PUSH
71473: LD_VAR 0 8
71477: PUSH
71478: LD_INT 1
71480: ARRAY
71481: PUSH
71482: LD_VAR 0 2
71486: PLUS
71487: PUSH
71488: LD_VAR 0 8
71492: PUSH
71493: LD_INT 2
71495: ARRAY
71496: PUSH
71497: LD_VAR 0 3
71501: PLUS
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: EMPTY
71508: LIST
71509: ADD
71510: ST_TO_ADDR
71511: GO 71460
71513: POP
71514: POP
// result = temp_list2 ;
71515: LD_ADDR_VAR 0 7
71519: PUSH
71520: LD_VAR 0 10
71524: ST_TO_ADDR
// end ;
71525: LD_VAR 0 7
71529: RET
// export function EnemyInRange ( unit , dist ) ; begin
71530: LD_INT 0
71532: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71533: LD_ADDR_VAR 0 3
71537: PUSH
71538: LD_VAR 0 1
71542: PPUSH
71543: CALL_OW 255
71547: PPUSH
71548: LD_VAR 0 1
71552: PPUSH
71553: CALL_OW 250
71557: PPUSH
71558: LD_VAR 0 1
71562: PPUSH
71563: CALL_OW 251
71567: PPUSH
71568: LD_VAR 0 2
71572: PPUSH
71573: CALL 44926 0 4
71577: PUSH
71578: LD_INT 4
71580: ARRAY
71581: ST_TO_ADDR
// end ;
71582: LD_VAR 0 3
71586: RET
// export function PlayerSeeMe ( unit ) ; begin
71587: LD_INT 0
71589: PPUSH
// result := See ( your_side , unit ) ;
71590: LD_ADDR_VAR 0 2
71594: PUSH
71595: LD_OWVAR 2
71599: PPUSH
71600: LD_VAR 0 1
71604: PPUSH
71605: CALL_OW 292
71609: ST_TO_ADDR
// end ;
71610: LD_VAR 0 2
71614: RET
// export function ReverseDir ( unit ) ; begin
71615: LD_INT 0
71617: PPUSH
// if not unit then
71618: LD_VAR 0 1
71622: NOT
71623: IFFALSE 71627
// exit ;
71625: GO 71650
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71627: LD_ADDR_VAR 0 2
71631: PUSH
71632: LD_VAR 0 1
71636: PPUSH
71637: CALL_OW 254
71641: PUSH
71642: LD_INT 3
71644: PLUS
71645: PUSH
71646: LD_INT 6
71648: MOD
71649: ST_TO_ADDR
// end ;
71650: LD_VAR 0 2
71654: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71655: LD_INT 0
71657: PPUSH
71658: PPUSH
71659: PPUSH
71660: PPUSH
71661: PPUSH
// if not hexes then
71662: LD_VAR 0 2
71666: NOT
71667: IFFALSE 71671
// exit ;
71669: GO 71819
// dist := 9999 ;
71671: LD_ADDR_VAR 0 5
71675: PUSH
71676: LD_INT 9999
71678: ST_TO_ADDR
// for i = 1 to hexes do
71679: LD_ADDR_VAR 0 4
71683: PUSH
71684: DOUBLE
71685: LD_INT 1
71687: DEC
71688: ST_TO_ADDR
71689: LD_VAR 0 2
71693: PUSH
71694: FOR_TO
71695: IFFALSE 71807
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71697: LD_VAR 0 1
71701: PPUSH
71702: LD_VAR 0 2
71706: PUSH
71707: LD_VAR 0 4
71711: ARRAY
71712: PUSH
71713: LD_INT 1
71715: ARRAY
71716: PPUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_VAR 0 4
71726: ARRAY
71727: PUSH
71728: LD_INT 2
71730: ARRAY
71731: PPUSH
71732: CALL_OW 297
71736: PUSH
71737: LD_VAR 0 5
71741: LESS
71742: IFFALSE 71805
// begin hex := hexes [ i ] ;
71744: LD_ADDR_VAR 0 7
71748: PUSH
71749: LD_VAR 0 2
71753: PUSH
71754: LD_VAR 0 4
71758: ARRAY
71759: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71760: LD_ADDR_VAR 0 5
71764: PUSH
71765: LD_VAR 0 1
71769: PPUSH
71770: LD_VAR 0 2
71774: PUSH
71775: LD_VAR 0 4
71779: ARRAY
71780: PUSH
71781: LD_INT 1
71783: ARRAY
71784: PPUSH
71785: LD_VAR 0 2
71789: PUSH
71790: LD_VAR 0 4
71794: ARRAY
71795: PUSH
71796: LD_INT 2
71798: ARRAY
71799: PPUSH
71800: CALL_OW 297
71804: ST_TO_ADDR
// end ; end ;
71805: GO 71694
71807: POP
71808: POP
// result := hex ;
71809: LD_ADDR_VAR 0 3
71813: PUSH
71814: LD_VAR 0 7
71818: ST_TO_ADDR
// end ;
71819: LD_VAR 0 3
71823: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71824: LD_INT 0
71826: PPUSH
71827: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71828: LD_VAR 0 1
71832: NOT
71833: PUSH
71834: LD_VAR 0 1
71838: PUSH
71839: LD_INT 21
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 23
71851: PUSH
71852: LD_INT 2
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PPUSH
71863: CALL_OW 69
71867: IN
71868: NOT
71869: OR
71870: IFFALSE 71874
// exit ;
71872: GO 71921
// for i = 1 to 3 do
71874: LD_ADDR_VAR 0 3
71878: PUSH
71879: DOUBLE
71880: LD_INT 1
71882: DEC
71883: ST_TO_ADDR
71884: LD_INT 3
71886: PUSH
71887: FOR_TO
71888: IFFALSE 71919
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71890: LD_VAR 0 1
71894: PPUSH
71895: CALL_OW 250
71899: PPUSH
71900: LD_VAR 0 1
71904: PPUSH
71905: CALL_OW 251
71909: PPUSH
71910: LD_INT 1
71912: PPUSH
71913: CALL_OW 453
71917: GO 71887
71919: POP
71920: POP
// end ;
71921: LD_VAR 0 2
71925: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71926: LD_INT 0
71928: PPUSH
71929: PPUSH
71930: PPUSH
71931: PPUSH
71932: PPUSH
71933: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71934: LD_VAR 0 1
71938: NOT
71939: PUSH
71940: LD_VAR 0 2
71944: NOT
71945: OR
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: CALL_OW 314
71956: OR
71957: IFFALSE 71961
// exit ;
71959: GO 72402
// x := GetX ( enemy_unit ) ;
71961: LD_ADDR_VAR 0 7
71965: PUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: CALL_OW 250
71975: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71976: LD_ADDR_VAR 0 8
71980: PUSH
71981: LD_VAR 0 2
71985: PPUSH
71986: CALL_OW 251
71990: ST_TO_ADDR
// if not x or not y then
71991: LD_VAR 0 7
71995: NOT
71996: PUSH
71997: LD_VAR 0 8
72001: NOT
72002: OR
72003: IFFALSE 72007
// exit ;
72005: GO 72402
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72007: LD_ADDR_VAR 0 6
72011: PUSH
72012: LD_VAR 0 7
72016: PPUSH
72017: LD_INT 0
72019: PPUSH
72020: LD_INT 4
72022: PPUSH
72023: CALL_OW 272
72027: PUSH
72028: LD_VAR 0 8
72032: PPUSH
72033: LD_INT 0
72035: PPUSH
72036: LD_INT 4
72038: PPUSH
72039: CALL_OW 273
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_VAR 0 7
72052: PPUSH
72053: LD_INT 1
72055: PPUSH
72056: LD_INT 4
72058: PPUSH
72059: CALL_OW 272
72063: PUSH
72064: LD_VAR 0 8
72068: PPUSH
72069: LD_INT 1
72071: PPUSH
72072: LD_INT 4
72074: PPUSH
72075: CALL_OW 273
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_VAR 0 7
72088: PPUSH
72089: LD_INT 2
72091: PPUSH
72092: LD_INT 4
72094: PPUSH
72095: CALL_OW 272
72099: PUSH
72100: LD_VAR 0 8
72104: PPUSH
72105: LD_INT 2
72107: PPUSH
72108: LD_INT 4
72110: PPUSH
72111: CALL_OW 273
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_VAR 0 7
72124: PPUSH
72125: LD_INT 3
72127: PPUSH
72128: LD_INT 4
72130: PPUSH
72131: CALL_OW 272
72135: PUSH
72136: LD_VAR 0 8
72140: PPUSH
72141: LD_INT 3
72143: PPUSH
72144: LD_INT 4
72146: PPUSH
72147: CALL_OW 273
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_VAR 0 7
72160: PPUSH
72161: LD_INT 4
72163: PPUSH
72164: LD_INT 4
72166: PPUSH
72167: CALL_OW 272
72171: PUSH
72172: LD_VAR 0 8
72176: PPUSH
72177: LD_INT 4
72179: PPUSH
72180: LD_INT 4
72182: PPUSH
72183: CALL_OW 273
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_VAR 0 7
72196: PPUSH
72197: LD_INT 5
72199: PPUSH
72200: LD_INT 4
72202: PPUSH
72203: CALL_OW 272
72207: PUSH
72208: LD_VAR 0 8
72212: PPUSH
72213: LD_INT 5
72215: PPUSH
72216: LD_INT 4
72218: PPUSH
72219: CALL_OW 273
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: ST_TO_ADDR
// for i = tmp downto 1 do
72236: LD_ADDR_VAR 0 4
72240: PUSH
72241: DOUBLE
72242: LD_VAR 0 6
72246: INC
72247: ST_TO_ADDR
72248: LD_INT 1
72250: PUSH
72251: FOR_DOWNTO
72252: IFFALSE 72353
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72254: LD_VAR 0 6
72258: PUSH
72259: LD_VAR 0 4
72263: ARRAY
72264: PUSH
72265: LD_INT 1
72267: ARRAY
72268: PPUSH
72269: LD_VAR 0 6
72273: PUSH
72274: LD_VAR 0 4
72278: ARRAY
72279: PUSH
72280: LD_INT 2
72282: ARRAY
72283: PPUSH
72284: CALL_OW 488
72288: NOT
72289: PUSH
72290: LD_VAR 0 6
72294: PUSH
72295: LD_VAR 0 4
72299: ARRAY
72300: PUSH
72301: LD_INT 1
72303: ARRAY
72304: PPUSH
72305: LD_VAR 0 6
72309: PUSH
72310: LD_VAR 0 4
72314: ARRAY
72315: PUSH
72316: LD_INT 2
72318: ARRAY
72319: PPUSH
72320: CALL_OW 428
72324: PUSH
72325: LD_INT 0
72327: NONEQUAL
72328: OR
72329: IFFALSE 72351
// tmp := Delete ( tmp , i ) ;
72331: LD_ADDR_VAR 0 6
72335: PUSH
72336: LD_VAR 0 6
72340: PPUSH
72341: LD_VAR 0 4
72345: PPUSH
72346: CALL_OW 3
72350: ST_TO_ADDR
72351: GO 72251
72353: POP
72354: POP
// j := GetClosestHex ( unit , tmp ) ;
72355: LD_ADDR_VAR 0 5
72359: PUSH
72360: LD_VAR 0 1
72364: PPUSH
72365: LD_VAR 0 6
72369: PPUSH
72370: CALL 71655 0 2
72374: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72375: LD_VAR 0 1
72379: PPUSH
72380: LD_VAR 0 5
72384: PUSH
72385: LD_INT 1
72387: ARRAY
72388: PPUSH
72389: LD_VAR 0 5
72393: PUSH
72394: LD_INT 2
72396: ARRAY
72397: PPUSH
72398: CALL_OW 111
// end ;
72402: LD_VAR 0 3
72406: RET
// export function PrepareApemanSoldier ( ) ; begin
72407: LD_INT 0
72409: PPUSH
// uc_nation := 0 ;
72410: LD_ADDR_OWVAR 21
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// hc_sex := sex_male ;
72418: LD_ADDR_OWVAR 27
72422: PUSH
72423: LD_INT 1
72425: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72426: LD_ADDR_OWVAR 28
72430: PUSH
72431: LD_INT 15
72433: ST_TO_ADDR
// hc_gallery :=  ;
72434: LD_ADDR_OWVAR 33
72438: PUSH
72439: LD_STRING 
72441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72442: LD_ADDR_OWVAR 31
72446: PUSH
72447: LD_INT 0
72449: PPUSH
72450: LD_INT 3
72452: PPUSH
72453: CALL_OW 12
72457: PUSH
72458: LD_INT 0
72460: PPUSH
72461: LD_INT 3
72463: PPUSH
72464: CALL_OW 12
72468: PUSH
72469: LD_INT 0
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: ST_TO_ADDR
// end ;
72481: LD_VAR 0 1
72485: RET
// export function PrepareApemanEngineer ( ) ; begin
72486: LD_INT 0
72488: PPUSH
// uc_nation := 0 ;
72489: LD_ADDR_OWVAR 21
72493: PUSH
72494: LD_INT 0
72496: ST_TO_ADDR
// hc_sex := sex_male ;
72497: LD_ADDR_OWVAR 27
72501: PUSH
72502: LD_INT 1
72504: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72505: LD_ADDR_OWVAR 28
72509: PUSH
72510: LD_INT 16
72512: ST_TO_ADDR
// hc_gallery :=  ;
72513: LD_ADDR_OWVAR 33
72517: PUSH
72518: LD_STRING 
72520: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72521: LD_ADDR_OWVAR 31
72525: PUSH
72526: LD_INT 0
72528: PPUSH
72529: LD_INT 3
72531: PPUSH
72532: CALL_OW 12
72536: PUSH
72537: LD_INT 0
72539: PPUSH
72540: LD_INT 3
72542: PPUSH
72543: CALL_OW 12
72547: PUSH
72548: LD_INT 0
72550: PUSH
72551: LD_INT 0
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: ST_TO_ADDR
// end ;
72560: LD_VAR 0 1
72564: RET
// export function PrepareApeman ( agressivity ) ; begin
72565: LD_INT 0
72567: PPUSH
// uc_side := 0 ;
72568: LD_ADDR_OWVAR 20
72572: PUSH
72573: LD_INT 0
72575: ST_TO_ADDR
// uc_nation := 0 ;
72576: LD_ADDR_OWVAR 21
72580: PUSH
72581: LD_INT 0
72583: ST_TO_ADDR
// hc_sex := sex_male ;
72584: LD_ADDR_OWVAR 27
72588: PUSH
72589: LD_INT 1
72591: ST_TO_ADDR
// hc_class := class_apeman ;
72592: LD_ADDR_OWVAR 28
72596: PUSH
72597: LD_INT 12
72599: ST_TO_ADDR
// hc_gallery :=  ;
72600: LD_ADDR_OWVAR 33
72604: PUSH
72605: LD_STRING 
72607: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72608: LD_ADDR_OWVAR 35
72612: PUSH
72613: LD_VAR 0 1
72617: NEG
72618: PPUSH
72619: LD_VAR 0 1
72623: PPUSH
72624: CALL_OW 12
72628: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72629: LD_ADDR_OWVAR 31
72633: PUSH
72634: LD_INT 0
72636: PPUSH
72637: LD_INT 3
72639: PPUSH
72640: CALL_OW 12
72644: PUSH
72645: LD_INT 0
72647: PPUSH
72648: LD_INT 3
72650: PPUSH
72651: CALL_OW 12
72655: PUSH
72656: LD_INT 0
72658: PUSH
72659: LD_INT 0
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: ST_TO_ADDR
// end ;
72668: LD_VAR 0 2
72672: RET
// export function PrepareTiger ( agressivity ) ; begin
72673: LD_INT 0
72675: PPUSH
// uc_side := 0 ;
72676: LD_ADDR_OWVAR 20
72680: PUSH
72681: LD_INT 0
72683: ST_TO_ADDR
// uc_nation := 0 ;
72684: LD_ADDR_OWVAR 21
72688: PUSH
72689: LD_INT 0
72691: ST_TO_ADDR
// hc_class := class_tiger ;
72692: LD_ADDR_OWVAR 28
72696: PUSH
72697: LD_INT 14
72699: ST_TO_ADDR
// hc_gallery :=  ;
72700: LD_ADDR_OWVAR 33
72704: PUSH
72705: LD_STRING 
72707: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72708: LD_ADDR_OWVAR 35
72712: PUSH
72713: LD_VAR 0 1
72717: NEG
72718: PPUSH
72719: LD_VAR 0 1
72723: PPUSH
72724: CALL_OW 12
72728: ST_TO_ADDR
// end ;
72729: LD_VAR 0 2
72733: RET
// export function PrepareEnchidna ( ) ; begin
72734: LD_INT 0
72736: PPUSH
// uc_side := 0 ;
72737: LD_ADDR_OWVAR 20
72741: PUSH
72742: LD_INT 0
72744: ST_TO_ADDR
// uc_nation := 0 ;
72745: LD_ADDR_OWVAR 21
72749: PUSH
72750: LD_INT 0
72752: ST_TO_ADDR
// hc_class := class_baggie ;
72753: LD_ADDR_OWVAR 28
72757: PUSH
72758: LD_INT 13
72760: ST_TO_ADDR
// hc_gallery :=  ;
72761: LD_ADDR_OWVAR 33
72765: PUSH
72766: LD_STRING 
72768: ST_TO_ADDR
// end ;
72769: LD_VAR 0 1
72773: RET
// export function PrepareFrog ( ) ; begin
72774: LD_INT 0
72776: PPUSH
// uc_side := 0 ;
72777: LD_ADDR_OWVAR 20
72781: PUSH
72782: LD_INT 0
72784: ST_TO_ADDR
// uc_nation := 0 ;
72785: LD_ADDR_OWVAR 21
72789: PUSH
72790: LD_INT 0
72792: ST_TO_ADDR
// hc_class := class_frog ;
72793: LD_ADDR_OWVAR 28
72797: PUSH
72798: LD_INT 19
72800: ST_TO_ADDR
// hc_gallery :=  ;
72801: LD_ADDR_OWVAR 33
72805: PUSH
72806: LD_STRING 
72808: ST_TO_ADDR
// end ;
72809: LD_VAR 0 1
72813: RET
// export function PrepareFish ( ) ; begin
72814: LD_INT 0
72816: PPUSH
// uc_side := 0 ;
72817: LD_ADDR_OWVAR 20
72821: PUSH
72822: LD_INT 0
72824: ST_TO_ADDR
// uc_nation := 0 ;
72825: LD_ADDR_OWVAR 21
72829: PUSH
72830: LD_INT 0
72832: ST_TO_ADDR
// hc_class := class_fish ;
72833: LD_ADDR_OWVAR 28
72837: PUSH
72838: LD_INT 20
72840: ST_TO_ADDR
// hc_gallery :=  ;
72841: LD_ADDR_OWVAR 33
72845: PUSH
72846: LD_STRING 
72848: ST_TO_ADDR
// end ;
72849: LD_VAR 0 1
72853: RET
// export function PrepareBird ( ) ; begin
72854: LD_INT 0
72856: PPUSH
// uc_side := 0 ;
72857: LD_ADDR_OWVAR 20
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
// uc_nation := 0 ;
72865: LD_ADDR_OWVAR 21
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// hc_class := class_phororhacos ;
72873: LD_ADDR_OWVAR 28
72877: PUSH
72878: LD_INT 18
72880: ST_TO_ADDR
// hc_gallery :=  ;
72881: LD_ADDR_OWVAR 33
72885: PUSH
72886: LD_STRING 
72888: ST_TO_ADDR
// end ;
72889: LD_VAR 0 1
72893: RET
// export function PrepareHorse ( ) ; begin
72894: LD_INT 0
72896: PPUSH
// uc_side := 0 ;
72897: LD_ADDR_OWVAR 20
72901: PUSH
72902: LD_INT 0
72904: ST_TO_ADDR
// uc_nation := 0 ;
72905: LD_ADDR_OWVAR 21
72909: PUSH
72910: LD_INT 0
72912: ST_TO_ADDR
// hc_class := class_horse ;
72913: LD_ADDR_OWVAR 28
72917: PUSH
72918: LD_INT 21
72920: ST_TO_ADDR
// hc_gallery :=  ;
72921: LD_ADDR_OWVAR 33
72925: PUSH
72926: LD_STRING 
72928: ST_TO_ADDR
// end ;
72929: LD_VAR 0 1
72933: RET
// export function PrepareMastodont ( ) ; begin
72934: LD_INT 0
72936: PPUSH
// uc_side := 0 ;
72937: LD_ADDR_OWVAR 20
72941: PUSH
72942: LD_INT 0
72944: ST_TO_ADDR
// uc_nation := 0 ;
72945: LD_ADDR_OWVAR 21
72949: PUSH
72950: LD_INT 0
72952: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72953: LD_ADDR_OWVAR 37
72957: PUSH
72958: LD_INT 31
72960: ST_TO_ADDR
// vc_control := control_rider ;
72961: LD_ADDR_OWVAR 38
72965: PUSH
72966: LD_INT 4
72968: ST_TO_ADDR
// end ;
72969: LD_VAR 0 1
72973: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72974: LD_INT 0
72976: PPUSH
72977: PPUSH
72978: PPUSH
// uc_side = 0 ;
72979: LD_ADDR_OWVAR 20
72983: PUSH
72984: LD_INT 0
72986: ST_TO_ADDR
// uc_nation = 0 ;
72987: LD_ADDR_OWVAR 21
72991: PUSH
72992: LD_INT 0
72994: ST_TO_ADDR
// InitHc_All ( ) ;
72995: CALL_OW 584
// InitVc ;
72999: CALL_OW 20
// if mastodonts then
73003: LD_VAR 0 6
73007: IFFALSE 73074
// for i = 1 to mastodonts do
73009: LD_ADDR_VAR 0 11
73013: PUSH
73014: DOUBLE
73015: LD_INT 1
73017: DEC
73018: ST_TO_ADDR
73019: LD_VAR 0 6
73023: PUSH
73024: FOR_TO
73025: IFFALSE 73072
// begin vc_chassis := 31 ;
73027: LD_ADDR_OWVAR 37
73031: PUSH
73032: LD_INT 31
73034: ST_TO_ADDR
// vc_control := control_rider ;
73035: LD_ADDR_OWVAR 38
73039: PUSH
73040: LD_INT 4
73042: ST_TO_ADDR
// animal := CreateVehicle ;
73043: LD_ADDR_VAR 0 12
73047: PUSH
73048: CALL_OW 45
73052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73053: LD_VAR 0 12
73057: PPUSH
73058: LD_VAR 0 8
73062: PPUSH
73063: LD_INT 0
73065: PPUSH
73066: CALL 75209 0 3
// end ;
73070: GO 73024
73072: POP
73073: POP
// if horses then
73074: LD_VAR 0 5
73078: IFFALSE 73145
// for i = 1 to horses do
73080: LD_ADDR_VAR 0 11
73084: PUSH
73085: DOUBLE
73086: LD_INT 1
73088: DEC
73089: ST_TO_ADDR
73090: LD_VAR 0 5
73094: PUSH
73095: FOR_TO
73096: IFFALSE 73143
// begin hc_class := 21 ;
73098: LD_ADDR_OWVAR 28
73102: PUSH
73103: LD_INT 21
73105: ST_TO_ADDR
// hc_gallery :=  ;
73106: LD_ADDR_OWVAR 33
73110: PUSH
73111: LD_STRING 
73113: ST_TO_ADDR
// animal := CreateHuman ;
73114: LD_ADDR_VAR 0 12
73118: PUSH
73119: CALL_OW 44
73123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73124: LD_VAR 0 12
73128: PPUSH
73129: LD_VAR 0 8
73133: PPUSH
73134: LD_INT 0
73136: PPUSH
73137: CALL 75209 0 3
// end ;
73141: GO 73095
73143: POP
73144: POP
// if birds then
73145: LD_VAR 0 1
73149: IFFALSE 73216
// for i = 1 to birds do
73151: LD_ADDR_VAR 0 11
73155: PUSH
73156: DOUBLE
73157: LD_INT 1
73159: DEC
73160: ST_TO_ADDR
73161: LD_VAR 0 1
73165: PUSH
73166: FOR_TO
73167: IFFALSE 73214
// begin hc_class = 18 ;
73169: LD_ADDR_OWVAR 28
73173: PUSH
73174: LD_INT 18
73176: ST_TO_ADDR
// hc_gallery =  ;
73177: LD_ADDR_OWVAR 33
73181: PUSH
73182: LD_STRING 
73184: ST_TO_ADDR
// animal := CreateHuman ;
73185: LD_ADDR_VAR 0 12
73189: PUSH
73190: CALL_OW 44
73194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73195: LD_VAR 0 12
73199: PPUSH
73200: LD_VAR 0 8
73204: PPUSH
73205: LD_INT 0
73207: PPUSH
73208: CALL 75209 0 3
// end ;
73212: GO 73166
73214: POP
73215: POP
// if tigers then
73216: LD_VAR 0 2
73220: IFFALSE 73304
// for i = 1 to tigers do
73222: LD_ADDR_VAR 0 11
73226: PUSH
73227: DOUBLE
73228: LD_INT 1
73230: DEC
73231: ST_TO_ADDR
73232: LD_VAR 0 2
73236: PUSH
73237: FOR_TO
73238: IFFALSE 73302
// begin hc_class = class_tiger ;
73240: LD_ADDR_OWVAR 28
73244: PUSH
73245: LD_INT 14
73247: ST_TO_ADDR
// hc_gallery =  ;
73248: LD_ADDR_OWVAR 33
73252: PUSH
73253: LD_STRING 
73255: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73256: LD_ADDR_OWVAR 35
73260: PUSH
73261: LD_INT 7
73263: NEG
73264: PPUSH
73265: LD_INT 7
73267: PPUSH
73268: CALL_OW 12
73272: ST_TO_ADDR
// animal := CreateHuman ;
73273: LD_ADDR_VAR 0 12
73277: PUSH
73278: CALL_OW 44
73282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73283: LD_VAR 0 12
73287: PPUSH
73288: LD_VAR 0 8
73292: PPUSH
73293: LD_INT 0
73295: PPUSH
73296: CALL 75209 0 3
// end ;
73300: GO 73237
73302: POP
73303: POP
// if apemans then
73304: LD_VAR 0 3
73308: IFFALSE 73431
// for i = 1 to apemans do
73310: LD_ADDR_VAR 0 11
73314: PUSH
73315: DOUBLE
73316: LD_INT 1
73318: DEC
73319: ST_TO_ADDR
73320: LD_VAR 0 3
73324: PUSH
73325: FOR_TO
73326: IFFALSE 73429
// begin hc_class = class_apeman ;
73328: LD_ADDR_OWVAR 28
73332: PUSH
73333: LD_INT 12
73335: ST_TO_ADDR
// hc_gallery =  ;
73336: LD_ADDR_OWVAR 33
73340: PUSH
73341: LD_STRING 
73343: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73344: LD_ADDR_OWVAR 35
73348: PUSH
73349: LD_INT 2
73351: NEG
73352: PPUSH
73353: LD_INT 2
73355: PPUSH
73356: CALL_OW 12
73360: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73361: LD_ADDR_OWVAR 31
73365: PUSH
73366: LD_INT 1
73368: PPUSH
73369: LD_INT 3
73371: PPUSH
73372: CALL_OW 12
73376: PUSH
73377: LD_INT 1
73379: PPUSH
73380: LD_INT 3
73382: PPUSH
73383: CALL_OW 12
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: LD_INT 0
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: ST_TO_ADDR
// animal := CreateHuman ;
73400: LD_ADDR_VAR 0 12
73404: PUSH
73405: CALL_OW 44
73409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73410: LD_VAR 0 12
73414: PPUSH
73415: LD_VAR 0 8
73419: PPUSH
73420: LD_INT 0
73422: PPUSH
73423: CALL 75209 0 3
// end ;
73427: GO 73325
73429: POP
73430: POP
// if enchidnas then
73431: LD_VAR 0 4
73435: IFFALSE 73502
// for i = 1 to enchidnas do
73437: LD_ADDR_VAR 0 11
73441: PUSH
73442: DOUBLE
73443: LD_INT 1
73445: DEC
73446: ST_TO_ADDR
73447: LD_VAR 0 4
73451: PUSH
73452: FOR_TO
73453: IFFALSE 73500
// begin hc_class = 13 ;
73455: LD_ADDR_OWVAR 28
73459: PUSH
73460: LD_INT 13
73462: ST_TO_ADDR
// hc_gallery =  ;
73463: LD_ADDR_OWVAR 33
73467: PUSH
73468: LD_STRING 
73470: ST_TO_ADDR
// animal := CreateHuman ;
73471: LD_ADDR_VAR 0 12
73475: PUSH
73476: CALL_OW 44
73480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73481: LD_VAR 0 12
73485: PPUSH
73486: LD_VAR 0 8
73490: PPUSH
73491: LD_INT 0
73493: PPUSH
73494: CALL 75209 0 3
// end ;
73498: GO 73452
73500: POP
73501: POP
// if fishes then
73502: LD_VAR 0 7
73506: IFFALSE 73573
// for i = 1 to fishes do
73508: LD_ADDR_VAR 0 11
73512: PUSH
73513: DOUBLE
73514: LD_INT 1
73516: DEC
73517: ST_TO_ADDR
73518: LD_VAR 0 7
73522: PUSH
73523: FOR_TO
73524: IFFALSE 73571
// begin hc_class = 20 ;
73526: LD_ADDR_OWVAR 28
73530: PUSH
73531: LD_INT 20
73533: ST_TO_ADDR
// hc_gallery =  ;
73534: LD_ADDR_OWVAR 33
73538: PUSH
73539: LD_STRING 
73541: ST_TO_ADDR
// animal := CreateHuman ;
73542: LD_ADDR_VAR 0 12
73546: PUSH
73547: CALL_OW 44
73551: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73552: LD_VAR 0 12
73556: PPUSH
73557: LD_VAR 0 9
73561: PPUSH
73562: LD_INT 0
73564: PPUSH
73565: CALL 75209 0 3
// end ;
73569: GO 73523
73571: POP
73572: POP
// end ;
73573: LD_VAR 0 10
73577: RET
// export function WantHeal ( sci , unit ) ; begin
73578: LD_INT 0
73580: PPUSH
// if GetTaskList ( sci ) > 0 then
73581: LD_VAR 0 1
73585: PPUSH
73586: CALL_OW 437
73590: PUSH
73591: LD_INT 0
73593: GREATER
73594: IFFALSE 73664
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73596: LD_VAR 0 1
73600: PPUSH
73601: CALL_OW 437
73605: PUSH
73606: LD_INT 1
73608: ARRAY
73609: PUSH
73610: LD_INT 1
73612: ARRAY
73613: PUSH
73614: LD_STRING l
73616: EQUAL
73617: PUSH
73618: LD_VAR 0 1
73622: PPUSH
73623: CALL_OW 437
73627: PUSH
73628: LD_INT 1
73630: ARRAY
73631: PUSH
73632: LD_INT 4
73634: ARRAY
73635: PUSH
73636: LD_VAR 0 2
73640: EQUAL
73641: AND
73642: IFFALSE 73654
// result := true else
73644: LD_ADDR_VAR 0 3
73648: PUSH
73649: LD_INT 1
73651: ST_TO_ADDR
73652: GO 73662
// result := false ;
73654: LD_ADDR_VAR 0 3
73658: PUSH
73659: LD_INT 0
73661: ST_TO_ADDR
// end else
73662: GO 73672
// result := false ;
73664: LD_ADDR_VAR 0 3
73668: PUSH
73669: LD_INT 0
73671: ST_TO_ADDR
// end ;
73672: LD_VAR 0 3
73676: RET
// export function HealTarget ( sci ) ; begin
73677: LD_INT 0
73679: PPUSH
// if not sci then
73680: LD_VAR 0 1
73684: NOT
73685: IFFALSE 73689
// exit ;
73687: GO 73754
// result := 0 ;
73689: LD_ADDR_VAR 0 2
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// if GetTaskList ( sci ) then
73697: LD_VAR 0 1
73701: PPUSH
73702: CALL_OW 437
73706: IFFALSE 73754
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73708: LD_VAR 0 1
73712: PPUSH
73713: CALL_OW 437
73717: PUSH
73718: LD_INT 1
73720: ARRAY
73721: PUSH
73722: LD_INT 1
73724: ARRAY
73725: PUSH
73726: LD_STRING l
73728: EQUAL
73729: IFFALSE 73754
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73731: LD_ADDR_VAR 0 2
73735: PUSH
73736: LD_VAR 0 1
73740: PPUSH
73741: CALL_OW 437
73745: PUSH
73746: LD_INT 1
73748: ARRAY
73749: PUSH
73750: LD_INT 4
73752: ARRAY
73753: ST_TO_ADDR
// end ;
73754: LD_VAR 0 2
73758: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73759: LD_INT 0
73761: PPUSH
73762: PPUSH
73763: PPUSH
73764: PPUSH
// if not base_units then
73765: LD_VAR 0 1
73769: NOT
73770: IFFALSE 73774
// exit ;
73772: GO 73861
// result := false ;
73774: LD_ADDR_VAR 0 2
73778: PUSH
73779: LD_INT 0
73781: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73782: LD_ADDR_VAR 0 5
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: LD_INT 21
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PPUSH
73802: CALL_OW 72
73806: ST_TO_ADDR
// if not tmp then
73807: LD_VAR 0 5
73811: NOT
73812: IFFALSE 73816
// exit ;
73814: GO 73861
// for i in tmp do
73816: LD_ADDR_VAR 0 3
73820: PUSH
73821: LD_VAR 0 5
73825: PUSH
73826: FOR_IN
73827: IFFALSE 73859
// begin result := EnemyInRange ( i , 22 ) ;
73829: LD_ADDR_VAR 0 2
73833: PUSH
73834: LD_VAR 0 3
73838: PPUSH
73839: LD_INT 22
73841: PPUSH
73842: CALL 71530 0 2
73846: ST_TO_ADDR
// if result then
73847: LD_VAR 0 2
73851: IFFALSE 73857
// exit ;
73853: POP
73854: POP
73855: GO 73861
// end ;
73857: GO 73826
73859: POP
73860: POP
// end ;
73861: LD_VAR 0 2
73865: RET
// export function FilterByTag ( units , tag ) ; begin
73866: LD_INT 0
73868: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73869: LD_ADDR_VAR 0 3
73873: PUSH
73874: LD_VAR 0 1
73878: PPUSH
73879: LD_INT 120
73881: PUSH
73882: LD_VAR 0 2
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PPUSH
73891: CALL_OW 72
73895: ST_TO_ADDR
// end ;
73896: LD_VAR 0 3
73900: RET
// export function IsDriver ( un ) ; begin
73901: LD_INT 0
73903: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73904: LD_ADDR_VAR 0 2
73908: PUSH
73909: LD_VAR 0 1
73913: PUSH
73914: LD_INT 55
73916: PUSH
73917: EMPTY
73918: LIST
73919: PPUSH
73920: CALL_OW 69
73924: IN
73925: ST_TO_ADDR
// end ;
73926: LD_VAR 0 2
73930: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73931: LD_INT 0
73933: PPUSH
73934: PPUSH
// list := [ ] ;
73935: LD_ADDR_VAR 0 5
73939: PUSH
73940: EMPTY
73941: ST_TO_ADDR
// case d of 0 :
73942: LD_VAR 0 3
73946: PUSH
73947: LD_INT 0
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73955
73953: GO 74088
73955: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73956: LD_ADDR_VAR 0 5
73960: PUSH
73961: LD_VAR 0 1
73965: PUSH
73966: LD_INT 4
73968: MINUS
73969: PUSH
73970: LD_VAR 0 2
73974: PUSH
73975: LD_INT 4
73977: MINUS
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: LIST
73986: PUSH
73987: LD_VAR 0 1
73991: PUSH
73992: LD_INT 3
73994: MINUS
73995: PUSH
73996: LD_VAR 0 2
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: LD_INT 4
74016: PLUS
74017: PUSH
74018: LD_VAR 0 2
74022: PUSH
74023: LD_INT 4
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_INT 3
74038: PLUS
74039: PUSH
74040: LD_VAR 0 2
74044: PUSH
74045: LD_INT 3
74047: PLUS
74048: PUSH
74049: LD_INT 5
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: LIST
74056: PUSH
74057: LD_VAR 0 1
74061: PUSH
74062: LD_VAR 0 2
74066: PUSH
74067: LD_INT 4
74069: PLUS
74070: PUSH
74071: LD_INT 0
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: ST_TO_ADDR
// end ; 1 :
74086: GO 74786
74088: LD_INT 1
74090: DOUBLE
74091: EQUAL
74092: IFTRUE 74096
74094: GO 74229
74096: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74097: LD_ADDR_VAR 0 5
74101: PUSH
74102: LD_VAR 0 1
74106: PUSH
74107: LD_VAR 0 2
74111: PUSH
74112: LD_INT 4
74114: MINUS
74115: PUSH
74116: LD_INT 3
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: PUSH
74124: LD_VAR 0 1
74128: PUSH
74129: LD_INT 3
74131: MINUS
74132: PUSH
74133: LD_VAR 0 2
74137: PUSH
74138: LD_INT 3
74140: MINUS
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: LIST
74149: PUSH
74150: LD_VAR 0 1
74154: PUSH
74155: LD_INT 4
74157: MINUS
74158: PUSH
74159: LD_VAR 0 2
74163: PUSH
74164: LD_INT 1
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: PUSH
74172: LD_VAR 0 1
74176: PUSH
74177: LD_VAR 0 2
74181: PUSH
74182: LD_INT 3
74184: PLUS
74185: PUSH
74186: LD_INT 0
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: LD_VAR 0 1
74198: PUSH
74199: LD_INT 4
74201: PLUS
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: LD_INT 4
74210: PLUS
74211: PUSH
74212: LD_INT 5
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: LIST
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: ST_TO_ADDR
// end ; 2 :
74227: GO 74786
74229: LD_INT 2
74231: DOUBLE
74232: EQUAL
74233: IFTRUE 74237
74235: GO 74366
74237: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74238: LD_ADDR_VAR 0 5
74242: PUSH
74243: LD_VAR 0 1
74247: PUSH
74248: LD_VAR 0 2
74252: PUSH
74253: LD_INT 3
74255: MINUS
74256: PUSH
74257: LD_INT 3
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_INT 4
74272: PLUS
74273: PUSH
74274: LD_VAR 0 2
74278: PUSH
74279: LD_INT 4
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: LIST
74286: PUSH
74287: LD_VAR 0 1
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: LD_INT 4
74299: PLUS
74300: PUSH
74301: LD_INT 0
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: LIST
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_INT 3
74316: MINUS
74317: PUSH
74318: LD_VAR 0 2
74322: PUSH
74323: LD_INT 1
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: PUSH
74331: LD_VAR 0 1
74335: PUSH
74336: LD_INT 4
74338: MINUS
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_INT 4
74347: MINUS
74348: PUSH
74349: LD_INT 2
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: ST_TO_ADDR
// end ; 3 :
74364: GO 74786
74366: LD_INT 3
74368: DOUBLE
74369: EQUAL
74370: IFTRUE 74374
74372: GO 74507
74374: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74375: LD_ADDR_VAR 0 5
74379: PUSH
74380: LD_VAR 0 1
74384: PUSH
74385: LD_INT 3
74387: PLUS
74388: PUSH
74389: LD_VAR 0 2
74393: PUSH
74394: LD_INT 4
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: LIST
74401: PUSH
74402: LD_VAR 0 1
74406: PUSH
74407: LD_INT 4
74409: PLUS
74410: PUSH
74411: LD_VAR 0 2
74415: PUSH
74416: LD_INT 4
74418: PLUS
74419: PUSH
74420: LD_INT 5
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: PUSH
74428: LD_VAR 0 1
74432: PUSH
74433: LD_INT 4
74435: MINUS
74436: PUSH
74437: LD_VAR 0 2
74441: PUSH
74442: LD_INT 1
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: LIST
74449: PUSH
74450: LD_VAR 0 1
74454: PUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_INT 4
74462: MINUS
74463: PUSH
74464: LD_INT 3
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: LIST
74471: PUSH
74472: LD_VAR 0 1
74476: PUSH
74477: LD_INT 3
74479: MINUS
74480: PUSH
74481: LD_VAR 0 2
74485: PUSH
74486: LD_INT 3
74488: MINUS
74489: PUSH
74490: LD_INT 2
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: ST_TO_ADDR
// end ; 4 :
74505: GO 74786
74507: LD_INT 4
74509: DOUBLE
74510: EQUAL
74511: IFTRUE 74515
74513: GO 74648
74515: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74516: LD_ADDR_VAR 0 5
74520: PUSH
74521: LD_VAR 0 1
74525: PUSH
74526: LD_VAR 0 2
74530: PUSH
74531: LD_INT 4
74533: PLUS
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: LIST
74542: PUSH
74543: LD_VAR 0 1
74547: PUSH
74548: LD_INT 3
74550: PLUS
74551: PUSH
74552: LD_VAR 0 2
74556: PUSH
74557: LD_INT 3
74559: PLUS
74560: PUSH
74561: LD_INT 5
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: PUSH
74569: LD_VAR 0 1
74573: PUSH
74574: LD_INT 4
74576: PLUS
74577: PUSH
74578: LD_VAR 0 2
74582: PUSH
74583: LD_INT 4
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: LIST
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_VAR 0 2
74600: PUSH
74601: LD_INT 3
74603: MINUS
74604: PUSH
74605: LD_INT 3
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: LIST
74612: PUSH
74613: LD_VAR 0 1
74617: PUSH
74618: LD_INT 4
74620: MINUS
74621: PUSH
74622: LD_VAR 0 2
74626: PUSH
74627: LD_INT 4
74629: MINUS
74630: PUSH
74631: LD_INT 2
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: LIST
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: ST_TO_ADDR
// end ; 5 :
74646: GO 74786
74648: LD_INT 5
74650: DOUBLE
74651: EQUAL
74652: IFTRUE 74656
74654: GO 74785
74656: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74657: LD_ADDR_VAR 0 5
74661: PUSH
74662: LD_VAR 0 1
74666: PUSH
74667: LD_INT 4
74669: MINUS
74670: PUSH
74671: LD_VAR 0 2
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: PUSH
74684: LD_VAR 0 1
74688: PUSH
74689: LD_VAR 0 2
74693: PUSH
74694: LD_INT 4
74696: MINUS
74697: PUSH
74698: LD_INT 3
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: LIST
74705: PUSH
74706: LD_VAR 0 1
74710: PUSH
74711: LD_INT 4
74713: PLUS
74714: PUSH
74715: LD_VAR 0 2
74719: PUSH
74720: LD_INT 4
74722: PLUS
74723: PUSH
74724: LD_INT 5
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: LIST
74731: PUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_INT 3
74739: PLUS
74740: PUSH
74741: LD_VAR 0 2
74745: PUSH
74746: LD_INT 4
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: LIST
74753: PUSH
74754: LD_VAR 0 1
74758: PUSH
74759: LD_VAR 0 2
74763: PUSH
74764: LD_INT 3
74766: PLUS
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: LIST
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: ST_TO_ADDR
// end ; end ;
74783: GO 74786
74785: POP
// result := list ;
74786: LD_ADDR_VAR 0 4
74790: PUSH
74791: LD_VAR 0 5
74795: ST_TO_ADDR
// end ;
74796: LD_VAR 0 4
74800: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74801: LD_INT 0
74803: PPUSH
74804: PPUSH
74805: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74806: LD_VAR 0 1
74810: NOT
74811: PUSH
74812: LD_VAR 0 2
74816: PUSH
74817: LD_INT 1
74819: PUSH
74820: LD_INT 2
74822: PUSH
74823: LD_INT 3
74825: PUSH
74826: LD_INT 4
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: IN
74835: NOT
74836: OR
74837: IFFALSE 74841
// exit ;
74839: GO 74933
// tmp := [ ] ;
74841: LD_ADDR_VAR 0 5
74845: PUSH
74846: EMPTY
74847: ST_TO_ADDR
// for i in units do
74848: LD_ADDR_VAR 0 4
74852: PUSH
74853: LD_VAR 0 1
74857: PUSH
74858: FOR_IN
74859: IFFALSE 74902
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74861: LD_ADDR_VAR 0 5
74865: PUSH
74866: LD_VAR 0 5
74870: PPUSH
74871: LD_VAR 0 5
74875: PUSH
74876: LD_INT 1
74878: PLUS
74879: PPUSH
74880: LD_VAR 0 4
74884: PPUSH
74885: LD_VAR 0 2
74889: PPUSH
74890: CALL_OW 259
74894: PPUSH
74895: CALL_OW 2
74899: ST_TO_ADDR
74900: GO 74858
74902: POP
74903: POP
// if not tmp then
74904: LD_VAR 0 5
74908: NOT
74909: IFFALSE 74913
// exit ;
74911: GO 74933
// result := SortListByListDesc ( units , tmp ) ;
74913: LD_ADDR_VAR 0 3
74917: PUSH
74918: LD_VAR 0 1
74922: PPUSH
74923: LD_VAR 0 5
74927: PPUSH
74928: CALL_OW 77
74932: ST_TO_ADDR
// end ;
74933: LD_VAR 0 3
74937: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74938: LD_INT 0
74940: PPUSH
74941: PPUSH
74942: PPUSH
// result := false ;
74943: LD_ADDR_VAR 0 3
74947: PUSH
74948: LD_INT 0
74950: ST_TO_ADDR
// x := GetX ( building ) ;
74951: LD_ADDR_VAR 0 4
74955: PUSH
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 250
74965: ST_TO_ADDR
// y := GetY ( building ) ;
74966: LD_ADDR_VAR 0 5
74970: PUSH
74971: LD_VAR 0 2
74975: PPUSH
74976: CALL_OW 251
74980: ST_TO_ADDR
// if not building or not x or not y then
74981: LD_VAR 0 2
74985: NOT
74986: PUSH
74987: LD_VAR 0 4
74991: NOT
74992: OR
74993: PUSH
74994: LD_VAR 0 5
74998: NOT
74999: OR
75000: IFFALSE 75004
// exit ;
75002: GO 75096
// if GetTaskList ( unit ) then
75004: LD_VAR 0 1
75008: PPUSH
75009: CALL_OW 437
75013: IFFALSE 75096
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75015: LD_STRING e
75017: PUSH
75018: LD_VAR 0 1
75022: PPUSH
75023: CALL_OW 437
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: PUSH
75032: LD_INT 1
75034: ARRAY
75035: EQUAL
75036: PUSH
75037: LD_VAR 0 4
75041: PUSH
75042: LD_VAR 0 1
75046: PPUSH
75047: CALL_OW 437
75051: PUSH
75052: LD_INT 1
75054: ARRAY
75055: PUSH
75056: LD_INT 2
75058: ARRAY
75059: EQUAL
75060: AND
75061: PUSH
75062: LD_VAR 0 5
75066: PUSH
75067: LD_VAR 0 1
75071: PPUSH
75072: CALL_OW 437
75076: PUSH
75077: LD_INT 1
75079: ARRAY
75080: PUSH
75081: LD_INT 3
75083: ARRAY
75084: EQUAL
75085: AND
75086: IFFALSE 75096
// result := true end ;
75088: LD_ADDR_VAR 0 3
75092: PUSH
75093: LD_INT 1
75095: ST_TO_ADDR
// end ;
75096: LD_VAR 0 3
75100: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75101: LD_INT 0
75103: PPUSH
// result := false ;
75104: LD_ADDR_VAR 0 4
75108: PUSH
75109: LD_INT 0
75111: ST_TO_ADDR
// if GetTaskList ( unit ) then
75112: LD_VAR 0 1
75116: PPUSH
75117: CALL_OW 437
75121: IFFALSE 75204
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75123: LD_STRING M
75125: PUSH
75126: LD_VAR 0 1
75130: PPUSH
75131: CALL_OW 437
75135: PUSH
75136: LD_INT 1
75138: ARRAY
75139: PUSH
75140: LD_INT 1
75142: ARRAY
75143: EQUAL
75144: PUSH
75145: LD_VAR 0 2
75149: PUSH
75150: LD_VAR 0 1
75154: PPUSH
75155: CALL_OW 437
75159: PUSH
75160: LD_INT 1
75162: ARRAY
75163: PUSH
75164: LD_INT 2
75166: ARRAY
75167: EQUAL
75168: AND
75169: PUSH
75170: LD_VAR 0 3
75174: PUSH
75175: LD_VAR 0 1
75179: PPUSH
75180: CALL_OW 437
75184: PUSH
75185: LD_INT 1
75187: ARRAY
75188: PUSH
75189: LD_INT 3
75191: ARRAY
75192: EQUAL
75193: AND
75194: IFFALSE 75204
// result := true ;
75196: LD_ADDR_VAR 0 4
75200: PUSH
75201: LD_INT 1
75203: ST_TO_ADDR
// end ; end ;
75204: LD_VAR 0 4
75208: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75209: LD_INT 0
75211: PPUSH
75212: PPUSH
75213: PPUSH
75214: PPUSH
// if not unit or not area then
75215: LD_VAR 0 1
75219: NOT
75220: PUSH
75221: LD_VAR 0 2
75225: NOT
75226: OR
75227: IFFALSE 75231
// exit ;
75229: GO 75395
// tmp := AreaToList ( area , i ) ;
75231: LD_ADDR_VAR 0 6
75235: PUSH
75236: LD_VAR 0 2
75240: PPUSH
75241: LD_VAR 0 5
75245: PPUSH
75246: CALL_OW 517
75250: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75251: LD_ADDR_VAR 0 5
75255: PUSH
75256: DOUBLE
75257: LD_INT 1
75259: DEC
75260: ST_TO_ADDR
75261: LD_VAR 0 6
75265: PUSH
75266: LD_INT 1
75268: ARRAY
75269: PUSH
75270: FOR_TO
75271: IFFALSE 75393
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75273: LD_ADDR_VAR 0 7
75277: PUSH
75278: LD_VAR 0 6
75282: PUSH
75283: LD_INT 1
75285: ARRAY
75286: PUSH
75287: LD_VAR 0 5
75291: ARRAY
75292: PUSH
75293: LD_VAR 0 6
75297: PUSH
75298: LD_INT 2
75300: ARRAY
75301: PUSH
75302: LD_VAR 0 5
75306: ARRAY
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75312: LD_VAR 0 7
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PPUSH
75321: LD_VAR 0 7
75325: PUSH
75326: LD_INT 2
75328: ARRAY
75329: PPUSH
75330: CALL_OW 428
75334: PUSH
75335: LD_INT 0
75337: EQUAL
75338: IFFALSE 75391
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75340: LD_VAR 0 1
75344: PPUSH
75345: LD_VAR 0 7
75349: PUSH
75350: LD_INT 1
75352: ARRAY
75353: PPUSH
75354: LD_VAR 0 7
75358: PUSH
75359: LD_INT 2
75361: ARRAY
75362: PPUSH
75363: LD_VAR 0 3
75367: PPUSH
75368: CALL_OW 48
// result := IsPlaced ( unit ) ;
75372: LD_ADDR_VAR 0 4
75376: PUSH
75377: LD_VAR 0 1
75381: PPUSH
75382: CALL_OW 305
75386: ST_TO_ADDR
// exit ;
75387: POP
75388: POP
75389: GO 75395
// end ; end ;
75391: GO 75270
75393: POP
75394: POP
// end ;
75395: LD_VAR 0 4
75399: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75400: LD_INT 0
75402: PPUSH
75403: PPUSH
75404: PPUSH
// if not side or side > 8 then
75405: LD_VAR 0 1
75409: NOT
75410: PUSH
75411: LD_VAR 0 1
75415: PUSH
75416: LD_INT 8
75418: GREATER
75419: OR
75420: IFFALSE 75424
// exit ;
75422: GO 75611
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75424: LD_ADDR_VAR 0 4
75428: PUSH
75429: LD_INT 22
75431: PUSH
75432: LD_VAR 0 1
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PUSH
75441: LD_INT 21
75443: PUSH
75444: LD_INT 3
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PPUSH
75455: CALL_OW 69
75459: ST_TO_ADDR
// if not tmp then
75460: LD_VAR 0 4
75464: NOT
75465: IFFALSE 75469
// exit ;
75467: GO 75611
// enable_addtolog := true ;
75469: LD_ADDR_OWVAR 81
75473: PUSH
75474: LD_INT 1
75476: ST_TO_ADDR
// AddToLog ( [ ) ;
75477: LD_STRING [
75479: PPUSH
75480: CALL_OW 561
// for i in tmp do
75484: LD_ADDR_VAR 0 3
75488: PUSH
75489: LD_VAR 0 4
75493: PUSH
75494: FOR_IN
75495: IFFALSE 75602
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75497: LD_STRING [
75499: PUSH
75500: LD_VAR 0 3
75504: PPUSH
75505: CALL_OW 266
75509: STR
75510: PUSH
75511: LD_STRING , 
75513: STR
75514: PUSH
75515: LD_VAR 0 3
75519: PPUSH
75520: CALL_OW 250
75524: STR
75525: PUSH
75526: LD_STRING , 
75528: STR
75529: PUSH
75530: LD_VAR 0 3
75534: PPUSH
75535: CALL_OW 251
75539: STR
75540: PUSH
75541: LD_STRING , 
75543: STR
75544: PUSH
75545: LD_VAR 0 3
75549: PPUSH
75550: CALL_OW 254
75554: STR
75555: PUSH
75556: LD_STRING , 
75558: STR
75559: PUSH
75560: LD_VAR 0 3
75564: PPUSH
75565: LD_INT 1
75567: PPUSH
75568: CALL_OW 268
75572: STR
75573: PUSH
75574: LD_STRING , 
75576: STR
75577: PUSH
75578: LD_VAR 0 3
75582: PPUSH
75583: LD_INT 2
75585: PPUSH
75586: CALL_OW 268
75590: STR
75591: PUSH
75592: LD_STRING ],
75594: STR
75595: PPUSH
75596: CALL_OW 561
// end ;
75600: GO 75494
75602: POP
75603: POP
// AddToLog ( ]; ) ;
75604: LD_STRING ];
75606: PPUSH
75607: CALL_OW 561
// end ;
75611: LD_VAR 0 2
75615: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75616: LD_INT 0
75618: PPUSH
75619: PPUSH
75620: PPUSH
75621: PPUSH
75622: PPUSH
// if not area or not rate or not max then
75623: LD_VAR 0 1
75627: NOT
75628: PUSH
75629: LD_VAR 0 2
75633: NOT
75634: OR
75635: PUSH
75636: LD_VAR 0 4
75640: NOT
75641: OR
75642: IFFALSE 75646
// exit ;
75644: GO 75835
// while 1 do
75646: LD_INT 1
75648: IFFALSE 75835
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75650: LD_ADDR_VAR 0 9
75654: PUSH
75655: LD_VAR 0 1
75659: PPUSH
75660: LD_INT 1
75662: PPUSH
75663: CALL_OW 287
75667: PUSH
75668: LD_INT 10
75670: MUL
75671: ST_TO_ADDR
// r := rate / 10 ;
75672: LD_ADDR_VAR 0 7
75676: PUSH
75677: LD_VAR 0 2
75681: PUSH
75682: LD_INT 10
75684: DIVREAL
75685: ST_TO_ADDR
// time := 1 1$00 ;
75686: LD_ADDR_VAR 0 8
75690: PUSH
75691: LD_INT 2100
75693: ST_TO_ADDR
// if amount < min then
75694: LD_VAR 0 9
75698: PUSH
75699: LD_VAR 0 3
75703: LESS
75704: IFFALSE 75722
// r := r * 2 else
75706: LD_ADDR_VAR 0 7
75710: PUSH
75711: LD_VAR 0 7
75715: PUSH
75716: LD_INT 2
75718: MUL
75719: ST_TO_ADDR
75720: GO 75748
// if amount > max then
75722: LD_VAR 0 9
75726: PUSH
75727: LD_VAR 0 4
75731: GREATER
75732: IFFALSE 75748
// r := r / 2 ;
75734: LD_ADDR_VAR 0 7
75738: PUSH
75739: LD_VAR 0 7
75743: PUSH
75744: LD_INT 2
75746: DIVREAL
75747: ST_TO_ADDR
// time := time / r ;
75748: LD_ADDR_VAR 0 8
75752: PUSH
75753: LD_VAR 0 8
75757: PUSH
75758: LD_VAR 0 7
75762: DIVREAL
75763: ST_TO_ADDR
// if time < 0 then
75764: LD_VAR 0 8
75768: PUSH
75769: LD_INT 0
75771: LESS
75772: IFFALSE 75789
// time := time * - 1 ;
75774: LD_ADDR_VAR 0 8
75778: PUSH
75779: LD_VAR 0 8
75783: PUSH
75784: LD_INT 1
75786: NEG
75787: MUL
75788: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75789: LD_VAR 0 8
75793: PUSH
75794: LD_INT 35
75796: PPUSH
75797: LD_INT 875
75799: PPUSH
75800: CALL_OW 12
75804: PLUS
75805: PPUSH
75806: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75810: LD_INT 1
75812: PPUSH
75813: LD_INT 5
75815: PPUSH
75816: CALL_OW 12
75820: PPUSH
75821: LD_VAR 0 1
75825: PPUSH
75826: LD_INT 1
75828: PPUSH
75829: CALL_OW 55
// end ;
75833: GO 75646
// end ;
75835: LD_VAR 0 5
75839: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75840: LD_INT 0
75842: PPUSH
75843: PPUSH
75844: PPUSH
75845: PPUSH
75846: PPUSH
75847: PPUSH
75848: PPUSH
75849: PPUSH
// if not turrets or not factories then
75850: LD_VAR 0 1
75854: NOT
75855: PUSH
75856: LD_VAR 0 2
75860: NOT
75861: OR
75862: IFFALSE 75866
// exit ;
75864: GO 76173
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75866: LD_ADDR_VAR 0 10
75870: PUSH
75871: LD_INT 5
75873: PUSH
75874: LD_INT 6
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 2
75883: PUSH
75884: LD_INT 4
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 3
75893: PUSH
75894: LD_INT 5
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: LIST
75905: PUSH
75906: LD_INT 24
75908: PUSH
75909: LD_INT 25
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 23
75918: PUSH
75919: LD_INT 27
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: LD_INT 42
75932: PUSH
75933: LD_INT 43
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 44
75942: PUSH
75943: LD_INT 46
75945: PUSH
75946: EMPTY
75947: LIST
75948: LIST
75949: PUSH
75950: LD_INT 45
75952: PUSH
75953: LD_INT 47
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: LIST
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: LIST
75969: ST_TO_ADDR
// result := [ ] ;
75970: LD_ADDR_VAR 0 3
75974: PUSH
75975: EMPTY
75976: ST_TO_ADDR
// for i in turrets do
75977: LD_ADDR_VAR 0 4
75981: PUSH
75982: LD_VAR 0 1
75986: PUSH
75987: FOR_IN
75988: IFFALSE 76171
// begin nat := GetNation ( i ) ;
75990: LD_ADDR_VAR 0 7
75994: PUSH
75995: LD_VAR 0 4
75999: PPUSH
76000: CALL_OW 248
76004: ST_TO_ADDR
// weapon := 0 ;
76005: LD_ADDR_VAR 0 8
76009: PUSH
76010: LD_INT 0
76012: ST_TO_ADDR
// if not nat then
76013: LD_VAR 0 7
76017: NOT
76018: IFFALSE 76022
// continue ;
76020: GO 75987
// for j in list [ nat ] do
76022: LD_ADDR_VAR 0 5
76026: PUSH
76027: LD_VAR 0 10
76031: PUSH
76032: LD_VAR 0 7
76036: ARRAY
76037: PUSH
76038: FOR_IN
76039: IFFALSE 76080
// if GetBWeapon ( i ) = j [ 1 ] then
76041: LD_VAR 0 4
76045: PPUSH
76046: CALL_OW 269
76050: PUSH
76051: LD_VAR 0 5
76055: PUSH
76056: LD_INT 1
76058: ARRAY
76059: EQUAL
76060: IFFALSE 76078
// begin weapon := j [ 2 ] ;
76062: LD_ADDR_VAR 0 8
76066: PUSH
76067: LD_VAR 0 5
76071: PUSH
76072: LD_INT 2
76074: ARRAY
76075: ST_TO_ADDR
// break ;
76076: GO 76080
// end ;
76078: GO 76038
76080: POP
76081: POP
// if not weapon then
76082: LD_VAR 0 8
76086: NOT
76087: IFFALSE 76091
// continue ;
76089: GO 75987
// for k in factories do
76091: LD_ADDR_VAR 0 6
76095: PUSH
76096: LD_VAR 0 2
76100: PUSH
76101: FOR_IN
76102: IFFALSE 76167
// begin weapons := AvailableWeaponList ( k ) ;
76104: LD_ADDR_VAR 0 9
76108: PUSH
76109: LD_VAR 0 6
76113: PPUSH
76114: CALL_OW 478
76118: ST_TO_ADDR
// if not weapons then
76119: LD_VAR 0 9
76123: NOT
76124: IFFALSE 76128
// continue ;
76126: GO 76101
// if weapon in weapons then
76128: LD_VAR 0 8
76132: PUSH
76133: LD_VAR 0 9
76137: IN
76138: IFFALSE 76165
// begin result := [ i , weapon ] ;
76140: LD_ADDR_VAR 0 3
76144: PUSH
76145: LD_VAR 0 4
76149: PUSH
76150: LD_VAR 0 8
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: ST_TO_ADDR
// exit ;
76159: POP
76160: POP
76161: POP
76162: POP
76163: GO 76173
// end ; end ;
76165: GO 76101
76167: POP
76168: POP
// end ;
76169: GO 75987
76171: POP
76172: POP
// end ;
76173: LD_VAR 0 3
76177: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76178: LD_INT 0
76180: PPUSH
// if not side or side > 8 then
76181: LD_VAR 0 3
76185: NOT
76186: PUSH
76187: LD_VAR 0 3
76191: PUSH
76192: LD_INT 8
76194: GREATER
76195: OR
76196: IFFALSE 76200
// exit ;
76198: GO 76259
// if not range then
76200: LD_VAR 0 4
76204: NOT
76205: IFFALSE 76216
// range := - 12 ;
76207: LD_ADDR_VAR 0 4
76211: PUSH
76212: LD_INT 12
76214: NEG
76215: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: LD_VAR 0 3
76230: PPUSH
76231: LD_VAR 0 4
76235: PPUSH
76236: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76240: LD_VAR 0 1
76244: PPUSH
76245: LD_VAR 0 2
76249: PPUSH
76250: LD_VAR 0 3
76254: PPUSH
76255: CALL_OW 331
// end ;
76259: LD_VAR 0 5
76263: RET
// export function Video ( mode ) ; begin
76264: LD_INT 0
76266: PPUSH
// ingame_video = mode ;
76267: LD_ADDR_OWVAR 52
76271: PUSH
76272: LD_VAR 0 1
76276: ST_TO_ADDR
// interface_hidden = mode ;
76277: LD_ADDR_OWVAR 54
76281: PUSH
76282: LD_VAR 0 1
76286: ST_TO_ADDR
// end ;
76287: LD_VAR 0 2
76291: RET
// export function Join ( array , element ) ; begin
76292: LD_INT 0
76294: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76295: LD_ADDR_VAR 0 3
76299: PUSH
76300: LD_VAR 0 1
76304: PPUSH
76305: LD_VAR 0 1
76309: PUSH
76310: LD_INT 1
76312: PLUS
76313: PPUSH
76314: LD_VAR 0 2
76318: PPUSH
76319: CALL_OW 1
76323: ST_TO_ADDR
// end ;
76324: LD_VAR 0 3
76328: RET
// export function JoinUnion ( array , element ) ; begin
76329: LD_INT 0
76331: PPUSH
// result := array union element ;
76332: LD_ADDR_VAR 0 3
76336: PUSH
76337: LD_VAR 0 1
76341: PUSH
76342: LD_VAR 0 2
76346: UNION
76347: ST_TO_ADDR
// end ;
76348: LD_VAR 0 3
76352: RET
// export function GetBehemoths ( side ) ; begin
76353: LD_INT 0
76355: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76356: LD_ADDR_VAR 0 2
76360: PUSH
76361: LD_INT 22
76363: PUSH
76364: LD_VAR 0 1
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 31
76375: PUSH
76376: LD_INT 25
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PPUSH
76387: CALL_OW 69
76391: ST_TO_ADDR
// end ;
76392: LD_VAR 0 2
76396: RET
// export function Shuffle ( array ) ; var i , index ; begin
76397: LD_INT 0
76399: PPUSH
76400: PPUSH
76401: PPUSH
// result := [ ] ;
76402: LD_ADDR_VAR 0 2
76406: PUSH
76407: EMPTY
76408: ST_TO_ADDR
// if not array then
76409: LD_VAR 0 1
76413: NOT
76414: IFFALSE 76418
// exit ;
76416: GO 76517
// Randomize ;
76418: CALL_OW 10
// for i = array downto 1 do
76422: LD_ADDR_VAR 0 3
76426: PUSH
76427: DOUBLE
76428: LD_VAR 0 1
76432: INC
76433: ST_TO_ADDR
76434: LD_INT 1
76436: PUSH
76437: FOR_DOWNTO
76438: IFFALSE 76515
// begin index := rand ( 1 , array ) ;
76440: LD_ADDR_VAR 0 4
76444: PUSH
76445: LD_INT 1
76447: PPUSH
76448: LD_VAR 0 1
76452: PPUSH
76453: CALL_OW 12
76457: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76458: LD_ADDR_VAR 0 2
76462: PUSH
76463: LD_VAR 0 2
76467: PPUSH
76468: LD_VAR 0 2
76472: PUSH
76473: LD_INT 1
76475: PLUS
76476: PPUSH
76477: LD_VAR 0 1
76481: PUSH
76482: LD_VAR 0 4
76486: ARRAY
76487: PPUSH
76488: CALL_OW 2
76492: ST_TO_ADDR
// array := Delete ( array , index ) ;
76493: LD_ADDR_VAR 0 1
76497: PUSH
76498: LD_VAR 0 1
76502: PPUSH
76503: LD_VAR 0 4
76507: PPUSH
76508: CALL_OW 3
76512: ST_TO_ADDR
// end ;
76513: GO 76437
76515: POP
76516: POP
// end ;
76517: LD_VAR 0 2
76521: RET
// export function GetBaseMaterials ( base ) ; begin
76522: LD_INT 0
76524: PPUSH
// result := [ 0 , 0 , 0 ] ;
76525: LD_ADDR_VAR 0 2
76529: PUSH
76530: LD_INT 0
76532: PUSH
76533: LD_INT 0
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: ST_TO_ADDR
// if not base then
76544: LD_VAR 0 1
76548: NOT
76549: IFFALSE 76553
// exit ;
76551: GO 76602
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76553: LD_ADDR_VAR 0 2
76557: PUSH
76558: LD_VAR 0 1
76562: PPUSH
76563: LD_INT 1
76565: PPUSH
76566: CALL_OW 275
76570: PUSH
76571: LD_VAR 0 1
76575: PPUSH
76576: LD_INT 2
76578: PPUSH
76579: CALL_OW 275
76583: PUSH
76584: LD_VAR 0 1
76588: PPUSH
76589: LD_INT 3
76591: PPUSH
76592: CALL_OW 275
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: LIST
76601: ST_TO_ADDR
// end ;
76602: LD_VAR 0 2
76606: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76607: LD_INT 0
76609: PPUSH
76610: PPUSH
// result := array ;
76611: LD_ADDR_VAR 0 3
76615: PUSH
76616: LD_VAR 0 1
76620: ST_TO_ADDR
// if size >= result then
76621: LD_VAR 0 2
76625: PUSH
76626: LD_VAR 0 3
76630: GREATEREQUAL
76631: IFFALSE 76635
// exit ;
76633: GO 76685
// if size then
76635: LD_VAR 0 2
76639: IFFALSE 76685
// for i := array downto size do
76641: LD_ADDR_VAR 0 4
76645: PUSH
76646: DOUBLE
76647: LD_VAR 0 1
76651: INC
76652: ST_TO_ADDR
76653: LD_VAR 0 2
76657: PUSH
76658: FOR_DOWNTO
76659: IFFALSE 76683
// result := Delete ( result , result ) ;
76661: LD_ADDR_VAR 0 3
76665: PUSH
76666: LD_VAR 0 3
76670: PPUSH
76671: LD_VAR 0 3
76675: PPUSH
76676: CALL_OW 3
76680: ST_TO_ADDR
76681: GO 76658
76683: POP
76684: POP
// end ;
76685: LD_VAR 0 3
76689: RET
// export function ComExit ( unit ) ; var tmp ; begin
76690: LD_INT 0
76692: PPUSH
76693: PPUSH
// if not IsInUnit ( unit ) then
76694: LD_VAR 0 1
76698: PPUSH
76699: CALL_OW 310
76703: NOT
76704: IFFALSE 76708
// exit ;
76706: GO 76768
// tmp := IsInUnit ( unit ) ;
76708: LD_ADDR_VAR 0 3
76712: PUSH
76713: LD_VAR 0 1
76717: PPUSH
76718: CALL_OW 310
76722: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76723: LD_VAR 0 3
76727: PPUSH
76728: CALL_OW 247
76732: PUSH
76733: LD_INT 2
76735: EQUAL
76736: IFFALSE 76749
// ComExitVehicle ( unit ) else
76738: LD_VAR 0 1
76742: PPUSH
76743: CALL_OW 121
76747: GO 76758
// ComExitBuilding ( unit ) ;
76749: LD_VAR 0 1
76753: PPUSH
76754: CALL_OW 122
// result := tmp ;
76758: LD_ADDR_VAR 0 2
76762: PUSH
76763: LD_VAR 0 3
76767: ST_TO_ADDR
// end ;
76768: LD_VAR 0 2
76772: RET
// export function ComExitAll ( units ) ; var i ; begin
76773: LD_INT 0
76775: PPUSH
76776: PPUSH
// if not units then
76777: LD_VAR 0 1
76781: NOT
76782: IFFALSE 76786
// exit ;
76784: GO 76812
// for i in units do
76786: LD_ADDR_VAR 0 3
76790: PUSH
76791: LD_VAR 0 1
76795: PUSH
76796: FOR_IN
76797: IFFALSE 76810
// ComExit ( i ) ;
76799: LD_VAR 0 3
76803: PPUSH
76804: CALL 76690 0 1
76808: GO 76796
76810: POP
76811: POP
// end ;
76812: LD_VAR 0 2
76816: RET
// export function ResetHc ; begin
76817: LD_INT 0
76819: PPUSH
// InitHc ;
76820: CALL_OW 19
// hc_importance := 0 ;
76824: LD_ADDR_OWVAR 32
76828: PUSH
76829: LD_INT 0
76831: ST_TO_ADDR
// end ;
76832: LD_VAR 0 1
76836: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76837: LD_INT 0
76839: PPUSH
76840: PPUSH
76841: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76842: LD_ADDR_VAR 0 6
76846: PUSH
76847: LD_VAR 0 1
76851: PUSH
76852: LD_VAR 0 3
76856: PLUS
76857: PUSH
76858: LD_INT 2
76860: DIV
76861: ST_TO_ADDR
// if _x < 0 then
76862: LD_VAR 0 6
76866: PUSH
76867: LD_INT 0
76869: LESS
76870: IFFALSE 76887
// _x := _x * - 1 ;
76872: LD_ADDR_VAR 0 6
76876: PUSH
76877: LD_VAR 0 6
76881: PUSH
76882: LD_INT 1
76884: NEG
76885: MUL
76886: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76887: LD_ADDR_VAR 0 7
76891: PUSH
76892: LD_VAR 0 2
76896: PUSH
76897: LD_VAR 0 4
76901: PLUS
76902: PUSH
76903: LD_INT 2
76905: DIV
76906: ST_TO_ADDR
// if _y < 0 then
76907: LD_VAR 0 7
76911: PUSH
76912: LD_INT 0
76914: LESS
76915: IFFALSE 76932
// _y := _y * - 1 ;
76917: LD_ADDR_VAR 0 7
76921: PUSH
76922: LD_VAR 0 7
76926: PUSH
76927: LD_INT 1
76929: NEG
76930: MUL
76931: ST_TO_ADDR
// result := [ _x , _y ] ;
76932: LD_ADDR_VAR 0 5
76936: PUSH
76937: LD_VAR 0 6
76941: PUSH
76942: LD_VAR 0 7
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: ST_TO_ADDR
// end ;
76951: LD_VAR 0 5
76955: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76956: LD_INT 0
76958: PPUSH
76959: PPUSH
76960: PPUSH
76961: PPUSH
// task := GetTaskList ( unit ) ;
76962: LD_ADDR_VAR 0 7
76966: PUSH
76967: LD_VAR 0 1
76971: PPUSH
76972: CALL_OW 437
76976: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76977: LD_VAR 0 7
76981: NOT
76982: PUSH
76983: LD_VAR 0 1
76987: PPUSH
76988: LD_VAR 0 2
76992: PPUSH
76993: CALL_OW 308
76997: NOT
76998: AND
76999: IFFALSE 77003
// exit ;
77001: GO 77121
// if IsInArea ( unit , area ) then
77003: LD_VAR 0 1
77007: PPUSH
77008: LD_VAR 0 2
77012: PPUSH
77013: CALL_OW 308
77017: IFFALSE 77035
// begin ComMoveToArea ( unit , goAway ) ;
77019: LD_VAR 0 1
77023: PPUSH
77024: LD_VAR 0 3
77028: PPUSH
77029: CALL_OW 113
// exit ;
77033: GO 77121
// end ; if task [ 1 ] [ 1 ] <> M then
77035: LD_VAR 0 7
77039: PUSH
77040: LD_INT 1
77042: ARRAY
77043: PUSH
77044: LD_INT 1
77046: ARRAY
77047: PUSH
77048: LD_STRING M
77050: NONEQUAL
77051: IFFALSE 77055
// exit ;
77053: GO 77121
// x := task [ 1 ] [ 2 ] ;
77055: LD_ADDR_VAR 0 5
77059: PUSH
77060: LD_VAR 0 7
77064: PUSH
77065: LD_INT 1
77067: ARRAY
77068: PUSH
77069: LD_INT 2
77071: ARRAY
77072: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77073: LD_ADDR_VAR 0 6
77077: PUSH
77078: LD_VAR 0 7
77082: PUSH
77083: LD_INT 1
77085: ARRAY
77086: PUSH
77087: LD_INT 3
77089: ARRAY
77090: ST_TO_ADDR
// if InArea ( x , y , area ) then
77091: LD_VAR 0 5
77095: PPUSH
77096: LD_VAR 0 6
77100: PPUSH
77101: LD_VAR 0 2
77105: PPUSH
77106: CALL_OW 309
77110: IFFALSE 77121
// ComStop ( unit ) ;
77112: LD_VAR 0 1
77116: PPUSH
77117: CALL_OW 141
// end ;
77121: LD_VAR 0 4
77125: RET
// export function Abs ( value ) ; begin
77126: LD_INT 0
77128: PPUSH
// result := value ;
77129: LD_ADDR_VAR 0 2
77133: PUSH
77134: LD_VAR 0 1
77138: ST_TO_ADDR
// if value < 0 then
77139: LD_VAR 0 1
77143: PUSH
77144: LD_INT 0
77146: LESS
77147: IFFALSE 77164
// result := value * - 1 ;
77149: LD_ADDR_VAR 0 2
77153: PUSH
77154: LD_VAR 0 1
77158: PUSH
77159: LD_INT 1
77161: NEG
77162: MUL
77163: ST_TO_ADDR
// end ;
77164: LD_VAR 0 2
77168: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77169: LD_INT 0
77171: PPUSH
77172: PPUSH
77173: PPUSH
77174: PPUSH
77175: PPUSH
77176: PPUSH
77177: PPUSH
77178: PPUSH
// if not unit or not building then
77179: LD_VAR 0 1
77183: NOT
77184: PUSH
77185: LD_VAR 0 2
77189: NOT
77190: OR
77191: IFFALSE 77195
// exit ;
77193: GO 77421
// x := GetX ( building ) ;
77195: LD_ADDR_VAR 0 4
77199: PUSH
77200: LD_VAR 0 2
77204: PPUSH
77205: CALL_OW 250
77209: ST_TO_ADDR
// y := GetY ( building ) ;
77210: LD_ADDR_VAR 0 6
77214: PUSH
77215: LD_VAR 0 2
77219: PPUSH
77220: CALL_OW 251
77224: ST_TO_ADDR
// d := GetDir ( building ) ;
77225: LD_ADDR_VAR 0 8
77229: PUSH
77230: LD_VAR 0 2
77234: PPUSH
77235: CALL_OW 254
77239: ST_TO_ADDR
// r := 4 ;
77240: LD_ADDR_VAR 0 9
77244: PUSH
77245: LD_INT 4
77247: ST_TO_ADDR
// for i := 1 to 5 do
77248: LD_ADDR_VAR 0 10
77252: PUSH
77253: DOUBLE
77254: LD_INT 1
77256: DEC
77257: ST_TO_ADDR
77258: LD_INT 5
77260: PUSH
77261: FOR_TO
77262: IFFALSE 77419
// begin _x := ShiftX ( x , d , r + i ) ;
77264: LD_ADDR_VAR 0 5
77268: PUSH
77269: LD_VAR 0 4
77273: PPUSH
77274: LD_VAR 0 8
77278: PPUSH
77279: LD_VAR 0 9
77283: PUSH
77284: LD_VAR 0 10
77288: PLUS
77289: PPUSH
77290: CALL_OW 272
77294: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77295: LD_ADDR_VAR 0 7
77299: PUSH
77300: LD_VAR 0 6
77304: PPUSH
77305: LD_VAR 0 8
77309: PPUSH
77310: LD_VAR 0 9
77314: PUSH
77315: LD_VAR 0 10
77319: PLUS
77320: PPUSH
77321: CALL_OW 273
77325: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77326: LD_VAR 0 5
77330: PPUSH
77331: LD_VAR 0 7
77335: PPUSH
77336: CALL_OW 488
77340: PUSH
77341: LD_VAR 0 5
77345: PPUSH
77346: LD_VAR 0 7
77350: PPUSH
77351: CALL_OW 428
77355: PPUSH
77356: CALL_OW 247
77360: PUSH
77361: LD_INT 3
77363: PUSH
77364: LD_INT 2
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: IN
77371: NOT
77372: AND
77373: IFFALSE 77417
// begin ComMoveXY ( unit , _x , _y ) ;
77375: LD_VAR 0 1
77379: PPUSH
77380: LD_VAR 0 5
77384: PPUSH
77385: LD_VAR 0 7
77389: PPUSH
77390: CALL_OW 111
// result := [ _x , _y ] ;
77394: LD_ADDR_VAR 0 3
77398: PUSH
77399: LD_VAR 0 5
77403: PUSH
77404: LD_VAR 0 7
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: ST_TO_ADDR
// exit ;
77413: POP
77414: POP
77415: GO 77421
// end ; end ;
77417: GO 77261
77419: POP
77420: POP
// end ;
77421: LD_VAR 0 3
77425: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77426: LD_INT 0
77428: PPUSH
77429: PPUSH
77430: PPUSH
// result := 0 ;
77431: LD_ADDR_VAR 0 3
77435: PUSH
77436: LD_INT 0
77438: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77439: LD_VAR 0 1
77443: PUSH
77444: LD_INT 0
77446: LESS
77447: PUSH
77448: LD_VAR 0 1
77452: PUSH
77453: LD_INT 8
77455: GREATER
77456: OR
77457: PUSH
77458: LD_VAR 0 2
77462: PUSH
77463: LD_INT 0
77465: LESS
77466: OR
77467: PUSH
77468: LD_VAR 0 2
77472: PUSH
77473: LD_INT 8
77475: GREATER
77476: OR
77477: IFFALSE 77481
// exit ;
77479: GO 77556
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77481: LD_ADDR_VAR 0 4
77485: PUSH
77486: LD_INT 22
77488: PUSH
77489: LD_VAR 0 2
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PPUSH
77498: CALL_OW 69
77502: PUSH
77503: FOR_IN
77504: IFFALSE 77554
// begin un := UnitShoot ( i ) ;
77506: LD_ADDR_VAR 0 5
77510: PUSH
77511: LD_VAR 0 4
77515: PPUSH
77516: CALL_OW 504
77520: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77521: LD_VAR 0 5
77525: PPUSH
77526: CALL_OW 255
77530: PUSH
77531: LD_VAR 0 1
77535: EQUAL
77536: IFFALSE 77552
// begin result := un ;
77538: LD_ADDR_VAR 0 3
77542: PUSH
77543: LD_VAR 0 5
77547: ST_TO_ADDR
// exit ;
77548: POP
77549: POP
77550: GO 77556
// end ; end ;
77552: GO 77503
77554: POP
77555: POP
// end ;
77556: LD_VAR 0 3
77560: RET
// export function GetCargoBay ( units ) ; begin
77561: LD_INT 0
77563: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77564: LD_ADDR_VAR 0 2
77568: PUSH
77569: LD_VAR 0 1
77573: PPUSH
77574: LD_INT 2
77576: PUSH
77577: LD_INT 34
77579: PUSH
77580: LD_INT 12
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: PUSH
77587: LD_INT 34
77589: PUSH
77590: LD_INT 51
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: PUSH
77597: LD_INT 34
77599: PUSH
77600: LD_INT 32
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: PUSH
77607: LD_INT 34
77609: PUSH
77610: LD_EXP 138
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: PPUSH
77626: CALL_OW 72
77630: ST_TO_ADDR
// end ;
77631: LD_VAR 0 2
77635: RET
// export function Negate ( value ) ; begin
77636: LD_INT 0
77638: PPUSH
// result := not value ;
77639: LD_ADDR_VAR 0 2
77643: PUSH
77644: LD_VAR 0 1
77648: NOT
77649: ST_TO_ADDR
// end ;
77650: LD_VAR 0 2
77654: RET
// export function Inc ( value ) ; begin
77655: LD_INT 0
77657: PPUSH
// result := value + 1 ;
77658: LD_ADDR_VAR 0 2
77662: PUSH
77663: LD_VAR 0 1
77667: PUSH
77668: LD_INT 1
77670: PLUS
77671: ST_TO_ADDR
// end ;
77672: LD_VAR 0 2
77676: RET
// export function Dec ( value ) ; begin
77677: LD_INT 0
77679: PPUSH
// result := value - 1 ;
77680: LD_ADDR_VAR 0 2
77684: PUSH
77685: LD_VAR 0 1
77689: PUSH
77690: LD_INT 1
77692: MINUS
77693: ST_TO_ADDR
// end ;
77694: LD_VAR 0 2
77698: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77699: LD_INT 0
77701: PPUSH
77702: PPUSH
77703: PPUSH
77704: PPUSH
77705: PPUSH
77706: PPUSH
77707: PPUSH
77708: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77709: LD_VAR 0 1
77713: PPUSH
77714: LD_VAR 0 2
77718: PPUSH
77719: CALL_OW 488
77723: NOT
77724: PUSH
77725: LD_VAR 0 3
77729: PPUSH
77730: LD_VAR 0 4
77734: PPUSH
77735: CALL_OW 488
77739: NOT
77740: OR
77741: IFFALSE 77754
// begin result := - 1 ;
77743: LD_ADDR_VAR 0 5
77747: PUSH
77748: LD_INT 1
77750: NEG
77751: ST_TO_ADDR
// exit ;
77752: GO 77989
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77754: LD_ADDR_VAR 0 12
77758: PUSH
77759: LD_VAR 0 1
77763: PPUSH
77764: LD_VAR 0 2
77768: PPUSH
77769: LD_VAR 0 3
77773: PPUSH
77774: LD_VAR 0 4
77778: PPUSH
77779: CALL 76837 0 4
77783: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77784: LD_ADDR_VAR 0 11
77788: PUSH
77789: LD_VAR 0 1
77793: PPUSH
77794: LD_VAR 0 2
77798: PPUSH
77799: LD_VAR 0 12
77803: PUSH
77804: LD_INT 1
77806: ARRAY
77807: PPUSH
77808: LD_VAR 0 12
77812: PUSH
77813: LD_INT 2
77815: ARRAY
77816: PPUSH
77817: CALL_OW 298
77821: ST_TO_ADDR
// distance := 9999 ;
77822: LD_ADDR_VAR 0 10
77826: PUSH
77827: LD_INT 9999
77829: ST_TO_ADDR
// for i := 0 to 5 do
77830: LD_ADDR_VAR 0 6
77834: PUSH
77835: DOUBLE
77836: LD_INT 0
77838: DEC
77839: ST_TO_ADDR
77840: LD_INT 5
77842: PUSH
77843: FOR_TO
77844: IFFALSE 77987
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77846: LD_ADDR_VAR 0 7
77850: PUSH
77851: LD_VAR 0 1
77855: PPUSH
77856: LD_VAR 0 6
77860: PPUSH
77861: LD_VAR 0 11
77865: PPUSH
77866: CALL_OW 272
77870: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77871: LD_ADDR_VAR 0 8
77875: PUSH
77876: LD_VAR 0 2
77880: PPUSH
77881: LD_VAR 0 6
77885: PPUSH
77886: LD_VAR 0 11
77890: PPUSH
77891: CALL_OW 273
77895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77896: LD_VAR 0 7
77900: PPUSH
77901: LD_VAR 0 8
77905: PPUSH
77906: CALL_OW 488
77910: NOT
77911: IFFALSE 77915
// continue ;
77913: GO 77843
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77915: LD_ADDR_VAR 0 9
77919: PUSH
77920: LD_VAR 0 12
77924: PUSH
77925: LD_INT 1
77927: ARRAY
77928: PPUSH
77929: LD_VAR 0 12
77933: PUSH
77934: LD_INT 2
77936: ARRAY
77937: PPUSH
77938: LD_VAR 0 7
77942: PPUSH
77943: LD_VAR 0 8
77947: PPUSH
77948: CALL_OW 298
77952: ST_TO_ADDR
// if tmp < distance then
77953: LD_VAR 0 9
77957: PUSH
77958: LD_VAR 0 10
77962: LESS
77963: IFFALSE 77985
// begin result := i ;
77965: LD_ADDR_VAR 0 5
77969: PUSH
77970: LD_VAR 0 6
77974: ST_TO_ADDR
// distance := tmp ;
77975: LD_ADDR_VAR 0 10
77979: PUSH
77980: LD_VAR 0 9
77984: ST_TO_ADDR
// end ; end ;
77985: GO 77843
77987: POP
77988: POP
// end ;
77989: LD_VAR 0 5
77993: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77994: LD_INT 0
77996: PPUSH
77997: PPUSH
// if not driver or not IsInUnit ( driver ) then
77998: LD_VAR 0 1
78002: NOT
78003: PUSH
78004: LD_VAR 0 1
78008: PPUSH
78009: CALL_OW 310
78013: NOT
78014: OR
78015: IFFALSE 78019
// exit ;
78017: GO 78109
// vehicle := IsInUnit ( driver ) ;
78019: LD_ADDR_VAR 0 3
78023: PUSH
78024: LD_VAR 0 1
78028: PPUSH
78029: CALL_OW 310
78033: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78034: LD_VAR 0 1
78038: PPUSH
78039: LD_STRING \
78041: PUSH
78042: LD_INT 0
78044: PUSH
78045: LD_INT 0
78047: PUSH
78048: LD_INT 0
78050: PUSH
78051: LD_INT 0
78053: PUSH
78054: LD_INT 0
78056: PUSH
78057: LD_INT 0
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: PUSH
78069: LD_STRING E
78071: PUSH
78072: LD_INT 0
78074: PUSH
78075: LD_INT 0
78077: PUSH
78078: LD_VAR 0 3
78082: PUSH
78083: LD_INT 0
78085: PUSH
78086: LD_INT 0
78088: PUSH
78089: LD_INT 0
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: PPUSH
78105: CALL_OW 446
// end ;
78109: LD_VAR 0 2
78113: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78114: LD_INT 0
78116: PPUSH
78117: PPUSH
// if not driver or not IsInUnit ( driver ) then
78118: LD_VAR 0 1
78122: NOT
78123: PUSH
78124: LD_VAR 0 1
78128: PPUSH
78129: CALL_OW 310
78133: NOT
78134: OR
78135: IFFALSE 78139
// exit ;
78137: GO 78229
// vehicle := IsInUnit ( driver ) ;
78139: LD_ADDR_VAR 0 3
78143: PUSH
78144: LD_VAR 0 1
78148: PPUSH
78149: CALL_OW 310
78153: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78154: LD_VAR 0 1
78158: PPUSH
78159: LD_STRING \
78161: PUSH
78162: LD_INT 0
78164: PUSH
78165: LD_INT 0
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: LD_INT 0
78173: PUSH
78174: LD_INT 0
78176: PUSH
78177: LD_INT 0
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: PUSH
78189: LD_STRING E
78191: PUSH
78192: LD_INT 0
78194: PUSH
78195: LD_INT 0
78197: PUSH
78198: LD_VAR 0 3
78202: PUSH
78203: LD_INT 0
78205: PUSH
78206: LD_INT 0
78208: PUSH
78209: LD_INT 0
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PPUSH
78225: CALL_OW 447
// end ;
78229: LD_VAR 0 2
78233: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78234: LD_INT 0
78236: PPUSH
78237: PPUSH
78238: PPUSH
// tmp := [ ] ;
78239: LD_ADDR_VAR 0 5
78243: PUSH
78244: EMPTY
78245: ST_TO_ADDR
// for i in units do
78246: LD_ADDR_VAR 0 4
78250: PUSH
78251: LD_VAR 0 1
78255: PUSH
78256: FOR_IN
78257: IFFALSE 78295
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78259: LD_ADDR_VAR 0 5
78263: PUSH
78264: LD_VAR 0 5
78268: PPUSH
78269: LD_VAR 0 5
78273: PUSH
78274: LD_INT 1
78276: PLUS
78277: PPUSH
78278: LD_VAR 0 4
78282: PPUSH
78283: CALL_OW 256
78287: PPUSH
78288: CALL_OW 2
78292: ST_TO_ADDR
78293: GO 78256
78295: POP
78296: POP
// if not tmp then
78297: LD_VAR 0 5
78301: NOT
78302: IFFALSE 78306
// exit ;
78304: GO 78354
// if asc then
78306: LD_VAR 0 2
78310: IFFALSE 78334
// result := SortListByListAsc ( units , tmp ) else
78312: LD_ADDR_VAR 0 3
78316: PUSH
78317: LD_VAR 0 1
78321: PPUSH
78322: LD_VAR 0 5
78326: PPUSH
78327: CALL_OW 76
78331: ST_TO_ADDR
78332: GO 78354
// result := SortListByListDesc ( units , tmp ) ;
78334: LD_ADDR_VAR 0 3
78338: PUSH
78339: LD_VAR 0 1
78343: PPUSH
78344: LD_VAR 0 5
78348: PPUSH
78349: CALL_OW 77
78353: ST_TO_ADDR
// end ;
78354: LD_VAR 0 3
78358: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78359: LD_INT 0
78361: PPUSH
78362: PPUSH
// task := GetTaskList ( mech ) ;
78363: LD_ADDR_VAR 0 4
78367: PUSH
78368: LD_VAR 0 1
78372: PPUSH
78373: CALL_OW 437
78377: ST_TO_ADDR
// if not task then
78378: LD_VAR 0 4
78382: NOT
78383: IFFALSE 78387
// exit ;
78385: GO 78429
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78387: LD_ADDR_VAR 0 3
78391: PUSH
78392: LD_VAR 0 4
78396: PUSH
78397: LD_INT 1
78399: ARRAY
78400: PUSH
78401: LD_INT 1
78403: ARRAY
78404: PUSH
78405: LD_STRING r
78407: EQUAL
78408: PUSH
78409: LD_VAR 0 4
78413: PUSH
78414: LD_INT 1
78416: ARRAY
78417: PUSH
78418: LD_INT 4
78420: ARRAY
78421: PUSH
78422: LD_VAR 0 2
78426: EQUAL
78427: AND
78428: ST_TO_ADDR
// end ;
78429: LD_VAR 0 3
78433: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78434: LD_INT 0
78436: PPUSH
// SetDir ( unit , d ) ;
78437: LD_VAR 0 1
78441: PPUSH
78442: LD_VAR 0 4
78446: PPUSH
78447: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78451: LD_VAR 0 1
78455: PPUSH
78456: LD_VAR 0 2
78460: PPUSH
78461: LD_VAR 0 3
78465: PPUSH
78466: LD_VAR 0 5
78470: PPUSH
78471: CALL_OW 48
// end ;
78475: LD_VAR 0 6
78479: RET
// export function ToNaturalNumber ( number ) ; begin
78480: LD_INT 0
78482: PPUSH
// result := number div 1 ;
78483: LD_ADDR_VAR 0 2
78487: PUSH
78488: LD_VAR 0 1
78492: PUSH
78493: LD_INT 1
78495: DIV
78496: ST_TO_ADDR
// if number < 0 then
78497: LD_VAR 0 1
78501: PUSH
78502: LD_INT 0
78504: LESS
78505: IFFALSE 78515
// result := 0 ;
78507: LD_ADDR_VAR 0 2
78511: PUSH
78512: LD_INT 0
78514: ST_TO_ADDR
// end ;
78515: LD_VAR 0 2
78519: RET
// export function SortByClass ( units , class ) ; var un ; begin
78520: LD_INT 0
78522: PPUSH
78523: PPUSH
// if not units or not class then
78524: LD_VAR 0 1
78528: NOT
78529: PUSH
78530: LD_VAR 0 2
78534: NOT
78535: OR
78536: IFFALSE 78540
// exit ;
78538: GO 78635
// result := [ ] ;
78540: LD_ADDR_VAR 0 3
78544: PUSH
78545: EMPTY
78546: ST_TO_ADDR
// for un in units do
78547: LD_ADDR_VAR 0 4
78551: PUSH
78552: LD_VAR 0 1
78556: PUSH
78557: FOR_IN
78558: IFFALSE 78633
// if GetClass ( un ) = class then
78560: LD_VAR 0 4
78564: PPUSH
78565: CALL_OW 257
78569: PUSH
78570: LD_VAR 0 2
78574: EQUAL
78575: IFFALSE 78602
// result := Insert ( result , 1 , un ) else
78577: LD_ADDR_VAR 0 3
78581: PUSH
78582: LD_VAR 0 3
78586: PPUSH
78587: LD_INT 1
78589: PPUSH
78590: LD_VAR 0 4
78594: PPUSH
78595: CALL_OW 2
78599: ST_TO_ADDR
78600: GO 78631
// result := Replace ( result , result + 1 , un ) ;
78602: LD_ADDR_VAR 0 3
78606: PUSH
78607: LD_VAR 0 3
78611: PPUSH
78612: LD_VAR 0 3
78616: PUSH
78617: LD_INT 1
78619: PLUS
78620: PPUSH
78621: LD_VAR 0 4
78625: PPUSH
78626: CALL_OW 1
78630: ST_TO_ADDR
78631: GO 78557
78633: POP
78634: POP
// end ;
78635: LD_VAR 0 3
78639: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78640: LD_INT 0
78642: PPUSH
78643: PPUSH
78644: PPUSH
78645: PPUSH
78646: PPUSH
78647: PPUSH
78648: PPUSH
// result := [ ] ;
78649: LD_ADDR_VAR 0 4
78653: PUSH
78654: EMPTY
78655: ST_TO_ADDR
// if x - r < 0 then
78656: LD_VAR 0 1
78660: PUSH
78661: LD_VAR 0 3
78665: MINUS
78666: PUSH
78667: LD_INT 0
78669: LESS
78670: IFFALSE 78682
// min_x := 0 else
78672: LD_ADDR_VAR 0 8
78676: PUSH
78677: LD_INT 0
78679: ST_TO_ADDR
78680: GO 78698
// min_x := x - r ;
78682: LD_ADDR_VAR 0 8
78686: PUSH
78687: LD_VAR 0 1
78691: PUSH
78692: LD_VAR 0 3
78696: MINUS
78697: ST_TO_ADDR
// if y - r < 0 then
78698: LD_VAR 0 2
78702: PUSH
78703: LD_VAR 0 3
78707: MINUS
78708: PUSH
78709: LD_INT 0
78711: LESS
78712: IFFALSE 78724
// min_y := 0 else
78714: LD_ADDR_VAR 0 7
78718: PUSH
78719: LD_INT 0
78721: ST_TO_ADDR
78722: GO 78740
// min_y := y - r ;
78724: LD_ADDR_VAR 0 7
78728: PUSH
78729: LD_VAR 0 2
78733: PUSH
78734: LD_VAR 0 3
78738: MINUS
78739: ST_TO_ADDR
// max_x := x + r ;
78740: LD_ADDR_VAR 0 9
78744: PUSH
78745: LD_VAR 0 1
78749: PUSH
78750: LD_VAR 0 3
78754: PLUS
78755: ST_TO_ADDR
// max_y := y + r ;
78756: LD_ADDR_VAR 0 10
78760: PUSH
78761: LD_VAR 0 2
78765: PUSH
78766: LD_VAR 0 3
78770: PLUS
78771: ST_TO_ADDR
// for _x = min_x to max_x do
78772: LD_ADDR_VAR 0 5
78776: PUSH
78777: DOUBLE
78778: LD_VAR 0 8
78782: DEC
78783: ST_TO_ADDR
78784: LD_VAR 0 9
78788: PUSH
78789: FOR_TO
78790: IFFALSE 78891
// for _y = min_y to max_y do
78792: LD_ADDR_VAR 0 6
78796: PUSH
78797: DOUBLE
78798: LD_VAR 0 7
78802: DEC
78803: ST_TO_ADDR
78804: LD_VAR 0 10
78808: PUSH
78809: FOR_TO
78810: IFFALSE 78887
// begin if not ValidHex ( _x , _y ) then
78812: LD_VAR 0 5
78816: PPUSH
78817: LD_VAR 0 6
78821: PPUSH
78822: CALL_OW 488
78826: NOT
78827: IFFALSE 78831
// continue ;
78829: GO 78809
// if GetResourceTypeXY ( _x , _y ) then
78831: LD_VAR 0 5
78835: PPUSH
78836: LD_VAR 0 6
78840: PPUSH
78841: CALL_OW 283
78845: IFFALSE 78885
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78847: LD_ADDR_VAR 0 4
78851: PUSH
78852: LD_VAR 0 4
78856: PPUSH
78857: LD_VAR 0 4
78861: PUSH
78862: LD_INT 1
78864: PLUS
78865: PPUSH
78866: LD_VAR 0 5
78870: PUSH
78871: LD_VAR 0 6
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PPUSH
78880: CALL_OW 1
78884: ST_TO_ADDR
// end ;
78885: GO 78809
78887: POP
78888: POP
78889: GO 78789
78891: POP
78892: POP
// end ;
78893: LD_VAR 0 4
78897: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78898: LD_INT 0
78900: PPUSH
78901: PPUSH
78902: PPUSH
78903: PPUSH
78904: PPUSH
78905: PPUSH
78906: PPUSH
78907: PPUSH
// if not units then
78908: LD_VAR 0 1
78912: NOT
78913: IFFALSE 78917
// exit ;
78915: GO 79443
// result := UnitFilter ( units , [ f_ok ] ) ;
78917: LD_ADDR_VAR 0 3
78921: PUSH
78922: LD_VAR 0 1
78926: PPUSH
78927: LD_INT 50
78929: PUSH
78930: EMPTY
78931: LIST
78932: PPUSH
78933: CALL_OW 72
78937: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78938: LD_ADDR_VAR 0 8
78942: PUSH
78943: LD_VAR 0 1
78947: PUSH
78948: LD_INT 1
78950: ARRAY
78951: PPUSH
78952: CALL_OW 255
78956: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78957: LD_ADDR_VAR 0 10
78961: PUSH
78962: LD_INT 29
78964: PUSH
78965: LD_EXP 141
78969: PUSH
78970: LD_INT 49
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: LIST
78977: ST_TO_ADDR
// if not result then
78978: LD_VAR 0 3
78982: NOT
78983: IFFALSE 78987
// exit ;
78985: GO 79443
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78987: LD_ADDR_VAR 0 5
78991: PUSH
78992: LD_INT 81
78994: PUSH
78995: LD_VAR 0 8
78999: PUSH
79000: EMPTY
79001: LIST
79002: LIST
79003: PPUSH
79004: CALL_OW 69
79008: ST_TO_ADDR
// for i in result do
79009: LD_ADDR_VAR 0 4
79013: PUSH
79014: LD_VAR 0 3
79018: PUSH
79019: FOR_IN
79020: IFFALSE 79441
// begin tag := GetTag ( i ) + 1 ;
79022: LD_ADDR_VAR 0 9
79026: PUSH
79027: LD_VAR 0 4
79031: PPUSH
79032: CALL_OW 110
79036: PUSH
79037: LD_INT 1
79039: PLUS
79040: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79041: LD_ADDR_VAR 0 7
79045: PUSH
79046: LD_VAR 0 4
79050: PPUSH
79051: CALL_OW 250
79055: PPUSH
79056: LD_VAR 0 4
79060: PPUSH
79061: CALL_OW 251
79065: PPUSH
79066: LD_INT 6
79068: PPUSH
79069: CALL 78640 0 3
79073: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79074: LD_VAR 0 4
79078: PPUSH
79079: CALL_OW 247
79083: PUSH
79084: LD_INT 2
79086: EQUAL
79087: PUSH
79088: LD_VAR 0 7
79092: AND
79093: PUSH
79094: LD_VAR 0 4
79098: PPUSH
79099: CALL_OW 264
79103: PUSH
79104: LD_VAR 0 10
79108: IN
79109: NOT
79110: AND
79111: IFFALSE 79150
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79113: LD_VAR 0 4
79117: PPUSH
79118: LD_VAR 0 7
79122: PUSH
79123: LD_INT 1
79125: ARRAY
79126: PUSH
79127: LD_INT 1
79129: ARRAY
79130: PPUSH
79131: LD_VAR 0 7
79135: PUSH
79136: LD_INT 1
79138: ARRAY
79139: PUSH
79140: LD_INT 2
79142: ARRAY
79143: PPUSH
79144: CALL_OW 116
79148: GO 79439
// if path > tag then
79150: LD_VAR 0 2
79154: PUSH
79155: LD_VAR 0 9
79159: GREATER
79160: IFFALSE 79368
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79162: LD_ADDR_VAR 0 6
79166: PUSH
79167: LD_VAR 0 5
79171: PPUSH
79172: LD_INT 91
79174: PUSH
79175: LD_VAR 0 4
79179: PUSH
79180: LD_INT 8
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: LIST
79187: PPUSH
79188: CALL_OW 72
79192: ST_TO_ADDR
// if nearEnemy then
79193: LD_VAR 0 6
79197: IFFALSE 79266
// begin if GetWeapon ( i ) = ru_time_lapser then
79199: LD_VAR 0 4
79203: PPUSH
79204: CALL_OW 264
79208: PUSH
79209: LD_INT 49
79211: EQUAL
79212: IFFALSE 79240
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79214: LD_VAR 0 4
79218: PPUSH
79219: LD_VAR 0 6
79223: PPUSH
79224: LD_VAR 0 4
79228: PPUSH
79229: CALL_OW 74
79233: PPUSH
79234: CALL_OW 112
79238: GO 79264
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79240: LD_VAR 0 4
79244: PPUSH
79245: LD_VAR 0 6
79249: PPUSH
79250: LD_VAR 0 4
79254: PPUSH
79255: CALL_OW 74
79259: PPUSH
79260: CALL_OW 115
// end else
79264: GO 79366
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79266: LD_VAR 0 4
79270: PPUSH
79271: LD_VAR 0 2
79275: PUSH
79276: LD_VAR 0 9
79280: ARRAY
79281: PUSH
79282: LD_INT 1
79284: ARRAY
79285: PPUSH
79286: LD_VAR 0 2
79290: PUSH
79291: LD_VAR 0 9
79295: ARRAY
79296: PUSH
79297: LD_INT 2
79299: ARRAY
79300: PPUSH
79301: CALL_OW 297
79305: PUSH
79306: LD_INT 6
79308: GREATER
79309: IFFALSE 79352
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79311: LD_VAR 0 4
79315: PPUSH
79316: LD_VAR 0 2
79320: PUSH
79321: LD_VAR 0 9
79325: ARRAY
79326: PUSH
79327: LD_INT 1
79329: ARRAY
79330: PPUSH
79331: LD_VAR 0 2
79335: PUSH
79336: LD_VAR 0 9
79340: ARRAY
79341: PUSH
79342: LD_INT 2
79344: ARRAY
79345: PPUSH
79346: CALL_OW 114
79350: GO 79366
// SetTag ( i , tag ) ;
79352: LD_VAR 0 4
79356: PPUSH
79357: LD_VAR 0 9
79361: PPUSH
79362: CALL_OW 109
// end else
79366: GO 79439
// if enemy then
79368: LD_VAR 0 5
79372: IFFALSE 79439
// begin if GetWeapon ( i ) = ru_time_lapser then
79374: LD_VAR 0 4
79378: PPUSH
79379: CALL_OW 264
79383: PUSH
79384: LD_INT 49
79386: EQUAL
79387: IFFALSE 79415
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79389: LD_VAR 0 4
79393: PPUSH
79394: LD_VAR 0 5
79398: PPUSH
79399: LD_VAR 0 4
79403: PPUSH
79404: CALL_OW 74
79408: PPUSH
79409: CALL_OW 112
79413: GO 79439
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79415: LD_VAR 0 4
79419: PPUSH
79420: LD_VAR 0 5
79424: PPUSH
79425: LD_VAR 0 4
79429: PPUSH
79430: CALL_OW 74
79434: PPUSH
79435: CALL_OW 115
// end ; end ;
79439: GO 79019
79441: POP
79442: POP
// end ;
79443: LD_VAR 0 3
79447: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79448: LD_INT 0
79450: PPUSH
79451: PPUSH
79452: PPUSH
// if not unit or IsInUnit ( unit ) then
79453: LD_VAR 0 1
79457: NOT
79458: PUSH
79459: LD_VAR 0 1
79463: PPUSH
79464: CALL_OW 310
79468: OR
79469: IFFALSE 79473
// exit ;
79471: GO 79564
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79473: LD_ADDR_VAR 0 4
79477: PUSH
79478: LD_VAR 0 1
79482: PPUSH
79483: CALL_OW 250
79487: PPUSH
79488: LD_VAR 0 2
79492: PPUSH
79493: LD_INT 1
79495: PPUSH
79496: CALL_OW 272
79500: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79501: LD_ADDR_VAR 0 5
79505: PUSH
79506: LD_VAR 0 1
79510: PPUSH
79511: CALL_OW 251
79515: PPUSH
79516: LD_VAR 0 2
79520: PPUSH
79521: LD_INT 1
79523: PPUSH
79524: CALL_OW 273
79528: ST_TO_ADDR
// if ValidHex ( x , y ) then
79529: LD_VAR 0 4
79533: PPUSH
79534: LD_VAR 0 5
79538: PPUSH
79539: CALL_OW 488
79543: IFFALSE 79564
// ComTurnXY ( unit , x , y ) ;
79545: LD_VAR 0 1
79549: PPUSH
79550: LD_VAR 0 4
79554: PPUSH
79555: LD_VAR 0 5
79559: PPUSH
79560: CALL_OW 118
// end ;
79564: LD_VAR 0 3
79568: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79569: LD_INT 0
79571: PPUSH
79572: PPUSH
// result := false ;
79573: LD_ADDR_VAR 0 3
79577: PUSH
79578: LD_INT 0
79580: ST_TO_ADDR
// if not units then
79581: LD_VAR 0 2
79585: NOT
79586: IFFALSE 79590
// exit ;
79588: GO 79635
// for i in units do
79590: LD_ADDR_VAR 0 4
79594: PUSH
79595: LD_VAR 0 2
79599: PUSH
79600: FOR_IN
79601: IFFALSE 79633
// if See ( side , i ) then
79603: LD_VAR 0 1
79607: PPUSH
79608: LD_VAR 0 4
79612: PPUSH
79613: CALL_OW 292
79617: IFFALSE 79631
// begin result := true ;
79619: LD_ADDR_VAR 0 3
79623: PUSH
79624: LD_INT 1
79626: ST_TO_ADDR
// exit ;
79627: POP
79628: POP
79629: GO 79635
// end ;
79631: GO 79600
79633: POP
79634: POP
// end ;
79635: LD_VAR 0 3
79639: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79640: LD_INT 0
79642: PPUSH
79643: PPUSH
79644: PPUSH
79645: PPUSH
// if not unit or not points then
79646: LD_VAR 0 1
79650: NOT
79651: PUSH
79652: LD_VAR 0 2
79656: NOT
79657: OR
79658: IFFALSE 79662
// exit ;
79660: GO 79752
// dist := 99999 ;
79662: LD_ADDR_VAR 0 5
79666: PUSH
79667: LD_INT 99999
79669: ST_TO_ADDR
// for i in points do
79670: LD_ADDR_VAR 0 4
79674: PUSH
79675: LD_VAR 0 2
79679: PUSH
79680: FOR_IN
79681: IFFALSE 79750
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79683: LD_ADDR_VAR 0 6
79687: PUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: LD_VAR 0 4
79697: PUSH
79698: LD_INT 1
79700: ARRAY
79701: PPUSH
79702: LD_VAR 0 4
79706: PUSH
79707: LD_INT 2
79709: ARRAY
79710: PPUSH
79711: CALL_OW 297
79715: ST_TO_ADDR
// if tmpDist < dist then
79716: LD_VAR 0 6
79720: PUSH
79721: LD_VAR 0 5
79725: LESS
79726: IFFALSE 79748
// begin result := i ;
79728: LD_ADDR_VAR 0 3
79732: PUSH
79733: LD_VAR 0 4
79737: ST_TO_ADDR
// dist := tmpDist ;
79738: LD_ADDR_VAR 0 5
79742: PUSH
79743: LD_VAR 0 6
79747: ST_TO_ADDR
// end ; end ;
79748: GO 79680
79750: POP
79751: POP
// end ;
79752: LD_VAR 0 3
79756: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79757: LD_INT 0
79759: PPUSH
// uc_side := side ;
79760: LD_ADDR_OWVAR 20
79764: PUSH
79765: LD_VAR 0 1
79769: ST_TO_ADDR
// uc_nation := 3 ;
79770: LD_ADDR_OWVAR 21
79774: PUSH
79775: LD_INT 3
79777: ST_TO_ADDR
// vc_chassis := 25 ;
79778: LD_ADDR_OWVAR 37
79782: PUSH
79783: LD_INT 25
79785: ST_TO_ADDR
// vc_engine := engine_siberite ;
79786: LD_ADDR_OWVAR 39
79790: PUSH
79791: LD_INT 3
79793: ST_TO_ADDR
// vc_control := control_computer ;
79794: LD_ADDR_OWVAR 38
79798: PUSH
79799: LD_INT 3
79801: ST_TO_ADDR
// vc_weapon := 59 ;
79802: LD_ADDR_OWVAR 40
79806: PUSH
79807: LD_INT 59
79809: ST_TO_ADDR
// result := CreateVehicle ;
79810: LD_ADDR_VAR 0 5
79814: PUSH
79815: CALL_OW 45
79819: ST_TO_ADDR
// SetDir ( result , d ) ;
79820: LD_VAR 0 5
79824: PPUSH
79825: LD_VAR 0 4
79829: PPUSH
79830: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79834: LD_VAR 0 5
79838: PPUSH
79839: LD_VAR 0 2
79843: PPUSH
79844: LD_VAR 0 3
79848: PPUSH
79849: LD_INT 0
79851: PPUSH
79852: CALL_OW 48
// end ;
79856: LD_VAR 0 5
79860: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79861: LD_INT 0
79863: PPUSH
79864: PPUSH
79865: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79866: LD_ADDR_VAR 0 2
79870: PUSH
79871: LD_INT 0
79873: PUSH
79874: LD_INT 0
79876: PUSH
79877: LD_INT 0
79879: PUSH
79880: LD_INT 0
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79889: LD_VAR 0 1
79893: NOT
79894: PUSH
79895: LD_VAR 0 1
79899: PPUSH
79900: CALL_OW 264
79904: PUSH
79905: LD_INT 12
79907: PUSH
79908: LD_INT 51
79910: PUSH
79911: LD_INT 32
79913: PUSH
79914: LD_EXP 138
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: LIST
79923: LIST
79924: IN
79925: NOT
79926: OR
79927: IFFALSE 79931
// exit ;
79929: GO 80029
// for i := 1 to 3 do
79931: LD_ADDR_VAR 0 3
79935: PUSH
79936: DOUBLE
79937: LD_INT 1
79939: DEC
79940: ST_TO_ADDR
79941: LD_INT 3
79943: PUSH
79944: FOR_TO
79945: IFFALSE 80027
// begin tmp := GetCargo ( cargo , i ) ;
79947: LD_ADDR_VAR 0 4
79951: PUSH
79952: LD_VAR 0 1
79956: PPUSH
79957: LD_VAR 0 3
79961: PPUSH
79962: CALL_OW 289
79966: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79967: LD_ADDR_VAR 0 2
79971: PUSH
79972: LD_VAR 0 2
79976: PPUSH
79977: LD_VAR 0 3
79981: PPUSH
79982: LD_VAR 0 4
79986: PPUSH
79987: CALL_OW 1
79991: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79992: LD_ADDR_VAR 0 2
79996: PUSH
79997: LD_VAR 0 2
80001: PPUSH
80002: LD_INT 4
80004: PPUSH
80005: LD_VAR 0 2
80009: PUSH
80010: LD_INT 4
80012: ARRAY
80013: PUSH
80014: LD_VAR 0 4
80018: PLUS
80019: PPUSH
80020: CALL_OW 1
80024: ST_TO_ADDR
// end ;
80025: GO 79944
80027: POP
80028: POP
// end ;
80029: LD_VAR 0 2
80033: RET
// export function Length ( array ) ; begin
80034: LD_INT 0
80036: PPUSH
// result := array + 0 ;
80037: LD_ADDR_VAR 0 2
80041: PUSH
80042: LD_VAR 0 1
80046: PUSH
80047: LD_INT 0
80049: PLUS
80050: ST_TO_ADDR
// end ;
80051: LD_VAR 0 2
80055: RET
// export function PrepareArray ( array ) ; begin
80056: LD_INT 0
80058: PPUSH
// result := array diff 0 ;
80059: LD_ADDR_VAR 0 2
80063: PUSH
80064: LD_VAR 0 1
80068: PUSH
80069: LD_INT 0
80071: DIFF
80072: ST_TO_ADDR
// if not result [ 1 ] then
80073: LD_VAR 0 2
80077: PUSH
80078: LD_INT 1
80080: ARRAY
80081: NOT
80082: IFFALSE 80102
// result := Delete ( result , 1 ) ;
80084: LD_ADDR_VAR 0 2
80088: PUSH
80089: LD_VAR 0 2
80093: PPUSH
80094: LD_INT 1
80096: PPUSH
80097: CALL_OW 3
80101: ST_TO_ADDR
// end ;
80102: LD_VAR 0 2
80106: RET
