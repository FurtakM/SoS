// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1495 0 0
// Nef_PrepareNature ;
 250: CALL 4397 0 0
// MissionIntro ;
 254: CALL 10406 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 409: LD_ADDR_EXP 33
 413: PUSH
 414: LD_INT 2
 416: NEG
 417: PUSH
 418: LD_INT 1
 420: NEG
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 436: LD_ADDR_EXP 34
 440: PUSH
 441: LD_INT 135
 443: PUSH
 444: LD_INT 8
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 135
 453: PUSH
 454: LD_INT 4
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 134
 463: PUSH
 464: LD_INT 19
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 132
 473: PUSH
 474: LD_INT 26
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 128
 483: PUSH
 484: LD_INT 31
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 123
 493: PUSH
 494: LD_INT 37
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 118
 503: PUSH
 504: LD_INT 45
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 112
 513: PUSH
 514: LD_INT 51
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 106
 523: PUSH
 524: LD_INT 57
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 99
 533: PUSH
 534: LD_INT 62
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 93
 543: PUSH
 544: LD_INT 67
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 86
 553: PUSH
 554: LD_INT 72
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 78
 563: PUSH
 564: LD_INT 75
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 71
 573: PUSH
 574: LD_INT 81
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 69
 583: PUSH
 584: LD_INT 88
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 71
 593: PUSH
 594: LD_INT 95
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 74
 603: PUSH
 604: LD_INT 103
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 80
 613: PUSH
 614: LD_INT 113
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 84
 623: PUSH
 624: LD_INT 121
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 89
 633: PUSH
 634: LD_INT 132
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 92
 643: PUSH
 644: LD_INT 142
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 93
 653: PUSH
 654: LD_INT 151
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 91
 663: PUSH
 664: LD_INT 157
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 90
 673: PUSH
 674: LD_INT 163
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 93
 683: PUSH
 684: LD_INT 171
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 92
 693: PUSH
 694: LD_INT 177
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 135
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 135
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 134
 756: PUSH
 757: LD_INT 19
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 132
 766: PUSH
 767: LD_INT 26
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 128
 776: PUSH
 777: LD_INT 31
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 123
 786: PUSH
 787: LD_INT 37
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 118
 796: PUSH
 797: LD_INT 45
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 112
 806: PUSH
 807: LD_INT 51
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 106
 816: PUSH
 817: LD_INT 57
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 99
 826: PUSH
 827: LD_INT 62
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 104
 836: PUSH
 837: LD_INT 71
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 110
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 119
 856: PUSH
 857: LD_INT 88
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 128
 866: PUSH
 867: LD_INT 97
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 135
 876: PUSH
 877: LD_INT 106
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 141
 886: PUSH
 887: LD_INT 120
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 143
 896: PUSH
 897: LD_INT 132
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 143
 906: PUSH
 907: LD_INT 142
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 140
 916: PUSH
 917: LD_INT 149
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 132
 926: PUSH
 927: LD_INT 153
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 125
 936: PUSH
 937: LD_INT 155
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 115
 946: PUSH
 947: LD_INT 154
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 105
 956: PUSH
 957: LD_INT 153
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 93
 966: PUSH
 967: LD_INT 151
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 91
 976: PUSH
 977: LD_INT 157
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 163
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 93
 996: PUSH
 997: LD_INT 171
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 92
1006: PUSH
1007: LD_INT 177
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1044: LD_ADDR_EXP 36
1048: PUSH
1049: LD_INT 40
1051: PUSH
1052: LD_INT 35
1054: PUSH
1055: LD_INT 30
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1069: LD_ADDR_EXP 37
1073: PUSH
1074: LD_INT 50
1076: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1077: LD_ADDR_EXP 14
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 19
1087: PUSH
1088: LD_INT 17
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1102: LD_ADDR_EXP 38
1106: PUSH
1107: LD_INT 3
1109: PUSH
1110: LD_INT 4
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 4
1137: PUSH
1138: LD_INT 4
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: ST_TO_ADDR
// arabianTroopsMin = 7 ;
1152: LD_ADDR_EXP 40
1156: PUSH
1157: LD_INT 7
1159: ST_TO_ADDR
// arabianTroopsMax = 7 ;
1160: LD_ADDR_EXP 41
1164: PUSH
1165: LD_INT 7
1167: ST_TO_ADDR
// end ;
1168: LD_VAR 0 1
1172: RET
// every 0 0$1 trigger debugMode do var i ;
1173: LD_EXP 31
1177: IFFALSE 1492
1179: GO 1181
1181: DISABLE
1182: LD_INT 0
1184: PPUSH
// begin enable ;
1185: ENABLE
// FogOff ( your_side ) ;
1186: LD_OWVAR 2
1190: PPUSH
1191: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1195: LD_ADDR_VAR 0 1
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_OWVAR 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 21
1227: PUSH
1228: LD_INT 2
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: PUSH
1249: FOR_IN
1250: IFFALSE 1266
// SetLives ( i , 1000 ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 234
1264: GO 1249
1266: POP
1267: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1268: LD_ADDR_VAR 0 1
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_OWVAR 2
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1369
// begin SetSkill ( i , skill_combat , 10 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1322: LD_VAR 0 1
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: LD_INT 10
1332: PPUSH
1333: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1337: LD_VAR 0 1
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 10
1347: PPUSH
1348: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1352: LD_VAR 0 1
1356: PPUSH
1357: LD_INT 4
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: CALL_OW 237
// end ;
1367: GO 1304
1369: POP
1370: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1371: LD_ADDR_VAR 0 1
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_OWVAR 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1490
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 9999
1443: PPUSH
1444: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 274
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 9999
1463: PPUSH
1464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 274
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 9999
1483: PPUSH
1484: CALL_OW 277
// end ;
1488: GO 1425
1490: POP
1491: POP
// end ; end_of_file
1492: PPOPN 1
1494: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1495: LD_INT 0
1497: PPUSH
// randomsToSave = [ ] ;
1498: LD_ADDR_EXP 62
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1505: LD_ADDR_EXP 57
1509: PUSH
1510: EMPTY
1511: ST_TO_ADDR
// ruCars = [ ] ;
1512: LD_ADDR_EXP 61
1516: PUSH
1517: EMPTY
1518: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1519: CALL 2327 0 0
// PrepareHeroes ;
1523: CALL 1532 0 0
// end ;
1527: LD_VAR 0 1
1531: RET
// function PrepareHeroes ; var i , current ; begin
1532: LD_INT 0
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation = 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1553: LD_ADDR_EXP 42
1557: PUSH
1558: LD_STRING Burlak
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: CALL 9385 0 3
1571: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1572: LD_ADDR_EXP 43
1576: PUSH
1577: LD_STRING Gnyevko
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: CALL 9385 0 3
1590: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_STRING Kovalyuk
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL 9385 0 3
1609: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1610: LD_ADDR_EXP 44
1614: PUSH
1615: LD_STRING Kirilenkova
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: CALL 9385 0 3
1628: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1629: LD_ADDR_EXP 46
1633: PUSH
1634: LD_STRING Belkov
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL 9385 0 3
1647: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1648: LD_ADDR_EXP 47
1652: PUSH
1653: LD_STRING Belkov2
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL 9385 0 3
1666: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1667: LD_ADDR_EXP 48
1671: PUSH
1672: LD_STRING Scholtze
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 4
1680: PPUSH
1681: CALL 9385 0 3
1685: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1686: LD_ADDR_EXP 52
1690: PUSH
1691: LD_STRING Popov
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 9385 0 3
1704: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1705: LD_ADDR_EXP 53
1709: PUSH
1710: LD_STRING Platonov
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL 9385 0 3
1723: ST_TO_ADDR
// uc_side = 6 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 6
1731: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1732: LD_ADDR_EXP 54
1736: PUSH
1737: LD_STRING Gaydar
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 9385 0 3
1750: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1751: LD_ADDR_EXP 49
1755: PUSH
1756: LD_STRING Kuzmov
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 9385 0 3
1769: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1770: LD_EXP 49
1774: PPUSH
1775: LD_INT 109
1777: PPUSH
1778: LD_INT 108
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 50
// ComHold ( Kuzmov ) ;
1791: LD_EXP 49
1795: PPUSH
1796: CALL_OW 140
// uc_side = 3 ;
1800: LD_ADDR_OWVAR 20
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1808: LD_EXP 42
1812: PUSH
1813: LD_EXP 43
1817: PUSH
1818: LD_EXP 44
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_EXP 46
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_EXP 48
1842: PUSH
1843: LD_EXP 52
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 2
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL 9468 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_STRING 03_other_survivors
1875: PPUSH
1876: CALL_OW 31
1880: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1881: LD_ADDR_EXP 51
1885: PUSH
1886: LD_STRING 03_other_kirov
1888: PPUSH
1889: CALL_OW 31
1893: ST_TO_ADDR
// for i in other_survivors do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: LD_EXP 50
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1970
// begin if ruCars then
1907: LD_EXP 61
1911: IFFALSE 1953
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_EXP 61
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1931: LD_ADDR_EXP 61
1935: PUSH
1936: LD_EXP 61
1940: PUSH
1941: LD_EXP 61
1945: PUSH
1946: LD_INT 1
1948: ARRAY
1949: DIFF
1950: ST_TO_ADDR
// end else
1951: GO 1968
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ;
1968: GO 1904
1970: POP
1971: POP
// for i in other_kirov_survivors do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_EXP 51
1981: PUSH
1982: FOR_IN
1983: IFFALSE 2048
// begin if ruCars then
1985: LD_EXP 61
1989: IFFALSE 2031
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_EXP 61
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2009: LD_ADDR_EXP 61
2013: PUSH
2014: LD_EXP 61
2018: PUSH
2019: LD_EXP 61
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: DIFF
2028: ST_TO_ADDR
// end else
2029: GO 2046
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ;
2046: GO 1982
2048: POP
2049: POP
// PrepareSoldier ( sex_male , 1 ) ;
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 381
// dialogRus = CreateHuman ;
2060: LD_ADDR_EXP 59
2064: PUSH
2065: CALL_OW 44
2069: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2070: LD_EXP 50
2074: PUSH
2075: LD_EXP 51
2079: PLUS
2080: PUSH
2081: LD_EXP 43
2085: PUSH
2086: LD_EXP 44
2090: PUSH
2091: LD_EXP 45
2095: PUSH
2096: LD_EXP 46
2100: PUSH
2101: LD_EXP 47
2105: PUSH
2106: LD_EXP 48
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PLUS
2119: PUSH
2120: LD_INT 8
2122: LESS
2123: IFFALSE 2322
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 50
2134: PUSH
2135: LD_EXP 51
2139: PLUS
2140: PUSH
2141: LD_EXP 43
2145: PUSH
2146: LD_EXP 44
2150: PUSH
2151: LD_EXP 45
2155: PUSH
2156: LD_EXP 46
2160: PUSH
2161: LD_EXP 47
2165: PUSH
2166: LD_EXP 48
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PLUS
2179: ST_TO_ADDR
// current = 8 - current ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 8
2187: PUSH
2188: LD_VAR 0 3
2192: MINUS
2193: ST_TO_ADDR
// for i := 1 to current do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_VAR 0 3
2208: PUSH
2209: FOR_TO
2210: IFFALSE 2320
// begin uc_nation = 3 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// uc_side = 3 ;
2220: LD_ADDR_OWVAR 20
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2228: LD_INT 0
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 4
2236: PPUSH
2237: CALL_OW 12
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 12
2252: PPUSH
2253: CALL_OW 380
// if ruCars then
2257: LD_EXP 61
2261: IFFALSE 2303
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2263: CALL_OW 44
2267: PPUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2281: LD_ADDR_EXP 61
2285: PUSH
2286: LD_EXP 61
2290: PUSH
2291: LD_EXP 61
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: DIFF
2300: ST_TO_ADDR
// end else
2301: GO 2318
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2303: CALL_OW 44
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// end ;
2318: GO 2209
2320: POP
2321: POP
// end ; end ;
2322: LD_VAR 0 1
2326: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2327: LD_INT 0
2329: PPUSH
2330: PPUSH
2331: PPUSH
// uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_EXP 5
2362: PUSH
2363: FOR_TO
2364: IFFALSE 2513
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2366: LD_ADDR_OWVAR 37
2370: PUSH
2371: LD_EXP 5
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2386: LD_ADDR_OWVAR 39
2390: PUSH
2391: LD_EXP 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2406: LD_ADDR_OWVAR 38
2410: PUSH
2411: LD_EXP 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 3
2424: ARRAY
2425: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_EXP 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 4
2444: ARRAY
2445: ST_TO_ADDR
// uc_direction := 3 ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 3
2453: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2454: LD_ADDR_OWVAR 41
2458: PUSH
2459: LD_INT 25
2461: PPUSH
2462: LD_INT 30
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// car := CreateVehicle ;
2470: LD_ADDR_VAR 0 3
2474: PUSH
2475: CALL_OW 45
2479: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2480: LD_ADDR_EXP 61
2484: PUSH
2485: LD_EXP 61
2489: PUSH
2490: LD_VAR 0 3
2494: ADD
2495: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2363
2513: POP
2514: POP
// end ;
2515: LD_VAR 0 1
2519: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// rnd = rand ( 1 , 4 ) ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 4
2540: PPUSH
2541: CALL_OW 12
2545: ST_TO_ADDR
// uc_side = 6 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 6
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// if rnd < 4 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 4
2569: LESS
2570: IFFALSE 2946
// begin vc_chassis = ru_medium_wheeled ;
2572: LD_ADDR_OWVAR 37
2576: PUSH
2577: LD_INT 21
2579: ST_TO_ADDR
// vc_control = control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_engine = engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 100
2606: PPUSH
2607: CALL_OW 12
2611: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2612: LD_VAR 0 5
2616: PUSH
2617: LD_EXP 37
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: LESS
2626: IFFALSE 2638
// vc_weapon = ru_cargo_bay else
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 51
2635: ST_TO_ADDR
2636: GO 2669
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 42
2645: PUSH
2646: LD_INT 43
2648: PUSH
2649: LD_INT 44
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// vehicle = CreateVehicle ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2679: LD_VAR 0 7
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 12
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 12
2730: PPUSH
2731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2735: CALL_OW 44
2739: PPUSH
2740: LD_VAR 0 7
2744: PPUSH
2745: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2749: LD_OWVAR 40
2753: PUSH
2754: LD_INT 51
2756: EQUAL
2757: IFFALSE 2774
// AddCargo ( vehicle , mat_cans , 100 ) ;
2759: LD_VAR 0 7
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2774: LD_VAR 0 7
2778: PPUSH
2779: LD_INT 500
2781: PPUSH
2782: LD_INT 1000
2784: PPUSH
2785: CALL_OW 12
2789: PPUSH
2790: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: CALL_OW 12
2809: ST_TO_ADDR
// if rnd = 1 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2883
// for i := 3 to russianCargoPath1 do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: DOUBLE
2826: LD_INT 3
2828: DEC
2829: ST_TO_ADDR
2830: LD_EXP 34
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2879
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2838: LD_VAR 0 7
2842: PPUSH
2843: LD_EXP 34
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: ARRAY
2857: PPUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 2
2867: ARRAY
2868: PUSH
2869: LD_INT 2
2871: ARRAY
2872: PPUSH
2873: CALL_OW 171
2877: GO 2835
2879: POP
2880: POP
2881: GO 2944
// for i := 3 to russianCargoPath2 do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: DOUBLE
2889: LD_INT 3
2891: DEC
2892: ST_TO_ADDR
2893: LD_EXP 35
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2942
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2901: LD_VAR 0 7
2905: PPUSH
2906: LD_EXP 35
2910: PUSH
2911: LD_VAR 0 2
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_VAR 0 2
2930: ARRAY
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PPUSH
2936: CALL_OW 171
2940: GO 2898
2942: POP
2943: POP
// end else
2944: GO 3285
// begin for i := 1 to rand ( 1 , 3 ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 12
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3046
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: CALL_OW 380
// unit = CreateHuman ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3009: LD_VAR 0 6
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3024: LD_VAR 0 6
3028: PPUSH
3029: LD_INT 500
3031: PPUSH
3032: LD_INT 1000
3034: PPUSH
3035: CALL_OW 12
3039: PPUSH
3040: CALL_OW 234
// end ;
3044: GO 2967
3046: POP
3047: POP
// rnd2 = rand ( 1 , 2 ) ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3064: LD_ADDR_VAR 0 8
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 6
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 56
3091: PUSH
3092: EMPTY
3093: LIST
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 60
3100: PUSH
3101: EMPTY
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_VAR 0 8
3128: PUSH
3129: LD_EXP 56
3133: DIFF
3134: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_VAR 0 8
3144: PUSH
3145: LD_EXP 57
3149: DIFF
3150: ST_TO_ADDR
// if rnd2 = 1 then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: IFFALSE 3224
// for i := 3 to russianCargoPath1 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 3
3169: DEC
3170: ST_TO_ADDR
3171: LD_EXP 34
3175: PUSH
3176: FOR_TO
3177: IFFALSE 3220
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3179: LD_VAR 0 8
3183: PPUSH
3184: LD_EXP 34
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: LD_EXP 34
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: CALL_OW 171
3218: GO 3176
3220: POP
3221: POP
3222: GO 3285
// for i := 3 to russianCargoPath2 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 3
3232: DEC
3233: ST_TO_ADDR
3234: LD_EXP 35
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3283
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3242: LD_VAR 0 8
3246: PPUSH
3247: LD_EXP 35
3251: PUSH
3252: LD_VAR 0 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: LD_EXP 35
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 171
3281: GO 3239
3283: POP
3284: POP
// end ; end ;
3285: LD_VAR 0 1
3289: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// for i := 1 to 2 do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 2
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3375
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PPUSH
3328: CALL_OW 380
// unit = CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3357: LD_ADDR_EXP 57
3361: PUSH
3362: LD_EXP 57
3366: PUSH
3367: LD_VAR 0 3
3371: ADD
3372: ST_TO_ADDR
// end ;
3373: GO 3308
3375: POP
3376: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 12
3393: PPUSH
3394: CALL_OW 380
// unit = CreateHuman ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3423: LD_ADDR_EXP 57
3427: PUSH
3428: LD_EXP 57
3432: PUSH
3433: LD_VAR 0 3
3437: ADD
3438: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3439: LD_EXP 57
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: LD_INT 54
3449: PPUSH
3450: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3454: LD_EXP 57
3458: PPUSH
3459: LD_INT 25
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 72
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 95
3479: PPUSH
3480: LD_INT 52
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: CALL_OW 205
// end ; end_of_file
3490: LD_VAR 0 1
3494: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3495: LD_INT 0
3497: PPUSH
// uc_side = 2 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3506: LD_ADDR_EXP 63
3510: PUSH
3511: LD_STRING Heike
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 0
3519: PPUSH
3520: CALL 9385 0 3
3524: ST_TO_ADDR
// if Difficulty >= 2 then
3525: LD_OWVAR 67
3529: PUSH
3530: LD_INT 2
3532: GREATEREQUAL
3533: IFFALSE 3548
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3535: LD_INT 51
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// end ;
3548: LD_VAR 0 1
3552: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// currentEnemyGroup = [ ] ;
3558: LD_ADDR_EXP 65
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_EXP 39
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3836
// begin uc_side = 2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// uc_nation = nation_arabian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 2
3598: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3599: LD_ADDR_OWVAR 40
3603: PUSH
3604: LD_INT 23
3606: PUSH
3607: LD_INT 24
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 26
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3638: LD_OWVAR 40
3642: PUSH
3643: LD_INT 25
3645: PUSH
3646: LD_INT 26
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: IN
3657: IFFALSE 3688
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3659: LD_ADDR_OWVAR 37
3663: PUSH
3664: LD_INT 13
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: CALL_OW 12
3684: ARRAY
3685: ST_TO_ADDR
3686: GO 3719
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3688: LD_ADDR_OWVAR 37
3692: PUSH
3693: LD_INT 12
3695: PUSH
3696: LD_INT 13
3698: PUSH
3699: LD_INT 14
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: CALL_OW 12
3717: ARRAY
3718: ST_TO_ADDR
// vc_control = control_manual ;
3719: LD_ADDR_OWVAR 38
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_engine = engine_combustion ;
3727: LD_ADDR_OWVAR 39
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3735: LD_ADDR_OWVAR 41
3739: PUSH
3740: LD_INT 100
3742: ST_TO_ADDR
// veh = CreateVehicle ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 45
3752: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3753: LD_ADDR_EXP 65
3757: PUSH
3758: LD_EXP 65
3762: PUSH
3763: LD_VAR 0 3
3767: ADD
3768: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 7
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3784: LD_OWVAR 40
3788: PUSH
3789: LD_INT 26
3791: EQUAL
3792: IFFALSE 3808
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3794: LD_INT 0
3796: PPUSH
3797: LD_EXP 33
3801: PPUSH
3802: CALL_OW 383
3806: GO 3820
// PrepareMechanic ( false , enemySkillLevel ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_EXP 32
3815: PPUSH
3816: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3580
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 1
3842: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
// currentEnemyGroup = [ ] ;
3848: LD_ADDR_EXP 65
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 41
3874: PPUSH
3875: CALL_OW 12
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3960
// begin uc_side = 2 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 2
3890: ST_TO_ADDR
// uc_nation = nation_arabian ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3899: LD_INT 0
3901: PPUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_INT 1
3909: MINUS
3910: PPUSH
3911: CALL_OW 381
// unit = CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3925: LD_ADDR_EXP 65
3929: PUSH
3930: LD_EXP 65
3934: PUSH
3935: LD_VAR 0 4
3939: ADD
3940: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 49
// end ;
3958: GO 3880
3960: POP
3961: POP
// for i := 1 to rand ( 1 , 3 ) do
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 12
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4059
// begin uc_side = 2 ;
3986: LD_ADDR_OWVAR 20
3990: PUSH
3991: LD_INT 2
3993: ST_TO_ADDR
// uc_nation = nation_arabian ;
3994: LD_ADDR_OWVAR 21
3998: PUSH
3999: LD_INT 2
4001: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_EXP 32
4009: PPUSH
4010: CALL_OW 384
// unit = CreateHuman ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: CALL_OW 44
4023: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4024: LD_ADDR_EXP 65
4028: PUSH
4029: LD_EXP 65
4033: PUSH
4034: LD_VAR 0 4
4038: ADD
4039: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 49
// end ;
4057: GO 3983
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 2
4065: RET
// export function PrepareArabianKiller ; var un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
// uc_side = 5 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 5
4077: ST_TO_ADDR
// uc_nation = nation_arabian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_class = class_soldier ;
4086: LD_ADDR_OWVAR 28
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4094: LD_ADDR_OWVAR 31
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// un = CreateHuman ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_INT 12
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_EXP 54
4151: PPUSH
4152: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_EXP 23
4165: PUSH
4166: LD_INT 1
4168: PLUS
4169: ST_TO_ADDR
// end ;
4170: LD_VAR 0 1
4174: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
4179: PPUSH
4180: PPUSH
// firstAttackGroup = [ ] ;
4181: LD_ADDR_EXP 64
4185: PUSH
4186: EMPTY
4187: ST_TO_ADDR
// uc_side = 2 ;
4188: LD_ADDR_OWVAR 20
4192: PUSH
4193: LD_INT 2
4195: ST_TO_ADDR
// uc_nation = nation_arabian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 2
4203: ST_TO_ADDR
// for i := 1 to 3 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 3
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4279
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4220: LD_INT 0
4222: PPUSH
4223: LD_EXP 32
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: PPUSH
4232: CALL_OW 381
// unit = CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4246: LD_ADDR_EXP 64
4250: PUSH
4251: LD_EXP 64
4255: PUSH
4256: LD_VAR 0 3
4260: ADD
4261: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_INT 7
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ;
4277: GO 4217
4279: POP
4280: POP
// vc_weapon = ar_light_gun ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 23
4288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4289: LD_ADDR_OWVAR 37
4293: PUSH
4294: LD_INT 13
4296: ST_TO_ADDR
// vc_control = control_manual ;
4297: LD_ADDR_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// vc_engine = engine_combustion ;
4305: LD_ADDR_OWVAR 39
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4313: LD_ADDR_OWVAR 41
4317: PUSH
4318: LD_INT 100
4320: ST_TO_ADDR
// veh = CreateVehicle ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: CALL_OW 45
4330: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4331: LD_ADDR_EXP 64
4335: PUSH
4336: LD_EXP 64
4340: PUSH
4341: LD_VAR 0 4
4345: ADD
4346: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_EXP 32
4369: PUSH
4370: LD_INT 1
4372: MINUS
4373: PPUSH
4374: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4378: CALL_OW 44
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 52
// end ; end_of_file
4392: LD_VAR 0 1
4396: RET
// export function Nef_PrepareNature ; var i , un ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4402: LD_ADDR_VAR 0 2
4406: PUSH
4407: DOUBLE
4408: LD_INT 1
4410: DEC
4411: ST_TO_ADDR
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4532
// begin uc_side = 0 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 0
4431: ST_TO_ADDR
// uc_nation = nation_nature ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 0
4439: ST_TO_ADDR
// hc_class = class_apeman ;
4440: LD_ADDR_OWVAR 28
4444: PUSH
4445: LD_INT 12
4447: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4448: LD_ADDR_OWVAR 31
4452: PUSH
4453: LD_EXP 27
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PUSH
4462: LD_EXP 27
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: PUSH
4471: LD_EXP 27
4475: PUSH
4476: LD_INT 3
4478: ARRAY
4479: PUSH
4480: LD_EXP 27
4484: PUSH
4485: LD_INT 4
4487: ARRAY
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4495: LD_ADDR_OWVAR 35
4499: PUSH
4500: LD_EXP 28
4504: ST_TO_ADDR
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 8
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4421
4532: POP
4533: POP
// for i := 1 to animalsAmount [ 2 ] do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4664
// begin uc_side = 0 ;
4556: LD_ADDR_OWVAR 20
4560: PUSH
4561: LD_INT 0
4563: ST_TO_ADDR
// uc_nation = nation_nature ;
4564: LD_ADDR_OWVAR 21
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
// hc_class = class_phororhacos ;
4572: LD_ADDR_OWVAR 28
4576: PUSH
4577: LD_INT 18
4579: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4580: LD_ADDR_OWVAR 31
4584: PUSH
4585: LD_EXP 27
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PUSH
4594: LD_EXP 27
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PUSH
4603: LD_EXP 27
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PUSH
4612: LD_EXP 27
4616: PUSH
4617: LD_INT 4
4619: ARRAY
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4627: LD_ADDR_OWVAR 35
4631: PUSH
4632: LD_EXP 28
4636: ST_TO_ADDR
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: LD_INT 0
4657: PPUSH
4658: CALL_OW 49
// end ;
4662: GO 4553
4664: POP
4665: POP
// for i := 1 to animalsAmount [ 3 ] do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_EXP 26
4680: PUSH
4681: LD_INT 3
4683: ARRAY
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4796
// begin uc_side = 0 ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// uc_nation = nation_nature ;
4696: LD_ADDR_OWVAR 21
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// hc_class = class_tiger ;
4704: LD_ADDR_OWVAR 28
4708: PUSH
4709: LD_INT 14
4711: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4712: LD_ADDR_OWVAR 31
4716: PUSH
4717: LD_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PUSH
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 3
4742: ARRAY
4743: PUSH
4744: LD_EXP 27
4748: PUSH
4749: LD_INT 4
4751: ARRAY
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4759: LD_ADDR_OWVAR 35
4763: PUSH
4764: LD_EXP 28
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// end ;
4794: GO 4685
4796: POP
4797: POP
// for i := 1 to animalsAmount [ 4 ] do
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 26
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4928
// begin uc_side = 0 ;
4820: LD_ADDR_OWVAR 20
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// uc_nation = nation_nature ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 0
4835: ST_TO_ADDR
// hc_class = 21 ;
4836: LD_ADDR_OWVAR 28
4840: PUSH
4841: LD_INT 21
4843: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4844: LD_ADDR_OWVAR 31
4848: PUSH
4849: LD_EXP 27
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_INT 3
4874: ARRAY
4875: PUSH
4876: LD_EXP 27
4880: PUSH
4881: LD_INT 4
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4891: LD_ADDR_OWVAR 35
4895: PUSH
4896: LD_EXP 28
4900: ST_TO_ADDR
// un = CreateHuman ;
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: CALL_OW 44
4910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4911: LD_VAR 0 3
4915: PPUSH
4916: LD_INT 8
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4817
4928: POP
4929: POP
// for i := 1 to animalsAmount [ 5 ] do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_EXP 26
4944: PUSH
4945: LD_INT 5
4947: ARRAY
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5011
// begin uc_side = 0 ;
4952: LD_ADDR_OWVAR 20
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// uc_nation = nation_nature ;
4960: LD_ADDR_OWVAR 21
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// vc_chassis := 31 ;
4968: LD_ADDR_OWVAR 37
4972: PUSH
4973: LD_INT 31
4975: ST_TO_ADDR
// vc_control := control_rider ;
4976: LD_ADDR_OWVAR 38
4980: PUSH
4981: LD_INT 4
4983: ST_TO_ADDR
// un := CreateVehicle ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: CALL_OW 45
4993: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// end ;
5009: GO 4949
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
5030: PPUSH
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
5036: PPUSH
5037: PPUSH
// for unit in units do
5038: LD_ADDR_VAR 0 8
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5086
// if not ignorePath then
5051: LD_VAR 0 3
5055: NOT
5056: IFFALSE 5072
// SetTag ( unit , 0 ) else
5058: LD_VAR 0 8
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 109
5070: GO 5084
// SetTag ( unit , 1 ) ;
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: CALL_OW 109
5084: GO 5048
5086: POP
5087: POP
// startAttacks = false ;
5088: LD_ADDR_VAR 0 21
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5096: LD_ADDR_VAR 0 17
5100: PUSH
5101: LD_VAR 0 2
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: ST_TO_ADDR
// mechanics = [ ] ;
5135: LD_ADDR_VAR 0 12
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5142: LD_ADDR_VAR 0 9
5146: PUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: LD_INT 50
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 72
5194: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5195: LD_ADDR_VAR 0 11
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_INT 50
5207: PUSH
5208: EMPTY
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 4
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 72
5229: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5230: LD_ADDR_VAR 0 13
5234: PUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 21
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 24
5255: PUSH
5256: LD_INT 1000
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 72
5275: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5276: LD_ADDR_VAR 0 15
5280: PUSH
5281: LD_INT 9
5283: PPUSH
5284: CALL_OW 435
5288: ST_TO_ADDR
// if not ignorePath then
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 6276
// begin for unit in attackUnits do
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 9
5305: PUSH
5306: FOR_IN
5307: IFFALSE 6050
// begin if path and not startAttacks then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 21
5318: NOT
5319: AND
5320: IFFALSE 6039
// begin i = 1 ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5330: LD_ADDR_VAR 0 15
5334: PUSH
5335: LD_INT 9
5337: PPUSH
5338: CALL_OW 435
5342: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5343: LD_ADDR_VAR 0 18
5347: PUSH
5348: LD_INT 81
5350: PUSH
5351: LD_VAR 0 8
5355: PPUSH
5356: CALL_OW 255
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_VAR 0 8
5374: PPUSH
5375: CALL_OW 74
5379: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5380: LD_ADDR_VAR 0 19
5384: PUSH
5385: LD_VAR 0 15
5389: PPUSH
5390: LD_VAR 0 8
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: CALL_OW 439
5414: ST_TO_ADDR
// if damageUnits and medics then
5415: LD_VAR 0 13
5419: PUSH
5420: LD_VAR 0 11
5424: AND
5425: IFFALSE 5447
// ComHeal ( medics , damageUnits [ 1 ] ) else
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 13
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 128
5445: GO 5490
// if medics then
5447: LD_VAR 0 11
5451: IFFALSE 5490
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5453: LD_VAR 0 11
5457: PPUSH
5458: LD_VAR 0 9
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 250
5471: PPUSH
5472: LD_VAR 0 9
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 251
5485: PPUSH
5486: CALL_OW 111
// if not HasTask ( unit ) then
5490: LD_VAR 0 8
5494: PPUSH
5495: CALL_OW 314
5499: NOT
5500: IFFALSE 5739
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5502: LD_ADDR_VAR 0 19
5506: PUSH
5507: LD_VAR 0 15
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: CALL_OW 250
5521: PPUSH
5522: LD_VAR 0 8
5526: PPUSH
5527: CALL_OW 251
5531: PPUSH
5532: CALL_OW 439
5536: ST_TO_ADDR
// if i > crates then
5537: LD_VAR 0 7
5541: PUSH
5542: LD_VAR 0 15
5546: GREATER
5547: IFFALSE 5557
// i = 1 ;
5549: LD_ADDR_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5557: LD_VAR 0 18
5561: PUSH
5562: LD_VAR 0 19
5566: AND
5567: IFFALSE 5682
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 18
5578: PPUSH
5579: CALL_OW 250
5583: PPUSH
5584: LD_VAR 0 18
5588: PPUSH
5589: CALL_OW 251
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 19
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 19
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 297
5626: LESS
5627: IFFALSE 5645
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5629: LD_VAR 0 9
5633: PPUSH
5634: LD_VAR 0 18
5638: PPUSH
5639: CALL_OW 115
5643: GO 5680
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5645: LD_VAR 0 9
5649: PPUSH
5650: LD_VAR 0 15
5654: PUSH
5655: LD_VAR 0 7
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 15
5665: PUSH
5666: LD_VAR 0 7
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: CALL_OW 116
// end else
5680: GO 5739
// if crates then
5682: LD_VAR 0 15
5686: IFFALSE 5725
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5688: LD_VAR 0 9
5692: PPUSH
5693: LD_VAR 0 15
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 7
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: CALL_OW 116
5723: GO 5739
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_VAR 0 18
5734: PPUSH
5735: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// if path then
5746: LD_VAR 0 2
5750: IFFALSE 5836
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5752: LD_ADDR_VAR 0 16
5756: PUSH
5757: LD_VAR 0 8
5761: PPUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: CALL 7166 0 2
5771: ST_TO_ADDR
// if agressiveMove then
5772: LD_VAR 0 4
5776: IFFALSE 5807
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5778: LD_VAR 0 9
5782: PPUSH
5783: LD_VAR 0 16
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 16
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PPUSH
5801: CALL_OW 114
5805: GO 5834
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5807: LD_VAR 0 9
5811: PPUSH
5812: LD_VAR 0 16
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 16
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 111
// end else
5834: GO 5844
// startAttacks = true ;
5836: LD_ADDR_VAR 0 21
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// i = i + 2 ;
5844: LD_ADDR_VAR 0 7
5848: PUSH
5849: LD_VAR 0 7
5853: PUSH
5854: LD_INT 2
5856: PLUS
5857: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5858: LD_VAR 0 8
5862: PPUSH
5863: CALL_OW 314
5867: NOT
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 8
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 92
5888: PUSH
5889: LD_VAR 0 16
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 16
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_INT 3
5927: GREATER
5928: AND
5929: PUSH
5930: LD_VAR 0 21
5934: NOT
5935: AND
5936: IFFALSE 5330
// for i := 1 to path do
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6037
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5956: LD_VAR 0 2
5960: PUSH
5961: LD_VAR 0 7
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 16
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_VAR 0 7
5990: ARRAY
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 16
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: EQUAL
6005: AND
6006: IFFALSE 6035
// begin path = path diff [ path [ i ] ] ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_VAR 0 7
6027: ARRAY
6028: PUSH
6029: EMPTY
6030: LIST
6031: DIFF
6032: ST_TO_ADDR
// break ;
6033: GO 6037
// end ;
6035: GO 5953
6037: POP
6038: POP
// end ; if not path then
6039: LD_VAR 0 2
6043: NOT
6044: IFFALSE 6048
// break ;
6046: GO 6050
// end ;
6048: GO 5306
6050: POP
6051: POP
// repeat unitsReachPathEnd = 0 ;
6052: LD_ADDR_VAR 0 20
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// for attackUnit in attackUnits do
6060: LD_ADDR_VAR 0 10
6064: PUSH
6065: LD_VAR 0 9
6069: PUSH
6070: FOR_IN
6071: IFFALSE 6244
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6073: LD_VAR 0 10
6077: PPUSH
6078: LD_VAR 0 17
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_VAR 0 17
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 297
6100: PUSH
6101: LD_INT 7
6103: LESS
6104: NOT
6105: PUSH
6106: LD_VAR 0 10
6110: PPUSH
6111: CALL_OW 110
6115: PUSH
6116: LD_INT 0
6118: EQUAL
6119: AND
6120: IFFALSE 6186
// begin if agressiveMove then
6122: LD_VAR 0 4
6126: IFFALSE 6157
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6128: LD_VAR 0 10
6132: PPUSH
6133: LD_VAR 0 17
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 17
6146: PUSH
6147: LD_INT 2
6149: ARRAY
6150: PPUSH
6151: CALL_OW 114
6155: GO 6184
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6157: LD_VAR 0 10
6161: PPUSH
6162: LD_VAR 0 17
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 17
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: PPUSH
6180: CALL_OW 111
// end else
6184: GO 6213
// if GetTag ( attackUnit ) = 0 then
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 110
6195: PUSH
6196: LD_INT 0
6198: EQUAL
6199: IFFALSE 6213
// SetTag ( attackUnit , 1 ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 109
// if GetTag ( unit ) = 1 then
6213: LD_VAR 0 8
6217: PPUSH
6218: CALL_OW 110
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6242
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6228: LD_ADDR_VAR 0 20
6232: PUSH
6233: LD_VAR 0 20
6237: PUSH
6238: LD_INT 1
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: GO 6070
6244: POP
6245: POP
// wait ( 0 0$1 ) ;
6246: LD_INT 35
6248: PPUSH
6249: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_VAR 0 9
6262: PUSH
6263: LD_INT 3
6265: MINUS
6266: GREATER
6267: IFFALSE 6052
// wait ( 0 0$10 ) ;
6269: LD_INT 350
6271: PPUSH
6272: CALL_OW 67
// end ; for attackUnit in attackUnits do
6276: LD_ADDR_VAR 0 10
6280: PUSH
6281: LD_VAR 0 9
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6303
// SetTag ( attackUnit , 2 ) ;
6289: LD_VAR 0 10
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 109
6301: GO 6286
6303: POP
6304: POP
// startAttacks = true ;
6305: LD_ADDR_VAR 0 21
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if startAttacks then
6313: LD_VAR 0 21
6317: IFFALSE 7136
// begin repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 72
6360: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6361: LD_ADDR_VAR 0 13
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_INT 21
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 1000
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: ST_TO_ADDR
// if damageUnits and medics then
6418: LD_VAR 0 13
6422: PUSH
6423: LD_VAR 0 11
6427: AND
6428: IFFALSE 6450
// ComHeal ( medics , damageUnits [ 1 ] ) else
6430: LD_VAR 0 11
6434: PPUSH
6435: LD_VAR 0 13
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: CALL_OW 128
6448: GO 6500
// if medics and not damageUnits then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_VAR 0 13
6459: NOT
6460: AND
6461: IFFALSE 6500
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6463: LD_VAR 0 11
6467: PPUSH
6468: LD_VAR 0 9
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: CALL_OW 250
6481: PPUSH
6482: LD_VAR 0 9
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 251
6495: PPUSH
6496: CALL_OW 111
// for attackUnit in attackUnits do
6500: LD_ADDR_VAR 0 10
6504: PUSH
6505: LD_VAR 0 9
6509: PUSH
6510: FOR_IN
6511: IFFALSE 7127
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6513: LD_ADDR_VAR 0 22
6517: PUSH
6518: LD_INT 81
6520: PUSH
6521: LD_VAR 0 10
6525: PPUSH
6526: CALL_OW 255
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_VAR 0 10
6544: PPUSH
6545: CALL_OW 74
6549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6550: LD_ADDR_VAR 0 23
6554: PUSH
6555: LD_INT 81
6557: PUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 255
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 59
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 21
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: LD_VAR 0 10
6623: PPUSH
6624: CALL_OW 74
6628: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6629: LD_VAR 0 10
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 2
6641: EQUAL
6642: IFFALSE 6802
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6644: LD_VAR 0 10
6648: PPUSH
6649: LD_VAR 0 22
6653: PPUSH
6654: CALL_OW 296
6658: PUSH
6659: LD_INT 10
6661: PLUS
6662: PUSH
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 23
6672: PPUSH
6673: CALL_OW 296
6677: LESS
6678: IFFALSE 6696
// ComAttackUnit ( attackUnit , target1 ) else
6680: LD_VAR 0 10
6684: PPUSH
6685: LD_VAR 0 22
6689: PPUSH
6690: CALL_OW 115
6694: GO 6710
// ComAttackUnit ( attackUnit , target2 ) ;
6696: LD_VAR 0 10
6700: PPUSH
6701: LD_VAR 0 23
6705: PPUSH
6706: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6710: LD_VAR 0 10
6714: PPUSH
6715: CALL_OW 256
6719: PUSH
6720: LD_INT 650
6722: LESS
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: CALL_OW 247
6733: PUSH
6734: LD_INT 2
6736: EQUAL
6737: AND
6738: PUSH
6739: LD_VAR 0 10
6743: PPUSH
6744: CALL_OW 263
6748: PUSH
6749: LD_INT 1
6751: EQUAL
6752: AND
6753: IFFALSE 6802
// begin SetTag ( attackUnit , 3 ) ;
6755: LD_VAR 0 10
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 313
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 3
6783: PPUSH
6784: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6788: LD_VAR 0 10
6792: PPUSH
6793: LD_VAR 0 5
6797: PPUSH
6798: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6802: LD_VAR 0 10
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 308
6816: PUSH
6817: LD_VAR 0 10
6821: PPUSH
6822: CALL_OW 110
6826: PUSH
6827: LD_INT 3
6829: EQUAL
6830: AND
6831: PUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 313
6841: AND
6842: IFFALSE 6915
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6844: LD_ADDR_VAR 0 14
6848: PUSH
6849: LD_VAR 0 10
6853: PPUSH
6854: CALL_OW 313
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: ST_TO_ADDR
// if not driver in mechanics then
6863: LD_VAR 0 14
6867: PUSH
6868: LD_VAR 0 12
6872: IN
6873: NOT
6874: IFFALSE 6892
// mechanics = mechanics ^ driver ;
6876: LD_ADDR_VAR 0 12
6880: PUSH
6881: LD_VAR 0 12
6885: PUSH
6886: LD_VAR 0 14
6890: ADD
6891: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6892: LD_VAR 0 14
6896: PPUSH
6897: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6901: LD_VAR 0 14
6905: PPUSH
6906: LD_VAR 0 10
6910: PPUSH
6911: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6915: LD_VAR 0 10
6919: PPUSH
6920: CALL_OW 256
6924: PUSH
6925: LD_INT 1000
6927: EQUAL
6928: IFFALSE 7046
// begin SetTag ( attackUnit , 2 ) ;
6930: LD_VAR 0 10
6934: PPUSH
6935: LD_INT 2
6937: PPUSH
6938: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6942: LD_VAR 0 10
6946: PPUSH
6947: CALL_OW 247
6951: PUSH
6952: LD_INT 2
6954: EQUAL
6955: PUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 263
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 10
6975: PPUSH
6976: CALL_OW 313
6980: NOT
6981: AND
6982: IFFALSE 7046
// begin SetFuel ( attackUnit , 100 ) ;
6984: LD_VAR 0 10
6988: PPUSH
6989: LD_INT 100
6991: PPUSH
6992: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6996: LD_VAR 0 12
7000: PPUSH
7001: LD_VAR 0 10
7005: PPUSH
7006: CALL_OW 74
7010: PPUSH
7011: LD_VAR 0 10
7015: PPUSH
7016: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 12
7029: PUSH
7030: LD_VAR 0 12
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 74
7044: DIFF
7045: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7046: LD_ADDR_VAR 0 8
7050: PUSH
7051: LD_VAR 0 12
7055: PUSH
7056: FOR_IN
7057: IFFALSE 7123
// begin if not IsInArea ( unit , retreatArea ) then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 308
7073: NOT
7074: IFFALSE 7090
// ComMoveToArea ( unit , retreatArea ) ;
7076: LD_VAR 0 8
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 113
// if GetLives ( unit ) < 250 then
7090: LD_VAR 0 8
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 250
7102: LESS
7103: IFFALSE 7121
// mechanics = mechanics diff unit ;
7105: LD_ADDR_VAR 0 12
7109: PUSH
7110: LD_VAR 0 12
7114: PUSH
7115: LD_VAR 0 8
7119: DIFF
7120: ST_TO_ADDR
// end ;
7121: GO 7056
7123: POP
7124: POP
// end ;
7125: GO 6510
7127: POP
7128: POP
// until not attackUnits ;
7129: LD_VAR 0 9
7133: NOT
7134: IFFALSE 6319
// end ; wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 50
7150: PUSH
7151: EMPTY
7152: LIST
7153: PPUSH
7154: CALL_OW 72
7158: NOT
7159: IFFALSE 5142
// end ;
7161: LD_VAR 0 6
7165: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// for i := 2 to path do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: DOUBLE
7212: LD_INT 2
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 2
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7362
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PPUSH
7259: CALL_OW 297
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL_OW 297
7291: LESS
7292: IFFALSE 7360
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 1
7326: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 5
7336: PPUSH
7337: LD_INT 2
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 4
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// end ; end ;
7360: GO 7221
7362: POP
7363: POP
// result = nearPosition ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_VAR 0 5
7373: ST_TO_ADDR
// end ;
7374: LD_VAR 0 3
7378: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7379: LD_EXP 58
7383: PPUSH
7384: CALL_OW 274
7388: PPUSH
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 275
7396: PUSH
7397: LD_INT 0
7399: GREATER
7400: IFFALSE 7506
7402: GO 7404
7404: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7405: LD_EXP 57
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: PPUSH
7425: LD_INT 31
7427: PPUSH
7428: LD_INT 105
7430: PPUSH
7431: LD_INT 51
7433: PPUSH
7434: LD_INT 3
7436: PPUSH
7437: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7441: LD_EXP 57
7445: PPUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 72
7460: PPUSH
7461: LD_INT 31
7463: PPUSH
7464: LD_INT 114
7466: PPUSH
7467: LD_INT 58
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7477: LD_EXP 57
7481: PPUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PPUSH
7497: LD_EXP 58
7501: PPUSH
7502: CALL_OW 180
// end ; end_of_file
7506: END
// export function Lose_Burlak ; begin
7507: LD_INT 0
7509: PPUSH
// YouLost ( Burlak ) ;
7510: LD_STRING Burlak
7512: PPUSH
7513: CALL_OW 104
// end ;
7517: LD_VAR 0 1
7521: RET
// export function Lose_Gaydar ; begin
7522: LD_INT 0
7524: PPUSH
// YouLost ( Gaydar ) ;
7525: LD_STRING Gaydar
7527: PPUSH
7528: CALL_OW 104
// end ;
7532: LD_VAR 0 1
7536: RET
// export function Lose_SelfAttack ; begin
7537: LD_INT 0
7539: PPUSH
// YouLost ( SelfAttack ) ;
7540: LD_STRING SelfAttack
7542: PPUSH
7543: CALL_OW 104
// end ;
7547: LD_VAR 0 1
7551: RET
// export function Lose_Arrest ; begin
7552: LD_INT 0
7554: PPUSH
// YouLost ( Arrest ) ;
7555: LD_STRING Arrest
7557: PPUSH
7558: CALL_OW 104
// end ;
7562: LD_VAR 0 1
7566: RET
// export function Lose_ArabBreakthrough ; begin
7567: LD_INT 0
7569: PPUSH
// YouLost ( ArabBreakthrough ) ;
7570: LD_STRING ArabBreakthrough
7572: PPUSH
7573: CALL_OW 104
// end ;
7577: LD_VAR 0 1
7581: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7582: LD_EXP 7
7586: NOT
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: NOT
7628: AND
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 0
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: NOT
7670: AND
7671: IFFALSE 7684
7673: GO 7675
7675: DISABLE
// begin enable ;
7676: ENABLE
// YouLost ( Engineer ) ;
7677: LD_STRING Engineer
7679: PPUSH
7680: CALL_OW 104
// end ; end_of_file
7684: END
// export function FinishMission ; begin
7685: LD_INT 0
7687: PPUSH
// SetRewards ;
7688: CALL 7709 0 0
// SavePlayerCharacters ;
7692: CALL 8134 0 0
// SaveGlobalVariables ;
7696: CALL 8362 0 0
// YouWin ;
7700: CALL_OW 103
// end ;
7704: LD_VAR 0 1
7708: RET
// function SetRewards ; var unitsToReward ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// SetAchievements ;
7713: CALL 18515 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7717: LD_INT 22
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: NOT
7746: IFFALSE 7760
// AddMedal ( Dismantle , 1 ) else
7748: LD_STRING Dismantle
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 101
7758: GO 7771
// AddMedal ( Dismantle , - 1 ) ;
7760: LD_STRING Dismantle
7762: PPUSH
7763: LD_INT 1
7765: NEG
7766: PPUSH
7767: CALL_OW 101
// if killedArabianUnits >= 25 then
7771: LD_EXP 22
7775: PUSH
7776: LD_INT 25
7778: GREATEREQUAL
7779: IFFALSE 7801
// begin AddMedal ( EnemyLosses , 1 ) ;
7781: LD_STRING EnemyLosses
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 101
// heikeHeavyLosses = true ;
7791: LD_ADDR_EXP 4
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// end else
7799: GO 7812
// AddMedal ( EnemyLosses , - 1 ) ;
7801: LD_STRING EnemyLosses
7803: PPUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: CALL_OW 101
// if not lostUnits then
7812: LD_EXP 24
7816: NOT
7817: IFFALSE 7831
// AddMedal ( LittleLosses , 1 ) else
7819: LD_STRING LittleLosses
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: CALL_OW 101
7829: GO 7842
// AddMedal ( LittleLosses , - 1 ) ;
7831: LD_STRING LittleLosses
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL_OW 101
// GiveMedals ( Main ) ;
7842: LD_STRING Main
7844: PPUSH
7845: CALL_OW 102
// unitsToReward = [ ] ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7856: LD_EXP 42
7860: PPUSH
7861: CALL_OW 255
7865: PUSH
7866: LD_INT 3
7868: EQUAL
7869: IFFALSE 7887
// unitsToReward = unitsToReward ^ Burlak ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 2
7880: PUSH
7881: LD_EXP 42
7885: ADD
7886: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7887: LD_EXP 43
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7918
// unitsToReward = unitsToReward ^ Gnyevko ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: PUSH
7912: LD_EXP 43
7916: ADD
7917: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7918: LD_EXP 44
7922: PPUSH
7923: CALL_OW 255
7927: PUSH
7928: LD_INT 3
7930: EQUAL
7931: IFFALSE 7949
// unitsToReward = unitsToReward ^ Kirilenkova ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: LD_EXP 44
7947: ADD
7948: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7949: LD_EXP 45
7953: PPUSH
7954: CALL_OW 255
7958: PUSH
7959: LD_INT 3
7961: EQUAL
7962: IFFALSE 7980
// unitsToReward = unitsToReward ^ Kovalyuk ;
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 45
7978: ADD
7979: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7980: LD_EXP 46
7984: PPUSH
7985: CALL_OW 255
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: IFFALSE 8011
// unitsToReward = unitsToReward ^ Belkov ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_EXP 46
8009: ADD
8010: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8011: LD_EXP 47
8015: PPUSH
8016: CALL_OW 255
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8042
// unitsToReward = unitsToReward ^ Belkov2 ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_EXP 47
8040: ADD
8041: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8042: LD_EXP 48
8046: PPUSH
8047: CALL_OW 255
8051: PUSH
8052: LD_INT 3
8054: EQUAL
8055: IFFALSE 8073
// unitsToReward = unitsToReward ^ Scholtze ;
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_EXP 48
8071: ADD
8072: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8073: LD_EXP 49
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 3
8085: EQUAL
8086: IFFALSE 8104
// unitsToReward = unitsToReward ^ Kuzmov ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: LD_EXP 49
8102: ADD
8103: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_EXP 62
8118: ADD
8119: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: CALL_OW 43
// end ;
8129: LD_VAR 0 1
8133: RET
// function SavePlayerCharacters ; var othersYour ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8138: LD_EXP 42
8142: PPUSH
8143: LD_STRING 04_Burlak
8145: PPUSH
8146: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 3
8162: EQUAL
8163: IFFALSE 8177
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8165: LD_EXP 43
8169: PPUSH
8170: LD_STRING 04_Gnyevko
8172: PPUSH
8173: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 255
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8204
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8192: LD_EXP 45
8196: PPUSH
8197: LD_STRING 04_Kovalyuk
8199: PPUSH
8200: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8204: LD_EXP 44
8208: PPUSH
8209: CALL_OW 255
8213: PUSH
8214: LD_INT 3
8216: EQUAL
8217: IFFALSE 8231
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8219: LD_EXP 44
8223: PPUSH
8224: LD_STRING 04_Kirilenkova
8226: PPUSH
8227: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8231: LD_EXP 48
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: IFFALSE 8258
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8246: LD_EXP 48
8250: PPUSH
8251: LD_STRING 04_Scholtze
8253: PPUSH
8254: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8258: LD_EXP 46
8262: PPUSH
8263: CALL_OW 255
8267: PUSH
8268: LD_INT 3
8270: EQUAL
8271: IFFALSE 8285
// SaveCharacters ( Belkov , 04_Belkov ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_STRING 04_Belkov
8280: PPUSH
8281: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8285: LD_EXP 47
8289: PPUSH
8290: CALL_OW 255
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8312
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8300: LD_EXP 47
8304: PPUSH
8305: LD_STRING 04_Belkov2
8307: PPUSH
8308: CALL_OW 38
// if IsOK ( Kuzmov ) then
8312: LD_EXP 49
8316: PPUSH
8317: CALL_OW 302
8321: IFFALSE 8335
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8323: LD_EXP 49
8327: PPUSH
8328: LD_STRING 04_Kuzmov
8330: PPUSH
8331: CALL_OW 38
// othersYour = randomsToSave ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: LD_EXP 62
8344: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8345: LD_EXP 62
8349: PPUSH
8350: LD_STRING 04_other_survivors
8352: PPUSH
8353: CALL_OW 38
// end ;
8357: LD_VAR 0 1
8361: RET
// function SaveGlobalVariables ; begin
8362: LD_INT 0
8364: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8365: LD_EXP 4
8369: PPUSH
8370: LD_STRING 04_HeikeHeavyLosses_1
8372: PPUSH
8373: CALL_OW 39
// end ; end_of_file
8377: LD_VAR 0 1
8381: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 266
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 308
8423: NOT
8424: AND
8425: IFFALSE 8436
// Dial_DepotInWrongPlace ( building ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL 11025 0 1
// end ;
8436: PPOPN 2
8438: END
// on BuildingComplete ( building ) do var i , cargo ;
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 5
8479: PPUSH
8480: CALL_OW 308
8484: AND
8485: PUSH
8486: LD_EXP 8
8490: NOT
8491: AND
8492: PUSH
8493: LD_EXP 9
8497: NOT
8498: AND
8499: IFFALSE 8525
// begin namedBase = true ;
8501: LD_ADDR_EXP 9
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_STRING chuikov
8516: PPUSH
8517: CALL_OW 500
// Dial_FinishDepot ;
8521: CALL 11299 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 32
8551: EQUAL
8552: AND
8553: IFFALSE 8569
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8555: LD_ADDR_EXP 25
8559: PUSH
8560: LD_EXP 25
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_INT 6
8581: EQUAL
8582: PUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: EQUAL
8596: AND
8597: IFFALSE 8796
// begin secondBaseDepot = building ;
8599: LD_ADDR_EXP 58
8603: PUSH
8604: LD_VAR 0 1
8608: ST_TO_ADDR
// uc_side = 6 ;
8609: LD_ADDR_OWVAR 20
8613: PUSH
8614: LD_INT 6
8616: ST_TO_ADDR
// uc_nation = nation_russian ;
8617: LD_ADDR_OWVAR 21
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8625: LD_ADDR_OWVAR 37
8629: PUSH
8630: LD_INT 21
8632: ST_TO_ADDR
// vc_control = control_manual ;
8633: LD_ADDR_OWVAR 38
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// vc_engine = engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8649: LD_ADDR_OWVAR 40
8653: PUSH
8654: LD_INT 51
8656: ST_TO_ADDR
// cargo = CreateVehicle ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: CALL_OW 45
8666: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 3
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: CALL_OW 291
// ComGive ( cargo , building ) ;
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: DOUBLE
8741: LD_INT 10
8743: DEC
8744: ST_TO_ADDR
8745: LD_EXP 34
8749: PUSH
8750: FOR_TO
8751: IFFALSE 8794
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_EXP 34
8762: PUSH
8763: LD_VAR 0 2
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 34
8777: PUSH
8778: LD_VAR 0 2
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 171
8792: GO 8750
8794: POP
8795: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 6
8808: EQUAL
8809: PUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 266
8819: PUSH
8820: LD_INT 31
8822: EQUAL
8823: AND
8824: IFFALSE 8869
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8826: LD_EXP 57
8830: PPUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 56
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 72
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 120
// end ;
8869: PPOPN 3
8871: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 266
8881: PUSH
8882: LD_INT 7
8884: EQUAL
8885: PUSH
8886: LD_EXP 15
8890: NOT
8891: AND
8892: IFFALSE 8898
// Dial_LabUpgraded ;
8894: CALL 11619 0 0
// end ;
8898: PPOPN 1
8900: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 3
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PUSH
8915: LD_INT 2
8917: EQUAL
8918: AND
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: AND
8938: OR
8939: IFFALSE 8961
// begin if dial_contactBlock then
8941: LD_EXP 16
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// dial_contactBlock = true ;
8949: LD_ADDR_EXP 16
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// Dial_Contact ;
8957: CALL 13834 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 6
8977: EQUAL
8978: AND
8979: PUSH
8980: LD_VAR 0 1
8984: PUSH
8985: LD_INT 6
8987: EQUAL
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 3
8996: EQUAL
8997: AND
8998: OR
8999: IFFALSE 9005
// Lose_SelfAttack ;
9001: CALL 7537 0 0
// end ;
9005: PPOPN 2
9007: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9008: LD_VAR 0 1
9012: PUSH
9013: LD_EXP 42
9017: EQUAL
9018: IFFALSE 9024
// Lose_Burlak ;
9020: CALL 7507 0 0
// if unit = Gaydar then
9024: LD_VAR 0 1
9028: PUSH
9029: LD_EXP 54
9033: EQUAL
9034: IFFALSE 9040
// Lose_Gaydar ;
9036: CALL 7522 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 255
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 247
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: AND
9068: IFFALSE 9084
// lostUnits = lostUnits + 1 ;
9070: LD_ADDR_EXP 24
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 247
9107: PUSH
9108: LD_INT 1
9110: EQUAL
9111: AND
9112: PUSH
9113: LD_EXP 54
9117: PPUSH
9118: CALL_OW 305
9122: NOT
9123: AND
9124: IFFALSE 9140
// killedArabianUnits = killedArabianUnits + 1 ;
9126: LD_ADDR_EXP 22
9130: PUSH
9131: LD_EXP 22
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: ST_TO_ADDR
// if unit in firstAttackGroup then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_EXP 64
9149: IN
9150: IFFALSE 9168
// firstAttackGroup = firstAttackGroup diff unit ;
9152: LD_ADDR_EXP 64
9156: PUSH
9157: LD_EXP 64
9161: PUSH
9162: LD_VAR 0 1
9166: DIFF
9167: ST_TO_ADDR
// end ;
9168: PPOPN 1
9170: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 6
9178: EQUAL
9179: IFFALSE 9193
// SetSide ( building , 6 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 6
9188: PPUSH
9189: CALL_OW 235
// end ;
9193: PPOPN 3
9195: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 51
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 69
9256: PUSH
9257: FOR_IN
9258: IFFALSE 9380
// if GetTaskList ( i ) > 0 then
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 437
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9378
// for j = 1 to GetTaskList ( i ) do
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: DOUBLE
9281: LD_INT 1
9283: DEC
9284: ST_TO_ADDR
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 437
9294: PUSH
9295: FOR_TO
9296: IFFALSE 9376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 437
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_INT 4
9321: ARRAY
9322: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 255
9332: PUSH
9333: LD_INT 6
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 2
9341: PPUSH
9342: CALL_OW 437
9346: PUSH
9347: LD_VAR 0 3
9351: ARRAY
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_STRING <
9359: EQUAL
9360: AND
9361: IFFALSE 9374
// SetTaskList ( i , [ ] ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: EMPTY
9369: PPUSH
9370: CALL_OW 446
// end ;
9374: GO 9295
9376: POP
9377: POP
9378: GO 9257
9380: POP
9381: POP
// end ; end_of_file
9382: PPOPN 8
9384: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
// if exist_mode then
9389: LD_VAR 0 2
9393: IFFALSE 9418
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_EXP 30
9404: PUSH
9405: LD_VAR 0 1
9409: STR
9410: PPUSH
9411: CALL_OW 34
9415: ST_TO_ADDR
9416: GO 9433
// unit := NewCharacter ( ident ) ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 25
9432: ST_TO_ADDR
// if class then
9433: LD_VAR 0 3
9437: IFFALSE 9453
// SetClass ( unit , class ) ;
9439: LD_VAR 0 5
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: CALL_OW 336
// result := unit ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: LD_VAR 0 5
9462: ST_TO_ADDR
// end ;
9463: LD_VAR 0 4
9467: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
// for unit in units do
9472: LD_ADDR_VAR 0 5
9476: PUSH
9477: LD_VAR 0 1
9481: PUSH
9482: FOR_IN
9483: IFFALSE 9506
// PlaceUnitArea ( unit , area , spawnMode ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL_OW 49
9504: GO 9482
9506: POP
9507: POP
// end ;
9508: LD_VAR 0 4
9512: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9513: LD_INT 0
9515: PPUSH
9516: PPUSH
9517: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9518: LD_ADDR_VAR 0 1
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_EXP 43
9537: PUSH
9538: LD_EXP 46
9542: PUSH
9543: LD_EXP 47
9547: PUSH
9548: LD_EXP 44
9552: PUSH
9553: LD_EXP 45
9557: PUSH
9558: LD_EXP 48
9562: PUSH
9563: LD_EXP 49
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: DIFF
9578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 1
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: ST_TO_ADDR
// if radio then
9603: LD_VAR 0 4
9607: IFFALSE 9656
// begin if GetSex ( speaker ) = sex_male then
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 258
9618: PUSH
9619: LD_INT 1
9621: EQUAL
9622: IFFALSE 9640
// SayRadio ( speaker , dialogMID ) else
9624: LD_VAR 0 7
9628: PPUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 94
9638: GO 9654
// SayRadio ( speaker , dialogFID ) ;
9640: LD_VAR 0 7
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: CALL_OW 94
// end else
9654: GO 9701
// begin if GetSex ( speaker ) = sex_male then
9656: LD_VAR 0 7
9660: PPUSH
9661: CALL_OW 258
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: IFFALSE 9687
// Say ( speaker , dialogMID ) else
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: CALL_OW 88
9685: GO 9701
// Say ( speaker , dialogFID ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: CALL_OW 88
// end ; result := speaker ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 7
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9716: LD_INT 0
9718: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_VAR 0 3
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 302
9744: AND
9745: IFFALSE 9767
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_EXP 29
9756: PUSH
9757: LD_VAR 0 2
9761: STR
9762: PPUSH
9763: CALL_OW 38
// end ;
9767: LD_VAR 0 4
9771: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
// resultCharactersToSave = [ ] ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: EMPTY
9783: ST_TO_ADDR
// for unit in characters do
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9843
// if GetSide ( unit ) = side and IsOK ( unit ) then
9797: LD_VAR 0 5
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_VAR 0 3
9811: EQUAL
9812: PUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 302
9822: AND
9823: IFFALSE 9841
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_VAR 0 6
9834: PUSH
9835: LD_VAR 0 5
9839: ADD
9840: ST_TO_ADDR
9841: GO 9794
9843: POP
9844: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_EXP 29
9854: PUSH
9855: LD_VAR 0 2
9859: STR
9860: PPUSH
9861: CALL_OW 38
// end ;
9865: LD_VAR 0 4
9869: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9877: LD_ADDR_VAR 0 3
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 50
9904: PUSH
9905: EMPTY
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 69
9917: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_VAR 0 3
9927: PUSH
9928: LD_EXP 42
9932: DIFF
9933: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_EXP 52
9948: DIFF
9949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_STRING text
9957: PPUSH
9958: LD_INT 8
9960: PPUSH
9961: LD_INT 8
9963: PPUSH
9964: LD_INT -5
9966: PUSH
9967: LD_EXP 42
9971: PUSH
9972: LD_INT -6
9974: PUSH
9975: LD_INT -2
9977: PUSH
9978: LD_INT -3
9980: PUSH
9981: LD_INT -5
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 3
9996: ADD
9997: PUSH
9998: LD_INT -6
10000: PUSH
10001: LD_INT -4
10003: PUSH
10004: LD_EXP 52
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ADD
10014: PPUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 42
10044: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 6
10052: PPUSH
10053: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10057: LD_EXP 52
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10069: LD_VAR 0 4
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 235
// burlakTeam = selectedPeople ;
10081: LD_ADDR_EXP 55
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10091: LD_ADDR_EXP 56
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10125: LD_ADDR_EXP 56
10129: PUSH
10130: LD_EXP 56
10134: PUSH
10135: LD_EXP 49
10139: DIFF
10140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10200
// if IsInUnit ( i ) then
10178: LD_VAR 0 2
10182: PPUSH
10183: CALL_OW 310
10187: IFFALSE 10198
// ComExitVehicle ( i ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 121
10198: GO 10175
10200: POP
10201: POP
// if not Gnyevko in selectedPeople then
10202: LD_EXP 43
10206: PUSH
10207: LD_VAR 0 4
10211: IN
10212: NOT
10213: IFFALSE 10230
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10215: LD_EXP 43
10219: PPUSH
10220: LD_STRING Gnyevko
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: CALL 9716 0 3
// if not Kovalyuk in selectedPeople then
10230: LD_EXP 45
10234: PUSH
10235: LD_VAR 0 4
10239: IN
10240: NOT
10241: IFFALSE 10258
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10243: LD_EXP 45
10247: PPUSH
10248: LD_STRING Kovalyuk
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: CALL 9716 0 3
// if not Kirilenkova in selectedPeople then
10258: LD_EXP 44
10262: PUSH
10263: LD_VAR 0 4
10267: IN
10268: NOT
10269: IFFALSE 10286
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10271: LD_EXP 44
10275: PPUSH
10276: LD_STRING Kirilenkova
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: CALL 9716 0 3
// if not Scholtze in selectedPeople then
10286: LD_EXP 48
10290: PUSH
10291: LD_VAR 0 4
10295: IN
10296: NOT
10297: IFFALSE 10314
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10299: LD_EXP 48
10303: PPUSH
10304: LD_STRING Scholtze
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: CALL 9716 0 3
// if not Belkov in selectedPeople then
10314: LD_EXP 46
10318: PUSH
10319: LD_VAR 0 4
10323: IN
10324: NOT
10325: IFFALSE 10342
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10327: LD_EXP 46
10331: PPUSH
10332: LD_STRING Belkov
10334: PPUSH
10335: LD_INT 6
10337: PPUSH
10338: CALL 9716 0 3
// if not Belkov2 in selectedPeople then
10342: LD_EXP 47
10346: PUSH
10347: LD_VAR 0 4
10351: IN
10352: NOT
10353: IFFALSE 10370
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_STRING Belkov2
10362: PPUSH
10363: LD_INT 6
10365: PPUSH
10366: CALL 9716 0 3
// others = popovTeam diff Popov ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_EXP 56
10379: PUSH
10380: LD_EXP 52
10384: DIFF
10385: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10386: LD_VAR 0 5
10390: PPUSH
10391: LD_STRING other_survivors_with_popov
10393: PPUSH
10394: LD_INT 6
10396: PPUSH
10397: CALL 9772 0 3
// end ; end_of_file
10401: LD_VAR 0 1
10405: RET
// export function MissionIntro ; var i , unit ; begin
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10411: LD_EXP 42
10415: PPUSH
10416: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10420: LD_EXP 59
10424: PPUSH
10425: LD_STRING D1-RSol1-1
10427: PPUSH
10428: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10432: LD_EXP 53
10436: PPUSH
10437: LD_STRING D1-Pla-1
10439: PPUSH
10440: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10444: LD_EXP 42
10448: PPUSH
10449: LD_STRING D1-Bur-1
10451: PPUSH
10452: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-2
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-2
10475: PPUSH
10476: CALL_OW 88
// SelectCharacters ;
10480: CALL 9870 0 0
// InGameOff ;
10484: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10488: LD_STRING M1
10490: PPUSH
10491: CALL_OW 337
// SaveForQuickRestart ;
10495: CALL_OW 22
// for unit in popovTeam do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: LD_EXP 56
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10582
// begin for i := 3 to russianCargoPath1 do
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: DOUBLE
10518: LD_INT 3
10520: DEC
10521: ST_TO_ADDR
10522: LD_EXP 34
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10571
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_EXP 34
10539: PUSH
10540: LD_VAR 0 2
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PPUSH
10550: LD_EXP 34
10554: PUSH
10555: LD_VAR 0 2
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: ARRAY
10564: PPUSH
10565: CALL_OW 171
10569: GO 10527
10571: POP
10572: POP
// wait ( 0 0$01 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// end ;
10580: GO 10509
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 1
10588: RET
// every 0 0$1 do var unit , driver ;
10589: GO 10591
10591: DISABLE
10592: LD_INT 0
10594: PPUSH
10595: PPUSH
// begin enable ;
10596: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10597: LD_INT 4
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: NOT
10615: PUSH
10616: LD_INT 4
10618: PPUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: NOT
10666: AND
10667: IFFALSE 10671
// exit ;
10669: GO 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 4
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 6
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10750
// begin RemoveUnit ( unit ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_EXP 56
10715: IN
10716: NOT
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 51
10730: EQUAL
10731: AND
10732: IFFALSE 10748
// evacuatedCargos = evacuatedCargos + 1 ;
10734: LD_ADDR_EXP 10
10738: PUSH
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: GO 10694
10750: POP
10751: POP
// if canExitMap then
10752: LD_EXP 6
10756: IFFALSE 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_INT 4
10765: PPUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 70
10812: PUSH
10813: FOR_IN
10814: IFFALSE 11020
// begin if GetType ( unit ) = unit_vehicle then
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 247
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: IFFALSE 10929
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 313
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_EXP 42
10849: PUSH
10850: LD_EXP 43
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 46
10869: PUSH
10870: LD_EXP 47
10874: PUSH
10875: LD_EXP 48
10879: PUSH
10880: LD_EXP 49
10884: PUSH
10885: LD_EXP 54
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: NOT
10902: IFFALSE 10929
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10904: LD_ADDR_EXP 62
10908: PUSH
10909: LD_EXP 62
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 313
10923: PUSH
10924: LD_INT 1
10926: ARRAY
10927: ADD
10928: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_EXP 42
10938: PUSH
10939: LD_EXP 43
10943: PUSH
10944: LD_EXP 44
10948: PUSH
10949: LD_EXP 45
10953: PUSH
10954: LD_EXP 46
10958: PUSH
10959: LD_EXP 47
10963: PUSH
10964: LD_EXP 48
10968: PUSH
10969: LD_EXP 49
10973: PUSH
10974: LD_EXP 54
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: NOT
10991: IFFALSE 11009
// randomsToSave = randomsToSave ^ unit ;
10993: LD_ADDR_EXP 62
10997: PUSH
10998: LD_EXP 62
11002: PUSH
11003: LD_VAR 0 1
11007: ADD
11008: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 64
// end ;
11018: GO 10813
11020: POP
11021: POP
// end ;
11022: PPOPN 2
11024: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11029: LD_INT 22
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 87
// InGameOn ;
11071: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11075: LD_EXP 53
11079: PPUSH
11080: LD_STRING D2a-Pla-1
11082: PPUSH
11083: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11171
// if GetDistUnits ( building , unit ) < 10 then
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 296
11149: PUSH
11150: LD_INT 10
11152: LESS
11153: IFFALSE 11169
// ComDismantle ( unit , building ) ;
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 167
11169: GO 11132
11171: POP
11172: POP
// repeat wait ( 0 0$1 ) ;
11173: LD_INT 35
11175: PPUSH
11176: CALL_OW 67
// until not IsPlaced ( building ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 305
11189: NOT
11190: IFFALSE 11173
// InGameOff ;
11192: CALL_OW 9
// end ;
11196: LD_VAR 0 2
11200: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11201: LD_EXP 49
11205: PPUSH
11206: CALL_OW 255
11210: PUSH
11211: LD_INT 6
11213: EQUAL
11214: IFFALSE 11296
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
// begin enable ;
11222: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11294
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_EXP 49
11269: PPUSH
11270: CALL_OW 296
11274: PUSH
11275: LD_INT 9
11277: LESS
11278: IFFALSE 11292
// SetSide ( Kuzmov , 3 ) ;
11280: LD_EXP 49
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: CALL_OW 235
11292: GO 11257
11294: POP
11295: POP
// end ;
11296: PPOPN 1
11298: END
// export function Dial_FinishDepot ; var i ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
// startEvacuation = true ;
11303: LD_ADDR_EXP 8
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11311: LD_STRING MOutBuild
11313: PPUSH
11314: CALL_OW 337
// uc_side = 6 ;
11318: LD_ADDR_OWVAR 20
11322: PUSH
11323: LD_INT 6
11325: ST_TO_ADDR
// uc_nation = 3 ;
11326: LD_ADDR_OWVAR 21
11330: PUSH
11331: LD_INT 3
11333: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11334: LD_ADDR_OWVAR 37
11338: PUSH
11339: LD_INT 21
11341: ST_TO_ADDR
// vc_control = control_manual ;
11342: LD_ADDR_OWVAR 38
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// vc_engine = engine_combustion ;
11350: LD_ADDR_OWVAR 39
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11358: LD_ADDR_OWVAR 40
11362: PUSH
11363: LD_INT 51
11365: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11366: LD_ADDR_EXP 60
11370: PUSH
11371: CALL_OW 45
11375: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11376: LD_EXP 60
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11388: LD_EXP 60
11392: PPUSH
11393: LD_INT 3
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11413: CALL_OW 44
11417: PPUSH
11418: LD_EXP 60
11422: PPUSH
11423: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11427: LD_EXP 60
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 100
11437: PPUSH
11438: CALL_OW 291
// for i := 1 to 19 do
11442: LD_ADDR_VAR 0 2
11446: PUSH
11447: DOUBLE
11448: LD_INT 1
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 19
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11499
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11458: LD_EXP 60
11462: PPUSH
11463: LD_EXP 34
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_EXP 34
11482: PUSH
11483: LD_VAR 0 2
11487: ARRAY
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 171
11497: GO 11455
11499: POP
11500: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11501: LD_EXP 60
11505: PPUSH
11506: LD_INT 105
11508: PPUSH
11509: LD_INT 123
11511: PPUSH
11512: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11516: LD_EXP 60
11520: PPUSH
11521: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 21
11533: DEC
11534: ST_TO_ADDR
11535: LD_EXP 34
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11584
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11543: LD_EXP 60
11547: PPUSH
11548: LD_EXP 34
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_EXP 34
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 171
11582: GO 11540
11584: POP
11585: POP
// Say ( Burlak , D2-Bur-1 ) ;
11586: LD_EXP 42
11590: PPUSH
11591: LD_STRING D2-Bur-1
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11598: LD_EXP 53
11602: PPUSH
11603: LD_STRING D2-Pla-1
11605: PPUSH
11606: CALL_OW 94
// PrepareSecondBaseTeam ;
11610: CALL 3290 0 0
// end ;
11614: LD_VAR 0 1
11618: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// dial_labUpgradedBlock = true ;
11623: LD_ADDR_EXP 15
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 42
11691: PUSH
11692: LD_EXP 43
11696: PUSH
11697: LD_EXP 44
11701: PUSH
11702: LD_EXP 45
11706: PUSH
11707: LD_EXP 46
11711: PUSH
11712: LD_EXP 47
11716: PUSH
11717: LD_EXP 48
11721: PUSH
11722: LD_EXP 49
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11738: LD_EXP 48
11742: PPUSH
11743: CALL_OW 302
11747: PUSH
11748: LD_EXP 48
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: AND
11762: IFFALSE 11790
// begin Say ( Scholtze , D5-Sch-1 ) ;
11764: LD_EXP 48
11768: PPUSH
11769: LD_STRING D5-Sch-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11776: LD_EXP 42
11780: PPUSH
11781: LD_STRING D5-Bur-1
11783: PPUSH
11784: CALL_OW 88
// end else
11788: GO 11925
// if randomMaleSci then
11790: LD_VAR 0 2
11794: IFFALSE 11826
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: LD_STRING D5-RSci1-1
11807: PPUSH
11808: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11812: LD_EXP 42
11816: PPUSH
11817: LD_STRING D5-Bur-1
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 11925
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 42
11886: PUSH
11887: EMPTY
11888: LIST
11889: DIFF
11890: ST_TO_ADDR
// if randomMaleSci then
11891: LD_VAR 0 2
11895: IFFALSE 11925
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_STRING D5-RSci1-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11913: LD_EXP 42
11917: PPUSH
11918: LD_STRING D5-Bur-1
11920: PPUSH
11921: CALL_OW 88
// end ; end ; end ;
11925: LD_VAR 0 1
11929: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11930: LD_EXP 60
11934: PPUSH
11935: LD_INT 105
11937: PPUSH
11938: LD_INT 123
11940: PPUSH
11941: CALL_OW 297
11945: PUSH
11946: LD_INT 12
11948: LESS
11949: IFFALSE 11975
11951: GO 11953
11953: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11954: LD_EXP 60
11958: PPUSH
11959: CALL_OW 313
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_STRING D2a-RSol1-1
11970: PPUSH
11971: CALL_OW 88
11975: END
// every 0 0$15 trigger startEvacuation do
11976: LD_EXP 8
11980: IFFALSE 11990
11982: GO 11984
11984: DISABLE
// begin enable ;
11985: ENABLE
// CreateEvacuateUnit ;
11986: CALL 2520 0 0
// end ;
11990: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11991: LD_EXP 10
11995: PUSH
11996: LD_INT 3
11998: GREATEREQUAL
11999: IFFALSE 12098
12001: GO 12003
12003: DISABLE
// begin if IsOk ( Kuzmov ) then
12004: LD_EXP 49
12008: PPUSH
12009: CALL_OW 302
12013: IFFALSE 12083
// begin DialogueOn ;
12015: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12019: LD_EXP 49
12023: PPUSH
12024: LD_STRING D2b-Kuz-1
12026: PPUSH
12027: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12031: LD_EXP 42
12035: PPUSH
12036: LD_STRING D2b-Bur-1
12038: PPUSH
12039: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-2
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-3
12074: PPUSH
12075: CALL_OW 88
// DialogueOff ;
12079: CALL_OW 7
// end ; Query ( Q1 ) ;
12083: LD_STRING Q1
12085: PPUSH
12086: CALL_OW 97
// canStealCargo = true ;
12090: LD_ADDR_EXP 11
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// end ;
12098: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12099: LD_EXP 11
12103: IFFALSE 12401
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
// begin enable ;
12112: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12399
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 50
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12395
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12205: LD_VAR 0 2
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 296
12219: PUSH
12220: LD_INT 8
12222: LESS
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_EXP 13
12233: IN
12234: NOT
12235: AND
12236: PUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 289
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: AND
12254: IFFALSE 12393
// begin stealCargos = stealCargos ^ cargo ;
12256: LD_ADDR_EXP 13
12260: PUSH
12261: LD_EXP 13
12265: PUSH
12266: LD_VAR 0 2
12270: ADD
12271: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12272: LD_STRING QQrSteal
12274: PPUSH
12275: CALL_OW 97
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12361
12288: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12289: LD_ADDR_EXP 12
12293: PUSH
12294: LD_EXP 12
12298: PUSH
12299: LD_INT 1
12301: PLUS
12302: ST_TO_ADDR
// DialogueOn ;
12303: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12307: LD_EXP 42
12311: PPUSH
12312: LD_STRING DQrSteal#1-Bur-1
12314: PPUSH
12315: CALL_OW 88
// DialogueOff ;
12319: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12323: LD_VAR 0 2
12327: PPUSH
12328: LD_INT 14
12330: PPUSH
12331: CALL_OW 113
// AddComUnload ( cargo ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 92
12351: PPUSH
12352: LD_INT 177
12354: PPUSH
12355: CALL_OW 171
// end ; 2 :
12359: GO 12393
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12392
12369: POP
// begin DialogueOn ;
12370: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12374: LD_EXP 42
12378: PPUSH
12379: LD_STRING DQrSteal#2-Bur-1
12381: PPUSH
12382: CALL_OW 88
// DialogueOff ;
12386: CALL_OW 7
// end ; end ;
12390: GO 12393
12392: POP
// end ;
12393: GO 12202
12395: POP
12396: POP
12397: GO 12158
12399: POP
12400: POP
// end ;
12401: PPOPN 2
12403: END
// every 0 0$12 trigger stealWarmCount = 3 do
12404: LD_EXP 12
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: IFFALSE 12484
12414: GO 12416
12416: DISABLE
// begin DialogueOn ;
12417: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12421: LD_EXP 53
12425: PPUSH
12426: LD_STRING D3A-Pla-1
12428: PPUSH
12429: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12433: LD_EXP 42
12437: PPUSH
12438: LD_STRING D3A-Bur-1
12440: PPUSH
12441: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-2
12452: PPUSH
12453: CALL_OW 94
// if IsOK ( Kuzmov ) then
12457: LD_EXP 49
12461: PPUSH
12462: CALL_OW 302
12466: IFFALSE 12480
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12468: LD_EXP 49
12472: PPUSH
12473: LD_STRING D3A-Kuz-2
12475: PPUSH
12476: CALL_OW 88
// DialogueOff ;
12480: CALL_OW 7
// end ;
12484: END
// every 0 0$10 trigger stealWarmCount = 6 do
12485: LD_EXP 12
12489: PUSH
12490: LD_INT 6
12492: EQUAL
12493: IFFALSE 12542
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12502: LD_EXP 53
12506: PPUSH
12507: LD_STRING D3B-Pla-1
12509: PPUSH
12510: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12514: LD_EXP 42
12518: PPUSH
12519: LD_STRING D3B-Bur-1
12521: PPUSH
12522: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-2
12533: PPUSH
12534: CALL_OW 94
// DialogueOff ;
12538: CALL_OW 7
// end ;
12542: END
// every 0 0$10 trigger stealWarmCount = 7 do
12543: LD_EXP 12
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
// begin DialogueOn ;
12556: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12560: LD_EXP 53
12564: PPUSH
12565: LD_STRING D3C-Pla-1
12567: PPUSH
12568: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12572: LD_EXP 42
12576: PPUSH
12577: LD_STRING D3C-Bur-1
12579: PPUSH
12580: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-2
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-2
12603: PPUSH
12604: CALL_OW 88
// if IsOK ( Kuzmov ) then
12608: LD_EXP 49
12612: PPUSH
12613: CALL_OW 302
12617: IFFALSE 12631
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12619: LD_EXP 49
12623: PPUSH
12624: LD_STRING D3C-Kuz-2
12626: PPUSH
12627: CALL_OW 88
// DialogueOff ;
12631: CALL_OW 7
// end ;
12635: END
// every 0 0$10 trigger stealWarmCount = 8 do
12636: LD_EXP 12
12640: PUSH
12641: LD_INT 8
12643: EQUAL
12644: IFFALSE 12836
12646: GO 12648
12648: DISABLE
// begin canStealCargo = false ;
12649: LD_ADDR_EXP 11
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// DialogueOn ;
12657: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12661: LD_EXP 53
12665: PPUSH
12666: LD_STRING D3D-Pla-1
12668: PPUSH
12669: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12673: LD_EXP 42
12677: PPUSH
12678: LD_STRING D3D-Bur-1
12680: PPUSH
12681: CALL_OW 88
// if kurinOpinion = 0 then
12685: LD_EXP 2
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12713
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12695: LD_EXP 53
12699: PPUSH
12700: LD_STRING D3E-Pla-1
12702: PPUSH
12703: CALL_OW 94
// Lose_Arrest ;
12707: CALL 7552 0 0
// exit ;
12711: GO 12836
// end ; if meetBelkovBrother = 1 then
12713: LD_EXP 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12723: LD_EXP 53
12727: PPUSH
12728: LD_STRING D3E-Pla-1a
12730: PPUSH
12731: CALL_OW 94
// Lose_Arrest ;
12735: CALL 7552 0 0
// exit ;
12739: GO 12836
// end ; if platonovOpinion = 0 then
12741: LD_EXP 1
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12769
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12751: LD_EXP 53
12755: PPUSH
12756: LD_STRING D3E-Pla-1b
12758: PPUSH
12759: CALL_OW 94
// Lose_Arrest ;
12763: CALL 7552 0 0
// exit ;
12767: GO 12836
// end ; if platonovOpinion = 1 then
12769: LD_EXP 1
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12797
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12779: LD_EXP 53
12783: PPUSH
12784: LD_STRING D3E-Pla-1c
12786: PPUSH
12787: CALL_OW 94
// Lose_Arrest ;
12791: CALL 7552 0 0
// exit ;
12795: GO 12836
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12797: LD_EXP 53
12801: PPUSH
12802: LD_STRING D3D-Pla-2
12804: PPUSH
12805: CALL_OW 94
// if IsOK ( Kuzmov ) then
12809: LD_EXP 49
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12820: LD_EXP 49
12824: PPUSH
12825: LD_STRING D3D-Kuz-2
12827: PPUSH
12828: CALL_OW 88
// DialogueOff ;
12832: CALL_OW 7
// end ;
12836: END
// every 0 0$20 do var allyUntis ;
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// wait ( 0 0$10 ) ;
12844: LD_INT 350
12846: PPUSH
12847: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_EXP 56
12892: DIFF
12893: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_EXP 54
12908: DIFF
12909: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_EXP 49
12924: DIFF
12925: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_VAR 0 1
12935: PUSH
12936: LD_EXP 57
12940: DIFF
12941: ST_TO_ADDR
// if not allyUntis then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12975
// ComUnload ( allyUntis ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 92
12967: PPUSH
12968: LD_INT 176
12970: PPUSH
12971: CALL_OW 171
// end ;
12975: PPOPN 1
12977: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12978: LD_EXP 10
12982: PUSH
12983: LD_EXP 14
12987: GREATEREQUAL
12988: IFFALSE 13001
12990: GO 12992
12992: DISABLE
// begin startEvacuation = false ;
12993: LD_ADDR_EXP 8
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_EXP 57
13064: DIFF
13065: NOT
13066: AND
13067: IFFALSE 13662
13069: GO 13071
13071: DISABLE
// begin wait ( 1 1$00 ) ;
13072: LD_INT 2100
13074: PPUSH
13075: CALL_OW 67
// DialogueOn ;
13079: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13083: LD_EXP 53
13087: PPUSH
13088: LD_STRING D4-Pla-1
13090: PPUSH
13091: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13095: LD_EXP 42
13099: PPUSH
13100: LD_STRING D4-Bur-1
13102: PPUSH
13103: CALL_OW 88
// DialogueOff ;
13107: CALL_OW 7
// wait ( 0 0$2 ) ;
13111: LD_INT 70
13113: PPUSH
13114: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13118: LD_EXP 49
13122: PPUSH
13123: CALL_OW 302
13127: PUSH
13128: LD_EXP 49
13132: PPUSH
13133: CALL_OW 255
13137: PUSH
13138: LD_INT 3
13140: EQUAL
13141: AND
13142: IFFALSE 13424
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13144: LD_EXP 49
13148: PPUSH
13149: LD_STRING D4-Kuz-1
13151: PPUSH
13152: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13156: LD_EXP 46
13160: PPUSH
13161: CALL_OW 302
13165: PUSH
13166: LD_EXP 46
13170: PPUSH
13171: CALL_OW 255
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: AND
13180: IFFALSE 13196
// Say ( Belkov , D4-Bel-1 ) else
13182: LD_EXP 46
13186: PPUSH
13187: LD_STRING D4-Bel-1
13189: PPUSH
13190: CALL_OW 88
13194: GO 13234
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13196: LD_EXP 47
13200: PPUSH
13201: CALL_OW 302
13205: PUSH
13206: LD_EXP 47
13210: PPUSH
13211: CALL_OW 255
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: AND
13220: IFFALSE 13234
// Say ( Belkov2 , D4-Bel-1 ) ;
13222: LD_EXP 47
13226: PPUSH
13227: LD_STRING D4-Bel-1
13229: PPUSH
13230: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13234: LD_EXP 42
13238: PPUSH
13239: LD_STRING D4-Bur-2
13241: PPUSH
13242: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13246: LD_EXP 43
13250: PPUSH
13251: CALL_OW 302
13255: PUSH
13256: LD_EXP 43
13260: PPUSH
13261: CALL_OW 255
13265: PUSH
13266: LD_INT 3
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13272: LD_EXP 43
13276: PPUSH
13277: LD_STRING D4-Gny-2
13279: PPUSH
13280: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13284: LD_EXP 42
13288: PPUSH
13289: LD_STRING D4-Bur-3
13291: PPUSH
13292: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13296: LD_EXP 42
13300: PPUSH
13301: LD_STRING D4-Bur-3a
13303: PPUSH
13304: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13308: LD_EXP 46
13312: PPUSH
13313: CALL_OW 302
13317: PUSH
13318: LD_EXP 46
13322: PPUSH
13323: CALL_OW 255
13327: PUSH
13328: LD_INT 3
13330: EQUAL
13331: AND
13332: IFFALSE 13348
// Say ( Belkov , D4-Bel-3 ) else
13334: LD_EXP 46
13338: PPUSH
13339: LD_STRING D4-Bel-3
13341: PPUSH
13342: CALL_OW 88
13346: GO 13386
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13348: LD_EXP 47
13352: PPUSH
13353: CALL_OW 302
13357: PUSH
13358: LD_EXP 47
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: AND
13372: IFFALSE 13386
// Say ( Belkov2 , D4-Bel-3 ) ;
13374: LD_EXP 47
13378: PPUSH
13379: LD_STRING D4-Bel-3
13381: PPUSH
13382: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13386: LD_EXP 45
13390: PPUSH
13391: CALL_OW 302
13395: PUSH
13396: LD_EXP 45
13400: PPUSH
13401: CALL_OW 255
13405: PUSH
13406: LD_INT 3
13408: EQUAL
13409: AND
13410: IFFALSE 13424
// Say ( Kovalyuk , D4-Kov-3 ) ;
13412: LD_EXP 45
13416: PPUSH
13417: LD_STRING D4-Kov-3
13419: PPUSH
13420: CALL_OW 88
// end ; PrepareFirstAttack ;
13424: CALL 4175 0 0
// firstAttack = true ;
13428: LD_ADDR_EXP 18
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13436: LD_INT 350
13438: PPUSH
13439: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13443: LD_EXP 42
13447: PPUSH
13448: LD_STRING D7-Bur-1
13450: PPUSH
13451: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13455: LD_EXP 64
13459: PPUSH
13460: LD_INT 135
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 134
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 132
13482: PUSH
13483: LD_INT 26
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 128
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 123
13502: PUSH
13503: LD_INT 37
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 118
13512: PUSH
13513: LD_INT 45
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 51
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 57
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 99
13542: PUSH
13543: LD_INT 62
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 93
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 86
13562: PUSH
13563: LD_INT 72
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: LD_INT 75
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 71
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 69
13592: PUSH
13593: LD_INT 88
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 71
13602: PUSH
13603: LD_INT 95
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 74
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 80
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 11
13657: PPUSH
13658: CALL 5018 0 5
// end ;
13662: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13663: LD_EXP 64
13667: PPUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: NOT
13683: PUSH
13684: LD_EXP 18
13688: AND
13689: IFFALSE 13748
13691: GO 13693
13693: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13694: LD_EXP 57
13698: PPUSH
13699: CALL_OW 122
// wait ( 0 0$1 ) ;
13703: LD_INT 35
13705: PPUSH
13706: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13710: LD_EXP 57
13714: PPUSH
13715: LD_INT 114
13717: PPUSH
13718: LD_INT 114
13720: PPUSH
13721: CALL_OW 111
// wait ( 0 0$15 ) ;
13725: LD_INT 525
13727: PPUSH
13728: CALL_OW 67
// firstAttack = false ;
13732: LD_ADDR_EXP 18
13736: PUSH
13737: LD_INT 0
13739: ST_TO_ADDR
// enableAttacks = true ;
13740: LD_ADDR_EXP 17
13744: PUSH
13745: LD_INT 1
13747: ST_TO_ADDR
// end ;
13748: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13749: LD_OWVAR 67
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: PUSH
13758: LD_EXP 57
13762: AND
13763: IFFALSE 13831
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin enable ;
13771: ENABLE
// for un in secondBaseTeam do
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_EXP 57
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13829
// if IsInArea ( un , HillArea ) then
13785: LD_VAR 0 1
13789: PPUSH
13790: LD_INT 5
13792: PPUSH
13793: CALL_OW 308
13797: IFFALSE 13827
// begin SetSide ( un , 3 ) ;
13799: LD_VAR 0 1
13803: PPUSH
13804: LD_INT 3
13806: PPUSH
13807: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13811: LD_ADDR_EXP 57
13815: PUSH
13816: LD_EXP 57
13820: PUSH
13821: LD_VAR 0 1
13825: DIFF
13826: ST_TO_ADDR
// end ;
13827: GO 13782
13829: POP
13830: POP
// end ;
13831: PPOPN 1
13833: END
// export function Dial_Contact ; begin
13834: LD_INT 0
13836: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13837: LD_EXP 42
13841: PPUSH
13842: LD_STRING D7-Bur-1a
13844: PPUSH
13845: CALL_OW 88
// wait ( 0 0$12 ) ;
13849: LD_INT 420
13851: PPUSH
13852: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13856: LD_EXP 42
13860: PPUSH
13861: LD_STRING D7-Bur-1b
13863: PPUSH
13864: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13868: LD_EXP 46
13872: PPUSH
13873: CALL_OW 302
13877: PUSH
13878: LD_EXP 46
13882: PPUSH
13883: CALL_OW 255
13887: PUSH
13888: LD_INT 3
13890: EQUAL
13891: AND
13892: IFFALSE 13908
// Say ( Belkov , D7-Bel-1 ) else
13894: LD_EXP 46
13898: PPUSH
13899: LD_STRING D7-Bel-1
13901: PPUSH
13902: CALL_OW 88
13906: GO 13946
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13908: LD_EXP 47
13912: PPUSH
13913: CALL_OW 302
13917: PUSH
13918: LD_EXP 47
13922: PPUSH
13923: CALL_OW 255
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: AND
13932: IFFALSE 13946
// Say ( Belkov2 , D7-Bel-1 ) ;
13934: LD_EXP 47
13938: PPUSH
13939: LD_STRING D7-Bel-1
13941: PPUSH
13942: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13946: LD_EXP 49
13950: PPUSH
13951: CALL_OW 302
13955: PUSH
13956: LD_EXP 49
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: EQUAL
13969: AND
13970: IFFALSE 13984
// Say ( Kuzmov , D7-Kuz-1 ) ;
13972: LD_EXP 49
13976: PPUSH
13977: LD_STRING D7-Kuz-1
13979: PPUSH
13980: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13984: LD_EXP 45
13988: PPUSH
13989: CALL_OW 302
13993: PUSH
13994: LD_EXP 45
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_INT 3
14006: EQUAL
14007: AND
14008: IFFALSE 14022
// Say ( Kovalyuk , D7-Kov-1 ) ;
14010: LD_EXP 45
14014: PPUSH
14015: LD_STRING D7-Kov-1
14017: PPUSH
14018: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14022: LD_EXP 48
14026: PPUSH
14027: CALL_OW 302
14031: PUSH
14032: LD_EXP 48
14036: PPUSH
14037: CALL_OW 255
14041: PUSH
14042: LD_INT 3
14044: EQUAL
14045: AND
14046: IFFALSE 14060
// Say ( Scholtze , D7-Sch-1 ) ;
14048: LD_EXP 48
14052: PPUSH
14053: LD_STRING D7-Sch-1
14055: PPUSH
14056: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14060: LD_INT 22
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 26
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: PPUSH
14100: LD_STRING D7-RSol1-1
14102: PPUSH
14103: LD_STRING 
14105: PPUSH
14106: LD_INT 0
14108: PPUSH
14109: CALL 9513 0 4
// PrepareHeike ;
14113: CALL 3495 0 0
// wait ( 0 0$10 ) ;
14117: LD_INT 350
14119: PPUSH
14120: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14124: LD_EXP 63
14128: PPUSH
14129: LD_STRING D7a-Hke-1
14131: PPUSH
14132: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14136: LD_EXP 42
14140: PPUSH
14141: LD_STRING D7a-Bur-1
14143: PPUSH
14144: CALL_OW 88
// wait ( 0 0$50 ) ;
14148: LD_INT 1750
14150: PPUSH
14151: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14155: LD_EXP 49
14159: PPUSH
14160: CALL_OW 302
14164: PUSH
14165: LD_EXP 49
14169: PPUSH
14170: CALL_OW 255
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: AND
14179: IFFALSE 14195
// Say ( Kuzmov , D8-Kuz-1 ) else
14181: LD_EXP 49
14185: PPUSH
14186: LD_STRING D8-Kuz-1
14188: PPUSH
14189: CALL_OW 88
14193: GO 14248
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_STRING D8-RSol1-1
14237: PPUSH
14238: LD_STRING 
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL 9513 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14248: LD_EXP 42
14252: PPUSH
14253: LD_STRING D8-Bur-1
14255: PPUSH
14256: CALL_OW 88
// end ;
14260: LD_VAR 0 1
14264: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14265: LD_EXP 54
14269: PPUSH
14270: CALL_OW 305
14274: NOT
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 50
14298: PUSH
14299: EMPTY
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: NOT
14312: AND
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 50
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: PUSH
14350: LD_INT 5
14352: LESS
14353: AND
14354: PUSH
14355: LD_INT 5
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: PPUSH
14371: CALL_OW 70
14375: PUSH
14376: LD_INT 3
14378: GREATER
14379: AND
14380: IFFALSE 14389
14382: GO 14384
14384: DISABLE
// Lose_ArabBreakthrough ;
14385: CALL 7567 0 0
14389: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14390: LD_EXP 19
14394: PUSH
14395: LD_EXP 38
14399: GREATEREQUAL
14400: IFFALSE 14624
14402: GO 14404
14404: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14405: LD_EXP 53
14409: PPUSH
14410: LD_STRING D9-Pla-1
14412: PPUSH
14413: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14417: LD_EXP 42
14421: PPUSH
14422: LD_STRING D9-Bur-1
14424: PPUSH
14425: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-2
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-2
14448: PPUSH
14449: CALL_OW 88
// wait ( 2 2$0 ) ;
14453: LD_INT 4200
14455: PPUSH
14456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14460: LD_INT 35
14462: PPUSH
14463: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14467: LD_INT 12
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: CALL_OW 428
14477: NOT
14478: IFFALSE 14460
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14480: LD_EXP 54
14484: PPUSH
14485: LD_INT 12
14487: PPUSH
14488: LD_INT 3
14490: PPUSH
14491: LD_INT 2
14493: PPUSH
14494: LD_INT 0
14496: PPUSH
14497: CALL_OW 50
// arabianCanExitMap = true ;
14501: LD_ADDR_EXP 7
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14509: LD_INT 35
14511: PPUSH
14512: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14516: LD_EXP 54
14520: PPUSH
14521: CALL_OW 87
// DialogueOn ;
14525: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14529: LD_EXP 54
14533: PPUSH
14534: LD_STRING D10-Gay-1
14536: PPUSH
14537: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14541: LD_EXP 42
14545: PPUSH
14546: LD_STRING D10-Bur-1
14548: PPUSH
14549: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-2
14560: PPUSH
14561: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14565: LD_EXP 52
14569: PPUSH
14570: LD_STRING D10-Pop-2
14572: PPUSH
14573: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-3
14584: PPUSH
14585: CALL_OW 94
// DialogueOff ;
14589: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14593: LD_EXP 54
14597: PPUSH
14598: LD_INT 36
14600: PPUSH
14601: LD_INT 38
14603: PPUSH
14604: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14608: LD_EXP 54
14612: PPUSH
14613: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14617: LD_STRING M2
14619: PPUSH
14620: CALL_OW 337
// end ;
14624: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14625: LD_EXP 7
14629: IFFALSE 14702
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
// begin enable ;
14637: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14638: LD_INT 22
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: PPUSH
14656: LD_INT 13
14658: PPUSH
14659: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 13
14670: PPUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 70
14685: PUSH
14686: FOR_IN
14687: IFFALSE 14700
// RemoveUnit ( unit ) ;
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 64
14698: GO 14686
14700: POP
14701: POP
// end ;
14702: PPOPN 1
14704: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14705: LD_EXP 20
14709: NOT
14710: IFFALSE 15100
14712: GO 14714
14714: DISABLE
14715: LD_INT 0
14717: PPUSH
14718: PPUSH
// begin enable ;
14719: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14720: LD_ADDR_VAR 0 1
14724: PUSH
14725: LD_INT 22
14727: PUSH
14728: LD_INT 3
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 21
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 69
14753: PUSH
14754: FOR_IN
14755: IFFALSE 15098
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_EXP 54
14766: PPUSH
14767: CALL_OW 296
14771: PUSH
14772: LD_INT 6
14774: LESS
14775: IFFALSE 15096
// begin SetSide ( Gaydar , 3 ) ;
14777: LD_EXP 54
14781: PPUSH
14782: LD_INT 3
14784: PPUSH
14785: CALL_OW 235
// ComWalk ( Gaydar ) ;
14789: LD_EXP 54
14793: PPUSH
14794: CALL_OW 138
// saveGaydar = true ;
14798: LD_ADDR_EXP 20
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14806: LD_INT 35
14808: PPUSH
14809: CALL_OW 67
// DialogueOn ;
14813: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14817: LD_EXP 54
14821: PPUSH
14822: LD_STRING D11-Gay-1
14824: PPUSH
14825: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14829: LD_EXP 42
14833: PPUSH
14834: LD_EXP 54
14838: PPUSH
14839: CALL_OW 296
14843: PUSH
14844: LD_INT 6
14846: LESS
14847: NOT
14848: IFFALSE 14948
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14850: LD_ADDR_VAR 0 2
14854: PUSH
14855: LD_INT 22
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 26
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 50
14887: PUSH
14888: EMPTY
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_EXP 54
14906: DIFF
14907: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_EXP 54
14917: PPUSH
14918: CALL_OW 74
14922: PPUSH
14923: LD_STRING D11-RSol1-1
14925: PPUSH
14926: CALL_OW 88
// gaydarWaitForBurlak = true ;
14930: LD_ADDR_EXP 21
14934: PUSH
14935: LD_INT 1
14937: ST_TO_ADDR
// DialogueOff ;
14938: CALL_OW 7
// exit ;
14942: POP
14943: POP
14944: GO 15100
// end else
14946: GO 15096
// begin Say ( Gaydar , D11-Gay-2 ) ;
14948: LD_EXP 54
14952: PPUSH
14953: LD_STRING D11-Gay-2
14955: PPUSH
14956: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14960: LD_EXP 42
14964: PPUSH
14965: LD_STRING D11-Bur-2
14967: PPUSH
14968: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-3
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-3
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-4
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-4
15015: PPUSH
15016: CALL_OW 88
// wait ( 0 0$2 ) ;
15020: LD_INT 70
15022: PPUSH
15023: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15027: LD_EXP 52
15031: PPUSH
15032: LD_STRING D12-Pop-1
15034: PPUSH
15035: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15039: LD_EXP 42
15043: PPUSH
15044: LD_STRING D12-Bur-1
15046: PPUSH
15047: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15051: LD_EXP 53
15055: PPUSH
15056: LD_STRING D12-Pla-1
15058: PPUSH
15059: CALL_OW 94
// DialogueOff ;
15063: CALL_OW 7
// canExitMap = true ;
15067: LD_ADDR_EXP 6
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15075: LD_STRING MFinal
15077: PPUSH
15078: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15082: LD_INT 4
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 424
// exit ;
15092: POP
15093: POP
15094: GO 15100
// end ; end ; end ;
15096: GO 14754
15098: POP
15099: POP
// end ;
15100: PPOPN 2
15102: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15103: LD_EXP 42
15107: PPUSH
15108: LD_EXP 54
15112: PPUSH
15113: CALL_OW 296
15117: PUSH
15118: LD_INT 6
15120: LESS
15121: PUSH
15122: LD_EXP 21
15126: AND
15127: IFFALSE 15280
15129: GO 15131
15131: DISABLE
// begin DialogueOn ;
15132: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15136: LD_EXP 54
15140: PPUSH
15141: LD_STRING D11-Gay-2
15143: PPUSH
15144: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15148: LD_EXP 42
15152: PPUSH
15153: LD_STRING D11-Bur-2
15155: PPUSH
15156: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-3
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-3
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-4
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-4
15203: PPUSH
15204: CALL_OW 88
// wait ( 0 0$2 ) ;
15208: LD_INT 70
15210: PPUSH
15211: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15215: LD_EXP 52
15219: PPUSH
15220: LD_STRING D12-Pop-1
15222: PPUSH
15223: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15227: LD_EXP 42
15231: PPUSH
15232: LD_STRING D12-Bur-1
15234: PPUSH
15235: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15239: LD_EXP 53
15243: PPUSH
15244: LD_STRING D12-Pla-1
15246: PPUSH
15247: CALL_OW 94
// DialogueOff ;
15251: CALL_OW 7
// canExitMap = true ;
15255: LD_ADDR_EXP 6
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15263: LD_STRING MFinal
15265: PPUSH
15266: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15270: LD_INT 4
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 424
// end ;
15280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15281: LD_INT 22
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 0
15312: EQUAL
15313: PUSH
15314: LD_EXP 6
15318: AND
15319: IFFALSE 15328
15321: GO 15323
15323: DISABLE
// FinishMission ; end_of_file
15324: CALL 7685 0 0
15328: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15329: LD_EXP 17
15333: PUSH
15334: LD_EXP 19
15338: PUSH
15339: LD_INT 0
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 19
15348: PUSH
15349: LD_EXP 38
15353: LESS
15354: AND
15355: IFFALSE 15407
15357: GO 15359
15359: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15360: LD_INT 7
15362: PUSH
15363: LD_INT 10
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 2
15375: PPUSH
15376: CALL_OW 12
15380: ARRAY
15381: PPUSH
15382: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15386: LD_EXP 65
15390: PPUSH
15391: EMPTY
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: LD_INT 1
15401: NEG
15402: PPUSH
15403: CALL 5018 0 5
// end ;
15407: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15408: LD_EXP 17
15412: PUSH
15413: LD_EXP 19
15417: PUSH
15418: LD_INT 0
15420: GREATEREQUAL
15421: AND
15422: PUSH
15423: LD_EXP 19
15427: PUSH
15428: LD_EXP 38
15432: LESS
15433: AND
15434: IFFALSE 15664
15436: GO 15438
15438: DISABLE
// begin currentWave = currentWave + 1 ;
15439: LD_ADDR_EXP 19
15443: PUSH
15444: LD_EXP 19
15448: PUSH
15449: LD_INT 1
15451: PLUS
15452: ST_TO_ADDR
// PrepareArabianVehicles ;
15453: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15457: LD_EXP 65
15461: PPUSH
15462: LD_INT 135
15464: PUSH
15465: LD_INT 4
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 134
15474: PUSH
15475: LD_INT 19
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 132
15484: PUSH
15485: LD_INT 26
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 128
15494: PUSH
15495: LD_INT 31
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 123
15504: PUSH
15505: LD_INT 37
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 118
15514: PUSH
15515: LD_INT 45
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 112
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 106
15534: PUSH
15535: LD_INT 57
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 99
15544: PUSH
15545: LD_INT 62
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 93
15554: PUSH
15555: LD_INT 67
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 86
15564: PUSH
15565: LD_INT 72
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 78
15574: PUSH
15575: LD_INT 75
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 71
15584: PUSH
15585: LD_INT 81
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 69
15594: PUSH
15595: LD_INT 88
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 71
15604: PUSH
15605: LD_INT 95
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 74
15614: PUSH
15615: LD_INT 103
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 80
15624: PUSH
15625: LD_INT 113
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PPUSH
15651: LD_INT 0
15653: PPUSH
15654: LD_INT 1
15656: PPUSH
15657: LD_INT 11
15659: PPUSH
15660: CALL 5018 0 5
// end ;
15664: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15665: LD_EXP 17
15669: PUSH
15670: LD_OWVAR 67
15674: PUSH
15675: LD_INT 2
15677: EQUAL
15678: AND
15679: PUSH
15680: LD_EXP 19
15684: PUSH
15685: LD_INT 0
15687: GREATEREQUAL
15688: AND
15689: PUSH
15690: LD_EXP 19
15694: PUSH
15695: LD_EXP 38
15699: LESS
15700: AND
15701: IFFALSE 15829
15703: GO 15705
15705: DISABLE
// begin PrepareArabianVehicles ;
15706: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15710: LD_EXP 65
15714: PPUSH
15715: LD_INT 135
15717: PUSH
15718: LD_INT 4
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 134
15727: PUSH
15728: LD_INT 19
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 132
15737: PUSH
15738: LD_INT 26
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 128
15747: PUSH
15748: LD_INT 31
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 123
15757: PUSH
15758: LD_INT 37
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 118
15767: PUSH
15768: LD_INT 45
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 112
15777: PUSH
15778: LD_INT 51
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 106
15787: PUSH
15788: LD_INT 57
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 99
15797: PUSH
15798: LD_INT 62
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: PPUSH
15816: LD_INT 0
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: LD_INT 11
15824: PPUSH
15825: CALL 5018 0 5
// end ;
15829: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15830: LD_EXP 17
15834: PUSH
15835: LD_OWVAR 67
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: AND
15844: PUSH
15845: LD_EXP 19
15849: PUSH
15850: LD_INT 0
15852: GREATEREQUAL
15853: AND
15854: PUSH
15855: LD_EXP 19
15859: PUSH
15860: LD_EXP 38
15864: LESS
15865: AND
15866: IFFALSE 16060
15868: GO 15870
15870: DISABLE
// begin PrepareArabianVehicles ;
15871: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15875: LD_EXP 65
15879: PPUSH
15880: LD_INT 135
15882: PUSH
15883: LD_INT 4
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 134
15892: PUSH
15893: LD_INT 19
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 132
15902: PUSH
15903: LD_INT 26
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 128
15912: PUSH
15913: LD_INT 31
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 123
15922: PUSH
15923: LD_INT 37
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 118
15932: PUSH
15933: LD_INT 45
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 112
15942: PUSH
15943: LD_INT 51
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 106
15952: PUSH
15953: LD_INT 57
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 99
15962: PUSH
15963: LD_INT 62
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 104
15972: PUSH
15973: LD_INT 71
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 110
15982: PUSH
15983: LD_INT 78
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 119
15992: PUSH
15993: LD_INT 88
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 128
16002: PUSH
16003: LD_INT 97
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 135
16012: PUSH
16013: LD_INT 106
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 140
16022: PUSH
16023: LD_INT 153
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: LD_INT 0
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: LD_INT 11
16055: PPUSH
16056: CALL 5018 0 5
// end ;
16060: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16061: LD_EXP 17
16065: PUSH
16066: LD_EXP 19
16070: PUSH
16071: LD_INT 1
16073: EQUAL
16074: AND
16075: PUSH
16076: LD_EXP 19
16080: PUSH
16081: LD_EXP 38
16085: LESS
16086: AND
16087: IFFALSE 16164
16089: GO 16091
16091: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16092: LD_INT 7
16094: PPUSH
16095: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16099: LD_EXP 65
16103: PPUSH
16104: LD_INT 157
16106: PUSH
16107: LD_INT 31
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 194
16116: PUSH
16117: LD_INT 124
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 174
16126: PUSH
16127: LD_INT 158
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 151
16136: PUSH
16137: LD_INT 164
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: PPUSH
16150: LD_INT 0
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: LD_INT 1
16158: NEG
16159: PPUSH
16160: CALL 5018 0 5
// end ;
16164: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16165: LD_EXP 17
16169: PUSH
16170: LD_EXP 19
16174: PUSH
16175: LD_INT 1
16177: EQUAL
16178: AND
16179: PUSH
16180: LD_EXP 19
16184: PUSH
16185: LD_EXP 38
16189: LESS
16190: AND
16191: IFFALSE 16340
16193: GO 16195
16195: DISABLE
// begin wait ( 1 1$30 ) ;
16196: LD_INT 3150
16198: PPUSH
16199: CALL_OW 67
// currentWave = currentWave + 1 ;
16203: LD_ADDR_EXP 19
16207: PUSH
16208: LD_EXP 19
16212: PUSH
16213: LD_INT 1
16215: PLUS
16216: ST_TO_ADDR
// PrepareArabianVehicles ;
16217: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16221: LD_EXP 65
16225: PPUSH
16226: LD_INT 135
16228: PUSH
16229: LD_INT 4
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 134
16238: PUSH
16239: LD_INT 19
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 132
16248: PUSH
16249: LD_INT 26
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 128
16258: PUSH
16259: LD_INT 31
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 123
16268: PUSH
16269: LD_INT 37
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 118
16278: PUSH
16279: LD_INT 45
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 112
16288: PUSH
16289: LD_INT 51
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 106
16298: PUSH
16299: LD_INT 57
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 99
16308: PUSH
16309: LD_INT 62
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PPUSH
16327: LD_INT 0
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_INT 11
16335: PPUSH
16336: CALL 5018 0 5
// end ;
16340: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16341: LD_EXP 17
16345: PUSH
16346: LD_OWVAR 67
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: AND
16355: PUSH
16356: LD_EXP 19
16360: PUSH
16361: LD_INT 1
16363: EQUAL
16364: AND
16365: PUSH
16366: LD_EXP 19
16370: PUSH
16371: LD_EXP 38
16375: LESS
16376: AND
16377: IFFALSE 16571
16379: GO 16381
16381: DISABLE
// begin PrepareArabianVehicles ;
16382: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16386: LD_EXP 65
16390: PPUSH
16391: LD_INT 135
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 134
16403: PUSH
16404: LD_INT 19
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 132
16413: PUSH
16414: LD_INT 26
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 128
16423: PUSH
16424: LD_INT 31
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 123
16433: PUSH
16434: LD_INT 37
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 118
16443: PUSH
16444: LD_INT 45
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 112
16453: PUSH
16454: LD_INT 51
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 106
16463: PUSH
16464: LD_INT 57
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 99
16473: PUSH
16474: LD_INT 62
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 104
16483: PUSH
16484: LD_INT 71
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 110
16493: PUSH
16494: LD_INT 78
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 119
16503: PUSH
16504: LD_INT 88
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 128
16513: PUSH
16514: LD_INT 97
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 135
16523: PUSH
16524: LD_INT 106
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 140
16533: PUSH
16534: LD_INT 153
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: LD_INT 0
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 11
16566: PPUSH
16567: CALL 5018 0 5
// end ;
16571: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16572: LD_EXP 17
16576: PUSH
16577: LD_OWVAR 67
16581: PUSH
16582: LD_INT 3
16584: EQUAL
16585: AND
16586: PUSH
16587: LD_EXP 19
16591: PUSH
16592: LD_INT 1
16594: EQUAL
16595: AND
16596: PUSH
16597: LD_EXP 19
16601: PUSH
16602: LD_EXP 38
16606: LESS
16607: AND
16608: IFFALSE 16824
16610: GO 16612
16612: DISABLE
// begin PrepareArabianVehicles ;
16613: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16617: LD_EXP 65
16621: PPUSH
16622: LD_INT 135
16624: PUSH
16625: LD_INT 4
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 134
16634: PUSH
16635: LD_INT 19
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 132
16644: PUSH
16645: LD_INT 26
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 128
16654: PUSH
16655: LD_INT 31
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 123
16664: PUSH
16665: LD_INT 37
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 118
16674: PUSH
16675: LD_INT 45
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 112
16684: PUSH
16685: LD_INT 51
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 106
16694: PUSH
16695: LD_INT 57
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 99
16704: PUSH
16705: LD_INT 62
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 93
16714: PUSH
16715: LD_INT 67
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 86
16724: PUSH
16725: LD_INT 72
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 78
16734: PUSH
16735: LD_INT 75
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 71
16744: PUSH
16745: LD_INT 81
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 69
16754: PUSH
16755: LD_INT 88
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 71
16764: PUSH
16765: LD_INT 95
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 74
16774: PUSH
16775: LD_INT 103
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 80
16784: PUSH
16785: LD_INT 113
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: PPUSH
16811: LD_INT 0
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: LD_INT 11
16819: PPUSH
16820: CALL 5018 0 5
// end ;
16824: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16825: LD_EXP 17
16829: PUSH
16830: LD_EXP 19
16834: PUSH
16835: LD_INT 2
16837: EQUAL
16838: AND
16839: PUSH
16840: LD_EXP 19
16844: PUSH
16845: LD_EXP 38
16849: LESS
16850: AND
16851: IFFALSE 16928
16853: GO 16855
16855: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16856: LD_INT 7
16858: PPUSH
16859: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16863: LD_EXP 65
16867: PPUSH
16868: LD_INT 157
16870: PUSH
16871: LD_INT 31
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 194
16880: PUSH
16881: LD_INT 124
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 174
16890: PUSH
16891: LD_INT 158
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 151
16900: PUSH
16901: LD_INT 164
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PPUSH
16914: LD_INT 0
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_INT 1
16922: NEG
16923: PPUSH
16924: CALL 5018 0 5
// end ;
16928: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16929: LD_EXP 17
16933: PUSH
16934: LD_EXP 19
16938: PUSH
16939: LD_INT 2
16941: EQUAL
16942: AND
16943: PUSH
16944: LD_EXP 19
16948: PUSH
16949: LD_EXP 38
16953: LESS
16954: AND
16955: IFFALSE 17192
16957: GO 16959
16959: DISABLE
// begin wait ( 1 1$30 ) ;
16960: LD_INT 3150
16962: PPUSH
16963: CALL_OW 67
// currentWave = currentWave + 1 ;
16967: LD_ADDR_EXP 19
16971: PUSH
16972: LD_EXP 19
16976: PUSH
16977: LD_INT 1
16979: PLUS
16980: ST_TO_ADDR
// PrepareArabianVehicles ;
16981: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16985: LD_EXP 65
16989: PPUSH
16990: LD_INT 135
16992: PUSH
16993: LD_INT 4
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 134
17002: PUSH
17003: LD_INT 19
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 132
17012: PUSH
17013: LD_INT 26
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 128
17022: PUSH
17023: LD_INT 31
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 123
17032: PUSH
17033: LD_INT 37
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 118
17042: PUSH
17043: LD_INT 45
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 112
17052: PUSH
17053: LD_INT 51
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 106
17062: PUSH
17063: LD_INT 57
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 99
17072: PUSH
17073: LD_INT 62
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 93
17082: PUSH
17083: LD_INT 67
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 86
17092: PUSH
17093: LD_INT 72
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 78
17102: PUSH
17103: LD_INT 75
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 71
17112: PUSH
17113: LD_INT 81
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 69
17122: PUSH
17123: LD_INT 88
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 71
17132: PUSH
17133: LD_INT 95
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 74
17142: PUSH
17143: LD_INT 103
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 80
17152: PUSH
17153: LD_INT 113
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_INT 11
17187: PPUSH
17188: CALL 5018 0 5
// end ;
17192: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17193: LD_EXP 17
17197: PUSH
17198: LD_OWVAR 67
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: AND
17207: PUSH
17208: LD_EXP 19
17212: PUSH
17213: LD_INT 2
17215: EQUAL
17216: AND
17217: PUSH
17218: LD_EXP 19
17222: PUSH
17223: LD_EXP 38
17227: LESS
17228: AND
17229: IFFALSE 17423
17231: GO 17233
17233: DISABLE
// begin PrepareArabianVehicles ;
17234: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17238: LD_EXP 65
17242: PPUSH
17243: LD_INT 135
17245: PUSH
17246: LD_INT 4
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 134
17255: PUSH
17256: LD_INT 19
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 132
17265: PUSH
17266: LD_INT 26
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 128
17275: PUSH
17276: LD_INT 31
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 123
17285: PUSH
17286: LD_INT 37
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 118
17295: PUSH
17296: LD_INT 45
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 112
17305: PUSH
17306: LD_INT 51
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 106
17315: PUSH
17316: LD_INT 57
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 99
17325: PUSH
17326: LD_INT 62
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 104
17335: PUSH
17336: LD_INT 71
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 110
17345: PUSH
17346: LD_INT 78
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 119
17355: PUSH
17356: LD_INT 88
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 128
17365: PUSH
17366: LD_INT 97
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 135
17375: PUSH
17376: LD_INT 106
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 140
17385: PUSH
17386: LD_INT 153
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: PPUSH
17410: LD_INT 0
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_INT 11
17418: PPUSH
17419: CALL 5018 0 5
// end ;
17423: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17424: LD_EXP 17
17428: PUSH
17429: LD_OWVAR 67
17433: PUSH
17434: LD_INT 3
17436: EQUAL
17437: AND
17438: PUSH
17439: LD_EXP 19
17443: PUSH
17444: LD_INT 2
17446: EQUAL
17447: AND
17448: PUSH
17449: LD_EXP 19
17453: PUSH
17454: LD_EXP 38
17458: LESS
17459: AND
17460: IFFALSE 17654
17462: GO 17464
17464: DISABLE
// begin PrepareArabianVehicles ;
17465: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17469: LD_EXP 65
17473: PPUSH
17474: LD_INT 135
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 134
17486: PUSH
17487: LD_INT 19
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 132
17496: PUSH
17497: LD_INT 26
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 128
17506: PUSH
17507: LD_INT 31
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 123
17516: PUSH
17517: LD_INT 37
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 118
17526: PUSH
17527: LD_INT 45
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 112
17536: PUSH
17537: LD_INT 51
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 106
17546: PUSH
17547: LD_INT 57
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 99
17556: PUSH
17557: LD_INT 62
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 104
17566: PUSH
17567: LD_INT 71
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 110
17576: PUSH
17577: LD_INT 78
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 119
17586: PUSH
17587: LD_INT 88
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 128
17596: PUSH
17597: LD_INT 97
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 135
17606: PUSH
17607: LD_INT 106
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 140
17616: PUSH
17617: LD_INT 153
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 11
17649: PPUSH
17650: CALL 5018 0 5
// end ;
17654: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17655: LD_EXP 17
17659: PUSH
17660: LD_EXP 19
17664: PUSH
17665: LD_INT 3
17667: EQUAL
17668: AND
17669: PUSH
17670: LD_EXP 19
17674: PUSH
17675: LD_EXP 38
17679: LESS
17680: AND
17681: IFFALSE 17758
17683: GO 17685
17685: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17686: LD_INT 7
17688: PPUSH
17689: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17693: LD_EXP 65
17697: PPUSH
17698: LD_INT 157
17700: PUSH
17701: LD_INT 31
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 194
17710: PUSH
17711: LD_INT 124
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 174
17720: PUSH
17721: LD_INT 158
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 151
17730: PUSH
17731: LD_INT 164
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PPUSH
17744: LD_INT 0
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 1
17752: NEG
17753: PPUSH
17754: CALL 5018 0 5
// end ;
17758: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17759: LD_EXP 17
17763: PUSH
17764: LD_EXP 19
17768: PUSH
17769: LD_INT 3
17771: EQUAL
17772: AND
17773: PUSH
17774: LD_EXP 19
17778: PUSH
17779: LD_EXP 38
17783: LESS
17784: AND
17785: IFFALSE 18022
17787: GO 17789
17789: DISABLE
// begin wait ( 1 1$30 ) ;
17790: LD_INT 3150
17792: PPUSH
17793: CALL_OW 67
// currentWave = currentWave + 1 ;
17797: LD_ADDR_EXP 19
17801: PUSH
17802: LD_EXP 19
17806: PUSH
17807: LD_INT 1
17809: PLUS
17810: ST_TO_ADDR
// PrepareArabianVehicles ;
17811: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17815: LD_EXP 65
17819: PPUSH
17820: LD_INT 135
17822: PUSH
17823: LD_INT 4
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 134
17832: PUSH
17833: LD_INT 19
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 132
17842: PUSH
17843: LD_INT 26
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 128
17852: PUSH
17853: LD_INT 31
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 123
17862: PUSH
17863: LD_INT 37
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 118
17872: PUSH
17873: LD_INT 45
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 112
17882: PUSH
17883: LD_INT 51
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 106
17892: PUSH
17893: LD_INT 57
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 99
17902: PUSH
17903: LD_INT 62
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 93
17912: PUSH
17913: LD_INT 67
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 86
17922: PUSH
17923: LD_INT 72
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 78
17932: PUSH
17933: LD_INT 75
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 71
17942: PUSH
17943: LD_INT 81
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 69
17952: PUSH
17953: LD_INT 88
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 71
17962: PUSH
17963: LD_INT 95
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 74
17972: PUSH
17973: LD_INT 103
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 80
17982: PUSH
17983: LD_INT 113
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: LD_INT 11
18017: PPUSH
18018: CALL 5018 0 5
// end ;
18022: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18023: LD_EXP 17
18027: PUSH
18028: LD_OWVAR 67
18032: PUSH
18033: LD_INT 2
18035: EQUAL
18036: AND
18037: PUSH
18038: LD_EXP 19
18042: PUSH
18043: LD_INT 3
18045: EQUAL
18046: AND
18047: PUSH
18048: LD_EXP 19
18052: PUSH
18053: LD_EXP 38
18057: LESS
18058: AND
18059: IFFALSE 18253
18061: GO 18063
18063: DISABLE
// begin PrepareArabianVehicles ;
18064: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18068: LD_EXP 65
18072: PPUSH
18073: LD_INT 135
18075: PUSH
18076: LD_INT 4
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 134
18085: PUSH
18086: LD_INT 19
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 132
18095: PUSH
18096: LD_INT 26
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 128
18105: PUSH
18106: LD_INT 31
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 123
18115: PUSH
18116: LD_INT 37
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 118
18125: PUSH
18126: LD_INT 45
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 112
18135: PUSH
18136: LD_INT 51
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 106
18145: PUSH
18146: LD_INT 57
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 99
18155: PUSH
18156: LD_INT 62
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 104
18165: PUSH
18166: LD_INT 71
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 110
18175: PUSH
18176: LD_INT 78
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 119
18185: PUSH
18186: LD_INT 88
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 128
18195: PUSH
18196: LD_INT 97
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 135
18205: PUSH
18206: LD_INT 106
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 140
18215: PUSH
18216: LD_INT 153
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: PPUSH
18240: LD_INT 0
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: LD_INT 11
18248: PPUSH
18249: CALL 5018 0 5
// end ;
18253: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
18254: LD_EXP 17
18258: PUSH
18259: LD_OWVAR 67
18263: PUSH
18264: LD_INT 3
18266: EQUAL
18267: AND
18268: PUSH
18269: LD_EXP 19
18273: PUSH
18274: LD_INT 3
18276: EQUAL
18277: AND
18278: PUSH
18279: LD_EXP 19
18283: PUSH
18284: LD_EXP 38
18288: LESS
18289: AND
18290: IFFALSE 18484
18292: GO 18294
18294: DISABLE
// begin PrepareArabianVehicles ;
18295: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18299: LD_EXP 65
18303: PPUSH
18304: LD_INT 135
18306: PUSH
18307: LD_INT 4
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 134
18316: PUSH
18317: LD_INT 19
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 132
18326: PUSH
18327: LD_INT 26
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 128
18336: PUSH
18337: LD_INT 31
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 123
18346: PUSH
18347: LD_INT 37
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 118
18356: PUSH
18357: LD_INT 45
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 112
18366: PUSH
18367: LD_INT 51
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 106
18376: PUSH
18377: LD_INT 57
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 99
18386: PUSH
18387: LD_INT 62
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 104
18396: PUSH
18397: LD_INT 71
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 110
18406: PUSH
18407: LD_INT 78
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 119
18416: PUSH
18417: LD_INT 88
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 128
18426: PUSH
18427: LD_INT 97
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 135
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 140
18446: PUSH
18447: LD_INT 153
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PPUSH
18471: LD_INT 0
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: LD_INT 11
18479: PPUSH
18480: CALL 5018 0 5
// end ;
18484: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18485: LD_EXP 54
18489: PPUSH
18490: CALL_OW 305
18494: PUSH
18495: LD_EXP 23
18499: PUSH
18500: LD_INT 5
18502: LESS
18503: AND
18504: IFFALSE 18514
18506: GO 18508
18508: DISABLE
// begin PrepareArabianKiller ;
18509: CALL 4066 0 0
// enable ;
18513: ENABLE
// end ; end_of_file
18514: END
// export function SetAchievements ; begin
18515: LD_INT 0
18517: PPUSH
// if stealWarmCount = 0 then
18518: LD_EXP 12
18522: PUSH
18523: LD_INT 0
18525: EQUAL
18526: IFFALSE 18535
// SetAchievement ( ACH_ENO ) ;
18528: LD_STRING ACH_ENO
18530: PPUSH
18531: CALL_OW 543
// end ;
18535: LD_VAR 0 1
18539: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18540: LD_EXP 25
18544: PUSH
18545: LD_INT 6
18547: GREATEREQUAL
18548: IFFALSE 18560
18550: GO 18552
18552: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18553: LD_STRING ACH_DEFENSE
18555: PPUSH
18556: CALL_OW 543
18560: END
// every 1 trigger killedArabianUnits >= 25 do
18561: LD_EXP 22
18565: PUSH
18566: LD_INT 25
18568: GREATEREQUAL
18569: IFFALSE 18581
18571: GO 18573
18573: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18574: LD_STRING ACH_ARAB
18576: PPUSH
18577: CALL_OW 543
18581: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 100
18589: EQUAL
18590: IFFALSE 19539
// begin if not StreamModeActive then
18592: LD_EXP 66
18596: NOT
18597: IFFALSE 18607
// StreamModeActive := true ;
18599: LD_ADDR_EXP 66
18603: PUSH
18604: LD_INT 1
18606: ST_TO_ADDR
// if p3 = 0 then
18607: LD_VAR 0 3
18611: PUSH
18612: LD_INT 0
18614: EQUAL
18615: IFFALSE 18621
// InitStreamMode ;
18617: CALL 19697 0 0
// if p3 = 1 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 1
18628: EQUAL
18629: IFFALSE 18639
// sRocket := true ;
18631: LD_ADDR_EXP 71
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 2 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 2
18646: EQUAL
18647: IFFALSE 18657
// sSpeed := true ;
18649: LD_ADDR_EXP 70
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 3 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 3
18664: EQUAL
18665: IFFALSE 18675
// sEngine := true ;
18667: LD_ADDR_EXP 72
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 4 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 4
18682: EQUAL
18683: IFFALSE 18693
// sSpec := true ;
18685: LD_ADDR_EXP 69
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 5 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 5
18700: EQUAL
18701: IFFALSE 18711
// sLevel := true ;
18703: LD_ADDR_EXP 73
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 6 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 6
18718: EQUAL
18719: IFFALSE 18729
// sArmoury := true ;
18721: LD_ADDR_EXP 74
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 7 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 7
18736: EQUAL
18737: IFFALSE 18747
// sRadar := true ;
18739: LD_ADDR_EXP 75
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 8 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 8
18754: EQUAL
18755: IFFALSE 18765
// sBunker := true ;
18757: LD_ADDR_EXP 76
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 9 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 9
18772: EQUAL
18773: IFFALSE 18783
// sHack := true ;
18775: LD_ADDR_EXP 77
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 10 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 10
18790: EQUAL
18791: IFFALSE 18801
// sFire := true ;
18793: LD_ADDR_EXP 78
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 11 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 11
18808: EQUAL
18809: IFFALSE 18819
// sRefresh := true ;
18811: LD_ADDR_EXP 79
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 12 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 12
18826: EQUAL
18827: IFFALSE 18837
// sExp := true ;
18829: LD_ADDR_EXP 80
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 13 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 13
18844: EQUAL
18845: IFFALSE 18855
// sDepot := true ;
18847: LD_ADDR_EXP 81
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 14 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 14
18862: EQUAL
18863: IFFALSE 18873
// sFlag := true ;
18865: LD_ADDR_EXP 82
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 15 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 15
18880: EQUAL
18881: IFFALSE 18891
// sKamikadze := true ;
18883: LD_ADDR_EXP 90
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 16 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 16
18898: EQUAL
18899: IFFALSE 18909
// sTroll := true ;
18901: LD_ADDR_EXP 91
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 17 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 17
18916: EQUAL
18917: IFFALSE 18927
// sSlow := true ;
18919: LD_ADDR_EXP 92
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 18 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 18
18934: EQUAL
18935: IFFALSE 18945
// sLack := true ;
18937: LD_ADDR_EXP 93
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 19 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 19
18952: EQUAL
18953: IFFALSE 18963
// sTank := true ;
18955: LD_ADDR_EXP 95
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 20 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 20
18970: EQUAL
18971: IFFALSE 18981
// sRemote := true ;
18973: LD_ADDR_EXP 96
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 21 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 21
18988: EQUAL
18989: IFFALSE 18999
// sPowell := true ;
18991: LD_ADDR_EXP 97
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 22 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 22
19006: EQUAL
19007: IFFALSE 19017
// sTeleport := true ;
19009: LD_ADDR_EXP 100
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 23 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 23
19024: EQUAL
19025: IFFALSE 19035
// sOilTower := true ;
19027: LD_ADDR_EXP 102
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 24 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 24
19042: EQUAL
19043: IFFALSE 19053
// sShovel := true ;
19045: LD_ADDR_EXP 103
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 25 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 25
19060: EQUAL
19061: IFFALSE 19071
// sSheik := true ;
19063: LD_ADDR_EXP 104
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 26 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 26
19078: EQUAL
19079: IFFALSE 19089
// sEarthquake := true ;
19081: LD_ADDR_EXP 106
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 27 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 27
19096: EQUAL
19097: IFFALSE 19107
// sAI := true ;
19099: LD_ADDR_EXP 107
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 28 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 28
19114: EQUAL
19115: IFFALSE 19125
// sCargo := true ;
19117: LD_ADDR_EXP 110
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 29 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 29
19132: EQUAL
19133: IFFALSE 19143
// sDLaser := true ;
19135: LD_ADDR_EXP 111
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 30 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 30
19150: EQUAL
19151: IFFALSE 19161
// sExchange := true ;
19153: LD_ADDR_EXP 112
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 31 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 31
19168: EQUAL
19169: IFFALSE 19179
// sFac := true ;
19171: LD_ADDR_EXP 113
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 32 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 32
19186: EQUAL
19187: IFFALSE 19197
// sPower := true ;
19189: LD_ADDR_EXP 114
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 33 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 33
19204: EQUAL
19205: IFFALSE 19215
// sRandom := true ;
19207: LD_ADDR_EXP 115
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 34 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 34
19222: EQUAL
19223: IFFALSE 19233
// sShield := true ;
19225: LD_ADDR_EXP 116
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 35 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 35
19240: EQUAL
19241: IFFALSE 19251
// sTime := true ;
19243: LD_ADDR_EXP 117
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 36 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 36
19258: EQUAL
19259: IFFALSE 19269
// sTools := true ;
19261: LD_ADDR_EXP 118
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 101 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 101
19276: EQUAL
19277: IFFALSE 19287
// sSold := true ;
19279: LD_ADDR_EXP 83
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 102 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 102
19294: EQUAL
19295: IFFALSE 19305
// sDiff := true ;
19297: LD_ADDR_EXP 84
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 103 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 103
19312: EQUAL
19313: IFFALSE 19323
// sFog := true ;
19315: LD_ADDR_EXP 87
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 104 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 104
19330: EQUAL
19331: IFFALSE 19341
// sReset := true ;
19333: LD_ADDR_EXP 88
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 105 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 105
19348: EQUAL
19349: IFFALSE 19359
// sSun := true ;
19351: LD_ADDR_EXP 89
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 106 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 106
19366: EQUAL
19367: IFFALSE 19377
// sTiger := true ;
19369: LD_ADDR_EXP 85
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 107 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 107
19384: EQUAL
19385: IFFALSE 19395
// sBomb := true ;
19387: LD_ADDR_EXP 86
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 108 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 108
19402: EQUAL
19403: IFFALSE 19413
// sWound := true ;
19405: LD_ADDR_EXP 94
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 109 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 109
19420: EQUAL
19421: IFFALSE 19431
// sBetray := true ;
19423: LD_ADDR_EXP 98
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 110 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 110
19438: EQUAL
19439: IFFALSE 19449
// sContamin := true ;
19441: LD_ADDR_EXP 99
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 111 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 111
19456: EQUAL
19457: IFFALSE 19467
// sOil := true ;
19459: LD_ADDR_EXP 101
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 112 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 112
19474: EQUAL
19475: IFFALSE 19485
// sStu := true ;
19477: LD_ADDR_EXP 105
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 113 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 113
19492: EQUAL
19493: IFFALSE 19503
// sBazooka := true ;
19495: LD_ADDR_EXP 108
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 114 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 114
19510: EQUAL
19511: IFFALSE 19521
// sMortar := true ;
19513: LD_ADDR_EXP 109
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 115 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 115
19528: EQUAL
19529: IFFALSE 19539
// sRanger := true ;
19531: LD_ADDR_EXP 119
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// end ; if p2 = 101 then
19539: LD_VAR 0 2
19543: PUSH
19544: LD_INT 101
19546: EQUAL
19547: IFFALSE 19675
// begin case p3 of 1 :
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 1
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19569
19562: POP
// hHackUnlimitedResources ; 2 :
19563: CALL 30710 0 0
19567: GO 19675
19569: LD_INT 2
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19584
19577: POP
// hHackSetLevel10 ; 3 :
19578: CALL 30843 0 0
19582: GO 19675
19584: LD_INT 3
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19599
19592: POP
// hHackSetLevel10YourUnits ; 4 :
19593: CALL 30928 0 0
19597: GO 19675
19599: LD_INT 4
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19614
19607: POP
// hHackInvincible ; 5 :
19608: CALL 31376 0 0
19612: GO 19675
19614: LD_INT 5
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19629
19622: POP
// hHackInvisible ; 6 :
19623: CALL 31487 0 0
19627: GO 19675
19629: LD_INT 6
19631: DOUBLE
19632: EQUAL
19633: IFTRUE 19637
19635: GO 19644
19637: POP
// hHackChangeYourSide ; 7 :
19638: CALL 31544 0 0
19642: GO 19675
19644: LD_INT 7
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19659
19652: POP
// hHackChangeUnitSide ; 8 :
19653: CALL 31586 0 0
19657: GO 19675
19659: LD_INT 8
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19674
19667: POP
// hHackFog ; end ;
19668: CALL 31687 0 0
19672: GO 19675
19674: POP
// end ; end ;
19675: PPOPN 6
19677: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19678: GO 19680
19680: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19681: LD_STRING initStreamRollete();
19683: PPUSH
19684: CALL_OW 559
// InitStreamMode ;
19688: CALL 19697 0 0
// DefineStreamItems ( ) ;
19692: CALL 20137 0 0
// end ;
19696: END
// function InitStreamMode ; begin
19697: LD_INT 0
19699: PPUSH
// streamModeActive := false ;
19700: LD_ADDR_EXP 66
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
// normalCounter := 36 ;
19708: LD_ADDR_EXP 67
19712: PUSH
19713: LD_INT 36
19715: ST_TO_ADDR
// hardcoreCounter := 16 ;
19716: LD_ADDR_EXP 68
19720: PUSH
19721: LD_INT 16
19723: ST_TO_ADDR
// sRocket := false ;
19724: LD_ADDR_EXP 71
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// sSpeed := false ;
19732: LD_ADDR_EXP 70
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// sEngine := false ;
19740: LD_ADDR_EXP 72
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// sSpec := false ;
19748: LD_ADDR_EXP 69
19752: PUSH
19753: LD_INT 0
19755: ST_TO_ADDR
// sLevel := false ;
19756: LD_ADDR_EXP 73
19760: PUSH
19761: LD_INT 0
19763: ST_TO_ADDR
// sArmoury := false ;
19764: LD_ADDR_EXP 74
19768: PUSH
19769: LD_INT 0
19771: ST_TO_ADDR
// sRadar := false ;
19772: LD_ADDR_EXP 75
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// sBunker := false ;
19780: LD_ADDR_EXP 76
19784: PUSH
19785: LD_INT 0
19787: ST_TO_ADDR
// sHack := false ;
19788: LD_ADDR_EXP 77
19792: PUSH
19793: LD_INT 0
19795: ST_TO_ADDR
// sFire := false ;
19796: LD_ADDR_EXP 78
19800: PUSH
19801: LD_INT 0
19803: ST_TO_ADDR
// sRefresh := false ;
19804: LD_ADDR_EXP 79
19808: PUSH
19809: LD_INT 0
19811: ST_TO_ADDR
// sExp := false ;
19812: LD_ADDR_EXP 80
19816: PUSH
19817: LD_INT 0
19819: ST_TO_ADDR
// sDepot := false ;
19820: LD_ADDR_EXP 81
19824: PUSH
19825: LD_INT 0
19827: ST_TO_ADDR
// sFlag := false ;
19828: LD_ADDR_EXP 82
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// sKamikadze := false ;
19836: LD_ADDR_EXP 90
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// sTroll := false ;
19844: LD_ADDR_EXP 91
19848: PUSH
19849: LD_INT 0
19851: ST_TO_ADDR
// sSlow := false ;
19852: LD_ADDR_EXP 92
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// sLack := false ;
19860: LD_ADDR_EXP 93
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// sTank := false ;
19868: LD_ADDR_EXP 95
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// sRemote := false ;
19876: LD_ADDR_EXP 96
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// sPowell := false ;
19884: LD_ADDR_EXP 97
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sTeleport := false ;
19892: LD_ADDR_EXP 100
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// sOilTower := false ;
19900: LD_ADDR_EXP 102
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// sShovel := false ;
19908: LD_ADDR_EXP 103
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// sSheik := false ;
19916: LD_ADDR_EXP 104
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// sEarthquake := false ;
19924: LD_ADDR_EXP 106
19928: PUSH
19929: LD_INT 0
19931: ST_TO_ADDR
// sAI := false ;
19932: LD_ADDR_EXP 107
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// sCargo := false ;
19940: LD_ADDR_EXP 110
19944: PUSH
19945: LD_INT 0
19947: ST_TO_ADDR
// sDLaser := false ;
19948: LD_ADDR_EXP 111
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// sExchange := false ;
19956: LD_ADDR_EXP 112
19960: PUSH
19961: LD_INT 0
19963: ST_TO_ADDR
// sFac := false ;
19964: LD_ADDR_EXP 113
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// sPower := false ;
19972: LD_ADDR_EXP 114
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// sRandom := false ;
19980: LD_ADDR_EXP 115
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// sShield := false ;
19988: LD_ADDR_EXP 116
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
// sTime := false ;
19996: LD_ADDR_EXP 117
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// sTools := false ;
20004: LD_ADDR_EXP 118
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
// sSold := false ;
20012: LD_ADDR_EXP 83
20016: PUSH
20017: LD_INT 0
20019: ST_TO_ADDR
// sDiff := false ;
20020: LD_ADDR_EXP 84
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// sFog := false ;
20028: LD_ADDR_EXP 87
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// sReset := false ;
20036: LD_ADDR_EXP 88
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// sSun := false ;
20044: LD_ADDR_EXP 89
20048: PUSH
20049: LD_INT 0
20051: ST_TO_ADDR
// sTiger := false ;
20052: LD_ADDR_EXP 85
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// sBomb := false ;
20060: LD_ADDR_EXP 86
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// sWound := false ;
20068: LD_ADDR_EXP 94
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// sBetray := false ;
20076: LD_ADDR_EXP 98
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sContamin := false ;
20084: LD_ADDR_EXP 99
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sOil := false ;
20092: LD_ADDR_EXP 101
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sStu := false ;
20100: LD_ADDR_EXP 105
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sBazooka := false ;
20108: LD_ADDR_EXP 108
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sMortar := false ;
20116: LD_ADDR_EXP 109
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sRanger := false ;
20124: LD_ADDR_EXP 119
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// end ;
20132: LD_VAR 0 1
20136: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
// result := [ ] ;
20144: LD_ADDR_VAR 0 1
20148: PUSH
20149: EMPTY
20150: ST_TO_ADDR
// if campaign_id = 1 then
20151: LD_OWVAR 69
20155: PUSH
20156: LD_INT 1
20158: EQUAL
20159: IFFALSE 23097
// begin case mission_number of 1 :
20161: LD_OWVAR 70
20165: PUSH
20166: LD_INT 1
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20238
20174: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20175: LD_ADDR_VAR 0 1
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 4
20185: PUSH
20186: LD_INT 11
20188: PUSH
20189: LD_INT 12
20191: PUSH
20192: LD_INT 15
20194: PUSH
20195: LD_INT 16
20197: PUSH
20198: LD_INT 22
20200: PUSH
20201: LD_INT 23
20203: PUSH
20204: LD_INT 26
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 101
20220: PUSH
20221: LD_INT 102
20223: PUSH
20224: LD_INT 106
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: ST_TO_ADDR
20236: GO 23095
20238: LD_INT 2
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20318
20246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20247: LD_ADDR_VAR 0 1
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 4
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 12
20263: PUSH
20264: LD_INT 15
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: LD_INT 22
20272: PUSH
20273: LD_INT 23
20275: PUSH
20276: LD_INT 26
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 101
20292: PUSH
20293: LD_INT 102
20295: PUSH
20296: LD_INT 105
20298: PUSH
20299: LD_INT 106
20301: PUSH
20302: LD_INT 108
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 23095
20318: LD_INT 3
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20402
20326: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 11
20343: PUSH
20344: LD_INT 12
20346: PUSH
20347: LD_INT 15
20349: PUSH
20350: LD_INT 16
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 26
20358: PUSH
20359: LD_INT 36
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 101
20376: PUSH
20377: LD_INT 102
20379: PUSH
20380: LD_INT 105
20382: PUSH
20383: LD_INT 106
20385: PUSH
20386: LD_INT 108
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: ST_TO_ADDR
20400: GO 23095
20402: LD_INT 4
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20494
20410: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 4
20421: PUSH
20422: LD_INT 5
20424: PUSH
20425: LD_INT 8
20427: PUSH
20428: LD_INT 11
20430: PUSH
20431: LD_INT 12
20433: PUSH
20434: LD_INT 15
20436: PUSH
20437: LD_INT 16
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 23
20445: PUSH
20446: LD_INT 26
20448: PUSH
20449: LD_INT 36
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 101
20468: PUSH
20469: LD_INT 102
20471: PUSH
20472: LD_INT 105
20474: PUSH
20475: LD_INT 106
20477: PUSH
20478: LD_INT 108
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: ST_TO_ADDR
20492: GO 23095
20494: LD_INT 5
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20602
20502: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20503: LD_ADDR_VAR 0 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 4
20513: PUSH
20514: LD_INT 5
20516: PUSH
20517: LD_INT 6
20519: PUSH
20520: LD_INT 8
20522: PUSH
20523: LD_INT 11
20525: PUSH
20526: LD_INT 12
20528: PUSH
20529: LD_INT 15
20531: PUSH
20532: LD_INT 16
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_INT 23
20540: PUSH
20541: LD_INT 25
20543: PUSH
20544: LD_INT 26
20546: PUSH
20547: LD_INT 36
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 101
20568: PUSH
20569: LD_INT 102
20571: PUSH
20572: LD_INT 105
20574: PUSH
20575: LD_INT 106
20577: PUSH
20578: LD_INT 108
20580: PUSH
20581: LD_INT 109
20583: PUSH
20584: LD_INT 112
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: ST_TO_ADDR
20600: GO 23095
20602: LD_INT 6
20604: DOUBLE
20605: EQUAL
20606: IFTRUE 20610
20608: GO 20730
20610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 4
20621: PUSH
20622: LD_INT 5
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: LD_INT 8
20630: PUSH
20631: LD_INT 11
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 15
20639: PUSH
20640: LD_INT 16
20642: PUSH
20643: LD_INT 20
20645: PUSH
20646: LD_INT 21
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_INT 23
20654: PUSH
20655: LD_INT 25
20657: PUSH
20658: LD_INT 26
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 31
20666: PUSH
20667: LD_INT 32
20669: PUSH
20670: LD_INT 36
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 101
20696: PUSH
20697: LD_INT 102
20699: PUSH
20700: LD_INT 105
20702: PUSH
20703: LD_INT 106
20705: PUSH
20706: LD_INT 108
20708: PUSH
20709: LD_INT 109
20711: PUSH
20712: LD_INT 112
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: ST_TO_ADDR
20728: GO 23095
20730: LD_INT 7
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20838
20738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20739: LD_ADDR_VAR 0 1
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: LD_INT 4
20749: PUSH
20750: LD_INT 5
20752: PUSH
20753: LD_INT 7
20755: PUSH
20756: LD_INT 11
20758: PUSH
20759: LD_INT 12
20761: PUSH
20762: LD_INT 15
20764: PUSH
20765: LD_INT 16
20767: PUSH
20768: LD_INT 20
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 23
20779: PUSH
20780: LD_INT 25
20782: PUSH
20783: LD_INT 26
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 101
20804: PUSH
20805: LD_INT 102
20807: PUSH
20808: LD_INT 103
20810: PUSH
20811: LD_INT 105
20813: PUSH
20814: LD_INT 106
20816: PUSH
20817: LD_INT 108
20819: PUSH
20820: LD_INT 112
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 23095
20838: LD_INT 8
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20974
20846: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 4
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: LD_INT 6
20863: PUSH
20864: LD_INT 7
20866: PUSH
20867: LD_INT 8
20869: PUSH
20870: LD_INT 11
20872: PUSH
20873: LD_INT 12
20875: PUSH
20876: LD_INT 15
20878: PUSH
20879: LD_INT 16
20881: PUSH
20882: LD_INT 20
20884: PUSH
20885: LD_INT 21
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 23
20893: PUSH
20894: LD_INT 25
20896: PUSH
20897: LD_INT 26
20899: PUSH
20900: LD_INT 30
20902: PUSH
20903: LD_INT 31
20905: PUSH
20906: LD_INT 32
20908: PUSH
20909: LD_INT 36
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 101
20936: PUSH
20937: LD_INT 102
20939: PUSH
20940: LD_INT 103
20942: PUSH
20943: LD_INT 105
20945: PUSH
20946: LD_INT 106
20948: PUSH
20949: LD_INT 108
20951: PUSH
20952: LD_INT 109
20954: PUSH
20955: LD_INT 112
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 23095
20974: LD_INT 9
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21118
20982: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20983: LD_ADDR_VAR 0 1
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 4
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: LD_INT 6
20999: PUSH
21000: LD_INT 7
21002: PUSH
21003: LD_INT 8
21005: PUSH
21006: LD_INT 11
21008: PUSH
21009: LD_INT 12
21011: PUSH
21012: LD_INT 15
21014: PUSH
21015: LD_INT 16
21017: PUSH
21018: LD_INT 20
21020: PUSH
21021: LD_INT 21
21023: PUSH
21024: LD_INT 22
21026: PUSH
21027: LD_INT 23
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 26
21035: PUSH
21036: LD_INT 28
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 31
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: LD_INT 36
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 101
21076: PUSH
21077: LD_INT 102
21079: PUSH
21080: LD_INT 103
21082: PUSH
21083: LD_INT 105
21085: PUSH
21086: LD_INT 106
21088: PUSH
21089: LD_INT 108
21091: PUSH
21092: LD_INT 109
21094: PUSH
21095: LD_INT 112
21097: PUSH
21098: LD_INT 114
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: ST_TO_ADDR
21116: GO 23095
21118: LD_INT 10
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21310
21126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 4
21137: PUSH
21138: LD_INT 5
21140: PUSH
21141: LD_INT 6
21143: PUSH
21144: LD_INT 7
21146: PUSH
21147: LD_INT 8
21149: PUSH
21150: LD_INT 9
21152: PUSH
21153: LD_INT 10
21155: PUSH
21156: LD_INT 11
21158: PUSH
21159: LD_INT 12
21161: PUSH
21162: LD_INT 13
21164: PUSH
21165: LD_INT 14
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 17
21176: PUSH
21177: LD_INT 18
21179: PUSH
21180: LD_INT 19
21182: PUSH
21183: LD_INT 20
21185: PUSH
21186: LD_INT 21
21188: PUSH
21189: LD_INT 22
21191: PUSH
21192: LD_INT 23
21194: PUSH
21195: LD_INT 24
21197: PUSH
21198: LD_INT 25
21200: PUSH
21201: LD_INT 26
21203: PUSH
21204: LD_INT 28
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 31
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 36
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 101
21252: PUSH
21253: LD_INT 102
21255: PUSH
21256: LD_INT 103
21258: PUSH
21259: LD_INT 104
21261: PUSH
21262: LD_INT 105
21264: PUSH
21265: LD_INT 106
21267: PUSH
21268: LD_INT 107
21270: PUSH
21271: LD_INT 108
21273: PUSH
21274: LD_INT 109
21276: PUSH
21277: LD_INT 110
21279: PUSH
21280: LD_INT 111
21282: PUSH
21283: LD_INT 112
21285: PUSH
21286: LD_INT 114
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: ST_TO_ADDR
21308: GO 23095
21310: LD_INT 11
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21510
21318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: LD_INT 4
21332: PUSH
21333: LD_INT 5
21335: PUSH
21336: LD_INT 6
21338: PUSH
21339: LD_INT 7
21341: PUSH
21342: LD_INT 8
21344: PUSH
21345: LD_INT 9
21347: PUSH
21348: LD_INT 10
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 13
21359: PUSH
21360: LD_INT 14
21362: PUSH
21363: LD_INT 15
21365: PUSH
21366: LD_INT 16
21368: PUSH
21369: LD_INT 17
21371: PUSH
21372: LD_INT 18
21374: PUSH
21375: LD_INT 19
21377: PUSH
21378: LD_INT 20
21380: PUSH
21381: LD_INT 21
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_INT 23
21389: PUSH
21390: LD_INT 24
21392: PUSH
21393: LD_INT 25
21395: PUSH
21396: LD_INT 26
21398: PUSH
21399: LD_INT 28
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 31
21407: PUSH
21408: LD_INT 32
21410: PUSH
21411: LD_INT 34
21413: PUSH
21414: LD_INT 36
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 101
21452: PUSH
21453: LD_INT 102
21455: PUSH
21456: LD_INT 103
21458: PUSH
21459: LD_INT 104
21461: PUSH
21462: LD_INT 105
21464: PUSH
21465: LD_INT 106
21467: PUSH
21468: LD_INT 107
21470: PUSH
21471: LD_INT 108
21473: PUSH
21474: LD_INT 109
21476: PUSH
21477: LD_INT 110
21479: PUSH
21480: LD_INT 111
21482: PUSH
21483: LD_INT 112
21485: PUSH
21486: LD_INT 114
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: ST_TO_ADDR
21508: GO 23095
21510: LD_INT 12
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21726
21518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: LD_INT 4
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: LD_INT 6
21541: PUSH
21542: LD_INT 7
21544: PUSH
21545: LD_INT 8
21547: PUSH
21548: LD_INT 9
21550: PUSH
21551: LD_INT 10
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 13
21562: PUSH
21563: LD_INT 14
21565: PUSH
21566: LD_INT 15
21568: PUSH
21569: LD_INT 16
21571: PUSH
21572: LD_INT 17
21574: PUSH
21575: LD_INT 18
21577: PUSH
21578: LD_INT 19
21580: PUSH
21581: LD_INT 20
21583: PUSH
21584: LD_INT 21
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_INT 23
21592: PUSH
21593: LD_INT 24
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 26
21601: PUSH
21602: LD_INT 27
21604: PUSH
21605: LD_INT 28
21607: PUSH
21608: LD_INT 30
21610: PUSH
21611: LD_INT 31
21613: PUSH
21614: LD_INT 32
21616: PUSH
21617: LD_INT 33
21619: PUSH
21620: LD_INT 34
21622: PUSH
21623: LD_INT 36
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 101
21664: PUSH
21665: LD_INT 102
21667: PUSH
21668: LD_INT 103
21670: PUSH
21671: LD_INT 104
21673: PUSH
21674: LD_INT 105
21676: PUSH
21677: LD_INT 106
21679: PUSH
21680: LD_INT 107
21682: PUSH
21683: LD_INT 108
21685: PUSH
21686: LD_INT 109
21688: PUSH
21689: LD_INT 110
21691: PUSH
21692: LD_INT 111
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: ST_TO_ADDR
21724: GO 23095
21726: LD_INT 13
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21930
21734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21735: LD_ADDR_VAR 0 1
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 3
21748: PUSH
21749: LD_INT 4
21751: PUSH
21752: LD_INT 5
21754: PUSH
21755: LD_INT 8
21757: PUSH
21758: LD_INT 9
21760: PUSH
21761: LD_INT 10
21763: PUSH
21764: LD_INT 11
21766: PUSH
21767: LD_INT 12
21769: PUSH
21770: LD_INT 14
21772: PUSH
21773: LD_INT 15
21775: PUSH
21776: LD_INT 16
21778: PUSH
21779: LD_INT 17
21781: PUSH
21782: LD_INT 18
21784: PUSH
21785: LD_INT 19
21787: PUSH
21788: LD_INT 20
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 23
21799: PUSH
21800: LD_INT 24
21802: PUSH
21803: LD_INT 25
21805: PUSH
21806: LD_INT 26
21808: PUSH
21809: LD_INT 27
21811: PUSH
21812: LD_INT 28
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 31
21820: PUSH
21821: LD_INT 32
21823: PUSH
21824: LD_INT 33
21826: PUSH
21827: LD_INT 34
21829: PUSH
21830: LD_INT 36
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 101
21868: PUSH
21869: LD_INT 102
21871: PUSH
21872: LD_INT 103
21874: PUSH
21875: LD_INT 104
21877: PUSH
21878: LD_INT 105
21880: PUSH
21881: LD_INT 106
21883: PUSH
21884: LD_INT 107
21886: PUSH
21887: LD_INT 108
21889: PUSH
21890: LD_INT 109
21892: PUSH
21893: LD_INT 110
21895: PUSH
21896: LD_INT 111
21898: PUSH
21899: LD_INT 112
21901: PUSH
21902: LD_INT 113
21904: PUSH
21905: LD_INT 114
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: ST_TO_ADDR
21928: GO 23095
21930: LD_INT 14
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22150
21938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21939: LD_ADDR_VAR 0 1
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 4
21955: PUSH
21956: LD_INT 5
21958: PUSH
21959: LD_INT 6
21961: PUSH
21962: LD_INT 7
21964: PUSH
21965: LD_INT 8
21967: PUSH
21968: LD_INT 9
21970: PUSH
21971: LD_INT 10
21973: PUSH
21974: LD_INT 11
21976: PUSH
21977: LD_INT 12
21979: PUSH
21980: LD_INT 13
21982: PUSH
21983: LD_INT 14
21985: PUSH
21986: LD_INT 15
21988: PUSH
21989: LD_INT 16
21991: PUSH
21992: LD_INT 17
21994: PUSH
21995: LD_INT 18
21997: PUSH
21998: LD_INT 19
22000: PUSH
22001: LD_INT 20
22003: PUSH
22004: LD_INT 21
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 24
22015: PUSH
22016: LD_INT 25
22018: PUSH
22019: LD_INT 26
22021: PUSH
22022: LD_INT 27
22024: PUSH
22025: LD_INT 28
22027: PUSH
22028: LD_INT 29
22030: PUSH
22031: LD_INT 30
22033: PUSH
22034: LD_INT 31
22036: PUSH
22037: LD_INT 32
22039: PUSH
22040: LD_INT 33
22042: PUSH
22043: LD_INT 34
22045: PUSH
22046: LD_INT 36
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 101
22088: PUSH
22089: LD_INT 102
22091: PUSH
22092: LD_INT 103
22094: PUSH
22095: LD_INT 104
22097: PUSH
22098: LD_INT 105
22100: PUSH
22101: LD_INT 106
22103: PUSH
22104: LD_INT 107
22106: PUSH
22107: LD_INT 108
22109: PUSH
22110: LD_INT 109
22112: PUSH
22113: LD_INT 110
22115: PUSH
22116: LD_INT 111
22118: PUSH
22119: LD_INT 112
22121: PUSH
22122: LD_INT 113
22124: PUSH
22125: LD_INT 114
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: ST_TO_ADDR
22148: GO 23095
22150: LD_INT 15
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22370
22158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22159: LD_ADDR_VAR 0 1
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 3
22172: PUSH
22173: LD_INT 4
22175: PUSH
22176: LD_INT 5
22178: PUSH
22179: LD_INT 6
22181: PUSH
22182: LD_INT 7
22184: PUSH
22185: LD_INT 8
22187: PUSH
22188: LD_INT 9
22190: PUSH
22191: LD_INT 10
22193: PUSH
22194: LD_INT 11
22196: PUSH
22197: LD_INT 12
22199: PUSH
22200: LD_INT 13
22202: PUSH
22203: LD_INT 14
22205: PUSH
22206: LD_INT 15
22208: PUSH
22209: LD_INT 16
22211: PUSH
22212: LD_INT 17
22214: PUSH
22215: LD_INT 18
22217: PUSH
22218: LD_INT 19
22220: PUSH
22221: LD_INT 20
22223: PUSH
22224: LD_INT 21
22226: PUSH
22227: LD_INT 22
22229: PUSH
22230: LD_INT 23
22232: PUSH
22233: LD_INT 24
22235: PUSH
22236: LD_INT 25
22238: PUSH
22239: LD_INT 26
22241: PUSH
22242: LD_INT 27
22244: PUSH
22245: LD_INT 28
22247: PUSH
22248: LD_INT 29
22250: PUSH
22251: LD_INT 30
22253: PUSH
22254: LD_INT 31
22256: PUSH
22257: LD_INT 32
22259: PUSH
22260: LD_INT 33
22262: PUSH
22263: LD_INT 34
22265: PUSH
22266: LD_INT 36
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 101
22308: PUSH
22309: LD_INT 102
22311: PUSH
22312: LD_INT 103
22314: PUSH
22315: LD_INT 104
22317: PUSH
22318: LD_INT 105
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 107
22326: PUSH
22327: LD_INT 108
22329: PUSH
22330: LD_INT 109
22332: PUSH
22333: LD_INT 110
22335: PUSH
22336: LD_INT 111
22338: PUSH
22339: LD_INT 112
22341: PUSH
22342: LD_INT 113
22344: PUSH
22345: LD_INT 114
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: ST_TO_ADDR
22368: GO 23095
22370: LD_INT 16
22372: DOUBLE
22373: EQUAL
22374: IFTRUE 22378
22376: GO 22502
22378: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 4
22389: PUSH
22390: LD_INT 5
22392: PUSH
22393: LD_INT 7
22395: PUSH
22396: LD_INT 11
22398: PUSH
22399: LD_INT 12
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 20
22410: PUSH
22411: LD_INT 21
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_INT 23
22419: PUSH
22420: LD_INT 25
22422: PUSH
22423: LD_INT 26
22425: PUSH
22426: LD_INT 30
22428: PUSH
22429: LD_INT 31
22431: PUSH
22432: LD_INT 32
22434: PUSH
22435: LD_INT 33
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 101
22464: PUSH
22465: LD_INT 102
22467: PUSH
22468: LD_INT 103
22470: PUSH
22471: LD_INT 106
22473: PUSH
22474: LD_INT 108
22476: PUSH
22477: LD_INT 112
22479: PUSH
22480: LD_INT 113
22482: PUSH
22483: LD_INT 114
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: ST_TO_ADDR
22500: GO 23095
22502: LD_INT 17
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22722
22510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 6
22533: PUSH
22534: LD_INT 7
22536: PUSH
22537: LD_INT 8
22539: PUSH
22540: LD_INT 9
22542: PUSH
22543: LD_INT 10
22545: PUSH
22546: LD_INT 11
22548: PUSH
22549: LD_INT 12
22551: PUSH
22552: LD_INT 13
22554: PUSH
22555: LD_INT 14
22557: PUSH
22558: LD_INT 15
22560: PUSH
22561: LD_INT 16
22563: PUSH
22564: LD_INT 17
22566: PUSH
22567: LD_INT 18
22569: PUSH
22570: LD_INT 19
22572: PUSH
22573: LD_INT 20
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_INT 23
22584: PUSH
22585: LD_INT 24
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 26
22593: PUSH
22594: LD_INT 27
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: LD_INT 29
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 31
22608: PUSH
22609: LD_INT 32
22611: PUSH
22612: LD_INT 33
22614: PUSH
22615: LD_INT 34
22617: PUSH
22618: LD_INT 36
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 101
22660: PUSH
22661: LD_INT 102
22663: PUSH
22664: LD_INT 103
22666: PUSH
22667: LD_INT 104
22669: PUSH
22670: LD_INT 105
22672: PUSH
22673: LD_INT 106
22675: PUSH
22676: LD_INT 107
22678: PUSH
22679: LD_INT 108
22681: PUSH
22682: LD_INT 109
22684: PUSH
22685: LD_INT 110
22687: PUSH
22688: LD_INT 111
22690: PUSH
22691: LD_INT 112
22693: PUSH
22694: LD_INT 113
22696: PUSH
22697: LD_INT 114
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: ST_TO_ADDR
22720: GO 23095
22722: LD_INT 18
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 22866
22730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22731: LD_ADDR_VAR 0 1
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: LD_INT 4
22741: PUSH
22742: LD_INT 5
22744: PUSH
22745: LD_INT 7
22747: PUSH
22748: LD_INT 11
22750: PUSH
22751: LD_INT 12
22753: PUSH
22754: LD_INT 15
22756: PUSH
22757: LD_INT 16
22759: PUSH
22760: LD_INT 20
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_INT 23
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 26
22777: PUSH
22778: LD_INT 30
22780: PUSH
22781: LD_INT 31
22783: PUSH
22784: LD_INT 32
22786: PUSH
22787: LD_INT 33
22789: PUSH
22790: LD_INT 34
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 36
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 101
22824: PUSH
22825: LD_INT 102
22827: PUSH
22828: LD_INT 103
22830: PUSH
22831: LD_INT 106
22833: PUSH
22834: LD_INT 108
22836: PUSH
22837: LD_INT 112
22839: PUSH
22840: LD_INT 113
22842: PUSH
22843: LD_INT 114
22845: PUSH
22846: LD_INT 115
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: ST_TO_ADDR
22864: GO 23095
22866: LD_INT 19
22868: DOUBLE
22869: EQUAL
22870: IFTRUE 22874
22872: GO 23094
22874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 4
22891: PUSH
22892: LD_INT 5
22894: PUSH
22895: LD_INT 6
22897: PUSH
22898: LD_INT 7
22900: PUSH
22901: LD_INT 8
22903: PUSH
22904: LD_INT 9
22906: PUSH
22907: LD_INT 10
22909: PUSH
22910: LD_INT 11
22912: PUSH
22913: LD_INT 12
22915: PUSH
22916: LD_INT 13
22918: PUSH
22919: LD_INT 14
22921: PUSH
22922: LD_INT 15
22924: PUSH
22925: LD_INT 16
22927: PUSH
22928: LD_INT 17
22930: PUSH
22931: LD_INT 18
22933: PUSH
22934: LD_INT 19
22936: PUSH
22937: LD_INT 20
22939: PUSH
22940: LD_INT 21
22942: PUSH
22943: LD_INT 22
22945: PUSH
22946: LD_INT 23
22948: PUSH
22949: LD_INT 24
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 26
22957: PUSH
22958: LD_INT 27
22960: PUSH
22961: LD_INT 28
22963: PUSH
22964: LD_INT 29
22966: PUSH
22967: LD_INT 30
22969: PUSH
22970: LD_INT 31
22972: PUSH
22973: LD_INT 32
22975: PUSH
22976: LD_INT 33
22978: PUSH
22979: LD_INT 34
22981: PUSH
22982: LD_INT 35
22984: PUSH
22985: LD_INT 36
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 101
23028: PUSH
23029: LD_INT 102
23031: PUSH
23032: LD_INT 103
23034: PUSH
23035: LD_INT 104
23037: PUSH
23038: LD_INT 105
23040: PUSH
23041: LD_INT 106
23043: PUSH
23044: LD_INT 107
23046: PUSH
23047: LD_INT 108
23049: PUSH
23050: LD_INT 109
23052: PUSH
23053: LD_INT 110
23055: PUSH
23056: LD_INT 111
23058: PUSH
23059: LD_INT 112
23061: PUSH
23062: LD_INT 113
23064: PUSH
23065: LD_INT 114
23067: PUSH
23068: LD_INT 115
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: ST_TO_ADDR
23092: GO 23095
23094: POP
// end else
23095: GO 23314
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23097: LD_ADDR_VAR 0 1
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 4
23113: PUSH
23114: LD_INT 5
23116: PUSH
23117: LD_INT 6
23119: PUSH
23120: LD_INT 7
23122: PUSH
23123: LD_INT 8
23125: PUSH
23126: LD_INT 9
23128: PUSH
23129: LD_INT 10
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 13
23140: PUSH
23141: LD_INT 14
23143: PUSH
23144: LD_INT 15
23146: PUSH
23147: LD_INT 16
23149: PUSH
23150: LD_INT 17
23152: PUSH
23153: LD_INT 18
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 20
23161: PUSH
23162: LD_INT 21
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 23
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 25
23176: PUSH
23177: LD_INT 26
23179: PUSH
23180: LD_INT 27
23182: PUSH
23183: LD_INT 28
23185: PUSH
23186: LD_INT 29
23188: PUSH
23189: LD_INT 30
23191: PUSH
23192: LD_INT 31
23194: PUSH
23195: LD_INT 32
23197: PUSH
23198: LD_INT 33
23200: PUSH
23201: LD_INT 34
23203: PUSH
23204: LD_INT 35
23206: PUSH
23207: LD_INT 36
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 101
23250: PUSH
23251: LD_INT 102
23253: PUSH
23254: LD_INT 103
23256: PUSH
23257: LD_INT 104
23259: PUSH
23260: LD_INT 105
23262: PUSH
23263: LD_INT 106
23265: PUSH
23266: LD_INT 107
23268: PUSH
23269: LD_INT 108
23271: PUSH
23272: LD_INT 109
23274: PUSH
23275: LD_INT 110
23277: PUSH
23278: LD_INT 111
23280: PUSH
23281: LD_INT 112
23283: PUSH
23284: LD_INT 113
23286: PUSH
23287: LD_INT 114
23289: PUSH
23290: LD_INT 115
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: ST_TO_ADDR
// if result then
23314: LD_VAR 0 1
23318: IFFALSE 23607
// begin normal :=  ;
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: LD_STRING 
23327: ST_TO_ADDR
// hardcore :=  ;
23328: LD_ADDR_VAR 0 4
23332: PUSH
23333: LD_STRING 
23335: ST_TO_ADDR
// for i = 1 to normalCounter do
23336: LD_ADDR_VAR 0 5
23340: PUSH
23341: DOUBLE
23342: LD_INT 1
23344: DEC
23345: ST_TO_ADDR
23346: LD_EXP 67
23350: PUSH
23351: FOR_TO
23352: IFFALSE 23453
// begin tmp := 0 ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_STRING 0
23361: ST_TO_ADDR
// if result [ 1 ] then
23362: LD_VAR 0 1
23366: PUSH
23367: LD_INT 1
23369: ARRAY
23370: IFFALSE 23435
// if result [ 1 ] [ 1 ] = i then
23372: LD_VAR 0 1
23376: PUSH
23377: LD_INT 1
23379: ARRAY
23380: PUSH
23381: LD_INT 1
23383: ARRAY
23384: PUSH
23385: LD_VAR 0 5
23389: EQUAL
23390: IFFALSE 23435
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_VAR 0 1
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 3
23421: PPUSH
23422: CALL_OW 1
23426: ST_TO_ADDR
// tmp := 1 ;
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_STRING 1
23434: ST_TO_ADDR
// end ; normal := normal & tmp ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_VAR 0 3
23444: PUSH
23445: LD_VAR 0 2
23449: STR
23450: ST_TO_ADDR
// end ;
23451: GO 23351
23453: POP
23454: POP
// for i = 1 to hardcoreCounter do
23455: LD_ADDR_VAR 0 5
23459: PUSH
23460: DOUBLE
23461: LD_INT 1
23463: DEC
23464: ST_TO_ADDR
23465: LD_EXP 68
23469: PUSH
23470: FOR_TO
23471: IFFALSE 23576
// begin tmp := 0 ;
23473: LD_ADDR_VAR 0 2
23477: PUSH
23478: LD_STRING 0
23480: ST_TO_ADDR
// if result [ 2 ] then
23481: LD_VAR 0 1
23485: PUSH
23486: LD_INT 2
23488: ARRAY
23489: IFFALSE 23558
// if result [ 2 ] [ 1 ] = 100 + i then
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 2
23498: ARRAY
23499: PUSH
23500: LD_INT 1
23502: ARRAY
23503: PUSH
23504: LD_INT 100
23506: PUSH
23507: LD_VAR 0 5
23511: PLUS
23512: EQUAL
23513: IFFALSE 23558
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23515: LD_ADDR_VAR 0 1
23519: PUSH
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 2
23527: PPUSH
23528: LD_VAR 0 1
23532: PUSH
23533: LD_INT 2
23535: ARRAY
23536: PPUSH
23537: LD_INT 1
23539: PPUSH
23540: CALL_OW 3
23544: PPUSH
23545: CALL_OW 1
23549: ST_TO_ADDR
// tmp := 1 ;
23550: LD_ADDR_VAR 0 2
23554: PUSH
23555: LD_STRING 1
23557: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23558: LD_ADDR_VAR 0 4
23562: PUSH
23563: LD_VAR 0 4
23567: PUSH
23568: LD_VAR 0 2
23572: STR
23573: ST_TO_ADDR
// end ;
23574: GO 23470
23576: POP
23577: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23578: LD_STRING getStreamItemsFromMission("
23580: PUSH
23581: LD_VAR 0 3
23585: STR
23586: PUSH
23587: LD_STRING ","
23589: STR
23590: PUSH
23591: LD_VAR 0 4
23595: STR
23596: PUSH
23597: LD_STRING ")
23599: STR
23600: PPUSH
23601: CALL_OW 559
// end else
23605: GO 23614
// ToLua ( getStreamItemsFromMission("","") ) ;
23607: LD_STRING getStreamItemsFromMission("","")
23609: PPUSH
23610: CALL_OW 559
// end ;
23614: LD_VAR 0 1
23618: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23619: LD_EXP 66
23623: PUSH
23624: LD_EXP 71
23628: AND
23629: IFFALSE 23753
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
// begin enable ;
23638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23639: LD_ADDR_VAR 0 2
23643: PUSH
23644: LD_INT 22
23646: PUSH
23647: LD_OWVAR 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 34
23661: PUSH
23662: LD_INT 7
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 34
23671: PUSH
23672: LD_INT 45
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 34
23681: PUSH
23682: LD_INT 28
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 34
23691: PUSH
23692: LD_INT 47
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 2
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23753
// for i in tmp do
23724: LD_ADDR_VAR 0 1
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23751
// begin SetLives ( i , 0 ) ;
23737: LD_VAR 0 1
23741: PPUSH
23742: LD_INT 0
23744: PPUSH
23745: CALL_OW 234
// end ;
23749: GO 23734
23751: POP
23752: POP
// end ;
23753: PPOPN 2
23755: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23756: LD_EXP 66
23760: PUSH
23761: LD_EXP 72
23765: AND
23766: IFFALSE 23850
23768: GO 23770
23770: DISABLE
23771: LD_INT 0
23773: PPUSH
23774: PPUSH
// begin enable ;
23775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23776: LD_ADDR_VAR 0 2
23780: PUSH
23781: LD_INT 22
23783: PUSH
23784: LD_OWVAR 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 32
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PPUSH
23807: CALL_OW 69
23811: ST_TO_ADDR
// if not tmp then
23812: LD_VAR 0 2
23816: NOT
23817: IFFALSE 23821
// exit ;
23819: GO 23850
// for i in tmp do
23821: LD_ADDR_VAR 0 1
23825: PUSH
23826: LD_VAR 0 2
23830: PUSH
23831: FOR_IN
23832: IFFALSE 23848
// begin SetLives ( i , 0 ) ;
23834: LD_VAR 0 1
23838: PPUSH
23839: LD_INT 0
23841: PPUSH
23842: CALL_OW 234
// end ;
23846: GO 23831
23848: POP
23849: POP
// end ;
23850: PPOPN 2
23852: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23853: LD_EXP 66
23857: PUSH
23858: LD_EXP 69
23862: AND
23863: IFFALSE 23956
23865: GO 23867
23867: DISABLE
23868: LD_INT 0
23870: PPUSH
// begin enable ;
23871: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23872: LD_ADDR_VAR 0 1
23876: PUSH
23877: LD_INT 22
23879: PUSH
23880: LD_OWVAR 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: LD_INT 25
23894: PUSH
23895: LD_INT 5
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 25
23904: PUSH
23905: LD_INT 9
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: LD_INT 8
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23954
// begin SetClass ( i , 1 ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 336
// end ;
23952: GO 23937
23954: POP
23955: POP
// end ;
23956: PPOPN 1
23958: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23959: LD_EXP 66
23963: PUSH
23964: LD_EXP 70
23968: AND
23969: PUSH
23970: LD_OWVAR 65
23974: PUSH
23975: LD_INT 7
23977: LESS
23978: AND
23979: IFFALSE 23993
23981: GO 23983
23983: DISABLE
// begin enable ;
23984: ENABLE
// game_speed := 7 ;
23985: LD_ADDR_OWVAR 65
23989: PUSH
23990: LD_INT 7
23992: ST_TO_ADDR
// end ;
23993: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23994: LD_EXP 66
23998: PUSH
23999: LD_EXP 73
24003: AND
24004: IFFALSE 24206
24006: GO 24008
24008: DISABLE
24009: LD_INT 0
24011: PPUSH
24012: PPUSH
24013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24014: LD_ADDR_VAR 0 3
24018: PUSH
24019: LD_INT 81
24021: PUSH
24022: LD_OWVAR 2
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PPUSH
24045: CALL_OW 69
24049: ST_TO_ADDR
// if not tmp then
24050: LD_VAR 0 3
24054: NOT
24055: IFFALSE 24059
// exit ;
24057: GO 24206
// if tmp > 5 then
24059: LD_VAR 0 3
24063: PUSH
24064: LD_INT 5
24066: GREATER
24067: IFFALSE 24079
// k := 5 else
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_INT 5
24076: ST_TO_ADDR
24077: GO 24089
// k := tmp ;
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: LD_VAR 0 3
24088: ST_TO_ADDR
// for i := 1 to k do
24089: LD_ADDR_VAR 0 1
24093: PUSH
24094: DOUBLE
24095: LD_INT 1
24097: DEC
24098: ST_TO_ADDR
24099: LD_VAR 0 2
24103: PUSH
24104: FOR_TO
24105: IFFALSE 24204
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24107: LD_VAR 0 3
24111: PUSH
24112: LD_VAR 0 1
24116: ARRAY
24117: PPUSH
24118: LD_VAR 0 1
24122: PUSH
24123: LD_INT 4
24125: MOD
24126: PUSH
24127: LD_INT 1
24129: PLUS
24130: PPUSH
24131: CALL_OW 259
24135: PUSH
24136: LD_INT 10
24138: LESS
24139: IFFALSE 24202
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24141: LD_VAR 0 3
24145: PUSH
24146: LD_VAR 0 1
24150: ARRAY
24151: PPUSH
24152: LD_VAR 0 1
24156: PUSH
24157: LD_INT 4
24159: MOD
24160: PUSH
24161: LD_INT 1
24163: PLUS
24164: PPUSH
24165: LD_VAR 0 3
24169: PUSH
24170: LD_VAR 0 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 1
24180: PUSH
24181: LD_INT 4
24183: MOD
24184: PUSH
24185: LD_INT 1
24187: PLUS
24188: PPUSH
24189: CALL_OW 259
24193: PUSH
24194: LD_INT 1
24196: PLUS
24197: PPUSH
24198: CALL_OW 237
24202: GO 24104
24204: POP
24205: POP
// end ;
24206: PPOPN 3
24208: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24209: LD_EXP 66
24213: PUSH
24214: LD_EXP 74
24218: AND
24219: IFFALSE 24239
24221: GO 24223
24223: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24224: LD_INT 4
24226: PPUSH
24227: LD_OWVAR 2
24231: PPUSH
24232: LD_INT 0
24234: PPUSH
24235: CALL_OW 324
24239: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24240: LD_EXP 66
24244: PUSH
24245: LD_EXP 103
24249: AND
24250: IFFALSE 24270
24252: GO 24254
24254: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24255: LD_INT 19
24257: PPUSH
24258: LD_OWVAR 2
24262: PPUSH
24263: LD_INT 0
24265: PPUSH
24266: CALL_OW 324
24270: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24271: LD_EXP 66
24275: PUSH
24276: LD_EXP 75
24280: AND
24281: IFFALSE 24383
24283: GO 24285
24285: DISABLE
24286: LD_INT 0
24288: PPUSH
24289: PPUSH
// begin enable ;
24290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_OWVAR 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: LD_INT 34
24313: PUSH
24314: LD_INT 11
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 34
24323: PUSH
24324: LD_INT 30
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PPUSH
24340: CALL_OW 69
24344: ST_TO_ADDR
// if not tmp then
24345: LD_VAR 0 2
24349: NOT
24350: IFFALSE 24354
// exit ;
24352: GO 24383
// for i in tmp do
24354: LD_ADDR_VAR 0 1
24358: PUSH
24359: LD_VAR 0 2
24363: PUSH
24364: FOR_IN
24365: IFFALSE 24381
// begin SetLives ( i , 0 ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_INT 0
24374: PPUSH
24375: CALL_OW 234
// end ;
24379: GO 24364
24381: POP
24382: POP
// end ;
24383: PPOPN 2
24385: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24386: LD_EXP 66
24390: PUSH
24391: LD_EXP 76
24395: AND
24396: IFFALSE 24416
24398: GO 24400
24400: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24401: LD_INT 32
24403: PPUSH
24404: LD_OWVAR 2
24408: PPUSH
24409: LD_INT 0
24411: PPUSH
24412: CALL_OW 324
24416: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24417: LD_EXP 66
24421: PUSH
24422: LD_EXP 77
24426: AND
24427: IFFALSE 24608
24429: GO 24431
24431: DISABLE
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 33
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: ST_TO_ADDR
// if not tmp then
24473: LD_VAR 0 2
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24608
// side := 0 ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// for i := 1 to 8 do
24490: LD_ADDR_VAR 0 1
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_INT 8
24502: PUSH
24503: FOR_TO
24504: IFFALSE 24552
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24506: LD_OWVAR 2
24510: PUSH
24511: LD_VAR 0 1
24515: NONEQUAL
24516: PUSH
24517: LD_OWVAR 2
24521: PPUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 81
24531: PUSH
24532: LD_INT 2
24534: EQUAL
24535: AND
24536: IFFALSE 24550
// begin side := i ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_VAR 0 1
24547: ST_TO_ADDR
// break ;
24548: GO 24552
// end ;
24550: GO 24503
24552: POP
24553: POP
// if not side then
24554: LD_VAR 0 3
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 24608
// for i := 1 to tmp do
24563: LD_ADDR_VAR 0 1
24567: PUSH
24568: DOUBLE
24569: LD_INT 1
24571: DEC
24572: ST_TO_ADDR
24573: LD_VAR 0 2
24577: PUSH
24578: FOR_TO
24579: IFFALSE 24606
// if Prob ( 60 ) then
24581: LD_INT 60
24583: PPUSH
24584: CALL_OW 13
24588: IFFALSE 24604
// SetSide ( i , side ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL_OW 235
24604: GO 24578
24606: POP
24607: POP
// end ;
24608: PPOPN 3
24610: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24611: LD_EXP 66
24615: PUSH
24616: LD_EXP 79
24620: AND
24621: IFFALSE 24740
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24629: LD_ADDR_VAR 0 1
24633: PUSH
24634: LD_INT 22
24636: PUSH
24637: LD_OWVAR 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 21
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: PPUSH
24678: CALL_OW 69
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24738
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 257
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 4
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: IN
24714: IFFALSE 24736
// SetClass ( un , rand ( 1 , 4 ) ) ;
24716: LD_VAR 0 1
24720: PPUSH
24721: LD_INT 1
24723: PPUSH
24724: LD_INT 4
24726: PPUSH
24727: CALL_OW 12
24731: PPUSH
24732: CALL_OW 336
24736: GO 24683
24738: POP
24739: POP
// end ;
24740: PPOPN 1
24742: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24743: LD_EXP 66
24747: PUSH
24748: LD_EXP 78
24752: AND
24753: IFFALSE 24832
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_OWVAR 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PPUSH
24792: CALL_OW 69
24796: ST_TO_ADDR
// if not tmp then
24797: LD_VAR 0 1
24801: NOT
24802: IFFALSE 24806
// exit ;
24804: GO 24832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24806: LD_VAR 0 1
24810: PUSH
24811: LD_INT 1
24813: PPUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 12
24823: ARRAY
24824: PPUSH
24825: LD_INT 100
24827: PPUSH
24828: CALL_OW 234
// end ;
24832: PPOPN 1
24834: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24835: LD_EXP 66
24839: PUSH
24840: LD_EXP 80
24844: AND
24845: IFFALSE 24943
24847: GO 24849
24849: DISABLE
24850: LD_INT 0
24852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_OWVAR 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 21
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PPUSH
24884: CALL_OW 69
24888: ST_TO_ADDR
// if not tmp then
24889: LD_VAR 0 1
24893: NOT
24894: IFFALSE 24898
// exit ;
24896: GO 24943
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 1
24905: PPUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 12
24915: ARRAY
24916: PPUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_INT 4
24922: PPUSH
24923: CALL_OW 12
24927: PPUSH
24928: LD_INT 3000
24930: PPUSH
24931: LD_INT 9000
24933: PPUSH
24934: CALL_OW 12
24938: PPUSH
24939: CALL_OW 492
// end ;
24943: PPOPN 1
24945: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24946: LD_EXP 66
24950: PUSH
24951: LD_EXP 81
24955: AND
24956: IFFALSE 24976
24958: GO 24960
24960: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24961: LD_INT 1
24963: PPUSH
24964: LD_OWVAR 2
24968: PPUSH
24969: LD_INT 0
24971: PPUSH
24972: CALL_OW 324
24976: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24977: LD_EXP 66
24981: PUSH
24982: LD_EXP 82
24986: AND
24987: IFFALSE 25070
24989: GO 24991
24991: DISABLE
24992: LD_INT 0
24994: PPUSH
24995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24996: LD_ADDR_VAR 0 2
25000: PUSH
25001: LD_INT 22
25003: PUSH
25004: LD_OWVAR 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 21
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 69
25031: ST_TO_ADDR
// if not tmp then
25032: LD_VAR 0 2
25036: NOT
25037: IFFALSE 25041
// exit ;
25039: GO 25070
// for i in tmp do
25041: LD_ADDR_VAR 0 1
25045: PUSH
25046: LD_VAR 0 2
25050: PUSH
25051: FOR_IN
25052: IFFALSE 25068
// SetBLevel ( i , 10 ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_INT 10
25061: PPUSH
25062: CALL_OW 241
25066: GO 25051
25068: POP
25069: POP
// end ;
25070: PPOPN 2
25072: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25073: LD_EXP 66
25077: PUSH
25078: LD_EXP 83
25082: AND
25083: IFFALSE 25194
25085: GO 25087
25087: DISABLE
25088: LD_INT 0
25090: PPUSH
25091: PPUSH
25092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_OWVAR 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 25
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PPUSH
25124: CALL_OW 69
25128: ST_TO_ADDR
// if not tmp then
25129: LD_VAR 0 3
25133: NOT
25134: IFFALSE 25138
// exit ;
25136: GO 25194
// un := tmp [ rand ( 1 , tmp ) ] ;
25138: LD_ADDR_VAR 0 2
25142: PUSH
25143: LD_VAR 0 3
25147: PUSH
25148: LD_INT 1
25150: PPUSH
25151: LD_VAR 0 3
25155: PPUSH
25156: CALL_OW 12
25160: ARRAY
25161: ST_TO_ADDR
// if Crawls ( un ) then
25162: LD_VAR 0 2
25166: PPUSH
25167: CALL_OW 318
25171: IFFALSE 25182
// ComWalk ( un ) ;
25173: LD_VAR 0 2
25177: PPUSH
25178: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_INT 5
25189: PPUSH
25190: CALL_OW 336
// end ;
25194: PPOPN 3
25196: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25197: LD_EXP 66
25201: PUSH
25202: LD_EXP 84
25206: AND
25207: PUSH
25208: LD_OWVAR 67
25212: PUSH
25213: LD_INT 3
25215: LESS
25216: AND
25217: IFFALSE 25236
25219: GO 25221
25221: DISABLE
// Difficulty := Difficulty + 1 ;
25222: LD_ADDR_OWVAR 67
25226: PUSH
25227: LD_OWVAR 67
25231: PUSH
25232: LD_INT 1
25234: PLUS
25235: ST_TO_ADDR
25236: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25237: LD_EXP 66
25241: PUSH
25242: LD_EXP 85
25246: AND
25247: IFFALSE 25350
25249: GO 25251
25251: DISABLE
25252: LD_INT 0
25254: PPUSH
// begin for i := 1 to 5 do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: DOUBLE
25261: LD_INT 1
25263: DEC
25264: ST_TO_ADDR
25265: LD_INT 5
25267: PUSH
25268: FOR_TO
25269: IFFALSE 25348
// begin uc_nation := nation_nature ;
25271: LD_ADDR_OWVAR 21
25275: PUSH
25276: LD_INT 0
25278: ST_TO_ADDR
// uc_side := 0 ;
25279: LD_ADDR_OWVAR 20
25283: PUSH
25284: LD_INT 0
25286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25287: LD_ADDR_OWVAR 29
25291: PUSH
25292: LD_INT 12
25294: PUSH
25295: LD_INT 12
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: ST_TO_ADDR
// hc_agressivity := 20 ;
25302: LD_ADDR_OWVAR 35
25306: PUSH
25307: LD_INT 20
25309: ST_TO_ADDR
// hc_class := class_tiger ;
25310: LD_ADDR_OWVAR 28
25314: PUSH
25315: LD_INT 14
25317: ST_TO_ADDR
// hc_gallery :=  ;
25318: LD_ADDR_OWVAR 33
25322: PUSH
25323: LD_STRING 
25325: ST_TO_ADDR
// hc_name :=  ;
25326: LD_ADDR_OWVAR 26
25330: PUSH
25331: LD_STRING 
25333: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25334: CALL_OW 44
25338: PPUSH
25339: LD_INT 0
25341: PPUSH
25342: CALL_OW 51
// end ;
25346: GO 25268
25348: POP
25349: POP
// end ;
25350: PPOPN 1
25352: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25353: LD_EXP 66
25357: PUSH
25358: LD_EXP 86
25362: AND
25363: IFFALSE 25372
25365: GO 25367
25367: DISABLE
// StreamSibBomb ;
25368: CALL 25373 0 0
25372: END
// export function StreamSibBomb ; var i , x , y ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
// result := false ;
25379: LD_ADDR_VAR 0 1
25383: PUSH
25384: LD_INT 0
25386: ST_TO_ADDR
// for i := 1 to 16 do
25387: LD_ADDR_VAR 0 2
25391: PUSH
25392: DOUBLE
25393: LD_INT 1
25395: DEC
25396: ST_TO_ADDR
25397: LD_INT 16
25399: PUSH
25400: FOR_TO
25401: IFFALSE 25600
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 10
25410: PUSH
25411: LD_INT 20
25413: PUSH
25414: LD_INT 30
25416: PUSH
25417: LD_INT 40
25419: PUSH
25420: LD_INT 50
25422: PUSH
25423: LD_INT 60
25425: PUSH
25426: LD_INT 70
25428: PUSH
25429: LD_INT 80
25431: PUSH
25432: LD_INT 90
25434: PUSH
25435: LD_INT 100
25437: PUSH
25438: LD_INT 110
25440: PUSH
25441: LD_INT 120
25443: PUSH
25444: LD_INT 130
25446: PUSH
25447: LD_INT 140
25449: PUSH
25450: LD_INT 150
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_INT 15
25475: PPUSH
25476: CALL_OW 12
25480: ARRAY
25481: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_INT 10
25489: PUSH
25490: LD_INT 20
25492: PUSH
25493: LD_INT 30
25495: PUSH
25496: LD_INT 40
25498: PUSH
25499: LD_INT 50
25501: PUSH
25502: LD_INT 60
25504: PUSH
25505: LD_INT 70
25507: PUSH
25508: LD_INT 80
25510: PUSH
25511: LD_INT 90
25513: PUSH
25514: LD_INT 100
25516: PUSH
25517: LD_INT 110
25519: PUSH
25520: LD_INT 120
25522: PUSH
25523: LD_INT 130
25525: PUSH
25526: LD_INT 140
25528: PUSH
25529: LD_INT 150
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: PPUSH
25552: LD_INT 15
25554: PPUSH
25555: CALL_OW 12
25559: ARRAY
25560: ST_TO_ADDR
// if ValidHex ( x , y ) then
25561: LD_VAR 0 3
25565: PPUSH
25566: LD_VAR 0 4
25570: PPUSH
25571: CALL_OW 488
25575: IFFALSE 25598
// begin result := [ x , y ] ;
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: LD_VAR 0 3
25586: PUSH
25587: LD_VAR 0 4
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: ST_TO_ADDR
// break ;
25596: GO 25600
// end ; end ;
25598: GO 25400
25600: POP
25601: POP
// if result then
25602: LD_VAR 0 1
25606: IFFALSE 25666
// begin ToLua ( playSibBomb() ) ;
25608: LD_STRING playSibBomb()
25610: PPUSH
25611: CALL_OW 559
// wait ( 0 0$14 ) ;
25615: LD_INT 490
25617: PPUSH
25618: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25622: LD_VAR 0 1
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: LD_VAR 0 1
25635: PUSH
25636: LD_INT 2
25638: ARRAY
25639: PPUSH
25640: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 2
25660: ARRAY
25661: PPUSH
25662: CALL_OW 429
// end ; end ;
25666: LD_VAR 0 1
25670: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25671: LD_EXP 66
25675: PUSH
25676: LD_EXP 88
25680: AND
25681: IFFALSE 25693
25683: GO 25685
25685: DISABLE
// YouLost (  ) ;
25686: LD_STRING 
25688: PPUSH
25689: CALL_OW 104
25693: END
// every 0 0$1 trigger StreamModeActive and sFog do
25694: LD_EXP 66
25698: PUSH
25699: LD_EXP 87
25703: AND
25704: IFFALSE 25718
25706: GO 25708
25708: DISABLE
// FogOff ( your_side ) ;
25709: LD_OWVAR 2
25713: PPUSH
25714: CALL_OW 344
25718: END
// every 0 0$1 trigger StreamModeActive and sSun do
25719: LD_EXP 66
25723: PUSH
25724: LD_EXP 89
25728: AND
25729: IFFALSE 25757
25731: GO 25733
25733: DISABLE
// begin solar_recharge_percent := 0 ;
25734: LD_ADDR_OWVAR 79
25738: PUSH
25739: LD_INT 0
25741: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25742: LD_INT 10500
25744: PPUSH
25745: CALL_OW 67
// solar_recharge_percent := 100 ;
25749: LD_ADDR_OWVAR 79
25753: PUSH
25754: LD_INT 100
25756: ST_TO_ADDR
// end ;
25757: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25758: LD_EXP 66
25762: PUSH
25763: LD_EXP 90
25767: AND
25768: IFFALSE 26007
25770: GO 25772
25772: DISABLE
25773: LD_INT 0
25775: PPUSH
25776: PPUSH
25777: PPUSH
// begin tmp := [ ] ;
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: EMPTY
25784: ST_TO_ADDR
// for i := 1 to 6 do
25785: LD_ADDR_VAR 0 1
25789: PUSH
25790: DOUBLE
25791: LD_INT 1
25793: DEC
25794: ST_TO_ADDR
25795: LD_INT 6
25797: PUSH
25798: FOR_TO
25799: IFFALSE 25904
// begin uc_nation := nation_nature ;
25801: LD_ADDR_OWVAR 21
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// uc_side := 0 ;
25809: LD_ADDR_OWVAR 20
25813: PUSH
25814: LD_INT 0
25816: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25817: LD_ADDR_OWVAR 29
25821: PUSH
25822: LD_INT 12
25824: PUSH
25825: LD_INT 12
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// hc_agressivity := 20 ;
25832: LD_ADDR_OWVAR 35
25836: PUSH
25837: LD_INT 20
25839: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25840: LD_ADDR_OWVAR 28
25844: PUSH
25845: LD_INT 17
25847: ST_TO_ADDR
// hc_gallery :=  ;
25848: LD_ADDR_OWVAR 33
25852: PUSH
25853: LD_STRING 
25855: ST_TO_ADDR
// hc_name :=  ;
25856: LD_ADDR_OWVAR 26
25860: PUSH
25861: LD_STRING 
25863: ST_TO_ADDR
// un := CreateHuman ;
25864: LD_ADDR_VAR 0 2
25868: PUSH
25869: CALL_OW 44
25873: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: LD_INT 1
25881: PPUSH
25882: CALL_OW 51
// tmp := tmp ^ un ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: LD_VAR 0 2
25900: ADD
25901: ST_TO_ADDR
// end ;
25902: GO 25798
25904: POP
25905: POP
// repeat wait ( 0 0$1 ) ;
25906: LD_INT 35
25908: PPUSH
25909: CALL_OW 67
// for un in tmp do
25913: LD_ADDR_VAR 0 2
25917: PUSH
25918: LD_VAR 0 3
25922: PUSH
25923: FOR_IN
25924: IFFALSE 25998
// begin if IsDead ( un ) then
25926: LD_VAR 0 2
25930: PPUSH
25931: CALL_OW 301
25935: IFFALSE 25955
// begin tmp := tmp diff un ;
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_VAR 0 3
25946: PUSH
25947: LD_VAR 0 2
25951: DIFF
25952: ST_TO_ADDR
// continue ;
25953: GO 25923
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_INT 3
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: PPUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: CALL_OW 74
25991: PPUSH
25992: CALL_OW 115
// end ;
25996: GO 25923
25998: POP
25999: POP
// until not tmp ;
26000: LD_VAR 0 3
26004: NOT
26005: IFFALSE 25906
// end ;
26007: PPOPN 3
26009: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26010: LD_EXP 66
26014: PUSH
26015: LD_EXP 91
26019: AND
26020: IFFALSE 26074
26022: GO 26024
26024: DISABLE
// begin ToLua ( displayTroll(); ) ;
26025: LD_STRING displayTroll();
26027: PPUSH
26028: CALL_OW 559
// wait ( 3 3$00 ) ;
26032: LD_INT 6300
26034: PPUSH
26035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26039: LD_STRING hideTroll();
26041: PPUSH
26042: CALL_OW 559
// wait ( 1 1$00 ) ;
26046: LD_INT 2100
26048: PPUSH
26049: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26053: LD_STRING displayTroll();
26055: PPUSH
26056: CALL_OW 559
// wait ( 1 1$00 ) ;
26060: LD_INT 2100
26062: PPUSH
26063: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26067: LD_STRING hideTroll();
26069: PPUSH
26070: CALL_OW 559
// end ;
26074: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26075: LD_EXP 66
26079: PUSH
26080: LD_EXP 92
26084: AND
26085: IFFALSE 26148
26087: GO 26089
26089: DISABLE
26090: LD_INT 0
26092: PPUSH
// begin p := 0 ;
26093: LD_ADDR_VAR 0 1
26097: PUSH
26098: LD_INT 0
26100: ST_TO_ADDR
// repeat game_speed := 1 ;
26101: LD_ADDR_OWVAR 65
26105: PUSH
26106: LD_INT 1
26108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26109: LD_INT 35
26111: PPUSH
26112: CALL_OW 67
// p := p + 1 ;
26116: LD_ADDR_VAR 0 1
26120: PUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_INT 1
26128: PLUS
26129: ST_TO_ADDR
// until p >= 60 ;
26130: LD_VAR 0 1
26134: PUSH
26135: LD_INT 60
26137: GREATEREQUAL
26138: IFFALSE 26101
// game_speed := 4 ;
26140: LD_ADDR_OWVAR 65
26144: PUSH
26145: LD_INT 4
26147: ST_TO_ADDR
// end ;
26148: PPOPN 1
26150: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26151: LD_EXP 66
26155: PUSH
26156: LD_EXP 93
26160: AND
26161: IFFALSE 26307
26163: GO 26165
26165: DISABLE
26166: LD_INT 0
26168: PPUSH
26169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26170: LD_ADDR_VAR 0 1
26174: PUSH
26175: LD_INT 22
26177: PUSH
26178: LD_OWVAR 2
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 30
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 30
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PPUSH
26219: CALL_OW 69
26223: ST_TO_ADDR
// if not depot then
26224: LD_VAR 0 1
26228: NOT
26229: IFFALSE 26233
// exit ;
26231: GO 26307
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: LD_VAR 0 1
26242: PUSH
26243: LD_INT 1
26245: PPUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 12
26255: ARRAY
26256: PPUSH
26257: CALL_OW 274
26261: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_INT 1
26269: PPUSH
26270: LD_INT 0
26272: PPUSH
26273: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26277: LD_VAR 0 2
26281: PPUSH
26282: LD_INT 2
26284: PPUSH
26285: LD_INT 0
26287: PPUSH
26288: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26292: LD_VAR 0 2
26296: PPUSH
26297: LD_INT 3
26299: PPUSH
26300: LD_INT 0
26302: PPUSH
26303: CALL_OW 277
// end ;
26307: PPOPN 2
26309: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26310: LD_EXP 66
26314: PUSH
26315: LD_EXP 94
26319: AND
26320: IFFALSE 26417
26322: GO 26324
26324: DISABLE
26325: LD_INT 0
26327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: LD_INT 22
26335: PUSH
26336: LD_OWVAR 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 21
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 23
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 69
26381: ST_TO_ADDR
// if not tmp then
26382: LD_VAR 0 1
26386: NOT
26387: IFFALSE 26391
// exit ;
26389: GO 26417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26391: LD_VAR 0 1
26395: PUSH
26396: LD_INT 1
26398: PPUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 12
26408: ARRAY
26409: PPUSH
26410: LD_INT 200
26412: PPUSH
26413: CALL_OW 234
// end ;
26417: PPOPN 1
26419: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26420: LD_EXP 66
26424: PUSH
26425: LD_EXP 95
26429: AND
26430: IFFALSE 26509
26432: GO 26434
26434: DISABLE
26435: LD_INT 0
26437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26438: LD_ADDR_VAR 0 1
26442: PUSH
26443: LD_INT 22
26445: PUSH
26446: LD_OWVAR 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PPUSH
26469: CALL_OW 69
26473: ST_TO_ADDR
// if not tmp then
26474: LD_VAR 0 1
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26483: LD_VAR 0 1
26487: PUSH
26488: LD_INT 1
26490: PPUSH
26491: LD_VAR 0 1
26495: PPUSH
26496: CALL_OW 12
26500: ARRAY
26501: PPUSH
26502: LD_INT 60
26504: PPUSH
26505: CALL_OW 234
// end ;
26509: PPOPN 1
26511: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26512: LD_EXP 66
26516: PUSH
26517: LD_EXP 96
26521: AND
26522: IFFALSE 26621
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
// begin enable ;
26531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26532: LD_ADDR_VAR 0 1
26536: PUSH
26537: LD_INT 22
26539: PUSH
26540: LD_OWVAR 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 61
26551: PUSH
26552: EMPTY
26553: LIST
26554: PUSH
26555: LD_INT 33
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: PPUSH
26570: CALL_OW 69
26574: ST_TO_ADDR
// if not tmp then
26575: LD_VAR 0 1
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26621
// for i in tmp do
26584: LD_ADDR_VAR 0 2
26588: PUSH
26589: LD_VAR 0 1
26593: PUSH
26594: FOR_IN
26595: IFFALSE 26619
// if IsControledBy ( i ) then
26597: LD_VAR 0 2
26601: PPUSH
26602: CALL_OW 312
26606: IFFALSE 26617
// ComUnlink ( i ) ;
26608: LD_VAR 0 2
26612: PPUSH
26613: CALL_OW 136
26617: GO 26594
26619: POP
26620: POP
// end ;
26621: PPOPN 2
26623: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26624: LD_EXP 66
26628: PUSH
26629: LD_EXP 97
26633: AND
26634: IFFALSE 26774
26636: GO 26638
26638: DISABLE
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
// begin ToLua ( displayPowell(); ) ;
26643: LD_STRING displayPowell();
26645: PPUSH
26646: CALL_OW 559
// uc_side := 0 ;
26650: LD_ADDR_OWVAR 20
26654: PUSH
26655: LD_INT 0
26657: ST_TO_ADDR
// uc_nation := 2 ;
26658: LD_ADDR_OWVAR 21
26662: PUSH
26663: LD_INT 2
26665: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26666: LD_ADDR_OWVAR 37
26670: PUSH
26671: LD_INT 14
26673: ST_TO_ADDR
// vc_engine := engine_siberite ;
26674: LD_ADDR_OWVAR 39
26678: PUSH
26679: LD_INT 3
26681: ST_TO_ADDR
// vc_control := control_apeman ;
26682: LD_ADDR_OWVAR 38
26686: PUSH
26687: LD_INT 5
26689: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26690: LD_ADDR_OWVAR 40
26694: PUSH
26695: LD_INT 29
26697: ST_TO_ADDR
// un := CreateVehicle ;
26698: LD_ADDR_VAR 0 2
26702: PUSH
26703: CALL_OW 45
26707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26708: LD_VAR 0 2
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26720: LD_INT 35
26722: PPUSH
26723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26727: LD_VAR 0 2
26731: PPUSH
26732: LD_INT 22
26734: PUSH
26735: LD_OWVAR 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PPUSH
26744: CALL_OW 69
26748: PPUSH
26749: LD_VAR 0 2
26753: PPUSH
26754: CALL_OW 74
26758: PPUSH
26759: CALL_OW 115
// until IsDead ( un ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 301
26772: IFFALSE 26720
// end ;
26774: PPOPN 2
26776: END
// every 0 0$1 trigger StreamModeActive and sStu do
26777: LD_EXP 66
26781: PUSH
26782: LD_EXP 105
26786: AND
26787: IFFALSE 26803
26789: GO 26791
26791: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26792: LD_STRING displayStucuk();
26794: PPUSH
26795: CALL_OW 559
// ResetFog ;
26799: CALL_OW 335
// end ;
26803: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26804: LD_EXP 66
26808: PUSH
26809: LD_EXP 98
26813: AND
26814: IFFALSE 26955
26816: GO 26818
26818: DISABLE
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26823: LD_ADDR_VAR 0 2
26827: PUSH
26828: LD_INT 22
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: ST_TO_ADDR
// if not tmp then
26859: LD_VAR 0 2
26863: NOT
26864: IFFALSE 26868
// exit ;
26866: GO 26955
// un := tmp [ rand ( 1 , tmp ) ] ;
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_VAR 0 2
26885: PPUSH
26886: CALL_OW 12
26890: ARRAY
26891: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_INT 0
26899: PPUSH
26900: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_OWVAR 3
26913: PUSH
26914: LD_VAR 0 1
26918: DIFF
26919: PPUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 74
26929: PPUSH
26930: CALL_OW 115
// wait ( 0 0$20 ) ;
26934: LD_INT 700
26936: PPUSH
26937: CALL_OW 67
// SetSide ( un , your_side ) ;
26941: LD_VAR 0 1
26945: PPUSH
26946: LD_OWVAR 2
26950: PPUSH
26951: CALL_OW 235
// end ;
26955: PPOPN 2
26957: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26958: LD_EXP 66
26962: PUSH
26963: LD_EXP 99
26967: AND
26968: IFFALSE 27074
26970: GO 26972
26972: DISABLE
26973: LD_INT 0
26975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_INT 22
26983: PUSH
26984: LD_OWVAR 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 30
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 69
27029: ST_TO_ADDR
// if not depot then
27030: LD_VAR 0 1
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27074
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27039: LD_VAR 0 1
27043: PUSH
27044: LD_INT 1
27046: ARRAY
27047: PPUSH
27048: CALL_OW 250
27052: PPUSH
27053: LD_VAR 0 1
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 251
27066: PPUSH
27067: LD_INT 70
27069: PPUSH
27070: CALL_OW 495
// end ;
27074: PPOPN 1
27076: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27077: LD_EXP 66
27081: PUSH
27082: LD_EXP 100
27086: AND
27087: IFFALSE 27298
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
27096: PPUSH
27097: PPUSH
27098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27099: LD_ADDR_VAR 0 5
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_OWVAR 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 21
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PPUSH
27130: CALL_OW 69
27134: ST_TO_ADDR
// if not tmp then
27135: LD_VAR 0 5
27139: NOT
27140: IFFALSE 27144
// exit ;
27142: GO 27298
// for i in tmp do
27144: LD_ADDR_VAR 0 1
27148: PUSH
27149: LD_VAR 0 5
27153: PUSH
27154: FOR_IN
27155: IFFALSE 27296
// begin d := rand ( 0 , 5 ) ;
27157: LD_ADDR_VAR 0 4
27161: PUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_INT 5
27167: PPUSH
27168: CALL_OW 12
27172: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 250
27187: PPUSH
27188: LD_VAR 0 4
27192: PPUSH
27193: LD_INT 3
27195: PPUSH
27196: LD_INT 12
27198: PPUSH
27199: CALL_OW 12
27203: PPUSH
27204: CALL_OW 272
27208: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27209: LD_ADDR_VAR 0 3
27213: PUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: CALL_OW 251
27223: PPUSH
27224: LD_VAR 0 4
27228: PPUSH
27229: LD_INT 3
27231: PPUSH
27232: LD_INT 12
27234: PPUSH
27235: CALL_OW 12
27239: PPUSH
27240: CALL_OW 273
27244: ST_TO_ADDR
// if ValidHex ( x , y ) then
27245: LD_VAR 0 2
27249: PPUSH
27250: LD_VAR 0 3
27254: PPUSH
27255: CALL_OW 488
27259: IFFALSE 27294
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: LD_VAR 0 3
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: LD_INT 6
27281: PPUSH
27282: CALL_OW 12
27286: PPUSH
27287: LD_INT 1
27289: PPUSH
27290: CALL_OW 483
// end ;
27294: GO 27154
27296: POP
27297: POP
// end ;
27298: PPOPN 5
27300: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27301: LD_EXP 66
27305: PUSH
27306: LD_EXP 101
27310: AND
27311: IFFALSE 27405
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 32
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 21
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27405
// for i in tmp do
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27403
// SetFuel ( i , 0 ) ;
27389: LD_VAR 0 1
27393: PPUSH
27394: LD_INT 0
27396: PPUSH
27397: CALL_OW 240
27401: GO 27386
27403: POP
27404: POP
// end ;
27405: PPOPN 2
27407: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27408: LD_EXP 66
27412: PUSH
27413: LD_EXP 102
27417: AND
27418: IFFALSE 27484
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 30
27445: PUSH
27446: LD_INT 29
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 1
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27484
// DestroyUnit ( tmp [ 1 ] ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: PPUSH
27480: CALL_OW 65
// end ;
27484: PPOPN 1
27486: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27487: LD_EXP 66
27491: PUSH
27492: LD_EXP 104
27496: AND
27497: IFFALSE 27626
27499: GO 27501
27501: DISABLE
27502: LD_INT 0
27504: PPUSH
// begin uc_side := 0 ;
27505: LD_ADDR_OWVAR 20
27509: PUSH
27510: LD_INT 0
27512: ST_TO_ADDR
// uc_nation := nation_arabian ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 2
27520: ST_TO_ADDR
// hc_gallery :=  ;
27521: LD_ADDR_OWVAR 33
27525: PUSH
27526: LD_STRING 
27528: ST_TO_ADDR
// hc_name :=  ;
27529: LD_ADDR_OWVAR 26
27533: PUSH
27534: LD_STRING 
27536: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27537: LD_INT 1
27539: PPUSH
27540: LD_INT 11
27542: PPUSH
27543: LD_INT 10
27545: PPUSH
27546: CALL_OW 380
// un := CreateHuman ;
27550: LD_ADDR_VAR 0 1
27554: PUSH
27555: CALL_OW 44
27559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_INT 1
27567: PPUSH
27568: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27572: LD_INT 35
27574: PPUSH
27575: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27579: LD_VAR 0 1
27583: PPUSH
27584: LD_INT 22
27586: PUSH
27587: LD_OWVAR 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 69
27600: PPUSH
27601: LD_VAR 0 1
27605: PPUSH
27606: CALL_OW 74
27610: PPUSH
27611: CALL_OW 115
// until IsDead ( un ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL_OW 301
27624: IFFALSE 27572
// end ;
27626: PPOPN 1
27628: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27629: LD_EXP 66
27633: PUSH
27634: LD_EXP 106
27638: AND
27639: IFFALSE 27651
27641: GO 27643
27643: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27644: LD_STRING earthquake(getX(game), 0, 32)
27646: PPUSH
27647: CALL_OW 559
27651: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27652: LD_EXP 66
27656: PUSH
27657: LD_EXP 107
27661: AND
27662: IFFALSE 27753
27664: GO 27666
27666: DISABLE
27667: LD_INT 0
27669: PPUSH
// begin enable ;
27670: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27671: LD_ADDR_VAR 0 1
27675: PUSH
27676: LD_INT 22
27678: PUSH
27679: LD_OWVAR 2
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 21
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 33
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: PPUSH
27713: CALL_OW 69
27717: ST_TO_ADDR
// if not tmp then
27718: LD_VAR 0 1
27722: NOT
27723: IFFALSE 27727
// exit ;
27725: GO 27753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 1
27734: PPUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 12
27744: ARRAY
27745: PPUSH
27746: LD_INT 1
27748: PPUSH
27749: CALL_OW 234
// end ;
27753: PPOPN 1
27755: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27756: LD_EXP 66
27760: PUSH
27761: LD_EXP 108
27765: AND
27766: IFFALSE 27907
27768: GO 27770
27770: DISABLE
27771: LD_INT 0
27773: PPUSH
27774: PPUSH
27775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27776: LD_ADDR_VAR 0 3
27780: PUSH
27781: LD_INT 22
27783: PUSH
27784: LD_OWVAR 2
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 25
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 69
27811: ST_TO_ADDR
// if not tmp then
27812: LD_VAR 0 3
27816: NOT
27817: IFFALSE 27821
// exit ;
27819: GO 27907
// un := tmp [ rand ( 1 , tmp ) ] ;
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: LD_VAR 0 3
27830: PUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_VAR 0 3
27838: PPUSH
27839: CALL_OW 12
27843: ARRAY
27844: ST_TO_ADDR
// if Crawls ( un ) then
27845: LD_VAR 0 2
27849: PPUSH
27850: CALL_OW 318
27854: IFFALSE 27865
// ComWalk ( un ) ;
27856: LD_VAR 0 2
27860: PPUSH
27861: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27865: LD_VAR 0 2
27869: PPUSH
27870: LD_INT 9
27872: PPUSH
27873: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27877: LD_INT 28
27879: PPUSH
27880: LD_OWVAR 2
27884: PPUSH
27885: LD_INT 2
27887: PPUSH
27888: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27892: LD_INT 29
27894: PPUSH
27895: LD_OWVAR 2
27899: PPUSH
27900: LD_INT 2
27902: PPUSH
27903: CALL_OW 322
// end ;
27907: PPOPN 3
27909: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27910: LD_EXP 66
27914: PUSH
27915: LD_EXP 109
27919: AND
27920: IFFALSE 28031
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: LD_INT 22
27937: PUSH
27938: LD_OWVAR 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 25
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// if not tmp then
27966: LD_VAR 0 3
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28031
// un := tmp [ rand ( 1 , tmp ) ] ;
27975: LD_ADDR_VAR 0 2
27979: PUSH
27980: LD_VAR 0 3
27984: PUSH
27985: LD_INT 1
27987: PPUSH
27988: LD_VAR 0 3
27992: PPUSH
27993: CALL_OW 12
27997: ARRAY
27998: ST_TO_ADDR
// if Crawls ( un ) then
27999: LD_VAR 0 2
28003: PPUSH
28004: CALL_OW 318
28008: IFFALSE 28019
// ComWalk ( un ) ;
28010: LD_VAR 0 2
28014: PPUSH
28015: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28019: LD_VAR 0 2
28023: PPUSH
28024: LD_INT 8
28026: PPUSH
28027: CALL_OW 336
// end ;
28031: PPOPN 3
28033: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28034: LD_EXP 66
28038: PUSH
28039: LD_EXP 110
28043: AND
28044: IFFALSE 28188
28046: GO 28048
28048: DISABLE
28049: LD_INT 0
28051: PPUSH
28052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_INT 22
28060: PUSH
28061: LD_OWVAR 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 21
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 34
28085: PUSH
28086: LD_INT 12
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 34
28095: PUSH
28096: LD_INT 51
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 32
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 69
28128: ST_TO_ADDR
// if not tmp then
28129: LD_VAR 0 2
28133: NOT
28134: IFFALSE 28138
// exit ;
28136: GO 28188
// for i in tmp do
28138: LD_ADDR_VAR 0 1
28142: PUSH
28143: LD_VAR 0 2
28147: PUSH
28148: FOR_IN
28149: IFFALSE 28186
// if GetCargo ( i , mat_artifact ) = 0 then
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_INT 4
28158: PPUSH
28159: CALL_OW 289
28163: PUSH
28164: LD_INT 0
28166: EQUAL
28167: IFFALSE 28184
// SetCargo ( i , mat_siberit , 100 ) ;
28169: LD_VAR 0 1
28173: PPUSH
28174: LD_INT 3
28176: PPUSH
28177: LD_INT 100
28179: PPUSH
28180: CALL_OW 290
28184: GO 28148
28186: POP
28187: POP
// end ;
28188: PPOPN 2
28190: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28191: LD_EXP 66
28195: PUSH
28196: LD_EXP 111
28200: AND
28201: IFFALSE 28384
28203: GO 28205
28205: DISABLE
28206: LD_INT 0
28208: PPUSH
28209: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: ST_TO_ADDR
// if not tmp then
28232: LD_VAR 0 2
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28384
// for i := 1 to 2 do
28241: LD_ADDR_VAR 0 1
28245: PUSH
28246: DOUBLE
28247: LD_INT 1
28249: DEC
28250: ST_TO_ADDR
28251: LD_INT 2
28253: PUSH
28254: FOR_TO
28255: IFFALSE 28382
// begin uc_side := your_side ;
28257: LD_ADDR_OWVAR 20
28261: PUSH
28262: LD_OWVAR 2
28266: ST_TO_ADDR
// uc_nation := nation_american ;
28267: LD_ADDR_OWVAR 21
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// vc_chassis := us_morphling ;
28275: LD_ADDR_OWVAR 37
28279: PUSH
28280: LD_INT 5
28282: ST_TO_ADDR
// vc_engine := engine_siberite ;
28283: LD_ADDR_OWVAR 39
28287: PUSH
28288: LD_INT 3
28290: ST_TO_ADDR
// vc_control := control_computer ;
28291: LD_ADDR_OWVAR 38
28295: PUSH
28296: LD_INT 3
28298: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28299: LD_ADDR_OWVAR 40
28303: PUSH
28304: LD_INT 10
28306: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28307: LD_VAR 0 2
28311: PUSH
28312: LD_INT 1
28314: ARRAY
28315: PPUSH
28316: CALL_OW 310
28320: NOT
28321: IFFALSE 28368
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28323: CALL_OW 45
28327: PPUSH
28328: LD_VAR 0 2
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PPUSH
28337: CALL_OW 250
28341: PPUSH
28342: LD_VAR 0 2
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: CALL_OW 251
28355: PPUSH
28356: LD_INT 12
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: CALL_OW 50
28366: GO 28380
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28368: CALL_OW 45
28372: PPUSH
28373: LD_INT 1
28375: PPUSH
28376: CALL_OW 51
// end ;
28380: GO 28254
28382: POP
28383: POP
// end ;
28384: PPOPN 2
28386: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28387: LD_EXP 66
28391: PUSH
28392: LD_EXP 112
28396: AND
28397: IFFALSE 28619
28399: GO 28401
28401: DISABLE
28402: LD_INT 0
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
28408: PPUSH
28409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28410: LD_ADDR_VAR 0 6
28414: PUSH
28415: LD_INT 22
28417: PUSH
28418: LD_OWVAR 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 21
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 23
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: PPUSH
28459: CALL_OW 69
28463: ST_TO_ADDR
// if not tmp then
28464: LD_VAR 0 6
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28619
// s1 := rand ( 1 , 4 ) ;
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_INT 1
28480: PPUSH
28481: LD_INT 4
28483: PPUSH
28484: CALL_OW 12
28488: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28489: LD_ADDR_VAR 0 4
28493: PUSH
28494: LD_VAR 0 6
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: LD_VAR 0 2
28507: PPUSH
28508: CALL_OW 259
28512: ST_TO_ADDR
// if s1 = 1 then
28513: LD_VAR 0 2
28517: PUSH
28518: LD_INT 1
28520: EQUAL
28521: IFFALSE 28541
// s2 := rand ( 2 , 4 ) else
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 2
28530: PPUSH
28531: LD_INT 4
28533: PPUSH
28534: CALL_OW 12
28538: ST_TO_ADDR
28539: GO 28549
// s2 := 1 ;
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 1
28548: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28549: LD_ADDR_VAR 0 5
28553: PUSH
28554: LD_VAR 0 6
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: PPUSH
28563: LD_VAR 0 3
28567: PPUSH
28568: CALL_OW 259
28572: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28573: LD_VAR 0 6
28577: PUSH
28578: LD_INT 1
28580: ARRAY
28581: PPUSH
28582: LD_VAR 0 2
28586: PPUSH
28587: LD_VAR 0 5
28591: PPUSH
28592: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28596: LD_VAR 0 6
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: LD_VAR 0 4
28614: PPUSH
28615: CALL_OW 237
// end ;
28619: PPOPN 6
28621: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28622: LD_EXP 66
28626: PUSH
28627: LD_EXP 113
28631: AND
28632: IFFALSE 28711
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: LD_INT 22
28647: PUSH
28648: LD_OWVAR 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 30
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PPUSH
28671: CALL_OW 69
28675: ST_TO_ADDR
// if not tmp then
28676: LD_VAR 0 1
28680: NOT
28681: IFFALSE 28685
// exit ;
28683: GO 28711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28685: LD_VAR 0 1
28689: PUSH
28690: LD_INT 1
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 12
28702: ARRAY
28703: PPUSH
28704: LD_INT 1
28706: PPUSH
28707: CALL_OW 234
// end ;
28711: PPOPN 1
28713: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28714: LD_EXP 66
28718: PUSH
28719: LD_EXP 114
28723: AND
28724: IFFALSE 28836
28726: GO 28728
28728: DISABLE
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_OWVAR 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 30
28755: PUSH
28756: LD_INT 27
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 26
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 30
28775: PUSH
28776: LD_INT 28
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PPUSH
28793: CALL_OW 69
28797: ST_TO_ADDR
// if not tmp then
28798: LD_VAR 0 2
28802: NOT
28803: IFFALSE 28807
// exit ;
28805: GO 28836
// for i in tmp do
28807: LD_ADDR_VAR 0 1
28811: PUSH
28812: LD_VAR 0 2
28816: PUSH
28817: FOR_IN
28818: IFFALSE 28834
// SetLives ( i , 1 ) ;
28820: LD_VAR 0 1
28824: PPUSH
28825: LD_INT 1
28827: PPUSH
28828: CALL_OW 234
28832: GO 28817
28834: POP
28835: POP
// end ;
28836: PPOPN 2
28838: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28839: LD_EXP 66
28843: PUSH
28844: LD_EXP 115
28848: AND
28849: IFFALSE 29123
28851: GO 28853
28853: DISABLE
28854: LD_INT 0
28856: PPUSH
28857: PPUSH
28858: PPUSH
// begin i := rand ( 1 , 7 ) ;
28859: LD_ADDR_VAR 0 1
28863: PUSH
28864: LD_INT 1
28866: PPUSH
28867: LD_INT 7
28869: PPUSH
28870: CALL_OW 12
28874: ST_TO_ADDR
// case i of 1 :
28875: LD_VAR 0 1
28879: PUSH
28880: LD_INT 1
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28898
28888: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28889: LD_STRING earthquake(getX(game), 0, 32)
28891: PPUSH
28892: CALL_OW 559
28896: GO 29123
28898: LD_INT 2
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28920
28906: POP
// begin ToLua ( displayStucuk(); ) ;
28907: LD_STRING displayStucuk();
28909: PPUSH
28910: CALL_OW 559
// ResetFog ;
28914: CALL_OW 335
// end ; 3 :
28918: GO 29123
28920: LD_INT 3
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 29032
28928: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28929: LD_ADDR_VAR 0 2
28933: PUSH
28934: LD_INT 22
28936: PUSH
28937: LD_OWVAR 2
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 25
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PPUSH
28960: CALL_OW 69
28964: ST_TO_ADDR
// if not tmp then
28965: LD_VAR 0 2
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29123
// un := tmp [ rand ( 1 , tmp ) ] ;
28974: LD_ADDR_VAR 0 3
28978: PUSH
28979: LD_VAR 0 2
28983: PUSH
28984: LD_INT 1
28986: PPUSH
28987: LD_VAR 0 2
28991: PPUSH
28992: CALL_OW 12
28996: ARRAY
28997: ST_TO_ADDR
// if Crawls ( un ) then
28998: LD_VAR 0 3
29002: PPUSH
29003: CALL_OW 318
29007: IFFALSE 29018
// ComWalk ( un ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29018: LD_VAR 0 3
29022: PPUSH
29023: LD_INT 8
29025: PPUSH
29026: CALL_OW 336
// end ; 4 :
29030: GO 29123
29032: LD_INT 4
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29101
29040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 30
29060: PUSH
29061: LD_INT 29
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 2
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29123
// DestroyUnit ( tmp [ 1 ] ) ;
29086: LD_VAR 0 2
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 65
// end ; 5 .. 7 :
29099: GO 29123
29101: LD_INT 5
29103: DOUBLE
29104: GREATEREQUAL
29105: IFFALSE 29113
29107: LD_INT 7
29109: DOUBLE
29110: LESSEQUAL
29111: IFTRUE 29115
29113: GO 29122
29115: POP
// StreamSibBomb ; end ;
29116: CALL 25373 0 0
29120: GO 29123
29122: POP
// end ;
29123: PPOPN 3
29125: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29126: LD_EXP 66
29130: PUSH
29131: LD_EXP 116
29135: AND
29136: IFFALSE 29292
29138: GO 29140
29140: DISABLE
29141: LD_INT 0
29143: PPUSH
29144: PPUSH
29145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29146: LD_ADDR_VAR 0 2
29150: PUSH
29151: LD_INT 81
29153: PUSH
29154: LD_OWVAR 2
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 21
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 21
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 69
29199: ST_TO_ADDR
// if not tmp then
29200: LD_VAR 0 2
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29292
// p := 0 ;
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29217: LD_INT 35
29219: PPUSH
29220: CALL_OW 67
// p := p + 1 ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_VAR 0 3
29233: PUSH
29234: LD_INT 1
29236: PLUS
29237: ST_TO_ADDR
// for i in tmp do
29238: LD_ADDR_VAR 0 1
29242: PUSH
29243: LD_VAR 0 2
29247: PUSH
29248: FOR_IN
29249: IFFALSE 29280
// if GetLives ( i ) < 1000 then
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 256
29260: PUSH
29261: LD_INT 1000
29263: LESS
29264: IFFALSE 29278
// SetLives ( i , 1000 ) ;
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_INT 1000
29273: PPUSH
29274: CALL_OW 234
29278: GO 29248
29280: POP
29281: POP
// until p > 20 ;
29282: LD_VAR 0 3
29286: PUSH
29287: LD_INT 20
29289: GREATER
29290: IFFALSE 29217
// end ;
29292: PPOPN 3
29294: END
// every 0 0$1 trigger StreamModeActive and sTime do
29295: LD_EXP 66
29299: PUSH
29300: LD_EXP 117
29304: AND
29305: IFFALSE 29340
29307: GO 29309
29309: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29310: LD_INT 28
29312: PPUSH
29313: LD_OWVAR 2
29317: PPUSH
29318: LD_INT 2
29320: PPUSH
29321: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29325: LD_INT 30
29327: PPUSH
29328: LD_OWVAR 2
29332: PPUSH
29333: LD_INT 2
29335: PPUSH
29336: CALL_OW 322
// end ;
29340: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29341: LD_EXP 66
29345: PUSH
29346: LD_EXP 118
29350: AND
29351: IFFALSE 29472
29353: GO 29355
29355: DISABLE
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_INT 22
29367: PUSH
29368: LD_OWVAR 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: LD_INT 23
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 2
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29472
// for i in tmp do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29470
// begin if Crawls ( i ) then
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 318
29445: IFFALSE 29456
// ComWalk ( i ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 138
// SetClass ( i , 2 ) ;
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_INT 2
29463: PPUSH
29464: CALL_OW 336
// end ;
29468: GO 29433
29470: POP
29471: POP
// end ;
29472: PPOPN 2
29474: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29475: LD_EXP 66
29479: PUSH
29480: LD_EXP 119
29484: AND
29485: IFFALSE 29766
29487: GO 29489
29489: DISABLE
29490: LD_INT 0
29492: PPUSH
29493: PPUSH
29494: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29495: LD_OWVAR 2
29499: PPUSH
29500: LD_INT 9
29502: PPUSH
29503: LD_INT 1
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29513: LD_INT 9
29515: PPUSH
29516: LD_OWVAR 2
29520: PPUSH
29521: CALL_OW 343
// uc_side := 9 ;
29525: LD_ADDR_OWVAR 20
29529: PUSH
29530: LD_INT 9
29532: ST_TO_ADDR
// uc_nation := 2 ;
29533: LD_ADDR_OWVAR 21
29537: PUSH
29538: LD_INT 2
29540: ST_TO_ADDR
// hc_name := Dark Warrior ;
29541: LD_ADDR_OWVAR 26
29545: PUSH
29546: LD_STRING Dark Warrior
29548: ST_TO_ADDR
// hc_gallery :=  ;
29549: LD_ADDR_OWVAR 33
29553: PUSH
29554: LD_STRING 
29556: ST_TO_ADDR
// hc_noskilllimit := true ;
29557: LD_ADDR_OWVAR 76
29561: PUSH
29562: LD_INT 1
29564: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29565: LD_ADDR_OWVAR 31
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 30
29575: PUSH
29576: LD_INT 30
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// un := CreateHuman ;
29588: LD_ADDR_VAR 0 3
29592: PUSH
29593: CALL_OW 44
29597: ST_TO_ADDR
// hc_noskilllimit := false ;
29598: LD_ADDR_OWVAR 76
29602: PUSH
29603: LD_INT 0
29605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29606: LD_VAR 0 3
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: CALL_OW 51
// p := 0 ;
29618: LD_ADDR_VAR 0 2
29622: PUSH
29623: LD_INT 0
29625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29626: LD_INT 35
29628: PPUSH
29629: CALL_OW 67
// p := p + 1 ;
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 1
29645: PLUS
29646: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 256
29656: PUSH
29657: LD_INT 1000
29659: LESS
29660: IFFALSE 29674
// SetLives ( un , 1000 ) ;
29662: LD_VAR 0 3
29666: PPUSH
29667: LD_INT 1000
29669: PPUSH
29670: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29674: LD_VAR 0 3
29678: PPUSH
29679: LD_INT 81
29681: PUSH
29682: LD_OWVAR 2
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 91
29693: PUSH
29694: LD_VAR 0 3
29698: PUSH
29699: LD_INT 30
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PPUSH
29711: CALL_OW 69
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 74
29725: PPUSH
29726: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29730: LD_VAR 0 2
29734: PUSH
29735: LD_INT 60
29737: GREATER
29738: PUSH
29739: LD_VAR 0 3
29743: PPUSH
29744: CALL_OW 301
29748: OR
29749: IFFALSE 29626
// if un then
29751: LD_VAR 0 3
29755: IFFALSE 29766
// RemoveUnit ( un ) ;
29757: LD_VAR 0 3
29761: PPUSH
29762: CALL_OW 64
// end ;
29766: PPOPN 3
29768: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29769: LD_INT 0
29771: PPUSH
// case cmd of 301 :
29772: LD_VAR 0 1
29776: PUSH
29777: LD_INT 301
29779: DOUBLE
29780: EQUAL
29781: IFTRUE 29785
29783: GO 29817
29785: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29786: LD_VAR 0 6
29790: PPUSH
29791: LD_VAR 0 7
29795: PPUSH
29796: LD_VAR 0 8
29800: PPUSH
29801: LD_VAR 0 4
29805: PPUSH
29806: LD_VAR 0 5
29810: PPUSH
29811: CALL 31018 0 5
29815: GO 29938
29817: LD_INT 302
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29862
29825: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29826: LD_VAR 0 6
29830: PPUSH
29831: LD_VAR 0 7
29835: PPUSH
29836: LD_VAR 0 8
29840: PPUSH
29841: LD_VAR 0 9
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: LD_VAR 0 5
29855: PPUSH
29856: CALL 31109 0 6
29860: GO 29938
29862: LD_INT 303
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 29907
29870: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29871: LD_VAR 0 6
29875: PPUSH
29876: LD_VAR 0 7
29880: PPUSH
29881: LD_VAR 0 8
29885: PPUSH
29886: LD_VAR 0 9
29890: PPUSH
29891: LD_VAR 0 4
29895: PPUSH
29896: LD_VAR 0 5
29900: PPUSH
29901: CALL 29943 0 6
29905: GO 29938
29907: LD_INT 304
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29937
29915: POP
// hHackTeleport ( unit , x , y ) ; end ;
29916: LD_VAR 0 2
29920: PPUSH
29921: LD_VAR 0 4
29925: PPUSH
29926: LD_VAR 0 5
29930: PPUSH
29931: CALL 31702 0 3
29935: GO 29938
29937: POP
// end ;
29938: LD_VAR 0 12
29942: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29947: LD_VAR 0 1
29951: PUSH
29952: LD_INT 1
29954: LESS
29955: PUSH
29956: LD_VAR 0 1
29960: PUSH
29961: LD_INT 3
29963: GREATER
29964: OR
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_VAR 0 6
29975: PPUSH
29976: CALL_OW 428
29980: OR
29981: IFFALSE 29985
// exit ;
29983: GO 30705
// uc_side := your_side ;
29985: LD_ADDR_OWVAR 20
29989: PUSH
29990: LD_OWVAR 2
29994: ST_TO_ADDR
// uc_nation := nation ;
29995: LD_ADDR_OWVAR 21
29999: PUSH
30000: LD_VAR 0 1
30004: ST_TO_ADDR
// bc_level = 1 ;
30005: LD_ADDR_OWVAR 43
30009: PUSH
30010: LD_INT 1
30012: ST_TO_ADDR
// case btype of 1 :
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 1
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30037
30026: POP
// bc_type := b_depot ; 2 :
30027: LD_ADDR_OWVAR 42
30031: PUSH
30032: LD_INT 0
30034: ST_TO_ADDR
30035: GO 30649
30037: LD_INT 2
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30056
30045: POP
// bc_type := b_warehouse ; 3 :
30046: LD_ADDR_OWVAR 42
30050: PUSH
30051: LD_INT 1
30053: ST_TO_ADDR
30054: GO 30649
30056: LD_INT 3
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30075
30064: POP
// bc_type := b_lab ; 4 .. 9 :
30065: LD_ADDR_OWVAR 42
30069: PUSH
30070: LD_INT 6
30072: ST_TO_ADDR
30073: GO 30649
30075: LD_INT 4
30077: DOUBLE
30078: GREATEREQUAL
30079: IFFALSE 30087
30081: LD_INT 9
30083: DOUBLE
30084: LESSEQUAL
30085: IFTRUE 30089
30087: GO 30141
30089: POP
// begin bc_type := b_lab_half ;
30090: LD_ADDR_OWVAR 42
30094: PUSH
30095: LD_INT 7
30097: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30098: LD_ADDR_OWVAR 44
30102: PUSH
30103: LD_INT 10
30105: PUSH
30106: LD_INT 11
30108: PUSH
30109: LD_INT 12
30111: PUSH
30112: LD_INT 15
30114: PUSH
30115: LD_INT 14
30117: PUSH
30118: LD_INT 13
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: PUSH
30129: LD_VAR 0 2
30133: PUSH
30134: LD_INT 3
30136: MINUS
30137: ARRAY
30138: ST_TO_ADDR
// end ; 10 .. 13 :
30139: GO 30649
30141: LD_INT 10
30143: DOUBLE
30144: GREATEREQUAL
30145: IFFALSE 30153
30147: LD_INT 13
30149: DOUBLE
30150: LESSEQUAL
30151: IFTRUE 30155
30153: GO 30232
30155: POP
// begin bc_type := b_lab_full ;
30156: LD_ADDR_OWVAR 42
30160: PUSH
30161: LD_INT 8
30163: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30164: LD_ADDR_OWVAR 44
30168: PUSH
30169: LD_INT 10
30171: PUSH
30172: LD_INT 12
30174: PUSH
30175: LD_INT 14
30177: PUSH
30178: LD_INT 13
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_INT 9
30194: MINUS
30195: ARRAY
30196: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30197: LD_ADDR_OWVAR 45
30201: PUSH
30202: LD_INT 11
30204: PUSH
30205: LD_INT 15
30207: PUSH
30208: LD_INT 12
30210: PUSH
30211: LD_INT 15
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PUSH
30220: LD_VAR 0 2
30224: PUSH
30225: LD_INT 9
30227: MINUS
30228: ARRAY
30229: ST_TO_ADDR
// end ; 14 :
30230: GO 30649
30232: LD_INT 14
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// bc_type := b_workshop ; 15 :
30241: LD_ADDR_OWVAR 42
30245: PUSH
30246: LD_INT 2
30248: ST_TO_ADDR
30249: GO 30649
30251: LD_INT 15
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30270
30259: POP
// bc_type := b_factory ; 16 :
30260: LD_ADDR_OWVAR 42
30264: PUSH
30265: LD_INT 3
30267: ST_TO_ADDR
30268: GO 30649
30270: LD_INT 16
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30289
30278: POP
// bc_type := b_ext_gun ; 17 :
30279: LD_ADDR_OWVAR 42
30283: PUSH
30284: LD_INT 17
30286: ST_TO_ADDR
30287: GO 30649
30289: LD_INT 17
30291: DOUBLE
30292: EQUAL
30293: IFTRUE 30297
30295: GO 30325
30297: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30298: LD_ADDR_OWVAR 42
30302: PUSH
30303: LD_INT 19
30305: PUSH
30306: LD_INT 23
30308: PUSH
30309: LD_INT 19
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PUSH
30317: LD_VAR 0 1
30321: ARRAY
30322: ST_TO_ADDR
30323: GO 30649
30325: LD_INT 18
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30344
30333: POP
// bc_type := b_ext_radar ; 19 :
30334: LD_ADDR_OWVAR 42
30338: PUSH
30339: LD_INT 20
30341: ST_TO_ADDR
30342: GO 30649
30344: LD_INT 19
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30363
30352: POP
// bc_type := b_ext_radio ; 20 :
30353: LD_ADDR_OWVAR 42
30357: PUSH
30358: LD_INT 22
30360: ST_TO_ADDR
30361: GO 30649
30363: LD_INT 20
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30382
30371: POP
// bc_type := b_ext_siberium ; 21 :
30372: LD_ADDR_OWVAR 42
30376: PUSH
30377: LD_INT 21
30379: ST_TO_ADDR
30380: GO 30649
30382: LD_INT 21
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30401
30390: POP
// bc_type := b_ext_computer ; 22 :
30391: LD_ADDR_OWVAR 42
30395: PUSH
30396: LD_INT 24
30398: ST_TO_ADDR
30399: GO 30649
30401: LD_INT 22
30403: DOUBLE
30404: EQUAL
30405: IFTRUE 30409
30407: GO 30420
30409: POP
// bc_type := b_ext_track ; 23 :
30410: LD_ADDR_OWVAR 42
30414: PUSH
30415: LD_INT 16
30417: ST_TO_ADDR
30418: GO 30649
30420: LD_INT 23
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_ext_laser ; 24 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 25
30436: ST_TO_ADDR
30437: GO 30649
30439: LD_INT 24
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_control_tower ; 25 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 36
30455: ST_TO_ADDR
30456: GO 30649
30458: LD_INT 25
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_breastwork ; 26 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 31
30474: ST_TO_ADDR
30475: GO 30649
30477: LD_INT 26
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30496
30485: POP
// bc_type := b_bunker ; 27 :
30486: LD_ADDR_OWVAR 42
30490: PUSH
30491: LD_INT 32
30493: ST_TO_ADDR
30494: GO 30649
30496: LD_INT 27
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30515
30504: POP
// bc_type := b_turret ; 28 :
30505: LD_ADDR_OWVAR 42
30509: PUSH
30510: LD_INT 33
30512: ST_TO_ADDR
30513: GO 30649
30515: LD_INT 28
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30534
30523: POP
// bc_type := b_armoury ; 29 :
30524: LD_ADDR_OWVAR 42
30528: PUSH
30529: LD_INT 4
30531: ST_TO_ADDR
30532: GO 30649
30534: LD_INT 29
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30553
30542: POP
// bc_type := b_barracks ; 30 :
30543: LD_ADDR_OWVAR 42
30547: PUSH
30548: LD_INT 5
30550: ST_TO_ADDR
30551: GO 30649
30553: LD_INT 30
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30572
30561: POP
// bc_type := b_solar_power ; 31 :
30562: LD_ADDR_OWVAR 42
30566: PUSH
30567: LD_INT 27
30569: ST_TO_ADDR
30570: GO 30649
30572: LD_INT 31
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30580
30578: GO 30591
30580: POP
// bc_type := b_oil_power ; 32 :
30581: LD_ADDR_OWVAR 42
30585: PUSH
30586: LD_INT 26
30588: ST_TO_ADDR
30589: GO 30649
30591: LD_INT 32
30593: DOUBLE
30594: EQUAL
30595: IFTRUE 30599
30597: GO 30610
30599: POP
// bc_type := b_siberite_power ; 33 :
30600: LD_ADDR_OWVAR 42
30604: PUSH
30605: LD_INT 28
30607: ST_TO_ADDR
30608: GO 30649
30610: LD_INT 33
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30629
30618: POP
// bc_type := b_oil_mine ; 34 :
30619: LD_ADDR_OWVAR 42
30623: PUSH
30624: LD_INT 29
30626: ST_TO_ADDR
30627: GO 30649
30629: LD_INT 34
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30648
30637: POP
// bc_type := b_siberite_mine ; end ;
30638: LD_ADDR_OWVAR 42
30642: PUSH
30643: LD_INT 30
30645: ST_TO_ADDR
30646: GO 30649
30648: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30649: LD_ADDR_VAR 0 8
30653: PUSH
30654: LD_VAR 0 5
30658: PPUSH
30659: LD_VAR 0 6
30663: PPUSH
30664: LD_VAR 0 3
30668: PPUSH
30669: CALL_OW 47
30673: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30674: LD_OWVAR 42
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: LD_INT 33
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: IN
30689: IFFALSE 30705
// PlaceWeaponTurret ( b , weapon ) ;
30691: LD_VAR 0 8
30695: PPUSH
30696: LD_VAR 0 4
30700: PPUSH
30701: CALL_OW 431
// end ;
30705: LD_VAR 0 7
30709: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_INT 22
30723: PUSH
30724: LD_OWVAR 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 30
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 30
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PPUSH
30765: CALL_OW 69
30769: ST_TO_ADDR
// if not tmp then
30770: LD_VAR 0 4
30774: NOT
30775: IFFALSE 30779
// exit ;
30777: GO 30838
// for i in tmp do
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_VAR 0 4
30788: PUSH
30789: FOR_IN
30790: IFFALSE 30836
// for j = 1 to 3 do
30792: LD_ADDR_VAR 0 3
30796: PUSH
30797: DOUBLE
30798: LD_INT 1
30800: DEC
30801: ST_TO_ADDR
30802: LD_INT 3
30804: PUSH
30805: FOR_TO
30806: IFFALSE 30832
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30808: LD_VAR 0 2
30812: PPUSH
30813: CALL_OW 274
30817: PPUSH
30818: LD_VAR 0 3
30822: PPUSH
30823: LD_INT 99999
30825: PPUSH
30826: CALL_OW 277
30830: GO 30805
30832: POP
30833: POP
30834: GO 30789
30836: POP
30837: POP
// end ;
30838: LD_VAR 0 1
30842: RET
// export function hHackSetLevel10 ; var i , j ; begin
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30848: LD_ADDR_VAR 0 2
30852: PUSH
30853: LD_INT 21
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PPUSH
30863: CALL_OW 69
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30921
// if IsSelected ( i ) then
30871: LD_VAR 0 2
30875: PPUSH
30876: CALL_OW 306
30880: IFFALSE 30919
// begin for j := 1 to 4 do
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: DOUBLE
30888: LD_INT 1
30890: DEC
30891: ST_TO_ADDR
30892: LD_INT 4
30894: PUSH
30895: FOR_TO
30896: IFFALSE 30917
// SetSkill ( i , j , 10 ) ;
30898: LD_VAR 0 2
30902: PPUSH
30903: LD_VAR 0 3
30907: PPUSH
30908: LD_INT 10
30910: PPUSH
30911: CALL_OW 237
30915: GO 30895
30917: POP
30918: POP
// end ;
30919: GO 30868
30921: POP
30922: POP
// end ;
30923: LD_VAR 0 1
30927: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
30932: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_INT 22
30940: PUSH
30941: LD_OWVAR 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 21
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PPUSH
30964: CALL_OW 69
30968: PUSH
30969: FOR_IN
30970: IFFALSE 31011
// begin for j := 1 to 4 do
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: DOUBLE
30978: LD_INT 1
30980: DEC
30981: ST_TO_ADDR
30982: LD_INT 4
30984: PUSH
30985: FOR_TO
30986: IFFALSE 31007
// SetSkill ( i , j , 10 ) ;
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: LD_INT 10
31000: PPUSH
31001: CALL_OW 237
31005: GO 30985
31007: POP
31008: POP
// end ;
31009: GO 30969
31011: POP
31012: POP
// end ;
31013: LD_VAR 0 1
31017: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31018: LD_INT 0
31020: PPUSH
// uc_side := your_side ;
31021: LD_ADDR_OWVAR 20
31025: PUSH
31026: LD_OWVAR 2
31030: ST_TO_ADDR
// uc_nation := nation ;
31031: LD_ADDR_OWVAR 21
31035: PUSH
31036: LD_VAR 0 1
31040: ST_TO_ADDR
// InitHc ;
31041: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31045: LD_INT 0
31047: PPUSH
31048: LD_VAR 0 2
31052: PPUSH
31053: LD_VAR 0 3
31057: PPUSH
31058: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31062: LD_VAR 0 4
31066: PPUSH
31067: LD_VAR 0 5
31071: PPUSH
31072: CALL_OW 428
31076: PUSH
31077: LD_INT 0
31079: EQUAL
31080: IFFALSE 31104
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31082: CALL_OW 44
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: LD_VAR 0 5
31096: PPUSH
31097: LD_INT 1
31099: PPUSH
31100: CALL_OW 48
// end ;
31104: LD_VAR 0 6
31108: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
// uc_side := your_side ;
31113: LD_ADDR_OWVAR 20
31117: PUSH
31118: LD_OWVAR 2
31122: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31123: LD_VAR 0 1
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: LD_INT 5
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: IN
31150: IFFALSE 31162
// uc_nation := nation_american else
31152: LD_ADDR_OWVAR 21
31156: PUSH
31157: LD_INT 1
31159: ST_TO_ADDR
31160: GO 31205
// if chassis in [ 11 , 12 , 13 , 14 ] then
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 11
31169: PUSH
31170: LD_INT 12
31172: PUSH
31173: LD_INT 13
31175: PUSH
31176: LD_INT 14
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: IN
31185: IFFALSE 31197
// uc_nation := nation_arabian else
31187: LD_ADDR_OWVAR 21
31191: PUSH
31192: LD_INT 2
31194: ST_TO_ADDR
31195: GO 31205
// uc_nation := nation_russian ;
31197: LD_ADDR_OWVAR 21
31201: PUSH
31202: LD_INT 3
31204: ST_TO_ADDR
// vc_chassis := chassis ;
31205: LD_ADDR_OWVAR 37
31209: PUSH
31210: LD_VAR 0 1
31214: ST_TO_ADDR
// vc_engine := engine ;
31215: LD_ADDR_OWVAR 39
31219: PUSH
31220: LD_VAR 0 2
31224: ST_TO_ADDR
// vc_control := control ;
31225: LD_ADDR_OWVAR 38
31229: PUSH
31230: LD_VAR 0 3
31234: ST_TO_ADDR
// vc_weapon := weapon ;
31235: LD_ADDR_OWVAR 40
31239: PUSH
31240: LD_VAR 0 4
31244: ST_TO_ADDR
// un := CreateVehicle ;
31245: LD_ADDR_VAR 0 8
31249: PUSH
31250: CALL_OW 45
31254: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31255: LD_VAR 0 8
31259: PPUSH
31260: LD_INT 0
31262: PPUSH
31263: LD_INT 5
31265: PPUSH
31266: CALL_OW 12
31270: PPUSH
31271: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 5
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_INT 1
31292: PPUSH
31293: CALL_OW 48
// end ;
31297: LD_VAR 0 7
31301: RET
// export hInvincible ; every 1 do
31302: GO 31304
31304: DISABLE
// hInvincible := [ ] ;
31305: LD_ADDR_EXP 120
31309: PUSH
31310: EMPTY
31311: ST_TO_ADDR
31312: END
// every 10 do var i ;
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
// begin enable ;
31319: ENABLE
// if not hInvincible then
31320: LD_EXP 120
31324: NOT
31325: IFFALSE 31329
// exit ;
31327: GO 31373
// for i in hInvincible do
31329: LD_ADDR_VAR 0 1
31333: PUSH
31334: LD_EXP 120
31338: PUSH
31339: FOR_IN
31340: IFFALSE 31371
// if GetLives ( i ) < 1000 then
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 256
31351: PUSH
31352: LD_INT 1000
31354: LESS
31355: IFFALSE 31369
// SetLives ( i , 1000 ) ;
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_INT 1000
31364: PPUSH
31365: CALL_OW 234
31369: GO 31339
31371: POP
31372: POP
// end ;
31373: PPOPN 1
31375: END
// export function hHackInvincible ; var i ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31380: LD_ADDR_VAR 0 2
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 21
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 21
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: PPUSH
31413: CALL_OW 69
31417: PUSH
31418: FOR_IN
31419: IFFALSE 31480
// if IsSelected ( i ) then
31421: LD_VAR 0 2
31425: PPUSH
31426: CALL_OW 306
31430: IFFALSE 31478
// begin if i in hInvincible then
31432: LD_VAR 0 2
31436: PUSH
31437: LD_EXP 120
31441: IN
31442: IFFALSE 31462
// hInvincible := hInvincible diff i else
31444: LD_ADDR_EXP 120
31448: PUSH
31449: LD_EXP 120
31453: PUSH
31454: LD_VAR 0 2
31458: DIFF
31459: ST_TO_ADDR
31460: GO 31478
// hInvincible := hInvincible union i ;
31462: LD_ADDR_EXP 120
31466: PUSH
31467: LD_EXP 120
31471: PUSH
31472: LD_VAR 0 2
31476: UNION
31477: ST_TO_ADDR
// end ;
31478: GO 31418
31480: POP
31481: POP
// end ;
31482: LD_VAR 0 1
31486: RET
// export function hHackInvisible ; var i , j ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
31491: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 21
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: PUSH
31512: FOR_IN
31513: IFFALSE 31537
// if IsSelected ( i ) then
31515: LD_VAR 0 2
31519: PPUSH
31520: CALL_OW 306
31524: IFFALSE 31535
// ComForceInvisible ( i ) ;
31526: LD_VAR 0 2
31530: PPUSH
31531: CALL_OW 496
31535: GO 31512
31537: POP
31538: POP
// end ;
31539: LD_VAR 0 1
31543: RET
// export function hHackChangeYourSide ; begin
31544: LD_INT 0
31546: PPUSH
// if your_side = 8 then
31547: LD_OWVAR 2
31551: PUSH
31552: LD_INT 8
31554: EQUAL
31555: IFFALSE 31567
// your_side := 0 else
31557: LD_ADDR_OWVAR 2
31561: PUSH
31562: LD_INT 0
31564: ST_TO_ADDR
31565: GO 31581
// your_side := your_side + 1 ;
31567: LD_ADDR_OWVAR 2
31571: PUSH
31572: LD_OWVAR 2
31576: PUSH
31577: LD_INT 1
31579: PLUS
31580: ST_TO_ADDR
// end ;
31581: LD_VAR 0 1
31585: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
31590: PPUSH
// for i in all_units do
31591: LD_ADDR_VAR 0 2
31595: PUSH
31596: LD_OWVAR 3
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31680
// if IsSelected ( i ) then
31604: LD_VAR 0 2
31608: PPUSH
31609: CALL_OW 306
31613: IFFALSE 31678
// begin j := GetSide ( i ) ;
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_VAR 0 2
31624: PPUSH
31625: CALL_OW 255
31629: ST_TO_ADDR
// if j = 8 then
31630: LD_VAR 0 3
31634: PUSH
31635: LD_INT 8
31637: EQUAL
31638: IFFALSE 31650
// j := 0 else
31640: LD_ADDR_VAR 0 3
31644: PUSH
31645: LD_INT 0
31647: ST_TO_ADDR
31648: GO 31664
// j := j + 1 ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_VAR 0 3
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: ST_TO_ADDR
// SetSide ( i , j ) ;
31664: LD_VAR 0 2
31668: PPUSH
31669: LD_VAR 0 3
31673: PPUSH
31674: CALL_OW 235
// end ;
31678: GO 31601
31680: POP
31681: POP
// end ;
31682: LD_VAR 0 1
31686: RET
// export function hHackFog ; begin
31687: LD_INT 0
31689: PPUSH
// FogOff ( true ) ;
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 344
// end ;
31697: LD_VAR 0 1
31701: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31702: LD_INT 0
31704: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31705: LD_VAR 0 1
31709: PPUSH
31710: LD_VAR 0 2
31714: PPUSH
31715: LD_VAR 0 3
31719: PPUSH
31720: LD_INT 1
31722: PPUSH
31723: LD_INT 1
31725: PPUSH
31726: CALL_OW 483
// CenterOnXY ( x , y ) ;
31730: LD_VAR 0 2
31734: PPUSH
31735: LD_VAR 0 3
31739: PPUSH
31740: CALL_OW 84
// end ;
31744: LD_VAR 0 4
31748: RET
