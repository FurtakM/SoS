// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// every 0 0$1 do
18606: GO 18608
18608: DISABLE
// begin enable ;
18609: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18610: LD_STRING updateTimer(
18612: PUSH
18613: LD_OWVAR 1
18617: STR
18618: PUSH
18619: LD_STRING );
18621: STR
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18628: LD_INT 0
18630: PPUSH
// if p2 = 100 then
18631: LD_VAR 0 2
18635: PUSH
18636: LD_INT 100
18638: EQUAL
18639: IFFALSE 19642
// begin if not StreamModeActive then
18641: LD_EXP 66
18645: NOT
18646: IFFALSE 18656
// StreamModeActive := true ;
18648: LD_ADDR_EXP 66
18652: PUSH
18653: LD_INT 1
18655: ST_TO_ADDR
// if p3 = 0 then
18656: LD_VAR 0 3
18660: PUSH
18661: LD_INT 0
18663: EQUAL
18664: IFFALSE 18670
// InitStreamMode ;
18666: CALL 19802 0 0
// if p3 = 1 then
18670: LD_VAR 0 3
18674: PUSH
18675: LD_INT 1
18677: EQUAL
18678: IFFALSE 18688
// sRocket := true ;
18680: LD_ADDR_EXP 71
18684: PUSH
18685: LD_INT 1
18687: ST_TO_ADDR
// if p3 = 2 then
18688: LD_VAR 0 3
18692: PUSH
18693: LD_INT 2
18695: EQUAL
18696: IFFALSE 18706
// sSpeed := true ;
18698: LD_ADDR_EXP 70
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if p3 = 3 then
18706: LD_VAR 0 3
18710: PUSH
18711: LD_INT 3
18713: EQUAL
18714: IFFALSE 18724
// sEngine := true ;
18716: LD_ADDR_EXP 72
18720: PUSH
18721: LD_INT 1
18723: ST_TO_ADDR
// if p3 = 4 then
18724: LD_VAR 0 3
18728: PUSH
18729: LD_INT 4
18731: EQUAL
18732: IFFALSE 18742
// sSpec := true ;
18734: LD_ADDR_EXP 69
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// if p3 = 5 then
18742: LD_VAR 0 3
18746: PUSH
18747: LD_INT 5
18749: EQUAL
18750: IFFALSE 18760
// sLevel := true ;
18752: LD_ADDR_EXP 73
18756: PUSH
18757: LD_INT 1
18759: ST_TO_ADDR
// if p3 = 6 then
18760: LD_VAR 0 3
18764: PUSH
18765: LD_INT 6
18767: EQUAL
18768: IFFALSE 18778
// sArmoury := true ;
18770: LD_ADDR_EXP 74
18774: PUSH
18775: LD_INT 1
18777: ST_TO_ADDR
// if p3 = 7 then
18778: LD_VAR 0 3
18782: PUSH
18783: LD_INT 7
18785: EQUAL
18786: IFFALSE 18796
// sRadar := true ;
18788: LD_ADDR_EXP 75
18792: PUSH
18793: LD_INT 1
18795: ST_TO_ADDR
// if p3 = 8 then
18796: LD_VAR 0 3
18800: PUSH
18801: LD_INT 8
18803: EQUAL
18804: IFFALSE 18814
// sBunker := true ;
18806: LD_ADDR_EXP 76
18810: PUSH
18811: LD_INT 1
18813: ST_TO_ADDR
// if p3 = 9 then
18814: LD_VAR 0 3
18818: PUSH
18819: LD_INT 9
18821: EQUAL
18822: IFFALSE 18832
// sHack := true ;
18824: LD_ADDR_EXP 77
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// if p3 = 10 then
18832: LD_VAR 0 3
18836: PUSH
18837: LD_INT 10
18839: EQUAL
18840: IFFALSE 18850
// sFire := true ;
18842: LD_ADDR_EXP 78
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// if p3 = 11 then
18850: LD_VAR 0 3
18854: PUSH
18855: LD_INT 11
18857: EQUAL
18858: IFFALSE 18868
// sRefresh := true ;
18860: LD_ADDR_EXP 79
18864: PUSH
18865: LD_INT 1
18867: ST_TO_ADDR
// if p3 = 12 then
18868: LD_VAR 0 3
18872: PUSH
18873: LD_INT 12
18875: EQUAL
18876: IFFALSE 18886
// sExp := true ;
18878: LD_ADDR_EXP 80
18882: PUSH
18883: LD_INT 1
18885: ST_TO_ADDR
// if p3 = 13 then
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 13
18893: EQUAL
18894: IFFALSE 18904
// sDepot := true ;
18896: LD_ADDR_EXP 81
18900: PUSH
18901: LD_INT 1
18903: ST_TO_ADDR
// if p3 = 14 then
18904: LD_VAR 0 3
18908: PUSH
18909: LD_INT 14
18911: EQUAL
18912: IFFALSE 18922
// sFlag := true ;
18914: LD_ADDR_EXP 82
18918: PUSH
18919: LD_INT 1
18921: ST_TO_ADDR
// if p3 = 15 then
18922: LD_VAR 0 3
18926: PUSH
18927: LD_INT 15
18929: EQUAL
18930: IFFALSE 18940
// sKamikadze := true ;
18932: LD_ADDR_EXP 90
18936: PUSH
18937: LD_INT 1
18939: ST_TO_ADDR
// if p3 = 16 then
18940: LD_VAR 0 3
18944: PUSH
18945: LD_INT 16
18947: EQUAL
18948: IFFALSE 18958
// sTroll := true ;
18950: LD_ADDR_EXP 91
18954: PUSH
18955: LD_INT 1
18957: ST_TO_ADDR
// if p3 = 17 then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_INT 17
18965: EQUAL
18966: IFFALSE 18976
// sSlow := true ;
18968: LD_ADDR_EXP 92
18972: PUSH
18973: LD_INT 1
18975: ST_TO_ADDR
// if p3 = 18 then
18976: LD_VAR 0 3
18980: PUSH
18981: LD_INT 18
18983: EQUAL
18984: IFFALSE 18994
// sLack := true ;
18986: LD_ADDR_EXP 93
18990: PUSH
18991: LD_INT 1
18993: ST_TO_ADDR
// if p3 = 19 then
18994: LD_VAR 0 3
18998: PUSH
18999: LD_INT 19
19001: EQUAL
19002: IFFALSE 19012
// sTank := true ;
19004: LD_ADDR_EXP 95
19008: PUSH
19009: LD_INT 1
19011: ST_TO_ADDR
// if p3 = 20 then
19012: LD_VAR 0 3
19016: PUSH
19017: LD_INT 20
19019: EQUAL
19020: IFFALSE 19030
// sRemote := true ;
19022: LD_ADDR_EXP 96
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if p3 = 21 then
19030: LD_VAR 0 3
19034: PUSH
19035: LD_INT 21
19037: EQUAL
19038: IFFALSE 19048
// sPowell := true ;
19040: LD_ADDR_EXP 97
19044: PUSH
19045: LD_INT 1
19047: ST_TO_ADDR
// if p3 = 22 then
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 22
19055: EQUAL
19056: IFFALSE 19066
// sTeleport := true ;
19058: LD_ADDR_EXP 100
19062: PUSH
19063: LD_INT 1
19065: ST_TO_ADDR
// if p3 = 23 then
19066: LD_VAR 0 3
19070: PUSH
19071: LD_INT 23
19073: EQUAL
19074: IFFALSE 19084
// sOilTower := true ;
19076: LD_ADDR_EXP 102
19080: PUSH
19081: LD_INT 1
19083: ST_TO_ADDR
// if p3 = 24 then
19084: LD_VAR 0 3
19088: PUSH
19089: LD_INT 24
19091: EQUAL
19092: IFFALSE 19102
// sShovel := true ;
19094: LD_ADDR_EXP 103
19098: PUSH
19099: LD_INT 1
19101: ST_TO_ADDR
// if p3 = 25 then
19102: LD_VAR 0 3
19106: PUSH
19107: LD_INT 25
19109: EQUAL
19110: IFFALSE 19120
// sSheik := true ;
19112: LD_ADDR_EXP 104
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// if p3 = 26 then
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 26
19127: EQUAL
19128: IFFALSE 19138
// sEarthquake := true ;
19130: LD_ADDR_EXP 106
19134: PUSH
19135: LD_INT 1
19137: ST_TO_ADDR
// if p3 = 27 then
19138: LD_VAR 0 3
19142: PUSH
19143: LD_INT 27
19145: EQUAL
19146: IFFALSE 19156
// sAI := true ;
19148: LD_ADDR_EXP 107
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// if p3 = 28 then
19156: LD_VAR 0 3
19160: PUSH
19161: LD_INT 28
19163: EQUAL
19164: IFFALSE 19174
// sCargo := true ;
19166: LD_ADDR_EXP 110
19170: PUSH
19171: LD_INT 1
19173: ST_TO_ADDR
// if p3 = 29 then
19174: LD_VAR 0 3
19178: PUSH
19179: LD_INT 29
19181: EQUAL
19182: IFFALSE 19192
// sDLaser := true ;
19184: LD_ADDR_EXP 111
19188: PUSH
19189: LD_INT 1
19191: ST_TO_ADDR
// if p3 = 30 then
19192: LD_VAR 0 3
19196: PUSH
19197: LD_INT 30
19199: EQUAL
19200: IFFALSE 19210
// sExchange := true ;
19202: LD_ADDR_EXP 112
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// if p3 = 31 then
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 31
19217: EQUAL
19218: IFFALSE 19228
// sFac := true ;
19220: LD_ADDR_EXP 113
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// if p3 = 32 then
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 32
19235: EQUAL
19236: IFFALSE 19246
// sPower := true ;
19238: LD_ADDR_EXP 114
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// if p3 = 33 then
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 33
19253: EQUAL
19254: IFFALSE 19264
// sRandom := true ;
19256: LD_ADDR_EXP 115
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// if p3 = 34 then
19264: LD_VAR 0 3
19268: PUSH
19269: LD_INT 34
19271: EQUAL
19272: IFFALSE 19282
// sShield := true ;
19274: LD_ADDR_EXP 116
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// if p3 = 35 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 35
19289: EQUAL
19290: IFFALSE 19300
// sTime := true ;
19292: LD_ADDR_EXP 117
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// if p3 = 36 then
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 36
19307: EQUAL
19308: IFFALSE 19318
// sTools := true ;
19310: LD_ADDR_EXP 118
19314: PUSH
19315: LD_INT 1
19317: ST_TO_ADDR
// if p3 = 101 then
19318: LD_VAR 0 3
19322: PUSH
19323: LD_INT 101
19325: EQUAL
19326: IFFALSE 19336
// sSold := true ;
19328: LD_ADDR_EXP 83
19332: PUSH
19333: LD_INT 1
19335: ST_TO_ADDR
// if p3 = 102 then
19336: LD_VAR 0 3
19340: PUSH
19341: LD_INT 102
19343: EQUAL
19344: IFFALSE 19354
// sDiff := true ;
19346: LD_ADDR_EXP 84
19350: PUSH
19351: LD_INT 1
19353: ST_TO_ADDR
// if p3 = 103 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 103
19361: EQUAL
19362: IFFALSE 19372
// sFog := true ;
19364: LD_ADDR_EXP 87
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
// if p3 = 104 then
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 104
19379: EQUAL
19380: IFFALSE 19390
// sReset := true ;
19382: LD_ADDR_EXP 88
19386: PUSH
19387: LD_INT 1
19389: ST_TO_ADDR
// if p3 = 105 then
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 105
19397: EQUAL
19398: IFFALSE 19408
// sSun := true ;
19400: LD_ADDR_EXP 89
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 106 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 106
19415: EQUAL
19416: IFFALSE 19426
// sTiger := true ;
19418: LD_ADDR_EXP 85
19422: PUSH
19423: LD_INT 1
19425: ST_TO_ADDR
// if p3 = 107 then
19426: LD_VAR 0 3
19430: PUSH
19431: LD_INT 107
19433: EQUAL
19434: IFFALSE 19444
// sBomb := true ;
19436: LD_ADDR_EXP 86
19440: PUSH
19441: LD_INT 1
19443: ST_TO_ADDR
// if p3 = 108 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 108
19451: EQUAL
19452: IFFALSE 19462
// sWound := true ;
19454: LD_ADDR_EXP 94
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// if p3 = 109 then
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 109
19469: EQUAL
19470: IFFALSE 19480
// sBetray := true ;
19472: LD_ADDR_EXP 98
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// if p3 = 110 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 110
19487: EQUAL
19488: IFFALSE 19498
// sContamin := true ;
19490: LD_ADDR_EXP 99
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// if p3 = 111 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 111
19505: EQUAL
19506: IFFALSE 19516
// sOil := true ;
19508: LD_ADDR_EXP 101
19512: PUSH
19513: LD_INT 1
19515: ST_TO_ADDR
// if p3 = 112 then
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 112
19523: EQUAL
19524: IFFALSE 19534
// sStu := true ;
19526: LD_ADDR_EXP 105
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// if p3 = 113 then
19534: LD_VAR 0 3
19538: PUSH
19539: LD_INT 113
19541: EQUAL
19542: IFFALSE 19552
// sBazooka := true ;
19544: LD_ADDR_EXP 108
19548: PUSH
19549: LD_INT 1
19551: ST_TO_ADDR
// if p3 = 114 then
19552: LD_VAR 0 3
19556: PUSH
19557: LD_INT 114
19559: EQUAL
19560: IFFALSE 19570
// sMortar := true ;
19562: LD_ADDR_EXP 109
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if p3 = 115 then
19570: LD_VAR 0 3
19574: PUSH
19575: LD_INT 115
19577: EQUAL
19578: IFFALSE 19588
// sRanger := true ;
19580: LD_ADDR_EXP 119
19584: PUSH
19585: LD_INT 1
19587: ST_TO_ADDR
// if p3 = 116 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 116
19595: EQUAL
19596: IFFALSE 19606
// sComputer := true ;
19598: LD_ADDR_EXP 120
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// if p3 = 117 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 117
19613: EQUAL
19614: IFFALSE 19624
// s30 := true ;
19616: LD_ADDR_EXP 121
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// if p3 = 118 then
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 118
19631: EQUAL
19632: IFFALSE 19642
// s60 := true ;
19634: LD_ADDR_EXP 122
19638: PUSH
19639: LD_INT 1
19641: ST_TO_ADDR
// end ; if p2 = 101 then
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 101
19649: EQUAL
19650: IFFALSE 19778
// begin case p3 of 1 :
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 1
19659: DOUBLE
19660: EQUAL
19661: IFTRUE 19665
19663: GO 19672
19665: POP
// hHackUnlimitedResources ; 2 :
19666: CALL 31374 0 0
19670: GO 19778
19672: LD_INT 2
19674: DOUBLE
19675: EQUAL
19676: IFTRUE 19680
19678: GO 19687
19680: POP
// hHackSetLevel10 ; 3 :
19681: CALL 31507 0 0
19685: GO 19778
19687: LD_INT 3
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19702
19695: POP
// hHackSetLevel10YourUnits ; 4 :
19696: CALL 31592 0 0
19700: GO 19778
19702: LD_INT 4
19704: DOUBLE
19705: EQUAL
19706: IFTRUE 19710
19708: GO 19717
19710: POP
// hHackInvincible ; 5 :
19711: CALL 32040 0 0
19715: GO 19778
19717: LD_INT 5
19719: DOUBLE
19720: EQUAL
19721: IFTRUE 19725
19723: GO 19732
19725: POP
// hHackInvisible ; 6 :
19726: CALL 32151 0 0
19730: GO 19778
19732: LD_INT 6
19734: DOUBLE
19735: EQUAL
19736: IFTRUE 19740
19738: GO 19747
19740: POP
// hHackChangeYourSide ; 7 :
19741: CALL 32208 0 0
19745: GO 19778
19747: LD_INT 7
19749: DOUBLE
19750: EQUAL
19751: IFTRUE 19755
19753: GO 19762
19755: POP
// hHackChangeUnitSide ; 8 :
19756: CALL 32250 0 0
19760: GO 19778
19762: LD_INT 8
19764: DOUBLE
19765: EQUAL
19766: IFTRUE 19770
19768: GO 19777
19770: POP
// hHackFog ; end ;
19771: CALL 32351 0 0
19775: GO 19778
19777: POP
// end ; end ;
19778: LD_VAR 0 7
19782: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19783: GO 19785
19785: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19786: LD_STRING initStreamRollete();
19788: PPUSH
19789: CALL_OW 559
// InitStreamMode ;
19793: CALL 19802 0 0
// DefineStreamItems ( ) ;
19797: CALL 20266 0 0
// end ;
19801: END
// function InitStreamMode ; begin
19802: LD_INT 0
19804: PPUSH
// streamModeActive := false ;
19805: LD_ADDR_EXP 66
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
// normalCounter := 36 ;
19813: LD_ADDR_EXP 67
19817: PUSH
19818: LD_INT 36
19820: ST_TO_ADDR
// hardcoreCounter := 16 ;
19821: LD_ADDR_EXP 68
19825: PUSH
19826: LD_INT 16
19828: ST_TO_ADDR
// sRocket := false ;
19829: LD_ADDR_EXP 71
19833: PUSH
19834: LD_INT 0
19836: ST_TO_ADDR
// sSpeed := false ;
19837: LD_ADDR_EXP 70
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// sEngine := false ;
19845: LD_ADDR_EXP 72
19849: PUSH
19850: LD_INT 0
19852: ST_TO_ADDR
// sSpec := false ;
19853: LD_ADDR_EXP 69
19857: PUSH
19858: LD_INT 0
19860: ST_TO_ADDR
// sLevel := false ;
19861: LD_ADDR_EXP 73
19865: PUSH
19866: LD_INT 0
19868: ST_TO_ADDR
// sArmoury := false ;
19869: LD_ADDR_EXP 74
19873: PUSH
19874: LD_INT 0
19876: ST_TO_ADDR
// sRadar := false ;
19877: LD_ADDR_EXP 75
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// sBunker := false ;
19885: LD_ADDR_EXP 76
19889: PUSH
19890: LD_INT 0
19892: ST_TO_ADDR
// sHack := false ;
19893: LD_ADDR_EXP 77
19897: PUSH
19898: LD_INT 0
19900: ST_TO_ADDR
// sFire := false ;
19901: LD_ADDR_EXP 78
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// sRefresh := false ;
19909: LD_ADDR_EXP 79
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// sExp := false ;
19917: LD_ADDR_EXP 80
19921: PUSH
19922: LD_INT 0
19924: ST_TO_ADDR
// sDepot := false ;
19925: LD_ADDR_EXP 81
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// sFlag := false ;
19933: LD_ADDR_EXP 82
19937: PUSH
19938: LD_INT 0
19940: ST_TO_ADDR
// sKamikadze := false ;
19941: LD_ADDR_EXP 90
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// sTroll := false ;
19949: LD_ADDR_EXP 91
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// sSlow := false ;
19957: LD_ADDR_EXP 92
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// sLack := false ;
19965: LD_ADDR_EXP 93
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sTank := false ;
19973: LD_ADDR_EXP 95
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// sRemote := false ;
19981: LD_ADDR_EXP 96
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// sPowell := false ;
19989: LD_ADDR_EXP 97
19993: PUSH
19994: LD_INT 0
19996: ST_TO_ADDR
// sTeleport := false ;
19997: LD_ADDR_EXP 100
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// sOilTower := false ;
20005: LD_ADDR_EXP 102
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// sShovel := false ;
20013: LD_ADDR_EXP 103
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
// sSheik := false ;
20021: LD_ADDR_EXP 104
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// sEarthquake := false ;
20029: LD_ADDR_EXP 106
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// sAI := false ;
20037: LD_ADDR_EXP 107
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// sCargo := false ;
20045: LD_ADDR_EXP 110
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// sDLaser := false ;
20053: LD_ADDR_EXP 111
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// sExchange := false ;
20061: LD_ADDR_EXP 112
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// sFac := false ;
20069: LD_ADDR_EXP 113
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// sPower := false ;
20077: LD_ADDR_EXP 114
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// sRandom := false ;
20085: LD_ADDR_EXP 115
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// sShield := false ;
20093: LD_ADDR_EXP 116
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// sTime := false ;
20101: LD_ADDR_EXP 117
20105: PUSH
20106: LD_INT 0
20108: ST_TO_ADDR
// sTools := false ;
20109: LD_ADDR_EXP 118
20113: PUSH
20114: LD_INT 0
20116: ST_TO_ADDR
// sSold := false ;
20117: LD_ADDR_EXP 83
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
// sDiff := false ;
20125: LD_ADDR_EXP 84
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// sFog := false ;
20133: LD_ADDR_EXP 87
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// sReset := false ;
20141: LD_ADDR_EXP 88
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// sSun := false ;
20149: LD_ADDR_EXP 89
20153: PUSH
20154: LD_INT 0
20156: ST_TO_ADDR
// sTiger := false ;
20157: LD_ADDR_EXP 85
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// sBomb := false ;
20165: LD_ADDR_EXP 86
20169: PUSH
20170: LD_INT 0
20172: ST_TO_ADDR
// sWound := false ;
20173: LD_ADDR_EXP 94
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// sBetray := false ;
20181: LD_ADDR_EXP 98
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// sContamin := false ;
20189: LD_ADDR_EXP 99
20193: PUSH
20194: LD_INT 0
20196: ST_TO_ADDR
// sOil := false ;
20197: LD_ADDR_EXP 101
20201: PUSH
20202: LD_INT 0
20204: ST_TO_ADDR
// sStu := false ;
20205: LD_ADDR_EXP 105
20209: PUSH
20210: LD_INT 0
20212: ST_TO_ADDR
// sBazooka := false ;
20213: LD_ADDR_EXP 108
20217: PUSH
20218: LD_INT 0
20220: ST_TO_ADDR
// sMortar := false ;
20221: LD_ADDR_EXP 109
20225: PUSH
20226: LD_INT 0
20228: ST_TO_ADDR
// sRanger := false ;
20229: LD_ADDR_EXP 119
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// sComputer := false ;
20237: LD_ADDR_EXP 120
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// s30 := false ;
20245: LD_ADDR_EXP 121
20249: PUSH
20250: LD_INT 0
20252: ST_TO_ADDR
// s60 := false ;
20253: LD_ADDR_EXP 122
20257: PUSH
20258: LD_INT 0
20260: ST_TO_ADDR
// end ;
20261: LD_VAR 0 1
20265: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20266: LD_INT 0
20268: PPUSH
20269: PPUSH
20270: PPUSH
20271: PPUSH
20272: PPUSH
// result := [ ] ;
20273: LD_ADDR_VAR 0 1
20277: PUSH
20278: EMPTY
20279: ST_TO_ADDR
// if campaign_id = 1 then
20280: LD_OWVAR 69
20284: PUSH
20285: LD_INT 1
20287: EQUAL
20288: IFFALSE 23454
// begin case mission_number of 1 :
20290: LD_OWVAR 70
20294: PUSH
20295: LD_INT 1
20297: DOUBLE
20298: EQUAL
20299: IFTRUE 20303
20301: GO 20379
20303: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20304: LD_ADDR_VAR 0 1
20308: PUSH
20309: LD_INT 2
20311: PUSH
20312: LD_INT 4
20314: PUSH
20315: LD_INT 11
20317: PUSH
20318: LD_INT 12
20320: PUSH
20321: LD_INT 15
20323: PUSH
20324: LD_INT 16
20326: PUSH
20327: LD_INT 22
20329: PUSH
20330: LD_INT 23
20332: PUSH
20333: LD_INT 26
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 101
20349: PUSH
20350: LD_INT 102
20352: PUSH
20353: LD_INT 106
20355: PUSH
20356: LD_INT 116
20358: PUSH
20359: LD_INT 117
20361: PUSH
20362: LD_INT 118
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: ST_TO_ADDR
20377: GO 23452
20379: LD_INT 2
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20471
20387: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20388: LD_ADDR_VAR 0 1
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 4
20398: PUSH
20399: LD_INT 11
20401: PUSH
20402: LD_INT 12
20404: PUSH
20405: LD_INT 15
20407: PUSH
20408: LD_INT 16
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_INT 23
20416: PUSH
20417: LD_INT 26
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 101
20433: PUSH
20434: LD_INT 102
20436: PUSH
20437: LD_INT 105
20439: PUSH
20440: LD_INT 106
20442: PUSH
20443: LD_INT 108
20445: PUSH
20446: LD_INT 116
20448: PUSH
20449: LD_INT 117
20451: PUSH
20452: LD_INT 118
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: ST_TO_ADDR
20469: GO 23452
20471: LD_INT 3
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20567
20479: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20480: LD_ADDR_VAR 0 1
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: LD_INT 4
20490: PUSH
20491: LD_INT 5
20493: PUSH
20494: LD_INT 11
20496: PUSH
20497: LD_INT 12
20499: PUSH
20500: LD_INT 15
20502: PUSH
20503: LD_INT 16
20505: PUSH
20506: LD_INT 22
20508: PUSH
20509: LD_INT 26
20511: PUSH
20512: LD_INT 36
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 101
20529: PUSH
20530: LD_INT 102
20532: PUSH
20533: LD_INT 105
20535: PUSH
20536: LD_INT 106
20538: PUSH
20539: LD_INT 108
20541: PUSH
20542: LD_INT 116
20544: PUSH
20545: LD_INT 117
20547: PUSH
20548: LD_INT 118
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: ST_TO_ADDR
20565: GO 23452
20567: LD_INT 4
20569: DOUBLE
20570: EQUAL
20571: IFTRUE 20575
20573: GO 20671
20575: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20576: LD_ADDR_VAR 0 1
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 4
20586: PUSH
20587: LD_INT 5
20589: PUSH
20590: LD_INT 8
20592: PUSH
20593: LD_INT 11
20595: PUSH
20596: LD_INT 12
20598: PUSH
20599: LD_INT 15
20601: PUSH
20602: LD_INT 16
20604: PUSH
20605: LD_INT 22
20607: PUSH
20608: LD_INT 23
20610: PUSH
20611: LD_INT 26
20613: PUSH
20614: LD_INT 36
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 101
20633: PUSH
20634: LD_INT 102
20636: PUSH
20637: LD_INT 105
20639: PUSH
20640: LD_INT 106
20642: PUSH
20643: LD_INT 108
20645: PUSH
20646: LD_INT 116
20648: PUSH
20649: LD_INT 117
20651: PUSH
20652: LD_INT 118
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: ST_TO_ADDR
20669: GO 23452
20671: LD_INT 5
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20791
20679: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20680: LD_ADDR_VAR 0 1
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: LD_INT 4
20690: PUSH
20691: LD_INT 5
20693: PUSH
20694: LD_INT 6
20696: PUSH
20697: LD_INT 8
20699: PUSH
20700: LD_INT 11
20702: PUSH
20703: LD_INT 12
20705: PUSH
20706: LD_INT 15
20708: PUSH
20709: LD_INT 16
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_INT 23
20717: PUSH
20718: LD_INT 25
20720: PUSH
20721: LD_INT 26
20723: PUSH
20724: LD_INT 36
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 101
20745: PUSH
20746: LD_INT 102
20748: PUSH
20749: LD_INT 105
20751: PUSH
20752: LD_INT 106
20754: PUSH
20755: LD_INT 108
20757: PUSH
20758: LD_INT 109
20760: PUSH
20761: LD_INT 112
20763: PUSH
20764: LD_INT 116
20766: PUSH
20767: LD_INT 117
20769: PUSH
20770: LD_INT 118
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: ST_TO_ADDR
20789: GO 23452
20791: LD_INT 6
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20931
20799: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20800: LD_ADDR_VAR 0 1
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: LD_INT 4
20810: PUSH
20811: LD_INT 5
20813: PUSH
20814: LD_INT 6
20816: PUSH
20817: LD_INT 8
20819: PUSH
20820: LD_INT 11
20822: PUSH
20823: LD_INT 12
20825: PUSH
20826: LD_INT 15
20828: PUSH
20829: LD_INT 16
20831: PUSH
20832: LD_INT 20
20834: PUSH
20835: LD_INT 21
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_INT 23
20843: PUSH
20844: LD_INT 25
20846: PUSH
20847: LD_INT 26
20849: PUSH
20850: LD_INT 30
20852: PUSH
20853: LD_INT 31
20855: PUSH
20856: LD_INT 32
20858: PUSH
20859: LD_INT 36
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 101
20885: PUSH
20886: LD_INT 102
20888: PUSH
20889: LD_INT 105
20891: PUSH
20892: LD_INT 106
20894: PUSH
20895: LD_INT 108
20897: PUSH
20898: LD_INT 109
20900: PUSH
20901: LD_INT 112
20903: PUSH
20904: LD_INT 116
20906: PUSH
20907: LD_INT 117
20909: PUSH
20910: LD_INT 118
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: ST_TO_ADDR
20929: GO 23452
20931: LD_INT 7
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 21051
20939: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20940: LD_ADDR_VAR 0 1
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 4
20950: PUSH
20951: LD_INT 5
20953: PUSH
20954: LD_INT 7
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 12
20962: PUSH
20963: LD_INT 15
20965: PUSH
20966: LD_INT 16
20968: PUSH
20969: LD_INT 20
20971: PUSH
20972: LD_INT 21
20974: PUSH
20975: LD_INT 22
20977: PUSH
20978: LD_INT 23
20980: PUSH
20981: LD_INT 25
20983: PUSH
20984: LD_INT 26
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 101
21005: PUSH
21006: LD_INT 102
21008: PUSH
21009: LD_INT 103
21011: PUSH
21012: LD_INT 105
21014: PUSH
21015: LD_INT 106
21017: PUSH
21018: LD_INT 108
21020: PUSH
21021: LD_INT 112
21023: PUSH
21024: LD_INT 116
21026: PUSH
21027: LD_INT 117
21029: PUSH
21030: LD_INT 118
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: ST_TO_ADDR
21049: GO 23452
21051: LD_INT 8
21053: DOUBLE
21054: EQUAL
21055: IFTRUE 21059
21057: GO 21199
21059: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21060: LD_ADDR_VAR 0 1
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 4
21070: PUSH
21071: LD_INT 5
21073: PUSH
21074: LD_INT 6
21076: PUSH
21077: LD_INT 7
21079: PUSH
21080: LD_INT 8
21082: PUSH
21083: LD_INT 11
21085: PUSH
21086: LD_INT 12
21088: PUSH
21089: LD_INT 15
21091: PUSH
21092: LD_INT 16
21094: PUSH
21095: LD_INT 20
21097: PUSH
21098: LD_INT 21
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 25
21109: PUSH
21110: LD_INT 26
21112: PUSH
21113: LD_INT 30
21115: PUSH
21116: LD_INT 31
21118: PUSH
21119: LD_INT 32
21121: PUSH
21122: LD_INT 36
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 101
21149: PUSH
21150: LD_INT 102
21152: PUSH
21153: LD_INT 103
21155: PUSH
21156: LD_INT 105
21158: PUSH
21159: LD_INT 106
21161: PUSH
21162: LD_INT 108
21164: PUSH
21165: LD_INT 109
21167: PUSH
21168: LD_INT 112
21170: PUSH
21171: LD_INT 116
21173: PUSH
21174: LD_INT 117
21176: PUSH
21177: LD_INT 118
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: ST_TO_ADDR
21197: GO 23452
21199: LD_INT 9
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21207
21205: GO 21355
21207: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21208: LD_ADDR_VAR 0 1
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: LD_INT 4
21218: PUSH
21219: LD_INT 5
21221: PUSH
21222: LD_INT 6
21224: PUSH
21225: LD_INT 7
21227: PUSH
21228: LD_INT 8
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 15
21239: PUSH
21240: LD_INT 16
21242: PUSH
21243: LD_INT 20
21245: PUSH
21246: LD_INT 21
21248: PUSH
21249: LD_INT 22
21251: PUSH
21252: LD_INT 23
21254: PUSH
21255: LD_INT 25
21257: PUSH
21258: LD_INT 26
21260: PUSH
21261: LD_INT 28
21263: PUSH
21264: LD_INT 30
21266: PUSH
21267: LD_INT 31
21269: PUSH
21270: LD_INT 32
21272: PUSH
21273: LD_INT 36
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 101
21301: PUSH
21302: LD_INT 102
21304: PUSH
21305: LD_INT 103
21307: PUSH
21308: LD_INT 105
21310: PUSH
21311: LD_INT 106
21313: PUSH
21314: LD_INT 108
21316: PUSH
21317: LD_INT 109
21319: PUSH
21320: LD_INT 112
21322: PUSH
21323: LD_INT 114
21325: PUSH
21326: LD_INT 116
21328: PUSH
21329: LD_INT 117
21331: PUSH
21332: LD_INT 118
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: ST_TO_ADDR
21353: GO 23452
21355: LD_INT 10
21357: DOUBLE
21358: EQUAL
21359: IFTRUE 21363
21361: GO 21559
21363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21364: LD_ADDR_VAR 0 1
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: LD_INT 4
21374: PUSH
21375: LD_INT 5
21377: PUSH
21378: LD_INT 6
21380: PUSH
21381: LD_INT 7
21383: PUSH
21384: LD_INT 8
21386: PUSH
21387: LD_INT 9
21389: PUSH
21390: LD_INT 10
21392: PUSH
21393: LD_INT 11
21395: PUSH
21396: LD_INT 12
21398: PUSH
21399: LD_INT 13
21401: PUSH
21402: LD_INT 14
21404: PUSH
21405: LD_INT 15
21407: PUSH
21408: LD_INT 16
21410: PUSH
21411: LD_INT 17
21413: PUSH
21414: LD_INT 18
21416: PUSH
21417: LD_INT 19
21419: PUSH
21420: LD_INT 20
21422: PUSH
21423: LD_INT 21
21425: PUSH
21426: LD_INT 22
21428: PUSH
21429: LD_INT 23
21431: PUSH
21432: LD_INT 24
21434: PUSH
21435: LD_INT 25
21437: PUSH
21438: LD_INT 26
21440: PUSH
21441: LD_INT 28
21443: PUSH
21444: LD_INT 30
21446: PUSH
21447: LD_INT 31
21449: PUSH
21450: LD_INT 32
21452: PUSH
21453: LD_INT 36
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 101
21489: PUSH
21490: LD_INT 102
21492: PUSH
21493: LD_INT 103
21495: PUSH
21496: LD_INT 104
21498: PUSH
21499: LD_INT 105
21501: PUSH
21502: LD_INT 106
21504: PUSH
21505: LD_INT 107
21507: PUSH
21508: LD_INT 108
21510: PUSH
21511: LD_INT 109
21513: PUSH
21514: LD_INT 110
21516: PUSH
21517: LD_INT 111
21519: PUSH
21520: LD_INT 112
21522: PUSH
21523: LD_INT 114
21525: PUSH
21526: LD_INT 116
21528: PUSH
21529: LD_INT 117
21531: PUSH
21532: LD_INT 118
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: ST_TO_ADDR
21557: GO 23452
21559: LD_INT 11
21561: DOUBLE
21562: EQUAL
21563: IFTRUE 21567
21565: GO 21771
21567: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21568: LD_ADDR_VAR 0 1
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: LD_INT 4
21581: PUSH
21582: LD_INT 5
21584: PUSH
21585: LD_INT 6
21587: PUSH
21588: LD_INT 7
21590: PUSH
21591: LD_INT 8
21593: PUSH
21594: LD_INT 9
21596: PUSH
21597: LD_INT 10
21599: PUSH
21600: LD_INT 11
21602: PUSH
21603: LD_INT 12
21605: PUSH
21606: LD_INT 13
21608: PUSH
21609: LD_INT 14
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 16
21617: PUSH
21618: LD_INT 17
21620: PUSH
21621: LD_INT 18
21623: PUSH
21624: LD_INT 19
21626: PUSH
21627: LD_INT 20
21629: PUSH
21630: LD_INT 21
21632: PUSH
21633: LD_INT 22
21635: PUSH
21636: LD_INT 23
21638: PUSH
21639: LD_INT 24
21641: PUSH
21642: LD_INT 25
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: LD_INT 28
21650: PUSH
21651: LD_INT 30
21653: PUSH
21654: LD_INT 31
21656: PUSH
21657: LD_INT 32
21659: PUSH
21660: LD_INT 34
21662: PUSH
21663: LD_INT 36
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 101
21701: PUSH
21702: LD_INT 102
21704: PUSH
21705: LD_INT 103
21707: PUSH
21708: LD_INT 104
21710: PUSH
21711: LD_INT 105
21713: PUSH
21714: LD_INT 106
21716: PUSH
21717: LD_INT 107
21719: PUSH
21720: LD_INT 108
21722: PUSH
21723: LD_INT 109
21725: PUSH
21726: LD_INT 110
21728: PUSH
21729: LD_INT 111
21731: PUSH
21732: LD_INT 112
21734: PUSH
21735: LD_INT 114
21737: PUSH
21738: LD_INT 116
21740: PUSH
21741: LD_INT 117
21743: PUSH
21744: LD_INT 118
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: ST_TO_ADDR
21769: GO 23452
21771: LD_INT 12
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21999
21779: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21780: LD_ADDR_VAR 0 1
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: LD_INT 3
21793: PUSH
21794: LD_INT 4
21796: PUSH
21797: LD_INT 5
21799: PUSH
21800: LD_INT 6
21802: PUSH
21803: LD_INT 7
21805: PUSH
21806: LD_INT 8
21808: PUSH
21809: LD_INT 9
21811: PUSH
21812: LD_INT 10
21814: PUSH
21815: LD_INT 11
21817: PUSH
21818: LD_INT 12
21820: PUSH
21821: LD_INT 13
21823: PUSH
21824: LD_INT 14
21826: PUSH
21827: LD_INT 15
21829: PUSH
21830: LD_INT 16
21832: PUSH
21833: LD_INT 17
21835: PUSH
21836: LD_INT 18
21838: PUSH
21839: LD_INT 19
21841: PUSH
21842: LD_INT 20
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 22
21850: PUSH
21851: LD_INT 23
21853: PUSH
21854: LD_INT 24
21856: PUSH
21857: LD_INT 25
21859: PUSH
21860: LD_INT 26
21862: PUSH
21863: LD_INT 27
21865: PUSH
21866: LD_INT 28
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_INT 31
21874: PUSH
21875: LD_INT 32
21877: PUSH
21878: LD_INT 33
21880: PUSH
21881: LD_INT 34
21883: PUSH
21884: LD_INT 36
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 101
21925: PUSH
21926: LD_INT 102
21928: PUSH
21929: LD_INT 103
21931: PUSH
21932: LD_INT 104
21934: PUSH
21935: LD_INT 105
21937: PUSH
21938: LD_INT 106
21940: PUSH
21941: LD_INT 107
21943: PUSH
21944: LD_INT 108
21946: PUSH
21947: LD_INT 109
21949: PUSH
21950: LD_INT 110
21952: PUSH
21953: LD_INT 111
21955: PUSH
21956: LD_INT 112
21958: PUSH
21959: LD_INT 113
21961: PUSH
21962: LD_INT 114
21964: PUSH
21965: LD_INT 116
21967: PUSH
21968: LD_INT 117
21970: PUSH
21971: LD_INT 118
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: ST_TO_ADDR
21997: GO 23452
21999: LD_INT 13
22001: DOUBLE
22002: EQUAL
22003: IFTRUE 22007
22005: GO 22215
22007: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22008: LD_ADDR_VAR 0 1
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 3
22021: PUSH
22022: LD_INT 4
22024: PUSH
22025: LD_INT 5
22027: PUSH
22028: LD_INT 8
22030: PUSH
22031: LD_INT 9
22033: PUSH
22034: LD_INT 10
22036: PUSH
22037: LD_INT 11
22039: PUSH
22040: LD_INT 12
22042: PUSH
22043: LD_INT 14
22045: PUSH
22046: LD_INT 15
22048: PUSH
22049: LD_INT 16
22051: PUSH
22052: LD_INT 17
22054: PUSH
22055: LD_INT 18
22057: PUSH
22058: LD_INT 19
22060: PUSH
22061: LD_INT 20
22063: PUSH
22064: LD_INT 21
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_INT 23
22072: PUSH
22073: LD_INT 24
22075: PUSH
22076: LD_INT 25
22078: PUSH
22079: LD_INT 26
22081: PUSH
22082: LD_INT 27
22084: PUSH
22085: LD_INT 28
22087: PUSH
22088: LD_INT 30
22090: PUSH
22091: LD_INT 31
22093: PUSH
22094: LD_INT 32
22096: PUSH
22097: LD_INT 33
22099: PUSH
22100: LD_INT 34
22102: PUSH
22103: LD_INT 36
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 101
22141: PUSH
22142: LD_INT 102
22144: PUSH
22145: LD_INT 103
22147: PUSH
22148: LD_INT 104
22150: PUSH
22151: LD_INT 105
22153: PUSH
22154: LD_INT 106
22156: PUSH
22157: LD_INT 107
22159: PUSH
22160: LD_INT 108
22162: PUSH
22163: LD_INT 109
22165: PUSH
22166: LD_INT 110
22168: PUSH
22169: LD_INT 111
22171: PUSH
22172: LD_INT 112
22174: PUSH
22175: LD_INT 113
22177: PUSH
22178: LD_INT 114
22180: PUSH
22181: LD_INT 116
22183: PUSH
22184: LD_INT 117
22186: PUSH
22187: LD_INT 118
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: ST_TO_ADDR
22213: GO 23452
22215: LD_INT 14
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22447
22223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22224: LD_ADDR_VAR 0 1
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 4
22240: PUSH
22241: LD_INT 5
22243: PUSH
22244: LD_INT 6
22246: PUSH
22247: LD_INT 7
22249: PUSH
22250: LD_INT 8
22252: PUSH
22253: LD_INT 9
22255: PUSH
22256: LD_INT 10
22258: PUSH
22259: LD_INT 11
22261: PUSH
22262: LD_INT 12
22264: PUSH
22265: LD_INT 13
22267: PUSH
22268: LD_INT 14
22270: PUSH
22271: LD_INT 15
22273: PUSH
22274: LD_INT 16
22276: PUSH
22277: LD_INT 17
22279: PUSH
22280: LD_INT 18
22282: PUSH
22283: LD_INT 19
22285: PUSH
22286: LD_INT 20
22288: PUSH
22289: LD_INT 21
22291: PUSH
22292: LD_INT 22
22294: PUSH
22295: LD_INT 23
22297: PUSH
22298: LD_INT 24
22300: PUSH
22301: LD_INT 25
22303: PUSH
22304: LD_INT 26
22306: PUSH
22307: LD_INT 27
22309: PUSH
22310: LD_INT 28
22312: PUSH
22313: LD_INT 29
22315: PUSH
22316: LD_INT 30
22318: PUSH
22319: LD_INT 31
22321: PUSH
22322: LD_INT 32
22324: PUSH
22325: LD_INT 33
22327: PUSH
22328: LD_INT 34
22330: PUSH
22331: LD_INT 36
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 101
22373: PUSH
22374: LD_INT 102
22376: PUSH
22377: LD_INT 103
22379: PUSH
22380: LD_INT 104
22382: PUSH
22383: LD_INT 105
22385: PUSH
22386: LD_INT 106
22388: PUSH
22389: LD_INT 107
22391: PUSH
22392: LD_INT 108
22394: PUSH
22395: LD_INT 109
22397: PUSH
22398: LD_INT 110
22400: PUSH
22401: LD_INT 111
22403: PUSH
22404: LD_INT 112
22406: PUSH
22407: LD_INT 113
22409: PUSH
22410: LD_INT 114
22412: PUSH
22413: LD_INT 116
22415: PUSH
22416: LD_INT 117
22418: PUSH
22419: LD_INT 118
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: ST_TO_ADDR
22445: GO 23452
22447: LD_INT 15
22449: DOUBLE
22450: EQUAL
22451: IFTRUE 22455
22453: GO 22679
22455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22456: LD_ADDR_VAR 0 1
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: LD_INT 4
22472: PUSH
22473: LD_INT 5
22475: PUSH
22476: LD_INT 6
22478: PUSH
22479: LD_INT 7
22481: PUSH
22482: LD_INT 8
22484: PUSH
22485: LD_INT 9
22487: PUSH
22488: LD_INT 10
22490: PUSH
22491: LD_INT 11
22493: PUSH
22494: LD_INT 12
22496: PUSH
22497: LD_INT 13
22499: PUSH
22500: LD_INT 14
22502: PUSH
22503: LD_INT 15
22505: PUSH
22506: LD_INT 16
22508: PUSH
22509: LD_INT 17
22511: PUSH
22512: LD_INT 18
22514: PUSH
22515: LD_INT 19
22517: PUSH
22518: LD_INT 20
22520: PUSH
22521: LD_INT 21
22523: PUSH
22524: LD_INT 22
22526: PUSH
22527: LD_INT 23
22529: PUSH
22530: LD_INT 24
22532: PUSH
22533: LD_INT 25
22535: PUSH
22536: LD_INT 26
22538: PUSH
22539: LD_INT 27
22541: PUSH
22542: LD_INT 28
22544: PUSH
22545: LD_INT 29
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: LD_INT 31
22553: PUSH
22554: LD_INT 32
22556: PUSH
22557: LD_INT 33
22559: PUSH
22560: LD_INT 34
22562: PUSH
22563: LD_INT 36
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 101
22605: PUSH
22606: LD_INT 102
22608: PUSH
22609: LD_INT 103
22611: PUSH
22612: LD_INT 104
22614: PUSH
22615: LD_INT 105
22617: PUSH
22618: LD_INT 106
22620: PUSH
22621: LD_INT 107
22623: PUSH
22624: LD_INT 108
22626: PUSH
22627: LD_INT 109
22629: PUSH
22630: LD_INT 110
22632: PUSH
22633: LD_INT 111
22635: PUSH
22636: LD_INT 112
22638: PUSH
22639: LD_INT 113
22641: PUSH
22642: LD_INT 114
22644: PUSH
22645: LD_INT 116
22647: PUSH
22648: LD_INT 117
22650: PUSH
22651: LD_INT 118
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: ST_TO_ADDR
22677: GO 23452
22679: LD_INT 16
22681: DOUBLE
22682: EQUAL
22683: IFTRUE 22687
22685: GO 22823
22687: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22688: LD_ADDR_VAR 0 1
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: LD_INT 4
22698: PUSH
22699: LD_INT 5
22701: PUSH
22702: LD_INT 7
22704: PUSH
22705: LD_INT 11
22707: PUSH
22708: LD_INT 12
22710: PUSH
22711: LD_INT 15
22713: PUSH
22714: LD_INT 16
22716: PUSH
22717: LD_INT 20
22719: PUSH
22720: LD_INT 21
22722: PUSH
22723: LD_INT 22
22725: PUSH
22726: LD_INT 23
22728: PUSH
22729: LD_INT 25
22731: PUSH
22732: LD_INT 26
22734: PUSH
22735: LD_INT 30
22737: PUSH
22738: LD_INT 31
22740: PUSH
22741: LD_INT 32
22743: PUSH
22744: LD_INT 33
22746: PUSH
22747: LD_INT 34
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 101
22773: PUSH
22774: LD_INT 102
22776: PUSH
22777: LD_INT 103
22779: PUSH
22780: LD_INT 106
22782: PUSH
22783: LD_INT 108
22785: PUSH
22786: LD_INT 112
22788: PUSH
22789: LD_INT 113
22791: PUSH
22792: LD_INT 114
22794: PUSH
22795: LD_INT 116
22797: PUSH
22798: LD_INT 117
22800: PUSH
22801: LD_INT 118
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: ST_TO_ADDR
22821: GO 23452
22823: LD_INT 17
22825: DOUBLE
22826: EQUAL
22827: IFTRUE 22831
22829: GO 23055
22831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22832: LD_ADDR_VAR 0 1
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 3
22845: PUSH
22846: LD_INT 4
22848: PUSH
22849: LD_INT 5
22851: PUSH
22852: LD_INT 6
22854: PUSH
22855: LD_INT 7
22857: PUSH
22858: LD_INT 8
22860: PUSH
22861: LD_INT 9
22863: PUSH
22864: LD_INT 10
22866: PUSH
22867: LD_INT 11
22869: PUSH
22870: LD_INT 12
22872: PUSH
22873: LD_INT 13
22875: PUSH
22876: LD_INT 14
22878: PUSH
22879: LD_INT 15
22881: PUSH
22882: LD_INT 16
22884: PUSH
22885: LD_INT 17
22887: PUSH
22888: LD_INT 18
22890: PUSH
22891: LD_INT 19
22893: PUSH
22894: LD_INT 20
22896: PUSH
22897: LD_INT 21
22899: PUSH
22900: LD_INT 22
22902: PUSH
22903: LD_INT 23
22905: PUSH
22906: LD_INT 24
22908: PUSH
22909: LD_INT 25
22911: PUSH
22912: LD_INT 26
22914: PUSH
22915: LD_INT 27
22917: PUSH
22918: LD_INT 28
22920: PUSH
22921: LD_INT 29
22923: PUSH
22924: LD_INT 30
22926: PUSH
22927: LD_INT 31
22929: PUSH
22930: LD_INT 32
22932: PUSH
22933: LD_INT 33
22935: PUSH
22936: LD_INT 34
22938: PUSH
22939: LD_INT 36
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 101
22981: PUSH
22982: LD_INT 102
22984: PUSH
22985: LD_INT 103
22987: PUSH
22988: LD_INT 104
22990: PUSH
22991: LD_INT 105
22993: PUSH
22994: LD_INT 106
22996: PUSH
22997: LD_INT 107
22999: PUSH
23000: LD_INT 108
23002: PUSH
23003: LD_INT 109
23005: PUSH
23006: LD_INT 110
23008: PUSH
23009: LD_INT 111
23011: PUSH
23012: LD_INT 112
23014: PUSH
23015: LD_INT 113
23017: PUSH
23018: LD_INT 114
23020: PUSH
23021: LD_INT 116
23023: PUSH
23024: LD_INT 117
23026: PUSH
23027: LD_INT 118
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: ST_TO_ADDR
23053: GO 23452
23055: LD_INT 18
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23211
23063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23064: LD_ADDR_VAR 0 1
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 4
23074: PUSH
23075: LD_INT 5
23077: PUSH
23078: LD_INT 7
23080: PUSH
23081: LD_INT 11
23083: PUSH
23084: LD_INT 12
23086: PUSH
23087: LD_INT 15
23089: PUSH
23090: LD_INT 16
23092: PUSH
23093: LD_INT 20
23095: PUSH
23096: LD_INT 21
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_INT 23
23104: PUSH
23105: LD_INT 25
23107: PUSH
23108: LD_INT 26
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: LD_INT 31
23116: PUSH
23117: LD_INT 32
23119: PUSH
23120: LD_INT 33
23122: PUSH
23123: LD_INT 34
23125: PUSH
23126: LD_INT 35
23128: PUSH
23129: LD_INT 36
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 101
23157: PUSH
23158: LD_INT 102
23160: PUSH
23161: LD_INT 103
23163: PUSH
23164: LD_INT 106
23166: PUSH
23167: LD_INT 108
23169: PUSH
23170: LD_INT 112
23172: PUSH
23173: LD_INT 113
23175: PUSH
23176: LD_INT 114
23178: PUSH
23179: LD_INT 115
23181: PUSH
23182: LD_INT 116
23184: PUSH
23185: LD_INT 117
23187: PUSH
23188: LD_INT 118
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: ST_TO_ADDR
23209: GO 23452
23211: LD_INT 19
23213: DOUBLE
23214: EQUAL
23215: IFTRUE 23219
23217: GO 23451
23219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23220: LD_ADDR_VAR 0 1
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: LD_INT 4
23236: PUSH
23237: LD_INT 5
23239: PUSH
23240: LD_INT 6
23242: PUSH
23243: LD_INT 7
23245: PUSH
23246: LD_INT 8
23248: PUSH
23249: LD_INT 9
23251: PUSH
23252: LD_INT 10
23254: PUSH
23255: LD_INT 11
23257: PUSH
23258: LD_INT 12
23260: PUSH
23261: LD_INT 13
23263: PUSH
23264: LD_INT 14
23266: PUSH
23267: LD_INT 15
23269: PUSH
23270: LD_INT 16
23272: PUSH
23273: LD_INT 17
23275: PUSH
23276: LD_INT 18
23278: PUSH
23279: LD_INT 19
23281: PUSH
23282: LD_INT 20
23284: PUSH
23285: LD_INT 21
23287: PUSH
23288: LD_INT 22
23290: PUSH
23291: LD_INT 23
23293: PUSH
23294: LD_INT 24
23296: PUSH
23297: LD_INT 25
23299: PUSH
23300: LD_INT 26
23302: PUSH
23303: LD_INT 27
23305: PUSH
23306: LD_INT 28
23308: PUSH
23309: LD_INT 29
23311: PUSH
23312: LD_INT 30
23314: PUSH
23315: LD_INT 31
23317: PUSH
23318: LD_INT 32
23320: PUSH
23321: LD_INT 33
23323: PUSH
23324: LD_INT 34
23326: PUSH
23327: LD_INT 35
23329: PUSH
23330: LD_INT 36
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 101
23373: PUSH
23374: LD_INT 102
23376: PUSH
23377: LD_INT 103
23379: PUSH
23380: LD_INT 104
23382: PUSH
23383: LD_INT 105
23385: PUSH
23386: LD_INT 106
23388: PUSH
23389: LD_INT 107
23391: PUSH
23392: LD_INT 108
23394: PUSH
23395: LD_INT 109
23397: PUSH
23398: LD_INT 110
23400: PUSH
23401: LD_INT 111
23403: PUSH
23404: LD_INT 112
23406: PUSH
23407: LD_INT 113
23409: PUSH
23410: LD_INT 114
23412: PUSH
23413: LD_INT 115
23415: PUSH
23416: LD_INT 116
23418: PUSH
23419: LD_INT 117
23421: PUSH
23422: LD_INT 118
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: ST_TO_ADDR
23449: GO 23452
23451: POP
// end else
23452: GO 23683
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23454: LD_ADDR_VAR 0 1
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: LD_INT 3
23467: PUSH
23468: LD_INT 4
23470: PUSH
23471: LD_INT 5
23473: PUSH
23474: LD_INT 6
23476: PUSH
23477: LD_INT 7
23479: PUSH
23480: LD_INT 8
23482: PUSH
23483: LD_INT 9
23485: PUSH
23486: LD_INT 10
23488: PUSH
23489: LD_INT 11
23491: PUSH
23492: LD_INT 12
23494: PUSH
23495: LD_INT 13
23497: PUSH
23498: LD_INT 14
23500: PUSH
23501: LD_INT 15
23503: PUSH
23504: LD_INT 16
23506: PUSH
23507: LD_INT 17
23509: PUSH
23510: LD_INT 18
23512: PUSH
23513: LD_INT 19
23515: PUSH
23516: LD_INT 20
23518: PUSH
23519: LD_INT 21
23521: PUSH
23522: LD_INT 22
23524: PUSH
23525: LD_INT 23
23527: PUSH
23528: LD_INT 24
23530: PUSH
23531: LD_INT 25
23533: PUSH
23534: LD_INT 26
23536: PUSH
23537: LD_INT 27
23539: PUSH
23540: LD_INT 28
23542: PUSH
23543: LD_INT 29
23545: PUSH
23546: LD_INT 30
23548: PUSH
23549: LD_INT 31
23551: PUSH
23552: LD_INT 32
23554: PUSH
23555: LD_INT 33
23557: PUSH
23558: LD_INT 34
23560: PUSH
23561: LD_INT 35
23563: PUSH
23564: LD_INT 36
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 101
23607: PUSH
23608: LD_INT 102
23610: PUSH
23611: LD_INT 103
23613: PUSH
23614: LD_INT 104
23616: PUSH
23617: LD_INT 105
23619: PUSH
23620: LD_INT 106
23622: PUSH
23623: LD_INT 107
23625: PUSH
23626: LD_INT 108
23628: PUSH
23629: LD_INT 109
23631: PUSH
23632: LD_INT 110
23634: PUSH
23635: LD_INT 111
23637: PUSH
23638: LD_INT 112
23640: PUSH
23641: LD_INT 113
23643: PUSH
23644: LD_INT 114
23646: PUSH
23647: LD_INT 115
23649: PUSH
23650: LD_INT 116
23652: PUSH
23653: LD_INT 117
23655: PUSH
23656: LD_INT 118
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: ST_TO_ADDR
// if result then
23683: LD_VAR 0 1
23687: IFFALSE 23976
// begin normal :=  ;
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_STRING 
23696: ST_TO_ADDR
// hardcore :=  ;
23697: LD_ADDR_VAR 0 4
23701: PUSH
23702: LD_STRING 
23704: ST_TO_ADDR
// for i = 1 to normalCounter do
23705: LD_ADDR_VAR 0 5
23709: PUSH
23710: DOUBLE
23711: LD_INT 1
23713: DEC
23714: ST_TO_ADDR
23715: LD_EXP 67
23719: PUSH
23720: FOR_TO
23721: IFFALSE 23822
// begin tmp := 0 ;
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_STRING 0
23730: ST_TO_ADDR
// if result [ 1 ] then
23731: LD_VAR 0 1
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: IFFALSE 23804
// if result [ 1 ] [ 1 ] = i then
23741: LD_VAR 0 1
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PUSH
23750: LD_INT 1
23752: ARRAY
23753: PUSH
23754: LD_VAR 0 5
23758: EQUAL
23759: IFFALSE 23804
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23761: LD_ADDR_VAR 0 1
23765: PUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: LD_INT 1
23773: PPUSH
23774: LD_VAR 0 1
23778: PUSH
23779: LD_INT 1
23781: ARRAY
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 3
23790: PPUSH
23791: CALL_OW 1
23795: ST_TO_ADDR
// tmp := 1 ;
23796: LD_ADDR_VAR 0 2
23800: PUSH
23801: LD_STRING 1
23803: ST_TO_ADDR
// end ; normal := normal & tmp ;
23804: LD_ADDR_VAR 0 3
23808: PUSH
23809: LD_VAR 0 3
23813: PUSH
23814: LD_VAR 0 2
23818: STR
23819: ST_TO_ADDR
// end ;
23820: GO 23720
23822: POP
23823: POP
// for i = 1 to hardcoreCounter do
23824: LD_ADDR_VAR 0 5
23828: PUSH
23829: DOUBLE
23830: LD_INT 1
23832: DEC
23833: ST_TO_ADDR
23834: LD_EXP 68
23838: PUSH
23839: FOR_TO
23840: IFFALSE 23945
// begin tmp := 0 ;
23842: LD_ADDR_VAR 0 2
23846: PUSH
23847: LD_STRING 0
23849: ST_TO_ADDR
// if result [ 2 ] then
23850: LD_VAR 0 1
23854: PUSH
23855: LD_INT 2
23857: ARRAY
23858: IFFALSE 23927
// if result [ 2 ] [ 1 ] = 100 + i then
23860: LD_VAR 0 1
23864: PUSH
23865: LD_INT 2
23867: ARRAY
23868: PUSH
23869: LD_INT 1
23871: ARRAY
23872: PUSH
23873: LD_INT 100
23875: PUSH
23876: LD_VAR 0 5
23880: PLUS
23881: EQUAL
23882: IFFALSE 23927
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: LD_INT 2
23896: PPUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_INT 2
23904: ARRAY
23905: PPUSH
23906: LD_INT 1
23908: PPUSH
23909: CALL_OW 3
23913: PPUSH
23914: CALL_OW 1
23918: ST_TO_ADDR
// tmp := 1 ;
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_STRING 1
23926: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23927: LD_ADDR_VAR 0 4
23931: PUSH
23932: LD_VAR 0 4
23936: PUSH
23937: LD_VAR 0 2
23941: STR
23942: ST_TO_ADDR
// end ;
23943: GO 23839
23945: POP
23946: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23947: LD_STRING getStreamItemsFromMission("
23949: PUSH
23950: LD_VAR 0 3
23954: STR
23955: PUSH
23956: LD_STRING ","
23958: STR
23959: PUSH
23960: LD_VAR 0 4
23964: STR
23965: PUSH
23966: LD_STRING ")
23968: STR
23969: PPUSH
23970: CALL_OW 559
// end else
23974: GO 23983
// ToLua ( getStreamItemsFromMission("","") ) ;
23976: LD_STRING getStreamItemsFromMission("","")
23978: PPUSH
23979: CALL_OW 559
// end ;
23983: LD_VAR 0 1
23987: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23988: LD_EXP 66
23992: PUSH
23993: LD_EXP 71
23997: AND
23998: IFFALSE 24122
24000: GO 24002
24002: DISABLE
24003: LD_INT 0
24005: PPUSH
24006: PPUSH
// begin enable ;
24007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24008: LD_ADDR_VAR 0 2
24012: PUSH
24013: LD_INT 22
24015: PUSH
24016: LD_OWVAR 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: LD_INT 34
24030: PUSH
24031: LD_INT 7
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 34
24040: PUSH
24041: LD_INT 45
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 34
24050: PUSH
24051: LD_INT 28
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 34
24060: PUSH
24061: LD_INT 47
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 69
24083: ST_TO_ADDR
// if not tmp then
24084: LD_VAR 0 2
24088: NOT
24089: IFFALSE 24093
// exit ;
24091: GO 24122
// for i in tmp do
24093: LD_ADDR_VAR 0 1
24097: PUSH
24098: LD_VAR 0 2
24102: PUSH
24103: FOR_IN
24104: IFFALSE 24120
// begin SetLives ( i , 0 ) ;
24106: LD_VAR 0 1
24110: PPUSH
24111: LD_INT 0
24113: PPUSH
24114: CALL_OW 234
// end ;
24118: GO 24103
24120: POP
24121: POP
// end ;
24122: PPOPN 2
24124: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24125: LD_EXP 66
24129: PUSH
24130: LD_EXP 72
24134: AND
24135: IFFALSE 24219
24137: GO 24139
24139: DISABLE
24140: LD_INT 0
24142: PPUSH
24143: PPUSH
// begin enable ;
24144: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24145: LD_ADDR_VAR 0 2
24149: PUSH
24150: LD_INT 22
24152: PUSH
24153: LD_OWVAR 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 32
24164: PUSH
24165: LD_INT 3
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PPUSH
24176: CALL_OW 69
24180: ST_TO_ADDR
// if not tmp then
24181: LD_VAR 0 2
24185: NOT
24186: IFFALSE 24190
// exit ;
24188: GO 24219
// for i in tmp do
24190: LD_ADDR_VAR 0 1
24194: PUSH
24195: LD_VAR 0 2
24199: PUSH
24200: FOR_IN
24201: IFFALSE 24217
// begin SetLives ( i , 0 ) ;
24203: LD_VAR 0 1
24207: PPUSH
24208: LD_INT 0
24210: PPUSH
24211: CALL_OW 234
// end ;
24215: GO 24200
24217: POP
24218: POP
// end ;
24219: PPOPN 2
24221: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24222: LD_EXP 66
24226: PUSH
24227: LD_EXP 69
24231: AND
24232: IFFALSE 24325
24234: GO 24236
24236: DISABLE
24237: LD_INT 0
24239: PPUSH
// begin enable ;
24240: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24241: LD_ADDR_VAR 0 1
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_OWVAR 2
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: LD_INT 25
24263: PUSH
24264: LD_INT 5
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 25
24273: PUSH
24274: LD_INT 9
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 25
24283: PUSH
24284: LD_INT 8
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PPUSH
24301: CALL_OW 69
24305: PUSH
24306: FOR_IN
24307: IFFALSE 24323
// begin SetClass ( i , 1 ) ;
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 1
24316: PPUSH
24317: CALL_OW 336
// end ;
24321: GO 24306
24323: POP
24324: POP
// end ;
24325: PPOPN 1
24327: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24328: LD_EXP 66
24332: PUSH
24333: LD_EXP 70
24337: AND
24338: PUSH
24339: LD_OWVAR 65
24343: PUSH
24344: LD_INT 7
24346: LESS
24347: AND
24348: IFFALSE 24362
24350: GO 24352
24352: DISABLE
// begin enable ;
24353: ENABLE
// game_speed := 7 ;
24354: LD_ADDR_OWVAR 65
24358: PUSH
24359: LD_INT 7
24361: ST_TO_ADDR
// end ;
24362: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24363: LD_EXP 66
24367: PUSH
24368: LD_EXP 73
24372: AND
24373: IFFALSE 24575
24375: GO 24377
24377: DISABLE
24378: LD_INT 0
24380: PPUSH
24381: PPUSH
24382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_INT 81
24390: PUSH
24391: LD_OWVAR 2
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PPUSH
24414: CALL_OW 69
24418: ST_TO_ADDR
// if not tmp then
24419: LD_VAR 0 3
24423: NOT
24424: IFFALSE 24428
// exit ;
24426: GO 24575
// if tmp > 5 then
24428: LD_VAR 0 3
24432: PUSH
24433: LD_INT 5
24435: GREATER
24436: IFFALSE 24448
// k := 5 else
24438: LD_ADDR_VAR 0 2
24442: PUSH
24443: LD_INT 5
24445: ST_TO_ADDR
24446: GO 24458
// k := tmp ;
24448: LD_ADDR_VAR 0 2
24452: PUSH
24453: LD_VAR 0 3
24457: ST_TO_ADDR
// for i := 1 to k do
24458: LD_ADDR_VAR 0 1
24462: PUSH
24463: DOUBLE
24464: LD_INT 1
24466: DEC
24467: ST_TO_ADDR
24468: LD_VAR 0 2
24472: PUSH
24473: FOR_TO
24474: IFFALSE 24573
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24476: LD_VAR 0 3
24480: PUSH
24481: LD_VAR 0 1
24485: ARRAY
24486: PPUSH
24487: LD_VAR 0 1
24491: PUSH
24492: LD_INT 4
24494: MOD
24495: PUSH
24496: LD_INT 1
24498: PLUS
24499: PPUSH
24500: CALL_OW 259
24504: PUSH
24505: LD_INT 10
24507: LESS
24508: IFFALSE 24571
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24510: LD_VAR 0 3
24514: PUSH
24515: LD_VAR 0 1
24519: ARRAY
24520: PPUSH
24521: LD_VAR 0 1
24525: PUSH
24526: LD_INT 4
24528: MOD
24529: PUSH
24530: LD_INT 1
24532: PLUS
24533: PPUSH
24534: LD_VAR 0 3
24538: PUSH
24539: LD_VAR 0 1
24543: ARRAY
24544: PPUSH
24545: LD_VAR 0 1
24549: PUSH
24550: LD_INT 4
24552: MOD
24553: PUSH
24554: LD_INT 1
24556: PLUS
24557: PPUSH
24558: CALL_OW 259
24562: PUSH
24563: LD_INT 1
24565: PLUS
24566: PPUSH
24567: CALL_OW 237
24571: GO 24473
24573: POP
24574: POP
// end ;
24575: PPOPN 3
24577: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24578: LD_EXP 66
24582: PUSH
24583: LD_EXP 74
24587: AND
24588: IFFALSE 24608
24590: GO 24592
24592: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24593: LD_INT 4
24595: PPUSH
24596: LD_OWVAR 2
24600: PPUSH
24601: LD_INT 0
24603: PPUSH
24604: CALL_OW 324
24608: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24609: LD_EXP 66
24613: PUSH
24614: LD_EXP 103
24618: AND
24619: IFFALSE 24639
24621: GO 24623
24623: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24624: LD_INT 19
24626: PPUSH
24627: LD_OWVAR 2
24631: PPUSH
24632: LD_INT 0
24634: PPUSH
24635: CALL_OW 324
24639: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24640: LD_EXP 66
24644: PUSH
24645: LD_EXP 75
24649: AND
24650: IFFALSE 24752
24652: GO 24654
24654: DISABLE
24655: LD_INT 0
24657: PPUSH
24658: PPUSH
// begin enable ;
24659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24660: LD_ADDR_VAR 0 2
24664: PUSH
24665: LD_INT 22
24667: PUSH
24668: LD_OWVAR 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 34
24682: PUSH
24683: LD_INT 11
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 34
24692: PUSH
24693: LD_INT 30
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: CALL_OW 69
24713: ST_TO_ADDR
// if not tmp then
24714: LD_VAR 0 2
24718: NOT
24719: IFFALSE 24723
// exit ;
24721: GO 24752
// for i in tmp do
24723: LD_ADDR_VAR 0 1
24727: PUSH
24728: LD_VAR 0 2
24732: PUSH
24733: FOR_IN
24734: IFFALSE 24750
// begin SetLives ( i , 0 ) ;
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_INT 0
24743: PPUSH
24744: CALL_OW 234
// end ;
24748: GO 24733
24750: POP
24751: POP
// end ;
24752: PPOPN 2
24754: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24755: LD_EXP 66
24759: PUSH
24760: LD_EXP 76
24764: AND
24765: IFFALSE 24785
24767: GO 24769
24769: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24770: LD_INT 32
24772: PPUSH
24773: LD_OWVAR 2
24777: PPUSH
24778: LD_INT 0
24780: PPUSH
24781: CALL_OW 324
24785: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24786: LD_EXP 66
24790: PUSH
24791: LD_EXP 77
24795: AND
24796: IFFALSE 24977
24798: GO 24800
24800: DISABLE
24801: LD_INT 0
24803: PPUSH
24804: PPUSH
24805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24806: LD_ADDR_VAR 0 2
24810: PUSH
24811: LD_INT 22
24813: PUSH
24814: LD_OWVAR 2
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 33
24825: PUSH
24826: LD_INT 3
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 69
24841: ST_TO_ADDR
// if not tmp then
24842: LD_VAR 0 2
24846: NOT
24847: IFFALSE 24851
// exit ;
24849: GO 24977
// side := 0 ;
24851: LD_ADDR_VAR 0 3
24855: PUSH
24856: LD_INT 0
24858: ST_TO_ADDR
// for i := 1 to 8 do
24859: LD_ADDR_VAR 0 1
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_INT 8
24871: PUSH
24872: FOR_TO
24873: IFFALSE 24921
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24875: LD_OWVAR 2
24879: PUSH
24880: LD_VAR 0 1
24884: NONEQUAL
24885: PUSH
24886: LD_OWVAR 2
24890: PPUSH
24891: LD_VAR 0 1
24895: PPUSH
24896: CALL_OW 81
24900: PUSH
24901: LD_INT 2
24903: EQUAL
24904: AND
24905: IFFALSE 24919
// begin side := i ;
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_VAR 0 1
24916: ST_TO_ADDR
// break ;
24917: GO 24921
// end ;
24919: GO 24872
24921: POP
24922: POP
// if not side then
24923: LD_VAR 0 3
24927: NOT
24928: IFFALSE 24932
// exit ;
24930: GO 24977
// for i := 1 to tmp do
24932: LD_ADDR_VAR 0 1
24936: PUSH
24937: DOUBLE
24938: LD_INT 1
24940: DEC
24941: ST_TO_ADDR
24942: LD_VAR 0 2
24946: PUSH
24947: FOR_TO
24948: IFFALSE 24975
// if Prob ( 60 ) then
24950: LD_INT 60
24952: PPUSH
24953: CALL_OW 13
24957: IFFALSE 24973
// SetSide ( i , side ) ;
24959: LD_VAR 0 1
24963: PPUSH
24964: LD_VAR 0 3
24968: PPUSH
24969: CALL_OW 235
24973: GO 24947
24975: POP
24976: POP
// end ;
24977: PPOPN 3
24979: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24980: LD_EXP 66
24984: PUSH
24985: LD_EXP 79
24989: AND
24990: IFFALSE 25109
24992: GO 24994
24994: DISABLE
24995: LD_INT 0
24997: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24998: LD_ADDR_VAR 0 1
25002: PUSH
25003: LD_INT 22
25005: PUSH
25006: LD_OWVAR 2
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: LD_INT 23
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: PPUSH
25047: CALL_OW 69
25051: PUSH
25052: FOR_IN
25053: IFFALSE 25107
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 257
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 4
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: IN
25083: IFFALSE 25105
// SetClass ( un , rand ( 1 , 4 ) ) ;
25085: LD_VAR 0 1
25089: PPUSH
25090: LD_INT 1
25092: PPUSH
25093: LD_INT 4
25095: PPUSH
25096: CALL_OW 12
25100: PPUSH
25101: CALL_OW 336
25105: GO 25052
25107: POP
25108: POP
// end ;
25109: PPOPN 1
25111: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25112: LD_EXP 66
25116: PUSH
25117: LD_EXP 78
25121: AND
25122: IFFALSE 25201
25124: GO 25126
25126: DISABLE
25127: LD_INT 0
25129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25130: LD_ADDR_VAR 0 1
25134: PUSH
25135: LD_INT 22
25137: PUSH
25138: LD_OWVAR 2
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 21
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PPUSH
25161: CALL_OW 69
25165: ST_TO_ADDR
// if not tmp then
25166: LD_VAR 0 1
25170: NOT
25171: IFFALSE 25175
// exit ;
25173: GO 25201
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25175: LD_VAR 0 1
25179: PUSH
25180: LD_INT 1
25182: PPUSH
25183: LD_VAR 0 1
25187: PPUSH
25188: CALL_OW 12
25192: ARRAY
25193: PPUSH
25194: LD_INT 100
25196: PPUSH
25197: CALL_OW 234
// end ;
25201: PPOPN 1
25203: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25204: LD_EXP 66
25208: PUSH
25209: LD_EXP 80
25213: AND
25214: IFFALSE 25312
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25222: LD_ADDR_VAR 0 1
25226: PUSH
25227: LD_INT 22
25229: PUSH
25230: LD_OWVAR 2
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 21
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PPUSH
25253: CALL_OW 69
25257: ST_TO_ADDR
// if not tmp then
25258: LD_VAR 0 1
25262: NOT
25263: IFFALSE 25267
// exit ;
25265: GO 25312
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25267: LD_VAR 0 1
25271: PUSH
25272: LD_INT 1
25274: PPUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 12
25284: ARRAY
25285: PPUSH
25286: LD_INT 1
25288: PPUSH
25289: LD_INT 4
25291: PPUSH
25292: CALL_OW 12
25296: PPUSH
25297: LD_INT 3000
25299: PPUSH
25300: LD_INT 9000
25302: PPUSH
25303: CALL_OW 12
25307: PPUSH
25308: CALL_OW 492
// end ;
25312: PPOPN 1
25314: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25315: LD_EXP 66
25319: PUSH
25320: LD_EXP 81
25324: AND
25325: IFFALSE 25345
25327: GO 25329
25329: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25330: LD_INT 1
25332: PPUSH
25333: LD_OWVAR 2
25337: PPUSH
25338: LD_INT 0
25340: PPUSH
25341: CALL_OW 324
25345: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25346: LD_EXP 66
25350: PUSH
25351: LD_EXP 82
25355: AND
25356: IFFALSE 25439
25358: GO 25360
25360: DISABLE
25361: LD_INT 0
25363: PPUSH
25364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_INT 22
25372: PUSH
25373: LD_OWVAR 2
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 21
25384: PUSH
25385: LD_INT 3
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PPUSH
25396: CALL_OW 69
25400: ST_TO_ADDR
// if not tmp then
25401: LD_VAR 0 2
25405: NOT
25406: IFFALSE 25410
// exit ;
25408: GO 25439
// for i in tmp do
25410: LD_ADDR_VAR 0 1
25414: PUSH
25415: LD_VAR 0 2
25419: PUSH
25420: FOR_IN
25421: IFFALSE 25437
// SetBLevel ( i , 10 ) ;
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_INT 10
25430: PPUSH
25431: CALL_OW 241
25435: GO 25420
25437: POP
25438: POP
// end ;
25439: PPOPN 2
25441: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25442: LD_EXP 66
25446: PUSH
25447: LD_EXP 83
25451: AND
25452: IFFALSE 25563
25454: GO 25456
25456: DISABLE
25457: LD_INT 0
25459: PPUSH
25460: PPUSH
25461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25462: LD_ADDR_VAR 0 3
25466: PUSH
25467: LD_INT 22
25469: PUSH
25470: LD_OWVAR 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 25
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PPUSH
25493: CALL_OW 69
25497: ST_TO_ADDR
// if not tmp then
25498: LD_VAR 0 3
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25563
// un := tmp [ rand ( 1 , tmp ) ] ;
25507: LD_ADDR_VAR 0 2
25511: PUSH
25512: LD_VAR 0 3
25516: PUSH
25517: LD_INT 1
25519: PPUSH
25520: LD_VAR 0 3
25524: PPUSH
25525: CALL_OW 12
25529: ARRAY
25530: ST_TO_ADDR
// if Crawls ( un ) then
25531: LD_VAR 0 2
25535: PPUSH
25536: CALL_OW 318
25540: IFFALSE 25551
// ComWalk ( un ) ;
25542: LD_VAR 0 2
25546: PPUSH
25547: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 5
25558: PPUSH
25559: CALL_OW 336
// end ;
25563: PPOPN 3
25565: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25566: LD_EXP 66
25570: PUSH
25571: LD_EXP 84
25575: AND
25576: PUSH
25577: LD_OWVAR 67
25581: PUSH
25582: LD_INT 4
25584: LESS
25585: AND
25586: IFFALSE 25605
25588: GO 25590
25590: DISABLE
// begin Difficulty := Difficulty + 1 ;
25591: LD_ADDR_OWVAR 67
25595: PUSH
25596: LD_OWVAR 67
25600: PUSH
25601: LD_INT 1
25603: PLUS
25604: ST_TO_ADDR
// end ;
25605: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25606: LD_EXP 66
25610: PUSH
25611: LD_EXP 85
25615: AND
25616: IFFALSE 25719
25618: GO 25620
25620: DISABLE
25621: LD_INT 0
25623: PPUSH
// begin for i := 1 to 5 do
25624: LD_ADDR_VAR 0 1
25628: PUSH
25629: DOUBLE
25630: LD_INT 1
25632: DEC
25633: ST_TO_ADDR
25634: LD_INT 5
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25717
// begin uc_nation := nation_nature ;
25640: LD_ADDR_OWVAR 21
25644: PUSH
25645: LD_INT 0
25647: ST_TO_ADDR
// uc_side := 0 ;
25648: LD_ADDR_OWVAR 20
25652: PUSH
25653: LD_INT 0
25655: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25656: LD_ADDR_OWVAR 29
25660: PUSH
25661: LD_INT 12
25663: PUSH
25664: LD_INT 12
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: ST_TO_ADDR
// hc_agressivity := 20 ;
25671: LD_ADDR_OWVAR 35
25675: PUSH
25676: LD_INT 20
25678: ST_TO_ADDR
// hc_class := class_tiger ;
25679: LD_ADDR_OWVAR 28
25683: PUSH
25684: LD_INT 14
25686: ST_TO_ADDR
// hc_gallery :=  ;
25687: LD_ADDR_OWVAR 33
25691: PUSH
25692: LD_STRING 
25694: ST_TO_ADDR
// hc_name :=  ;
25695: LD_ADDR_OWVAR 26
25699: PUSH
25700: LD_STRING 
25702: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25703: CALL_OW 44
25707: PPUSH
25708: LD_INT 0
25710: PPUSH
25711: CALL_OW 51
// end ;
25715: GO 25637
25717: POP
25718: POP
// end ;
25719: PPOPN 1
25721: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25722: LD_EXP 66
25726: PUSH
25727: LD_EXP 86
25731: AND
25732: IFFALSE 25741
25734: GO 25736
25736: DISABLE
// StreamSibBomb ;
25737: CALL 25742 0 0
25741: END
// export function StreamSibBomb ; var i , x , y ; begin
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
// result := false ;
25748: LD_ADDR_VAR 0 1
25752: PUSH
25753: LD_INT 0
25755: ST_TO_ADDR
// for i := 1 to 16 do
25756: LD_ADDR_VAR 0 2
25760: PUSH
25761: DOUBLE
25762: LD_INT 1
25764: DEC
25765: ST_TO_ADDR
25766: LD_INT 16
25768: PUSH
25769: FOR_TO
25770: IFFALSE 25969
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25772: LD_ADDR_VAR 0 3
25776: PUSH
25777: LD_INT 10
25779: PUSH
25780: LD_INT 20
25782: PUSH
25783: LD_INT 30
25785: PUSH
25786: LD_INT 40
25788: PUSH
25789: LD_INT 50
25791: PUSH
25792: LD_INT 60
25794: PUSH
25795: LD_INT 70
25797: PUSH
25798: LD_INT 80
25800: PUSH
25801: LD_INT 90
25803: PUSH
25804: LD_INT 100
25806: PUSH
25807: LD_INT 110
25809: PUSH
25810: LD_INT 120
25812: PUSH
25813: LD_INT 130
25815: PUSH
25816: LD_INT 140
25818: PUSH
25819: LD_INT 150
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: PPUSH
25842: LD_INT 15
25844: PPUSH
25845: CALL_OW 12
25849: ARRAY
25850: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25851: LD_ADDR_VAR 0 4
25855: PUSH
25856: LD_INT 10
25858: PUSH
25859: LD_INT 20
25861: PUSH
25862: LD_INT 30
25864: PUSH
25865: LD_INT 40
25867: PUSH
25868: LD_INT 50
25870: PUSH
25871: LD_INT 60
25873: PUSH
25874: LD_INT 70
25876: PUSH
25877: LD_INT 80
25879: PUSH
25880: LD_INT 90
25882: PUSH
25883: LD_INT 100
25885: PUSH
25886: LD_INT 110
25888: PUSH
25889: LD_INT 120
25891: PUSH
25892: LD_INT 130
25894: PUSH
25895: LD_INT 140
25897: PUSH
25898: LD_INT 150
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PPUSH
25921: LD_INT 15
25923: PPUSH
25924: CALL_OW 12
25928: ARRAY
25929: ST_TO_ADDR
// if ValidHex ( x , y ) then
25930: LD_VAR 0 3
25934: PPUSH
25935: LD_VAR 0 4
25939: PPUSH
25940: CALL_OW 488
25944: IFFALSE 25967
// begin result := [ x , y ] ;
25946: LD_ADDR_VAR 0 1
25950: PUSH
25951: LD_VAR 0 3
25955: PUSH
25956: LD_VAR 0 4
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: ST_TO_ADDR
// break ;
25965: GO 25969
// end ; end ;
25967: GO 25769
25969: POP
25970: POP
// if result then
25971: LD_VAR 0 1
25975: IFFALSE 26035
// begin ToLua ( playSibBomb() ) ;
25977: LD_STRING playSibBomb()
25979: PPUSH
25980: CALL_OW 559
// wait ( 0 0$14 ) ;
25984: LD_INT 490
25986: PPUSH
25987: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25991: LD_VAR 0 1
25995: PUSH
25996: LD_INT 1
25998: ARRAY
25999: PPUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 2
26007: ARRAY
26008: PPUSH
26009: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26013: LD_VAR 0 1
26017: PUSH
26018: LD_INT 1
26020: ARRAY
26021: PPUSH
26022: LD_VAR 0 1
26026: PUSH
26027: LD_INT 2
26029: ARRAY
26030: PPUSH
26031: CALL_OW 429
// end ; end ;
26035: LD_VAR 0 1
26039: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26040: LD_EXP 66
26044: PUSH
26045: LD_EXP 88
26049: AND
26050: IFFALSE 26062
26052: GO 26054
26054: DISABLE
// YouLost (  ) ;
26055: LD_STRING 
26057: PPUSH
26058: CALL_OW 104
26062: END
// every 0 0$1 trigger StreamModeActive and sFog do
26063: LD_EXP 66
26067: PUSH
26068: LD_EXP 87
26072: AND
26073: IFFALSE 26087
26075: GO 26077
26077: DISABLE
// FogOff ( your_side ) ;
26078: LD_OWVAR 2
26082: PPUSH
26083: CALL_OW 344
26087: END
// every 0 0$1 trigger StreamModeActive and sSun do
26088: LD_EXP 66
26092: PUSH
26093: LD_EXP 89
26097: AND
26098: IFFALSE 26126
26100: GO 26102
26102: DISABLE
// begin solar_recharge_percent := 0 ;
26103: LD_ADDR_OWVAR 79
26107: PUSH
26108: LD_INT 0
26110: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26111: LD_INT 10500
26113: PPUSH
26114: CALL_OW 67
// solar_recharge_percent := 100 ;
26118: LD_ADDR_OWVAR 79
26122: PUSH
26123: LD_INT 100
26125: ST_TO_ADDR
// end ;
26126: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26127: LD_EXP 66
26131: PUSH
26132: LD_EXP 90
26136: AND
26137: IFFALSE 26376
26139: GO 26141
26141: DISABLE
26142: LD_INT 0
26144: PPUSH
26145: PPUSH
26146: PPUSH
// begin tmp := [ ] ;
26147: LD_ADDR_VAR 0 3
26151: PUSH
26152: EMPTY
26153: ST_TO_ADDR
// for i := 1 to 6 do
26154: LD_ADDR_VAR 0 1
26158: PUSH
26159: DOUBLE
26160: LD_INT 1
26162: DEC
26163: ST_TO_ADDR
26164: LD_INT 6
26166: PUSH
26167: FOR_TO
26168: IFFALSE 26273
// begin uc_nation := nation_nature ;
26170: LD_ADDR_OWVAR 21
26174: PUSH
26175: LD_INT 0
26177: ST_TO_ADDR
// uc_side := 0 ;
26178: LD_ADDR_OWVAR 20
26182: PUSH
26183: LD_INT 0
26185: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26186: LD_ADDR_OWVAR 29
26190: PUSH
26191: LD_INT 12
26193: PUSH
26194: LD_INT 12
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: ST_TO_ADDR
// hc_agressivity := 20 ;
26201: LD_ADDR_OWVAR 35
26205: PUSH
26206: LD_INT 20
26208: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26209: LD_ADDR_OWVAR 28
26213: PUSH
26214: LD_INT 17
26216: ST_TO_ADDR
// hc_gallery :=  ;
26217: LD_ADDR_OWVAR 33
26221: PUSH
26222: LD_STRING 
26224: ST_TO_ADDR
// hc_name :=  ;
26225: LD_ADDR_OWVAR 26
26229: PUSH
26230: LD_STRING 
26232: ST_TO_ADDR
// un := CreateHuman ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: CALL_OW 44
26242: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26243: LD_VAR 0 2
26247: PPUSH
26248: LD_INT 1
26250: PPUSH
26251: CALL_OW 51
// tmp := tmp ^ un ;
26255: LD_ADDR_VAR 0 3
26259: PUSH
26260: LD_VAR 0 3
26264: PUSH
26265: LD_VAR 0 2
26269: ADD
26270: ST_TO_ADDR
// end ;
26271: GO 26167
26273: POP
26274: POP
// repeat wait ( 0 0$1 ) ;
26275: LD_INT 35
26277: PPUSH
26278: CALL_OW 67
// for un in tmp do
26282: LD_ADDR_VAR 0 2
26286: PUSH
26287: LD_VAR 0 3
26291: PUSH
26292: FOR_IN
26293: IFFALSE 26367
// begin if IsDead ( un ) then
26295: LD_VAR 0 2
26299: PPUSH
26300: CALL_OW 301
26304: IFFALSE 26324
// begin tmp := tmp diff un ;
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: LD_VAR 0 3
26315: PUSH
26316: LD_VAR 0 2
26320: DIFF
26321: ST_TO_ADDR
// continue ;
26322: GO 26292
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26324: LD_VAR 0 2
26328: PPUSH
26329: LD_INT 3
26331: PUSH
26332: LD_INT 22
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PPUSH
26346: CALL_OW 69
26350: PPUSH
26351: LD_VAR 0 2
26355: PPUSH
26356: CALL_OW 74
26360: PPUSH
26361: CALL_OW 115
// end ;
26365: GO 26292
26367: POP
26368: POP
// until not tmp ;
26369: LD_VAR 0 3
26373: NOT
26374: IFFALSE 26275
// end ;
26376: PPOPN 3
26378: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26379: LD_EXP 66
26383: PUSH
26384: LD_EXP 91
26388: AND
26389: IFFALSE 26443
26391: GO 26393
26393: DISABLE
// begin ToLua ( displayTroll(); ) ;
26394: LD_STRING displayTroll();
26396: PPUSH
26397: CALL_OW 559
// wait ( 3 3$00 ) ;
26401: LD_INT 6300
26403: PPUSH
26404: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26408: LD_STRING hideTroll();
26410: PPUSH
26411: CALL_OW 559
// wait ( 1 1$00 ) ;
26415: LD_INT 2100
26417: PPUSH
26418: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26422: LD_STRING displayTroll();
26424: PPUSH
26425: CALL_OW 559
// wait ( 1 1$00 ) ;
26429: LD_INT 2100
26431: PPUSH
26432: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26436: LD_STRING hideTroll();
26438: PPUSH
26439: CALL_OW 559
// end ;
26443: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26444: LD_EXP 66
26448: PUSH
26449: LD_EXP 92
26453: AND
26454: IFFALSE 26517
26456: GO 26458
26458: DISABLE
26459: LD_INT 0
26461: PPUSH
// begin p := 0 ;
26462: LD_ADDR_VAR 0 1
26466: PUSH
26467: LD_INT 0
26469: ST_TO_ADDR
// repeat game_speed := 1 ;
26470: LD_ADDR_OWVAR 65
26474: PUSH
26475: LD_INT 1
26477: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26478: LD_INT 35
26480: PPUSH
26481: CALL_OW 67
// p := p + 1 ;
26485: LD_ADDR_VAR 0 1
26489: PUSH
26490: LD_VAR 0 1
26494: PUSH
26495: LD_INT 1
26497: PLUS
26498: ST_TO_ADDR
// until p >= 60 ;
26499: LD_VAR 0 1
26503: PUSH
26504: LD_INT 60
26506: GREATEREQUAL
26507: IFFALSE 26470
// game_speed := 4 ;
26509: LD_ADDR_OWVAR 65
26513: PUSH
26514: LD_INT 4
26516: ST_TO_ADDR
// end ;
26517: PPOPN 1
26519: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26520: LD_EXP 66
26524: PUSH
26525: LD_EXP 93
26529: AND
26530: IFFALSE 26676
26532: GO 26534
26534: DISABLE
26535: LD_INT 0
26537: PPUSH
26538: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26539: LD_ADDR_VAR 0 1
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_OWVAR 2
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 30
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 30
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PPUSH
26588: CALL_OW 69
26592: ST_TO_ADDR
// if not depot then
26593: LD_VAR 0 1
26597: NOT
26598: IFFALSE 26602
// exit ;
26600: GO 26676
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26602: LD_ADDR_VAR 0 2
26606: PUSH
26607: LD_VAR 0 1
26611: PUSH
26612: LD_INT 1
26614: PPUSH
26615: LD_VAR 0 1
26619: PPUSH
26620: CALL_OW 12
26624: ARRAY
26625: PPUSH
26626: CALL_OW 274
26630: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_INT 1
26638: PPUSH
26639: LD_INT 0
26641: PPUSH
26642: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26646: LD_VAR 0 2
26650: PPUSH
26651: LD_INT 2
26653: PPUSH
26654: LD_INT 0
26656: PPUSH
26657: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26661: LD_VAR 0 2
26665: PPUSH
26666: LD_INT 3
26668: PPUSH
26669: LD_INT 0
26671: PPUSH
26672: CALL_OW 277
// end ;
26676: PPOPN 2
26678: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26679: LD_EXP 66
26683: PUSH
26684: LD_EXP 94
26688: AND
26689: IFFALSE 26786
26691: GO 26693
26693: DISABLE
26694: LD_INT 0
26696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26697: LD_ADDR_VAR 0 1
26701: PUSH
26702: LD_INT 22
26704: PUSH
26705: LD_OWVAR 2
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 21
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 3
26726: PUSH
26727: LD_INT 23
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: PPUSH
26746: CALL_OW 69
26750: ST_TO_ADDR
// if not tmp then
26751: LD_VAR 0 1
26755: NOT
26756: IFFALSE 26760
// exit ;
26758: GO 26786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26760: LD_VAR 0 1
26764: PUSH
26765: LD_INT 1
26767: PPUSH
26768: LD_VAR 0 1
26772: PPUSH
26773: CALL_OW 12
26777: ARRAY
26778: PPUSH
26779: LD_INT 200
26781: PPUSH
26782: CALL_OW 234
// end ;
26786: PPOPN 1
26788: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26789: LD_EXP 66
26793: PUSH
26794: LD_EXP 95
26798: AND
26799: IFFALSE 26878
26801: GO 26803
26803: DISABLE
26804: LD_INT 0
26806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26807: LD_ADDR_VAR 0 1
26811: PUSH
26812: LD_INT 22
26814: PUSH
26815: LD_OWVAR 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 21
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PPUSH
26838: CALL_OW 69
26842: ST_TO_ADDR
// if not tmp then
26843: LD_VAR 0 1
26847: NOT
26848: IFFALSE 26852
// exit ;
26850: GO 26878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26852: LD_VAR 0 1
26856: PUSH
26857: LD_INT 1
26859: PPUSH
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 12
26869: ARRAY
26870: PPUSH
26871: LD_INT 60
26873: PPUSH
26874: CALL_OW 234
// end ;
26878: PPOPN 1
26880: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26881: LD_EXP 66
26885: PUSH
26886: LD_EXP 96
26890: AND
26891: IFFALSE 26990
26893: GO 26895
26895: DISABLE
26896: LD_INT 0
26898: PPUSH
26899: PPUSH
// begin enable ;
26900: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26901: LD_ADDR_VAR 0 1
26905: PUSH
26906: LD_INT 22
26908: PUSH
26909: LD_OWVAR 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 61
26920: PUSH
26921: EMPTY
26922: LIST
26923: PUSH
26924: LD_INT 33
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: PPUSH
26939: CALL_OW 69
26943: ST_TO_ADDR
// if not tmp then
26944: LD_VAR 0 1
26948: NOT
26949: IFFALSE 26953
// exit ;
26951: GO 26990
// for i in tmp do
26953: LD_ADDR_VAR 0 2
26957: PUSH
26958: LD_VAR 0 1
26962: PUSH
26963: FOR_IN
26964: IFFALSE 26988
// if IsControledBy ( i ) then
26966: LD_VAR 0 2
26970: PPUSH
26971: CALL_OW 312
26975: IFFALSE 26986
// ComUnlink ( i ) ;
26977: LD_VAR 0 2
26981: PPUSH
26982: CALL_OW 136
26986: GO 26963
26988: POP
26989: POP
// end ;
26990: PPOPN 2
26992: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26993: LD_EXP 66
26997: PUSH
26998: LD_EXP 97
27002: AND
27003: IFFALSE 27143
27005: GO 27007
27007: DISABLE
27008: LD_INT 0
27010: PPUSH
27011: PPUSH
// begin ToLua ( displayPowell(); ) ;
27012: LD_STRING displayPowell();
27014: PPUSH
27015: CALL_OW 559
// uc_side := 0 ;
27019: LD_ADDR_OWVAR 20
27023: PUSH
27024: LD_INT 0
27026: ST_TO_ADDR
// uc_nation := 2 ;
27027: LD_ADDR_OWVAR 21
27031: PUSH
27032: LD_INT 2
27034: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27035: LD_ADDR_OWVAR 37
27039: PUSH
27040: LD_INT 14
27042: ST_TO_ADDR
// vc_engine := engine_siberite ;
27043: LD_ADDR_OWVAR 39
27047: PUSH
27048: LD_INT 3
27050: ST_TO_ADDR
// vc_control := control_apeman ;
27051: LD_ADDR_OWVAR 38
27055: PUSH
27056: LD_INT 5
27058: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27059: LD_ADDR_OWVAR 40
27063: PUSH
27064: LD_INT 29
27066: ST_TO_ADDR
// un := CreateVehicle ;
27067: LD_ADDR_VAR 0 2
27071: PUSH
27072: CALL_OW 45
27076: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27077: LD_VAR 0 2
27081: PPUSH
27082: LD_INT 1
27084: PPUSH
27085: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27089: LD_INT 35
27091: PPUSH
27092: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27096: LD_VAR 0 2
27100: PPUSH
27101: LD_INT 22
27103: PUSH
27104: LD_OWVAR 2
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PPUSH
27113: CALL_OW 69
27117: PPUSH
27118: LD_VAR 0 2
27122: PPUSH
27123: CALL_OW 74
27127: PPUSH
27128: CALL_OW 115
// until IsDead ( un ) ;
27132: LD_VAR 0 2
27136: PPUSH
27137: CALL_OW 301
27141: IFFALSE 27089
// end ;
27143: PPOPN 2
27145: END
// every 0 0$1 trigger StreamModeActive and sStu do
27146: LD_EXP 66
27150: PUSH
27151: LD_EXP 105
27155: AND
27156: IFFALSE 27172
27158: GO 27160
27160: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27161: LD_STRING displayStucuk();
27163: PPUSH
27164: CALL_OW 559
// ResetFog ;
27168: CALL_OW 335
// end ;
27172: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27173: LD_EXP 66
27177: PUSH
27178: LD_EXP 98
27182: AND
27183: IFFALSE 27324
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
27191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27192: LD_ADDR_VAR 0 2
27196: PUSH
27197: LD_INT 22
27199: PUSH
27200: LD_OWVAR 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 21
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PPUSH
27223: CALL_OW 69
27227: ST_TO_ADDR
// if not tmp then
27228: LD_VAR 0 2
27232: NOT
27233: IFFALSE 27237
// exit ;
27235: GO 27324
// un := tmp [ rand ( 1 , tmp ) ] ;
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_VAR 0 2
27246: PUSH
27247: LD_INT 1
27249: PPUSH
27250: LD_VAR 0 2
27254: PPUSH
27255: CALL_OW 12
27259: ARRAY
27260: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_INT 0
27268: PPUSH
27269: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27273: LD_VAR 0 1
27277: PPUSH
27278: LD_OWVAR 3
27282: PUSH
27283: LD_VAR 0 1
27287: DIFF
27288: PPUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 74
27298: PPUSH
27299: CALL_OW 115
// wait ( 0 0$20 ) ;
27303: LD_INT 700
27305: PPUSH
27306: CALL_OW 67
// SetSide ( un , your_side ) ;
27310: LD_VAR 0 1
27314: PPUSH
27315: LD_OWVAR 2
27319: PPUSH
27320: CALL_OW 235
// end ;
27324: PPOPN 2
27326: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27327: LD_EXP 66
27331: PUSH
27332: LD_EXP 99
27336: AND
27337: IFFALSE 27443
27339: GO 27341
27341: DISABLE
27342: LD_INT 0
27344: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27345: LD_ADDR_VAR 0 1
27349: PUSH
27350: LD_INT 22
27352: PUSH
27353: LD_OWVAR 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 30
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 30
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PPUSH
27394: CALL_OW 69
27398: ST_TO_ADDR
// if not depot then
27399: LD_VAR 0 1
27403: NOT
27404: IFFALSE 27408
// exit ;
27406: GO 27443
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27408: LD_VAR 0 1
27412: PUSH
27413: LD_INT 1
27415: ARRAY
27416: PPUSH
27417: CALL_OW 250
27421: PPUSH
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 1
27429: ARRAY
27430: PPUSH
27431: CALL_OW 251
27435: PPUSH
27436: LD_INT 70
27438: PPUSH
27439: CALL_OW 495
// end ;
27443: PPOPN 1
27445: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27446: LD_EXP 66
27450: PUSH
27451: LD_EXP 100
27455: AND
27456: IFFALSE 27667
27458: GO 27460
27460: DISABLE
27461: LD_INT 0
27463: PPUSH
27464: PPUSH
27465: PPUSH
27466: PPUSH
27467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27468: LD_ADDR_VAR 0 5
27472: PUSH
27473: LD_INT 22
27475: PUSH
27476: LD_OWVAR 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 21
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: ST_TO_ADDR
// if not tmp then
27504: LD_VAR 0 5
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27667
// for i in tmp do
27513: LD_ADDR_VAR 0 1
27517: PUSH
27518: LD_VAR 0 5
27522: PUSH
27523: FOR_IN
27524: IFFALSE 27665
// begin d := rand ( 0 , 5 ) ;
27526: LD_ADDR_VAR 0 4
27530: PUSH
27531: LD_INT 0
27533: PPUSH
27534: LD_INT 5
27536: PPUSH
27537: CALL_OW 12
27541: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 250
27556: PPUSH
27557: LD_VAR 0 4
27561: PPUSH
27562: LD_INT 3
27564: PPUSH
27565: LD_INT 12
27567: PPUSH
27568: CALL_OW 12
27572: PPUSH
27573: CALL_OW 272
27577: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27578: LD_ADDR_VAR 0 3
27582: PUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 251
27592: PPUSH
27593: LD_VAR 0 4
27597: PPUSH
27598: LD_INT 3
27600: PPUSH
27601: LD_INT 12
27603: PPUSH
27604: CALL_OW 12
27608: PPUSH
27609: CALL_OW 273
27613: ST_TO_ADDR
// if ValidHex ( x , y ) then
27614: LD_VAR 0 2
27618: PPUSH
27619: LD_VAR 0 3
27623: PPUSH
27624: CALL_OW 488
27628: IFFALSE 27663
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27630: LD_VAR 0 1
27634: PPUSH
27635: LD_VAR 0 2
27639: PPUSH
27640: LD_VAR 0 3
27644: PPUSH
27645: LD_INT 3
27647: PPUSH
27648: LD_INT 6
27650: PPUSH
27651: CALL_OW 12
27655: PPUSH
27656: LD_INT 1
27658: PPUSH
27659: CALL_OW 483
// end ;
27663: GO 27523
27665: POP
27666: POP
// end ;
27667: PPOPN 5
27669: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27670: LD_EXP 66
27674: PUSH
27675: LD_EXP 101
27679: AND
27680: IFFALSE 27774
27682: GO 27684
27684: DISABLE
27685: LD_INT 0
27687: PPUSH
27688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27689: LD_ADDR_VAR 0 2
27693: PUSH
27694: LD_INT 22
27696: PUSH
27697: LD_OWVAR 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 32
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 21
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: PPUSH
27731: CALL_OW 69
27735: ST_TO_ADDR
// if not tmp then
27736: LD_VAR 0 2
27740: NOT
27741: IFFALSE 27745
// exit ;
27743: GO 27774
// for i in tmp do
27745: LD_ADDR_VAR 0 1
27749: PUSH
27750: LD_VAR 0 2
27754: PUSH
27755: FOR_IN
27756: IFFALSE 27772
// SetFuel ( i , 0 ) ;
27758: LD_VAR 0 1
27762: PPUSH
27763: LD_INT 0
27765: PPUSH
27766: CALL_OW 240
27770: GO 27755
27772: POP
27773: POP
// end ;
27774: PPOPN 2
27776: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27777: LD_EXP 66
27781: PUSH
27782: LD_EXP 102
27786: AND
27787: IFFALSE 27853
27789: GO 27791
27791: DISABLE
27792: LD_INT 0
27794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27795: LD_ADDR_VAR 0 1
27799: PUSH
27800: LD_INT 22
27802: PUSH
27803: LD_OWVAR 2
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 30
27814: PUSH
27815: LD_INT 29
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: ST_TO_ADDR
// if not tmp then
27831: LD_VAR 0 1
27835: NOT
27836: IFFALSE 27840
// exit ;
27838: GO 27853
// DestroyUnit ( tmp [ 1 ] ) ;
27840: LD_VAR 0 1
27844: PUSH
27845: LD_INT 1
27847: ARRAY
27848: PPUSH
27849: CALL_OW 65
// end ;
27853: PPOPN 1
27855: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27856: LD_EXP 66
27860: PUSH
27861: LD_EXP 104
27865: AND
27866: IFFALSE 27995
27868: GO 27870
27870: DISABLE
27871: LD_INT 0
27873: PPUSH
// begin uc_side := 0 ;
27874: LD_ADDR_OWVAR 20
27878: PUSH
27879: LD_INT 0
27881: ST_TO_ADDR
// uc_nation := nation_arabian ;
27882: LD_ADDR_OWVAR 21
27886: PUSH
27887: LD_INT 2
27889: ST_TO_ADDR
// hc_gallery :=  ;
27890: LD_ADDR_OWVAR 33
27894: PUSH
27895: LD_STRING 
27897: ST_TO_ADDR
// hc_name :=  ;
27898: LD_ADDR_OWVAR 26
27902: PUSH
27903: LD_STRING 
27905: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27906: LD_INT 1
27908: PPUSH
27909: LD_INT 11
27911: PPUSH
27912: LD_INT 10
27914: PPUSH
27915: CALL_OW 380
// un := CreateHuman ;
27919: LD_ADDR_VAR 0 1
27923: PUSH
27924: CALL_OW 44
27928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27929: LD_VAR 0 1
27933: PPUSH
27934: LD_INT 1
27936: PPUSH
27937: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27941: LD_INT 35
27943: PPUSH
27944: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27948: LD_VAR 0 1
27952: PPUSH
27953: LD_INT 22
27955: PUSH
27956: LD_OWVAR 2
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: PPUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL_OW 74
27979: PPUSH
27980: CALL_OW 115
// until IsDead ( un ) ;
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 301
27993: IFFALSE 27941
// end ;
27995: PPOPN 1
27997: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27998: LD_EXP 66
28002: PUSH
28003: LD_EXP 106
28007: AND
28008: IFFALSE 28020
28010: GO 28012
28012: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28013: LD_STRING earthquake(getX(game), 0, 32)
28015: PPUSH
28016: CALL_OW 559
28020: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28021: LD_EXP 66
28025: PUSH
28026: LD_EXP 107
28030: AND
28031: IFFALSE 28122
28033: GO 28035
28035: DISABLE
28036: LD_INT 0
28038: PPUSH
// begin enable ;
28039: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28040: LD_ADDR_VAR 0 1
28044: PUSH
28045: LD_INT 22
28047: PUSH
28048: LD_OWVAR 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 33
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 69
28086: ST_TO_ADDR
// if not tmp then
28087: LD_VAR 0 1
28091: NOT
28092: IFFALSE 28096
// exit ;
28094: GO 28122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28096: LD_VAR 0 1
28100: PUSH
28101: LD_INT 1
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 12
28113: ARRAY
28114: PPUSH
28115: LD_INT 1
28117: PPUSH
28118: CALL_OW 234
// end ;
28122: PPOPN 1
28124: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28125: LD_EXP 66
28129: PUSH
28130: LD_EXP 108
28134: AND
28135: IFFALSE 28276
28137: GO 28139
28139: DISABLE
28140: LD_INT 0
28142: PPUSH
28143: PPUSH
28144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_INT 22
28152: PUSH
28153: LD_OWVAR 2
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 25
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PPUSH
28176: CALL_OW 69
28180: ST_TO_ADDR
// if not tmp then
28181: LD_VAR 0 3
28185: NOT
28186: IFFALSE 28190
// exit ;
28188: GO 28276
// un := tmp [ rand ( 1 , tmp ) ] ;
28190: LD_ADDR_VAR 0 2
28194: PUSH
28195: LD_VAR 0 3
28199: PUSH
28200: LD_INT 1
28202: PPUSH
28203: LD_VAR 0 3
28207: PPUSH
28208: CALL_OW 12
28212: ARRAY
28213: ST_TO_ADDR
// if Crawls ( un ) then
28214: LD_VAR 0 2
28218: PPUSH
28219: CALL_OW 318
28223: IFFALSE 28234
// ComWalk ( un ) ;
28225: LD_VAR 0 2
28229: PPUSH
28230: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28234: LD_VAR 0 2
28238: PPUSH
28239: LD_INT 9
28241: PPUSH
28242: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28246: LD_INT 28
28248: PPUSH
28249: LD_OWVAR 2
28253: PPUSH
28254: LD_INT 2
28256: PPUSH
28257: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28261: LD_INT 29
28263: PPUSH
28264: LD_OWVAR 2
28268: PPUSH
28269: LD_INT 2
28271: PPUSH
28272: CALL_OW 322
// end ;
28276: PPOPN 3
28278: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28279: LD_EXP 66
28283: PUSH
28284: LD_EXP 109
28288: AND
28289: IFFALSE 28400
28291: GO 28293
28293: DISABLE
28294: LD_INT 0
28296: PPUSH
28297: PPUSH
28298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28299: LD_ADDR_VAR 0 3
28303: PUSH
28304: LD_INT 22
28306: PUSH
28307: LD_OWVAR 2
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 25
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 69
28334: ST_TO_ADDR
// if not tmp then
28335: LD_VAR 0 3
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 28400
// un := tmp [ rand ( 1 , tmp ) ] ;
28344: LD_ADDR_VAR 0 2
28348: PUSH
28349: LD_VAR 0 3
28353: PUSH
28354: LD_INT 1
28356: PPUSH
28357: LD_VAR 0 3
28361: PPUSH
28362: CALL_OW 12
28366: ARRAY
28367: ST_TO_ADDR
// if Crawls ( un ) then
28368: LD_VAR 0 2
28372: PPUSH
28373: CALL_OW 318
28377: IFFALSE 28388
// ComWalk ( un ) ;
28379: LD_VAR 0 2
28383: PPUSH
28384: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28388: LD_VAR 0 2
28392: PPUSH
28393: LD_INT 8
28395: PPUSH
28396: CALL_OW 336
// end ;
28400: PPOPN 3
28402: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28403: LD_EXP 66
28407: PUSH
28408: LD_EXP 110
28412: AND
28413: IFFALSE 28557
28415: GO 28417
28417: DISABLE
28418: LD_INT 0
28420: PPUSH
28421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28422: LD_ADDR_VAR 0 2
28426: PUSH
28427: LD_INT 22
28429: PUSH
28430: LD_OWVAR 2
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 21
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 34
28454: PUSH
28455: LD_INT 12
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 34
28464: PUSH
28465: LD_INT 51
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 34
28474: PUSH
28475: LD_INT 32
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: PPUSH
28493: CALL_OW 69
28497: ST_TO_ADDR
// if not tmp then
28498: LD_VAR 0 2
28502: NOT
28503: IFFALSE 28507
// exit ;
28505: GO 28557
// for i in tmp do
28507: LD_ADDR_VAR 0 1
28511: PUSH
28512: LD_VAR 0 2
28516: PUSH
28517: FOR_IN
28518: IFFALSE 28555
// if GetCargo ( i , mat_artifact ) = 0 then
28520: LD_VAR 0 1
28524: PPUSH
28525: LD_INT 4
28527: PPUSH
28528: CALL_OW 289
28532: PUSH
28533: LD_INT 0
28535: EQUAL
28536: IFFALSE 28553
// SetCargo ( i , mat_siberit , 100 ) ;
28538: LD_VAR 0 1
28542: PPUSH
28543: LD_INT 3
28545: PPUSH
28546: LD_INT 100
28548: PPUSH
28549: CALL_OW 290
28553: GO 28517
28555: POP
28556: POP
// end ;
28557: PPOPN 2
28559: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28560: LD_EXP 66
28564: PUSH
28565: LD_EXP 111
28569: AND
28570: IFFALSE 28753
28572: GO 28574
28574: DISABLE
28575: LD_INT 0
28577: PPUSH
28578: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28579: LD_ADDR_VAR 0 2
28583: PUSH
28584: LD_INT 22
28586: PUSH
28587: LD_OWVAR 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 69
28600: ST_TO_ADDR
// if not tmp then
28601: LD_VAR 0 2
28605: NOT
28606: IFFALSE 28610
// exit ;
28608: GO 28753
// for i := 1 to 2 do
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: DOUBLE
28616: LD_INT 1
28618: DEC
28619: ST_TO_ADDR
28620: LD_INT 2
28622: PUSH
28623: FOR_TO
28624: IFFALSE 28751
// begin uc_side := your_side ;
28626: LD_ADDR_OWVAR 20
28630: PUSH
28631: LD_OWVAR 2
28635: ST_TO_ADDR
// uc_nation := nation_american ;
28636: LD_ADDR_OWVAR 21
28640: PUSH
28641: LD_INT 1
28643: ST_TO_ADDR
// vc_chassis := us_morphling ;
28644: LD_ADDR_OWVAR 37
28648: PUSH
28649: LD_INT 5
28651: ST_TO_ADDR
// vc_engine := engine_siberite ;
28652: LD_ADDR_OWVAR 39
28656: PUSH
28657: LD_INT 3
28659: ST_TO_ADDR
// vc_control := control_computer ;
28660: LD_ADDR_OWVAR 38
28664: PUSH
28665: LD_INT 3
28667: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28668: LD_ADDR_OWVAR 40
28672: PUSH
28673: LD_INT 10
28675: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28676: LD_VAR 0 2
28680: PUSH
28681: LD_INT 1
28683: ARRAY
28684: PPUSH
28685: CALL_OW 310
28689: NOT
28690: IFFALSE 28737
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28692: CALL_OW 45
28696: PPUSH
28697: LD_VAR 0 2
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: CALL_OW 250
28710: PPUSH
28711: LD_VAR 0 2
28715: PUSH
28716: LD_INT 1
28718: ARRAY
28719: PPUSH
28720: CALL_OW 251
28724: PPUSH
28725: LD_INT 12
28727: PPUSH
28728: LD_INT 1
28730: PPUSH
28731: CALL_OW 50
28735: GO 28749
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28737: CALL_OW 45
28741: PPUSH
28742: LD_INT 1
28744: PPUSH
28745: CALL_OW 51
// end ;
28749: GO 28623
28751: POP
28752: POP
// end ;
28753: PPOPN 2
28755: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28756: LD_EXP 66
28760: PUSH
28761: LD_EXP 112
28765: AND
28766: IFFALSE 28988
28768: GO 28770
28770: DISABLE
28771: LD_INT 0
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28779: LD_ADDR_VAR 0 6
28783: PUSH
28784: LD_INT 22
28786: PUSH
28787: LD_OWVAR 2
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 21
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 3
28808: PUSH
28809: LD_INT 23
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: PPUSH
28828: CALL_OW 69
28832: ST_TO_ADDR
// if not tmp then
28833: LD_VAR 0 6
28837: NOT
28838: IFFALSE 28842
// exit ;
28840: GO 28988
// s1 := rand ( 1 , 4 ) ;
28842: LD_ADDR_VAR 0 2
28846: PUSH
28847: LD_INT 1
28849: PPUSH
28850: LD_INT 4
28852: PPUSH
28853: CALL_OW 12
28857: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28858: LD_ADDR_VAR 0 4
28862: PUSH
28863: LD_VAR 0 6
28867: PUSH
28868: LD_INT 1
28870: ARRAY
28871: PPUSH
28872: LD_VAR 0 2
28876: PPUSH
28877: CALL_OW 259
28881: ST_TO_ADDR
// if s1 = 1 then
28882: LD_VAR 0 2
28886: PUSH
28887: LD_INT 1
28889: EQUAL
28890: IFFALSE 28910
// s2 := rand ( 2 , 4 ) else
28892: LD_ADDR_VAR 0 3
28896: PUSH
28897: LD_INT 2
28899: PPUSH
28900: LD_INT 4
28902: PPUSH
28903: CALL_OW 12
28907: ST_TO_ADDR
28908: GO 28918
// s2 := 1 ;
28910: LD_ADDR_VAR 0 3
28914: PUSH
28915: LD_INT 1
28917: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28918: LD_ADDR_VAR 0 5
28922: PUSH
28923: LD_VAR 0 6
28927: PUSH
28928: LD_INT 1
28930: ARRAY
28931: PPUSH
28932: LD_VAR 0 3
28936: PPUSH
28937: CALL_OW 259
28941: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28942: LD_VAR 0 6
28946: PUSH
28947: LD_INT 1
28949: ARRAY
28950: PPUSH
28951: LD_VAR 0 2
28955: PPUSH
28956: LD_VAR 0 5
28960: PPUSH
28961: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28965: LD_VAR 0 6
28969: PUSH
28970: LD_INT 1
28972: ARRAY
28973: PPUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: LD_VAR 0 4
28983: PPUSH
28984: CALL_OW 237
// end ;
28988: PPOPN 6
28990: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28991: LD_EXP 66
28995: PUSH
28996: LD_EXP 113
29000: AND
29001: IFFALSE 29080
29003: GO 29005
29005: DISABLE
29006: LD_INT 0
29008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29009: LD_ADDR_VAR 0 1
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_OWVAR 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 30
29028: PUSH
29029: LD_INT 3
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PPUSH
29040: CALL_OW 69
29044: ST_TO_ADDR
// if not tmp then
29045: LD_VAR 0 1
29049: NOT
29050: IFFALSE 29054
// exit ;
29052: GO 29080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29054: LD_VAR 0 1
29058: PUSH
29059: LD_INT 1
29061: PPUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 12
29071: ARRAY
29072: PPUSH
29073: LD_INT 1
29075: PPUSH
29076: CALL_OW 234
// end ;
29080: PPOPN 1
29082: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29083: LD_EXP 66
29087: PUSH
29088: LD_EXP 114
29092: AND
29093: IFFALSE 29205
29095: GO 29097
29097: DISABLE
29098: LD_INT 0
29100: PPUSH
29101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29102: LD_ADDR_VAR 0 2
29106: PUSH
29107: LD_INT 22
29109: PUSH
29110: LD_OWVAR 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 30
29124: PUSH
29125: LD_INT 27
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 30
29134: PUSH
29135: LD_INT 26
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 30
29144: PUSH
29145: LD_INT 28
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 69
29166: ST_TO_ADDR
// if not tmp then
29167: LD_VAR 0 2
29171: NOT
29172: IFFALSE 29176
// exit ;
29174: GO 29205
// for i in tmp do
29176: LD_ADDR_VAR 0 1
29180: PUSH
29181: LD_VAR 0 2
29185: PUSH
29186: FOR_IN
29187: IFFALSE 29203
// SetLives ( i , 1 ) ;
29189: LD_VAR 0 1
29193: PPUSH
29194: LD_INT 1
29196: PPUSH
29197: CALL_OW 234
29201: GO 29186
29203: POP
29204: POP
// end ;
29205: PPOPN 2
29207: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29208: LD_EXP 66
29212: PUSH
29213: LD_EXP 115
29217: AND
29218: IFFALSE 29505
29220: GO 29222
29222: DISABLE
29223: LD_INT 0
29225: PPUSH
29226: PPUSH
29227: PPUSH
// begin i := rand ( 1 , 7 ) ;
29228: LD_ADDR_VAR 0 1
29232: PUSH
29233: LD_INT 1
29235: PPUSH
29236: LD_INT 7
29238: PPUSH
29239: CALL_OW 12
29243: ST_TO_ADDR
// case i of 1 :
29244: LD_VAR 0 1
29248: PUSH
29249: LD_INT 1
29251: DOUBLE
29252: EQUAL
29253: IFTRUE 29257
29255: GO 29267
29257: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29258: LD_STRING earthquake(getX(game), 0, 32)
29260: PPUSH
29261: CALL_OW 559
29265: GO 29505
29267: LD_INT 2
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29289
29275: POP
// begin ToLua ( displayStucuk(); ) ;
29276: LD_STRING displayStucuk();
29278: PPUSH
29279: CALL_OW 559
// ResetFog ;
29283: CALL_OW 335
// end ; 3 :
29287: GO 29505
29289: LD_INT 3
29291: DOUBLE
29292: EQUAL
29293: IFTRUE 29297
29295: GO 29401
29297: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: LD_INT 22
29305: PUSH
29306: LD_OWVAR 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 25
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL_OW 69
29333: ST_TO_ADDR
// if not tmp then
29334: LD_VAR 0 2
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 29505
// un := tmp [ rand ( 1 , tmp ) ] ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_VAR 0 2
29352: PUSH
29353: LD_INT 1
29355: PPUSH
29356: LD_VAR 0 2
29360: PPUSH
29361: CALL_OW 12
29365: ARRAY
29366: ST_TO_ADDR
// if Crawls ( un ) then
29367: LD_VAR 0 3
29371: PPUSH
29372: CALL_OW 318
29376: IFFALSE 29387
// ComWalk ( un ) ;
29378: LD_VAR 0 3
29382: PPUSH
29383: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29387: LD_VAR 0 3
29391: PPUSH
29392: LD_INT 8
29394: PPUSH
29395: CALL_OW 336
// end ; 4 :
29399: GO 29505
29401: LD_INT 4
29403: DOUBLE
29404: EQUAL
29405: IFTRUE 29409
29407: GO 29483
29409: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29410: LD_ADDR_VAR 0 2
29414: PUSH
29415: LD_INT 22
29417: PUSH
29418: LD_OWVAR 2
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 30
29429: PUSH
29430: LD_INT 29
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PPUSH
29441: CALL_OW 69
29445: ST_TO_ADDR
// if not tmp then
29446: LD_VAR 0 2
29450: NOT
29451: IFFALSE 29455
// exit ;
29453: GO 29505
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29455: LD_VAR 0 2
29459: PUSH
29460: LD_INT 1
29462: ARRAY
29463: PPUSH
29464: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29468: LD_VAR 0 2
29472: PUSH
29473: LD_INT 1
29475: ARRAY
29476: PPUSH
29477: CALL_OW 65
// end ; 5 .. 7 :
29481: GO 29505
29483: LD_INT 5
29485: DOUBLE
29486: GREATEREQUAL
29487: IFFALSE 29495
29489: LD_INT 7
29491: DOUBLE
29492: LESSEQUAL
29493: IFTRUE 29497
29495: GO 29504
29497: POP
// StreamSibBomb ; end ;
29498: CALL 25742 0 0
29502: GO 29505
29504: POP
// end ;
29505: PPOPN 3
29507: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29508: LD_EXP 66
29512: PUSH
29513: LD_EXP 116
29517: AND
29518: IFFALSE 29674
29520: GO 29522
29522: DISABLE
29523: LD_INT 0
29525: PPUSH
29526: PPUSH
29527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29528: LD_ADDR_VAR 0 2
29532: PUSH
29533: LD_INT 81
29535: PUSH
29536: LD_OWVAR 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: LD_INT 21
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 21
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 69
29581: ST_TO_ADDR
// if not tmp then
29582: LD_VAR 0 2
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 29674
// p := 0 ;
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_INT 0
29598: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29599: LD_INT 35
29601: PPUSH
29602: CALL_OW 67
// p := p + 1 ;
29606: LD_ADDR_VAR 0 3
29610: PUSH
29611: LD_VAR 0 3
29615: PUSH
29616: LD_INT 1
29618: PLUS
29619: ST_TO_ADDR
// for i in tmp do
29620: LD_ADDR_VAR 0 1
29624: PUSH
29625: LD_VAR 0 2
29629: PUSH
29630: FOR_IN
29631: IFFALSE 29662
// if GetLives ( i ) < 1000 then
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 256
29642: PUSH
29643: LD_INT 1000
29645: LESS
29646: IFFALSE 29660
// SetLives ( i , 1000 ) ;
29648: LD_VAR 0 1
29652: PPUSH
29653: LD_INT 1000
29655: PPUSH
29656: CALL_OW 234
29660: GO 29630
29662: POP
29663: POP
// until p > 20 ;
29664: LD_VAR 0 3
29668: PUSH
29669: LD_INT 20
29671: GREATER
29672: IFFALSE 29599
// end ;
29674: PPOPN 3
29676: END
// every 0 0$1 trigger StreamModeActive and sTime do
29677: LD_EXP 66
29681: PUSH
29682: LD_EXP 117
29686: AND
29687: IFFALSE 29722
29689: GO 29691
29691: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29692: LD_INT 28
29694: PPUSH
29695: LD_OWVAR 2
29699: PPUSH
29700: LD_INT 2
29702: PPUSH
29703: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29707: LD_INT 30
29709: PPUSH
29710: LD_OWVAR 2
29714: PPUSH
29715: LD_INT 2
29717: PPUSH
29718: CALL_OW 322
// end ;
29722: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29723: LD_EXP 66
29727: PUSH
29728: LD_EXP 118
29732: AND
29733: IFFALSE 29854
29735: GO 29737
29737: DISABLE
29738: LD_INT 0
29740: PPUSH
29741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29742: LD_ADDR_VAR 0 2
29746: PUSH
29747: LD_INT 22
29749: PUSH
29750: LD_OWVAR 2
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 21
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 3
29771: PUSH
29772: LD_INT 23
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: PPUSH
29791: CALL_OW 69
29795: ST_TO_ADDR
// if not tmp then
29796: LD_VAR 0 2
29800: NOT
29801: IFFALSE 29805
// exit ;
29803: GO 29854
// for i in tmp do
29805: LD_ADDR_VAR 0 1
29809: PUSH
29810: LD_VAR 0 2
29814: PUSH
29815: FOR_IN
29816: IFFALSE 29852
// begin if Crawls ( i ) then
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 318
29827: IFFALSE 29838
// ComWalk ( i ) ;
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 138
// SetClass ( i , 2 ) ;
29838: LD_VAR 0 1
29842: PPUSH
29843: LD_INT 2
29845: PPUSH
29846: CALL_OW 336
// end ;
29850: GO 29815
29852: POP
29853: POP
// end ;
29854: PPOPN 2
29856: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29857: LD_EXP 66
29861: PUSH
29862: LD_EXP 119
29866: AND
29867: IFFALSE 30155
29869: GO 29871
29871: DISABLE
29872: LD_INT 0
29874: PPUSH
29875: PPUSH
29876: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29877: LD_OWVAR 2
29881: PPUSH
29882: LD_INT 9
29884: PPUSH
29885: LD_INT 1
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29895: LD_INT 9
29897: PPUSH
29898: LD_OWVAR 2
29902: PPUSH
29903: CALL_OW 343
// uc_side := 9 ;
29907: LD_ADDR_OWVAR 20
29911: PUSH
29912: LD_INT 9
29914: ST_TO_ADDR
// uc_nation := 2 ;
29915: LD_ADDR_OWVAR 21
29919: PUSH
29920: LD_INT 2
29922: ST_TO_ADDR
// hc_name := Dark Warrior ;
29923: LD_ADDR_OWVAR 26
29927: PUSH
29928: LD_STRING Dark Warrior
29930: ST_TO_ADDR
// hc_gallery :=  ;
29931: LD_ADDR_OWVAR 33
29935: PUSH
29936: LD_STRING 
29938: ST_TO_ADDR
// hc_noskilllimit := true ;
29939: LD_ADDR_OWVAR 76
29943: PUSH
29944: LD_INT 1
29946: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29947: LD_ADDR_OWVAR 31
29951: PUSH
29952: LD_INT 30
29954: PUSH
29955: LD_INT 30
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: ST_TO_ADDR
// un := CreateHuman ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: CALL_OW 44
29979: ST_TO_ADDR
// hc_noskilllimit := false ;
29980: LD_ADDR_OWVAR 76
29984: PUSH
29985: LD_INT 0
29987: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29988: LD_VAR 0 3
29992: PPUSH
29993: LD_INT 1
29995: PPUSH
29996: CALL_OW 51
// ToLua ( playRanger() ) ;
30000: LD_STRING playRanger()
30002: PPUSH
30003: CALL_OW 559
// p := 0 ;
30007: LD_ADDR_VAR 0 2
30011: PUSH
30012: LD_INT 0
30014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30015: LD_INT 35
30017: PPUSH
30018: CALL_OW 67
// p := p + 1 ;
30022: LD_ADDR_VAR 0 2
30026: PUSH
30027: LD_VAR 0 2
30031: PUSH
30032: LD_INT 1
30034: PLUS
30035: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30036: LD_VAR 0 3
30040: PPUSH
30041: CALL_OW 256
30045: PUSH
30046: LD_INT 1000
30048: LESS
30049: IFFALSE 30063
// SetLives ( un , 1000 ) ;
30051: LD_VAR 0 3
30055: PPUSH
30056: LD_INT 1000
30058: PPUSH
30059: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30063: LD_VAR 0 3
30067: PPUSH
30068: LD_INT 81
30070: PUSH
30071: LD_OWVAR 2
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 91
30082: PUSH
30083: LD_VAR 0 3
30087: PUSH
30088: LD_INT 30
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PPUSH
30100: CALL_OW 69
30104: PPUSH
30105: LD_VAR 0 3
30109: PPUSH
30110: CALL_OW 74
30114: PPUSH
30115: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30119: LD_VAR 0 2
30123: PUSH
30124: LD_INT 80
30126: GREATER
30127: PUSH
30128: LD_VAR 0 3
30132: PPUSH
30133: CALL_OW 301
30137: OR
30138: IFFALSE 30015
// if un then
30140: LD_VAR 0 3
30144: IFFALSE 30155
// RemoveUnit ( un ) ;
30146: LD_VAR 0 3
30150: PPUSH
30151: CALL_OW 64
// end ;
30155: PPOPN 3
30157: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30158: LD_EXP 120
30162: IFFALSE 30278
30164: GO 30166
30166: DISABLE
30167: LD_INT 0
30169: PPUSH
30170: PPUSH
30171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30172: LD_ADDR_VAR 0 2
30176: PUSH
30177: LD_INT 81
30179: PUSH
30180: LD_OWVAR 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 21
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PPUSH
30203: CALL_OW 69
30207: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30208: LD_STRING playComputer()
30210: PPUSH
30211: CALL_OW 559
// if not tmp then
30215: LD_VAR 0 2
30219: NOT
30220: IFFALSE 30224
// exit ;
30222: GO 30278
// for i in tmp do
30224: LD_ADDR_VAR 0 1
30228: PUSH
30229: LD_VAR 0 2
30233: PUSH
30234: FOR_IN
30235: IFFALSE 30276
// for j := 1 to 4 do
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: DOUBLE
30243: LD_INT 1
30245: DEC
30246: ST_TO_ADDR
30247: LD_INT 4
30249: PUSH
30250: FOR_TO
30251: IFFALSE 30272
// SetSkill ( i , j , 10 ) ;
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_VAR 0 3
30262: PPUSH
30263: LD_INT 10
30265: PPUSH
30266: CALL_OW 237
30270: GO 30250
30272: POP
30273: POP
30274: GO 30234
30276: POP
30277: POP
// end ;
30278: PPOPN 3
30280: END
// every 0 0$1 trigger s30 do var i , tmp ;
30281: LD_EXP 121
30285: IFFALSE 30354
30287: GO 30289
30289: DISABLE
30290: LD_INT 0
30292: PPUSH
30293: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30294: LD_ADDR_VAR 0 2
30298: PUSH
30299: LD_INT 22
30301: PUSH
30302: LD_OWVAR 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PPUSH
30311: CALL_OW 69
30315: ST_TO_ADDR
// if not tmp then
30316: LD_VAR 0 2
30320: NOT
30321: IFFALSE 30325
// exit ;
30323: GO 30354
// for i in tmp do
30325: LD_ADDR_VAR 0 1
30329: PUSH
30330: LD_VAR 0 2
30334: PUSH
30335: FOR_IN
30336: IFFALSE 30352
// SetLives ( i , 300 ) ;
30338: LD_VAR 0 1
30342: PPUSH
30343: LD_INT 300
30345: PPUSH
30346: CALL_OW 234
30350: GO 30335
30352: POP
30353: POP
// end ;
30354: PPOPN 2
30356: END
// every 0 0$1 trigger s60 do var i , tmp ;
30357: LD_EXP 122
30361: IFFALSE 30430
30363: GO 30365
30365: DISABLE
30366: LD_INT 0
30368: PPUSH
30369: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30370: LD_ADDR_VAR 0 2
30374: PUSH
30375: LD_INT 22
30377: PUSH
30378: LD_OWVAR 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 69
30391: ST_TO_ADDR
// if not tmp then
30392: LD_VAR 0 2
30396: NOT
30397: IFFALSE 30401
// exit ;
30399: GO 30430
// for i in tmp do
30401: LD_ADDR_VAR 0 1
30405: PUSH
30406: LD_VAR 0 2
30410: PUSH
30411: FOR_IN
30412: IFFALSE 30428
// SetLives ( i , 600 ) ;
30414: LD_VAR 0 1
30418: PPUSH
30419: LD_INT 600
30421: PPUSH
30422: CALL_OW 234
30426: GO 30411
30428: POP
30429: POP
// end ;
30430: PPOPN 2
30432: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30433: LD_INT 0
30435: PPUSH
// case cmd of 301 :
30436: LD_VAR 0 1
30440: PUSH
30441: LD_INT 301
30443: DOUBLE
30444: EQUAL
30445: IFTRUE 30449
30447: GO 30481
30449: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30450: LD_VAR 0 6
30454: PPUSH
30455: LD_VAR 0 7
30459: PPUSH
30460: LD_VAR 0 8
30464: PPUSH
30465: LD_VAR 0 4
30469: PPUSH
30470: LD_VAR 0 5
30474: PPUSH
30475: CALL 31682 0 5
30479: GO 30602
30481: LD_INT 302
30483: DOUBLE
30484: EQUAL
30485: IFTRUE 30489
30487: GO 30526
30489: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30490: LD_VAR 0 6
30494: PPUSH
30495: LD_VAR 0 7
30499: PPUSH
30500: LD_VAR 0 8
30504: PPUSH
30505: LD_VAR 0 9
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: CALL 31773 0 6
30524: GO 30602
30526: LD_INT 303
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30571
30534: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30535: LD_VAR 0 6
30539: PPUSH
30540: LD_VAR 0 7
30544: PPUSH
30545: LD_VAR 0 8
30549: PPUSH
30550: LD_VAR 0 9
30554: PPUSH
30555: LD_VAR 0 4
30559: PPUSH
30560: LD_VAR 0 5
30564: PPUSH
30565: CALL 30607 0 6
30569: GO 30602
30571: LD_INT 304
30573: DOUBLE
30574: EQUAL
30575: IFTRUE 30579
30577: GO 30601
30579: POP
// hHackTeleport ( unit , x , y ) ; end ;
30580: LD_VAR 0 2
30584: PPUSH
30585: LD_VAR 0 4
30589: PPUSH
30590: LD_VAR 0 5
30594: PPUSH
30595: CALL 32366 0 3
30599: GO 30602
30601: POP
// end ;
30602: LD_VAR 0 12
30606: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30607: LD_INT 0
30609: PPUSH
30610: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30611: LD_VAR 0 1
30615: PUSH
30616: LD_INT 1
30618: LESS
30619: PUSH
30620: LD_VAR 0 1
30624: PUSH
30625: LD_INT 3
30627: GREATER
30628: OR
30629: PUSH
30630: LD_VAR 0 5
30634: PPUSH
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 428
30644: OR
30645: IFFALSE 30649
// exit ;
30647: GO 31369
// uc_side := your_side ;
30649: LD_ADDR_OWVAR 20
30653: PUSH
30654: LD_OWVAR 2
30658: ST_TO_ADDR
// uc_nation := nation ;
30659: LD_ADDR_OWVAR 21
30663: PUSH
30664: LD_VAR 0 1
30668: ST_TO_ADDR
// bc_level = 1 ;
30669: LD_ADDR_OWVAR 43
30673: PUSH
30674: LD_INT 1
30676: ST_TO_ADDR
// case btype of 1 :
30677: LD_VAR 0 2
30681: PUSH
30682: LD_INT 1
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30701
30690: POP
// bc_type := b_depot ; 2 :
30691: LD_ADDR_OWVAR 42
30695: PUSH
30696: LD_INT 0
30698: ST_TO_ADDR
30699: GO 31313
30701: LD_INT 2
30703: DOUBLE
30704: EQUAL
30705: IFTRUE 30709
30707: GO 30720
30709: POP
// bc_type := b_warehouse ; 3 :
30710: LD_ADDR_OWVAR 42
30714: PUSH
30715: LD_INT 1
30717: ST_TO_ADDR
30718: GO 31313
30720: LD_INT 3
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30739
30728: POP
// bc_type := b_lab ; 4 .. 9 :
30729: LD_ADDR_OWVAR 42
30733: PUSH
30734: LD_INT 6
30736: ST_TO_ADDR
30737: GO 31313
30739: LD_INT 4
30741: DOUBLE
30742: GREATEREQUAL
30743: IFFALSE 30751
30745: LD_INT 9
30747: DOUBLE
30748: LESSEQUAL
30749: IFTRUE 30753
30751: GO 30805
30753: POP
// begin bc_type := b_lab_half ;
30754: LD_ADDR_OWVAR 42
30758: PUSH
30759: LD_INT 7
30761: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30762: LD_ADDR_OWVAR 44
30766: PUSH
30767: LD_INT 10
30769: PUSH
30770: LD_INT 11
30772: PUSH
30773: LD_INT 12
30775: PUSH
30776: LD_INT 15
30778: PUSH
30779: LD_INT 14
30781: PUSH
30782: LD_INT 13
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: PUSH
30793: LD_VAR 0 2
30797: PUSH
30798: LD_INT 3
30800: MINUS
30801: ARRAY
30802: ST_TO_ADDR
// end ; 10 .. 13 :
30803: GO 31313
30805: LD_INT 10
30807: DOUBLE
30808: GREATEREQUAL
30809: IFFALSE 30817
30811: LD_INT 13
30813: DOUBLE
30814: LESSEQUAL
30815: IFTRUE 30819
30817: GO 30896
30819: POP
// begin bc_type := b_lab_full ;
30820: LD_ADDR_OWVAR 42
30824: PUSH
30825: LD_INT 8
30827: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30828: LD_ADDR_OWVAR 44
30832: PUSH
30833: LD_INT 10
30835: PUSH
30836: LD_INT 12
30838: PUSH
30839: LD_INT 14
30841: PUSH
30842: LD_INT 13
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: PUSH
30851: LD_VAR 0 2
30855: PUSH
30856: LD_INT 9
30858: MINUS
30859: ARRAY
30860: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30861: LD_ADDR_OWVAR 45
30865: PUSH
30866: LD_INT 11
30868: PUSH
30869: LD_INT 15
30871: PUSH
30872: LD_INT 12
30874: PUSH
30875: LD_INT 15
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: PUSH
30884: LD_VAR 0 2
30888: PUSH
30889: LD_INT 9
30891: MINUS
30892: ARRAY
30893: ST_TO_ADDR
// end ; 14 :
30894: GO 31313
30896: LD_INT 14
30898: DOUBLE
30899: EQUAL
30900: IFTRUE 30904
30902: GO 30915
30904: POP
// bc_type := b_workshop ; 15 :
30905: LD_ADDR_OWVAR 42
30909: PUSH
30910: LD_INT 2
30912: ST_TO_ADDR
30913: GO 31313
30915: LD_INT 15
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30934
30923: POP
// bc_type := b_factory ; 16 :
30924: LD_ADDR_OWVAR 42
30928: PUSH
30929: LD_INT 3
30931: ST_TO_ADDR
30932: GO 31313
30934: LD_INT 16
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30953
30942: POP
// bc_type := b_ext_gun ; 17 :
30943: LD_ADDR_OWVAR 42
30947: PUSH
30948: LD_INT 17
30950: ST_TO_ADDR
30951: GO 31313
30953: LD_INT 17
30955: DOUBLE
30956: EQUAL
30957: IFTRUE 30961
30959: GO 30989
30961: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30962: LD_ADDR_OWVAR 42
30966: PUSH
30967: LD_INT 19
30969: PUSH
30970: LD_INT 23
30972: PUSH
30973: LD_INT 19
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: PUSH
30981: LD_VAR 0 1
30985: ARRAY
30986: ST_TO_ADDR
30987: GO 31313
30989: LD_INT 18
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31008
30997: POP
// bc_type := b_ext_radar ; 19 :
30998: LD_ADDR_OWVAR 42
31002: PUSH
31003: LD_INT 20
31005: ST_TO_ADDR
31006: GO 31313
31008: LD_INT 19
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31027
31016: POP
// bc_type := b_ext_radio ; 20 :
31017: LD_ADDR_OWVAR 42
31021: PUSH
31022: LD_INT 22
31024: ST_TO_ADDR
31025: GO 31313
31027: LD_INT 20
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31046
31035: POP
// bc_type := b_ext_siberium ; 21 :
31036: LD_ADDR_OWVAR 42
31040: PUSH
31041: LD_INT 21
31043: ST_TO_ADDR
31044: GO 31313
31046: LD_INT 21
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31065
31054: POP
// bc_type := b_ext_computer ; 22 :
31055: LD_ADDR_OWVAR 42
31059: PUSH
31060: LD_INT 24
31062: ST_TO_ADDR
31063: GO 31313
31065: LD_INT 22
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31073
31071: GO 31084
31073: POP
// bc_type := b_ext_track ; 23 :
31074: LD_ADDR_OWVAR 42
31078: PUSH
31079: LD_INT 16
31081: ST_TO_ADDR
31082: GO 31313
31084: LD_INT 23
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31103
31092: POP
// bc_type := b_ext_laser ; 24 :
31093: LD_ADDR_OWVAR 42
31097: PUSH
31098: LD_INT 25
31100: ST_TO_ADDR
31101: GO 31313
31103: LD_INT 24
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31122
31111: POP
// bc_type := b_control_tower ; 25 :
31112: LD_ADDR_OWVAR 42
31116: PUSH
31117: LD_INT 36
31119: ST_TO_ADDR
31120: GO 31313
31122: LD_INT 25
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31141
31130: POP
// bc_type := b_breastwork ; 26 :
31131: LD_ADDR_OWVAR 42
31135: PUSH
31136: LD_INT 31
31138: ST_TO_ADDR
31139: GO 31313
31141: LD_INT 26
31143: DOUBLE
31144: EQUAL
31145: IFTRUE 31149
31147: GO 31160
31149: POP
// bc_type := b_bunker ; 27 :
31150: LD_ADDR_OWVAR 42
31154: PUSH
31155: LD_INT 32
31157: ST_TO_ADDR
31158: GO 31313
31160: LD_INT 27
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31179
31168: POP
// bc_type := b_turret ; 28 :
31169: LD_ADDR_OWVAR 42
31173: PUSH
31174: LD_INT 33
31176: ST_TO_ADDR
31177: GO 31313
31179: LD_INT 28
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31198
31187: POP
// bc_type := b_armoury ; 29 :
31188: LD_ADDR_OWVAR 42
31192: PUSH
31193: LD_INT 4
31195: ST_TO_ADDR
31196: GO 31313
31198: LD_INT 29
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31217
31206: POP
// bc_type := b_barracks ; 30 :
31207: LD_ADDR_OWVAR 42
31211: PUSH
31212: LD_INT 5
31214: ST_TO_ADDR
31215: GO 31313
31217: LD_INT 30
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31236
31225: POP
// bc_type := b_solar_power ; 31 :
31226: LD_ADDR_OWVAR 42
31230: PUSH
31231: LD_INT 27
31233: ST_TO_ADDR
31234: GO 31313
31236: LD_INT 31
31238: DOUBLE
31239: EQUAL
31240: IFTRUE 31244
31242: GO 31255
31244: POP
// bc_type := b_oil_power ; 32 :
31245: LD_ADDR_OWVAR 42
31249: PUSH
31250: LD_INT 26
31252: ST_TO_ADDR
31253: GO 31313
31255: LD_INT 32
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31274
31263: POP
// bc_type := b_siberite_power ; 33 :
31264: LD_ADDR_OWVAR 42
31268: PUSH
31269: LD_INT 28
31271: ST_TO_ADDR
31272: GO 31313
31274: LD_INT 33
31276: DOUBLE
31277: EQUAL
31278: IFTRUE 31282
31280: GO 31293
31282: POP
// bc_type := b_oil_mine ; 34 :
31283: LD_ADDR_OWVAR 42
31287: PUSH
31288: LD_INT 29
31290: ST_TO_ADDR
31291: GO 31313
31293: LD_INT 34
31295: DOUBLE
31296: EQUAL
31297: IFTRUE 31301
31299: GO 31312
31301: POP
// bc_type := b_siberite_mine ; end ;
31302: LD_ADDR_OWVAR 42
31306: PUSH
31307: LD_INT 30
31309: ST_TO_ADDR
31310: GO 31313
31312: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31313: LD_ADDR_VAR 0 8
31317: PUSH
31318: LD_VAR 0 5
31322: PPUSH
31323: LD_VAR 0 6
31327: PPUSH
31328: LD_VAR 0 3
31332: PPUSH
31333: CALL_OW 47
31337: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31338: LD_OWVAR 42
31342: PUSH
31343: LD_INT 32
31345: PUSH
31346: LD_INT 33
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: IN
31353: IFFALSE 31369
// PlaceWeaponTurret ( b , weapon ) ;
31355: LD_VAR 0 8
31359: PPUSH
31360: LD_VAR 0 4
31364: PPUSH
31365: CALL_OW 431
// end ;
31369: LD_VAR 0 7
31373: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31380: LD_ADDR_VAR 0 4
31384: PUSH
31385: LD_INT 22
31387: PUSH
31388: LD_OWVAR 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 30
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 30
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PPUSH
31429: CALL_OW 69
31433: ST_TO_ADDR
// if not tmp then
31434: LD_VAR 0 4
31438: NOT
31439: IFFALSE 31443
// exit ;
31441: GO 31502
// for i in tmp do
31443: LD_ADDR_VAR 0 2
31447: PUSH
31448: LD_VAR 0 4
31452: PUSH
31453: FOR_IN
31454: IFFALSE 31500
// for j = 1 to 3 do
31456: LD_ADDR_VAR 0 3
31460: PUSH
31461: DOUBLE
31462: LD_INT 1
31464: DEC
31465: ST_TO_ADDR
31466: LD_INT 3
31468: PUSH
31469: FOR_TO
31470: IFFALSE 31496
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31472: LD_VAR 0 2
31476: PPUSH
31477: CALL_OW 274
31481: PPUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: LD_INT 99999
31489: PPUSH
31490: CALL_OW 277
31494: GO 31469
31496: POP
31497: POP
31498: GO 31453
31500: POP
31501: POP
// end ;
31502: LD_VAR 0 1
31506: RET
// export function hHackSetLevel10 ; var i , j ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31512: LD_ADDR_VAR 0 2
31516: PUSH
31517: LD_INT 21
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PPUSH
31527: CALL_OW 69
31531: PUSH
31532: FOR_IN
31533: IFFALSE 31585
// if IsSelected ( i ) then
31535: LD_VAR 0 2
31539: PPUSH
31540: CALL_OW 306
31544: IFFALSE 31583
// begin for j := 1 to 4 do
31546: LD_ADDR_VAR 0 3
31550: PUSH
31551: DOUBLE
31552: LD_INT 1
31554: DEC
31555: ST_TO_ADDR
31556: LD_INT 4
31558: PUSH
31559: FOR_TO
31560: IFFALSE 31581
// SetSkill ( i , j , 10 ) ;
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_VAR 0 3
31571: PPUSH
31572: LD_INT 10
31574: PPUSH
31575: CALL_OW 237
31579: GO 31559
31581: POP
31582: POP
// end ;
31583: GO 31532
31585: POP
31586: POP
// end ;
31587: LD_VAR 0 1
31591: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31592: LD_INT 0
31594: PPUSH
31595: PPUSH
31596: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31597: LD_ADDR_VAR 0 2
31601: PUSH
31602: LD_INT 22
31604: PUSH
31605: LD_OWVAR 2
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 21
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PPUSH
31628: CALL_OW 69
31632: PUSH
31633: FOR_IN
31634: IFFALSE 31675
// begin for j := 1 to 4 do
31636: LD_ADDR_VAR 0 3
31640: PUSH
31641: DOUBLE
31642: LD_INT 1
31644: DEC
31645: ST_TO_ADDR
31646: LD_INT 4
31648: PUSH
31649: FOR_TO
31650: IFFALSE 31671
// SetSkill ( i , j , 10 ) ;
31652: LD_VAR 0 2
31656: PPUSH
31657: LD_VAR 0 3
31661: PPUSH
31662: LD_INT 10
31664: PPUSH
31665: CALL_OW 237
31669: GO 31649
31671: POP
31672: POP
// end ;
31673: GO 31633
31675: POP
31676: POP
// end ;
31677: LD_VAR 0 1
31681: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31682: LD_INT 0
31684: PPUSH
// uc_side := your_side ;
31685: LD_ADDR_OWVAR 20
31689: PUSH
31690: LD_OWVAR 2
31694: ST_TO_ADDR
// uc_nation := nation ;
31695: LD_ADDR_OWVAR 21
31699: PUSH
31700: LD_VAR 0 1
31704: ST_TO_ADDR
// InitHc ;
31705: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31709: LD_INT 0
31711: PPUSH
31712: LD_VAR 0 2
31716: PPUSH
31717: LD_VAR 0 3
31721: PPUSH
31722: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31726: LD_VAR 0 4
31730: PPUSH
31731: LD_VAR 0 5
31735: PPUSH
31736: CALL_OW 428
31740: PUSH
31741: LD_INT 0
31743: EQUAL
31744: IFFALSE 31768
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31746: CALL_OW 44
31750: PPUSH
31751: LD_VAR 0 4
31755: PPUSH
31756: LD_VAR 0 5
31760: PPUSH
31761: LD_INT 1
31763: PPUSH
31764: CALL_OW 48
// end ;
31768: LD_VAR 0 6
31772: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
// uc_side := your_side ;
31777: LD_ADDR_OWVAR 20
31781: PUSH
31782: LD_OWVAR 2
31786: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31787: LD_VAR 0 1
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: LD_INT 3
31800: PUSH
31801: LD_INT 4
31803: PUSH
31804: LD_INT 5
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: IN
31814: IFFALSE 31826
// uc_nation := nation_american else
31816: LD_ADDR_OWVAR 21
31820: PUSH
31821: LD_INT 1
31823: ST_TO_ADDR
31824: GO 31869
// if chassis in [ 11 , 12 , 13 , 14 ] then
31826: LD_VAR 0 1
31830: PUSH
31831: LD_INT 11
31833: PUSH
31834: LD_INT 12
31836: PUSH
31837: LD_INT 13
31839: PUSH
31840: LD_INT 14
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: IN
31849: IFFALSE 31861
// uc_nation := nation_arabian else
31851: LD_ADDR_OWVAR 21
31855: PUSH
31856: LD_INT 2
31858: ST_TO_ADDR
31859: GO 31869
// uc_nation := nation_russian ;
31861: LD_ADDR_OWVAR 21
31865: PUSH
31866: LD_INT 3
31868: ST_TO_ADDR
// vc_chassis := chassis ;
31869: LD_ADDR_OWVAR 37
31873: PUSH
31874: LD_VAR 0 1
31878: ST_TO_ADDR
// vc_engine := engine ;
31879: LD_ADDR_OWVAR 39
31883: PUSH
31884: LD_VAR 0 2
31888: ST_TO_ADDR
// vc_control := control ;
31889: LD_ADDR_OWVAR 38
31893: PUSH
31894: LD_VAR 0 3
31898: ST_TO_ADDR
// vc_weapon := weapon ;
31899: LD_ADDR_OWVAR 40
31903: PUSH
31904: LD_VAR 0 4
31908: ST_TO_ADDR
// un := CreateVehicle ;
31909: LD_ADDR_VAR 0 8
31913: PUSH
31914: CALL_OW 45
31918: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31919: LD_VAR 0 8
31923: PPUSH
31924: LD_INT 0
31926: PPUSH
31927: LD_INT 5
31929: PPUSH
31930: CALL_OW 12
31934: PPUSH
31935: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31939: LD_VAR 0 8
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: LD_VAR 0 6
31953: PPUSH
31954: LD_INT 1
31956: PPUSH
31957: CALL_OW 48
// end ;
31961: LD_VAR 0 7
31965: RET
// export hInvincible ; every 1 do
31966: GO 31968
31968: DISABLE
// hInvincible := [ ] ;
31969: LD_ADDR_EXP 123
31973: PUSH
31974: EMPTY
31975: ST_TO_ADDR
31976: END
// every 10 do var i ;
31977: GO 31979
31979: DISABLE
31980: LD_INT 0
31982: PPUSH
// begin enable ;
31983: ENABLE
// if not hInvincible then
31984: LD_EXP 123
31988: NOT
31989: IFFALSE 31993
// exit ;
31991: GO 32037
// for i in hInvincible do
31993: LD_ADDR_VAR 0 1
31997: PUSH
31998: LD_EXP 123
32002: PUSH
32003: FOR_IN
32004: IFFALSE 32035
// if GetLives ( i ) < 1000 then
32006: LD_VAR 0 1
32010: PPUSH
32011: CALL_OW 256
32015: PUSH
32016: LD_INT 1000
32018: LESS
32019: IFFALSE 32033
// SetLives ( i , 1000 ) ;
32021: LD_VAR 0 1
32025: PPUSH
32026: LD_INT 1000
32028: PPUSH
32029: CALL_OW 234
32033: GO 32003
32035: POP
32036: POP
// end ;
32037: PPOPN 1
32039: END
// export function hHackInvincible ; var i ; begin
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32044: LD_ADDR_VAR 0 2
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 21
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 21
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: PPUSH
32077: CALL_OW 69
32081: PUSH
32082: FOR_IN
32083: IFFALSE 32144
// if IsSelected ( i ) then
32085: LD_VAR 0 2
32089: PPUSH
32090: CALL_OW 306
32094: IFFALSE 32142
// begin if i in hInvincible then
32096: LD_VAR 0 2
32100: PUSH
32101: LD_EXP 123
32105: IN
32106: IFFALSE 32126
// hInvincible := hInvincible diff i else
32108: LD_ADDR_EXP 123
32112: PUSH
32113: LD_EXP 123
32117: PUSH
32118: LD_VAR 0 2
32122: DIFF
32123: ST_TO_ADDR
32124: GO 32142
// hInvincible := hInvincible union i ;
32126: LD_ADDR_EXP 123
32130: PUSH
32131: LD_EXP 123
32135: PUSH
32136: LD_VAR 0 2
32140: UNION
32141: ST_TO_ADDR
// end ;
32142: GO 32082
32144: POP
32145: POP
// end ;
32146: LD_VAR 0 1
32150: RET
// export function hHackInvisible ; var i , j ; begin
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
32155: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32156: LD_ADDR_VAR 0 2
32160: PUSH
32161: LD_INT 21
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 69
32175: PUSH
32176: FOR_IN
32177: IFFALSE 32201
// if IsSelected ( i ) then
32179: LD_VAR 0 2
32183: PPUSH
32184: CALL_OW 306
32188: IFFALSE 32199
// ComForceInvisible ( i ) ;
32190: LD_VAR 0 2
32194: PPUSH
32195: CALL_OW 496
32199: GO 32176
32201: POP
32202: POP
// end ;
32203: LD_VAR 0 1
32207: RET
// export function hHackChangeYourSide ; begin
32208: LD_INT 0
32210: PPUSH
// if your_side = 8 then
32211: LD_OWVAR 2
32215: PUSH
32216: LD_INT 8
32218: EQUAL
32219: IFFALSE 32231
// your_side := 0 else
32221: LD_ADDR_OWVAR 2
32225: PUSH
32226: LD_INT 0
32228: ST_TO_ADDR
32229: GO 32245
// your_side := your_side + 1 ;
32231: LD_ADDR_OWVAR 2
32235: PUSH
32236: LD_OWVAR 2
32240: PUSH
32241: LD_INT 1
32243: PLUS
32244: ST_TO_ADDR
// end ;
32245: LD_VAR 0 1
32249: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32250: LD_INT 0
32252: PPUSH
32253: PPUSH
32254: PPUSH
// for i in all_units do
32255: LD_ADDR_VAR 0 2
32259: PUSH
32260: LD_OWVAR 3
32264: PUSH
32265: FOR_IN
32266: IFFALSE 32344
// if IsSelected ( i ) then
32268: LD_VAR 0 2
32272: PPUSH
32273: CALL_OW 306
32277: IFFALSE 32342
// begin j := GetSide ( i ) ;
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_VAR 0 2
32288: PPUSH
32289: CALL_OW 255
32293: ST_TO_ADDR
// if j = 8 then
32294: LD_VAR 0 3
32298: PUSH
32299: LD_INT 8
32301: EQUAL
32302: IFFALSE 32314
// j := 0 else
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: LD_INT 0
32311: ST_TO_ADDR
32312: GO 32328
// j := j + 1 ;
32314: LD_ADDR_VAR 0 3
32318: PUSH
32319: LD_VAR 0 3
32323: PUSH
32324: LD_INT 1
32326: PLUS
32327: ST_TO_ADDR
// SetSide ( i , j ) ;
32328: LD_VAR 0 2
32332: PPUSH
32333: LD_VAR 0 3
32337: PPUSH
32338: CALL_OW 235
// end ;
32342: GO 32265
32344: POP
32345: POP
// end ;
32346: LD_VAR 0 1
32350: RET
// export function hHackFog ; begin
32351: LD_INT 0
32353: PPUSH
// FogOff ( true ) ;
32354: LD_INT 1
32356: PPUSH
32357: CALL_OW 344
// end ;
32361: LD_VAR 0 1
32365: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32366: LD_INT 0
32368: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32369: LD_VAR 0 1
32373: PPUSH
32374: LD_VAR 0 2
32378: PPUSH
32379: LD_VAR 0 3
32383: PPUSH
32384: LD_INT 1
32386: PPUSH
32387: LD_INT 1
32389: PPUSH
32390: CALL_OW 483
// CenterOnXY ( x , y ) ;
32394: LD_VAR 0 2
32398: PPUSH
32399: LD_VAR 0 3
32403: PPUSH
32404: CALL_OW 84
// end ; end_of_file
32408: LD_VAR 0 4
32412: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32413: LD_VAR 0 1
32417: PUSH
32418: LD_INT 200
32420: DOUBLE
32421: GREATEREQUAL
32422: IFFALSE 32430
32424: LD_INT 299
32426: DOUBLE
32427: LESSEQUAL
32428: IFTRUE 32432
32430: GO 32464
32432: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32433: LD_VAR 0 1
32437: PPUSH
32438: LD_VAR 0 2
32442: PPUSH
32443: LD_VAR 0 3
32447: PPUSH
32448: LD_VAR 0 4
32452: PPUSH
32453: LD_VAR 0 5
32457: PPUSH
32458: CALL 32698 0 5
32462: GO 32541
32464: LD_INT 300
32466: DOUBLE
32467: GREATEREQUAL
32468: IFFALSE 32476
32470: LD_INT 399
32472: DOUBLE
32473: LESSEQUAL
32474: IFTRUE 32478
32476: GO 32540
32478: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32479: LD_VAR 0 1
32483: PPUSH
32484: LD_VAR 0 2
32488: PPUSH
32489: LD_VAR 0 3
32493: PPUSH
32494: LD_VAR 0 4
32498: PPUSH
32499: LD_VAR 0 5
32503: PPUSH
32504: LD_VAR 0 6
32508: PPUSH
32509: LD_VAR 0 7
32513: PPUSH
32514: LD_VAR 0 8
32518: PPUSH
32519: LD_VAR 0 9
32523: PPUSH
32524: LD_VAR 0 10
32528: PPUSH
32529: LD_VAR 0 11
32533: PPUSH
32534: CALL 30433 0 11
32538: GO 32541
32540: POP
// end ;
32541: PPOPN 11
32543: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32544: LD_VAR 0 1
32548: PPUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: LD_VAR 0 4
32563: PPUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: CALL 32690 0 5
// end ; end_of_file end_of_file
32573: PPOPN 5
32575: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32576: LD_INT 0
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32582: LD_VAR 0 1
32586: PPUSH
32587: CALL_OW 264
32591: PUSH
32592: LD_EXP 140
32596: EQUAL
32597: IFFALSE 32669
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32599: LD_INT 68
32601: PPUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 255
32611: PPUSH
32612: CALL_OW 321
32616: PUSH
32617: LD_INT 2
32619: EQUAL
32620: IFFALSE 32632
// eff := 70 else
32622: LD_ADDR_VAR 0 4
32626: PUSH
32627: LD_INT 70
32629: ST_TO_ADDR
32630: GO 32640
// eff := 30 ;
32632: LD_ADDR_VAR 0 4
32636: PUSH
32637: LD_INT 30
32639: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32640: LD_VAR 0 1
32644: PPUSH
32645: CALL_OW 250
32649: PPUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 251
32659: PPUSH
32660: LD_VAR 0 4
32664: PPUSH
32665: CALL_OW 495
// end ; end ;
32669: LD_VAR 0 2
32673: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32674: LD_INT 0
32676: PPUSH
// end ;
32677: LD_VAR 0 4
32681: RET
// export function SOS_Command ( cmd ) ; begin
32682: LD_INT 0
32684: PPUSH
// end ;
32685: LD_VAR 0 2
32689: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32690: LD_INT 0
32692: PPUSH
// end ;
32693: LD_VAR 0 6
32697: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32698: LD_INT 0
32700: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32701: LD_VAR 0 1
32705: PUSH
32706: LD_INT 250
32708: EQUAL
32709: PUSH
32710: LD_VAR 0 2
32714: PPUSH
32715: CALL_OW 264
32719: PUSH
32720: LD_EXP 143
32724: EQUAL
32725: AND
32726: IFFALSE 32747
// MinerPlaceMine ( unit , x , y ) ;
32728: LD_VAR 0 2
32732: PPUSH
32733: LD_VAR 0 4
32737: PPUSH
32738: LD_VAR 0 5
32742: PPUSH
32743: CALL 35096 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32747: LD_VAR 0 1
32751: PUSH
32752: LD_INT 251
32754: EQUAL
32755: PUSH
32756: LD_VAR 0 2
32760: PPUSH
32761: CALL_OW 264
32765: PUSH
32766: LD_EXP 143
32770: EQUAL
32771: AND
32772: IFFALSE 32793
// MinerDetonateMine ( unit , x , y ) ;
32774: LD_VAR 0 2
32778: PPUSH
32779: LD_VAR 0 4
32783: PPUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: CALL 35373 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32793: LD_VAR 0 1
32797: PUSH
32798: LD_INT 252
32800: EQUAL
32801: PUSH
32802: LD_VAR 0 2
32806: PPUSH
32807: CALL_OW 264
32811: PUSH
32812: LD_EXP 143
32816: EQUAL
32817: AND
32818: IFFALSE 32839
// MinerCreateMinefield ( unit , x , y ) ;
32820: LD_VAR 0 2
32824: PPUSH
32825: LD_VAR 0 4
32829: PPUSH
32830: LD_VAR 0 5
32834: PPUSH
32835: CALL 35790 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32839: LD_VAR 0 1
32843: PUSH
32844: LD_INT 253
32846: EQUAL
32847: PUSH
32848: LD_VAR 0 2
32852: PPUSH
32853: CALL_OW 257
32857: PUSH
32858: LD_INT 5
32860: EQUAL
32861: AND
32862: IFFALSE 32883
// ComBinocular ( unit , x , y ) ;
32864: LD_VAR 0 2
32868: PPUSH
32869: LD_VAR 0 4
32873: PPUSH
32874: LD_VAR 0 5
32878: PPUSH
32879: CALL 36161 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32883: LD_VAR 0 1
32887: PUSH
32888: LD_INT 254
32890: EQUAL
32891: PUSH
32892: LD_VAR 0 2
32896: PPUSH
32897: CALL_OW 264
32901: PUSH
32902: LD_EXP 138
32906: EQUAL
32907: AND
32908: PUSH
32909: LD_VAR 0 3
32913: PPUSH
32914: CALL_OW 263
32918: PUSH
32919: LD_INT 3
32921: EQUAL
32922: AND
32923: IFFALSE 32939
// HackDestroyVehicle ( unit , selectedUnit ) ;
32925: LD_VAR 0 2
32929: PPUSH
32930: LD_VAR 0 3
32934: PPUSH
32935: CALL 34456 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32939: LD_VAR 0 1
32943: PUSH
32944: LD_INT 255
32946: EQUAL
32947: PUSH
32948: LD_VAR 0 2
32952: PPUSH
32953: CALL_OW 264
32957: PUSH
32958: LD_INT 14
32960: PUSH
32961: LD_INT 53
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: IN
32968: AND
32969: PUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: CALL_OW 488
32984: AND
32985: IFFALSE 33009
// CutTreeXYR ( unit , x , y , 12 ) ;
32987: LD_VAR 0 2
32991: PPUSH
32992: LD_VAR 0 4
32996: PPUSH
32997: LD_VAR 0 5
33001: PPUSH
33002: LD_INT 12
33004: PPUSH
33005: CALL 33022 0 4
// end ;
33009: LD_VAR 0 6
33013: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33014: LD_INT 0
33016: PPUSH
// end ;
33017: LD_VAR 0 4
33021: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33022: LD_INT 0
33024: PPUSH
33025: PPUSH
33026: PPUSH
33027: PPUSH
33028: PPUSH
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33033: LD_VAR 0 1
33037: NOT
33038: PUSH
33039: LD_VAR 0 2
33043: PPUSH
33044: LD_VAR 0 3
33048: PPUSH
33049: CALL_OW 488
33053: NOT
33054: OR
33055: PUSH
33056: LD_VAR 0 4
33060: NOT
33061: OR
33062: IFFALSE 33066
// exit ;
33064: GO 33406
// list := [ ] ;
33066: LD_ADDR_VAR 0 13
33070: PUSH
33071: EMPTY
33072: ST_TO_ADDR
// if x - r < 0 then
33073: LD_VAR 0 2
33077: PUSH
33078: LD_VAR 0 4
33082: MINUS
33083: PUSH
33084: LD_INT 0
33086: LESS
33087: IFFALSE 33099
// min_x := 0 else
33089: LD_ADDR_VAR 0 7
33093: PUSH
33094: LD_INT 0
33096: ST_TO_ADDR
33097: GO 33115
// min_x := x - r ;
33099: LD_ADDR_VAR 0 7
33103: PUSH
33104: LD_VAR 0 2
33108: PUSH
33109: LD_VAR 0 4
33113: MINUS
33114: ST_TO_ADDR
// if y - r < 0 then
33115: LD_VAR 0 3
33119: PUSH
33120: LD_VAR 0 4
33124: MINUS
33125: PUSH
33126: LD_INT 0
33128: LESS
33129: IFFALSE 33141
// min_y := 0 else
33131: LD_ADDR_VAR 0 8
33135: PUSH
33136: LD_INT 0
33138: ST_TO_ADDR
33139: GO 33157
// min_y := y - r ;
33141: LD_ADDR_VAR 0 8
33145: PUSH
33146: LD_VAR 0 3
33150: PUSH
33151: LD_VAR 0 4
33155: MINUS
33156: ST_TO_ADDR
// max_x := x + r ;
33157: LD_ADDR_VAR 0 9
33161: PUSH
33162: LD_VAR 0 2
33166: PUSH
33167: LD_VAR 0 4
33171: PLUS
33172: ST_TO_ADDR
// max_y := y + r ;
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: LD_VAR 0 3
33182: PUSH
33183: LD_VAR 0 4
33187: PLUS
33188: ST_TO_ADDR
// for _x = min_x to max_x do
33189: LD_ADDR_VAR 0 11
33193: PUSH
33194: DOUBLE
33195: LD_VAR 0 7
33199: DEC
33200: ST_TO_ADDR
33201: LD_VAR 0 9
33205: PUSH
33206: FOR_TO
33207: IFFALSE 33324
// for _y = min_y to max_y do
33209: LD_ADDR_VAR 0 12
33213: PUSH
33214: DOUBLE
33215: LD_VAR 0 8
33219: DEC
33220: ST_TO_ADDR
33221: LD_VAR 0 10
33225: PUSH
33226: FOR_TO
33227: IFFALSE 33320
// begin if not ValidHex ( _x , _y ) then
33229: LD_VAR 0 11
33233: PPUSH
33234: LD_VAR 0 12
33238: PPUSH
33239: CALL_OW 488
33243: NOT
33244: IFFALSE 33248
// continue ;
33246: GO 33226
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33248: LD_VAR 0 11
33252: PPUSH
33253: LD_VAR 0 12
33257: PPUSH
33258: CALL_OW 351
33262: PUSH
33263: LD_VAR 0 11
33267: PPUSH
33268: LD_VAR 0 12
33272: PPUSH
33273: CALL_OW 554
33277: AND
33278: IFFALSE 33318
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33280: LD_ADDR_VAR 0 13
33284: PUSH
33285: LD_VAR 0 13
33289: PPUSH
33290: LD_VAR 0 13
33294: PUSH
33295: LD_INT 1
33297: PLUS
33298: PPUSH
33299: LD_VAR 0 11
33303: PUSH
33304: LD_VAR 0 12
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PPUSH
33313: CALL_OW 2
33317: ST_TO_ADDR
// end ;
33318: GO 33226
33320: POP
33321: POP
33322: GO 33206
33324: POP
33325: POP
// if not list then
33326: LD_VAR 0 13
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 33406
// for i in list do
33335: LD_ADDR_VAR 0 6
33339: PUSH
33340: LD_VAR 0 13
33344: PUSH
33345: FOR_IN
33346: IFFALSE 33404
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_STRING M
33355: PUSH
33356: LD_VAR 0 6
33360: PUSH
33361: LD_INT 1
33363: ARRAY
33364: PUSH
33365: LD_VAR 0 6
33369: PUSH
33370: LD_INT 2
33372: ARRAY
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: PPUSH
33398: CALL_OW 447
33402: GO 33345
33404: POP
33405: POP
// end ;
33406: LD_VAR 0 5
33410: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33411: LD_EXP 126
33415: NOT
33416: IFFALSE 33466
33418: GO 33420
33420: DISABLE
// begin initHack := true ;
33421: LD_ADDR_EXP 126
33425: PUSH
33426: LD_INT 1
33428: ST_TO_ADDR
// hackTanks := [ ] ;
33429: LD_ADDR_EXP 127
33433: PUSH
33434: EMPTY
33435: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33436: LD_ADDR_EXP 128
33440: PUSH
33441: EMPTY
33442: ST_TO_ADDR
// hackLimit := 3 ;
33443: LD_ADDR_EXP 129
33447: PUSH
33448: LD_INT 3
33450: ST_TO_ADDR
// hackDist := 12 ;
33451: LD_ADDR_EXP 130
33455: PUSH
33456: LD_INT 12
33458: ST_TO_ADDR
// hackCounter := [ ] ;
33459: LD_ADDR_EXP 131
33463: PUSH
33464: EMPTY
33465: ST_TO_ADDR
// end ;
33466: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33467: LD_EXP 126
33471: PUSH
33472: LD_INT 34
33474: PUSH
33475: LD_EXP 138
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PPUSH
33484: CALL_OW 69
33488: AND
33489: IFFALSE 33744
33491: GO 33493
33493: DISABLE
33494: LD_INT 0
33496: PPUSH
33497: PPUSH
// begin enable ;
33498: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33499: LD_ADDR_VAR 0 1
33503: PUSH
33504: LD_INT 34
33506: PUSH
33507: LD_EXP 138
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PPUSH
33516: CALL_OW 69
33520: PUSH
33521: FOR_IN
33522: IFFALSE 33742
// begin if not i in hackTanks then
33524: LD_VAR 0 1
33528: PUSH
33529: LD_EXP 127
33533: IN
33534: NOT
33535: IFFALSE 33618
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33537: LD_ADDR_EXP 127
33541: PUSH
33542: LD_EXP 127
33546: PPUSH
33547: LD_EXP 127
33551: PUSH
33552: LD_INT 1
33554: PLUS
33555: PPUSH
33556: LD_VAR 0 1
33560: PPUSH
33561: CALL_OW 1
33565: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33566: LD_ADDR_EXP 128
33570: PUSH
33571: LD_EXP 128
33575: PPUSH
33576: LD_EXP 128
33580: PUSH
33581: LD_INT 1
33583: PLUS
33584: PPUSH
33585: EMPTY
33586: PPUSH
33587: CALL_OW 1
33591: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33592: LD_ADDR_EXP 131
33596: PUSH
33597: LD_EXP 131
33601: PPUSH
33602: LD_EXP 131
33606: PUSH
33607: LD_INT 1
33609: PLUS
33610: PPUSH
33611: EMPTY
33612: PPUSH
33613: CALL_OW 1
33617: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 302
33627: NOT
33628: IFFALSE 33641
// begin HackUnlinkAll ( i ) ;
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL 33747 0 1
// continue ;
33639: GO 33521
// end ; HackCheckCapturedStatus ( i ) ;
33641: LD_VAR 0 1
33645: PPUSH
33646: CALL 34190 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33650: LD_ADDR_VAR 0 2
33654: PUSH
33655: LD_INT 81
33657: PUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 255
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 33
33674: PUSH
33675: LD_INT 3
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 91
33684: PUSH
33685: LD_VAR 0 1
33689: PUSH
33690: LD_EXP 130
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 50
33702: PUSH
33703: EMPTY
33704: LIST
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: PPUSH
33712: CALL_OW 69
33716: ST_TO_ADDR
// if not tmp then
33717: LD_VAR 0 2
33721: NOT
33722: IFFALSE 33726
// continue ;
33724: GO 33521
// HackLink ( i , tmp ) ;
33726: LD_VAR 0 1
33730: PPUSH
33731: LD_VAR 0 2
33735: PPUSH
33736: CALL 33883 0 2
// end ;
33740: GO 33521
33742: POP
33743: POP
// end ;
33744: PPOPN 2
33746: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
33751: PPUSH
// if not hack in hackTanks then
33752: LD_VAR 0 1
33756: PUSH
33757: LD_EXP 127
33761: IN
33762: NOT
33763: IFFALSE 33767
// exit ;
33765: GO 33878
// index := GetElementIndex ( hackTanks , hack ) ;
33767: LD_ADDR_VAR 0 4
33771: PUSH
33772: LD_EXP 127
33776: PPUSH
33777: LD_VAR 0 1
33781: PPUSH
33782: CALL 41520 0 2
33786: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33787: LD_EXP 128
33791: PUSH
33792: LD_VAR 0 4
33796: ARRAY
33797: IFFALSE 33878
// begin for i in hackTanksCaptured [ index ] do
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_EXP 128
33808: PUSH
33809: LD_VAR 0 4
33813: ARRAY
33814: PUSH
33815: FOR_IN
33816: IFFALSE 33842
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33818: LD_VAR 0 3
33822: PUSH
33823: LD_INT 1
33825: ARRAY
33826: PPUSH
33827: LD_VAR 0 3
33831: PUSH
33832: LD_INT 2
33834: ARRAY
33835: PPUSH
33836: CALL_OW 235
33840: GO 33815
33842: POP
33843: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33844: LD_ADDR_EXP 128
33848: PUSH
33849: LD_EXP 128
33853: PPUSH
33854: LD_VAR 0 4
33858: PPUSH
33859: EMPTY
33860: PPUSH
33861: CALL_OW 1
33865: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33866: LD_VAR 0 1
33870: PPUSH
33871: LD_INT 0
33873: PPUSH
33874: CALL_OW 505
// end ; end ;
33878: LD_VAR 0 2
33882: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
33887: PPUSH
// if not hack in hackTanks or not vehicles then
33888: LD_VAR 0 1
33892: PUSH
33893: LD_EXP 127
33897: IN
33898: NOT
33899: PUSH
33900: LD_VAR 0 2
33904: NOT
33905: OR
33906: IFFALSE 33910
// exit ;
33908: GO 34185
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33910: LD_ADDR_VAR 0 2
33914: PUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: LD_VAR 0 2
33924: PPUSH
33925: LD_INT 1
33927: PPUSH
33928: LD_INT 1
33930: PPUSH
33931: CALL 42170 0 4
33935: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33936: LD_ADDR_VAR 0 5
33940: PUSH
33941: LD_EXP 127
33945: PPUSH
33946: LD_VAR 0 1
33950: PPUSH
33951: CALL 41520 0 2
33955: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33956: LD_EXP 128
33960: PUSH
33961: LD_VAR 0 5
33965: ARRAY
33966: PUSH
33967: LD_EXP 129
33971: LESS
33972: IFFALSE 34161
// begin for i := 1 to vehicles do
33974: LD_ADDR_VAR 0 4
33978: PUSH
33979: DOUBLE
33980: LD_INT 1
33982: DEC
33983: ST_TO_ADDR
33984: LD_VAR 0 2
33988: PUSH
33989: FOR_TO
33990: IFFALSE 34159
// begin if hackTanksCaptured [ index ] = hackLimit then
33992: LD_EXP 128
33996: PUSH
33997: LD_VAR 0 5
34001: ARRAY
34002: PUSH
34003: LD_EXP 129
34007: EQUAL
34008: IFFALSE 34012
// break ;
34010: GO 34159
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34012: LD_ADDR_EXP 131
34016: PUSH
34017: LD_EXP 131
34021: PPUSH
34022: LD_VAR 0 5
34026: PPUSH
34027: LD_EXP 131
34031: PUSH
34032: LD_VAR 0 5
34036: ARRAY
34037: PUSH
34038: LD_INT 1
34040: PLUS
34041: PPUSH
34042: CALL_OW 1
34046: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34047: LD_ADDR_EXP 128
34051: PUSH
34052: LD_EXP 128
34056: PPUSH
34057: LD_VAR 0 5
34061: PUSH
34062: LD_EXP 128
34066: PUSH
34067: LD_VAR 0 5
34071: ARRAY
34072: PUSH
34073: LD_INT 1
34075: PLUS
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PPUSH
34081: LD_VAR 0 2
34085: PUSH
34086: LD_VAR 0 4
34090: ARRAY
34091: PUSH
34092: LD_VAR 0 2
34096: PUSH
34097: LD_VAR 0 4
34101: ARRAY
34102: PPUSH
34103: CALL_OW 255
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PPUSH
34112: CALL 41735 0 3
34116: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34117: LD_VAR 0 2
34121: PUSH
34122: LD_VAR 0 4
34126: ARRAY
34127: PPUSH
34128: LD_VAR 0 1
34132: PPUSH
34133: CALL_OW 255
34137: PPUSH
34138: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34142: LD_VAR 0 2
34146: PUSH
34147: LD_VAR 0 4
34151: ARRAY
34152: PPUSH
34153: CALL_OW 141
// end ;
34157: GO 33989
34159: POP
34160: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34161: LD_VAR 0 1
34165: PPUSH
34166: LD_EXP 128
34170: PUSH
34171: LD_VAR 0 5
34175: ARRAY
34176: PUSH
34177: LD_INT 0
34179: PLUS
34180: PPUSH
34181: CALL_OW 505
// end ;
34185: LD_VAR 0 3
34189: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34190: LD_INT 0
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
// if not hack in hackTanks then
34196: LD_VAR 0 1
34200: PUSH
34201: LD_EXP 127
34205: IN
34206: NOT
34207: IFFALSE 34211
// exit ;
34209: GO 34451
// index := GetElementIndex ( hackTanks , hack ) ;
34211: LD_ADDR_VAR 0 4
34215: PUSH
34216: LD_EXP 127
34220: PPUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL 41520 0 2
34230: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34231: LD_ADDR_VAR 0 3
34235: PUSH
34236: DOUBLE
34237: LD_EXP 128
34241: PUSH
34242: LD_VAR 0 4
34246: ARRAY
34247: INC
34248: ST_TO_ADDR
34249: LD_INT 1
34251: PUSH
34252: FOR_DOWNTO
34253: IFFALSE 34425
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34255: LD_ADDR_VAR 0 5
34259: PUSH
34260: LD_EXP 128
34264: PUSH
34265: LD_VAR 0 4
34269: ARRAY
34270: PUSH
34271: LD_VAR 0 3
34275: ARRAY
34276: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34277: LD_VAR 0 5
34281: PUSH
34282: LD_INT 1
34284: ARRAY
34285: PPUSH
34286: CALL_OW 302
34290: NOT
34291: PUSH
34292: LD_VAR 0 5
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: PPUSH
34301: CALL_OW 255
34305: PUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 255
34315: NONEQUAL
34316: OR
34317: IFFALSE 34423
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34319: LD_VAR 0 5
34323: PUSH
34324: LD_INT 1
34326: ARRAY
34327: PPUSH
34328: CALL_OW 305
34332: PUSH
34333: LD_VAR 0 5
34337: PUSH
34338: LD_INT 1
34340: ARRAY
34341: PPUSH
34342: CALL_OW 255
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 255
34356: EQUAL
34357: AND
34358: IFFALSE 34382
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34360: LD_VAR 0 5
34364: PUSH
34365: LD_INT 1
34367: ARRAY
34368: PPUSH
34369: LD_VAR 0 5
34373: PUSH
34374: LD_INT 2
34376: ARRAY
34377: PPUSH
34378: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34382: LD_ADDR_EXP 128
34386: PUSH
34387: LD_EXP 128
34391: PPUSH
34392: LD_VAR 0 4
34396: PPUSH
34397: LD_EXP 128
34401: PUSH
34402: LD_VAR 0 4
34406: ARRAY
34407: PPUSH
34408: LD_VAR 0 3
34412: PPUSH
34413: CALL_OW 3
34417: PPUSH
34418: CALL_OW 1
34422: ST_TO_ADDR
// end ; end ;
34423: GO 34252
34425: POP
34426: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34427: LD_VAR 0 1
34431: PPUSH
34432: LD_EXP 128
34436: PUSH
34437: LD_VAR 0 4
34441: ARRAY
34442: PUSH
34443: LD_INT 0
34445: PLUS
34446: PPUSH
34447: CALL_OW 505
// end ;
34451: LD_VAR 0 2
34455: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34456: LD_INT 0
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
// if not hack in hackTanks then
34462: LD_VAR 0 1
34466: PUSH
34467: LD_EXP 127
34471: IN
34472: NOT
34473: IFFALSE 34477
// exit ;
34475: GO 34562
// index := GetElementIndex ( hackTanks , hack ) ;
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_EXP 127
34486: PPUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL 41520 0 2
34496: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34497: LD_ADDR_VAR 0 4
34501: PUSH
34502: DOUBLE
34503: LD_INT 1
34505: DEC
34506: ST_TO_ADDR
34507: LD_EXP 128
34511: PUSH
34512: LD_VAR 0 5
34516: ARRAY
34517: PUSH
34518: FOR_TO
34519: IFFALSE 34560
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34521: LD_EXP 128
34525: PUSH
34526: LD_VAR 0 5
34530: ARRAY
34531: PUSH
34532: LD_VAR 0 4
34536: ARRAY
34537: PUSH
34538: LD_INT 1
34540: ARRAY
34541: PUSH
34542: LD_VAR 0 2
34546: EQUAL
34547: IFFALSE 34558
// KillUnit ( vehicle ) ;
34549: LD_VAR 0 2
34553: PPUSH
34554: CALL_OW 66
34558: GO 34518
34560: POP
34561: POP
// end ;
34562: LD_VAR 0 3
34566: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34567: LD_EXP 132
34571: NOT
34572: IFFALSE 34607
34574: GO 34576
34576: DISABLE
// begin initMiner := true ;
34577: LD_ADDR_EXP 132
34581: PUSH
34582: LD_INT 1
34584: ST_TO_ADDR
// minersList := [ ] ;
34585: LD_ADDR_EXP 133
34589: PUSH
34590: EMPTY
34591: ST_TO_ADDR
// minerMinesList := [ ] ;
34592: LD_ADDR_EXP 134
34596: PUSH
34597: EMPTY
34598: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34599: LD_ADDR_EXP 135
34603: PUSH
34604: LD_INT 5
34606: ST_TO_ADDR
// end ;
34607: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34608: LD_EXP 132
34612: PUSH
34613: LD_INT 34
34615: PUSH
34616: LD_EXP 143
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PPUSH
34625: CALL_OW 69
34629: AND
34630: IFFALSE 35093
34632: GO 34634
34634: DISABLE
34635: LD_INT 0
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
// begin enable ;
34641: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34642: LD_ADDR_VAR 0 1
34646: PUSH
34647: LD_INT 34
34649: PUSH
34650: LD_EXP 143
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PPUSH
34659: CALL_OW 69
34663: PUSH
34664: FOR_IN
34665: IFFALSE 34737
// begin if not i in minersList then
34667: LD_VAR 0 1
34671: PUSH
34672: LD_EXP 133
34676: IN
34677: NOT
34678: IFFALSE 34735
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34680: LD_ADDR_EXP 133
34684: PUSH
34685: LD_EXP 133
34689: PPUSH
34690: LD_EXP 133
34694: PUSH
34695: LD_INT 1
34697: PLUS
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 1
34708: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34709: LD_ADDR_EXP 134
34713: PUSH
34714: LD_EXP 134
34718: PPUSH
34719: LD_EXP 134
34723: PUSH
34724: LD_INT 1
34726: PLUS
34727: PPUSH
34728: EMPTY
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// end end ;
34735: GO 34664
34737: POP
34738: POP
// for i := minerMinesList downto 1 do
34739: LD_ADDR_VAR 0 1
34743: PUSH
34744: DOUBLE
34745: LD_EXP 134
34749: INC
34750: ST_TO_ADDR
34751: LD_INT 1
34753: PUSH
34754: FOR_DOWNTO
34755: IFFALSE 35091
// begin if IsLive ( minersList [ i ] ) then
34757: LD_EXP 133
34761: PUSH
34762: LD_VAR 0 1
34766: ARRAY
34767: PPUSH
34768: CALL_OW 300
34772: IFFALSE 34800
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34774: LD_EXP 133
34778: PUSH
34779: LD_VAR 0 1
34783: ARRAY
34784: PPUSH
34785: LD_EXP 134
34789: PUSH
34790: LD_VAR 0 1
34794: ARRAY
34795: PPUSH
34796: CALL_OW 505
// if not minerMinesList [ i ] then
34800: LD_EXP 134
34804: PUSH
34805: LD_VAR 0 1
34809: ARRAY
34810: NOT
34811: IFFALSE 34815
// continue ;
34813: GO 34754
// for j := minerMinesList [ i ] downto 1 do
34815: LD_ADDR_VAR 0 2
34819: PUSH
34820: DOUBLE
34821: LD_EXP 134
34825: PUSH
34826: LD_VAR 0 1
34830: ARRAY
34831: INC
34832: ST_TO_ADDR
34833: LD_INT 1
34835: PUSH
34836: FOR_DOWNTO
34837: IFFALSE 35087
// begin side := GetSide ( minersList [ i ] ) ;
34839: LD_ADDR_VAR 0 3
34843: PUSH
34844: LD_EXP 133
34848: PUSH
34849: LD_VAR 0 1
34853: ARRAY
34854: PPUSH
34855: CALL_OW 255
34859: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34860: LD_ADDR_VAR 0 4
34864: PUSH
34865: LD_EXP 134
34869: PUSH
34870: LD_VAR 0 1
34874: ARRAY
34875: PUSH
34876: LD_VAR 0 2
34880: ARRAY
34881: PUSH
34882: LD_INT 1
34884: ARRAY
34885: PPUSH
34886: LD_EXP 134
34890: PUSH
34891: LD_VAR 0 1
34895: ARRAY
34896: PUSH
34897: LD_VAR 0 2
34901: ARRAY
34902: PUSH
34903: LD_INT 2
34905: ARRAY
34906: PPUSH
34907: CALL_OW 428
34911: ST_TO_ADDR
// if not tmp then
34912: LD_VAR 0 4
34916: NOT
34917: IFFALSE 34921
// continue ;
34919: GO 34836
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34921: LD_VAR 0 4
34925: PUSH
34926: LD_INT 81
34928: PUSH
34929: LD_VAR 0 3
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PPUSH
34938: CALL_OW 69
34942: IN
34943: PUSH
34944: LD_EXP 134
34948: PUSH
34949: LD_VAR 0 1
34953: ARRAY
34954: PUSH
34955: LD_VAR 0 2
34959: ARRAY
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: PPUSH
34965: LD_EXP 134
34969: PUSH
34970: LD_VAR 0 1
34974: ARRAY
34975: PUSH
34976: LD_VAR 0 2
34980: ARRAY
34981: PUSH
34982: LD_INT 2
34984: ARRAY
34985: PPUSH
34986: CALL_OW 458
34990: AND
34991: IFFALSE 35085
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34993: LD_EXP 134
34997: PUSH
34998: LD_VAR 0 1
35002: ARRAY
35003: PUSH
35004: LD_VAR 0 2
35008: ARRAY
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PPUSH
35014: LD_EXP 134
35018: PUSH
35019: LD_VAR 0 1
35023: ARRAY
35024: PUSH
35025: LD_VAR 0 2
35029: ARRAY
35030: PUSH
35031: LD_INT 2
35033: ARRAY
35034: PPUSH
35035: LD_VAR 0 3
35039: PPUSH
35040: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35044: LD_ADDR_EXP 134
35048: PUSH
35049: LD_EXP 134
35053: PPUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_EXP 134
35063: PUSH
35064: LD_VAR 0 1
35068: ARRAY
35069: PPUSH
35070: LD_VAR 0 2
35074: PPUSH
35075: CALL_OW 3
35079: PPUSH
35080: CALL_OW 1
35084: ST_TO_ADDR
// end ; end ;
35085: GO 34836
35087: POP
35088: POP
// end ;
35089: GO 34754
35091: POP
35092: POP
// end ;
35093: PPOPN 4
35095: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
// result := false ;
35100: LD_ADDR_VAR 0 4
35104: PUSH
35105: LD_INT 0
35107: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL_OW 264
35117: PUSH
35118: LD_EXP 143
35122: EQUAL
35123: NOT
35124: IFFALSE 35128
// exit ;
35126: GO 35368
// index := GetElementIndex ( minersList , unit ) ;
35128: LD_ADDR_VAR 0 5
35132: PUSH
35133: LD_EXP 133
35137: PPUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL 41520 0 2
35147: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35148: LD_EXP 134
35152: PUSH
35153: LD_VAR 0 5
35157: ARRAY
35158: PUSH
35159: LD_EXP 135
35163: GREATEREQUAL
35164: IFFALSE 35168
// exit ;
35166: GO 35368
// ComMoveXY ( unit , x , y ) ;
35168: LD_VAR 0 1
35172: PPUSH
35173: LD_VAR 0 2
35177: PPUSH
35178: LD_VAR 0 3
35182: PPUSH
35183: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35187: LD_INT 35
35189: PPUSH
35190: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35194: LD_VAR 0 1
35198: PPUSH
35199: LD_VAR 0 2
35203: PPUSH
35204: LD_VAR 0 3
35208: PPUSH
35209: CALL 72292 0 3
35213: NOT
35214: PUSH
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 314
35224: AND
35225: IFFALSE 35229
// exit ;
35227: GO 35368
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35229: LD_VAR 0 2
35233: PPUSH
35234: LD_VAR 0 3
35238: PPUSH
35239: CALL_OW 428
35243: PUSH
35244: LD_VAR 0 1
35248: EQUAL
35249: PUSH
35250: LD_VAR 0 1
35254: PPUSH
35255: CALL_OW 314
35259: NOT
35260: AND
35261: IFFALSE 35187
// PlaySoundXY ( x , y , PlantMine ) ;
35263: LD_VAR 0 2
35267: PPUSH
35268: LD_VAR 0 3
35272: PPUSH
35273: LD_STRING PlantMine
35275: PPUSH
35276: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35280: LD_VAR 0 2
35284: PPUSH
35285: LD_VAR 0 3
35289: PPUSH
35290: LD_VAR 0 1
35294: PPUSH
35295: CALL_OW 255
35299: PPUSH
35300: LD_INT 0
35302: PPUSH
35303: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35307: LD_ADDR_EXP 134
35311: PUSH
35312: LD_EXP 134
35316: PPUSH
35317: LD_VAR 0 5
35321: PUSH
35322: LD_EXP 134
35326: PUSH
35327: LD_VAR 0 5
35331: ARRAY
35332: PUSH
35333: LD_INT 1
35335: PLUS
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PPUSH
35341: LD_VAR 0 2
35345: PUSH
35346: LD_VAR 0 3
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PPUSH
35355: CALL 41735 0 3
35359: ST_TO_ADDR
// result := true ;
35360: LD_ADDR_VAR 0 4
35364: PUSH
35365: LD_INT 1
35367: ST_TO_ADDR
// end ;
35368: LD_VAR 0 4
35372: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35373: LD_INT 0
35375: PPUSH
35376: PPUSH
35377: PPUSH
// if not unit in minersList then
35378: LD_VAR 0 1
35382: PUSH
35383: LD_EXP 133
35387: IN
35388: NOT
35389: IFFALSE 35393
// exit ;
35391: GO 35785
// index := GetElementIndex ( minersList , unit ) ;
35393: LD_ADDR_VAR 0 6
35397: PUSH
35398: LD_EXP 133
35402: PPUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL 41520 0 2
35412: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35413: LD_ADDR_VAR 0 5
35417: PUSH
35418: DOUBLE
35419: LD_EXP 134
35423: PUSH
35424: LD_VAR 0 6
35428: ARRAY
35429: INC
35430: ST_TO_ADDR
35431: LD_INT 1
35433: PUSH
35434: FOR_DOWNTO
35435: IFFALSE 35596
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35437: LD_EXP 134
35441: PUSH
35442: LD_VAR 0 6
35446: ARRAY
35447: PUSH
35448: LD_VAR 0 5
35452: ARRAY
35453: PUSH
35454: LD_INT 1
35456: ARRAY
35457: PUSH
35458: LD_VAR 0 2
35462: EQUAL
35463: PUSH
35464: LD_EXP 134
35468: PUSH
35469: LD_VAR 0 6
35473: ARRAY
35474: PUSH
35475: LD_VAR 0 5
35479: ARRAY
35480: PUSH
35481: LD_INT 2
35483: ARRAY
35484: PUSH
35485: LD_VAR 0 3
35489: EQUAL
35490: AND
35491: IFFALSE 35594
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35493: LD_EXP 134
35497: PUSH
35498: LD_VAR 0 6
35502: ARRAY
35503: PUSH
35504: LD_VAR 0 5
35508: ARRAY
35509: PUSH
35510: LD_INT 1
35512: ARRAY
35513: PPUSH
35514: LD_EXP 134
35518: PUSH
35519: LD_VAR 0 6
35523: ARRAY
35524: PUSH
35525: LD_VAR 0 5
35529: ARRAY
35530: PUSH
35531: LD_INT 2
35533: ARRAY
35534: PPUSH
35535: LD_VAR 0 1
35539: PPUSH
35540: CALL_OW 255
35544: PPUSH
35545: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35549: LD_ADDR_EXP 134
35553: PUSH
35554: LD_EXP 134
35558: PPUSH
35559: LD_VAR 0 6
35563: PPUSH
35564: LD_EXP 134
35568: PUSH
35569: LD_VAR 0 6
35573: ARRAY
35574: PPUSH
35575: LD_VAR 0 5
35579: PPUSH
35580: CALL_OW 3
35584: PPUSH
35585: CALL_OW 1
35589: ST_TO_ADDR
// exit ;
35590: POP
35591: POP
35592: GO 35785
// end ; end ;
35594: GO 35434
35596: POP
35597: POP
// for i := minerMinesList [ index ] downto 1 do
35598: LD_ADDR_VAR 0 5
35602: PUSH
35603: DOUBLE
35604: LD_EXP 134
35608: PUSH
35609: LD_VAR 0 6
35613: ARRAY
35614: INC
35615: ST_TO_ADDR
35616: LD_INT 1
35618: PUSH
35619: FOR_DOWNTO
35620: IFFALSE 35783
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35622: LD_EXP 134
35626: PUSH
35627: LD_VAR 0 6
35631: ARRAY
35632: PUSH
35633: LD_VAR 0 5
35637: ARRAY
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PPUSH
35643: LD_EXP 134
35647: PUSH
35648: LD_VAR 0 6
35652: ARRAY
35653: PUSH
35654: LD_VAR 0 5
35658: ARRAY
35659: PUSH
35660: LD_INT 2
35662: ARRAY
35663: PPUSH
35664: LD_VAR 0 2
35668: PPUSH
35669: LD_VAR 0 3
35673: PPUSH
35674: CALL_OW 298
35678: PUSH
35679: LD_INT 6
35681: LESS
35682: IFFALSE 35781
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35684: LD_EXP 134
35688: PUSH
35689: LD_VAR 0 6
35693: ARRAY
35694: PUSH
35695: LD_VAR 0 5
35699: ARRAY
35700: PUSH
35701: LD_INT 1
35703: ARRAY
35704: PPUSH
35705: LD_EXP 134
35709: PUSH
35710: LD_VAR 0 6
35714: ARRAY
35715: PUSH
35716: LD_VAR 0 5
35720: ARRAY
35721: PUSH
35722: LD_INT 2
35724: ARRAY
35725: PPUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 255
35735: PPUSH
35736: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35740: LD_ADDR_EXP 134
35744: PUSH
35745: LD_EXP 134
35749: PPUSH
35750: LD_VAR 0 6
35754: PPUSH
35755: LD_EXP 134
35759: PUSH
35760: LD_VAR 0 6
35764: ARRAY
35765: PPUSH
35766: LD_VAR 0 5
35770: PPUSH
35771: CALL_OW 3
35775: PPUSH
35776: CALL_OW 1
35780: ST_TO_ADDR
// end ; end ;
35781: GO 35619
35783: POP
35784: POP
// end ;
35785: LD_VAR 0 4
35789: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35790: LD_INT 0
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
35800: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 264
35810: PUSH
35811: LD_EXP 143
35815: EQUAL
35816: NOT
35817: PUSH
35818: LD_VAR 0 1
35822: PUSH
35823: LD_EXP 133
35827: IN
35828: NOT
35829: OR
35830: IFFALSE 35834
// exit ;
35832: GO 36156
// index := GetElementIndex ( minersList , unit ) ;
35834: LD_ADDR_VAR 0 6
35838: PUSH
35839: LD_EXP 133
35843: PPUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL 41520 0 2
35853: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35854: LD_ADDR_VAR 0 8
35858: PUSH
35859: LD_EXP 135
35863: PUSH
35864: LD_EXP 134
35868: PUSH
35869: LD_VAR 0 6
35873: ARRAY
35874: MINUS
35875: ST_TO_ADDR
// if not minesFreeAmount then
35876: LD_VAR 0 8
35880: NOT
35881: IFFALSE 35885
// exit ;
35883: GO 36156
// tmp := [ ] ;
35885: LD_ADDR_VAR 0 7
35889: PUSH
35890: EMPTY
35891: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35892: LD_ADDR_VAR 0 5
35896: PUSH
35897: DOUBLE
35898: LD_INT 1
35900: DEC
35901: ST_TO_ADDR
35902: LD_VAR 0 8
35906: PUSH
35907: FOR_TO
35908: IFFALSE 36103
// begin _d := rand ( 0 , 5 ) ;
35910: LD_ADDR_VAR 0 11
35914: PUSH
35915: LD_INT 0
35917: PPUSH
35918: LD_INT 5
35920: PPUSH
35921: CALL_OW 12
35925: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35926: LD_ADDR_VAR 0 12
35930: PUSH
35931: LD_INT 2
35933: PPUSH
35934: LD_INT 6
35936: PPUSH
35937: CALL_OW 12
35941: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_VAR 0 11
35956: PPUSH
35957: LD_VAR 0 12
35961: PPUSH
35962: CALL_OW 272
35966: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35967: LD_ADDR_VAR 0 10
35971: PUSH
35972: LD_VAR 0 3
35976: PPUSH
35977: LD_VAR 0 11
35981: PPUSH
35982: LD_VAR 0 12
35986: PPUSH
35987: CALL_OW 273
35991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35992: LD_VAR 0 9
35996: PPUSH
35997: LD_VAR 0 10
36001: PPUSH
36002: CALL_OW 488
36006: PUSH
36007: LD_VAR 0 9
36011: PUSH
36012: LD_VAR 0 10
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_VAR 0 7
36025: IN
36026: NOT
36027: AND
36028: PUSH
36029: LD_VAR 0 9
36033: PPUSH
36034: LD_VAR 0 10
36038: PPUSH
36039: CALL_OW 458
36043: NOT
36044: AND
36045: IFFALSE 36087
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36047: LD_ADDR_VAR 0 7
36051: PUSH
36052: LD_VAR 0 7
36056: PPUSH
36057: LD_VAR 0 7
36061: PUSH
36062: LD_INT 1
36064: PLUS
36065: PPUSH
36066: LD_VAR 0 9
36070: PUSH
36071: LD_VAR 0 10
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PPUSH
36080: CALL_OW 1
36084: ST_TO_ADDR
36085: GO 36101
// i := i - 1 ;
36087: LD_ADDR_VAR 0 5
36091: PUSH
36092: LD_VAR 0 5
36096: PUSH
36097: LD_INT 1
36099: MINUS
36100: ST_TO_ADDR
// end ;
36101: GO 35907
36103: POP
36104: POP
// for i in tmp do
36105: LD_ADDR_VAR 0 5
36109: PUSH
36110: LD_VAR 0 7
36114: PUSH
36115: FOR_IN
36116: IFFALSE 36154
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36118: LD_VAR 0 1
36122: PPUSH
36123: LD_VAR 0 5
36127: PUSH
36128: LD_INT 1
36130: ARRAY
36131: PPUSH
36132: LD_VAR 0 5
36136: PUSH
36137: LD_INT 2
36139: ARRAY
36140: PPUSH
36141: CALL 35096 0 3
36145: NOT
36146: IFFALSE 36152
// exit ;
36148: POP
36149: POP
36150: GO 36156
36152: GO 36115
36154: POP
36155: POP
// end ;
36156: LD_VAR 0 4
36160: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36161: LD_INT 0
36163: PPUSH
36164: PPUSH
36165: PPUSH
36166: PPUSH
36167: PPUSH
36168: PPUSH
36169: PPUSH
// if not GetClass ( unit ) = class_sniper then
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 257
36179: PUSH
36180: LD_INT 5
36182: EQUAL
36183: NOT
36184: IFFALSE 36188
// exit ;
36186: GO 36576
// dist := 8 ;
36188: LD_ADDR_VAR 0 5
36192: PUSH
36193: LD_INT 8
36195: ST_TO_ADDR
// viewRange := 12 ;
36196: LD_ADDR_VAR 0 7
36200: PUSH
36201: LD_INT 12
36203: ST_TO_ADDR
// side := GetSide ( unit ) ;
36204: LD_ADDR_VAR 0 6
36208: PUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 255
36218: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36219: LD_INT 61
36221: PPUSH
36222: LD_VAR 0 6
36226: PPUSH
36227: CALL_OW 321
36231: PUSH
36232: LD_INT 2
36234: EQUAL
36235: IFFALSE 36245
// viewRange := 16 ;
36237: LD_ADDR_VAR 0 7
36241: PUSH
36242: LD_INT 16
36244: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36245: LD_VAR 0 1
36249: PPUSH
36250: LD_VAR 0 2
36254: PPUSH
36255: LD_VAR 0 3
36259: PPUSH
36260: CALL_OW 297
36264: PUSH
36265: LD_VAR 0 5
36269: GREATER
36270: IFFALSE 36349
// begin ComMoveXY ( unit , x , y ) ;
36272: LD_VAR 0 1
36276: PPUSH
36277: LD_VAR 0 2
36281: PPUSH
36282: LD_VAR 0 3
36286: PPUSH
36287: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36291: LD_INT 35
36293: PPUSH
36294: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_VAR 0 2
36307: PPUSH
36308: LD_VAR 0 3
36312: PPUSH
36313: CALL 72292 0 3
36317: NOT
36318: IFFALSE 36322
// exit ;
36320: GO 36576
// until GetDistUnitXY ( unit , x , y ) < dist ;
36322: LD_VAR 0 1
36326: PPUSH
36327: LD_VAR 0 2
36331: PPUSH
36332: LD_VAR 0 3
36336: PPUSH
36337: CALL_OW 297
36341: PUSH
36342: LD_VAR 0 5
36346: LESS
36347: IFFALSE 36291
// end ; ComTurnXY ( unit , x , y ) ;
36349: LD_VAR 0 1
36353: PPUSH
36354: LD_VAR 0 2
36358: PPUSH
36359: LD_VAR 0 3
36363: PPUSH
36364: CALL_OW 118
// wait ( 5 ) ;
36368: LD_INT 5
36370: PPUSH
36371: CALL_OW 67
// _d := GetDir ( unit ) ;
36375: LD_ADDR_VAR 0 10
36379: PUSH
36380: LD_VAR 0 1
36384: PPUSH
36385: CALL_OW 254
36389: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36390: LD_ADDR_VAR 0 8
36394: PUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: CALL_OW 250
36404: PPUSH
36405: LD_VAR 0 10
36409: PPUSH
36410: LD_VAR 0 5
36414: PPUSH
36415: CALL_OW 272
36419: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36420: LD_ADDR_VAR 0 9
36424: PUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 251
36434: PPUSH
36435: LD_VAR 0 10
36439: PPUSH
36440: LD_VAR 0 5
36444: PPUSH
36445: CALL_OW 273
36449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36450: LD_VAR 0 8
36454: PPUSH
36455: LD_VAR 0 9
36459: PPUSH
36460: CALL_OW 488
36464: NOT
36465: IFFALSE 36469
// exit ;
36467: GO 36576
// ComAnimCustom ( unit , 1 ) ;
36469: LD_VAR 0 1
36473: PPUSH
36474: LD_INT 1
36476: PPUSH
36477: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36481: LD_VAR 0 8
36485: PPUSH
36486: LD_VAR 0 9
36490: PPUSH
36491: LD_VAR 0 6
36495: PPUSH
36496: LD_VAR 0 7
36500: PPUSH
36501: CALL_OW 330
// repeat wait ( 1 ) ;
36505: LD_INT 1
36507: PPUSH
36508: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL_OW 316
36521: PUSH
36522: LD_VAR 0 1
36526: PPUSH
36527: CALL_OW 314
36531: OR
36532: PUSH
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 302
36542: NOT
36543: OR
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL_OW 301
36554: OR
36555: IFFALSE 36505
// RemoveSeeing ( _x , _y , side ) ;
36557: LD_VAR 0 8
36561: PPUSH
36562: LD_VAR 0 9
36566: PPUSH
36567: LD_VAR 0 6
36571: PPUSH
36572: CALL_OW 331
// end ; end_of_file
36576: LD_VAR 0 4
36580: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
36581: LD_INT 0
36583: PPUSH
// ar_miner := 81 ;
36584: LD_ADDR_EXP 143
36588: PUSH
36589: LD_INT 81
36591: ST_TO_ADDR
// ar_crane := 88 ;
36592: LD_ADDR_EXP 142
36596: PUSH
36597: LD_INT 88
36599: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
36600: LD_ADDR_EXP 137
36604: PUSH
36605: LD_INT 89
36607: ST_TO_ADDR
// us_hack := 99 ;
36608: LD_ADDR_EXP 138
36612: PUSH
36613: LD_INT 99
36615: ST_TO_ADDR
// us_artillery := 97 ;
36616: LD_ADDR_EXP 139
36620: PUSH
36621: LD_INT 97
36623: ST_TO_ADDR
// ar_bio_bomb := 91 ;
36624: LD_ADDR_EXP 140
36628: PUSH
36629: LD_INT 91
36631: ST_TO_ADDR
// ar_mortar := 92 ;
36632: LD_ADDR_EXP 141
36636: PUSH
36637: LD_INT 92
36639: ST_TO_ADDR
// ru_radar := 98 ;
36640: LD_ADDR_EXP 136
36644: PUSH
36645: LD_INT 98
36647: ST_TO_ADDR
// tech_Artillery := 80 ;
36648: LD_ADDR_EXP 144
36652: PUSH
36653: LD_INT 80
36655: ST_TO_ADDR
// tech_RadMat := 81 ;
36656: LD_ADDR_EXP 145
36660: PUSH
36661: LD_INT 81
36663: ST_TO_ADDR
// tech_BasicTools := 82 ;
36664: LD_ADDR_EXP 146
36668: PUSH
36669: LD_INT 82
36671: ST_TO_ADDR
// tech_Cargo := 83 ;
36672: LD_ADDR_EXP 147
36676: PUSH
36677: LD_INT 83
36679: ST_TO_ADDR
// tech_Track := 84 ;
36680: LD_ADDR_EXP 148
36684: PUSH
36685: LD_INT 84
36687: ST_TO_ADDR
// tech_Crane := 85 ;
36688: LD_ADDR_EXP 149
36692: PUSH
36693: LD_INT 85
36695: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36696: LD_ADDR_EXP 150
36700: PUSH
36701: LD_INT 86
36703: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36704: LD_ADDR_EXP 151
36708: PUSH
36709: LD_INT 87
36711: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
36712: LD_ADDR_EXP 152
36716: PUSH
36717: LD_INT 88
36719: ST_TO_ADDR
// class_mastodont := 31 ;
36720: LD_ADDR_EXP 153
36724: PUSH
36725: LD_INT 31
36727: ST_TO_ADDR
// class_horse := 21 ;
36728: LD_ADDR_EXP 154
36732: PUSH
36733: LD_INT 21
36735: ST_TO_ADDR
// end ;
36736: LD_VAR 0 1
36740: RET
// every 1 do
36741: GO 36743
36743: DISABLE
// InitGlobalVariables ; end_of_file
36744: CALL 36581 0 0
36748: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36749: LD_INT 0
36751: PPUSH
36752: PPUSH
// if exist_mode then
36753: LD_VAR 0 2
36757: IFFALSE 36782
// unit := CreateCharacter ( prefix & ident ) else
36759: LD_ADDR_VAR 0 5
36763: PUSH
36764: LD_VAR 0 3
36768: PUSH
36769: LD_VAR 0 1
36773: STR
36774: PPUSH
36775: CALL_OW 34
36779: ST_TO_ADDR
36780: GO 36797
// unit := NewCharacter ( ident ) ;
36782: LD_ADDR_VAR 0 5
36786: PUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 25
36796: ST_TO_ADDR
// result := unit ;
36797: LD_ADDR_VAR 0 4
36801: PUSH
36802: LD_VAR 0 5
36806: ST_TO_ADDR
// end ;
36807: LD_VAR 0 4
36811: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36812: LD_INT 0
36814: PPUSH
36815: PPUSH
// if not side or not nation then
36816: LD_VAR 0 1
36820: NOT
36821: PUSH
36822: LD_VAR 0 2
36826: NOT
36827: OR
36828: IFFALSE 36832
// exit ;
36830: GO 37600
// case nation of nation_american :
36832: LD_VAR 0 2
36836: PUSH
36837: LD_INT 1
36839: DOUBLE
36840: EQUAL
36841: IFTRUE 36845
36843: GO 37059
36845: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36846: LD_ADDR_VAR 0 4
36850: PUSH
36851: LD_INT 35
36853: PUSH
36854: LD_INT 45
36856: PUSH
36857: LD_INT 46
36859: PUSH
36860: LD_INT 47
36862: PUSH
36863: LD_INT 82
36865: PUSH
36866: LD_INT 83
36868: PUSH
36869: LD_INT 84
36871: PUSH
36872: LD_INT 85
36874: PUSH
36875: LD_INT 86
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 6
36886: PUSH
36887: LD_INT 15
36889: PUSH
36890: LD_INT 16
36892: PUSH
36893: LD_INT 7
36895: PUSH
36896: LD_INT 12
36898: PUSH
36899: LD_INT 13
36901: PUSH
36902: LD_INT 10
36904: PUSH
36905: LD_INT 14
36907: PUSH
36908: LD_INT 20
36910: PUSH
36911: LD_INT 21
36913: PUSH
36914: LD_INT 22
36916: PUSH
36917: LD_INT 25
36919: PUSH
36920: LD_INT 32
36922: PUSH
36923: LD_INT 27
36925: PUSH
36926: LD_INT 36
36928: PUSH
36929: LD_INT 69
36931: PUSH
36932: LD_INT 39
36934: PUSH
36935: LD_INT 34
36937: PUSH
36938: LD_INT 40
36940: PUSH
36941: LD_INT 48
36943: PUSH
36944: LD_INT 49
36946: PUSH
36947: LD_INT 50
36949: PUSH
36950: LD_INT 51
36952: PUSH
36953: LD_INT 52
36955: PUSH
36956: LD_INT 53
36958: PUSH
36959: LD_INT 54
36961: PUSH
36962: LD_INT 55
36964: PUSH
36965: LD_INT 56
36967: PUSH
36968: LD_INT 57
36970: PUSH
36971: LD_INT 58
36973: PUSH
36974: LD_INT 59
36976: PUSH
36977: LD_INT 60
36979: PUSH
36980: LD_INT 61
36982: PUSH
36983: LD_INT 62
36985: PUSH
36986: LD_INT 80
36988: PUSH
36989: LD_INT 82
36991: PUSH
36992: LD_INT 83
36994: PUSH
36995: LD_INT 84
36997: PUSH
36998: LD_INT 85
37000: PUSH
37001: LD_INT 86
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
37057: GO 37524
37059: LD_INT 2
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37293
37067: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37068: LD_ADDR_VAR 0 4
37072: PUSH
37073: LD_INT 35
37075: PUSH
37076: LD_INT 45
37078: PUSH
37079: LD_INT 46
37081: PUSH
37082: LD_INT 47
37084: PUSH
37085: LD_INT 82
37087: PUSH
37088: LD_INT 83
37090: PUSH
37091: LD_INT 84
37093: PUSH
37094: LD_INT 85
37096: PUSH
37097: LD_INT 87
37099: PUSH
37100: LD_INT 70
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 11
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: LD_INT 4
37114: PUSH
37115: LD_INT 5
37117: PUSH
37118: LD_INT 6
37120: PUSH
37121: LD_INT 15
37123: PUSH
37124: LD_INT 18
37126: PUSH
37127: LD_INT 7
37129: PUSH
37130: LD_INT 17
37132: PUSH
37133: LD_INT 8
37135: PUSH
37136: LD_INT 20
37138: PUSH
37139: LD_INT 21
37141: PUSH
37142: LD_INT 22
37144: PUSH
37145: LD_INT 72
37147: PUSH
37148: LD_INT 26
37150: PUSH
37151: LD_INT 69
37153: PUSH
37154: LD_INT 39
37156: PUSH
37157: LD_INT 40
37159: PUSH
37160: LD_INT 41
37162: PUSH
37163: LD_INT 42
37165: PUSH
37166: LD_INT 43
37168: PUSH
37169: LD_INT 48
37171: PUSH
37172: LD_INT 49
37174: PUSH
37175: LD_INT 50
37177: PUSH
37178: LD_INT 51
37180: PUSH
37181: LD_INT 52
37183: PUSH
37184: LD_INT 53
37186: PUSH
37187: LD_INT 54
37189: PUSH
37190: LD_INT 55
37192: PUSH
37193: LD_INT 56
37195: PUSH
37196: LD_INT 60
37198: PUSH
37199: LD_INT 61
37201: PUSH
37202: LD_INT 62
37204: PUSH
37205: LD_INT 66
37207: PUSH
37208: LD_INT 67
37210: PUSH
37211: LD_INT 68
37213: PUSH
37214: LD_INT 81
37216: PUSH
37217: LD_INT 82
37219: PUSH
37220: LD_INT 83
37222: PUSH
37223: LD_INT 84
37225: PUSH
37226: LD_INT 85
37228: PUSH
37229: LD_INT 87
37231: PUSH
37232: LD_INT 88
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: ST_TO_ADDR
37291: GO 37524
37293: LD_INT 3
37295: DOUBLE
37296: EQUAL
37297: IFTRUE 37301
37299: GO 37523
37301: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37302: LD_ADDR_VAR 0 4
37306: PUSH
37307: LD_INT 46
37309: PUSH
37310: LD_INT 47
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: LD_INT 82
37321: PUSH
37322: LD_INT 83
37324: PUSH
37325: LD_INT 84
37327: PUSH
37328: LD_INT 85
37330: PUSH
37331: LD_INT 86
37333: PUSH
37334: LD_INT 11
37336: PUSH
37337: LD_INT 9
37339: PUSH
37340: LD_INT 20
37342: PUSH
37343: LD_INT 19
37345: PUSH
37346: LD_INT 21
37348: PUSH
37349: LD_INT 24
37351: PUSH
37352: LD_INT 22
37354: PUSH
37355: LD_INT 25
37357: PUSH
37358: LD_INT 28
37360: PUSH
37361: LD_INT 29
37363: PUSH
37364: LD_INT 30
37366: PUSH
37367: LD_INT 31
37369: PUSH
37370: LD_INT 37
37372: PUSH
37373: LD_INT 38
37375: PUSH
37376: LD_INT 32
37378: PUSH
37379: LD_INT 27
37381: PUSH
37382: LD_INT 33
37384: PUSH
37385: LD_INT 69
37387: PUSH
37388: LD_INT 39
37390: PUSH
37391: LD_INT 34
37393: PUSH
37394: LD_INT 40
37396: PUSH
37397: LD_INT 71
37399: PUSH
37400: LD_INT 23
37402: PUSH
37403: LD_INT 44
37405: PUSH
37406: LD_INT 48
37408: PUSH
37409: LD_INT 49
37411: PUSH
37412: LD_INT 50
37414: PUSH
37415: LD_INT 51
37417: PUSH
37418: LD_INT 52
37420: PUSH
37421: LD_INT 53
37423: PUSH
37424: LD_INT 54
37426: PUSH
37427: LD_INT 55
37429: PUSH
37430: LD_INT 56
37432: PUSH
37433: LD_INT 57
37435: PUSH
37436: LD_INT 58
37438: PUSH
37439: LD_INT 59
37441: PUSH
37442: LD_INT 63
37444: PUSH
37445: LD_INT 64
37447: PUSH
37448: LD_INT 65
37450: PUSH
37451: LD_INT 82
37453: PUSH
37454: LD_INT 83
37456: PUSH
37457: LD_INT 84
37459: PUSH
37460: LD_INT 85
37462: PUSH
37463: LD_INT 86
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
37521: GO 37524
37523: POP
// if state > - 1 and state < 3 then
37524: LD_VAR 0 3
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: GREATER
37533: PUSH
37534: LD_VAR 0 3
37538: PUSH
37539: LD_INT 3
37541: LESS
37542: AND
37543: IFFALSE 37600
// for i in result do
37545: LD_ADDR_VAR 0 5
37549: PUSH
37550: LD_VAR 0 4
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37598
// if GetTech ( i , side ) <> state then
37558: LD_VAR 0 5
37562: PPUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 321
37572: PUSH
37573: LD_VAR 0 3
37577: NONEQUAL
37578: IFFALSE 37596
// result := result diff i ;
37580: LD_ADDR_VAR 0 4
37584: PUSH
37585: LD_VAR 0 4
37589: PUSH
37590: LD_VAR 0 5
37594: DIFF
37595: ST_TO_ADDR
37596: GO 37555
37598: POP
37599: POP
// end ;
37600: LD_VAR 0 4
37604: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37605: LD_INT 0
37607: PPUSH
37608: PPUSH
37609: PPUSH
// result := true ;
37610: LD_ADDR_VAR 0 3
37614: PUSH
37615: LD_INT 1
37617: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37618: LD_ADDR_VAR 0 5
37622: PUSH
37623: LD_VAR 0 2
37627: PPUSH
37628: CALL_OW 480
37632: ST_TO_ADDR
// if not tmp then
37633: LD_VAR 0 5
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37691
// for i in tmp do
37642: LD_ADDR_VAR 0 4
37646: PUSH
37647: LD_VAR 0 5
37651: PUSH
37652: FOR_IN
37653: IFFALSE 37689
// if GetTech ( i , side ) <> state_researched then
37655: LD_VAR 0 4
37659: PPUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 321
37669: PUSH
37670: LD_INT 2
37672: NONEQUAL
37673: IFFALSE 37687
// begin result := false ;
37675: LD_ADDR_VAR 0 3
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
// exit ;
37683: POP
37684: POP
37685: GO 37691
// end ;
37687: GO 37652
37689: POP
37690: POP
// end ;
37691: LD_VAR 0 3
37695: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37696: LD_INT 0
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37711: LD_VAR 0 1
37715: NOT
37716: PUSH
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 257
37726: PUSH
37727: LD_INT 9
37729: NONEQUAL
37730: OR
37731: IFFALSE 37735
// exit ;
37733: GO 38308
// side := GetSide ( unit ) ;
37735: LD_ADDR_VAR 0 9
37739: PUSH
37740: LD_VAR 0 1
37744: PPUSH
37745: CALL_OW 255
37749: ST_TO_ADDR
// tech_space := tech_spacanom ;
37750: LD_ADDR_VAR 0 12
37754: PUSH
37755: LD_INT 29
37757: ST_TO_ADDR
// tech_time := tech_taurad ;
37758: LD_ADDR_VAR 0 13
37762: PUSH
37763: LD_INT 28
37765: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37766: LD_ADDR_VAR 0 11
37770: PUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL_OW 310
37780: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37781: LD_VAR 0 11
37785: PPUSH
37786: CALL_OW 247
37790: PUSH
37791: LD_INT 2
37793: EQUAL
37794: IFFALSE 37798
// exit ;
37796: GO 38308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37798: LD_ADDR_VAR 0 8
37802: PUSH
37803: LD_INT 81
37805: PUSH
37806: LD_VAR 0 9
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 21
37820: PUSH
37821: LD_INT 3
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PPUSH
37836: CALL_OW 69
37840: ST_TO_ADDR
// if not tmp then
37841: LD_VAR 0 8
37845: NOT
37846: IFFALSE 37850
// exit ;
37848: GO 38308
// if in_unit then
37850: LD_VAR 0 11
37854: IFFALSE 37878
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37856: LD_ADDR_VAR 0 10
37860: PUSH
37861: LD_VAR 0 8
37865: PPUSH
37866: LD_VAR 0 11
37870: PPUSH
37871: CALL_OW 74
37875: ST_TO_ADDR
37876: GO 37898
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37878: LD_ADDR_VAR 0 10
37882: PUSH
37883: LD_VAR 0 8
37887: PPUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 74
37897: ST_TO_ADDR
// if not enemy then
37898: LD_VAR 0 10
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 38308
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37907: LD_VAR 0 11
37911: PUSH
37912: LD_VAR 0 11
37916: PPUSH
37917: LD_VAR 0 10
37921: PPUSH
37922: CALL_OW 296
37926: PUSH
37927: LD_INT 13
37929: GREATER
37930: AND
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: LD_VAR 0 10
37941: PPUSH
37942: CALL_OW 296
37946: PUSH
37947: LD_INT 12
37949: GREATER
37950: OR
37951: IFFALSE 37955
// exit ;
37953: GO 38308
// missile := [ 1 ] ;
37955: LD_ADDR_VAR 0 14
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37966: LD_VAR 0 9
37970: PPUSH
37971: LD_VAR 0 12
37975: PPUSH
37976: CALL_OW 325
37980: IFFALSE 38009
// missile := Insert ( missile , missile + 1 , 2 ) ;
37982: LD_ADDR_VAR 0 14
37986: PUSH
37987: LD_VAR 0 14
37991: PPUSH
37992: LD_VAR 0 14
37996: PUSH
37997: LD_INT 1
37999: PLUS
38000: PPUSH
38001: LD_INT 2
38003: PPUSH
38004: CALL_OW 2
38008: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38009: LD_VAR 0 9
38013: PPUSH
38014: LD_VAR 0 13
38018: PPUSH
38019: CALL_OW 325
38023: PUSH
38024: LD_VAR 0 10
38028: PPUSH
38029: CALL_OW 255
38033: PPUSH
38034: LD_VAR 0 13
38038: PPUSH
38039: CALL_OW 325
38043: NOT
38044: AND
38045: IFFALSE 38074
// missile := Insert ( missile , missile + 1 , 3 ) ;
38047: LD_ADDR_VAR 0 14
38051: PUSH
38052: LD_VAR 0 14
38056: PPUSH
38057: LD_VAR 0 14
38061: PUSH
38062: LD_INT 1
38064: PLUS
38065: PPUSH
38066: LD_INT 3
38068: PPUSH
38069: CALL_OW 2
38073: ST_TO_ADDR
// if missile < 2 then
38074: LD_VAR 0 14
38078: PUSH
38079: LD_INT 2
38081: LESS
38082: IFFALSE 38086
// exit ;
38084: GO 38308
// x := GetX ( enemy ) ;
38086: LD_ADDR_VAR 0 4
38090: PUSH
38091: LD_VAR 0 10
38095: PPUSH
38096: CALL_OW 250
38100: ST_TO_ADDR
// y := GetY ( enemy ) ;
38101: LD_ADDR_VAR 0 5
38105: PUSH
38106: LD_VAR 0 10
38110: PPUSH
38111: CALL_OW 251
38115: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38116: LD_ADDR_VAR 0 6
38120: PUSH
38121: LD_VAR 0 4
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PPUSH
38130: LD_INT 1
38132: PPUSH
38133: CALL_OW 12
38137: PLUS
38138: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38139: LD_ADDR_VAR 0 7
38143: PUSH
38144: LD_VAR 0 5
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PPUSH
38153: LD_INT 1
38155: PPUSH
38156: CALL_OW 12
38160: PLUS
38161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38162: LD_VAR 0 6
38166: PPUSH
38167: LD_VAR 0 7
38171: PPUSH
38172: CALL_OW 488
38176: NOT
38177: IFFALSE 38199
// begin _x := x ;
38179: LD_ADDR_VAR 0 6
38183: PUSH
38184: LD_VAR 0 4
38188: ST_TO_ADDR
// _y := y ;
38189: LD_ADDR_VAR 0 7
38193: PUSH
38194: LD_VAR 0 5
38198: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38199: LD_ADDR_VAR 0 3
38203: PUSH
38204: LD_INT 1
38206: PPUSH
38207: LD_VAR 0 14
38211: PPUSH
38212: CALL_OW 12
38216: ST_TO_ADDR
// case i of 1 :
38217: LD_VAR 0 3
38221: PUSH
38222: LD_INT 1
38224: DOUBLE
38225: EQUAL
38226: IFTRUE 38230
38228: GO 38247
38230: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38231: LD_VAR 0 1
38235: PPUSH
38236: LD_VAR 0 10
38240: PPUSH
38241: CALL_OW 115
38245: GO 38308
38247: LD_INT 2
38249: DOUBLE
38250: EQUAL
38251: IFTRUE 38255
38253: GO 38277
38255: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38256: LD_VAR 0 1
38260: PPUSH
38261: LD_VAR 0 6
38265: PPUSH
38266: LD_VAR 0 7
38270: PPUSH
38271: CALL_OW 153
38275: GO 38308
38277: LD_INT 3
38279: DOUBLE
38280: EQUAL
38281: IFTRUE 38285
38283: GO 38307
38285: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38286: LD_VAR 0 1
38290: PPUSH
38291: LD_VAR 0 6
38295: PPUSH
38296: LD_VAR 0 7
38300: PPUSH
38301: CALL_OW 154
38305: GO 38308
38307: POP
// end ;
38308: LD_VAR 0 2
38312: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38313: LD_INT 0
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
// if not unit or not building then
38321: LD_VAR 0 1
38325: NOT
38326: PUSH
38327: LD_VAR 0 2
38331: NOT
38332: OR
38333: IFFALSE 38337
// exit ;
38335: GO 38495
// x := GetX ( building ) ;
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_VAR 0 2
38346: PPUSH
38347: CALL_OW 250
38351: ST_TO_ADDR
// y := GetY ( building ) ;
38352: LD_ADDR_VAR 0 6
38356: PUSH
38357: LD_VAR 0 2
38361: PPUSH
38362: CALL_OW 251
38366: ST_TO_ADDR
// for i = 0 to 5 do
38367: LD_ADDR_VAR 0 4
38371: PUSH
38372: DOUBLE
38373: LD_INT 0
38375: DEC
38376: ST_TO_ADDR
38377: LD_INT 5
38379: PUSH
38380: FOR_TO
38381: IFFALSE 38493
// begin _x := ShiftX ( x , i , 3 ) ;
38383: LD_ADDR_VAR 0 7
38387: PUSH
38388: LD_VAR 0 5
38392: PPUSH
38393: LD_VAR 0 4
38397: PPUSH
38398: LD_INT 3
38400: PPUSH
38401: CALL_OW 272
38405: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38406: LD_ADDR_VAR 0 8
38410: PUSH
38411: LD_VAR 0 6
38415: PPUSH
38416: LD_VAR 0 4
38420: PPUSH
38421: LD_INT 3
38423: PPUSH
38424: CALL_OW 273
38428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38429: LD_VAR 0 7
38433: PPUSH
38434: LD_VAR 0 8
38438: PPUSH
38439: CALL_OW 488
38443: NOT
38444: IFFALSE 38448
// continue ;
38446: GO 38380
// if HexInfo ( _x , _y ) = 0 then
38448: LD_VAR 0 7
38452: PPUSH
38453: LD_VAR 0 8
38457: PPUSH
38458: CALL_OW 428
38462: PUSH
38463: LD_INT 0
38465: EQUAL
38466: IFFALSE 38491
// begin ComMoveXY ( unit , _x , _y ) ;
38468: LD_VAR 0 1
38472: PPUSH
38473: LD_VAR 0 7
38477: PPUSH
38478: LD_VAR 0 8
38482: PPUSH
38483: CALL_OW 111
// exit ;
38487: POP
38488: POP
38489: GO 38495
// end ; end ;
38491: GO 38380
38493: POP
38494: POP
// end ;
38495: LD_VAR 0 3
38499: RET
// export function ScanBase ( side , base_area ) ; begin
38500: LD_INT 0
38502: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_VAR 0 2
38512: PPUSH
38513: LD_INT 81
38515: PUSH
38516: LD_VAR 0 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PPUSH
38525: CALL_OW 70
38529: ST_TO_ADDR
// end ;
38530: LD_VAR 0 3
38534: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38535: LD_INT 0
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
// result := false ;
38541: LD_ADDR_VAR 0 2
38545: PUSH
38546: LD_INT 0
38548: ST_TO_ADDR
// side := GetSide ( unit ) ;
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: CALL_OW 255
38563: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38564: LD_ADDR_VAR 0 4
38568: PUSH
38569: LD_VAR 0 1
38573: PPUSH
38574: CALL_OW 248
38578: ST_TO_ADDR
// case nat of 1 :
38579: LD_VAR 0 4
38583: PUSH
38584: LD_INT 1
38586: DOUBLE
38587: EQUAL
38588: IFTRUE 38592
38590: GO 38603
38592: POP
// tech := tech_lassight ; 2 :
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: LD_INT 12
38600: ST_TO_ADDR
38601: GO 38642
38603: LD_INT 2
38605: DOUBLE
38606: EQUAL
38607: IFTRUE 38611
38609: GO 38622
38611: POP
// tech := tech_mortar ; 3 :
38612: LD_ADDR_VAR 0 5
38616: PUSH
38617: LD_INT 41
38619: ST_TO_ADDR
38620: GO 38642
38622: LD_INT 3
38624: DOUBLE
38625: EQUAL
38626: IFTRUE 38630
38628: GO 38641
38630: POP
// tech := tech_bazooka ; end ;
38631: LD_ADDR_VAR 0 5
38635: PUSH
38636: LD_INT 44
38638: ST_TO_ADDR
38639: GO 38642
38641: POP
// if Researched ( side , tech ) then
38642: LD_VAR 0 3
38646: PPUSH
38647: LD_VAR 0 5
38651: PPUSH
38652: CALL_OW 325
38656: IFFALSE 38683
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38658: LD_ADDR_VAR 0 2
38662: PUSH
38663: LD_INT 5
38665: PUSH
38666: LD_INT 8
38668: PUSH
38669: LD_INT 9
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: PUSH
38677: LD_VAR 0 4
38681: ARRAY
38682: ST_TO_ADDR
// end ;
38683: LD_VAR 0 2
38687: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38688: LD_INT 0
38690: PPUSH
38691: PPUSH
38692: PPUSH
// if not mines then
38693: LD_VAR 0 2
38697: NOT
38698: IFFALSE 38702
// exit ;
38700: GO 38846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38702: LD_ADDR_VAR 0 5
38706: PUSH
38707: LD_INT 81
38709: PUSH
38710: LD_VAR 0 1
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: LD_INT 21
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PPUSH
38740: CALL_OW 69
38744: ST_TO_ADDR
// for i in mines do
38745: LD_ADDR_VAR 0 4
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: FOR_IN
38756: IFFALSE 38844
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38758: LD_VAR 0 4
38762: PUSH
38763: LD_INT 1
38765: ARRAY
38766: PPUSH
38767: LD_VAR 0 4
38771: PUSH
38772: LD_INT 2
38774: ARRAY
38775: PPUSH
38776: CALL_OW 458
38780: NOT
38781: IFFALSE 38785
// continue ;
38783: GO 38755
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38785: LD_VAR 0 4
38789: PUSH
38790: LD_INT 1
38792: ARRAY
38793: PPUSH
38794: LD_VAR 0 4
38798: PUSH
38799: LD_INT 2
38801: ARRAY
38802: PPUSH
38803: CALL_OW 428
38807: PUSH
38808: LD_VAR 0 5
38812: IN
38813: IFFALSE 38842
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38815: LD_VAR 0 4
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: PPUSH
38824: LD_VAR 0 4
38828: PUSH
38829: LD_INT 2
38831: ARRAY
38832: PPUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL_OW 456
// end ;
38842: GO 38755
38844: POP
38845: POP
// end ;
38846: LD_VAR 0 3
38850: RET
// export function Count ( array ) ; var i ; begin
38851: LD_INT 0
38853: PPUSH
38854: PPUSH
// result := 0 ;
38855: LD_ADDR_VAR 0 2
38859: PUSH
38860: LD_INT 0
38862: ST_TO_ADDR
// for i in array do
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: FOR_IN
38874: IFFALSE 38898
// if i then
38876: LD_VAR 0 3
38880: IFFALSE 38896
// result := result + 1 ;
38882: LD_ADDR_VAR 0 2
38886: PUSH
38887: LD_VAR 0 2
38891: PUSH
38892: LD_INT 1
38894: PLUS
38895: ST_TO_ADDR
38896: GO 38873
38898: POP
38899: POP
// end ;
38900: LD_VAR 0 2
38904: RET
// export function IsEmpty ( building ) ; begin
38905: LD_INT 0
38907: PPUSH
// if not building then
38908: LD_VAR 0 1
38912: NOT
38913: IFFALSE 38917
// exit ;
38915: GO 38960
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38917: LD_ADDR_VAR 0 2
38921: PUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_INT 22
38929: PUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 255
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 58
38946: PUSH
38947: EMPTY
38948: LIST
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PPUSH
38954: CALL_OW 69
38958: IN
38959: ST_TO_ADDR
// end ;
38960: LD_VAR 0 2
38964: RET
// export function IsNotFull ( building ) ; begin
38965: LD_INT 0
38967: PPUSH
// if not building then
38968: LD_VAR 0 1
38972: NOT
38973: IFFALSE 38977
// exit ;
38975: GO 38996
// result := UnitsInside ( building ) < 6 ;
38977: LD_ADDR_VAR 0 2
38981: PUSH
38982: LD_VAR 0 1
38986: PPUSH
38987: CALL_OW 313
38991: PUSH
38992: LD_INT 6
38994: LESS
38995: ST_TO_ADDR
// end ;
38996: LD_VAR 0 2
39000: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39001: LD_INT 0
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
// tmp := [ ] ;
39007: LD_ADDR_VAR 0 3
39011: PUSH
39012: EMPTY
39013: ST_TO_ADDR
// list := [ ] ;
39014: LD_ADDR_VAR 0 5
39018: PUSH
39019: EMPTY
39020: ST_TO_ADDR
// for i = 16 to 25 do
39021: LD_ADDR_VAR 0 4
39025: PUSH
39026: DOUBLE
39027: LD_INT 16
39029: DEC
39030: ST_TO_ADDR
39031: LD_INT 25
39033: PUSH
39034: FOR_TO
39035: IFFALSE 39108
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39037: LD_ADDR_VAR 0 3
39041: PUSH
39042: LD_VAR 0 3
39046: PUSH
39047: LD_INT 22
39049: PUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 255
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 91
39066: PUSH
39067: LD_VAR 0 1
39071: PUSH
39072: LD_INT 6
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 30
39082: PUSH
39083: LD_VAR 0 4
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: PPUSH
39100: CALL_OW 69
39104: ADD
39105: ST_TO_ADDR
39106: GO 39034
39108: POP
39109: POP
// for i = 1 to tmp do
39110: LD_ADDR_VAR 0 4
39114: PUSH
39115: DOUBLE
39116: LD_INT 1
39118: DEC
39119: ST_TO_ADDR
39120: LD_VAR 0 3
39124: PUSH
39125: FOR_TO
39126: IFFALSE 39214
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39128: LD_ADDR_VAR 0 5
39132: PUSH
39133: LD_VAR 0 5
39137: PUSH
39138: LD_VAR 0 3
39142: PUSH
39143: LD_VAR 0 4
39147: ARRAY
39148: PPUSH
39149: CALL_OW 266
39153: PUSH
39154: LD_VAR 0 3
39158: PUSH
39159: LD_VAR 0 4
39163: ARRAY
39164: PPUSH
39165: CALL_OW 250
39169: PUSH
39170: LD_VAR 0 3
39174: PUSH
39175: LD_VAR 0 4
39179: ARRAY
39180: PPUSH
39181: CALL_OW 251
39185: PUSH
39186: LD_VAR 0 3
39190: PUSH
39191: LD_VAR 0 4
39195: ARRAY
39196: PPUSH
39197: CALL_OW 254
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: PUSH
39208: EMPTY
39209: LIST
39210: ADD
39211: ST_TO_ADDR
39212: GO 39125
39214: POP
39215: POP
// result := list ;
39216: LD_ADDR_VAR 0 2
39220: PUSH
39221: LD_VAR 0 5
39225: ST_TO_ADDR
// end ;
39226: LD_VAR 0 2
39230: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39231: LD_INT 0
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
// if not factory then
39240: LD_VAR 0 1
39244: NOT
39245: IFFALSE 39249
// exit ;
39247: GO 39842
// if control = control_apeman then
39249: LD_VAR 0 4
39253: PUSH
39254: LD_INT 5
39256: EQUAL
39257: IFFALSE 39366
// begin tmp := UnitsInside ( factory ) ;
39259: LD_ADDR_VAR 0 8
39263: PUSH
39264: LD_VAR 0 1
39268: PPUSH
39269: CALL_OW 313
39273: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39274: LD_VAR 0 8
39278: PPUSH
39279: LD_INT 25
39281: PUSH
39282: LD_INT 12
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PPUSH
39289: CALL_OW 72
39293: NOT
39294: IFFALSE 39304
// control := control_manual ;
39296: LD_ADDR_VAR 0 4
39300: PUSH
39301: LD_INT 1
39303: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39304: LD_ADDR_VAR 0 8
39308: PUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: CALL 39001 0 1
39318: ST_TO_ADDR
// if tmp then
39319: LD_VAR 0 8
39323: IFFALSE 39366
// begin for i in tmp do
39325: LD_ADDR_VAR 0 7
39329: PUSH
39330: LD_VAR 0 8
39334: PUSH
39335: FOR_IN
39336: IFFALSE 39364
// if i [ 1 ] = b_ext_radio then
39338: LD_VAR 0 7
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PUSH
39347: LD_INT 22
39349: EQUAL
39350: IFFALSE 39362
// begin control := control_remote ;
39352: LD_ADDR_VAR 0 4
39356: PUSH
39357: LD_INT 2
39359: ST_TO_ADDR
// break ;
39360: GO 39364
// end ;
39362: GO 39335
39364: POP
39365: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39366: LD_VAR 0 1
39370: PPUSH
39371: LD_VAR 0 2
39375: PPUSH
39376: LD_VAR 0 3
39380: PPUSH
39381: LD_VAR 0 4
39385: PPUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: CALL_OW 448
39395: IFFALSE 39430
// begin result := [ chassis , engine , control , weapon ] ;
39397: LD_ADDR_VAR 0 6
39401: PUSH
39402: LD_VAR 0 2
39406: PUSH
39407: LD_VAR 0 3
39411: PUSH
39412: LD_VAR 0 4
39416: PUSH
39417: LD_VAR 0 5
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// exit ;
39428: GO 39842
// end ; _chassis := AvailableChassisList ( factory ) ;
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 475
39444: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39445: LD_ADDR_VAR 0 11
39449: PUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 476
39459: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39460: LD_ADDR_VAR 0 12
39464: PUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 477
39474: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39475: LD_ADDR_VAR 0 10
39479: PUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 478
39489: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39490: LD_VAR 0 9
39494: NOT
39495: PUSH
39496: LD_VAR 0 11
39500: NOT
39501: OR
39502: PUSH
39503: LD_VAR 0 12
39507: NOT
39508: OR
39509: PUSH
39510: LD_VAR 0 10
39514: NOT
39515: OR
39516: IFFALSE 39551
// begin result := [ chassis , engine , control , weapon ] ;
39518: LD_ADDR_VAR 0 6
39522: PUSH
39523: LD_VAR 0 2
39527: PUSH
39528: LD_VAR 0 3
39532: PUSH
39533: LD_VAR 0 4
39537: PUSH
39538: LD_VAR 0 5
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// exit ;
39549: GO 39842
// end ; if not chassis in _chassis then
39551: LD_VAR 0 2
39555: PUSH
39556: LD_VAR 0 9
39560: IN
39561: NOT
39562: IFFALSE 39588
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39564: LD_ADDR_VAR 0 2
39568: PUSH
39569: LD_VAR 0 9
39573: PUSH
39574: LD_INT 1
39576: PPUSH
39577: LD_VAR 0 9
39581: PPUSH
39582: CALL_OW 12
39586: ARRAY
39587: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39588: LD_VAR 0 2
39592: PPUSH
39593: LD_VAR 0 3
39597: PPUSH
39598: CALL 39847 0 2
39602: NOT
39603: IFFALSE 39662
// repeat engine := _engine [ 1 ] ;
39605: LD_ADDR_VAR 0 3
39609: PUSH
39610: LD_VAR 0 11
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39619: LD_ADDR_VAR 0 11
39623: PUSH
39624: LD_VAR 0 11
39628: PPUSH
39629: LD_INT 1
39631: PPUSH
39632: CALL_OW 3
39636: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39637: LD_VAR 0 2
39641: PPUSH
39642: LD_VAR 0 3
39646: PPUSH
39647: CALL 39847 0 2
39651: PUSH
39652: LD_VAR 0 11
39656: PUSH
39657: EMPTY
39658: EQUAL
39659: OR
39660: IFFALSE 39605
// if not control in _control then
39662: LD_VAR 0 4
39666: PUSH
39667: LD_VAR 0 12
39671: IN
39672: NOT
39673: IFFALSE 39699
// control := _control [ rand ( 1 , _control ) ] ;
39675: LD_ADDR_VAR 0 4
39679: PUSH
39680: LD_VAR 0 12
39684: PUSH
39685: LD_INT 1
39687: PPUSH
39688: LD_VAR 0 12
39692: PPUSH
39693: CALL_OW 12
39697: ARRAY
39698: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39699: LD_VAR 0 2
39703: PPUSH
39704: LD_VAR 0 5
39708: PPUSH
39709: CALL 40067 0 2
39713: NOT
39714: IFFALSE 39773
// repeat weapon := _weapon [ 1 ] ;
39716: LD_ADDR_VAR 0 5
39720: PUSH
39721: LD_VAR 0 10
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39730: LD_ADDR_VAR 0 10
39734: PUSH
39735: LD_VAR 0 10
39739: PPUSH
39740: LD_INT 1
39742: PPUSH
39743: CALL_OW 3
39747: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39748: LD_VAR 0 2
39752: PPUSH
39753: LD_VAR 0 5
39757: PPUSH
39758: CALL 40067 0 2
39762: PUSH
39763: LD_VAR 0 10
39767: PUSH
39768: EMPTY
39769: EQUAL
39770: OR
39771: IFFALSE 39716
// result := [ ] ;
39773: LD_ADDR_VAR 0 6
39777: PUSH
39778: EMPTY
39779: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39780: LD_VAR 0 1
39784: PPUSH
39785: LD_VAR 0 2
39789: PPUSH
39790: LD_VAR 0 3
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: LD_VAR 0 5
39804: PPUSH
39805: CALL_OW 448
39809: IFFALSE 39842
// result := [ chassis , engine , control , weapon ] ;
39811: LD_ADDR_VAR 0 6
39815: PUSH
39816: LD_VAR 0 2
39820: PUSH
39821: LD_VAR 0 3
39825: PUSH
39826: LD_VAR 0 4
39830: PUSH
39831: LD_VAR 0 5
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: ST_TO_ADDR
// end ;
39842: LD_VAR 0 6
39846: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39847: LD_INT 0
39849: PPUSH
// if not chassis or not engine then
39850: LD_VAR 0 1
39854: NOT
39855: PUSH
39856: LD_VAR 0 2
39860: NOT
39861: OR
39862: IFFALSE 39866
// exit ;
39864: GO 40062
// case engine of engine_solar :
39866: LD_VAR 0 2
39870: PUSH
39871: LD_INT 2
39873: DOUBLE
39874: EQUAL
39875: IFTRUE 39879
39877: GO 39917
39879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_INT 11
39887: PUSH
39888: LD_INT 12
39890: PUSH
39891: LD_INT 13
39893: PUSH
39894: LD_INT 14
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: ST_TO_ADDR
39915: GO 40046
39917: LD_INT 1
39919: DOUBLE
39920: EQUAL
39921: IFTRUE 39925
39923: GO 39987
39925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39926: LD_ADDR_VAR 0 3
39930: PUSH
39931: LD_INT 11
39933: PUSH
39934: LD_INT 12
39936: PUSH
39937: LD_INT 13
39939: PUSH
39940: LD_INT 14
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: LD_INT 4
39954: PUSH
39955: LD_INT 5
39957: PUSH
39958: LD_INT 21
39960: PUSH
39961: LD_INT 23
39963: PUSH
39964: LD_INT 22
39966: PUSH
39967: LD_INT 24
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
39985: GO 40046
39987: LD_INT 3
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40045
39995: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: LD_INT 13
40003: PUSH
40004: LD_INT 14
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: LD_INT 4
40015: PUSH
40016: LD_INT 5
40018: PUSH
40019: LD_INT 21
40021: PUSH
40022: LD_INT 22
40024: PUSH
40025: LD_INT 23
40027: PUSH
40028: LD_INT 24
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: ST_TO_ADDR
40043: GO 40046
40045: POP
// result := ( chassis in result ) ;
40046: LD_ADDR_VAR 0 3
40050: PUSH
40051: LD_VAR 0 1
40055: PUSH
40056: LD_VAR 0 3
40060: IN
40061: ST_TO_ADDR
// end ;
40062: LD_VAR 0 3
40066: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40067: LD_INT 0
40069: PPUSH
// if not chassis or not weapon then
40070: LD_VAR 0 1
40074: NOT
40075: PUSH
40076: LD_VAR 0 2
40080: NOT
40081: OR
40082: IFFALSE 40086
// exit ;
40084: GO 41148
// case weapon of us_machine_gun :
40086: LD_VAR 0 2
40090: PUSH
40091: LD_INT 2
40093: DOUBLE
40094: EQUAL
40095: IFTRUE 40099
40097: GO 40129
40099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 3
40113: PUSH
40114: LD_INT 4
40116: PUSH
40117: LD_INT 5
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
40127: GO 41132
40129: LD_INT 3
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 40167
40137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 4
40154: PUSH
40155: LD_INT 5
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: ST_TO_ADDR
40165: GO 41132
40167: LD_INT 11
40169: DOUBLE
40170: EQUAL
40171: IFTRUE 40175
40173: GO 40205
40175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 4
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: ST_TO_ADDR
40203: GO 41132
40205: LD_INT 4
40207: DOUBLE
40208: EQUAL
40209: IFTRUE 40213
40211: GO 40239
40213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40214: LD_ADDR_VAR 0 3
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: LD_INT 5
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
40237: GO 41132
40239: LD_INT 5
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40273
40247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 3
40258: PUSH
40259: LD_INT 4
40261: PUSH
40262: LD_INT 5
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: ST_TO_ADDR
40271: GO 41132
40273: LD_INT 9
40275: DOUBLE
40276: EQUAL
40277: IFTRUE 40281
40279: GO 40307
40281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40282: LD_ADDR_VAR 0 3
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 3
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 5
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: ST_TO_ADDR
40305: GO 41132
40307: LD_INT 7
40309: DOUBLE
40310: EQUAL
40311: IFTRUE 40315
40313: GO 40341
40315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40316: LD_ADDR_VAR 0 3
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: LD_INT 4
40329: PUSH
40330: LD_INT 5
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: ST_TO_ADDR
40339: GO 41132
40341: LD_INT 12
40343: DOUBLE
40344: EQUAL
40345: IFTRUE 40349
40347: GO 40375
40349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40350: LD_ADDR_VAR 0 3
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: LD_INT 4
40363: PUSH
40364: LD_INT 5
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: ST_TO_ADDR
40373: GO 41132
40375: LD_INT 13
40377: DOUBLE
40378: EQUAL
40379: IFTRUE 40383
40381: GO 40409
40383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40384: LD_ADDR_VAR 0 3
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: LD_INT 5
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
40407: GO 41132
40409: LD_INT 14
40411: DOUBLE
40412: EQUAL
40413: IFTRUE 40417
40415: GO 40435
40417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40418: LD_ADDR_VAR 0 3
40422: PUSH
40423: LD_INT 4
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: ST_TO_ADDR
40433: GO 41132
40435: LD_INT 6
40437: DOUBLE
40438: EQUAL
40439: IFTRUE 40443
40441: GO 40461
40443: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40444: LD_ADDR_VAR 0 3
40448: PUSH
40449: LD_INT 4
40451: PUSH
40452: LD_INT 5
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: ST_TO_ADDR
40459: GO 41132
40461: LD_INT 10
40463: DOUBLE
40464: EQUAL
40465: IFTRUE 40469
40467: GO 40487
40469: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: LD_INT 4
40477: PUSH
40478: LD_INT 5
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: ST_TO_ADDR
40485: GO 41132
40487: LD_INT 22
40489: DOUBLE
40490: EQUAL
40491: IFTRUE 40495
40493: GO 40521
40495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40496: LD_ADDR_VAR 0 3
40500: PUSH
40501: LD_INT 11
40503: PUSH
40504: LD_INT 12
40506: PUSH
40507: LD_INT 13
40509: PUSH
40510: LD_INT 14
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
40519: GO 41132
40521: LD_INT 23
40523: DOUBLE
40524: EQUAL
40525: IFTRUE 40529
40527: GO 40555
40529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_INT 11
40537: PUSH
40538: LD_INT 12
40540: PUSH
40541: LD_INT 13
40543: PUSH
40544: LD_INT 14
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: ST_TO_ADDR
40553: GO 41132
40555: LD_INT 24
40557: DOUBLE
40558: EQUAL
40559: IFTRUE 40563
40561: GO 40589
40563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40564: LD_ADDR_VAR 0 3
40568: PUSH
40569: LD_INT 11
40571: PUSH
40572: LD_INT 12
40574: PUSH
40575: LD_INT 13
40577: PUSH
40578: LD_INT 14
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: ST_TO_ADDR
40587: GO 41132
40589: LD_INT 30
40591: DOUBLE
40592: EQUAL
40593: IFTRUE 40597
40595: GO 40623
40597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40598: LD_ADDR_VAR 0 3
40602: PUSH
40603: LD_INT 11
40605: PUSH
40606: LD_INT 12
40608: PUSH
40609: LD_INT 13
40611: PUSH
40612: LD_INT 14
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: ST_TO_ADDR
40621: GO 41132
40623: LD_INT 25
40625: DOUBLE
40626: EQUAL
40627: IFTRUE 40631
40629: GO 40649
40631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40632: LD_ADDR_VAR 0 3
40636: PUSH
40637: LD_INT 13
40639: PUSH
40640: LD_INT 14
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: ST_TO_ADDR
40647: GO 41132
40649: LD_INT 27
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40675
40657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40658: LD_ADDR_VAR 0 3
40662: PUSH
40663: LD_INT 13
40665: PUSH
40666: LD_INT 14
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: ST_TO_ADDR
40673: GO 41132
40675: LD_EXP 141
40679: DOUBLE
40680: EQUAL
40681: IFTRUE 40685
40683: GO 40711
40685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40686: LD_ADDR_VAR 0 3
40690: PUSH
40691: LD_INT 11
40693: PUSH
40694: LD_INT 12
40696: PUSH
40697: LD_INT 13
40699: PUSH
40700: LD_INT 14
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: ST_TO_ADDR
40709: GO 41132
40711: LD_INT 28
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40737
40719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40720: LD_ADDR_VAR 0 3
40724: PUSH
40725: LD_INT 13
40727: PUSH
40728: LD_INT 14
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: ST_TO_ADDR
40735: GO 41132
40737: LD_INT 29
40739: DOUBLE
40740: EQUAL
40741: IFTRUE 40745
40743: GO 40763
40745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40746: LD_ADDR_VAR 0 3
40750: PUSH
40751: LD_INT 13
40753: PUSH
40754: LD_INT 14
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: ST_TO_ADDR
40761: GO 41132
40763: LD_INT 31
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40771
40769: GO 40789
40771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40772: LD_ADDR_VAR 0 3
40776: PUSH
40777: LD_INT 13
40779: PUSH
40780: LD_INT 14
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: ST_TO_ADDR
40787: GO 41132
40789: LD_INT 26
40791: DOUBLE
40792: EQUAL
40793: IFTRUE 40797
40795: GO 40815
40797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: LD_INT 13
40805: PUSH
40806: LD_INT 14
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: ST_TO_ADDR
40813: GO 41132
40815: LD_INT 42
40817: DOUBLE
40818: EQUAL
40819: IFTRUE 40823
40821: GO 40849
40823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_INT 21
40831: PUSH
40832: LD_INT 22
40834: PUSH
40835: LD_INT 23
40837: PUSH
40838: LD_INT 24
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
40847: GO 41132
40849: LD_INT 43
40851: DOUBLE
40852: EQUAL
40853: IFTRUE 40857
40855: GO 40883
40857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40858: LD_ADDR_VAR 0 3
40862: PUSH
40863: LD_INT 21
40865: PUSH
40866: LD_INT 22
40868: PUSH
40869: LD_INT 23
40871: PUSH
40872: LD_INT 24
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: ST_TO_ADDR
40881: GO 41132
40883: LD_INT 44
40885: DOUBLE
40886: EQUAL
40887: IFTRUE 40891
40889: GO 40917
40891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 21
40899: PUSH
40900: LD_INT 22
40902: PUSH
40903: LD_INT 23
40905: PUSH
40906: LD_INT 24
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
40915: GO 41132
40917: LD_INT 45
40919: DOUBLE
40920: EQUAL
40921: IFTRUE 40925
40923: GO 40951
40925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_INT 21
40933: PUSH
40934: LD_INT 22
40936: PUSH
40937: LD_INT 23
40939: PUSH
40940: LD_INT 24
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
40949: GO 41132
40951: LD_INT 49
40953: DOUBLE
40954: EQUAL
40955: IFTRUE 40959
40957: GO 40985
40959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40960: LD_ADDR_VAR 0 3
40964: PUSH
40965: LD_INT 21
40967: PUSH
40968: LD_INT 22
40970: PUSH
40971: LD_INT 23
40973: PUSH
40974: LD_INT 24
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
40983: GO 41132
40985: LD_INT 51
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41019
40993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_INT 21
41001: PUSH
41002: LD_INT 22
41004: PUSH
41005: LD_INT 23
41007: PUSH
41008: LD_INT 24
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: ST_TO_ADDR
41017: GO 41132
41019: LD_INT 52
41021: DOUBLE
41022: EQUAL
41023: IFTRUE 41027
41025: GO 41053
41027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_INT 21
41035: PUSH
41036: LD_INT 22
41038: PUSH
41039: LD_INT 23
41041: PUSH
41042: LD_INT 24
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
41051: GO 41132
41053: LD_INT 53
41055: DOUBLE
41056: EQUAL
41057: IFTRUE 41061
41059: GO 41079
41061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: LD_INT 23
41069: PUSH
41070: LD_INT 24
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: ST_TO_ADDR
41077: GO 41132
41079: LD_INT 46
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41105
41087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_INT 23
41095: PUSH
41096: LD_INT 24
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: ST_TO_ADDR
41103: GO 41132
41105: LD_INT 47
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41113
41111: GO 41131
41113: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: LD_INT 23
41121: PUSH
41122: LD_INT 24
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: ST_TO_ADDR
41129: GO 41132
41131: POP
// result := ( chassis in result ) ;
41132: LD_ADDR_VAR 0 3
41136: PUSH
41137: LD_VAR 0 1
41141: PUSH
41142: LD_VAR 0 3
41146: IN
41147: ST_TO_ADDR
// end ;
41148: LD_VAR 0 3
41152: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41153: LD_INT 0
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
// result := array ;
41162: LD_ADDR_VAR 0 5
41166: PUSH
41167: LD_VAR 0 1
41171: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41172: LD_VAR 0 1
41176: NOT
41177: PUSH
41178: LD_VAR 0 2
41182: NOT
41183: OR
41184: PUSH
41185: LD_VAR 0 3
41189: NOT
41190: OR
41191: PUSH
41192: LD_VAR 0 2
41196: PUSH
41197: LD_VAR 0 1
41201: GREATER
41202: OR
41203: PUSH
41204: LD_VAR 0 3
41208: PUSH
41209: LD_VAR 0 1
41213: GREATER
41214: OR
41215: IFFALSE 41219
// exit ;
41217: GO 41515
// if direction then
41219: LD_VAR 0 4
41223: IFFALSE 41287
// begin d := 1 ;
41225: LD_ADDR_VAR 0 9
41229: PUSH
41230: LD_INT 1
41232: ST_TO_ADDR
// if i_from > i_to then
41233: LD_VAR 0 2
41237: PUSH
41238: LD_VAR 0 3
41242: GREATER
41243: IFFALSE 41269
// length := ( array - i_from ) + i_to else
41245: LD_ADDR_VAR 0 11
41249: PUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 2
41259: MINUS
41260: PUSH
41261: LD_VAR 0 3
41265: PLUS
41266: ST_TO_ADDR
41267: GO 41285
// length := i_to - i_from ;
41269: LD_ADDR_VAR 0 11
41273: PUSH
41274: LD_VAR 0 3
41278: PUSH
41279: LD_VAR 0 2
41283: MINUS
41284: ST_TO_ADDR
// end else
41285: GO 41348
// begin d := - 1 ;
41287: LD_ADDR_VAR 0 9
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: ST_TO_ADDR
// if i_from > i_to then
41296: LD_VAR 0 2
41300: PUSH
41301: LD_VAR 0 3
41305: GREATER
41306: IFFALSE 41326
// length := i_from - i_to else
41308: LD_ADDR_VAR 0 11
41312: PUSH
41313: LD_VAR 0 2
41317: PUSH
41318: LD_VAR 0 3
41322: MINUS
41323: ST_TO_ADDR
41324: GO 41348
// length := ( array - i_to ) + i_from ;
41326: LD_ADDR_VAR 0 11
41330: PUSH
41331: LD_VAR 0 1
41335: PUSH
41336: LD_VAR 0 3
41340: MINUS
41341: PUSH
41342: LD_VAR 0 2
41346: PLUS
41347: ST_TO_ADDR
// end ; if not length then
41348: LD_VAR 0 11
41352: NOT
41353: IFFALSE 41357
// exit ;
41355: GO 41515
// tmp := array ;
41357: LD_ADDR_VAR 0 10
41361: PUSH
41362: LD_VAR 0 1
41366: ST_TO_ADDR
// for i = 1 to length do
41367: LD_ADDR_VAR 0 6
41371: PUSH
41372: DOUBLE
41373: LD_INT 1
41375: DEC
41376: ST_TO_ADDR
41377: LD_VAR 0 11
41381: PUSH
41382: FOR_TO
41383: IFFALSE 41503
// begin for j = 1 to array do
41385: LD_ADDR_VAR 0 7
41389: PUSH
41390: DOUBLE
41391: LD_INT 1
41393: DEC
41394: ST_TO_ADDR
41395: LD_VAR 0 1
41399: PUSH
41400: FOR_TO
41401: IFFALSE 41489
// begin k := j + d ;
41403: LD_ADDR_VAR 0 8
41407: PUSH
41408: LD_VAR 0 7
41412: PUSH
41413: LD_VAR 0 9
41417: PLUS
41418: ST_TO_ADDR
// if k > array then
41419: LD_VAR 0 8
41423: PUSH
41424: LD_VAR 0 1
41428: GREATER
41429: IFFALSE 41439
// k := 1 ;
41431: LD_ADDR_VAR 0 8
41435: PUSH
41436: LD_INT 1
41438: ST_TO_ADDR
// if not k then
41439: LD_VAR 0 8
41443: NOT
41444: IFFALSE 41456
// k := array ;
41446: LD_ADDR_VAR 0 8
41450: PUSH
41451: LD_VAR 0 1
41455: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41456: LD_ADDR_VAR 0 10
41460: PUSH
41461: LD_VAR 0 10
41465: PPUSH
41466: LD_VAR 0 8
41470: PPUSH
41471: LD_VAR 0 1
41475: PUSH
41476: LD_VAR 0 7
41480: ARRAY
41481: PPUSH
41482: CALL_OW 1
41486: ST_TO_ADDR
// end ;
41487: GO 41400
41489: POP
41490: POP
// array := tmp ;
41491: LD_ADDR_VAR 0 1
41495: PUSH
41496: LD_VAR 0 10
41500: ST_TO_ADDR
// end ;
41501: GO 41382
41503: POP
41504: POP
// result := array ;
41505: LD_ADDR_VAR 0 5
41509: PUSH
41510: LD_VAR 0 1
41514: ST_TO_ADDR
// end ;
41515: LD_VAR 0 5
41519: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41520: LD_INT 0
41522: PPUSH
41523: PPUSH
// result := 0 ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_INT 0
41531: ST_TO_ADDR
// if not array or not value in array then
41532: LD_VAR 0 1
41536: NOT
41537: PUSH
41538: LD_VAR 0 2
41542: PUSH
41543: LD_VAR 0 1
41547: IN
41548: NOT
41549: OR
41550: IFFALSE 41554
// exit ;
41552: GO 41608
// for i = 1 to array do
41554: LD_ADDR_VAR 0 4
41558: PUSH
41559: DOUBLE
41560: LD_INT 1
41562: DEC
41563: ST_TO_ADDR
41564: LD_VAR 0 1
41568: PUSH
41569: FOR_TO
41570: IFFALSE 41606
// if value = array [ i ] then
41572: LD_VAR 0 2
41576: PUSH
41577: LD_VAR 0 1
41581: PUSH
41582: LD_VAR 0 4
41586: ARRAY
41587: EQUAL
41588: IFFALSE 41604
// begin result := i ;
41590: LD_ADDR_VAR 0 3
41594: PUSH
41595: LD_VAR 0 4
41599: ST_TO_ADDR
// exit ;
41600: POP
41601: POP
41602: GO 41608
// end ;
41604: GO 41569
41606: POP
41607: POP
// end ;
41608: LD_VAR 0 3
41612: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41613: LD_INT 0
41615: PPUSH
// vc_chassis := chassis ;
41616: LD_ADDR_OWVAR 37
41620: PUSH
41621: LD_VAR 0 1
41625: ST_TO_ADDR
// vc_engine := engine ;
41626: LD_ADDR_OWVAR 39
41630: PUSH
41631: LD_VAR 0 2
41635: ST_TO_ADDR
// vc_control := control ;
41636: LD_ADDR_OWVAR 38
41640: PUSH
41641: LD_VAR 0 3
41645: ST_TO_ADDR
// vc_weapon := weapon ;
41646: LD_ADDR_OWVAR 40
41650: PUSH
41651: LD_VAR 0 4
41655: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41656: LD_ADDR_OWVAR 41
41660: PUSH
41661: LD_VAR 0 5
41665: ST_TO_ADDR
// end ;
41666: LD_VAR 0 6
41670: RET
// export function WantPlant ( unit ) ; var task ; begin
41671: LD_INT 0
41673: PPUSH
41674: PPUSH
// result := false ;
41675: LD_ADDR_VAR 0 2
41679: PUSH
41680: LD_INT 0
41682: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_VAR 0 1
41692: PPUSH
41693: CALL_OW 437
41697: ST_TO_ADDR
// if task then
41698: LD_VAR 0 3
41702: IFFALSE 41730
// if task [ 1 ] [ 1 ] = p then
41704: LD_VAR 0 3
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: PUSH
41713: LD_INT 1
41715: ARRAY
41716: PUSH
41717: LD_STRING p
41719: EQUAL
41720: IFFALSE 41730
// result := true ;
41722: LD_ADDR_VAR 0 2
41726: PUSH
41727: LD_INT 1
41729: ST_TO_ADDR
// end ;
41730: LD_VAR 0 2
41734: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41735: LD_INT 0
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
// if pos < 1 then
41741: LD_VAR 0 2
41745: PUSH
41746: LD_INT 1
41748: LESS
41749: IFFALSE 41753
// exit ;
41751: GO 42056
// if pos = 1 then
41753: LD_VAR 0 2
41757: PUSH
41758: LD_INT 1
41760: EQUAL
41761: IFFALSE 41794
// result := Replace ( arr , pos [ 1 ] , value ) else
41763: LD_ADDR_VAR 0 4
41767: PUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: LD_VAR 0 2
41777: PUSH
41778: LD_INT 1
41780: ARRAY
41781: PPUSH
41782: LD_VAR 0 3
41786: PPUSH
41787: CALL_OW 1
41791: ST_TO_ADDR
41792: GO 42056
// begin tmp := arr ;
41794: LD_ADDR_VAR 0 6
41798: PUSH
41799: LD_VAR 0 1
41803: ST_TO_ADDR
// s_arr := [ tmp ] ;
41804: LD_ADDR_VAR 0 7
41808: PUSH
41809: LD_VAR 0 6
41813: PUSH
41814: EMPTY
41815: LIST
41816: ST_TO_ADDR
// for i = 1 to pos - 1 do
41817: LD_ADDR_VAR 0 5
41821: PUSH
41822: DOUBLE
41823: LD_INT 1
41825: DEC
41826: ST_TO_ADDR
41827: LD_VAR 0 2
41831: PUSH
41832: LD_INT 1
41834: MINUS
41835: PUSH
41836: FOR_TO
41837: IFFALSE 41882
// begin tmp := tmp [ pos [ i ] ] ;
41839: LD_ADDR_VAR 0 6
41843: PUSH
41844: LD_VAR 0 6
41848: PUSH
41849: LD_VAR 0 2
41853: PUSH
41854: LD_VAR 0 5
41858: ARRAY
41859: ARRAY
41860: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41861: LD_ADDR_VAR 0 7
41865: PUSH
41866: LD_VAR 0 7
41870: PUSH
41871: LD_VAR 0 6
41875: PUSH
41876: EMPTY
41877: LIST
41878: ADD
41879: ST_TO_ADDR
// end ;
41880: GO 41836
41882: POP
41883: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41884: LD_ADDR_VAR 0 6
41888: PUSH
41889: LD_VAR 0 6
41893: PPUSH
41894: LD_VAR 0 2
41898: PUSH
41899: LD_VAR 0 2
41903: ARRAY
41904: PPUSH
41905: LD_VAR 0 3
41909: PPUSH
41910: CALL_OW 1
41914: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41915: LD_ADDR_VAR 0 7
41919: PUSH
41920: LD_VAR 0 7
41924: PPUSH
41925: LD_VAR 0 7
41929: PPUSH
41930: LD_VAR 0 6
41934: PPUSH
41935: CALL_OW 1
41939: ST_TO_ADDR
// for i = s_arr downto 2 do
41940: LD_ADDR_VAR 0 5
41944: PUSH
41945: DOUBLE
41946: LD_VAR 0 7
41950: INC
41951: ST_TO_ADDR
41952: LD_INT 2
41954: PUSH
41955: FOR_DOWNTO
41956: IFFALSE 42040
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41958: LD_ADDR_VAR 0 6
41962: PUSH
41963: LD_VAR 0 7
41967: PUSH
41968: LD_VAR 0 5
41972: PUSH
41973: LD_INT 1
41975: MINUS
41976: ARRAY
41977: PPUSH
41978: LD_VAR 0 2
41982: PUSH
41983: LD_VAR 0 5
41987: PUSH
41988: LD_INT 1
41990: MINUS
41991: ARRAY
41992: PPUSH
41993: LD_VAR 0 7
41997: PUSH
41998: LD_VAR 0 5
42002: ARRAY
42003: PPUSH
42004: CALL_OW 1
42008: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42009: LD_ADDR_VAR 0 7
42013: PUSH
42014: LD_VAR 0 7
42018: PPUSH
42019: LD_VAR 0 5
42023: PUSH
42024: LD_INT 1
42026: MINUS
42027: PPUSH
42028: LD_VAR 0 6
42032: PPUSH
42033: CALL_OW 1
42037: ST_TO_ADDR
// end ;
42038: GO 41955
42040: POP
42041: POP
// result := s_arr [ 1 ] ;
42042: LD_ADDR_VAR 0 4
42046: PUSH
42047: LD_VAR 0 7
42051: PUSH
42052: LD_INT 1
42054: ARRAY
42055: ST_TO_ADDR
// end ; end ;
42056: LD_VAR 0 4
42060: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42061: LD_INT 0
42063: PPUSH
42064: PPUSH
// if not list then
42065: LD_VAR 0 1
42069: NOT
42070: IFFALSE 42074
// exit ;
42072: GO 42165
// i := list [ pos1 ] ;
42074: LD_ADDR_VAR 0 5
42078: PUSH
42079: LD_VAR 0 1
42083: PUSH
42084: LD_VAR 0 2
42088: ARRAY
42089: ST_TO_ADDR
// if not i then
42090: LD_VAR 0 5
42094: NOT
42095: IFFALSE 42099
// exit ;
42097: GO 42165
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42099: LD_ADDR_VAR 0 1
42103: PUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: LD_VAR 0 2
42113: PPUSH
42114: LD_VAR 0 1
42118: PUSH
42119: LD_VAR 0 3
42123: ARRAY
42124: PPUSH
42125: CALL_OW 1
42129: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42130: LD_ADDR_VAR 0 1
42134: PUSH
42135: LD_VAR 0 1
42139: PPUSH
42140: LD_VAR 0 3
42144: PPUSH
42145: LD_VAR 0 5
42149: PPUSH
42150: CALL_OW 1
42154: ST_TO_ADDR
// result := list ;
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: LD_VAR 0 1
42164: ST_TO_ADDR
// end ;
42165: LD_VAR 0 4
42169: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42170: LD_INT 0
42172: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42173: LD_ADDR_VAR 0 5
42177: PUSH
42178: LD_VAR 0 1
42182: PPUSH
42183: CALL_OW 250
42187: PPUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: CALL_OW 251
42197: PPUSH
42198: LD_VAR 0 2
42202: PPUSH
42203: LD_VAR 0 3
42207: PPUSH
42208: LD_VAR 0 4
42212: PPUSH
42213: CALL 42223 0 5
42217: ST_TO_ADDR
// end ;
42218: LD_VAR 0 5
42222: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42223: LD_INT 0
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
// if not list then
42229: LD_VAR 0 3
42233: NOT
42234: IFFALSE 42238
// exit ;
42236: GO 42626
// result := [ ] ;
42238: LD_ADDR_VAR 0 6
42242: PUSH
42243: EMPTY
42244: ST_TO_ADDR
// for i in list do
42245: LD_ADDR_VAR 0 7
42249: PUSH
42250: LD_VAR 0 3
42254: PUSH
42255: FOR_IN
42256: IFFALSE 42458
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42258: LD_ADDR_VAR 0 9
42262: PUSH
42263: LD_VAR 0 7
42267: PPUSH
42268: LD_VAR 0 1
42272: PPUSH
42273: LD_VAR 0 2
42277: PPUSH
42278: CALL_OW 297
42282: ST_TO_ADDR
// if not result then
42283: LD_VAR 0 6
42287: NOT
42288: IFFALSE 42314
// result := [ [ i , tmp ] ] else
42290: LD_ADDR_VAR 0 6
42294: PUSH
42295: LD_VAR 0 7
42299: PUSH
42300: LD_VAR 0 9
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: ST_TO_ADDR
42312: GO 42456
// begin if result [ result ] [ 2 ] < tmp then
42314: LD_VAR 0 6
42318: PUSH
42319: LD_VAR 0 6
42323: ARRAY
42324: PUSH
42325: LD_INT 2
42327: ARRAY
42328: PUSH
42329: LD_VAR 0 9
42333: LESS
42334: IFFALSE 42376
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42336: LD_ADDR_VAR 0 6
42340: PUSH
42341: LD_VAR 0 6
42345: PPUSH
42346: LD_VAR 0 6
42350: PUSH
42351: LD_INT 1
42353: PLUS
42354: PPUSH
42355: LD_VAR 0 7
42359: PUSH
42360: LD_VAR 0 9
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PPUSH
42369: CALL_OW 2
42373: ST_TO_ADDR
42374: GO 42456
// for j = 1 to result do
42376: LD_ADDR_VAR 0 8
42380: PUSH
42381: DOUBLE
42382: LD_INT 1
42384: DEC
42385: ST_TO_ADDR
42386: LD_VAR 0 6
42390: PUSH
42391: FOR_TO
42392: IFFALSE 42454
// begin if tmp < result [ j ] [ 2 ] then
42394: LD_VAR 0 9
42398: PUSH
42399: LD_VAR 0 6
42403: PUSH
42404: LD_VAR 0 8
42408: ARRAY
42409: PUSH
42410: LD_INT 2
42412: ARRAY
42413: LESS
42414: IFFALSE 42452
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42416: LD_ADDR_VAR 0 6
42420: PUSH
42421: LD_VAR 0 6
42425: PPUSH
42426: LD_VAR 0 8
42430: PPUSH
42431: LD_VAR 0 7
42435: PUSH
42436: LD_VAR 0 9
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PPUSH
42445: CALL_OW 2
42449: ST_TO_ADDR
// break ;
42450: GO 42454
// end ; end ;
42452: GO 42391
42454: POP
42455: POP
// end ; end ;
42456: GO 42255
42458: POP
42459: POP
// if result and not asc then
42460: LD_VAR 0 6
42464: PUSH
42465: LD_VAR 0 4
42469: NOT
42470: AND
42471: IFFALSE 42546
// begin tmp := result ;
42473: LD_ADDR_VAR 0 9
42477: PUSH
42478: LD_VAR 0 6
42482: ST_TO_ADDR
// for i = tmp downto 1 do
42483: LD_ADDR_VAR 0 7
42487: PUSH
42488: DOUBLE
42489: LD_VAR 0 9
42493: INC
42494: ST_TO_ADDR
42495: LD_INT 1
42497: PUSH
42498: FOR_DOWNTO
42499: IFFALSE 42544
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42501: LD_ADDR_VAR 0 6
42505: PUSH
42506: LD_VAR 0 6
42510: PPUSH
42511: LD_VAR 0 9
42515: PUSH
42516: LD_VAR 0 7
42520: MINUS
42521: PUSH
42522: LD_INT 1
42524: PLUS
42525: PPUSH
42526: LD_VAR 0 9
42530: PUSH
42531: LD_VAR 0 7
42535: ARRAY
42536: PPUSH
42537: CALL_OW 1
42541: ST_TO_ADDR
42542: GO 42498
42544: POP
42545: POP
// end ; tmp := [ ] ;
42546: LD_ADDR_VAR 0 9
42550: PUSH
42551: EMPTY
42552: ST_TO_ADDR
// if mode then
42553: LD_VAR 0 5
42557: IFFALSE 42626
// begin for i = 1 to result do
42559: LD_ADDR_VAR 0 7
42563: PUSH
42564: DOUBLE
42565: LD_INT 1
42567: DEC
42568: ST_TO_ADDR
42569: LD_VAR 0 6
42573: PUSH
42574: FOR_TO
42575: IFFALSE 42614
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42577: LD_ADDR_VAR 0 9
42581: PUSH
42582: LD_VAR 0 9
42586: PPUSH
42587: LD_VAR 0 7
42591: PPUSH
42592: LD_VAR 0 6
42596: PUSH
42597: LD_VAR 0 7
42601: ARRAY
42602: PUSH
42603: LD_INT 1
42605: ARRAY
42606: PPUSH
42607: CALL_OW 1
42611: ST_TO_ADDR
42612: GO 42574
42614: POP
42615: POP
// result := tmp ;
42616: LD_ADDR_VAR 0 6
42620: PUSH
42621: LD_VAR 0 9
42625: ST_TO_ADDR
// end ; end ;
42626: LD_VAR 0 6
42630: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42631: LD_INT 0
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42639: LD_ADDR_VAR 0 5
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// if not x or not y then
42661: LD_VAR 0 2
42665: NOT
42666: PUSH
42667: LD_VAR 0 3
42671: NOT
42672: OR
42673: IFFALSE 42677
// exit ;
42675: GO 44329
// if not range then
42677: LD_VAR 0 4
42681: NOT
42682: IFFALSE 42692
// range := 10 ;
42684: LD_ADDR_VAR 0 4
42688: PUSH
42689: LD_INT 10
42691: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42692: LD_ADDR_VAR 0 8
42696: PUSH
42697: LD_INT 81
42699: PUSH
42700: LD_VAR 0 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 92
42711: PUSH
42712: LD_VAR 0 2
42716: PUSH
42717: LD_VAR 0 3
42721: PUSH
42722: LD_VAR 0 4
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: LD_INT 21
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: PPUSH
42755: CALL_OW 69
42759: ST_TO_ADDR
// if not tmp then
42760: LD_VAR 0 8
42764: NOT
42765: IFFALSE 42769
// exit ;
42767: GO 44329
// for i in tmp do
42769: LD_ADDR_VAR 0 6
42773: PUSH
42774: LD_VAR 0 8
42778: PUSH
42779: FOR_IN
42780: IFFALSE 44304
// begin points := [ 0 , 0 , 0 ] ;
42782: LD_ADDR_VAR 0 9
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// bpoints := 1 ;
42801: LD_ADDR_VAR 0 10
42805: PUSH
42806: LD_INT 1
42808: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42809: LD_VAR 0 6
42813: PPUSH
42814: CALL_OW 247
42818: PUSH
42819: LD_INT 1
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 43405
42827: POP
// begin if GetClass ( i ) = 1 then
42828: LD_VAR 0 6
42832: PPUSH
42833: CALL_OW 257
42837: PUSH
42838: LD_INT 1
42840: EQUAL
42841: IFFALSE 42862
// points := [ 10 , 5 , 3 ] ;
42843: LD_ADDR_VAR 0 9
42847: PUSH
42848: LD_INT 10
42850: PUSH
42851: LD_INT 5
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42862: LD_VAR 0 6
42866: PPUSH
42867: CALL_OW 257
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 4
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: IN
42886: IFFALSE 42907
// points := [ 3 , 2 , 1 ] ;
42888: LD_ADDR_VAR 0 9
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42907: LD_VAR 0 6
42911: PPUSH
42912: CALL_OW 257
42916: PUSH
42917: LD_INT 5
42919: EQUAL
42920: IFFALSE 42941
// points := [ 130 , 5 , 2 ] ;
42922: LD_ADDR_VAR 0 9
42926: PUSH
42927: LD_INT 130
42929: PUSH
42930: LD_INT 5
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42941: LD_VAR 0 6
42945: PPUSH
42946: CALL_OW 257
42950: PUSH
42951: LD_INT 8
42953: EQUAL
42954: IFFALSE 42975
// points := [ 35 , 35 , 30 ] ;
42956: LD_ADDR_VAR 0 9
42960: PUSH
42961: LD_INT 35
42963: PUSH
42964: LD_INT 35
42966: PUSH
42967: LD_INT 30
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42975: LD_VAR 0 6
42979: PPUSH
42980: CALL_OW 257
42984: PUSH
42985: LD_INT 9
42987: EQUAL
42988: IFFALSE 43009
// points := [ 20 , 55 , 40 ] ;
42990: LD_ADDR_VAR 0 9
42994: PUSH
42995: LD_INT 20
42997: PUSH
42998: LD_INT 55
43000: PUSH
43001: LD_INT 40
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43009: LD_VAR 0 6
43013: PPUSH
43014: CALL_OW 257
43018: PUSH
43019: LD_INT 12
43021: PUSH
43022: LD_INT 16
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: IN
43029: IFFALSE 43050
// points := [ 5 , 3 , 2 ] ;
43031: LD_ADDR_VAR 0 9
43035: PUSH
43036: LD_INT 5
43038: PUSH
43039: LD_INT 3
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43050: LD_VAR 0 6
43054: PPUSH
43055: CALL_OW 257
43059: PUSH
43060: LD_INT 17
43062: EQUAL
43063: IFFALSE 43084
// points := [ 100 , 50 , 75 ] ;
43065: LD_ADDR_VAR 0 9
43069: PUSH
43070: LD_INT 100
43072: PUSH
43073: LD_INT 50
43075: PUSH
43076: LD_INT 75
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43084: LD_VAR 0 6
43088: PPUSH
43089: CALL_OW 257
43093: PUSH
43094: LD_INT 15
43096: EQUAL
43097: IFFALSE 43118
// points := [ 10 , 5 , 3 ] ;
43099: LD_ADDR_VAR 0 9
43103: PUSH
43104: LD_INT 10
43106: PUSH
43107: LD_INT 5
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43118: LD_VAR 0 6
43122: PPUSH
43123: CALL_OW 257
43127: PUSH
43128: LD_INT 14
43130: EQUAL
43131: IFFALSE 43152
// points := [ 10 , 0 , 0 ] ;
43133: LD_ADDR_VAR 0 9
43137: PUSH
43138: LD_INT 10
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43152: LD_VAR 0 6
43156: PPUSH
43157: CALL_OW 257
43161: PUSH
43162: LD_INT 11
43164: EQUAL
43165: IFFALSE 43186
// points := [ 30 , 10 , 5 ] ;
43167: LD_ADDR_VAR 0 9
43171: PUSH
43172: LD_INT 30
43174: PUSH
43175: LD_INT 10
43177: PUSH
43178: LD_INT 5
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43186: LD_VAR 0 1
43190: PPUSH
43191: LD_INT 5
43193: PPUSH
43194: CALL_OW 321
43198: PUSH
43199: LD_INT 2
43201: EQUAL
43202: IFFALSE 43219
// bpoints := bpoints * 1.8 ;
43204: LD_ADDR_VAR 0 10
43208: PUSH
43209: LD_VAR 0 10
43213: PUSH
43214: LD_REAL  1.80000000000000E+0000
43217: MUL
43218: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43219: LD_VAR 0 6
43223: PPUSH
43224: CALL_OW 257
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: IN
43247: PUSH
43248: LD_VAR 0 1
43252: PPUSH
43253: LD_INT 51
43255: PPUSH
43256: CALL_OW 321
43260: PUSH
43261: LD_INT 2
43263: EQUAL
43264: AND
43265: IFFALSE 43282
// bpoints := bpoints * 1.2 ;
43267: LD_ADDR_VAR 0 10
43271: PUSH
43272: LD_VAR 0 10
43276: PUSH
43277: LD_REAL  1.20000000000000E+0000
43280: MUL
43281: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43282: LD_VAR 0 6
43286: PPUSH
43287: CALL_OW 257
43291: PUSH
43292: LD_INT 5
43294: PUSH
43295: LD_INT 7
43297: PUSH
43298: LD_INT 9
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: IN
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: LD_INT 52
43314: PPUSH
43315: CALL_OW 321
43319: PUSH
43320: LD_INT 2
43322: EQUAL
43323: AND
43324: IFFALSE 43341
// bpoints := bpoints * 1.5 ;
43326: LD_ADDR_VAR 0 10
43330: PUSH
43331: LD_VAR 0 10
43335: PUSH
43336: LD_REAL  1.50000000000000E+0000
43339: MUL
43340: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43341: LD_VAR 0 1
43345: PPUSH
43346: LD_INT 66
43348: PPUSH
43349: CALL_OW 321
43353: PUSH
43354: LD_INT 2
43356: EQUAL
43357: IFFALSE 43374
// bpoints := bpoints * 1.1 ;
43359: LD_ADDR_VAR 0 10
43363: PUSH
43364: LD_VAR 0 10
43368: PUSH
43369: LD_REAL  1.10000000000000E+0000
43372: MUL
43373: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43374: LD_ADDR_VAR 0 10
43378: PUSH
43379: LD_VAR 0 10
43383: PUSH
43384: LD_VAR 0 6
43388: PPUSH
43389: LD_INT 1
43391: PPUSH
43392: CALL_OW 259
43396: PUSH
43397: LD_REAL  1.15000000000000E+0000
43400: MUL
43401: MUL
43402: ST_TO_ADDR
// end ; unit_vehicle :
43403: GO 44233
43405: LD_INT 2
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43413
43411: GO 44221
43413: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43414: LD_VAR 0 6
43418: PPUSH
43419: CALL_OW 264
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: LD_INT 42
43429: PUSH
43430: LD_INT 24
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: IN
43438: IFFALSE 43459
// points := [ 25 , 5 , 3 ] ;
43440: LD_ADDR_VAR 0 9
43444: PUSH
43445: LD_INT 25
43447: PUSH
43448: LD_INT 5
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43459: LD_VAR 0 6
43463: PPUSH
43464: CALL_OW 264
43468: PUSH
43469: LD_INT 4
43471: PUSH
43472: LD_INT 43
43474: PUSH
43475: LD_INT 25
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: IN
43483: IFFALSE 43504
// points := [ 40 , 15 , 5 ] ;
43485: LD_ADDR_VAR 0 9
43489: PUSH
43490: LD_INT 40
43492: PUSH
43493: LD_INT 15
43495: PUSH
43496: LD_INT 5
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43504: LD_VAR 0 6
43508: PPUSH
43509: CALL_OW 264
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: LD_INT 23
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: IN
43524: IFFALSE 43545
// points := [ 7 , 25 , 8 ] ;
43526: LD_ADDR_VAR 0 9
43530: PUSH
43531: LD_INT 7
43533: PUSH
43534: LD_INT 25
43536: PUSH
43537: LD_INT 8
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43545: LD_VAR 0 6
43549: PPUSH
43550: CALL_OW 264
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: LD_INT 27
43560: PUSH
43561: LD_INT 44
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: IN
43569: IFFALSE 43590
// points := [ 14 , 50 , 16 ] ;
43571: LD_ADDR_VAR 0 9
43575: PUSH
43576: LD_INT 14
43578: PUSH
43579: LD_INT 50
43581: PUSH
43582: LD_INT 16
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43590: LD_VAR 0 6
43594: PPUSH
43595: CALL_OW 264
43599: PUSH
43600: LD_INT 6
43602: PUSH
43603: LD_INT 46
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: IN
43610: IFFALSE 43631
// points := [ 32 , 120 , 70 ] ;
43612: LD_ADDR_VAR 0 9
43616: PUSH
43617: LD_INT 32
43619: PUSH
43620: LD_INT 120
43622: PUSH
43623: LD_INT 70
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43631: LD_VAR 0 6
43635: PPUSH
43636: CALL_OW 264
43640: PUSH
43641: LD_INT 7
43643: PUSH
43644: LD_INT 28
43646: PUSH
43647: LD_INT 45
43649: PUSH
43650: LD_EXP 141
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: IN
43661: IFFALSE 43682
// points := [ 35 , 20 , 45 ] ;
43663: LD_ADDR_VAR 0 9
43667: PUSH
43668: LD_INT 35
43670: PUSH
43671: LD_INT 20
43673: PUSH
43674: LD_INT 45
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43682: LD_VAR 0 6
43686: PPUSH
43687: CALL_OW 264
43691: PUSH
43692: LD_INT 47
43694: PUSH
43695: EMPTY
43696: LIST
43697: IN
43698: IFFALSE 43719
// points := [ 67 , 45 , 75 ] ;
43700: LD_ADDR_VAR 0 9
43704: PUSH
43705: LD_INT 67
43707: PUSH
43708: LD_INT 45
43710: PUSH
43711: LD_INT 75
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43719: LD_VAR 0 6
43723: PPUSH
43724: CALL_OW 264
43728: PUSH
43729: LD_INT 26
43731: PUSH
43732: EMPTY
43733: LIST
43734: IN
43735: IFFALSE 43756
// points := [ 120 , 30 , 80 ] ;
43737: LD_ADDR_VAR 0 9
43741: PUSH
43742: LD_INT 120
43744: PUSH
43745: LD_INT 30
43747: PUSH
43748: LD_INT 80
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43756: LD_VAR 0 6
43760: PPUSH
43761: CALL_OW 264
43765: PUSH
43766: LD_INT 22
43768: PUSH
43769: EMPTY
43770: LIST
43771: IN
43772: IFFALSE 43793
// points := [ 40 , 1 , 1 ] ;
43774: LD_ADDR_VAR 0 9
43778: PUSH
43779: LD_INT 40
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43793: LD_VAR 0 6
43797: PPUSH
43798: CALL_OW 264
43802: PUSH
43803: LD_INT 29
43805: PUSH
43806: EMPTY
43807: LIST
43808: IN
43809: IFFALSE 43830
// points := [ 70 , 200 , 400 ] ;
43811: LD_ADDR_VAR 0 9
43815: PUSH
43816: LD_INT 70
43818: PUSH
43819: LD_INT 200
43821: PUSH
43822: LD_INT 400
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43830: LD_VAR 0 6
43834: PPUSH
43835: CALL_OW 264
43839: PUSH
43840: LD_INT 14
43842: PUSH
43843: LD_INT 53
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: IN
43850: IFFALSE 43871
// points := [ 40 , 10 , 20 ] ;
43852: LD_ADDR_VAR 0 9
43856: PUSH
43857: LD_INT 40
43859: PUSH
43860: LD_INT 10
43862: PUSH
43863: LD_INT 20
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43871: LD_VAR 0 6
43875: PPUSH
43876: CALL_OW 264
43880: PUSH
43881: LD_INT 9
43883: PUSH
43884: EMPTY
43885: LIST
43886: IN
43887: IFFALSE 43908
// points := [ 5 , 70 , 20 ] ;
43889: LD_ADDR_VAR 0 9
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: LD_INT 70
43899: PUSH
43900: LD_INT 20
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43908: LD_VAR 0 6
43912: PPUSH
43913: CALL_OW 264
43917: PUSH
43918: LD_INT 10
43920: PUSH
43921: EMPTY
43922: LIST
43923: IN
43924: IFFALSE 43945
// points := [ 35 , 110 , 70 ] ;
43926: LD_ADDR_VAR 0 9
43930: PUSH
43931: LD_INT 35
43933: PUSH
43934: LD_INT 110
43936: PUSH
43937: LD_INT 70
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43945: LD_VAR 0 6
43949: PPUSH
43950: CALL_OW 265
43954: PUSH
43955: LD_INT 25
43957: EQUAL
43958: IFFALSE 43979
// points := [ 80 , 65 , 100 ] ;
43960: LD_ADDR_VAR 0 9
43964: PUSH
43965: LD_INT 80
43967: PUSH
43968: LD_INT 65
43970: PUSH
43971: LD_INT 100
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43979: LD_VAR 0 6
43983: PPUSH
43984: CALL_OW 263
43988: PUSH
43989: LD_INT 1
43991: EQUAL
43992: IFFALSE 44027
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43994: LD_ADDR_VAR 0 10
43998: PUSH
43999: LD_VAR 0 10
44003: PUSH
44004: LD_VAR 0 6
44008: PPUSH
44009: CALL_OW 311
44013: PPUSH
44014: LD_INT 3
44016: PPUSH
44017: CALL_OW 259
44021: PUSH
44022: LD_INT 4
44024: MUL
44025: MUL
44026: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44027: LD_VAR 0 6
44031: PPUSH
44032: CALL_OW 263
44036: PUSH
44037: LD_INT 2
44039: EQUAL
44040: IFFALSE 44091
// begin j := IsControledBy ( i ) ;
44042: LD_ADDR_VAR 0 7
44046: PUSH
44047: LD_VAR 0 6
44051: PPUSH
44052: CALL_OW 312
44056: ST_TO_ADDR
// if j then
44057: LD_VAR 0 7
44061: IFFALSE 44091
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44063: LD_ADDR_VAR 0 10
44067: PUSH
44068: LD_VAR 0 10
44072: PUSH
44073: LD_VAR 0 7
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL_OW 259
44085: PUSH
44086: LD_INT 3
44088: MUL
44089: MUL
44090: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 264
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: LD_INT 6
44106: PUSH
44107: LD_INT 46
44109: PUSH
44110: LD_INT 44
44112: PUSH
44113: LD_INT 47
44115: PUSH
44116: LD_INT 45
44118: PUSH
44119: LD_INT 28
44121: PUSH
44122: LD_INT 7
44124: PUSH
44125: LD_INT 27
44127: PUSH
44128: LD_INT 29
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: IN
44143: PUSH
44144: LD_VAR 0 1
44148: PPUSH
44149: LD_INT 52
44151: PPUSH
44152: CALL_OW 321
44156: PUSH
44157: LD_INT 2
44159: EQUAL
44160: AND
44161: IFFALSE 44178
// bpoints := bpoints * 1.2 ;
44163: LD_ADDR_VAR 0 10
44167: PUSH
44168: LD_VAR 0 10
44172: PUSH
44173: LD_REAL  1.20000000000000E+0000
44176: MUL
44177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44178: LD_VAR 0 6
44182: PPUSH
44183: CALL_OW 264
44187: PUSH
44188: LD_INT 6
44190: PUSH
44191: LD_INT 46
44193: PUSH
44194: LD_INT 47
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: IN
44202: IFFALSE 44219
// bpoints := bpoints * 1.2 ;
44204: LD_ADDR_VAR 0 10
44208: PUSH
44209: LD_VAR 0 10
44213: PUSH
44214: LD_REAL  1.20000000000000E+0000
44217: MUL
44218: ST_TO_ADDR
// end ; unit_building :
44219: GO 44233
44221: LD_INT 3
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44232
44229: POP
// ; end ;
44230: GO 44233
44232: POP
// for j = 1 to 3 do
44233: LD_ADDR_VAR 0 7
44237: PUSH
44238: DOUBLE
44239: LD_INT 1
44241: DEC
44242: ST_TO_ADDR
44243: LD_INT 3
44245: PUSH
44246: FOR_TO
44247: IFFALSE 44300
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44249: LD_ADDR_VAR 0 5
44253: PUSH
44254: LD_VAR 0 5
44258: PPUSH
44259: LD_VAR 0 7
44263: PPUSH
44264: LD_VAR 0 5
44268: PUSH
44269: LD_VAR 0 7
44273: ARRAY
44274: PUSH
44275: LD_VAR 0 9
44279: PUSH
44280: LD_VAR 0 7
44284: ARRAY
44285: PUSH
44286: LD_VAR 0 10
44290: MUL
44291: PLUS
44292: PPUSH
44293: CALL_OW 1
44297: ST_TO_ADDR
44298: GO 44246
44300: POP
44301: POP
// end ;
44302: GO 42779
44304: POP
44305: POP
// result := Replace ( result , 4 , tmp ) ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_VAR 0 5
44315: PPUSH
44316: LD_INT 4
44318: PPUSH
44319: LD_VAR 0 8
44323: PPUSH
44324: CALL_OW 1
44328: ST_TO_ADDR
// end ;
44329: LD_VAR 0 5
44333: RET
// export function DangerAtRange ( unit , range ) ; begin
44334: LD_INT 0
44336: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44337: LD_ADDR_VAR 0 3
44341: PUSH
44342: LD_VAR 0 1
44346: PPUSH
44347: CALL_OW 255
44351: PPUSH
44352: LD_VAR 0 1
44356: PPUSH
44357: CALL_OW 250
44361: PPUSH
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 251
44371: PPUSH
44372: LD_VAR 0 2
44376: PPUSH
44377: CALL 42631 0 4
44381: ST_TO_ADDR
// end ;
44382: LD_VAR 0 3
44386: RET
// export function DangerInArea ( side , area ) ; begin
44387: LD_INT 0
44389: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44390: LD_ADDR_VAR 0 3
44394: PUSH
44395: LD_VAR 0 2
44399: PPUSH
44400: LD_INT 81
44402: PUSH
44403: LD_VAR 0 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PPUSH
44412: CALL_OW 70
44416: ST_TO_ADDR
// end ;
44417: LD_VAR 0 3
44421: RET
// export function IsExtension ( b ) ; begin
44422: LD_INT 0
44424: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44425: LD_ADDR_VAR 0 2
44429: PUSH
44430: LD_VAR 0 1
44434: PUSH
44435: LD_INT 23
44437: PUSH
44438: LD_INT 20
44440: PUSH
44441: LD_INT 22
44443: PUSH
44444: LD_INT 17
44446: PUSH
44447: LD_INT 24
44449: PUSH
44450: LD_INT 21
44452: PUSH
44453: LD_INT 19
44455: PUSH
44456: LD_INT 16
44458: PUSH
44459: LD_INT 25
44461: PUSH
44462: LD_INT 18
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: IN
44477: ST_TO_ADDR
// end ;
44478: LD_VAR 0 2
44482: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44483: LD_INT 0
44485: PPUSH
44486: PPUSH
44487: PPUSH
// result := [ ] ;
44488: LD_ADDR_VAR 0 4
44492: PUSH
44493: EMPTY
44494: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44495: LD_ADDR_VAR 0 5
44499: PUSH
44500: LD_VAR 0 2
44504: PPUSH
44505: LD_INT 21
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PPUSH
44515: CALL_OW 70
44519: ST_TO_ADDR
// if not tmp then
44520: LD_VAR 0 5
44524: NOT
44525: IFFALSE 44529
// exit ;
44527: GO 44593
// if checkLink then
44529: LD_VAR 0 3
44533: IFFALSE 44583
// begin for i in tmp do
44535: LD_ADDR_VAR 0 6
44539: PUSH
44540: LD_VAR 0 5
44544: PUSH
44545: FOR_IN
44546: IFFALSE 44581
// if GetBase ( i ) <> base then
44548: LD_VAR 0 6
44552: PPUSH
44553: CALL_OW 274
44557: PUSH
44558: LD_VAR 0 1
44562: NONEQUAL
44563: IFFALSE 44579
// ComLinkToBase ( base , i ) ;
44565: LD_VAR 0 1
44569: PPUSH
44570: LD_VAR 0 6
44574: PPUSH
44575: CALL_OW 169
44579: GO 44545
44581: POP
44582: POP
// end ; result := tmp ;
44583: LD_ADDR_VAR 0 4
44587: PUSH
44588: LD_VAR 0 5
44592: ST_TO_ADDR
// end ;
44593: LD_VAR 0 4
44597: RET
// export function ComComplete ( units , b ) ; var i ; begin
44598: LD_INT 0
44600: PPUSH
44601: PPUSH
// if not units then
44602: LD_VAR 0 1
44606: NOT
44607: IFFALSE 44611
// exit ;
44609: GO 44701
// for i in units do
44611: LD_ADDR_VAR 0 4
44615: PUSH
44616: LD_VAR 0 1
44620: PUSH
44621: FOR_IN
44622: IFFALSE 44699
// if BuildingStatus ( b ) = bs_build then
44624: LD_VAR 0 2
44628: PPUSH
44629: CALL_OW 461
44633: PUSH
44634: LD_INT 1
44636: EQUAL
44637: IFFALSE 44697
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44639: LD_VAR 0 4
44643: PPUSH
44644: LD_STRING h
44646: PUSH
44647: LD_VAR 0 2
44651: PPUSH
44652: CALL_OW 250
44656: PUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: CALL_OW 251
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: PPUSH
44693: CALL_OW 446
44697: GO 44621
44699: POP
44700: POP
// end ;
44701: LD_VAR 0 3
44705: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44706: LD_INT 0
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44714: LD_VAR 0 1
44718: NOT
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 263
44729: PUSH
44730: LD_INT 2
44732: NONEQUAL
44733: OR
44734: IFFALSE 44738
// exit ;
44736: GO 45054
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44738: LD_ADDR_VAR 0 6
44742: PUSH
44743: LD_INT 22
44745: PUSH
44746: LD_VAR 0 1
44750: PPUSH
44751: CALL_OW 255
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 30
44765: PUSH
44766: LD_INT 36
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 34
44775: PUSH
44776: LD_INT 31
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PPUSH
44792: CALL_OW 69
44796: ST_TO_ADDR
// if not tmp then
44797: LD_VAR 0 6
44801: NOT
44802: IFFALSE 44806
// exit ;
44804: GO 45054
// result := [ ] ;
44806: LD_ADDR_VAR 0 2
44810: PUSH
44811: EMPTY
44812: ST_TO_ADDR
// for i in tmp do
44813: LD_ADDR_VAR 0 3
44817: PUSH
44818: LD_VAR 0 6
44822: PUSH
44823: FOR_IN
44824: IFFALSE 44895
// begin t := UnitsInside ( i ) ;
44826: LD_ADDR_VAR 0 4
44830: PUSH
44831: LD_VAR 0 3
44835: PPUSH
44836: CALL_OW 313
44840: ST_TO_ADDR
// if t then
44841: LD_VAR 0 4
44845: IFFALSE 44893
// for j in t do
44847: LD_ADDR_VAR 0 7
44851: PUSH
44852: LD_VAR 0 4
44856: PUSH
44857: FOR_IN
44858: IFFALSE 44891
// result := Replace ( result , result + 1 , j ) ;
44860: LD_ADDR_VAR 0 2
44864: PUSH
44865: LD_VAR 0 2
44869: PPUSH
44870: LD_VAR 0 2
44874: PUSH
44875: LD_INT 1
44877: PLUS
44878: PPUSH
44879: LD_VAR 0 7
44883: PPUSH
44884: CALL_OW 1
44888: ST_TO_ADDR
44889: GO 44857
44891: POP
44892: POP
// end ;
44893: GO 44823
44895: POP
44896: POP
// if not result then
44897: LD_VAR 0 2
44901: NOT
44902: IFFALSE 44906
// exit ;
44904: GO 45054
// mech := result [ 1 ] ;
44906: LD_ADDR_VAR 0 5
44910: PUSH
44911: LD_VAR 0 2
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: ST_TO_ADDR
// if result > 1 then
44920: LD_VAR 0 2
44924: PUSH
44925: LD_INT 1
44927: GREATER
44928: IFFALSE 45040
// begin for i = 2 to result do
44930: LD_ADDR_VAR 0 3
44934: PUSH
44935: DOUBLE
44936: LD_INT 2
44938: DEC
44939: ST_TO_ADDR
44940: LD_VAR 0 2
44944: PUSH
44945: FOR_TO
44946: IFFALSE 45038
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44948: LD_ADDR_VAR 0 4
44952: PUSH
44953: LD_VAR 0 2
44957: PUSH
44958: LD_VAR 0 3
44962: ARRAY
44963: PPUSH
44964: LD_INT 3
44966: PPUSH
44967: CALL_OW 259
44971: PUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_VAR 0 3
44981: ARRAY
44982: PPUSH
44983: CALL_OW 432
44987: MINUS
44988: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44989: LD_VAR 0 4
44993: PUSH
44994: LD_VAR 0 5
44998: PPUSH
44999: LD_INT 3
45001: PPUSH
45002: CALL_OW 259
45006: PUSH
45007: LD_VAR 0 5
45011: PPUSH
45012: CALL_OW 432
45016: MINUS
45017: GREATEREQUAL
45018: IFFALSE 45036
// mech := result [ i ] ;
45020: LD_ADDR_VAR 0 5
45024: PUSH
45025: LD_VAR 0 2
45029: PUSH
45030: LD_VAR 0 3
45034: ARRAY
45035: ST_TO_ADDR
// end ;
45036: GO 44945
45038: POP
45039: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45040: LD_VAR 0 1
45044: PPUSH
45045: LD_VAR 0 5
45049: PPUSH
45050: CALL_OW 135
// end ;
45054: LD_VAR 0 2
45058: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45059: LD_INT 0
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
// result := [ ] ;
45074: LD_ADDR_VAR 0 7
45078: PUSH
45079: EMPTY
45080: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45081: LD_VAR 0 1
45085: PPUSH
45086: CALL_OW 266
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: IN
45101: NOT
45102: IFFALSE 45106
// exit ;
45104: GO 46740
// if name then
45106: LD_VAR 0 3
45110: IFFALSE 45126
// SetBName ( base_dep , name ) ;
45112: LD_VAR 0 1
45116: PPUSH
45117: LD_VAR 0 3
45121: PPUSH
45122: CALL_OW 500
// base := GetBase ( base_dep ) ;
45126: LD_ADDR_VAR 0 15
45130: PUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 274
45140: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45141: LD_ADDR_VAR 0 16
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 255
45155: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45156: LD_ADDR_VAR 0 17
45160: PUSH
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 248
45170: ST_TO_ADDR
// if sources then
45171: LD_VAR 0 5
45175: IFFALSE 45222
// for i = 1 to 3 do
45177: LD_ADDR_VAR 0 8
45181: PUSH
45182: DOUBLE
45183: LD_INT 1
45185: DEC
45186: ST_TO_ADDR
45187: LD_INT 3
45189: PUSH
45190: FOR_TO
45191: IFFALSE 45220
// AddResourceType ( base , i , sources [ i ] ) ;
45193: LD_VAR 0 15
45197: PPUSH
45198: LD_VAR 0 8
45202: PPUSH
45203: LD_VAR 0 5
45207: PUSH
45208: LD_VAR 0 8
45212: ARRAY
45213: PPUSH
45214: CALL_OW 276
45218: GO 45190
45220: POP
45221: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45222: LD_ADDR_VAR 0 18
45226: PUSH
45227: LD_VAR 0 15
45231: PPUSH
45232: LD_VAR 0 2
45236: PPUSH
45237: LD_INT 1
45239: PPUSH
45240: CALL 44483 0 3
45244: ST_TO_ADDR
// InitHc ;
45245: CALL_OW 19
// InitUc ;
45249: CALL_OW 18
// uc_side := side ;
45253: LD_ADDR_OWVAR 20
45257: PUSH
45258: LD_VAR 0 16
45262: ST_TO_ADDR
// uc_nation := nation ;
45263: LD_ADDR_OWVAR 21
45267: PUSH
45268: LD_VAR 0 17
45272: ST_TO_ADDR
// if buildings then
45273: LD_VAR 0 18
45277: IFFALSE 46599
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45279: LD_ADDR_VAR 0 19
45283: PUSH
45284: LD_VAR 0 18
45288: PPUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 30
45294: PUSH
45295: LD_INT 29
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 30
45304: PUSH
45305: LD_INT 30
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: PPUSH
45317: CALL_OW 72
45321: ST_TO_ADDR
// if tmp then
45322: LD_VAR 0 19
45326: IFFALSE 45374
// for i in tmp do
45328: LD_ADDR_VAR 0 8
45332: PUSH
45333: LD_VAR 0 19
45337: PUSH
45338: FOR_IN
45339: IFFALSE 45372
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45341: LD_VAR 0 8
45345: PPUSH
45346: CALL_OW 250
45350: PPUSH
45351: LD_VAR 0 8
45355: PPUSH
45356: CALL_OW 251
45360: PPUSH
45361: LD_VAR 0 16
45365: PPUSH
45366: CALL_OW 441
45370: GO 45338
45372: POP
45373: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45374: LD_VAR 0 18
45378: PPUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 30
45384: PUSH
45385: LD_INT 32
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 30
45394: PUSH
45395: LD_INT 33
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: PPUSH
45407: CALL_OW 72
45411: IFFALSE 45499
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45413: LD_ADDR_VAR 0 8
45417: PUSH
45418: LD_VAR 0 18
45422: PPUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 30
45428: PUSH
45429: LD_INT 32
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 30
45438: PUSH
45439: LD_INT 33
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: PPUSH
45451: CALL_OW 72
45455: PUSH
45456: FOR_IN
45457: IFFALSE 45497
// begin if not GetBWeapon ( i ) then
45459: LD_VAR 0 8
45463: PPUSH
45464: CALL_OW 269
45468: NOT
45469: IFFALSE 45495
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45471: LD_VAR 0 8
45475: PPUSH
45476: LD_VAR 0 8
45480: PPUSH
45481: LD_VAR 0 2
45485: PPUSH
45486: CALL 46745 0 2
45490: PPUSH
45491: CALL_OW 431
// end ;
45495: GO 45456
45497: POP
45498: POP
// end ; for i = 1 to personel do
45499: LD_ADDR_VAR 0 8
45503: PUSH
45504: DOUBLE
45505: LD_INT 1
45507: DEC
45508: ST_TO_ADDR
45509: LD_VAR 0 6
45513: PUSH
45514: FOR_TO
45515: IFFALSE 46579
// begin if i > 4 then
45517: LD_VAR 0 8
45521: PUSH
45522: LD_INT 4
45524: GREATER
45525: IFFALSE 45529
// break ;
45527: GO 46579
// case i of 1 :
45529: LD_VAR 0 8
45533: PUSH
45534: LD_INT 1
45536: DOUBLE
45537: EQUAL
45538: IFTRUE 45542
45540: GO 45622
45542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45543: LD_ADDR_VAR 0 12
45547: PUSH
45548: LD_VAR 0 18
45552: PPUSH
45553: LD_INT 22
45555: PUSH
45556: LD_VAR 0 16
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 58
45567: PUSH
45568: EMPTY
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 30
45576: PUSH
45577: LD_INT 32
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 30
45586: PUSH
45587: LD_INT 4
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 30
45596: PUSH
45597: LD_INT 5
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: PPUSH
45615: CALL_OW 72
45619: ST_TO_ADDR
45620: GO 45844
45622: LD_INT 2
45624: DOUBLE
45625: EQUAL
45626: IFTRUE 45630
45628: GO 45692
45630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45631: LD_ADDR_VAR 0 12
45635: PUSH
45636: LD_VAR 0 18
45640: PPUSH
45641: LD_INT 22
45643: PUSH
45644: LD_VAR 0 16
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 30
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 30
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PPUSH
45685: CALL_OW 72
45689: ST_TO_ADDR
45690: GO 45844
45692: LD_INT 3
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45700
45698: GO 45762
45700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45701: LD_ADDR_VAR 0 12
45705: PUSH
45706: LD_VAR 0 18
45710: PPUSH
45711: LD_INT 22
45713: PUSH
45714: LD_VAR 0 16
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 30
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 30
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PPUSH
45755: CALL_OW 72
45759: ST_TO_ADDR
45760: GO 45844
45762: LD_INT 4
45764: DOUBLE
45765: EQUAL
45766: IFTRUE 45770
45768: GO 45843
45770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45771: LD_ADDR_VAR 0 12
45775: PUSH
45776: LD_VAR 0 18
45780: PPUSH
45781: LD_INT 22
45783: PUSH
45784: LD_VAR 0 16
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 30
45798: PUSH
45799: LD_INT 6
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 30
45808: PUSH
45809: LD_INT 7
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 30
45818: PUSH
45819: LD_INT 8
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PPUSH
45836: CALL_OW 72
45840: ST_TO_ADDR
45841: GO 45844
45843: POP
// if i = 1 then
45844: LD_VAR 0 8
45848: PUSH
45849: LD_INT 1
45851: EQUAL
45852: IFFALSE 45963
// begin tmp := [ ] ;
45854: LD_ADDR_VAR 0 19
45858: PUSH
45859: EMPTY
45860: ST_TO_ADDR
// for j in f do
45861: LD_ADDR_VAR 0 9
45865: PUSH
45866: LD_VAR 0 12
45870: PUSH
45871: FOR_IN
45872: IFFALSE 45945
// if GetBType ( j ) = b_bunker then
45874: LD_VAR 0 9
45878: PPUSH
45879: CALL_OW 266
45883: PUSH
45884: LD_INT 32
45886: EQUAL
45887: IFFALSE 45914
// tmp := Insert ( tmp , 1 , j ) else
45889: LD_ADDR_VAR 0 19
45893: PUSH
45894: LD_VAR 0 19
45898: PPUSH
45899: LD_INT 1
45901: PPUSH
45902: LD_VAR 0 9
45906: PPUSH
45907: CALL_OW 2
45911: ST_TO_ADDR
45912: GO 45943
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45914: LD_ADDR_VAR 0 19
45918: PUSH
45919: LD_VAR 0 19
45923: PPUSH
45924: LD_VAR 0 19
45928: PUSH
45929: LD_INT 1
45931: PLUS
45932: PPUSH
45933: LD_VAR 0 9
45937: PPUSH
45938: CALL_OW 2
45942: ST_TO_ADDR
45943: GO 45871
45945: POP
45946: POP
// if tmp then
45947: LD_VAR 0 19
45951: IFFALSE 45963
// f := tmp ;
45953: LD_ADDR_VAR 0 12
45957: PUSH
45958: LD_VAR 0 19
45962: ST_TO_ADDR
// end ; x := personel [ i ] ;
45963: LD_ADDR_VAR 0 13
45967: PUSH
45968: LD_VAR 0 6
45972: PUSH
45973: LD_VAR 0 8
45977: ARRAY
45978: ST_TO_ADDR
// if x = - 1 then
45979: LD_VAR 0 13
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: EQUAL
45988: IFFALSE 46197
// begin for j in f do
45990: LD_ADDR_VAR 0 9
45994: PUSH
45995: LD_VAR 0 12
45999: PUSH
46000: FOR_IN
46001: IFFALSE 46193
// repeat InitHc ;
46003: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46007: LD_VAR 0 9
46011: PPUSH
46012: CALL_OW 266
46016: PUSH
46017: LD_INT 5
46019: EQUAL
46020: IFFALSE 46090
// begin if UnitsInside ( j ) < 3 then
46022: LD_VAR 0 9
46026: PPUSH
46027: CALL_OW 313
46031: PUSH
46032: LD_INT 3
46034: LESS
46035: IFFALSE 46071
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46037: LD_INT 0
46039: PPUSH
46040: LD_INT 5
46042: PUSH
46043: LD_INT 8
46045: PUSH
46046: LD_INT 9
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: PUSH
46054: LD_VAR 0 17
46058: ARRAY
46059: PPUSH
46060: LD_VAR 0 4
46064: PPUSH
46065: CALL_OW 380
46069: GO 46088
// PrepareHuman ( false , i , skill ) ;
46071: LD_INT 0
46073: PPUSH
46074: LD_VAR 0 8
46078: PPUSH
46079: LD_VAR 0 4
46083: PPUSH
46084: CALL_OW 380
// end else
46088: GO 46107
// PrepareHuman ( false , i , skill ) ;
46090: LD_INT 0
46092: PPUSH
46093: LD_VAR 0 8
46097: PPUSH
46098: LD_VAR 0 4
46102: PPUSH
46103: CALL_OW 380
// un := CreateHuman ;
46107: LD_ADDR_VAR 0 14
46111: PUSH
46112: CALL_OW 44
46116: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46117: LD_ADDR_VAR 0 7
46121: PUSH
46122: LD_VAR 0 7
46126: PPUSH
46127: LD_INT 1
46129: PPUSH
46130: LD_VAR 0 14
46134: PPUSH
46135: CALL_OW 2
46139: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46140: LD_VAR 0 14
46144: PPUSH
46145: LD_VAR 0 9
46149: PPUSH
46150: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46154: LD_VAR 0 9
46158: PPUSH
46159: CALL_OW 313
46163: PUSH
46164: LD_INT 6
46166: EQUAL
46167: PUSH
46168: LD_VAR 0 9
46172: PPUSH
46173: CALL_OW 266
46177: PUSH
46178: LD_INT 32
46180: PUSH
46181: LD_INT 31
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: IN
46188: OR
46189: IFFALSE 46003
46191: GO 46000
46193: POP
46194: POP
// end else
46195: GO 46577
// for j = 1 to x do
46197: LD_ADDR_VAR 0 9
46201: PUSH
46202: DOUBLE
46203: LD_INT 1
46205: DEC
46206: ST_TO_ADDR
46207: LD_VAR 0 13
46211: PUSH
46212: FOR_TO
46213: IFFALSE 46575
// begin InitHc ;
46215: CALL_OW 19
// if not f then
46219: LD_VAR 0 12
46223: NOT
46224: IFFALSE 46313
// begin PrepareHuman ( false , i , skill ) ;
46226: LD_INT 0
46228: PPUSH
46229: LD_VAR 0 8
46233: PPUSH
46234: LD_VAR 0 4
46238: PPUSH
46239: CALL_OW 380
// un := CreateHuman ;
46243: LD_ADDR_VAR 0 14
46247: PUSH
46248: CALL_OW 44
46252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46253: LD_ADDR_VAR 0 7
46257: PUSH
46258: LD_VAR 0 7
46262: PPUSH
46263: LD_INT 1
46265: PPUSH
46266: LD_VAR 0 14
46270: PPUSH
46271: CALL_OW 2
46275: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46276: LD_VAR 0 14
46280: PPUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 250
46290: PPUSH
46291: LD_VAR 0 1
46295: PPUSH
46296: CALL_OW 251
46300: PPUSH
46301: LD_INT 10
46303: PPUSH
46304: LD_INT 0
46306: PPUSH
46307: CALL_OW 50
// continue ;
46311: GO 46212
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46313: LD_VAR 0 12
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: CALL_OW 313
46326: PUSH
46327: LD_VAR 0 12
46331: PUSH
46332: LD_INT 1
46334: ARRAY
46335: PPUSH
46336: CALL_OW 266
46340: PUSH
46341: LD_INT 32
46343: PUSH
46344: LD_INT 31
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: IN
46351: AND
46352: PUSH
46353: LD_VAR 0 12
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: CALL_OW 313
46366: PUSH
46367: LD_INT 6
46369: EQUAL
46370: OR
46371: IFFALSE 46391
// f := Delete ( f , 1 ) ;
46373: LD_ADDR_VAR 0 12
46377: PUSH
46378: LD_VAR 0 12
46382: PPUSH
46383: LD_INT 1
46385: PPUSH
46386: CALL_OW 3
46390: ST_TO_ADDR
// if not f then
46391: LD_VAR 0 12
46395: NOT
46396: IFFALSE 46414
// begin x := x + 2 ;
46398: LD_ADDR_VAR 0 13
46402: PUSH
46403: LD_VAR 0 13
46407: PUSH
46408: LD_INT 2
46410: PLUS
46411: ST_TO_ADDR
// continue ;
46412: GO 46212
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46414: LD_VAR 0 12
46418: PUSH
46419: LD_INT 1
46421: ARRAY
46422: PPUSH
46423: CALL_OW 266
46427: PUSH
46428: LD_INT 5
46430: EQUAL
46431: IFFALSE 46505
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46433: LD_VAR 0 12
46437: PUSH
46438: LD_INT 1
46440: ARRAY
46441: PPUSH
46442: CALL_OW 313
46446: PUSH
46447: LD_INT 3
46449: LESS
46450: IFFALSE 46486
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46452: LD_INT 0
46454: PPUSH
46455: LD_INT 5
46457: PUSH
46458: LD_INT 8
46460: PUSH
46461: LD_INT 9
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: PUSH
46469: LD_VAR 0 17
46473: ARRAY
46474: PPUSH
46475: LD_VAR 0 4
46479: PPUSH
46480: CALL_OW 380
46484: GO 46503
// PrepareHuman ( false , i , skill ) ;
46486: LD_INT 0
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: LD_VAR 0 4
46498: PPUSH
46499: CALL_OW 380
// end else
46503: GO 46522
// PrepareHuman ( false , i , skill ) ;
46505: LD_INT 0
46507: PPUSH
46508: LD_VAR 0 8
46512: PPUSH
46513: LD_VAR 0 4
46517: PPUSH
46518: CALL_OW 380
// un := CreateHuman ;
46522: LD_ADDR_VAR 0 14
46526: PUSH
46527: CALL_OW 44
46531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46532: LD_ADDR_VAR 0 7
46536: PUSH
46537: LD_VAR 0 7
46541: PPUSH
46542: LD_INT 1
46544: PPUSH
46545: LD_VAR 0 14
46549: PPUSH
46550: CALL_OW 2
46554: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46555: LD_VAR 0 14
46559: PPUSH
46560: LD_VAR 0 12
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PPUSH
46569: CALL_OW 52
// end ;
46573: GO 46212
46575: POP
46576: POP
// end ;
46577: GO 45514
46579: POP
46580: POP
// result := result ^ buildings ;
46581: LD_ADDR_VAR 0 7
46585: PUSH
46586: LD_VAR 0 7
46590: PUSH
46591: LD_VAR 0 18
46595: ADD
46596: ST_TO_ADDR
// end else
46597: GO 46740
// begin for i = 1 to personel do
46599: LD_ADDR_VAR 0 8
46603: PUSH
46604: DOUBLE
46605: LD_INT 1
46607: DEC
46608: ST_TO_ADDR
46609: LD_VAR 0 6
46613: PUSH
46614: FOR_TO
46615: IFFALSE 46738
// begin if i > 4 then
46617: LD_VAR 0 8
46621: PUSH
46622: LD_INT 4
46624: GREATER
46625: IFFALSE 46629
// break ;
46627: GO 46738
// x := personel [ i ] ;
46629: LD_ADDR_VAR 0 13
46633: PUSH
46634: LD_VAR 0 6
46638: PUSH
46639: LD_VAR 0 8
46643: ARRAY
46644: ST_TO_ADDR
// if x = - 1 then
46645: LD_VAR 0 13
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: EQUAL
46654: IFFALSE 46658
// continue ;
46656: GO 46614
// PrepareHuman ( false , i , skill ) ;
46658: LD_INT 0
46660: PPUSH
46661: LD_VAR 0 8
46665: PPUSH
46666: LD_VAR 0 4
46670: PPUSH
46671: CALL_OW 380
// un := CreateHuman ;
46675: LD_ADDR_VAR 0 14
46679: PUSH
46680: CALL_OW 44
46684: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46685: LD_VAR 0 14
46689: PPUSH
46690: LD_VAR 0 1
46694: PPUSH
46695: CALL_OW 250
46699: PPUSH
46700: LD_VAR 0 1
46704: PPUSH
46705: CALL_OW 251
46709: PPUSH
46710: LD_INT 10
46712: PPUSH
46713: LD_INT 0
46715: PPUSH
46716: CALL_OW 50
// result := result ^ un ;
46720: LD_ADDR_VAR 0 7
46724: PUSH
46725: LD_VAR 0 7
46729: PUSH
46730: LD_VAR 0 14
46734: ADD
46735: ST_TO_ADDR
// end ;
46736: GO 46614
46738: POP
46739: POP
// end ; end ;
46740: LD_VAR 0 7
46744: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46745: LD_INT 0
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
// result := false ;
46763: LD_ADDR_VAR 0 3
46767: PUSH
46768: LD_INT 0
46770: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46771: LD_VAR 0 1
46775: NOT
46776: PUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 266
46786: PUSH
46787: LD_INT 32
46789: PUSH
46790: LD_INT 33
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: IN
46797: NOT
46798: OR
46799: IFFALSE 46803
// exit ;
46801: GO 47912
// nat := GetNation ( tower ) ;
46803: LD_ADDR_VAR 0 12
46807: PUSH
46808: LD_VAR 0 1
46812: PPUSH
46813: CALL_OW 248
46817: ST_TO_ADDR
// side := GetSide ( tower ) ;
46818: LD_ADDR_VAR 0 16
46822: PUSH
46823: LD_VAR 0 1
46827: PPUSH
46828: CALL_OW 255
46832: ST_TO_ADDR
// x := GetX ( tower ) ;
46833: LD_ADDR_VAR 0 10
46837: PUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: CALL_OW 250
46847: ST_TO_ADDR
// y := GetY ( tower ) ;
46848: LD_ADDR_VAR 0 11
46852: PUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL_OW 251
46862: ST_TO_ADDR
// if not x or not y then
46863: LD_VAR 0 10
46867: NOT
46868: PUSH
46869: LD_VAR 0 11
46873: NOT
46874: OR
46875: IFFALSE 46879
// exit ;
46877: GO 47912
// weapon := 0 ;
46879: LD_ADDR_VAR 0 18
46883: PUSH
46884: LD_INT 0
46886: ST_TO_ADDR
// fac_list := [ ] ;
46887: LD_ADDR_VAR 0 17
46891: PUSH
46892: EMPTY
46893: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46894: LD_ADDR_VAR 0 6
46898: PUSH
46899: LD_VAR 0 1
46903: PPUSH
46904: CALL_OW 274
46908: PPUSH
46909: LD_VAR 0 2
46913: PPUSH
46914: LD_INT 0
46916: PPUSH
46917: CALL 44483 0 3
46921: PPUSH
46922: LD_INT 30
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PPUSH
46932: CALL_OW 72
46936: ST_TO_ADDR
// if not factories then
46937: LD_VAR 0 6
46941: NOT
46942: IFFALSE 46946
// exit ;
46944: GO 47912
// for i in factories do
46946: LD_ADDR_VAR 0 8
46950: PUSH
46951: LD_VAR 0 6
46955: PUSH
46956: FOR_IN
46957: IFFALSE 46982
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46959: LD_ADDR_VAR 0 17
46963: PUSH
46964: LD_VAR 0 17
46968: PUSH
46969: LD_VAR 0 8
46973: PPUSH
46974: CALL_OW 478
46978: UNION
46979: ST_TO_ADDR
46980: GO 46956
46982: POP
46983: POP
// if not fac_list then
46984: LD_VAR 0 17
46988: NOT
46989: IFFALSE 46993
// exit ;
46991: GO 47912
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46993: LD_ADDR_VAR 0 5
46997: PUSH
46998: LD_INT 4
47000: PUSH
47001: LD_INT 5
47003: PUSH
47004: LD_INT 9
47006: PUSH
47007: LD_INT 10
47009: PUSH
47010: LD_INT 6
47012: PUSH
47013: LD_INT 7
47015: PUSH
47016: LD_INT 11
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 27
47030: PUSH
47031: LD_INT 28
47033: PUSH
47034: LD_INT 26
47036: PUSH
47037: LD_INT 30
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 43
47048: PUSH
47049: LD_INT 44
47051: PUSH
47052: LD_INT 46
47054: PUSH
47055: LD_INT 45
47057: PUSH
47058: LD_INT 47
47060: PUSH
47061: LD_INT 49
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: LD_VAR 0 12
47081: ARRAY
47082: ST_TO_ADDR
// list := list isect fac_list ;
47083: LD_ADDR_VAR 0 5
47087: PUSH
47088: LD_VAR 0 5
47092: PUSH
47093: LD_VAR 0 17
47097: ISECT
47098: ST_TO_ADDR
// if not list then
47099: LD_VAR 0 5
47103: NOT
47104: IFFALSE 47108
// exit ;
47106: GO 47912
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47108: LD_VAR 0 12
47112: PUSH
47113: LD_INT 3
47115: EQUAL
47116: PUSH
47117: LD_INT 49
47119: PUSH
47120: LD_VAR 0 5
47124: IN
47125: AND
47126: PUSH
47127: LD_INT 31
47129: PPUSH
47130: LD_VAR 0 16
47134: PPUSH
47135: CALL_OW 321
47139: PUSH
47140: LD_INT 2
47142: EQUAL
47143: AND
47144: IFFALSE 47204
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47146: LD_INT 22
47148: PUSH
47149: LD_VAR 0 16
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 35
47160: PUSH
47161: LD_INT 49
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 91
47170: PUSH
47171: LD_VAR 0 1
47175: PUSH
47176: LD_INT 10
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: PPUSH
47189: CALL_OW 69
47193: NOT
47194: IFFALSE 47204
// weapon := ru_time_lapser ;
47196: LD_ADDR_VAR 0 18
47200: PUSH
47201: LD_INT 49
47203: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47204: LD_VAR 0 12
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: IN
47219: PUSH
47220: LD_INT 11
47222: PUSH
47223: LD_VAR 0 5
47227: IN
47228: PUSH
47229: LD_INT 30
47231: PUSH
47232: LD_VAR 0 5
47236: IN
47237: OR
47238: AND
47239: PUSH
47240: LD_INT 6
47242: PPUSH
47243: LD_VAR 0 16
47247: PPUSH
47248: CALL_OW 321
47252: PUSH
47253: LD_INT 2
47255: EQUAL
47256: AND
47257: IFFALSE 47422
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47259: LD_INT 22
47261: PUSH
47262: LD_VAR 0 16
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 35
47276: PUSH
47277: LD_INT 11
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 35
47286: PUSH
47287: LD_INT 30
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 91
47301: PUSH
47302: LD_VAR 0 1
47306: PUSH
47307: LD_INT 18
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: PPUSH
47320: CALL_OW 69
47324: NOT
47325: PUSH
47326: LD_INT 22
47328: PUSH
47329: LD_VAR 0 16
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 30
47343: PUSH
47344: LD_INT 32
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 30
47353: PUSH
47354: LD_INT 33
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 91
47368: PUSH
47369: LD_VAR 0 1
47373: PUSH
47374: LD_INT 12
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: PPUSH
47390: CALL_OW 69
47394: PUSH
47395: LD_INT 2
47397: GREATER
47398: AND
47399: IFFALSE 47422
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47401: LD_ADDR_VAR 0 18
47405: PUSH
47406: LD_INT 11
47408: PUSH
47409: LD_INT 30
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_VAR 0 12
47420: ARRAY
47421: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47422: LD_VAR 0 18
47426: NOT
47427: PUSH
47428: LD_INT 40
47430: PPUSH
47431: LD_VAR 0 16
47435: PPUSH
47436: CALL_OW 321
47440: PUSH
47441: LD_INT 2
47443: EQUAL
47444: AND
47445: PUSH
47446: LD_INT 7
47448: PUSH
47449: LD_VAR 0 5
47453: IN
47454: PUSH
47455: LD_INT 28
47457: PUSH
47458: LD_VAR 0 5
47462: IN
47463: OR
47464: PUSH
47465: LD_INT 45
47467: PUSH
47468: LD_VAR 0 5
47472: IN
47473: OR
47474: AND
47475: IFFALSE 47729
// begin hex := GetHexInfo ( x , y ) ;
47477: LD_ADDR_VAR 0 4
47481: PUSH
47482: LD_VAR 0 10
47486: PPUSH
47487: LD_VAR 0 11
47491: PPUSH
47492: CALL_OW 546
47496: ST_TO_ADDR
// if hex [ 1 ] then
47497: LD_VAR 0 4
47501: PUSH
47502: LD_INT 1
47504: ARRAY
47505: IFFALSE 47509
// exit ;
47507: GO 47912
// height := hex [ 2 ] ;
47509: LD_ADDR_VAR 0 15
47513: PUSH
47514: LD_VAR 0 4
47518: PUSH
47519: LD_INT 2
47521: ARRAY
47522: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47523: LD_ADDR_VAR 0 14
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: LD_INT 5
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: ST_TO_ADDR
// for i in tmp do
47546: LD_ADDR_VAR 0 8
47550: PUSH
47551: LD_VAR 0 14
47555: PUSH
47556: FOR_IN
47557: IFFALSE 47727
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47559: LD_ADDR_VAR 0 9
47563: PUSH
47564: LD_VAR 0 10
47568: PPUSH
47569: LD_VAR 0 8
47573: PPUSH
47574: LD_INT 5
47576: PPUSH
47577: CALL_OW 272
47581: PUSH
47582: LD_VAR 0 11
47586: PPUSH
47587: LD_VAR 0 8
47591: PPUSH
47592: LD_INT 5
47594: PPUSH
47595: CALL_OW 273
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47604: LD_VAR 0 9
47608: PUSH
47609: LD_INT 1
47611: ARRAY
47612: PPUSH
47613: LD_VAR 0 9
47617: PUSH
47618: LD_INT 2
47620: ARRAY
47621: PPUSH
47622: CALL_OW 488
47626: IFFALSE 47725
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47628: LD_ADDR_VAR 0 4
47632: PUSH
47633: LD_VAR 0 9
47637: PUSH
47638: LD_INT 1
47640: ARRAY
47641: PPUSH
47642: LD_VAR 0 9
47646: PUSH
47647: LD_INT 2
47649: ARRAY
47650: PPUSH
47651: CALL_OW 546
47655: ST_TO_ADDR
// if hex [ 1 ] then
47656: LD_VAR 0 4
47660: PUSH
47661: LD_INT 1
47663: ARRAY
47664: IFFALSE 47668
// continue ;
47666: GO 47556
// h := hex [ 2 ] ;
47668: LD_ADDR_VAR 0 13
47672: PUSH
47673: LD_VAR 0 4
47677: PUSH
47678: LD_INT 2
47680: ARRAY
47681: ST_TO_ADDR
// if h + 7 < height then
47682: LD_VAR 0 13
47686: PUSH
47687: LD_INT 7
47689: PLUS
47690: PUSH
47691: LD_VAR 0 15
47695: LESS
47696: IFFALSE 47725
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47698: LD_ADDR_VAR 0 18
47702: PUSH
47703: LD_INT 7
47705: PUSH
47706: LD_INT 28
47708: PUSH
47709: LD_INT 45
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: PUSH
47717: LD_VAR 0 12
47721: ARRAY
47722: ST_TO_ADDR
// break ;
47723: GO 47727
// end ; end ; end ;
47725: GO 47556
47727: POP
47728: POP
// end ; if not weapon then
47729: LD_VAR 0 18
47733: NOT
47734: IFFALSE 47794
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47736: LD_ADDR_VAR 0 5
47740: PUSH
47741: LD_VAR 0 5
47745: PUSH
47746: LD_INT 11
47748: PUSH
47749: LD_INT 30
47751: PUSH
47752: LD_INT 49
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: DIFF
47760: ST_TO_ADDR
// if not list then
47761: LD_VAR 0 5
47765: NOT
47766: IFFALSE 47770
// exit ;
47768: GO 47912
// weapon := list [ rand ( 1 , list ) ] ;
47770: LD_ADDR_VAR 0 18
47774: PUSH
47775: LD_VAR 0 5
47779: PUSH
47780: LD_INT 1
47782: PPUSH
47783: LD_VAR 0 5
47787: PPUSH
47788: CALL_OW 12
47792: ARRAY
47793: ST_TO_ADDR
// end ; if weapon then
47794: LD_VAR 0 18
47798: IFFALSE 47912
// begin tmp := CostOfWeapon ( weapon ) ;
47800: LD_ADDR_VAR 0 14
47804: PUSH
47805: LD_VAR 0 18
47809: PPUSH
47810: CALL_OW 451
47814: ST_TO_ADDR
// j := GetBase ( tower ) ;
47815: LD_ADDR_VAR 0 9
47819: PUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 274
47829: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47830: LD_VAR 0 9
47834: PPUSH
47835: LD_INT 1
47837: PPUSH
47838: CALL_OW 275
47842: PUSH
47843: LD_VAR 0 14
47847: PUSH
47848: LD_INT 1
47850: ARRAY
47851: GREATEREQUAL
47852: PUSH
47853: LD_VAR 0 9
47857: PPUSH
47858: LD_INT 2
47860: PPUSH
47861: CALL_OW 275
47865: PUSH
47866: LD_VAR 0 14
47870: PUSH
47871: LD_INT 2
47873: ARRAY
47874: GREATEREQUAL
47875: AND
47876: PUSH
47877: LD_VAR 0 9
47881: PPUSH
47882: LD_INT 3
47884: PPUSH
47885: CALL_OW 275
47889: PUSH
47890: LD_VAR 0 14
47894: PUSH
47895: LD_INT 3
47897: ARRAY
47898: GREATEREQUAL
47899: AND
47900: IFFALSE 47912
// result := weapon ;
47902: LD_ADDR_VAR 0 3
47906: PUSH
47907: LD_VAR 0 18
47911: ST_TO_ADDR
// end ; end ;
47912: LD_VAR 0 3
47916: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47917: LD_INT 0
47919: PPUSH
47920: PPUSH
// result := true ;
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: LD_INT 1
47928: ST_TO_ADDR
// if array1 = array2 then
47929: LD_VAR 0 1
47933: PUSH
47934: LD_VAR 0 2
47938: EQUAL
47939: IFFALSE 47999
// begin for i = 1 to array1 do
47941: LD_ADDR_VAR 0 4
47945: PUSH
47946: DOUBLE
47947: LD_INT 1
47949: DEC
47950: ST_TO_ADDR
47951: LD_VAR 0 1
47955: PUSH
47956: FOR_TO
47957: IFFALSE 47995
// if array1 [ i ] <> array2 [ i ] then
47959: LD_VAR 0 1
47963: PUSH
47964: LD_VAR 0 4
47968: ARRAY
47969: PUSH
47970: LD_VAR 0 2
47974: PUSH
47975: LD_VAR 0 4
47979: ARRAY
47980: NONEQUAL
47981: IFFALSE 47993
// begin result := false ;
47983: LD_ADDR_VAR 0 3
47987: PUSH
47988: LD_INT 0
47990: ST_TO_ADDR
// break ;
47991: GO 47995
// end ;
47993: GO 47956
47995: POP
47996: POP
// end else
47997: GO 48007
// result := false ;
47999: LD_ADDR_VAR 0 3
48003: PUSH
48004: LD_INT 0
48006: ST_TO_ADDR
// end ;
48007: LD_VAR 0 3
48011: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48012: LD_INT 0
48014: PPUSH
48015: PPUSH
// if not array1 or not array2 then
48016: LD_VAR 0 1
48020: NOT
48021: PUSH
48022: LD_VAR 0 2
48026: NOT
48027: OR
48028: IFFALSE 48032
// exit ;
48030: GO 48096
// result := true ;
48032: LD_ADDR_VAR 0 3
48036: PUSH
48037: LD_INT 1
48039: ST_TO_ADDR
// for i = 1 to array1 do
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: DOUBLE
48046: LD_INT 1
48048: DEC
48049: ST_TO_ADDR
48050: LD_VAR 0 1
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48094
// if array1 [ i ] <> array2 [ i ] then
48058: LD_VAR 0 1
48062: PUSH
48063: LD_VAR 0 4
48067: ARRAY
48068: PUSH
48069: LD_VAR 0 2
48073: PUSH
48074: LD_VAR 0 4
48078: ARRAY
48079: NONEQUAL
48080: IFFALSE 48092
// begin result := false ;
48082: LD_ADDR_VAR 0 3
48086: PUSH
48087: LD_INT 0
48089: ST_TO_ADDR
// break ;
48090: GO 48094
// end ;
48092: GO 48055
48094: POP
48095: POP
// end ;
48096: LD_VAR 0 3
48100: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48101: LD_INT 0
48103: PPUSH
48104: PPUSH
48105: PPUSH
// pom := GetBase ( fac ) ;
48106: LD_ADDR_VAR 0 5
48110: PUSH
48111: LD_VAR 0 1
48115: PPUSH
48116: CALL_OW 274
48120: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48121: LD_ADDR_VAR 0 4
48125: PUSH
48126: LD_VAR 0 2
48130: PUSH
48131: LD_INT 1
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 2
48139: PUSH
48140: LD_INT 2
48142: ARRAY
48143: PPUSH
48144: LD_VAR 0 2
48148: PUSH
48149: LD_INT 3
48151: ARRAY
48152: PPUSH
48153: LD_VAR 0 2
48157: PUSH
48158: LD_INT 4
48160: ARRAY
48161: PPUSH
48162: CALL_OW 449
48166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: LD_VAR 0 5
48176: PPUSH
48177: LD_INT 1
48179: PPUSH
48180: CALL_OW 275
48184: PUSH
48185: LD_VAR 0 4
48189: PUSH
48190: LD_INT 1
48192: ARRAY
48193: GREATEREQUAL
48194: PUSH
48195: LD_VAR 0 5
48199: PPUSH
48200: LD_INT 2
48202: PPUSH
48203: CALL_OW 275
48207: PUSH
48208: LD_VAR 0 4
48212: PUSH
48213: LD_INT 2
48215: ARRAY
48216: GREATEREQUAL
48217: AND
48218: PUSH
48219: LD_VAR 0 5
48223: PPUSH
48224: LD_INT 3
48226: PPUSH
48227: CALL_OW 275
48231: PUSH
48232: LD_VAR 0 4
48236: PUSH
48237: LD_INT 3
48239: ARRAY
48240: GREATEREQUAL
48241: AND
48242: ST_TO_ADDR
// end ;
48243: LD_VAR 0 3
48247: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48248: LD_INT 0
48250: PPUSH
48251: PPUSH
48252: PPUSH
48253: PPUSH
// pom := GetBase ( building ) ;
48254: LD_ADDR_VAR 0 3
48258: PUSH
48259: LD_VAR 0 1
48263: PPUSH
48264: CALL_OW 274
48268: ST_TO_ADDR
// if not pom then
48269: LD_VAR 0 3
48273: NOT
48274: IFFALSE 48278
// exit ;
48276: GO 48448
// btype := GetBType ( building ) ;
48278: LD_ADDR_VAR 0 5
48282: PUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: CALL_OW 266
48292: ST_TO_ADDR
// if btype = b_armoury then
48293: LD_VAR 0 5
48297: PUSH
48298: LD_INT 4
48300: EQUAL
48301: IFFALSE 48311
// btype := b_barracks ;
48303: LD_ADDR_VAR 0 5
48307: PUSH
48308: LD_INT 5
48310: ST_TO_ADDR
// if btype = b_depot then
48311: LD_VAR 0 5
48315: PUSH
48316: LD_INT 0
48318: EQUAL
48319: IFFALSE 48329
// btype := b_warehouse ;
48321: LD_ADDR_VAR 0 5
48325: PUSH
48326: LD_INT 1
48328: ST_TO_ADDR
// if btype = b_workshop then
48329: LD_VAR 0 5
48333: PUSH
48334: LD_INT 2
48336: EQUAL
48337: IFFALSE 48347
// btype := b_factory ;
48339: LD_ADDR_VAR 0 5
48343: PUSH
48344: LD_INT 3
48346: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48347: LD_ADDR_VAR 0 4
48351: PUSH
48352: LD_VAR 0 5
48356: PPUSH
48357: LD_VAR 0 1
48361: PPUSH
48362: CALL_OW 248
48366: PPUSH
48367: CALL_OW 450
48371: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48372: LD_ADDR_VAR 0 2
48376: PUSH
48377: LD_VAR 0 3
48381: PPUSH
48382: LD_INT 1
48384: PPUSH
48385: CALL_OW 275
48389: PUSH
48390: LD_VAR 0 4
48394: PUSH
48395: LD_INT 1
48397: ARRAY
48398: GREATEREQUAL
48399: PUSH
48400: LD_VAR 0 3
48404: PPUSH
48405: LD_INT 2
48407: PPUSH
48408: CALL_OW 275
48412: PUSH
48413: LD_VAR 0 4
48417: PUSH
48418: LD_INT 2
48420: ARRAY
48421: GREATEREQUAL
48422: AND
48423: PUSH
48424: LD_VAR 0 3
48428: PPUSH
48429: LD_INT 3
48431: PPUSH
48432: CALL_OW 275
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 3
48444: ARRAY
48445: GREATEREQUAL
48446: AND
48447: ST_TO_ADDR
// end ;
48448: LD_VAR 0 2
48452: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48453: LD_INT 0
48455: PPUSH
48456: PPUSH
48457: PPUSH
// pom := GetBase ( building ) ;
48458: LD_ADDR_VAR 0 4
48462: PUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 274
48472: ST_TO_ADDR
// if not pom then
48473: LD_VAR 0 4
48477: NOT
48478: IFFALSE 48482
// exit ;
48480: GO 48583
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48482: LD_ADDR_VAR 0 5
48486: PUSH
48487: LD_VAR 0 2
48491: PPUSH
48492: LD_VAR 0 1
48496: PPUSH
48497: CALL_OW 248
48501: PPUSH
48502: CALL_OW 450
48506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48507: LD_ADDR_VAR 0 3
48511: PUSH
48512: LD_VAR 0 4
48516: PPUSH
48517: LD_INT 1
48519: PPUSH
48520: CALL_OW 275
48524: PUSH
48525: LD_VAR 0 5
48529: PUSH
48530: LD_INT 1
48532: ARRAY
48533: GREATEREQUAL
48534: PUSH
48535: LD_VAR 0 4
48539: PPUSH
48540: LD_INT 2
48542: PPUSH
48543: CALL_OW 275
48547: PUSH
48548: LD_VAR 0 5
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: GREATEREQUAL
48557: AND
48558: PUSH
48559: LD_VAR 0 4
48563: PPUSH
48564: LD_INT 3
48566: PPUSH
48567: CALL_OW 275
48571: PUSH
48572: LD_VAR 0 5
48576: PUSH
48577: LD_INT 3
48579: ARRAY
48580: GREATEREQUAL
48581: AND
48582: ST_TO_ADDR
// end ;
48583: LD_VAR 0 3
48587: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48588: LD_INT 0
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
// result := false ;
48601: LD_ADDR_VAR 0 8
48605: PUSH
48606: LD_INT 0
48608: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48609: LD_VAR 0 5
48613: NOT
48614: PUSH
48615: LD_VAR 0 1
48619: NOT
48620: OR
48621: PUSH
48622: LD_VAR 0 2
48626: NOT
48627: OR
48628: PUSH
48629: LD_VAR 0 3
48633: NOT
48634: OR
48635: IFFALSE 48639
// exit ;
48637: GO 49453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48639: LD_ADDR_VAR 0 14
48643: PUSH
48644: LD_VAR 0 1
48648: PPUSH
48649: LD_VAR 0 2
48653: PPUSH
48654: LD_VAR 0 3
48658: PPUSH
48659: LD_VAR 0 4
48663: PPUSH
48664: LD_VAR 0 5
48668: PUSH
48669: LD_INT 1
48671: ARRAY
48672: PPUSH
48673: CALL_OW 248
48677: PPUSH
48678: LD_INT 0
48680: PPUSH
48681: CALL 50690 0 6
48685: ST_TO_ADDR
// if not hexes then
48686: LD_VAR 0 14
48690: NOT
48691: IFFALSE 48695
// exit ;
48693: GO 49453
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48695: LD_ADDR_VAR 0 17
48699: PUSH
48700: LD_VAR 0 5
48704: PPUSH
48705: LD_INT 22
48707: PUSH
48708: LD_VAR 0 13
48712: PPUSH
48713: CALL_OW 255
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 30
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 30
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PPUSH
48754: CALL_OW 72
48758: ST_TO_ADDR
// for i = 1 to hexes do
48759: LD_ADDR_VAR 0 9
48763: PUSH
48764: DOUBLE
48765: LD_INT 1
48767: DEC
48768: ST_TO_ADDR
48769: LD_VAR 0 14
48773: PUSH
48774: FOR_TO
48775: IFFALSE 49451
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48777: LD_ADDR_VAR 0 13
48781: PUSH
48782: LD_VAR 0 14
48786: PUSH
48787: LD_VAR 0 9
48791: ARRAY
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PPUSH
48797: LD_VAR 0 14
48801: PUSH
48802: LD_VAR 0 9
48806: ARRAY
48807: PUSH
48808: LD_INT 2
48810: ARRAY
48811: PPUSH
48812: CALL_OW 428
48816: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48817: LD_VAR 0 14
48821: PUSH
48822: LD_VAR 0 9
48826: ARRAY
48827: PUSH
48828: LD_INT 1
48830: ARRAY
48831: PPUSH
48832: LD_VAR 0 14
48836: PUSH
48837: LD_VAR 0 9
48841: ARRAY
48842: PUSH
48843: LD_INT 2
48845: ARRAY
48846: PPUSH
48847: CALL_OW 351
48851: PUSH
48852: LD_VAR 0 14
48856: PUSH
48857: LD_VAR 0 9
48861: ARRAY
48862: PUSH
48863: LD_INT 1
48865: ARRAY
48866: PPUSH
48867: LD_VAR 0 14
48871: PUSH
48872: LD_VAR 0 9
48876: ARRAY
48877: PUSH
48878: LD_INT 2
48880: ARRAY
48881: PPUSH
48882: CALL_OW 488
48886: NOT
48887: OR
48888: PUSH
48889: LD_VAR 0 13
48893: PPUSH
48894: CALL_OW 247
48898: PUSH
48899: LD_INT 3
48901: EQUAL
48902: OR
48903: IFFALSE 48909
// exit ;
48905: POP
48906: POP
48907: GO 49453
// if not tmp then
48909: LD_VAR 0 13
48913: NOT
48914: IFFALSE 48918
// continue ;
48916: GO 48774
// result := true ;
48918: LD_ADDR_VAR 0 8
48922: PUSH
48923: LD_INT 1
48925: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48926: LD_VAR 0 6
48930: PUSH
48931: LD_VAR 0 13
48935: PPUSH
48936: CALL_OW 247
48940: PUSH
48941: LD_INT 2
48943: EQUAL
48944: AND
48945: PUSH
48946: LD_VAR 0 13
48950: PPUSH
48951: CALL_OW 263
48955: PUSH
48956: LD_INT 1
48958: EQUAL
48959: AND
48960: IFFALSE 49124
// begin if IsDrivenBy ( tmp ) then
48962: LD_VAR 0 13
48966: PPUSH
48967: CALL_OW 311
48971: IFFALSE 48975
// continue ;
48973: GO 48774
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48975: LD_VAR 0 6
48979: PPUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 60
48985: PUSH
48986: EMPTY
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: LD_INT 55
48998: PUSH
48999: EMPTY
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PPUSH
49010: CALL_OW 72
49014: IFFALSE 49122
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49016: LD_ADDR_VAR 0 18
49020: PUSH
49021: LD_VAR 0 6
49025: PPUSH
49026: LD_INT 3
49028: PUSH
49029: LD_INT 60
49031: PUSH
49032: EMPTY
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: LD_INT 55
49044: PUSH
49045: EMPTY
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PPUSH
49056: CALL_OW 72
49060: PUSH
49061: LD_INT 1
49063: ARRAY
49064: ST_TO_ADDR
// if IsInUnit ( driver ) then
49065: LD_VAR 0 18
49069: PPUSH
49070: CALL_OW 310
49074: IFFALSE 49085
// ComExit ( driver ) ;
49076: LD_VAR 0 18
49080: PPUSH
49081: CALL 73874 0 1
// AddComEnterUnit ( driver , tmp ) ;
49085: LD_VAR 0 18
49089: PPUSH
49090: LD_VAR 0 13
49094: PPUSH
49095: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49099: LD_VAR 0 18
49103: PPUSH
49104: LD_VAR 0 7
49108: PPUSH
49109: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49113: LD_VAR 0 18
49117: PPUSH
49118: CALL_OW 181
// end ; continue ;
49122: GO 48774
// end ; if not cleaners or not tmp in cleaners then
49124: LD_VAR 0 6
49128: NOT
49129: PUSH
49130: LD_VAR 0 13
49134: PUSH
49135: LD_VAR 0 6
49139: IN
49140: NOT
49141: OR
49142: IFFALSE 49449
// begin if dep then
49144: LD_VAR 0 17
49148: IFFALSE 49284
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49150: LD_ADDR_VAR 0 16
49154: PUSH
49155: LD_VAR 0 17
49159: PUSH
49160: LD_INT 1
49162: ARRAY
49163: PPUSH
49164: CALL_OW 250
49168: PPUSH
49169: LD_VAR 0 17
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PPUSH
49178: CALL_OW 254
49182: PPUSH
49183: LD_INT 5
49185: PPUSH
49186: CALL_OW 272
49190: PUSH
49191: LD_VAR 0 17
49195: PUSH
49196: LD_INT 1
49198: ARRAY
49199: PPUSH
49200: CALL_OW 251
49204: PPUSH
49205: LD_VAR 0 17
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: PPUSH
49214: CALL_OW 254
49218: PPUSH
49219: LD_INT 5
49221: PPUSH
49222: CALL_OW 273
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49231: LD_VAR 0 16
49235: PUSH
49236: LD_INT 1
49238: ARRAY
49239: PPUSH
49240: LD_VAR 0 16
49244: PUSH
49245: LD_INT 2
49247: ARRAY
49248: PPUSH
49249: CALL_OW 488
49253: IFFALSE 49284
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49255: LD_VAR 0 13
49259: PPUSH
49260: LD_VAR 0 16
49264: PUSH
49265: LD_INT 1
49267: ARRAY
49268: PPUSH
49269: LD_VAR 0 16
49273: PUSH
49274: LD_INT 2
49276: ARRAY
49277: PPUSH
49278: CALL_OW 111
// continue ;
49282: GO 48774
// end ; end ; r := GetDir ( tmp ) ;
49284: LD_ADDR_VAR 0 15
49288: PUSH
49289: LD_VAR 0 13
49293: PPUSH
49294: CALL_OW 254
49298: ST_TO_ADDR
// if r = 5 then
49299: LD_VAR 0 15
49303: PUSH
49304: LD_INT 5
49306: EQUAL
49307: IFFALSE 49317
// r := 0 ;
49309: LD_ADDR_VAR 0 15
49313: PUSH
49314: LD_INT 0
49316: ST_TO_ADDR
// for j = r to 5 do
49317: LD_ADDR_VAR 0 10
49321: PUSH
49322: DOUBLE
49323: LD_VAR 0 15
49327: DEC
49328: ST_TO_ADDR
49329: LD_INT 5
49331: PUSH
49332: FOR_TO
49333: IFFALSE 49447
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49335: LD_ADDR_VAR 0 11
49339: PUSH
49340: LD_VAR 0 13
49344: PPUSH
49345: CALL_OW 250
49349: PPUSH
49350: LD_VAR 0 10
49354: PPUSH
49355: LD_INT 2
49357: PPUSH
49358: CALL_OW 272
49362: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49363: LD_ADDR_VAR 0 12
49367: PUSH
49368: LD_VAR 0 13
49372: PPUSH
49373: CALL_OW 251
49377: PPUSH
49378: LD_VAR 0 10
49382: PPUSH
49383: LD_INT 2
49385: PPUSH
49386: CALL_OW 273
49390: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49391: LD_VAR 0 11
49395: PPUSH
49396: LD_VAR 0 12
49400: PPUSH
49401: CALL_OW 488
49405: PUSH
49406: LD_VAR 0 11
49410: PPUSH
49411: LD_VAR 0 12
49415: PPUSH
49416: CALL_OW 428
49420: NOT
49421: AND
49422: IFFALSE 49445
// begin ComMoveXY ( tmp , _x , _y ) ;
49424: LD_VAR 0 13
49428: PPUSH
49429: LD_VAR 0 11
49433: PPUSH
49434: LD_VAR 0 12
49438: PPUSH
49439: CALL_OW 111
// break ;
49443: GO 49447
// end ; end ;
49445: GO 49332
49447: POP
49448: POP
// end ; end ;
49449: GO 48774
49451: POP
49452: POP
// end ;
49453: LD_VAR 0 8
49457: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49458: LD_INT 0
49460: PPUSH
// result := true ;
49461: LD_ADDR_VAR 0 3
49465: PUSH
49466: LD_INT 1
49468: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49469: LD_VAR 0 2
49473: PUSH
49474: LD_INT 24
49476: DOUBLE
49477: EQUAL
49478: IFTRUE 49488
49480: LD_INT 33
49482: DOUBLE
49483: EQUAL
49484: IFTRUE 49488
49486: GO 49513
49488: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49489: LD_ADDR_VAR 0 3
49493: PUSH
49494: LD_INT 32
49496: PPUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: CALL_OW 321
49506: PUSH
49507: LD_INT 2
49509: EQUAL
49510: ST_TO_ADDR
49511: GO 49833
49513: LD_INT 20
49515: DOUBLE
49516: EQUAL
49517: IFTRUE 49521
49519: GO 49546
49521: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49522: LD_ADDR_VAR 0 3
49526: PUSH
49527: LD_INT 6
49529: PPUSH
49530: LD_VAR 0 1
49534: PPUSH
49535: CALL_OW 321
49539: PUSH
49540: LD_INT 2
49542: EQUAL
49543: ST_TO_ADDR
49544: GO 49833
49546: LD_INT 22
49548: DOUBLE
49549: EQUAL
49550: IFTRUE 49560
49552: LD_INT 36
49554: DOUBLE
49555: EQUAL
49556: IFTRUE 49560
49558: GO 49585
49560: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49561: LD_ADDR_VAR 0 3
49565: PUSH
49566: LD_INT 15
49568: PPUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 321
49578: PUSH
49579: LD_INT 2
49581: EQUAL
49582: ST_TO_ADDR
49583: GO 49833
49585: LD_INT 30
49587: DOUBLE
49588: EQUAL
49589: IFTRUE 49593
49591: GO 49618
49593: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49594: LD_ADDR_VAR 0 3
49598: PUSH
49599: LD_INT 20
49601: PPUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 321
49611: PUSH
49612: LD_INT 2
49614: EQUAL
49615: ST_TO_ADDR
49616: GO 49833
49618: LD_INT 28
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49632
49624: LD_INT 21
49626: DOUBLE
49627: EQUAL
49628: IFTRUE 49632
49630: GO 49657
49632: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49633: LD_ADDR_VAR 0 3
49637: PUSH
49638: LD_INT 21
49640: PPUSH
49641: LD_VAR 0 1
49645: PPUSH
49646: CALL_OW 321
49650: PUSH
49651: LD_INT 2
49653: EQUAL
49654: ST_TO_ADDR
49655: GO 49833
49657: LD_INT 16
49659: DOUBLE
49660: EQUAL
49661: IFTRUE 49665
49663: GO 49692
49665: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49666: LD_ADDR_VAR 0 3
49670: PUSH
49671: LD_EXP 148
49675: PPUSH
49676: LD_VAR 0 1
49680: PPUSH
49681: CALL_OW 321
49685: PUSH
49686: LD_INT 2
49688: EQUAL
49689: ST_TO_ADDR
49690: GO 49833
49692: LD_INT 19
49694: DOUBLE
49695: EQUAL
49696: IFTRUE 49706
49698: LD_INT 23
49700: DOUBLE
49701: EQUAL
49702: IFTRUE 49706
49704: GO 49733
49706: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49707: LD_ADDR_VAR 0 3
49711: PUSH
49712: LD_EXP 147
49716: PPUSH
49717: LD_VAR 0 1
49721: PPUSH
49722: CALL_OW 321
49726: PUSH
49727: LD_INT 2
49729: EQUAL
49730: ST_TO_ADDR
49731: GO 49833
49733: LD_INT 17
49735: DOUBLE
49736: EQUAL
49737: IFTRUE 49741
49739: GO 49766
49741: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49742: LD_ADDR_VAR 0 3
49746: PUSH
49747: LD_INT 39
49749: PPUSH
49750: LD_VAR 0 1
49754: PPUSH
49755: CALL_OW 321
49759: PUSH
49760: LD_INT 2
49762: EQUAL
49763: ST_TO_ADDR
49764: GO 49833
49766: LD_INT 18
49768: DOUBLE
49769: EQUAL
49770: IFTRUE 49774
49772: GO 49799
49774: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49775: LD_ADDR_VAR 0 3
49779: PUSH
49780: LD_INT 40
49782: PPUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: CALL_OW 321
49792: PUSH
49793: LD_INT 2
49795: EQUAL
49796: ST_TO_ADDR
49797: GO 49833
49799: LD_INT 27
49801: DOUBLE
49802: EQUAL
49803: IFTRUE 49807
49805: GO 49832
49807: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49808: LD_ADDR_VAR 0 3
49812: PUSH
49813: LD_INT 35
49815: PPUSH
49816: LD_VAR 0 1
49820: PPUSH
49821: CALL_OW 321
49825: PUSH
49826: LD_INT 2
49828: EQUAL
49829: ST_TO_ADDR
49830: GO 49833
49832: POP
// end ;
49833: LD_VAR 0 3
49837: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49838: LD_INT 0
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
// result := false ;
49851: LD_ADDR_VAR 0 6
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49859: LD_VAR 0 1
49863: NOT
49864: PUSH
49865: LD_VAR 0 1
49869: PPUSH
49870: CALL_OW 266
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: IN
49885: NOT
49886: OR
49887: PUSH
49888: LD_VAR 0 2
49892: NOT
49893: OR
49894: PUSH
49895: LD_VAR 0 5
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: LD_INT 5
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: IN
49926: NOT
49927: OR
49928: PUSH
49929: LD_VAR 0 3
49933: PPUSH
49934: LD_VAR 0 4
49938: PPUSH
49939: CALL_OW 488
49943: NOT
49944: OR
49945: IFFALSE 49949
// exit ;
49947: GO 50685
// side := GetSide ( depot ) ;
49949: LD_ADDR_VAR 0 9
49953: PUSH
49954: LD_VAR 0 1
49958: PPUSH
49959: CALL_OW 255
49963: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49964: LD_VAR 0 9
49968: PPUSH
49969: LD_VAR 0 2
49973: PPUSH
49974: CALL 49458 0 2
49978: NOT
49979: IFFALSE 49983
// exit ;
49981: GO 50685
// pom := GetBase ( depot ) ;
49983: LD_ADDR_VAR 0 10
49987: PUSH
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL_OW 274
49997: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49998: LD_ADDR_VAR 0 11
50002: PUSH
50003: LD_VAR 0 2
50007: PPUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: CALL_OW 248
50017: PPUSH
50018: CALL_OW 450
50022: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50023: LD_VAR 0 10
50027: PPUSH
50028: LD_INT 1
50030: PPUSH
50031: CALL_OW 275
50035: PUSH
50036: LD_VAR 0 11
50040: PUSH
50041: LD_INT 1
50043: ARRAY
50044: GREATEREQUAL
50045: PUSH
50046: LD_VAR 0 10
50050: PPUSH
50051: LD_INT 2
50053: PPUSH
50054: CALL_OW 275
50058: PUSH
50059: LD_VAR 0 11
50063: PUSH
50064: LD_INT 2
50066: ARRAY
50067: GREATEREQUAL
50068: AND
50069: PUSH
50070: LD_VAR 0 10
50074: PPUSH
50075: LD_INT 3
50077: PPUSH
50078: CALL_OW 275
50082: PUSH
50083: LD_VAR 0 11
50087: PUSH
50088: LD_INT 3
50090: ARRAY
50091: GREATEREQUAL
50092: AND
50093: NOT
50094: IFFALSE 50098
// exit ;
50096: GO 50685
// if GetBType ( depot ) = b_depot then
50098: LD_VAR 0 1
50102: PPUSH
50103: CALL_OW 266
50107: PUSH
50108: LD_INT 0
50110: EQUAL
50111: IFFALSE 50123
// dist := 28 else
50113: LD_ADDR_VAR 0 14
50117: PUSH
50118: LD_INT 28
50120: ST_TO_ADDR
50121: GO 50131
// dist := 36 ;
50123: LD_ADDR_VAR 0 14
50127: PUSH
50128: LD_INT 36
50130: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50131: LD_VAR 0 1
50135: PPUSH
50136: LD_VAR 0 3
50140: PPUSH
50141: LD_VAR 0 4
50145: PPUSH
50146: CALL_OW 297
50150: PUSH
50151: LD_VAR 0 14
50155: GREATER
50156: IFFALSE 50160
// exit ;
50158: GO 50685
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50160: LD_ADDR_VAR 0 12
50164: PUSH
50165: LD_VAR 0 2
50169: PPUSH
50170: LD_VAR 0 3
50174: PPUSH
50175: LD_VAR 0 4
50179: PPUSH
50180: LD_VAR 0 5
50184: PPUSH
50185: LD_VAR 0 1
50189: PPUSH
50190: CALL_OW 248
50194: PPUSH
50195: LD_INT 0
50197: PPUSH
50198: CALL 50690 0 6
50202: ST_TO_ADDR
// if not hexes then
50203: LD_VAR 0 12
50207: NOT
50208: IFFALSE 50212
// exit ;
50210: GO 50685
// hex := GetHexInfo ( x , y ) ;
50212: LD_ADDR_VAR 0 15
50216: PUSH
50217: LD_VAR 0 3
50221: PPUSH
50222: LD_VAR 0 4
50226: PPUSH
50227: CALL_OW 546
50231: ST_TO_ADDR
// if hex [ 1 ] then
50232: LD_VAR 0 15
50236: PUSH
50237: LD_INT 1
50239: ARRAY
50240: IFFALSE 50244
// exit ;
50242: GO 50685
// height := hex [ 2 ] ;
50244: LD_ADDR_VAR 0 13
50248: PUSH
50249: LD_VAR 0 15
50253: PUSH
50254: LD_INT 2
50256: ARRAY
50257: ST_TO_ADDR
// for i = 1 to hexes do
50258: LD_ADDR_VAR 0 7
50262: PUSH
50263: DOUBLE
50264: LD_INT 1
50266: DEC
50267: ST_TO_ADDR
50268: LD_VAR 0 12
50272: PUSH
50273: FOR_TO
50274: IFFALSE 50604
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50276: LD_VAR 0 12
50280: PUSH
50281: LD_VAR 0 7
50285: ARRAY
50286: PUSH
50287: LD_INT 1
50289: ARRAY
50290: PPUSH
50291: LD_VAR 0 12
50295: PUSH
50296: LD_VAR 0 7
50300: ARRAY
50301: PUSH
50302: LD_INT 2
50304: ARRAY
50305: PPUSH
50306: CALL_OW 488
50310: NOT
50311: PUSH
50312: LD_VAR 0 12
50316: PUSH
50317: LD_VAR 0 7
50321: ARRAY
50322: PUSH
50323: LD_INT 1
50325: ARRAY
50326: PPUSH
50327: LD_VAR 0 12
50331: PUSH
50332: LD_VAR 0 7
50336: ARRAY
50337: PUSH
50338: LD_INT 2
50340: ARRAY
50341: PPUSH
50342: CALL_OW 428
50346: PUSH
50347: LD_INT 0
50349: GREATER
50350: OR
50351: PUSH
50352: LD_VAR 0 12
50356: PUSH
50357: LD_VAR 0 7
50361: ARRAY
50362: PUSH
50363: LD_INT 1
50365: ARRAY
50366: PPUSH
50367: LD_VAR 0 12
50371: PUSH
50372: LD_VAR 0 7
50376: ARRAY
50377: PUSH
50378: LD_INT 2
50380: ARRAY
50381: PPUSH
50382: CALL_OW 351
50386: OR
50387: IFFALSE 50393
// exit ;
50389: POP
50390: POP
50391: GO 50685
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50393: LD_ADDR_VAR 0 8
50397: PUSH
50398: LD_VAR 0 12
50402: PUSH
50403: LD_VAR 0 7
50407: ARRAY
50408: PUSH
50409: LD_INT 1
50411: ARRAY
50412: PPUSH
50413: LD_VAR 0 12
50417: PUSH
50418: LD_VAR 0 7
50422: ARRAY
50423: PUSH
50424: LD_INT 2
50426: ARRAY
50427: PPUSH
50428: CALL_OW 546
50432: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50433: LD_VAR 0 8
50437: PUSH
50438: LD_INT 1
50440: ARRAY
50441: PUSH
50442: LD_VAR 0 8
50446: PUSH
50447: LD_INT 2
50449: ARRAY
50450: PUSH
50451: LD_VAR 0 13
50455: PUSH
50456: LD_INT 2
50458: PLUS
50459: GREATER
50460: OR
50461: PUSH
50462: LD_VAR 0 8
50466: PUSH
50467: LD_INT 2
50469: ARRAY
50470: PUSH
50471: LD_VAR 0 13
50475: PUSH
50476: LD_INT 2
50478: MINUS
50479: LESS
50480: OR
50481: PUSH
50482: LD_VAR 0 8
50486: PUSH
50487: LD_INT 3
50489: ARRAY
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 8
50496: PUSH
50497: LD_INT 9
50499: PUSH
50500: LD_INT 10
50502: PUSH
50503: LD_INT 11
50505: PUSH
50506: LD_INT 12
50508: PUSH
50509: LD_INT 13
50511: PUSH
50512: LD_INT 16
50514: PUSH
50515: LD_INT 17
50517: PUSH
50518: LD_INT 18
50520: PUSH
50521: LD_INT 19
50523: PUSH
50524: LD_INT 20
50526: PUSH
50527: LD_INT 21
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: IN
50545: NOT
50546: OR
50547: PUSH
50548: LD_VAR 0 8
50552: PUSH
50553: LD_INT 5
50555: ARRAY
50556: NOT
50557: OR
50558: PUSH
50559: LD_VAR 0 8
50563: PUSH
50564: LD_INT 6
50566: ARRAY
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 7
50576: PUSH
50577: LD_INT 9
50579: PUSH
50580: LD_INT 10
50582: PUSH
50583: LD_INT 11
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: IN
50594: NOT
50595: OR
50596: IFFALSE 50602
// exit ;
50598: POP
50599: POP
50600: GO 50685
// end ;
50602: GO 50273
50604: POP
50605: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50606: LD_VAR 0 9
50610: PPUSH
50611: LD_VAR 0 3
50615: PPUSH
50616: LD_VAR 0 4
50620: PPUSH
50621: LD_INT 20
50623: PPUSH
50624: CALL 42631 0 4
50628: PUSH
50629: LD_INT 4
50631: ARRAY
50632: IFFALSE 50636
// exit ;
50634: GO 50685
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50636: LD_VAR 0 2
50640: PUSH
50641: LD_INT 29
50643: PUSH
50644: LD_INT 30
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: IN
50651: PUSH
50652: LD_VAR 0 3
50656: PPUSH
50657: LD_VAR 0 4
50661: PPUSH
50662: LD_VAR 0 9
50666: PPUSH
50667: CALL_OW 440
50671: NOT
50672: AND
50673: IFFALSE 50677
// exit ;
50675: GO 50685
// result := true ;
50677: LD_ADDR_VAR 0 6
50681: PUSH
50682: LD_INT 1
50684: ST_TO_ADDR
// end ;
50685: LD_VAR 0 6
50689: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50690: LD_INT 0
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
// result = [ ] ;
50750: LD_ADDR_VAR 0 7
50754: PUSH
50755: EMPTY
50756: ST_TO_ADDR
// temp_list = [ ] ;
50757: LD_ADDR_VAR 0 9
50761: PUSH
50762: EMPTY
50763: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50764: LD_VAR 0 4
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: LD_INT 4
50783: PUSH
50784: LD_INT 5
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: IN
50795: NOT
50796: PUSH
50797: LD_VAR 0 1
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: IN
50812: PUSH
50813: LD_VAR 0 5
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: IN
50832: NOT
50833: AND
50834: OR
50835: IFFALSE 50839
// exit ;
50837: GO 69230
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50839: LD_VAR 0 1
50843: PUSH
50844: LD_INT 6
50846: PUSH
50847: LD_INT 7
50849: PUSH
50850: LD_INT 8
50852: PUSH
50853: LD_INT 13
50855: PUSH
50856: LD_INT 12
50858: PUSH
50859: LD_INT 15
50861: PUSH
50862: LD_INT 11
50864: PUSH
50865: LD_INT 14
50867: PUSH
50868: LD_INT 10
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: IN
50882: IFFALSE 50892
// btype = b_lab ;
50884: LD_ADDR_VAR 0 1
50888: PUSH
50889: LD_INT 6
50891: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50892: LD_VAR 0 6
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: IN
50911: NOT
50912: PUSH
50913: LD_VAR 0 1
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: LD_INT 6
50932: PUSH
50933: LD_INT 36
50935: PUSH
50936: LD_INT 4
50938: PUSH
50939: LD_INT 5
50941: PUSH
50942: LD_INT 31
50944: PUSH
50945: LD_INT 32
50947: PUSH
50948: LD_INT 33
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: IN
50964: NOT
50965: PUSH
50966: LD_VAR 0 6
50970: PUSH
50971: LD_INT 1
50973: EQUAL
50974: AND
50975: OR
50976: PUSH
50977: LD_VAR 0 1
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: IN
50992: NOT
50993: PUSH
50994: LD_VAR 0 6
50998: PUSH
50999: LD_INT 2
51001: EQUAL
51002: AND
51003: OR
51004: IFFALSE 51014
// mode = 0 ;
51006: LD_ADDR_VAR 0 6
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// case mode of 0 :
51014: LD_VAR 0 6
51018: PUSH
51019: LD_INT 0
51021: DOUBLE
51022: EQUAL
51023: IFTRUE 51027
51025: GO 62480
51027: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51028: LD_ADDR_VAR 0 11
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51221: LD_ADDR_VAR 0 12
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51417: LD_ADDR_VAR 0 13
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51616: LD_ADDR_VAR 0 14
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51812: LD_ADDR_VAR 0 15
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52005: LD_ADDR_VAR 0 16
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52198: LD_ADDR_VAR 0 17
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52428: LD_ADDR_VAR 0 18
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52658: LD_ADDR_VAR 0 19
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52888: LD_ADDR_VAR 0 20
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53118: LD_ADDR_VAR 0 21
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53348: LD_ADDR_VAR 0 22
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53578: LD_ADDR_VAR 0 23
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53858: LD_ADDR_VAR 0 24
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54134: LD_ADDR_VAR 0 25
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54408: LD_ADDR_VAR 0 26
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 3
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54684: LD_ADDR_VAR 0 27
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 3
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54964: LD_ADDR_VAR 0 28
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 3
55211: NEG
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55246: LD_ADDR_VAR 0 29
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55525: LD_ADDR_VAR 0 30
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 3
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55803: LD_ADDR_VAR 0 31
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 3
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56081: LD_ADDR_VAR 0 32
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56359: LD_ADDR_VAR 0 33
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56638: LD_ADDR_VAR 0 34
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56918: LD_ADDR_VAR 0 35
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57030: LD_ADDR_VAR 0 36
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57142: LD_ADDR_VAR 0 37
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57254: LD_ADDR_VAR 0 38
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57366: LD_ADDR_VAR 0 39
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57478: LD_ADDR_VAR 0 40
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57590: LD_ADDR_VAR 0 41
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57940: LD_ADDR_VAR 0 42
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58290: LD_ADDR_VAR 0 43
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58638: LD_ADDR_VAR 0 44
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58988: LD_ADDR_VAR 0 45
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59338: LD_ADDR_VAR 0 46
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59686: LD_ADDR_VAR 0 47
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59837: LD_ADDR_VAR 0 48
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59984: LD_ADDR_VAR 0 49
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60128: LD_ADDR_VAR 0 50
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60272: LD_ADDR_VAR 0 51
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60419: LD_ADDR_VAR 0 52
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60570: LD_ADDR_VAR 0 53
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60800: LD_ADDR_VAR 0 54
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61030: LD_ADDR_VAR 0 55
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61260: LD_ADDR_VAR 0 56
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61490: LD_ADDR_VAR 0 57
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61720: LD_ADDR_VAR 0 58
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61950: LD_ADDR_VAR 0 59
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62038: LD_ADDR_VAR 0 60
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62126: LD_ADDR_VAR 0 61
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62214: LD_ADDR_VAR 0 62
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62302: LD_ADDR_VAR 0 63
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62390: LD_ADDR_VAR 0 64
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: ST_TO_ADDR
// end ; 1 :
62478: GO 68375
62480: LD_INT 1
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62488
62486: GO 65111
62488: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62489: LD_ADDR_VAR 0 11
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 3
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62533: LD_ADDR_VAR 0 12
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 3
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62574: LD_ADDR_VAR 0 13
62578: PUSH
62579: LD_INT 3
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 3
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62614: LD_ADDR_VAR 0 14
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 3
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62655: LD_ADDR_VAR 0 15
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62699: LD_ADDR_VAR 0 16
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 3
62730: NEG
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: LIST
62744: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62745: LD_ADDR_VAR 0 17
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 3
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62789: LD_ADDR_VAR 0 18
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62830: LD_ADDR_VAR 0 19
62834: PUSH
62835: LD_INT 3
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62870: LD_ADDR_VAR 0 20
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 2
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62911: LD_ADDR_VAR 0 21
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62955: LD_ADDR_VAR 0 22
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 3
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63001: LD_ADDR_VAR 0 23
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 4
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63045: LD_ADDR_VAR 0 24
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63086: LD_ADDR_VAR 0 25
63090: PUSH
63091: LD_INT 3
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 4
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 3
63113: PUSH
63114: LD_INT 4
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63126: LD_ADDR_VAR 0 26
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 4
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63167: LD_ADDR_VAR 0 27
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: NEG
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 4
63196: NEG
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63211: LD_ADDR_VAR 0 28
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: LD_INT 4
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 4
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63257: LD_ADDR_VAR 0 29
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: LD_INT 4
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 4
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: LD_INT 5
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: LD_INT 5
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: LD_INT 4
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 6
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 6
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 5
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63412: LD_ADDR_VAR 0 30
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 3
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 4
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 4
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 4
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 5
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 5
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 5
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 6
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 6
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63555: LD_ADDR_VAR 0 31
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: LD_INT 2
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: LD_INT 3
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 4
63592: PUSH
63593: LD_INT 3
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 4
63602: PUSH
63603: LD_INT 4
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: LD_INT 4
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 5
63622: PUSH
63623: LD_INT 4
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 5
63632: PUSH
63633: LD_INT 5
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 4
63642: PUSH
63643: LD_INT 5
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 6
63652: PUSH
63653: LD_INT 5
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 6
63662: PUSH
63663: LD_INT 6
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 5
63672: PUSH
63673: LD_INT 6
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63694: LD_ADDR_VAR 0 32
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 4
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 4
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 3
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: LD_INT 5
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 5
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 6
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 6
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 5
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63837: LD_ADDR_VAR 0 33
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 3
63855: NEG
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 3
63878: NEG
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 4
63889: NEG
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 4
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 5
63923: NEG
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 5
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 5
63946: NEG
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 6
63957: NEG
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 6
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63992: LD_ADDR_VAR 0 34
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: LD_INT 3
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: LD_INT 4
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: NEG
64048: PUSH
64049: LD_INT 3
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 4
64059: NEG
64060: PUSH
64061: LD_INT 4
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 4
64071: NEG
64072: PUSH
64073: LD_INT 5
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 5
64083: NEG
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 5
64095: NEG
64096: PUSH
64097: LD_INT 5
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 5
64107: NEG
64108: PUSH
64109: LD_INT 6
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 6
64119: NEG
64120: PUSH
64121: LD_INT 5
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 6
64131: NEG
64132: PUSH
64133: LD_INT 6
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64155: LD_ADDR_VAR 0 41
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64199: LD_ADDR_VAR 0 42
64203: PUSH
64204: LD_INT 2
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 3
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64240: LD_ADDR_VAR 0 43
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: LD_INT 2
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: LD_INT 2
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64280: LD_ADDR_VAR 0 44
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 3
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: LIST
64320: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64321: LD_ADDR_VAR 0 45
64325: PUSH
64326: LD_INT 2
64328: NEG
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: NEG
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 3
64350: NEG
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64365: LD_ADDR_VAR 0 46
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 3
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 3
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64411: LD_ADDR_VAR 0 47
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: LD_INT 3
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64444: LD_ADDR_VAR 0 48
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: LD_INT 2
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64475: LD_ADDR_VAR 0 49
64479: PUSH
64480: LD_INT 3
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64504: LD_ADDR_VAR 0 50
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 3
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64533: LD_ADDR_VAR 0 51
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64564: LD_ADDR_VAR 0 52
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64597: LD_ADDR_VAR 0 53
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: LD_INT 3
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 3
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64641: LD_ADDR_VAR 0 54
64645: PUSH
64646: LD_INT 2
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 3
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 3
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64682: LD_ADDR_VAR 0 55
64686: PUSH
64687: LD_INT 3
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64722: LD_ADDR_VAR 0 56
64726: PUSH
64727: LD_INT 1
64729: PUSH
64730: LD_INT 3
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64763: LD_ADDR_VAR 0 57
64767: PUSH
64768: LD_INT 2
64770: NEG
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 3
64781: NEG
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64807: LD_ADDR_VAR 0 58
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: LD_INT 3
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 3
64826: NEG
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: NEG
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64853: LD_ADDR_VAR 0 59
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 2
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64897: LD_ADDR_VAR 0 60
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64938: LD_ADDR_VAR 0 61
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 2
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64978: LD_ADDR_VAR 0 62
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65019: LD_ADDR_VAR 0 63
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65063: LD_ADDR_VAR 0 64
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: LD_INT 2
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// end ; 2 :
65109: GO 68375
65111: LD_INT 2
65113: DOUBLE
65114: EQUAL
65115: IFTRUE 65119
65117: GO 68374
65119: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65120: LD_ADDR_VAR 0 29
65124: PUSH
65125: LD_INT 4
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 4
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 5
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 5
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 5
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: LD_INT 3
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 4
65250: PUSH
65251: LD_INT 4
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: LD_INT 4
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: LD_INT 2
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 4
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: LD_INT 4
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 4
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 4
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: LD_INT 5
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 5
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 3
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 5
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: LD_INT 3
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 4
65459: NEG
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 4
65470: NEG
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 4
65482: NEG
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: NEG
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 4
65517: NEG
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 3
65529: NEG
65530: PUSH
65531: LD_INT 4
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 4
65553: NEG
65554: PUSH
65555: LD_INT 3
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 5
65565: NEG
65566: PUSH
65567: LD_INT 4
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 5
65577: NEG
65578: PUSH
65579: LD_INT 5
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 3
65589: NEG
65590: PUSH
65591: LD_INT 5
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 5
65601: NEG
65602: PUSH
65603: LD_INT 3
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65658: LD_ADDR_VAR 0 30
65662: PUSH
65663: LD_INT 4
65665: PUSH
65666: LD_INT 4
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 4
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 5
65685: PUSH
65686: LD_INT 4
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 5
65695: PUSH
65696: LD_INT 5
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 4
65705: PUSH
65706: LD_INT 5
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 3
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 3
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 5
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 3
65745: PUSH
65746: LD_INT 5
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 4
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 4
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 2
65837: NEG
65838: PUSH
65839: LD_INT 2
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 4
65848: NEG
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 4
65859: NEG
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: NEG
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 4
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 5
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 5
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 5
65927: NEG
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: NEG
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 3
65950: NEG
65951: PUSH
65952: LD_INT 3
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 4
66010: NEG
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 4
66022: NEG
66023: PUSH
66024: LD_INT 4
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: LD_INT 4
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 4
66046: NEG
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 4
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 5
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: LD_INT 4
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 3
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 3
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 4
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: LD_INT 5
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: LD_INT 3
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: LD_INT 5
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66205: LD_ADDR_VAR 0 31
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: LD_INT 4
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 5
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 5
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 4
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 3
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: LD_INT 5
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 3
66305: NEG
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 4
66361: NEG
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 2
66396: NEG
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: LD_INT 4
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 4
66419: NEG
66420: PUSH
66421: LD_INT 5
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: LD_INT 4
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: NEG
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: NEG
66456: PUSH
66457: LD_INT 3
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 5
66467: NEG
66468: PUSH
66469: LD_INT 4
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 5
66479: NEG
66480: PUSH
66481: LD_INT 5
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: LD_INT 5
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 5
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 4
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 3
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: LD_INT 2
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: LD_INT 4
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 4
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 5
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 5
66648: PUSH
66649: LD_INT 1
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 4
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 5
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66755: LD_ADDR_VAR 0 32
66759: PUSH
66760: LD_INT 4
66762: NEG
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 4
66773: NEG
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 3
66785: NEG
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 4
66807: NEG
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 5
66818: NEG
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 5
66841: NEG
66842: PUSH
66843: LD_INT 2
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 3
66876: NEG
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: LD_INT 3
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 2
66900: NEG
66901: PUSH
66902: LD_INT 2
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 4
66924: NEG
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 4
66936: NEG
66937: PUSH
66938: LD_INT 4
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 4
66960: NEG
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 4
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: LD_INT 5
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: LD_INT 4
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 3
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: LD_INT 3
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: LD_INT 5
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: LD_INT 5
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 4
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 3
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 2
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 2
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 2
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 4
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 4
67167: PUSH
67168: LD_INT 4
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 4
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 5
67187: PUSH
67188: LD_INT 4
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 5
67197: PUSH
67198: LD_INT 5
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 4
67207: PUSH
67208: LD_INT 5
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: LD_INT 3
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: LD_INT 5
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67302: LD_ADDR_VAR 0 33
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: LD_INT 4
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 4
67321: NEG
67322: PUSH
67323: LD_INT 5
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: LD_INT 4
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 4
67357: NEG
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 5
67369: NEG
67370: PUSH
67371: LD_INT 4
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 5
67381: NEG
67382: PUSH
67383: LD_INT 5
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 5
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 5
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: LD_INT 3
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: LD_INT 4
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 1
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: NEG
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: PUSH
67486: LD_INT 4
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: PUSH
67497: LD_INT 2
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: LD_INT 4
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 4
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 4
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 5
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 5
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 4
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 3
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 5
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 3
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 4
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 2
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 4
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: LD_INT 4
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: PUSH
67723: LD_INT 4
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: LD_INT 5
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 5
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: LD_INT 4
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: NEG
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: LD_INT 5
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 2
67784: NEG
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67840: LD_ADDR_VAR 0 34
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 4
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: LD_INT 5
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: LD_INT 4
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: LD_INT 3
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: LD_INT 3
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 4
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 1
67914: NEG
67915: PUSH
67916: LD_INT 5
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: LD_INT 5
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 3
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 4
68032: PUSH
68033: LD_INT 2
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 4
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 4
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 5
68062: PUSH
68063: LD_INT 4
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 5
68072: PUSH
68073: LD_INT 5
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 4
68082: PUSH
68083: LD_INT 5
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 3
68092: PUSH
68093: LD_INT 4
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: PUSH
68103: LD_INT 3
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 5
68112: PUSH
68113: LD_INT 3
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: LD_INT 5
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: LD_INT 3
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 4
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: LD_INT 4
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 1
68182: NEG
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 1
68193: NEG
68194: PUSH
68195: LD_INT 2
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: LD_INT 4
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 4
68225: NEG
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 4
68236: NEG
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 3
68248: NEG
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 3
68259: NEG
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 4
68270: NEG
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 5
68281: NEG
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: LD_INT 1
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 5
68304: NEG
68305: PUSH
68306: LD_INT 2
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: NEG
68317: PUSH
68318: LD_INT 2
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: ST_TO_ADDR
// end ; end ;
68372: GO 68375
68374: POP
// case btype of b_depot , b_warehouse :
68375: LD_VAR 0 1
68379: PUSH
68380: LD_INT 0
68382: DOUBLE
68383: EQUAL
68384: IFTRUE 68394
68386: LD_INT 1
68388: DOUBLE
68389: EQUAL
68390: IFTRUE 68394
68392: GO 68595
68394: POP
// case nation of nation_american :
68395: LD_VAR 0 5
68399: PUSH
68400: LD_INT 1
68402: DOUBLE
68403: EQUAL
68404: IFTRUE 68408
68406: GO 68464
68408: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68409: LD_ADDR_VAR 0 9
68413: PUSH
68414: LD_VAR 0 11
68418: PUSH
68419: LD_VAR 0 12
68423: PUSH
68424: LD_VAR 0 13
68428: PUSH
68429: LD_VAR 0 14
68433: PUSH
68434: LD_VAR 0 15
68438: PUSH
68439: LD_VAR 0 16
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: PUSH
68452: LD_VAR 0 4
68456: PUSH
68457: LD_INT 1
68459: PLUS
68460: ARRAY
68461: ST_TO_ADDR
68462: GO 68593
68464: LD_INT 2
68466: DOUBLE
68467: EQUAL
68468: IFTRUE 68472
68470: GO 68528
68472: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68473: LD_ADDR_VAR 0 9
68477: PUSH
68478: LD_VAR 0 17
68482: PUSH
68483: LD_VAR 0 18
68487: PUSH
68488: LD_VAR 0 19
68492: PUSH
68493: LD_VAR 0 20
68497: PUSH
68498: LD_VAR 0 21
68502: PUSH
68503: LD_VAR 0 22
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: PUSH
68516: LD_VAR 0 4
68520: PUSH
68521: LD_INT 1
68523: PLUS
68524: ARRAY
68525: ST_TO_ADDR
68526: GO 68593
68528: LD_INT 3
68530: DOUBLE
68531: EQUAL
68532: IFTRUE 68536
68534: GO 68592
68536: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68537: LD_ADDR_VAR 0 9
68541: PUSH
68542: LD_VAR 0 23
68546: PUSH
68547: LD_VAR 0 24
68551: PUSH
68552: LD_VAR 0 25
68556: PUSH
68557: LD_VAR 0 26
68561: PUSH
68562: LD_VAR 0 27
68566: PUSH
68567: LD_VAR 0 28
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: PUSH
68580: LD_VAR 0 4
68584: PUSH
68585: LD_INT 1
68587: PLUS
68588: ARRAY
68589: ST_TO_ADDR
68590: GO 68593
68592: POP
68593: GO 69148
68595: LD_INT 2
68597: DOUBLE
68598: EQUAL
68599: IFTRUE 68609
68601: LD_INT 3
68603: DOUBLE
68604: EQUAL
68605: IFTRUE 68609
68607: GO 68665
68609: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68610: LD_ADDR_VAR 0 9
68614: PUSH
68615: LD_VAR 0 29
68619: PUSH
68620: LD_VAR 0 30
68624: PUSH
68625: LD_VAR 0 31
68629: PUSH
68630: LD_VAR 0 32
68634: PUSH
68635: LD_VAR 0 33
68639: PUSH
68640: LD_VAR 0 34
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: PUSH
68653: LD_VAR 0 4
68657: PUSH
68658: LD_INT 1
68660: PLUS
68661: ARRAY
68662: ST_TO_ADDR
68663: GO 69148
68665: LD_INT 16
68667: DOUBLE
68668: EQUAL
68669: IFTRUE 68727
68671: LD_INT 17
68673: DOUBLE
68674: EQUAL
68675: IFTRUE 68727
68677: LD_INT 18
68679: DOUBLE
68680: EQUAL
68681: IFTRUE 68727
68683: LD_INT 19
68685: DOUBLE
68686: EQUAL
68687: IFTRUE 68727
68689: LD_INT 22
68691: DOUBLE
68692: EQUAL
68693: IFTRUE 68727
68695: LD_INT 20
68697: DOUBLE
68698: EQUAL
68699: IFTRUE 68727
68701: LD_INT 21
68703: DOUBLE
68704: EQUAL
68705: IFTRUE 68727
68707: LD_INT 23
68709: DOUBLE
68710: EQUAL
68711: IFTRUE 68727
68713: LD_INT 24
68715: DOUBLE
68716: EQUAL
68717: IFTRUE 68727
68719: LD_INT 25
68721: DOUBLE
68722: EQUAL
68723: IFTRUE 68727
68725: GO 68783
68727: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68728: LD_ADDR_VAR 0 9
68732: PUSH
68733: LD_VAR 0 35
68737: PUSH
68738: LD_VAR 0 36
68742: PUSH
68743: LD_VAR 0 37
68747: PUSH
68748: LD_VAR 0 38
68752: PUSH
68753: LD_VAR 0 39
68757: PUSH
68758: LD_VAR 0 40
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: PUSH
68771: LD_VAR 0 4
68775: PUSH
68776: LD_INT 1
68778: PLUS
68779: ARRAY
68780: ST_TO_ADDR
68781: GO 69148
68783: LD_INT 6
68785: DOUBLE
68786: EQUAL
68787: IFTRUE 68839
68789: LD_INT 7
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68839
68795: LD_INT 8
68797: DOUBLE
68798: EQUAL
68799: IFTRUE 68839
68801: LD_INT 13
68803: DOUBLE
68804: EQUAL
68805: IFTRUE 68839
68807: LD_INT 12
68809: DOUBLE
68810: EQUAL
68811: IFTRUE 68839
68813: LD_INT 15
68815: DOUBLE
68816: EQUAL
68817: IFTRUE 68839
68819: LD_INT 11
68821: DOUBLE
68822: EQUAL
68823: IFTRUE 68839
68825: LD_INT 14
68827: DOUBLE
68828: EQUAL
68829: IFTRUE 68839
68831: LD_INT 10
68833: DOUBLE
68834: EQUAL
68835: IFTRUE 68839
68837: GO 68895
68839: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68840: LD_ADDR_VAR 0 9
68844: PUSH
68845: LD_VAR 0 41
68849: PUSH
68850: LD_VAR 0 42
68854: PUSH
68855: LD_VAR 0 43
68859: PUSH
68860: LD_VAR 0 44
68864: PUSH
68865: LD_VAR 0 45
68869: PUSH
68870: LD_VAR 0 46
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: PUSH
68883: LD_VAR 0 4
68887: PUSH
68888: LD_INT 1
68890: PLUS
68891: ARRAY
68892: ST_TO_ADDR
68893: GO 69148
68895: LD_INT 36
68897: DOUBLE
68898: EQUAL
68899: IFTRUE 68903
68901: GO 68959
68903: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68904: LD_ADDR_VAR 0 9
68908: PUSH
68909: LD_VAR 0 47
68913: PUSH
68914: LD_VAR 0 48
68918: PUSH
68919: LD_VAR 0 49
68923: PUSH
68924: LD_VAR 0 50
68928: PUSH
68929: LD_VAR 0 51
68933: PUSH
68934: LD_VAR 0 52
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: PUSH
68947: LD_VAR 0 4
68951: PUSH
68952: LD_INT 1
68954: PLUS
68955: ARRAY
68956: ST_TO_ADDR
68957: GO 69148
68959: LD_INT 4
68961: DOUBLE
68962: EQUAL
68963: IFTRUE 68985
68965: LD_INT 5
68967: DOUBLE
68968: EQUAL
68969: IFTRUE 68985
68971: LD_INT 34
68973: DOUBLE
68974: EQUAL
68975: IFTRUE 68985
68977: LD_INT 37
68979: DOUBLE
68980: EQUAL
68981: IFTRUE 68985
68983: GO 69041
68985: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68986: LD_ADDR_VAR 0 9
68990: PUSH
68991: LD_VAR 0 53
68995: PUSH
68996: LD_VAR 0 54
69000: PUSH
69001: LD_VAR 0 55
69005: PUSH
69006: LD_VAR 0 56
69010: PUSH
69011: LD_VAR 0 57
69015: PUSH
69016: LD_VAR 0 58
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: PUSH
69029: LD_VAR 0 4
69033: PUSH
69034: LD_INT 1
69036: PLUS
69037: ARRAY
69038: ST_TO_ADDR
69039: GO 69148
69041: LD_INT 31
69043: DOUBLE
69044: EQUAL
69045: IFTRUE 69091
69047: LD_INT 32
69049: DOUBLE
69050: EQUAL
69051: IFTRUE 69091
69053: LD_INT 33
69055: DOUBLE
69056: EQUAL
69057: IFTRUE 69091
69059: LD_INT 27
69061: DOUBLE
69062: EQUAL
69063: IFTRUE 69091
69065: LD_INT 26
69067: DOUBLE
69068: EQUAL
69069: IFTRUE 69091
69071: LD_INT 28
69073: DOUBLE
69074: EQUAL
69075: IFTRUE 69091
69077: LD_INT 29
69079: DOUBLE
69080: EQUAL
69081: IFTRUE 69091
69083: LD_INT 30
69085: DOUBLE
69086: EQUAL
69087: IFTRUE 69091
69089: GO 69147
69091: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69092: LD_ADDR_VAR 0 9
69096: PUSH
69097: LD_VAR 0 59
69101: PUSH
69102: LD_VAR 0 60
69106: PUSH
69107: LD_VAR 0 61
69111: PUSH
69112: LD_VAR 0 62
69116: PUSH
69117: LD_VAR 0 63
69121: PUSH
69122: LD_VAR 0 64
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: PUSH
69135: LD_VAR 0 4
69139: PUSH
69140: LD_INT 1
69142: PLUS
69143: ARRAY
69144: ST_TO_ADDR
69145: GO 69148
69147: POP
// temp_list2 = [ ] ;
69148: LD_ADDR_VAR 0 10
69152: PUSH
69153: EMPTY
69154: ST_TO_ADDR
// for i in temp_list do
69155: LD_ADDR_VAR 0 8
69159: PUSH
69160: LD_VAR 0 9
69164: PUSH
69165: FOR_IN
69166: IFFALSE 69218
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69168: LD_ADDR_VAR 0 10
69172: PUSH
69173: LD_VAR 0 10
69177: PUSH
69178: LD_VAR 0 8
69182: PUSH
69183: LD_INT 1
69185: ARRAY
69186: PUSH
69187: LD_VAR 0 2
69191: PLUS
69192: PUSH
69193: LD_VAR 0 8
69197: PUSH
69198: LD_INT 2
69200: ARRAY
69201: PUSH
69202: LD_VAR 0 3
69206: PLUS
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: EMPTY
69213: LIST
69214: ADD
69215: ST_TO_ADDR
69216: GO 69165
69218: POP
69219: POP
// result = temp_list2 ;
69220: LD_ADDR_VAR 0 7
69224: PUSH
69225: LD_VAR 0 10
69229: ST_TO_ADDR
// end ;
69230: LD_VAR 0 7
69234: RET
// export function EnemyInRange ( unit , dist ) ; begin
69235: LD_INT 0
69237: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69238: LD_ADDR_VAR 0 3
69242: PUSH
69243: LD_VAR 0 1
69247: PPUSH
69248: CALL_OW 255
69252: PPUSH
69253: LD_VAR 0 1
69257: PPUSH
69258: CALL_OW 250
69262: PPUSH
69263: LD_VAR 0 1
69267: PPUSH
69268: CALL_OW 251
69272: PPUSH
69273: LD_VAR 0 2
69277: PPUSH
69278: CALL 42631 0 4
69282: PUSH
69283: LD_INT 4
69285: ARRAY
69286: ST_TO_ADDR
// end ;
69287: LD_VAR 0 3
69291: RET
// export function PlayerSeeMe ( unit ) ; begin
69292: LD_INT 0
69294: PPUSH
// result := See ( your_side , unit ) ;
69295: LD_ADDR_VAR 0 2
69299: PUSH
69300: LD_OWVAR 2
69304: PPUSH
69305: LD_VAR 0 1
69309: PPUSH
69310: CALL_OW 292
69314: ST_TO_ADDR
// end ;
69315: LD_VAR 0 2
69319: RET
// export function ReverseDir ( unit ) ; begin
69320: LD_INT 0
69322: PPUSH
// if not unit then
69323: LD_VAR 0 1
69327: NOT
69328: IFFALSE 69332
// exit ;
69330: GO 69355
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69332: LD_ADDR_VAR 0 2
69336: PUSH
69337: LD_VAR 0 1
69341: PPUSH
69342: CALL_OW 254
69346: PUSH
69347: LD_INT 3
69349: PLUS
69350: PUSH
69351: LD_INT 6
69353: MOD
69354: ST_TO_ADDR
// end ;
69355: LD_VAR 0 2
69359: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
69364: PPUSH
69365: PPUSH
69366: PPUSH
// if not hexes then
69367: LD_VAR 0 2
69371: NOT
69372: IFFALSE 69376
// exit ;
69374: GO 69524
// dist := 9999 ;
69376: LD_ADDR_VAR 0 5
69380: PUSH
69381: LD_INT 9999
69383: ST_TO_ADDR
// for i = 1 to hexes do
69384: LD_ADDR_VAR 0 4
69388: PUSH
69389: DOUBLE
69390: LD_INT 1
69392: DEC
69393: ST_TO_ADDR
69394: LD_VAR 0 2
69398: PUSH
69399: FOR_TO
69400: IFFALSE 69512
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69402: LD_VAR 0 1
69406: PPUSH
69407: LD_VAR 0 2
69411: PUSH
69412: LD_VAR 0 4
69416: ARRAY
69417: PUSH
69418: LD_INT 1
69420: ARRAY
69421: PPUSH
69422: LD_VAR 0 2
69426: PUSH
69427: LD_VAR 0 4
69431: ARRAY
69432: PUSH
69433: LD_INT 2
69435: ARRAY
69436: PPUSH
69437: CALL_OW 297
69441: PUSH
69442: LD_VAR 0 5
69446: LESS
69447: IFFALSE 69510
// begin hex := hexes [ i ] ;
69449: LD_ADDR_VAR 0 7
69453: PUSH
69454: LD_VAR 0 2
69458: PUSH
69459: LD_VAR 0 4
69463: ARRAY
69464: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69465: LD_ADDR_VAR 0 5
69469: PUSH
69470: LD_VAR 0 1
69474: PPUSH
69475: LD_VAR 0 2
69479: PUSH
69480: LD_VAR 0 4
69484: ARRAY
69485: PUSH
69486: LD_INT 1
69488: ARRAY
69489: PPUSH
69490: LD_VAR 0 2
69494: PUSH
69495: LD_VAR 0 4
69499: ARRAY
69500: PUSH
69501: LD_INT 2
69503: ARRAY
69504: PPUSH
69505: CALL_OW 297
69509: ST_TO_ADDR
// end ; end ;
69510: GO 69399
69512: POP
69513: POP
// result := hex ;
69514: LD_ADDR_VAR 0 3
69518: PUSH
69519: LD_VAR 0 7
69523: ST_TO_ADDR
// end ;
69524: LD_VAR 0 3
69528: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69529: LD_INT 0
69531: PPUSH
69532: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69533: LD_VAR 0 1
69537: NOT
69538: PUSH
69539: LD_VAR 0 1
69543: PUSH
69544: LD_INT 21
69546: PUSH
69547: LD_INT 2
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 23
69556: PUSH
69557: LD_INT 2
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PPUSH
69568: CALL_OW 69
69572: IN
69573: NOT
69574: OR
69575: IFFALSE 69579
// exit ;
69577: GO 69626
// for i = 1 to 3 do
69579: LD_ADDR_VAR 0 3
69583: PUSH
69584: DOUBLE
69585: LD_INT 1
69587: DEC
69588: ST_TO_ADDR
69589: LD_INT 3
69591: PUSH
69592: FOR_TO
69593: IFFALSE 69624
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69595: LD_VAR 0 1
69599: PPUSH
69600: CALL_OW 250
69604: PPUSH
69605: LD_VAR 0 1
69609: PPUSH
69610: CALL_OW 251
69614: PPUSH
69615: LD_INT 1
69617: PPUSH
69618: CALL_OW 453
69622: GO 69592
69624: POP
69625: POP
// end ;
69626: LD_VAR 0 2
69630: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69631: LD_INT 0
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69639: LD_VAR 0 1
69643: NOT
69644: PUSH
69645: LD_VAR 0 2
69649: NOT
69650: OR
69651: PUSH
69652: LD_VAR 0 1
69656: PPUSH
69657: CALL_OW 314
69661: OR
69662: IFFALSE 69666
// exit ;
69664: GO 70107
// x := GetX ( enemy_unit ) ;
69666: LD_ADDR_VAR 0 7
69670: PUSH
69671: LD_VAR 0 2
69675: PPUSH
69676: CALL_OW 250
69680: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69681: LD_ADDR_VAR 0 8
69685: PUSH
69686: LD_VAR 0 2
69690: PPUSH
69691: CALL_OW 251
69695: ST_TO_ADDR
// if not x or not y then
69696: LD_VAR 0 7
69700: NOT
69701: PUSH
69702: LD_VAR 0 8
69706: NOT
69707: OR
69708: IFFALSE 69712
// exit ;
69710: GO 70107
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69712: LD_ADDR_VAR 0 6
69716: PUSH
69717: LD_VAR 0 7
69721: PPUSH
69722: LD_INT 0
69724: PPUSH
69725: LD_INT 4
69727: PPUSH
69728: CALL_OW 272
69732: PUSH
69733: LD_VAR 0 8
69737: PPUSH
69738: LD_INT 0
69740: PPUSH
69741: LD_INT 4
69743: PPUSH
69744: CALL_OW 273
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_VAR 0 7
69757: PPUSH
69758: LD_INT 1
69760: PPUSH
69761: LD_INT 4
69763: PPUSH
69764: CALL_OW 272
69768: PUSH
69769: LD_VAR 0 8
69773: PPUSH
69774: LD_INT 1
69776: PPUSH
69777: LD_INT 4
69779: PPUSH
69780: CALL_OW 273
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_VAR 0 7
69793: PPUSH
69794: LD_INT 2
69796: PPUSH
69797: LD_INT 4
69799: PPUSH
69800: CALL_OW 272
69804: PUSH
69805: LD_VAR 0 8
69809: PPUSH
69810: LD_INT 2
69812: PPUSH
69813: LD_INT 4
69815: PPUSH
69816: CALL_OW 273
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_VAR 0 7
69829: PPUSH
69830: LD_INT 3
69832: PPUSH
69833: LD_INT 4
69835: PPUSH
69836: CALL_OW 272
69840: PUSH
69841: LD_VAR 0 8
69845: PPUSH
69846: LD_INT 3
69848: PPUSH
69849: LD_INT 4
69851: PPUSH
69852: CALL_OW 273
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_VAR 0 7
69865: PPUSH
69866: LD_INT 4
69868: PPUSH
69869: LD_INT 4
69871: PPUSH
69872: CALL_OW 272
69876: PUSH
69877: LD_VAR 0 8
69881: PPUSH
69882: LD_INT 4
69884: PPUSH
69885: LD_INT 4
69887: PPUSH
69888: CALL_OW 273
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_VAR 0 7
69901: PPUSH
69902: LD_INT 5
69904: PPUSH
69905: LD_INT 4
69907: PPUSH
69908: CALL_OW 272
69912: PUSH
69913: LD_VAR 0 8
69917: PPUSH
69918: LD_INT 5
69920: PPUSH
69921: LD_INT 4
69923: PPUSH
69924: CALL_OW 273
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: ST_TO_ADDR
// for i = tmp downto 1 do
69941: LD_ADDR_VAR 0 4
69945: PUSH
69946: DOUBLE
69947: LD_VAR 0 6
69951: INC
69952: ST_TO_ADDR
69953: LD_INT 1
69955: PUSH
69956: FOR_DOWNTO
69957: IFFALSE 70058
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69959: LD_VAR 0 6
69963: PUSH
69964: LD_VAR 0 4
69968: ARRAY
69969: PUSH
69970: LD_INT 1
69972: ARRAY
69973: PPUSH
69974: LD_VAR 0 6
69978: PUSH
69979: LD_VAR 0 4
69983: ARRAY
69984: PUSH
69985: LD_INT 2
69987: ARRAY
69988: PPUSH
69989: CALL_OW 488
69993: NOT
69994: PUSH
69995: LD_VAR 0 6
69999: PUSH
70000: LD_VAR 0 4
70004: ARRAY
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PPUSH
70010: LD_VAR 0 6
70014: PUSH
70015: LD_VAR 0 4
70019: ARRAY
70020: PUSH
70021: LD_INT 2
70023: ARRAY
70024: PPUSH
70025: CALL_OW 428
70029: PUSH
70030: LD_INT 0
70032: NONEQUAL
70033: OR
70034: IFFALSE 70056
// tmp := Delete ( tmp , i ) ;
70036: LD_ADDR_VAR 0 6
70040: PUSH
70041: LD_VAR 0 6
70045: PPUSH
70046: LD_VAR 0 4
70050: PPUSH
70051: CALL_OW 3
70055: ST_TO_ADDR
70056: GO 69956
70058: POP
70059: POP
// j := GetClosestHex ( unit , tmp ) ;
70060: LD_ADDR_VAR 0 5
70064: PUSH
70065: LD_VAR 0 1
70069: PPUSH
70070: LD_VAR 0 6
70074: PPUSH
70075: CALL 69360 0 2
70079: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70080: LD_VAR 0 1
70084: PPUSH
70085: LD_VAR 0 5
70089: PUSH
70090: LD_INT 1
70092: ARRAY
70093: PPUSH
70094: LD_VAR 0 5
70098: PUSH
70099: LD_INT 2
70101: ARRAY
70102: PPUSH
70103: CALL_OW 111
// end ;
70107: LD_VAR 0 3
70111: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70112: LD_INT 0
70114: PPUSH
70115: PPUSH
70116: PPUSH
// uc_side = 0 ;
70117: LD_ADDR_OWVAR 20
70121: PUSH
70122: LD_INT 0
70124: ST_TO_ADDR
// uc_nation = 0 ;
70125: LD_ADDR_OWVAR 21
70129: PUSH
70130: LD_INT 0
70132: ST_TO_ADDR
// InitHc_All ( ) ;
70133: CALL_OW 584
// InitVc ;
70137: CALL_OW 20
// if mastodonts then
70141: LD_VAR 0 6
70145: IFFALSE 70212
// for i = 1 to mastodonts do
70147: LD_ADDR_VAR 0 11
70151: PUSH
70152: DOUBLE
70153: LD_INT 1
70155: DEC
70156: ST_TO_ADDR
70157: LD_VAR 0 6
70161: PUSH
70162: FOR_TO
70163: IFFALSE 70210
// begin vc_chassis := 31 ;
70165: LD_ADDR_OWVAR 37
70169: PUSH
70170: LD_INT 31
70172: ST_TO_ADDR
// vc_control := control_rider ;
70173: LD_ADDR_OWVAR 38
70177: PUSH
70178: LD_INT 4
70180: ST_TO_ADDR
// animal := CreateVehicle ;
70181: LD_ADDR_VAR 0 12
70185: PUSH
70186: CALL_OW 45
70190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70191: LD_VAR 0 12
70195: PPUSH
70196: LD_VAR 0 8
70200: PPUSH
70201: LD_INT 0
70203: PPUSH
70204: CALL 72400 0 3
// end ;
70208: GO 70162
70210: POP
70211: POP
// if horses then
70212: LD_VAR 0 5
70216: IFFALSE 70283
// for i = 1 to horses do
70218: LD_ADDR_VAR 0 11
70222: PUSH
70223: DOUBLE
70224: LD_INT 1
70226: DEC
70227: ST_TO_ADDR
70228: LD_VAR 0 5
70232: PUSH
70233: FOR_TO
70234: IFFALSE 70281
// begin hc_class := 21 ;
70236: LD_ADDR_OWVAR 28
70240: PUSH
70241: LD_INT 21
70243: ST_TO_ADDR
// hc_gallery :=  ;
70244: LD_ADDR_OWVAR 33
70248: PUSH
70249: LD_STRING 
70251: ST_TO_ADDR
// animal := CreateHuman ;
70252: LD_ADDR_VAR 0 12
70256: PUSH
70257: CALL_OW 44
70261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70262: LD_VAR 0 12
70266: PPUSH
70267: LD_VAR 0 8
70271: PPUSH
70272: LD_INT 0
70274: PPUSH
70275: CALL 72400 0 3
// end ;
70279: GO 70233
70281: POP
70282: POP
// if birds then
70283: LD_VAR 0 1
70287: IFFALSE 70354
// for i = 1 to birds do
70289: LD_ADDR_VAR 0 11
70293: PUSH
70294: DOUBLE
70295: LD_INT 1
70297: DEC
70298: ST_TO_ADDR
70299: LD_VAR 0 1
70303: PUSH
70304: FOR_TO
70305: IFFALSE 70352
// begin hc_class = 18 ;
70307: LD_ADDR_OWVAR 28
70311: PUSH
70312: LD_INT 18
70314: ST_TO_ADDR
// hc_gallery =  ;
70315: LD_ADDR_OWVAR 33
70319: PUSH
70320: LD_STRING 
70322: ST_TO_ADDR
// animal := CreateHuman ;
70323: LD_ADDR_VAR 0 12
70327: PUSH
70328: CALL_OW 44
70332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70333: LD_VAR 0 12
70337: PPUSH
70338: LD_VAR 0 8
70342: PPUSH
70343: LD_INT 0
70345: PPUSH
70346: CALL 72400 0 3
// end ;
70350: GO 70304
70352: POP
70353: POP
// if tigers then
70354: LD_VAR 0 2
70358: IFFALSE 70442
// for i = 1 to tigers do
70360: LD_ADDR_VAR 0 11
70364: PUSH
70365: DOUBLE
70366: LD_INT 1
70368: DEC
70369: ST_TO_ADDR
70370: LD_VAR 0 2
70374: PUSH
70375: FOR_TO
70376: IFFALSE 70440
// begin hc_class = class_tiger ;
70378: LD_ADDR_OWVAR 28
70382: PUSH
70383: LD_INT 14
70385: ST_TO_ADDR
// hc_gallery =  ;
70386: LD_ADDR_OWVAR 33
70390: PUSH
70391: LD_STRING 
70393: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70394: LD_ADDR_OWVAR 35
70398: PUSH
70399: LD_INT 7
70401: NEG
70402: PPUSH
70403: LD_INT 7
70405: PPUSH
70406: CALL_OW 12
70410: ST_TO_ADDR
// animal := CreateHuman ;
70411: LD_ADDR_VAR 0 12
70415: PUSH
70416: CALL_OW 44
70420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70421: LD_VAR 0 12
70425: PPUSH
70426: LD_VAR 0 8
70430: PPUSH
70431: LD_INT 0
70433: PPUSH
70434: CALL 72400 0 3
// end ;
70438: GO 70375
70440: POP
70441: POP
// if apemans then
70442: LD_VAR 0 3
70446: IFFALSE 70569
// for i = 1 to apemans do
70448: LD_ADDR_VAR 0 11
70452: PUSH
70453: DOUBLE
70454: LD_INT 1
70456: DEC
70457: ST_TO_ADDR
70458: LD_VAR 0 3
70462: PUSH
70463: FOR_TO
70464: IFFALSE 70567
// begin hc_class = class_apeman ;
70466: LD_ADDR_OWVAR 28
70470: PUSH
70471: LD_INT 12
70473: ST_TO_ADDR
// hc_gallery =  ;
70474: LD_ADDR_OWVAR 33
70478: PUSH
70479: LD_STRING 
70481: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70482: LD_ADDR_OWVAR 35
70486: PUSH
70487: LD_INT 2
70489: NEG
70490: PPUSH
70491: LD_INT 2
70493: PPUSH
70494: CALL_OW 12
70498: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70499: LD_ADDR_OWVAR 31
70503: PUSH
70504: LD_INT 1
70506: PPUSH
70507: LD_INT 3
70509: PPUSH
70510: CALL_OW 12
70514: PUSH
70515: LD_INT 1
70517: PPUSH
70518: LD_INT 3
70520: PPUSH
70521: CALL_OW 12
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: ST_TO_ADDR
// animal := CreateHuman ;
70538: LD_ADDR_VAR 0 12
70542: PUSH
70543: CALL_OW 44
70547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70548: LD_VAR 0 12
70552: PPUSH
70553: LD_VAR 0 8
70557: PPUSH
70558: LD_INT 0
70560: PPUSH
70561: CALL 72400 0 3
// end ;
70565: GO 70463
70567: POP
70568: POP
// if enchidnas then
70569: LD_VAR 0 4
70573: IFFALSE 70640
// for i = 1 to enchidnas do
70575: LD_ADDR_VAR 0 11
70579: PUSH
70580: DOUBLE
70581: LD_INT 1
70583: DEC
70584: ST_TO_ADDR
70585: LD_VAR 0 4
70589: PUSH
70590: FOR_TO
70591: IFFALSE 70638
// begin hc_class = 13 ;
70593: LD_ADDR_OWVAR 28
70597: PUSH
70598: LD_INT 13
70600: ST_TO_ADDR
// hc_gallery =  ;
70601: LD_ADDR_OWVAR 33
70605: PUSH
70606: LD_STRING 
70608: ST_TO_ADDR
// animal := CreateHuman ;
70609: LD_ADDR_VAR 0 12
70613: PUSH
70614: CALL_OW 44
70618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70619: LD_VAR 0 12
70623: PPUSH
70624: LD_VAR 0 8
70628: PPUSH
70629: LD_INT 0
70631: PPUSH
70632: CALL 72400 0 3
// end ;
70636: GO 70590
70638: POP
70639: POP
// if fishes then
70640: LD_VAR 0 7
70644: IFFALSE 70711
// for i = 1 to fishes do
70646: LD_ADDR_VAR 0 11
70650: PUSH
70651: DOUBLE
70652: LD_INT 1
70654: DEC
70655: ST_TO_ADDR
70656: LD_VAR 0 7
70660: PUSH
70661: FOR_TO
70662: IFFALSE 70709
// begin hc_class = 20 ;
70664: LD_ADDR_OWVAR 28
70668: PUSH
70669: LD_INT 20
70671: ST_TO_ADDR
// hc_gallery =  ;
70672: LD_ADDR_OWVAR 33
70676: PUSH
70677: LD_STRING 
70679: ST_TO_ADDR
// animal := CreateHuman ;
70680: LD_ADDR_VAR 0 12
70684: PUSH
70685: CALL_OW 44
70689: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70690: LD_VAR 0 12
70694: PPUSH
70695: LD_VAR 0 9
70699: PPUSH
70700: LD_INT 0
70702: PPUSH
70703: CALL 72400 0 3
// end ;
70707: GO 70661
70709: POP
70710: POP
// end ;
70711: LD_VAR 0 10
70715: RET
// export function WantHeal ( sci , unit ) ; begin
70716: LD_INT 0
70718: PPUSH
// if GetTaskList ( sci ) > 0 then
70719: LD_VAR 0 1
70723: PPUSH
70724: CALL_OW 437
70728: PUSH
70729: LD_INT 0
70731: GREATER
70732: IFFALSE 70802
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70734: LD_VAR 0 1
70738: PPUSH
70739: CALL_OW 437
70743: PUSH
70744: LD_INT 1
70746: ARRAY
70747: PUSH
70748: LD_INT 1
70750: ARRAY
70751: PUSH
70752: LD_STRING l
70754: EQUAL
70755: PUSH
70756: LD_VAR 0 1
70760: PPUSH
70761: CALL_OW 437
70765: PUSH
70766: LD_INT 1
70768: ARRAY
70769: PUSH
70770: LD_INT 4
70772: ARRAY
70773: PUSH
70774: LD_VAR 0 2
70778: EQUAL
70779: AND
70780: IFFALSE 70792
// result := true else
70782: LD_ADDR_VAR 0 3
70786: PUSH
70787: LD_INT 1
70789: ST_TO_ADDR
70790: GO 70800
// result := false ;
70792: LD_ADDR_VAR 0 3
70796: PUSH
70797: LD_INT 0
70799: ST_TO_ADDR
// end else
70800: GO 70810
// result := false ;
70802: LD_ADDR_VAR 0 3
70806: PUSH
70807: LD_INT 0
70809: ST_TO_ADDR
// end ;
70810: LD_VAR 0 3
70814: RET
// export function HealTarget ( sci ) ; begin
70815: LD_INT 0
70817: PPUSH
// if not sci then
70818: LD_VAR 0 1
70822: NOT
70823: IFFALSE 70827
// exit ;
70825: GO 70892
// result := 0 ;
70827: LD_ADDR_VAR 0 2
70831: PUSH
70832: LD_INT 0
70834: ST_TO_ADDR
// if GetTaskList ( sci ) then
70835: LD_VAR 0 1
70839: PPUSH
70840: CALL_OW 437
70844: IFFALSE 70892
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70846: LD_VAR 0 1
70850: PPUSH
70851: CALL_OW 437
70855: PUSH
70856: LD_INT 1
70858: ARRAY
70859: PUSH
70860: LD_INT 1
70862: ARRAY
70863: PUSH
70864: LD_STRING l
70866: EQUAL
70867: IFFALSE 70892
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70869: LD_ADDR_VAR 0 2
70873: PUSH
70874: LD_VAR 0 1
70878: PPUSH
70879: CALL_OW 437
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PUSH
70888: LD_INT 4
70890: ARRAY
70891: ST_TO_ADDR
// end ;
70892: LD_VAR 0 2
70896: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70897: LD_INT 0
70899: PPUSH
70900: PPUSH
70901: PPUSH
70902: PPUSH
// if not base_units then
70903: LD_VAR 0 1
70907: NOT
70908: IFFALSE 70912
// exit ;
70910: GO 70999
// result := false ;
70912: LD_ADDR_VAR 0 2
70916: PUSH
70917: LD_INT 0
70919: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70920: LD_ADDR_VAR 0 5
70924: PUSH
70925: LD_VAR 0 1
70929: PPUSH
70930: LD_INT 21
70932: PUSH
70933: LD_INT 3
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PPUSH
70940: CALL_OW 72
70944: ST_TO_ADDR
// if not tmp then
70945: LD_VAR 0 5
70949: NOT
70950: IFFALSE 70954
// exit ;
70952: GO 70999
// for i in tmp do
70954: LD_ADDR_VAR 0 3
70958: PUSH
70959: LD_VAR 0 5
70963: PUSH
70964: FOR_IN
70965: IFFALSE 70997
// begin result := EnemyInRange ( i , 22 ) ;
70967: LD_ADDR_VAR 0 2
70971: PUSH
70972: LD_VAR 0 3
70976: PPUSH
70977: LD_INT 22
70979: PPUSH
70980: CALL 69235 0 2
70984: ST_TO_ADDR
// if result then
70985: LD_VAR 0 2
70989: IFFALSE 70995
// exit ;
70991: POP
70992: POP
70993: GO 70999
// end ;
70995: GO 70964
70997: POP
70998: POP
// end ;
70999: LD_VAR 0 2
71003: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71004: LD_INT 0
71006: PPUSH
71007: PPUSH
// if not units then
71008: LD_VAR 0 1
71012: NOT
71013: IFFALSE 71017
// exit ;
71015: GO 71087
// result := [ ] ;
71017: LD_ADDR_VAR 0 3
71021: PUSH
71022: EMPTY
71023: ST_TO_ADDR
// for i in units do
71024: LD_ADDR_VAR 0 4
71028: PUSH
71029: LD_VAR 0 1
71033: PUSH
71034: FOR_IN
71035: IFFALSE 71085
// if GetTag ( i ) = tag then
71037: LD_VAR 0 4
71041: PPUSH
71042: CALL_OW 110
71046: PUSH
71047: LD_VAR 0 2
71051: EQUAL
71052: IFFALSE 71083
// result := Replace ( result , result + 1 , i ) ;
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_VAR 0 3
71063: PPUSH
71064: LD_VAR 0 3
71068: PUSH
71069: LD_INT 1
71071: PLUS
71072: PPUSH
71073: LD_VAR 0 4
71077: PPUSH
71078: CALL_OW 1
71082: ST_TO_ADDR
71083: GO 71034
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 3
71091: RET
// export function IsDriver ( un ) ; begin
71092: LD_INT 0
71094: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71095: LD_ADDR_VAR 0 2
71099: PUSH
71100: LD_VAR 0 1
71104: PUSH
71105: LD_INT 55
71107: PUSH
71108: EMPTY
71109: LIST
71110: PPUSH
71111: CALL_OW 69
71115: IN
71116: ST_TO_ADDR
// end ;
71117: LD_VAR 0 2
71121: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71122: LD_INT 0
71124: PPUSH
71125: PPUSH
// list := [ ] ;
71126: LD_ADDR_VAR 0 5
71130: PUSH
71131: EMPTY
71132: ST_TO_ADDR
// case d of 0 :
71133: LD_VAR 0 3
71137: PUSH
71138: LD_INT 0
71140: DOUBLE
71141: EQUAL
71142: IFTRUE 71146
71144: GO 71279
71146: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71147: LD_ADDR_VAR 0 5
71151: PUSH
71152: LD_VAR 0 1
71156: PUSH
71157: LD_INT 4
71159: MINUS
71160: PUSH
71161: LD_VAR 0 2
71165: PUSH
71166: LD_INT 4
71168: MINUS
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: LIST
71177: PUSH
71178: LD_VAR 0 1
71182: PUSH
71183: LD_INT 3
71185: MINUS
71186: PUSH
71187: LD_VAR 0 2
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: LD_VAR 0 1
71204: PUSH
71205: LD_INT 4
71207: PLUS
71208: PUSH
71209: LD_VAR 0 2
71213: PUSH
71214: LD_INT 4
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: LIST
71221: PUSH
71222: LD_VAR 0 1
71226: PUSH
71227: LD_INT 3
71229: PLUS
71230: PUSH
71231: LD_VAR 0 2
71235: PUSH
71236: LD_INT 3
71238: PLUS
71239: PUSH
71240: LD_INT 5
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: PUSH
71248: LD_VAR 0 1
71252: PUSH
71253: LD_VAR 0 2
71257: PUSH
71258: LD_INT 4
71260: PLUS
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: ST_TO_ADDR
// end ; 1 :
71277: GO 71977
71279: LD_INT 1
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71287
71285: GO 71420
71287: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71288: LD_ADDR_VAR 0 5
71292: PUSH
71293: LD_VAR 0 1
71297: PUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_INT 4
71305: MINUS
71306: PUSH
71307: LD_INT 3
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: LIST
71314: PUSH
71315: LD_VAR 0 1
71319: PUSH
71320: LD_INT 3
71322: MINUS
71323: PUSH
71324: LD_VAR 0 2
71328: PUSH
71329: LD_INT 3
71331: MINUS
71332: PUSH
71333: LD_INT 2
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: LIST
71340: PUSH
71341: LD_VAR 0 1
71345: PUSH
71346: LD_INT 4
71348: MINUS
71349: PUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: PUSH
71363: LD_VAR 0 1
71367: PUSH
71368: LD_VAR 0 2
71372: PUSH
71373: LD_INT 3
71375: PLUS
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: PUSH
71385: LD_VAR 0 1
71389: PUSH
71390: LD_INT 4
71392: PLUS
71393: PUSH
71394: LD_VAR 0 2
71398: PUSH
71399: LD_INT 4
71401: PLUS
71402: PUSH
71403: LD_INT 5
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: LIST
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: ST_TO_ADDR
// end ; 2 :
71418: GO 71977
71420: LD_INT 2
71422: DOUBLE
71423: EQUAL
71424: IFTRUE 71428
71426: GO 71557
71428: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71429: LD_ADDR_VAR 0 5
71433: PUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_VAR 0 2
71443: PUSH
71444: LD_INT 3
71446: MINUS
71447: PUSH
71448: LD_INT 3
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: LIST
71455: PUSH
71456: LD_VAR 0 1
71460: PUSH
71461: LD_INT 4
71463: PLUS
71464: PUSH
71465: LD_VAR 0 2
71469: PUSH
71470: LD_INT 4
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: PUSH
71478: LD_VAR 0 1
71482: PUSH
71483: LD_VAR 0 2
71487: PUSH
71488: LD_INT 4
71490: PLUS
71491: PUSH
71492: LD_INT 0
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: LIST
71499: PUSH
71500: LD_VAR 0 1
71504: PUSH
71505: LD_INT 3
71507: MINUS
71508: PUSH
71509: LD_VAR 0 2
71513: PUSH
71514: LD_INT 1
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: LIST
71521: PUSH
71522: LD_VAR 0 1
71526: PUSH
71527: LD_INT 4
71529: MINUS
71530: PUSH
71531: LD_VAR 0 2
71535: PUSH
71536: LD_INT 4
71538: MINUS
71539: PUSH
71540: LD_INT 2
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: LIST
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: ST_TO_ADDR
// end ; 3 :
71555: GO 71977
71557: LD_INT 3
71559: DOUBLE
71560: EQUAL
71561: IFTRUE 71565
71563: GO 71698
71565: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71566: LD_ADDR_VAR 0 5
71570: PUSH
71571: LD_VAR 0 1
71575: PUSH
71576: LD_INT 3
71578: PLUS
71579: PUSH
71580: LD_VAR 0 2
71584: PUSH
71585: LD_INT 4
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: LIST
71592: PUSH
71593: LD_VAR 0 1
71597: PUSH
71598: LD_INT 4
71600: PLUS
71601: PUSH
71602: LD_VAR 0 2
71606: PUSH
71607: LD_INT 4
71609: PLUS
71610: PUSH
71611: LD_INT 5
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: LIST
71618: PUSH
71619: LD_VAR 0 1
71623: PUSH
71624: LD_INT 4
71626: MINUS
71627: PUSH
71628: LD_VAR 0 2
71632: PUSH
71633: LD_INT 1
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: PUSH
71641: LD_VAR 0 1
71645: PUSH
71646: LD_VAR 0 2
71650: PUSH
71651: LD_INT 4
71653: MINUS
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: LIST
71662: PUSH
71663: LD_VAR 0 1
71667: PUSH
71668: LD_INT 3
71670: MINUS
71671: PUSH
71672: LD_VAR 0 2
71676: PUSH
71677: LD_INT 3
71679: MINUS
71680: PUSH
71681: LD_INT 2
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: LIST
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: ST_TO_ADDR
// end ; 4 :
71696: GO 71977
71698: LD_INT 4
71700: DOUBLE
71701: EQUAL
71702: IFTRUE 71706
71704: GO 71839
71706: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71707: LD_ADDR_VAR 0 5
71711: PUSH
71712: LD_VAR 0 1
71716: PUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_INT 4
71724: PLUS
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: PUSH
71734: LD_VAR 0 1
71738: PUSH
71739: LD_INT 3
71741: PLUS
71742: PUSH
71743: LD_VAR 0 2
71747: PUSH
71748: LD_INT 3
71750: PLUS
71751: PUSH
71752: LD_INT 5
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: LIST
71759: PUSH
71760: LD_VAR 0 1
71764: PUSH
71765: LD_INT 4
71767: PLUS
71768: PUSH
71769: LD_VAR 0 2
71773: PUSH
71774: LD_INT 4
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: PUSH
71782: LD_VAR 0 1
71786: PUSH
71787: LD_VAR 0 2
71791: PUSH
71792: LD_INT 3
71794: MINUS
71795: PUSH
71796: LD_INT 3
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: LIST
71803: PUSH
71804: LD_VAR 0 1
71808: PUSH
71809: LD_INT 4
71811: MINUS
71812: PUSH
71813: LD_VAR 0 2
71817: PUSH
71818: LD_INT 4
71820: MINUS
71821: PUSH
71822: LD_INT 2
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: LIST
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: ST_TO_ADDR
// end ; 5 :
71837: GO 71977
71839: LD_INT 5
71841: DOUBLE
71842: EQUAL
71843: IFTRUE 71847
71845: GO 71976
71847: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71848: LD_ADDR_VAR 0 5
71852: PUSH
71853: LD_VAR 0 1
71857: PUSH
71858: LD_INT 4
71860: MINUS
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 1
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: PUSH
71875: LD_VAR 0 1
71879: PUSH
71880: LD_VAR 0 2
71884: PUSH
71885: LD_INT 4
71887: MINUS
71888: PUSH
71889: LD_INT 3
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: PUSH
71897: LD_VAR 0 1
71901: PUSH
71902: LD_INT 4
71904: PLUS
71905: PUSH
71906: LD_VAR 0 2
71910: PUSH
71911: LD_INT 4
71913: PLUS
71914: PUSH
71915: LD_INT 5
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: PUSH
71923: LD_VAR 0 1
71927: PUSH
71928: LD_INT 3
71930: PLUS
71931: PUSH
71932: LD_VAR 0 2
71936: PUSH
71937: LD_INT 4
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: PUSH
71945: LD_VAR 0 1
71949: PUSH
71950: LD_VAR 0 2
71954: PUSH
71955: LD_INT 3
71957: PLUS
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: LIST
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: ST_TO_ADDR
// end ; end ;
71974: GO 71977
71976: POP
// result := list ;
71977: LD_ADDR_VAR 0 4
71981: PUSH
71982: LD_VAR 0 5
71986: ST_TO_ADDR
// end ;
71987: LD_VAR 0 4
71991: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71992: LD_INT 0
71994: PPUSH
71995: PPUSH
71996: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71997: LD_VAR 0 1
72001: NOT
72002: PUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: LD_INT 2
72013: PUSH
72014: LD_INT 3
72016: PUSH
72017: LD_INT 4
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: IN
72026: NOT
72027: OR
72028: IFFALSE 72032
// exit ;
72030: GO 72124
// tmp := [ ] ;
72032: LD_ADDR_VAR 0 5
72036: PUSH
72037: EMPTY
72038: ST_TO_ADDR
// for i in units do
72039: LD_ADDR_VAR 0 4
72043: PUSH
72044: LD_VAR 0 1
72048: PUSH
72049: FOR_IN
72050: IFFALSE 72093
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72052: LD_ADDR_VAR 0 5
72056: PUSH
72057: LD_VAR 0 5
72061: PPUSH
72062: LD_VAR 0 5
72066: PUSH
72067: LD_INT 1
72069: PLUS
72070: PPUSH
72071: LD_VAR 0 4
72075: PPUSH
72076: LD_VAR 0 2
72080: PPUSH
72081: CALL_OW 259
72085: PPUSH
72086: CALL_OW 2
72090: ST_TO_ADDR
72091: GO 72049
72093: POP
72094: POP
// if not tmp then
72095: LD_VAR 0 5
72099: NOT
72100: IFFALSE 72104
// exit ;
72102: GO 72124
// result := SortListByListDesc ( units , tmp ) ;
72104: LD_ADDR_VAR 0 3
72108: PUSH
72109: LD_VAR 0 1
72113: PPUSH
72114: LD_VAR 0 5
72118: PPUSH
72119: CALL_OW 77
72123: ST_TO_ADDR
// end ;
72124: LD_VAR 0 3
72128: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72129: LD_INT 0
72131: PPUSH
72132: PPUSH
72133: PPUSH
// result := false ;
72134: LD_ADDR_VAR 0 3
72138: PUSH
72139: LD_INT 0
72141: ST_TO_ADDR
// x := GetX ( building ) ;
72142: LD_ADDR_VAR 0 4
72146: PUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: CALL_OW 250
72156: ST_TO_ADDR
// y := GetY ( building ) ;
72157: LD_ADDR_VAR 0 5
72161: PUSH
72162: LD_VAR 0 2
72166: PPUSH
72167: CALL_OW 251
72171: ST_TO_ADDR
// if not building or not x or not y then
72172: LD_VAR 0 2
72176: NOT
72177: PUSH
72178: LD_VAR 0 4
72182: NOT
72183: OR
72184: PUSH
72185: LD_VAR 0 5
72189: NOT
72190: OR
72191: IFFALSE 72195
// exit ;
72193: GO 72287
// if GetTaskList ( unit ) then
72195: LD_VAR 0 1
72199: PPUSH
72200: CALL_OW 437
72204: IFFALSE 72287
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72206: LD_STRING e
72208: PUSH
72209: LD_VAR 0 1
72213: PPUSH
72214: CALL_OW 437
72218: PUSH
72219: LD_INT 1
72221: ARRAY
72222: PUSH
72223: LD_INT 1
72225: ARRAY
72226: EQUAL
72227: PUSH
72228: LD_VAR 0 4
72232: PUSH
72233: LD_VAR 0 1
72237: PPUSH
72238: CALL_OW 437
72242: PUSH
72243: LD_INT 1
72245: ARRAY
72246: PUSH
72247: LD_INT 2
72249: ARRAY
72250: EQUAL
72251: AND
72252: PUSH
72253: LD_VAR 0 5
72257: PUSH
72258: LD_VAR 0 1
72262: PPUSH
72263: CALL_OW 437
72267: PUSH
72268: LD_INT 1
72270: ARRAY
72271: PUSH
72272: LD_INT 3
72274: ARRAY
72275: EQUAL
72276: AND
72277: IFFALSE 72287
// result := true end ;
72279: LD_ADDR_VAR 0 3
72283: PUSH
72284: LD_INT 1
72286: ST_TO_ADDR
// end ;
72287: LD_VAR 0 3
72291: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72292: LD_INT 0
72294: PPUSH
// result := false ;
72295: LD_ADDR_VAR 0 4
72299: PUSH
72300: LD_INT 0
72302: ST_TO_ADDR
// if GetTaskList ( unit ) then
72303: LD_VAR 0 1
72307: PPUSH
72308: CALL_OW 437
72312: IFFALSE 72395
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72314: LD_STRING M
72316: PUSH
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 437
72326: PUSH
72327: LD_INT 1
72329: ARRAY
72330: PUSH
72331: LD_INT 1
72333: ARRAY
72334: EQUAL
72335: PUSH
72336: LD_VAR 0 2
72340: PUSH
72341: LD_VAR 0 1
72345: PPUSH
72346: CALL_OW 437
72350: PUSH
72351: LD_INT 1
72353: ARRAY
72354: PUSH
72355: LD_INT 2
72357: ARRAY
72358: EQUAL
72359: AND
72360: PUSH
72361: LD_VAR 0 3
72365: PUSH
72366: LD_VAR 0 1
72370: PPUSH
72371: CALL_OW 437
72375: PUSH
72376: LD_INT 1
72378: ARRAY
72379: PUSH
72380: LD_INT 3
72382: ARRAY
72383: EQUAL
72384: AND
72385: IFFALSE 72395
// result := true ;
72387: LD_ADDR_VAR 0 4
72391: PUSH
72392: LD_INT 1
72394: ST_TO_ADDR
// end ; end ;
72395: LD_VAR 0 4
72399: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72400: LD_INT 0
72402: PPUSH
72403: PPUSH
72404: PPUSH
72405: PPUSH
// if not unit or not area then
72406: LD_VAR 0 1
72410: NOT
72411: PUSH
72412: LD_VAR 0 2
72416: NOT
72417: OR
72418: IFFALSE 72422
// exit ;
72420: GO 72586
// tmp := AreaToList ( area , i ) ;
72422: LD_ADDR_VAR 0 6
72426: PUSH
72427: LD_VAR 0 2
72431: PPUSH
72432: LD_VAR 0 5
72436: PPUSH
72437: CALL_OW 517
72441: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72442: LD_ADDR_VAR 0 5
72446: PUSH
72447: DOUBLE
72448: LD_INT 1
72450: DEC
72451: ST_TO_ADDR
72452: LD_VAR 0 6
72456: PUSH
72457: LD_INT 1
72459: ARRAY
72460: PUSH
72461: FOR_TO
72462: IFFALSE 72584
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72464: LD_ADDR_VAR 0 7
72468: PUSH
72469: LD_VAR 0 6
72473: PUSH
72474: LD_INT 1
72476: ARRAY
72477: PUSH
72478: LD_VAR 0 5
72482: ARRAY
72483: PUSH
72484: LD_VAR 0 6
72488: PUSH
72489: LD_INT 2
72491: ARRAY
72492: PUSH
72493: LD_VAR 0 5
72497: ARRAY
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72503: LD_VAR 0 7
72507: PUSH
72508: LD_INT 1
72510: ARRAY
72511: PPUSH
72512: LD_VAR 0 7
72516: PUSH
72517: LD_INT 2
72519: ARRAY
72520: PPUSH
72521: CALL_OW 428
72525: PUSH
72526: LD_INT 0
72528: EQUAL
72529: IFFALSE 72582
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72531: LD_VAR 0 1
72535: PPUSH
72536: LD_VAR 0 7
72540: PUSH
72541: LD_INT 1
72543: ARRAY
72544: PPUSH
72545: LD_VAR 0 7
72549: PUSH
72550: LD_INT 2
72552: ARRAY
72553: PPUSH
72554: LD_VAR 0 3
72558: PPUSH
72559: CALL_OW 48
// result := IsPlaced ( unit ) ;
72563: LD_ADDR_VAR 0 4
72567: PUSH
72568: LD_VAR 0 1
72572: PPUSH
72573: CALL_OW 305
72577: ST_TO_ADDR
// exit ;
72578: POP
72579: POP
72580: GO 72586
// end ; end ;
72582: GO 72461
72584: POP
72585: POP
// end ;
72586: LD_VAR 0 4
72590: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72591: LD_INT 0
72593: PPUSH
72594: PPUSH
72595: PPUSH
// if not side or side > 8 then
72596: LD_VAR 0 1
72600: NOT
72601: PUSH
72602: LD_VAR 0 1
72606: PUSH
72607: LD_INT 8
72609: GREATER
72610: OR
72611: IFFALSE 72615
// exit ;
72613: GO 72802
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72615: LD_ADDR_VAR 0 4
72619: PUSH
72620: LD_INT 22
72622: PUSH
72623: LD_VAR 0 1
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 21
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PPUSH
72646: CALL_OW 69
72650: ST_TO_ADDR
// if not tmp then
72651: LD_VAR 0 4
72655: NOT
72656: IFFALSE 72660
// exit ;
72658: GO 72802
// enable_addtolog := true ;
72660: LD_ADDR_OWVAR 81
72664: PUSH
72665: LD_INT 1
72667: ST_TO_ADDR
// AddToLog ( [ ) ;
72668: LD_STRING [
72670: PPUSH
72671: CALL_OW 561
// for i in tmp do
72675: LD_ADDR_VAR 0 3
72679: PUSH
72680: LD_VAR 0 4
72684: PUSH
72685: FOR_IN
72686: IFFALSE 72793
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72688: LD_STRING [
72690: PUSH
72691: LD_VAR 0 3
72695: PPUSH
72696: CALL_OW 266
72700: STR
72701: PUSH
72702: LD_STRING , 
72704: STR
72705: PUSH
72706: LD_VAR 0 3
72710: PPUSH
72711: CALL_OW 250
72715: STR
72716: PUSH
72717: LD_STRING , 
72719: STR
72720: PUSH
72721: LD_VAR 0 3
72725: PPUSH
72726: CALL_OW 251
72730: STR
72731: PUSH
72732: LD_STRING , 
72734: STR
72735: PUSH
72736: LD_VAR 0 3
72740: PPUSH
72741: CALL_OW 254
72745: STR
72746: PUSH
72747: LD_STRING , 
72749: STR
72750: PUSH
72751: LD_VAR 0 3
72755: PPUSH
72756: LD_INT 1
72758: PPUSH
72759: CALL_OW 268
72763: STR
72764: PUSH
72765: LD_STRING , 
72767: STR
72768: PUSH
72769: LD_VAR 0 3
72773: PPUSH
72774: LD_INT 2
72776: PPUSH
72777: CALL_OW 268
72781: STR
72782: PUSH
72783: LD_STRING ],
72785: STR
72786: PPUSH
72787: CALL_OW 561
// end ;
72791: GO 72685
72793: POP
72794: POP
// AddToLog ( ]; ) ;
72795: LD_STRING ];
72797: PPUSH
72798: CALL_OW 561
// end ;
72802: LD_VAR 0 2
72806: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72807: LD_INT 0
72809: PPUSH
72810: PPUSH
72811: PPUSH
72812: PPUSH
72813: PPUSH
// if not area or not rate or not max then
72814: LD_VAR 0 1
72818: NOT
72819: PUSH
72820: LD_VAR 0 2
72824: NOT
72825: OR
72826: PUSH
72827: LD_VAR 0 4
72831: NOT
72832: OR
72833: IFFALSE 72837
// exit ;
72835: GO 73029
// while 1 do
72837: LD_INT 1
72839: IFFALSE 73029
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72841: LD_ADDR_VAR 0 9
72845: PUSH
72846: LD_VAR 0 1
72850: PPUSH
72851: LD_INT 1
72853: PPUSH
72854: CALL_OW 287
72858: PUSH
72859: LD_INT 10
72861: MUL
72862: ST_TO_ADDR
// r := rate / 10 ;
72863: LD_ADDR_VAR 0 7
72867: PUSH
72868: LD_VAR 0 2
72872: PUSH
72873: LD_INT 10
72875: DIVREAL
72876: ST_TO_ADDR
// time := 1 1$00 ;
72877: LD_ADDR_VAR 0 8
72881: PUSH
72882: LD_INT 2100
72884: ST_TO_ADDR
// if amount < min then
72885: LD_VAR 0 9
72889: PUSH
72890: LD_VAR 0 3
72894: LESS
72895: IFFALSE 72913
// r := r * 2 else
72897: LD_ADDR_VAR 0 7
72901: PUSH
72902: LD_VAR 0 7
72906: PUSH
72907: LD_INT 2
72909: MUL
72910: ST_TO_ADDR
72911: GO 72939
// if amount > max then
72913: LD_VAR 0 9
72917: PUSH
72918: LD_VAR 0 4
72922: GREATER
72923: IFFALSE 72939
// r := r / 2 ;
72925: LD_ADDR_VAR 0 7
72929: PUSH
72930: LD_VAR 0 7
72934: PUSH
72935: LD_INT 2
72937: DIVREAL
72938: ST_TO_ADDR
// time := time / r ;
72939: LD_ADDR_VAR 0 8
72943: PUSH
72944: LD_VAR 0 8
72948: PUSH
72949: LD_VAR 0 7
72953: DIVREAL
72954: ST_TO_ADDR
// if time < 0 then
72955: LD_VAR 0 8
72959: PUSH
72960: LD_INT 0
72962: LESS
72963: IFFALSE 72980
// time := time * - 1 ;
72965: LD_ADDR_VAR 0 8
72969: PUSH
72970: LD_VAR 0 8
72974: PUSH
72975: LD_INT 1
72977: NEG
72978: MUL
72979: ST_TO_ADDR
// wait ( time ) ;
72980: LD_VAR 0 8
72984: PPUSH
72985: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72989: LD_INT 35
72991: PPUSH
72992: LD_INT 875
72994: PPUSH
72995: CALL_OW 12
72999: PPUSH
73000: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73004: LD_INT 1
73006: PPUSH
73007: LD_INT 5
73009: PPUSH
73010: CALL_OW 12
73014: PPUSH
73015: LD_VAR 0 1
73019: PPUSH
73020: LD_INT 1
73022: PPUSH
73023: CALL_OW 55
// end ;
73027: GO 72837
// end ;
73029: LD_VAR 0 5
73033: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73034: LD_INT 0
73036: PPUSH
73037: PPUSH
73038: PPUSH
73039: PPUSH
73040: PPUSH
73041: PPUSH
73042: PPUSH
73043: PPUSH
// if not turrets or not factories then
73044: LD_VAR 0 1
73048: NOT
73049: PUSH
73050: LD_VAR 0 2
73054: NOT
73055: OR
73056: IFFALSE 73060
// exit ;
73058: GO 73367
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73060: LD_ADDR_VAR 0 10
73064: PUSH
73065: LD_INT 5
73067: PUSH
73068: LD_INT 6
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 2
73077: PUSH
73078: LD_INT 4
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 3
73087: PUSH
73088: LD_INT 5
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 24
73102: PUSH
73103: LD_INT 25
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 23
73112: PUSH
73113: LD_INT 27
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 42
73126: PUSH
73127: LD_INT 43
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 44
73136: PUSH
73137: LD_INT 46
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 45
73146: PUSH
73147: LD_INT 47
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: LIST
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: LIST
73163: ST_TO_ADDR
// result := [ ] ;
73164: LD_ADDR_VAR 0 3
73168: PUSH
73169: EMPTY
73170: ST_TO_ADDR
// for i in turrets do
73171: LD_ADDR_VAR 0 4
73175: PUSH
73176: LD_VAR 0 1
73180: PUSH
73181: FOR_IN
73182: IFFALSE 73365
// begin nat := GetNation ( i ) ;
73184: LD_ADDR_VAR 0 7
73188: PUSH
73189: LD_VAR 0 4
73193: PPUSH
73194: CALL_OW 248
73198: ST_TO_ADDR
// weapon := 0 ;
73199: LD_ADDR_VAR 0 8
73203: PUSH
73204: LD_INT 0
73206: ST_TO_ADDR
// if not nat then
73207: LD_VAR 0 7
73211: NOT
73212: IFFALSE 73216
// continue ;
73214: GO 73181
// for j in list [ nat ] do
73216: LD_ADDR_VAR 0 5
73220: PUSH
73221: LD_VAR 0 10
73225: PUSH
73226: LD_VAR 0 7
73230: ARRAY
73231: PUSH
73232: FOR_IN
73233: IFFALSE 73274
// if GetBWeapon ( i ) = j [ 1 ] then
73235: LD_VAR 0 4
73239: PPUSH
73240: CALL_OW 269
73244: PUSH
73245: LD_VAR 0 5
73249: PUSH
73250: LD_INT 1
73252: ARRAY
73253: EQUAL
73254: IFFALSE 73272
// begin weapon := j [ 2 ] ;
73256: LD_ADDR_VAR 0 8
73260: PUSH
73261: LD_VAR 0 5
73265: PUSH
73266: LD_INT 2
73268: ARRAY
73269: ST_TO_ADDR
// break ;
73270: GO 73274
// end ;
73272: GO 73232
73274: POP
73275: POP
// if not weapon then
73276: LD_VAR 0 8
73280: NOT
73281: IFFALSE 73285
// continue ;
73283: GO 73181
// for k in factories do
73285: LD_ADDR_VAR 0 6
73289: PUSH
73290: LD_VAR 0 2
73294: PUSH
73295: FOR_IN
73296: IFFALSE 73361
// begin weapons := AvailableWeaponList ( k ) ;
73298: LD_ADDR_VAR 0 9
73302: PUSH
73303: LD_VAR 0 6
73307: PPUSH
73308: CALL_OW 478
73312: ST_TO_ADDR
// if not weapons then
73313: LD_VAR 0 9
73317: NOT
73318: IFFALSE 73322
// continue ;
73320: GO 73295
// if weapon in weapons then
73322: LD_VAR 0 8
73326: PUSH
73327: LD_VAR 0 9
73331: IN
73332: IFFALSE 73359
// begin result := [ i , weapon ] ;
73334: LD_ADDR_VAR 0 3
73338: PUSH
73339: LD_VAR 0 4
73343: PUSH
73344: LD_VAR 0 8
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: ST_TO_ADDR
// exit ;
73353: POP
73354: POP
73355: POP
73356: POP
73357: GO 73367
// end ; end ;
73359: GO 73295
73361: POP
73362: POP
// end ;
73363: GO 73181
73365: POP
73366: POP
// end ;
73367: LD_VAR 0 3
73371: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73372: LD_INT 0
73374: PPUSH
// if not side or side > 8 then
73375: LD_VAR 0 3
73379: NOT
73380: PUSH
73381: LD_VAR 0 3
73385: PUSH
73386: LD_INT 8
73388: GREATER
73389: OR
73390: IFFALSE 73394
// exit ;
73392: GO 73453
// if not range then
73394: LD_VAR 0 4
73398: NOT
73399: IFFALSE 73410
// range := - 12 ;
73401: LD_ADDR_VAR 0 4
73405: PUSH
73406: LD_INT 12
73408: NEG
73409: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73410: LD_VAR 0 1
73414: PPUSH
73415: LD_VAR 0 2
73419: PPUSH
73420: LD_VAR 0 3
73424: PPUSH
73425: LD_VAR 0 4
73429: PPUSH
73430: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73434: LD_VAR 0 1
73438: PPUSH
73439: LD_VAR 0 2
73443: PPUSH
73444: LD_VAR 0 3
73448: PPUSH
73449: CALL_OW 331
// end ;
73453: LD_VAR 0 5
73457: RET
// export function Video ( mode ) ; begin
73458: LD_INT 0
73460: PPUSH
// ingame_video = mode ;
73461: LD_ADDR_OWVAR 52
73465: PUSH
73466: LD_VAR 0 1
73470: ST_TO_ADDR
// interface_hidden = mode ;
73471: LD_ADDR_OWVAR 54
73475: PUSH
73476: LD_VAR 0 1
73480: ST_TO_ADDR
// end ;
73481: LD_VAR 0 2
73485: RET
// export function Join ( array , element ) ; begin
73486: LD_INT 0
73488: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: LD_VAR 0 1
73498: PPUSH
73499: LD_VAR 0 1
73503: PUSH
73504: LD_INT 1
73506: PLUS
73507: PPUSH
73508: LD_VAR 0 2
73512: PPUSH
73513: CALL_OW 1
73517: ST_TO_ADDR
// end ;
73518: LD_VAR 0 3
73522: RET
// export function JoinUnion ( array , element ) ; begin
73523: LD_INT 0
73525: PPUSH
// result := array union element ;
73526: LD_ADDR_VAR 0 3
73530: PUSH
73531: LD_VAR 0 1
73535: PUSH
73536: LD_VAR 0 2
73540: UNION
73541: ST_TO_ADDR
// end ;
73542: LD_VAR 0 3
73546: RET
// export function GetBehemoths ( side ) ; begin
73547: LD_INT 0
73549: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73550: LD_ADDR_VAR 0 2
73554: PUSH
73555: LD_INT 22
73557: PUSH
73558: LD_VAR 0 1
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 31
73569: PUSH
73570: LD_INT 25
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PPUSH
73581: CALL_OW 69
73585: ST_TO_ADDR
// end ;
73586: LD_VAR 0 2
73590: RET
// export function Shuffle ( array ) ; var i , index ; begin
73591: LD_INT 0
73593: PPUSH
73594: PPUSH
73595: PPUSH
// result := [ ] ;
73596: LD_ADDR_VAR 0 2
73600: PUSH
73601: EMPTY
73602: ST_TO_ADDR
// if not array then
73603: LD_VAR 0 1
73607: NOT
73608: IFFALSE 73612
// exit ;
73610: GO 73711
// Randomize ;
73612: CALL_OW 10
// for i = array downto 1 do
73616: LD_ADDR_VAR 0 3
73620: PUSH
73621: DOUBLE
73622: LD_VAR 0 1
73626: INC
73627: ST_TO_ADDR
73628: LD_INT 1
73630: PUSH
73631: FOR_DOWNTO
73632: IFFALSE 73709
// begin index := rand ( 1 , array ) ;
73634: LD_ADDR_VAR 0 4
73638: PUSH
73639: LD_INT 1
73641: PPUSH
73642: LD_VAR 0 1
73646: PPUSH
73647: CALL_OW 12
73651: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73652: LD_ADDR_VAR 0 2
73656: PUSH
73657: LD_VAR 0 2
73661: PPUSH
73662: LD_VAR 0 2
73666: PUSH
73667: LD_INT 1
73669: PLUS
73670: PPUSH
73671: LD_VAR 0 1
73675: PUSH
73676: LD_VAR 0 4
73680: ARRAY
73681: PPUSH
73682: CALL_OW 2
73686: ST_TO_ADDR
// array := Delete ( array , index ) ;
73687: LD_ADDR_VAR 0 1
73691: PUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: LD_VAR 0 4
73701: PPUSH
73702: CALL_OW 3
73706: ST_TO_ADDR
// end ;
73707: GO 73631
73709: POP
73710: POP
// end ;
73711: LD_VAR 0 2
73715: RET
// export function GetBaseMaterials ( base ) ; begin
73716: LD_INT 0
73718: PPUSH
// result := [ 0 , 0 , 0 ] ;
73719: LD_ADDR_VAR 0 2
73723: PUSH
73724: LD_INT 0
73726: PUSH
73727: LD_INT 0
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: LIST
73737: ST_TO_ADDR
// if not base then
73738: LD_VAR 0 1
73742: NOT
73743: IFFALSE 73747
// exit ;
73745: GO 73796
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73747: LD_ADDR_VAR 0 2
73751: PUSH
73752: LD_VAR 0 1
73756: PPUSH
73757: LD_INT 1
73759: PPUSH
73760: CALL_OW 275
73764: PUSH
73765: LD_VAR 0 1
73769: PPUSH
73770: LD_INT 2
73772: PPUSH
73773: CALL_OW 275
73777: PUSH
73778: LD_VAR 0 1
73782: PPUSH
73783: LD_INT 3
73785: PPUSH
73786: CALL_OW 275
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: LIST
73795: ST_TO_ADDR
// end ;
73796: LD_VAR 0 2
73800: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73801: LD_INT 0
73803: PPUSH
73804: PPUSH
// result := array ;
73805: LD_ADDR_VAR 0 3
73809: PUSH
73810: LD_VAR 0 1
73814: ST_TO_ADDR
// if size > 0 then
73815: LD_VAR 0 2
73819: PUSH
73820: LD_INT 0
73822: GREATER
73823: IFFALSE 73869
// for i := array downto size do
73825: LD_ADDR_VAR 0 4
73829: PUSH
73830: DOUBLE
73831: LD_VAR 0 1
73835: INC
73836: ST_TO_ADDR
73837: LD_VAR 0 2
73841: PUSH
73842: FOR_DOWNTO
73843: IFFALSE 73867
// result := Delete ( result , result ) ;
73845: LD_ADDR_VAR 0 3
73849: PUSH
73850: LD_VAR 0 3
73854: PPUSH
73855: LD_VAR 0 3
73859: PPUSH
73860: CALL_OW 3
73864: ST_TO_ADDR
73865: GO 73842
73867: POP
73868: POP
// end ;
73869: LD_VAR 0 3
73873: RET
// export function ComExit ( unit ) ; var tmp ; begin
73874: LD_INT 0
73876: PPUSH
73877: PPUSH
// if not IsInUnit ( unit ) then
73878: LD_VAR 0 1
73882: PPUSH
73883: CALL_OW 310
73887: NOT
73888: IFFALSE 73892
// exit ;
73890: GO 73952
// tmp := IsInUnit ( unit ) ;
73892: LD_ADDR_VAR 0 3
73896: PUSH
73897: LD_VAR 0 1
73901: PPUSH
73902: CALL_OW 310
73906: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73907: LD_VAR 0 3
73911: PPUSH
73912: CALL_OW 247
73916: PUSH
73917: LD_INT 2
73919: EQUAL
73920: IFFALSE 73933
// ComExitVehicle ( unit ) else
73922: LD_VAR 0 1
73926: PPUSH
73927: CALL_OW 121
73931: GO 73942
// ComExitBuilding ( unit ) ;
73933: LD_VAR 0 1
73937: PPUSH
73938: CALL_OW 122
// result := tmp ;
73942: LD_ADDR_VAR 0 2
73946: PUSH
73947: LD_VAR 0 3
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 2
73956: RET
// export function ComExitAll ( units ) ; var i ; begin
73957: LD_INT 0
73959: PPUSH
73960: PPUSH
// if not units then
73961: LD_VAR 0 1
73965: NOT
73966: IFFALSE 73970
// exit ;
73968: GO 73996
// for i in units do
73970: LD_ADDR_VAR 0 3
73974: PUSH
73975: LD_VAR 0 1
73979: PUSH
73980: FOR_IN
73981: IFFALSE 73994
// ComExit ( i ) ;
73983: LD_VAR 0 3
73987: PPUSH
73988: CALL 73874 0 1
73992: GO 73980
73994: POP
73995: POP
// end ;
73996: LD_VAR 0 2
74000: RET
// export function ResetHc ; begin
74001: LD_INT 0
74003: PPUSH
// InitHc ;
74004: CALL_OW 19
// hc_importance := 0 ;
74008: LD_ADDR_OWVAR 32
74012: PUSH
74013: LD_INT 0
74015: ST_TO_ADDR
// end ;
74016: LD_VAR 0 1
74020: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74021: LD_INT 0
74023: PPUSH
74024: PPUSH
74025: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74026: LD_ADDR_VAR 0 6
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_VAR 0 3
74040: PLUS
74041: PUSH
74042: LD_INT 2
74044: DIV
74045: ST_TO_ADDR
// if _x < 0 then
74046: LD_VAR 0 6
74050: PUSH
74051: LD_INT 0
74053: LESS
74054: IFFALSE 74071
// _x := _x * - 1 ;
74056: LD_ADDR_VAR 0 6
74060: PUSH
74061: LD_VAR 0 6
74065: PUSH
74066: LD_INT 1
74068: NEG
74069: MUL
74070: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74071: LD_ADDR_VAR 0 7
74075: PUSH
74076: LD_VAR 0 2
74080: PUSH
74081: LD_VAR 0 4
74085: PLUS
74086: PUSH
74087: LD_INT 2
74089: DIV
74090: ST_TO_ADDR
// if _y < 0 then
74091: LD_VAR 0 7
74095: PUSH
74096: LD_INT 0
74098: LESS
74099: IFFALSE 74116
// _y := _y * - 1 ;
74101: LD_ADDR_VAR 0 7
74105: PUSH
74106: LD_VAR 0 7
74110: PUSH
74111: LD_INT 1
74113: NEG
74114: MUL
74115: ST_TO_ADDR
// result := [ _x , _y ] ;
74116: LD_ADDR_VAR 0 5
74120: PUSH
74121: LD_VAR 0 6
74125: PUSH
74126: LD_VAR 0 7
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: ST_TO_ADDR
// end ;
74135: LD_VAR 0 5
74139: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
74144: PPUSH
74145: PPUSH
// task := GetTaskList ( unit ) ;
74146: LD_ADDR_VAR 0 7
74150: PUSH
74151: LD_VAR 0 1
74155: PPUSH
74156: CALL_OW 437
74160: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74161: LD_VAR 0 7
74165: NOT
74166: PUSH
74167: LD_VAR 0 1
74171: PPUSH
74172: LD_VAR 0 2
74176: PPUSH
74177: CALL_OW 308
74181: NOT
74182: AND
74183: IFFALSE 74187
// exit ;
74185: GO 74305
// if IsInArea ( unit , area ) then
74187: LD_VAR 0 1
74191: PPUSH
74192: LD_VAR 0 2
74196: PPUSH
74197: CALL_OW 308
74201: IFFALSE 74219
// begin ComMoveToArea ( unit , goAway ) ;
74203: LD_VAR 0 1
74207: PPUSH
74208: LD_VAR 0 3
74212: PPUSH
74213: CALL_OW 113
// exit ;
74217: GO 74305
// end ; if task [ 1 ] [ 1 ] <> M then
74219: LD_VAR 0 7
74223: PUSH
74224: LD_INT 1
74226: ARRAY
74227: PUSH
74228: LD_INT 1
74230: ARRAY
74231: PUSH
74232: LD_STRING M
74234: NONEQUAL
74235: IFFALSE 74239
// exit ;
74237: GO 74305
// x := task [ 1 ] [ 2 ] ;
74239: LD_ADDR_VAR 0 5
74243: PUSH
74244: LD_VAR 0 7
74248: PUSH
74249: LD_INT 1
74251: ARRAY
74252: PUSH
74253: LD_INT 2
74255: ARRAY
74256: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74257: LD_ADDR_VAR 0 6
74261: PUSH
74262: LD_VAR 0 7
74266: PUSH
74267: LD_INT 1
74269: ARRAY
74270: PUSH
74271: LD_INT 3
74273: ARRAY
74274: ST_TO_ADDR
// if InArea ( x , y , area ) then
74275: LD_VAR 0 5
74279: PPUSH
74280: LD_VAR 0 6
74284: PPUSH
74285: LD_VAR 0 2
74289: PPUSH
74290: CALL_OW 309
74294: IFFALSE 74305
// ComStop ( unit ) ;
74296: LD_VAR 0 1
74300: PPUSH
74301: CALL_OW 141
// end ;
74305: LD_VAR 0 4
74309: RET
// export function Abs ( value ) ; begin
74310: LD_INT 0
74312: PPUSH
// result := value ;
74313: LD_ADDR_VAR 0 2
74317: PUSH
74318: LD_VAR 0 1
74322: ST_TO_ADDR
// if value < 0 then
74323: LD_VAR 0 1
74327: PUSH
74328: LD_INT 0
74330: LESS
74331: IFFALSE 74348
// result := value * - 1 ;
74333: LD_ADDR_VAR 0 2
74337: PUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_INT 1
74345: NEG
74346: MUL
74347: ST_TO_ADDR
// end ;
74348: LD_VAR 0 2
74352: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74353: LD_INT 0
74355: PPUSH
74356: PPUSH
74357: PPUSH
74358: PPUSH
74359: PPUSH
74360: PPUSH
74361: PPUSH
74362: PPUSH
// if not unit or not building then
74363: LD_VAR 0 1
74367: NOT
74368: PUSH
74369: LD_VAR 0 2
74373: NOT
74374: OR
74375: IFFALSE 74379
// exit ;
74377: GO 74605
// x := GetX ( building ) ;
74379: LD_ADDR_VAR 0 4
74383: PUSH
74384: LD_VAR 0 2
74388: PPUSH
74389: CALL_OW 250
74393: ST_TO_ADDR
// y := GetY ( building ) ;
74394: LD_ADDR_VAR 0 6
74398: PUSH
74399: LD_VAR 0 2
74403: PPUSH
74404: CALL_OW 251
74408: ST_TO_ADDR
// d := GetDir ( building ) ;
74409: LD_ADDR_VAR 0 8
74413: PUSH
74414: LD_VAR 0 2
74418: PPUSH
74419: CALL_OW 254
74423: ST_TO_ADDR
// r := 4 ;
74424: LD_ADDR_VAR 0 9
74428: PUSH
74429: LD_INT 4
74431: ST_TO_ADDR
// for i := 1 to 5 do
74432: LD_ADDR_VAR 0 10
74436: PUSH
74437: DOUBLE
74438: LD_INT 1
74440: DEC
74441: ST_TO_ADDR
74442: LD_INT 5
74444: PUSH
74445: FOR_TO
74446: IFFALSE 74603
// begin _x := ShiftX ( x , d , r + i ) ;
74448: LD_ADDR_VAR 0 5
74452: PUSH
74453: LD_VAR 0 4
74457: PPUSH
74458: LD_VAR 0 8
74462: PPUSH
74463: LD_VAR 0 9
74467: PUSH
74468: LD_VAR 0 10
74472: PLUS
74473: PPUSH
74474: CALL_OW 272
74478: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74479: LD_ADDR_VAR 0 7
74483: PUSH
74484: LD_VAR 0 6
74488: PPUSH
74489: LD_VAR 0 8
74493: PPUSH
74494: LD_VAR 0 9
74498: PUSH
74499: LD_VAR 0 10
74503: PLUS
74504: PPUSH
74505: CALL_OW 273
74509: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74510: LD_VAR 0 5
74514: PPUSH
74515: LD_VAR 0 7
74519: PPUSH
74520: CALL_OW 488
74524: PUSH
74525: LD_VAR 0 5
74529: PPUSH
74530: LD_VAR 0 7
74534: PPUSH
74535: CALL_OW 428
74539: PPUSH
74540: CALL_OW 247
74544: PUSH
74545: LD_INT 3
74547: PUSH
74548: LD_INT 2
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: IN
74555: NOT
74556: AND
74557: IFFALSE 74601
// begin ComMoveXY ( unit , _x , _y ) ;
74559: LD_VAR 0 1
74563: PPUSH
74564: LD_VAR 0 5
74568: PPUSH
74569: LD_VAR 0 7
74573: PPUSH
74574: CALL_OW 111
// result := [ _x , _y ] ;
74578: LD_ADDR_VAR 0 3
74582: PUSH
74583: LD_VAR 0 5
74587: PUSH
74588: LD_VAR 0 7
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: ST_TO_ADDR
// exit ;
74597: POP
74598: POP
74599: GO 74605
// end ; end ;
74601: GO 74445
74603: POP
74604: POP
// end ;
74605: LD_VAR 0 3
74609: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74610: LD_INT 0
74612: PPUSH
74613: PPUSH
74614: PPUSH
// result := 0 ;
74615: LD_ADDR_VAR 0 3
74619: PUSH
74620: LD_INT 0
74622: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74623: LD_VAR 0 1
74627: PUSH
74628: LD_INT 0
74630: LESS
74631: PUSH
74632: LD_VAR 0 1
74636: PUSH
74637: LD_INT 8
74639: GREATER
74640: OR
74641: PUSH
74642: LD_VAR 0 2
74646: PUSH
74647: LD_INT 0
74649: LESS
74650: OR
74651: PUSH
74652: LD_VAR 0 2
74656: PUSH
74657: LD_INT 8
74659: GREATER
74660: OR
74661: IFFALSE 74665
// exit ;
74663: GO 74740
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74665: LD_ADDR_VAR 0 4
74669: PUSH
74670: LD_INT 22
74672: PUSH
74673: LD_VAR 0 2
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PPUSH
74682: CALL_OW 69
74686: PUSH
74687: FOR_IN
74688: IFFALSE 74738
// begin un := UnitShoot ( i ) ;
74690: LD_ADDR_VAR 0 5
74694: PUSH
74695: LD_VAR 0 4
74699: PPUSH
74700: CALL_OW 504
74704: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74705: LD_VAR 0 5
74709: PPUSH
74710: CALL_OW 255
74714: PUSH
74715: LD_VAR 0 1
74719: EQUAL
74720: IFFALSE 74736
// begin result := un ;
74722: LD_ADDR_VAR 0 3
74726: PUSH
74727: LD_VAR 0 5
74731: ST_TO_ADDR
// exit ;
74732: POP
74733: POP
74734: GO 74740
// end ; end ;
74736: GO 74687
74738: POP
74739: POP
// end ;
74740: LD_VAR 0 3
74744: RET
// export function GetCargoBay ( units ) ; begin
74745: LD_INT 0
74747: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74748: LD_ADDR_VAR 0 2
74752: PUSH
74753: LD_VAR 0 1
74757: PPUSH
74758: LD_INT 2
74760: PUSH
74761: LD_INT 34
74763: PUSH
74764: LD_INT 12
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 34
74773: PUSH
74774: LD_INT 51
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 34
74783: PUSH
74784: LD_INT 32
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 34
74793: PUSH
74794: LD_EXP 137
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: PPUSH
74810: CALL_OW 72
74814: ST_TO_ADDR
// end ;
74815: LD_VAR 0 2
74819: RET
// export function Negate ( value ) ; begin
74820: LD_INT 0
74822: PPUSH
// result := not value ;
74823: LD_ADDR_VAR 0 2
74827: PUSH
74828: LD_VAR 0 1
74832: NOT
74833: ST_TO_ADDR
// end ;
74834: LD_VAR 0 2
74838: RET
// export function Inc ( value ) ; begin
74839: LD_INT 0
74841: PPUSH
// result := value + 1 ;
74842: LD_ADDR_VAR 0 2
74846: PUSH
74847: LD_VAR 0 1
74851: PUSH
74852: LD_INT 1
74854: PLUS
74855: ST_TO_ADDR
// end ;
74856: LD_VAR 0 2
74860: RET
// export function Dec ( value ) ; begin
74861: LD_INT 0
74863: PPUSH
// result := value - 1 ;
74864: LD_ADDR_VAR 0 2
74868: PUSH
74869: LD_VAR 0 1
74873: PUSH
74874: LD_INT 1
74876: MINUS
74877: ST_TO_ADDR
// end ;
74878: LD_VAR 0 2
74882: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74883: LD_INT 0
74885: PPUSH
74886: PPUSH
74887: PPUSH
74888: PPUSH
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74893: LD_VAR 0 1
74897: PPUSH
74898: LD_VAR 0 2
74902: PPUSH
74903: CALL_OW 488
74907: NOT
74908: PUSH
74909: LD_VAR 0 3
74913: PPUSH
74914: LD_VAR 0 4
74918: PPUSH
74919: CALL_OW 488
74923: NOT
74924: OR
74925: IFFALSE 74938
// begin result := - 1 ;
74927: LD_ADDR_VAR 0 5
74931: PUSH
74932: LD_INT 1
74934: NEG
74935: ST_TO_ADDR
// exit ;
74936: GO 75173
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74938: LD_ADDR_VAR 0 12
74942: PUSH
74943: LD_VAR 0 1
74947: PPUSH
74948: LD_VAR 0 2
74952: PPUSH
74953: LD_VAR 0 3
74957: PPUSH
74958: LD_VAR 0 4
74962: PPUSH
74963: CALL 74021 0 4
74967: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74968: LD_ADDR_VAR 0 11
74972: PUSH
74973: LD_VAR 0 1
74977: PPUSH
74978: LD_VAR 0 2
74982: PPUSH
74983: LD_VAR 0 12
74987: PUSH
74988: LD_INT 1
74990: ARRAY
74991: PPUSH
74992: LD_VAR 0 12
74996: PUSH
74997: LD_INT 2
74999: ARRAY
75000: PPUSH
75001: CALL_OW 298
75005: ST_TO_ADDR
// distance := 9999 ;
75006: LD_ADDR_VAR 0 10
75010: PUSH
75011: LD_INT 9999
75013: ST_TO_ADDR
// for i := 0 to 5 do
75014: LD_ADDR_VAR 0 6
75018: PUSH
75019: DOUBLE
75020: LD_INT 0
75022: DEC
75023: ST_TO_ADDR
75024: LD_INT 5
75026: PUSH
75027: FOR_TO
75028: IFFALSE 75171
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75030: LD_ADDR_VAR 0 7
75034: PUSH
75035: LD_VAR 0 1
75039: PPUSH
75040: LD_VAR 0 6
75044: PPUSH
75045: LD_VAR 0 11
75049: PPUSH
75050: CALL_OW 272
75054: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75055: LD_ADDR_VAR 0 8
75059: PUSH
75060: LD_VAR 0 2
75064: PPUSH
75065: LD_VAR 0 6
75069: PPUSH
75070: LD_VAR 0 11
75074: PPUSH
75075: CALL_OW 273
75079: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75080: LD_VAR 0 7
75084: PPUSH
75085: LD_VAR 0 8
75089: PPUSH
75090: CALL_OW 488
75094: NOT
75095: IFFALSE 75099
// continue ;
75097: GO 75027
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75099: LD_ADDR_VAR 0 9
75103: PUSH
75104: LD_VAR 0 12
75108: PUSH
75109: LD_INT 1
75111: ARRAY
75112: PPUSH
75113: LD_VAR 0 12
75117: PUSH
75118: LD_INT 2
75120: ARRAY
75121: PPUSH
75122: LD_VAR 0 7
75126: PPUSH
75127: LD_VAR 0 8
75131: PPUSH
75132: CALL_OW 298
75136: ST_TO_ADDR
// if tmp < distance then
75137: LD_VAR 0 9
75141: PUSH
75142: LD_VAR 0 10
75146: LESS
75147: IFFALSE 75169
// begin result := i ;
75149: LD_ADDR_VAR 0 5
75153: PUSH
75154: LD_VAR 0 6
75158: ST_TO_ADDR
// distance := tmp ;
75159: LD_ADDR_VAR 0 10
75163: PUSH
75164: LD_VAR 0 9
75168: ST_TO_ADDR
// end ; end ;
75169: GO 75027
75171: POP
75172: POP
// end ;
75173: LD_VAR 0 5
75177: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75178: LD_INT 0
75180: PPUSH
75181: PPUSH
// if not driver or not IsInUnit ( driver ) then
75182: LD_VAR 0 1
75186: NOT
75187: PUSH
75188: LD_VAR 0 1
75192: PPUSH
75193: CALL_OW 310
75197: NOT
75198: OR
75199: IFFALSE 75203
// exit ;
75201: GO 75293
// vehicle := IsInUnit ( driver ) ;
75203: LD_ADDR_VAR 0 3
75207: PUSH
75208: LD_VAR 0 1
75212: PPUSH
75213: CALL_OW 310
75217: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75218: LD_VAR 0 1
75222: PPUSH
75223: LD_STRING \
75225: PUSH
75226: LD_INT 0
75228: PUSH
75229: LD_INT 0
75231: PUSH
75232: LD_INT 0
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: LD_INT 0
75240: PUSH
75241: LD_INT 0
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: PUSH
75253: LD_STRING E
75255: PUSH
75256: LD_INT 0
75258: PUSH
75259: LD_INT 0
75261: PUSH
75262: LD_VAR 0 3
75266: PUSH
75267: LD_INT 0
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: LD_INT 0
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PPUSH
75289: CALL_OW 446
// end ;
75293: LD_VAR 0 2
75297: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75298: LD_INT 0
75300: PPUSH
75301: PPUSH
// if not driver or not IsInUnit ( driver ) then
75302: LD_VAR 0 1
75306: NOT
75307: PUSH
75308: LD_VAR 0 1
75312: PPUSH
75313: CALL_OW 310
75317: NOT
75318: OR
75319: IFFALSE 75323
// exit ;
75321: GO 75413
// vehicle := IsInUnit ( driver ) ;
75323: LD_ADDR_VAR 0 3
75327: PUSH
75328: LD_VAR 0 1
75332: PPUSH
75333: CALL_OW 310
75337: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75338: LD_VAR 0 1
75342: PPUSH
75343: LD_STRING \
75345: PUSH
75346: LD_INT 0
75348: PUSH
75349: LD_INT 0
75351: PUSH
75352: LD_INT 0
75354: PUSH
75355: LD_INT 0
75357: PUSH
75358: LD_INT 0
75360: PUSH
75361: LD_INT 0
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: PUSH
75373: LD_STRING E
75375: PUSH
75376: LD_INT 0
75378: PUSH
75379: LD_INT 0
75381: PUSH
75382: LD_VAR 0 3
75386: PUSH
75387: LD_INT 0
75389: PUSH
75390: LD_INT 0
75392: PUSH
75393: LD_INT 0
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PPUSH
75409: CALL_OW 447
// end ;
75413: LD_VAR 0 2
75417: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75418: LD_INT 0
75420: PPUSH
75421: PPUSH
75422: PPUSH
// tmp := [ ] ;
75423: LD_ADDR_VAR 0 5
75427: PUSH
75428: EMPTY
75429: ST_TO_ADDR
// for i in units do
75430: LD_ADDR_VAR 0 4
75434: PUSH
75435: LD_VAR 0 1
75439: PUSH
75440: FOR_IN
75441: IFFALSE 75479
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75443: LD_ADDR_VAR 0 5
75447: PUSH
75448: LD_VAR 0 5
75452: PPUSH
75453: LD_VAR 0 5
75457: PUSH
75458: LD_INT 1
75460: PLUS
75461: PPUSH
75462: LD_VAR 0 4
75466: PPUSH
75467: CALL_OW 256
75471: PPUSH
75472: CALL_OW 2
75476: ST_TO_ADDR
75477: GO 75440
75479: POP
75480: POP
// if not tmp then
75481: LD_VAR 0 5
75485: NOT
75486: IFFALSE 75490
// exit ;
75488: GO 75538
// if asc then
75490: LD_VAR 0 2
75494: IFFALSE 75518
// result := SortListByListAsc ( units , tmp ) else
75496: LD_ADDR_VAR 0 3
75500: PUSH
75501: LD_VAR 0 1
75505: PPUSH
75506: LD_VAR 0 5
75510: PPUSH
75511: CALL_OW 76
75515: ST_TO_ADDR
75516: GO 75538
// result := SortListByListDesc ( units , tmp ) ;
75518: LD_ADDR_VAR 0 3
75522: PUSH
75523: LD_VAR 0 1
75527: PPUSH
75528: LD_VAR 0 5
75532: PPUSH
75533: CALL_OW 77
75537: ST_TO_ADDR
// end ;
75538: LD_VAR 0 3
75542: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75543: LD_INT 0
75545: PPUSH
75546: PPUSH
// task := GetTaskList ( mech ) ;
75547: LD_ADDR_VAR 0 4
75551: PUSH
75552: LD_VAR 0 1
75556: PPUSH
75557: CALL_OW 437
75561: ST_TO_ADDR
// if not task then
75562: LD_VAR 0 4
75566: NOT
75567: IFFALSE 75571
// exit ;
75569: GO 75613
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75571: LD_ADDR_VAR 0 3
75575: PUSH
75576: LD_VAR 0 4
75580: PUSH
75581: LD_INT 1
75583: ARRAY
75584: PUSH
75585: LD_INT 1
75587: ARRAY
75588: PUSH
75589: LD_STRING r
75591: EQUAL
75592: PUSH
75593: LD_VAR 0 4
75597: PUSH
75598: LD_INT 1
75600: ARRAY
75601: PUSH
75602: LD_INT 4
75604: ARRAY
75605: PUSH
75606: LD_VAR 0 2
75610: EQUAL
75611: AND
75612: ST_TO_ADDR
// end ;
75613: LD_VAR 0 3
75617: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75618: LD_INT 0
75620: PPUSH
// SetDir ( unit , d ) ;
75621: LD_VAR 0 1
75625: PPUSH
75626: LD_VAR 0 4
75630: PPUSH
75631: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75635: LD_VAR 0 1
75639: PPUSH
75640: LD_VAR 0 2
75644: PPUSH
75645: LD_VAR 0 3
75649: PPUSH
75650: LD_VAR 0 5
75654: PPUSH
75655: CALL_OW 48
// end ;
75659: LD_VAR 0 6
75663: RET
// export function ToNaturalNumber ( number ) ; begin
75664: LD_INT 0
75666: PPUSH
// result := number div 1 ;
75667: LD_ADDR_VAR 0 2
75671: PUSH
75672: LD_VAR 0 1
75676: PUSH
75677: LD_INT 1
75679: DIV
75680: ST_TO_ADDR
// if number < 0 then
75681: LD_VAR 0 1
75685: PUSH
75686: LD_INT 0
75688: LESS
75689: IFFALSE 75699
// result := 0 ;
75691: LD_ADDR_VAR 0 2
75695: PUSH
75696: LD_INT 0
75698: ST_TO_ADDR
// end ;
75699: LD_VAR 0 2
75703: RET
// export function SortByClass ( units , class ) ; var un ; begin
75704: LD_INT 0
75706: PPUSH
75707: PPUSH
// if not units or not class then
75708: LD_VAR 0 1
75712: NOT
75713: PUSH
75714: LD_VAR 0 2
75718: NOT
75719: OR
75720: IFFALSE 75724
// exit ;
75722: GO 75819
// result := [ ] ;
75724: LD_ADDR_VAR 0 3
75728: PUSH
75729: EMPTY
75730: ST_TO_ADDR
// for un in units do
75731: LD_ADDR_VAR 0 4
75735: PUSH
75736: LD_VAR 0 1
75740: PUSH
75741: FOR_IN
75742: IFFALSE 75817
// if GetClass ( un ) = class then
75744: LD_VAR 0 4
75748: PPUSH
75749: CALL_OW 257
75753: PUSH
75754: LD_VAR 0 2
75758: EQUAL
75759: IFFALSE 75786
// result := Insert ( result , 1 , un ) else
75761: LD_ADDR_VAR 0 3
75765: PUSH
75766: LD_VAR 0 3
75770: PPUSH
75771: LD_INT 1
75773: PPUSH
75774: LD_VAR 0 4
75778: PPUSH
75779: CALL_OW 2
75783: ST_TO_ADDR
75784: GO 75815
// result := Replace ( result , result + 1 , un ) ;
75786: LD_ADDR_VAR 0 3
75790: PUSH
75791: LD_VAR 0 3
75795: PPUSH
75796: LD_VAR 0 3
75800: PUSH
75801: LD_INT 1
75803: PLUS
75804: PPUSH
75805: LD_VAR 0 4
75809: PPUSH
75810: CALL_OW 1
75814: ST_TO_ADDR
75815: GO 75741
75817: POP
75818: POP
// end ;
75819: LD_VAR 0 3
75823: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75824: LD_INT 0
75826: PPUSH
75827: PPUSH
75828: PPUSH
75829: PPUSH
75830: PPUSH
75831: PPUSH
75832: PPUSH
// result := [ ] ;
75833: LD_ADDR_VAR 0 4
75837: PUSH
75838: EMPTY
75839: ST_TO_ADDR
// if x - r < 0 then
75840: LD_VAR 0 1
75844: PUSH
75845: LD_VAR 0 3
75849: MINUS
75850: PUSH
75851: LD_INT 0
75853: LESS
75854: IFFALSE 75866
// min_x := 0 else
75856: LD_ADDR_VAR 0 8
75860: PUSH
75861: LD_INT 0
75863: ST_TO_ADDR
75864: GO 75882
// min_x := x - r ;
75866: LD_ADDR_VAR 0 8
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: LD_VAR 0 3
75880: MINUS
75881: ST_TO_ADDR
// if y - r < 0 then
75882: LD_VAR 0 2
75886: PUSH
75887: LD_VAR 0 3
75891: MINUS
75892: PUSH
75893: LD_INT 0
75895: LESS
75896: IFFALSE 75908
// min_y := 0 else
75898: LD_ADDR_VAR 0 7
75902: PUSH
75903: LD_INT 0
75905: ST_TO_ADDR
75906: GO 75924
// min_y := y - r ;
75908: LD_ADDR_VAR 0 7
75912: PUSH
75913: LD_VAR 0 2
75917: PUSH
75918: LD_VAR 0 3
75922: MINUS
75923: ST_TO_ADDR
// max_x := x + r ;
75924: LD_ADDR_VAR 0 9
75928: PUSH
75929: LD_VAR 0 1
75933: PUSH
75934: LD_VAR 0 3
75938: PLUS
75939: ST_TO_ADDR
// max_y := y + r ;
75940: LD_ADDR_VAR 0 10
75944: PUSH
75945: LD_VAR 0 2
75949: PUSH
75950: LD_VAR 0 3
75954: PLUS
75955: ST_TO_ADDR
// for _x = min_x to max_x do
75956: LD_ADDR_VAR 0 5
75960: PUSH
75961: DOUBLE
75962: LD_VAR 0 8
75966: DEC
75967: ST_TO_ADDR
75968: LD_VAR 0 9
75972: PUSH
75973: FOR_TO
75974: IFFALSE 76075
// for _y = min_y to max_y do
75976: LD_ADDR_VAR 0 6
75980: PUSH
75981: DOUBLE
75982: LD_VAR 0 7
75986: DEC
75987: ST_TO_ADDR
75988: LD_VAR 0 10
75992: PUSH
75993: FOR_TO
75994: IFFALSE 76071
// begin if not ValidHex ( _x , _y ) then
75996: LD_VAR 0 5
76000: PPUSH
76001: LD_VAR 0 6
76005: PPUSH
76006: CALL_OW 488
76010: NOT
76011: IFFALSE 76015
// continue ;
76013: GO 75993
// if GetResourceTypeXY ( _x , _y ) then
76015: LD_VAR 0 5
76019: PPUSH
76020: LD_VAR 0 6
76024: PPUSH
76025: CALL_OW 283
76029: IFFALSE 76069
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76031: LD_ADDR_VAR 0 4
76035: PUSH
76036: LD_VAR 0 4
76040: PPUSH
76041: LD_VAR 0 4
76045: PUSH
76046: LD_INT 1
76048: PLUS
76049: PPUSH
76050: LD_VAR 0 5
76054: PUSH
76055: LD_VAR 0 6
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PPUSH
76064: CALL_OW 1
76068: ST_TO_ADDR
// end ;
76069: GO 75993
76071: POP
76072: POP
76073: GO 75973
76075: POP
76076: POP
// end ;
76077: LD_VAR 0 4
76081: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76082: LD_INT 0
76084: PPUSH
76085: PPUSH
76086: PPUSH
76087: PPUSH
76088: PPUSH
76089: PPUSH
76090: PPUSH
76091: PPUSH
// if not units then
76092: LD_VAR 0 1
76096: NOT
76097: IFFALSE 76101
// exit ;
76099: GO 76526
// result := UnitFilter ( units , [ f_ok ] ) ;
76101: LD_ADDR_VAR 0 3
76105: PUSH
76106: LD_VAR 0 1
76110: PPUSH
76111: LD_INT 50
76113: PUSH
76114: EMPTY
76115: LIST
76116: PPUSH
76117: CALL_OW 72
76121: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76122: LD_ADDR_VAR 0 8
76126: PUSH
76127: LD_VAR 0 1
76131: PUSH
76132: LD_INT 1
76134: ARRAY
76135: PPUSH
76136: CALL_OW 255
76140: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
76141: LD_ADDR_VAR 0 10
76145: PUSH
76146: LD_INT 29
76148: PUSH
76149: LD_EXP 140
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: ST_TO_ADDR
// if not result then
76158: LD_VAR 0 3
76162: NOT
76163: IFFALSE 76167
// exit ;
76165: GO 76526
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76167: LD_ADDR_VAR 0 5
76171: PUSH
76172: LD_INT 81
76174: PUSH
76175: LD_VAR 0 8
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PPUSH
76184: CALL_OW 69
76188: ST_TO_ADDR
// for i in result do
76189: LD_ADDR_VAR 0 4
76193: PUSH
76194: LD_VAR 0 3
76198: PUSH
76199: FOR_IN
76200: IFFALSE 76524
// begin tag := GetTag ( i ) + 1 ;
76202: LD_ADDR_VAR 0 9
76206: PUSH
76207: LD_VAR 0 4
76211: PPUSH
76212: CALL_OW 110
76216: PUSH
76217: LD_INT 1
76219: PLUS
76220: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76221: LD_ADDR_VAR 0 7
76225: PUSH
76226: LD_VAR 0 4
76230: PPUSH
76231: CALL_OW 250
76235: PPUSH
76236: LD_VAR 0 4
76240: PPUSH
76241: CALL_OW 251
76245: PPUSH
76246: LD_INT 6
76248: PPUSH
76249: CALL 75824 0 3
76253: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76254: LD_VAR 0 7
76258: PUSH
76259: LD_VAR 0 4
76263: PPUSH
76264: CALL_OW 264
76268: PUSH
76269: LD_VAR 0 10
76273: IN
76274: NOT
76275: AND
76276: IFFALSE 76315
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76278: LD_VAR 0 4
76282: PPUSH
76283: LD_VAR 0 7
76287: PUSH
76288: LD_INT 1
76290: ARRAY
76291: PUSH
76292: LD_INT 1
76294: ARRAY
76295: PPUSH
76296: LD_VAR 0 7
76300: PUSH
76301: LD_INT 1
76303: ARRAY
76304: PUSH
76305: LD_INT 2
76307: ARRAY
76308: PPUSH
76309: CALL_OW 116
76313: GO 76522
// if path > tag then
76315: LD_VAR 0 2
76319: PUSH
76320: LD_VAR 0 9
76324: GREATER
76325: IFFALSE 76492
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76327: LD_ADDR_VAR 0 6
76331: PUSH
76332: LD_VAR 0 5
76336: PPUSH
76337: LD_INT 91
76339: PUSH
76340: LD_VAR 0 4
76344: PUSH
76345: LD_INT 12
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: LIST
76352: PPUSH
76353: CALL_OW 72
76357: ST_TO_ADDR
// if nearEnemy then
76358: LD_VAR 0 6
76362: IFFALSE 76390
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76364: LD_VAR 0 4
76368: PPUSH
76369: LD_VAR 0 6
76373: PPUSH
76374: LD_VAR 0 4
76378: PPUSH
76379: CALL_OW 74
76383: PPUSH
76384: CALL_OW 115
76388: GO 76490
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76390: LD_VAR 0 4
76394: PPUSH
76395: LD_VAR 0 2
76399: PUSH
76400: LD_VAR 0 9
76404: ARRAY
76405: PUSH
76406: LD_INT 1
76408: ARRAY
76409: PPUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_VAR 0 9
76419: ARRAY
76420: PUSH
76421: LD_INT 2
76423: ARRAY
76424: PPUSH
76425: CALL_OW 297
76429: PUSH
76430: LD_INT 6
76432: GREATER
76433: IFFALSE 76476
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76435: LD_VAR 0 4
76439: PPUSH
76440: LD_VAR 0 2
76444: PUSH
76445: LD_VAR 0 9
76449: ARRAY
76450: PUSH
76451: LD_INT 1
76453: ARRAY
76454: PPUSH
76455: LD_VAR 0 2
76459: PUSH
76460: LD_VAR 0 9
76464: ARRAY
76465: PUSH
76466: LD_INT 2
76468: ARRAY
76469: PPUSH
76470: CALL_OW 114
76474: GO 76490
// SetTag ( i , tag ) ;
76476: LD_VAR 0 4
76480: PPUSH
76481: LD_VAR 0 9
76485: PPUSH
76486: CALL_OW 109
// end else
76490: GO 76522
// if enemy then
76492: LD_VAR 0 5
76496: IFFALSE 76522
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76498: LD_VAR 0 4
76502: PPUSH
76503: LD_VAR 0 5
76507: PPUSH
76508: LD_VAR 0 4
76512: PPUSH
76513: CALL_OW 74
76517: PPUSH
76518: CALL_OW 115
// end ;
76522: GO 76199
76524: POP
76525: POP
// end ;
76526: LD_VAR 0 3
76530: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76531: LD_INT 0
76533: PPUSH
76534: PPUSH
76535: PPUSH
// if not unit or IsInUnit ( unit ) then
76536: LD_VAR 0 1
76540: NOT
76541: PUSH
76542: LD_VAR 0 1
76546: PPUSH
76547: CALL_OW 310
76551: OR
76552: IFFALSE 76556
// exit ;
76554: GO 76647
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76556: LD_ADDR_VAR 0 4
76560: PUSH
76561: LD_VAR 0 1
76565: PPUSH
76566: CALL_OW 250
76570: PPUSH
76571: LD_VAR 0 2
76575: PPUSH
76576: LD_INT 1
76578: PPUSH
76579: CALL_OW 272
76583: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76584: LD_ADDR_VAR 0 5
76588: PUSH
76589: LD_VAR 0 1
76593: PPUSH
76594: CALL_OW 251
76598: PPUSH
76599: LD_VAR 0 2
76603: PPUSH
76604: LD_INT 1
76606: PPUSH
76607: CALL_OW 273
76611: ST_TO_ADDR
// if ValidHex ( x , y ) then
76612: LD_VAR 0 4
76616: PPUSH
76617: LD_VAR 0 5
76621: PPUSH
76622: CALL_OW 488
76626: IFFALSE 76647
// ComTurnXY ( unit , x , y ) ;
76628: LD_VAR 0 1
76632: PPUSH
76633: LD_VAR 0 4
76637: PPUSH
76638: LD_VAR 0 5
76642: PPUSH
76643: CALL_OW 118
// end ;
76647: LD_VAR 0 3
76651: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76652: LD_INT 0
76654: PPUSH
76655: PPUSH
// result := false ;
76656: LD_ADDR_VAR 0 3
76660: PUSH
76661: LD_INT 0
76663: ST_TO_ADDR
// if not units then
76664: LD_VAR 0 2
76668: NOT
76669: IFFALSE 76673
// exit ;
76671: GO 76718
// for i in units do
76673: LD_ADDR_VAR 0 4
76677: PUSH
76678: LD_VAR 0 2
76682: PUSH
76683: FOR_IN
76684: IFFALSE 76716
// if See ( side , i ) then
76686: LD_VAR 0 1
76690: PPUSH
76691: LD_VAR 0 4
76695: PPUSH
76696: CALL_OW 292
76700: IFFALSE 76714
// begin result := true ;
76702: LD_ADDR_VAR 0 3
76706: PUSH
76707: LD_INT 1
76709: ST_TO_ADDR
// exit ;
76710: POP
76711: POP
76712: GO 76718
// end ;
76714: GO 76683
76716: POP
76717: POP
// end ;
76718: LD_VAR 0 3
76722: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76723: LD_INT 0
76725: PPUSH
76726: PPUSH
76727: PPUSH
76728: PPUSH
// if not unit or not points then
76729: LD_VAR 0 1
76733: NOT
76734: PUSH
76735: LD_VAR 0 2
76739: NOT
76740: OR
76741: IFFALSE 76745
// exit ;
76743: GO 76835
// dist := 99999 ;
76745: LD_ADDR_VAR 0 5
76749: PUSH
76750: LD_INT 99999
76752: ST_TO_ADDR
// for i in points do
76753: LD_ADDR_VAR 0 4
76757: PUSH
76758: LD_VAR 0 2
76762: PUSH
76763: FOR_IN
76764: IFFALSE 76833
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76766: LD_ADDR_VAR 0 6
76770: PUSH
76771: LD_VAR 0 1
76775: PPUSH
76776: LD_VAR 0 4
76780: PUSH
76781: LD_INT 1
76783: ARRAY
76784: PPUSH
76785: LD_VAR 0 4
76789: PUSH
76790: LD_INT 2
76792: ARRAY
76793: PPUSH
76794: CALL_OW 297
76798: ST_TO_ADDR
// if tmpDist < dist then
76799: LD_VAR 0 6
76803: PUSH
76804: LD_VAR 0 5
76808: LESS
76809: IFFALSE 76831
// begin result := i ;
76811: LD_ADDR_VAR 0 3
76815: PUSH
76816: LD_VAR 0 4
76820: ST_TO_ADDR
// dist := tmpDist ;
76821: LD_ADDR_VAR 0 5
76825: PUSH
76826: LD_VAR 0 6
76830: ST_TO_ADDR
// end ; end ;
76831: GO 76763
76833: POP
76834: POP
// end ;
76835: LD_VAR 0 3
76839: RET
