// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 248 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// canExitMap = false ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// arabianCanExitMap = false ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// namedBase = false ;
  96: LD_ADDR_EXP 8
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// startEvacuation = false ;
 104: LD_ADDR_EXP 7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// stealCargos = [ ] ;
 112: LD_ADDR_EXP 12
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// stealWarmCount = 0 ;
 119: LD_ADDR_EXP 11
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// evacuatedCargos = 0 ;
 127: LD_ADDR_EXP 9
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// canStealCargo = false ;
 135: LD_ADDR_EXP 10
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 143: LD_ADDR_EXP 14
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_contactBlock = false ;
 151: LD_ADDR_EXP 15
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// currentWave = 0 ;
 159: LD_ADDR_EXP 18
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// firstAttack = false ;
 167: LD_ADDR_EXP 17
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// saveGaydar = false ;
 175: LD_ADDR_EXP 19
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 183: LD_ADDR_EXP 20
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killedArabianUnits = 0 ;
 191: LD_ADDR_EXP 21
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// arabianKillers = 0 ;
 199: LD_ADDR_EXP 22
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// lostUnits = 0 ;
 207: LD_ADDR_EXP 23
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// enableAttacks = false ;
 215: LD_ADDR_EXP 16
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// PrepareRussians ;
 231: CALL 1497 0 0
// Nef_PrepareNature ;
 235: CALL 4053 0 0
// MissionIntro ;
 239: CALL 10001 0 0
// end ; end_of_file
 243: LD_VAR 0 1
 247: RET
// export function InitMapConfig ; begin
 248: LD_INT 0
 250: PPUSH
// BaseMapConfig ;
 251: CALL 264 0 0
// MissionMapConfig ;
 255: CALL 366 0 0
// end ;
 259: LD_VAR 0 1
 263: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 264: LD_INT 0
 266: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 267: LD_ADDR_EXP 25
 271: PUSH
 272: LD_INT 8
 274: PUSH
 275: LD_INT 12
 277: PUSH
 278: LD_INT 6
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_INT 0
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 294: LD_ADDR_EXP 26
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: LD_INT 2
 304: PUSH
 305: LD_INT 2
 307: PUSH
 308: LD_INT 2
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: LIST
 316: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: NEG
 325: PPUSH
 326: LD_INT 5
 328: PPUSH
 329: CALL_OW 12
 333: PUSH
 334: EMPTY
 335: LIST
 336: ST_TO_ADDR
// debugMode = 0 ;
 337: LD_ADDR_EXP 30
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// missionPrefix = 04_ ;
 345: LD_ADDR_EXP 28
 349: PUSH
 350: LD_STRING 04_
 352: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 353: LD_ADDR_EXP 29
 357: PUSH
 358: LD_STRING 03_
 360: ST_TO_ADDR
// end ;
 361: LD_VAR 0 1
 365: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 366: LD_INT 0
 368: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 369: LD_ADDR_EXP 31
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 3
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_OWVAR 67
 392: ARRAY
 393: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 394: LD_ADDR_EXP 32
 398: PUSH
 399: LD_INT 2
 401: NEG
 402: PUSH
 403: LD_INT 1
 405: NEG
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_OWVAR 67
 419: ARRAY
 420: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 421: LD_ADDR_EXP 33
 425: PUSH
 426: LD_INT 135
 428: PUSH
 429: LD_INT 8
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: PUSH
 436: LD_INT 135
 438: PUSH
 439: LD_INT 4
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 134
 448: PUSH
 449: LD_INT 19
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 132
 458: PUSH
 459: LD_INT 26
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: LD_INT 128
 468: PUSH
 469: LD_INT 31
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 123
 478: PUSH
 479: LD_INT 37
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 118
 488: PUSH
 489: LD_INT 45
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: LD_INT 112
 498: PUSH
 499: LD_INT 51
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 106
 508: PUSH
 509: LD_INT 57
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 99
 518: PUSH
 519: LD_INT 62
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 93
 528: PUSH
 529: LD_INT 67
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 86
 538: PUSH
 539: LD_INT 72
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 78
 548: PUSH
 549: LD_INT 75
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: LD_INT 71
 558: PUSH
 559: LD_INT 81
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 69
 568: PUSH
 569: LD_INT 88
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 71
 578: PUSH
 579: LD_INT 95
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 74
 588: PUSH
 589: LD_INT 103
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: PUSH
 596: LD_INT 80
 598: PUSH
 599: LD_INT 113
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: PUSH
 606: LD_INT 84
 608: PUSH
 609: LD_INT 121
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: LD_INT 89
 618: PUSH
 619: LD_INT 132
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: LD_INT 92
 628: PUSH
 629: LD_INT 142
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: PUSH
 636: LD_INT 93
 638: PUSH
 639: LD_INT 151
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PUSH
 646: LD_INT 91
 648: PUSH
 649: LD_INT 157
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 90
 658: PUSH
 659: LD_INT 163
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: LD_INT 93
 668: PUSH
 669: LD_INT 171
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PUSH
 676: LD_INT 92
 678: PUSH
 679: LD_INT 177
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 714: LD_ADDR_EXP 34
 718: PUSH
 719: LD_INT 135
 721: PUSH
 722: LD_INT 8
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 135
 731: PUSH
 732: LD_INT 4
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 134
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: LD_INT 132
 751: PUSH
 752: LD_INT 26
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: PUSH
 759: LD_INT 128
 761: PUSH
 762: LD_INT 31
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 123
 771: PUSH
 772: LD_INT 37
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: LD_INT 118
 781: PUSH
 782: LD_INT 45
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 112
 791: PUSH
 792: LD_INT 51
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 106
 801: PUSH
 802: LD_INT 57
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: LD_INT 99
 811: PUSH
 812: LD_INT 62
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 104
 821: PUSH
 822: LD_INT 71
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 110
 831: PUSH
 832: LD_INT 78
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: LD_INT 119
 841: PUSH
 842: LD_INT 88
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 128
 851: PUSH
 852: LD_INT 97
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 135
 861: PUSH
 862: LD_INT 106
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 141
 871: PUSH
 872: LD_INT 120
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: LD_INT 143
 881: PUSH
 882: LD_INT 132
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 143
 891: PUSH
 892: LD_INT 142
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 140
 901: PUSH
 902: LD_INT 149
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 132
 911: PUSH
 912: LD_INT 153
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 125
 921: PUSH
 922: LD_INT 155
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 115
 931: PUSH
 932: LD_INT 154
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 105
 941: PUSH
 942: LD_INT 153
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 93
 951: PUSH
 952: LD_INT 151
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 91
 961: PUSH
 962: LD_INT 157
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: PUSH
 969: LD_INT 90
 971: PUSH
 972: LD_INT 163
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 93
 981: PUSH
 982: LD_INT 171
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: LD_INT 92
 991: PUSH
 992: LD_INT 177
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1029: LD_ADDR_EXP 35
1033: PUSH
1034: LD_INT 40
1036: PUSH
1037: LD_INT 35
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1054: LD_ADDR_EXP 36
1058: PUSH
1059: LD_INT 50
1061: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1062: LD_ADDR_EXP 13
1066: PUSH
1067: LD_INT 21
1069: PUSH
1070: LD_INT 19
1072: PUSH
1073: LD_INT 17
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_OWVAR 67
1085: ARRAY
1086: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1087: LD_ADDR_EXP 37
1091: PUSH
1092: LD_INT 3
1094: PUSH
1095: LD_INT 4
1097: PUSH
1098: LD_INT 4
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_OWVAR 67
1110: ARRAY
1111: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1112: LD_ADDR_EXP 38
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: LD_INT 4
1122: PUSH
1123: LD_INT 4
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_OWVAR 67
1135: ARRAY
1136: ST_TO_ADDR
// arabianTroopsMin = 3 ;
1137: LD_ADDR_EXP 39
1141: PUSH
1142: LD_INT 3
1144: ST_TO_ADDR
// arabianTroopsMax = [ 5 , 6 , 7 ] [ Difficulty ] ;
1145: LD_ADDR_EXP 40
1149: PUSH
1150: LD_INT 5
1152: PUSH
1153: LD_INT 6
1155: PUSH
1156: LD_INT 7
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_OWVAR 67
1168: ARRAY
1169: ST_TO_ADDR
// end ;
1170: LD_VAR 0 1
1174: RET
// every 0 0$1 trigger debugMode do var i ;
1175: LD_EXP 30
1179: IFFALSE 1494
1181: GO 1183
1183: DISABLE
1184: LD_INT 0
1186: PPUSH
// begin enable ;
1187: ENABLE
// FogOff ( your_side ) ;
1188: LD_OWVAR 2
1192: PPUSH
1193: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1197: LD_ADDR_VAR 0 1
1201: PUSH
1202: LD_INT 22
1204: PUSH
1205: LD_OWVAR 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 21
1229: PUSH
1230: LD_INT 2
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PPUSH
1246: CALL_OW 69
1250: PUSH
1251: FOR_IN
1252: IFFALSE 1268
// SetLives ( i , 1000 ) ;
1254: LD_VAR 0 1
1258: PPUSH
1259: LD_INT 1000
1261: PPUSH
1262: CALL_OW 234
1266: GO 1251
1268: POP
1269: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1270: LD_ADDR_VAR 0 1
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_OWVAR 2
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 21
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PPUSH
1301: CALL_OW 69
1305: PUSH
1306: FOR_IN
1307: IFFALSE 1371
// begin SetSkill ( i , skill_combat , 10 ) ;
1309: LD_VAR 0 1
1313: PPUSH
1314: LD_INT 1
1316: PPUSH
1317: LD_INT 10
1319: PPUSH
1320: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_INT 2
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1339: LD_VAR 0 1
1343: PPUSH
1344: LD_INT 3
1346: PPUSH
1347: LD_INT 10
1349: PPUSH
1350: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1354: LD_VAR 0 1
1358: PPUSH
1359: LD_INT 4
1361: PPUSH
1362: LD_INT 10
1364: PPUSH
1365: CALL_OW 237
// end ;
1369: GO 1306
1371: POP
1372: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1373: LD_ADDR_VAR 0 1
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_OWVAR 2
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 2
1392: PUSH
1393: LD_INT 30
1395: PUSH
1396: LD_INT 0
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 30
1405: PUSH
1406: LD_INT 1
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: PUSH
1427: FOR_IN
1428: IFFALSE 1492
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1430: LD_VAR 0 1
1434: PPUSH
1435: CALL_OW 274
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: LD_INT 9999
1445: PPUSH
1446: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1450: LD_VAR 0 1
1454: PPUSH
1455: CALL_OW 274
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: LD_INT 9999
1465: PPUSH
1466: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1470: LD_VAR 0 1
1474: PPUSH
1475: CALL_OW 274
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 9999
1485: PPUSH
1486: CALL_OW 277
// end ;
1490: GO 1427
1492: POP
1493: POP
// end ; end_of_file
1494: PPOPN 1
1496: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export randomsToSave ; export function PrepareRussians ; begin
1497: LD_INT 0
1499: PPUSH
// randomsToSave = [ ] ;
1500: LD_ADDR_EXP 60
1504: PUSH
1505: EMPTY
1506: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1507: LD_ADDR_EXP 56
1511: PUSH
1512: EMPTY
1513: ST_TO_ADDR
// PrepareHeroes ;
1514: CALL 1523 0 0
// end ;
1518: LD_VAR 0 1
1522: RET
// function PrepareHeroes ; var i , current ; begin
1523: LD_INT 0
1525: PPUSH
1526: PPUSH
1527: PPUSH
// uc_side = 3 ;
1528: LD_ADDR_OWVAR 20
1532: PUSH
1533: LD_INT 3
1535: ST_TO_ADDR
// uc_nation = 3 ;
1536: LD_ADDR_OWVAR 21
1540: PUSH
1541: LD_INT 3
1543: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1544: LD_ADDR_EXP 41
1548: PUSH
1549: LD_STRING Burlak
1551: PPUSH
1552: LD_INT 1
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: CALL 9041 0 3
1562: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1563: LD_ADDR_EXP 42
1567: PUSH
1568: LD_STRING Gnyevko
1570: PPUSH
1571: LD_INT 1
1573: PPUSH
1574: LD_INT 3
1576: PPUSH
1577: CALL 9041 0 3
1581: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1582: LD_ADDR_EXP 44
1586: PUSH
1587: LD_STRING Kovalyuk
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 3
1595: PPUSH
1596: CALL 9041 0 3
1600: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1601: LD_ADDR_EXP 43
1605: PUSH
1606: LD_STRING Kirilenkova
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_INT 4
1614: PPUSH
1615: CALL 9041 0 3
1619: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1620: LD_ADDR_EXP 45
1624: PUSH
1625: LD_STRING Belkov
1627: PPUSH
1628: LD_INT 1
1630: PPUSH
1631: LD_INT 1
1633: PPUSH
1634: CALL 9041 0 3
1638: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1639: LD_ADDR_EXP 46
1643: PUSH
1644: LD_STRING Belkov2
1646: PPUSH
1647: LD_INT 1
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL 9041 0 3
1657: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1658: LD_ADDR_EXP 47
1662: PUSH
1663: LD_STRING Scholtze
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: LD_INT 4
1671: PPUSH
1672: CALL 9041 0 3
1676: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1677: LD_ADDR_EXP 51
1681: PUSH
1682: LD_STRING Popov
1684: PPUSH
1685: LD_INT 0
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL 9041 0 3
1695: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1696: LD_ADDR_EXP 52
1700: PUSH
1701: LD_STRING Platonov
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL 9041 0 3
1714: ST_TO_ADDR
// uc_side = 6 ;
1715: LD_ADDR_OWVAR 20
1719: PUSH
1720: LD_INT 6
1722: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1723: LD_ADDR_EXP 53
1727: PUSH
1728: LD_STRING Gaydar
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: LD_INT 0
1736: PPUSH
1737: CALL 9041 0 3
1741: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1742: LD_ADDR_EXP 48
1746: PUSH
1747: LD_STRING Kuzmov
1749: PPUSH
1750: LD_INT 0
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL 9041 0 3
1760: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1761: LD_EXP 48
1765: PPUSH
1766: LD_INT 109
1768: PPUSH
1769: LD_INT 108
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: CALL_OW 50
// ComHold ( Kuzmov ) ;
1782: LD_EXP 48
1786: PPUSH
1787: CALL_OW 140
// uc_side = 3 ;
1791: LD_ADDR_OWVAR 20
1795: PUSH
1796: LD_INT 3
1798: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1799: LD_EXP 41
1803: PUSH
1804: LD_EXP 42
1808: PUSH
1809: LD_EXP 43
1813: PUSH
1814: LD_EXP 44
1818: PUSH
1819: LD_EXP 45
1823: PUSH
1824: LD_EXP 46
1828: PUSH
1829: LD_EXP 47
1833: PUSH
1834: LD_EXP 51
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: PPUSH
1849: LD_INT 2
1851: PPUSH
1852: LD_INT 0
1854: PPUSH
1855: CALL 9124 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1859: LD_ADDR_EXP 49
1863: PUSH
1864: LD_STRING 03_other_survivors
1866: PPUSH
1867: CALL_OW 31
1871: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1872: LD_ADDR_EXP 50
1876: PUSH
1877: LD_STRING 03_other_kirov
1879: PPUSH
1880: CALL_OW 31
1884: ST_TO_ADDR
// for i in other_survivors do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: LD_EXP 49
1894: PUSH
1895: FOR_IN
1896: IFFALSE 1915
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1898: LD_VAR 0 2
1902: PPUSH
1903: LD_INT 2
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
1913: GO 1895
1915: POP
1916: POP
// for i in other_kirov_survivors do
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_EXP 50
1926: PUSH
1927: FOR_IN
1928: IFFALSE 1947
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1930: LD_VAR 0 2
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 49
1945: GO 1927
1947: POP
1948: POP
// PrepareSoldier ( sex_male , 1 ) ;
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: CALL_OW 381
// dialogRus = CreateHuman ;
1959: LD_ADDR_EXP 58
1963: PUSH
1964: CALL_OW 44
1968: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
1969: LD_EXP 49
1973: PUSH
1974: LD_EXP 50
1978: PLUS
1979: PUSH
1980: LD_EXP 42
1984: PUSH
1985: LD_EXP 43
1989: PUSH
1990: LD_EXP 44
1994: PUSH
1995: LD_EXP 45
1999: PUSH
2000: LD_EXP 46
2004: PUSH
2005: LD_EXP 47
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PLUS
2018: PUSH
2019: LD_INT 8
2021: LESS
2022: IFFALSE 2175
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_EXP 49
2033: PUSH
2034: LD_EXP 50
2038: PLUS
2039: PUSH
2040: LD_EXP 42
2044: PUSH
2045: LD_EXP 43
2049: PUSH
2050: LD_EXP 44
2054: PUSH
2055: LD_EXP 45
2059: PUSH
2060: LD_EXP 46
2064: PUSH
2065: LD_EXP 47
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PLUS
2078: ST_TO_ADDR
// current = 8 - current ;
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_INT 8
2086: PUSH
2087: LD_VAR 0 3
2091: MINUS
2092: ST_TO_ADDR
// for i := 1 to current do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_VAR 0 3
2107: PUSH
2108: FOR_TO
2109: IFFALSE 2173
// begin uc_nation = 3 ;
2111: LD_ADDR_OWVAR 21
2115: PUSH
2116: LD_INT 3
2118: ST_TO_ADDR
// uc_side = 6 ;
2119: LD_ADDR_OWVAR 20
2123: PUSH
2124: LD_INT 6
2126: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2127: LD_INT 0
2129: PPUSH
2130: LD_INT 1
2132: PPUSH
2133: LD_INT 4
2135: PPUSH
2136: CALL_OW 12
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 12
2151: PPUSH
2152: CALL_OW 380
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2156: CALL_OW 44
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 49
// end ;
2171: GO 2108
2173: POP
2174: POP
// end ; end ;
2175: LD_VAR 0 1
2179: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// rnd = rand ( 1 , 4 ) ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 1
2197: PPUSH
2198: LD_INT 4
2200: PPUSH
2201: CALL_OW 12
2205: ST_TO_ADDR
// uc_side = 6 ;
2206: LD_ADDR_OWVAR 20
2210: PUSH
2211: LD_INT 6
2213: ST_TO_ADDR
// uc_nation = 3 ;
2214: LD_ADDR_OWVAR 21
2218: PUSH
2219: LD_INT 3
2221: ST_TO_ADDR
// if rnd < 4 then
2222: LD_VAR 0 3
2226: PUSH
2227: LD_INT 4
2229: LESS
2230: IFFALSE 2606
// begin vc_chassis = ru_medium_wheeled ;
2232: LD_ADDR_OWVAR 37
2236: PUSH
2237: LD_INT 21
2239: ST_TO_ADDR
// vc_control = control_manual ;
2240: LD_ADDR_OWVAR 38
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// vc_engine = engine_combustion ;
2248: LD_ADDR_OWVAR 39
2252: PUSH
2253: LD_INT 1
2255: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2256: LD_ADDR_VAR 0 5
2260: PUSH
2261: LD_INT 1
2263: PPUSH
2264: LD_INT 100
2266: PPUSH
2267: CALL_OW 12
2271: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2272: LD_VAR 0 5
2276: PUSH
2277: LD_EXP 36
2281: PUSH
2282: LD_INT 1
2284: PLUS
2285: LESS
2286: IFFALSE 2298
// vc_weapon = ru_cargo_bay else
2288: LD_ADDR_OWVAR 40
2292: PUSH
2293: LD_INT 51
2295: ST_TO_ADDR
2296: GO 2329
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2298: LD_ADDR_OWVAR 40
2302: PUSH
2303: LD_INT 42
2305: PUSH
2306: LD_INT 43
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 1
2319: PPUSH
2320: LD_INT 3
2322: PPUSH
2323: CALL_OW 12
2327: ARRAY
2328: ST_TO_ADDR
// vehicle = CreateVehicle ;
2329: LD_ADDR_VAR 0 7
2333: PUSH
2334: CALL_OW 45
2338: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2339: LD_VAR 0 7
2343: PPUSH
2344: LD_INT 3
2346: PPUSH
2347: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2351: LD_VAR 0 7
2355: PPUSH
2356: LD_INT 3
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2366: LD_INT 0
2368: PPUSH
2369: LD_INT 1
2371: PPUSH
2372: LD_INT 4
2374: PPUSH
2375: CALL_OW 12
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: LD_INT 3
2385: PPUSH
2386: CALL_OW 12
2390: PPUSH
2391: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2395: CALL_OW 44
2399: PPUSH
2400: LD_VAR 0 7
2404: PPUSH
2405: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2409: LD_OWVAR 40
2413: PUSH
2414: LD_INT 51
2416: EQUAL
2417: IFFALSE 2434
// AddCargo ( vehicle , mat_cans , 100 ) ;
2419: LD_VAR 0 7
2423: PPUSH
2424: LD_INT 1
2426: PPUSH
2427: LD_INT 100
2429: PPUSH
2430: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2434: LD_VAR 0 7
2438: PPUSH
2439: LD_INT 500
2441: PPUSH
2442: LD_INT 1000
2444: PPUSH
2445: CALL_OW 12
2449: PPUSH
2450: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2454: LD_ADDR_VAR 0 3
2458: PUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 2
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// if rnd = 1 then
2470: LD_VAR 0 3
2474: PUSH
2475: LD_INT 1
2477: EQUAL
2478: IFFALSE 2543
// for i := 3 to russianCargoPath1 do
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: DOUBLE
2486: LD_INT 3
2488: DEC
2489: ST_TO_ADDR
2490: LD_EXP 33
2494: PUSH
2495: FOR_TO
2496: IFFALSE 2539
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2498: LD_VAR 0 7
2502: PPUSH
2503: LD_EXP 33
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PPUSH
2518: LD_EXP 33
2522: PUSH
2523: LD_VAR 0 2
2527: ARRAY
2528: PUSH
2529: LD_INT 2
2531: ARRAY
2532: PPUSH
2533: CALL_OW 171
2537: GO 2495
2539: POP
2540: POP
2541: GO 2604
// for i := 3 to russianCargoPath2 do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: DOUBLE
2549: LD_INT 3
2551: DEC
2552: ST_TO_ADDR
2553: LD_EXP 34
2557: PUSH
2558: FOR_TO
2559: IFFALSE 2602
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2561: LD_VAR 0 7
2565: PPUSH
2566: LD_EXP 34
2570: PUSH
2571: LD_VAR 0 2
2575: ARRAY
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: LD_EXP 34
2585: PUSH
2586: LD_VAR 0 2
2590: ARRAY
2591: PUSH
2592: LD_INT 2
2594: ARRAY
2595: PPUSH
2596: CALL_OW 171
2600: GO 2558
2602: POP
2603: POP
// end else
2604: GO 2945
// begin for i := 1 to rand ( 1 , 3 ) do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 3
2621: PPUSH
2622: CALL_OW 12
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2706
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2630: LD_INT 0
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: CALL_OW 12
2643: PPUSH
2644: LD_INT 2
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: CALL_OW 12
2654: PPUSH
2655: CALL_OW 380
// unit = CreateHuman ;
2659: LD_ADDR_VAR 0 6
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2669: LD_VAR 0 6
2673: PPUSH
2674: LD_INT 3
2676: PPUSH
2677: LD_INT 0
2679: PPUSH
2680: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
2684: LD_VAR 0 6
2688: PPUSH
2689: LD_INT 500
2691: PPUSH
2692: LD_INT 1000
2694: PPUSH
2695: CALL_OW 12
2699: PPUSH
2700: CALL_OW 234
// end ;
2704: GO 2627
2706: POP
2707: POP
// rnd2 = rand ( 1 , 2 ) ;
2708: LD_ADDR_VAR 0 4
2712: PUSH
2713: LD_INT 1
2715: PPUSH
2716: LD_INT 2
2718: PPUSH
2719: CALL_OW 12
2723: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
2724: LD_ADDR_VAR 0 8
2728: PUSH
2729: LD_INT 22
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 21
2741: PUSH
2742: LD_INT 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 56
2751: PUSH
2752: EMPTY
2753: LIST
2754: PUSH
2755: LD_INT 3
2757: PUSH
2758: LD_INT 60
2760: PUSH
2761: EMPTY
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: PPUSH
2774: CALL_OW 69
2778: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
2779: LD_ADDR_VAR 0 8
2783: PUSH
2784: LD_VAR 0 8
2788: PUSH
2789: LD_EXP 55
2793: DIFF
2794: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
2795: LD_ADDR_VAR 0 8
2799: PUSH
2800: LD_VAR 0 8
2804: PUSH
2805: LD_EXP 56
2809: DIFF
2810: ST_TO_ADDR
// if rnd2 = 1 then
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 1
2818: EQUAL
2819: IFFALSE 2884
// for i := 3 to russianCargoPath1 do
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: DOUBLE
2827: LD_INT 3
2829: DEC
2830: ST_TO_ADDR
2831: LD_EXP 33
2835: PUSH
2836: FOR_TO
2837: IFFALSE 2880
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2839: LD_VAR 0 8
2843: PPUSH
2844: LD_EXP 33
2848: PUSH
2849: LD_VAR 0 2
2853: ARRAY
2854: PUSH
2855: LD_INT 1
2857: ARRAY
2858: PPUSH
2859: LD_EXP 33
2863: PUSH
2864: LD_VAR 0 2
2868: ARRAY
2869: PUSH
2870: LD_INT 2
2872: ARRAY
2873: PPUSH
2874: CALL_OW 171
2878: GO 2836
2880: POP
2881: POP
2882: GO 2945
// for i := 3 to russianCargoPath2 do
2884: LD_ADDR_VAR 0 2
2888: PUSH
2889: DOUBLE
2890: LD_INT 3
2892: DEC
2893: ST_TO_ADDR
2894: LD_EXP 34
2898: PUSH
2899: FOR_TO
2900: IFFALSE 2943
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2902: LD_VAR 0 8
2906: PPUSH
2907: LD_EXP 34
2911: PUSH
2912: LD_VAR 0 2
2916: ARRAY
2917: PUSH
2918: LD_INT 1
2920: ARRAY
2921: PPUSH
2922: LD_EXP 34
2926: PUSH
2927: LD_VAR 0 2
2931: ARRAY
2932: PUSH
2933: LD_INT 2
2935: ARRAY
2936: PPUSH
2937: CALL_OW 171
2941: GO 2899
2943: POP
2944: POP
// end ; end ;
2945: LD_VAR 0 1
2949: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
2950: LD_INT 0
2952: PPUSH
2953: PPUSH
2954: PPUSH
// for i := 1 to 2 do
2955: LD_ADDR_VAR 0 2
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 2
2967: PUSH
2968: FOR_TO
2969: IFFALSE 3035
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
2971: LD_INT 0
2973: PPUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL_OW 12
2987: PPUSH
2988: CALL_OW 380
// unit = CreateHuman ;
2992: LD_ADDR_VAR 0 3
2996: PUSH
2997: CALL_OW 44
3001: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 3
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3017: LD_ADDR_EXP 56
3021: PUSH
3022: LD_EXP 56
3026: PUSH
3027: LD_VAR 0 3
3031: ADD
3032: ST_TO_ADDR
// end ;
3033: GO 2968
3035: POP
3036: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3037: LD_INT 0
3039: PPUSH
3040: LD_INT 2
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: CALL_OW 12
3053: PPUSH
3054: CALL_OW 380
// unit = CreateHuman ;
3058: LD_ADDR_VAR 0 3
3062: PUSH
3063: CALL_OW 44
3067: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3068: LD_VAR 0 3
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3083: LD_ADDR_EXP 56
3087: PUSH
3088: LD_EXP 56
3092: PUSH
3093: LD_VAR 0 3
3097: ADD
3098: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3099: LD_EXP 56
3103: PPUSH
3104: LD_INT 100
3106: PPUSH
3107: LD_INT 54
3109: PPUSH
3110: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3114: LD_EXP 56
3118: PPUSH
3119: LD_INT 25
3121: PUSH
3122: LD_INT 2
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 72
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 95
3139: PPUSH
3140: LD_INT 52
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 205
// end ; end_of_file
3150: LD_VAR 0 1
3154: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3155: LD_INT 0
3157: PPUSH
// uc_side = 2 ;
3158: LD_ADDR_OWVAR 20
3162: PUSH
3163: LD_INT 2
3165: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3166: LD_ADDR_EXP 61
3170: PUSH
3171: LD_STRING Heike
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: LD_INT 0
3179: PPUSH
3180: CALL 9041 0 3
3184: ST_TO_ADDR
// if Difficulty >= 2 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 2
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// end ;
3208: LD_VAR 0 1
3212: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3213: LD_INT 0
3215: PPUSH
3216: PPUSH
3217: PPUSH
// currentEnemyGroup = [ ] ;
3218: LD_ADDR_EXP 63
3222: PUSH
3223: EMPTY
3224: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_EXP 38
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3496
// begin uc_side = 2 ;
3243: LD_ADDR_OWVAR 20
3247: PUSH
3248: LD_INT 2
3250: ST_TO_ADDR
// uc_nation = nation_arabian ;
3251: LD_ADDR_OWVAR 21
3255: PUSH
3256: LD_INT 2
3258: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3259: LD_ADDR_OWVAR 40
3263: PUSH
3264: LD_INT 23
3266: PUSH
3267: LD_INT 24
3269: PUSH
3270: LD_INT 25
3272: PUSH
3273: LD_INT 26
3275: PUSH
3276: LD_INT 27
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 5
3291: PPUSH
3292: CALL_OW 12
3296: ARRAY
3297: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3298: LD_OWVAR 40
3302: PUSH
3303: LD_INT 25
3305: PUSH
3306: LD_INT 26
3308: PUSH
3309: LD_INT 27
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: IN
3317: IFFALSE 3348
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3319: LD_ADDR_OWVAR 37
3323: PUSH
3324: LD_INT 13
3326: PUSH
3327: LD_INT 14
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 1
3336: PPUSH
3337: LD_INT 2
3339: PPUSH
3340: CALL_OW 12
3344: ARRAY
3345: ST_TO_ADDR
3346: GO 3379
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3348: LD_ADDR_OWVAR 37
3352: PUSH
3353: LD_INT 12
3355: PUSH
3356: LD_INT 13
3358: PUSH
3359: LD_INT 14
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 1
3369: PPUSH
3370: LD_INT 3
3372: PPUSH
3373: CALL_OW 12
3377: ARRAY
3378: ST_TO_ADDR
// vc_control = control_manual ;
3379: LD_ADDR_OWVAR 38
3383: PUSH
3384: LD_INT 1
3386: ST_TO_ADDR
// vc_engine = engine_combustion ;
3387: LD_ADDR_OWVAR 39
3391: PUSH
3392: LD_INT 1
3394: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3395: LD_ADDR_OWVAR 41
3399: PUSH
3400: LD_INT 100
3402: ST_TO_ADDR
// veh = CreateVehicle ;
3403: LD_ADDR_VAR 0 3
3407: PUSH
3408: CALL_OW 45
3412: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3413: LD_ADDR_EXP 63
3417: PUSH
3418: LD_EXP 63
3422: PUSH
3423: LD_VAR 0 3
3427: ADD
3428: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 7
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3444: LD_OWVAR 40
3448: PUSH
3449: LD_INT 26
3451: EQUAL
3452: IFFALSE 3468
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3454: LD_INT 0
3456: PPUSH
3457: LD_EXP 32
3461: PPUSH
3462: CALL_OW 383
3466: GO 3480
// PrepareMechanic ( false , enemySkillLevel ) ;
3468: LD_INT 0
3470: PPUSH
3471: LD_EXP 31
3475: PPUSH
3476: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3480: CALL_OW 44
3484: PPUSH
3485: LD_VAR 0 3
3489: PPUSH
3490: CALL_OW 52
// end ;
3494: GO 3240
3496: POP
3497: POP
// end ;
3498: LD_VAR 0 1
3502: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3503: LD_INT 0
3505: PPUSH
3506: PPUSH
3507: PPUSH
// currentEnemyGroup = [ ] ;
3508: LD_ADDR_EXP 63
3512: PUSH
3513: EMPTY
3514: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: DOUBLE
3521: LD_INT 1
3523: DEC
3524: ST_TO_ADDR
3525: LD_EXP 39
3529: PPUSH
3530: LD_EXP 40
3534: PPUSH
3535: CALL_OW 12
3539: PUSH
3540: FOR_TO
3541: IFFALSE 3616
// begin uc_side = 2 ;
3543: LD_ADDR_OWVAR 20
3547: PUSH
3548: LD_INT 2
3550: ST_TO_ADDR
// uc_nation = nation_arabian ;
3551: LD_ADDR_OWVAR 21
3555: PUSH
3556: LD_INT 2
3558: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3559: LD_INT 0
3561: PPUSH
3562: LD_EXP 31
3566: PPUSH
3567: CALL_OW 381
// unit = CreateHuman ;
3571: LD_ADDR_VAR 0 4
3575: PUSH
3576: CALL_OW 44
3580: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3581: LD_ADDR_EXP 63
3585: PUSH
3586: LD_EXP 63
3590: PUSH
3591: LD_VAR 0 4
3595: ADD
3596: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3597: LD_VAR 0 4
3601: PPUSH
3602: LD_VAR 0 1
3606: PPUSH
3607: LD_INT 0
3609: PPUSH
3610: CALL_OW 49
// end ;
3614: GO 3540
3616: POP
3617: POP
// for i := 1 to rand ( 1 , 3 ) do
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 3
3633: PPUSH
3634: CALL_OW 12
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3715
// begin uc_side = 2 ;
3642: LD_ADDR_OWVAR 20
3646: PUSH
3647: LD_INT 2
3649: ST_TO_ADDR
// uc_nation = nation_arabian ;
3650: LD_ADDR_OWVAR 21
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
3658: LD_INT 0
3660: PPUSH
3661: LD_EXP 31
3665: PPUSH
3666: CALL_OW 384
// unit = CreateHuman ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: CALL_OW 44
3679: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3680: LD_ADDR_EXP 63
3684: PUSH
3685: LD_EXP 63
3689: PUSH
3690: LD_VAR 0 4
3694: ADD
3695: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3696: LD_VAR 0 4
3700: PPUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: LD_INT 0
3708: PPUSH
3709: CALL_OW 49
// end ;
3713: GO 3639
3715: POP
3716: POP
// end ;
3717: LD_VAR 0 2
3721: RET
// export function PrepareArabianKiller ; var un ; begin
3722: LD_INT 0
3724: PPUSH
3725: PPUSH
// uc_side = 5 ;
3726: LD_ADDR_OWVAR 20
3730: PUSH
3731: LD_INT 5
3733: ST_TO_ADDR
// uc_nation = nation_arabian ;
3734: LD_ADDR_OWVAR 21
3738: PUSH
3739: LD_INT 2
3741: ST_TO_ADDR
// hc_class = class_soldier ;
3742: LD_ADDR_OWVAR 28
3746: PUSH
3747: LD_INT 1
3749: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3750: LD_ADDR_OWVAR 31
3754: PUSH
3755: LD_INT 0
3757: PUSH
3758: LD_INT 0
3760: PUSH
3761: LD_INT 0
3763: PUSH
3764: LD_INT 0
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: ST_TO_ADDR
// un = CreateHuman ;
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: CALL_OW 44
3782: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
3783: LD_VAR 0 2
3787: PPUSH
3788: LD_INT 12
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
3798: LD_VAR 0 2
3802: PPUSH
3803: LD_EXP 53
3807: PPUSH
3808: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
3812: LD_ADDR_EXP 22
3816: PUSH
3817: LD_EXP 22
3821: PUSH
3822: LD_INT 1
3824: PLUS
3825: ST_TO_ADDR
// end ;
3826: LD_VAR 0 1
3830: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
3831: LD_INT 0
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// firstAttackGroup = [ ] ;
3837: LD_ADDR_EXP 62
3841: PUSH
3842: EMPTY
3843: ST_TO_ADDR
// uc_side = 2 ;
3844: LD_ADDR_OWVAR 20
3848: PUSH
3849: LD_INT 2
3851: ST_TO_ADDR
// uc_nation = nation_arabian ;
3852: LD_ADDR_OWVAR 21
3856: PUSH
3857: LD_INT 2
3859: ST_TO_ADDR
// for i := 1 to 3 do
3860: LD_ADDR_VAR 0 2
3864: PUSH
3865: DOUBLE
3866: LD_INT 1
3868: DEC
3869: ST_TO_ADDR
3870: LD_INT 3
3872: PUSH
3873: FOR_TO
3874: IFFALSE 3935
// begin PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3876: LD_INT 0
3878: PPUSH
3879: LD_EXP 31
3883: PUSH
3884: LD_INT 1
3886: MINUS
3887: PPUSH
3888: CALL_OW 381
// unit = CreateHuman ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: CALL_OW 44
3901: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
3902: LD_ADDR_EXP 62
3906: PUSH
3907: LD_EXP 62
3911: PUSH
3912: LD_VAR 0 3
3916: ADD
3917: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
3918: LD_VAR 0 3
3922: PPUSH
3923: LD_INT 7
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 49
// end ;
3933: GO 3873
3935: POP
3936: POP
// vc_weapon = ar_gatling_gun ;
3937: LD_ADDR_OWVAR 40
3941: PUSH
3942: LD_INT 25
3944: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
3945: LD_ADDR_OWVAR 37
3949: PUSH
3950: LD_INT 13
3952: ST_TO_ADDR
// vc_control = control_manual ;
3953: LD_ADDR_OWVAR 38
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// vc_engine = engine_combustion ;
3961: LD_ADDR_OWVAR 39
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3969: LD_ADDR_OWVAR 41
3973: PUSH
3974: LD_INT 100
3976: ST_TO_ADDR
// veh = CreateVehicle ;
3977: LD_ADDR_VAR 0 4
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
3987: LD_ADDR_EXP 62
3991: PUSH
3992: LD_EXP 62
3996: PUSH
3997: LD_VAR 0 4
4001: ADD
4002: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_INT 7
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4018: LD_INT 0
4020: PPUSH
4021: LD_EXP 31
4025: PUSH
4026: LD_INT 1
4028: MINUS
4029: PPUSH
4030: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4034: CALL_OW 44
4038: PPUSH
4039: LD_VAR 0 4
4043: PPUSH
4044: CALL_OW 52
// end ; end_of_file
4048: LD_VAR 0 1
4052: RET
// export function Nef_PrepareNature ; var i , un ; begin
4053: LD_INT 0
4055: PPUSH
4056: PPUSH
4057: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_EXP 25
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PUSH
4077: FOR_TO
4078: IFFALSE 4188
// begin uc_side = 0 ;
4080: LD_ADDR_OWVAR 20
4084: PUSH
4085: LD_INT 0
4087: ST_TO_ADDR
// uc_nation = nation_nature ;
4088: LD_ADDR_OWVAR 21
4092: PUSH
4093: LD_INT 0
4095: ST_TO_ADDR
// hc_class = class_apeman ;
4096: LD_ADDR_OWVAR 28
4100: PUSH
4101: LD_INT 12
4103: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4104: LD_ADDR_OWVAR 31
4108: PUSH
4109: LD_EXP 26
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: PUSH
4118: LD_EXP 26
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: PUSH
4127: LD_EXP 26
4131: PUSH
4132: LD_INT 3
4134: ARRAY
4135: PUSH
4136: LD_EXP 26
4140: PUSH
4141: LD_INT 4
4143: ARRAY
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4151: LD_ADDR_OWVAR 35
4155: PUSH
4156: LD_EXP 27
4160: ST_TO_ADDR
// un = CreateHuman ;
4161: LD_ADDR_VAR 0 3
4165: PUSH
4166: CALL_OW 44
4170: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_INT 8
4178: PPUSH
4179: LD_INT 0
4181: PPUSH
4182: CALL_OW 49
// end ;
4186: GO 4077
4188: POP
4189: POP
// for i := 1 to animalsAmount [ 2 ] do
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: DOUBLE
4196: LD_INT 1
4198: DEC
4199: ST_TO_ADDR
4200: LD_EXP 25
4204: PUSH
4205: LD_INT 2
4207: ARRAY
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4320
// begin uc_side = 0 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 0
4219: ST_TO_ADDR
// uc_nation = nation_nature ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// hc_class = class_phororhacos ;
4228: LD_ADDR_OWVAR 28
4232: PUSH
4233: LD_INT 18
4235: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4236: LD_ADDR_OWVAR 31
4240: PUSH
4241: LD_EXP 26
4245: PUSH
4246: LD_INT 1
4248: ARRAY
4249: PUSH
4250: LD_EXP 26
4254: PUSH
4255: LD_INT 2
4257: ARRAY
4258: PUSH
4259: LD_EXP 26
4263: PUSH
4264: LD_INT 3
4266: ARRAY
4267: PUSH
4268: LD_EXP 26
4272: PUSH
4273: LD_INT 4
4275: ARRAY
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4283: LD_ADDR_OWVAR 35
4287: PUSH
4288: LD_EXP 27
4292: ST_TO_ADDR
// un = CreateHuman ;
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: CALL_OW 44
4302: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4303: LD_VAR 0 3
4307: PPUSH
4308: LD_INT 8
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 49
// end ;
4318: GO 4209
4320: POP
4321: POP
// for i := 1 to animalsAmount [ 3 ] do
4322: LD_ADDR_VAR 0 2
4326: PUSH
4327: DOUBLE
4328: LD_INT 1
4330: DEC
4331: ST_TO_ADDR
4332: LD_EXP 25
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4452
// begin uc_side = 0 ;
4344: LD_ADDR_OWVAR 20
4348: PUSH
4349: LD_INT 0
4351: ST_TO_ADDR
// uc_nation = nation_nature ;
4352: LD_ADDR_OWVAR 21
4356: PUSH
4357: LD_INT 0
4359: ST_TO_ADDR
// hc_class = class_tiger ;
4360: LD_ADDR_OWVAR 28
4364: PUSH
4365: LD_INT 14
4367: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4368: LD_ADDR_OWVAR 31
4372: PUSH
4373: LD_EXP 26
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: PUSH
4382: LD_EXP 26
4386: PUSH
4387: LD_INT 2
4389: ARRAY
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_INT 3
4398: ARRAY
4399: PUSH
4400: LD_EXP 26
4404: PUSH
4405: LD_INT 4
4407: ARRAY
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4415: LD_ADDR_OWVAR 35
4419: PUSH
4420: LD_EXP 27
4424: ST_TO_ADDR
// un = CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 8
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4341
4452: POP
4453: POP
// for i := 1 to animalsAmount [ 4 ] do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: DOUBLE
4460: LD_INT 1
4462: DEC
4463: ST_TO_ADDR
4464: LD_EXP 25
4468: PUSH
4469: LD_INT 4
4471: ARRAY
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4584
// begin uc_side = 0 ;
4476: LD_ADDR_OWVAR 20
4480: PUSH
4481: LD_INT 0
4483: ST_TO_ADDR
// uc_nation = nation_nature ;
4484: LD_ADDR_OWVAR 21
4488: PUSH
4489: LD_INT 0
4491: ST_TO_ADDR
// hc_class = 21 ;
4492: LD_ADDR_OWVAR 28
4496: PUSH
4497: LD_INT 21
4499: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4500: LD_ADDR_OWVAR 31
4504: PUSH
4505: LD_EXP 26
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PUSH
4514: LD_EXP 26
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PUSH
4523: LD_EXP 26
4527: PUSH
4528: LD_INT 3
4530: ARRAY
4531: PUSH
4532: LD_EXP 26
4536: PUSH
4537: LD_INT 4
4539: ARRAY
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4547: LD_ADDR_OWVAR 35
4551: PUSH
4552: LD_EXP 27
4556: ST_TO_ADDR
// un = CreateHuman ;
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: CALL_OW 44
4566: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4567: LD_VAR 0 3
4571: PPUSH
4572: LD_INT 8
4574: PPUSH
4575: LD_INT 0
4577: PPUSH
4578: CALL_OW 49
// end ;
4582: GO 4473
4584: POP
4585: POP
// for i := 1 to animalsAmount [ 5 ] do
4586: LD_ADDR_VAR 0 2
4590: PUSH
4591: DOUBLE
4592: LD_INT 1
4594: DEC
4595: ST_TO_ADDR
4596: LD_EXP 25
4600: PUSH
4601: LD_INT 5
4603: ARRAY
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4667
// begin uc_side = 0 ;
4608: LD_ADDR_OWVAR 20
4612: PUSH
4613: LD_INT 0
4615: ST_TO_ADDR
// uc_nation = nation_nature ;
4616: LD_ADDR_OWVAR 21
4620: PUSH
4621: LD_INT 0
4623: ST_TO_ADDR
// vc_chassis := 31 ;
4624: LD_ADDR_OWVAR 37
4628: PUSH
4629: LD_INT 31
4631: ST_TO_ADDR
// vc_control := control_rider ;
4632: LD_ADDR_OWVAR 38
4636: PUSH
4637: LD_INT 4
4639: ST_TO_ADDR
// un := CreateVehicle ;
4640: LD_ADDR_VAR 0 3
4644: PUSH
4645: CALL_OW 45
4649: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4650: LD_VAR 0 3
4654: PPUSH
4655: LD_INT 8
4657: PPUSH
4658: LD_INT 0
4660: PPUSH
4661: CALL_OW 49
// end ;
4665: GO 4605
4667: POP
4668: POP
// end ; end_of_file
4669: LD_VAR 0 1
4673: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
4674: LD_INT 0
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
4690: PPUSH
4691: PPUSH
4692: PPUSH
4693: PPUSH
// for unit in units do
4694: LD_ADDR_VAR 0 8
4698: PUSH
4699: LD_VAR 0 1
4703: PUSH
4704: FOR_IN
4705: IFFALSE 4742
// if not ignorePath then
4707: LD_VAR 0 3
4711: NOT
4712: IFFALSE 4728
// SetTag ( unit , 0 ) else
4714: LD_VAR 0 8
4718: PPUSH
4719: LD_INT 0
4721: PPUSH
4722: CALL_OW 109
4726: GO 4740
// SetTag ( unit , 1 ) ;
4728: LD_VAR 0 8
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: CALL_OW 109
4740: GO 4704
4742: POP
4743: POP
// startAttacks = false ;
4744: LD_ADDR_VAR 0 21
4748: PUSH
4749: LD_INT 0
4751: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
4752: LD_ADDR_VAR 0 17
4756: PUSH
4757: LD_VAR 0 2
4761: PUSH
4762: LD_VAR 0 2
4766: ARRAY
4767: PUSH
4768: LD_INT 1
4770: ARRAY
4771: PUSH
4772: LD_VAR 0 2
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PUSH
4783: LD_INT 2
4785: ARRAY
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// mechanics = [ ] ;
4791: LD_ADDR_VAR 0 12
4795: PUSH
4796: EMPTY
4797: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
4798: LD_ADDR_VAR 0 9
4802: PUSH
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 50
4810: PUSH
4811: EMPTY
4812: LIST
4813: PUSH
4814: LD_INT 2
4816: PUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 21
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 72
4850: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
4851: LD_ADDR_VAR 0 11
4855: PUSH
4856: LD_VAR 0 1
4860: PPUSH
4861: LD_INT 50
4863: PUSH
4864: EMPTY
4865: LIST
4866: PUSH
4867: LD_INT 25
4869: PUSH
4870: LD_INT 4
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4886: LD_ADDR_VAR 0 13
4890: PUSH
4891: LD_VAR 0 1
4895: PPUSH
4896: LD_INT 21
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 3
4908: PUSH
4909: LD_INT 24
4911: PUSH
4912: LD_INT 1000
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 72
4931: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
4932: LD_ADDR_VAR 0 15
4936: PUSH
4937: LD_INT 9
4939: PPUSH
4940: CALL_OW 435
4944: ST_TO_ADDR
// if not ignorePath then
4945: LD_VAR 0 3
4949: NOT
4950: IFFALSE 5932
// begin for unit in attackUnits do
4952: LD_ADDR_VAR 0 8
4956: PUSH
4957: LD_VAR 0 9
4961: PUSH
4962: FOR_IN
4963: IFFALSE 5706
// begin if path and not startAttacks then
4965: LD_VAR 0 2
4969: PUSH
4970: LD_VAR 0 21
4974: NOT
4975: AND
4976: IFFALSE 5695
// begin i = 1 ;
4978: LD_ADDR_VAR 0 7
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
4986: LD_ADDR_VAR 0 15
4990: PUSH
4991: LD_INT 9
4993: PPUSH
4994: CALL_OW 435
4998: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
4999: LD_ADDR_VAR 0 18
5003: PUSH
5004: LD_INT 81
5006: PUSH
5007: LD_VAR 0 8
5011: PPUSH
5012: CALL_OW 255
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PPUSH
5026: LD_VAR 0 8
5030: PPUSH
5031: CALL_OW 74
5035: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5036: LD_ADDR_VAR 0 19
5040: PUSH
5041: LD_VAR 0 15
5045: PPUSH
5046: LD_VAR 0 8
5050: PPUSH
5051: CALL_OW 250
5055: PPUSH
5056: LD_VAR 0 8
5060: PPUSH
5061: CALL_OW 251
5065: PPUSH
5066: CALL_OW 439
5070: ST_TO_ADDR
// if damageUnits and medics then
5071: LD_VAR 0 13
5075: PUSH
5076: LD_VAR 0 11
5080: AND
5081: IFFALSE 5103
// ComHeal ( medics , damageUnits [ 1 ] ) else
5083: LD_VAR 0 11
5087: PPUSH
5088: LD_VAR 0 13
5092: PUSH
5093: LD_INT 1
5095: ARRAY
5096: PPUSH
5097: CALL_OW 128
5101: GO 5146
// if medics then
5103: LD_VAR 0 11
5107: IFFALSE 5146
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5109: LD_VAR 0 11
5113: PPUSH
5114: LD_VAR 0 9
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: CALL_OW 250
5127: PPUSH
5128: LD_VAR 0 9
5132: PUSH
5133: LD_INT 1
5135: ARRAY
5136: PPUSH
5137: CALL_OW 251
5141: PPUSH
5142: CALL_OW 111
// if not HasTask ( unit ) then
5146: LD_VAR 0 8
5150: PPUSH
5151: CALL_OW 314
5155: NOT
5156: IFFALSE 5395
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5158: LD_ADDR_VAR 0 19
5162: PUSH
5163: LD_VAR 0 15
5167: PPUSH
5168: LD_VAR 0 8
5172: PPUSH
5173: CALL_OW 250
5177: PPUSH
5178: LD_VAR 0 8
5182: PPUSH
5183: CALL_OW 251
5187: PPUSH
5188: CALL_OW 439
5192: ST_TO_ADDR
// if i > crates then
5193: LD_VAR 0 7
5197: PUSH
5198: LD_VAR 0 15
5202: GREATER
5203: IFFALSE 5213
// i = 1 ;
5205: LD_ADDR_VAR 0 7
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5213: LD_VAR 0 18
5217: PUSH
5218: LD_VAR 0 19
5222: AND
5223: IFFALSE 5338
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5225: LD_VAR 0 8
5229: PPUSH
5230: LD_VAR 0 18
5234: PPUSH
5235: CALL_OW 250
5239: PPUSH
5240: LD_VAR 0 18
5244: PPUSH
5245: CALL_OW 251
5249: PPUSH
5250: CALL_OW 297
5254: PUSH
5255: LD_VAR 0 8
5259: PPUSH
5260: LD_VAR 0 19
5264: PUSH
5265: LD_INT 1
5267: ARRAY
5268: PPUSH
5269: LD_VAR 0 19
5273: PUSH
5274: LD_INT 2
5276: ARRAY
5277: PPUSH
5278: CALL_OW 297
5282: LESS
5283: IFFALSE 5301
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5285: LD_VAR 0 9
5289: PPUSH
5290: LD_VAR 0 18
5294: PPUSH
5295: CALL_OW 115
5299: GO 5336
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5301: LD_VAR 0 9
5305: PPUSH
5306: LD_VAR 0 15
5310: PUSH
5311: LD_VAR 0 7
5315: ARRAY
5316: PPUSH
5317: LD_VAR 0 15
5321: PUSH
5322: LD_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: ARRAY
5331: PPUSH
5332: CALL_OW 116
// end else
5336: GO 5395
// if crates then
5338: LD_VAR 0 15
5342: IFFALSE 5381
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5344: LD_VAR 0 9
5348: PPUSH
5349: LD_VAR 0 15
5353: PUSH
5354: LD_VAR 0 7
5358: ARRAY
5359: PPUSH
5360: LD_VAR 0 15
5364: PUSH
5365: LD_VAR 0 7
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: ARRAY
5374: PPUSH
5375: CALL_OW 116
5379: GO 5395
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5381: LD_VAR 0 9
5385: PPUSH
5386: LD_VAR 0 18
5390: PPUSH
5391: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5395: LD_INT 35
5397: PPUSH
5398: CALL_OW 67
// if path then
5402: LD_VAR 0 2
5406: IFFALSE 5492
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5408: LD_ADDR_VAR 0 16
5412: PUSH
5413: LD_VAR 0 8
5417: PPUSH
5418: LD_VAR 0 2
5422: PPUSH
5423: CALL 6822 0 2
5427: ST_TO_ADDR
// if agressiveMove then
5428: LD_VAR 0 4
5432: IFFALSE 5463
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5434: LD_VAR 0 9
5438: PPUSH
5439: LD_VAR 0 16
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: LD_VAR 0 16
5452: PUSH
5453: LD_INT 2
5455: ARRAY
5456: PPUSH
5457: CALL_OW 114
5461: GO 5490
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5463: LD_VAR 0 9
5467: PPUSH
5468: LD_VAR 0 16
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PPUSH
5477: LD_VAR 0 16
5481: PUSH
5482: LD_INT 2
5484: ARRAY
5485: PPUSH
5486: CALL_OW 111
// end else
5490: GO 5500
// startAttacks = true ;
5492: LD_ADDR_VAR 0 21
5496: PUSH
5497: LD_INT 1
5499: ST_TO_ADDR
// i = i + 2 ;
5500: LD_ADDR_VAR 0 7
5504: PUSH
5505: LD_VAR 0 7
5509: PUSH
5510: LD_INT 2
5512: PLUS
5513: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_VAR 0 8
5532: PPUSH
5533: CALL_OW 255
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 92
5544: PUSH
5545: LD_VAR 0 16
5549: PUSH
5550: LD_INT 1
5552: ARRAY
5553: PUSH
5554: LD_VAR 0 16
5558: PUSH
5559: LD_INT 2
5561: ARRAY
5562: PUSH
5563: LD_INT 4
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PPUSH
5576: CALL_OW 69
5580: PUSH
5581: LD_INT 3
5583: GREATER
5584: AND
5585: PUSH
5586: LD_VAR 0 21
5590: NOT
5591: AND
5592: IFFALSE 4986
// for i := 1 to path do
5594: LD_ADDR_VAR 0 7
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 2
5608: PUSH
5609: FOR_TO
5610: IFFALSE 5693
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5612: LD_VAR 0 2
5616: PUSH
5617: LD_VAR 0 7
5621: ARRAY
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PUSH
5627: LD_VAR 0 16
5631: PUSH
5632: LD_INT 1
5634: ARRAY
5635: EQUAL
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: LD_VAR 0 7
5646: ARRAY
5647: PUSH
5648: LD_INT 2
5650: ARRAY
5651: PUSH
5652: LD_VAR 0 16
5656: PUSH
5657: LD_INT 2
5659: ARRAY
5660: EQUAL
5661: AND
5662: IFFALSE 5691
// begin path = path diff [ path [ i ] ] ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_VAR 0 2
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PUSH
5685: EMPTY
5686: LIST
5687: DIFF
5688: ST_TO_ADDR
// break ;
5689: GO 5693
// end ;
5691: GO 5609
5693: POP
5694: POP
// end ; if not path then
5695: LD_VAR 0 2
5699: NOT
5700: IFFALSE 5704
// break ;
5702: GO 5706
// end ;
5704: GO 4962
5706: POP
5707: POP
// repeat unitsReachPathEnd = 0 ;
5708: LD_ADDR_VAR 0 20
5712: PUSH
5713: LD_INT 0
5715: ST_TO_ADDR
// for attackUnit in attackUnits do
5716: LD_ADDR_VAR 0 10
5720: PUSH
5721: LD_VAR 0 9
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5900
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
5729: LD_VAR 0 10
5733: PPUSH
5734: LD_VAR 0 17
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PPUSH
5743: LD_VAR 0 17
5747: PUSH
5748: LD_INT 2
5750: ARRAY
5751: PPUSH
5752: CALL_OW 297
5756: PUSH
5757: LD_INT 7
5759: LESS
5760: NOT
5761: PUSH
5762: LD_VAR 0 10
5766: PPUSH
5767: CALL_OW 110
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: AND
5776: IFFALSE 5842
// begin if agressiveMove then
5778: LD_VAR 0 4
5782: IFFALSE 5813
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
5784: LD_VAR 0 10
5788: PPUSH
5789: LD_VAR 0 17
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: LD_VAR 0 17
5802: PUSH
5803: LD_INT 2
5805: ARRAY
5806: PPUSH
5807: CALL_OW 114
5811: GO 5840
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
5813: LD_VAR 0 10
5817: PPUSH
5818: LD_VAR 0 17
5822: PUSH
5823: LD_INT 1
5825: ARRAY
5826: PPUSH
5827: LD_VAR 0 17
5831: PUSH
5832: LD_INT 2
5834: ARRAY
5835: PPUSH
5836: CALL_OW 111
// end else
5840: GO 5869
// if GetTag ( attackUnit ) = 0 then
5842: LD_VAR 0 10
5846: PPUSH
5847: CALL_OW 110
5851: PUSH
5852: LD_INT 0
5854: EQUAL
5855: IFFALSE 5869
// SetTag ( attackUnit , 1 ) ;
5857: LD_VAR 0 10
5861: PPUSH
5862: LD_INT 1
5864: PPUSH
5865: CALL_OW 109
// if GetTag ( unit ) = 1 then
5869: LD_VAR 0 8
5873: PPUSH
5874: CALL_OW 110
5878: PUSH
5879: LD_INT 1
5881: EQUAL
5882: IFFALSE 5898
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
5884: LD_ADDR_VAR 0 20
5888: PUSH
5889: LD_VAR 0 20
5893: PUSH
5894: LD_INT 1
5896: PLUS
5897: ST_TO_ADDR
// end ;
5898: GO 5726
5900: POP
5901: POP
// wait ( 0 0$1 ) ;
5902: LD_INT 35
5904: PPUSH
5905: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
5909: LD_VAR 0 20
5913: PUSH
5914: LD_VAR 0 9
5918: PUSH
5919: LD_INT 3
5921: MINUS
5922: GREATER
5923: IFFALSE 5708
// wait ( 0 0$10 ) ;
5925: LD_INT 350
5927: PPUSH
5928: CALL_OW 67
// end ; for attackUnit in attackUnits do
5932: LD_ADDR_VAR 0 10
5936: PUSH
5937: LD_VAR 0 9
5941: PUSH
5942: FOR_IN
5943: IFFALSE 5959
// SetTag ( attackUnit , 2 ) ;
5945: LD_VAR 0 10
5949: PPUSH
5950: LD_INT 2
5952: PPUSH
5953: CALL_OW 109
5957: GO 5942
5959: POP
5960: POP
// startAttacks = true ;
5961: LD_ADDR_VAR 0 21
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if startAttacks then
5969: LD_VAR 0 21
5973: IFFALSE 6792
// begin repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5982: LD_ADDR_VAR 0 11
5986: PUSH
5987: LD_VAR 0 1
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 72
6016: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 13
6021: PUSH
6022: LD_VAR 0 1
6026: PPUSH
6027: LD_INT 21
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 25
6039: PUSH
6040: LD_INT 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 24
6052: PUSH
6053: LD_INT 1000
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: PPUSH
6069: CALL_OW 72
6073: ST_TO_ADDR
// if damageUnits and medics then
6074: LD_VAR 0 13
6078: PUSH
6079: LD_VAR 0 11
6083: AND
6084: IFFALSE 6106
// ComHeal ( medics , damageUnits [ 1 ] ) else
6086: LD_VAR 0 11
6090: PPUSH
6091: LD_VAR 0 13
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: CALL_OW 128
6104: GO 6156
// if medics and not damageUnits then
6106: LD_VAR 0 11
6110: PUSH
6111: LD_VAR 0 13
6115: NOT
6116: AND
6117: IFFALSE 6156
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6119: LD_VAR 0 11
6123: PPUSH
6124: LD_VAR 0 9
6128: PUSH
6129: LD_INT 1
6131: ARRAY
6132: PPUSH
6133: CALL_OW 250
6137: PPUSH
6138: LD_VAR 0 9
6142: PUSH
6143: LD_INT 1
6145: ARRAY
6146: PPUSH
6147: CALL_OW 251
6151: PPUSH
6152: CALL_OW 111
// for attackUnit in attackUnits do
6156: LD_ADDR_VAR 0 10
6160: PUSH
6161: LD_VAR 0 9
6165: PUSH
6166: FOR_IN
6167: IFFALSE 6783
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6169: LD_ADDR_VAR 0 22
6173: PUSH
6174: LD_INT 81
6176: PUSH
6177: LD_VAR 0 10
6181: PPUSH
6182: CALL_OW 255
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: PPUSH
6196: LD_VAR 0 10
6200: PPUSH
6201: CALL_OW 74
6205: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6206: LD_ADDR_VAR 0 23
6210: PUSH
6211: LD_INT 81
6213: PUSH
6214: LD_VAR 0 10
6218: PPUSH
6219: CALL_OW 255
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 2
6230: PUSH
6231: LD_INT 59
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 1
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 21
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: PPUSH
6275: LD_VAR 0 10
6279: PPUSH
6280: CALL_OW 74
6284: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6285: LD_VAR 0 10
6289: PPUSH
6290: CALL_OW 110
6294: PUSH
6295: LD_INT 2
6297: EQUAL
6298: IFFALSE 6458
// begin if GetDistUnits ( attackUnit , target1 ) + 8 < GetDistUnits ( attackUnit , target2 ) then
6300: LD_VAR 0 10
6304: PPUSH
6305: LD_VAR 0 22
6309: PPUSH
6310: CALL_OW 296
6314: PUSH
6315: LD_INT 8
6317: PLUS
6318: PUSH
6319: LD_VAR 0 10
6323: PPUSH
6324: LD_VAR 0 23
6328: PPUSH
6329: CALL_OW 296
6333: LESS
6334: IFFALSE 6352
// ComAttackUnit ( attackUnit , target1 ) else
6336: LD_VAR 0 10
6340: PPUSH
6341: LD_VAR 0 22
6345: PPUSH
6346: CALL_OW 115
6350: GO 6366
// ComAttackUnit ( attackUnit , target2 ) ;
6352: LD_VAR 0 10
6356: PPUSH
6357: LD_VAR 0 23
6361: PPUSH
6362: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6366: LD_VAR 0 10
6370: PPUSH
6371: CALL_OW 256
6375: PUSH
6376: LD_INT 650
6378: LESS
6379: PUSH
6380: LD_VAR 0 10
6384: PPUSH
6385: CALL_OW 247
6389: PUSH
6390: LD_INT 2
6392: EQUAL
6393: AND
6394: PUSH
6395: LD_VAR 0 10
6399: PPUSH
6400: CALL_OW 263
6404: PUSH
6405: LD_INT 1
6407: EQUAL
6408: AND
6409: IFFALSE 6458
// begin SetTag ( attackUnit , 3 ) ;
6411: LD_VAR 0 10
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6423: LD_VAR 0 10
6427: PPUSH
6428: CALL_OW 313
6432: PUSH
6433: LD_INT 1
6435: ARRAY
6436: PPUSH
6437: LD_INT 3
6439: PPUSH
6440: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6444: LD_VAR 0 10
6448: PPUSH
6449: LD_VAR 0 5
6453: PPUSH
6454: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6458: LD_VAR 0 10
6462: PPUSH
6463: LD_VAR 0 5
6467: PPUSH
6468: CALL_OW 308
6472: PUSH
6473: LD_VAR 0 10
6477: PPUSH
6478: CALL_OW 110
6482: PUSH
6483: LD_INT 3
6485: EQUAL
6486: AND
6487: PUSH
6488: LD_VAR 0 10
6492: PPUSH
6493: CALL_OW 313
6497: AND
6498: IFFALSE 6571
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6500: LD_ADDR_VAR 0 14
6504: PUSH
6505: LD_VAR 0 10
6509: PPUSH
6510: CALL_OW 313
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: ST_TO_ADDR
// if not driver in mechanics then
6519: LD_VAR 0 14
6523: PUSH
6524: LD_VAR 0 12
6528: IN
6529: NOT
6530: IFFALSE 6548
// mechanics = mechanics ^ driver ;
6532: LD_ADDR_VAR 0 12
6536: PUSH
6537: LD_VAR 0 12
6541: PUSH
6542: LD_VAR 0 14
6546: ADD
6547: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6548: LD_VAR 0 14
6552: PPUSH
6553: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6557: LD_VAR 0 14
6561: PPUSH
6562: LD_VAR 0 10
6566: PPUSH
6567: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6571: LD_VAR 0 10
6575: PPUSH
6576: CALL_OW 256
6580: PUSH
6581: LD_INT 1000
6583: EQUAL
6584: IFFALSE 6702
// begin SetTag ( attackUnit , 2 ) ;
6586: LD_VAR 0 10
6590: PPUSH
6591: LD_INT 2
6593: PPUSH
6594: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6598: LD_VAR 0 10
6602: PPUSH
6603: CALL_OW 247
6607: PUSH
6608: LD_INT 2
6610: EQUAL
6611: PUSH
6612: LD_VAR 0 10
6616: PPUSH
6617: CALL_OW 263
6621: PUSH
6622: LD_INT 1
6624: EQUAL
6625: AND
6626: PUSH
6627: LD_VAR 0 10
6631: PPUSH
6632: CALL_OW 313
6636: NOT
6637: AND
6638: IFFALSE 6702
// begin SetFuel ( attackUnit , 100 ) ;
6640: LD_VAR 0 10
6644: PPUSH
6645: LD_INT 100
6647: PPUSH
6648: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6652: LD_VAR 0 12
6656: PPUSH
6657: LD_VAR 0 10
6661: PPUSH
6662: CALL_OW 74
6666: PPUSH
6667: LD_VAR 0 10
6671: PPUSH
6672: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
6676: LD_ADDR_VAR 0 12
6680: PUSH
6681: LD_VAR 0 12
6685: PUSH
6686: LD_VAR 0 12
6690: PPUSH
6691: LD_VAR 0 10
6695: PPUSH
6696: CALL_OW 74
6700: DIFF
6701: ST_TO_ADDR
// end ; end ; for unit in mechanics do
6702: LD_ADDR_VAR 0 8
6706: PUSH
6707: LD_VAR 0 12
6711: PUSH
6712: FOR_IN
6713: IFFALSE 6779
// begin if not IsInArea ( unit , retreatArea ) then
6715: LD_VAR 0 8
6719: PPUSH
6720: LD_VAR 0 5
6724: PPUSH
6725: CALL_OW 308
6729: NOT
6730: IFFALSE 6746
// ComMoveToArea ( unit , retreatArea ) ;
6732: LD_VAR 0 8
6736: PPUSH
6737: LD_VAR 0 5
6741: PPUSH
6742: CALL_OW 113
// if GetLives ( unit ) < 250 then
6746: LD_VAR 0 8
6750: PPUSH
6751: CALL_OW 256
6755: PUSH
6756: LD_INT 250
6758: LESS
6759: IFFALSE 6777
// mechanics = mechanics diff unit ;
6761: LD_ADDR_VAR 0 12
6765: PUSH
6766: LD_VAR 0 12
6770: PUSH
6771: LD_VAR 0 8
6775: DIFF
6776: ST_TO_ADDR
// end ;
6777: GO 6712
6779: POP
6780: POP
// end ;
6781: GO 6166
6783: POP
6784: POP
// until not attackUnits ;
6785: LD_VAR 0 9
6789: NOT
6790: IFFALSE 5975
// end ; wait ( 0 0$1 ) ;
6792: LD_INT 35
6794: PPUSH
6795: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
6799: LD_VAR 0 1
6803: PPUSH
6804: LD_INT 50
6806: PUSH
6807: EMPTY
6808: LIST
6809: PPUSH
6810: CALL_OW 72
6814: NOT
6815: IFFALSE 4798
// end ;
6817: LD_VAR 0 6
6821: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
6826: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
6827: LD_ADDR_VAR 0 5
6831: PUSH
6832: LD_VAR 0 2
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PUSH
6841: LD_INT 1
6843: ARRAY
6844: PUSH
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 1
6852: ARRAY
6853: PUSH
6854: LD_INT 2
6856: ARRAY
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: ST_TO_ADDR
// for i := 2 to path do
6862: LD_ADDR_VAR 0 4
6866: PUSH
6867: DOUBLE
6868: LD_INT 2
6870: DEC
6871: ST_TO_ADDR
6872: LD_VAR 0 2
6876: PUSH
6877: FOR_TO
6878: IFFALSE 7018
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_VAR 0 2
6889: PUSH
6890: LD_VAR 0 4
6894: ARRAY
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_VAR 0 2
6904: PUSH
6905: LD_VAR 0 4
6909: ARRAY
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: CALL_OW 297
6919: PUSH
6920: LD_VAR 0 1
6924: PPUSH
6925: LD_VAR 0 5
6929: PUSH
6930: LD_INT 1
6932: ARRAY
6933: PPUSH
6934: LD_VAR 0 5
6938: PUSH
6939: LD_INT 2
6941: ARRAY
6942: PPUSH
6943: CALL_OW 297
6947: LESS
6948: IFFALSE 7016
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
6950: LD_ADDR_VAR 0 5
6954: PUSH
6955: LD_VAR 0 5
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PUSH
6968: LD_VAR 0 4
6972: ARRAY
6973: PUSH
6974: LD_INT 1
6976: ARRAY
6977: PPUSH
6978: CALL_OW 1
6982: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
6983: LD_ADDR_VAR 0 5
6987: PUSH
6988: LD_VAR 0 5
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: LD_VAR 0 2
7000: PUSH
7001: LD_VAR 0 4
7005: ARRAY
7006: PUSH
7007: LD_INT 2
7009: ARRAY
7010: PPUSH
7011: CALL_OW 1
7015: ST_TO_ADDR
// end ; end ;
7016: GO 6877
7018: POP
7019: POP
// result = nearPosition ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_VAR 0 5
7029: ST_TO_ADDR
// end ;
7030: LD_VAR 0 3
7034: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7035: LD_EXP 57
7039: PPUSH
7040: CALL_OW 274
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: CALL_OW 275
7052: PUSH
7053: LD_INT 0
7055: GREATER
7056: IFFALSE 7162
7058: GO 7060
7060: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7061: LD_EXP 56
7065: PPUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 2
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 72
7080: PPUSH
7081: LD_INT 31
7083: PPUSH
7084: LD_INT 105
7086: PPUSH
7087: LD_INT 51
7089: PPUSH
7090: LD_INT 3
7092: PPUSH
7093: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7097: LD_EXP 56
7101: PPUSH
7102: LD_INT 25
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 72
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 114
7122: PPUSH
7123: LD_INT 58
7125: PPUSH
7126: LD_INT 3
7128: PPUSH
7129: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7133: LD_EXP 56
7137: PPUSH
7138: LD_INT 25
7140: PUSH
7141: LD_INT 2
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 72
7152: PPUSH
7153: LD_EXP 57
7157: PPUSH
7158: CALL_OW 180
// end ; end_of_file
7162: END
// export function Lose_Burlak ; begin
7163: LD_INT 0
7165: PPUSH
// YouLost ( Burlak ) ;
7166: LD_STRING Burlak
7168: PPUSH
7169: CALL_OW 104
// end ;
7173: LD_VAR 0 1
7177: RET
// export function Lose_Gaydar ; begin
7178: LD_INT 0
7180: PPUSH
// YouLost ( Gaydar ) ;
7181: LD_STRING Gaydar
7183: PPUSH
7184: CALL_OW 104
// end ;
7188: LD_VAR 0 1
7192: RET
// export function Lose_SelfAttack ; begin
7193: LD_INT 0
7195: PPUSH
// YouLost ( SelfAttack ) ;
7196: LD_STRING SelfAttack
7198: PPUSH
7199: CALL_OW 104
// end ;
7203: LD_VAR 0 1
7207: RET
// export function Lose_Arrest ; begin
7208: LD_INT 0
7210: PPUSH
// YouLost ( Arrest ) ;
7211: LD_STRING Arrest
7213: PPUSH
7214: CALL_OW 104
// end ;
7218: LD_VAR 0 1
7222: RET
// export function Lose_ArabBreakthrough ; begin
7223: LD_INT 0
7225: PPUSH
// YouLost ( ArabBreakthrough ) ;
7226: LD_STRING ArabBreakthrough
7228: PPUSH
7229: CALL_OW 104
// end ;
7233: LD_VAR 0 1
7237: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7238: LD_EXP 6
7242: NOT
7243: PUSH
7244: LD_INT 22
7246: PUSH
7247: LD_INT 3
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 21
7256: PUSH
7257: LD_INT 1
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 25
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: PPUSH
7279: CALL_OW 69
7283: NOT
7284: AND
7285: PUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 30
7308: PUSH
7309: LD_INT 0
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 69
7325: NOT
7326: AND
7327: IFFALSE 7340
7329: GO 7331
7331: DISABLE
// begin enable ;
7332: ENABLE
// YouLost ( Engineer ) ;
7333: LD_STRING Engineer
7335: PPUSH
7336: CALL_OW 104
// end ; end_of_file
7340: END
// export function FinishMission ; begin
7341: LD_INT 0
7343: PPUSH
// SetRewards ;
7344: CALL 7365 0 0
// SavePlayerCharacters ;
7348: CALL 7790 0 0
// SaveGlobalVariables ;
7352: CALL 8018 0 0
// YouWin ;
7356: CALL_OW 103
// end ;
7360: LD_VAR 0 1
7364: RET
// function SetRewards ; var unitsToReward ; begin
7365: LD_INT 0
7367: PPUSH
7368: PPUSH
// SetAchievements ;
7369: CALL 18138 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7373: LD_INT 22
7375: PUSH
7376: LD_INT 3
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 21
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PPUSH
7397: CALL_OW 69
7401: NOT
7402: IFFALSE 7416
// AddMedal ( Dismantle , 1 ) else
7404: LD_STRING Dismantle
7406: PPUSH
7407: LD_INT 1
7409: PPUSH
7410: CALL_OW 101
7414: GO 7427
// AddMedal ( Dismantle , - 1 ) ;
7416: LD_STRING Dismantle
7418: PPUSH
7419: LD_INT 1
7421: NEG
7422: PPUSH
7423: CALL_OW 101
// if killedArabianUnits > 30 then
7427: LD_EXP 21
7431: PUSH
7432: LD_INT 30
7434: GREATER
7435: IFFALSE 7457
// begin AddMedal ( EnemyLosses , 1 ) ;
7437: LD_STRING EnemyLosses
7439: PPUSH
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 101
// heikeHeavyLosses = true ;
7447: LD_ADDR_EXP 4
7451: PUSH
7452: LD_INT 1
7454: ST_TO_ADDR
// end else
7455: GO 7468
// AddMedal ( EnemyLosses , - 1 ) ;
7457: LD_STRING EnemyLosses
7459: PPUSH
7460: LD_INT 1
7462: NEG
7463: PPUSH
7464: CALL_OW 101
// if not lostUnits then
7468: LD_EXP 23
7472: NOT
7473: IFFALSE 7487
// AddMedal ( LittleLosses , 1 ) else
7475: LD_STRING LittleLosses
7477: PPUSH
7478: LD_INT 1
7480: PPUSH
7481: CALL_OW 101
7485: GO 7498
// AddMedal ( LittleLosses , - 1 ) ;
7487: LD_STRING LittleLosses
7489: PPUSH
7490: LD_INT 1
7492: NEG
7493: PPUSH
7494: CALL_OW 101
// GiveMedals ( Main ) ;
7498: LD_STRING Main
7500: PPUSH
7501: CALL_OW 102
// unitsToReward = [ ] ;
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: EMPTY
7511: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7512: LD_EXP 41
7516: PPUSH
7517: CALL_OW 255
7521: PUSH
7522: LD_INT 3
7524: EQUAL
7525: IFFALSE 7543
// unitsToReward = unitsToReward ^ Burlak ;
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: LD_VAR 0 2
7536: PUSH
7537: LD_EXP 41
7541: ADD
7542: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7543: LD_EXP 42
7547: PPUSH
7548: CALL_OW 255
7552: PUSH
7553: LD_INT 3
7555: EQUAL
7556: IFFALSE 7574
// unitsToReward = unitsToReward ^ Gnyevko ;
7558: LD_ADDR_VAR 0 2
7562: PUSH
7563: LD_VAR 0 2
7567: PUSH
7568: LD_EXP 42
7572: ADD
7573: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7574: LD_EXP 43
7578: PPUSH
7579: CALL_OW 255
7583: PUSH
7584: LD_INT 3
7586: EQUAL
7587: IFFALSE 7605
// unitsToReward = unitsToReward ^ Kirilenkova ;
7589: LD_ADDR_VAR 0 2
7593: PUSH
7594: LD_VAR 0 2
7598: PUSH
7599: LD_EXP 43
7603: ADD
7604: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7605: LD_EXP 44
7609: PPUSH
7610: CALL_OW 255
7614: PUSH
7615: LD_INT 3
7617: EQUAL
7618: IFFALSE 7636
// unitsToReward = unitsToReward ^ Kovalyuk ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_VAR 0 2
7629: PUSH
7630: LD_EXP 44
7634: ADD
7635: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7636: LD_EXP 45
7640: PPUSH
7641: CALL_OW 255
7645: PUSH
7646: LD_INT 3
7648: EQUAL
7649: IFFALSE 7667
// unitsToReward = unitsToReward ^ Belkov ;
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_VAR 0 2
7660: PUSH
7661: LD_EXP 45
7665: ADD
7666: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
7667: LD_EXP 46
7671: PPUSH
7672: CALL_OW 255
7676: PUSH
7677: LD_INT 3
7679: EQUAL
7680: IFFALSE 7698
// unitsToReward = unitsToReward ^ Belkov2 ;
7682: LD_ADDR_VAR 0 2
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: LD_EXP 46
7696: ADD
7697: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
7698: LD_EXP 47
7702: PPUSH
7703: CALL_OW 255
7707: PUSH
7708: LD_INT 3
7710: EQUAL
7711: IFFALSE 7729
// unitsToReward = unitsToReward ^ Scholtze ;
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: LD_VAR 0 2
7722: PUSH
7723: LD_EXP 47
7727: ADD
7728: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 255
7738: PUSH
7739: LD_INT 3
7741: EQUAL
7742: IFFALSE 7760
// unitsToReward = unitsToReward ^ Kuzmov ;
7744: LD_ADDR_VAR 0 2
7748: PUSH
7749: LD_VAR 0 2
7753: PUSH
7754: LD_EXP 48
7758: ADD
7759: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
7760: LD_ADDR_VAR 0 2
7764: PUSH
7765: LD_VAR 0 2
7769: PUSH
7770: LD_EXP 60
7774: ADD
7775: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: CALL_OW 43
// end ;
7785: LD_VAR 0 1
7789: RET
// function SavePlayerCharacters ; var othersYour ; begin
7790: LD_INT 0
7792: PPUSH
7793: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
7794: LD_EXP 41
7798: PPUSH
7799: LD_STRING 04_Burlak
7801: PPUSH
7802: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
7806: LD_EXP 42
7810: PPUSH
7811: CALL_OW 255
7815: PUSH
7816: LD_INT 3
7818: EQUAL
7819: IFFALSE 7833
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
7821: LD_EXP 42
7825: PPUSH
7826: LD_STRING 04_Gnyevko
7828: PPUSH
7829: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
7833: LD_EXP 44
7837: PPUSH
7838: CALL_OW 255
7842: PUSH
7843: LD_INT 3
7845: EQUAL
7846: IFFALSE 7860
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
7848: LD_EXP 44
7852: PPUSH
7853: LD_STRING 04_Kovalyuk
7855: PPUSH
7856: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
7860: LD_EXP 43
7864: PPUSH
7865: CALL_OW 255
7869: PUSH
7870: LD_INT 3
7872: EQUAL
7873: IFFALSE 7887
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
7875: LD_EXP 43
7879: PPUSH
7880: LD_STRING 04_Kirilenkova
7882: PPUSH
7883: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
7887: LD_EXP 47
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7914
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
7902: LD_EXP 47
7906: PPUSH
7907: LD_STRING 04_Scholtze
7909: PPUSH
7910: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
7914: LD_EXP 45
7918: PPUSH
7919: CALL_OW 255
7923: PUSH
7924: LD_INT 3
7926: EQUAL
7927: IFFALSE 7941
// SaveCharacters ( Belkov , 04_Belkov ) ;
7929: LD_EXP 45
7933: PPUSH
7934: LD_STRING 04_Belkov
7936: PPUSH
7937: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
7941: LD_EXP 46
7945: PPUSH
7946: CALL_OW 255
7950: PUSH
7951: LD_INT 3
7953: EQUAL
7954: IFFALSE 7968
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
7956: LD_EXP 46
7960: PPUSH
7961: LD_STRING 04_Belkov2
7963: PPUSH
7964: CALL_OW 38
// if IsOK ( Kuzmov ) then
7968: LD_EXP 48
7972: PPUSH
7973: CALL_OW 302
7977: IFFALSE 7991
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
7979: LD_EXP 48
7983: PPUSH
7984: LD_STRING 04_Kuzmov
7986: PPUSH
7987: CALL_OW 38
// othersYour = randomsToSave ;
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: LD_EXP 60
8000: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8001: LD_EXP 60
8005: PPUSH
8006: LD_STRING 04_other_survivors
8008: PPUSH
8009: CALL_OW 38
// end ;
8013: LD_VAR 0 1
8017: RET
// function SaveGlobalVariables ; begin
8018: LD_INT 0
8020: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8021: LD_EXP 4
8025: PPUSH
8026: LD_STRING 04_HeikeHeavyLosses_1
8028: PPUSH
8029: CALL_OW 39
// end ; end_of_file
8033: LD_VAR 0 1
8037: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8038: LD_VAR 0 1
8042: PPUSH
8043: CALL_OW 255
8047: PUSH
8048: LD_INT 3
8050: EQUAL
8051: PUSH
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL_OW 266
8061: PUSH
8062: LD_INT 0
8064: EQUAL
8065: AND
8066: PUSH
8067: LD_VAR 0 1
8071: PPUSH
8072: LD_INT 5
8074: PPUSH
8075: CALL_OW 308
8079: NOT
8080: AND
8081: IFFALSE 8092
// Dial_DepotInWrongPlace ( building ) ;
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL 10620 0 1
// end ;
8092: PPOPN 2
8094: END
// on BuildingComplete ( building ) do var i , cargo ;
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8099: LD_VAR 0 1
8103: PPUSH
8104: CALL_OW 255
8108: PUSH
8109: LD_INT 3
8111: EQUAL
8112: PUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 266
8122: PUSH
8123: LD_INT 0
8125: EQUAL
8126: AND
8127: PUSH
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 308
8140: AND
8141: PUSH
8142: LD_EXP 7
8146: NOT
8147: AND
8148: PUSH
8149: LD_EXP 8
8153: NOT
8154: AND
8155: IFFALSE 8181
// begin namedBase = true ;
8157: LD_ADDR_EXP 8
8161: PUSH
8162: LD_INT 1
8164: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_STRING chuikov
8172: PPUSH
8173: CALL_OW 500
// Dial_FinishDepot ;
8177: CALL 10894 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 32
8207: EQUAL
8208: AND
8209: IFFALSE 8225
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8211: LD_ADDR_EXP 24
8215: PUSH
8216: LD_EXP 24
8220: PUSH
8221: LD_INT 1
8223: PLUS
8224: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8225: LD_VAR 0 1
8229: PPUSH
8230: CALL_OW 255
8234: PUSH
8235: LD_INT 6
8237: EQUAL
8238: PUSH
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 266
8248: PUSH
8249: LD_INT 0
8251: EQUAL
8252: AND
8253: IFFALSE 8452
// begin secondBaseDepot = building ;
8255: LD_ADDR_EXP 57
8259: PUSH
8260: LD_VAR 0 1
8264: ST_TO_ADDR
// uc_side = 6 ;
8265: LD_ADDR_OWVAR 20
8269: PUSH
8270: LD_INT 6
8272: ST_TO_ADDR
// uc_nation = nation_russian ;
8273: LD_ADDR_OWVAR 21
8277: PUSH
8278: LD_INT 3
8280: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8281: LD_ADDR_OWVAR 37
8285: PUSH
8286: LD_INT 21
8288: ST_TO_ADDR
// vc_control = control_manual ;
8289: LD_ADDR_OWVAR 38
8293: PUSH
8294: LD_INT 1
8296: ST_TO_ADDR
// vc_engine = engine_combustion ;
8297: LD_ADDR_OWVAR 39
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8305: LD_ADDR_OWVAR 40
8309: PUSH
8310: LD_INT 51
8312: ST_TO_ADDR
// cargo = CreateVehicle ;
8313: LD_ADDR_VAR 0 3
8317: PUSH
8318: CALL_OW 45
8322: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8323: LD_VAR 0 3
8327: PPUSH
8328: LD_INT 3
8330: PPUSH
8331: LD_INT 0
8333: PPUSH
8334: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8338: LD_VAR 0 3
8342: PPUSH
8343: LD_INT 1
8345: PPUSH
8346: LD_INT 100
8348: PPUSH
8349: CALL_OW 291
// ComGive ( cargo , building ) ;
8353: LD_VAR 0 3
8357: PPUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8367: LD_INT 0
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8377: CALL_OW 44
8381: PPUSH
8382: LD_VAR 0 3
8386: PPUSH
8387: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8391: LD_ADDR_VAR 0 2
8395: PUSH
8396: DOUBLE
8397: LD_INT 10
8399: DEC
8400: ST_TO_ADDR
8401: LD_EXP 33
8405: PUSH
8406: FOR_TO
8407: IFFALSE 8450
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8409: LD_VAR 0 3
8413: PPUSH
8414: LD_EXP 33
8418: PUSH
8419: LD_VAR 0 2
8423: ARRAY
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PPUSH
8429: LD_EXP 33
8433: PUSH
8434: LD_VAR 0 2
8438: ARRAY
8439: PUSH
8440: LD_INT 2
8442: ARRAY
8443: PPUSH
8444: CALL_OW 171
8448: GO 8406
8450: POP
8451: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8452: LD_VAR 0 1
8456: PPUSH
8457: CALL_OW 255
8461: PUSH
8462: LD_INT 6
8464: EQUAL
8465: PUSH
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 266
8475: PUSH
8476: LD_INT 31
8478: EQUAL
8479: AND
8480: IFFALSE 8525
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8482: LD_EXP 56
8486: PPUSH
8487: LD_INT 25
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 56
8499: PUSH
8500: EMPTY
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 72
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 120
// end ;
8525: PPOPN 3
8527: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 266
8537: PUSH
8538: LD_INT 7
8540: EQUAL
8541: PUSH
8542: LD_EXP 14
8546: NOT
8547: AND
8548: IFFALSE 8554
// Dial_LabUpgraded ;
8550: CALL 11214 0 0
// end ;
8554: PPOPN 1
8556: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8557: LD_VAR 0 1
8561: PUSH
8562: LD_INT 3
8564: EQUAL
8565: PUSH
8566: LD_VAR 0 2
8570: PUSH
8571: LD_INT 2
8573: EQUAL
8574: AND
8575: PUSH
8576: LD_VAR 0 1
8580: PUSH
8581: LD_INT 2
8583: EQUAL
8584: PUSH
8585: LD_VAR 0 2
8589: PUSH
8590: LD_INT 3
8592: EQUAL
8593: AND
8594: OR
8595: IFFALSE 8617
// begin if dial_contactBlock then
8597: LD_EXP 15
8601: IFFALSE 8605
// exit ;
8603: GO 8661
// dial_contactBlock = true ;
8605: LD_ADDR_EXP 15
8609: PUSH
8610: LD_INT 1
8612: ST_TO_ADDR
// Dial_Contact ;
8613: CALL 13439 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8617: LD_VAR 0 1
8621: PUSH
8622: LD_INT 3
8624: EQUAL
8625: PUSH
8626: LD_VAR 0 2
8630: PUSH
8631: LD_INT 6
8633: EQUAL
8634: AND
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: LD_INT 6
8643: EQUAL
8644: PUSH
8645: LD_VAR 0 2
8649: PUSH
8650: LD_INT 3
8652: EQUAL
8653: AND
8654: OR
8655: IFFALSE 8661
// Lose_SelfAttack ;
8657: CALL 7193 0 0
// end ;
8661: PPOPN 2
8663: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
8664: LD_VAR 0 1
8668: PUSH
8669: LD_EXP 41
8673: EQUAL
8674: IFFALSE 8680
// Lose_Burlak ;
8676: CALL 7163 0 0
// if unit = Gaydar then
8680: LD_VAR 0 1
8684: PUSH
8685: LD_EXP 53
8689: EQUAL
8690: IFFALSE 8696
// Lose_Gaydar ;
8692: CALL 7178 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 255
8705: PUSH
8706: LD_INT 3
8708: EQUAL
8709: PUSH
8710: LD_VAR 0 1
8714: PPUSH
8715: CALL_OW 247
8719: PUSH
8720: LD_INT 1
8722: EQUAL
8723: AND
8724: IFFALSE 8740
// lostUnits = lostUnits + 1 ;
8726: LD_ADDR_EXP 23
8730: PUSH
8731: LD_EXP 23
8735: PUSH
8736: LD_INT 1
8738: PLUS
8739: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
8740: LD_VAR 0 1
8744: PPUSH
8745: CALL_OW 255
8749: PUSH
8750: LD_INT 2
8752: EQUAL
8753: PUSH
8754: LD_VAR 0 1
8758: PPUSH
8759: CALL_OW 247
8763: PUSH
8764: LD_INT 1
8766: EQUAL
8767: AND
8768: PUSH
8769: LD_EXP 53
8773: PPUSH
8774: CALL_OW 305
8778: NOT
8779: AND
8780: IFFALSE 8796
// killedArabianUnits = killedArabianUnits + 1 ;
8782: LD_ADDR_EXP 21
8786: PUSH
8787: LD_EXP 21
8791: PUSH
8792: LD_INT 1
8794: PLUS
8795: ST_TO_ADDR
// if unit in firstAttackGroup then
8796: LD_VAR 0 1
8800: PUSH
8801: LD_EXP 62
8805: IN
8806: IFFALSE 8824
// firstAttackGroup = firstAttackGroup diff unit ;
8808: LD_ADDR_EXP 62
8812: PUSH
8813: LD_EXP 62
8817: PUSH
8818: LD_VAR 0 1
8822: DIFF
8823: ST_TO_ADDR
// end ;
8824: PPOPN 1
8826: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
8827: LD_VAR 0 2
8831: PUSH
8832: LD_INT 6
8834: EQUAL
8835: IFFALSE 8849
// SetSide ( building , 6 ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 6
8844: PPUSH
8845: CALL_OW 235
// end ;
8849: PPOPN 3
8851: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
8852: LD_INT 0
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
8861: LD_ADDR_VAR 0 2
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 2
8878: PUSH
8879: LD_INT 34
8881: PUSH
8882: LD_INT 51
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 21
8891: PUSH
8892: LD_INT 1
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PPUSH
8908: CALL_OW 69
8912: PUSH
8913: FOR_IN
8914: IFFALSE 9036
// if GetTaskList ( i ) > 0 then
8916: LD_VAR 0 2
8920: PPUSH
8921: CALL_OW 437
8925: PUSH
8926: LD_INT 0
8928: GREATER
8929: IFFALSE 9034
// for j = 1 to GetTaskList ( i ) do
8931: LD_ADDR_VAR 0 3
8935: PUSH
8936: DOUBLE
8937: LD_INT 1
8939: DEC
8940: ST_TO_ADDR
8941: LD_VAR 0 2
8945: PPUSH
8946: CALL_OW 437
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9032
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
8954: LD_ADDR_VAR 0 4
8958: PUSH
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 437
8968: PUSH
8969: LD_VAR 0 3
8973: ARRAY
8974: PUSH
8975: LD_INT 4
8977: ARRAY
8978: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
8979: LD_VAR 0 4
8983: PPUSH
8984: CALL_OW 255
8988: PUSH
8989: LD_INT 6
8991: EQUAL
8992: PUSH
8993: LD_VAR 0 2
8997: PPUSH
8998: CALL_OW 437
9002: PUSH
9003: LD_VAR 0 3
9007: ARRAY
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PUSH
9013: LD_STRING <
9015: EQUAL
9016: AND
9017: IFFALSE 9030
// SetTaskList ( i , [ ] ) ;
9019: LD_VAR 0 2
9023: PPUSH
9024: EMPTY
9025: PPUSH
9026: CALL_OW 446
// end ;
9030: GO 8951
9032: POP
9033: POP
9034: GO 8913
9036: POP
9037: POP
// end ; end_of_file
9038: PPOPN 8
9040: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9041: LD_INT 0
9043: PPUSH
9044: PPUSH
// if exist_mode then
9045: LD_VAR 0 2
9049: IFFALSE 9074
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9051: LD_ADDR_VAR 0 5
9055: PUSH
9056: LD_EXP 29
9060: PUSH
9061: LD_VAR 0 1
9065: STR
9066: PPUSH
9067: CALL_OW 34
9071: ST_TO_ADDR
9072: GO 9089
// unit := NewCharacter ( ident ) ;
9074: LD_ADDR_VAR 0 5
9078: PUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 25
9088: ST_TO_ADDR
// if class then
9089: LD_VAR 0 3
9093: IFFALSE 9109
// SetClass ( unit , class ) ;
9095: LD_VAR 0 5
9099: PPUSH
9100: LD_VAR 0 3
9104: PPUSH
9105: CALL_OW 336
// result := unit ;
9109: LD_ADDR_VAR 0 4
9113: PUSH
9114: LD_VAR 0 5
9118: ST_TO_ADDR
// end ;
9119: LD_VAR 0 4
9123: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9124: LD_INT 0
9126: PPUSH
9127: PPUSH
// for unit in units do
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: LD_VAR 0 1
9137: PUSH
9138: FOR_IN
9139: IFFALSE 9162
// PlaceUnitArea ( unit , area , spawnMode ) ;
9141: LD_VAR 0 5
9145: PPUSH
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: CALL_OW 49
9160: GO 9138
9162: POP
9163: POP
// end ;
9164: LD_VAR 0 4
9168: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9169: LD_INT 0
9171: PPUSH
9172: PPUSH
9173: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9174: LD_ADDR_VAR 0 1
9178: PUSH
9179: LD_VAR 0 1
9183: PUSH
9184: LD_EXP 41
9188: PUSH
9189: LD_EXP 42
9193: PUSH
9194: LD_EXP 45
9198: PUSH
9199: LD_EXP 46
9203: PUSH
9204: LD_EXP 43
9208: PUSH
9209: LD_EXP 44
9213: PUSH
9214: LD_EXP 47
9218: PUSH
9219: LD_EXP 48
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: DIFF
9234: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9235: LD_ADDR_VAR 0 7
9239: PUSH
9240: LD_VAR 0 1
9244: PUSH
9245: LD_INT 1
9247: PPUSH
9248: LD_VAR 0 1
9252: PPUSH
9253: CALL_OW 12
9257: ARRAY
9258: ST_TO_ADDR
// if radio then
9259: LD_VAR 0 4
9263: IFFALSE 9312
// begin if GetSex ( speaker ) = sex_male then
9265: LD_VAR 0 7
9269: PPUSH
9270: CALL_OW 258
9274: PUSH
9275: LD_INT 1
9277: EQUAL
9278: IFFALSE 9296
// SayRadio ( speaker , dialogMID ) else
9280: LD_VAR 0 7
9284: PPUSH
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 94
9294: GO 9310
// SayRadio ( speaker , dialogFID ) ;
9296: LD_VAR 0 7
9300: PPUSH
9301: LD_VAR 0 3
9305: PPUSH
9306: CALL_OW 94
// end else
9310: GO 9357
// begin if GetSex ( speaker ) = sex_male then
9312: LD_VAR 0 7
9316: PPUSH
9317: CALL_OW 258
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: IFFALSE 9343
// Say ( speaker , dialogMID ) else
9327: LD_VAR 0 7
9331: PPUSH
9332: LD_VAR 0 2
9336: PPUSH
9337: CALL_OW 88
9341: GO 9357
// Say ( speaker , dialogFID ) ;
9343: LD_VAR 0 7
9347: PPUSH
9348: LD_VAR 0 3
9352: PPUSH
9353: CALL_OW 88
// end ; result := speaker ;
9357: LD_ADDR_VAR 0 5
9361: PUSH
9362: LD_VAR 0 7
9366: ST_TO_ADDR
// end ;
9367: LD_VAR 0 5
9371: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9372: LD_INT 0
9374: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9375: LD_VAR 0 1
9379: PPUSH
9380: CALL_OW 255
9384: PUSH
9385: LD_VAR 0 3
9389: EQUAL
9390: PUSH
9391: LD_VAR 0 1
9395: PPUSH
9396: CALL_OW 302
9400: AND
9401: IFFALSE 9423
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9403: LD_VAR 0 1
9407: PPUSH
9408: LD_EXP 28
9412: PUSH
9413: LD_VAR 0 2
9417: STR
9418: PPUSH
9419: CALL_OW 38
// end ;
9423: LD_VAR 0 4
9427: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
// resultCharactersToSave = [ ] ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: EMPTY
9439: ST_TO_ADDR
// for unit in characters do
9440: LD_ADDR_VAR 0 5
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9499
// if GetSide ( unit ) = side and IsOK ( unit ) then
9453: LD_VAR 0 5
9457: PPUSH
9458: CALL_OW 255
9462: PUSH
9463: LD_VAR 0 3
9467: EQUAL
9468: PUSH
9469: LD_VAR 0 5
9473: PPUSH
9474: CALL_OW 302
9478: AND
9479: IFFALSE 9497
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9481: LD_ADDR_VAR 0 6
9485: PUSH
9486: LD_VAR 0 6
9490: PUSH
9491: LD_VAR 0 5
9495: ADD
9496: ST_TO_ADDR
9497: GO 9450
9499: POP
9500: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9501: LD_VAR 0 6
9505: PPUSH
9506: LD_EXP 28
9510: PUSH
9511: LD_VAR 0 2
9515: STR
9516: PPUSH
9517: CALL_OW 38
// end ;
9521: LD_VAR 0 4
9525: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9533: LD_ADDR_VAR 0 3
9537: PUSH
9538: LD_INT 22
9540: PUSH
9541: LD_INT 3
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 21
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 69
9573: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9574: LD_ADDR_VAR 0 3
9578: PUSH
9579: LD_VAR 0 3
9583: PUSH
9584: LD_EXP 41
9588: DIFF
9589: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: LD_VAR 0 3
9599: PUSH
9600: LD_EXP 51
9604: DIFF
9605: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9606: LD_ADDR_VAR 0 4
9610: PUSH
9611: LD_STRING text
9613: PPUSH
9614: LD_INT 8
9616: PPUSH
9617: LD_INT 8
9619: PPUSH
9620: LD_INT -5
9622: PUSH
9623: LD_EXP 41
9627: PUSH
9628: LD_INT -6
9630: PUSH
9631: LD_INT -2
9633: PUSH
9634: LD_INT -3
9636: PUSH
9637: LD_INT -5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_VAR 0 3
9652: ADD
9653: PUSH
9654: LD_INT -6
9656: PUSH
9657: LD_INT -4
9659: PUSH
9660: LD_EXP 51
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: ADD
9670: PPUSH
9671: LD_INT 1
9673: PUSH
9674: LD_INT 3
9676: PUSH
9677: LD_INT 2
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 42
9700: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
9701: LD_VAR 0 3
9705: PPUSH
9706: LD_INT 6
9708: PPUSH
9709: CALL_OW 235
// SetSide ( Popov , 6 ) ;
9713: LD_EXP 51
9717: PPUSH
9718: LD_INT 6
9720: PPUSH
9721: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
9725: LD_VAR 0 4
9729: PPUSH
9730: LD_INT 3
9732: PPUSH
9733: CALL_OW 235
// burlakTeam = selectedPeople ;
9737: LD_ADDR_EXP 54
9741: PUSH
9742: LD_VAR 0 4
9746: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
9747: LD_ADDR_EXP 55
9751: PUSH
9752: LD_INT 22
9754: PUSH
9755: LD_INT 6
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PUSH
9762: LD_INT 21
9764: PUSH
9765: LD_INT 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PPUSH
9776: CALL_OW 69
9780: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
9781: LD_ADDR_EXP 55
9785: PUSH
9786: LD_EXP 55
9790: PUSH
9791: LD_EXP 48
9795: DIFF
9796: ST_TO_ADDR
// if not Gnyevko in selectedPeople then
9797: LD_EXP 42
9801: PUSH
9802: LD_VAR 0 4
9806: IN
9807: NOT
9808: IFFALSE 9825
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
9810: LD_EXP 42
9814: PPUSH
9815: LD_STRING Gnyevko
9817: PPUSH
9818: LD_INT 6
9820: PPUSH
9821: CALL 9372 0 3
// if not Kovalyuk in selectedPeople then
9825: LD_EXP 44
9829: PUSH
9830: LD_VAR 0 4
9834: IN
9835: NOT
9836: IFFALSE 9853
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
9838: LD_EXP 44
9842: PPUSH
9843: LD_STRING Kovalyuk
9845: PPUSH
9846: LD_INT 6
9848: PPUSH
9849: CALL 9372 0 3
// if not Kirilenkova in selectedPeople then
9853: LD_EXP 43
9857: PUSH
9858: LD_VAR 0 4
9862: IN
9863: NOT
9864: IFFALSE 9881
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
9866: LD_EXP 43
9870: PPUSH
9871: LD_STRING Kirilenkova
9873: PPUSH
9874: LD_INT 6
9876: PPUSH
9877: CALL 9372 0 3
// if not Scholtze in selectedPeople then
9881: LD_EXP 47
9885: PUSH
9886: LD_VAR 0 4
9890: IN
9891: NOT
9892: IFFALSE 9909
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
9894: LD_EXP 47
9898: PPUSH
9899: LD_STRING Scholtze
9901: PPUSH
9902: LD_INT 6
9904: PPUSH
9905: CALL 9372 0 3
// if not Belkov in selectedPeople then
9909: LD_EXP 45
9913: PUSH
9914: LD_VAR 0 4
9918: IN
9919: NOT
9920: IFFALSE 9937
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
9922: LD_EXP 45
9926: PPUSH
9927: LD_STRING Belkov
9929: PPUSH
9930: LD_INT 6
9932: PPUSH
9933: CALL 9372 0 3
// if not Belkov2 in selectedPeople then
9937: LD_EXP 46
9941: PUSH
9942: LD_VAR 0 4
9946: IN
9947: NOT
9948: IFFALSE 9965
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
9950: LD_EXP 46
9954: PPUSH
9955: LD_STRING Belkov2
9957: PPUSH
9958: LD_INT 6
9960: PPUSH
9961: CALL 9372 0 3
// others = popovTeam diff Popov ;
9965: LD_ADDR_VAR 0 5
9969: PUSH
9970: LD_EXP 55
9974: PUSH
9975: LD_EXP 51
9979: DIFF
9980: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
9981: LD_VAR 0 5
9985: PPUSH
9986: LD_STRING other_survivors_with_popov
9988: PPUSH
9989: LD_INT 6
9991: PPUSH
9992: CALL 9428 0 3
// end ; end_of_file
9996: LD_VAR 0 1
10000: RET
// export function MissionIntro ; var i , unit ; begin
10001: LD_INT 0
10003: PPUSH
10004: PPUSH
10005: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10006: LD_EXP 41
10010: PPUSH
10011: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10015: LD_EXP 58
10019: PPUSH
10020: LD_STRING D1-RSol1-1
10022: PPUSH
10023: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10027: LD_EXP 52
10031: PPUSH
10032: LD_STRING D1-Pla-1
10034: PPUSH
10035: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10039: LD_EXP 41
10043: PPUSH
10044: LD_STRING D1-Bur-1
10046: PPUSH
10047: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10051: LD_EXP 52
10055: PPUSH
10056: LD_STRING D1-Pla-2
10058: PPUSH
10059: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10063: LD_EXP 41
10067: PPUSH
10068: LD_STRING D1-Bur-2
10070: PPUSH
10071: CALL_OW 88
// SelectCharacters ;
10075: CALL 9526 0 0
// InGameOff ;
10079: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10083: LD_STRING M1
10085: PPUSH
10086: CALL_OW 337
// SaveForQuickRestart ;
10090: CALL_OW 22
// for unit in popovTeam do
10094: LD_ADDR_VAR 0 3
10098: PUSH
10099: LD_EXP 55
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10177
// begin for i := 3 to russianCargoPath1 do
10107: LD_ADDR_VAR 0 2
10111: PUSH
10112: DOUBLE
10113: LD_INT 3
10115: DEC
10116: ST_TO_ADDR
10117: LD_EXP 33
10121: PUSH
10122: FOR_TO
10123: IFFALSE 10166
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_EXP 33
10134: PUSH
10135: LD_VAR 0 2
10139: ARRAY
10140: PUSH
10141: LD_INT 1
10143: ARRAY
10144: PPUSH
10145: LD_EXP 33
10149: PUSH
10150: LD_VAR 0 2
10154: ARRAY
10155: PUSH
10156: LD_INT 2
10158: ARRAY
10159: PPUSH
10160: CALL_OW 171
10164: GO 10122
10166: POP
10167: POP
// wait ( 0 0$01 ) ;
10168: LD_INT 35
10170: PPUSH
10171: CALL_OW 67
// end ;
10175: GO 10104
10177: POP
10178: POP
// end ;
10179: LD_VAR 0 1
10183: RET
// every 0 0$1 do var unit , driver ;
10184: GO 10186
10186: DISABLE
10187: LD_INT 0
10189: PPUSH
10190: PPUSH
// begin enable ;
10191: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10192: LD_INT 4
10194: PPUSH
10195: LD_INT 22
10197: PUSH
10198: LD_INT 6
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 70
10209: NOT
10210: PUSH
10211: LD_INT 4
10213: PPUSH
10214: LD_INT 22
10216: PUSH
10217: LD_INT 3
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 2
10226: PUSH
10227: LD_INT 21
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 21
10239: PUSH
10240: LD_INT 2
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PPUSH
10256: CALL_OW 70
10260: NOT
10261: AND
10262: IFFALSE 10266
// exit ;
10264: GO 10617
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10266: LD_ADDR_VAR 0 1
10270: PUSH
10271: LD_INT 4
10273: PPUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 6
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 70
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10345
// begin RemoveUnit ( unit ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10301: LD_VAR 0 1
10305: PUSH
10306: LD_EXP 55
10310: IN
10311: NOT
10312: PUSH
10313: LD_VAR 0 1
10317: PPUSH
10318: CALL_OW 264
10322: PUSH
10323: LD_INT 51
10325: EQUAL
10326: AND
10327: IFFALSE 10343
// evacuatedCargos = evacuatedCargos + 1 ;
10329: LD_ADDR_EXP 9
10333: PUSH
10334: LD_EXP 9
10338: PUSH
10339: LD_INT 1
10341: PLUS
10342: ST_TO_ADDR
// end ;
10343: GO 10289
10345: POP
10346: POP
// if canExitMap then
10347: LD_EXP 5
10351: IFFALSE 10617
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10353: LD_ADDR_VAR 0 1
10357: PUSH
10358: LD_INT 4
10360: PPUSH
10361: LD_INT 22
10363: PUSH
10364: LD_INT 3
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 21
10376: PUSH
10377: LD_INT 1
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 21
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 70
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10615
// begin if GetType ( unit ) = unit_vehicle then
10411: LD_VAR 0 1
10415: PPUSH
10416: CALL_OW 247
10420: PUSH
10421: LD_INT 2
10423: EQUAL
10424: IFFALSE 10524
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 313
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PUSH
10440: LD_EXP 41
10444: PUSH
10445: LD_EXP 42
10449: PUSH
10450: LD_EXP 43
10454: PUSH
10455: LD_EXP 44
10459: PUSH
10460: LD_EXP 45
10464: PUSH
10465: LD_EXP 46
10469: PUSH
10470: LD_EXP 47
10474: PUSH
10475: LD_EXP 48
10479: PUSH
10480: LD_EXP 53
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: IN
10496: NOT
10497: IFFALSE 10524
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10499: LD_ADDR_EXP 60
10503: PUSH
10504: LD_EXP 60
10508: PUSH
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 313
10518: PUSH
10519: LD_INT 1
10521: ARRAY
10522: ADD
10523: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10524: LD_VAR 0 1
10528: PUSH
10529: LD_EXP 41
10533: PUSH
10534: LD_EXP 42
10538: PUSH
10539: LD_EXP 43
10543: PUSH
10544: LD_EXP 44
10548: PUSH
10549: LD_EXP 45
10553: PUSH
10554: LD_EXP 46
10558: PUSH
10559: LD_EXP 47
10563: PUSH
10564: LD_EXP 48
10568: PUSH
10569: LD_EXP 53
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: IN
10585: NOT
10586: IFFALSE 10604
// randomsToSave = randomsToSave ^ unit ;
10588: LD_ADDR_EXP 60
10592: PUSH
10593: LD_EXP 60
10597: PUSH
10598: LD_VAR 0 1
10602: ADD
10603: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 64
// end ;
10613: GO 10408
10615: POP
10616: POP
// end ;
10617: PPOPN 2
10619: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10624: LD_INT 22
10626: PUSH
10627: LD_INT 3
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 21
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 69
10652: PPUSH
10653: CALL_OW 139
// CenterNowOnUnits ( building ) ;
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL_OW 87
// InGameOn ;
10666: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
10670: LD_EXP 52
10674: PPUSH
10675: LD_STRING D2a-Pla-1
10677: PPUSH
10678: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
10682: LD_ADDR_VAR 0 3
10686: PUSH
10687: LD_INT 22
10689: PUSH
10690: LD_INT 3
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 25
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: PUSH
10727: FOR_IN
10728: IFFALSE 10766
// if GetDistUnits ( building , unit ) < 10 then
10730: LD_VAR 0 1
10734: PPUSH
10735: LD_VAR 0 3
10739: PPUSH
10740: CALL_OW 296
10744: PUSH
10745: LD_INT 10
10747: LESS
10748: IFFALSE 10764
// ComDismantle ( unit , building ) ;
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_VAR 0 1
10759: PPUSH
10760: CALL_OW 167
10764: GO 10727
10766: POP
10767: POP
// repeat wait ( 0 0$1 ) ;
10768: LD_INT 35
10770: PPUSH
10771: CALL_OW 67
// until not IsPlaced ( building ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 305
10784: NOT
10785: IFFALSE 10768
// InGameOff ;
10787: CALL_OW 9
// end ;
10791: LD_VAR 0 2
10795: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
10796: LD_EXP 48
10800: PPUSH
10801: CALL_OW 255
10805: PUSH
10806: LD_INT 6
10808: EQUAL
10809: IFFALSE 10891
10811: GO 10813
10813: DISABLE
10814: LD_INT 0
10816: PPUSH
// begin enable ;
10817: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10818: LD_ADDR_VAR 0 1
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 21
10835: PUSH
10836: LD_INT 1
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PPUSH
10847: CALL_OW 69
10851: PUSH
10852: FOR_IN
10853: IFFALSE 10889
// if GetDistUnits ( unit , Kuzmov ) < 9 then
10855: LD_VAR 0 1
10859: PPUSH
10860: LD_EXP 48
10864: PPUSH
10865: CALL_OW 296
10869: PUSH
10870: LD_INT 9
10872: LESS
10873: IFFALSE 10887
// SetSide ( Kuzmov , 3 ) ;
10875: LD_EXP 48
10879: PPUSH
10880: LD_INT 3
10882: PPUSH
10883: CALL_OW 235
10887: GO 10852
10889: POP
10890: POP
// end ;
10891: PPOPN 1
10893: END
// export function Dial_FinishDepot ; var i ; begin
10894: LD_INT 0
10896: PPUSH
10897: PPUSH
// startEvacuation = true ;
10898: LD_ADDR_EXP 7
10902: PUSH
10903: LD_INT 1
10905: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
10906: LD_STRING MOutBuild
10908: PPUSH
10909: CALL_OW 337
// uc_side = 6 ;
10913: LD_ADDR_OWVAR 20
10917: PUSH
10918: LD_INT 6
10920: ST_TO_ADDR
// uc_nation = 3 ;
10921: LD_ADDR_OWVAR 21
10925: PUSH
10926: LD_INT 3
10928: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
10929: LD_ADDR_OWVAR 37
10933: PUSH
10934: LD_INT 21
10936: ST_TO_ADDR
// vc_control = control_manual ;
10937: LD_ADDR_OWVAR 38
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// vc_engine = engine_combustion ;
10945: LD_ADDR_OWVAR 39
10949: PUSH
10950: LD_INT 1
10952: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
10953: LD_ADDR_OWVAR 40
10957: PUSH
10958: LD_INT 51
10960: ST_TO_ADDR
// firstCargo = CreateVehicle ;
10961: LD_ADDR_EXP 59
10965: PUSH
10966: CALL_OW 45
10970: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
10971: LD_EXP 59
10975: PPUSH
10976: LD_INT 3
10978: PPUSH
10979: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
10983: LD_EXP 59
10987: PPUSH
10988: LD_INT 3
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
10998: LD_INT 1
11000: PPUSH
11001: LD_INT 3
11003: PPUSH
11004: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11008: CALL_OW 44
11012: PPUSH
11013: LD_EXP 59
11017: PPUSH
11018: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11022: LD_EXP 59
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 100
11032: PPUSH
11033: CALL_OW 291
// for i := 1 to 19 do
11037: LD_ADDR_VAR 0 2
11041: PUSH
11042: DOUBLE
11043: LD_INT 1
11045: DEC
11046: ST_TO_ADDR
11047: LD_INT 19
11049: PUSH
11050: FOR_TO
11051: IFFALSE 11094
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11053: LD_EXP 59
11057: PPUSH
11058: LD_EXP 33
11062: PUSH
11063: LD_VAR 0 2
11067: ARRAY
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_EXP 33
11077: PUSH
11078: LD_VAR 0 2
11082: ARRAY
11083: PUSH
11084: LD_INT 2
11086: ARRAY
11087: PPUSH
11088: CALL_OW 171
11092: GO 11050
11094: POP
11095: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11096: LD_EXP 59
11100: PPUSH
11101: LD_INT 105
11103: PPUSH
11104: LD_INT 123
11106: PPUSH
11107: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11111: LD_EXP 59
11115: PPUSH
11116: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11120: LD_ADDR_VAR 0 2
11124: PUSH
11125: DOUBLE
11126: LD_INT 21
11128: DEC
11129: ST_TO_ADDR
11130: LD_EXP 33
11134: PUSH
11135: FOR_TO
11136: IFFALSE 11179
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11138: LD_EXP 59
11142: PPUSH
11143: LD_EXP 33
11147: PUSH
11148: LD_VAR 0 2
11152: ARRAY
11153: PUSH
11154: LD_INT 1
11156: ARRAY
11157: PPUSH
11158: LD_EXP 33
11162: PUSH
11163: LD_VAR 0 2
11167: ARRAY
11168: PUSH
11169: LD_INT 2
11171: ARRAY
11172: PPUSH
11173: CALL_OW 171
11177: GO 11135
11179: POP
11180: POP
// Say ( Burlak , D2-Bur-1 ) ;
11181: LD_EXP 41
11185: PPUSH
11186: LD_STRING D2-Bur-1
11188: PPUSH
11189: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11193: LD_EXP 52
11197: PPUSH
11198: LD_STRING D2-Pla-1
11200: PPUSH
11201: CALL_OW 94
// PrepareSecondBaseTeam ;
11205: CALL 2950 0 0
// end ;
11209: LD_VAR 0 1
11213: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11214: LD_INT 0
11216: PPUSH
11217: PPUSH
// dial_labUpgradedBlock = true ;
11218: LD_ADDR_EXP 14
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11226: LD_ADDR_VAR 0 2
11230: PUSH
11231: LD_INT 22
11233: PUSH
11234: LD_INT 3
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 21
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 26
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PPUSH
11277: CALL_OW 69
11281: PUSH
11282: LD_EXP 41
11286: PUSH
11287: LD_EXP 42
11291: PUSH
11292: LD_EXP 43
11296: PUSH
11297: LD_EXP 44
11301: PUSH
11302: LD_EXP 45
11306: PUSH
11307: LD_EXP 46
11311: PUSH
11312: LD_EXP 47
11316: PUSH
11317: LD_EXP 48
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: DIFF
11332: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11333: LD_EXP 47
11337: PPUSH
11338: CALL_OW 302
11342: PUSH
11343: LD_EXP 47
11347: PPUSH
11348: CALL_OW 255
11352: PUSH
11353: LD_INT 3
11355: EQUAL
11356: AND
11357: IFFALSE 11385
// begin Say ( Scholtze , D5-Sch-1 ) ;
11359: LD_EXP 47
11363: PPUSH
11364: LD_STRING D5-Sch-1
11366: PPUSH
11367: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11371: LD_EXP 41
11375: PPUSH
11376: LD_STRING D5-Bur-1
11378: PPUSH
11379: CALL_OW 88
// end else
11383: GO 11520
// if randomMaleSci then
11385: LD_VAR 0 2
11389: IFFALSE 11421
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11391: LD_VAR 0 2
11395: PUSH
11396: LD_INT 1
11398: ARRAY
11399: PPUSH
11400: LD_STRING D5-RSci1-1
11402: PPUSH
11403: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11407: LD_EXP 41
11411: PPUSH
11412: LD_STRING D5-Bur-1
11414: PPUSH
11415: CALL_OW 88
// end else
11419: GO 11520
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11421: LD_ADDR_VAR 0 2
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 3
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 26
11448: PUSH
11449: LD_INT 1
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 25
11458: PUSH
11459: LD_INT 4
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 69
11476: PUSH
11477: LD_EXP 41
11481: PUSH
11482: EMPTY
11483: LIST
11484: DIFF
11485: ST_TO_ADDR
// if randomMaleSci then
11486: LD_VAR 0 2
11490: IFFALSE 11520
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: LD_STRING D5-RSci1-1
11503: PPUSH
11504: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11508: LD_EXP 41
11512: PPUSH
11513: LD_STRING D5-Bur-1
11515: PPUSH
11516: CALL_OW 88
// end ; end ; end ;
11520: LD_VAR 0 1
11524: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11525: LD_EXP 59
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 297
11540: PUSH
11541: LD_INT 12
11543: LESS
11544: IFFALSE 11570
11546: GO 11548
11548: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11549: LD_EXP 59
11553: PPUSH
11554: CALL_OW 313
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_STRING D2a-RSol1-1
11565: PPUSH
11566: CALL_OW 88
11570: END
// every 0 0$15 trigger startEvacuation do
11571: LD_EXP 7
11575: IFFALSE 11585
11577: GO 11579
11579: DISABLE
// begin enable ;
11580: ENABLE
// CreateEvacuateUnit ;
11581: CALL 2180 0 0
// end ;
11585: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11586: LD_EXP 9
11590: PUSH
11591: LD_INT 3
11593: GREATEREQUAL
11594: IFFALSE 11693
11596: GO 11598
11598: DISABLE
// begin if IsOk ( Kuzmov ) then
11599: LD_EXP 48
11603: PPUSH
11604: CALL_OW 302
11608: IFFALSE 11678
// begin DialogueOn ;
11610: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
11614: LD_EXP 48
11618: PPUSH
11619: LD_STRING D2b-Kuz-1
11621: PPUSH
11622: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
11626: LD_EXP 41
11630: PPUSH
11631: LD_STRING D2b-Bur-1
11633: PPUSH
11634: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
11638: LD_EXP 48
11642: PPUSH
11643: LD_STRING D2b-Kuz-2
11645: PPUSH
11646: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
11650: LD_EXP 41
11654: PPUSH
11655: LD_STRING D2b-Bur-2
11657: PPUSH
11658: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
11662: LD_EXP 48
11666: PPUSH
11667: LD_STRING D2b-Kuz-3
11669: PPUSH
11670: CALL_OW 88
// DialogueOff ;
11674: CALL_OW 7
// end ; Query ( Q1 ) ;
11678: LD_STRING Q1
11680: PPUSH
11681: CALL_OW 97
// canStealCargo = true ;
11685: LD_ADDR_EXP 10
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// end ;
11693: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
11694: LD_EXP 10
11698: IFFALSE 11996
11700: GO 11702
11702: DISABLE
11703: LD_INT 0
11705: PPUSH
11706: PPUSH
// begin enable ;
11707: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
11708: LD_ADDR_VAR 0 2
11712: PUSH
11713: LD_INT 22
11715: PUSH
11716: LD_INT 6
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 2
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 34
11735: PUSH
11736: LD_INT 51
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 69
11752: PUSH
11753: FOR_IN
11754: IFFALSE 11994
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_INT 3
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 21
11773: PUSH
11774: LD_INT 1
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 50
11783: PUSH
11784: EMPTY
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: PPUSH
11792: CALL_OW 69
11796: PUSH
11797: FOR_IN
11798: IFFALSE 11990
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
11800: LD_VAR 0 2
11804: PPUSH
11805: LD_VAR 0 1
11809: PPUSH
11810: CALL_OW 296
11814: PUSH
11815: LD_INT 8
11817: LESS
11818: PUSH
11819: LD_VAR 0 2
11823: PUSH
11824: LD_EXP 12
11828: IN
11829: NOT
11830: AND
11831: PUSH
11832: LD_VAR 0 2
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 289
11844: PUSH
11845: LD_INT 0
11847: GREATER
11848: AND
11849: IFFALSE 11988
// begin stealCargos = stealCargos ^ cargo ;
11851: LD_ADDR_EXP 12
11855: PUSH
11856: LD_EXP 12
11860: PUSH
11861: LD_VAR 0 2
11865: ADD
11866: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
11867: LD_STRING QQrSteal
11869: PPUSH
11870: CALL_OW 97
11874: PUSH
11875: LD_INT 1
11877: DOUBLE
11878: EQUAL
11879: IFTRUE 11883
11881: GO 11956
11883: POP
// begin stealWarmCount = stealWarmCount + 1 ;
11884: LD_ADDR_EXP 11
11888: PUSH
11889: LD_EXP 11
11893: PUSH
11894: LD_INT 1
11896: PLUS
11897: ST_TO_ADDR
// DialogueOn ;
11898: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
11902: LD_EXP 41
11906: PPUSH
11907: LD_STRING DQrSteal#1-Bur-1
11909: PPUSH
11910: CALL_OW 88
// DialogueOff ;
11914: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
11918: LD_VAR 0 2
11922: PPUSH
11923: LD_INT 14
11925: PPUSH
11926: CALL_OW 113
// AddComUnload ( cargo ) ;
11930: LD_VAR 0 2
11934: PPUSH
11935: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
11939: LD_VAR 0 2
11943: PPUSH
11944: LD_INT 92
11946: PPUSH
11947: LD_INT 177
11949: PPUSH
11950: CALL_OW 171
// end ; 2 :
11954: GO 11988
11956: LD_INT 2
11958: DOUBLE
11959: EQUAL
11960: IFTRUE 11964
11962: GO 11987
11964: POP
// begin DialogueOn ;
11965: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
11969: LD_EXP 41
11973: PPUSH
11974: LD_STRING DQrSteal#2-Bur-1
11976: PPUSH
11977: CALL_OW 88
// DialogueOff ;
11981: CALL_OW 7
// end ; end ;
11985: GO 11988
11987: POP
// end ;
11988: GO 11797
11990: POP
11991: POP
11992: GO 11753
11994: POP
11995: POP
// end ;
11996: PPOPN 2
11998: END
// every 0 0$12 trigger stealWarmCount = 3 do
11999: LD_EXP 11
12003: PUSH
12004: LD_INT 3
12006: EQUAL
12007: IFFALSE 12079
12009: GO 12011
12011: DISABLE
// begin DialogueOn ;
12012: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12016: LD_EXP 52
12020: PPUSH
12021: LD_STRING D3A-Pla-1
12023: PPUSH
12024: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12028: LD_EXP 41
12032: PPUSH
12033: LD_STRING D3A-Bur-1
12035: PPUSH
12036: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12040: LD_EXP 52
12044: PPUSH
12045: LD_STRING D3A-Pla-2
12047: PPUSH
12048: CALL_OW 94
// if IsOK ( Kuzmov ) then
12052: LD_EXP 48
12056: PPUSH
12057: CALL_OW 302
12061: IFFALSE 12075
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12063: LD_EXP 48
12067: PPUSH
12068: LD_STRING D3A-Kuz-2
12070: PPUSH
12071: CALL_OW 88
// DialogueOff ;
12075: CALL_OW 7
// end ;
12079: END
// every 0 0$10 trigger stealWarmCount = 6 do
12080: LD_EXP 11
12084: PUSH
12085: LD_INT 6
12087: EQUAL
12088: IFFALSE 12137
12090: GO 12092
12092: DISABLE
// begin DialogueOn ;
12093: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12097: LD_EXP 52
12101: PPUSH
12102: LD_STRING D3B-Pla-1
12104: PPUSH
12105: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12109: LD_EXP 41
12113: PPUSH
12114: LD_STRING D3B-Bur-1
12116: PPUSH
12117: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12121: LD_EXP 52
12125: PPUSH
12126: LD_STRING D3B-Pla-2
12128: PPUSH
12129: CALL_OW 94
// DialogueOff ;
12133: CALL_OW 7
// end ;
12137: END
// every 0 0$10 trigger stealWarmCount = 7 do
12138: LD_EXP 11
12142: PUSH
12143: LD_INT 7
12145: EQUAL
12146: IFFALSE 12230
12148: GO 12150
12150: DISABLE
// begin DialogueOn ;
12151: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12155: LD_EXP 52
12159: PPUSH
12160: LD_STRING D3C-Pla-1
12162: PPUSH
12163: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12167: LD_EXP 41
12171: PPUSH
12172: LD_STRING D3C-Bur-1
12174: PPUSH
12175: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12179: LD_EXP 52
12183: PPUSH
12184: LD_STRING D3C-Pla-2
12186: PPUSH
12187: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12191: LD_EXP 41
12195: PPUSH
12196: LD_STRING D3C-Bur-2
12198: PPUSH
12199: CALL_OW 88
// if IsOK ( Kuzmov ) then
12203: LD_EXP 48
12207: PPUSH
12208: CALL_OW 302
12212: IFFALSE 12226
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12214: LD_EXP 48
12218: PPUSH
12219: LD_STRING D3C-Kuz-2
12221: PPUSH
12222: CALL_OW 88
// DialogueOff ;
12226: CALL_OW 7
// end ;
12230: END
// every 0 0$10 trigger stealWarmCount = 8 do
12231: LD_EXP 11
12235: PUSH
12236: LD_INT 8
12238: EQUAL
12239: IFFALSE 12431
12241: GO 12243
12243: DISABLE
// begin canStealCargo = false ;
12244: LD_ADDR_EXP 10
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// DialogueOn ;
12252: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12256: LD_EXP 52
12260: PPUSH
12261: LD_STRING D3D-Pla-1
12263: PPUSH
12264: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12268: LD_EXP 41
12272: PPUSH
12273: LD_STRING D3D-Bur-1
12275: PPUSH
12276: CALL_OW 88
// if kurinOpinion = 0 then
12280: LD_EXP 2
12284: PUSH
12285: LD_INT 0
12287: EQUAL
12288: IFFALSE 12308
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12290: LD_EXP 52
12294: PPUSH
12295: LD_STRING D3E-Pla-1
12297: PPUSH
12298: CALL_OW 94
// Lose_Arrest ;
12302: CALL 7208 0 0
// exit ;
12306: GO 12431
// end ; if meetBelkovBrother = 1 then
12308: LD_EXP 3
12312: PUSH
12313: LD_INT 1
12315: EQUAL
12316: IFFALSE 12336
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12318: LD_EXP 52
12322: PPUSH
12323: LD_STRING D3E-Pla-1a
12325: PPUSH
12326: CALL_OW 94
// Lose_Arrest ;
12330: CALL 7208 0 0
// exit ;
12334: GO 12431
// end ; if platonovOpinion = 0 then
12336: LD_EXP 1
12340: PUSH
12341: LD_INT 0
12343: EQUAL
12344: IFFALSE 12364
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12346: LD_EXP 52
12350: PPUSH
12351: LD_STRING D3E-Pla-1b
12353: PPUSH
12354: CALL_OW 94
// Lose_Arrest ;
12358: CALL 7208 0 0
// exit ;
12362: GO 12431
// end ; if platonovOpinion = 1 then
12364: LD_EXP 1
12368: PUSH
12369: LD_INT 1
12371: EQUAL
12372: IFFALSE 12392
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12374: LD_EXP 52
12378: PPUSH
12379: LD_STRING D3E-Pla-1c
12381: PPUSH
12382: CALL_OW 94
// Lose_Arrest ;
12386: CALL 7208 0 0
// exit ;
12390: GO 12431
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12392: LD_EXP 52
12396: PPUSH
12397: LD_STRING D3D-Pla-2
12399: PPUSH
12400: CALL_OW 94
// if IsOK ( Kuzmov ) then
12404: LD_EXP 48
12408: PPUSH
12409: CALL_OW 302
12413: IFFALSE 12427
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12415: LD_EXP 48
12419: PPUSH
12420: LD_STRING D3D-Kuz-2
12422: PPUSH
12423: CALL_OW 88
// DialogueOff ;
12427: CALL_OW 7
// end ;
12431: END
// every 0 0$20 do var allyUntis ;
12432: GO 12434
12434: DISABLE
12435: LD_INT 0
12437: PPUSH
// begin enable ;
12438: ENABLE
// wait ( 0 0$10 ) ;
12439: LD_INT 350
12441: PPUSH
12442: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 6
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 3
12463: PUSH
12464: LD_INT 60
12466: PUSH
12467: EMPTY
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PPUSH
12478: CALL_OW 69
12482: PUSH
12483: LD_EXP 55
12487: DIFF
12488: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12489: LD_ADDR_VAR 0 1
12493: PUSH
12494: LD_VAR 0 1
12498: PUSH
12499: LD_EXP 53
12503: DIFF
12504: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_VAR 0 1
12514: PUSH
12515: LD_EXP 48
12519: DIFF
12520: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: LD_VAR 0 1
12530: PUSH
12531: LD_EXP 56
12535: DIFF
12536: ST_TO_ADDR
// if not allyUntis then
12537: LD_VAR 0 1
12541: NOT
12542: IFFALSE 12546
// exit ;
12544: GO 12570
// ComUnload ( allyUntis ) ;
12546: LD_VAR 0 1
12550: PPUSH
12551: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12555: LD_VAR 0 1
12559: PPUSH
12560: LD_INT 92
12562: PPUSH
12563: LD_INT 176
12565: PPUSH
12566: CALL_OW 171
// end ;
12570: PPOPN 1
12572: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12573: LD_EXP 9
12577: PUSH
12578: LD_EXP 13
12582: GREATEREQUAL
12583: IFFALSE 12596
12585: GO 12587
12587: DISABLE
// begin startEvacuation = false ;
12588: LD_ADDR_EXP 7
12592: PUSH
12593: LD_INT 0
12595: ST_TO_ADDR
// end ;
12596: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
12597: LD_EXP 9
12601: PUSH
12602: LD_EXP 13
12606: GREATEREQUAL
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_INT 6
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 21
12623: PUSH
12624: LD_INT 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 21
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: PUSH
12655: LD_EXP 56
12659: DIFF
12660: NOT
12661: AND
12662: IFFALSE 13257
12664: GO 12666
12666: DISABLE
// begin wait ( 1 1$00 ) ;
12667: LD_INT 2100
12669: PPUSH
12670: CALL_OW 67
// DialogueOn ;
12674: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
12678: LD_EXP 52
12682: PPUSH
12683: LD_STRING D4-Pla-1
12685: PPUSH
12686: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
12690: LD_EXP 41
12694: PPUSH
12695: LD_STRING D4-Bur-1
12697: PPUSH
12698: CALL_OW 88
// DialogueOff ;
12702: CALL_OW 7
// wait ( 0 0$2 ) ;
12706: LD_INT 70
12708: PPUSH
12709: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
12713: LD_EXP 48
12717: PPUSH
12718: CALL_OW 302
12722: PUSH
12723: LD_EXP 48
12727: PPUSH
12728: CALL_OW 255
12732: PUSH
12733: LD_INT 3
12735: EQUAL
12736: AND
12737: IFFALSE 13019
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
12739: LD_EXP 48
12743: PPUSH
12744: LD_STRING D4-Kuz-1
12746: PPUSH
12747: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12751: LD_EXP 45
12755: PPUSH
12756: CALL_OW 302
12760: PUSH
12761: LD_EXP 45
12765: PPUSH
12766: CALL_OW 255
12770: PUSH
12771: LD_INT 3
12773: EQUAL
12774: AND
12775: IFFALSE 12791
// Say ( Belkov , D4-Bel-1 ) else
12777: LD_EXP 45
12781: PPUSH
12782: LD_STRING D4-Bel-1
12784: PPUSH
12785: CALL_OW 88
12789: GO 12829
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12791: LD_EXP 46
12795: PPUSH
12796: CALL_OW 302
12800: PUSH
12801: LD_EXP 46
12805: PPUSH
12806: CALL_OW 255
12810: PUSH
12811: LD_INT 3
12813: EQUAL
12814: AND
12815: IFFALSE 12829
// Say ( Belkov2 , D4-Bel-1 ) ;
12817: LD_EXP 46
12821: PPUSH
12822: LD_STRING D4-Bel-1
12824: PPUSH
12825: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
12829: LD_EXP 41
12833: PPUSH
12834: LD_STRING D4-Bur-2
12836: PPUSH
12837: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
12841: LD_EXP 42
12845: PPUSH
12846: CALL_OW 302
12850: PUSH
12851: LD_EXP 42
12855: PPUSH
12856: CALL_OW 255
12860: PUSH
12861: LD_INT 3
12863: EQUAL
12864: AND
12865: IFFALSE 12891
// begin Say ( Gnyevko , D4-Gny-2 ) ;
12867: LD_EXP 42
12871: PPUSH
12872: LD_STRING D4-Gny-2
12874: PPUSH
12875: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
12879: LD_EXP 41
12883: PPUSH
12884: LD_STRING D4-Bur-3
12886: PPUSH
12887: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
12891: LD_EXP 41
12895: PPUSH
12896: LD_STRING D4-Bur-3a
12898: PPUSH
12899: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12903: LD_EXP 45
12907: PPUSH
12908: CALL_OW 302
12912: PUSH
12913: LD_EXP 45
12917: PPUSH
12918: CALL_OW 255
12922: PUSH
12923: LD_INT 3
12925: EQUAL
12926: AND
12927: IFFALSE 12943
// Say ( Belkov , D4-Bel-3 ) else
12929: LD_EXP 45
12933: PPUSH
12934: LD_STRING D4-Bel-3
12936: PPUSH
12937: CALL_OW 88
12941: GO 12981
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12943: LD_EXP 46
12947: PPUSH
12948: CALL_OW 302
12952: PUSH
12953: LD_EXP 46
12957: PPUSH
12958: CALL_OW 255
12962: PUSH
12963: LD_INT 3
12965: EQUAL
12966: AND
12967: IFFALSE 12981
// Say ( Belkov2 , D4-Bel-3 ) ;
12969: LD_EXP 46
12973: PPUSH
12974: LD_STRING D4-Bel-3
12976: PPUSH
12977: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
12981: LD_EXP 44
12985: PPUSH
12986: CALL_OW 302
12990: PUSH
12991: LD_EXP 44
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: IFFALSE 13019
// Say ( Kovalyuk , D4-Kov-3 ) ;
13007: LD_EXP 44
13011: PPUSH
13012: LD_STRING D4-Kov-3
13014: PPUSH
13015: CALL_OW 88
// end ; PrepareFirstAttack ;
13019: CALL 3831 0 0
// firstAttack = true ;
13023: LD_ADDR_EXP 17
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13031: LD_INT 350
13033: PPUSH
13034: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13038: LD_EXP 41
13042: PPUSH
13043: LD_STRING D7-Bur-1
13045: PPUSH
13046: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13050: LD_EXP 62
13054: PPUSH
13055: LD_INT 135
13057: PUSH
13058: LD_INT 4
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 134
13067: PUSH
13068: LD_INT 19
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 132
13077: PUSH
13078: LD_INT 26
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 128
13087: PUSH
13088: LD_INT 31
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 123
13097: PUSH
13098: LD_INT 37
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 118
13107: PUSH
13108: LD_INT 45
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 112
13117: PUSH
13118: LD_INT 51
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 106
13127: PUSH
13128: LD_INT 57
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 99
13137: PUSH
13138: LD_INT 62
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 93
13147: PUSH
13148: LD_INT 67
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 86
13157: PUSH
13158: LD_INT 72
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 78
13167: PUSH
13168: LD_INT 75
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 71
13177: PUSH
13178: LD_INT 81
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 69
13187: PUSH
13188: LD_INT 88
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 71
13197: PUSH
13198: LD_INT 95
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 74
13207: PUSH
13208: LD_INT 103
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 80
13217: PUSH
13218: LD_INT 113
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PPUSH
13244: LD_INT 0
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_INT 11
13252: PPUSH
13253: CALL 4674 0 5
// end ;
13257: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13258: LD_EXP 62
13262: PPUSH
13263: LD_INT 21
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 72
13277: NOT
13278: PUSH
13279: LD_EXP 17
13283: AND
13284: IFFALSE 13353
13286: GO 13288
13288: DISABLE
// begin if Difficulty = 1 then
13289: LD_OWVAR 67
13293: PUSH
13294: LD_INT 1
13296: EQUAL
13297: IFFALSE 13330
// begin ComExitBuilding ( secondBaseTeam ) ;
13299: LD_EXP 56
13303: PPUSH
13304: CALL_OW 122
// wait ( 0 0$1 ) ;
13308: LD_INT 35
13310: PPUSH
13311: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13315: LD_EXP 56
13319: PPUSH
13320: LD_INT 114
13322: PPUSH
13323: LD_INT 114
13325: PPUSH
13326: CALL_OW 111
// end ; wait ( 0 0$15 ) ;
13330: LD_INT 525
13332: PPUSH
13333: CALL_OW 67
// firstAttack = false ;
13337: LD_ADDR_EXP 17
13341: PUSH
13342: LD_INT 0
13344: ST_TO_ADDR
// enableAttacks = true ;
13345: LD_ADDR_EXP 16
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// end ;
13353: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13354: LD_OWVAR 67
13358: PUSH
13359: LD_INT 1
13361: EQUAL
13362: PUSH
13363: LD_EXP 56
13367: AND
13368: IFFALSE 13436
13370: GO 13372
13372: DISABLE
13373: LD_INT 0
13375: PPUSH
// begin enable ;
13376: ENABLE
// for un in secondBaseTeam do
13377: LD_ADDR_VAR 0 1
13381: PUSH
13382: LD_EXP 56
13386: PUSH
13387: FOR_IN
13388: IFFALSE 13434
// if IsInArea ( un , HillArea ) then
13390: LD_VAR 0 1
13394: PPUSH
13395: LD_INT 5
13397: PPUSH
13398: CALL_OW 308
13402: IFFALSE 13432
// begin SetSide ( un , 3 ) ;
13404: LD_VAR 0 1
13408: PPUSH
13409: LD_INT 3
13411: PPUSH
13412: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13416: LD_ADDR_EXP 56
13420: PUSH
13421: LD_EXP 56
13425: PUSH
13426: LD_VAR 0 1
13430: DIFF
13431: ST_TO_ADDR
// end ;
13432: GO 13387
13434: POP
13435: POP
// end ;
13436: PPOPN 1
13438: END
// export function Dial_Contact ; begin
13439: LD_INT 0
13441: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13442: LD_EXP 41
13446: PPUSH
13447: LD_STRING D7-Bur-1a
13449: PPUSH
13450: CALL_OW 88
// wait ( 0 0$12 ) ;
13454: LD_INT 420
13456: PPUSH
13457: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13461: LD_EXP 41
13465: PPUSH
13466: LD_STRING D7-Bur-1b
13468: PPUSH
13469: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13473: LD_EXP 45
13477: PPUSH
13478: CALL_OW 302
13482: PUSH
13483: LD_EXP 45
13487: PPUSH
13488: CALL_OW 255
13492: PUSH
13493: LD_INT 3
13495: EQUAL
13496: AND
13497: IFFALSE 13513
// Say ( Belkov , D7-Bel-1 ) else
13499: LD_EXP 45
13503: PPUSH
13504: LD_STRING D7-Bel-1
13506: PPUSH
13507: CALL_OW 88
13511: GO 13551
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13513: LD_EXP 46
13517: PPUSH
13518: CALL_OW 302
13522: PUSH
13523: LD_EXP 46
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 3
13535: EQUAL
13536: AND
13537: IFFALSE 13551
// Say ( Belkov2 , D7-Bel-1 ) ;
13539: LD_EXP 46
13543: PPUSH
13544: LD_STRING D7-Bel-1
13546: PPUSH
13547: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13551: LD_EXP 48
13555: PPUSH
13556: CALL_OW 302
13560: PUSH
13561: LD_EXP 48
13565: PPUSH
13566: CALL_OW 255
13570: PUSH
13571: LD_INT 3
13573: EQUAL
13574: AND
13575: IFFALSE 13589
// Say ( Kuzmov , D7-Kuz-1 ) ;
13577: LD_EXP 48
13581: PPUSH
13582: LD_STRING D7-Kuz-1
13584: PPUSH
13585: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13589: LD_EXP 44
13593: PPUSH
13594: CALL_OW 302
13598: PUSH
13599: LD_EXP 44
13603: PPUSH
13604: CALL_OW 255
13608: PUSH
13609: LD_INT 3
13611: EQUAL
13612: AND
13613: IFFALSE 13627
// Say ( Kovalyuk , D7-Kov-1 ) ;
13615: LD_EXP 44
13619: PPUSH
13620: LD_STRING D7-Kov-1
13622: PPUSH
13623: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
13627: LD_EXP 47
13631: PPUSH
13632: CALL_OW 302
13636: PUSH
13637: LD_EXP 47
13641: PPUSH
13642: CALL_OW 255
13646: PUSH
13647: LD_INT 3
13649: EQUAL
13650: AND
13651: IFFALSE 13665
// Say ( Scholtze , D7-Sch-1 ) ;
13653: LD_EXP 47
13657: PPUSH
13658: LD_STRING D7-Sch-1
13660: PPUSH
13661: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
13665: LD_INT 22
13667: PUSH
13668: LD_INT 3
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 21
13677: PUSH
13678: LD_INT 1
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 26
13687: PUSH
13688: LD_INT 1
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: PPUSH
13705: LD_STRING D7-RSol1-1
13707: PPUSH
13708: LD_STRING 
13710: PPUSH
13711: LD_INT 0
13713: PPUSH
13714: CALL 9169 0 4
// PrepareHeike ;
13718: CALL 3155 0 0
// wait ( 0 0$10 ) ;
13722: LD_INT 350
13724: PPUSH
13725: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
13729: LD_EXP 61
13733: PPUSH
13734: LD_STRING D7a-Hke-1
13736: PPUSH
13737: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
13741: LD_EXP 41
13745: PPUSH
13746: LD_STRING D7a-Bur-1
13748: PPUSH
13749: CALL_OW 88
// wait ( 0 0$50 ) ;
13753: LD_INT 1750
13755: PPUSH
13756: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13760: LD_EXP 48
13764: PPUSH
13765: CALL_OW 302
13769: PUSH
13770: LD_EXP 48
13774: PPUSH
13775: CALL_OW 255
13779: PUSH
13780: LD_INT 3
13782: EQUAL
13783: AND
13784: IFFALSE 13800
// Say ( Kuzmov , D8-Kuz-1 ) else
13786: LD_EXP 48
13790: PPUSH
13791: LD_STRING D8-Kuz-1
13793: PPUSH
13794: CALL_OW 88
13798: GO 13853
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
13800: LD_INT 22
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 21
13812: PUSH
13813: LD_INT 1
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 26
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 69
13839: PPUSH
13840: LD_STRING D8-RSol1-1
13842: PPUSH
13843: LD_STRING 
13845: PPUSH
13846: LD_INT 0
13848: PPUSH
13849: CALL 9169 0 4
// Say ( Burlak , D8-Bur-1 ) ;
13853: LD_EXP 41
13857: PPUSH
13858: LD_STRING D8-Bur-1
13860: PPUSH
13861: CALL_OW 88
// end ;
13865: LD_VAR 0 1
13869: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
13870: LD_EXP 53
13874: PPUSH
13875: CALL_OW 305
13879: NOT
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_INT 3
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 21
13893: PUSH
13894: LD_INT 3
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 50
13903: PUSH
13904: EMPTY
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: NOT
13917: AND
13918: PUSH
13919: LD_INT 22
13921: PUSH
13922: LD_INT 3
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 21
13931: PUSH
13932: LD_INT 1
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 50
13941: PUSH
13942: EMPTY
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 69
13954: PUSH
13955: LD_INT 5
13957: LESS
13958: AND
13959: PUSH
13960: LD_INT 5
13962: PPUSH
13963: LD_INT 22
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: PPUSH
13976: CALL_OW 70
13980: PUSH
13981: LD_INT 3
13983: GREATER
13984: AND
13985: IFFALSE 13994
13987: GO 13989
13989: DISABLE
// Lose_ArabBreakthrough ;
13990: CALL 7223 0 0
13994: END
// every 1 1$30 trigger currentWave >= enemyWaves do
13995: LD_EXP 18
13999: PUSH
14000: LD_EXP 37
14004: GREATEREQUAL
14005: IFFALSE 14203
14007: GO 14009
14009: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14010: LD_EXP 52
14014: PPUSH
14015: LD_STRING D9-Pla-1
14017: PPUSH
14018: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14022: LD_EXP 41
14026: PPUSH
14027: LD_STRING D9-Bur-1
14029: PPUSH
14030: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14034: LD_EXP 52
14038: PPUSH
14039: LD_STRING D9-Pla-2
14041: PPUSH
14042: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14046: LD_EXP 41
14050: PPUSH
14051: LD_STRING D9-Bur-2
14053: PPUSH
14054: CALL_OW 88
// wait ( 2 2$0 ) ;
14058: LD_INT 4200
14060: PPUSH
14061: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
14065: LD_EXP 53
14069: PPUSH
14070: LD_INT 6
14072: PPUSH
14073: LD_INT 0
14075: PPUSH
14076: CALL_OW 49
// arabianCanExitMap = true ;
14080: LD_ADDR_EXP 6
14084: PUSH
14085: LD_INT 1
14087: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14088: LD_INT 35
14090: PPUSH
14091: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14095: LD_EXP 53
14099: PPUSH
14100: CALL_OW 87
// DialogueOn ;
14104: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14108: LD_EXP 53
14112: PPUSH
14113: LD_STRING D10-Gay-1
14115: PPUSH
14116: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14120: LD_EXP 41
14124: PPUSH
14125: LD_STRING D10-Bur-1
14127: PPUSH
14128: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14132: LD_EXP 53
14136: PPUSH
14137: LD_STRING D10-Gay-2
14139: PPUSH
14140: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14144: LD_EXP 51
14148: PPUSH
14149: LD_STRING D10-Pop-2
14151: PPUSH
14152: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14156: LD_EXP 53
14160: PPUSH
14161: LD_STRING D10-Gay-3
14163: PPUSH
14164: CALL_OW 94
// DialogueOff ;
14168: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14172: LD_EXP 53
14176: PPUSH
14177: LD_INT 36
14179: PPUSH
14180: LD_INT 38
14182: PPUSH
14183: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14187: LD_EXP 53
14191: PPUSH
14192: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14196: LD_STRING M2
14198: PPUSH
14199: CALL_OW 337
// end ;
14203: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14204: LD_EXP 6
14208: IFFALSE 14281
14210: GO 14212
14212: DISABLE
14213: LD_INT 0
14215: PPUSH
// begin enable ;
14216: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14217: LD_INT 22
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_INT 13
14237: PPUSH
14238: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14242: LD_ADDR_VAR 0 1
14246: PUSH
14247: LD_INT 13
14249: PPUSH
14250: LD_INT 22
14252: PUSH
14253: LD_INT 2
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 70
14264: PUSH
14265: FOR_IN
14266: IFFALSE 14279
// RemoveUnit ( unit ) ;
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 64
14277: GO 14265
14279: POP
14280: POP
// end ;
14281: PPOPN 1
14283: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14284: LD_EXP 19
14288: NOT
14289: IFFALSE 14679
14291: GO 14293
14293: DISABLE
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
// begin enable ;
14298: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14299: LD_ADDR_VAR 0 1
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_INT 3
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 21
14316: PUSH
14317: LD_INT 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PPUSH
14328: CALL_OW 69
14332: PUSH
14333: FOR_IN
14334: IFFALSE 14677
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14336: LD_VAR 0 1
14340: PPUSH
14341: LD_EXP 53
14345: PPUSH
14346: CALL_OW 296
14350: PUSH
14351: LD_INT 6
14353: LESS
14354: IFFALSE 14675
// begin SetSide ( Gaydar , 3 ) ;
14356: LD_EXP 53
14360: PPUSH
14361: LD_INT 3
14363: PPUSH
14364: CALL_OW 235
// ComWalk ( Gaydar ) ;
14368: LD_EXP 53
14372: PPUSH
14373: CALL_OW 138
// saveGaydar = true ;
14377: LD_ADDR_EXP 19
14381: PUSH
14382: LD_INT 1
14384: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14385: LD_INT 35
14387: PPUSH
14388: CALL_OW 67
// DialogueOn ;
14392: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14396: LD_EXP 53
14400: PPUSH
14401: LD_STRING D11-Gay-1
14403: PPUSH
14404: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14408: LD_EXP 41
14412: PPUSH
14413: LD_EXP 53
14417: PPUSH
14418: CALL_OW 296
14422: PUSH
14423: LD_INT 6
14425: LESS
14426: NOT
14427: IFFALSE 14527
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14429: LD_ADDR_VAR 0 2
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_INT 3
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 21
14446: PUSH
14447: LD_INT 1
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 26
14456: PUSH
14457: LD_INT 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 50
14466: PUSH
14467: EMPTY
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: PUSH
14481: LD_EXP 53
14485: DIFF
14486: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14487: LD_VAR 0 2
14491: PPUSH
14492: LD_EXP 53
14496: PPUSH
14497: CALL_OW 74
14501: PPUSH
14502: LD_STRING D11-RSol1-1
14504: PPUSH
14505: CALL_OW 88
// gaydarWaitForBurlak = true ;
14509: LD_ADDR_EXP 20
14513: PUSH
14514: LD_INT 1
14516: ST_TO_ADDR
// DialogueOff ;
14517: CALL_OW 7
// exit ;
14521: POP
14522: POP
14523: GO 14679
// end else
14525: GO 14675
// begin Say ( Gaydar , D11-Gay-2 ) ;
14527: LD_EXP 53
14531: PPUSH
14532: LD_STRING D11-Gay-2
14534: PPUSH
14535: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14539: LD_EXP 41
14543: PPUSH
14544: LD_STRING D11-Bur-2
14546: PPUSH
14547: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14551: LD_EXP 53
14555: PPUSH
14556: LD_STRING D11-Gay-3
14558: PPUSH
14559: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14563: LD_EXP 41
14567: PPUSH
14568: LD_STRING D11-Bur-3
14570: PPUSH
14571: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14575: LD_EXP 53
14579: PPUSH
14580: LD_STRING D11-Gay-4
14582: PPUSH
14583: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
14587: LD_EXP 41
14591: PPUSH
14592: LD_STRING D11-Bur-4
14594: PPUSH
14595: CALL_OW 88
// wait ( 0 0$2 ) ;
14599: LD_INT 70
14601: PPUSH
14602: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
14606: LD_EXP 51
14610: PPUSH
14611: LD_STRING D12-Pop-1
14613: PPUSH
14614: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
14618: LD_EXP 41
14622: PPUSH
14623: LD_STRING D12-Bur-1
14625: PPUSH
14626: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
14630: LD_EXP 52
14634: PPUSH
14635: LD_STRING D12-Pla-1
14637: PPUSH
14638: CALL_OW 94
// DialogueOff ;
14642: CALL_OW 7
// canExitMap = true ;
14646: LD_ADDR_EXP 5
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
14654: LD_STRING MFinal
14656: PPUSH
14657: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
14661: LD_INT 4
14663: PPUSH
14664: LD_INT 1
14666: PPUSH
14667: CALL_OW 424
// exit ;
14671: POP
14672: POP
14673: GO 14679
// end ; end ; end ;
14675: GO 14333
14677: POP
14678: POP
// end ;
14679: PPOPN 2
14681: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
14682: LD_EXP 41
14686: PPUSH
14687: LD_EXP 53
14691: PPUSH
14692: CALL_OW 296
14696: PUSH
14697: LD_INT 6
14699: LESS
14700: PUSH
14701: LD_EXP 20
14705: AND
14706: IFFALSE 14859
14708: GO 14710
14710: DISABLE
// begin DialogueOn ;
14711: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
14715: LD_EXP 53
14719: PPUSH
14720: LD_STRING D11-Gay-2
14722: PPUSH
14723: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14727: LD_EXP 41
14731: PPUSH
14732: LD_STRING D11-Bur-2
14734: PPUSH
14735: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14739: LD_EXP 53
14743: PPUSH
14744: LD_STRING D11-Gay-3
14746: PPUSH
14747: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14751: LD_EXP 41
14755: PPUSH
14756: LD_STRING D11-Bur-3
14758: PPUSH
14759: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14763: LD_EXP 53
14767: PPUSH
14768: LD_STRING D11-Gay-4
14770: PPUSH
14771: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
14775: LD_EXP 41
14779: PPUSH
14780: LD_STRING D11-Bur-4
14782: PPUSH
14783: CALL_OW 88
// wait ( 0 0$2 ) ;
14787: LD_INT 70
14789: PPUSH
14790: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
14794: LD_EXP 51
14798: PPUSH
14799: LD_STRING D12-Pop-1
14801: PPUSH
14802: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
14806: LD_EXP 41
14810: PPUSH
14811: LD_STRING D12-Bur-1
14813: PPUSH
14814: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
14818: LD_EXP 52
14822: PPUSH
14823: LD_STRING D12-Pla-1
14825: PPUSH
14826: CALL_OW 94
// DialogueOff ;
14830: CALL_OW 7
// canExitMap = true ;
14834: LD_ADDR_EXP 5
14838: PUSH
14839: LD_INT 1
14841: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
14842: LD_STRING MFinal
14844: PPUSH
14845: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
14849: LD_INT 4
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: CALL_OW 424
// end ;
14859: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
14860: LD_INT 22
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: PUSH
14889: LD_INT 0
14891: EQUAL
14892: PUSH
14893: LD_EXP 5
14897: AND
14898: IFFALSE 14907
14900: GO 14902
14902: DISABLE
// FinishMission ; end_of_file
14903: CALL 7341 0 0
14907: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
14908: LD_EXP 16
14912: PUSH
14913: LD_EXP 18
14917: PUSH
14918: LD_INT 0
14920: EQUAL
14921: AND
14922: PUSH
14923: LD_EXP 18
14927: PUSH
14928: LD_EXP 37
14932: LESS
14933: AND
14934: IFFALSE 14986
14936: GO 14938
14938: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
14939: LD_INT 7
14941: PUSH
14942: LD_INT 10
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 1
14951: PPUSH
14952: LD_INT 2
14954: PPUSH
14955: CALL_OW 12
14959: ARRAY
14960: PPUSH
14961: CALL 3503 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
14965: LD_EXP 63
14969: PPUSH
14970: EMPTY
14971: PPUSH
14972: LD_INT 1
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: LD_INT 1
14980: NEG
14981: PPUSH
14982: CALL 4674 0 5
// end ;
14986: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
14987: LD_EXP 16
14991: PUSH
14992: LD_EXP 18
14996: PUSH
14997: LD_INT 0
14999: GREATEREQUAL
15000: AND
15001: PUSH
15002: LD_EXP 18
15006: PUSH
15007: LD_EXP 37
15011: LESS
15012: AND
15013: IFFALSE 15243
15015: GO 15017
15017: DISABLE
// begin currentWave = currentWave + 1 ;
15018: LD_ADDR_EXP 18
15022: PUSH
15023: LD_EXP 18
15027: PUSH
15028: LD_INT 1
15030: PLUS
15031: ST_TO_ADDR
// PrepareArabianVehicles ;
15032: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15036: LD_EXP 63
15040: PPUSH
15041: LD_INT 135
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 134
15053: PUSH
15054: LD_INT 19
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 132
15063: PUSH
15064: LD_INT 26
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 128
15073: PUSH
15074: LD_INT 31
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 123
15083: PUSH
15084: LD_INT 37
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 118
15093: PUSH
15094: LD_INT 45
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 112
15103: PUSH
15104: LD_INT 51
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 106
15113: PUSH
15114: LD_INT 57
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 99
15123: PUSH
15124: LD_INT 62
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 93
15133: PUSH
15134: LD_INT 67
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 86
15143: PUSH
15144: LD_INT 72
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 78
15153: PUSH
15154: LD_INT 75
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 71
15163: PUSH
15164: LD_INT 81
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 69
15173: PUSH
15174: LD_INT 88
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 71
15183: PUSH
15184: LD_INT 95
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 74
15193: PUSH
15194: LD_INT 103
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 80
15203: PUSH
15204: LD_INT 113
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: PPUSH
15230: LD_INT 0
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_INT 11
15238: PPUSH
15239: CALL 4674 0 5
// end ;
15243: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15244: LD_EXP 16
15248: PUSH
15249: LD_OWVAR 67
15253: PUSH
15254: LD_INT 2
15256: EQUAL
15257: AND
15258: PUSH
15259: LD_EXP 18
15263: PUSH
15264: LD_INT 0
15266: GREATEREQUAL
15267: AND
15268: PUSH
15269: LD_EXP 18
15273: PUSH
15274: LD_EXP 37
15278: LESS
15279: AND
15280: IFFALSE 15430
15282: GO 15284
15284: DISABLE
// begin PrepareArabianVehicles ;
15285: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
15289: LD_EXP 63
15293: PPUSH
15294: LD_INT 135
15296: PUSH
15297: LD_INT 4
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 134
15306: PUSH
15307: LD_INT 19
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 132
15316: PUSH
15317: LD_INT 26
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 128
15326: PUSH
15327: LD_INT 31
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 123
15336: PUSH
15337: LD_INT 37
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 118
15346: PUSH
15347: LD_INT 45
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 112
15356: PUSH
15357: LD_INT 51
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 106
15366: PUSH
15367: LD_INT 57
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 99
15376: PUSH
15377: LD_INT 62
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 104
15386: PUSH
15387: LD_INT 71
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 110
15396: PUSH
15397: LD_INT 78
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: LD_INT 0
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 11
15425: PPUSH
15426: CALL 4674 0 5
// end ;
15430: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15431: LD_EXP 16
15435: PUSH
15436: LD_OWVAR 67
15440: PUSH
15441: LD_INT 3
15443: EQUAL
15444: AND
15445: PUSH
15446: LD_EXP 18
15450: PUSH
15451: LD_INT 0
15453: GREATEREQUAL
15454: AND
15455: PUSH
15456: LD_EXP 18
15460: PUSH
15461: LD_EXP 37
15465: LESS
15466: AND
15467: IFFALSE 15661
15469: GO 15471
15471: DISABLE
// begin PrepareArabianVehicles ;
15472: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15476: LD_EXP 63
15480: PPUSH
15481: LD_INT 135
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 134
15493: PUSH
15494: LD_INT 19
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 132
15503: PUSH
15504: LD_INT 26
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 128
15513: PUSH
15514: LD_INT 31
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 123
15523: PUSH
15524: LD_INT 37
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 118
15533: PUSH
15534: LD_INT 45
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 112
15543: PUSH
15544: LD_INT 51
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 106
15553: PUSH
15554: LD_INT 57
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 99
15563: PUSH
15564: LD_INT 62
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 104
15573: PUSH
15574: LD_INT 71
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 110
15583: PUSH
15584: LD_INT 78
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 119
15593: PUSH
15594: LD_INT 88
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 128
15603: PUSH
15604: LD_INT 97
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 135
15613: PUSH
15614: LD_INT 106
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 140
15623: PUSH
15624: LD_INT 153
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: PPUSH
15648: LD_INT 0
15650: PPUSH
15651: LD_INT 1
15653: PPUSH
15654: LD_INT 11
15656: PPUSH
15657: CALL 4674 0 5
// end ;
15661: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
15662: LD_EXP 16
15666: PUSH
15667: LD_EXP 18
15671: PUSH
15672: LD_INT 1
15674: EQUAL
15675: AND
15676: PUSH
15677: LD_EXP 18
15681: PUSH
15682: LD_EXP 37
15686: LESS
15687: AND
15688: IFFALSE 15765
15690: GO 15692
15692: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
15693: LD_INT 7
15695: PPUSH
15696: CALL 3503 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
15700: LD_EXP 63
15704: PPUSH
15705: LD_INT 157
15707: PUSH
15708: LD_INT 31
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 194
15717: PUSH
15718: LD_INT 124
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 174
15727: PUSH
15728: LD_INT 158
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 151
15737: PUSH
15738: LD_INT 164
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: PPUSH
15751: LD_INT 0
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: LD_INT 1
15759: NEG
15760: PPUSH
15761: CALL 4674 0 5
// end ;
15765: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
15766: LD_EXP 16
15770: PUSH
15771: LD_EXP 18
15775: PUSH
15776: LD_INT 1
15778: EQUAL
15779: AND
15780: PUSH
15781: LD_EXP 18
15785: PUSH
15786: LD_EXP 37
15790: LESS
15791: AND
15792: IFFALSE 15963
15794: GO 15796
15796: DISABLE
// begin wait ( 1 1$30 ) ;
15797: LD_INT 3150
15799: PPUSH
15800: CALL_OW 67
// currentWave = currentWave + 1 ;
15804: LD_ADDR_EXP 18
15808: PUSH
15809: LD_EXP 18
15813: PUSH
15814: LD_INT 1
15816: PLUS
15817: ST_TO_ADDR
// PrepareArabianVehicles ;
15818: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
15822: LD_EXP 63
15826: PPUSH
15827: LD_INT 135
15829: PUSH
15830: LD_INT 4
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 134
15839: PUSH
15840: LD_INT 19
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 132
15849: PUSH
15850: LD_INT 26
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 128
15859: PUSH
15860: LD_INT 31
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 123
15869: PUSH
15870: LD_INT 37
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 118
15879: PUSH
15880: LD_INT 45
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 112
15889: PUSH
15890: LD_INT 51
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 106
15899: PUSH
15900: LD_INT 57
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 99
15909: PUSH
15910: LD_INT 62
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 104
15919: PUSH
15920: LD_INT 71
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 110
15929: PUSH
15930: LD_INT 78
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: PPUSH
15950: LD_INT 0
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: LD_INT 11
15958: PPUSH
15959: CALL 4674 0 5
// end ;
15963: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
15964: LD_EXP 16
15968: PUSH
15969: LD_OWVAR 67
15973: PUSH
15974: LD_INT 2
15976: EQUAL
15977: AND
15978: PUSH
15979: LD_EXP 18
15983: PUSH
15984: LD_INT 1
15986: EQUAL
15987: AND
15988: PUSH
15989: LD_EXP 18
15993: PUSH
15994: LD_EXP 37
15998: LESS
15999: AND
16000: IFFALSE 16194
16002: GO 16004
16004: DISABLE
// begin PrepareArabianVehicles ;
16005: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16009: LD_EXP 63
16013: PPUSH
16014: LD_INT 135
16016: PUSH
16017: LD_INT 4
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 134
16026: PUSH
16027: LD_INT 19
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 132
16036: PUSH
16037: LD_INT 26
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 128
16046: PUSH
16047: LD_INT 31
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 123
16056: PUSH
16057: LD_INT 37
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 118
16066: PUSH
16067: LD_INT 45
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 112
16076: PUSH
16077: LD_INT 51
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 106
16086: PUSH
16087: LD_INT 57
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 99
16096: PUSH
16097: LD_INT 62
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 104
16106: PUSH
16107: LD_INT 71
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 110
16116: PUSH
16117: LD_INT 78
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 119
16126: PUSH
16127: LD_INT 88
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 128
16136: PUSH
16137: LD_INT 97
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 135
16146: PUSH
16147: LD_INT 106
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 140
16156: PUSH
16157: LD_INT 153
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: PPUSH
16181: LD_INT 0
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_INT 11
16189: PPUSH
16190: CALL 4674 0 5
// end ;
16194: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16195: LD_EXP 16
16199: PUSH
16200: LD_OWVAR 67
16204: PUSH
16205: LD_INT 3
16207: EQUAL
16208: AND
16209: PUSH
16210: LD_EXP 18
16214: PUSH
16215: LD_INT 1
16217: EQUAL
16218: AND
16219: PUSH
16220: LD_EXP 18
16224: PUSH
16225: LD_EXP 37
16229: LESS
16230: AND
16231: IFFALSE 16447
16233: GO 16235
16235: DISABLE
// begin PrepareArabianVehicles ;
16236: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16240: LD_EXP 63
16244: PPUSH
16245: LD_INT 135
16247: PUSH
16248: LD_INT 4
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 134
16257: PUSH
16258: LD_INT 19
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 132
16267: PUSH
16268: LD_INT 26
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 128
16277: PUSH
16278: LD_INT 31
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 123
16287: PUSH
16288: LD_INT 37
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 118
16297: PUSH
16298: LD_INT 45
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 112
16307: PUSH
16308: LD_INT 51
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 106
16317: PUSH
16318: LD_INT 57
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 99
16327: PUSH
16328: LD_INT 62
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 93
16337: PUSH
16338: LD_INT 67
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 86
16347: PUSH
16348: LD_INT 72
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 78
16357: PUSH
16358: LD_INT 75
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 71
16367: PUSH
16368: LD_INT 81
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 69
16377: PUSH
16378: LD_INT 88
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 71
16387: PUSH
16388: LD_INT 95
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 74
16397: PUSH
16398: LD_INT 103
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 80
16407: PUSH
16408: LD_INT 113
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: PPUSH
16434: LD_INT 0
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_INT 11
16442: PPUSH
16443: CALL 4674 0 5
// end ;
16447: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16448: LD_EXP 16
16452: PUSH
16453: LD_EXP 18
16457: PUSH
16458: LD_INT 2
16460: EQUAL
16461: AND
16462: PUSH
16463: LD_EXP 18
16467: PUSH
16468: LD_EXP 37
16472: LESS
16473: AND
16474: IFFALSE 16551
16476: GO 16478
16478: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16479: LD_INT 7
16481: PPUSH
16482: CALL 3503 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16486: LD_EXP 63
16490: PPUSH
16491: LD_INT 157
16493: PUSH
16494: LD_INT 31
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 194
16503: PUSH
16504: LD_INT 124
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 174
16513: PUSH
16514: LD_INT 158
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 151
16523: PUSH
16524: LD_INT 164
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: PPUSH
16537: LD_INT 0
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: LD_INT 1
16545: NEG
16546: PPUSH
16547: CALL 4674 0 5
// end ;
16551: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16552: LD_EXP 16
16556: PUSH
16557: LD_EXP 18
16561: PUSH
16562: LD_INT 2
16564: EQUAL
16565: AND
16566: PUSH
16567: LD_EXP 18
16571: PUSH
16572: LD_EXP 37
16576: LESS
16577: AND
16578: IFFALSE 16815
16580: GO 16582
16582: DISABLE
// begin wait ( 1 1$30 ) ;
16583: LD_INT 3150
16585: PPUSH
16586: CALL_OW 67
// currentWave = currentWave + 1 ;
16590: LD_ADDR_EXP 18
16594: PUSH
16595: LD_EXP 18
16599: PUSH
16600: LD_INT 1
16602: PLUS
16603: ST_TO_ADDR
// PrepareArabianVehicles ;
16604: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16608: LD_EXP 63
16612: PPUSH
16613: LD_INT 135
16615: PUSH
16616: LD_INT 4
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 134
16625: PUSH
16626: LD_INT 19
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 132
16635: PUSH
16636: LD_INT 26
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 128
16645: PUSH
16646: LD_INT 31
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 123
16655: PUSH
16656: LD_INT 37
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 118
16665: PUSH
16666: LD_INT 45
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 112
16675: PUSH
16676: LD_INT 51
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 106
16685: PUSH
16686: LD_INT 57
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 99
16695: PUSH
16696: LD_INT 62
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 93
16705: PUSH
16706: LD_INT 67
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 86
16715: PUSH
16716: LD_INT 72
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 78
16725: PUSH
16726: LD_INT 75
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 71
16735: PUSH
16736: LD_INT 81
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 69
16745: PUSH
16746: LD_INT 88
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 71
16755: PUSH
16756: LD_INT 95
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 74
16765: PUSH
16766: LD_INT 103
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 80
16775: PUSH
16776: LD_INT 113
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: PPUSH
16802: LD_INT 0
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: LD_INT 11
16810: PPUSH
16811: CALL 4674 0 5
// end ;
16815: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
16816: LD_EXP 16
16820: PUSH
16821: LD_OWVAR 67
16825: PUSH
16826: LD_INT 2
16828: EQUAL
16829: AND
16830: PUSH
16831: LD_EXP 18
16835: PUSH
16836: LD_INT 2
16838: EQUAL
16839: AND
16840: PUSH
16841: LD_EXP 18
16845: PUSH
16846: LD_EXP 37
16850: LESS
16851: AND
16852: IFFALSE 17046
16854: GO 16856
16856: DISABLE
// begin PrepareArabianVehicles ;
16857: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16861: LD_EXP 63
16865: PPUSH
16866: LD_INT 135
16868: PUSH
16869: LD_INT 4
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 134
16878: PUSH
16879: LD_INT 19
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 132
16888: PUSH
16889: LD_INT 26
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 128
16898: PUSH
16899: LD_INT 31
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 123
16908: PUSH
16909: LD_INT 37
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 118
16918: PUSH
16919: LD_INT 45
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 112
16928: PUSH
16929: LD_INT 51
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 106
16938: PUSH
16939: LD_INT 57
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 99
16948: PUSH
16949: LD_INT 62
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 104
16958: PUSH
16959: LD_INT 71
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 110
16968: PUSH
16969: LD_INT 78
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 119
16978: PUSH
16979: LD_INT 88
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 128
16988: PUSH
16989: LD_INT 97
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 135
16998: PUSH
16999: LD_INT 106
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 140
17008: PUSH
17009: LD_INT 153
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: PPUSH
17033: LD_INT 0
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: LD_INT 11
17041: PPUSH
17042: CALL 4674 0 5
// end ;
17046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17047: LD_EXP 16
17051: PUSH
17052: LD_OWVAR 67
17056: PUSH
17057: LD_INT 3
17059: EQUAL
17060: AND
17061: PUSH
17062: LD_EXP 18
17066: PUSH
17067: LD_INT 2
17069: EQUAL
17070: AND
17071: PUSH
17072: LD_EXP 18
17076: PUSH
17077: LD_EXP 37
17081: LESS
17082: AND
17083: IFFALSE 17277
17085: GO 17087
17087: DISABLE
// begin PrepareArabianVehicles ;
17088: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17092: LD_EXP 63
17096: PPUSH
17097: LD_INT 135
17099: PUSH
17100: LD_INT 4
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 134
17109: PUSH
17110: LD_INT 19
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 132
17119: PUSH
17120: LD_INT 26
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 128
17129: PUSH
17130: LD_INT 31
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 123
17139: PUSH
17140: LD_INT 37
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 118
17149: PUSH
17150: LD_INT 45
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 112
17159: PUSH
17160: LD_INT 51
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 106
17169: PUSH
17170: LD_INT 57
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 99
17179: PUSH
17180: LD_INT 62
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 104
17189: PUSH
17190: LD_INT 71
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 110
17199: PUSH
17200: LD_INT 78
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 119
17209: PUSH
17210: LD_INT 88
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 128
17219: PUSH
17220: LD_INT 97
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 135
17229: PUSH
17230: LD_INT 106
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 140
17239: PUSH
17240: LD_INT 153
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: PPUSH
17264: LD_INT 0
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: LD_INT 11
17272: PPUSH
17273: CALL 4674 0 5
// end ;
17277: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17278: LD_EXP 16
17282: PUSH
17283: LD_EXP 18
17287: PUSH
17288: LD_INT 3
17290: EQUAL
17291: AND
17292: PUSH
17293: LD_EXP 18
17297: PUSH
17298: LD_EXP 37
17302: LESS
17303: AND
17304: IFFALSE 17381
17306: GO 17308
17308: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17309: LD_INT 7
17311: PPUSH
17312: CALL 3503 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17316: LD_EXP 63
17320: PPUSH
17321: LD_INT 157
17323: PUSH
17324: LD_INT 31
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 194
17333: PUSH
17334: LD_INT 124
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 174
17343: PUSH
17344: LD_INT 158
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 151
17353: PUSH
17354: LD_INT 164
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PPUSH
17367: LD_INT 0
17369: PPUSH
17370: LD_INT 1
17372: PPUSH
17373: LD_INT 1
17375: NEG
17376: PPUSH
17377: CALL 4674 0 5
// end ;
17381: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17382: LD_EXP 16
17386: PUSH
17387: LD_EXP 18
17391: PUSH
17392: LD_INT 3
17394: EQUAL
17395: AND
17396: PUSH
17397: LD_EXP 18
17401: PUSH
17402: LD_EXP 37
17406: LESS
17407: AND
17408: IFFALSE 17645
17410: GO 17412
17412: DISABLE
// begin wait ( 1 1$30 ) ;
17413: LD_INT 3150
17415: PPUSH
17416: CALL_OW 67
// currentWave = currentWave + 1 ;
17420: LD_ADDR_EXP 18
17424: PUSH
17425: LD_EXP 18
17429: PUSH
17430: LD_INT 1
17432: PLUS
17433: ST_TO_ADDR
// PrepareArabianVehicles ;
17434: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17438: LD_EXP 63
17442: PPUSH
17443: LD_INT 135
17445: PUSH
17446: LD_INT 4
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 134
17455: PUSH
17456: LD_INT 19
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 132
17465: PUSH
17466: LD_INT 26
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 128
17475: PUSH
17476: LD_INT 31
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 123
17485: PUSH
17486: LD_INT 37
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 118
17495: PUSH
17496: LD_INT 45
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 112
17505: PUSH
17506: LD_INT 51
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 106
17515: PUSH
17516: LD_INT 57
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 99
17525: PUSH
17526: LD_INT 62
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 93
17535: PUSH
17536: LD_INT 67
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 86
17545: PUSH
17546: LD_INT 72
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 78
17555: PUSH
17556: LD_INT 75
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 71
17565: PUSH
17566: LD_INT 81
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 69
17575: PUSH
17576: LD_INT 88
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 71
17585: PUSH
17586: LD_INT 95
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 74
17595: PUSH
17596: LD_INT 103
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 80
17605: PUSH
17606: LD_INT 113
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: PPUSH
17632: LD_INT 0
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 11
17640: PPUSH
17641: CALL 4674 0 5
// end ;
17645: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
17646: LD_EXP 16
17650: PUSH
17651: LD_OWVAR 67
17655: PUSH
17656: LD_INT 2
17658: EQUAL
17659: AND
17660: PUSH
17661: LD_EXP 18
17665: PUSH
17666: LD_INT 3
17668: EQUAL
17669: AND
17670: PUSH
17671: LD_EXP 18
17675: PUSH
17676: LD_EXP 37
17680: LESS
17681: AND
17682: IFFALSE 17876
17684: GO 17686
17686: DISABLE
// begin PrepareArabianVehicles ;
17687: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17691: LD_EXP 63
17695: PPUSH
17696: LD_INT 135
17698: PUSH
17699: LD_INT 4
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 134
17708: PUSH
17709: LD_INT 19
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 132
17718: PUSH
17719: LD_INT 26
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 128
17728: PUSH
17729: LD_INT 31
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 123
17738: PUSH
17739: LD_INT 37
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 118
17748: PUSH
17749: LD_INT 45
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 112
17758: PUSH
17759: LD_INT 51
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 106
17768: PUSH
17769: LD_INT 57
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 99
17778: PUSH
17779: LD_INT 62
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 104
17788: PUSH
17789: LD_INT 71
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 110
17798: PUSH
17799: LD_INT 78
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 119
17808: PUSH
17809: LD_INT 88
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 128
17818: PUSH
17819: LD_INT 97
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 135
17828: PUSH
17829: LD_INT 106
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 140
17838: PUSH
17839: LD_INT 153
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: PPUSH
17863: LD_INT 0
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_INT 11
17871: PPUSH
17872: CALL 4674 0 5
// end ;
17876: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
17877: LD_EXP 16
17881: PUSH
17882: LD_OWVAR 67
17886: PUSH
17887: LD_INT 3
17889: EQUAL
17890: AND
17891: PUSH
17892: LD_EXP 18
17896: PUSH
17897: LD_INT 3
17899: EQUAL
17900: AND
17901: PUSH
17902: LD_EXP 18
17906: PUSH
17907: LD_EXP 37
17911: LESS
17912: AND
17913: IFFALSE 18107
17915: GO 17917
17917: DISABLE
// begin PrepareArabianVehicles ;
17918: CALL 3213 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17922: LD_EXP 63
17926: PPUSH
17927: LD_INT 135
17929: PUSH
17930: LD_INT 4
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 134
17939: PUSH
17940: LD_INT 19
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 132
17949: PUSH
17950: LD_INT 26
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 128
17959: PUSH
17960: LD_INT 31
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 123
17969: PUSH
17970: LD_INT 37
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 118
17979: PUSH
17980: LD_INT 45
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 112
17989: PUSH
17990: LD_INT 51
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 106
17999: PUSH
18000: LD_INT 57
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 99
18009: PUSH
18010: LD_INT 62
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 104
18019: PUSH
18020: LD_INT 71
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 110
18029: PUSH
18030: LD_INT 78
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 119
18039: PUSH
18040: LD_INT 88
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 128
18049: PUSH
18050: LD_INT 97
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 135
18059: PUSH
18060: LD_INT 106
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 140
18069: PUSH
18070: LD_INT 153
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: PPUSH
18094: LD_INT 0
18096: PPUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 11
18102: PPUSH
18103: CALL 4674 0 5
// end ;
18107: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18108: LD_EXP 53
18112: PPUSH
18113: CALL_OW 305
18117: PUSH
18118: LD_EXP 22
18122: PUSH
18123: LD_INT 5
18125: LESS
18126: AND
18127: IFFALSE 18137
18129: GO 18131
18131: DISABLE
// begin PrepareArabianKiller ;
18132: CALL 3722 0 0
// enable ;
18136: ENABLE
// end ; end_of_file
18137: END
// export function SetAchievements ; begin
18138: LD_INT 0
18140: PPUSH
// if stealWarmCount = 0 then
18141: LD_EXP 11
18145: PUSH
18146: LD_INT 0
18148: EQUAL
18149: IFFALSE 18158
// SetAchievement ( ACH_ENO ) ;
18151: LD_STRING ACH_ENO
18153: PPUSH
18154: CALL_OW 543
// end ;
18158: LD_VAR 0 1
18162: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18163: LD_EXP 24
18167: PUSH
18168: LD_INT 6
18170: GREATEREQUAL
18171: IFFALSE 18183
18173: GO 18175
18175: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18176: LD_STRING ACH_DEFENSE
18178: PPUSH
18179: CALL_OW 543
18183: END
// every 1 trigger killedArabianUnits >= 25 do
18184: LD_EXP 21
18188: PUSH
18189: LD_INT 25
18191: GREATEREQUAL
18192: IFFALSE 18204
18194: GO 18196
18196: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18197: LD_STRING ACH_ARAB
18199: PPUSH
18200: CALL_OW 543
18204: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18205: LD_VAR 0 2
18209: PUSH
18210: LD_INT 100
18212: EQUAL
18213: IFFALSE 19162
// begin if not StreamModeActive then
18215: LD_EXP 64
18219: NOT
18220: IFFALSE 18230
// StreamModeActive := true ;
18222: LD_ADDR_EXP 64
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// if p3 = 0 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 0
18237: EQUAL
18238: IFFALSE 18244
// InitStreamMode ;
18240: CALL 19395 0 0
// if p3 = 1 then
18244: LD_VAR 0 3
18248: PUSH
18249: LD_INT 1
18251: EQUAL
18252: IFFALSE 18262
// sRocket := true ;
18254: LD_ADDR_EXP 69
18258: PUSH
18259: LD_INT 1
18261: ST_TO_ADDR
// if p3 = 2 then
18262: LD_VAR 0 3
18266: PUSH
18267: LD_INT 2
18269: EQUAL
18270: IFFALSE 18280
// sSpeed := true ;
18272: LD_ADDR_EXP 68
18276: PUSH
18277: LD_INT 1
18279: ST_TO_ADDR
// if p3 = 3 then
18280: LD_VAR 0 3
18284: PUSH
18285: LD_INT 3
18287: EQUAL
18288: IFFALSE 18298
// sEngine := true ;
18290: LD_ADDR_EXP 70
18294: PUSH
18295: LD_INT 1
18297: ST_TO_ADDR
// if p3 = 4 then
18298: LD_VAR 0 3
18302: PUSH
18303: LD_INT 4
18305: EQUAL
18306: IFFALSE 18316
// sSpec := true ;
18308: LD_ADDR_EXP 67
18312: PUSH
18313: LD_INT 1
18315: ST_TO_ADDR
// if p3 = 5 then
18316: LD_VAR 0 3
18320: PUSH
18321: LD_INT 5
18323: EQUAL
18324: IFFALSE 18334
// sLevel := true ;
18326: LD_ADDR_EXP 71
18330: PUSH
18331: LD_INT 1
18333: ST_TO_ADDR
// if p3 = 6 then
18334: LD_VAR 0 3
18338: PUSH
18339: LD_INT 6
18341: EQUAL
18342: IFFALSE 18352
// sArmoury := true ;
18344: LD_ADDR_EXP 72
18348: PUSH
18349: LD_INT 1
18351: ST_TO_ADDR
// if p3 = 7 then
18352: LD_VAR 0 3
18356: PUSH
18357: LD_INT 7
18359: EQUAL
18360: IFFALSE 18370
// sRadar := true ;
18362: LD_ADDR_EXP 73
18366: PUSH
18367: LD_INT 1
18369: ST_TO_ADDR
// if p3 = 8 then
18370: LD_VAR 0 3
18374: PUSH
18375: LD_INT 8
18377: EQUAL
18378: IFFALSE 18388
// sBunker := true ;
18380: LD_ADDR_EXP 74
18384: PUSH
18385: LD_INT 1
18387: ST_TO_ADDR
// if p3 = 9 then
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 9
18395: EQUAL
18396: IFFALSE 18406
// sHack := true ;
18398: LD_ADDR_EXP 75
18402: PUSH
18403: LD_INT 1
18405: ST_TO_ADDR
// if p3 = 10 then
18406: LD_VAR 0 3
18410: PUSH
18411: LD_INT 10
18413: EQUAL
18414: IFFALSE 18424
// sFire := true ;
18416: LD_ADDR_EXP 76
18420: PUSH
18421: LD_INT 1
18423: ST_TO_ADDR
// if p3 = 11 then
18424: LD_VAR 0 3
18428: PUSH
18429: LD_INT 11
18431: EQUAL
18432: IFFALSE 18442
// sRefresh := true ;
18434: LD_ADDR_EXP 77
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// if p3 = 12 then
18442: LD_VAR 0 3
18446: PUSH
18447: LD_INT 12
18449: EQUAL
18450: IFFALSE 18460
// sExp := true ;
18452: LD_ADDR_EXP 78
18456: PUSH
18457: LD_INT 1
18459: ST_TO_ADDR
// if p3 = 13 then
18460: LD_VAR 0 3
18464: PUSH
18465: LD_INT 13
18467: EQUAL
18468: IFFALSE 18478
// sDepot := true ;
18470: LD_ADDR_EXP 79
18474: PUSH
18475: LD_INT 1
18477: ST_TO_ADDR
// if p3 = 14 then
18478: LD_VAR 0 3
18482: PUSH
18483: LD_INT 14
18485: EQUAL
18486: IFFALSE 18496
// sFlag := true ;
18488: LD_ADDR_EXP 80
18492: PUSH
18493: LD_INT 1
18495: ST_TO_ADDR
// if p3 = 15 then
18496: LD_VAR 0 3
18500: PUSH
18501: LD_INT 15
18503: EQUAL
18504: IFFALSE 18514
// sKamikadze := true ;
18506: LD_ADDR_EXP 88
18510: PUSH
18511: LD_INT 1
18513: ST_TO_ADDR
// if p3 = 16 then
18514: LD_VAR 0 3
18518: PUSH
18519: LD_INT 16
18521: EQUAL
18522: IFFALSE 18532
// sTroll := true ;
18524: LD_ADDR_EXP 89
18528: PUSH
18529: LD_INT 1
18531: ST_TO_ADDR
// if p3 = 17 then
18532: LD_VAR 0 3
18536: PUSH
18537: LD_INT 17
18539: EQUAL
18540: IFFALSE 18550
// sSlow := true ;
18542: LD_ADDR_EXP 90
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// if p3 = 18 then
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 18
18557: EQUAL
18558: IFFALSE 18568
// sLack := true ;
18560: LD_ADDR_EXP 91
18564: PUSH
18565: LD_INT 1
18567: ST_TO_ADDR
// if p3 = 19 then
18568: LD_VAR 0 3
18572: PUSH
18573: LD_INT 19
18575: EQUAL
18576: IFFALSE 18586
// sTank := true ;
18578: LD_ADDR_EXP 93
18582: PUSH
18583: LD_INT 1
18585: ST_TO_ADDR
// if p3 = 20 then
18586: LD_VAR 0 3
18590: PUSH
18591: LD_INT 20
18593: EQUAL
18594: IFFALSE 18604
// sRemote := true ;
18596: LD_ADDR_EXP 94
18600: PUSH
18601: LD_INT 1
18603: ST_TO_ADDR
// if p3 = 21 then
18604: LD_VAR 0 3
18608: PUSH
18609: LD_INT 21
18611: EQUAL
18612: IFFALSE 18622
// sPowell := true ;
18614: LD_ADDR_EXP 95
18618: PUSH
18619: LD_INT 1
18621: ST_TO_ADDR
// if p3 = 22 then
18622: LD_VAR 0 3
18626: PUSH
18627: LD_INT 22
18629: EQUAL
18630: IFFALSE 18640
// sTeleport := true ;
18632: LD_ADDR_EXP 98
18636: PUSH
18637: LD_INT 1
18639: ST_TO_ADDR
// if p3 = 23 then
18640: LD_VAR 0 3
18644: PUSH
18645: LD_INT 23
18647: EQUAL
18648: IFFALSE 18658
// sOilTower := true ;
18650: LD_ADDR_EXP 100
18654: PUSH
18655: LD_INT 1
18657: ST_TO_ADDR
// if p3 = 24 then
18658: LD_VAR 0 3
18662: PUSH
18663: LD_INT 24
18665: EQUAL
18666: IFFALSE 18676
// sShovel := true ;
18668: LD_ADDR_EXP 101
18672: PUSH
18673: LD_INT 1
18675: ST_TO_ADDR
// if p3 = 25 then
18676: LD_VAR 0 3
18680: PUSH
18681: LD_INT 25
18683: EQUAL
18684: IFFALSE 18694
// sSheik := true ;
18686: LD_ADDR_EXP 102
18690: PUSH
18691: LD_INT 1
18693: ST_TO_ADDR
// if p3 = 26 then
18694: LD_VAR 0 3
18698: PUSH
18699: LD_INT 26
18701: EQUAL
18702: IFFALSE 18712
// sEarthquake := true ;
18704: LD_ADDR_EXP 104
18708: PUSH
18709: LD_INT 1
18711: ST_TO_ADDR
// if p3 = 27 then
18712: LD_VAR 0 3
18716: PUSH
18717: LD_INT 27
18719: EQUAL
18720: IFFALSE 18730
// sAI := true ;
18722: LD_ADDR_EXP 105
18726: PUSH
18727: LD_INT 1
18729: ST_TO_ADDR
// if p3 = 28 then
18730: LD_VAR 0 3
18734: PUSH
18735: LD_INT 28
18737: EQUAL
18738: IFFALSE 18748
// sCargo := true ;
18740: LD_ADDR_EXP 108
18744: PUSH
18745: LD_INT 1
18747: ST_TO_ADDR
// if p3 = 29 then
18748: LD_VAR 0 3
18752: PUSH
18753: LD_INT 29
18755: EQUAL
18756: IFFALSE 18766
// sDLaser := true ;
18758: LD_ADDR_EXP 109
18762: PUSH
18763: LD_INT 1
18765: ST_TO_ADDR
// if p3 = 30 then
18766: LD_VAR 0 3
18770: PUSH
18771: LD_INT 30
18773: EQUAL
18774: IFFALSE 18784
// sExchange := true ;
18776: LD_ADDR_EXP 110
18780: PUSH
18781: LD_INT 1
18783: ST_TO_ADDR
// if p3 = 31 then
18784: LD_VAR 0 3
18788: PUSH
18789: LD_INT 31
18791: EQUAL
18792: IFFALSE 18802
// sFac := true ;
18794: LD_ADDR_EXP 111
18798: PUSH
18799: LD_INT 1
18801: ST_TO_ADDR
// if p3 = 32 then
18802: LD_VAR 0 3
18806: PUSH
18807: LD_INT 32
18809: EQUAL
18810: IFFALSE 18820
// sPower := true ;
18812: LD_ADDR_EXP 112
18816: PUSH
18817: LD_INT 1
18819: ST_TO_ADDR
// if p3 = 33 then
18820: LD_VAR 0 3
18824: PUSH
18825: LD_INT 33
18827: EQUAL
18828: IFFALSE 18838
// sRandom := true ;
18830: LD_ADDR_EXP 113
18834: PUSH
18835: LD_INT 1
18837: ST_TO_ADDR
// if p3 = 34 then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 34
18845: EQUAL
18846: IFFALSE 18856
// sShield := true ;
18848: LD_ADDR_EXP 114
18852: PUSH
18853: LD_INT 1
18855: ST_TO_ADDR
// if p3 = 35 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_INT 35
18863: EQUAL
18864: IFFALSE 18874
// sTime := true ;
18866: LD_ADDR_EXP 115
18870: PUSH
18871: LD_INT 1
18873: ST_TO_ADDR
// if p3 = 36 then
18874: LD_VAR 0 3
18878: PUSH
18879: LD_INT 36
18881: EQUAL
18882: IFFALSE 18892
// sTools := true ;
18884: LD_ADDR_EXP 116
18888: PUSH
18889: LD_INT 1
18891: ST_TO_ADDR
// if p3 = 101 then
18892: LD_VAR 0 3
18896: PUSH
18897: LD_INT 101
18899: EQUAL
18900: IFFALSE 18910
// sSold := true ;
18902: LD_ADDR_EXP 81
18906: PUSH
18907: LD_INT 1
18909: ST_TO_ADDR
// if p3 = 102 then
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 102
18917: EQUAL
18918: IFFALSE 18928
// sDiff := true ;
18920: LD_ADDR_EXP 82
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 103 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 103
18935: EQUAL
18936: IFFALSE 18946
// sFog := true ;
18938: LD_ADDR_EXP 85
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// if p3 = 104 then
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 104
18953: EQUAL
18954: IFFALSE 18964
// sReset := true ;
18956: LD_ADDR_EXP 86
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// if p3 = 105 then
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 105
18971: EQUAL
18972: IFFALSE 18982
// sSun := true ;
18974: LD_ADDR_EXP 87
18978: PUSH
18979: LD_INT 1
18981: ST_TO_ADDR
// if p3 = 106 then
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 106
18989: EQUAL
18990: IFFALSE 19000
// sTiger := true ;
18992: LD_ADDR_EXP 83
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// if p3 = 107 then
19000: LD_VAR 0 3
19004: PUSH
19005: LD_INT 107
19007: EQUAL
19008: IFFALSE 19018
// sBomb := true ;
19010: LD_ADDR_EXP 84
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// if p3 = 108 then
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 108
19025: EQUAL
19026: IFFALSE 19036
// sWound := true ;
19028: LD_ADDR_EXP 92
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// if p3 = 109 then
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 109
19043: EQUAL
19044: IFFALSE 19054
// sBetray := true ;
19046: LD_ADDR_EXP 96
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// if p3 = 110 then
19054: LD_VAR 0 3
19058: PUSH
19059: LD_INT 110
19061: EQUAL
19062: IFFALSE 19072
// sContamin := true ;
19064: LD_ADDR_EXP 97
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// if p3 = 111 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 111
19079: EQUAL
19080: IFFALSE 19090
// sOil := true ;
19082: LD_ADDR_EXP 99
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// if p3 = 112 then
19090: LD_VAR 0 3
19094: PUSH
19095: LD_INT 112
19097: EQUAL
19098: IFFALSE 19108
// sStu := true ;
19100: LD_ADDR_EXP 103
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// if p3 = 113 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 113
19115: EQUAL
19116: IFFALSE 19126
// sBazooka := true ;
19118: LD_ADDR_EXP 106
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 114 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 114
19133: EQUAL
19134: IFFALSE 19144
// sMortar := true ;
19136: LD_ADDR_EXP 107
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 115 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 115
19151: EQUAL
19152: IFFALSE 19162
// sRanger := true ;
19154: LD_ADDR_EXP 117
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// end ; if p2 = 101 then
19162: LD_VAR 0 2
19166: PUSH
19167: LD_INT 101
19169: EQUAL
19170: IFFALSE 19373
// begin case p3 of 1 :
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 1
19179: DOUBLE
19180: EQUAL
19181: IFTRUE 19185
19183: GO 19192
19185: POP
// hHackUnlimitedResources ; 2 :
19186: CALL 29467 0 0
19190: GO 19373
19192: LD_INT 2
19194: DOUBLE
19195: EQUAL
19196: IFTRUE 19200
19198: GO 19207
19200: POP
// hHackSetLevel10 ; 3 :
19201: CALL 29600 0 0
19205: GO 19373
19207: LD_INT 3
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19222
19215: POP
// hHackSetLevel10YourUnits ; 4 :
19216: CALL 29685 0 0
19220: GO 19373
19222: LD_INT 4
19224: DOUBLE
19225: EQUAL
19226: IFTRUE 19230
19228: GO 19252
19230: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
19231: LD_VAR 0 4
19235: PPUSH
19236: LD_VAR 0 5
19240: PPUSH
19241: LD_VAR 0 6
19245: PPUSH
19246: CALL 29775 0 3
19250: GO 19373
19252: LD_INT 5
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19267
19260: POP
// hHackSpawnVehicle ; 6 :
19261: CALL 29836 0 0
19265: GO 19373
19267: LD_INT 6
19269: DOUBLE
19270: EQUAL
19271: IFTRUE 19275
19273: GO 19282
19275: POP
// hHackInvincible ; 7 :
19276: CALL 30382 0 0
19280: GO 19373
19282: LD_INT 7
19284: DOUBLE
19285: EQUAL
19286: IFTRUE 19290
19288: GO 19297
19290: POP
// hHackInvisible ; 8 :
19291: CALL 30493 0 0
19295: GO 19373
19297: LD_INT 8
19299: DOUBLE
19300: EQUAL
19301: IFTRUE 19305
19303: GO 19312
19305: POP
// hHackChangeYourSide ; 9 :
19306: CALL 30550 0 0
19310: GO 19373
19312: LD_INT 9
19314: DOUBLE
19315: EQUAL
19316: IFTRUE 19320
19318: GO 19327
19320: POP
// hHackChangeUnitSide ; 10 :
19321: CALL 30592 0 0
19325: GO 19373
19327: LD_INT 10
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19335
19333: GO 19342
19335: POP
// hHackFog ; 11 :
19336: CALL 30693 0 0
19340: GO 19373
19342: LD_INT 11
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19357
19350: POP
// hHackApeman ; 12 :
19351: CALL 30708 0 0
19355: GO 19373
19357: LD_INT 12
19359: DOUBLE
19360: EQUAL
19361: IFTRUE 19365
19363: GO 19372
19365: POP
// hHackBoom ; end ;
19366: CALL 30793 0 0
19370: GO 19373
19372: POP
// end ; end ;
19373: PPOPN 6
19375: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19376: GO 19378
19378: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19379: LD_STRING initStreamRollete();
19381: PPUSH
19382: CALL_OW 559
// InitStreamMode ;
19386: CALL 19395 0 0
// DefineStreamItems ( ) ;
19390: CALL 19835 0 0
// end ;
19394: END
// function InitStreamMode ; begin
19395: LD_INT 0
19397: PPUSH
// streamModeActive := false ;
19398: LD_ADDR_EXP 64
19402: PUSH
19403: LD_INT 0
19405: ST_TO_ADDR
// normalCounter := 36 ;
19406: LD_ADDR_EXP 65
19410: PUSH
19411: LD_INT 36
19413: ST_TO_ADDR
// hardcoreCounter := 16 ;
19414: LD_ADDR_EXP 66
19418: PUSH
19419: LD_INT 16
19421: ST_TO_ADDR
// sRocket := false ;
19422: LD_ADDR_EXP 69
19426: PUSH
19427: LD_INT 0
19429: ST_TO_ADDR
// sSpeed := false ;
19430: LD_ADDR_EXP 68
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// sEngine := false ;
19438: LD_ADDR_EXP 70
19442: PUSH
19443: LD_INT 0
19445: ST_TO_ADDR
// sSpec := false ;
19446: LD_ADDR_EXP 67
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// sLevel := false ;
19454: LD_ADDR_EXP 71
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// sArmoury := false ;
19462: LD_ADDR_EXP 72
19466: PUSH
19467: LD_INT 0
19469: ST_TO_ADDR
// sRadar := false ;
19470: LD_ADDR_EXP 73
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// sBunker := false ;
19478: LD_ADDR_EXP 74
19482: PUSH
19483: LD_INT 0
19485: ST_TO_ADDR
// sHack := false ;
19486: LD_ADDR_EXP 75
19490: PUSH
19491: LD_INT 0
19493: ST_TO_ADDR
// sFire := false ;
19494: LD_ADDR_EXP 76
19498: PUSH
19499: LD_INT 0
19501: ST_TO_ADDR
// sRefresh := false ;
19502: LD_ADDR_EXP 77
19506: PUSH
19507: LD_INT 0
19509: ST_TO_ADDR
// sExp := false ;
19510: LD_ADDR_EXP 78
19514: PUSH
19515: LD_INT 0
19517: ST_TO_ADDR
// sDepot := false ;
19518: LD_ADDR_EXP 79
19522: PUSH
19523: LD_INT 0
19525: ST_TO_ADDR
// sFlag := false ;
19526: LD_ADDR_EXP 80
19530: PUSH
19531: LD_INT 0
19533: ST_TO_ADDR
// sKamikadze := false ;
19534: LD_ADDR_EXP 88
19538: PUSH
19539: LD_INT 0
19541: ST_TO_ADDR
// sTroll := false ;
19542: LD_ADDR_EXP 89
19546: PUSH
19547: LD_INT 0
19549: ST_TO_ADDR
// sSlow := false ;
19550: LD_ADDR_EXP 90
19554: PUSH
19555: LD_INT 0
19557: ST_TO_ADDR
// sLack := false ;
19558: LD_ADDR_EXP 91
19562: PUSH
19563: LD_INT 0
19565: ST_TO_ADDR
// sTank := false ;
19566: LD_ADDR_EXP 93
19570: PUSH
19571: LD_INT 0
19573: ST_TO_ADDR
// sRemote := false ;
19574: LD_ADDR_EXP 94
19578: PUSH
19579: LD_INT 0
19581: ST_TO_ADDR
// sPowell := false ;
19582: LD_ADDR_EXP 95
19586: PUSH
19587: LD_INT 0
19589: ST_TO_ADDR
// sTeleport := false ;
19590: LD_ADDR_EXP 98
19594: PUSH
19595: LD_INT 0
19597: ST_TO_ADDR
// sOilTower := false ;
19598: LD_ADDR_EXP 100
19602: PUSH
19603: LD_INT 0
19605: ST_TO_ADDR
// sShovel := false ;
19606: LD_ADDR_EXP 101
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// sSheik := false ;
19614: LD_ADDR_EXP 102
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// sEarthquake := false ;
19622: LD_ADDR_EXP 104
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// sAI := false ;
19630: LD_ADDR_EXP 105
19634: PUSH
19635: LD_INT 0
19637: ST_TO_ADDR
// sCargo := false ;
19638: LD_ADDR_EXP 108
19642: PUSH
19643: LD_INT 0
19645: ST_TO_ADDR
// sDLaser := false ;
19646: LD_ADDR_EXP 109
19650: PUSH
19651: LD_INT 0
19653: ST_TO_ADDR
// sExchange := false ;
19654: LD_ADDR_EXP 110
19658: PUSH
19659: LD_INT 0
19661: ST_TO_ADDR
// sFac := false ;
19662: LD_ADDR_EXP 111
19666: PUSH
19667: LD_INT 0
19669: ST_TO_ADDR
// sPower := false ;
19670: LD_ADDR_EXP 112
19674: PUSH
19675: LD_INT 0
19677: ST_TO_ADDR
// sRandom := false ;
19678: LD_ADDR_EXP 113
19682: PUSH
19683: LD_INT 0
19685: ST_TO_ADDR
// sShield := false ;
19686: LD_ADDR_EXP 114
19690: PUSH
19691: LD_INT 0
19693: ST_TO_ADDR
// sTime := false ;
19694: LD_ADDR_EXP 115
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// sTools := false ;
19702: LD_ADDR_EXP 116
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// sSold := false ;
19710: LD_ADDR_EXP 81
19714: PUSH
19715: LD_INT 0
19717: ST_TO_ADDR
// sDiff := false ;
19718: LD_ADDR_EXP 82
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// sFog := false ;
19726: LD_ADDR_EXP 85
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// sReset := false ;
19734: LD_ADDR_EXP 86
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// sSun := false ;
19742: LD_ADDR_EXP 87
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// sTiger := false ;
19750: LD_ADDR_EXP 83
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// sBomb := false ;
19758: LD_ADDR_EXP 84
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// sWound := false ;
19766: LD_ADDR_EXP 92
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// sBetray := false ;
19774: LD_ADDR_EXP 96
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// sContamin := false ;
19782: LD_ADDR_EXP 97
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// sOil := false ;
19790: LD_ADDR_EXP 99
19794: PUSH
19795: LD_INT 0
19797: ST_TO_ADDR
// sStu := false ;
19798: LD_ADDR_EXP 103
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// sBazooka := false ;
19806: LD_ADDR_EXP 106
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// sMortar := false ;
19814: LD_ADDR_EXP 107
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// sRanger := false ;
19822: LD_ADDR_EXP 117
19826: PUSH
19827: LD_INT 0
19829: ST_TO_ADDR
// end ;
19830: LD_VAR 0 1
19834: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
19839: PPUSH
19840: PPUSH
19841: PPUSH
// result := [ ] ;
19842: LD_ADDR_VAR 0 1
19846: PUSH
19847: EMPTY
19848: ST_TO_ADDR
// if campaign_id = 1 then
19849: LD_OWVAR 69
19853: PUSH
19854: LD_INT 1
19856: EQUAL
19857: IFFALSE 22795
// begin case mission_number of 1 :
19859: LD_OWVAR 70
19863: PUSH
19864: LD_INT 1
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19936
19872: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19873: LD_ADDR_VAR 0 1
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: LD_INT 4
19883: PUSH
19884: LD_INT 11
19886: PUSH
19887: LD_INT 12
19889: PUSH
19890: LD_INT 15
19892: PUSH
19893: LD_INT 16
19895: PUSH
19896: LD_INT 22
19898: PUSH
19899: LD_INT 23
19901: PUSH
19902: LD_INT 26
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 101
19918: PUSH
19919: LD_INT 102
19921: PUSH
19922: LD_INT 106
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: ST_TO_ADDR
19934: GO 22793
19936: LD_INT 2
19938: DOUBLE
19939: EQUAL
19940: IFTRUE 19944
19942: GO 20016
19944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19945: LD_ADDR_VAR 0 1
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: LD_INT 4
19955: PUSH
19956: LD_INT 11
19958: PUSH
19959: LD_INT 12
19961: PUSH
19962: LD_INT 15
19964: PUSH
19965: LD_INT 16
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_INT 23
19973: PUSH
19974: LD_INT 26
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 101
19990: PUSH
19991: LD_INT 102
19993: PUSH
19994: LD_INT 105
19996: PUSH
19997: LD_INT 106
19999: PUSH
20000: LD_INT 108
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: ST_TO_ADDR
20014: GO 22793
20016: LD_INT 3
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20100
20024: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20025: LD_ADDR_VAR 0 1
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 4
20035: PUSH
20036: LD_INT 5
20038: PUSH
20039: LD_INT 11
20041: PUSH
20042: LD_INT 12
20044: PUSH
20045: LD_INT 15
20047: PUSH
20048: LD_INT 16
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_INT 26
20056: PUSH
20057: LD_INT 36
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 101
20074: PUSH
20075: LD_INT 102
20077: PUSH
20078: LD_INT 105
20080: PUSH
20081: LD_INT 106
20083: PUSH
20084: LD_INT 108
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: ST_TO_ADDR
20098: GO 22793
20100: LD_INT 4
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20192
20108: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20109: LD_ADDR_VAR 0 1
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: LD_INT 4
20119: PUSH
20120: LD_INT 5
20122: PUSH
20123: LD_INT 8
20125: PUSH
20126: LD_INT 11
20128: PUSH
20129: LD_INT 12
20131: PUSH
20132: LD_INT 15
20134: PUSH
20135: LD_INT 16
20137: PUSH
20138: LD_INT 22
20140: PUSH
20141: LD_INT 23
20143: PUSH
20144: LD_INT 26
20146: PUSH
20147: LD_INT 36
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 101
20166: PUSH
20167: LD_INT 102
20169: PUSH
20170: LD_INT 105
20172: PUSH
20173: LD_INT 106
20175: PUSH
20176: LD_INT 108
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: ST_TO_ADDR
20190: GO 22793
20192: LD_INT 5
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20300
20200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20201: LD_ADDR_VAR 0 1
20205: PUSH
20206: LD_INT 2
20208: PUSH
20209: LD_INT 4
20211: PUSH
20212: LD_INT 5
20214: PUSH
20215: LD_INT 6
20217: PUSH
20218: LD_INT 8
20220: PUSH
20221: LD_INT 11
20223: PUSH
20224: LD_INT 12
20226: PUSH
20227: LD_INT 15
20229: PUSH
20230: LD_INT 16
20232: PUSH
20233: LD_INT 22
20235: PUSH
20236: LD_INT 23
20238: PUSH
20239: LD_INT 25
20241: PUSH
20242: LD_INT 26
20244: PUSH
20245: LD_INT 36
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 101
20266: PUSH
20267: LD_INT 102
20269: PUSH
20270: LD_INT 105
20272: PUSH
20273: LD_INT 106
20275: PUSH
20276: LD_INT 108
20278: PUSH
20279: LD_INT 109
20281: PUSH
20282: LD_INT 112
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: ST_TO_ADDR
20298: GO 22793
20300: LD_INT 6
20302: DOUBLE
20303: EQUAL
20304: IFTRUE 20308
20306: GO 20428
20308: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20309: LD_ADDR_VAR 0 1
20313: PUSH
20314: LD_INT 2
20316: PUSH
20317: LD_INT 4
20319: PUSH
20320: LD_INT 5
20322: PUSH
20323: LD_INT 6
20325: PUSH
20326: LD_INT 8
20328: PUSH
20329: LD_INT 11
20331: PUSH
20332: LD_INT 12
20334: PUSH
20335: LD_INT 15
20337: PUSH
20338: LD_INT 16
20340: PUSH
20341: LD_INT 20
20343: PUSH
20344: LD_INT 21
20346: PUSH
20347: LD_INT 22
20349: PUSH
20350: LD_INT 23
20352: PUSH
20353: LD_INT 25
20355: PUSH
20356: LD_INT 26
20358: PUSH
20359: LD_INT 30
20361: PUSH
20362: LD_INT 31
20364: PUSH
20365: LD_INT 32
20367: PUSH
20368: LD_INT 36
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 101
20394: PUSH
20395: LD_INT 102
20397: PUSH
20398: LD_INT 105
20400: PUSH
20401: LD_INT 106
20403: PUSH
20404: LD_INT 108
20406: PUSH
20407: LD_INT 109
20409: PUSH
20410: LD_INT 112
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: ST_TO_ADDR
20426: GO 22793
20428: LD_INT 7
20430: DOUBLE
20431: EQUAL
20432: IFTRUE 20436
20434: GO 20536
20436: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20437: LD_ADDR_VAR 0 1
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 4
20447: PUSH
20448: LD_INT 5
20450: PUSH
20451: LD_INT 7
20453: PUSH
20454: LD_INT 11
20456: PUSH
20457: LD_INT 12
20459: PUSH
20460: LD_INT 15
20462: PUSH
20463: LD_INT 16
20465: PUSH
20466: LD_INT 20
20468: PUSH
20469: LD_INT 21
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 23
20477: PUSH
20478: LD_INT 25
20480: PUSH
20481: LD_INT 26
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 101
20502: PUSH
20503: LD_INT 102
20505: PUSH
20506: LD_INT 103
20508: PUSH
20509: LD_INT 105
20511: PUSH
20512: LD_INT 106
20514: PUSH
20515: LD_INT 108
20517: PUSH
20518: LD_INT 112
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 22793
20536: LD_INT 8
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20672
20544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20545: LD_ADDR_VAR 0 1
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 4
20555: PUSH
20556: LD_INT 5
20558: PUSH
20559: LD_INT 6
20561: PUSH
20562: LD_INT 7
20564: PUSH
20565: LD_INT 8
20567: PUSH
20568: LD_INT 11
20570: PUSH
20571: LD_INT 12
20573: PUSH
20574: LD_INT 15
20576: PUSH
20577: LD_INT 16
20579: PUSH
20580: LD_INT 20
20582: PUSH
20583: LD_INT 21
20585: PUSH
20586: LD_INT 22
20588: PUSH
20589: LD_INT 23
20591: PUSH
20592: LD_INT 25
20594: PUSH
20595: LD_INT 26
20597: PUSH
20598: LD_INT 30
20600: PUSH
20601: LD_INT 31
20603: PUSH
20604: LD_INT 32
20606: PUSH
20607: LD_INT 36
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 101
20634: PUSH
20635: LD_INT 102
20637: PUSH
20638: LD_INT 103
20640: PUSH
20641: LD_INT 105
20643: PUSH
20644: LD_INT 106
20646: PUSH
20647: LD_INT 108
20649: PUSH
20650: LD_INT 109
20652: PUSH
20653: LD_INT 112
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 22793
20672: LD_INT 9
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20816
20680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 4
20691: PUSH
20692: LD_INT 5
20694: PUSH
20695: LD_INT 6
20697: PUSH
20698: LD_INT 7
20700: PUSH
20701: LD_INT 8
20703: PUSH
20704: LD_INT 11
20706: PUSH
20707: LD_INT 12
20709: PUSH
20710: LD_INT 15
20712: PUSH
20713: LD_INT 16
20715: PUSH
20716: LD_INT 20
20718: PUSH
20719: LD_INT 21
20721: PUSH
20722: LD_INT 22
20724: PUSH
20725: LD_INT 23
20727: PUSH
20728: LD_INT 25
20730: PUSH
20731: LD_INT 26
20733: PUSH
20734: LD_INT 28
20736: PUSH
20737: LD_INT 30
20739: PUSH
20740: LD_INT 31
20742: PUSH
20743: LD_INT 32
20745: PUSH
20746: LD_INT 36
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 101
20774: PUSH
20775: LD_INT 102
20777: PUSH
20778: LD_INT 103
20780: PUSH
20781: LD_INT 105
20783: PUSH
20784: LD_INT 106
20786: PUSH
20787: LD_INT 108
20789: PUSH
20790: LD_INT 109
20792: PUSH
20793: LD_INT 112
20795: PUSH
20796: LD_INT 114
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 22793
20816: LD_INT 10
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 21008
20824: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20825: LD_ADDR_VAR 0 1
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 4
20835: PUSH
20836: LD_INT 5
20838: PUSH
20839: LD_INT 6
20841: PUSH
20842: LD_INT 7
20844: PUSH
20845: LD_INT 8
20847: PUSH
20848: LD_INT 9
20850: PUSH
20851: LD_INT 10
20853: PUSH
20854: LD_INT 11
20856: PUSH
20857: LD_INT 12
20859: PUSH
20860: LD_INT 13
20862: PUSH
20863: LD_INT 14
20865: PUSH
20866: LD_INT 15
20868: PUSH
20869: LD_INT 16
20871: PUSH
20872: LD_INT 17
20874: PUSH
20875: LD_INT 18
20877: PUSH
20878: LD_INT 19
20880: PUSH
20881: LD_INT 20
20883: PUSH
20884: LD_INT 21
20886: PUSH
20887: LD_INT 22
20889: PUSH
20890: LD_INT 23
20892: PUSH
20893: LD_INT 24
20895: PUSH
20896: LD_INT 25
20898: PUSH
20899: LD_INT 26
20901: PUSH
20902: LD_INT 28
20904: PUSH
20905: LD_INT 30
20907: PUSH
20908: LD_INT 31
20910: PUSH
20911: LD_INT 32
20913: PUSH
20914: LD_INT 36
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 101
20950: PUSH
20951: LD_INT 102
20953: PUSH
20954: LD_INT 103
20956: PUSH
20957: LD_INT 104
20959: PUSH
20960: LD_INT 105
20962: PUSH
20963: LD_INT 106
20965: PUSH
20966: LD_INT 107
20968: PUSH
20969: LD_INT 108
20971: PUSH
20972: LD_INT 109
20974: PUSH
20975: LD_INT 110
20977: PUSH
20978: LD_INT 111
20980: PUSH
20981: LD_INT 112
20983: PUSH
20984: LD_INT 114
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 22793
21008: LD_INT 11
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21208
21016: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21017: LD_ADDR_VAR 0 1
21021: PUSH
21022: LD_INT 2
21024: PUSH
21025: LD_INT 3
21027: PUSH
21028: LD_INT 4
21030: PUSH
21031: LD_INT 5
21033: PUSH
21034: LD_INT 6
21036: PUSH
21037: LD_INT 7
21039: PUSH
21040: LD_INT 8
21042: PUSH
21043: LD_INT 9
21045: PUSH
21046: LD_INT 10
21048: PUSH
21049: LD_INT 11
21051: PUSH
21052: LD_INT 12
21054: PUSH
21055: LD_INT 13
21057: PUSH
21058: LD_INT 14
21060: PUSH
21061: LD_INT 15
21063: PUSH
21064: LD_INT 16
21066: PUSH
21067: LD_INT 17
21069: PUSH
21070: LD_INT 18
21072: PUSH
21073: LD_INT 19
21075: PUSH
21076: LD_INT 20
21078: PUSH
21079: LD_INT 21
21081: PUSH
21082: LD_INT 22
21084: PUSH
21085: LD_INT 23
21087: PUSH
21088: LD_INT 24
21090: PUSH
21091: LD_INT 25
21093: PUSH
21094: LD_INT 26
21096: PUSH
21097: LD_INT 28
21099: PUSH
21100: LD_INT 30
21102: PUSH
21103: LD_INT 31
21105: PUSH
21106: LD_INT 32
21108: PUSH
21109: LD_INT 34
21111: PUSH
21112: LD_INT 36
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 101
21150: PUSH
21151: LD_INT 102
21153: PUSH
21154: LD_INT 103
21156: PUSH
21157: LD_INT 104
21159: PUSH
21160: LD_INT 105
21162: PUSH
21163: LD_INT 106
21165: PUSH
21166: LD_INT 107
21168: PUSH
21169: LD_INT 108
21171: PUSH
21172: LD_INT 109
21174: PUSH
21175: LD_INT 110
21177: PUSH
21178: LD_INT 111
21180: PUSH
21181: LD_INT 112
21183: PUSH
21184: LD_INT 114
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: ST_TO_ADDR
21206: GO 22793
21208: LD_INT 12
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21424
21216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21217: LD_ADDR_VAR 0 1
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: LD_INT 4
21233: PUSH
21234: LD_INT 5
21236: PUSH
21237: LD_INT 6
21239: PUSH
21240: LD_INT 7
21242: PUSH
21243: LD_INT 8
21245: PUSH
21246: LD_INT 9
21248: PUSH
21249: LD_INT 10
21251: PUSH
21252: LD_INT 11
21254: PUSH
21255: LD_INT 12
21257: PUSH
21258: LD_INT 13
21260: PUSH
21261: LD_INT 14
21263: PUSH
21264: LD_INT 15
21266: PUSH
21267: LD_INT 16
21269: PUSH
21270: LD_INT 17
21272: PUSH
21273: LD_INT 18
21275: PUSH
21276: LD_INT 19
21278: PUSH
21279: LD_INT 20
21281: PUSH
21282: LD_INT 21
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_INT 23
21290: PUSH
21291: LD_INT 24
21293: PUSH
21294: LD_INT 25
21296: PUSH
21297: LD_INT 26
21299: PUSH
21300: LD_INT 27
21302: PUSH
21303: LD_INT 28
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_INT 31
21311: PUSH
21312: LD_INT 32
21314: PUSH
21315: LD_INT 33
21317: PUSH
21318: LD_INT 34
21320: PUSH
21321: LD_INT 36
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 101
21362: PUSH
21363: LD_INT 102
21365: PUSH
21366: LD_INT 103
21368: PUSH
21369: LD_INT 104
21371: PUSH
21372: LD_INT 105
21374: PUSH
21375: LD_INT 106
21377: PUSH
21378: LD_INT 107
21380: PUSH
21381: LD_INT 108
21383: PUSH
21384: LD_INT 109
21386: PUSH
21387: LD_INT 110
21389: PUSH
21390: LD_INT 111
21392: PUSH
21393: LD_INT 112
21395: PUSH
21396: LD_INT 113
21398: PUSH
21399: LD_INT 114
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: ST_TO_ADDR
21422: GO 22793
21424: LD_INT 13
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21628
21432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21433: LD_ADDR_VAR 0 1
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 4
21449: PUSH
21450: LD_INT 5
21452: PUSH
21453: LD_INT 8
21455: PUSH
21456: LD_INT 9
21458: PUSH
21459: LD_INT 10
21461: PUSH
21462: LD_INT 11
21464: PUSH
21465: LD_INT 12
21467: PUSH
21468: LD_INT 14
21470: PUSH
21471: LD_INT 15
21473: PUSH
21474: LD_INT 16
21476: PUSH
21477: LD_INT 17
21479: PUSH
21480: LD_INT 18
21482: PUSH
21483: LD_INT 19
21485: PUSH
21486: LD_INT 20
21488: PUSH
21489: LD_INT 21
21491: PUSH
21492: LD_INT 22
21494: PUSH
21495: LD_INT 23
21497: PUSH
21498: LD_INT 24
21500: PUSH
21501: LD_INT 25
21503: PUSH
21504: LD_INT 26
21506: PUSH
21507: LD_INT 27
21509: PUSH
21510: LD_INT 28
21512: PUSH
21513: LD_INT 30
21515: PUSH
21516: LD_INT 31
21518: PUSH
21519: LD_INT 32
21521: PUSH
21522: LD_INT 33
21524: PUSH
21525: LD_INT 34
21527: PUSH
21528: LD_INT 36
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 101
21566: PUSH
21567: LD_INT 102
21569: PUSH
21570: LD_INT 103
21572: PUSH
21573: LD_INT 104
21575: PUSH
21576: LD_INT 105
21578: PUSH
21579: LD_INT 106
21581: PUSH
21582: LD_INT 107
21584: PUSH
21585: LD_INT 108
21587: PUSH
21588: LD_INT 109
21590: PUSH
21591: LD_INT 110
21593: PUSH
21594: LD_INT 111
21596: PUSH
21597: LD_INT 112
21599: PUSH
21600: LD_INT 113
21602: PUSH
21603: LD_INT 114
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: ST_TO_ADDR
21626: GO 22793
21628: LD_INT 14
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21848
21636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21637: LD_ADDR_VAR 0 1
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 3
21650: PUSH
21651: LD_INT 4
21653: PUSH
21654: LD_INT 5
21656: PUSH
21657: LD_INT 6
21659: PUSH
21660: LD_INT 7
21662: PUSH
21663: LD_INT 8
21665: PUSH
21666: LD_INT 9
21668: PUSH
21669: LD_INT 10
21671: PUSH
21672: LD_INT 11
21674: PUSH
21675: LD_INT 12
21677: PUSH
21678: LD_INT 13
21680: PUSH
21681: LD_INT 14
21683: PUSH
21684: LD_INT 15
21686: PUSH
21687: LD_INT 16
21689: PUSH
21690: LD_INT 17
21692: PUSH
21693: LD_INT 18
21695: PUSH
21696: LD_INT 19
21698: PUSH
21699: LD_INT 20
21701: PUSH
21702: LD_INT 21
21704: PUSH
21705: LD_INT 22
21707: PUSH
21708: LD_INT 23
21710: PUSH
21711: LD_INT 24
21713: PUSH
21714: LD_INT 25
21716: PUSH
21717: LD_INT 26
21719: PUSH
21720: LD_INT 27
21722: PUSH
21723: LD_INT 28
21725: PUSH
21726: LD_INT 29
21728: PUSH
21729: LD_INT 30
21731: PUSH
21732: LD_INT 31
21734: PUSH
21735: LD_INT 32
21737: PUSH
21738: LD_INT 33
21740: PUSH
21741: LD_INT 34
21743: PUSH
21744: LD_INT 36
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 101
21786: PUSH
21787: LD_INT 102
21789: PUSH
21790: LD_INT 103
21792: PUSH
21793: LD_INT 104
21795: PUSH
21796: LD_INT 105
21798: PUSH
21799: LD_INT 106
21801: PUSH
21802: LD_INT 107
21804: PUSH
21805: LD_INT 108
21807: PUSH
21808: LD_INT 109
21810: PUSH
21811: LD_INT 110
21813: PUSH
21814: LD_INT 111
21816: PUSH
21817: LD_INT 112
21819: PUSH
21820: LD_INT 113
21822: PUSH
21823: LD_INT 114
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: ST_TO_ADDR
21846: GO 22793
21848: LD_INT 15
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 22068
21856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: LD_INT 3
21870: PUSH
21871: LD_INT 4
21873: PUSH
21874: LD_INT 5
21876: PUSH
21877: LD_INT 6
21879: PUSH
21880: LD_INT 7
21882: PUSH
21883: LD_INT 8
21885: PUSH
21886: LD_INT 9
21888: PUSH
21889: LD_INT 10
21891: PUSH
21892: LD_INT 11
21894: PUSH
21895: LD_INT 12
21897: PUSH
21898: LD_INT 13
21900: PUSH
21901: LD_INT 14
21903: PUSH
21904: LD_INT 15
21906: PUSH
21907: LD_INT 16
21909: PUSH
21910: LD_INT 17
21912: PUSH
21913: LD_INT 18
21915: PUSH
21916: LD_INT 19
21918: PUSH
21919: LD_INT 20
21921: PUSH
21922: LD_INT 21
21924: PUSH
21925: LD_INT 22
21927: PUSH
21928: LD_INT 23
21930: PUSH
21931: LD_INT 24
21933: PUSH
21934: LD_INT 25
21936: PUSH
21937: LD_INT 26
21939: PUSH
21940: LD_INT 27
21942: PUSH
21943: LD_INT 28
21945: PUSH
21946: LD_INT 29
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 31
21954: PUSH
21955: LD_INT 32
21957: PUSH
21958: LD_INT 33
21960: PUSH
21961: LD_INT 34
21963: PUSH
21964: LD_INT 36
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 104
22015: PUSH
22016: LD_INT 105
22018: PUSH
22019: LD_INT 106
22021: PUSH
22022: LD_INT 107
22024: PUSH
22025: LD_INT 108
22027: PUSH
22028: LD_INT 109
22030: PUSH
22031: LD_INT 110
22033: PUSH
22034: LD_INT 111
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 113
22042: PUSH
22043: LD_INT 114
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: ST_TO_ADDR
22066: GO 22793
22068: LD_INT 16
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22076
22074: GO 22200
22076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22077: LD_ADDR_VAR 0 1
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: LD_INT 4
22087: PUSH
22088: LD_INT 5
22090: PUSH
22091: LD_INT 7
22093: PUSH
22094: LD_INT 11
22096: PUSH
22097: LD_INT 12
22099: PUSH
22100: LD_INT 15
22102: PUSH
22103: LD_INT 16
22105: PUSH
22106: LD_INT 20
22108: PUSH
22109: LD_INT 21
22111: PUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 23
22117: PUSH
22118: LD_INT 25
22120: PUSH
22121: LD_INT 26
22123: PUSH
22124: LD_INT 30
22126: PUSH
22127: LD_INT 31
22129: PUSH
22130: LD_INT 32
22132: PUSH
22133: LD_INT 33
22135: PUSH
22136: LD_INT 34
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 101
22162: PUSH
22163: LD_INT 102
22165: PUSH
22166: LD_INT 103
22168: PUSH
22169: LD_INT 106
22171: PUSH
22172: LD_INT 108
22174: PUSH
22175: LD_INT 112
22177: PUSH
22178: LD_INT 113
22180: PUSH
22181: LD_INT 114
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: ST_TO_ADDR
22198: GO 22793
22200: LD_INT 17
22202: DOUBLE
22203: EQUAL
22204: IFTRUE 22208
22206: GO 22420
22208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22209: LD_ADDR_VAR 0 1
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: LD_INT 4
22225: PUSH
22226: LD_INT 5
22228: PUSH
22229: LD_INT 6
22231: PUSH
22232: LD_INT 7
22234: PUSH
22235: LD_INT 8
22237: PUSH
22238: LD_INT 9
22240: PUSH
22241: LD_INT 10
22243: PUSH
22244: LD_INT 11
22246: PUSH
22247: LD_INT 12
22249: PUSH
22250: LD_INT 13
22252: PUSH
22253: LD_INT 14
22255: PUSH
22256: LD_INT 15
22258: PUSH
22259: LD_INT 16
22261: PUSH
22262: LD_INT 17
22264: PUSH
22265: LD_INT 18
22267: PUSH
22268: LD_INT 19
22270: PUSH
22271: LD_INT 20
22273: PUSH
22274: LD_INT 21
22276: PUSH
22277: LD_INT 22
22279: PUSH
22280: LD_INT 23
22282: PUSH
22283: LD_INT 24
22285: PUSH
22286: LD_INT 25
22288: PUSH
22289: LD_INT 26
22291: PUSH
22292: LD_INT 27
22294: PUSH
22295: LD_INT 28
22297: PUSH
22298: LD_INT 29
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 31
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 33
22312: PUSH
22313: LD_INT 34
22315: PUSH
22316: LD_INT 36
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 101
22358: PUSH
22359: LD_INT 102
22361: PUSH
22362: LD_INT 103
22364: PUSH
22365: LD_INT 104
22367: PUSH
22368: LD_INT 105
22370: PUSH
22371: LD_INT 106
22373: PUSH
22374: LD_INT 107
22376: PUSH
22377: LD_INT 108
22379: PUSH
22380: LD_INT 109
22382: PUSH
22383: LD_INT 110
22385: PUSH
22386: LD_INT 111
22388: PUSH
22389: LD_INT 112
22391: PUSH
22392: LD_INT 113
22394: PUSH
22395: LD_INT 114
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: ST_TO_ADDR
22418: GO 22793
22420: LD_INT 18
22422: DOUBLE
22423: EQUAL
22424: IFTRUE 22428
22426: GO 22564
22428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22429: LD_ADDR_VAR 0 1
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: LD_INT 5
22442: PUSH
22443: LD_INT 7
22445: PUSH
22446: LD_INT 11
22448: PUSH
22449: LD_INT 12
22451: PUSH
22452: LD_INT 15
22454: PUSH
22455: LD_INT 16
22457: PUSH
22458: LD_INT 20
22460: PUSH
22461: LD_INT 21
22463: PUSH
22464: LD_INT 22
22466: PUSH
22467: LD_INT 23
22469: PUSH
22470: LD_INT 25
22472: PUSH
22473: LD_INT 26
22475: PUSH
22476: LD_INT 30
22478: PUSH
22479: LD_INT 31
22481: PUSH
22482: LD_INT 32
22484: PUSH
22485: LD_INT 33
22487: PUSH
22488: LD_INT 34
22490: PUSH
22491: LD_INT 35
22493: PUSH
22494: LD_INT 36
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 101
22522: PUSH
22523: LD_INT 102
22525: PUSH
22526: LD_INT 103
22528: PUSH
22529: LD_INT 106
22531: PUSH
22532: LD_INT 108
22534: PUSH
22535: LD_INT 112
22537: PUSH
22538: LD_INT 113
22540: PUSH
22541: LD_INT 114
22543: PUSH
22544: LD_INT 115
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: ST_TO_ADDR
22562: GO 22793
22564: LD_INT 19
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22792
22572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22573: LD_ADDR_VAR 0 1
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 3
22586: PUSH
22587: LD_INT 4
22589: PUSH
22590: LD_INT 5
22592: PUSH
22593: LD_INT 6
22595: PUSH
22596: LD_INT 7
22598: PUSH
22599: LD_INT 8
22601: PUSH
22602: LD_INT 9
22604: PUSH
22605: LD_INT 10
22607: PUSH
22608: LD_INT 11
22610: PUSH
22611: LD_INT 12
22613: PUSH
22614: LD_INT 13
22616: PUSH
22617: LD_INT 14
22619: PUSH
22620: LD_INT 15
22622: PUSH
22623: LD_INT 16
22625: PUSH
22626: LD_INT 17
22628: PUSH
22629: LD_INT 18
22631: PUSH
22632: LD_INT 19
22634: PUSH
22635: LD_INT 20
22637: PUSH
22638: LD_INT 21
22640: PUSH
22641: LD_INT 22
22643: PUSH
22644: LD_INT 23
22646: PUSH
22647: LD_INT 24
22649: PUSH
22650: LD_INT 25
22652: PUSH
22653: LD_INT 26
22655: PUSH
22656: LD_INT 27
22658: PUSH
22659: LD_INT 28
22661: PUSH
22662: LD_INT 29
22664: PUSH
22665: LD_INT 30
22667: PUSH
22668: LD_INT 31
22670: PUSH
22671: LD_INT 32
22673: PUSH
22674: LD_INT 33
22676: PUSH
22677: LD_INT 34
22679: PUSH
22680: LD_INT 35
22682: PUSH
22683: LD_INT 36
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 101
22726: PUSH
22727: LD_INT 102
22729: PUSH
22730: LD_INT 103
22732: PUSH
22733: LD_INT 104
22735: PUSH
22736: LD_INT 105
22738: PUSH
22739: LD_INT 106
22741: PUSH
22742: LD_INT 107
22744: PUSH
22745: LD_INT 108
22747: PUSH
22748: LD_INT 109
22750: PUSH
22751: LD_INT 110
22753: PUSH
22754: LD_INT 111
22756: PUSH
22757: LD_INT 112
22759: PUSH
22760: LD_INT 113
22762: PUSH
22763: LD_INT 114
22765: PUSH
22766: LD_INT 115
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: ST_TO_ADDR
22790: GO 22793
22792: POP
// end else
22793: GO 23012
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22795: LD_ADDR_VAR 0 1
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 3
22808: PUSH
22809: LD_INT 4
22811: PUSH
22812: LD_INT 5
22814: PUSH
22815: LD_INT 6
22817: PUSH
22818: LD_INT 7
22820: PUSH
22821: LD_INT 8
22823: PUSH
22824: LD_INT 9
22826: PUSH
22827: LD_INT 10
22829: PUSH
22830: LD_INT 11
22832: PUSH
22833: LD_INT 12
22835: PUSH
22836: LD_INT 13
22838: PUSH
22839: LD_INT 14
22841: PUSH
22842: LD_INT 15
22844: PUSH
22845: LD_INT 16
22847: PUSH
22848: LD_INT 17
22850: PUSH
22851: LD_INT 18
22853: PUSH
22854: LD_INT 19
22856: PUSH
22857: LD_INT 20
22859: PUSH
22860: LD_INT 21
22862: PUSH
22863: LD_INT 22
22865: PUSH
22866: LD_INT 23
22868: PUSH
22869: LD_INT 24
22871: PUSH
22872: LD_INT 25
22874: PUSH
22875: LD_INT 26
22877: PUSH
22878: LD_INT 27
22880: PUSH
22881: LD_INT 28
22883: PUSH
22884: LD_INT 29
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 31
22892: PUSH
22893: LD_INT 32
22895: PUSH
22896: LD_INT 33
22898: PUSH
22899: LD_INT 34
22901: PUSH
22902: LD_INT 35
22904: PUSH
22905: LD_INT 36
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 101
22948: PUSH
22949: LD_INT 102
22951: PUSH
22952: LD_INT 103
22954: PUSH
22955: LD_INT 104
22957: PUSH
22958: LD_INT 105
22960: PUSH
22961: LD_INT 106
22963: PUSH
22964: LD_INT 107
22966: PUSH
22967: LD_INT 108
22969: PUSH
22970: LD_INT 109
22972: PUSH
22973: LD_INT 110
22975: PUSH
22976: LD_INT 111
22978: PUSH
22979: LD_INT 112
22981: PUSH
22982: LD_INT 113
22984: PUSH
22985: LD_INT 114
22987: PUSH
22988: LD_INT 115
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: ST_TO_ADDR
// if result then
23012: LD_VAR 0 1
23016: IFFALSE 23305
// begin normal :=  ;
23018: LD_ADDR_VAR 0 3
23022: PUSH
23023: LD_STRING 
23025: ST_TO_ADDR
// hardcore :=  ;
23026: LD_ADDR_VAR 0 4
23030: PUSH
23031: LD_STRING 
23033: ST_TO_ADDR
// for i = 1 to normalCounter do
23034: LD_ADDR_VAR 0 5
23038: PUSH
23039: DOUBLE
23040: LD_INT 1
23042: DEC
23043: ST_TO_ADDR
23044: LD_EXP 65
23048: PUSH
23049: FOR_TO
23050: IFFALSE 23151
// begin tmp := 0 ;
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_STRING 0
23059: ST_TO_ADDR
// if result [ 1 ] then
23060: LD_VAR 0 1
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: IFFALSE 23133
// if result [ 1 ] [ 1 ] = i then
23070: LD_VAR 0 1
23074: PUSH
23075: LD_INT 1
23077: ARRAY
23078: PUSH
23079: LD_INT 1
23081: ARRAY
23082: PUSH
23083: LD_VAR 0 5
23087: EQUAL
23088: IFFALSE 23133
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23090: LD_ADDR_VAR 0 1
23094: PUSH
23095: LD_VAR 0 1
23099: PPUSH
23100: LD_INT 1
23102: PPUSH
23103: LD_VAR 0 1
23107: PUSH
23108: LD_INT 1
23110: ARRAY
23111: PPUSH
23112: LD_INT 1
23114: PPUSH
23115: CALL_OW 3
23119: PPUSH
23120: CALL_OW 1
23124: ST_TO_ADDR
// tmp := 1 ;
23125: LD_ADDR_VAR 0 2
23129: PUSH
23130: LD_STRING 1
23132: ST_TO_ADDR
// end ; normal := normal & tmp ;
23133: LD_ADDR_VAR 0 3
23137: PUSH
23138: LD_VAR 0 3
23142: PUSH
23143: LD_VAR 0 2
23147: STR
23148: ST_TO_ADDR
// end ;
23149: GO 23049
23151: POP
23152: POP
// for i = 1 to hardcoreCounter do
23153: LD_ADDR_VAR 0 5
23157: PUSH
23158: DOUBLE
23159: LD_INT 1
23161: DEC
23162: ST_TO_ADDR
23163: LD_EXP 66
23167: PUSH
23168: FOR_TO
23169: IFFALSE 23274
// begin tmp := 0 ;
23171: LD_ADDR_VAR 0 2
23175: PUSH
23176: LD_STRING 0
23178: ST_TO_ADDR
// if result [ 2 ] then
23179: LD_VAR 0 1
23183: PUSH
23184: LD_INT 2
23186: ARRAY
23187: IFFALSE 23256
// if result [ 2 ] [ 1 ] = 100 + i then
23189: LD_VAR 0 1
23193: PUSH
23194: LD_INT 2
23196: ARRAY
23197: PUSH
23198: LD_INT 1
23200: ARRAY
23201: PUSH
23202: LD_INT 100
23204: PUSH
23205: LD_VAR 0 5
23209: PLUS
23210: EQUAL
23211: IFFALSE 23256
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23213: LD_ADDR_VAR 0 1
23217: PUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: LD_INT 2
23225: PPUSH
23226: LD_VAR 0 1
23230: PUSH
23231: LD_INT 2
23233: ARRAY
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: CALL_OW 3
23242: PPUSH
23243: CALL_OW 1
23247: ST_TO_ADDR
// tmp := 1 ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_STRING 1
23255: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23256: LD_ADDR_VAR 0 4
23260: PUSH
23261: LD_VAR 0 4
23265: PUSH
23266: LD_VAR 0 2
23270: STR
23271: ST_TO_ADDR
// end ;
23272: GO 23168
23274: POP
23275: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23276: LD_STRING getStreamItemsFromMission("
23278: PUSH
23279: LD_VAR 0 3
23283: STR
23284: PUSH
23285: LD_STRING ","
23287: STR
23288: PUSH
23289: LD_VAR 0 4
23293: STR
23294: PUSH
23295: LD_STRING ")
23297: STR
23298: PPUSH
23299: CALL_OW 559
// end else
23303: GO 23312
// ToLua ( getStreamItemsFromMission("","") ) ;
23305: LD_STRING getStreamItemsFromMission("","")
23307: PPUSH
23308: CALL_OW 559
// end ;
23312: LD_VAR 0 1
23316: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23317: LD_EXP 64
23321: PUSH
23322: LD_EXP 69
23326: AND
23327: IFFALSE 23451
23329: GO 23331
23331: DISABLE
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
// begin enable ;
23336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23337: LD_ADDR_VAR 0 2
23341: PUSH
23342: LD_INT 22
23344: PUSH
23345: LD_OWVAR 2
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 34
23359: PUSH
23360: LD_INT 7
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 34
23369: PUSH
23370: LD_INT 45
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 34
23379: PUSH
23380: LD_INT 28
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 34
23389: PUSH
23390: LD_INT 47
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PPUSH
23408: CALL_OW 69
23412: ST_TO_ADDR
// if not tmp then
23413: LD_VAR 0 2
23417: NOT
23418: IFFALSE 23422
// exit ;
23420: GO 23451
// for i in tmp do
23422: LD_ADDR_VAR 0 1
23426: PUSH
23427: LD_VAR 0 2
23431: PUSH
23432: FOR_IN
23433: IFFALSE 23449
// begin SetLives ( i , 0 ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_INT 0
23442: PPUSH
23443: CALL_OW 234
// end ;
23447: GO 23432
23449: POP
23450: POP
// end ;
23451: PPOPN 2
23453: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23454: LD_EXP 64
23458: PUSH
23459: LD_EXP 70
23463: AND
23464: IFFALSE 23548
23466: GO 23468
23468: DISABLE
23469: LD_INT 0
23471: PPUSH
23472: PPUSH
// begin enable ;
23473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23474: LD_ADDR_VAR 0 2
23478: PUSH
23479: LD_INT 22
23481: PUSH
23482: LD_OWVAR 2
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 32
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL_OW 69
23509: ST_TO_ADDR
// if not tmp then
23510: LD_VAR 0 2
23514: NOT
23515: IFFALSE 23519
// exit ;
23517: GO 23548
// for i in tmp do
23519: LD_ADDR_VAR 0 1
23523: PUSH
23524: LD_VAR 0 2
23528: PUSH
23529: FOR_IN
23530: IFFALSE 23546
// begin SetLives ( i , 0 ) ;
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_INT 0
23539: PPUSH
23540: CALL_OW 234
// end ;
23544: GO 23529
23546: POP
23547: POP
// end ;
23548: PPOPN 2
23550: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23551: LD_EXP 64
23555: PUSH
23556: LD_EXP 67
23560: AND
23561: IFFALSE 23654
23563: GO 23565
23565: DISABLE
23566: LD_INT 0
23568: PPUSH
// begin enable ;
23569: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23570: LD_ADDR_VAR 0 1
23574: PUSH
23575: LD_INT 22
23577: PUSH
23578: LD_OWVAR 2
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 25
23592: PUSH
23593: LD_INT 5
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 25
23602: PUSH
23603: LD_INT 9
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 25
23612: PUSH
23613: LD_INT 8
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PPUSH
23630: CALL_OW 69
23634: PUSH
23635: FOR_IN
23636: IFFALSE 23652
// begin SetClass ( i , 1 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 1
23645: PPUSH
23646: CALL_OW 336
// end ;
23650: GO 23635
23652: POP
23653: POP
// end ;
23654: PPOPN 1
23656: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23657: LD_EXP 64
23661: PUSH
23662: LD_EXP 68
23666: AND
23667: PUSH
23668: LD_OWVAR 65
23672: PUSH
23673: LD_INT 7
23675: LESS
23676: AND
23677: IFFALSE 23691
23679: GO 23681
23681: DISABLE
// begin enable ;
23682: ENABLE
// game_speed := 7 ;
23683: LD_ADDR_OWVAR 65
23687: PUSH
23688: LD_INT 7
23690: ST_TO_ADDR
// end ;
23691: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23692: LD_EXP 64
23696: PUSH
23697: LD_EXP 71
23701: AND
23702: IFFALSE 23904
23704: GO 23706
23706: DISABLE
23707: LD_INT 0
23709: PPUSH
23710: PPUSH
23711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23712: LD_ADDR_VAR 0 3
23716: PUSH
23717: LD_INT 81
23719: PUSH
23720: LD_OWVAR 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 69
23747: ST_TO_ADDR
// if not tmp then
23748: LD_VAR 0 3
23752: NOT
23753: IFFALSE 23757
// exit ;
23755: GO 23904
// if tmp > 5 then
23757: LD_VAR 0 3
23761: PUSH
23762: LD_INT 5
23764: GREATER
23765: IFFALSE 23777
// k := 5 else
23767: LD_ADDR_VAR 0 2
23771: PUSH
23772: LD_INT 5
23774: ST_TO_ADDR
23775: GO 23787
// k := tmp ;
23777: LD_ADDR_VAR 0 2
23781: PUSH
23782: LD_VAR 0 3
23786: ST_TO_ADDR
// for i := 1 to k do
23787: LD_ADDR_VAR 0 1
23791: PUSH
23792: DOUBLE
23793: LD_INT 1
23795: DEC
23796: ST_TO_ADDR
23797: LD_VAR 0 2
23801: PUSH
23802: FOR_TO
23803: IFFALSE 23902
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23805: LD_VAR 0 3
23809: PUSH
23810: LD_VAR 0 1
23814: ARRAY
23815: PPUSH
23816: LD_VAR 0 1
23820: PUSH
23821: LD_INT 4
23823: MOD
23824: PUSH
23825: LD_INT 1
23827: PLUS
23828: PPUSH
23829: CALL_OW 259
23833: PUSH
23834: LD_INT 10
23836: LESS
23837: IFFALSE 23900
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23839: LD_VAR 0 3
23843: PUSH
23844: LD_VAR 0 1
23848: ARRAY
23849: PPUSH
23850: LD_VAR 0 1
23854: PUSH
23855: LD_INT 4
23857: MOD
23858: PUSH
23859: LD_INT 1
23861: PLUS
23862: PPUSH
23863: LD_VAR 0 3
23867: PUSH
23868: LD_VAR 0 1
23872: ARRAY
23873: PPUSH
23874: LD_VAR 0 1
23878: PUSH
23879: LD_INT 4
23881: MOD
23882: PUSH
23883: LD_INT 1
23885: PLUS
23886: PPUSH
23887: CALL_OW 259
23891: PUSH
23892: LD_INT 1
23894: PLUS
23895: PPUSH
23896: CALL_OW 237
23900: GO 23802
23902: POP
23903: POP
// end ;
23904: PPOPN 3
23906: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23907: LD_EXP 64
23911: PUSH
23912: LD_EXP 72
23916: AND
23917: IFFALSE 23937
23919: GO 23921
23921: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23922: LD_INT 4
23924: PPUSH
23925: LD_OWVAR 2
23929: PPUSH
23930: LD_INT 0
23932: PPUSH
23933: CALL_OW 324
23937: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23938: LD_EXP 64
23942: PUSH
23943: LD_EXP 101
23947: AND
23948: IFFALSE 23968
23950: GO 23952
23952: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23953: LD_INT 19
23955: PPUSH
23956: LD_OWVAR 2
23960: PPUSH
23961: LD_INT 0
23963: PPUSH
23964: CALL_OW 324
23968: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23969: LD_EXP 64
23973: PUSH
23974: LD_EXP 73
23978: AND
23979: IFFALSE 24081
23981: GO 23983
23983: DISABLE
23984: LD_INT 0
23986: PPUSH
23987: PPUSH
// begin enable ;
23988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23989: LD_ADDR_VAR 0 2
23993: PUSH
23994: LD_INT 22
23996: PUSH
23997: LD_OWVAR 2
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 2
24008: PUSH
24009: LD_INT 34
24011: PUSH
24012: LD_INT 11
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 34
24021: PUSH
24022: LD_INT 30
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: ST_TO_ADDR
// if not tmp then
24043: LD_VAR 0 2
24047: NOT
24048: IFFALSE 24052
// exit ;
24050: GO 24081
// for i in tmp do
24052: LD_ADDR_VAR 0 1
24056: PUSH
24057: LD_VAR 0 2
24061: PUSH
24062: FOR_IN
24063: IFFALSE 24079
// begin SetLives ( i , 0 ) ;
24065: LD_VAR 0 1
24069: PPUSH
24070: LD_INT 0
24072: PPUSH
24073: CALL_OW 234
// end ;
24077: GO 24062
24079: POP
24080: POP
// end ;
24081: PPOPN 2
24083: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24084: LD_EXP 64
24088: PUSH
24089: LD_EXP 74
24093: AND
24094: IFFALSE 24114
24096: GO 24098
24098: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24099: LD_INT 32
24101: PPUSH
24102: LD_OWVAR 2
24106: PPUSH
24107: LD_INT 0
24109: PPUSH
24110: CALL_OW 324
24114: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24115: LD_EXP 64
24119: PUSH
24120: LD_EXP 75
24124: AND
24125: IFFALSE 24306
24127: GO 24129
24129: DISABLE
24130: LD_INT 0
24132: PPUSH
24133: PPUSH
24134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24135: LD_ADDR_VAR 0 2
24139: PUSH
24140: LD_INT 22
24142: PUSH
24143: LD_OWVAR 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 33
24154: PUSH
24155: LD_INT 3
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 69
24170: ST_TO_ADDR
// if not tmp then
24171: LD_VAR 0 2
24175: NOT
24176: IFFALSE 24180
// exit ;
24178: GO 24306
// side := 0 ;
24180: LD_ADDR_VAR 0 3
24184: PUSH
24185: LD_INT 0
24187: ST_TO_ADDR
// for i := 1 to 8 do
24188: LD_ADDR_VAR 0 1
24192: PUSH
24193: DOUBLE
24194: LD_INT 1
24196: DEC
24197: ST_TO_ADDR
24198: LD_INT 8
24200: PUSH
24201: FOR_TO
24202: IFFALSE 24250
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24204: LD_OWVAR 2
24208: PUSH
24209: LD_VAR 0 1
24213: NONEQUAL
24214: PUSH
24215: LD_OWVAR 2
24219: PPUSH
24220: LD_VAR 0 1
24224: PPUSH
24225: CALL_OW 81
24229: PUSH
24230: LD_INT 2
24232: EQUAL
24233: AND
24234: IFFALSE 24248
// begin side := i ;
24236: LD_ADDR_VAR 0 3
24240: PUSH
24241: LD_VAR 0 1
24245: ST_TO_ADDR
// break ;
24246: GO 24250
// end ;
24248: GO 24201
24250: POP
24251: POP
// if not side then
24252: LD_VAR 0 3
24256: NOT
24257: IFFALSE 24261
// exit ;
24259: GO 24306
// for i := 1 to tmp do
24261: LD_ADDR_VAR 0 1
24265: PUSH
24266: DOUBLE
24267: LD_INT 1
24269: DEC
24270: ST_TO_ADDR
24271: LD_VAR 0 2
24275: PUSH
24276: FOR_TO
24277: IFFALSE 24304
// if Prob ( 60 ) then
24279: LD_INT 60
24281: PPUSH
24282: CALL_OW 13
24286: IFFALSE 24302
// SetSide ( i , side ) ;
24288: LD_VAR 0 1
24292: PPUSH
24293: LD_VAR 0 3
24297: PPUSH
24298: CALL_OW 235
24302: GO 24276
24304: POP
24305: POP
// end ;
24306: PPOPN 3
24308: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24309: LD_EXP 64
24313: PUSH
24314: LD_EXP 77
24318: AND
24319: IFFALSE 24438
24321: GO 24323
24323: DISABLE
24324: LD_INT 0
24326: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24327: LD_ADDR_VAR 0 1
24331: PUSH
24332: LD_INT 22
24334: PUSH
24335: LD_OWVAR 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 21
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: LD_INT 23
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: PPUSH
24376: CALL_OW 69
24380: PUSH
24381: FOR_IN
24382: IFFALSE 24436
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24384: LD_VAR 0 1
24388: PPUSH
24389: CALL_OW 257
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 3
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: IN
24412: IFFALSE 24434
// SetClass ( un , rand ( 1 , 4 ) ) ;
24414: LD_VAR 0 1
24418: PPUSH
24419: LD_INT 1
24421: PPUSH
24422: LD_INT 4
24424: PPUSH
24425: CALL_OW 12
24429: PPUSH
24430: CALL_OW 336
24434: GO 24381
24436: POP
24437: POP
// end ;
24438: PPOPN 1
24440: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24441: LD_EXP 64
24445: PUSH
24446: LD_EXP 76
24450: AND
24451: IFFALSE 24530
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24459: LD_ADDR_VAR 0 1
24463: PUSH
24464: LD_INT 22
24466: PUSH
24467: LD_OWVAR 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 21
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PPUSH
24490: CALL_OW 69
24494: ST_TO_ADDR
// if not tmp then
24495: LD_VAR 0 1
24499: NOT
24500: IFFALSE 24504
// exit ;
24502: GO 24530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24504: LD_VAR 0 1
24508: PUSH
24509: LD_INT 1
24511: PPUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 12
24521: ARRAY
24522: PPUSH
24523: LD_INT 100
24525: PPUSH
24526: CALL_OW 234
// end ;
24530: PPOPN 1
24532: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24533: LD_EXP 64
24537: PUSH
24538: LD_EXP 78
24542: AND
24543: IFFALSE 24641
24545: GO 24547
24547: DISABLE
24548: LD_INT 0
24550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24551: LD_ADDR_VAR 0 1
24555: PUSH
24556: LD_INT 22
24558: PUSH
24559: LD_OWVAR 2
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 21
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PPUSH
24582: CALL_OW 69
24586: ST_TO_ADDR
// if not tmp then
24587: LD_VAR 0 1
24591: NOT
24592: IFFALSE 24596
// exit ;
24594: GO 24641
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24596: LD_VAR 0 1
24600: PUSH
24601: LD_INT 1
24603: PPUSH
24604: LD_VAR 0 1
24608: PPUSH
24609: CALL_OW 12
24613: ARRAY
24614: PPUSH
24615: LD_INT 1
24617: PPUSH
24618: LD_INT 4
24620: PPUSH
24621: CALL_OW 12
24625: PPUSH
24626: LD_INT 3000
24628: PPUSH
24629: LD_INT 9000
24631: PPUSH
24632: CALL_OW 12
24636: PPUSH
24637: CALL_OW 492
// end ;
24641: PPOPN 1
24643: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24644: LD_EXP 64
24648: PUSH
24649: LD_EXP 79
24653: AND
24654: IFFALSE 24674
24656: GO 24658
24658: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24659: LD_INT 1
24661: PPUSH
24662: LD_OWVAR 2
24666: PPUSH
24667: LD_INT 0
24669: PPUSH
24670: CALL_OW 324
24674: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24675: LD_EXP 64
24679: PUSH
24680: LD_EXP 80
24684: AND
24685: IFFALSE 24768
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PPUSH
24725: CALL_OW 69
24729: ST_TO_ADDR
// if not tmp then
24730: LD_VAR 0 2
24734: NOT
24735: IFFALSE 24739
// exit ;
24737: GO 24768
// for i in tmp do
24739: LD_ADDR_VAR 0 1
24743: PUSH
24744: LD_VAR 0 2
24748: PUSH
24749: FOR_IN
24750: IFFALSE 24766
// SetBLevel ( i , 10 ) ;
24752: LD_VAR 0 1
24756: PPUSH
24757: LD_INT 10
24759: PPUSH
24760: CALL_OW 241
24764: GO 24749
24766: POP
24767: POP
// end ;
24768: PPOPN 2
24770: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24771: LD_EXP 64
24775: PUSH
24776: LD_EXP 81
24780: AND
24781: IFFALSE 24892
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
24790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24791: LD_ADDR_VAR 0 3
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_OWVAR 2
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 25
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: ST_TO_ADDR
// if not tmp then
24827: LD_VAR 0 3
24831: NOT
24832: IFFALSE 24836
// exit ;
24834: GO 24892
// un := tmp [ rand ( 1 , tmp ) ] ;
24836: LD_ADDR_VAR 0 2
24840: PUSH
24841: LD_VAR 0 3
24845: PUSH
24846: LD_INT 1
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: CALL_OW 12
24858: ARRAY
24859: ST_TO_ADDR
// if Crawls ( un ) then
24860: LD_VAR 0 2
24864: PPUSH
24865: CALL_OW 318
24869: IFFALSE 24880
// ComWalk ( un ) ;
24871: LD_VAR 0 2
24875: PPUSH
24876: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_INT 5
24887: PPUSH
24888: CALL_OW 336
// end ;
24892: PPOPN 3
24894: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24895: LD_EXP 64
24899: PUSH
24900: LD_EXP 82
24904: AND
24905: PUSH
24906: LD_OWVAR 67
24910: PUSH
24911: LD_INT 3
24913: LESS
24914: AND
24915: IFFALSE 24934
24917: GO 24919
24919: DISABLE
// Difficulty := Difficulty + 1 ;
24920: LD_ADDR_OWVAR 67
24924: PUSH
24925: LD_OWVAR 67
24929: PUSH
24930: LD_INT 1
24932: PLUS
24933: ST_TO_ADDR
24934: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24935: LD_EXP 64
24939: PUSH
24940: LD_EXP 83
24944: AND
24945: IFFALSE 25048
24947: GO 24949
24949: DISABLE
24950: LD_INT 0
24952: PPUSH
// begin for i := 1 to 5 do
24953: LD_ADDR_VAR 0 1
24957: PUSH
24958: DOUBLE
24959: LD_INT 1
24961: DEC
24962: ST_TO_ADDR
24963: LD_INT 5
24965: PUSH
24966: FOR_TO
24967: IFFALSE 25046
// begin uc_nation := nation_nature ;
24969: LD_ADDR_OWVAR 21
24973: PUSH
24974: LD_INT 0
24976: ST_TO_ADDR
// uc_side := 0 ;
24977: LD_ADDR_OWVAR 20
24981: PUSH
24982: LD_INT 0
24984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24985: LD_ADDR_OWVAR 29
24989: PUSH
24990: LD_INT 12
24992: PUSH
24993: LD_INT 12
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: ST_TO_ADDR
// hc_agressivity := 20 ;
25000: LD_ADDR_OWVAR 35
25004: PUSH
25005: LD_INT 20
25007: ST_TO_ADDR
// hc_class := class_tiger ;
25008: LD_ADDR_OWVAR 28
25012: PUSH
25013: LD_INT 14
25015: ST_TO_ADDR
// hc_gallery :=  ;
25016: LD_ADDR_OWVAR 33
25020: PUSH
25021: LD_STRING 
25023: ST_TO_ADDR
// hc_name :=  ;
25024: LD_ADDR_OWVAR 26
25028: PUSH
25029: LD_STRING 
25031: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25032: CALL_OW 44
25036: PPUSH
25037: LD_INT 0
25039: PPUSH
25040: CALL_OW 51
// end ;
25044: GO 24966
25046: POP
25047: POP
// end ;
25048: PPOPN 1
25050: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25051: LD_EXP 64
25055: PUSH
25056: LD_EXP 84
25060: AND
25061: IFFALSE 25070
25063: GO 25065
25065: DISABLE
// StreamSibBomb ;
25066: CALL 25071 0 0
25070: END
// export function StreamSibBomb ; var i , x , y ; begin
25071: LD_INT 0
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
// result := false ;
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: LD_INT 0
25084: ST_TO_ADDR
// for i := 1 to 16 do
25085: LD_ADDR_VAR 0 2
25089: PUSH
25090: DOUBLE
25091: LD_INT 1
25093: DEC
25094: ST_TO_ADDR
25095: LD_INT 16
25097: PUSH
25098: FOR_TO
25099: IFFALSE 25298
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_INT 10
25108: PUSH
25109: LD_INT 20
25111: PUSH
25112: LD_INT 30
25114: PUSH
25115: LD_INT 40
25117: PUSH
25118: LD_INT 50
25120: PUSH
25121: LD_INT 60
25123: PUSH
25124: LD_INT 70
25126: PUSH
25127: LD_INT 80
25129: PUSH
25130: LD_INT 90
25132: PUSH
25133: LD_INT 100
25135: PUSH
25136: LD_INT 110
25138: PUSH
25139: LD_INT 120
25141: PUSH
25142: LD_INT 130
25144: PUSH
25145: LD_INT 140
25147: PUSH
25148: LD_INT 150
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PPUSH
25171: LD_INT 15
25173: PPUSH
25174: CALL_OW 12
25178: ARRAY
25179: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25180: LD_ADDR_VAR 0 4
25184: PUSH
25185: LD_INT 10
25187: PUSH
25188: LD_INT 20
25190: PUSH
25191: LD_INT 30
25193: PUSH
25194: LD_INT 40
25196: PUSH
25197: LD_INT 50
25199: PUSH
25200: LD_INT 60
25202: PUSH
25203: LD_INT 70
25205: PUSH
25206: LD_INT 80
25208: PUSH
25209: LD_INT 90
25211: PUSH
25212: LD_INT 100
25214: PUSH
25215: LD_INT 110
25217: PUSH
25218: LD_INT 120
25220: PUSH
25221: LD_INT 130
25223: PUSH
25224: LD_INT 140
25226: PUSH
25227: LD_INT 150
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: PPUSH
25250: LD_INT 15
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if ValidHex ( x , y ) then
25259: LD_VAR 0 3
25263: PPUSH
25264: LD_VAR 0 4
25268: PPUSH
25269: CALL_OW 488
25273: IFFALSE 25296
// begin result := [ x , y ] ;
25275: LD_ADDR_VAR 0 1
25279: PUSH
25280: LD_VAR 0 3
25284: PUSH
25285: LD_VAR 0 4
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// break ;
25294: GO 25298
// end ; end ;
25296: GO 25098
25298: POP
25299: POP
// if result then
25300: LD_VAR 0 1
25304: IFFALSE 25364
// begin ToLua ( playSibBomb() ) ;
25306: LD_STRING playSibBomb()
25308: PPUSH
25309: CALL_OW 559
// wait ( 0 0$14 ) ;
25313: LD_INT 490
25315: PPUSH
25316: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25320: LD_VAR 0 1
25324: PUSH
25325: LD_INT 1
25327: ARRAY
25328: PPUSH
25329: LD_VAR 0 1
25333: PUSH
25334: LD_INT 2
25336: ARRAY
25337: PPUSH
25338: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25342: LD_VAR 0 1
25346: PUSH
25347: LD_INT 1
25349: ARRAY
25350: PPUSH
25351: LD_VAR 0 1
25355: PUSH
25356: LD_INT 2
25358: ARRAY
25359: PPUSH
25360: CALL_OW 429
// end ; end ;
25364: LD_VAR 0 1
25368: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25369: LD_EXP 64
25373: PUSH
25374: LD_EXP 86
25378: AND
25379: IFFALSE 25391
25381: GO 25383
25383: DISABLE
// YouLost (  ) ;
25384: LD_STRING 
25386: PPUSH
25387: CALL_OW 104
25391: END
// every 0 0$1 trigger StreamModeActive and sFog do
25392: LD_EXP 64
25396: PUSH
25397: LD_EXP 85
25401: AND
25402: IFFALSE 25416
25404: GO 25406
25406: DISABLE
// FogOff ( your_side ) ;
25407: LD_OWVAR 2
25411: PPUSH
25412: CALL_OW 344
25416: END
// every 0 0$1 trigger StreamModeActive and sSun do
25417: LD_EXP 64
25421: PUSH
25422: LD_EXP 87
25426: AND
25427: IFFALSE 25455
25429: GO 25431
25431: DISABLE
// begin solar_recharge_percent := 0 ;
25432: LD_ADDR_OWVAR 79
25436: PUSH
25437: LD_INT 0
25439: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25440: LD_INT 10500
25442: PPUSH
25443: CALL_OW 67
// solar_recharge_percent := 100 ;
25447: LD_ADDR_OWVAR 79
25451: PUSH
25452: LD_INT 100
25454: ST_TO_ADDR
// end ;
25455: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25456: LD_EXP 64
25460: PUSH
25461: LD_EXP 88
25465: AND
25466: IFFALSE 25705
25468: GO 25470
25470: DISABLE
25471: LD_INT 0
25473: PPUSH
25474: PPUSH
25475: PPUSH
// begin tmp := [ ] ;
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: EMPTY
25482: ST_TO_ADDR
// for i := 1 to 6 do
25483: LD_ADDR_VAR 0 1
25487: PUSH
25488: DOUBLE
25489: LD_INT 1
25491: DEC
25492: ST_TO_ADDR
25493: LD_INT 6
25495: PUSH
25496: FOR_TO
25497: IFFALSE 25602
// begin uc_nation := nation_nature ;
25499: LD_ADDR_OWVAR 21
25503: PUSH
25504: LD_INT 0
25506: ST_TO_ADDR
// uc_side := 0 ;
25507: LD_ADDR_OWVAR 20
25511: PUSH
25512: LD_INT 0
25514: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25515: LD_ADDR_OWVAR 29
25519: PUSH
25520: LD_INT 12
25522: PUSH
25523: LD_INT 12
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: ST_TO_ADDR
// hc_agressivity := 20 ;
25530: LD_ADDR_OWVAR 35
25534: PUSH
25535: LD_INT 20
25537: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25538: LD_ADDR_OWVAR 28
25542: PUSH
25543: LD_INT 17
25545: ST_TO_ADDR
// hc_gallery :=  ;
25546: LD_ADDR_OWVAR 33
25550: PUSH
25551: LD_STRING 
25553: ST_TO_ADDR
// hc_name :=  ;
25554: LD_ADDR_OWVAR 26
25558: PUSH
25559: LD_STRING 
25561: ST_TO_ADDR
// un := CreateHuman ;
25562: LD_ADDR_VAR 0 2
25566: PUSH
25567: CALL_OW 44
25571: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25572: LD_VAR 0 2
25576: PPUSH
25577: LD_INT 1
25579: PPUSH
25580: CALL_OW 51
// tmp := tmp ^ un ;
25584: LD_ADDR_VAR 0 3
25588: PUSH
25589: LD_VAR 0 3
25593: PUSH
25594: LD_VAR 0 2
25598: ADD
25599: ST_TO_ADDR
// end ;
25600: GO 25496
25602: POP
25603: POP
// repeat wait ( 0 0$1 ) ;
25604: LD_INT 35
25606: PPUSH
25607: CALL_OW 67
// for un in tmp do
25611: LD_ADDR_VAR 0 2
25615: PUSH
25616: LD_VAR 0 3
25620: PUSH
25621: FOR_IN
25622: IFFALSE 25696
// begin if IsDead ( un ) then
25624: LD_VAR 0 2
25628: PPUSH
25629: CALL_OW 301
25633: IFFALSE 25653
// begin tmp := tmp diff un ;
25635: LD_ADDR_VAR 0 3
25639: PUSH
25640: LD_VAR 0 3
25644: PUSH
25645: LD_VAR 0 2
25649: DIFF
25650: ST_TO_ADDR
// continue ;
25651: GO 25621
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 22
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PPUSH
25675: CALL_OW 69
25679: PPUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL_OW 74
25689: PPUSH
25690: CALL_OW 115
// end ;
25694: GO 25621
25696: POP
25697: POP
// until not tmp ;
25698: LD_VAR 0 3
25702: NOT
25703: IFFALSE 25604
// end ;
25705: PPOPN 3
25707: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25708: LD_EXP 64
25712: PUSH
25713: LD_EXP 89
25717: AND
25718: IFFALSE 25772
25720: GO 25722
25722: DISABLE
// begin ToLua ( displayTroll(); ) ;
25723: LD_STRING displayTroll();
25725: PPUSH
25726: CALL_OW 559
// wait ( 3 3$00 ) ;
25730: LD_INT 6300
25732: PPUSH
25733: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25737: LD_STRING hideTroll();
25739: PPUSH
25740: CALL_OW 559
// wait ( 1 1$00 ) ;
25744: LD_INT 2100
25746: PPUSH
25747: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25751: LD_STRING displayTroll();
25753: PPUSH
25754: CALL_OW 559
// wait ( 1 1$00 ) ;
25758: LD_INT 2100
25760: PPUSH
25761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25765: LD_STRING hideTroll();
25767: PPUSH
25768: CALL_OW 559
// end ;
25772: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25773: LD_EXP 64
25777: PUSH
25778: LD_EXP 90
25782: AND
25783: IFFALSE 25846
25785: GO 25787
25787: DISABLE
25788: LD_INT 0
25790: PPUSH
// begin p := 0 ;
25791: LD_ADDR_VAR 0 1
25795: PUSH
25796: LD_INT 0
25798: ST_TO_ADDR
// repeat game_speed := 1 ;
25799: LD_ADDR_OWVAR 65
25803: PUSH
25804: LD_INT 1
25806: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25807: LD_INT 35
25809: PPUSH
25810: CALL_OW 67
// p := p + 1 ;
25814: LD_ADDR_VAR 0 1
25818: PUSH
25819: LD_VAR 0 1
25823: PUSH
25824: LD_INT 1
25826: PLUS
25827: ST_TO_ADDR
// until p >= 60 ;
25828: LD_VAR 0 1
25832: PUSH
25833: LD_INT 60
25835: GREATEREQUAL
25836: IFFALSE 25799
// game_speed := 4 ;
25838: LD_ADDR_OWVAR 65
25842: PUSH
25843: LD_INT 4
25845: ST_TO_ADDR
// end ;
25846: PPOPN 1
25848: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25849: LD_EXP 64
25853: PUSH
25854: LD_EXP 91
25858: AND
25859: IFFALSE 26005
25861: GO 25863
25863: DISABLE
25864: LD_INT 0
25866: PPUSH
25867: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25868: LD_ADDR_VAR 0 1
25872: PUSH
25873: LD_INT 22
25875: PUSH
25876: LD_OWVAR 2
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 30
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 30
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PPUSH
25917: CALL_OW 69
25921: ST_TO_ADDR
// if not depot then
25922: LD_VAR 0 1
25926: NOT
25927: IFFALSE 25931
// exit ;
25929: GO 26005
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25931: LD_ADDR_VAR 0 2
25935: PUSH
25936: LD_VAR 0 1
25940: PUSH
25941: LD_INT 1
25943: PPUSH
25944: LD_VAR 0 1
25948: PPUSH
25949: CALL_OW 12
25953: ARRAY
25954: PPUSH
25955: CALL_OW 274
25959: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_INT 1
25967: PPUSH
25968: LD_INT 0
25970: PPUSH
25971: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25975: LD_VAR 0 2
25979: PPUSH
25980: LD_INT 2
25982: PPUSH
25983: LD_INT 0
25985: PPUSH
25986: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25990: LD_VAR 0 2
25994: PPUSH
25995: LD_INT 3
25997: PPUSH
25998: LD_INT 0
26000: PPUSH
26001: CALL_OW 277
// end ;
26005: PPOPN 2
26007: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26008: LD_EXP 64
26012: PUSH
26013: LD_EXP 92
26017: AND
26018: IFFALSE 26115
26020: GO 26022
26022: DISABLE
26023: LD_INT 0
26025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26026: LD_ADDR_VAR 0 1
26030: PUSH
26031: LD_INT 22
26033: PUSH
26034: LD_OWVAR 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 21
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 3
26055: PUSH
26056: LD_INT 23
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: ST_TO_ADDR
// if not tmp then
26080: LD_VAR 0 1
26084: NOT
26085: IFFALSE 26089
// exit ;
26087: GO 26115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26089: LD_VAR 0 1
26093: PUSH
26094: LD_INT 1
26096: PPUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL_OW 12
26106: ARRAY
26107: PPUSH
26108: LD_INT 200
26110: PPUSH
26111: CALL_OW 234
// end ;
26115: PPOPN 1
26117: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26118: LD_EXP 64
26122: PUSH
26123: LD_EXP 93
26127: AND
26128: IFFALSE 26207
26130: GO 26132
26132: DISABLE
26133: LD_INT 0
26135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26136: LD_ADDR_VAR 0 1
26140: PUSH
26141: LD_INT 22
26143: PUSH
26144: LD_OWVAR 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 21
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 69
26171: ST_TO_ADDR
// if not tmp then
26172: LD_VAR 0 1
26176: NOT
26177: IFFALSE 26181
// exit ;
26179: GO 26207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26181: LD_VAR 0 1
26185: PUSH
26186: LD_INT 1
26188: PPUSH
26189: LD_VAR 0 1
26193: PPUSH
26194: CALL_OW 12
26198: ARRAY
26199: PPUSH
26200: LD_INT 60
26202: PPUSH
26203: CALL_OW 234
// end ;
26207: PPOPN 1
26209: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26210: LD_EXP 64
26214: PUSH
26215: LD_EXP 94
26219: AND
26220: IFFALSE 26319
26222: GO 26224
26224: DISABLE
26225: LD_INT 0
26227: PPUSH
26228: PPUSH
// begin enable ;
26229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26230: LD_ADDR_VAR 0 1
26234: PUSH
26235: LD_INT 22
26237: PUSH
26238: LD_OWVAR 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 61
26249: PUSH
26250: EMPTY
26251: LIST
26252: PUSH
26253: LD_INT 33
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: PPUSH
26268: CALL_OW 69
26272: ST_TO_ADDR
// if not tmp then
26273: LD_VAR 0 1
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26319
// for i in tmp do
26282: LD_ADDR_VAR 0 2
26286: PUSH
26287: LD_VAR 0 1
26291: PUSH
26292: FOR_IN
26293: IFFALSE 26317
// if IsControledBy ( i ) then
26295: LD_VAR 0 2
26299: PPUSH
26300: CALL_OW 312
26304: IFFALSE 26315
// ComUnlink ( i ) ;
26306: LD_VAR 0 2
26310: PPUSH
26311: CALL_OW 136
26315: GO 26292
26317: POP
26318: POP
// end ;
26319: PPOPN 2
26321: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26322: LD_EXP 64
26326: PUSH
26327: LD_EXP 95
26331: AND
26332: IFFALSE 26472
26334: GO 26336
26336: DISABLE
26337: LD_INT 0
26339: PPUSH
26340: PPUSH
// begin ToLua ( displayPowell(); ) ;
26341: LD_STRING displayPowell();
26343: PPUSH
26344: CALL_OW 559
// uc_side := 0 ;
26348: LD_ADDR_OWVAR 20
26352: PUSH
26353: LD_INT 0
26355: ST_TO_ADDR
// uc_nation := 2 ;
26356: LD_ADDR_OWVAR 21
26360: PUSH
26361: LD_INT 2
26363: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26364: LD_ADDR_OWVAR 37
26368: PUSH
26369: LD_INT 14
26371: ST_TO_ADDR
// vc_engine := engine_siberite ;
26372: LD_ADDR_OWVAR 39
26376: PUSH
26377: LD_INT 3
26379: ST_TO_ADDR
// vc_control := control_apeman ;
26380: LD_ADDR_OWVAR 38
26384: PUSH
26385: LD_INT 5
26387: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26388: LD_ADDR_OWVAR 40
26392: PUSH
26393: LD_INT 29
26395: ST_TO_ADDR
// un := CreateVehicle ;
26396: LD_ADDR_VAR 0 2
26400: PUSH
26401: CALL_OW 45
26405: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26406: LD_VAR 0 2
26410: PPUSH
26411: LD_INT 1
26413: PPUSH
26414: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26418: LD_INT 35
26420: PPUSH
26421: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26425: LD_VAR 0 2
26429: PPUSH
26430: LD_INT 22
26432: PUSH
26433: LD_OWVAR 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PPUSH
26442: CALL_OW 69
26446: PPUSH
26447: LD_VAR 0 2
26451: PPUSH
26452: CALL_OW 74
26456: PPUSH
26457: CALL_OW 115
// until IsDead ( un ) ;
26461: LD_VAR 0 2
26465: PPUSH
26466: CALL_OW 301
26470: IFFALSE 26418
// end ;
26472: PPOPN 2
26474: END
// every 0 0$1 trigger StreamModeActive and sStu do
26475: LD_EXP 64
26479: PUSH
26480: LD_EXP 103
26484: AND
26485: IFFALSE 26501
26487: GO 26489
26489: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26490: LD_STRING displayStucuk();
26492: PPUSH
26493: CALL_OW 559
// ResetFog ;
26497: CALL_OW 335
// end ;
26501: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26502: LD_EXP 64
26506: PUSH
26507: LD_EXP 96
26511: AND
26512: IFFALSE 26653
26514: GO 26516
26516: DISABLE
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26521: LD_ADDR_VAR 0 2
26525: PUSH
26526: LD_INT 22
26528: PUSH
26529: LD_OWVAR 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 21
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: ST_TO_ADDR
// if not tmp then
26557: LD_VAR 0 2
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 26653
// un := tmp [ rand ( 1 , tmp ) ] ;
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: LD_INT 1
26578: PPUSH
26579: LD_VAR 0 2
26583: PPUSH
26584: CALL_OW 12
26588: ARRAY
26589: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26590: LD_VAR 0 1
26594: PPUSH
26595: LD_INT 0
26597: PPUSH
26598: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26602: LD_VAR 0 1
26606: PPUSH
26607: LD_OWVAR 3
26611: PUSH
26612: LD_VAR 0 1
26616: DIFF
26617: PPUSH
26618: LD_VAR 0 1
26622: PPUSH
26623: CALL_OW 74
26627: PPUSH
26628: CALL_OW 115
// wait ( 0 0$20 ) ;
26632: LD_INT 700
26634: PPUSH
26635: CALL_OW 67
// SetSide ( un , your_side ) ;
26639: LD_VAR 0 1
26643: PPUSH
26644: LD_OWVAR 2
26648: PPUSH
26649: CALL_OW 235
// end ;
26653: PPOPN 2
26655: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26656: LD_EXP 64
26660: PUSH
26661: LD_EXP 97
26665: AND
26666: IFFALSE 26772
26668: GO 26670
26670: DISABLE
26671: LD_INT 0
26673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26674: LD_ADDR_VAR 0 1
26678: PUSH
26679: LD_INT 22
26681: PUSH
26682: LD_OWVAR 2
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: LD_INT 30
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 30
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PPUSH
26723: CALL_OW 69
26727: ST_TO_ADDR
// if not depot then
26728: LD_VAR 0 1
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 26772
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26737: LD_VAR 0 1
26741: PUSH
26742: LD_INT 1
26744: ARRAY
26745: PPUSH
26746: CALL_OW 250
26750: PPUSH
26751: LD_VAR 0 1
26755: PUSH
26756: LD_INT 1
26758: ARRAY
26759: PPUSH
26760: CALL_OW 251
26764: PPUSH
26765: LD_INT 70
26767: PPUSH
26768: CALL_OW 495
// end ;
26772: PPOPN 1
26774: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26775: LD_EXP 64
26779: PUSH
26780: LD_EXP 98
26784: AND
26785: IFFALSE 26996
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26797: LD_ADDR_VAR 0 5
26801: PUSH
26802: LD_INT 22
26804: PUSH
26805: LD_OWVAR 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 21
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PPUSH
26828: CALL_OW 69
26832: ST_TO_ADDR
// if not tmp then
26833: LD_VAR 0 5
26837: NOT
26838: IFFALSE 26842
// exit ;
26840: GO 26996
// for i in tmp do
26842: LD_ADDR_VAR 0 1
26846: PUSH
26847: LD_VAR 0 5
26851: PUSH
26852: FOR_IN
26853: IFFALSE 26994
// begin d := rand ( 0 , 5 ) ;
26855: LD_ADDR_VAR 0 4
26859: PUSH
26860: LD_INT 0
26862: PPUSH
26863: LD_INT 5
26865: PPUSH
26866: CALL_OW 12
26870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26871: LD_ADDR_VAR 0 2
26875: PUSH
26876: LD_VAR 0 1
26880: PPUSH
26881: CALL_OW 250
26885: PPUSH
26886: LD_VAR 0 4
26890: PPUSH
26891: LD_INT 3
26893: PPUSH
26894: LD_INT 12
26896: PPUSH
26897: CALL_OW 12
26901: PPUSH
26902: CALL_OW 272
26906: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 251
26921: PPUSH
26922: LD_VAR 0 4
26926: PPUSH
26927: LD_INT 3
26929: PPUSH
26930: LD_INT 12
26932: PPUSH
26933: CALL_OW 12
26937: PPUSH
26938: CALL_OW 273
26942: ST_TO_ADDR
// if ValidHex ( x , y ) then
26943: LD_VAR 0 2
26947: PPUSH
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 488
26957: IFFALSE 26992
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26959: LD_VAR 0 1
26963: PPUSH
26964: LD_VAR 0 2
26968: PPUSH
26969: LD_VAR 0 3
26973: PPUSH
26974: LD_INT 3
26976: PPUSH
26977: LD_INT 6
26979: PPUSH
26980: CALL_OW 12
26984: PPUSH
26985: LD_INT 1
26987: PPUSH
26988: CALL_OW 483
// end ;
26992: GO 26852
26994: POP
26995: POP
// end ;
26996: PPOPN 5
26998: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26999: LD_EXP 64
27003: PUSH
27004: LD_EXP 99
27008: AND
27009: IFFALSE 27103
27011: GO 27013
27013: DISABLE
27014: LD_INT 0
27016: PPUSH
27017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27018: LD_ADDR_VAR 0 2
27022: PUSH
27023: LD_INT 22
27025: PUSH
27026: LD_OWVAR 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 32
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 21
27047: PUSH
27048: LD_INT 2
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: ST_TO_ADDR
// if not tmp then
27065: LD_VAR 0 2
27069: NOT
27070: IFFALSE 27074
// exit ;
27072: GO 27103
// for i in tmp do
27074: LD_ADDR_VAR 0 1
27078: PUSH
27079: LD_VAR 0 2
27083: PUSH
27084: FOR_IN
27085: IFFALSE 27101
// SetFuel ( i , 0 ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: LD_INT 0
27094: PPUSH
27095: CALL_OW 240
27099: GO 27084
27101: POP
27102: POP
// end ;
27103: PPOPN 2
27105: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27106: LD_EXP 64
27110: PUSH
27111: LD_EXP 100
27115: AND
27116: IFFALSE 27182
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27124: LD_ADDR_VAR 0 1
27128: PUSH
27129: LD_INT 22
27131: PUSH
27132: LD_OWVAR 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 30
27143: PUSH
27144: LD_INT 29
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PPUSH
27155: CALL_OW 69
27159: ST_TO_ADDR
// if not tmp then
27160: LD_VAR 0 1
27164: NOT
27165: IFFALSE 27169
// exit ;
27167: GO 27182
// DestroyUnit ( tmp [ 1 ] ) ;
27169: LD_VAR 0 1
27173: PUSH
27174: LD_INT 1
27176: ARRAY
27177: PPUSH
27178: CALL_OW 65
// end ;
27182: PPOPN 1
27184: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27185: LD_EXP 64
27189: PUSH
27190: LD_EXP 102
27194: AND
27195: IFFALSE 27324
27197: GO 27199
27199: DISABLE
27200: LD_INT 0
27202: PPUSH
// begin uc_side := 0 ;
27203: LD_ADDR_OWVAR 20
27207: PUSH
27208: LD_INT 0
27210: ST_TO_ADDR
// uc_nation := nation_arabian ;
27211: LD_ADDR_OWVAR 21
27215: PUSH
27216: LD_INT 2
27218: ST_TO_ADDR
// hc_gallery :=  ;
27219: LD_ADDR_OWVAR 33
27223: PUSH
27224: LD_STRING 
27226: ST_TO_ADDR
// hc_name :=  ;
27227: LD_ADDR_OWVAR 26
27231: PUSH
27232: LD_STRING 
27234: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27235: LD_INT 1
27237: PPUSH
27238: LD_INT 11
27240: PPUSH
27241: LD_INT 10
27243: PPUSH
27244: CALL_OW 380
// un := CreateHuman ;
27248: LD_ADDR_VAR 0 1
27252: PUSH
27253: CALL_OW 44
27257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27258: LD_VAR 0 1
27262: PPUSH
27263: LD_INT 1
27265: PPUSH
27266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27270: LD_INT 35
27272: PPUSH
27273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27277: LD_VAR 0 1
27281: PPUSH
27282: LD_INT 22
27284: PUSH
27285: LD_OWVAR 2
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PPUSH
27294: CALL_OW 69
27298: PPUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 74
27308: PPUSH
27309: CALL_OW 115
// until IsDead ( un ) ;
27313: LD_VAR 0 1
27317: PPUSH
27318: CALL_OW 301
27322: IFFALSE 27270
// end ;
27324: PPOPN 1
27326: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27327: LD_EXP 64
27331: PUSH
27332: LD_EXP 104
27336: AND
27337: IFFALSE 27349
27339: GO 27341
27341: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27342: LD_STRING earthquake(getX(game), 0, 32)
27344: PPUSH
27345: CALL_OW 559
27349: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27350: LD_EXP 64
27354: PUSH
27355: LD_EXP 105
27359: AND
27360: IFFALSE 27451
27362: GO 27364
27364: DISABLE
27365: LD_INT 0
27367: PPUSH
// begin enable ;
27368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27369: LD_ADDR_VAR 0 1
27373: PUSH
27374: LD_INT 22
27376: PUSH
27377: LD_OWVAR 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 21
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 33
27398: PUSH
27399: LD_INT 3
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: PPUSH
27411: CALL_OW 69
27415: ST_TO_ADDR
// if not tmp then
27416: LD_VAR 0 1
27420: NOT
27421: IFFALSE 27425
// exit ;
27423: GO 27451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27425: LD_VAR 0 1
27429: PUSH
27430: LD_INT 1
27432: PPUSH
27433: LD_VAR 0 1
27437: PPUSH
27438: CALL_OW 12
27442: ARRAY
27443: PPUSH
27444: LD_INT 1
27446: PPUSH
27447: CALL_OW 234
// end ;
27451: PPOPN 1
27453: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27454: LD_EXP 64
27458: PUSH
27459: LD_EXP 106
27463: AND
27464: IFFALSE 27605
27466: GO 27468
27468: DISABLE
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
27473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27474: LD_ADDR_VAR 0 3
27478: PUSH
27479: LD_INT 22
27481: PUSH
27482: LD_OWVAR 2
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 25
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PPUSH
27505: CALL_OW 69
27509: ST_TO_ADDR
// if not tmp then
27510: LD_VAR 0 3
27514: NOT
27515: IFFALSE 27519
// exit ;
27517: GO 27605
// un := tmp [ rand ( 1 , tmp ) ] ;
27519: LD_ADDR_VAR 0 2
27523: PUSH
27524: LD_VAR 0 3
27528: PUSH
27529: LD_INT 1
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: CALL_OW 12
27541: ARRAY
27542: ST_TO_ADDR
// if Crawls ( un ) then
27543: LD_VAR 0 2
27547: PPUSH
27548: CALL_OW 318
27552: IFFALSE 27563
// ComWalk ( un ) ;
27554: LD_VAR 0 2
27558: PPUSH
27559: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27563: LD_VAR 0 2
27567: PPUSH
27568: LD_INT 9
27570: PPUSH
27571: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27575: LD_INT 28
27577: PPUSH
27578: LD_OWVAR 2
27582: PPUSH
27583: LD_INT 2
27585: PPUSH
27586: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27590: LD_INT 29
27592: PPUSH
27593: LD_OWVAR 2
27597: PPUSH
27598: LD_INT 2
27600: PPUSH
27601: CALL_OW 322
// end ;
27605: PPOPN 3
27607: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27608: LD_EXP 64
27612: PUSH
27613: LD_EXP 107
27617: AND
27618: IFFALSE 27729
27620: GO 27622
27622: DISABLE
27623: LD_INT 0
27625: PPUSH
27626: PPUSH
27627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27628: LD_ADDR_VAR 0 3
27632: PUSH
27633: LD_INT 22
27635: PUSH
27636: LD_OWVAR 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 25
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PPUSH
27659: CALL_OW 69
27663: ST_TO_ADDR
// if not tmp then
27664: LD_VAR 0 3
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 27729
// un := tmp [ rand ( 1 , tmp ) ] ;
27673: LD_ADDR_VAR 0 2
27677: PUSH
27678: LD_VAR 0 3
27682: PUSH
27683: LD_INT 1
27685: PPUSH
27686: LD_VAR 0 3
27690: PPUSH
27691: CALL_OW 12
27695: ARRAY
27696: ST_TO_ADDR
// if Crawls ( un ) then
27697: LD_VAR 0 2
27701: PPUSH
27702: CALL_OW 318
27706: IFFALSE 27717
// ComWalk ( un ) ;
27708: LD_VAR 0 2
27712: PPUSH
27713: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_INT 8
27724: PPUSH
27725: CALL_OW 336
// end ;
27729: PPOPN 3
27731: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27732: LD_EXP 64
27736: PUSH
27737: LD_EXP 108
27741: AND
27742: IFFALSE 27886
27744: GO 27746
27746: DISABLE
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27751: LD_ADDR_VAR 0 2
27755: PUSH
27756: LD_INT 22
27758: PUSH
27759: LD_OWVAR 2
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 21
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: LD_INT 34
27783: PUSH
27784: LD_INT 12
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 34
27793: PUSH
27794: LD_INT 51
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 34
27803: PUSH
27804: LD_INT 32
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: PPUSH
27822: CALL_OW 69
27826: ST_TO_ADDR
// if not tmp then
27827: LD_VAR 0 2
27831: NOT
27832: IFFALSE 27836
// exit ;
27834: GO 27886
// for i in tmp do
27836: LD_ADDR_VAR 0 1
27840: PUSH
27841: LD_VAR 0 2
27845: PUSH
27846: FOR_IN
27847: IFFALSE 27884
// if GetCargo ( i , mat_artifact ) = 0 then
27849: LD_VAR 0 1
27853: PPUSH
27854: LD_INT 4
27856: PPUSH
27857: CALL_OW 289
27861: PUSH
27862: LD_INT 0
27864: EQUAL
27865: IFFALSE 27882
// SetCargo ( i , mat_siberit , 100 ) ;
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_INT 3
27874: PPUSH
27875: LD_INT 100
27877: PPUSH
27878: CALL_OW 290
27882: GO 27846
27884: POP
27885: POP
// end ;
27886: PPOPN 2
27888: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27889: LD_EXP 64
27893: PUSH
27894: LD_EXP 109
27898: AND
27899: IFFALSE 28082
27901: GO 27903
27903: DISABLE
27904: LD_INT 0
27906: PPUSH
27907: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27908: LD_ADDR_VAR 0 2
27912: PUSH
27913: LD_INT 22
27915: PUSH
27916: LD_OWVAR 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 69
27929: ST_TO_ADDR
// if not tmp then
27930: LD_VAR 0 2
27934: NOT
27935: IFFALSE 27939
// exit ;
27937: GO 28082
// for i := 1 to 2 do
27939: LD_ADDR_VAR 0 1
27943: PUSH
27944: DOUBLE
27945: LD_INT 1
27947: DEC
27948: ST_TO_ADDR
27949: LD_INT 2
27951: PUSH
27952: FOR_TO
27953: IFFALSE 28080
// begin uc_side := your_side ;
27955: LD_ADDR_OWVAR 20
27959: PUSH
27960: LD_OWVAR 2
27964: ST_TO_ADDR
// uc_nation := nation_american ;
27965: LD_ADDR_OWVAR 21
27969: PUSH
27970: LD_INT 1
27972: ST_TO_ADDR
// vc_chassis := us_morphling ;
27973: LD_ADDR_OWVAR 37
27977: PUSH
27978: LD_INT 5
27980: ST_TO_ADDR
// vc_engine := engine_siberite ;
27981: LD_ADDR_OWVAR 39
27985: PUSH
27986: LD_INT 3
27988: ST_TO_ADDR
// vc_control := control_computer ;
27989: LD_ADDR_OWVAR 38
27993: PUSH
27994: LD_INT 3
27996: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27997: LD_ADDR_OWVAR 40
28001: PUSH
28002: LD_INT 10
28004: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28005: LD_VAR 0 2
28009: PUSH
28010: LD_INT 1
28012: ARRAY
28013: PPUSH
28014: CALL_OW 310
28018: NOT
28019: IFFALSE 28066
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28021: CALL_OW 45
28025: PPUSH
28026: LD_VAR 0 2
28030: PUSH
28031: LD_INT 1
28033: ARRAY
28034: PPUSH
28035: CALL_OW 250
28039: PPUSH
28040: LD_VAR 0 2
28044: PUSH
28045: LD_INT 1
28047: ARRAY
28048: PPUSH
28049: CALL_OW 251
28053: PPUSH
28054: LD_INT 12
28056: PPUSH
28057: LD_INT 1
28059: PPUSH
28060: CALL_OW 50
28064: GO 28078
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28066: CALL_OW 45
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: CALL_OW 51
// end ;
28078: GO 27952
28080: POP
28081: POP
// end ;
28082: PPOPN 2
28084: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28085: LD_EXP 64
28089: PUSH
28090: LD_EXP 110
28094: AND
28095: IFFALSE 28317
28097: GO 28099
28099: DISABLE
28100: LD_INT 0
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28108: LD_ADDR_VAR 0 6
28112: PUSH
28113: LD_INT 22
28115: PUSH
28116: LD_OWVAR 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 21
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 3
28137: PUSH
28138: LD_INT 23
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 69
28161: ST_TO_ADDR
// if not tmp then
28162: LD_VAR 0 6
28166: NOT
28167: IFFALSE 28171
// exit ;
28169: GO 28317
// s1 := rand ( 1 , 4 ) ;
28171: LD_ADDR_VAR 0 2
28175: PUSH
28176: LD_INT 1
28178: PPUSH
28179: LD_INT 4
28181: PPUSH
28182: CALL_OW 12
28186: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28187: LD_ADDR_VAR 0 4
28191: PUSH
28192: LD_VAR 0 6
28196: PUSH
28197: LD_INT 1
28199: ARRAY
28200: PPUSH
28201: LD_VAR 0 2
28205: PPUSH
28206: CALL_OW 259
28210: ST_TO_ADDR
// if s1 = 1 then
28211: LD_VAR 0 2
28215: PUSH
28216: LD_INT 1
28218: EQUAL
28219: IFFALSE 28239
// s2 := rand ( 2 , 4 ) else
28221: LD_ADDR_VAR 0 3
28225: PUSH
28226: LD_INT 2
28228: PPUSH
28229: LD_INT 4
28231: PPUSH
28232: CALL_OW 12
28236: ST_TO_ADDR
28237: GO 28247
// s2 := 1 ;
28239: LD_ADDR_VAR 0 3
28243: PUSH
28244: LD_INT 1
28246: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28247: LD_ADDR_VAR 0 5
28251: PUSH
28252: LD_VAR 0 6
28256: PUSH
28257: LD_INT 1
28259: ARRAY
28260: PPUSH
28261: LD_VAR 0 3
28265: PPUSH
28266: CALL_OW 259
28270: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28271: LD_VAR 0 6
28275: PUSH
28276: LD_INT 1
28278: ARRAY
28279: PPUSH
28280: LD_VAR 0 2
28284: PPUSH
28285: LD_VAR 0 5
28289: PPUSH
28290: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28294: LD_VAR 0 6
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_VAR 0 3
28307: PPUSH
28308: LD_VAR 0 4
28312: PPUSH
28313: CALL_OW 237
// end ;
28317: PPOPN 6
28319: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28320: LD_EXP 64
28324: PUSH
28325: LD_EXP 111
28329: AND
28330: IFFALSE 28409
28332: GO 28334
28334: DISABLE
28335: LD_INT 0
28337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28338: LD_ADDR_VAR 0 1
28342: PUSH
28343: LD_INT 22
28345: PUSH
28346: LD_OWVAR 2
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 30
28357: PUSH
28358: LD_INT 3
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: ST_TO_ADDR
// if not tmp then
28374: LD_VAR 0 1
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28383: LD_VAR 0 1
28387: PUSH
28388: LD_INT 1
28390: PPUSH
28391: LD_VAR 0 1
28395: PPUSH
28396: CALL_OW 12
28400: ARRAY
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 234
// end ;
28409: PPOPN 1
28411: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28412: LD_EXP 64
28416: PUSH
28417: LD_EXP 112
28421: AND
28422: IFFALSE 28534
28424: GO 28426
28426: DISABLE
28427: LD_INT 0
28429: PPUSH
28430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28431: LD_ADDR_VAR 0 2
28435: PUSH
28436: LD_INT 22
28438: PUSH
28439: LD_OWVAR 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 30
28453: PUSH
28454: LD_INT 27
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 30
28463: PUSH
28464: LD_INT 26
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 30
28473: PUSH
28474: LD_INT 28
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PPUSH
28491: CALL_OW 69
28495: ST_TO_ADDR
// if not tmp then
28496: LD_VAR 0 2
28500: NOT
28501: IFFALSE 28505
// exit ;
28503: GO 28534
// for i in tmp do
28505: LD_ADDR_VAR 0 1
28509: PUSH
28510: LD_VAR 0 2
28514: PUSH
28515: FOR_IN
28516: IFFALSE 28532
// SetLives ( i , 1 ) ;
28518: LD_VAR 0 1
28522: PPUSH
28523: LD_INT 1
28525: PPUSH
28526: CALL_OW 234
28530: GO 28515
28532: POP
28533: POP
// end ;
28534: PPOPN 2
28536: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28537: LD_EXP 64
28541: PUSH
28542: LD_EXP 113
28546: AND
28547: IFFALSE 28821
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
28555: PPUSH
28556: PPUSH
// begin i := rand ( 1 , 7 ) ;
28557: LD_ADDR_VAR 0 1
28561: PUSH
28562: LD_INT 1
28564: PPUSH
28565: LD_INT 7
28567: PPUSH
28568: CALL_OW 12
28572: ST_TO_ADDR
// case i of 1 :
28573: LD_VAR 0 1
28577: PUSH
28578: LD_INT 1
28580: DOUBLE
28581: EQUAL
28582: IFTRUE 28586
28584: GO 28596
28586: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28587: LD_STRING earthquake(getX(game), 0, 32)
28589: PPUSH
28590: CALL_OW 559
28594: GO 28821
28596: LD_INT 2
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28618
28604: POP
// begin ToLua ( displayStucuk(); ) ;
28605: LD_STRING displayStucuk();
28607: PPUSH
28608: CALL_OW 559
// ResetFog ;
28612: CALL_OW 335
// end ; 3 :
28616: GO 28821
28618: LD_INT 3
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28730
28626: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28627: LD_ADDR_VAR 0 2
28631: PUSH
28632: LD_INT 22
28634: PUSH
28635: LD_OWVAR 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 25
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PPUSH
28658: CALL_OW 69
28662: ST_TO_ADDR
// if not tmp then
28663: LD_VAR 0 2
28667: NOT
28668: IFFALSE 28672
// exit ;
28670: GO 28821
// un := tmp [ rand ( 1 , tmp ) ] ;
28672: LD_ADDR_VAR 0 3
28676: PUSH
28677: LD_VAR 0 2
28681: PUSH
28682: LD_INT 1
28684: PPUSH
28685: LD_VAR 0 2
28689: PPUSH
28690: CALL_OW 12
28694: ARRAY
28695: ST_TO_ADDR
// if Crawls ( un ) then
28696: LD_VAR 0 3
28700: PPUSH
28701: CALL_OW 318
28705: IFFALSE 28716
// ComWalk ( un ) ;
28707: LD_VAR 0 3
28711: PPUSH
28712: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28716: LD_VAR 0 3
28720: PPUSH
28721: LD_INT 8
28723: PPUSH
28724: CALL_OW 336
// end ; 4 :
28728: GO 28821
28730: LD_INT 4
28732: DOUBLE
28733: EQUAL
28734: IFTRUE 28738
28736: GO 28799
28738: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28739: LD_ADDR_VAR 0 2
28743: PUSH
28744: LD_INT 22
28746: PUSH
28747: LD_OWVAR 2
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 30
28758: PUSH
28759: LD_INT 29
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PPUSH
28770: CALL_OW 69
28774: ST_TO_ADDR
// if not tmp then
28775: LD_VAR 0 2
28779: NOT
28780: IFFALSE 28784
// exit ;
28782: GO 28821
// DestroyUnit ( tmp [ 1 ] ) ;
28784: LD_VAR 0 2
28788: PUSH
28789: LD_INT 1
28791: ARRAY
28792: PPUSH
28793: CALL_OW 65
// end ; 5 .. 7 :
28797: GO 28821
28799: LD_INT 5
28801: DOUBLE
28802: GREATEREQUAL
28803: IFFALSE 28811
28805: LD_INT 7
28807: DOUBLE
28808: LESSEQUAL
28809: IFTRUE 28813
28811: GO 28820
28813: POP
// StreamSibBomb ; end ;
28814: CALL 25071 0 0
28818: GO 28821
28820: POP
// end ;
28821: PPOPN 3
28823: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28824: LD_EXP 64
28828: PUSH
28829: LD_EXP 114
28833: AND
28834: IFFALSE 28990
28836: GO 28838
28838: DISABLE
28839: LD_INT 0
28841: PPUSH
28842: PPUSH
28843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28844: LD_ADDR_VAR 0 2
28848: PUSH
28849: LD_INT 81
28851: PUSH
28852: LD_OWVAR 2
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 21
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 21
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PPUSH
28893: CALL_OW 69
28897: ST_TO_ADDR
// if not tmp then
28898: LD_VAR 0 2
28902: NOT
28903: IFFALSE 28907
// exit ;
28905: GO 28990
// p := 0 ;
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: LD_INT 0
28914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28915: LD_INT 35
28917: PPUSH
28918: CALL_OW 67
// p := p + 1 ;
28922: LD_ADDR_VAR 0 3
28926: PUSH
28927: LD_VAR 0 3
28931: PUSH
28932: LD_INT 1
28934: PLUS
28935: ST_TO_ADDR
// for i in tmp do
28936: LD_ADDR_VAR 0 1
28940: PUSH
28941: LD_VAR 0 2
28945: PUSH
28946: FOR_IN
28947: IFFALSE 28978
// if GetLives ( i ) < 1000 then
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 256
28958: PUSH
28959: LD_INT 1000
28961: LESS
28962: IFFALSE 28976
// SetLives ( i , 1000 ) ;
28964: LD_VAR 0 1
28968: PPUSH
28969: LD_INT 1000
28971: PPUSH
28972: CALL_OW 234
28976: GO 28946
28978: POP
28979: POP
// until p > 20 ;
28980: LD_VAR 0 3
28984: PUSH
28985: LD_INT 20
28987: GREATER
28988: IFFALSE 28915
// end ;
28990: PPOPN 3
28992: END
// every 0 0$1 trigger StreamModeActive and sTime do
28993: LD_EXP 64
28997: PUSH
28998: LD_EXP 115
29002: AND
29003: IFFALSE 29038
29005: GO 29007
29007: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29008: LD_INT 28
29010: PPUSH
29011: LD_OWVAR 2
29015: PPUSH
29016: LD_INT 2
29018: PPUSH
29019: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29023: LD_INT 30
29025: PPUSH
29026: LD_OWVAR 2
29030: PPUSH
29031: LD_INT 2
29033: PPUSH
29034: CALL_OW 322
// end ;
29038: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29039: LD_EXP 64
29043: PUSH
29044: LD_EXP 116
29048: AND
29049: IFFALSE 29170
29051: GO 29053
29053: DISABLE
29054: LD_INT 0
29056: PPUSH
29057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_INT 22
29065: PUSH
29066: LD_OWVAR 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 21
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 3
29087: PUSH
29088: LD_INT 23
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: PPUSH
29107: CALL_OW 69
29111: ST_TO_ADDR
// if not tmp then
29112: LD_VAR 0 2
29116: NOT
29117: IFFALSE 29121
// exit ;
29119: GO 29170
// for i in tmp do
29121: LD_ADDR_VAR 0 1
29125: PUSH
29126: LD_VAR 0 2
29130: PUSH
29131: FOR_IN
29132: IFFALSE 29168
// begin if Crawls ( i ) then
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 318
29143: IFFALSE 29154
// ComWalk ( i ) ;
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL_OW 138
// SetClass ( i , 2 ) ;
29154: LD_VAR 0 1
29158: PPUSH
29159: LD_INT 2
29161: PPUSH
29162: CALL_OW 336
// end ;
29166: GO 29131
29168: POP
29169: POP
// end ;
29170: PPOPN 2
29172: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29173: LD_EXP 64
29177: PUSH
29178: LD_EXP 117
29182: AND
29183: IFFALSE 29464
29185: GO 29187
29187: DISABLE
29188: LD_INT 0
29190: PPUSH
29191: PPUSH
29192: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29193: LD_OWVAR 2
29197: PPUSH
29198: LD_INT 9
29200: PPUSH
29201: LD_INT 1
29203: PPUSH
29204: LD_INT 1
29206: PPUSH
29207: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29211: LD_INT 9
29213: PPUSH
29214: LD_OWVAR 2
29218: PPUSH
29219: CALL_OW 343
// uc_side := 9 ;
29223: LD_ADDR_OWVAR 20
29227: PUSH
29228: LD_INT 9
29230: ST_TO_ADDR
// uc_nation := 2 ;
29231: LD_ADDR_OWVAR 21
29235: PUSH
29236: LD_INT 2
29238: ST_TO_ADDR
// hc_name := Dark Warrior ;
29239: LD_ADDR_OWVAR 26
29243: PUSH
29244: LD_STRING Dark Warrior
29246: ST_TO_ADDR
// hc_gallery :=  ;
29247: LD_ADDR_OWVAR 33
29251: PUSH
29252: LD_STRING 
29254: ST_TO_ADDR
// hc_noskilllimit := true ;
29255: LD_ADDR_OWVAR 76
29259: PUSH
29260: LD_INT 1
29262: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29263: LD_ADDR_OWVAR 31
29267: PUSH
29268: LD_INT 30
29270: PUSH
29271: LD_INT 30
29273: PUSH
29274: LD_INT 30
29276: PUSH
29277: LD_INT 30
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
// un := CreateHuman ;
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: CALL_OW 44
29295: ST_TO_ADDR
// hc_noskilllimit := false ;
29296: LD_ADDR_OWVAR 76
29300: PUSH
29301: LD_INT 0
29303: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29304: LD_VAR 0 3
29308: PPUSH
29309: LD_INT 1
29311: PPUSH
29312: CALL_OW 51
// p := 0 ;
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29324: LD_INT 35
29326: PPUSH
29327: CALL_OW 67
// p := p + 1 ;
29331: LD_ADDR_VAR 0 2
29335: PUSH
29336: LD_VAR 0 2
29340: PUSH
29341: LD_INT 1
29343: PLUS
29344: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29345: LD_VAR 0 3
29349: PPUSH
29350: CALL_OW 256
29354: PUSH
29355: LD_INT 1000
29357: LESS
29358: IFFALSE 29372
// SetLives ( un , 1000 ) ;
29360: LD_VAR 0 3
29364: PPUSH
29365: LD_INT 1000
29367: PPUSH
29368: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29372: LD_VAR 0 3
29376: PPUSH
29377: LD_INT 81
29379: PUSH
29380: LD_OWVAR 2
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 91
29391: PUSH
29392: LD_VAR 0 3
29396: PUSH
29397: LD_INT 30
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: PPUSH
29414: LD_VAR 0 3
29418: PPUSH
29419: CALL_OW 74
29423: PPUSH
29424: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29428: LD_VAR 0 2
29432: PUSH
29433: LD_INT 60
29435: GREATER
29436: PUSH
29437: LD_VAR 0 3
29441: PPUSH
29442: CALL_OW 301
29446: OR
29447: IFFALSE 29324
// if un then
29449: LD_VAR 0 3
29453: IFFALSE 29464
// RemoveUnit ( un ) ;
29455: LD_VAR 0 3
29459: PPUSH
29460: CALL_OW 64
// end ;
29464: PPOPN 3
29466: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29467: LD_INT 0
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29473: LD_ADDR_VAR 0 4
29477: PUSH
29478: LD_INT 22
29480: PUSH
29481: LD_OWVAR 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 30
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 30
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PPUSH
29522: CALL_OW 69
29526: ST_TO_ADDR
// if not tmp then
29527: LD_VAR 0 4
29531: NOT
29532: IFFALSE 29536
// exit ;
29534: GO 29595
// for i in tmp do
29536: LD_ADDR_VAR 0 2
29540: PUSH
29541: LD_VAR 0 4
29545: PUSH
29546: FOR_IN
29547: IFFALSE 29593
// for j = 1 to 3 do
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: DOUBLE
29555: LD_INT 1
29557: DEC
29558: ST_TO_ADDR
29559: LD_INT 3
29561: PUSH
29562: FOR_TO
29563: IFFALSE 29589
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29565: LD_VAR 0 2
29569: PPUSH
29570: CALL_OW 274
29574: PPUSH
29575: LD_VAR 0 3
29579: PPUSH
29580: LD_INT 99999
29582: PPUSH
29583: CALL_OW 277
29587: GO 29562
29589: POP
29590: POP
29591: GO 29546
29593: POP
29594: POP
// end ;
29595: LD_VAR 0 1
29599: RET
// export function hHackSetLevel10 ; var i , j ; begin
29600: LD_INT 0
29602: PPUSH
29603: PPUSH
29604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29605: LD_ADDR_VAR 0 2
29609: PUSH
29610: LD_INT 21
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL_OW 69
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29678
// if IsSelected ( i ) then
29628: LD_VAR 0 2
29632: PPUSH
29633: CALL_OW 306
29637: IFFALSE 29676
// begin for j := 1 to 4 do
29639: LD_ADDR_VAR 0 3
29643: PUSH
29644: DOUBLE
29645: LD_INT 1
29647: DEC
29648: ST_TO_ADDR
29649: LD_INT 4
29651: PUSH
29652: FOR_TO
29653: IFFALSE 29674
// SetSkill ( i , j , 10 ) ;
29655: LD_VAR 0 2
29659: PPUSH
29660: LD_VAR 0 3
29664: PPUSH
29665: LD_INT 10
29667: PPUSH
29668: CALL_OW 237
29672: GO 29652
29674: POP
29675: POP
// end ;
29676: GO 29625
29678: POP
29679: POP
// end ;
29680: LD_VAR 0 1
29684: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29685: LD_INT 0
29687: PPUSH
29688: PPUSH
29689: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29690: LD_ADDR_VAR 0 2
29694: PUSH
29695: LD_INT 22
29697: PUSH
29698: LD_OWVAR 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 21
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PPUSH
29721: CALL_OW 69
29725: PUSH
29726: FOR_IN
29727: IFFALSE 29768
// begin for j := 1 to 4 do
29729: LD_ADDR_VAR 0 3
29733: PUSH
29734: DOUBLE
29735: LD_INT 1
29737: DEC
29738: ST_TO_ADDR
29739: LD_INT 4
29741: PUSH
29742: FOR_TO
29743: IFFALSE 29764
// SetSkill ( i , j , 10 ) ;
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: LD_INT 10
29757: PPUSH
29758: CALL_OW 237
29762: GO 29742
29764: POP
29765: POP
// end ;
29766: GO 29726
29768: POP
29769: POP
// end ;
29770: LD_VAR 0 1
29774: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
29775: LD_INT 0
29777: PPUSH
// uc_side := your_side ;
29778: LD_ADDR_OWVAR 20
29782: PUSH
29783: LD_OWVAR 2
29787: ST_TO_ADDR
// uc_nation := nation ;
29788: LD_ADDR_OWVAR 21
29792: PUSH
29793: LD_VAR 0 1
29797: ST_TO_ADDR
// InitHc ;
29798: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29802: LD_INT 0
29804: PPUSH
29805: LD_VAR 0 2
29809: PPUSH
29810: LD_VAR 0 3
29814: PPUSH
29815: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
29819: CALL_OW 44
29823: PPUSH
29824: LD_INT 1
29826: PPUSH
29827: CALL_OW 51
// end ;
29831: LD_VAR 0 4
29835: RET
// export function hHackSpawnVehicle ; begin
29836: LD_INT 0
29838: PPUSH
// uc_side := your_side ;
29839: LD_ADDR_OWVAR 20
29843: PUSH
29844: LD_OWVAR 2
29848: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
29849: LD_ADDR_OWVAR 21
29853: PUSH
29854: LD_INT 1
29856: PPUSH
29857: LD_INT 3
29859: PPUSH
29860: CALL_OW 12
29864: ST_TO_ADDR
// InitVc ;
29865: CALL_OW 20
// case uc_nation of 1 :
29869: LD_OWVAR 21
29873: PUSH
29874: LD_INT 1
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 30026
29882: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
29883: LD_ADDR_OWVAR 37
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: LD_INT 4
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: PPUSH
29913: LD_INT 5
29915: PPUSH
29916: CALL_OW 12
29920: ARRAY
29921: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29922: LD_ADDR_OWVAR 39
29926: PUSH
29927: LD_INT 1
29929: PPUSH
29930: LD_INT 3
29932: PPUSH
29933: CALL_OW 12
29937: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
29938: LD_ADDR_OWVAR 38
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: LD_INT 2
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: PPUSH
29960: LD_INT 3
29962: PPUSH
29963: CALL_OW 12
29967: ARRAY
29968: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
29969: LD_ADDR_OWVAR 40
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 4
29979: PUSH
29980: LD_INT 5
29982: PUSH
29983: LD_INT 3
29985: PUSH
29986: LD_INT 7
29988: PUSH
29989: LD_INT 8
29991: PUSH
29992: LD_INT 9
29994: PUSH
29995: LD_INT 10
29997: PUSH
29998: LD_INT 6
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PPUSH
30015: LD_INT 9
30017: PPUSH
30018: CALL_OW 12
30022: ARRAY
30023: ST_TO_ADDR
// end ; 2 :
30024: GO 30291
30026: LD_INT 2
30028: DOUBLE
30029: EQUAL
30030: IFTRUE 30034
30032: GO 30158
30034: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30035: LD_ADDR_OWVAR 37
30039: PUSH
30040: LD_INT 11
30042: PUSH
30043: LD_INT 12
30045: PUSH
30046: LD_INT 13
30048: PUSH
30049: LD_INT 14
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PPUSH
30061: LD_INT 4
30063: PPUSH
30064: CALL_OW 12
30068: ARRAY
30069: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30070: LD_ADDR_OWVAR 39
30074: PUSH
30075: LD_INT 1
30077: PPUSH
30078: LD_INT 3
30080: PPUSH
30081: CALL_OW 12
30085: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30086: LD_ADDR_OWVAR 38
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PPUSH
30108: LD_INT 3
30110: PPUSH
30111: CALL_OW 12
30115: ARRAY
30116: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30117: LD_ADDR_OWVAR 40
30121: PUSH
30122: LD_INT 24
30124: PUSH
30125: LD_INT 26
30127: PUSH
30128: LD_INT 27
30130: PUSH
30131: LD_INT 28
30133: PUSH
30134: LD_INT 29
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PPUSH
30147: LD_INT 5
30149: PPUSH
30150: CALL_OW 12
30154: ARRAY
30155: ST_TO_ADDR
// end ; 3 :
30156: GO 30291
30158: LD_INT 3
30160: DOUBLE
30161: EQUAL
30162: IFTRUE 30166
30164: GO 30290
30166: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
30167: LD_ADDR_OWVAR 37
30171: PUSH
30172: LD_INT 21
30174: PUSH
30175: LD_INT 23
30177: PUSH
30178: LD_INT 22
30180: PUSH
30181: LD_INT 24
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PPUSH
30193: LD_INT 4
30195: PPUSH
30196: CALL_OW 12
30200: ARRAY
30201: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30202: LD_ADDR_OWVAR 39
30206: PUSH
30207: LD_INT 1
30209: PPUSH
30210: LD_INT 3
30212: PPUSH
30213: CALL_OW 12
30217: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
30218: LD_ADDR_OWVAR 38
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 3
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PPUSH
30236: LD_INT 2
30238: PPUSH
30239: CALL_OW 12
30243: ARRAY
30244: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
30245: LD_ADDR_OWVAR 40
30249: PUSH
30250: LD_INT 42
30252: PUSH
30253: LD_INT 43
30255: PUSH
30256: LD_INT 44
30258: PUSH
30259: LD_INT 46
30261: PUSH
30262: LD_INT 48
30264: PUSH
30265: LD_INT 47
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PPUSH
30279: LD_INT 6
30281: PPUSH
30282: CALL_OW 12
30286: ARRAY
30287: ST_TO_ADDR
// end ; end ;
30288: GO 30291
30290: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30291: CALL_OW 45
30295: PPUSH
30296: LD_INT 1
30298: PPUSH
30299: CALL_OW 51
// end ;
30303: LD_VAR 0 1
30307: RET
// export hInvincible ; every 1 do
30308: GO 30310
30310: DISABLE
// hInvincible := [ ] ;
30311: LD_ADDR_EXP 118
30315: PUSH
30316: EMPTY
30317: ST_TO_ADDR
30318: END
// every 10 do var i ;
30319: GO 30321
30321: DISABLE
30322: LD_INT 0
30324: PPUSH
// begin enable ;
30325: ENABLE
// if not hInvincible then
30326: LD_EXP 118
30330: NOT
30331: IFFALSE 30335
// exit ;
30333: GO 30379
// for i in hInvincible do
30335: LD_ADDR_VAR 0 1
30339: PUSH
30340: LD_EXP 118
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30377
// if GetLives ( i ) < 1000 then
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 256
30357: PUSH
30358: LD_INT 1000
30360: LESS
30361: IFFALSE 30375
// SetLives ( i , 1000 ) ;
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_INT 1000
30370: PPUSH
30371: CALL_OW 234
30375: GO 30345
30377: POP
30378: POP
// end ;
30379: PPOPN 1
30381: END
// export function hHackInvincible ; var i ; begin
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30386: LD_ADDR_VAR 0 2
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 21
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 21
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 69
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30486
// if IsSelected ( i ) then
30427: LD_VAR 0 2
30431: PPUSH
30432: CALL_OW 306
30436: IFFALSE 30484
// begin if i in hInvincible then
30438: LD_VAR 0 2
30442: PUSH
30443: LD_EXP 118
30447: IN
30448: IFFALSE 30468
// hInvincible := hInvincible diff i else
30450: LD_ADDR_EXP 118
30454: PUSH
30455: LD_EXP 118
30459: PUSH
30460: LD_VAR 0 2
30464: DIFF
30465: ST_TO_ADDR
30466: GO 30484
// hInvincible := hInvincible union i ;
30468: LD_ADDR_EXP 118
30472: PUSH
30473: LD_EXP 118
30477: PUSH
30478: LD_VAR 0 2
30482: UNION
30483: ST_TO_ADDR
// end ;
30484: GO 30424
30486: POP
30487: POP
// end ;
30488: LD_VAR 0 1
30492: RET
// export function hHackInvisible ; var i , j ; begin
30493: LD_INT 0
30495: PPUSH
30496: PPUSH
30497: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30498: LD_ADDR_VAR 0 2
30502: PUSH
30503: LD_INT 21
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: PUSH
30518: FOR_IN
30519: IFFALSE 30543
// if IsSelected ( i ) then
30521: LD_VAR 0 2
30525: PPUSH
30526: CALL_OW 306
30530: IFFALSE 30541
// ComForceInvisible ( i ) ;
30532: LD_VAR 0 2
30536: PPUSH
30537: CALL_OW 496
30541: GO 30518
30543: POP
30544: POP
// end ;
30545: LD_VAR 0 1
30549: RET
// export function hHackChangeYourSide ; begin
30550: LD_INT 0
30552: PPUSH
// if your_side = 8 then
30553: LD_OWVAR 2
30557: PUSH
30558: LD_INT 8
30560: EQUAL
30561: IFFALSE 30573
// your_side := 0 else
30563: LD_ADDR_OWVAR 2
30567: PUSH
30568: LD_INT 0
30570: ST_TO_ADDR
30571: GO 30587
// your_side := your_side + 1 ;
30573: LD_ADDR_OWVAR 2
30577: PUSH
30578: LD_OWVAR 2
30582: PUSH
30583: LD_INT 1
30585: PLUS
30586: ST_TO_ADDR
// end ;
30587: LD_VAR 0 1
30591: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30592: LD_INT 0
30594: PPUSH
30595: PPUSH
30596: PPUSH
// for i in all_units do
30597: LD_ADDR_VAR 0 2
30601: PUSH
30602: LD_OWVAR 3
30606: PUSH
30607: FOR_IN
30608: IFFALSE 30686
// if IsSelected ( i ) then
30610: LD_VAR 0 2
30614: PPUSH
30615: CALL_OW 306
30619: IFFALSE 30684
// begin j := GetSide ( i ) ;
30621: LD_ADDR_VAR 0 3
30625: PUSH
30626: LD_VAR 0 2
30630: PPUSH
30631: CALL_OW 255
30635: ST_TO_ADDR
// if j = 8 then
30636: LD_VAR 0 3
30640: PUSH
30641: LD_INT 8
30643: EQUAL
30644: IFFALSE 30656
// j := 0 else
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: LD_INT 0
30653: ST_TO_ADDR
30654: GO 30670
// j := j + 1 ;
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_VAR 0 3
30665: PUSH
30666: LD_INT 1
30668: PLUS
30669: ST_TO_ADDR
// SetSide ( i , j ) ;
30670: LD_VAR 0 2
30674: PPUSH
30675: LD_VAR 0 3
30679: PPUSH
30680: CALL_OW 235
// end ;
30684: GO 30607
30686: POP
30687: POP
// end ;
30688: LD_VAR 0 1
30692: RET
// export function hHackFog ; begin
30693: LD_INT 0
30695: PPUSH
// FogOff ( true ) ;
30696: LD_INT 1
30698: PPUSH
30699: CALL_OW 344
// end ;
30703: LD_VAR 0 1
30707: RET
// export function hHackApeman ; begin
30708: LD_INT 0
30710: PPUSH
// uc_side := your_side ;
30711: LD_ADDR_OWVAR 20
30715: PUSH
30716: LD_OWVAR 2
30720: ST_TO_ADDR
// uc_nation := 0 ;
30721: LD_ADDR_OWVAR 21
30725: PUSH
30726: LD_INT 0
30728: ST_TO_ADDR
// hc_name :=  ;
30729: LD_ADDR_OWVAR 26
30733: PUSH
30734: LD_STRING 
30736: ST_TO_ADDR
// hc_gallery :=  ;
30737: LD_ADDR_OWVAR 33
30741: PUSH
30742: LD_STRING 
30744: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
30745: LD_ADDR_OWVAR 31
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
// hc_class := class_apeman ;
30768: LD_ADDR_OWVAR 28
30772: PUSH
30773: LD_INT 12
30775: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30776: CALL_OW 44
30780: PPUSH
30781: LD_INT 1
30783: PPUSH
30784: CALL_OW 51
// end ;
30788: LD_VAR 0 1
30792: RET
// export function hHackBoom ; begin
30793: LD_INT 0
30795: PPUSH
// uc_side := your_side ;
30796: LD_ADDR_OWVAR 20
30800: PUSH
30801: LD_OWVAR 2
30805: ST_TO_ADDR
// uc_nation := 1 ;
30806: LD_ADDR_OWVAR 21
30810: PUSH
30811: LD_INT 1
30813: ST_TO_ADDR
// vc_chassis := us_morphling ;
30814: LD_ADDR_OWVAR 37
30818: PUSH
30819: LD_INT 5
30821: ST_TO_ADDR
// vc_engine := engine_siberite ;
30822: LD_ADDR_OWVAR 39
30826: PUSH
30827: LD_INT 3
30829: ST_TO_ADDR
// vc_control := control_computer ;
30830: LD_ADDR_OWVAR 38
30834: PUSH
30835: LD_INT 3
30837: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
30838: LD_ADDR_OWVAR 40
30842: PUSH
30843: LD_INT 8
30845: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30846: CALL_OW 45
30850: PPUSH
30851: LD_INT 1
30853: PPUSH
30854: CALL_OW 51
// end ;
30858: LD_VAR 0 1
30862: RET
